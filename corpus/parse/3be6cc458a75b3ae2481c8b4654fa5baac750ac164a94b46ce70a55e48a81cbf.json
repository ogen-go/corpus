{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/easeml/automl"
		},
		"file": {
			"name": "rest-api.yml",
			"size": 0,
			"path": "docs/dev/rest-api.yml",
			"byteSize": 77243,
			"content": "openapi: 3.0.0\nservers:\n  - url: /api/v1\n    description: Default Local Server\ninfo:\n  title: Ease.ml API\n  description: This is the REST API for interacting with the ease.ml service.\n  version: \"1.0.0\"\n  contact:\n    name: DS3Lab\n    email: bojan.karlas@inf.ethz.ch\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: users\n    description: |\n      Operations with users and authentication.\n  - name: processes\n    description: |\n      Operations with processes. All controller, scheduler and worker processes\n      are included here. This sub-path is visible only to administrators.\n  - name: datasets\n    description: |\n      Operations with datasets. Datasets can be uploaded/downloaded as tarball archives.\n      They consist of input and output data samples and their structure must conform\n      to a defined schema.\n  - name: modules\n    description: |\n      Operations with modules (i.e. models, objectives and optimizers). They are\n      stored as stateless Docker images.\n  - name: jobs\n    description: |\n      Operations with jobs. Jobs take a dataset and an objective function and perform\n      optimization to find the best model and hyperparameter configuration.\n  - name: tasks\n    description: |\n      Operations with tasks. Tasks are spawned from jobs. Each task has a specific\n      target model and specific hyperparameter configuration to train and evaluate.\npaths:\n  /users:\n    get:\n      parameters:\n        - name: id\n          in: query\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n          description: |\n            Comma separated list of user identifiers. If we want\n            to fetch specific users by their identifiers.\n        - name: status\n          in: query\n          schema:\n            type: string\n            enum: [active, archived]\n          description: Filter users by their status.\n        - $ref: '#/components/parameters/cursorParam'\n        - $ref: '#/components/parameters/limitParam'\n        - $ref: '#/components/parameters/orderByParam'\n        - $ref: '#/components/parameters/orderParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User'\n                  metadata:\n                    $ref: '#/components/schemas/CollectionMetadata'\n                  links:\n                    type: object\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '403':\n          $ref: '#/components/responses/403UnauthorizedAccess'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - users\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: list users\n      description: Returns all users that satisfy a given search criteria.\n    post:\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '201':\n          description: Resource created.\n          headers:\n            Location:\n              description: Location of the created resource.\n              schema:\n                type: string\n                format: uri\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '403':\n          $ref: '#/components/responses/403UnauthorizedAccess'\n        '409':\n          $ref: '#/components/responses/409Conflict'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - users\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: create user\n      description: Creates a new user.\n  /users/{id}:\n    get:\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/User'\n                  links:\n                    type: object\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - users\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: get specific user\n      description: Returns a specific user given the user identifier.\n    patch:\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: OK\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '403':\n          $ref: '#/components/responses/403UnauthorizedAccess'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '409':\n          $ref: '#/components/responses/409Conflict'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - users\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: update user\n      description: Updates the information about a user.\n  /users/login:\n    get:\n      parameters:\n        - name: id\n          in: header\n          required: true\n          schema:\n            type: string\n          description: User identifier.\n        - name: password\n          in: header\n          required: true\n          schema:\n            type: string\n          description: SHA1 hash of the user's password.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n        '401':\n          $ref: '#/components/responses/401BadLogin'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - users\n      summary: login as specific user\n      description: Logs a user in and if successful returns an API token.\n  /users/logout:\n    get:\n      responses:\n        '200':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - users\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: log the user out\n      description: Logs out the user with the given API key.\n  /processes:\n    get:\n      parameters:\n        - name: status\n          in: query\n          schema:\n            type: string\n            enum: [active, archived]\n          description: Filter processes by their status.\n        - name: type\n          in: query\n          schema:\n            type: string\n            enum: [controller, worker, scheduler]\n          description: Filter processes by their type.\n        - $ref: '#/components/parameters/cursorParam'\n        - $ref: '#/components/parameters/limitParam'\n        - $ref: '#/components/parameters/orderByParam'\n        - $ref: '#/components/parameters/orderParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Process'\n                  metadata:\n                    type: object\n                    properties:\n                      total-collection-size:\n                        type: integer\n                      total-result-size:\n                        type: integer\n                      returned-result-size:\n                        type: integer\n                  links:\n                    type: object\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '403':\n          $ref: '#/components/responses/403UnauthorizedAccess'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - processes\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: list processes\n      description: Returns all processes that satisfy a given search criteria.\n  /processes/{id}:\n    get:\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Process'\n                  links:\n                    type: object\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - processes\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: get specific process\n      description: Returns a specific process given the process identifier.\n  /processes/{id}/log:\n    get:\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: string\n                  links:\n                    type: object\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - processes\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: get log of specific process\n      description: Returns the log of the specific process.\n  /datasets:\n    get:\n      parameters:\n        - name: id\n          in: query\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n          description: |\n            Comma separated list of dataset identifiers. If we want\n            to fetch specific datasets by their identifiers. Dataset identifiers are\n            specified as `user-id/dataset-id`. In the query string we need to\n            replace `/` with `%2f`.\n        - name: user\n          in: query\n          schema:\n            type: string\n          description: Filter datasets by the user who owns them.\n        - name: status\n          in: query\n          schema:\n            type: string\n            enum: [created, transferred, validated, archived]\n          description: Filter datasets by their status.\n        - name: source\n          in: query\n          schema:\n            type: string\n            enum: [local, remote, upload]\n          description: Filter datasets by the source from which they were obtained.\n        - name: schema-in\n          in: query\n          schema:\n            type: string\n          description: |\n            Enables to filter datasets by the input schema. The content must be a\n            JSON object serialized as a string and encoded with the URL percent\n            encoding (see JavaScript function encodeURIComponent). It is advised to \n            remove all whitespaces from the serialized JSON representation before\n            performing URL encoding to reduce the query size.\n        - name: schema-out\n          in: query\n          schema:\n            type: string\n          description: |\n            Enables to filter datasets by the output schema. The content must be a\n            JSON object serialized as a string and encoded with the URL percent\n            encoding (see JavaScript function encodeURIComponent). It is advised to \n            remove all whitespaces from the serialized JSON representation before\n            performing URL encoding to reduce the query size.\n        - $ref: '#/components/parameters/cursorParam'\n        - $ref: '#/components/parameters/limitParam'\n        - $ref: '#/components/parameters/orderByParam'\n        - $ref: '#/components/parameters/orderParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Dataset'\n                  metadata:\n                    $ref: '#/components/schemas/CollectionMetadata'\n                  links:\n                    type: object\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '403':\n          $ref: '#/components/responses/403UnauthorizedAccess'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - datasets\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: list datasets\n      description: Returns all datasets that satisfy a given search criteria.\n    post:\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Dataset'\n      responses:\n        '201':\n          description: Resource created.\n          headers:\n            Location:\n              description: Location of the created resource.\n              schema:\n                type: string\n                format: uri\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '403':\n          $ref: '#/components/responses/403UnauthorizedAccess'\n        '409':\n          $ref: '#/components/responses/409Conflict'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - datasets\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: create dataset\n      description: Creates a new dataset.\n  /datasets/{user-id}/{dataset-id}:\n    get:\n      parameters:\n        - name: user-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the user.\n        - name: dataset-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the dataset.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Dataset'\n                  links:\n                    type: object\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - datasets\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: get specific dataset\n      description: Returns a specific dataset given the dataset identifier.\n    patch:\n      parameters:\n        - name: user-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the user.\n        - name: dataset-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the dataset.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Dataset'\n      responses:\n        '200':\n          description: OK\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '403':\n          $ref: '#/components/responses/403UnauthorizedAccess'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '409':\n          $ref: '#/components/responses/409Conflict'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - datasets\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: update dataset\n      description: Updates the information about a dataset.\n  /datasets/{user-id}/{dataset-id}/upload:\n    head:\n      parameters:\n        - name: user-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the user.\n        - name: dataset-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the dataset.\n        - name: Tus-Resumable\n          in: header\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          headers:\n            Upload-Offset:\n              schema:\n                type: integer\n              description: Indicates a byte offset within a resource.\n            Tus-Resumable:\n              schema:\n                type: string\n              description: Version of the TUS resumeable upload protocol.\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - datasets\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: get headers of uploadable resource\n      description: Gets status information about the ongoing upload.\n    patch:\n      parameters:\n        - name: user-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the user.\n        - name: dataset-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the dataset.\n        - name: Tus-Resumable\n          in: header\n          required: true\n          schema:\n            type: string\n          description: Version of the TUS resumeable upload protocol.\n        - name: Upload-Offset\n          in: header\n          required: true\n          schema:\n            type: integer\n          description: Byte offset within a resource.\n        - name: Content-Length\n          in: header\n          required: true\n          schema:\n            type: integer\n          description: The length of the request body in octets (8-bit bytes).\n      requestBody:\n        content:\n          application/offset+octet-stream:\n            schema:\n              type: string\n              format: binary\n      responses:\n        '204':\n          description: Successful upload.\n          headers:\n            Upload-Offset:\n              schema:\n                type: integer\n              description: Indicates a byte offset within a resource.\n            Tus-Resumable:\n              schema:\n                type: string\n              description: Version of the TUS resumeable upload protocol.\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '403':\n          $ref: '#/components/responses/403UnauthorizedAccess'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '409':\n          description: Conflict. Provided Upload-Offset doesn't match.\n        '412':\n          description: Precondition Failed.\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - datasets\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: upload dataset\n      description: |\n        Uploads a portion of a dataset based on the TUS resumeable upload protocol.\n  /datasets/{user-id}/{dataset-id}/download:\n    head:\n      parameters:\n        - name: user-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the user.\n        - name: dataset-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the dataset.\n      responses:\n        '200':\n          description: OK\n          headers:\n            Accept-Ranges:\n              schema:\n                type: string\n                example: bytes\n              description: Indicate the type of range request that is available.\n            Content-Type:\n              schema:\n                type: string\n                example: application/octet-stream\n              description: Content data type.\n            Content-Length:\n              schema:\n                type: integer\n                example: 20428\n              description: Total size of the downloadable resource.\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - datasets\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: get headers of downloadable resource\n      description: |\n        Returns the headers of the downloadable file to determine its size and ranges.\n    get:\n      parameters:\n        - name: user-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the user.\n        - name: dataset-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the dataset.\n        - name: Range\n          in: header\n          schema:\n            type: string\n            example: bytes=0-2499\n          description: |\n            If specified, the GET request will be a range request and will return\n            the specified portion of the file. The response for a successfull range\n            request is 206 instead of 200.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        '206':\n          $ref: '#/components/responses/206PartialContent'\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - datasets\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: download dataset\n      description: |\n        Downloads the dataset.\n  /modules:\n    get:\n      parameters:\n        - name: id\n          in: query\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n          description: |\n            Comma separated list of module identifiers. If we want\n            to fetch specific modules by their identifiers. Module identifiers are\n            specified as `user-id/module-id`. In the query string we need to\n            replace `/` with `%2f`.\n        - name: user\n          in: query\n          schema:\n            type: string\n          description: Filter modules by the user who owns them.\n        - name: status\n          in: query\n          schema:\n            type: string\n            enum: [created, active, archived]\n          description: Filter modules by their status.\n        - name: type\n          in: query\n          schema:\n            type: string\n            enum: [model, objective, optimizer]\n          description: Filter modules by their type.\n        - name: source\n          in: query\n          schema:\n            type: string\n            enum: [hub, local, remote, upload]\n          description: Filter modules by the source from which they were obtained.\n        - name: schema-in\n          in: query\n          schema:\n            type: string\n          description: |\n            Enables to filter datasets by the input schema. The content must be a\n            JSON object serialized as a string and encoded with the URL percent\n            encoding (see JavaScript function encodeURIComponent). It is advised to \n            remove all whitespaces from the serialized JSON representation before\n            performing URL encoding to reduce the query size.\n        - name: schema-out\n          in: query\n          schema:\n            type: string\n          description: |\n            Enables to filter datasets by the output schema. The content must be a\n            JSON object serialized as a string and encoded with the URL percent\n            encoding (see JavaScript function encodeURIComponent). It is advised to \n            remove all whitespaces from the serialized JSON representation before\n            performing URL encoding to reduce the query size.\n        - $ref: '#/components/parameters/cursorParam'\n        - $ref: '#/components/parameters/limitParam'\n        - $ref: '#/components/parameters/orderByParam'\n        - $ref: '#/components/parameters/orderParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Module'\n                  metadata:\n                    $ref: '#/components/schemas/CollectionMetadata'\n                  links:\n                    type: object\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '403':\n          $ref: '#/components/responses/403UnauthorizedAccess'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - modules\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: list modules\n      description: Returns all modules that satisfy a given search criteria.\n    post:\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Module'\n      responses:\n        '201':\n          description: Resource created.\n          headers:\n            Location:\n              description: Location of the created resource.\n              schema:\n                type: string\n                format: uri\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '403':\n          $ref: '#/components/responses/403UnauthorizedAccess'\n        '409':\n          $ref: '#/components/responses/409Conflict'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - modules\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: create module\n      description: Creates a new module.\n  /modules/{user-id}/{module-id}:\n    get:\n      parameters:\n        - name: user-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the user.\n        - name: module-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the module.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Module'\n                  links:\n                    type: object\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - modules\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: get specific module\n      description: Returns a specific module given the module identifier.\n    patch:\n      parameters:\n        - name: user-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the user.\n        - name: module-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the module.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Module'\n      responses:\n        '200':\n          description: OK\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '403':\n          $ref: '#/components/responses/403UnauthorizedAccess'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '409':\n          $ref: '#/components/responses/409Conflict'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - modules\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: update module\n      description: Updates the information about a module.\n  /modules/{user-id}/{module-id}/upload:\n    head:\n      parameters:\n        - name: user-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the user.\n        - name: module-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the module.\n        - name: Tus-Resumable\n          in: header\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          headers:\n            Upload-Offset:\n              schema:\n                type: integer\n              description: Indicates a byte offset within a resource.\n            Tus-Resumable:\n              schema:\n                type: string\n              description: Version of the TUS resumeable upload protocol.\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - modules\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: get headers of uploadable resource\n      description: Gets status information about the ongoing upload.\n    patch:\n      parameters:\n        - name: user-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the user.\n        - name: module-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the module.\n        - name: Tus-Resumable\n          in: header\n          required: true\n          schema:\n            type: string\n          description: Version of the TUS resumeable upload protocol.\n        - name: Upload-Offset\n          in: header\n          required: true\n          schema:\n            type: integer\n          description: Byte offset within a resource.\n        - name: Content-Length\n          in: header\n          required: true\n          schema:\n            type: integer\n          description: The length of the request body in octets (8-bit bytes).\n      requestBody:\n        content:\n          application/offset+octet-stream:\n            schema:\n              type: string\n              format: binary\n      responses:\n        '204':\n          description: Successful upload.\n          headers:\n            Upload-Offset:\n              schema:\n                type: integer\n              description: Indicates a byte offset within a resource.\n            Tus-Resumable:\n              schema:\n                type: string\n              description: Version of the TUS resumeable upload protocol.\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '403':\n          $ref: '#/components/responses/403UnauthorizedAccess'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '409':\n          description: Conflict. Provided Upload-Offset doesn't match.\n        '412':\n          description: Precondition Failed.\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - modules\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: upload dataset\n      description: |\n        Uploads a portion of a module based on the TUS resumeable upload protocol.\n  /modules/{user-id}/{module-id}/download:\n    head:\n      parameters:\n        - name: user-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the user.\n        - name: module-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the dataset.\n      responses:\n        '200':\n          description: OK\n          headers:\n            Accept-Ranges:\n              schema:\n                type: string\n                example: bytes\n              description: Indicate the type of range request that is available.\n            Content-Type:\n              schema:\n                type: string\n                example: application/octet-stream\n              description: Content data type.\n            Content-Length:\n              schema:\n                type: integer\n                example: 20428\n              description: Total size of the downloadable resource.\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - modules\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: get headers of downloadable resource\n      description: |\n        Returns the headers of the downloadable file to determine its size and ranges.\n    get:\n      parameters:\n        - name: user-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the user.\n        - name: module-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the module.\n        - name: Range\n          in: header\n          schema:\n            type: string\n            example: bytes=0-2499\n          description: |\n            If specified, the GET request will be a range request and will return\n            the specified portion of the file. The response for a successfull range\n            request is 206 instead of 200.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        '206':\n          $ref: '#/components/responses/206PartialContent'\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - modules\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: download module\n      description: |\n        Downloads the module.\n  /jobs:\n    get:\n      parameters:\n        - name: id\n          in: query\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n          description: |\n            Comma separated list of job identifiers. If we want\n            to fetch specific jobs by their identifiers.\n        - name: user\n          in: query\n          schema:\n            type: string\n          description: Filter jobs by the user who owns them.\n        - name: dataset\n          in: query\n          schema:\n            type: string\n          description: |\n            Filter jobs by their dataset. Dataset identifiers are specified as\n            `user-id/dataset-id`. In the query string we need to replace `/` with `%2f`.\n        - name: model\n          in: query\n          schema:\n            type: string\n          description: |\n            Filter jobs by model. A job is returned if the specified\n            model appears in their list of models. Module identifiers are specified as\n            `user-id/module-id`. In the query string we need to replace `/` with `%2f`.\n        - name: objective\n          in: query\n          schema:\n            type: string\n          description: |\n            Filter jobs by their model. Module identifiers are specified as\n            `user-id/module-id`. In the query string we need to replace `/` with `%2f`.\n        - name: status\n          in: query\n          schema:\n            type: string\n            enum: [scheduled, running, paused, completed, terminating, terminated]\n          description: Filter jobs by their status.\n        - name: schema\n          in: query\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  input:\n                    type: object\n                    nullable: true\n                  output:\n                    type: object\n                    nullable: true\n                description: Schema definition with input and output data types.\n          description: |\n            Enables to filter jobs by the schema. The content must be a\n            JSON object serialized as a string and encoded with the URL percent\n            encoding (see JavaScript function encodeURIComponent). It is advised to \n            remove all whitespaces from the serialized JSON representation before\n            performing URL encoding to reduce the query size.\n        - $ref: '#/components/parameters/cursorParam'\n        - $ref: '#/components/parameters/limitParam'\n        - $ref: '#/components/parameters/orderByParam'\n        - $ref: '#/components/parameters/orderParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Job'\n                  metadata:\n                    $ref: '#/components/schemas/CollectionMetadata'\n                  links:\n                    type: object\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '403':\n          $ref: '#/components/responses/403UnauthorizedAccess'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - jobs\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: list jobs\n      description: Returns all jobs that satisfy a given search criteria.\n    post:\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Job'\n      responses:\n        '201':\n          description: Resource created.\n          headers:\n            Location:\n              description: Location of the created resource.\n              schema:\n                type: string\n                format: uri\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '403':\n          $ref: '#/components/responses/403UnauthorizedAccess'\n        '409':\n          $ref: '#/components/responses/409Conflict'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - jobs\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: create job\n      description: Creates a new job.\n  /jobs/{id}:\n    get:\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Job'\n                  links:\n                    type: object\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - jobs\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: get specific job\n      description: Returns a specific job given the job identifier.\n    patch:\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Job'\n      responses:\n        '200':\n          description: OK\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '403':\n          $ref: '#/components/responses/403UnauthorizedAccess'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '409':\n          $ref: '#/components/responses/409Conflict'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - jobs\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: update job\n      description: Updates the information about a job.\n  /tasks:\n    get:\n      parameters:\n        - name: id\n          in: query\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n          description: |\n            Comma separated list of task identifiers. If we want\n            to fetch specific tasks by their identifiers. Task identifiers are\n            specified as `job-id/task-id`. In the query string we need to\n            replace `/` with `%2f`.\n        - name: job\n          in: query\n          schema:\n            type: string\n          description: Filter tasks by the job that they belong to.\n        - name: user\n          in: query\n          schema:\n            type: string\n          description: Filter tasks by the user who owns them.\n        - name: process\n          in: query\n          schema:\n            type: string\n          description: Filter tasks by the process on which they are running.\n        - name: dataset\n          in: query\n          schema:\n            type: string\n          description: |\n            Filter tasks by their dataset. Dataset identifiers are specified as\n            `user-id/dataset-id`. In the query string we need to replace `/` with `%2f`.\n        - name: model\n          in: query\n          schema:\n            type: string\n          description: |\n            Filter tasks by their model. Module identifiers are specified as\n            `user-id/dataset-id`. In the query string we need to replace `/` with `%2f`.\n        - name: objective\n          in: query\n          schema:\n            type: string\n          description: |\n            Filter tasks by their model. Module identifiers are specified as\n            `user-id/module-id`. In the query string we need to replace `/` with `%2f`.\n        - name: status\n          in: query\n          schema:\n            type: string\n            enum: [scheduled, running, paused, completed, terminated]\n          description: Filter tasks by their status.\n        - name: schema\n          in: query\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  input:\n                    type: object\n                    nullable: true\n                  output:\n                    type: object\n                    nullable: true\n                description: Schema definition with input and output data types.\n          description: |\n            Enables to filter tasks by the schema. The content must be a\n            JSON object serialized as a string and encoded with the URL percent\n            encoding (see JavaScript function encodeURIComponent). It is advised to \n            remove all whitespaces from the serialized JSON representation before\n            performing URL encoding to reduce the query size.\n        - $ref: '#/components/parameters/cursorParam'\n        - $ref: '#/components/parameters/limitParam'\n        - $ref: '#/components/parameters/orderByParam'\n        - $ref: '#/components/parameters/orderParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Task'\n                  metadata:\n                    $ref: '#/components/schemas/CollectionMetadata'\n                  links:\n                    type: object\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '403':\n          $ref: '#/components/responses/403UnauthorizedAccess'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - tasks\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: list tasks\n      description: Returns all tasks that satisfy a given search criteria.\n  /tasks/{job-id}/{task-id}:\n    get:\n      parameters:\n        - name: job-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the job.\n        - name: task-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the task.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Task'\n                  links:\n                    type: object\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - tasks\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: get specific task\n      description: Returns a specific task given the task identifier.\n  /tasks/{job-id}/{task-id}/log:\n    get:\n      parameters:\n        - name: job-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the job.\n        - name: task-id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: string\n                  links:\n                    type: object\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - tasks\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: get log of specific task\n      description: Returns the log of the specific task.\n  /tasks/{job-id}/{task-id}/predictions/{subpath}:\n    get:\n      parameters:\n        - name: job-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the job.\n        - name: task-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the task.\n        - name: subpath\n          in: path\n          required: false\n          schema:\n            type: string\n          description: |\n            Represents the subpath of the predictions directory. Empty string corresponds to the root directory of\n            predictions. If a subpath corresponds to a file, a file will be returned. If it corresponds to a directory,\n            a JSON result containing directory contents will be returned. If a directory name is appended with\n            `.tar`, `.tar.gz` or `.zip` then a corresponding directory will be packed as a given archive type and\n            returned.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: string\n                  links:\n                    type: object\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - tasks\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: get the predictions of the specific task\n      description: Gives access to the predictions of a given task.\n  /tasks/{job-id}/{task-id}/parameters/{subpath}:\n    get:\n      parameters:\n        - name: job-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the job.\n        - name: task-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the task.\n        - name: subpath\n          in: path\n          required: false\n          schema:\n            type: string\n          description: |\n            Represents the subpath of the parameters directory. Empty string corresponds to the root directory of\n            parameters. If a subpath corresponds to a file, a file will be returned. If it corresponds to a directory,\n            a JSON result containing directory contents will be returned. If a directory name is appended with\n            `.tar`, `.tar.gz` or `.zip` then a corresponding directory will be packed as a given archive type and\n            returned.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: string\n                  links:\n                    type: object\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - tasks\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: get the parameters of the specific task\n      description: Gives access to the parameters of a given task.\n  /tasks/{job-id}/{task-id}/image/download:\n    head:\n      parameters:\n        - name: job-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the job.\n        - name: task-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the task.\n      responses:\n        '200':\n          description: OK\n          headers:\n            Accept-Ranges:\n              schema:\n                type: string\n                example: bytes\n              description: Indicate the type of range request that is available.\n            Content-Type:\n              schema:\n                type: string\n                example: application/octet-stream\n              description: Content data type.\n            Content-Length:\n              schema:\n                type: integer\n                example: 20428\n              description: Total size of the downloadable resource.\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - tasks\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: get headers of downloadable resource\n      description: |\n        Returns the headers of the downloadable file to determine its size and ranges.\n    get:\n      parameters:\n        - name: job-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the job.\n        - name: task-id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Identifier of the task.\n        - name: Range\n          in: header\n          schema:\n            type: string\n            example: bytes=0-2499\n          description: |\n            If specified, the GET request will be a range request and will return\n            the specified portion of the file. The response for a successfull range\n            request is 206 instead of 200.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        '206':\n          $ref: '#/components/responses/206PartialContent'\n        '400':\n          $ref: '#/components/responses/400BadInput'\n        '401':\n          $ref: '#/components/responses/401BadAccessToken'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500ServerError'\n      tags:\n        - tasks\n      security:\n        - ApiKeyHeader: []\n        - ApiKeyQuery: []\n      summary: download Docker image trained by this task\n      description: |\n        Downloads the Docker image trained by this task.\ncomponents:\n  securitySchemes:\n    ApiKeyHeader:\n      type: apiKey\n      in: header\n      name: X-API-KEY\n    ApiKeyQuery:\n      type: apiKey\n      in: query\n      name: api-key\n  parameters:\n    cursorParam:\n      name: cursor\n      in: query\n      required: false\n      schema:\n        type: string\n        default: \"\"\n      description: |\n        String representing the cursor which is used to retrieve a specific page\n        in the results. Empty string defaults to first page.\n    limitParam:\n      name: limit\n      in: query\n      required: false\n      schema:\n        type: integer\n        format: int32\n        minimum: 1\n        maximum: 100\n        default: 20\n      description: Maximum number of items to return.\n    orderByParam:\n      name: order-by\n      in: query\n      required: false\n      schema:\n        type: string\n        default: ''\n      description: Field to use for sorting. Empty string means no ordering.\n    orderParam:\n      name: order\n      in: query\n      required: false\n      schema:\n        type: string\n        enum: [asc, desc]\n        default: asc\n      description: Ordering to apply to sorted results (if applicable).\n    fieldsParam:\n      name: fields\n      in: query\n      required: false\n      style: form\n      explode: false\n      schema:\n        type: array\n        nullable: true\n        items:\n          type: string\n        default: null\n      description: |\n        Fields to be selected from the response object. Used to minimize data transfer.\n  responses:\n    206PartialContent:\n      description: Partial Content\n      headers:\n        Accept-Ranges:\n          schema:\n            type: string\n            example: bytes\n          description: Indicate the type of range request that is available.\n        Content-Type:\n          schema:\n            type: string\n            example: application/octet-stream\n          description: Content data type.\n        Content-Length:\n          schema:\n            type: integer\n            example: 20428\n          description: Total size of the downloadable resource.\n        Content-Range:\n          schema:\n            type: string\n            example: bytes 0-2499/20428\n          description: Indicates which part of the resource is returned.\n      content:\n        application/octet-stream:\n          schema:\n            type: string\n            format: binary\n    400BadInput:\n      description: Bad input parameter.\n      content:\n        text/plain:\n          schema:\n            type: string\n            example: The operation resulted with an error.\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorMessage'\n    401BadLogin:\n      description: The provided login credentials are invalid.\n      content:\n        text/plain:\n          schema:\n            type: string\n            example: The operation resulted with an error.\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorMessage'\n    401BadAccessToken:\n      description: Access token is missing or is invalid.\n      content:\n        text/plain:\n          schema:\n            type: string\n            example: The operation resulted with an error.\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorMessage'\n    403UnauthorizedAccess:\n      description: Unauthorized access. User has read rights but not write rights.\n      content:\n        text/plain:\n          schema:\n            type: string\n            example: The operation resulted with an error.\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorMessage'\n    404NotFound:\n      description: The specified resource was not found or the user doesn't have read rights.\n      content:\n        text/plain:\n          schema:\n            type: string\n            example: The operation resulted with an error.\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorMessage'\n    409Conflict:\n      description: The provided ID is already taken.\n      content:\n        text/plain:\n          schema:\n            type: string\n            example: The operation resulted with an error.\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorMessage'\n    500ServerError:\n      description: Internal server error.\n      content:\n        text/plain:\n          schema:\n            type: string\n            example: The operation resulted with an error.\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorMessage'\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: string\n          pattern: \"^[a-z0-9_]+$\"\n          description: Unique human-readable identifier of the user.\n          example: alex\n        name:\n          type: string\n          description: Full name of the user.\n          example: Alex Newton\n        status:\n          type: string\n          enum: [active, archived]\n          description: Status of the user signifying if the user is archived or not.\n          example: active\n      required:\n        - id\n    Process:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: Unique identifier of the process object.\n          example: 6f483e258e62\n        process-id:\n          type: integer\n          format: int64\n          description: Process identifier (PID) on the host machine.\n          example: 231\n        host-id:\n          type: string\n          format: uuid\n          description: Unique identifier of the host machine. Taken from \"/etc/machine-id\".\n          example: 6b110be1615546d2b785072f6c30f139\n        host-address:\n          type: string\n          format: ipv4\n          description: Hostname IP address.\n          example: 123.456.78.90\n        start-time:\n          type: string\n          format: date-time\n          description: Time when the process was sterted.\n          example: \"2017-07-21T17:32:28Z\"\n        type:\n          type: string\n          enum: [controller, worker, scheduler]\n          description: Type of the process.\n          example: controller\n        resource:\n          type: string\n          enum: [cpu, gpu]\n          description: Type of resource available to the process. Useful for workers and schedulers.\n          example: cpu\n        status:\n          type: string\n          enum: [idle, working, terminated]\n          description: Status of the process.\n          example: working\n      required:\n        - id\n    Dataset:\n      type: object\n      properties:\n        id:\n          type: string\n          pattern: \"^[a-z0-9]+$\"\n          description: Identifier of the dataset. Must be unique for a given user.\n          example: cifar10\n        user:\n          type: string\n          pattern: \"^[a-z0-9_]+$\"\n          description: Identifier of the user to which the dataset belongs.\n          example: alex\n        name:\n          type: string\n          description: Longer (descriptive) name of the dataset.\n          example: CIFAR-10\n        description:\n          type: string\n          description: Description of the dataset written in Markdown.\n          example: |\n            The CIFAR-10 dataset ([Canadian Institute For Advanced Research](http://www.cifar.ca/))\n            is a collection of images that are commonly used to train machine learning\n            and computer vision algorithms.\n        schema-in:\n          type: string\n          description: JSON string representing the input schema definition.\n        schema-out:\n          type: string\n          description: JSON string representing the output schema definition.\n        source:\n          type: string\n          enum: [upload, local, download]\n          description: |\n            Source of the module image. The dataset can be:\n            (1) `upload` - Uploaded through an upload link.\n            (2) `local` - Accessible through a mounted file system.\n            (3) `download` - Downloaded from a remote location.\n        source-address:\n          type: string\n          description: |\n            URI of the dataset source. If `null` then the dataset is uploaded through an\n            upload link. Otherwise it must begin with either \"file://\" (designating\n            an absolute path on a locally mounted file system) or \"http://\" or \"ftp://\"\n            (designating an address and a transport protocol). The address must be\n            accessible without authentication.\n          example: https://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz\n        creation-time:\n          type: string\n          format: date-time\n          description: Time when the dataset resource was created. Read only.\n          example: \"2017-07-21T17:32:28Z\"\n        status:\n          type: string\n          enum: [created, transferred, validated, archived]\n          description: \u003e\n            Status of the dataset. Read only. Can be:\n            (1) `created` - Dataset registered with schema description.\n            (2) `transferred` - Dataset transfer completed. Schema may not match the dataset.\n            (3) `validated` - After we check that the schema matches the content.\n            (4) `archived` - We cannot use it in future jobs.\n          example: validated\n      required:\n        - id\n        - user\n    Module:\n      type: object\n      properties:\n        id:\n          type: string\n          pattern: \"^[a-z0-9]+$\"\n          description: Identifier of the module. Must be unique for a given user.\n          example: resnet\n        user:\n          type: string\n          pattern: \"^[a-z0-9_]+$\"\n          description: Identifier of the user to which the module belongs.\n          example: alex\n        type:\n          type: string\n          enum: [model, objective, optimizer]\n          description: Type of the module.\n          example: model\n        name:\n          type: string\n          description: Longer (descriptive) name of the module.\n          example: ResNet\n        description:\n          type: string\n          description: Description of the dataset written in Markdown.\n          example: |\n            The Deep Residual Network is a neural network acthitecture that enables\n            training very deep networks of hudreds or even thousands of layers. It achieves\n            this by using so called residual blocks. Each block has several stacked layers\n            and an ADD unit between the output of the top layer of the stack and the input\n            of the bottom layer. The original paper is [He et al. - Deep Residual Learning\n            for Image Recognition](https://arxiv.org/abs/1512.03385).\n        schema-in:\n          type: string\n          description: JSON string representing the input schema definition.\n        schema-out:\n          type: string\n          description: JSON string representing the output schema definition.\n        source:\n          type: string\n          enum: [upload, local, download, registry]\n          description: |\n            Source of the module image. The image can be:\n            (1) `upload` - Uploaded through an upload link.\n            (2) `local` - Accessible through a mounted file system.\n            (3) `download` - Downloaded from a remote location.\n            (4) `registry` - Pulled from a Docker registry (such as Docker hub).\n        source-address:\n          type: string\n          description: |\n            URI of the module source. If the dataset is uploaded through an upload\n            link then it is `null`. Otherwise it begins with either \"file://\" (designating\n            an absolute path on a locally mounted file system), \"http://\" or \"ftp://\"\n            (designating an address and a transport protocol) or \"hub://\" (designating\n            the Docker hub registry). The address must be accessible without authentication.\n          example: hub://easeml/resnet\n        creation-time:\n          type: string\n          format: date-time\n          description: Time when the module resource was created. Read only.\n          example: \"2017-07-21T17:32:28Z\"\n        status:\n          type: string\n          enum: [created, active, archived]\n          description: \u003e\n            Status of the module. Can be:\n            (1) `created` - Module resource created but image not yet transferred.\n            (2) `active` - Module image transfer completed. Ready for usage.\n            (3) `archived` - We cannot use it in future jobs. Read only.\n          example: active\n      required:\n        - id\n        - user\n    Job:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: Identifier of a job.\n          example: 054b89056d0c\n        user:\n          type: string\n          pattern: \"^[a-z0-9_]+$\"\n          description: Identifier of the user that owns the job.\n          example: alex\n        dataset:\n          type: string\n          pattern: \"^[a-z0-9_]+\\/[a-z0-9_]+\"\n          description: Identifier of the dataset on which the job is running.\n          example: alex/cifar10\n        models:\n          type: array\n          items:\n            type: string\n            pattern: \"^[a-z0-9_]+\\/[a-z0-9_]+\"\n            example: alex/resnet\n          description: List of identifiers of all applicable models.\n        accept-new-models:\n          type: boolean\n          description: |\n            If set to `true` (default) then whenever a new model is added, if it is\n            applicable to the dataset it will be automatically added to\n            the `models` list.\n        objective:\n          type: string\n          pattern: \"^[a-z0-9_]+\\/[a-z0-9_]+\"\n          example: master/categorical-crossentopy\n          description: |\n            Identifier of the objective used to evaluate models in this job.\n        alt-objectives:\n          type: array\n          items:\n            type: string\n            pattern: \"^[a-z0-9_]+\\/[a-z0-9_]+\"\n            example: master/categorical-crossentopy\n          description: |\n            Additional objectives to evaluate on the predictions. These don't impact\n            the optimization. Can be empty.\n        creation-time:\n          type: string\n          format: date-time\n          description: Time when the job resource was created. Read only.\n          example: \"2017-07-21T17:32:28Z\"\n        running-time:\n          type: object\n          properties:\n            start:\n              type: string\n              nullable: true\n              format: date-time\n              example: \"2017-07-21T17:32:28Z\"\n            end:\n              type: string\n              nullable: true\n              format: date-time\n              example: \"2017-07-21T17:32:28Z\"\n          description: |\n            Moment when the job entered and finished the `running` state. Read only.\n        running-duration:\n          type: integer\n          description: |\n            Time that the job spent in the `running` state (in milliseconds).\n            This is a computed field. The time spent in the `paused` state is deduced.\n            This can cause errors as the tasks can enter a `paused` state with a delay\n            because their current process cannot be interrupted. Therefore,\n            this field's value is not exact.\n          example: 212343\n        status:\n          type: string\n          enum: [scheduled, running, paused, completed, terminating, terminated]\n          description: Status of the job. Read only.\n      required:\n        - id\n    Task:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Identifier of a task.\n          example: 1\n        job:\n          type: string\n          format: uuid\n          description: Identifier of a job that this task was spawned from.\n          example: 054b89056d0c\n        process:\n          type: string\n          format: uuid\n          description: Identifier of the process that is handling the task.\n          example: 6f483e258e62\n        model:\n          type: string\n          pattern: \"^[a-z0-9_]+\\/[a-z0-9_]+\"\n          example: master/resnet\n          description: |\n            Identifier of the model used that is targeted by this task.\n        objective:\n          type: string\n          pattern: \"^[a-z0-9_]+\\/[a-z0-9_]+\"\n          example: master/categorical-crossentopy\n          description: |\n            Identifier of the objective used to evaluate the model in this task.\n        dataset:\n          type: string\n          pattern: \"^[a-z0-9_]+\\/[a-z0-9_]+\"\n          description: Identifier of the dataset on which the task is running.\n          example: alex/cifar10\n        user:\n          type: string\n          pattern: \"^[a-z0-9_]+$\"\n          description: Identifier of the user that owns the job that this task was spawned from.\n          example: alex\n        config:\n          type: object\n          description: JSON configuration that is used to initialize the model.\n        quality:\n          type: number\n          format: float\n          nullable: true\n          description: |\n            Value of the quality metric of the trained model obtained though the objective\n            function. Available after the `evaluating` stage is finished. Otherwise it\n            is `null`.\n        quality-alt:\n          type: array\n          items:\n            type: number\n            format: float\n          description: Quality metric of additional objective (if defined in the job).\n        status:\n          type: string\n          enum: [scheduled, running, paused, completed, terminated]\n          description: Status of the task.\n        stage:\n          type: string\n          enum: [training, predicting, evaluating]\n          description: Stage of the task. Invalid if the status is not `running` or `paused`.\n        stage-times:\n          type: object\n          properties:\n            training:\n              type: object\n              properties:\n                start:\n                  type: string\n                  nullable: true\n                  format: date-time\n                  example: \"2017-07-21T17:32:28Z\"\n                end:\n                  type: string\n                  nullable: true\n                  format: date-time\n                  example: \"2017-07-21T17:32:28Z\"\n            predicting:\n              type: object\n              properties:\n                start:\n                  type: string\n                  nullable: true\n                  format: date-time\n                  example: \"2017-07-21T17:32:28Z\"\n                end:\n                  type: string\n                  nullable: true\n                  format: date-time\n                  example: \"2017-07-21T17:32:28Z\"\n            evaluating:\n              type: object\n              properties:\n                start:\n                  type: string\n                  nullable: true\n                  format: date-time\n                  example: \"2017-07-21T17:32:28Z\"\n                end:\n                  type: string\n                  nullable: true\n                  format: date-time\n                  example: \"2017-07-21T17:32:28Z\"\n          description: Start and end times of all the stages.\n        stage-durations:\n          type: object\n          properties:\n            training:\n              type: integer\n              nullable: true\n              example: 212343\n            predicting:\n              type: integer\n              nullable: true\n              example: 46848\n            evaluating:\n              type: integer\n              nullable: true\n              example: 45465\n          description: |\n            Durations of all the stages (in milliseconds). This is a computed field.\n        running-duration:\n          type: integer\n          description: |\n            Time that the job spent in the `running` state (in milliseconds).\n            This is a computed field.\n        creation-time:\n          type: string\n          format: date-time\n          description: Time when the task was created (scheduled).\n          example: \"2017-07-21T17:32:28Z\"\n      required:\n        - id\n        - job\n    ErrorMessage:\n      type: object\n      properties:\n        message:\n          type: string\n          example: The operation resulted with an error.\n    CollectionMetadata:\n      type: object\n      properties:\n        total-collection-size:\n          type: integer\n          description: Number of items in the collection that is being accessed.\n        total-result-size:\n          type: integer\n          description: Number of items in the total query result.\n        returned-result-size:\n          type: integer\n          description: Number of items in the returned paginated result.\n",
			"canonicalURL": "/github.com/easeml/automl@33a8802be4787a11aa3fbee1d95893e343acde16/-/blob/docs/dev/rest-api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/easeml/automl/blob/33a8802be4787a11aa3fbee1d95893e343acde16/docs/dev/rest-api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/tasks/{job-id}/{task-id}/parameters/{subpath}\": get: parameters: parse parameter \"subpath\": at docs/dev/rest-api.yml:1683:21: path parameters must be required"
}