{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/haiku/haikudepotserver"
		},
		"file": {
			"name": "repository.yaml",
			"size": 0,
			"path": "haikudepotserver-api2/src/main/resources/api2/repository.yaml",
			"byteSize": 20091,
			"content": "# Copyright 2022, Andrew Lindesay\n# Distributed under the terms of the MIT License.\n\nopenapi: 3.0.3\ninfo:\n  title: HDS Repository API\n  version: \"2.0\"\ntags:\n  - name: repository\npaths:\n\n  /__api/v2/captcha/get-repositories:\n    description: \u003e\n      This method will return a list of all of the repositories which exist in the system.\n      Minimal data is returned and it is expected that the caller will use the\n      {@link #getRepository(GetRepositoryRequest)} to get specific details for repositories\n      for which finer detail is required.\n    post:\n      tags:\n        - repository\n      operationId: getRepositories\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/getRepositoriesRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The result data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/getRepositoriesResponseEnvelope\"\n\n  /__api/v2/captcha/search-repositories:\n    description: \u003e\n      This method will search the repositories according to the supplied criteria and will\n      return a list of those found.  Any user is able to see the repositories.\n    post:\n      tags:\n        - repository\n      operationId: searchRepositories\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/searchRepositoriesRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The result data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/searchRepositoriesResponseEnvelope\"\n\n  /__api/v2/captcha/get-repository:\n    description: \u003e\n      This method will return the repository details for the repository identified by the\n      code in the request object.\n    post:\n      tags:\n        - repository\n      operationId: getRepository\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/getRepositoryRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The result data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/getRepositoryResponseEnvelope\"\n\n  /__api/v2/captcha/update-repository:\n    description: \u003e\n      This method will update the repository.  As well as the data to update, it also includes a 'filter' that\n      defines the fields that should be updated in this request.\n    post:\n      tags:\n        - repository\n      operationId: updateRepository\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/updateRepositoryRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The result data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/updateRepositoryResponseEnvelope\"\n\n  /__api/v2/captcha/trigger-import-repository:\n    description: \u003e\n      This method will trigger the import process for a repository.\n    post:\n      tags:\n        - repository\n      operationId: triggerImportRepository\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/triggerImportRepositoryRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The result data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/triggerImportRepositoryResponseEnvelope\"\n\n  /__api/v2/captcha/create-repository:\n    description: \u003e\n      This method will create a repository.  This method will throw\n      {@link ObjectNotFoundException} if the architecture identified by a\n      supplied code is not able to be found as an architecture.\n    post:\n      tags:\n        - repository\n      operationId: createRepository\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/createRepositoryRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The result data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/createRepositoryResponseEnvelope\"\n\n  /__api/v2/captcha/get-repository-source:\n    description: \u003e\n      Returns details of the repository source.\u003c/p\u003e\n      @throws ObjectNotFoundException is the repository source is not available.\n    post:\n      tags:\n        - repository\n      operationId: getRepositorySource\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/getRepositorySourceRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The result data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/getRepositorySourceResponseEnvelope\"\n\n  /__api/v2/captcha/update-repository-source:\n    description: \u003e\n      Allows the repository source to be updated.\u003c/p\u003e\n      @throws ObjectNotFoundException if the repository source was not able to be found given the code supplied.\n    post:\n      tags:\n        - repository\n      operationId: updateRepositorySource\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/updateRepositorySourceRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The result data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/updateRepositorySourceResponseEnvelope\"\n\n  /__api/v2/captcha/create-repository-source:\n    description: \u003e\n      Creates the repository source.\n    post:\n      tags:\n        - repository\n      operationId: createRepositorySource\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/createRepositorySourceRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The result data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/createRepositorySourceResponseEnvelope\"\n\n  /__api/v2/captcha/create-repository-source-mirror:\n    description: \u003e\n      Creates a new mirror for a repository source.\n    post:\n      tags:\n        - repository\n      operationId: createRepositorySourceMirror\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/createRepositorySourceMirrorRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The result data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/createRepositorySourceMirrorResponseEnvelope\"\n\n  /__api/v2/captcha/update-repository-source-mirror:\n    description: \u003e\n      Updates an existing mirror.  The mirror should be identified by its code.\n      A number of fields can be supplied to change.  The changes that are applied\n      are determined by a set of update filters that should be supplied with the\n      request.\n    post:\n      tags:\n        - repository\n      operationId: updateRepositorySourceMirror\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/updateRepositorySourceMirrorRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The result data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/updateRepositorySourceMirrorResponseEnvelope\"\n\n  /__api/v2/captcha/get-repository-source-mirror:\n    post:\n      tags:\n        - repository\n      operationId: getRepositorySourceMirror\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/getRepositorySourceMirrorRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The result data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/getRepositorySourceMirrorResponseEnvelope\"\n\n  /__api/v2/captcha/remove-repository-source-mirror:\n    post:\n      tags:\n        - repository\n      operationId: removeRepositorySourceMirror\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/removeRepositorySourceMirrorRequestEnvelope\"\n      responses:\n        200:\n          description: \u003e\n            The result data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/removeRepositorySourceMirrorResponseEnvelope\"\n\ncomponents:\n  schemas:\n\n    getRepositoriesRequestEnvelope:\n      type: object\n      properties:\n        includeInactive:\n          type: boolean\n    getRepositoriesResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/getRepositoriesResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    getRepositoriesResult:\n      type: object\n      properties:\n        repositories:\n          type: array\n          items:\n            $ref: \"#/components/schemas/getRepositoriesRepository\"\n    getRepositoriesRepository:\n      type: object\n      properties:\n        code:\n          type: string\n        name:\n          type: string\n\n    searchRepositoriesRequestEnvelope:\n      allOf:\n        - $ref: \"./common.yaml#/components/schemas/abstractSearchRequest\"\n        - type: object\n          properties:\n            includeInactive:\n              type: boolean\n    searchRepositoriesResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/searchRepositoriesResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    searchRepositoriesResult:\n      type: object\n      properties:\n        total:\n          type: integer\n          format: int64\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/searchRepositoriesRepository\"\n    searchRepositoriesRepository:\n      type: object\n      properties:\n        active:\n          type: boolean\n        code:\n          type: string\n        name:\n          type: string\n\n    getRepositoryRequestEnvelope:\n      type: object\n      properties:\n        code:\n          type: string\n        includeInactiveRepositorySources:\n          type: boolean\n    getRepositoryResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/getRepositoryResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    getRepositoryResult:\n      type: object\n      properties:\n        active:\n          type: boolean\n        name:\n          type: string\n        code:\n          type: string\n        createTimestamp:\n          type: integer\n          format: int64\n        modifyTimestamp:\n          type: integer\n          format: int64\n        informationUrl:\n          type: string\n        hasPassword:\n          type: boolean\n        repositorySources:\n          type: array\n          items:\n            $ref: \"#/components/schemas/getRepositoryRepositorySource\"\n    getRepositoryRepositorySource:\n      type: object\n      properties:\n        active:\n          type: boolean\n        code:\n          type: string\n        url:\n          type: string\n        identifier:\n          type: string\n          description: \u003e\n            This was previously (confusingly) called the `url`.\n        lastImportTimestamp:\n          type: integer\n          format: int64\n        architectureCode:\n          type: string\n\n    updateRepositoryRequestEnvelope:\n      type: object\n      properties:\n        code:\n          type: string\n        name:\n          type: string\n        active:\n          type: boolean\n        informationUrl:\n          type: string\n        passwordClear:\n          type: string\n          description: \u003e\n            If this field is NULL or the empty string then the password will be cleared.\n        filter:\n          type: array\n          items:\n            $ref: \"#/components/schemas/updateRepositoryFilter\"\n    updateRepositoryResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/updateRepositoryResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    updateRepositoryResult:\n      type: object\n    updateRepositoryFilter:\n      type: string\n      enum:\n        - ACTIVE\n        - NAME\n        - INFORMATIONURL\n        - PASSWORD\n\n    triggerImportRepositoryRequestEnvelope:\n      type: object\n      properties:\n        repositoryCode:\n          type: string\n        repositorySourceCodes:\n          type: string\n    triggerImportRepositoryResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/triggerImportRepositoryResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    triggerImportRepositoryResult:\n      type: object\n\n    createRepositoryRequestEnvelope:\n      type: object\n      properties:\n        code:\n          type: string\n        name:\n          type: string\n        informationUrl:\n          type: string\n    createRepositoryResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/createRepositoryResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    createRepositoryResult:\n      type: object\n\n    getRepositorySourceRequestEnvelope:\n      type: object\n      properties:\n        code:\n          type: string\n        includeInactiveRepositorySourceMirrors:\n          type: boolean\n    getRepositorySourceResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/getRepositorySourceResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    getRepositorySourceResult:\n      type: object\n      properties:\n        code:\n          type: string\n        repositoryCode:\n          type: string\n        active:\n          type: boolean\n        identifier:\n          type: string\n          description: \u003e\n            Historically this was called the `url`, but the name was changed in 2020.\n        forcedInternalBaseUrl:\n          type: string\n          description: \u003e\n            This URL is only shown to some users.  If it is not able to be\n            provided in the current authentication context, it will be NULL.\n        lastImportTimestamp:\n          type: integer\n          format: int64\n        extraIdentifiers:\n          type: array\n          items:\n            type: string\n        repositorySourceMirrors:\n          type: array\n          items:\n            $ref: \"#/components/schemas/getRepositorySourceRepositorySourceMirror\"\n        architectureCode:\n          type: string\n    getRepositorySourceRepositorySourceMirror:\n      type: object\n      properties:\n        active:\n          type: boolean\n        countryCode:\n          type: string\n        code:\n          type: string\n        baseUrl:\n          type: string\n        isPrimary:\n          type: boolean\n\n    updateRepositorySourceRequestEnvelope:\n      type: object\n      properties:\n        code:\n          type: string\n          description: \u003e\n            This is used to identify the repository source.\n        active:\n          type: boolean\n        forcedInternalBaseUrl:\n          type: string\n        filter:\n          type: array\n          items:\n            $ref: \"#/components/schemas/updateRepositorySourceFilter\"\n        extraIdentifiers:\n          type: array\n          items:\n            type: string\n    updateRepositorySourceResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/updateRepositorySourceResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    updateRepositorySourceResult:\n      type: object\n    updateRepositorySourceFilter:\n      type: string\n      enum:\n        - ACTIVE\n        - FORCED_INTERNAL_BASE_URL\n        - EXTRA_IDENTIFIERS\n\n    createRepositorySourceRequestEnvelope:\n      type: object\n      properties:\n        code:\n          type: string\n        repositoryCode:\n          type: string\n    createRepositorySourceResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/createRepositorySourceResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    createRepositorySourceResult:\n      type: object\n\n    createRepositorySourceMirrorRequestEnvelope:\n      type: object\n      properties:\n        repositorySourceCode:\n          type: string\n        baseUrl:\n          type: string\n        countryCode:\n          type: string\n        description:\n          type: string\n    createRepositorySourceMirrorResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/createRepositorySourceMirrorResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    createRepositorySourceMirrorResult:\n      type: object\n      properties:\n        code:\n          type: string\n\n    updateRepositorySourceMirrorRequestEnvelope:\n      type: object\n      properties:\n        code:\n          type: string\n        baseUrl:\n          type: string\n        countryCode:\n          type: string\n        description:\n          type: string\n        isPrimary:\n          type: boolean\n        active:\n          type: boolean\n        filter:\n          type: array\n          items:\n            $ref: \"#/components/schemas/updateRepositorySourceMirrorFilter\"\n    updateRepositorySourceMirrorResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/updateRepositorySourceMirrorResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    updateRepositorySourceMirrorResult:\n      type: object\n    updateRepositorySourceMirrorFilter:\n      type: string\n      enum:\n        - ACTIVE\n        - BASE_URL\n        - DESCRIPTION\n        - IS_PRIMARY\n        - COUNTRY\n\n    getRepositorySourceMirrorRequestEnvelope:\n      type: object\n      properties:\n        code:\n          type: string\n    getRepositorySourceMirrorResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/getRepositorySourceMirrorResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    getRepositorySourceMirrorResult:\n      type: object\n      properties:\n        code:\n          type: string\n        active:\n          type: boolean\n        baseUrl:\n          type: string\n        createTimestamp:\n          type: integer\n          format: int64\n        modifyTimestamp:\n          type: integer\n          format: int64\n        description:\n          type: string\n        countryCode:\n          type: string\n        isPrimary:\n          type: boolean\n        repositorySourceCode:\n          type: string\n\n    removeRepositorySourceMirrorRequestEnvelope:\n      type: object\n      properties:\n        code:\n          type: string\n    removeRepositorySourceMirrorResponseEnvelope:\n      type: object\n      properties:\n        result:\n          $ref: \"#/components/schemas/removeRepositorySourceMirrorResult\"\n        error:\n          $ref: \"./error.yaml#/components/schemas/error\"\n    removeRepositorySourceMirrorResult:\n      type: object\n",
			"canonicalURL": "/github.com/haiku/haikudepotserver@1913e126b64d3ae2ae32422e4d41c212eb2fcfd6/-/blob/haikudepotserver-api2/src/main/resources/api2/repository.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/haiku/haikudepotserver/blob/1913e126b64d3ae2ae32422e4d41c212eb2fcfd6/haikudepotserver-api2/src/main/resources/api2/repository.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"createRepositorySourceMirrorResponseEnvelope\": parse schema: property \"error\": at 1:694: parse schema: resolve \"./error.yaml#/components/schemas/error\": external \"./error.yaml\": get: file: local file reference is not allowed"
}