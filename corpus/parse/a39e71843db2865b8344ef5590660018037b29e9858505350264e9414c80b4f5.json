{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stoplightio/prism"
		},
		"file": {
			"name": "petstore.no-auth.oas3.yaml",
			"size": 0,
			"path": "packages/http-server/src/__tests__/fixtures/petstore.no-auth.oas3.yaml",
			"byteSize": 23706,
			"content": "---\nopenapi: 3.0.0\ninfo:\n  description: 'This is a sample server Petstore server.  You can find out more about     Swagger\n    at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For\n    this sample, you can use the api key `special-key` to test the authorization     filters.'\n  version: 1.0.0\n  title: Swagger Petstore\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\npaths:\n  '/no_auth/pets':\n    get:\n      tags:\n        - pet\n      summary: Get all pets\n      description: ''\n      operationId: getPets\n      parameters:\n        - in: query\n          name: name\n          schema:\n            type: string\n          description: ''\n          required: true\n      security: []\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  '$ref': '#/components/schemas/Pet'\n              examples:\n                a_name:\n                  value: { name: 'clark' }\n        '401':\n          description: Authorization information is missing or invalid.\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: ''\n      operationId: addPet\n      requestBody:\n        '$ref': '#/components/requestBodies/Pet'\n      responses:\n        '405':\n          description: Invalid input\n      security: []\n  '/no_auth/pets/findByStatus':\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - available\n                - pending\n                - sold\n              default: available\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  '$ref': '#/components/schemas/Pet'\n        '400':\n          description: Invalid status value\n      security: []\n  '/no_auth/pets/findByTags':\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: Muliple tags can be provided with comma separated strings. Use         tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  '$ref': '#/components/schemas/Pet'\n        '400':\n          description: Invalid tag value\n      security: []\n      deprecated: true\n  '/no_auth/pets/{petId}':\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                '$ref': '#/components/schemas/Pet'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n          content:\n            application/json:\n              schema:\n                type: object\n                example:\n                  msg: no_resource\n        '418':\n          description: teapot response\n          content:\n            application/json:\n              schema:\n                '$ref': '#/components/schemas/Pet'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                required:\n                  - code\n                  - message\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n                  message:\n                    type: string\n      security: []\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: ''\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n      responses:\n        '405':\n          description: Invalid input\n      security: []\n  '/pets':\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: ''\n      operationId: addPet\n      requestBody:\n        '$ref': '#/components/requestBodies/Pet'\n      responses:\n        '405':\n          description: Invalid input\n      security: []\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: ''\n      operationId: updatePet\n      requestBody:\n        '$ref': '#/components/requestBodies/Pet'\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n      security: []\n  '/pets/findByStatus':\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - available\n                - pending\n                - sold\n              default: available\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  '$ref': '#/components/schemas/Pet'\n        '400':\n          description: Invalid status value\n      security: []\n  '/pets/findByTags':\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: Muliple tags can be provided with comma separated strings. Use         tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  '$ref': '#/components/schemas/Pet'\n        '400':\n          description: Invalid tag value\n      security: []\n      deprecated: true\n  '/pets/{petId}':\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                '$ref': '#/components/schemas/Pet'\n              examples:\n                cat:\n                  summary: An example of a cat\n                  value:\n                    id: 2\n                    category:\n                      id: 1\n                      name: Felis\n                    tags:\n                      - id: 1\n                        name: pet\n                    name: Fluffy\n                    status: available\n                    photoUrls: []\n                dog:\n                  summary: An example of a dog\n                  value:\n                    id: 1\n                    category:\n                      id: 2\n                      name: Canis\n                    tags:\n                      - id: 2\n                        name: dog\n                    name: Sharik\n                    status: available\n                    photoUrls: []\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '418':\n          description: teapot response\n          content:\n            application/json:\n              schema:\n                '$ref': '#/components/schemas/Pet'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                required:\n                  - code\n                  - message\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n                  message:\n                    type: string\n      security: []\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: ''\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n      responses:\n        '405':\n          description: Invalid input\n      security: []\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: ''\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n      security: []\n  '/pets/{petId}/uploadImage':\n    post:\n      tags:\n        - pet\n      summary: uploads an image\n      description: ''\n      operationId: uploadFile\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to update\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                additionalMetadata:\n                  description: Additional data to pass to server\n                  type: string\n                file:\n                  description: file to upload\n                  type: string\n                  format: binary\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                '$ref': '#/components/schemas/ApiResponse'\n      security: []\n  '/store/inventory':\n    servers:\n      - url: https://petstore.swagger.io/v3\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n      security: []\n  '/store/order':\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: ''\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/Order'\n        description: order placed for purchasing the pet\n        required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                '$ref': '#/components/schemas/Order'\n        '400':\n          description: Invalid Order\n  '/store/order/{orderId}':\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value >= 1 and <= 10.         Other\n        values will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n            maximum: 10\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                '$ref': '#/components/schemas/Order'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with positive integer value.         Negative\n        or non-integer values will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n  '/user':\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/User'\n        description: Created user object\n        required: true\n      responses:\n        default:\n          description: successful operation\n          application/json:\n            schema:\n              type: array\n              items:\n                '$ref': '#/components/schemas/Pet'\n  '/user/createWithArray':\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: ''\n      operationId: createUsersWithArrayInput\n      requestBody:\n        '$ref': '#/components/requestBodies/UserArray'\n      responses:\n        default:\n          description: successful operation\n  '/user/createWithList':\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: ''\n      operationId: createUsersWithListInput\n      requestBody:\n        '$ref': '#/components/requestBodies/UserArray'\n      responses:\n        default:\n          description: successful operation\n  '/user/login':\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: ''\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n              example: 1000\n            X-Stats:\n              description: generic statistics\n              schema:\n                type: integer\n                format: int32\n              examples:\n                etucapio:\n                  value: 1500\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n            X-Strange-Header:\n              description: date in UTC when token expires\n          content:\n            application/json:\n              schema:\n                type: string\n        '400':\n          description: Invalid username/password supplied\n  '/user/logout':\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: ''\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n  '/user/{username}':\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: ''\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: 'The name that needs to be fetched. Use user1 for testing. '\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json; charset=utf-8:\n              schema:\n                '$ref': '#/components/schemas/User'\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be updated\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/User'\n        description: Updated user object\n        required: true\n      responses:\n        '400':\n          description: Invalid user supplied\n        '404':\n          description: User not found\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: https://petstore.swagger.io/v2\n  - url: http://petstore.swagger.io/v2\ncomponents:\n  requestBodies:\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              '$ref': '#/components/schemas/User'\n      description: List of user object\n      required: true\n    Pet:\n      content:\n        application/json:\n          schema:\n            '$ref': '#/components/schemas/Pet'\n      description: Pet object that needs to be added to the store\n      required: true\n  securitySchemes:\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: http://petstore.swagger.io/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n  schemas:\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n          default: false\n      xml:\n        name: Order\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          format: int32\n          description: User Status\n      xml:\n        name: User\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      required:\n        - name\n        - photoUrls\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          '$ref': '#/components/schemas/Category'\n        name:\n          type: string\n          example: doggie\n        photoUrls:\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n        tags:\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            '$ref': '#/components/schemas/Tag'\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n      xml:\n        name: Pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\n",
			"canonicalURL": "/github.com/stoplightio/prism@af3b8a3c64654a1f87dca94d0486a807daa91f59/-/blob/packages/http-server/src/__tests__/fixtures/petstore.no-auth.oas3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/stoplightio/prism/blob/af3b8a3c64654a1f87dca94d0486a807daa91f59/packages/http-server/src/__tests__/fixtures/petstore.no-auth.oas3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/pets/{petId}\": at 1:8382: get: duplicate operationId: \"getPetById\""
}