{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/opendatahub-io/jupyterhub-singleuser-profiles"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "jupyterhub_singleuser_profiles/api/swagger.yaml",
			"byteSize": 9925,
			"content": "openapi: 3.0.0\ninfo:\n  title: JupyterHub API\n  description: API for the Spawner UI of JupyterHub\n  version: 0.1.0\nservers:\n  - url: /services/jsp-api\n    description: Add URL prefix for JupyterHub service\n\npaths:\n  /api/whoami:\n    get:\n      operationId: jupyterhub_singleuser_profiles.api.api.whoami\n      summary: Get current user info\n      responses:\n        '200':\n          description: OK\n  \n  /api/instance:\n    get:\n      operationId: jupyterhub_singleuser_profiles.api.api.get_instance\n      summary: Get current cluster version and segment key\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Instance'\n\n  /api/user/configmap:\n    get:\n      operationId: jupyterhub_singleuser_profiles.api.api.get_user_cm\n      summary: Get a user ConfigMap based on authenticated user\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/configmap'\n        '404':\n          description: ConfigMap not found\n    post:\n      operationId: jupyterhub_singleuser_profiles.api.api.update_user_cm\n      summary: Updates user ConfigMap with json data and returns it as response\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/configmap'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/configmap'\n\n  /api/ui/config:\n    get:\n      operationId: jupyterhub_singleuser_profiles.api.api.get_ui_config\n      summary: Get a part of the main ConfigMap containing information about the UI\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UIConfig\"\n        '404':\n          description: UI Config not found.\n\n  /api/images:\n    get:\n      operationId: jupyterhub_singleuser_profiles.api.api.get_images\n      summary: Get a full list of all images and their tags.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#components/schemas/ImageInfo'\n        '404':\n          description: No images found\n\n  /api/images/default:\n    get:\n      operationId: jupyterhub_singleuser_profiles.api.api.get_default_image\n      summary: Get the default image, (either one with label or first in list)\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n        '404':\n          description: Image not found.\n\n  /api/sizes:\n    get:\n      operationId: jupyterhub_singleuser_profiles.api.api.get_sizes\n      summary: Get an array strings of size names or a pure json with all parameters\n      parameters:\n        - name: pure_json\n          in: query\n          required: false\n          description: Returns a full json if true\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - type: array\n                    items:\n                      type: string\n                  - type: string\n  \n  /api/size/{size_name}:\n    get:\n      operationId: jupyterhub_singleuser_profiles.api.api.get_size_by_name\n      summary: Get a single size by name\n      parameters:\n        - name: size_name\n          in: path\n          required: true\n          description: Name of the size\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n        '404':\n          description: Size not found\n          content:\n            text/plain:\n              schema:\n                type: string\n\ncomponents:\n  schemas:\n    configmap:\n      title: ConfigMap\n      type: object\n      properties:\n        env:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n              type:\n                type: string\n        gpu:\n          type: integer\n        last_selected_image:\n          type: string\n        last_selected_size:\n          type: string\n    UIConfig:\n      title: UIConfig\n      type: object\n      properties:\n        gpuConfig:\n          title: Gpuconfig\n          default: {}\n          allOf:\n          - \"$ref\": \"#/components/schemas/GpuConfig\"\n        imageConfig:\n          title: Imageconfig\n          default: {}\n          allOf:\n          - \"$ref\": \"#/components/schemas/ImageConfig\"\n        sizeConfig:\n          title: Sizeconfig\n          default: {}\n          allOf:\n          - \"$ref\": \"#/components/schemas/SizeConfig\"\n        envVarConfig:\n          title: Envvarconfig\n          default: {}\n          allOf:\n          - \"$ref\": \"#/components/schemas/EnvVarConfig\"\n\n    GpuCheckbox:\n      title: GpuCheckbox\n      type: object\n      properties:\n        value:\n          title: Value\n          default: 1\n          type: integer\n    GpuDropdown:\n      title: GpuDropdown\n      type: object\n      properties:\n        start:\n          title: Start\n          default: 0\n          type: integer\n        end:\n          title: End\n          default: 1\n          type: integer\n    GpuInput:\n      title: GpuInput\n      type: object\n      properties:\n        limit:\n          title: Limit\n          default: 1\n          type: integer\n    GpuConfig:\n      title: GpuConfig\n      type: object\n      properties:\n        enabled:\n          title: Enabled\n          default: true\n          type: boolean\n        type:\n          title: Type\n          type: string\n        gpuCheckbox:\n          \"$ref\": \"#/components/schemas/GpuCheckbox\"\n        gpuDropdown:\n          \"$ref\": \"#/components/schemas/GpuDropdown\"\n        gpuInput:\n          \"$ref\": \"#/components/schemas/GpuInput\"\n    ImageConfigSort:\n      title: ImageConfigSort\n      description: An enumeration.\n      enum:\n      - name\n      - version\n      type: string\n    ImageConfig:\n      title: ImageConfig\n      type: object\n      properties:\n        blacklist:\n          title: Blacklist\n          default: []\n          type: array\n          items: {}\n        whitelist:\n          title: Whitelist\n          default: []\n          type: array\n          items: {}\n        sort:\n          \"$ref\": \"#/components/schemas/ImageConfigSort\"\n    SizeConfig:\n      title: SizeConfig\n      type: object\n      properties:\n        enabled:\n          title: Enabled\n          default: true\n          type: boolean\n    EnvVarType:\n      title: EnvVarType\n      description: An enumeration.\n      enum:\n      - text\n      - password\n      type: string\n    EnvVar:\n      title: EnvVar\n      type: object\n      properties:\n        name:\n          title: Name\n          type: string\n        type:\n          \"$ref\": \"#/components/schemas/EnvVarType\"\n      required:\n      - name\n      - type\n    EnvVarCategory:\n      title: EnvVarCategory\n      type: object\n      properties:\n        name:\n          title: Name\n          type: string\n        variables:\n          title: Variables\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/EnvVar\"\n      required:\n      - name\n    EnvVarConfig:\n      title: EnvVarConfig\n      type: object\n      properties:\n        enabled:\n          title: Enabled\n          default: true\n          type: boolean\n        categories:\n          title: Categories\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/EnvVarCategory\"\n    ImageInfo:\n      title: ImageInfo\n      type: object\n      properties:\n        name:\n          title: Name\n          type: string\n        tags:\n          title: Tags\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/ImageTagInfo\"\n        description:\n          title: Description\n          type: string\n        url:\n          title: Url\n          type: string\n        display_name:\n          title: Display Name\n          type: string\n        default:\n          title: Default\n          default: false\n          type: boolean\n        order:\n          title: Order\n          default: 100\n          type: integer\n        build_status:\n          title: Build Status\n          type: string\n        created_by:\n          title: Created By\n          type: string\n      required:\n      - name\n      - tags\n      - build_status\n    NameVersionPair:\n      title: NameVersionPair\n      type: object\n      properties:\n        name:\n          title: Name\n          type: string\n        version:\n          title: Version\n          type: string\n      required:\n      - name\n      - version\n    TagContent:\n      title: TagContent\n      type: object\n      properties:\n        software:\n          title: Software\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/NameVersionPair\"\n        dependencies:\n          title: Dependencies\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/NameVersionPair\"\n    ImageTagInfo:\n      title: ImageTagInfo\n      type: object\n      properties:\n        name:\n          title: Name\n          type: string\n        content:\n          \"$ref\": \"#/components/schemas/TagContent\"\n        recommended:\n          title: Recommended\n          type: boolean\n      required:\n      - name\n      - content\n      - recommended\n    Instance:\n      title: Instance\n      type: object\n      properties:\n        segment_key:\n          title: Segment key\n          type: string\n        cluster_id:\n          title: Cluster ID\n          type: string\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"UIConfig\": parse schema: property \"envVarConfig\": parse schema: infer default type: invalid value \"{}\""
}