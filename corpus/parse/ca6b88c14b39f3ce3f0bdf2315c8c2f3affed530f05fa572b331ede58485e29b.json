{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "npm/theniledev/js"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "spec/api.yaml",
			"byteSize": 76709,
			"content": "openapi: 3.0.1\ninfo:\n  title: Nile API\n  description: Making SaaS chill.\n  contact:\n    email: support@thenile.dev\n  version: 0.1.0-29e6372\nservers:\n  - url: localhost:8080\ntags:\n  - name: access\n    description: \u003e\n      Access policies allow your users to set up access controls for entities in\n      their organization.\n\n\n      All access is determined based on 3 inputs:\n\n      1. **Subject**: Who is trying to act (think User or ServiceAccount)\n\n      2. **Resource**: What are they acting on (for now, only custom entities\n      and access policies themselves are supported).\n\n      All properties on a resource are optional, and any combination of them can\n      be specified when creating a policy.\n\n      3. **Action**: What are they doing (think Read, Write, Deny)\n\n\n      Note that:\n\n\n      * The creator of an organization is automatically granted access to all\n      access policies in the organization\n\n      regardless of the access policies defined.\n\n      * Once a user creates an access policy their organization defaults to\n      deny-by-default behavior\n\n      for all users in the organization. Deleting all access policies will\n      revert the organization back to allow-by-default behavior.\n\n\n      ### Access control for access policies:\n\n\n      You might want to control who can create, update, and delete access\n      policies in your organization.\n\n      You can do this by creating access policies for access policies ðŸ¤¯:\n\n\n      ```\n\n      \"subject\": {\n        \"email\": \"admin@your_org.com\"\n      },\n\n      \"resource\": {\n          \"type\": \"policy\",\n      },\n\n      \"actions\": [\"read\", \"write\"]\n\n      ```\npaths:\n  /workspaces/{workspace}/orgs/{org}/access/policies:\n    get:\n      tags:\n        - access\n      summary: List all access policies\n      operationId: listPolicies\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of all access policies in this organization\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Policy'\n    post:\n      tags:\n        - access\n      summary: Create a new access policy\n      operationId: createPolicy\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreatePolicyRequest'\n        required: true\n      responses:\n        '201':\n          description: The newly created access policy\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Policy'\n  /workspaces/{workspace}/orgs/{org}/access/policies/{policyId}:\n    get:\n      tags:\n        - access\n      summary: Get an access policy\n      operationId: getPolicy\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: policyId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The access policy with the specified id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Policy'\n    put:\n      tags:\n        - access\n      summary: Update an access policy\n      operationId: updatePolicy\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: policyId\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdatePolicyRequest'\n        required: true\n      responses:\n        '200':\n          description: Updated version of the access policy with the specified id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Policy'\n    delete:\n      tags:\n        - access\n      summary: Delete an access policy\n      operationId: deletePolicy\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: policyId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Successful instance deletion\n  /auth/login:\n    post:\n      tags:\n        - developers\n      summary: Log in a developer to nile\n      operationId: loginDeveloper\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/LoginInfo'\n        required: true\n      responses:\n        '200':\n          description: JWT token for authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /auth/validate:\n    post:\n      tags:\n        - developers\n      summary: Validate a developer token\n      operationId: validateDeveloper\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/Token'\n        required: true\n      responses:\n        '204':\n          description: valid token\n        '400':\n          description: invalid token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /auth/oauth/google/callback:\n    get:\n      tags:\n        - developers\n      summary: Developer Google OAuth flow callback\n      description: \u003e\n        This endpoint is called automatically by Google after the user\n        authenticates successfully.\n\n        It's here for documentation purposes only, and it shouldn't be called\n        directly.\n      operationId: developerGoogleOAuthCallback\n      parameters:\n        - name: code\n          in: query\n          schema:\n            type: string\n        - name: state\n          in: query\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A successful login/signup for a developer\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeveloperGoogleOAuthResponse'\n        '302':\n          description: |2\n             A redirect to the specified `redirect_to` URL after a successful\n             login/signup for a developer, if `redirect_to` was provided\n             when calling `/auth/oauth/google`. A response cookie\n             containing the developer's auth credentials will be set.\n  /auth/oauth/google:\n    get:\n      tags:\n        - developers\n      summary: Start the developer Google OAuth flow\n      operationId: startDeveloperGoogleOAuth\n      parameters:\n        - name: redirect_to\n          in: query\n          description: An optional URL to redirect to after a successful login/signup.\n          schema:\n            type: string\n            format: uri\n      responses:\n        '302':\n          description: \u003e\n            A redirect to Google for the user to authenticate.\n\n            After the user authenticates successfully, you'll be redirected to\n            `/auth/oauth/google/callback`.\n  /workspaces/{workspace}/auth/login:\n    post:\n      tags:\n        - users\n      summary: Log in a user\n      description: \u003e-\n        Login a user to Nile. This operation returns a JWT token. Most Nile\n        operations require authentication and expect this token in the\n        'Authorization: Bearer \u003ctoken\u003e' header\n      operationId: loginUser\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LoginInfo'\n        required: true\n      responses:\n        '200':\n          description: JWT token for authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-code-samples:\n        - lang: cURL\n          source: \u003e-\n            curl -X POST https://app.thenile.dev:443/auth/login -H\n            'Content-Type: application/json' -D '{\"email\": \"shaun@colton.demo\", \n            \"password\": \"mycatname\"}\n        - lang: JS\n          source: \u003e-\n            import Nile from \"@theniledev/js\";\n\n            const nile = new Nile({ apiUrl: \"http://localhost:8080\", workspace:\n            \"1\" });\n\n\n            const body = {\n              workspace: 56,\n              loginInfo: {\n                email: \"shaun@colton.demo\",\n                password: \"mycatname\",\n              },\n            };\n\n\n            nile\n              .loginUser(body)\n              .then((data) =\u003e {\n                console.log(\"API called successfully. Returned data: \" + data);\n              })\n              .catch((error: any) =\u003e console.error(error));\n  /workspaces/{workspace}/auth/validate:\n    post:\n      tags:\n        - users\n      summary: Validate a user token\n      description: \u003e-\n        Validates a user token. Use this when using Nile authentication to\n        validate access to non-Nile resources. See the [Add Authentication\n        Guide](https://nile-docs.vercel.app/docs/current/guides/how-to/add_signup_authn#decorating-the-endpoint)\n        for a full example\n      operationId: validateUser\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Token'\n        required: true\n      responses:\n        '204':\n          description: The token is valid\n        '400':\n          description: The token is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-code-samples:\n        - lang: cURL\n          source: \u003e-\n            curl -X POST https://app.thenile.dev:443/auth/validate  -H\n            'Content-Type: application/json' -D '{\"token\": \"token\"}'\n        - lang: JS\n          source: \u003e-\n            import Nile from \"@theniledev/js\";\n\n\n            const nile = new Nile({ apiUrl: \"http://localhost:8080\", workspace:\n            \"1\" });\n\n\n            const body = {\n              workspace: 56,\n              token: { token: \"token\" },\n            };\n\n\n            nile\n              .validateUserToken(body)\n              .then((data) =\u003e {\n                console.log(\"API called successfully. Returned data: \" + data);\n              })\n              .catch((error: any) =\u003e console.error(error));\n  /developers:\n    post:\n      tags:\n        - developers\n      summary: Create a developer\n      operationId: createDeveloper\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/CreateUserRequest'\n        required: true\n      responses:\n        '201':\n          description: The newly created developer\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n  /workspaces/{workspace}/entities:\n    get:\n      tags:\n        - entities\n      summary: List all entities\n      operationId: listEntities\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n      responses:\n        '200':\n          description: list of entities\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Entity'\n    post:\n      tags:\n        - entities\n      summary: Create an entity\n      operationId: createEntity\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/CreateEntityRequest'\n        required: true\n      responses:\n        '200':\n          description: created entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entity'\n  /workspaces/{workspace}/entities/{type}:\n    get:\n      tags:\n        - entities\n      summary: Get an entity\n      operationId: getEntity\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: type\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: the entity with the requested type\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entity'\n    put:\n      tags:\n        - entities\n      summary: Update an entity\n      operationId: updateEntity\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: type\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/UpdateEntityRequest'\n        required: true\n      responses:\n        '200':\n          description: the updated entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entity'\n  /workspaces/{workspace}/entities/{type}/openapi:\n    get:\n      tags:\n        - entities\n      summary: Get a yaml OpenAPI description of an entity\n      operationId: getOpenAPI\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: type\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The yaml OpenAPI description of the specified entity\n          content:\n            application/yaml:\n              schema:\n                type: string\n  /workspaces/{workspace}/events/{type}:\n    get:\n      tags:\n        - entities\n      summary: Get instance events\n      description: |\n        Gets all events for the given entity type.\n        As access policies are enforced on events,\n        if the `before` instance fails access control, it will be omitted.\n      operationId: instance.events\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: type\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: seq\n          in: query\n          schema:\n            type: integer\n            format: int64\n            default: 0\n        - name: limit\n          in: query\n          schema:\n            maximum: 20\n            type: integer\n            format: int64\n            default: 20\n      responses:\n        '200':\n          description: Events for the type.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/InstanceEvent'\n  /workspaces/{workspace}/orgs/{org}/instances/{type}:\n    get:\n      tags:\n        - entities\n      summary: ' List all instances'\n      operationId: listInstances\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: type\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of all instances of the specified type under this org\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Instance'\n    post:\n      tags:\n        - entities\n      summary: Create a new instance\n      operationId: createInstance\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: type\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JsonSchemaInstance'\n        required: true\n      responses:\n        '201':\n          description: The newly created instance\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Instance'\n  /workspaces/{workspace}/orgs/{org}/instances/{type}/{id}:\n    get:\n      tags:\n        - entities\n      summary: Get an instance\n      operationId: getInstance\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: type\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The instance with the specified id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Instance'\n    put:\n      tags:\n        - entities\n      summary: Update an instance\n      description: \u003e-\n        If the instance field `seq` is provided in the `If-Match` header then\n        this will be a Compare And Set operation, i.e., if the seq of the\n        current instance doesn't match the one provided then a 412 status will\n        be returned. If the header is not provided then this update will\n        overwrite any other updates\n      operationId: updateInstance\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: type\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: If-Match\n          in: header\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateInstanceRequest'\n        required: true\n      responses:\n        '200':\n          description: The updated instance\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Instance'\n    delete:\n      tags:\n        - entities\n      summary: Delete an instance\n      operationId: deleteInstance\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: type\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Successful instance deletion\n    patch:\n      tags:\n        - entities\n      summary: Patch an Instance\n      description: \u003e-\n        If the instance field `seq` is provided in the `If-Match` header then\n        this will be a Compare And Set operation, i.e., if the seq of the\n        current instance doesn't match the one provided then a 412 status will\n        be returned. If the header is not provided then this patch may overwrite\n        other updates\n      operationId: patchInstance\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: type\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: If-Match\n          in: header\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              description: The JSONPatch operations you would like to apply to the instance\n              items:\n                $ref: '#/components/schemas/PatchOperation'\n        required: true\n      responses:\n        '200':\n          description: The instance that has been patched\n  /workspaces/{workspace}/instances/{type}:\n    get:\n      tags:\n        - entities\n      summary: ' List all instances'\n      operationId: listInstancesInWorkspace\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: type\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of all instances of the specified type under this workspace\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Instance'\n  /workspaces/{workspace}/orgs/{org}/invites/{code}/accept:\n    post:\n      tags:\n        - organizations\n      summary: Accept an invite\n      operationId: acceptInvite\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: code\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Successful invite acceptance\n  /workspaces/{workspace}/orgs/{org}/invites:\n    get:\n      tags:\n        - organizations\n      summary: List all Invites\n      operationId: listInvites\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of all invites under this org\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Invite'\n  /workspaces/{workspace}/metrics/{metric_name}/aggregate:\n    post:\n      tags:\n        - metrics\n      summary: 'Perform sum, min, max, avg, and percentile aggregations over a metric '\n      operationId: aggregateMetrics\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: metric_name\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AggregationRequest'\n        required: true\n      responses:\n        '200':\n          description: A stream of the aggregated buckets\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Bucket'\n  /workspaces/{workspace}/metrics/filter:\n    post:\n      tags:\n        - metrics\n      summary: List of metrics matching the filter\n      operationId: filterMetrics\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Filter'\n        required: true\n      responses:\n        '200':\n          description: A list of metrics that match the filter\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Metric'\n  /workspaces/{workspace}/metrics/entities/{entity_type}/filter:\n    post:\n      tags:\n        - metrics\n      summary: List metrics for the entity matching the filter\n      operationId: filterMetricsForEntityType\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: entity_type\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Filter'\n        required: true\n      responses:\n        '200':\n          description: A list of metrics for the entity matching the filter\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Metric'\n  /workspaces/{workspace}/metrics/metric_definitions:\n    get:\n      tags:\n        - metrics\n      summary: List metric definitions in a workspace\n      operationId: listMetricDefinitions\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n      responses:\n        '200':\n          description: A list of metrics definitions for the workspace\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListMetricDefinitionsResponse'\n  /workspaces/{workspace}/metrics/entities/{entity_type}/metric_definitions:\n    get:\n      tags:\n        - metrics\n      summary: List metric definitions for an entity\n      operationId: listMetricDefinitionsForEntityType\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: entity_type\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of metric definitions for the provided entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListMetricDefinitionsResponse'\n  /workspaces/{workspace}/metrics:\n    post:\n      tags:\n        - metrics\n      summary: Produce a Batch of Metrics\n      operationId: produceBatchOfMetrics\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Metric'\n        required: true\n      responses:\n        '204':\n          description: the metrics have been saved\n        '409':\n          description: there was a conflict saving the metrics\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /workspaces/{workspace}/orgs/{org}/users:\n    get:\n      tags:\n        - organizations\n      summary: List users in an organization\n      operationId: listUsersInOrg\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The users in this organization\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n    post:\n      tags:\n        - organizations\n      summary: Add a user to an organization\n      operationId: addUserToOrg\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/AddUserToOrgRequest'\n        required: true\n      responses:\n        '200':\n          description: The user added to the organization\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n  /workspaces/{workspace}/orgs:\n    get:\n      tags:\n        - organizations\n      summary: List all organizations\n      operationId: listOrganizations\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n      responses:\n        '200':\n          description: A list of all orgs under this workspace\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Organization'\n    post:\n      tags:\n        - organizations\n      summary: Create a new organization\n      operationId: createOrganization\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/CreateOrganizationRequest'\n        required: true\n      responses:\n        '201':\n          description: The newly created organization\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n  /workspaces/{workspace}/orgs/{org}:\n    get:\n      tags:\n        - organizations\n      summary: Get an organization by name\n      operationId: getOrganization\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The org with the specified name under this workspace\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n    put:\n      tags:\n        - organizations\n      summary: Update an organization\n      operationId: updateOrganization\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/UpdateOrganizationRequest'\n        required: true\n      responses:\n        '200':\n          description: The updated org\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n    delete:\n      tags:\n        - organizations\n      summary: Delete an organization by id\n      operationId: deleteOrganization\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Successful org deletion\n  /workspaces/{workspace}/orgs/{org}/oidc/providers/{providerName}/login:\n    get:\n      tags:\n        - organizations\n      summary: Login to an organization with OIDC\n      description: Initiate the OIDC login flow with a redirect for this org and provider\n      operationId: oidcOrganizationLogin\n      parameters:\n        - name: workspace\n          in: path\n          required: false\n          schema:\n            type: string\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: providerName\n          in: path\n          required: true\n          schema:\n            type: string\n            enum:\n              - GOOGLE\n      responses:\n        '302':\n          description: Redirect to OIDC provider login page\n  /workspaces/{workspace}/orgs/{org}/users/{user}:\n    put:\n      tags:\n        - organizations\n      summary: Update a user in an organization\n      operationId: updateUserInOrg\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: user\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/UpdateOrganizationMembershipRequest'\n        required: true\n      responses:\n        '200':\n          description: The updated user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n    delete:\n      tags:\n        - organizations\n      summary: Remove a user from an organization by user id\n      operationId: removeUserFromOrg\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: org\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: user\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Successful user removal\n  /workspaces/{workspace}/access_tokens:\n    get:\n      tags:\n        - workspaces\n      summary: List access tokens\n      description: List all workspace access tokens.\n      operationId: listAccessTokens\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n      responses:\n        '200':\n          description: Information about the access token\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessTokenInfo'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Workspace not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - workspaces\n      summary: Create an access token\n      description: \u003e-\n        Create a workspace token. Workspace tokens have authorization to perform\n        most actions within a workspace.\n      operationId: createAccessToken\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateAccessTokenRequest'\n        required: true\n      responses:\n        '201':\n          description: The newly created token and metadata\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateAccessTokenResponse'\n  /workspaces/{workspace}/access_tokens/{id}:\n    get:\n      tags:\n        - workspaces\n      summary: Get access token by id\n      description: Get information about a workspace access token.\n      operationId: getAccessToken\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Information about the access token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessTokenInfo'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Access token not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      tags:\n        - workspaces\n      summary: Update an access token\n      description: Update a workspace access token.\n      operationId: updateAccessToken\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/CreateAccessTokenRequest'\n        required: true\n      responses:\n        '200':\n          description: The updated access token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessTokenInfo'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Access token not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      tags:\n        - workspaces\n      summary: Delete an access token\n      description: \u003e-\n        Delete a workspace access token. Any users or services using this token\n        will no longer be able to access the workspace.\n      operationId: deleteAccessToken\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Successful token deletion\n  /workspaces/{workspace}/internal/users:\n    post:\n      tags:\n        - users\n      summary: Create a user\n      operationId: createDeveloperOwnedUser\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateDeveloperOwnedUserRequest'\n        required: true\n      responses:\n        '201':\n          description: The newly created user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n  /me:\n    get:\n      tags:\n        - users\n      summary: Get information about current authenticated user\n      operationId: me\n      responses:\n        '200':\n          description: The currently authenticated user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n  /me/token:\n    get:\n      tags:\n        - users\n      summary: Get the auth token of the currently authenticated user\n      description: \u003e-\n        Echoes the auth token of the currently authenticated user. This\n        operation requires that the auth token is passed either as a Bearer\n        token in the authorization header or as a cookie named 'token'. When\n        both are present, they must match.\n      operationId: token\n      responses:\n        '200':\n          description: The auth token for the current authenticated user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '401':\n          description: The current user is not authorized to access this resource\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /workspaces/{workspace}/users:\n    get:\n      tags:\n        - users\n      summary: List all users for a workspace\n      operationId: listUsers\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n      responses:\n        '200':\n          description: A list of all users under this workspace\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n    post:\n      tags:\n        - users\n      summary: Create a user\n      operationId: createUser\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateUserRequest'\n        required: true\n      responses:\n        '201':\n          description: The newly created user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n  /workspaces/{workspace}/users/{id}:\n    get:\n      tags:\n        - users\n      summary: Get a user by id\n      operationId: getUser\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The user with the specified id under this workspace\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n    put:\n      tags:\n        - users\n      summary: Update a user\n      operationId: updateUser\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/UpdateUserRequest'\n        required: true\n      responses:\n        '200':\n          description: the updated user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n    delete:\n      tags:\n        - users\n      summary: Delete a user\n      operationId: deleteUser\n      parameters:\n        - $ref: '#/components/parameters/workspace'\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Successful user deletion\n  /workspaces/{workspace}/oidc/providers/{providerName}/login:\n    get:\n      tags:\n        - workspaces\n      summary: Login to a workspace with OIDC\n      description: \u003e-\n        Initiate the OIDC login flow with a redirect for this workspace and\n        provider\n      operationId: oidcWorkspaceLogin\n      parameters:\n        - name: workspace\n          in: path\n          required: false\n          schema:\n            type: string\n        - name: providerName\n          in: path\n          required: true\n          schema:\n            type: string\n            enum:\n              - GOOGLE\n      responses:\n        '302':\n          description: Redirect to OIDC provider login page\n  /workspaces:\n    get:\n      tags:\n        - workspaces\n      summary: List all workspaces\n      operationId: listWorkspaces\n      responses:\n        '200':\n          description: A list of all workspaces\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Workspace'\n    post:\n      tags:\n        - workspaces\n      summary: Create a workspace\n      operationId: createWorkspace\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/CreateWorkspaceRequest'\n        required: true\n      responses:\n        '201':\n          description: The newly created workspace\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workspace'\n  /workspaces/{workspace}/openapi:\n    get:\n      tags:\n        - workspaces\n      summary: \u003e-\n        Get the OpenAPI specification for all events and entities in this\n        workspace\n      operationId: getWorkspaceOpenApi\n      parameters:\n        - name: workspace\n          in: path\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: \u003e-\n            The yaml OpenAPI specification for all events and entities in this\n            workspace\n          content:\n            application/yaml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        '401':\n          description: The current user is not authorized to access this resource\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /workspaces/{workspace}/settings:\n    get:\n      tags:\n        - workspaces\n      summary: Retrieve workspace settings\n      description: Retrieve supported OIDC providers and other workspace settings\n      operationId: getWorkspaceSettings\n      parameters:\n        - name: workspace\n          in: path\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The workspace settings\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkspaceSettings'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Workspace not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /workspaces/{workspace}/settings/oidc/providers:\n    put:\n      tags:\n        - workspaces\n      summary: Update settings for OIDC providers\n      description: Enable, disable, and configure how OIDC providers are used\n      operationId: updateOIDCProviders\n      parameters:\n        - name: workspace\n          in: path\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/WorkspaceOIDCProviderConfig'\n        required: true\n      responses:\n        '200':\n          description: The updated OIDC providers\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WorkspaceOIDCProviderConfig'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Workspace not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /workspaces/{workspace}/settings/oidc/urls:\n    put:\n      tags:\n        - workspaces\n      summary: Update OIDC redirect URLs\n      description: Modify the landing pages for login, sign-up, logout, and error\n      operationId: updateOIDCRedirects\n      parameters:\n        - name: workspace\n          in: path\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WorkspaceOIDCRedirectUrls'\n        required: true\n      responses:\n        '200':\n          description: The updated redirect URLs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkspaceOIDCRedirectUrls'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Workspace not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  schemas:\n    Action:\n      minLength: 1\n      type: string\n      description: \u003e-\n        The action to be allowed on the resource if an access policy is matched.\n        The `deny` action is a special action that denies all access.\n      enum:\n        - read\n        - write\n        - deny\n    Metadata:\n      type: object\n      description: Arbitrary metadata.\n      example:\n        location: US\n        age: 21\n        active: true\n        name:\n          first: John\n          last: Doe\n    Policy:\n      required:\n        - id\n        - type\n      type: object\n      properties:\n        id:\n          type: string\n          readOnly: true\n        created:\n          type: string\n          format: date-time\n          readOnly: true\n        updated:\n          type: string\n          format: date-time\n          readOnly: true\n        seq:\n          type: integer\n          format: int64\n          readOnly: true\n        type:\n          type: string\n          enum:\n            - policy\n        deleted:\n          type: string\n          format: date-time\n          readOnly: true\n        subject:\n          $ref: '#/components/schemas/Subject'\n        resource:\n          $ref: '#/components/schemas/Resource'\n        actions:\n          uniqueItems: true\n          type: array\n          items:\n            $ref: '#/components/schemas/Action'\n    Resource:\n      type: object\n      properties:\n        id:\n          type: string\n        type:\n          type: string\n      additionalProperties: true\n      description: \u003e\n        A subset of properties of any custom or built-in entity instance to\n        authorize against.\n\n\n        All properties on a resource are optional, and any combination of them\n        can be specified when creating a policy.\n\n        You can specify concrete values for resource and subject properties\n\n        or use variables to match a subject property against a resource\n        property.\n\n\n        An access policy with the following resource would allow access to\n        clusters with location matching the subject's region:\n\n        ```\n\n        {\n          \"type\": \"cluster\",\n          \"properties\": {\n            \"location\": ${subject.metadata.location}\n          }\n        }\n\n        ```\n\n\n\n        Note that:\n\n        * Only exact matching of properties is supported for now.\n\n        * For built-in entity instances, only the Policy entity is currently\n        supported.\n\n        * Custom properties on a resource must be specified under the\n        \"properties\" key.\n      example:\n        id: inst_123\n        type: cluster\n        properties:\n          region: us-west-2\n          status: running\n    Subject:\n      type: object\n      properties:\n        id:\n          type: string\n        email:\n          type: string\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n        org_membership:\n          $ref: '#/components/schemas/SubjectOrgMembership'\n      description: |2\n          A subset of properties of a user to authorize against.\n\n          You can specify concrete values for subject properties\n          or use variables to match a subject property against a resource property.\n\n          An access policy with no resource (which matches all resources)\n          and the following subject would allow access to any resource with the same location as the subject:\n          ```\n          {\n            \"metadata\": {\n              \"location\": ${resource.properties.location}\n            }\n          }\n          ```\n    SubjectOrgMembership:\n      type: object\n      properties:\n        joined:\n          type: string\n          format: date-time\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n      example:\n        joined: 2022-08-09T10:27:30.956Z\n        metadata:\n          role: admin\n    CreatePolicyRequest:\n      required:\n        - actions\n      type: object\n      properties:\n        subject:\n          $ref: '#/components/schemas/Subject'\n        resource:\n          $ref: '#/components/schemas/Resource'\n        actions:\n          minLength: 1\n          uniqueItems: true\n          type: array\n          description: \u003e\n            The actions to be allowed on the resource if an access policy\n            matches a\n\n            request.\n\n\n            At least one action must be provided and executable actions\n\n            (i.e: `read`, `write`) cannot be combined with non-executable\n            actions\n\n            (i.e: `deny`).\n\n\n            If multiple access policies match a request, policies\n\n            with a `deny` action take precedence over policies with a `read`\n\n            action. You can define `deny` access policies to make exceptions in\n\n            your policies that allow access.\n          items:\n            $ref: '#/components/schemas/Action'\n    UpdatePolicyRequest:\n      required:\n        - actions\n      type: object\n      properties:\n        subject:\n          $ref: '#/components/schemas/Subject'\n        resource:\n          $ref: '#/components/schemas/Resource'\n        actions:\n          minLength: 1\n          uniqueItems: true\n          type: array\n          description: \u003e\n            The actions to be allowed on the resource if an access policy\n            matches a\n\n            request.\n\n\n            At least one action must be provided and executable actions\n\n            (i.e: `read`, `write`) cannot be combined with non-executable\n            actions\n\n            (i.e: `deny`).\n\n\n            If multiple access policies match a request, policies\n\n            with a `deny` action take precedence over policies with a `read`\n\n            action. You can define `deny` access policies to make exceptions in\n\n            your policies that allow access.\n          items:\n            $ref: '#/components/schemas/Action'\n    Token:\n      required:\n        - token\n      type: object\n      properties:\n        token:\n          type: string\n          description: \u003e-\n            JWT authentication token. Most Nile operations the caller to pass a\n            valid token in Authorization HTTP header using Bearer schema\n          example: \u003e-\n            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n    Error:\n      required:\n        - error_code\n        - message\n        - status_code\n      type: object\n      properties:\n        error_code:\n          type: string\n          enum:\n            - internal_error\n            - bad_request\n            - unauthorized_credentials\n            - user_not_found\n            - org_not_found\n            - workspace_not_found\n            - invite_not_found\n            - duplicate_org_name\n            - duplicate_workspace_name\n            - empty_org_name\n            - empty_workspace_name\n            - duplicate_user_email\n            - user_already_in_org\n            - duplicate_entity_name\n            - entity_not_found\n            - instance_not_found\n            - access_policy_not_found\n            - invalid_entity_schema\n            - invalid_id\n            - invalid_action\n            - empty_actions\n            - invalid_action_combination\n            - invalid_policy_variable\n            - forbidden\n            - metric_not_found\n            - conflict\n            - access_token_not_found\n            - precondition_failed\n        message:\n          type: string\n        status_code:\n          type: integer\n          format: int32\n    LoginInfo:\n      required:\n        - email\n        - password\n      type: object\n      properties:\n        email:\n          type: string\n          description: The email of the user we are authenticating\n          format: email\n          example: shaun@colton.demo\n        password:\n          minLength: 1\n          type: string\n          description: The password of the user\n          example: mycatname\n    DeveloperGoogleOAuthResponse:\n      required:\n        - token\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/User'\n        token:\n          type: string\n          description: \u003e-\n            JWT authentication token. Most Nile operations the caller to pass a\n            valid token in Authorization HTTP header using Bearer schema\n          example: \u003e-\n            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n    OrgMembership:\n      type: object\n      properties:\n        joined:\n          type: string\n          format: date-time\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n      example:\n        joined: 2022-08-03T17:30:00.295Z\n        metadata:\n          position: CEO\n    User:\n      required:\n        - email\n        - type\n      type: object\n      properties:\n        id:\n          type: string\n        created:\n          type: string\n          format: date-time\n          readOnly: true\n        updated:\n          type: string\n          format: date-time\n          readOnly: true\n        seq:\n          type: integer\n          format: int64\n          readOnly: true\n        type:\n          type: string\n          enum:\n            - user\n            - developer\n            - service_account\n            - nile_employee\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n        org_memberships:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/OrgMembership'\n          example:\n            org_02qaCO8qNEmfpAcomojhLb:\n              joined: 2022-08-09T10:27:30.956Z\n              metadata:\n                region: us-east-2\n            org_02qdS9KPAnG6Pt5XFAomu6:\n              joined: 2022-08-03T17:30:00.295Z\n              metadata:\n                region: us-west-2\n        email:\n          type: string\n          format: email\n    CreateUserRequest:\n      required:\n        - email\n        - password\n      type: object\n      properties:\n        email:\n          type: string\n          format: email\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n        password:\n          minLength: 1\n          type: string\n    Entity:\n      required:\n        - id\n        - name\n        - schema\n        - type\n      type: object\n      properties:\n        id:\n          type: string\n          readOnly: true\n        created:\n          type: string\n          format: date-time\n          readOnly: true\n        updated:\n          type: string\n          format: date-time\n          readOnly: true\n        seq:\n          type: integer\n          format: int64\n          readOnly: true\n        type:\n          type: string\n          enum:\n            - entity\n        name:\n          type: string\n          example: clusters\n        schema:\n          $ref: '#/components/schemas/JsonSchema'\n    JsonSchema:\n      type: object\n      description: A JSON Schema\n      example:\n        type: object\n        properties:\n          id:\n            type: string\n          memory:\n            type: integer\n          cpus:\n            type: integer\n    CreateEntityRequest:\n      required:\n        - name\n        - schema\n      type: object\n      properties:\n        name:\n          type: string\n          example: clusters\n        schema:\n          $ref: '#/components/schemas/JsonSchema'\n    UpdateEntityRequest:\n      required:\n        - schema\n      type: object\n      properties:\n        schema:\n          $ref: '#/components/schemas/JsonSchema'\n    Instance:\n      required:\n        - id\n        - org\n        - properties\n        - type\n      type: object\n      properties:\n        id:\n          type: string\n          readOnly: true\n        created:\n          type: string\n          format: date-time\n          readOnly: true\n        updated:\n          type: string\n          format: date-time\n          readOnly: true\n        seq:\n          type: integer\n          format: int64\n          readOnly: true\n        type:\n          type: string\n          description: The entity type of this instance\n          example: clusters\n        deleted:\n          type: string\n          format: date-time\n          readOnly: true\n        properties:\n          $ref: '#/components/schemas/JsonSchemaInstance'\n        org:\n          type: string\n          description: The id of the organization that this instance belongs to\n    InstanceEvent:\n      required:\n        - timestamp\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        event_type:\n          type: string\n          enum:\n            - CREATE\n            - UPDATE\n            - DELETE\n        before:\n          $ref: '#/components/schemas/Instance'\n        after:\n          $ref: '#/components/schemas/Instance'\n        org:\n          type: string\n          description: \u003e-\n            The id of the organization that the instance of this event belongs\n            to\n        timestamp:\n          type: string\n          format: date-time\n    JsonSchemaInstance:\n      type: object\n      description: An *instance* of a JSON Schema\n      example:\n        id: lkc-123\n        memory: 4096\n        cpus: 4\n    JsonNode:\n      type: object\n      description: the value to add or replace\n    AddOperation:\n      required:\n        - op\n        - path\n        - value\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/PatchOperation'\n        - type: object\n          properties:\n            path:\n              type: string\n              description: The JSON Pointer Path you want to add or replace\n              example: /address/street\n            op:\n              type: string\n              enum:\n                - add\n            value:\n              $ref: '#/components/schemas/JsonNode'\n    CopyOperation:\n      required:\n        - from\n        - op\n        - path\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/PatchOperation'\n        - type: object\n          properties:\n            from:\n              type: string\n              description: The JSON Pointer path you would like to move/copy from\n              example: /address/street\n            path:\n              type: string\n              description: The JSON Pointer path you would like to move/copy to\n              example: /address/home/street\n            op:\n              type: string\n              enum:\n                - copy\n    MoveOperation:\n      required:\n        - from\n        - op\n        - path\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/PatchOperation'\n        - type: object\n          properties:\n            from:\n              type: string\n              description: The JSON Pointer path you would like to move/copy from\n              example: /address/street\n            path:\n              type: string\n              description: The JSON Pointer path you would like to move/copy to\n              example: /address/home/street\n            op:\n              type: string\n              enum:\n                - move\n    PatchOperation:\n      required:\n        - op\n      type: object\n      properties:\n        op:\n          type: string\n      description: The JSONPatch operations you would like to apply to the instance\n      discriminator:\n        propertyName: op\n      oneOf:\n        - $ref: '#/components/schemas/AddOperation'\n        - $ref: '#/components/schemas/CopyOperation'\n        - $ref: '#/components/schemas/RemoveOperation'\n        - $ref: '#/components/schemas/MoveOperation'\n        - $ref: '#/components/schemas/ReplaceOperation'\n    RemoveOperation:\n      required:\n        - op\n        - path\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/PatchOperation'\n        - type: object\n          properties:\n            path:\n              type: string\n              description: The JSON Pointer path to remove\n              example: /address/street\n            op:\n              type: string\n              enum:\n                - remove\n    ReplaceOperation:\n      required:\n        - op\n        - path\n        - value\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/PatchOperation'\n        - type: object\n          properties:\n            path:\n              type: string\n              description: The JSON Pointer Path you want to add or replace\n              example: /address/street\n            value:\n              $ref: '#/components/schemas/JsonNode'\n            op:\n              type: string\n              enum:\n                - replace\n    UpdateInstanceRequest:\n      required:\n        - properties\n      type: object\n      properties:\n        properties:\n          $ref: '#/components/schemas/JsonSchemaInstance'\n    Invite:\n      required:\n        - code\n        - inviter\n        - org\n        - status\n      type: object\n      properties:\n        code:\n          type: string\n        org:\n          type: string\n        inviter:\n          type: string\n        status:\n          type: string\n          enum:\n            - active\n    Bucket:\n      type: object\n      properties:\n        timestamp:\n          type: string\n          description: The timestamp when the bucket starts\n          format: date-time\n          example: 2021-01-01T00:00:00.000Z\n        bucket_size:\n          type: string\n          description: The size of the bucket\n          example: 1h\n          enum:\n            - 1h\n            - 1d\n            - 10m\n        average:\n          type: number\n          description: The average of all values in the bucket\n          format: double\n        sum:\n          type: number\n          description: The sum of all values in the bucket\n          format: double\n        min:\n          type: number\n          description: The min of all values in the bucket\n          format: double\n        max:\n          type: number\n          description: The max of all values in the bucket\n          format: double\n        percentile_95:\n          type: number\n          description: The 95th percentile\n          format: double\n        organization_id:\n          type: string\n          description: The organization id\n          example: org_02qwn8bovgrXdNx8XlVzbU\n        instance_id:\n          type: string\n          description: The organization id\n          example: inst_02qwn8bovgrXdNx8XlVzbU\n    AggregationRequest:\n      required:\n        - start_time\n      type: object\n      properties:\n        bucket_size:\n          type: string\n          description: The size of the bucket\n          enum:\n            - 1h\n            - 1d\n            - 10m\n        buckets:\n          minimum: 1\n          type: integer\n          description: Number of buckets to return. Defaults to 3 if not provided.\n          format: int32\n          default: 3\n        start_time:\n          type: string\n          description: \u003e-\n            An ISO-8601 formatted date-time, i.e., 2018-11-13T20:20:39+00:00,\n            that the aggregation should start at. This time will be truncated\n            based on bucket_size, i.e., if bucket_size is 1h, then the\n            start_time will be truncated to the nearest hour.\n          format: date-time\n        organization_id:\n          type: string\n          description: The Nile organization id to aggregate on\n        instance_id:\n          type: string\n          description: The optional Nile instance id to aggregate on\n    Measurement:\n      required:\n        - instance_id\n        - timestamp\n        - value\n      type: object\n      properties:\n        timestamp:\n          type: string\n          description: \u003e-\n            An ISO-8601 formatted date-time, i.e., 2018-11-13T20:20:39+00:00,\n            that represents the time the measurement was created.\n          format: date-time\n          example: 2022-11-13T20:20:39.000Z\n        value:\n          type: number\n          description: the measured value\n          format: double\n          example: 11.8\n        instance_id:\n          type: string\n          description: InstanceId of the Nile instance this measurement is related to\n          example: inst_02qwn8bovgrXdNx8XlVzbU\n      description: Measurements associated with this metric\n    Metric:\n      required:\n        - entity_type\n        - measurements\n        - name\n        - type\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of the metric that is unique in a workspace\n          example: cluster.bytes.in\n        type:\n          type: string\n          description: Type of metric. Currently sum or gauge\n          example: sum\n          enum:\n            - gauge\n            - sum\n        entity_type:\n          type: string\n          description: The Nile entity type this metric is related to\n          example: cluster\n        measurements:\n          type: array\n          description: Measurements associated with this metric\n          items:\n            $ref: '#/components/schemas/Measurement'\n    Filter:\n      type: object\n      properties:\n        metric_name:\n          type: string\n          description: Name of the metric to filter on\n          example: cluster.bytes.in\n        instance_id:\n          type: string\n          description: The Nile instance id to filter on\n          example: inst_02qwn8bovgrXdNx8XlVzbU\n        entity_type:\n          type: string\n          description: \u003e-\n            The Nile entity type to filter on. This is ignored if entity_type is\n            on a URL param.\n          example: cluster\n        organization_id:\n          type: string\n          description: The Nile organization id to filter on\n          example: org_02qwn8bovgrXdNx8XlVzbU\n        start_time:\n          type: string\n          description: \u003e-\n            The ISO-8601 formatted timestamp used to begin searching for\n            matching metrics, i.e., 2018-11-13T20:20:39+00:00. If not provided\n            the range will start from the epoch. Results returned are inclusive\n            of this timestamp.\n          format: date-time\n          example: 2021-01-01T00:00:00.000Z\n        duration:\n          type: integer\n          description: \u003e-\n            The duration is added to from_timestamp to limit the time range of\n            the query. i.e., the query will be restricted to metric.timestamp \u003e=\n            from_timestamp AND metric.timestamp \u003c from_timestamp + duration.  If\n            not provided or the duration is \u003c=0 then the end timestamp is set to\n            now\n          format: int32\n          example: 600000\n    ListMetricDefinitionsResponse:\n      required:\n        - metric_definitions\n      type: object\n      properties:\n        metric_definitions:\n          type: array\n          description: The list of metric definitions for a workspace or entity\n          items:\n            $ref: '#/components/schemas/MetricDefinition'\n    MetricDefinition:\n      required:\n        - entity_type\n        - name\n        - type\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of the metric\n          example: cluster.bytes.out\n        type:\n          type: string\n          description: The type of the metric\n          example: gauge\n          enum:\n            - gauge\n            - sum\n        entity_type:\n          type: string\n          description: The entity type of the metric\n          example: cluster\n      description: The list of metric definitions for a workspace or entity\n    AddUserToOrgRequest:\n      required:\n        - email\n      type: object\n      properties:\n        email:\n          type: string\n          format: email\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n    Organization:\n      required:\n        - creator\n        - id\n        - name\n        - type\n      type: object\n      properties:\n        id:\n          type: string\n          readOnly: true\n        created:\n          type: string\n          format: date-time\n          readOnly: true\n        updated:\n          type: string\n          format: date-time\n          readOnly: true\n        seq:\n          type: integer\n          format: int64\n          readOnly: true\n        type:\n          type: string\n          enum:\n            - nile\n            - organization\n            - workspace\n        name:\n          type: string\n        creator:\n          type: string\n          description: ID of the user who created this organization\n    CreateOrganizationRequest:\n      required:\n        - name\n      type: object\n      properties:\n        name:\n          minLength: 1\n          type: string\n    UpdateOrganizationRequest:\n      required:\n        - name\n      type: object\n      properties:\n        name:\n          minLength: 1\n          type: string\n    UpdateOrganizationMembershipRequest:\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n    AccessTokenInfo:\n      required:\n        - id\n        - label\n      type: object\n      properties:\n        id:\n          type: string\n          readOnly: true\n        label:\n          minLength: 3\n          type: string\n          description: The human-friendly label of the access token\n        description:\n          type: string\n          description: The intended use of the token\n        metadata:\n          type: object\n          description: Arbitrary metadata.\n          example:\n            location: US\n            age: 21\n            active: true\n            name:\n              first: John\n              last: Doe\n        created:\n          type: string\n          format: date-time\n          readOnly: true\n    CreateAccessTokenResponse:\n      required:\n        - token\n      type: object\n      properties:\n        token:\n          type: string\n          description: The secret key to use for authentication\n          readOnly: true\n        token_info:\n          $ref: '#/components/schemas/AccessTokenInfo'\n    CreateAccessTokenRequest:\n      required:\n        - label\n      type: object\n      properties:\n        label:\n          minLength: 3\n          type: string\n          description: The human-friendly label of the access token\n        description:\n          type: string\n          description: The intended use of the token\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n    CreateDeveloperOwnedUserRequest:\n      required:\n        - email\n      type: object\n      properties:\n        email:\n          type: string\n          format: email\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n    UpdateUserRequest:\n      required:\n        - email\n      type: object\n      properties:\n        email:\n          type: string\n          format: email\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n        password:\n          minLength: 1\n          type: string\n    Workspace:\n      required:\n        - id\n        - name\n        - type\n      type: object\n      properties:\n        id:\n          type: string\n          readOnly: true\n        created:\n          type: string\n          format: date-time\n          readOnly: true\n        updated:\n          type: string\n          format: date-time\n          readOnly: true\n        seq:\n          type: integer\n          format: int64\n          readOnly: true\n        type:\n          type: string\n          enum:\n            - workspace\n        name:\n          type: string\n    CreateWorkspaceRequest:\n      required:\n        - name\n      type: object\n      properties:\n        name:\n          type: string\n    WorkspaceOIDCConfig:\n      type: object\n      properties:\n        providers:\n          type: array\n          items:\n            $ref: '#/components/schemas/WorkspaceOIDCProviderConfig'\n        urls:\n          $ref: '#/components/schemas/WorkspaceOIDCRedirectUrls'\n    WorkspaceOIDCProviderConfig:\n      type: object\n      properties:\n        provider_name:\n          type: string\n          enum:\n            - GOOGLE\n        enabled:\n          type: boolean\n        integration_mode:\n          type: string\n          description: \u003e-\n            Indicates how the OIDC flow is handled:\n\n            * NILE_MANAGED - Nile manages the OIDC flow end-to-end, including\n            the redirect to the provider\n\n            * CALLBACK - The customer manages OAuth setup but redirects to Nile\n            when a customer authenticates\n          enum:\n            - NILE_MANAGED\n            - CALLBACK\n    WorkspaceOIDCRedirectUrls:\n      type: object\n      properties:\n        auth_failure_url:\n          type: string\n        sign_up_success_url:\n          type: string\n        log_in_success_url:\n          type: string\n        sign_out_url:\n          type: string\n    WorkspaceSettings:\n      type: object\n      properties:\n        oidc:\n          $ref: '#/components/schemas/WorkspaceOIDCConfig'\n  parameters:\n    workspace:\n      name: workspace\n      in: path\n      description: \u003e-\n        The name of the Nile workspace where all the data-plane metadata for\n        this user is stored\n      required: false\n      schema:\n        minLength: 1\n        type: string\n",
			"canonicalURL": "/npm/theniledev/js@55aded7feb535cd633ffcccf64ba815d4878c72e/-/blob/spec/api.yaml",
			"externalURLs": []
		}
	},
	"Error": "parse: parse spec: parse components: parameters: \"workspace\": at spec/api.yaml:2781:17: path parameters must be required"
}