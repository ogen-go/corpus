{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/rapi-doc/RapiDoc"
		},
		"file": {
			"name": "dynamic-query-params.yaml",
			"size": 0,
			"path": "docs/specs/dynamic-query-params.yaml",
			"byteSize": 7260,
			"content": "openapi: 3.0.0\ninfo:\n  title:  Dynamic Query Params\n  version: 1.0.0\npaths:\n  /dynamic-query-params:\n    get:\n      tags:\n        - Query Params\n      summary:  Various ways to pass query params\n      description: \u003e\n        Following OpenAPI spec demonstrate various ways to pass query params.\n          - you may pass predefined query params\n          - you may create dynamic query params by defining a query-param as an object,\n            in that case each key of the object will be treated as a seperate param\n          - Array serialization depends on `style` and `explode` property\n\n        ```yaml\n         openapi: 3.0.0\n          info:\n            title:  Dynamic Query Params\n            version: 1.0.0\n          paths:\n            /dynamic-query-params:\n              get:\n                tags:\n                  - Query Params\n                summary:  Various ways to pass query params\n                parameters:\n                  - name: limit\n                    in: query\n                    schema:\n                      type: integer\n                  - name: fruits\n                    in: query\n                    style: form\n                    explode: false\n                    schema:\n                      type: array\n                      items:\n                        type: string\n                  - name: colors\n                    in: query\n                    schema:\n                      type: array\n                      items:\n                        type: string\n                  - in: query\n                    name: dynamic-query-params1\n                    schema:\n                      type: object\n                      additionalProperties: {}\n                  - in: query\n                    name: dynamic-query-params2\n                    style: form\n                    explode: false\n                    schema:\n                      type: object\n                      additionalProperties: {}\n                  - in: query\n                    name: dynamic-query-params3\n                    style: pipeDelimited\n                    explode: false\n                    schema:\n                      type: object\n                      additionalProperties: {}\n                  - in: query\n                    name: dynamic-query-params4\n                    content:\n                      \"application/json\":\n                        schema:\n                          type: object\n                          properties:\n                            someProperty:\n                              type: string\n                          additionalProperties:\n                          type: string\n                  - in: query\n                    name: dynamic-query-params5\n                    explode: false\n                    required: false\n                    schema:\n                      type: object\n                      properties:\n                        propertyOne:\n                          type: string\n                          enum:\n                            - VALUE-1\n                            - VALUE-2\n                          default: VALUE-2\n                        propertyTwo:\n                          type: string\n                          enum:\n                            - FLAG-1\n                            - FLAG-2\n                          default: FLAG-1\n                responses:\n                  '200':\n                    description: successful operation\n          ```\n      parameters:\n        - name: limit\n          in: query\n          example: 10\n          description: \u003e\n            primitive non-dynamic parameter can coexist with dynamic parameters \u003cbr /\u003e\n            `limit=10`\n          schema:\n            type: integer\n        - name: fruits\n          in: query\n          example:\n            - apple\n            - banana\n            - grape\n          description: \u003e\n            not-exploded array, should be serialized as \u003cbr /\u003e\n            `fruits=apple,banana,grape`\n          schema:\n            type: array\n            items:\n              type: string\n        - name: colors\n          in: query\n          example:\n            - red\n            - black\n            - white\n          description: \u003e\n            exploded array, should be serialized as \u003cbr /\u003e\n            `colors=red\u0026colors=black\u0026colors=white`\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: dynamic-query-params1\n          description: \u003e\n            Arrays are exploded, should be serialized as  \u003cbr /\u003e\n            `a=1\u0026b=2\u0026colors=red\u0026colors=black\u0026e=3`\n          schema:\n            type: object\n            additionalProperties: {}\n          example: \u003e\n            {\n              \"a\":1,\n              \"b\":2,\n              \"colors\":[\n                \"red\",\n                \"black\"\n              ],\n              \"d\":{ \"d1\":1, \"d2\":2 },\n              \"e\":3\n            }\n        - in: query\n          name: dynamic-query-params2\n          description: \u003e\n            Arrays are not-exploded, therefore comma sperated \u003cbr /\u003e\n            `f=1\u0026g=2\u0026hobbies=music,dance`\n          style: form\n          explode: false\n          schema:\n            type: object\n            additionalProperties: {}\n          example: \u003e\n            {\n              \"f\":1,\n              \"g\":2,\n              \"hobbies\":[\n                \"music\",\n                \"dance\"\n              ]\n            }\n        - in: query\n          name: dynamic-query-params3\n          description: \u003e\n            Arrays are not exploded, and pipe separated \u003cbr /\u003e\n            `i=1\u0026j=2\u0026keys=public|private`\n          style: pipeDelimited\n          explode: false\n          schema:\n            type: object\n            additionalProperties: {}\n          example: \u003e\n            {\n              \"i\":1,\n              \"j\":2,\n              \"keys\":[\"public\", \"private\"]\n            }\n        - in: query\n          name: dynamic-query-params4\n          description: \u003e\n            Parameters with JSON encoding are JSON encoded and escaped: \u003cbr /\u003e\n            `dynamic-query-params4=%7B%22someProperty%22%3A%22foo%22%2C%22bar%22%3A%22baz%22%7D`\n          content:\n            \"application/json\":\n              example: \u003e\n                {\n                  \"someProperty\": \"foo\",\n                  \"bar\": \"baz\"\n                }\n              schema:\n                type: object\n                properties:\n                  someProperty:\n                    type: string\n                additionalProperties:\n                  type: string\n        - in: query\n          name: dynamic-query-params5\n          description: \u003e\n            Example generation works for non-exloded objects:\u003cbr /\u003e\n            `propertyOne=VALUE-1\u0026property2=FLAG-1`\n          explode: false\n          required: false\n          schema:\n            type: object\n            properties:\n              propertyOne:\n                type: string\n                enum:\n                  - VALUE-1\n                  - VALUE-2\n                default: VALUE-2\n              propertyTwo:\n                type: string\n                enum:\n                  - FLAG-1\n                  - FLAG-2\n                default: FLAG-1\n      responses:\n        '200':\n          description: successful operation\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /dynamic-query-params: get: parameters: parse parameter \"dynamic-query-params3\": invalid schema:style:explode combination"
}