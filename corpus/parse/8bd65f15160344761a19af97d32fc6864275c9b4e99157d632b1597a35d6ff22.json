{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/jina-ai/jina-ui"
		},
		"file": {
			"name": "schema.json",
			"size": 0,
			"path": "packages/showcases/src/types/e-commerce/schema.json",
			"byteSize": 34055,
			"content": "{\n  \"openapi\": \"3.0.2\",\n  \"info\": {\n    \"title\": \"Jina Ecommerce\",\n    \"description\": \"Ecommerce search powered by Jina\",\n    \"version\": \"2.1.0\"\n  },\n  \"paths\": {\n    \"/status\": {\n      \"get\": {\n        \"tags\": [\n          \"Debug\"\n        ],\n        \"summary\": \"Get the status of Jina service\",\n        \"description\": \"Get the status of this Jina service.\\n\\nThis is equivalent to running `jina -vf` from command line.\\n\\n.. # noqa: DAR201\",\n        \"operationId\": \"_status_status_get\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/JinaStatusModel\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/post\": {\n      \"post\": {\n        \"tags\": [\n          \"Debug\"\n        ],\n        \"summary\": \"Post a data request to some endpoint\",\n        \"description\": \"Post a data request to some endpoint.\\n\\nThis is equivalent to the following:\\n\\n    from jina import Flow\\n\\n    f = Flow().add(...)\\n\\n    with f:\\n        f.post(endpoint, ...)\\n\\n.. # noqa: DAR201\\n.. # noqa: DAR101\",\n        \"operationId\": \"post_post_post\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/JinaEndpointRequestModel\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RequestProto\"\n                }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Validation Error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/index\": {\n      \"post\": {\n        \"tags\": [\n          \"CRUD\"\n        ],\n        \"summary\": \"/Index\",\n        \"description\": \"Post data requests to the Flow. Executors with `@requests(on=\\\"/index\\\")` will respond.\",\n        \"operationId\": \"_index_index_post\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/JinaRequestModel\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/JinaResponseModel\"\n                }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Validation Error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/search\": {\n      \"post\": {\n        \"tags\": [\n          \"CRUD\"\n        ],\n        \"summary\": \"/Search\",\n        \"description\": \"Post data requests to the Flow. Executors with `@requests(on=\\\"/search\\\")` will respond.\",\n        \"operationId\": \"_search_search_post\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/JinaRequestModel\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/JinaResponseModel\"\n                }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Validation Error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/delete\": {\n      \"delete\": {\n        \"tags\": [\n          \"CRUD\"\n        ],\n        \"summary\": \"/Delete\",\n        \"description\": \"Post data requests to the Flow. Executors with `@requests(on=\\\"/delete\\\")` will respond.\",\n        \"operationId\": \"_delete_delete_delete\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/JinaRequestModel\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/JinaResponseModel\"\n                }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Validation Error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/update\": {\n      \"put\": {\n        \"tags\": [\n          \"CRUD\"\n        ],\n        \"summary\": \"/Update\",\n        \"description\": \"Post data requests to the Flow. Executors with `@requests(on=\\\"/update\\\")` will respond.\",\n        \"operationId\": \"_update_update_put\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/JinaRequestModel\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/JinaResponseModel\"\n                }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Validation Error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"Command\": {\n        \"title\": \"Command\",\n        \"enum\": [\n          0,\n          1,\n          2,\n          3,\n          4,\n          5,\n          6\n        ],\n        \"description\": \"An enumeration.\"\n      },\n      \"ControlRequestProto\": {\n        \"title\": \"ControlRequestProto\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"command\": {\n            \"allOf\": [\n              {\n                \"$ref\": \"#/components/schemas/Command\"\n              }\n            ],\n            \"default\": 0\n          }\n        }\n      },\n      \"DataRequestModel\": {\n        \"title\": \"DataRequestModel\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"docs\": {\n            \"title\": \"Docs\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\"\n            }\n          },\n          \"groundtruths\": {\n            \"title\": \"Groundtruths\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\"\n            }\n          }\n        }\n      },\n      \"DataRequestProto\": {\n        \"title\": \"DataRequestProto\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"docs\": {\n            \"title\": \"Docs\",\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/DocumentProto\"\n            },\n            \"default\": []\n          },\n          \"groundtruths\": {\n            \"title\": \"Groundtruths\",\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/DocumentProto\"\n            },\n            \"default\": []\n          }\n        }\n      },\n      \"DenseNdArrayProto\": {\n        \"title\": \"DenseNdArrayProto\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"buffer\": {\n            \"title\": \"Buffer\",\n            \"type\": \"string\",\n            \"format\": \"binary\",\n            \"default\": \"\"\n          },\n          \"shape\": {\n            \"title\": \"Shape\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"integer\"\n            },\n            \"default\": []\n          },\n          \"dtype\": {\n            \"title\": \"Dtype\",\n            \"type\": \"string\",\n            \"default\": \"\"\n          },\n          \"quantization\": {\n            \"allOf\": [\n              {\n                \"$ref\": \"#/components/schemas/QuantizationMode\"\n              }\n            ],\n            \"default\": 0\n          },\n          \"maxVal\": {\n            \"title\": \"Maxval\",\n            \"type\": \"number\",\n            \"default\": 0.0\n          },\n          \"minVal\": {\n            \"title\": \"Minval\",\n            \"type\": \"number\",\n            \"default\": 0.0\n          },\n          \"scale\": {\n            \"title\": \"Scale\",\n            \"type\": \"number\",\n            \"default\": 0.0\n          },\n          \"originalDtype\": {\n            \"title\": \"Originaldtype\",\n            \"type\": \"string\",\n            \"default\": \"\"\n          }\n        }\n      },\n      \"DocumentProto\": {\n        \"title\": \"DocumentProto\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"title\": \"Id\",\n            \"type\": \"string\",\n            \"default\": \"\"\n          },\n          \"granularity\": {\n            \"title\": \"Granularity\",\n            \"type\": \"integer\",\n            \"default\": 0\n          },\n          \"adjacency\": {\n            \"title\": \"Adjacency\",\n            \"type\": \"integer\",\n            \"default\": 0\n          },\n          \"parentId\": {\n            \"title\": \"Parentid\",\n            \"type\": \"string\",\n            \"default\": \"\"\n          },\n          \"buffer\": {\n            \"title\": \"Buffer\",\n            \"type\": \"string\",\n            \"format\": \"binary\",\n            \"default\": \"\"\n          },\n          \"blob\": {\n            \"$ref\": \"#/components/schemas/NdArrayProto\"\n          },\n          \"text\": {\n            \"title\": \"Text\",\n            \"type\": \"string\",\n            \"default\": \"\"\n          },\n          \"graph\": {\n            \"$ref\": \"#/components/schemas/GraphProto\"\n          },\n          \"chunks\": {\n            \"title\": \"Chunks\",\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/DocumentProto\"\n            },\n            \"default\": []\n          },\n          \"weight\": {\n            \"title\": \"Weight\",\n            \"type\": \"number\",\n            \"default\": 0.0\n          },\n          \"matches\": {\n            \"title\": \"Matches\",\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/DocumentProto\"\n            },\n            \"default\": []\n          },\n          \"uri\": {\n            \"title\": \"Uri\",\n            \"type\": \"string\",\n            \"default\": \"\"\n          },\n          \"mimeType\": {\n            \"title\": \"Mimetype\",\n            \"type\": \"string\",\n            \"default\": \"\"\n          },\n          \"tags\": {\n            \"title\": \"Tags\",\n            \"type\": \"object\"\n          },\n          \"location\": {\n            \"title\": \"Location\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"integer\"\n            },\n            \"default\": []\n          },\n          \"offset\": {\n            \"title\": \"Offset\",\n            \"type\": \"integer\",\n            \"default\": 0\n          },\n          \"embedding\": {\n            \"$ref\": \"#/components/schemas/NdArrayProto\"\n          },\n          \"scores\": {\n            \"title\": \"Scores\",\n            \"type\": \"object\",\n            \"additionalProperties\": {\n              \"$ref\": \"#/components/schemas/NamedScoreProto\"\n            },\n            \"default\": {}\n          },\n          \"modality\": {\n            \"title\": \"Modality\",\n            \"type\": \"string\",\n            \"default\": \"\"\n          },\n          \"evaluations\": {\n            \"title\": \"Evaluations\",\n            \"type\": \"object\",\n            \"additionalProperties\": {\n              \"$ref\": \"#/components/schemas/NamedScoreProto\"\n            },\n            \"default\": {}\n          }\n        }\n      },\n      \"ExceptionProto\": {\n        \"title\": \"ExceptionProto\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"title\": \"Name\",\n            \"type\": \"string\",\n            \"default\": \"\"\n          },\n          \"args\": {\n            \"title\": \"Args\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"default\": []\n          },\n          \"stacks\": {\n            \"title\": \"Stacks\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"default\": []\n          },\n          \"executor\": {\n            \"title\": \"Executor\",\n            \"type\": \"string\",\n            \"default\": \"\"\n          }\n        }\n      },\n      \"GraphProto\": {\n        \"title\": \"GraphProto\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"adjacency\": {\n            \"$ref\": \"#/components/schemas/SparseNdArrayProto\"\n          },\n          \"edgeFeatures\": {\n            \"title\": \"Edgefeatures\",\n            \"type\": \"object\"\n          },\n          \"undirected\": {\n            \"title\": \"Undirected\",\n            \"type\": \"boolean\",\n            \"default\": false\n          }\n        }\n      },\n      \"HTTPValidationError\": {\n        \"title\": \"HTTPValidationError\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"detail\": {\n            \"title\": \"Detail\",\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ValidationError\"\n            }\n          }\n        }\n      },\n      \"HeaderProto\": {\n        \"title\": \"HeaderProto\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"execEndpoint\": {\n            \"title\": \"Execendpoint\",\n            \"type\": \"string\",\n            \"default\": \"\"\n          },\n          \"targetPeapod\": {\n            \"title\": \"Targetpeapod\",\n            \"type\": \"string\",\n            \"default\": \"\"\n          },\n          \"noPropagate\": {\n            \"title\": \"Nopropagate\",\n            \"type\": \"boolean\",\n            \"default\": false\n          }\n        }\n      },\n      \"JinaEndpointRequestModel\": {\n        \"title\": \"JinaEndpointRequestModel\",\n        \"required\": [\n          \"execEndpoint\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"data\": {\n            \"title\": \"Data\",\n            \"anyOf\": [\n              {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/DocumentProto\"\n                }\n              },\n              {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"object\"\n                }\n              },\n              {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"string\",\n                  \"format\": \"binary\"\n                }\n              }\n            ],\n            \"description\": \"Data to send, a list of dict/string/bytes that can be converted into a list of `Document` objects\",\n            \"example\": [\n              {\n                \"id\": \"🐲\",\n                \"chunks\": [\n                  {\n                    \"id\": \"🐦\",\n                    \"chunks\": [\n                      {\n                        \"id\": \"🐢\",\n                        \"tags\": {\n                          \"position\": \"North\",\n                          \"guardian\": \"Black Tortoise\"\n                        },\n                        \"granularity\": 2,\n                        \"parentId\": \"🐦\",\n                        \"adjacency\": 0,\n                        \"chunks\": [],\n                        \"weight\": 0.0,\n                        \"matches\": [],\n                        \"uri\": \"\",\n                        \"mimeType\": \"\",\n                        \"location\": [],\n                        \"offset\": 0,\n                        \"scores\": {},\n                        \"modality\": \"\",\n                        \"evaluations\": {}\n                      }\n                    ],\n                    \"tags\": {\n                      \"position\": \"South\",\n                      \"guardian\": \"Vermilion Bird\"\n                    },\n                    \"granularity\": 1,\n                    \"parentId\": \"🐲\",\n                    \"adjacency\": 0,\n                    \"weight\": 0.0,\n                    \"matches\": [],\n                    \"uri\": \"\",\n                    \"mimeType\": \"\",\n                    \"location\": [],\n                    \"offset\": 0,\n                    \"scores\": {},\n                    \"modality\": \"\",\n                    \"evaluations\": {}\n                  }\n                ],\n                \"matches\": [\n                  {\n                    \"id\": \"🐯\",\n                    \"tags\": {\n                      \"guardian\": \"White Tiger\",\n                      \"position\": \"West\"\n                    },\n                    \"adjacency\": 1,\n                    \"granularity\": 0,\n                    \"parentId\": \"\",\n                    \"chunks\": [],\n                    \"weight\": 0.0,\n                    \"matches\": [],\n                    \"uri\": \"\",\n                    \"mimeType\": \"\",\n                    \"location\": [],\n                    \"offset\": 0,\n                    \"scores\": {},\n                    \"modality\": \"\",\n                    \"evaluations\": {}\n                  }\n                ],\n                \"tags\": {\n                  \"position\": \"East\",\n                  \"guardian\": \"Azure Dragon\"\n                },\n                \"granularity\": 0,\n                \"adjacency\": 0,\n                \"parentId\": \"\",\n                \"weight\": 0.0,\n                \"uri\": \"\",\n                \"mimeType\": \"\",\n                \"location\": [],\n                \"offset\": 0,\n                \"scores\": {},\n                \"modality\": \"\",\n                \"evaluations\": {}\n              },\n              {\n                \"id\": \"🐦\",\n                \"tags\": {\n                  \"guardian\": \"Vermilion Bird\",\n                  \"position\": \"South\"\n                },\n                \"granularity\": 0,\n                \"adjacency\": 0,\n                \"parentId\": \"\",\n                \"chunks\": [],\n                \"weight\": 0.0,\n                \"matches\": [],\n                \"uri\": \"\",\n                \"mimeType\": \"\",\n                \"location\": [],\n                \"offset\": 0,\n                \"scores\": {},\n                \"modality\": \"\",\n                \"evaluations\": {}\n              },\n              {\n                \"id\": \"🐢\",\n                \"tags\": {\n                  \"position\": \"North\",\n                  \"guardian\": \"Black Tortoise\"\n                },\n                \"granularity\": 0,\n                \"adjacency\": 0,\n                \"parentId\": \"\",\n                \"chunks\": [],\n                \"weight\": 0.0,\n                \"matches\": [],\n                \"uri\": \"\",\n                \"mimeType\": \"\",\n                \"location\": [],\n                \"offset\": 0,\n                \"scores\": {},\n                \"modality\": \"\",\n                \"evaluations\": {}\n              },\n              {\n                \"id\": \"🐯\",\n                \"tags\": {\n                  \"position\": \"West\",\n                  \"guardian\": \"White Tiger\"\n                },\n                \"granularity\": 0,\n                \"adjacency\": 0,\n                \"parentId\": \"\",\n                \"chunks\": [],\n                \"weight\": 0.0,\n                \"matches\": [],\n                \"uri\": \"\",\n                \"mimeType\": \"\",\n                \"location\": [],\n                \"offset\": 0,\n                \"scores\": {},\n                \"modality\": \"\",\n                \"evaluations\": {}\n              }\n            ]\n          },\n          \"targetPeapod\": {\n            \"title\": \"Targetpeapod\",\n            \"type\": \"string\",\n            \"description\": \"A regex string represent the certain peas/pods request targeted.\",\n            \"example\": \"pod0/*\"\n          },\n          \"parameters\": {\n            \"title\": \"Parameters\",\n            \"type\": \"object\",\n            \"description\": \"A dictionary of parameters to be sent to the executor.\",\n            \"example\": {\n              \"top_k\": 3,\n              \"model\": \"bert\"\n            }\n          },\n          \"execEndpoint\": {\n            \"title\": \"Execendpoint\",\n            \"type\": \"string\",\n            \"description\": \"The endpoint string, by convention starts with `/`. All executors bind with `@requests(on=\\\"/foo\\\")` will receive this request.\",\n            \"example\": \"/foo\"\n          }\n        },\n        \"description\": \"Jina HTTP request model that allows customized endpoint.\"\n      },\n      \"JinaRequestModel\": {\n        \"title\": \"JinaRequestModel\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"data\": {\n            \"title\": \"Data\",\n            \"anyOf\": [\n              {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/DocumentProto\"\n                }\n              },\n              {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"object\"\n                }\n              },\n              {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"string\",\n                  \"format\": \"binary\"\n                }\n              }\n            ],\n            \"description\": \"Data to send, a list of dict/string/bytes that can be converted into a list of `Document` objects\",\n            \"example\": [\n              {\n                \"id\": \"🐲\",\n                \"chunks\": [\n                  {\n                    \"id\": \"🐦\",\n                    \"chunks\": [\n                      {\n                        \"id\": \"🐢\",\n                        \"tags\": {\n                          \"position\": \"North\",\n                          \"guardian\": \"Black Tortoise\"\n                        },\n                        \"granularity\": 2,\n                        \"parentId\": \"🐦\",\n                        \"adjacency\": 0,\n                        \"chunks\": [],\n                        \"weight\": 0.0,\n                        \"matches\": [],\n                        \"uri\": \"\",\n                        \"mimeType\": \"\",\n                        \"location\": [],\n                        \"offset\": 0,\n                        \"scores\": {},\n                        \"modality\": \"\",\n                        \"evaluations\": {}\n                      }\n                    ],\n                    \"tags\": {\n                      \"position\": \"South\",\n                      \"guardian\": \"Vermilion Bird\"\n                    },\n                    \"granularity\": 1,\n                    \"parentId\": \"🐲\",\n                    \"adjacency\": 0,\n                    \"weight\": 0.0,\n                    \"matches\": [],\n                    \"uri\": \"\",\n                    \"mimeType\": \"\",\n                    \"location\": [],\n                    \"offset\": 0,\n                    \"scores\": {},\n                    \"modality\": \"\",\n                    \"evaluations\": {}\n                  }\n                ],\n                \"matches\": [\n                  {\n                    \"id\": \"🐯\",\n                    \"tags\": {\n                      \"guardian\": \"White Tiger\",\n                      \"position\": \"West\"\n                    },\n                    \"adjacency\": 1,\n                    \"granularity\": 0,\n                    \"parentId\": \"\",\n                    \"chunks\": [],\n                    \"weight\": 0.0,\n                    \"matches\": [],\n                    \"uri\": \"\",\n                    \"mimeType\": \"\",\n                    \"location\": [],\n                    \"offset\": 0,\n                    \"scores\": {},\n                    \"modality\": \"\",\n                    \"evaluations\": {}\n                  }\n                ],\n                \"tags\": {\n                  \"position\": \"East\",\n                  \"guardian\": \"Azure Dragon\"\n                },\n                \"granularity\": 0,\n                \"adjacency\": 0,\n                \"parentId\": \"\",\n                \"weight\": 0.0,\n                \"uri\": \"\",\n                \"mimeType\": \"\",\n                \"location\": [],\n                \"offset\": 0,\n                \"scores\": {},\n                \"modality\": \"\",\n                \"evaluations\": {}\n              },\n              {\n                \"id\": \"🐦\",\n                \"tags\": {\n                  \"guardian\": \"Vermilion Bird\",\n                  \"position\": \"South\"\n                },\n                \"granularity\": 0,\n                \"adjacency\": 0,\n                \"parentId\": \"\",\n                \"chunks\": [],\n                \"weight\": 0.0,\n                \"matches\": [],\n                \"uri\": \"\",\n                \"mimeType\": \"\",\n                \"location\": [],\n                \"offset\": 0,\n                \"scores\": {},\n                \"modality\": \"\",\n                \"evaluations\": {}\n              },\n              {\n                \"id\": \"🐢\",\n                \"tags\": {\n                  \"position\": \"North\",\n                  \"guardian\": \"Black Tortoise\"\n                },\n                \"granularity\": 0,\n                \"adjacency\": 0,\n                \"parentId\": \"\",\n                \"chunks\": [],\n                \"weight\": 0.0,\n                \"matches\": [],\n                \"uri\": \"\",\n                \"mimeType\": \"\",\n                \"location\": [],\n                \"offset\": 0,\n                \"scores\": {},\n                \"modality\": \"\",\n                \"evaluations\": {}\n              },\n              {\n                \"id\": \"🐯\",\n                \"tags\": {\n                  \"position\": \"West\",\n                  \"guardian\": \"White Tiger\"\n                },\n                \"granularity\": 0,\n                \"adjacency\": 0,\n                \"parentId\": \"\",\n                \"chunks\": [],\n                \"weight\": 0.0,\n                \"matches\": [],\n                \"uri\": \"\",\n                \"mimeType\": \"\",\n                \"location\": [],\n                \"offset\": 0,\n                \"scores\": {},\n                \"modality\": \"\",\n                \"evaluations\": {}\n              }\n            ]\n          },\n          \"targetPeapod\": {\n            \"title\": \"Targetpeapod\",\n            \"type\": \"string\",\n            \"description\": \"A regex string represent the certain peas/pods request targeted.\",\n            \"example\": \"pod0/*\"\n          },\n          \"parameters\": {\n            \"title\": \"Parameters\",\n            \"type\": \"object\",\n            \"description\": \"A dictionary of parameters to be sent to the executor.\",\n            \"example\": {\n              \"top_k\": 3,\n              \"model\": \"bert\"\n            }\n          }\n        },\n        \"description\": \"Jina HTTP request model.\"\n      },\n      \"JinaResponseModel\": {\n        \"title\": \"JinaResponseModel\",\n        \"required\": [\n          \"requestId\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"requestId\": {\n            \"title\": \"Requestid\",\n            \"type\": \"string\",\n            \"description\": \"The ID given by Jina service\",\n            \"example\": \"b5110ed9-1954-4a3d-9180-0795a1e0d7d8\"\n          },\n          \"data\": {\n            \"title\": \"Data\",\n            \"allOf\": [\n              {\n                \"$ref\": \"#/components/schemas/DataRequestModel\"\n              }\n            ],\n            \"description\": \"Returned Documents\"\n          }\n        },\n        \"description\": \"Jina HTTP Response model. Only `request_id` and `data` are preserved.\"\n      },\n      \"JinaStatusModel\": {\n        \"title\": \"JinaStatusModel\",\n        \"required\": [\n          \"jina\",\n          \"envs\",\n          \"usedMemory\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"jina\": {\n            \"title\": \"Jina\",\n            \"type\": \"object\"\n          },\n          \"envs\": {\n            \"title\": \"Envs\",\n            \"type\": \"object\"\n          },\n          \"usedMemory\": {\n            \"title\": \"Usedmemory\",\n            \"type\": \"string\"\n          }\n        },\n        \"description\": \"Pydantic BaseModel for Jina status, used as the response model in REST app.\"\n      },\n      \"NamedScoreProto\": {\n        \"title\": \"NamedScoreProto\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"value\": {\n            \"title\": \"Value\",\n            \"type\": \"number\",\n            \"default\": 0.0\n          },\n          \"opName\": {\n            \"title\": \"Opname\",\n            \"type\": \"string\",\n            \"default\": \"\"\n          },\n          \"description\": {\n            \"title\": \"Description\",\n            \"type\": \"string\",\n            \"default\": \"\"\n          },\n          \"operands\": {\n            \"title\": \"Operands\",\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/NamedScoreProto\"\n            },\n            \"default\": []\n          },\n          \"refId\": {\n            \"title\": \"Refid\",\n            \"type\": \"string\",\n            \"default\": \"\"\n          }\n        }\n      },\n      \"NdArrayProto\": {\n        \"title\": \"NdArrayProto\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"dense\": {\n            \"$ref\": \"#/components/schemas/DenseNdArrayProto\"\n          },\n          \"sparse\": {\n            \"$ref\": \"#/components/schemas/SparseNdArrayProto\"\n          }\n        }\n      },\n      \"QuantizationMode\": {\n        \"title\": \"QuantizationMode\",\n        \"enum\": [\n          0,\n          1,\n          2\n        ],\n        \"description\": \"An enumeration.\"\n      },\n      \"RequestProto\": {\n        \"title\": \"RequestProto\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"requestId\": {\n            \"title\": \"Requestid\",\n            \"type\": \"string\",\n            \"default\": \"\"\n          },\n          \"control\": {\n            \"$ref\": \"#/components/schemas/ControlRequestProto\"\n          },\n          \"data\": {\n            \"$ref\": \"#/components/schemas/DataRequestProto\"\n          },\n          \"header\": {\n            \"$ref\": \"#/components/schemas/HeaderProto\"\n          },\n          \"parameters\": {\n            \"title\": \"Parameters\",\n            \"type\": \"object\"\n          },\n          \"routes\": {\n            \"title\": \"Routes\",\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/RouteProto\"\n            },\n            \"default\": []\n          },\n          \"status\": {\n            \"$ref\": \"#/components/schemas/StatusProto\"\n          }\n        }\n      },\n      \"RouteProto\": {\n        \"title\": \"RouteProto\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"pod\": {\n            \"title\": \"Pod\",\n            \"type\": \"string\",\n            \"default\": \"\"\n          },\n          \"podId\": {\n            \"title\": \"Podid\",\n            \"type\": \"string\",\n            \"default\": \"\"\n          },\n          \"startTime\": {\n            \"title\": \"Starttime\",\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"endTime\": {\n            \"title\": \"Endtime\",\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"status\": {\n            \"$ref\": \"#/components/schemas/StatusProto\"\n          }\n        }\n      },\n      \"SparseNdArrayProto\": {\n        \"title\": \"SparseNdArrayProto\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"indices\": {\n            \"$ref\": \"#/components/schemas/DenseNdArrayProto\"\n          },\n          \"values\": {\n            \"$ref\": \"#/components/schemas/DenseNdArrayProto\"\n          },\n          \"shape\": {\n            \"title\": \"Shape\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"integer\"\n            },\n            \"default\": []\n          }\n        }\n      },\n      \"StatusCode\": {\n        \"title\": \"StatusCode\",\n        \"enum\": [\n          0,\n          1,\n          2,\n          3,\n          4,\n          5,\n          6\n        ],\n        \"description\": \"An enumeration.\"\n      },\n      \"StatusProto\": {\n        \"title\": \"StatusProto\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"code\": {\n            \"allOf\": [\n              {\n                \"$ref\": \"#/components/schemas/StatusCode\"\n              }\n            ],\n            \"default\": 0\n          },\n          \"description\": {\n            \"title\": \"Description\",\n            \"type\": \"string\",\n            \"default\": \"\"\n          },\n          \"exception\": {\n            \"$ref\": \"#/components/schemas/ExceptionProto\"\n          }\n        }\n      },\n      \"ValidationError\": {\n        \"title\": \"ValidationError\",\n        \"required\": [\n          \"loc\",\n          \"msg\",\n          \"type\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"loc\": {\n            \"title\": \"Location\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"msg\": {\n            \"title\": \"Message\",\n            \"type\": \"string\"\n          },\n          \"type\": {\n            \"title\": \"Error Type\",\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  },\n  \"tags\": [\n    {\n      \"name\": \"Debug\",\n      \"description\": \"Debugging interface. In production, you should hide them by setting `--no-debug-endpoints` in `Flow`/`Gateway`.\"\n    },\n    {\n      \"name\": \"CRUD\",\n      \"description\": \"CRUD interface. If your service does not implement those interfaces, you can should hide them by setting `--no-crud-endpoints` in `Flow`/`Gateway`.\"\n    }\n  ]\n}",
			"canonicalURL": "/github.com/jina-ai/jina-ui@9f4a69e74db11ccdf8ad3fc7fd456c9ea3df1d12/-/blob/packages/showcases/src/types/e-commerce/schema.json",
			"externalURLs": [
				{
					"url": "https://github.com/jina-ai/jina-ui/blob/9f4a69e74db11ccdf8ad3fc7fd456c9ea3df1d12/packages/showcases/src/types/e-commerce/schema.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"GraphProto\": parse schema: property \"adjacency\": parse schema: parse schema: property \"indices\": parse schema: parse schema: property \"quantization\": parse schema: parse schema: at 1067:17: parse enum values: parse value \"0\": unexpected type: \"\""
}