{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/VIDA-NYU/auctus"
		},
		"file": {
			"name": "restapi.yaml",
			"size": 0,
			"path": "docs/schemas/restapi.yaml",
			"byteSize": 27646,
			"content": "openapi: 3.0.1\ninfo:\n  title: \"Auctus\"\n  description: |\n    # Introduction\n\n    Auctus is a dataset search engine and data augmentation platform developed at New York University. It can be used to index the content of datasets from a variety of sources, that can later be queried to find data that can be joined or appended to a user's data.\n\n    The system can be found at this address: https://auctus.vida-nyu.org/\n\n    You can find the source code on GitLab: https://gitlab.com/ViDA-NYU/auctus/auctus\n\n    The rest of the documentation, including the web UI and the Python libraries: https://docs.auctus.vida-nyu.org/\n\n    # REST API introduction\n\n    There is also a [Python client library](https://docs.auctus.vida-nyu.org/python/datamart-rest.html) for this API.\n\n    The API is versioned, with the current version being `v1`. The full paths for an API request would therefore be something like:\n\n        https://auctus.vida-nyu.org/api/v1/download/datamart.socrata.data-cityofnewyork-us.ht4t-wzcm\n  contact:\n    email: \"remi.rampin@nyu.edu\"\n  license:\n    name: \"MIT\"\n  version: \"v1\"\nexternalDocs:\n  description: \"Auctus documentation\"\n  url: \"https://docs.auctus.vida-nyu.org/\"\nservers:\n- url: \"https://auctus.vida-nyu.org/api/v1\"\ntags:\n- name: \"query\"\n  x-displayName: Query\n  description: \"Searching the index for datasets to download or augment with.\"\n- name: \"ingest\"\n  x-displayName: Ingest new datasets\n  description: \"Adding new datasets to the index.\"\n- name: \"augment\"\n  x-displayName: Augmentation\n  description: \"Using Auctus to perform server-side augmentation.\"\n- name: \"embed\"\n  x-displayName: \"Embedding Auctus in your software\"\n  description: |\n    Rather than using the API and implementing your own UI for data search and augmentation, it is possible to **re-use our web frontend** and collect results **directly from Auctus into your system** without the user downloading it and then adding it in your interface.\n\n    This can be done using the following 3 steps (4 steps for augmentations):\n\n    ### (optional) Step 0: Provide your input data if searching for augmentations\n\n    If you don't have input data, skip this step.\n\n    Issue a request [`POST /profile`](#operation/profile), providing your data, and get the string under the `token` JSON key.\n\n    ### Step 1: Create a session\n\n    Issue a request [`POST /session/new`](#operation/session_new), with the following JSON input:\n\n      * `data_token`: the token obtained from [`POST /profile`](#operation/profile), if searching for augmentations. Optional.\n      * `format`: the desired format for datasets, as specified for [the download endpoint](#operation/download_id). Options go in the `format_options` object. Optional, defaults to `csv`.\n      * `system_name`: the name of your system. Optional, defaults to \"TA3\". Will be shown on buttons (e.g. \"Add to <system_name>\", \"Join and add to <system_name>\").\n\n    ### Step 2: Direct the user to Auctus\n\n    Direct the user to the `link_url` obtained from [`POST /session/new`](#operation/session_new) at step 1. Wait for them to be done to move to step 3, or poll step 3 regularly.\n\n    The user will be able to use our interface like normal, including using filters and related searches. The download buttons are replaced by \"Add to <system_name>\" buttons.\n\n    ### Step 3: Obtain the selected data from Auctus\n\n    Issue a request to [`GET /session/<session_id>`](#operation/session_get), where `<session_id>` is the short string you obtained in step 1.\n- name: \"result_model\"\n  x-displayName: Result\n  description: |\n    <SchemaDefinition schemaRef=\"#/components/schemas/Result\" />\nx-tagGroups:\n- name: api\n  x-displayName: API\n  tags:\n  - \"query\"\n  - \"ingest\"\n  - \"augment\"\n  - \"embed\"\n- name: models\n  x-displayName: Models\n  tags:\n  - \"result_model\"\npaths:\n  /upload:\n    post:\n      tags:\n      - \"ingest\"\n      summary: \"Add a dataset to the index\"\n      description: |\n        The file can be provided either via a URL or direct upload of a supported format.\n\n        When providing a URL, make sure it is a direct link to a file in a supported format (CSV, Excel, SPSS, ...) and not to an HTML page with a \"download\" button or GitHub page where the content is embedded (use the \"raw\" button).\n\n        The request will return the ID of the new dataset immediately, but profiling will happen in the background so the file will only appear in searches after a couple minutes.\n      operationId: \"upload\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              oneOf:\n              - title: URL\n                properties:\n                  name:\n                    type: string\n                    description: \"Dataset name\"\n                  description:\n                    type: string\n                  address:\n                    type: string\n                required:\n                - name\n                - address\n              - title: direct upload\n                properties:\n                  name:\n                    type: string\n                    description: \"Dataset name\"\n                  description:\n                    type: string\n                  file:\n                    type: string\n                    format: binary\n                required:\n                - name\n                - file\n          application/x-www-form-urlencoded:\n            schema:\n              oneOf:\n              - title: URL\n                properties:\n                  name:\n                    type: string\n                    description: \"Dataset name\"\n                  description:\n                    type: string\n                  address:\n                    type: string\n                required:\n                - name\n                - address\n              - title: direct upload\n                properties:\n                  name:\n                    type: string\n                    description: \"Dataset name\"\n                  description:\n                    type: string\n                  file:\n                    type: string\n                    format: binary\n                required:\n                - name\n                - file\n        required: true\n      responses:\n        200:\n          description: \"OK, provides ID of dataset (which will be available once profiling ends)\"\n          content:\n            application/json; charset=utf-8:\n              schema:\n                properties:\n                  id:\n                    type: string\n                required:\n                - id\n                additionalProperties: false\n        400:\n          description: \"Error\"\n          content:\n            application/json; charset=utf-8:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      x-codeSamples:\n      - lang: Python\n        source: |\n          # File\n          response = requests.post(\n              'https://auctus.vida-nyu.org/api/v1/upload',\n              files={'file': open('data/myfile.csv')},\n              data={\n                  \"name\": \"Basic CSV test\",\n                  \"description\": \"Test upload from API, please ignore\",\n              },\n          )\n          response.raise_for_status()\n          print(response.json()['id'])\n\n          # URL\n          response = requests.post(\n              'https://auctus.vida-nyu.org/api/v1/upload',\n              data={\n                  \"address\": \"https://gitlab.com/ViDA-NYU/auctus/auctus/-/raw/master/tests/data/basic.csv\",\n                  \"name\": \"Basic CSV test\",\n                  \"description\": \"Test upload from API, please ignore\",\n              },\n          )\n          response.raise_for_status()\n          print(response.json()['id'])\n      - lang: curl\n        source: |\n          # File\n          curl \\\n              -F file=@data/myfile.csv \\\n              -F name=\"Basic CSV test\" \\\n              -F description=\"Test upload from API, please ignore\" \\\n              https://auctus.vida-nyu.org/api/v1/upload\n\n          # URL\n          curl \\\n              -F address=https://gitlab.com/ViDA-NYU/auctus/auctus/-/raw/master/tests/data/basic.csv \\\n              -F name=\"Basic CSV test\" \\\n              -F description=\"Test upload from API, please ignore\" \\\n              https://auctus.vida-nyu.org/api/v1/upload\n  /search:\n    post:\n      tags:\n      - \"query\"\n      summary: \"Search the index for datasets\"\n      description: |\n        The `Content-Type` should be set to [`multipart/form-data`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition) to allow sending both the query description (JSON) and the data file. Alternatively you can post just JSON or just data.\n\n        You need to specify at least one of `data` (tabular file), `data_profile` (profile information), or `query` (JSON query).\n      operationId: \"search\"\n      parameters:\n      - in: query\n        name: \"page\"\n        schema:\n          type: integer\n          minimum: 1\n        required: false\n      - in: query\n        name: \"size\"\n        schema:\n          type: integer\n          minimum: 1\n        required: false\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                data:\n                  type: string\n                  description: \"Data which you want to augment\"\n                  format: binary\n                data_token:\n                  type: string\n                  description: \"Input data to search for augmentation, in the form of the \\\"token\\\" field returned by /profile\"\n                query:\n                  $ref: \"#/components/schemas/Query\"\n              # TODO: One of the two needs to be provided\n            encoding:\n              query:\n                contentType: application/json\n            examples:\n              keyword_search:\n                summary: \"Search using the keywords 'taxi' and 'medallion'\"\n                value:\n                  query:\n                    keywords:\n                    - \"taxi\"\n                    - \"medallion\"\n                    variables: []\n              geo_bronx:\n                summary: \"Search for geospatial datasets concerning the Bronx\"\n                value:\n                  query:\n                    keywords: []\n                    variables:\n                    - type: geospatial_variable\n                      latitude1: 40.894673917657514\n                      latitude2: 40.823526516469315\n                      longitude1: -73.91395568847656\n                      longitude2: -73.82675170898438\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                data:\n                  type: string\n                  description: \"Data which you want to augment\"\n                  format: binary\n                data_token:\n                  type: string\n                  description: \"Input data to search for augmentation, in the form of the \\\"token\\\" field returned by /profile\"\n                query:\n                  $ref: \"#/components/schemas/Query\"\n              # TODO: One of the two needs to be provided\n            encoding:\n              query:\n                contentType: application/json\n          text/csv:\n            schema:\n              type: string\n              format: binary\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Query\"\n            examples:\n              keyword_search:\n                summary: \"Search using the keywords 'taxi' and 'medallion'\"\n                value:\n                  keywords:\n                  - \"taxi\"\n                  - \"medallion\"\n                  variables: []\n              geo_bronx:\n                summary: \"Search for geospatial datasets concerning the Bronx\"\n                value:\n                  keywords: []\n                  variables:\n                  - type: geospatial_variable\n                    latitude1: 40.894673917657514\n                    latitude2: 40.823526516469315\n                    longitude1: -73.91395568847656\n                    longitude2: -73.82675170898438\n      responses:\n        200:\n          description: OK\n          content:\n            application/json; charset=utf-8:\n              schema:\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Result\"\n                  facets:\n                    $ref: \"#/components/schemas/Facets\"\n                  total:\n                    type: integer\n                required: [\"results\"]\n                additionalProperties: false\n        400:\n          description: \"Invalid query\"\n          content:\n            application/json; charset=utf-8:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      x-codeSamples:\n      - lang: Python\n        source: |\n          response = requests.post(\n              'https://auctus.vida-nyu.org/api/v1/search',\n              json={'keywords': 'taxi'},\n          )\n          response.raise_for_status()\n          for result in response.json()['results']:\n              print(result['score'], result['name'], result['id'])\n\n          # Query + data\n          response = requests.post(\n              'https://auctus.vida-nyu.org/api/v1/search',\n              files={\n                  'query': json.dump({'keywords': 'weather'}).encode('utf-8'),\n                  'data': open('data/myfile.csv'),\n              },\n          )\n          response.raise_for_status()\n      - lang: curl\n        source: |\n          # Just query\n          curl -H \"Content-Type: application/json\" \\\n              -d '{\"keywords\": \"taxi\"}' \\\n              https://auctus.vida-nyu.org/api/v1/search\n\n          # Query + data\n          curl -F query='{\"keywords\": \"taxi\"}' \\\n              -F data=@data/myfile.csv \\\n              https://auctus.vida-nyu.org/api/v1/search\n  /profile:\n    post:\n      tags:\n      - \"query\"\n      summary: Profile a dataset\n      description: |\n        The JSON object returned by this endpoint can be passed to `/search` as the `data_profile`.\n\n        It replaces the `data` argument, allowing for lighter searches since the data is only sent once. This is useful in situation where the user will incrementally adjust his query.\n      operationId: \"profile\"\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              description: Data which you want to profile\n              format: binary\n            examples:\n              simple:\n                summary: Example CSV file\n                value:\n                  \"name,country,number,what\\nremi,france,4,false\\naecio,brazil,3,true\\nsonia,peru,7,true\\nroque,peru,8,true\\nfernando,brazil,10,false\\n\"\n          multipart/form-data:\n            schema:\n              properties:\n                data:\n                  type: string\n                  description: Data which you want to profile\n                  format: binary\n      responses:\n        200:\n          description: OK\n          content:\n            application/json; charset=utf-8:\n              schema:\n                $ref: \"#/components/schemas/Result\"  # TODO: not quite\n        400:\n          description: Invalid query\n          content:\n            application/json; charset=utf-8:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      x-codeSamples:\n      - lang: Python\n        source: |\n          response = requests.post(\n              'https://auctus.vida-nyu.org/api/v1/profile',\n              files={'data': open('data/myfile.csv')},\n          )\n          response.raise_for_status()\n          print(response.json())\n      - lang: curl\n        source: |\n          curl -F data=@data/myfile.csv \\\n              https://auctus.vida-nyu.org/api/v1/profile\n  /download/{dataset_id}:\n    get:\n      tags:\n      - \"query\"\n      summary: \"Download a dataset by its ID\"\n      description: |\n        This allows you to retrieve a dataset in CSV or another supported output format.\n\n        You can use the `format` query parameter to specify an output format, for example `/download?format=d3m`:\n\n          * `csv`: returns the dataset as a CSV file (`application/octet-stream`); this is the default option\n          * `d3m`: returns a ZIP file (`application/zip`) containing the dataset as a CSV file and its corresponding `datasetDoc.json` file. See [the D3M Dataset Schema documentation](https://gitlab.com/datadrivendiscovery/data-supply/-/blob/shared/documentation/datasetSchema.md) for more information.\n\n        Note that this endpoint might serve data directly or it might redirect to another location.\n      operationId: \"download_id\"\n      parameters:\n      - in: path\n        name: \"dataset_id\"\n        schema:\n          type: string\n        required: true\n        examples:\n          nyc_data:\n            value: \"datamart.socrata.data-cityofnewyork-us.395v-hkhg\"\n      - in: query\n        name: \"format\"\n        schema:\n          enum: [\"csv\", \"d3m\"]\n      - in: query\n        name: \"format_options\"\n        schema:\n          type: string\n      - in: query\n        name: \"session_id\"\n        schema:\n          type: string\n      responses:\n        404:\n          description: \"No dataset with this ID\"\n        200:\n          description: OK\n        302:\n          description: \"OK, redirects to dataset\"\n  /download:\n    post:\n      tags:\n      - \"query\"\n      summary: \"Download a dataset from a search result\"\n      description: |\n        This allows you to retrieve a dataset in CSV (or another supported output format using the `format` query parameter, see above).\n\n        Note that this endpoint might serve data directly or it might redirect to another location.\n\n        This endpoint differs from `/download/{dataset_id}` in that it takes a full dataset record instead of just an ID. The advantage is that you can change this record to some extent (example: skip some converters) or send the record for a dataset the server doesn't have in its index (as long as sufficient materialization information is present).\n      operationId: \"download\"\n      parameters:\n      - in: query\n        name: \"format\"\n        schema:\n          enum: [\"csv\", \"d3m\"]\n      - in: query\n        name: \"format_options\"\n        schema:\n          type: string\n      - in: query\n        name: \"session_id\"\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n                $ref: \"#/components/schemas/Result\" # TODO: not quite\n            examples:\n              nyc_data:\n                summary: \"Sample search result sent back as task\"\n                value:\n                  id: \"datamart.socrata.data-cityofnewyork-us.vbgf-ket3\"\n                  metadata:\n                    columns:\n                    - name: \"Borough\"\n                    - name: \"Calendar Year\"\n                    - name: \"Filed Violation Count\"\n                    materialize:\n                      socrata_id: \"vbgf-ket3\"\n                      socrata_domain: \"data.cityofnewyork.us\"\n                      socrata_updated: \"2019-04-29T16:54:13.000Z\"\n                      direct_url: \"https://data.cityofnewyork.us/api/views/vbgf-ket3/rows.csv?accessType=DOWNLOAD\"\n                      identifier: datamart.socrata\n                      date: \"2019-06-27T19:26:53.147559Z\"\n          multipart/form-data:\n            schema:\n              properties:\n                task:\n                  $ref: \"#/components/schemas/Result\" # TODO: not quite\n              required:\n              - task\n            encoding:\n              task:\n                contentType: application/json\n      x-codeSamples:\n      - lang: Python\n        source: |\n          # Search result as returned by /search API\n          search_result = {\n              \"id\": \"datamart.socrata.data-cityofnewyork-us.vbgf-ket3\",\n              \"metadata\": {\"materialize\": {\n                  \"socrata_id\": \"vbgf-ket3\",\n                  \"socrata_domain\": \"data.cityofnewyork.us\",\n                  \"socrata_updated\": \"2019-04-29T16:54:13.000Z\",\n                  \"direct_url\": \"https://data.cityofnewyork.us/api/views/vbgf-ket3/rows.csv?accessType=DOWNLOAD\",\n                  \"identifier\": \"datamart.socrata\",\n                  \"date\": \"2019-06-27T19:26:53.147559Z\"\n              }}\n          }\n          # Use /download endpoint\n          response = requests.post(\n              'https://auctus.vida-nyu.org/api/v1/download',\n              files={\n                  'task': json.dumps(search_result).encode('utf-8'),\n              },\n          )\n          response.raise_for_status()\n          print(len(response.content))\n      - lang: curl\n        source: |\n          curl -F task=@searchresult.json \\\n              https://auctus.vida-nyu.org/api/v1/download\n      responses:\n        404:\n          description: \"No dataset for this result\"\n        200:\n          description: OK\n        302:\n          description: OK\n        400:\n          description: \"Invalid query\"\n          content:\n            application/json; charset=utf-8:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /metadata/{dataset_id}:\n    get:\n      tags:\n      - \"query\"\n      summary: \"Get the metadata for a dataset by its ID\"\n      description: |\n        This allows you to retrieve the metadata record for a dataset in the index.\n      operationId: \"metadata\"\n      parameters:\n      - in: path\n        name: \"dataset_id\"\n        schema:\n          type: string\n        required: true\n        examples:\n          nyc_data:\n            value: \"datamart.socrata.data-cityofnewyork-us.395v-hkhg\"\n      responses:\n        404:\n          description: \"No dataset with this ID\"\n        200:\n          description: OK\n          content:\n            application/json; charset=utf-8:\n              schema:\n                properties:\n                  id:\n                    type: string\n                  status:\n                    type: string\n                    enum:\n                    - \"indexed\"\n                    - \"error\"\n                    - \"queued\"\n                  metadata:\n                    $ref: \"query_result_schema.json#/definitions/metadata\"\n                required: [\"id\", \"status\", \"metadata\"]\n      x-codeSamples:\n      - lang: Python\n        source: |\n          response = requests.get(\n              'https://auctus.vida-nyu.org/api/v1/metadata/datamart.socrata.data-cityofnewyork-us.395v-hkhg',\n          )\n          response.raise_for_status()\n          print(response.json())\n      - lang: curl\n        source: |\n          curl https://auctus.vida-nyu.org/api/v1/metadata/datamart.socrata.data-cityofnewyork-us.395v-hkhg\n  /augment:\n    post:\n      tags:\n      - \"augment\"\n      summary: \"Augment an input dataset with a selected search result\"\n      description: |\n        The `Content-Type` should be set to [`multipart/form-data`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition) to allow sending both a dataset search result (`task`) and a data file (`data`).\n      operationId: \"augment\"\n      parameters:\n      - in: query\n        name: \"format\"\n        schema:\n          enum: [\"csv\", \"d3m\"]\n      - in: query\n        name: \"format_options\"\n        schema:\n          type: string\n      - in: query\n        name: \"session_id\"\n        schema:\n          type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                data:\n                  type: string\n                  description: \"Data which you want to augment\"\n                  format: binary\n                task:\n                  $ref: \"#/components/schemas/Result\"\n              required:\n              - task\n            encoding:\n              task:\n                contentType: application/json\n      responses:\n        200:\n          description: OK\n        400:\n          description: \"Invalid request\"\n          content:\n            application/json; charset=utf-8:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /session/new:\n    post:\n      tags:\n      - \"embed\"\n      summary: \"Create a session\"\n      description: |\n        Creates a session in which a user can add datasets through the Auctus web interface, to be retrieved from your software later.\n      operationId: \"session_new\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                data_token:\n                  type: string\n                  description: \"Input data to search for augmentation, in the form of the \\\"token\\\" field returned by /profile\"\n                format:\n                  type: string\n                format_options:\n                  type: string\n                system_name:\n                  type: string\n                  description: \"Name of your system, to show on buttons in the interface\"\n      responses:\n        200:\n          description: OK\n          content:\n            application/json; charset=utf-8:\n              schema:\n                properties:\n                  session_id:\n                    type: string\n                    description: \"A short string identifying the session. Use this later to retrieve results.\"\n                  link_url:\n                    type: string\n                    description: \"A link to the Auctus web interface that you can present to the user (or embed, etc).\"\n        400:\n          description: \"Invalid request\"\n          content:\n            application/json; charset=utf-8:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /session/{session_id}:\n    get:\n      tags:\n      - \"embed\"\n      summary: \"Get session results\"\n      description: |\n        Get the results added to this session. Every result the user selects from the Auctus web interface is added to the session to be retrieved here.\n      operationId: session_get\n      parameters:\n      - in: path\n        name: \"session_id\"\n        schema:\n          type: string\n        required: true\n      responses:\n        404:\n          description: \"No session with this ID\"\n        200:\n          description: OK\n          content:\n            application/json; charset=utf-8:\n              schema:\n                properties:\n                  results:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        url:\n                          type: string\n                          description: \"Link to the data the user selected, in the format chosen when creating the session.\"\n                        type:\n                          type: string\n                          description: |\n                            * `\"download\"` if the result is a dataset from Auctus\n                            * `\"join\"`/`\"union\"` if the result is the input data augmented with a dataset from Auctus.\n                          enum:\n                          - \"download\"\n                          - \"join\"\n                          - \"union\"\ncomponents:\n  schemas:\n    Query:\n      $ref: \"query_input_schema.json\"\n    Error:\n      description: \"JSON object returned by API on client errors\"\n      properties:\n        error:\n          type: string\n          description: \"The error message\"\n    Result:\n      $ref: \"query_result_schema.json\"\n    Facets:\n      additionalProperties:\n        properties:\n          buckets:\n            additionalProperties:\n              type: integer\n          incomplete:\n            type: boolean\n",
			"canonicalURL": "/github.com/VIDA-NYU/auctus@3e5107b5218df900a1fa32673945ed7bc2ee6167/-/blob/docs/schemas/restapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/VIDA-NYU/auctus/blob/3e5107b5218df900a1fa32673945ed7bc2ee6167/docs/schemas/restapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: at 1:15: schemas: \"Query\": parse schema: resolve \"query_input_schema.json\": external \"query_input_schema.json\": file: local file reference is not allowed"
}