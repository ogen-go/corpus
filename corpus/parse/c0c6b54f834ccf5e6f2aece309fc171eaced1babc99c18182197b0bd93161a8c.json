{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/openfoodfacts/openfoodfacts-server"
		},
		"file": {
			"name": "api-v3.yml",
			"size": 0,
			"path": "docs/reference/api-v3.yml",
			"byteSize": 10090,
			"content": "openapi: 3.1.0\nx-stoplight:\n  id: 0x3135wk4xq0t\ninfo:\n  title: Open Food Facts Open API V3 - under development\n  description: |\n    As a developer, the Open Food Facts API allows you to get information \n    and contribute to the products database. You can create great apps to \n    help people make better food choices and also provide data to enhance the database.\n  termsOfService: 'https://openweathermap.org/terms'\n  contact:\n    name: Open Food Facts\n    url: 'https://slack-ssl-openfoodfacts.herokuapp.com/'\n    email: contact@openfoodfacts.org\n  license:\n    name: 'License (MIT, Apache 2.0, etc)'\n    url: 'https://opendatacommons.org/licenses/odbl/summary/index.html'\n  version: '3'\nservers:\n  - url: 'https://world.openfoodfacts.org'\n    description: prod\n  - description: dev\n    url: 'https://off:off@world.openfoodfacts.net'\npaths:\n  '/api/v3/product/{barcode}':\n    get:\n      tags:\n        - Read Requests\n      summary: READ Product - Get information for a specific product by barcode (API V3)\n      parameters:\n        - name: barcode\n          in: path\n          description: |\n            The barcode of the product to be fetched\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: '3017620422003'\n        - schema:\n            type: string\n          in: query\n          name: lc\n          description: '2 letter code of the language of the interface. Used for localizing some fields in returned values (e.g. knowledge panels). If not passed, the language may be inferred by the country of the user (passed through the cc field or inferred by the IP address).'\n        - schema:\n            type: string\n          in: query\n          name: cc\n          description: '2 letter code of the country of the user. Used for localizing some fields in returned values (e.g. knowledge panels). If not passed, the country may be inferred by the IP address of the request.'\n        - schema:\n            type: string\n          in: query\n          name: tags_lc\n          description: '2 letter language code to request names of tags in a specific language.  For READ requets: if passed, all taxonomized tags of the response will include a lc_name property with the translation in the requested language, if available. Otherwise, the property value will contain the name in the original language, prefixed by the 2 language code and a colon.'\n        - schema:\n            type: string\n          in: query\n          name: fields\n          description: |-\n            Comma separated list of fields requested in the response. \n\n            Special values: \n            * \"none\": returns no fields\n            * \"raw\": returns all fields as stored internally in the database\n            * \"all\": returns all fields except generated fields that need to be explicitly requested such as \"knowledge_panels\". \n\n            Defaults to \"all\" for READ requests. The \"all\" value can also be combined with fields like \"attribute_groups\" and \"knowledge_panels\".'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: ./responses/response-status/response_status.yaml\n                  - $ref: ./schemas/product.yaml\n      description: |-\n        Retrieve information for a product with a specific barcode.\n\n        The fields parameter allows to specify what fields to retrieve.\n      operationId: get-product-by-barcode\n    parameters:\n      - schema:\n          type: string\n        name: barcode\n        in: path\n        required: true\n        description: Barcode of the product\n    patch:\n      summary: WRITE Product - Create or update product (API V3 - Implementation in progress)\n      operationId: patch-api-v3-product-barcode\n      responses:\n        '200':\n          description: |-\n            The response will include a \"product\" structure. The fields returned in this structure will depend on the value of the \"fields\" input field:\n\n            - \"updated\" (default): all fields updated by the query will be returned, including fields that are directly generated from the updated fields. For instance, sending \"packagings\" or \"packagings_add\" will return the \"packagings\" field.\n\n            - \"none\": no fields are returned.\n\n            - \"all\": returns all fields except generated fields that need to be explicitly requested such as \"knowledge_panels\".\n\n            The \"fields\" values can also be concatenated: \"all,knowledge_panels\"\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: ./responses/response-status/response_status.yaml\n                  - type: object\n                    properties:\n                      product:\n                        $ref: ./schemas/product.yaml\n              examples:\n                Update of packagings:\n                  value:\n                    status: success_with_errors\n                    result:\n                      id: 'en:product-updated'\n                      en_name: Product updated\n                      lc_name: Produit mis à jour\n                    errors:\n                      - message:\n                          id: 'en:sugars-higher-than-carbohydrates'\n                          name: Sugars higher than carbohydrates\n                          lc_name: Sucres plus élevés que les glucides\n                          description: Sugars (40g) are higher than carbohydrates (35g).\n                          lc_description: Les sucres (40g) sont plus élévés que les glucdes.\n                        field:\n                          id: nutriment.sugars\n                          value: '40'\n                        impact:\n                          id: 'en:nutrients-not-updated'\n                          name: Nutrients not updated\n                          lc_name: Nutriments non mis à jour\n                          description: The nutrients were not updated.\n                          lc_description: Les nutriments n'ont pas été mis à jour.\n                    product:\n                      packagings:\n                        - material: 'en:pp-polypropylene'\n                          number: '2'\n                          recycling: 'en:discard'\n                          shape: 'en:lid'\n                        - material: 'en:non-corrugated-cardboard'\n                          number: '1'\n                          recycling: 'en:recycle'\n                          shape: 'en:box'\n                          weight: 120\n                        - material: 'en:paper-and-fibreboard-aluminium'\n                          number: '2'\n                          recycling: 'en:recycle'\n                          shape: 'en:seal'\n                        - material: 'en:clear-glass'\n                          number: '2'\n                          recycling: 'en:recycle'\n                          shape: 'en:jar'\n                          quantity: 200 ML\n                          quantity_value: 200\n                          quantity_unit: ml\n                          weight: 80\n          headers: {}\n      description: |-\n        New API to send structured product data in a JSON format instead of in a flattened list of key / value pairs field as-in the current product add / edit API that relies on a multipart/form-data format.\n\n        Important: this new Product WRITE API is under development. The initial deployment will support only packaging fields.\n\n        This new API will be used in particular to send structured packaging data: https://github.com/openfoodfacts/openfoodfacts-server/blob/main/docs/explanations/packaging-data.md\n\n        The new API can then be gradually extended to support other product fields.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: ./requestBodies/lc_cc.yaml\n                - $ref: ./requestBodies/fields_tags_lc.yaml\n                - type: object\n                  properties:\n                    user_id:\n                      type: string\n                    password:\n                      type: string\n                    product:\n                      $ref: ./schemas/product_update_api_v3.yaml\n            examples:\n              example-1:\n                value:\n                  lc: fr\n                  cc: fr\n                  fields: 'product_name,packagings'\n                  tags_lc: fr\n                  userid: string\n                  password: string\n                  code: string\n                  product:\n                    packagings:\n                      - number_of_units: 6\n                        shape:\n                          id: 'en:bottle'\n                        material:\n                          id: 'en:plastic'\n                        recycling:\n                          id: 'en:recycle'\n                        quantity_per_unit: 25 cl\n                        weight_measured: 10\n                    packagings_add:\n                      - number_of_units: 6\n                        shape:\n                          id: 'en:bottle'\n                        material:\n                          id: 'en:plastic'\n                        recycling:\n                          id: 'en:recycle'\n                        quantity_per_unit: 25 cl\n                        weight_measured: 10\n          application/xml:\n            schema:\n              type: object\n              properties: {}\n        description: |\n          Structured data for the product is passed in the product field.\n\n          For complex structures such as the packagings object, it is possible to replace pre-existing data, or completing it:\n\n          - an object sent in the packagings field will replace any pre-existing data.\n          - an object sent in the field suffixed with _add (e.g. packagings_add) will be merged with any pre-existing data.\n      parameters: []\ncomponents:\n  schemas: null\n  parameters: null\ntags:\n  - name: Read Requests\n  - name: Write Requests\n",
			"canonicalURL": "/github.com/openfoodfacts/openfoodfacts-server@389e03a16fbf16327e86508d497a468f4097646c/-/blob/docs/reference/api-v3.yml",
			"externalURLs": [
				{
					"url": "https://github.com/openfoodfacts/openfoodfacts-server/blob/389e03a16fbf16327e86508d497a468f4097646c/docs/reference/api-v3.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/api/v3/product/{barcode}\": get: operation \"get-product-by-barcode\": responses: 200: content: application/json: schema: parse schema: allOf: at docs/reference/api-v3.yml:77:27: $ref: resolve \"./schemas/product.yaml\": decode: yaml: unmarshal errors:\n  yaml: line 852: cannot unmarshal !!str `string` into jsonschema.RawSchema"
}