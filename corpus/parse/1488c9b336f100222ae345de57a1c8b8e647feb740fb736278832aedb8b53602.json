{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/openfoodfacts/robotoff"
		},
		"file": {
			"name": "api.yml",
			"size": 0,
			"path": "doc/references/api.yml",
			"byteSize": 25636,
			"content": "openapi: 3.0.0\ninfo:\n  title: API Reference\n  description: |\n    Robotoff provides a simple API allowing consumers to fetch predictions and annotate them.\n\n    All endpoints must be prefixed with `/api/v1`. The full URL is `https://robotoff.openfoodfacts.org/api/v1/{endpoint}`.\n\n    Robotoff can interact with all Openfoodfacts products: Openfoodfacts, Openbeautyfacts, etc. and all environments (production, development, pro). The `server_domain` field should be used to specify the product/environment: `api.openfoodfacts.org` for OFF-prod, `api.openfoodfacts.net` for OFF-dev, `api.openbeautyfacts.org` for OBF-prod,...\n  contact: {}\n  version: \"1.0\"\nservers:\n  - url: https://robotoff.openfoodfacts.org/api/v1/\n    description: Production server\n  - url: https://robotoff.openfoodfacts.net/api/v1/\n    description: Preproduction server\n\npaths:\n  /questions/{barcode}:\n    get:\n      tags:\n        - Questions\n      summary: Get questions for a given product\n      operationId: getQuestionsBarcode\n      parameters:\n        - name: count\n          in: query\n          description: The number of questions to return\n          schema:\n            type: integer\n            default: 1\n            minimum: 1\n        - $ref: \"#/components/parameters/barcode_path\"\n        - $ref: \"#/components/parameters/server_domain\"\n        - $ref: \"#/components/parameters/lang\"\n      responses:\n        \"200\":\n          description: \"Questions about the requested product\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum:\n                      - \"no_questions\"\n                      - \"found\"\n                  questions:\n                    type: array\n                    items:\n                      type: object\n\n  /questions/random:\n    get:\n      tags:\n        - Questions\n      summary: Get random questions\n      operationId: getQuestionsRandom\n      parameters:\n        - $ref: \"#/components/parameters/lang\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/server_domain\"\n        - $ref: \"#/components/parameters/insight_types\"\n        - $ref: \"#/components/parameters/country\"\n        - $ref: \"#/components/parameters/brands\"\n        - $ref: \"#/components/parameters/value_tag\"\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/reserved_barcode\"\n        - $ref: \"#/components/parameters/campaign\"\n        - $ref: \"#/components/parameters/predictor\"\n      responses:\n        \"200\":\n          description: The queried insights\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum:\n                      - \"no_questions\"\n                      - \"found\"\n                  questions:\n                    type: array\n                    items:\n                      type: object\n                  count:\n                    type: integer\n                    description: The total number of results with the provided filters\n\n  /questions/popular:\n    get:\n      tags:\n        - Questions\n      summary: Get questions about popular products\n      description: |\n        Questions are ranked by the product popularity (based on scan count).\n      operationId: GetQuestionsPopular\n      parameters:\n        - $ref: \"#/components/parameters/lang\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/server_domain\"\n        - $ref: \"#/components/parameters/insight_types\"\n        - $ref: \"#/components/parameters/country\"\n        - $ref: \"#/components/parameters/brands\"\n        - $ref: \"#/components/parameters/value_tag\"\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/reserved_barcode\"\n        - $ref: \"#/components/parameters/campaign\"\n        - $ref: \"#/components/parameters/predictor\"\n      responses:\n        \"200\":\n          description: \"\"\n          content: {}\n  /questions/unanswered:\n    get:\n      tags:\n        - Questions\n      summary: Get unanswered question counts\n      description: |\n        Get number of unanswered questions grouped by `value_tag`.\n        The list is ordered from highest count to lowest.\n      operationId: GetQuestionsUnanswered\n      parameters:\n        - name: count\n          in: query\n          description: The number of distinct `value_tag`s to return\n          schema:\n            type: number\n            default: 25\n            minimum: 1\n        - $ref: \"#/components/parameters/server_domain\"\n        - $ref: \"#/components/parameters/insight_type\"\n        - $ref: \"#/components/parameters/country\"\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/reserved_barcode\"\n        - $ref: \"#/components/parameters/campaign\"\n        - $ref: \"#/components/parameters/predictor\"\n      responses:\n        \"200\":\n          description: \"The number of questions grouped by `value_tag`\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  count:\n                    type: integer\n                    description: The total number of questions that meet the provided criteria\n                  questions:\n                    type: array\n                    items:\n                      oneOf:\n                        - type: string\n                          description: The `value_tag`\n                        - type: integer\n                          description: The number of questions for this `value_tag`\n                  status:\n                    type: string\n                    description: The request status\n                    enum:\n                      - found\n                      - no_questions\n                required:\n                  - count\n                  - questions\n                  - status\n\n  /insights/random:\n    get:\n      tags:\n        - Insights\n      summary: Get a random insight\n      operationId: GetInsightsRandom\n      parameters:\n        - $ref: \"#/components/parameters/insight_type\"\n        - $ref: \"#/components/parameters/country\"\n        - $ref: \"#/components/parameters/value_tag\"\n        - $ref: \"#/components/parameters/server_domain\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/predictor\"\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  insights:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/InsightSearchResult\"\n\n  /insights/{barcode}:\n    get:\n      tags:\n        - Insights\n      summary: Get all insights for a specific product\n      operationId: Getallinsightsforaspecificproduct\n      parameters:\n        - $ref: \"#/components/parameters/barcode_path\"\n      responses:\n        \"200\":\n          description: \"\"\n          content: {}\n  /insights/detail/{id}:\n    get:\n      tags:\n        - Insights\n      summary: Get a specific insight\n      operationId: GetInsightsDetail\n      parameters:\n        - name: id\n          in: path\n          description: \"ID of the insight\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          content: {}\n  /insights/annotate:\n    post:\n      tags:\n        - Insights\n      summary: Submit an annotation\n      description: |\n        The annotation can be submitted as an anonymous user or as a registered user.\n        If the user is anonymous, the annotation will be accounted as a vote, and several identical\n        anonymous votes are required to apply the insight. If the vote is sent from a registered user,\n        it is applied directly.\n\n        To send the annotation as a registered user, send Open Food Facts credentials to the API using\n        Basic Authentication: add a `Authorization: basic {ENCODED_BASE64}` header where `{ENCODED_BASE64}`\n        is an base64-encoded string of `user:password`. Don't provide an authentication header for anonymous\n        users.\n\n        The annotation is an integer that can take 3 values: `0`, `1`, `-1`. `0` means the insight is incorrect\n        (so it won't be applied), `1` means it is correct (so it will be applied) and `-1` means the insight\n        won't be returned to the user (_skip_). We use the voting mecanism system to remember which insight\n        to skip for a user (authenticated or not).\n      operationId: Submitanannotation\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                insight_id:\n                  type: string\n                  description: ID of the insight\n                annotation:\n                  type: integer\n                  description: \"Annotation of the prediction: 1 to accept the prediction, 0 to refuse it, and -1 for _skip_\"\n                  enum:\n                    - 0\n                    - 1\n                    - -1\n                update:\n                  type: integer\n                  description: \"Send the update to Openfoodfacts if `update=1`, don't send the update otherwise. This parameter is useful if the update is performed client-side\"\n                  default: 1\n                  enum:\n                    - 0\n                    - 1\n              required:\n                - \"insight_id\"\n                - \"annotation\"\n      responses:\n        \"200\":\n          description: \"\"\n          content: {}\n\n  /images/crop:\n    get:\n      summary: Crop an image\n      description: |\n        This endpoint is currently only used to generate cropped logos on Hunger Games from a\n        base image and cropping coordinates. Cropping coordinates are relative (between 0.\n        and 1. inclusive), with (0, 0) being the upper left corner.\n      tags:\n        - Images\n      parameters:\n        - name: image_url\n          in: query\n          example: https://static.openfoodfacts.org/images/products/211/123/200/5508/3.jpg\n          schema:\n            type: string\n            format: uri\n        - name: y_min\n          in: query\n          example: 0.47795143723487854\n          schema:\n            type: number\n            minimum: 0\n            maximum: 1\n        - name: x_min\n          in: query\n          example: 0.5583494305610657\n          schema:\n            type: number\n            minimum: 0\n            maximum: 1\n        - name: y_max\n          in: query\n          example: 0.5653171539306641\n          schema:\n            type: number\n            minimum: 0\n            maximum: 1\n        - name: x_max\n          in: query\n          example: 0.6795185804367065\n          schema:\n            type: number\n            minimum: 0\n            maximum: 1\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            image/jpeg: {}\n\n  /images/logos:\n    get:\n      tags:\n        - Logos\n      summary: Fetch logos\n      description: Return details about requested logos\n      parameters:\n        - name: logo_ids\n          description: Comma-separated string of logo IDs\n          in: query\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The fetch results\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  logos:\n                    type: array\n                    description: Details about requested logos\n                  count:\n                    type: number\n                    description: Number of returned results\n                required:\n                  - logos\n                  - count\n  /images/logos/search:\n    get:\n      tags:\n        - Logos\n      summary: Search for logos\n      description: |\n        Search for logos detected using the universal-logo-detector model that \n        meet some criteria (annotation status, annotated, type,...)\n      parameters:\n        - name: count\n          description: Number of results to return\n          in: query\n          schema:\n            type: number\n            default: 25\n            minimum: 1\n            maximum: 2000\n        - name: type\n          description: Filter by logo type\n          in: query\n          schema:\n            type: string\n          example: packager_code\n        - name: barcode\n          description: Filter by barcode\n          in: query\n          schema:\n            type: number\n        - name: value\n          description: Filter by annotated value\n          in: query\n          example: lidl\n          schema:\n            type: string\n        - name: taxonomy_value\n          description:\n            Filter by taxonomy value, i.e. the canonical value present is the associated taxonomy.\n            This parameter is mutually exclusive with `value`, and should be used for `label` type.\n          in: query\n          example: en:organic\n          schema:\n            type: string\n        - name: min_confidence\n          description: Filter logos that have a confidence score above a threshold\n          in: query\n          schema:\n            type: number\n        - name: random\n          description: If true, randomized result order\n          in: query\n          schema:\n            type: boolean\n            default: false\n        - name: server_domain\n          in: query\n          description: The server domain\n          schema:\n            type: string\n        - name: annotated\n          description: The annotation status of the logo.\n            If not provided, both annotated and non-annotated logos are returned\n          in: query\n          schema:\n            type: boolean\n            default: null\n      responses:\n        \"200\":\n          description: The search results\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  logos:\n                    type: array\n                    description: Found logos\n                  count:\n                    type: number\n                    description: Number of returned results\n                required:\n                  - logos\n                  - count\n\n  /predict/category:\n    post:\n      tags:\n        - Predict\n      summary: Predict categories for a product\n      description: |\n        Both `neural` and `matcher` categorizers are available.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              anyOf:\n                - type: object\n                  properties:\n                    barcode:\n                      type: string\n                      description: The barcode of the product to categorize\n                      minLength: 1\n                      example: 0748162621021\n                    deepest_only:\n                      type: boolean\n                      description: |\n                        If true, only return the deepest elements in the category taxonomy\n                        (don't return categories that are parents of other predicted categories)\n                    threshold:\n                      type: number\n                      description: |\n                        The score above which we consider the category to be detected\n                      default: 0.5\n                    predictors:\n                      type: array\n                      description:\n                        List of predictors to use, possible values are `matcher`\n                        (simple matching algorithm) and `neural` (neural network categorizer)\n                      items:\n                        type: string\n                        enum:\n                          - neural\n                          - matcher\n                      example: [\"neural\", \"matcher\"]\n                  required:\n                    - barcode\n                - type: object\n                  properties:\n                    product:\n                      type: object\n                      properties:\n                        product_name:\n                          type: string\n                          minLength: 1\n                          example: roasted chicken\n                        ingredients_tags:\n                          type: array\n                          items:\n                            type: string\n                          example:\n                            - \"en:chicken\"\n                            - \"en:salts\"\n                      required:\n                        - product_name\n                    lang:\n                      type: string\n                      minLength: 1\n                      description: Language of the product name, required for matcher algorithm\n                      example: en\n                    deepest_only:\n                      type: boolean\n                      description: |\n                        If true, only return the deepest elements in the category taxonomy\n                        (don't return categories that are parents of other predicted categories)\n                    threshold:\n                      type: number\n                      description: |\n                        The score above which we consider the category to be detected\n                      default: 0.5\n                    predictors:\n                      type: array\n                      description:\n                        List of predictors to use, possible values are `matcher`\n                        (simple matching algorithm) and `neural` (neural network categorizer)\n                      items:\n                        type: string\n                        enum:\n                          - neural\n                          - matcher\n                      example: [\"neural\", \"matcher\"]\n                  required:\n                    - product\n      responses:\n        \"200\":\n          description: the category predictions\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  neural:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        value_tag:\n                          type: string\n                          description: The predicted `value_tag`\n                          example: en:roast-chicken\n                        confidence:\n                          type: number\n                          description: The confidence score of the model\n                          example: 0.6\n                      required:\n                        - value_tag\n                        - confidence\n                  matcher:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        value_tag:\n                          type: string\n                          description: The predicted `value_tag`\n                          example: en:roast-chicken\n                        debug:\n                          type: object\n                          description: Additional debug information\n                          properties:\n                            pattern:\n                              type: string\n                              description: The pattern that matched the product name\n                              example: roast chicken\n                            lang:\n                              type: string\n                              description: The language of the matched pattern\n                              example: en\n                            product_name:\n                              type: string\n                              description: The product name that matched the category name\n                              example: roasted chicken\n                            processed_product_name:\n                              type: string\n                              description: The product name after preprocessing\n                                (stemming, stop word removal,...)\n                              example: roast chicken\n                            category_name:\n                              type: string\n                              description:\n                                The (localized) category name that matched the\n                                product name\n                              example: Roast chicken\n                            start_idx:\n                              type: integer\n                              description: The string match start position\n                              example: 0\n                            end_idx:\n                              type: integer\n                              description: The string match end position\n                              example: 13\n                            is_full_match:\n                              type: boolean\n                              description:\n                                If true, the processed product name matched completely with\n                                the processed category name\n                              example: true\n                          required:\n                            - pattern\n                            - lang\n                            - product_name\n                            - processed_product_name\n                            - category_name\n                            - start_idx\n                            - end_idx\n                            - is_full_match\n                      required:\n                        - value_tag\n                        - debug\n\ncomponents:\n  schemas:\n    InsightSearchResult:\n      description: An insight search result as returned by /insights/random or /insights/{barcode}\n      required:\n        - id\n        - type\n        - barcode\n        - countries\n      type: object\n      properties:\n        id:\n          type: string\n          description: Insight ID\n        type:\n          type: string\n          description: Insight type\n        barcode:\n          type: integer\n          description: Barcode of the product\n        countries:\n          type: array\n          description: country tags of the product\n          items:\n            type: string\n      example:\n        id: 3cd5aecd-edcc-4237-87d0-6595fc4e53c9\n        type: label\n        barcode: 9782012805866\n  parameters:\n    lang:\n      name: lang\n      in: query\n      description: The language of the question/value\n      schema:\n        type: string\n        default: en\n    count:\n      name: count\n      in: query\n      description: The number of questions to return\n      schema:\n        type: integer\n        default: 25\n        minimum: 1\n    server_domain:\n      name: server_domain\n      in: query\n      description: The server domain\n      schema:\n        type: string\n        default: api.openfoodfacts.org\n    insight_types:\n      name: insight_types\n      in: query\n      description: Comma-separated list, filter by insight types\n      schema:\n        type: string\n    insight_type:\n      name: type\n      in: query\n      description: Filter by insight type\n      schema:\n        type: string\n    country:\n      name: country\n      in: query\n      description: Filter by country tag\n      schema:\n        type: string\n      example: en:france\n    brands:\n      name: brands\n      in: query\n      description: Comma-separated list, filter by brands\n      schema:\n        type: string\n    value_tag:\n      name: value_tag\n      in: query\n      description: Filter by value tag, i.e the value that is going to be sent to Product Opener\n      schema:\n        type: string\n      example: en:organic\n    page:\n      name: page\n      in: query\n      description: Page index to return (starting at 1)\n      schema:\n        type: integer\n        default: 1\n        minimum: 1\n    reserved_barcode:\n      name: reserved_barcode\n      in: query\n      description: If true, also return questions about products with reserved barcodes\n      schema:\n        type: boolean\n        default: false\n    campaign:\n      name: campaign\n      in: query\n      description: Filter by annotation campaign\n        An annotation campaign allows to only retrieve questions about selected products, based on arbitrary criteria\n      schema:\n        type: string\n        example: agribalyse-category\n    predictor:\n      name: predictor\n      in: query\n      description: Filter by predictor value\n        A predictor refers to the model/method that was used to generate the prediction.\n      schema:\n        type: string\n        example: universal-logo-detector\n    barcode_path:\n      name: barcode\n      in: path\n      required: true\n      description: The barcode of the product\n      schema:\n        type: integer\n        example: 5410041040807\ntags:\n  - name: Questions\n  - name: Insights\n    description: |\n      An insight is a fact about a product that has been either extracted or inferred from the product pictures, characteristics,...\n      If the insight is correct, the Openfoodfacts DB can be updated accordingly.\n\n      Current insight types and their description can be found in [robotoff/insights/dataclass.py](https://github.com/openfoodfacts/robotoff/blob/master/robotoff/insights/dataclass.py).\n",
			"canonicalURL": "/github.com/openfoodfacts/robotoff@daaed91c4291107704872b10c15adfa07dbd680c/-/blob/doc/references/api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/openfoodfacts/robotoff/blob/daaed91c4291107704872b10c15adfa07dbd680c/doc/references/api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/images/logos/search\": get: parameters: parse parameter \"annotated\": parse schema: at doc/references/api.yml:423:22: parse default: unexpected default \"null\" value"
}