{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/geoadmin/service-stac"
		},
		"file": {
			"name": "paths.yaml",
			"size": 0,
			"path": "spec/transaction/paths.yaml",
			"byteSize": 35942,
			"content": "openapi: 3.0.1\npaths:\n  \"/collections/{collectionId}\":\n    put:\n      tags:\n        - Data Management\n      summary: Update or create a collection\n      description: \u003e-\n        Update or create a collection with Id `collectionId` with a complete collection definition.\n        If the collection doesn't exists it is then created.\n      operationId: updateCollection\n      parameters:\n        - $ref: \"../components/parameters.yaml#/components/parameters/collectionId\"\n        - $ref: \"./components/parameters.yaml#/components/parameters/IfMatchWrite\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"./components/schemas.yaml#/components/schemas/collectionWrite\"\n            example:\n              description: The National Map 1:200,000 is a topographic map giving an overview of Switzerland.\n              id: ch.swisstopo.pixelkarte-farbe-pk200.noscale\n              license: proprietary\n              links:\n                - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html\n                  rel: license\n                  title: Licence for the free geodata of the Federal Office of Topography swisstopo\n                - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df\n                  rel: describedby\n              providers:\n                - name: Federal Office of Topography - swisstopo\n                  roles:\n                    - producer\n                    - licensor\n                  url: https://www.swisstopo.admin.ch\n              title: National Map 1:200'000\n      responses:\n        \"200\":\n          description: Returns the updated Collection\n          content:\n            application/json:\n              schema:\n                $ref: \"../components/schemas.yaml#/components/schemas/collection\"\n        \"201\":\n          description: Returns the created Collection\n          headers:\n            Location:\n              description: A link to the collection\n              schema:\n                type: string\n                format: url\n          content:\n            application/json:\n              schema:\n                $ref: \"../components/schemas.yaml#/components/schemas/collection\"\n        \"403\":\n          $ref: \"../components/responses.yaml#/components/responses/PermissionDenied\"\n        \"404\":\n          $ref: \"../components/responses.yaml#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"../components/responses.yaml#/components/responses/PreconditionFailed\"\n        \"500\":\n          $ref: \"../components/responses.yaml#/components/responses/ServerError\"\n    patch:\n      tags:\n        - Data Management\n      summary: Partial update of a collection\n      description: \u003e-\n        Update an existing collection with Id `collectionId` with a partial collection definition\n      operationId: partialUpdateCollection\n      parameters:\n        - $ref: \"../components/parameters.yaml#/components/parameters/collectionId\"\n        - $ref: \"../components/parameters.yaml#/components/parameters/IfMatch\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"./components/schemas.yaml#/components/schemas/collectionWrite\"\n            example:\n              id: ch.swisstopo.pixelkarte-farbe-pk200.noscale\n              license: proprietary\n              links:\n                - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html\n                  rel: license\n                  title: Licence for the free geodata of the Federal Office of Topography swisstopo\n                - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df\n                  rel: describedby\n              providers:\n                - name: Federal Office of Topography - swisstopo\n                  roles:\n                    - producer\n                    - licensor\n                  url: https://www.swisstopo.admin.ch\n              title: National Map 1:200'000\n      responses:\n        \"200\":\n          description: Returns the updated Collection\n          content:\n            application/json:\n              schema:\n                $ref: \"../components/schemas.yaml#/components/schemas/collection\"\n        \"403\":\n          $ref: \"../components/responses.yaml#/components/responses/PermissionDenied\"\n        \"404\":\n          $ref: \"../components/responses.yaml#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"../components/responses.yaml#/components/responses/PreconditionFailed\"\n        \"500\":\n          $ref: \"../components/responses.yaml#/components/responses/ServerError\"\n\n  \"/collections/{collectionId}/items/{featureId}\":\n    put:\n      summary: Update or create a feature\n      description: \u003e-\n        Update or create a feature with Id `featureId` with a complete feature\n        definition. If the feature doesn't exists it is then created.\n\n\n        *NOTE: Optional fields that are not part of the PUT payload, will be erased\n        in the resource. For example if the resource has a properties.title and the\n        PUT payload doesn't, then the resource's properties.title will be removed.*\n      operationId: putFeature\n      tags:\n        - Data Management\n      parameters:\n        - $ref: \"../components/parameters.yaml#/components/parameters/collectionId\"\n        - $ref: \"../components/parameters.yaml#/components/parameters/featureId\"\n        - $ref: \"./components/parameters.yaml#/components/parameters/IfMatchWrite\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"./components/schemas.yaml#/components/schemas/updateItem\"\n            example:\n              id: cs3-20160503_132131_05\n              geometry:\n                type: Polygon\n                coordinates:\n                  [\n                    [\n                      [7.0906823, 45.9160584],\n                      [7.1035698, 45.9160977],\n                      [7.1035146, 45.925093],\n                      [7.0906249, 45.9250537],\n                      [7.0906823, 45.9160584]\n                    ]\n                  ]\n              properties:\n                datetime: \"2016-05-03T13:22:30.040Z\"\n                title: A CS3 item\n              links:\n                - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html\n                  rel: license\n                  title: Licence for the free geodata of the Federal Office of Topography swisstopo\n                - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df\n                  rel: describedby\n      responses:\n        \"200\":\n          description: Returns the updated Item\n          content:\n            application/json:\n              schema:\n                $ref: \"../components/schemas.yaml#/components/schemas/item\"\n        \"201\":\n          description: Return the created Item.\n          headers:\n            Location:\n              description: A link to the item\n              schema:\n                type: string\n                format: url\n          content:\n            application/json:\n              schema:\n                $ref: \"../components/schemas.yaml#/components/schemas/item\"\n        \"400\":\n          $ref: \"../components/responses.yaml#/components/responses/BadRequest\"\n        \"403\":\n          $ref: \"../components/responses.yaml#/components/responses/PermissionDenied\"\n        \"404\":\n          $ref: \"../components/responses.yaml#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"../components/responses.yaml#/components/responses/PreconditionFailed\"\n        \"5XX\":\n          $ref: \"../components/responses.yaml#/components/responses/ServerError\"\n    patch:\n      summary: Update an existing feature by Id with a partial item definition\n      description: \u003e-\n        Use this method to update an existing feature. Requires a JSON\n        fragment (containing the fields to be updated) be submitted.\n      operationId: patchFeature\n      tags:\n        - Data Management\n      parameters:\n        - $ref: \"../components/parameters.yaml#/components/parameters/collectionId\"\n        - $ref: \"../components/parameters.yaml#/components/parameters/featureId\"\n        - $ref: \"./components/parameters.yaml#/components/parameters/IfMatchWrite\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"./components/schemas.yaml#/components/schemas/partialItem\"\n      responses:\n        \"200\":\n          description: Returns the updated Item\n          content:\n            application/json:\n              schema:\n                $ref: \"../components/schemas.yaml#/components/schemas/item\"\n        \"201\":\n          description: Returns the created Item\n          headers:\n            Location:\n              description: A link to the item\n              schema:\n                type: string\n                format: url\n          content:\n            application/json:\n              schema:\n                $ref: \"../components/schemas.yaml#/components/schemas/item\"\n        \"400\":\n          $ref: \"../components/responses.yaml#/components/responses/BadRequest\"\n        \"403\":\n          $ref: \"../components/responses.yaml#/components/responses/PermissionDenied\"\n        \"404\":\n          $ref: \"../components/responses.yaml#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"../components/responses.yaml#/components/responses/PreconditionFailed\"\n        \"5XX\":\n          $ref: \"../components/responses.yaml#/components/responses/ServerError\"\n    delete:\n      summary: Delete an existing feature by Id\n      description: Use this method to delete an existing feature/item.\n      operationId: deleteFeature\n      tags:\n        - Data Management\n      parameters:\n        - $ref: \"../components/parameters.yaml#/components/parameters/collectionId\"\n        - $ref: \"../components/parameters.yaml#/components/parameters/featureId\"\n        - $ref: \"./components/parameters.yaml#/components/parameters/IfMatchWrite\"\n      responses:\n        \"200\":\n          $ref: \"./components/responses.yaml#/components/responses/DeletedResource\"\n        \"400\":\n          $ref: \"../components/responses.yaml#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"../components/responses.yaml#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"../components/responses.yaml#/components/responses/PreconditionFailed\"\n        \"5XX\":\n          $ref: \"../components/responses.yaml#/components/responses/ServerError\"\n  \"/collections/{collectionId}/items/{featureId}/assets\":\n    get:\n      description: \u003e-\n        Fetch assets of the item with id `featureId`.\n\n        Every asset belongs to an item.\n      operationId: getAssets\n      parameters:\n        - $ref: \"../components/parameters.yaml#/components/parameters/collectionId\"\n        - $ref: \"../components/parameters.yaml#/components/parameters/featureId\"\n      responses:\n        \"200\":\n          $ref: \"./components/responses.yaml#/components/responses/Assets\"\n        \"400\":\n          $ref: \"../components/responses.yaml#/components/responses/InvalidParameter\"\n        \"404\":\n          $ref: \"../components/responses.yaml#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"../components/responses.yaml#/components/responses/ServerError\"\n      summary: Fetch all assets for a feature\n      tags:\n        - Data\n\n  \"/collections/{collectionId}/items/{featureId}/assets/{assetId}\":\n    get:\n      description: \u003e-\n        Fetch the asset with id `assetId` of the feature with id `featureId`\n        in the feature collection with id `collectionId`.\n      operationId: getAsset\n      parameters:\n        - $ref: \"../components/parameters.yaml#/components/parameters/collectionId\"\n        - $ref: \"../components/parameters.yaml#/components/parameters/featureId\"\n        - $ref: \"./components/parameters.yaml#/components/parameters/assetId\"\n        - $ref: \"../components/parameters.yaml#/components/parameters/IfMatch\"\n        - $ref: \"../components/parameters.yaml#/components/parameters/IfNoneMatch\"\n      responses:\n        \"200\":\n          $ref: \"./components/responses.yaml#/components/responses/Asset\"\n        \"304\":\n          $ref: \"../components/responses.yaml#/components/responses/NotModified\"\n        \"404\":\n          $ref: \"../components/responses.yaml#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"../components/responses.yaml#/components/responses/PreconditionFailed\"\n        \"500\":\n          $ref: \"../components/responses.yaml#/components/responses/ServerError\"\n      summary: Fetch a single asset\n      tags:\n        - Data\n    put:\n      summary: Update or create an asset\n      description: \u003e-\n        Update or create an asset with Id `assetId` with a complete asset definition.\n        If the asset doesn't exists it is then created.\n\n\n        *Note: to upload an asset file see [Asset Upload Management](#tag/Asset-Upload-Management)*\n      operationId: putAsset\n      tags:\n        - Data Management\n      parameters:\n        - $ref: \"../components/parameters.yaml#/components/parameters/collectionId\"\n        - $ref: \"../components/parameters.yaml#/components/parameters/featureId\"\n        - $ref: \"./components/parameters.yaml#/components/parameters/assetId\"\n        - $ref: \"./components/parameters.yaml#/components/parameters/IfMatchWrite\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"./components/schemas.yaml#/components/schemas/readUpdateAsset\"\n      responses:\n        \"200\":\n          description: Asset has been successfully updated.\n          content:\n            application/json:\n              schema:\n                $ref: \"./components/schemas.yaml#/components/schemas/readUpdateAsset\"\n        \"201\":\n          description: Asset has been newly created.\n          headers:\n            Location:\n              description: A link to the asset\n              schema:\n                type: string\n                format: url\n          content:\n            application/json:\n              schema:\n                $ref: \"./components/schemas.yaml#/components/schemas/createAsset\"\n        \"400\":\n          $ref: \"../components/responses.yaml#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"../components/responses.yaml#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"../components/responses.yaml#/components/responses/PreconditionFailed\"\n        \"5XX\":\n          $ref: \"../components/responses.yaml#/components/responses/ServerError\"\n    patch:\n      summary: Update an existing asset by Id with a partial asset definition\n      description: \u003e-\n        Use this method to update an existing asset. Requires a JSON\n        fragment (containing the fields to be updated) be submitted.\n\n\n        *Note: to upload an asset file see [Asset Upload Management](#tag/Asset-Upload-Management)*\n      operationId: patchAsset\n      tags:\n        - Data Management\n      parameters:\n        - $ref: \"../components/parameters.yaml#/components/parameters/collectionId\"\n        - $ref: \"../components/parameters.yaml#/components/parameters/featureId\"\n        - $ref: \"./components/parameters.yaml#/components/parameters/assetId\"\n        - $ref: \"./components/parameters.yaml#/components/parameters/IfMatchWrite\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"./components/schemas.yaml#/components/schemas/readUpdateAsset\"\n      responses:\n        \"200\":\n          description: Returns the updated Asset.\n          content:\n            application/json:\n              schema:\n                $ref: \"./components/schemas.yaml#/components/schemas/readUpdateAsset\"\n        \"400\":\n          $ref: \"../components/responses.yaml#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"../components/responses.yaml#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"../components/responses.yaml#/components/responses/PreconditionFailed\"\n        \"5XX\":\n          $ref: \"../components/responses.yaml#/components/responses/ServerError\"\n    delete:\n      summary: Delete an existing asset by Id\n      description: \u003e-\n        Use this method to delete an existing asset.\n\n\n        **NOTE: Asset file on S3 will be also removed !**\n      operationId: deleteAsset\n      tags:\n        - Data Management\n      parameters:\n        - $ref: \"../components/parameters.yaml#/components/parameters/collectionId\"\n        - $ref: \"../components/parameters.yaml#/components/parameters/featureId\"\n        - $ref: \"./components/parameters.yaml#/components/parameters/assetId\"\n        - $ref: \"./components/parameters.yaml#/components/parameters/IfMatchWrite\"\n      responses:\n        \"200\":\n          $ref: \"./components/responses.yaml#/components/responses/DeletedResource\"\n        \"400\":\n          $ref: \"../components/responses.yaml#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"../components/responses.yaml#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"../components/responses.yaml#/components/responses/PreconditionFailed\"\n        \"5XX\":\n          $ref: \"../components/responses.yaml#/components/responses/ServerError\"\n\n\n  \"/collections/{collectionId}/items/{featureId}/assets/{assetId}/uploads\":\n    parameters:\n      - $ref: \"../components/parameters.yaml#/components/parameters/collectionId\"\n      - $ref: \"../components/parameters.yaml#/components/parameters/featureId\"\n      - $ref: \"./components/parameters.yaml#/components/parameters/assetId\"\n    get:\n      tags:\n        - Asset Upload Management\n      summary: List all Asset's multipart uploads\n      description: \u003e-\n        Return a list of all Asset's multipart uploads that are in progress and have been completed\n        or aborted.\n      operationId: getAssetUploads\n      parameters:\n        - name: status\n          in: query\n          description: Filter the list by status.\n          schema:\n            $ref: \"./components/schemas.yaml#/components/schemas/status\"\n      responses:\n        200:\n          description: List of Asset's uploads\n          content:\n            application/json:\n              schema:\n                $ref: \"./components/schemas.yaml#/components/schemas/assetUploads\"\n              example:\n                uploads:\n                  - upload_id: KrFTuglD.N8ireqry_w3.oQqNwrYI7SfSXpVRiusKah0YigDnusebaJNIUZg4R_No0MMW9FLU2UG5anTW0boTUYVxKfBZWCFXqnQTpjnQEo1K7la39MYpjSTvIbZgnG\n                    status: in-progress\n                    number_parts: 1\n                    urls:\n                    - url: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr200-200-4-2019/smr50-263-2016-2056-kgrs-2.5.tiff?uploadId=d77UbNnEVTaqCAyAz61AVqy7uuTGJ_YOUyPOklcRMr4ZPBthON9p6cpMREx683yQ_oeGVmGE_yTg4cmnEz3mTErEPKn0_m.3LBjo6A88Qxlj4vFrAdU6YBuourb.IqFF\u0026partNumber=1\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIA4HDUVYWAM6ZB6SWO%2F20210414%2Feu-central-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T112742Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=d12763467eaffa0c69d601297a661a05c9f414d4008b4148fa6ba604f203be01\n                      part: 1\n                      expires: '2019-08-24T14:15:22Z'\n                    created: '2019-08-24T14:15:22Z'\n                    checksum:multihash: 12200ADEC47F803A8CF1055ED36750B3BA573C79A3AF7DA6D6F5A2AED03EA16AF3BC\n                  - upload_id: KrFTuglD.N8ireqry_w3.oQqNwrYI7SfSXpVRiusKah0YaaegJNIUZg4R_No0MMW9FLU2UG5anTW0boTUYVxKfBZWCFXqnQTpjnQEo1K7la39MYpjSTvIbZgnG\n                    status: completed\n                    number_parts: 1\n                    created: '2019-08-24T14:15:22Z'\n                    completed: '2019-08-24T14:15:22Z'\n                    checksum:multihash: 12200ADEC47F803A8CF1055ED36750B3BA573C79A3AF7DA6D6F5A2AED03EA16AF3BC\n                  - upload_id: KrFTuglD.N8ireqry_w3.oQqNwrYI7SfSXpVRiusKah0YigDnuM06hfJNIUZg4R_No0MMW9FLU2UG5anTW0boTUYVxKfBZWCFXqnQTpjnQEo1K7la39MYpjSTvIbZgnG\n                    status: aborted\n                    number_parts: 1\n                    created: '2019-08-24T14:15:22Z'\n                    aborted: '2019-08-24T14:15:22Z'\n                    checksum:multihash: 12200ADEC47F803A8CF1055ED36750B3BA573C79A3AF7DA6D6F5A2AED03EA16AF3BC\n                links:\n                  - rel: next\n                    href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets/smr50-263-2016-2056-kgrs-2.5.tiff/uploads?cursor=0d34\n        \"400\":\n          $ref: \"../components/responses.yaml#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"../components/responses.yaml#/components/responses/NotFound\"\n        \"5XX\":\n          $ref: \"../components/responses.yaml#/components/responses/ServerError\"\n    post:\n      tags:\n        - Asset Upload Management\n      summary: Create a new Asset's multipart upload\n      description: |\n        Create Asset's multipart upload.\n\n        A file part must be at least 5 MB except for the last one and at most 5 GB, otherwise the complete operation will fail.\n\n        *Note: in order to provide integrity check during the upload, the base64-encoded 128-bit MD5 digest of each part must be\n        computed and passed in the create endpoint. Then this digest must also be passed as `Content-MD5` header during the upload.*\n      operationId: createAssetUpload\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"./components/schemas.yaml#/components/schemas/assetUploadCreate\"\n      responses:\n        201:\n          description: Created Asset's multipart upload\n          headers:\n            Location:\n              description: A link to the Asset's multipart upload object\n              schema:\n                type: string\n                format: url\n          content:\n            application/json:\n              schema:\n                $ref: \"./components/schemas.yaml#/components/schemas/assetUploadCreate\"\n        \"400\":\n          $ref: \"../components/responses.yaml#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"../components/responses.yaml#/components/responses/NotFound\"\n        \"5XX\":\n          $ref: \"../components/responses.yaml#/components/responses/ServerError\"\n  \"/collections/{collectionId}/items/{featureId}/assets/{assetId}/uploads/{uploadId}\":\n    parameters:\n      - $ref: \"../components/parameters.yaml#/components/parameters/collectionId\"\n      - $ref: \"../components/parameters.yaml#/components/parameters/featureId\"\n      - $ref: \"./components/parameters.yaml#/components/parameters/assetId\"\n      - $ref: \"./components/parameters.yaml#/components/parameters/uploadId\"\n    get:\n      tags:\n        - Asset Upload Management\n      summary: Get an Asset's multipart upload\n      description: |\n        Return an Asset's multipart upload.\n      operationId: getAssetUpload\n      parameters:\n        - $ref: \"../components/parameters.yaml#/components/parameters/IfMatch\"\n        - $ref: \"../components/parameters.yaml#/components/parameters/IfNoneMatch\"\n      responses:\n        \"200\":\n          description: Asset's multipart upload description.\n          headers:\n            ETag:\n              $ref: \"../components/headers.yaml#/components/headers/ETag\"\n          content:\n            application/json:\n              schema:\n                $ref: \"./components/schemas.yaml#/components/schemas/assetUpload\"\n              examples:\n                inprogress:\n                  $ref: \"./components/examples.yaml#/components/examples/inprogress\"\n                completed:\n                  $ref: \"./components/examples.yaml#/components/examples/completed\"\n                aborted:\n                  $ref: \"./components/examples.yaml#/components/examples/aborted\"\n        \"304\":\n          $ref: \"../components/responses.yaml#/components/responses/NotModified\"\n        \"404\":\n          $ref: \"../components/responses.yaml#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"../components/responses.yaml#/components/responses/PreconditionFailed\"\n        \"500\":\n          $ref: \"../components/responses.yaml#/components/responses/ServerError\"\n  \"/{presignedUrl}\":\n    servers:\n      - url: http://data.geo.admin.ch/\n    put:\n      tags:\n        - Asset Upload Management\n      summary: Upload asset file part\n      description: \u003e-\n        Upload an Asset file part using the presigned url(s) returned by\n        [Create a new Asset's multipart upload](#operation/createAssetUpload).\n\n\n        Parts that have been uploaded but not completed can be checked using\n        [Get an Asset's multipart upload](#operation/getAssetUpload)\n\n\n        A file part must be at least 5 MB except for the last one and at most 5 GB, otherwise the\n        complete operation will fail.\n\n\n        *Note: this endpoint doesn't require any authentication as it is already part of the\n        presigned url*\n      operationId: uploadAssetFilePart\n      parameters:\n        - $ref: \"./components/parameters.yaml#/components/parameters/presignedUrl\"\n        - name: Content-MD5\n          in: header\n          description: The base64-encoded 128-bit MD5 digest of this part.\n          required: true\n          schema:\n            type: string\n            example: yLLiDqX2OL7mcIMTjob60A==\n      responses:\n        \"200\":\n          description: Asset file part uploaded part successfully (Response has no content).\n          content: {}\n          headers:\n            ETag:\n              schema:\n                type: string\n              description: \u003e-\n                The RFC7232 ETag header field in a response provides the current entity-\n                tag for the selected resource.\n\n\n                This ETag is required in the complete multipart upload payload.\n\n\n                An entity-tag is an opaque identifier for\n                different versions of a resource over time, regardless whether multiple\n                versions are valid at the same time. An entity-tag consists of an opaque\n                quoted string.\n              example: \"d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b\"\n              required: true\n        \"400\":\n          description: Asset file part corrupted.\n          content:\n            application/xml:\n              schema:\n                type: object\n                required:\n                  - Error\n                properties:\n                  Error:\n                    type: object\n                    required:\n                      - Code\n                      - Message\n                    properties:\n                      Code:\n                        type: string\n                        enum: ['BadDigest']\n                      Message:\n                        type: string\n                    additionalProperties:\n                      type: string\n              example: |\n                \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n                \u003cError\u003e\n                  \u003cCode\u003eBadDigest\u003c/Code\u003e\n                  \u003cMessage\u003eThe Content-MD5 you specified did not match what we received.\u003c/Message\u003e\n                  \u003cExpectedDigest\u003e0b6vaU45Ys1BdrMhd4wnGA==\u003c/ExpectedDigest\u003e\n                  \u003cCalculatedDigest\u003e4lDYLoS0vNfNdko/3cPJJQ==\u003c/CalculatedDigest\u003e\n                  \u003cRequestId\u003eRAVFJXJQFXTCZHT3\u003c/RequestId\u003e\n                  \u003cHostId\u003ekDMsU45sQ4oZjkTgba2SNBy/0RMshW2lEWmfKnaotvViav5Qlyz4aSQdmS9FRVKp1HgJUBj3h5w=\u003c/HostId\u003e\n                \u003c/Error\u003e\n        \"403\":\n          description: Asset file part upload Bad Request, Signature does not match (e.g. missing Content-MD5 header).\n          content:\n            application/xml:\n              schema:\n                type: object\n                required:\n                  - Error\n                properties:\n                  Error:\n                    type: object\n                    required:\n                      - Code\n                      - Message\n                    properties:\n                      Code:\n                        type: string\n                        enum: ['SignatureDoesNotMatch']\n                      Message:\n                        type: string\n                    additionalProperties:\n                      type: string\n              example: |\n                \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n                \u003cError\u003e\n                  \u003cCode\u003eSignatureDoesNotMatch\u003c/Code\u003e\n                  \u003cMessage\u003eThe request signature we calculated does not match the signature you provided. Check your key and signing method.\u003c/Message\u003e\n                  \u003cAWSAccessKeyId\u003edummy-key\u003c/AWSAccessKeyId\u003e\n                  \u003cStringToSign\u003e\n                    AWS4-HMAC-SHA256\n                    20210922T110759Z\n                    20210922/eu-central-1/s3/aws4_request6f0cf4c9a56acf90d9354cb79629a159c0c848ffacdbe13c7b9ae014671fa5c3\n                  \u003c/StringToSign\u003e\n                  \u003cSignatureProvided\u003e1c762db1e677a6535c0e4a91015dcd60c00e58f1e5136f8943636f157dc03d54\u003c/SignatureProvided\u003e\n                  \u003cStringToSignBytes\u003e41 57 53 34 2d 48 4d 41 43 2d 53 48 41 32 35...\u003c/StringToSignBytes\u003e\n                  \u003cCanonicalRequest\u003e\n                    PUT /service-stac-dev/test-e2e-asset-upload-UUID/test-e2e-asset-upload-UUID/test-e2e-asset-upload-UUID.txt\n                      X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=...\n                      content-md5:\n                      host:s3.eu-central-1.amazonaws.com\n\n                      content-md5;host\n                      UNSIGNED-PAYLOAD\n                  \u003c/CanonicalRequest\u003e\n                  \u003cCanonicalRequestBytes\u003e50 55 54 0a 2f 73...\u003c/CanonicalRequestBytes\u003e\n                  \u003cRequestId\u003eF5SB90RJFYE21C0V\u003c/RequestId\u003e\n                  \u003cHostId\u003eYnH6DNl93sXH5kL0nEk1TOhH+crwM+wnaRNhh7MNC6CW6XhAeJLKVV/WU+dsdRkJUzet5m7cZwU=\u003c/HostId\u003e\n                \u003c/Error\u003e\n\n\n  \"/collections/{collectionId}/items/{featureId}/assets/{assetId}/uploads/{uploadId}/complete\":\n    parameters:\n      - $ref: \"../components/parameters.yaml#/components/parameters/collectionId\"\n      - $ref: \"../components/parameters.yaml#/components/parameters/featureId\"\n      - $ref: \"./components/parameters.yaml#/components/parameters/assetId\"\n      - $ref: \"./components/parameters.yaml#/components/parameters/uploadId\"\n    post:\n      tags:\n        - Asset Upload Management\n      summary: Complete multipart upload\n      operationId: completeMultipartUpload\n      description: \u003e-\n        Complete the multipart upload process. After completion, the Asset metadata are updated\n        with the new `checksum:multihash` from the upload and the parts are automatically deleted.\n        The Asset `href` field is also set if it was the first upload.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"./components/schemas.yaml#/components/schemas/assetCompleteUpload\"\n      responses:\n        \"200\":\n          description: Asset multipart upload completed successfully.\n          content:\n            application/json:\n              schema:\n                $ref: \"./components/schemas.yaml#/components/schemas/assetUploadCompleted\"\n        \"400\":\n          $ref: \"../components/responses.yaml#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"../components/responses.yaml#/components/responses/NotFound\"\n        \"5XX\":\n          $ref: \"../components/responses.yaml#/components/responses/ServerError\"\n  \"/collections/{collectionId}/items/{featureId}/assets/{assetId}/uploads/{uploadId}/abort\":\n    parameters:\n      - $ref: \"../components/parameters.yaml#/components/parameters/collectionId\"\n      - $ref: \"../components/parameters.yaml#/components/parameters/featureId\"\n      - $ref: \"./components/parameters.yaml#/components/parameters/assetId\"\n      - $ref: \"./components/parameters.yaml#/components/parameters/uploadId\"\n    post:\n      tags:\n        - Asset Upload Management\n      summary: Abort multipart upload\n      operationId: abortMultipartUpload\n      description: \u003e-\n        Abort the multipart upload process. All already uploaded parts are automatically deleted.\n      responses:\n        \"200\":\n          description: Asset multipart upload aborted successfully.\n          content:\n            application/json:\n              schema:\n                $ref: \"./components/schemas.yaml#/components/schemas/assetUploadAborted\"\n        \"400\":\n          $ref: \"../components/responses.yaml#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"../components/responses.yaml#/components/responses/NotFound\"\n        \"5XX\":\n          $ref: \"../components/responses.yaml#/components/responses/ServerError\"\n  \"/collections/{collectionId}/items/{featureId}/assets/{assetId}/uploads/{uploadId}/parts\":\n    parameters:\n      - $ref: \"../components/parameters.yaml#/components/parameters/collectionId\"\n      - $ref: \"../components/parameters.yaml#/components/parameters/featureId\"\n      - $ref: \"./components/parameters.yaml#/components/parameters/assetId\"\n      - $ref: \"./components/parameters.yaml#/components/parameters/uploadId\"\n    get:\n      tags:\n        - Asset Upload Management\n      summary: Get upload parts\n      operationId: getUploadParts\n      description: \u003e-\n        Return the list of already uploaded parts.\n\n\n        ### Pagination\n\n        By default all parts are returned (maximum number of parts being 100). The user can\n        use pagination to reduce the number of returned parts. Pagination is done via the `limit`\n        query parameter (see below).\n      parameters:\n        - $ref: \"../components/parameters.yaml#/components/parameters/limit\"\n      responses:\n        \"200\":\n          description: List of parts already uploaded.\n          content:\n            application/json:\n              schema:\n                $ref: \"./components/schemas.yaml#/components/schemas/assetUploadParts\"\n        \"400\":\n          $ref: \"../components/responses.yaml#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"../components/responses.yaml#/components/responses/NotFound\"\n        \"5XX\":\n          $ref: \"../components/responses.yaml#/components/responses/ServerError\"\n\n\n  \"/get-token\":\n    servers:\n      - url: http://data.geo.admin.ch/api/stac/\n    post:\n      tags:\n        - Authentication\n      summary: \u003e-\n        Request token for token authentication.\n      operationId: getToken\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                  description: name of user for whom token is requested\n                password:\n                  type: string\n                  description: password of user for whom token is requested\n              required:\n                - username\n                - password\n            example:\n              username: \"Mickey Mouse\"\n              password: \"I_love_Minnie_Mouse\"\n      responses:\n        \"200\":\n          description: Returns the token for the specified user\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  token:\n                    type: string\n                    description: generated token for specified user\n              example:\n                token: ccecf40693bfc52ba090cd46eb7f19e723fe831f\n        \"400\":\n          description: Wrong credentials were provided.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: string\n                  description:\n                    type: string\n              example:\n                code: 400\n                description: \"Unable to log in with provided credentials.\"\n",
			"canonicalURL": "/github.com/geoadmin/service-stac@e1bc3aa0b8c01eaa4993374375975142ed00edd2/-/blob/spec/transaction/paths.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/geoadmin/service-stac/blob/e1bc3aa0b8c01eaa4993374375975142ed00edd2/spec/transaction/paths.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/collections/{collectionId}/items/{featureId}/assets/{assetId}/uploads/{uploadId}\": parameters: parse parameter \"\": at 1:19565: resolve \"../components/parameters.yaml#/components/parameters/collectionId\" reference: external \"../components/parameters.yaml\": get: file: local file reference is not allowed"
}