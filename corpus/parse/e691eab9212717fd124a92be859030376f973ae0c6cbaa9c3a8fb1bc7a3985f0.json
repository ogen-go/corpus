{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "gitlab.com/uklotzde/aoide-rs"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "websrv/res/openapi.yaml",
			"byteSize": 104098,
			"content": "# SPDX-FileCopyrightText: Copyright (C) 2018-2022 Uwe Klotz \u003cuwedotklotzatgmaildotcom\u003e et al.\n# SPDX-License-Identifier: AGPL-3.0-or-later\n\nopenapi: 3.0.3\ninfo:\n  version: 0.8.0\n  title: aoide\n  description: Music library management\n  contact:\n    url: https://gitlab.com/uklotzde/aoide-rs\n  license:\n    name: AGPL-3.0-or-later\n    url: 'https://www.gnu.org/licenses/agpl-3.0.html'\nservers:\n  - url: 'http://[::1]:8080'\n    description: Local development server\ntags:\n  - name: 'Collections'\n  - name: 'Collections: Media Sources'\n  - name: 'Collections: Media Tracker'\n  - name: 'Collections: Playlists'\n  - name: 'Collections: Tracks'\n  - name: 'Media Tracker'\n  - name: 'Tracks'\n  - name: 'Playlists'\n  - name: 'Storage'\n  - name: 'Administration'\npaths:\n  /api/c:\n    get:\n      summary: List collections\n      description: |\n        Load collections that have recently been modified (created/updated).\n      tags:\n        - Collections\n      parameters:\n        - $ref: '#/components/parameters/collectionKindQuery'\n        - $ref: '#/components/parameters/collectionSummaryQuery'\n        - $ref: '#/components/parameters/paginationOffsetQuery'\n        - $ref: '#/components/parameters/paginationLimitQuery'\n      responses:\n        '200':\n          description: |\n            An array of collection entities, optional with a summary.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CollectionWithSummaryEntity'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n    post:\n      summary: Create a new collection\n      description: |\n        Create a new collection.\n      tags:\n        - Collections\n      requestBody:\n        description: |\n          The new collection.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Collection'\n      responses:\n        '201':\n          description: |\n            The newly created collection entity.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionEntity'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n  /api/c/kinds:\n    get:\n      summary: List collection kinds\n      description: |\n        Load all (distinct) kinds of collections.\n      tags:\n        - Collections\n      responses:\n        '200':\n          description: |\n            An of distinct collection kinds in no particular order.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CollectionKind'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n\n  /api/c/{collectionUid}:\n    get:\n      summary: Load a single collection\n      description: |\n        Load a single collection entity by UID.\n      tags:\n        - Collections\n      parameters:\n        - $ref: '#/components/parameters/collectionUidPath'\n        - $ref: '#/components/parameters/collectionSummaryQuery'\n      responses:\n        '200':\n          description: |\n            The loaded collection entity, optionally with a summary.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionWithSummaryEntity'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n    put:\n      summary: Update a collection\n      description: |\n        Update a collection entity after validating that the provided `rev`\n        matches that of the current entity (optimistic locking).\n      tags:\n        - Collections\n      parameters:\n        - $ref: '#/components/parameters/collectionUidPath'\n        - $ref: '#/components/parameters/currentEntityRevisionQuery'\n      requestBody:\n        description: |\n          The updated collection entity.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CollectionEntity'\n      responses:\n        '200':\n          description: |\n            The updated collection entity.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntityHeader'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '409':\n          $ref: '#/components/responses/409Conflict'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n    delete:\n      summary: Delete a collection\n      description: |\n        Delete a collection.\n      tags:\n        - Collections\n      parameters:\n        - $ref: '#/components/parameters/collectionUidPath'\n      responses:\n        '204':\n          $ref: '#/components/responses/204NoContent'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n\n  /api/c/{collectionUid}/t/resolve:\n    post:\n      summary: Resolve the UIDs of tracks from a list of media source URIs\n      description: |\n        Resolve the UID and current revision of tracks from a list of\n        media source URIs.\n\n        The result list is unordered and contains only those tracks\n        that have been found.\n      tags:\n        - 'Collections: Tracks'\n      parameters:\n        - $ref: '#/components/parameters/collectionUidPath'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PercentEncodedUri'\n      responses:\n        '200':\n          description: |\n            An array of track [URI, [UID, Revision]] tuples.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: array\n                  minItems: 2\n                  maxItems: 2\n                  items:\n                    oneOf:\n                      - $ref: '#/components/schemas/PercentEncodedUri'\n                      - $ref: '#/components/schemas/EntityHeader'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n  /api/c/{collectionUid}/t/search:\n    post:\n      summary: Search collected tracks and their media sources\n      description: |\n        Search collected tracks and their media sources by evaluating\n        filter conditions and sorting the results.\n      tags:\n        - 'Collections: Tracks'\n      parameters:\n        - $ref: '#/components/parameters/collectionUidPath'\n        - $ref: '#/components/parameters/resolveMediaSourceUrlFromContentPathQuery'\n        - $ref: '#/components/parameters/overrideMediaSourceRootUrlQuery'\n        - $ref: '#/components/parameters/paginationOffsetQuery'\n        - $ref: '#/components/parameters/paginationLimitQuery'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchCollectedTracksRequestBody'\n      responses:\n        '200':\n          description: |\n            An array of matching tracks in the requested order.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchCollectedTracksResponseBody'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n  /api/c/{collectionUid}/t/replace:\n    post:\n      summary: Replace collected tracks and media sources by URI\n      description: |\n        Create or update multiple, collected tracks and their media sources by locating them\n        through their (percent-encoded) URI.\n      tags:\n        - 'Collections: Tracks'\n      parameters:\n        - $ref: '#/components/parameters/collectionUidPath'\n        - $ref: '#/components/parameters/replaceCollectedTrackModeQuery'\n        - $ref: '#/components/parameters/resolveMediaContentPathFromUrlQuery'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReplaceCollectedTracksRequestBody'\n      responses:\n        '200':\n          description: |\n            Batch operation succeeded.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReplaceCollectedTracksResponseBody'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n  /api/c/{collectionUid}/t/import-and-replace:\n    post:\n      summary: Import and replace collected tracks and media sources by URI\n      description: |\n        TODO\n      tags:\n        - 'Collections: Tracks'\n      parameters:\n        - $ref: '#/components/parameters/collectionUidPath'\n        - $ref: '#/components/parameters/replaceCollectedTrackModeQuery'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ImportAndReplaceCollectedTracksRequestBody'\n      responses:\n        '200':\n          description: |\n            Batch operation succeeded.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ImportAndReplaceCollectedTracksResponseBody'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n  /api/c/{collectionUid}/t/find-unsynchronized:\n    post:\n      summary: Find tracks with unsynchronized media sources\n      description: |\n        Return information about tracks that have are not synchronized\n        with their media sources. This includes all tracks that have\n        either never been imported from sources or that have been\n        modified after the last import. The metadata of the latter\n        is supposed to be exported to keep the sources synchronized.\n      tags:\n        - 'Collections: Tracks'\n      parameters:\n        - $ref: '#/components/parameters/collectionUidPath'\n        - $ref: '#/components/parameters/resolveMediaSourceUrlFromContentPathQuery'\n        - $ref: '#/components/parameters/overrideMediaSourceRootUrlQuery'\n        - $ref: '#/components/parameters/paginationOffsetQuery'\n        - $ref: '#/components/parameters/paginationLimitQuery'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FindUnsynchronizedTracksRequestBody'\n      responses:\n        '200':\n          description: |\n            An array of matching tracks in the requested order.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FindUnsynchronizedTracksResponseBody'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n\n  /api/c/{collectionUid}/ms/purge-orphaned:\n    post:\n      summary: Purge media sources without a corresponding track\n      description: |\n        Purge all media sources that are not associated with a track.\n      tags:\n        - 'Collections: Media Sources'\n      parameters:\n        - $ref: '#/components/parameters/collectionUidPath'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PurgeOrphanedMediaSourcesRequestBody'\n      responses:\n        '200':\n          description: |\n            Operation succeeded.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PurgeOrphanedMediaSourcesResponseBody'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n  /api/c/{collectionUid}/ms/purge-untracked:\n    post:\n      summary: Purge untracked media sources and the corresponding tracks\n      description: |\n        Purges all media sources that are not tracked by the media tracker. This\n        will also purge the corresponding tracks and all their transitive relations,\n        i.e. playlist entries.\n\n        Purging all orphaned directories from the media tracker before invoking\n        this operation might generate additional candidates,\n      tags:\n        - 'Collections: Media Sources'\n      parameters:\n        - $ref: '#/components/parameters/collectionUidPath'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PurgeUntrackedMediaSourcesRequestBody'\n      responses:\n        '200':\n          description: |\n            Batch operation succeeded.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PurgeUntrackedMediaSourcesResponseBody'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n  /api/c/{collectionUid}/ms/relocate:\n    post:\n      summary: Relocate collected media sources by URI prefix\n      description: |\n        Relocate media sources with a common URI prefix by replacing\n        this prefix in their URI with a new prefix.\n\n        The URI comparison is case-sensitive.\n      tags:\n        - 'Collections: Media Sources'\n      parameters:\n        - $ref: '#/components/parameters/collectionUidPath'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RelocateCollectedMediaSourcesRequestBody'\n      responses:\n        '200':\n          description: |\n            Batch operation succeeded.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RelocateCollectedMediaSourcesResponseBody'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n\n  /api/c/{collectionUid}/mt/query-status:\n    post:\n      summary: Query the aggregated status of tracked directories\n      description: |\n        Fetches the aggregated status of tracked directories from the database.\n      tags:\n        - 'Collections: Media Tracker'\n      parameters:\n        - $ref: '#/components/parameters/collectionUidPath'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MediaTrackerQueryStatusRequestBody'\n      responses:\n        '200':\n          description: |\n            Operation succeeded.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MediaTrackerQueryStatusResponseBody'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n  /api/c/{collectionUid}/mt/scan-directories:\n    post:\n      summary: Scan a directory tree for changes\n      description: |\n        Recursively scan a root directory for changes, i.e. discover\n        added/modified/removed files and directories.\n\n        For each directory a cryptographic hash is calculated and stored in\n        the database for further processing, e.g. import of track metadata.\n        Results are stored on behalf of the collection.\n\n        Previously scanned directories that are not discovered again during\n        a subsequent scan are marked and counted as *orphaned*.\n\n        This operation is blocking and locks the database while running.\n      tags:\n        - 'Collections: Media Tracker'\n      parameters:\n        - $ref: '#/components/parameters/collectionUidPath'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MediaTrackerScanRequestBody'\n      responses:\n        '200':\n          description: |\n            Operation succeeded.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MediaTrackerScanResponseBody'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n  /api/c/{collectionUid}/mt/untrack-directories:\n    post:\n      summary: Discard tracked directories and their contents\n      description: |\n        Recursively purge the tracking status of a directory subtree.\n\n        The media sources (and tracks) that are located in the subtree\n        are unaffected. As a result all these media sources and\n        corresponding tracks become *untracked*.\n\n        Untracked directories can be re-added by a rescanning.\n        This would also allow to recover from an inconsistent state\n        i.e. if changes are expected but not detected by rescanning.\n      tags:\n        - 'Collections: Media Tracker'\n      parameters:\n        - $ref: '#/components/parameters/collectionUidPath'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MediaTrackerUntrackDirectoriesRequestBody'\n      responses:\n        '200':\n          description: |\n            Operation succeeded.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MediaTrackerUntrackDirectoriesResponseBody'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n  /api/c/{collectionUid}/mt/import-files:\n    post:\n      summary: Import file contents from changed directories\n      description: |\n        Recursively import media sources from files located in directories\n        that have been marked as changed.\n\n        This operation is blocking and locks the database while running.\n      tags:\n        - 'Collections: Media Tracker'\n      parameters:\n        - $ref: '#/components/parameters/collectionUidPath'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MediaTrackerImportRequestBody'\n      responses:\n        '200':\n          description: |\n            Operation succeeded.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MediaTrackerImportResponseBody'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n  /api/c/{collectionUid}/mt/find-untracked-files:\n    post:\n      summary: Find untracked entries in the directory tree\n      description: |\n        Recursively scan a root directory for untracked files.\n\n        This operation is blocking and locks the database while running.\n      tags:\n        - 'Collections: Media Tracker'\n      parameters:\n        - $ref: '#/components/parameters/collectionUidPath'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MediaTrackerFindUntrackedRequestBody'\n      responses:\n        '200':\n          description: |\n            Operation succeeded.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MediaTrackerFindUntrackedResponseBody'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n\n  /api/mt/progress:\n    get:\n      summary: Query the current progress\n      description: |\n        Show the currently running batch operation (either *scan* or *import*)\n        and report the progress so far.\n\n        If no batch operation is running then the string \"idle\" is returned.\n      tags:\n        - Media Tracker\n      responses:\n        '200':\n          description: |\n            Operation succeeded.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - type: string\n                    enum:\n                      - idle\n                  - type: object\n                    properties:\n                      scanning:\n                        $ref: '#/components/schemas/MediaTrackerFsTraversalProgress'\n                  - type: object\n                    properties:\n                      importing:\n                        $ref: '#/components/schemas/MediaTrackerImportingProgress'\n                  - type: object\n                    properties:\n                      findingUntracked:\n                        $ref: '#/components/schemas/MediaTrackerFsTraversalProgress'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n\n  /api/t/{trackUid}:\n    get:\n      summary: Load a single track\n      description: |\n        Load a single track entity with its associated media source by UID.\n      tags:\n        - Tracks\n      parameters:\n        - $ref: '#/components/parameters/trackUidPath'\n      responses:\n        '200':\n          description: |\n            The loaded track entity.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TrackEntity'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n  /api/t/load:\n    post:\n      summary: Load multiple tracks\n      description: |\n        Load multiple track entities including their media sources.\n\n        The result may contain fewer tracks than requested if some\n        tracks do not exist. The order of the given UIDs is not preserved\n        in the result set, i.e. the ordering of tracks is undefined!\n      tags:\n        - Tracks\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/TrackUid'\n      responses:\n        '200':\n          description: |\n            An unordered array of loaded tracks.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TrackEntity'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n  /api/t/{trackUid}/export-metadata:\n    post:\n      summary: Export metadata of a single track\n      description: |\n        Write track metadata into file tags.\n      tags:\n        - Tracks\n      parameters:\n        - $ref: '#/components/parameters/trackUidPath'\n      responses:\n        '200':\n          description: |\n            Operation succeeded.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExportTrackMetadataResponseBody'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n\n  /api/c/{collectionUid}/p:\n    get:\n      summary: List collected playlists\n      description: |\n        Load collected playlists that have recently been modified (created/updated).\n      tags:\n        - 'Collections: Playlists'\n      parameters:\n        - $ref: '#/components/parameters/collectionUidPath'\n        - $ref: '#/components/parameters/playlistKindQuery'\n        - $ref: '#/components/parameters/paginationOffsetQuery'\n        - $ref: '#/components/parameters/paginationLimitQuery'\n      responses:\n        '200':\n          description: |\n            An array of playlist entities with a summary of their\n            entries.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PlaylistWithEntriesSummaryEntity'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n    post:\n      summary: Create a new, collected playlist\n      description: |\n        Create a new playlist in a collection.\n      tags:\n        - Playlists\n      parameters:\n        - $ref: '#/components/parameters/collectionUidPath'\n      requestBody:\n        description: |\n          Properties and entries of the new playlist.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Playlist'\n      responses:\n        '201':\n          description: |\n            The newly created playlist entity.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PlaylistEntity'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n\n  /api/p/{playlistUid}:\n    get:\n      summary: Load a single playlist\n      description: |\n        Load a single playlist entity with all entries by UID.\n      tags:\n        - Playlists\n      parameters:\n        - $ref: '#/components/parameters/playlistUidPath'\n      responses:\n        '200':\n          description: |\n            The loaded playlist entity including all entries.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PlaylistWithEntriesEntity'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n    put:\n      summary: Update a playlist\n      description: |\n        Update a playlist entity after validating that the provided `header`\n        matches that of the current entity (optimistic locking).\n      tags:\n        - Playlists\n      parameters:\n        - $ref: '#/components/parameters/playlistUidPath'\n        - $ref: '#/components/parameters/currentEntityRevisionQuery'\n      requestBody:\n        description: |\n          A playlist entity with the current `header` and and updated `body`.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PlaylistEntity'\n      responses:\n        '200':\n          description: |\n            The updated playlist entity.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PlaylistWithEntriesSummaryEntity'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '409':\n          $ref: '#/components/responses/409Conflict'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n    delete:\n      summary: Delete a playlist\n      description: |\n        Delete a playlist.\n      tags:\n        - Playlists\n      parameters:\n        - $ref: '#/components/parameters/playlistUidPath'\n      responses:\n        '204':\n          $ref: '#/components/responses/204NoContent'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n\n  /api/p/{playlistUid}/entries:\n    patch:\n      summary: Patch playlist entries\n      description: |\n        Modify the playlist's entries by applying a sequence of operations.\n      tags:\n        - Playlists\n      parameters:\n        - $ref: '#/components/parameters/playlistUidPath'\n        - $ref: '#/components/parameters/currentEntityRevisionQuery'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PlaylistEntriesPatchOperation'\n      responses:\n        '200':\n          description: |\n            The updated playlist entity.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PlaylistWithEntriesSummaryEntity'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '409':\n          $ref: '#/components/responses/409Conflict'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n\n  /api/storage/pending-tasks:\n    get:\n      summary: Get the number of pending tasks\n      description: |\n        Returns the number of pending read and write tasks.\n      tags:\n        - Storage\n      responses:\n        '200':\n          description: |\n            The number of pending storage tasks.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StoragePendingTasksSummary'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n  /api/storage/abort-current-task:\n    post:\n      summary: Abort the current task\n      description: |\n        Aborts a running storage operation before completion.\n\n        Read tasks may block the database for writers. Write tasks are\n        exclusive and may block both pending readers and writers. In\n        some cases it might be desirable to abort a running task.\n\n        Not all operations support aborting. Batch operations will check\n        periodically if an abort has been requested.\n      tags:\n        - Storage\n      responses:\n        '202':\n          description: |\n            The operation has been accepted.\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n  /api/storage/migrate-schema:\n    post:\n      summary: Migrate the database schema\n      description: |\n        Migrate the database schema to the most recent version\n      tags:\n        - Storage\n      responses:\n        '204':\n          $ref: '#/components/responses/204NoContent'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n  /api/storage/cleanse:\n    post:\n      summary: Cleanse the database\n      description: |\n        First check and repair inconsistencies, then analyze and optimize\n        statistics for the query planner.\n\n        Finally, the database could be compacted by rebuilding the database\n        file from scratch.\n      tags:\n        - Storage\n      parameters:\n        - in: query\n          name: vacuum\n          schema:\n            type: boolean\n          description: |\n            Rebuild the database file from scratch.\n      responses:\n        '204':\n          $ref: '#/components/responses/204NoContent'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n\n  /about:\n    get:\n      summary: Report service properties\n      description: |\n        Inspect the service environment.\n      tags:\n        - Administration\n      responses:\n        '200':\n          description: |\n            Command succeeded.\n          content:\n            application/json:\n              schema:\n                type: object\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n\n  /shutdown:\n    post:\n      summary: Shut down gracefully\n      description: |\n        Shut down the server after finishing all pending requests.\n      tags:\n        - Administration\n      responses:\n        '202':\n          $ref: '#/components/responses/202Accepted'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n        '502':\n          $ref: '#/components/responses/502InternalCommunicationError'\n\ncomponents:\n  responses:\n    201Created:\n      description: |\n        The resource has been created.\n    202Accepted:\n      description: |\n        The request/command has been accepted.\n    204NoContent:\n      description: |\n        The request/command has been processed, no response available.\n    400BadRequest:\n      description: |\n        The request with the provided parameters was invalid.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    404NotFound:\n      description: |\n        The specified resource was not found.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    409Conflict:\n      description: |\n        The specified resource could not be updated or patched due to a conflict.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    500InternalServerError:\n      description: |\n        The server failed to process the request.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    502InternalCommunicationError:\n      description: |\n        The server failed to forward the request.\n  parameters:\n    paginationOffsetQuery:\n      name: offset\n      in: query\n      required: false\n      schema:\n        type: integer\n        format: uint64\n        minimum: 0\n      description: |\n        Number of items to skip before returning the results or 0 if missing.\n    paginationLimitQuery:\n      name: limit\n      in: query\n      required: false\n      schema:\n        type: integer\n        format: uint64\n        minimum: 0\n      description: |\n        Maximum number of items to return or unlimited if missing.\n\n        When this parameter is specified its value is evaluated and\n        applied, i.e. a value of 0 will result in an empty set of\n        returned items.\n    replaceCollectedTrackModeQuery:\n      name: mode\n      in: query\n      required: false\n      schema:\n        $ref: '#/components/schemas/ReplaceCollectedTrackMode'\n      description: |\n        Controls if track entities are created and/or updated.\n    resolveMediaContentPathFromUrlQuery:\n      name: resolvePathFromUrl\n      description: |\n        Consider the provided media source path as an URL and\n        resolve it according to the collection's media source\n        configuration.\n\n        Only supported for local files with virtual paths.\n      in: query\n      required: false\n      schema:\n        type: boolean\n        default: false\n    resolveMediaSourceUrlFromContentPathQuery:\n      name: resolveUrlFromContentPath\n      description: |\n        Resolve the actual URL of the media source from the stored path according\n        to the collection's media source configuration.\n\n        Only supported for local files with virtual paths.\n      in: query\n      required: false\n      schema:\n        type: boolean\n        default: false\n    overrideMediaSourceRootUrlQuery:\n      name: overrideRootUrl\n      description: |\n        Resolve the actual URL of the media source from the stored path according\n        to the given root URL. The provided URL overrides the root URL from the\n        collection's media source configuration for this particular request.\n\n        Only supported for local files with virtual paths.\n      in: query\n      required: false\n      schema:\n        $ref: '#/components/schemas/PercentEncodedDirectoryUrl'\n    collectionUidPath:\n      name: collectionUid\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/CollectionUid'\n      description: |\n        The UID of the collection.\n    currentEntityRevisionQuery:\n      name: rev\n      in: query\n      required: true\n      schema:\n        $ref: '#/components/schemas/EntityRevision'\n      description: |\n        The current entity revision for optimistic locking when\n        modifying an entity.\n    collectionKindQuery:\n      name: kind\n      in: query\n      required: false\n      schema:\n        $ref: '#/components/schemas/CollectionKind'\n      description: |\n        The desired kind of the collection.\n    collectionSummaryQuery:\n      name: summary\n      in: query\n      required: false\n      description: |\n        Request a summary of the collection.\n      schema:\n        type: boolean\n      example: true\n    playlistKindQuery:\n      name: kind\n      in: query\n      required: false\n      schema:\n        $ref: '#/components/schemas/PlaylistKind'\n      description: |\n        The desired kind of the playlist.\n    playlistUidPath:\n      name: playlistUid\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/PlaylistUid'\n      description: |\n        The UID of the playlist.\n    trackUidPath:\n      name: trackUid\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/TrackUid'\n      description: |\n        The UID of the track.\n  schemas:\n    Actor:\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/ActorName'\n        kind:\n          $ref: '#/components/schemas/ActorKind'\n        role:\n          $ref: '#/components/schemas/ActorRole'\n        roleNotes:\n          type: string\n      required:\n        - name\n      description: |\n        Named actor, categorized by *kind* and *role*.\n\n        Only a single `summary` and `sorting` actor is allowed per track/album,\n        while multiple `individual` actors are allowed.\n    ActorName:\n      type: string\n      minLength: 1\n      example: The Beatles\n    ActorKind:\n      type: integer\n      enum: [0, 1, 2]\n      default: 0\n      description: |\n        Optional actor rank that defaults to 0 = summary if missing:\n          * 0 = summary actor (default if missing)\n          * 1 = individual actor(s), either persons or groups/bands\n          * 2 = sorting actor\n    ActorRole:\n      type: integer\n      enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n      default: 0\n      description: |\n        Optional actor role that defaults to 0 = artist if missing:\n          * 0 = Artist (default if missing)\n          * 1 = Arranger\n          * 2 = Composer\n          * 3 = Conductor\n          * 4 = DJ Mixer\n          * 5 = Engineer\n          * 6 = Lyricist\n          * 7 = Mixer\n          * 8 = Performer\n          * 9 = Producer\n          * 10 = Director\n          * 11 = Remixer\n          * 12 = Writer\n    AlbumKind:\n      type: integer\n      enum: [0, 1, 2, 3]\n      description: |\n        * 0 = undefined (default if missing)\n        * 1 = Album\n        * 2 = Single\n        * 3 = Compilation\n    Album:\n      description: |\n        Album properties\n      type: object\n      properties:\n        titles:\n          type: array\n          description: |\n            An array of titles\n          items:\n            $ref: '#/components/schemas/Title'\n        actors:\n          type: array\n          description: |\n            An array of acting participants/people\n          items:\n            $ref: '#/components/schemas/Actor'\n        kind:\n          $ref: '#/components/schemas/AlbumKind'\n    ApicType:\n      type: integer\n      minimum: 0x00\n      maximum: 0x14\n      example: 0x03\n      description: |\n        The APIC picture type code as defined by ID3v2.\n\n        Used for artwork classification, not necessarily in conjunction with ID3v2 tags.\n    Artwork:\n      description: |\n        If both `uri` and `image` are undefined or null then the `source`\n        property can be either `missing`, `unsupported`, or `irregular`.\n\n        If only the `image` property and no `uri` is defined then the `source`\n        must be set to `embedded`, i.e. the image is embedded in the media source.\n\n        If both `image` and `uri` are defined then `source` must be set to `linked`.\n        The percent-encoded URI references an external, linked image resource,\n        e.g. \"file://cover%20art.jpg\" for a JPEG file named \"cover art.jpg\"\n        located in the same local directory as the media source itself.\n        Both absolute and relative URIs are supported.\n      type: object\n      properties:\n        source:\n          $ref: '#/components/schemas/ArtworkSource'\n        image:\n          $ref: '#/components/schemas/ArtworkImage'\n        uri:\n          $ref: '#/components/schemas/PercentEncodedUri'\n      required:\n        - source\n    ArtworkImage:\n      description: |\n        Artwork image properties\n      type: object\n      properties:\n        apicType:\n          $ref: '#/components/schemas/ApicType'\n        mediaType:\n          $ref: '#/components/schemas/MediaType'\n        size:\n          $ref: '#/components/schemas/ImageSize'\n        digest:\n          $ref: '#/components/schemas/ImageDigest'\n        thumbnail:\n          $ref: '#/components/schemas/ImageThumbnail4x4Rgb8'\n      required:\n        - apicType\n        - mediaType\n    ArtworkSource:\n      description: |\n        The source and state of the artwork.\n      type: string\n      enum:\n        - missing\n        - unsupported\n        - irregular\n        - embedded\n        - linked\n    AudioContentMetadata:\n      type: object\n      properties:\n        durationMs:\n          $ref: '#/components/schemas/DurationMs'\n        bitrateBps:\n          $ref: '#/components/schemas/BitrateBps'\n        channels:\n          $ref: '#/components/schemas/Channels'\n        encodedBy:\n          description: Encoder, either a person or an application\n          type: string\n          minLength: 1\n        encoder:\n          description: Encoder settings or configuration\n          type: string\n          minLength: 1\n        loudnessLufs:\n          $ref: '#/components/schemas/LoudnessLufs'\n        sampleRateHz:\n          $ref: '#/components/schemas/SampleRateHz'\n    BeatNumber:\n      type: integer\n      minimum: 0\n      maximum: 65535\n      example: 3\n      description: |\n        A number for counting beats in a measure.\n    BeatsPerMeasure:\n      allOf:\n        - $ref: '#/components/schemas/BeatNumber'\n      example: 3\n      description: |\n        The number of beats in each measure.\n\n        This number appears as the nominator/upper value in the\n        stacked notation for time signature.\n    BeatUnit:\n      type: integer\n      minimum: 0\n      maximum: 65535\n      example: 4\n      description: |\n        The note value that counts as one beat.\n\n        This number appears as the denominator/lower value in the\n        stacked notation for time signature.\n\n        Example: 4 for a quarter note\n    BitrateBps:\n      type: integer\n      format: int32\n      minimum: 0\n      example: 256000\n      description: |\n        The bit rate in bits per second (bps).\n    ChannelCount:\n      type: integer\n      minimum: 1\n      maximum: 65535\n      example: 2\n    ChannelLayout:\n      type: string\n      enum:\n        - mono\n        - dual-mono\n        - stereo\n        - three\n        - four\n        - five\n        - five-one\n        - seven-one\n      description: |\n        The layout of the channels.\n\n        Each predefined layout implies a number of channels that then\n        doesn't need to be specified explicitly.\n\n        Predefined layouts:\n          * mono (1 channel)\n          * dual-mono (2 channels)\n          * stereo (2 channels)\n          * three (3 channels)\n          * four (4 channels)\n          * five (5 channels)\n          * five-one (6 channels)\n          * seven-one (8 channels)\n    Channels:\n      description: |\n        Either a channel count or a channel layout.\n      oneOf:\n        - $ref: '#/components/schemas/ChannelCount'\n        - $ref: '#/components/schemas/ChannelLayout'\n    CollectionEntity:\n      description: |\n        Entity header and body\n      type: array\n      minItems: 2\n      maxItems: 2\n      items:\n        oneOf:\n          - $ref: '#/components/schemas/EntityHeader'\n          - $ref: '#/components/schemas/Collection'\n    Collection:\n      type: object\n      properties:\n        title:\n          $ref: '#/components/schemas/CollectionTitle'\n        kind:\n          $ref: '#/components/schemas/CollectionKind'\n        notes:\n          $ref: '#/components/schemas/CollectionNotes'\n        color:\n          $ref: '#/components/schemas/Color'\n        mediaSourceConfig:\n          $ref: '#/components/schemas/CollectionMediaSourceConfig'\n      required:\n        - title\n        - mediaSourceConfig\n    CollectionKind:\n      type: string\n      minLength: 1\n      description: |\n        A custom identifier to distinguish different kinds of collections.\n      example: 'local'\n    CollectionMediaSourceConfig:\n      properties:\n        pathKind:\n          $ref: '#/components/schemas/MediaContentPathKind'\n        rootUrl:\n          $ref: '#/components/schemas/PercentEncodedDirectoryUrl'\n      required:\n        - pathKind\n    CollectionTitle:\n      type: string\n      minLength: 1\n      description: |\n        A concise title.\n      example: 'Collection #1'\n    CollectionWithSummary:\n      allOf:\n        - $ref: '#/components/schemas/Collection'\n        - type: object\n          properties:\n            summary:\n              $ref: '#/components/schemas/CollectionSummary'\n    CollectionWithSummaryEntity:\n      description: |\n        Entity header and body\n      type: array\n      minItems: 2\n      maxItems: 2\n      items:\n        oneOf:\n          - $ref: '#/components/schemas/EntityHeader'\n          - $ref: '#/components/schemas/CollectionWithSummary'\n    CollectionSummary:\n      type: object\n      properties:\n        mediaSources:\n          $ref: '#/components/schemas/CollectionMediaSourceSummary'\n        tracks:\n          $ref: '#/components/schemas/CollectionTrackSummary'\n        playlists:\n          $ref: '#/components/schemas/CollectionPlaylistSummary'\n    CollectionMediaSourceSummary:\n      type: object\n      properties:\n        totalCount:\n          $ref: '#/components/schemas/TotalMediaSourceCount'\n      required:\n        - totalCount\n    CollectionPlaylistSummary:\n      type: object\n      properties:\n        totalCount:\n          $ref: '#/components/schemas/TotalPlaylistCount'\n      required:\n        - totalCount\n    CollectionTrackSummary:\n      type: object\n      properties:\n        totalCount:\n          $ref: '#/components/schemas/TotalTrackCount'\n      required:\n        - totalCount\n    CollectionUid:\n      allOf:\n        - $ref: '#/components/schemas/EntityUid'\n    CollectionNotes:\n      type: string\n      description: |\n        Lengthy, personal notes.\n      example: 'Lengthy, personal notes'\n    Color:\n      oneOf:\n        - $ref: '#/components/schemas/RgbColorVariant'\n        - $ref: '#/components/schemas/ColorIndexVariant'\n      description: |\n        Either an RGB color value or a color index.\n    ColorIndex:\n      type: integer\n      minimum: 0\n      maximum: 65535\n      example: 5\n      description: |\n        A color palette index.\n    ColorIndexVariant:\n      type: object\n      properties:\n        idx:\n          $ref: '#/components/schemas/ColorIndex'\n    AdvisoryRatingCode:\n      type: integer\n      enum: [0, 1, 2]\n      description: |\n        Advisory rating for content(s):\n\n          * 0 = Inoffensive\n          * 1 = Explicit (offensive)\n          * 2 = Clean (inoffensive after edited)\n    MediaDigest:\n      description: |\n        A crypographic 256-bit hash encoded as *base64url* (RFC 4648) without padding\n        that can be used as a fingerprint of arbitrary, variable-length content\n        (audio/video/image/text/...).\n\n        The digest should be calculated from the raw stream data (audio/video)\n        or image data that is supposed to be read-only and immutable over time.\n        Additional metadata like file tags that is modified frequently is not\n        suitable to be included in the digest calculation.\n      type: string\n      format: base64url\n      minLength: 42\n      maxLength: 43\n    ContentMetadataFlags:\n      type: integer\n      format: i32\n      minimum: 0\n      maximum: 7\n      example: 5\n      description: |\n        A bitmask for controlling how and if content metadata is re-imported\n        from the source.\n\n        Bits:\n          - 0x01: Metadata is reliable\n          - 0x02: Metadata is locked\n          - 0x04: Metadata might be stale\n\n        Unreliable: Parsed from file tags which are considered inaccurate\n        and are often imprecise.\n\n        Reliable: Reported by a decoder when opening the audio/video\n        stream for reading. Nevertheless different decoders may report\n        slightly differing values. Reliable metadata cannot be updated\n        by unreliable metadata. Instead it could be marked as *stale* if\n        a re-import is desired.\n\n        Locked: Locked metadata will not be updated automatically, independent\n        of the *reliable* flag. Neither when parsing file tags nor when decoding\n        the audio/video stream. Instead it could be marked as *stale* if a\n        re-import is desired.\n\n        STALE: This flag signals that the content metadata should be\n        re-imported depending on the reliability flag. Alternatively\n        the *stale* flag could be reset manually.\n    CueBankIndex:\n      type: integer\n      format: int32\n      minimum: -32368\n      maximum: 32767\n      example: 0\n      description: |\n        The bank index.\n\n        Banks are used for distinguishing different kinds of cues.\n    CueSlotIndex:\n      type: integer\n      format: int32\n      minimum: -32368\n      maximum: 32767\n      example: 3\n      description: |\n        The slot index within a bank.\n    DiscIndex:\n      allOf:\n        - $ref: '#/components/schemas/Index'\n    DurationMs:\n      type: number\n      format: double\n      minimum: 0\n      example: 210387.576\n    EntityHeader:\n      type: array\n      minItems: 2\n      maxItems: 2\n      items:\n        oneOf:\n          - $ref: '#/components/schemas/EntityUid'\n          - $ref: '#/components/schemas/EntityRevision'\n    EntityRevision:\n      type: integer\n      format: uint64\n      minimum: 1\n      example: 3\n    EntityUid:\n      type: string\n      minLength: 32\n      maxLength: 33\n      example: 4L9v84JeigpHxEdtVHUkL6JASD92sDwdW\n      description: A unique identifier (UID) for entities in base-58 encoding.\n    ErrorResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n          description: |\n            A HTTP status code\n        message:\n          type: string\n          minLength: 1\n          description: |\n            A textual description of the error.\n      required:\n        - code\n        - message\n    MediaContentRevision:\n      type: integer\n      format: uint64\n      minimum: 0\n      example: 876387282\n    FilterModifier:\n      type: string\n      enum:\n        - complement\n    ImageDigest:\n      description: |\n        A binary fingerprint encoded as *base64url* (RFC 4648) without padding that\n        identifies the contents of an image for cache lookup and to decide about\n        modifications, e.g. a SHA256 hash of the raw image data.\n      allOf:\n        - $ref: '#/components/schemas/MediaDigest'\n    ImageThumbnail4x4Rgb8:\n      description: |\n        A condensed 4x4 thumbnail picture.\n\n        The pixel format is R8G8B8, i.e. 8 bytes per RGB channel. The data layout\n        is in row-major order starting in the upper left corner of the image.\n\n        The raw bytes are encoded as *base64url* (RFC 4648) without padding.\n      type: string\n      format: base64url\n      minLength: 64\n      maxLength: 64\n    ImageSize:\n      description: |\n        Width and height of an image in pixels\n      type: array\n      minItems: 2\n      maxItems: 2\n      items:\n        type: integer\n        minimum: 1\n        maximum: 65535\n        example: 600\n    Index:\n      oneOf:\n        - type: integer\n          format: int32\n          minimum: 0\n          description: |\n            Identifies the number of the current item.\n        - type: array\n          minItems: 2\n          maxItems: 2\n          items:\n            type: integer\n            format: int32\n            minimum: 0\n          description: |\n            Identifies the number of the current item (1st) and the number of total items (2nd).\n    Indexes:\n      type: object\n      properties:\n        track:\n          $ref: '#/components/schemas/TrackIndex'\n        disc:\n          $ref: '#/components/schemas/DiscIndex'\n        movement:\n          $ref: '#/components/schemas/MovementIndex'\n    KeySignatureCode:\n      type: integer\n      enum:\n        [\n          0,\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          10,\n          11,\n          12,\n          13,\n          14,\n          15,\n          16,\n          17,\n          18,\n          19,\n          20,\n          21,\n          22,\n          23,\n          24,\n        ]\n      description: |\n        The key signature is denoted by a code with one of the following values:\n          * 0 = unknown (default if missing)\n          * 1 = C maj\n          * 2 = A min\n          * 3 = G maj\n          * 4 = E min\n          * ...\n          * 23 = F maj\n          * 24 = D min\n\n        The numbering follows the Circle of fifth / Open Key notation in\n        clock-wise orientation, alternating between major and minor keys.\n    LoudnessLufs:\n      type: number\n      format: double\n      example: -13.4239\n      description: |\n        Loudness measured in \"Loudness Units relative to Full Scale\" (LUFS)\n        with 1 LU = 1 dB according to ITU-R BS.1770.\n\n        EBU R128 proposes a target level of -23 LUFS while the ReplayGain v2\n        specification (RG2) proposes -18 LUFS for achieving similar perceptive\n        results compared to ReplayGain v1 (RG1).\n    CueFlags:\n      type: integer\n      format: i32\n      minimum: 0\n      maximum: 1\n      example: 1\n      description: |\n        A bitmask with flags, e.g. for locking to prevent unintended changes.\n\n        Bits:\n          - 0x01: Locked\n    CueInMarker:\n      type: object\n      properties:\n        positionMs:\n          $ref: '#/components/schemas/PositionMs'\n      required:\n        - positionMs\n    CueOutMarker:\n      type: object\n      properties:\n        positionMs:\n          $ref: '#/components/schemas/PositionMs'\n        mode:\n          $ref: '#/components/schemas/CueOutMode'\n      required:\n        - positionMs\n    CueOutMode:\n      enum: [0, 1, 2, 3]\n      description: |\n        The playback behavior when reaching the out position.\n\n        Possible values:\n          * 0 - cont: Continue playback when reaching the out position (default if missing).\n          * 1 - stop: Stop playback when reaching the out position.\n          * 2 - next: Continue playback at the in position of the cue\n                      with the next slot index, i.e. slot index + 1.\n                      If next slot is empty or if that cue has no in\n                      position then playback continues (default behavior).\n          * 3 - loop: Continue playback at the in position when reaching\n                      the out position. If no in position is defined then\n                      playback continues (default behavior).\n        type: integer\n    CueKind:\n      description: |\n        Application-defined tag for distinguishing cues within the same `bank`.\n      type: string\n      example: chorus\n    CueLabel:\n      description: |\n        A custom, user-defined string\n      type: string\n      example: Intro Loop\n    CueLabelFilter:\n      type: object\n      properties:\n        modifier:\n          $ref: '#/components/schemas/FilterModifier'\n        value:\n          $ref: '#/components/schemas/StringPredicate'\n    MediaSourceContentMetadata:\n      allOf:\n        - $ref: '#/components/schemas/MediaSourceAudioContentMetadata'\n    MediaSourceAudioContentMetadata:\n      type: object\n      properties:\n        audio:\n          $ref: '#/components/schemas/AudioContentMetadata'\n    MediaSource:\n      type: object\n      properties:\n        collectedAt:\n          $ref: '#/components/schemas/DateTime'\n        contentLink:\n          $ref: '#/components/schemas/MediaContentLink'\n        contentType:\n          $ref: '#/components/schemas/MediaType'\n        contentDigest:\n          $ref: '#/components/schemas/MediaDigest'\n        contentMetadataFlags:\n          $ref: '#/components/schemas/ContentMetadataFlags'\n        artwork:\n          $ref: '#/components/schemas/Artwork'\n        advisoryRating:\n          $ref: '#/components/schemas/AdvisoryRatingCode'\n      additionalProperties:\n        $ref: '#/components/schemas/MediaSourceContentMetadata'\n      required:\n        - collectedAt\n        - contentLink\n        - contentType\n    LastSynchronizedEntityRevision:\n      description: |\n        Last synchronized track entity revision\n\n        The last entity revision of this track that is considered\n        as synchronized with the underlying media source, or absent\n        if unsynchronized.\n      allOf:\n        - $ref: '#/components/schemas/EntityRevision'\n    MediaType:\n      type: string\n      minLength: 1\n      example: audio/mpeg\n      description: |\n        A MIME media type string according to RFC 6838.\n\n        If the fundamental type is considered insufficient to specify the\n        file's contents and format optionally add a `codecs` parameter\n        according to\n        https://developer.mozilla.org/docs/Web/Media/Formats/codecs_parameter.\n\n        Examples:\n          * audio/flac\n          * audio/mp4\n          * audio/mp4; codecs=aac\n          * audio/mp4; codecs=alac\n          * audio/mpeg\n          * audio/mpeg; codecs=mp3\n          * audio/ogg; codecs=vorbis\n          * audio/ogg; codecs=opus\n          * audio/opus\n    MovementIndex:\n      allOf:\n        - $ref: '#/components/schemas/Index'\n    Metrics:\n      type: object\n      properties:\n        tempoBpm:\n          $ref: '#/components/schemas/TempoBpm'\n        keyCode:\n          $ref: '#/components/schemas/KeySignatureCode'\n        timeSignature:\n          $ref: '#/components/schemas/TimeSignature'\n        flags:\n          $ref: '#/components/schemas/MetricsFlags'\n      description: |\n        Musical signature including tempo/speed, timining, and key.\n    MetricsFlags:\n      type: integer\n      format: i32\n      minimum: 0x01\n      maximum: 0xff\n      example: 0x05\n      description: |\n        A bitmask for locking selected musical metrics properties and for\n        indicating special cases.\n\n        Bits:\n          - 0x01: Tempo/BPM is locked\n          - 0x02: Key signature is locked\n          - 0x04: Time signature is locked\n          - 0x10: Imprecise integer BPM value (non-fractional)\n\n        Example: A value of 3 = 1 | 2 locks both the tempo and the key signature\n    DateTimeField:\n      type: string\n      enum:\n        - collectedAt\n        - recordedAt\n        - releasedAt\n        - releasedOrigAt\n    DateTimeFieldFilter:\n      type: array\n      minItems: 2\n      maxItems: 2\n      items:\n        oneOf:\n          - $ref: '#/components/schemas/DateTimeField'\n          - $ref: '#/components/schemas/DateTimePredicate'\n    DateTimePredicate:\n      oneOf:\n        - $ref: '#/components/schemas/DateTimePredicateLessThan'\n        - $ref: '#/components/schemas/DateTimePredicateLessOrEqual'\n        - $ref: '#/components/schemas/DateTimePredicateGreaterThan'\n        - $ref: '#/components/schemas/DateTimePredicateGreaterOrEqual'\n        - $ref: '#/components/schemas/DateTimePredicateEqual'\n        - $ref: '#/components/schemas/DateTimePredicateNotEqual'\n    DateTimePredicateLessThan:\n      type: object\n      properties:\n        lt:\n          $ref: '#/components/schemas/DateTime'\n      required:\n        - lt\n    DateTimePredicateLessOrEqual:\n      type: object\n      properties:\n        le:\n          $ref: '#/components/schemas/DateTime'\n      required:\n        - le\n    DateTimePredicateGreaterThan:\n      type: object\n      properties:\n        gt:\n          $ref: '#/components/schemas/DateTime'\n      required:\n        - gt\n    DateTimePredicateGreaterOrEqual:\n      type: object\n      properties:\n        ge:\n          $ref: '#/components/schemas/DateTime'\n      required:\n        - ge\n    DateTimePredicateEqual:\n      type: object\n      properties:\n        eq:\n          $ref: '#/components/schemas/DateTime'\n    DateTimePredicateNotEqual:\n      type: object\n      properties:\n        ne:\n          $ref: '#/components/schemas/DateTime'\n    NumericField:\n      type: string\n      enum:\n        - audioBitrateBps\n        - audioChannelCount\n        - audioDurationMs\n        - audioLoudnessLufs\n        - audioSampleRateHz\n        - advisoryRating\n        - discNumber\n        - discTotal\n        - musicTempoBpm\n        - musicKeyCode\n        - recordedAtDate\n        - releasedAtDate\n        - releasedOrigAtDate\n        - trackNumber\n        - trackTotal\n    NumericFieldFilter:\n      type: array\n      minItems: 2\n      maxItems: 2\n      items:\n        oneOf:\n          - $ref: '#/components/schemas/NumericField'\n          - $ref: '#/components/schemas/NumericPredicate'\n    NumericPredicate:\n      oneOf:\n        - $ref: '#/components/schemas/NumericPredicateLessThan'\n        - $ref: '#/components/schemas/NumericPredicateLessOrEqual'\n        - $ref: '#/components/schemas/NumericPredicateGreaterThan'\n        - $ref: '#/components/schemas/NumericPredicateGreaterOrEqual'\n        - $ref: '#/components/schemas/NumericPredicateEqual'\n        - $ref: '#/components/schemas/NumericPredicateNotEqual'\n    NumericPredicateLessThan:\n      type: object\n      properties:\n        lt:\n          type: number\n          format: double\n      required:\n        - lt\n    NumericPredicateLessOrEqual:\n      type: object\n      properties:\n        le:\n          type: number\n          format: double\n      required:\n        - le\n    NumericPredicateGreaterThan:\n      type: object\n      properties:\n        gt:\n          type: number\n          format: double\n      required:\n        - gt\n    NumericPredicateGreaterOrEqual:\n      type: object\n      properties:\n        ge:\n          type: number\n          format: double\n      required:\n        - ge\n    NumericPredicateEqual:\n      type: object\n      properties:\n        eq:\n          type: number\n          format: double\n    NumericPredicateNotEqual:\n      type: object\n      properties:\n        ne:\n          type: number\n          format: double\n    PhraseFieldFilter:\n      type: array\n      minItems: 2\n      maxItems: 2\n      items:\n        oneOf:\n          - type: array\n            items:\n              $ref: '#/components/schemas/StringField'\n            description: |\n              The fields that are matched against the terms. If no fields\n              are specified all available string fields are matched.\n          - type: array\n            items:\n              type: string\n            description: |\n              The terms are concatenated with wildcards, and filtered\n              using case-insensitive \"contains\" semantics for each of the\n              selected fields, e.g. \"Pa la bell\" or \"tt ll\" both match \"Patti\n              LaBelle\".\n\n              An empty array matches both empty and missing/null fields.\n      required:\n        - terms\n      description: |\n        Matches a sequence of terms on any of the given string fields.\n        A match for at least one of the fields is sufficient.\n    PlainTag:\n      description: |\n        Either a single label, a single score, or a 2-element array [label, score].\n      oneOf:\n        - $ref: '#/components/schemas/TagLabel'\n        - $ref: '#/components/schemas/TagScore'\n        - type: array\n          minItems: 2\n          maxItems: 2\n          items:\n            oneOf:\n              - $ref: '#/components/schemas/TagLabel'\n              - $ref: '#/components/schemas/TagScore'\n    PlainTags:\n      type: array\n      items:\n        $ref: '#/components/schemas/PlainTag'\n    Playlist:\n      type: object\n      properties:\n        collectedAt:\n          $ref: '#/components/schemas/DateTime'\n        title:\n          $ref: '#/components/schemas/PlaylistTitle'\n        color:\n          $ref: '#/components/schemas/Color'\n        notes:\n          $ref: '#/components/schemas/PlaylistNotes'\n        kind:\n          $ref: '#/components/schemas/PlaylistKind'\n        flags:\n          $ref: '#/components/schemas/PlaylistFlags'\n      required:\n        - collectedAt\n        - title\n    PlaylistEntity:\n      description: Entity header and body\n      type: array\n      minItems: 2\n      maxItems: 2\n      items:\n        oneOf:\n          - $ref: '#/components/schemas/EntityHeader'\n          - $ref: '#/components/schemas/Playlist'\n    PlaylistEntries:\n      description: |\n        A sequence of playlist entries\n      type: array\n      items:\n        $ref: '#/components/schemas/PlaylistEntry'\n    PlaylistEntriesPatchOperation:\n      oneOf:\n        - type: object\n          properties:\n            append:\n              type: object\n              properties:\n                entries:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/PlaylistEntry'\n              required:\n                - entries\n          required:\n            - append\n        - type: object\n          properties:\n            prepend:\n              type: object\n              properties:\n                entries:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/PlaylistEntry'\n              required:\n                - entries\n          required:\n            - prepend\n        - type: object\n          properties:\n            insert:\n              type: object\n              properties:\n                before:\n                  $ref: '#/components/schemas/PlaylistEntryPosition'\n                entries:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/PlaylistEntry'\n              required:\n                - before\n                - entries\n          required:\n            - insert\n        - type: object\n          properties:\n            copyAll:\n              type: object\n              properties:\n                sourcePlaylist:\n                  $ref: '#/components/schemas/PlaylistRef'\n              required:\n                - sourcePlaylist\n          required:\n            - copyAll\n        - type: object\n          properties:\n            move:\n              type: object\n              properties:\n                start:\n                  $ref: '#/components/schemas/PlaylistEntryPosition'\n                end:\n                  $ref: '#/components/schemas/PlaylistEntryPosition'\n                delta:\n                  $ref: '#/components/schemas/PlaylistEntryPositionDelta'\n              required:\n                - start\n                - end\n                - delta\n          required:\n            - move\n        - type: object\n          properties:\n            remove:\n              type: object\n              properties:\n                start:\n                  $ref: '#/components/schemas/PlaylistEntryPosition'\n                end:\n                  $ref: '#/components/schemas/PlaylistEntryPosition'\n              required:\n                - start\n                - end\n          required:\n            - remove\n        - type: string\n          enum:\n            - removeAll\n            - reverseAll\n            - shuffleAll\n    PlaylistEntriesSummary:\n      type: object\n      properties:\n        addedAtMinMax:\n          description: |\n            Minimum (lower bound) and maximum (upper bound) `addedAt`\n            time stamp of all playlist entries\n          type: array\n          minItems: 2\n          maxItems: 2\n          items:\n            $ref: '#/components/schemas/PlaylistEntryAddedAt'\n        totalCount:\n          description: Number of entries in the playlist\n          allOf:\n            - $ref: '#/components/schemas/PlaylistEntryCount'\n        tracks:\n          $ref: '#/components/schemas/PlaylistTracksSummary'\n      required:\n        - totalCount\n        - tracks\n    PlaylistEntry:\n      type: object\n      properties:\n        addedAt:\n          $ref: '#/components/schemas/PlaylistEntryAddedAt'\n        title:\n          $ref: '#/components/schemas/PlaylistEntryTitle'\n        notes:\n          $ref: '#/components/schemas/PlaylistEntryNotes'\n        item:\n          $ref: '#/components/schemas/PlaylistItem'\n      required:\n        - item\n    PlaylistEntryAddedAt:\n      description: |\n        Time stamp since when an entry is part of the playlist,\n        i.e. when it has been added by the client.\n      allOf:\n        - $ref: '#/components/schemas/DateTime'\n    PlaylistEntryCount:\n      description: |\n        Total number of entries in a playlist.\n      allOf:\n        - $ref: '#/components/schemas/TotalCount'\n    PlaylistEntryNotes:\n      type: string\n      description: |\n        Lengthy, personal notes.\n      example: 'Lengthy, personal notes'\n    PlaylistEntryPosition:\n      description: |\n        0-based position number to locate a playlist entry\n      type: integer\n      format: uint64\n      minimum: 0\n    PlaylistEntryPositionDelta:\n      description: |\n        The signed difference between two playlist entry positions\n      type: integer\n      format: int64\n    PlaylistEntryTitle:\n      description: Optional playlist entry title\n      type: string\n      minLength: 1\n    PlaylistFlags:\n      type: integer\n      format: i32\n      minimum: 0\n      maximum: 1\n      example: 1\n      description: |\n        A bitmask with flags, e.g. for locking to prevent unintended changes.\n\n        Bits:\n          - 0x01: Locked\n    PlaylistItem:\n      oneOf:\n        - $ref: '#/components/schemas/PlaylistItemSeparator'\n        - $ref: '#/components/schemas/PlaylistTrackItem'\n    PlaylistItemSeparator:\n      type: string\n      enum:\n        - separator\n    PlaylistKind:\n      description: |\n        Custom type of to the playlist. This allows 3rd party applications\n        to distinguish different kinds of playlists for different purposes\n        and depending on their use case, e.g. generated session or history\n        playlists for logging all tracks that have been played during this\n        session.\n      type: string\n    PlaylistNotes:\n      type: string\n      description: |\n        Lengthy, personal notes.\n      example: 'Lengthy, personal notes'\n    PlaylistRef:\n      type: object\n      properties:\n        uid:\n          $ref: '#/components/schemas/PlaylistUid'\n      required:\n        - uid\n    PlaylistTitle:\n      description: Mandatory playlist title\n      type: string\n      minLength: 1\n    PlaylistTrack:\n      description: |\n        The UID of the referenced track\n      allOf:\n        - $ref: '#/components/schemas/TrackUid'\n    PlaylistTrackCount:\n      description: |\n        Number of tracks in the playlist\n      allOf:\n        - $ref: '#/components/schemas/PlaylistEntryCount'\n    PlaylistTrackItem:\n      type: object\n      properties:\n        track:\n          $ref: '#/components/schemas/PlaylistTrack'\n      required:\n        - track\n    PlaylistTracksSummary:\n      type: object\n      properties:\n        totalCount:\n          $ref: '#/components/schemas/PlaylistTrackCount'\n      required:\n        - totalCount\n    PlaylistUid:\n      allOf:\n        - $ref: '#/components/schemas/EntityUid'\n    PlaylistWithEntriesSummary:\n      allOf:\n        - $ref: '#/components/schemas/Playlist'\n        - type: object\n          properties:\n            entries:\n              $ref: '#/components/schemas/PlaylistEntriesSummary'\n    PlaylistWithEntries:\n      allOf:\n        - $ref: '#/components/schemas/Playlist'\n        - type: object\n          properties:\n            entries:\n              $ref: '#/components/schemas/PlaylistEntries'\n    PlaylistWithEntriesEntity:\n      description: Entity header and body\n      type: array\n      minItems: 2\n      maxItems: 2\n      items:\n        oneOf:\n          - $ref: '#/components/schemas/EntityHeader'\n          - $ref: '#/components/schemas/PlaylistWithEntries'\n    PlaylistWithEntriesSummaryEntity:\n      description: Entity header and body\n      type: array\n      minItems: 2\n      maxItems: 2\n      items:\n        oneOf:\n          - $ref: '#/components/schemas/EntityHeader'\n          - $ref: '#/components/schemas/PlaylistWithEntriesSummary'\n    PositionMs:\n      type: number\n      format: double\n      example: 210387.576\n      description: |\n        The position in an audio stream in milliseconds\n    PurgeOrphanedMediaSourcesRequestBody:\n      type: object\n      properties:\n        rootUrl:\n          $ref: '#/components/schemas/PercentEncodedDirectoryUrl'\n    PurgeOrphanedMediaSourcesResponseBody:\n      type: object\n      properties:\n        rootUrl:\n          $ref: '#/components/schemas/PercentEncodedDirectoryUrl'\n        rootPath:\n          $ref: '#/components/schemas/MediaContentPath'\n        summary:\n          $ref: '#/components/schemas/PurgeOrphanedMediaSourcessSummary'\n      required:\n        - summary\n    PurgeOrphanedMediaSourcessSummary:\n      type: object\n      properties:\n        purged:\n          type: integer\n          minimum: 0\n      required:\n        - purged\n    PurgeUntrackedMediaSourcesRequestBody:\n      type: object\n      properties:\n        rootUrl:\n          $ref: '#/components/schemas/PercentEncodedDirectoryUrl'\n    PurgeUntrackedMediaSourcesResponseBody:\n      type: object\n      properties:\n        rootUrl:\n          $ref: '#/components/schemas/PercentEncodedDirectoryUrl'\n        rootPath:\n          $ref: '#/components/schemas/MediaContentPath'\n        summary:\n          $ref: '#/components/schemas/PurgeUntrackeMediaSourcessSummary'\n      required:\n        - rootUrl\n        - rootPath\n        - summary\n    PurgeUntrackeMediaSourcessSummary:\n      type: object\n      properties:\n        purged:\n          type: integer\n          minimum: 0\n      required:\n        - purged\n    RecordedAt:\n      description: |\n        The recording date\n\n        This field resembles what is commonly known as `year`in\n        many applications, i.e. a generic year, date or time stamp\n        for chronological ordering. If in doubt or nothing else is\n        available then use this field.\n\n        Proposed tag mapping:\n          - ID3v2.4: \"TDRC\"\n          - MP4:     \"©day\"\n          - Vorbis:  \"DATE\" (\"YEAR\")\n      oneOf:\n        - $ref: '#/components/schemas/RecordedAtDate'\n        - $ref: '#/components/schemas/RecordedAtDateTime'\n    RecordedAtDate:\n      oneOf:\n        - $ref: '#/components/schemas/YYYY'\n        - $ref: '#/components/schemas/YYYYMMDD'\n    RecordedAtDateTime:\n      allOf:\n        - $ref: '#/components/schemas/DateTime'\n    ReleasedAt:\n      description: |\n        The release date\n\n        Stores the distinguished release date if available.\n\n        Proposed tag mapping:\n          - ID3v2.4: \"TDRL\"\n          - MP4:     n/a\n          - Vorbis:  \"RELEASEDATE\" (\"RELEASEYEAR\")\n      oneOf:\n        - $ref: '#/components/schemas/ReleasedAtDate'\n        - $ref: '#/components/schemas/ReleasedAtDateTime'\n    ReleasedAtDate:\n      oneOf:\n        - $ref: '#/components/schemas/YYYY'\n        - $ref: '#/components/schemas/YYYYMMDD'\n    ReleasedAtDateTime:\n      allOf:\n        - $ref: '#/components/schemas/DateTime'\n    ReleasedOrigAt:\n      description: |\n        The original release date\n\n        Stores the original or first release date if available.\n\n        The original release date is supposed to be not later than\n        the release date.\n\n        Proposed tag mapping:\n          - ID3v2.4: \"TDOR\"\n          - MP4:      n/a\n          - Vorbis:  \"ORIGINALDATE\" (\"ORIGINALYEAR\")\n      oneOf:\n        - $ref: '#/components/schemas/ReleasedOrigAtDate'\n        - $ref: '#/components/schemas/ReleasedOrigAtDateTime'\n    ReleasedOrigAtDate:\n      oneOf:\n        - $ref: '#/components/schemas/YYYY'\n        - $ref: '#/components/schemas/YYYYMMDD'\n    ReleasedOrigAtDateTime:\n      allOf:\n        - $ref: '#/components/schemas/DateTime'\n    MediaTrackerUntrackDirectoriesRequestBody:\n      type: object\n      properties:\n        rootUrl:\n          $ref: '#/components/schemas/PercentEncodedDirectoryUrl'\n        status:\n          $ref: '#/components/schemas/MediaTrackerDirectoriesTrackingStatus'\n    MediaTrackerDirectoriesTrackingStatus:\n      type: string\n      enum:\n        - current\n        - outdated\n        - added\n        - modified\n        - orphaned\n    MediaTrackerUntrackDirectoriesResponseBody:\n      type: object\n      properties:\n        rootUrl:\n          $ref: '#/components/schemas/PercentEncodedDirectoryUrl'\n        rootPath:\n          $ref: '#/components/schemas/MediaContentPath'\n        summary:\n          $ref: '#/components/schemas/MediaTrackerUntrackDirectoriesSummary'\n      required:\n        - rootUrl\n        - rootPath\n        - summary\n    MediaTrackerUntrackDirectoriesSummary:\n      type: object\n      properties:\n        untracked:\n          type: integer\n          minimum: 0\n      required:\n        - untracked\n    MediaTrackerQueryStatusRequestBody:\n      type: object\n      properties:\n        rootUrl:\n          $ref: '#/components/schemas/PercentEncodedDirectoryUrl'\n    MediaTrackerQueryStatusResponseBody:\n      allOf:\n        - $ref: '#/components/schemas/MediaTrackerStatus'\n    MediaTrackerCompletion:\n      type: string\n      enum:\n        - finished\n        - aborted\n    MediaTrackerStatus:\n      type: object\n      properties:\n        directories:\n          type: object\n          properties:\n            current:\n              type: integer\n              minimum: 0\n            outdated:\n              type: integer\n              minimum: 0\n            added:\n              type: integer\n              minimum: 0\n            modified:\n              type: integer\n              minimum: 0\n            orphaned:\n              type: integer\n              minimum: 0\n          required:\n            - current\n            - outdated\n            - added\n            - modified\n            - orphaned\n      required:\n        - directories\n    MediaTrackerImportRequestBody:\n      type: object\n      properties:\n        rootUrl:\n          $ref: '#/components/schemas/PercentEncodedDirectoryUrl'\n        syncMode:\n          $ref: '#/components/schemas/MediaSyncMode'\n    MediaSyncMode:\n      description: |\n        - once: Only import metadata once, never re-import.\n        - modified (recommended): Only (re-)import metadata from media source\n          if modified and if the current track revision matches the synchronized\n          revision.\n        - modified-resync: Only (re-)import metadata from media source if\n          modified but regardless of the synchronized revision, i.e. allow to\n          overwrite changed metadata with metadata imported from the media source\n          for resynchronization.\n        - always: Always (re-)import metadata from media source, regardless\n          of modification time and synchronization status.\n      type: string\n      enum:\n        - once\n        - modified\n        - modified-resync\n        - always\n      default: modified\n    MediaTrackerImportResponseBody:\n      type: object\n      properties:\n        rootUrl:\n          $ref: '#/components/schemas/PercentEncodedDirectoryUrl'\n        rootPath:\n          $ref: '#/components/schemas/MediaContentPath'\n        completion:\n          $ref: '#/components/schemas/MediaTrackerCompletion'\n        summary:\n          $ref: '#/components/schemas/MediaTrackerImportSummary'\n        importedSourcesWithIssues:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImportedMediaSourceWithIssues'\n      required:\n        - rootUrl\n        - rootPath\n        - completion\n        - summary\n    ImportedMediaSourceWithIssues:\n      type: object\n      properties:\n        path:\n          $ref: '#/components/schemas/MediaContentPath'\n        messages:\n          type: array\n          items:\n            type: string\n      required:\n        - path\n        - messages\n    MediaTrackerImportSummary:\n      type: object\n      properties:\n        directories:\n          type: object\n          properties:\n            confirmed:\n              type: number\n              format: int\n              minimum: 0\n            skipped:\n              type: number\n              format: int\n              minimum: 0\n            untracked:\n              type: number\n              format: int\n              minimum: 0\n          required:\n            - confirmed\n            - skipped\n            - untracked\n        tracks:\n          type: object\n          properties:\n            created:\n              type: number\n              format: int\n              minimum: 0\n            updated:\n              type: number\n              format: int\n              minimum: 0\n            missing:\n              type: number\n              format: int\n              minimum: 0\n            unchanged:\n              type: number\n              format: int\n              minimum: 0\n            skipped:\n              type: number\n              format: int\n              minimum: 0\n            failed:\n              type: number\n              format: int\n              minimum: 0\n            notImported:\n              type: number\n              format: int\n              minimum: 0\n            notCreated:\n              type: number\n              format: int\n              minimum: 0\n            notUpdated:\n              type: number\n              format: int\n              minimum: 0\n          required:\n            - created\n            - updated\n            - missing\n            - unchanged\n            - skipped\n            - failed\n            - notImported\n            - notCreated\n            - notUpdated\n    MediaTrackerImportingProgress:\n      allOf:\n        - $ref: '#/components/schemas/MediaTrackerImportSummary'\n    MediaTrackerFsTraversalProgress:\n      type: object\n      properties:\n        entries:\n          type: object\n          properties:\n            skipped:\n              type: number\n              format: int\n              minimum: 0\n            finished:\n              type: number\n              format: int\n              minimum: 0\n        directories:\n          type: object\n          properties:\n            finished:\n              type: number\n              format: int\n              minimum: 0\n    MediaTrackerDirTraversalRequestBody:\n      type: object\n      properties:\n        rootUrl:\n          $ref: '#/components/schemas/PercentEncodedDirectoryUrl'\n        maxDepth:\n          type: number\n          format: int\n          minimum: 1\n    MediaTrackerScanRequestBody:\n      allOf:\n        - $ref: '#/components/schemas/MediaTrackerDirTraversalRequestBody'\n    MediaTrackerFindUntrackedRequestBody:\n      allOf:\n        - $ref: '#/components/schemas/MediaTrackerDirTraversalRequestBody'\n    MediaTrackerScanSummary:\n      type: object\n      properties:\n        current:\n          type: number\n          format: int\n          minimum: 0\n        added:\n          type: number\n          format: int\n          minimum: 0\n        modified:\n          type: number\n          format: int\n          minimum: 0\n        orphaned:\n          type: number\n          format: int\n          minimum: 0\n        skipped:\n          type: number\n          format: int\n          minimum: 0\n      required:\n        - current\n        - added\n        - modified\n        - orphaned\n        - skipped\n    MediaSourceVirtualFilePath:\n      type: string\n      minLength: 1\n      example: 'album artist/album title/01 the first track.mp3'\n    MediaContentPathKind:\n      type: integer\n      enum: [0, 1, 2, 3]\n      description: |\n        Defines how to resolve the location of media sources from the path:\n\n          * 0 = Percent-encoded URI (case-sensitive)\n          * 1 = Percent-encoded URL (case-sensitive)\n          * 2 = Percent-encoded URL with the scheme \"file\" (case-sensitive)\n          * 3 = Virtual, relative file path with '/' as path separator\n\n        For collections of local files option 3 is the recommended choice.\n        The accompanying `file://` URL is stored as part of the media source\n        configuration in the collection.\n    MediaContentPath:\n      oneOf:\n        - $ref: '#/components/schemas/PercentEncodedUri'\n        - $ref: '#/components/schemas/PercentEncodedUrl'\n        - $ref: '#/components/schemas/MediaSourceVirtualFilePath'\n    MediaTrackerScanResponseBody:\n      type: object\n      properties:\n        rootUrl:\n          $ref: '#/components/schemas/PercentEncodedDirectoryUrl'\n        rootPath:\n          $ref: '#/components/schemas/MediaContentPath'\n        completion:\n          $ref: '#/components/schemas/MediaTrackerCompletion'\n        summary:\n          $ref: '#/components/schemas/MediaTrackerScanSummary'\n      required:\n        - rootUrl\n        - rootPath\n        - completion\n        - summary\n    MediaTrackerFindUntrackedResponseBody:\n      type: object\n      properties:\n        rootUrl:\n          $ref: '#/components/schemas/PercentEncodedDirectoryUrl'\n        rootPath:\n          $ref: '#/components/schemas/MediaContentPath'\n        completion:\n          $ref: '#/components/schemas/MediaTrackerCompletion'\n        contentPaths:\n          type: array\n          items:\n            $ref: '#/components/schemas/MediaContentPath'\n      required:\n        - rootUrl\n        - rootPath\n        - completion\n        - contentPaths\n    PercentEncodedUri:\n      type: string\n      minLength: 1\n      example: file:///home/user/Music/album%20artist/album%20title/01%20the%20first%20track.mp3\n      description: |\n        A percent-encoded URI (RFC 3986).\n    PercentEncodedDirectoryUrl:\n      description: |\n        A percent-encoded URL with scheme `file` that represents a directory path\n        on the local file system.\n      allOf:\n        - $ref: '#/components/schemas/PercentEncodedUrl'\n      example: file:///home/user/Music/\n    PercentEncodedUrl:\n      allOf:\n        - $ref: '#/components/schemas/PercentEncodedUri'\n    RelocateCollectedMediaSourcesRequestBody:\n      type: object\n      properties:\n        oldPathPrefix:\n          $ref: '#/components/schemas/MediaSourceVirtualFilePath'\n        newPathPrefix:\n          $ref: '#/components/schemas/MediaSourceVirtualFilePath'\n      required:\n        - oldPathPrefix\n        - newPathPrefix\n    RelocateCollectedMediaSourcesResponseBody:\n      type: object\n      properties:\n        replacedCount:\n          type: number\n          format: uint64\n      required:\n        - replacedCount\n    ReplaceCollectedTrackMode:\n      type: string\n      enum:\n        - create-only\n        - update-only\n        - update-or-create\n      example: update-or-create\n      default: update-or-create\n    ReplaceCollectedTracksRequestBody:\n      type: array\n      items:\n        $ref: '#/components/schemas/Track'\n    ImportAndReplaceCollectedTracksRequestBody:\n      type: array\n      items:\n        $ref: '#/components/schemas/PercentEncodedUri'\n    ReplaceCollectedTracksResponseBody:\n      type: object\n      properties:\n        created:\n          type: array\n          items:\n            $ref: '#/components/schemas/TrackEntity'\n        updated:\n          type: array\n          items:\n            $ref: '#/components/schemas/TrackEntity'\n        unchanged:\n          type: array\n          items:\n            $ref: '#/components/schemas/PercentEncodedUri'\n        notCreated:\n          type: array\n          items:\n            $ref: '#/components/schemas/Track'\n        notUpdated:\n          type: array\n          items:\n            $ref: '#/components/schemas/Track'\n    ImportAndReplaceCollectedTracksResponseBody:\n      type: object\n      properties:\n        completion:\n          $ref: '#/components/schemas/MediaTrackerCompletion'\n        summary:\n          allOf:\n            - $ref: '#/components/schemas/ReplaceCollectedTracksResponseBody'\n            - type: object\n              properties:\n                skipped:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/PercentEncodedUri'\n                failed:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/MediaContentPath'\n        importedMediaSourcesWithIssues:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImportedMediaSourceWithIssues'\n      required:\n        - completion\n        - summary\n    ExportTrackMetadataResponseBody:\n      description: A boolean value indicating if the file has been modified.\n      allOf:\n        - type: boolean\n    FindUnsynchronizedTracksRequestBody:\n      type: object\n      properties:\n        mediaContentPathPredicate:\n          $ref: '#/components/schemas/StringPredicate'\n    FindUnsynchronizedTracksResponseBody:\n      type: array\n      items:\n        $ref: '#/components/schemas/UnsynchronizedTrackEntity'\n    UnsynchronizedTrackEntity:\n      description: |\n        Entity header followed by entity body\n      type: array\n      minItems: 2\n      maxItems: 2\n      items:\n        oneOf:\n          - $ref: '#/components/schemas/EntityHeader'\n          - $ref: '#/components/schemas/UnsynchronizedTrack'\n    UnsynchronizedTrack:\n      type: object\n      properties:\n        contentLink:\n          $ref: '#/components/schemas/MediaContentLink'\n        lastSynchronizedRev:\n          $ref: '#/components/schemas/EntityRevision'\n      required:\n        - contentLink\n        - lastSynchronizedRev\n    MediaContentLink:\n      type: object\n      properties:\n        path:\n          $ref: '#/components/schemas/MediaContentPath'\n        rev:\n          $ref: '#/components/schemas/MediaContentRevision'\n      required:\n        - path\n    RgbColor:\n      type: string\n      minLength: 7\n      maxLength: 7\n      example: '#808080'\n      description: |\n        A hexadecimal RGB color code `#RRGGBB` with 8 bits per channel.\n    RgbColorVariant:\n      type: object\n      properties:\n        rgb:\n          $ref: '#/components/schemas/RgbColor'\n    SampleRateHz:\n      type: integer\n      format: int32\n      minimum: 0\n      example: 44100\n      description: |\n        The sample rate in Hertz (Hz).\n    SearchCollectedTracksRequestBody:\n      type: object\n      properties:\n        filter:\n          $ref: '#/components/schemas/TrackSearchFilterNode'\n        ordering:\n          type: array\n          items:\n            $ref: '#/components/schemas/TrackSortOrder'\n    SearchCollectedTracksResponseBody:\n      type: array\n      items:\n        $ref: '#/components/schemas/TrackEntity'\n    SortDirection:\n      type: string\n      enum:\n        - asc\n        - dsc\n      description: |\n        Direction for sorting results.\n          * `asc` - ascending\n          * `desc` - descending\n    StoragePendingTasksSummary:\n      type: object\n      properties:\n        read:\n          type: integer\n          format: uint64\n          example: 3\n        write:\n          type: integer\n          format: uint64\n          example: 1\n      required:\n        - read\n        - write\n    StringField:\n      type: string\n      enum:\n        - albumArtist\n        - albumTitle\n        - contentPath\n        - contentType\n        - publisher\n        - trackArtist\n        - trackComposer\n        - trackTitle\n      description: |\n        Selectable fields, including\n          * `contentType` - RFC 6838 media type\n          * `contentPath`\n          * ...\n    StringPredicate:\n      oneOf:\n        - $ref: '#/components/schemas/StringPredicateStartsWith'\n        - $ref: '#/components/schemas/StringPredicateStartsNotWith'\n        - $ref: '#/components/schemas/StringPredicateEndsWith'\n        - $ref: '#/components/schemas/StringPredicateEndsNotWith'\n        - $ref: '#/components/schemas/StringPredicateContains'\n        - $ref: '#/components/schemas/StringPredicateContainsNot'\n        - $ref: '#/components/schemas/StringPredicateMatches'\n        - $ref: '#/components/schemas/StringPredicateMatchesNot'\n        - $ref: '#/components/schemas/StringPredicatePrefix'\n        - $ref: '#/components/schemas/StringPredicateEquals'\n        - $ref: '#/components/schemas/StringPredicateEqualsNot'\n    StringPredicateStartsWith:\n      type: object\n      properties:\n        startsWith:\n          type: string\n      description: Matches the head of a string (case-insensitive)\n    StringPredicateStartsNotWith:\n      type: object\n      properties:\n        startsNotWith:\n          type: string\n      description: Mismatches the head of a string (case-insensitive)\n    StringPredicateEndsWith:\n      type: object\n      properties:\n        endsWith:\n          type: string\n      description: Matches the tail of a string (case-insensitive)\n    StringPredicateEndsNotWith:\n      type: object\n      properties:\n        endsNotWith:\n          type: string\n      description: Mismatches the tail of a string (case-insensitive)\n    StringPredicateContains:\n      type: object\n      properties:\n        contains:\n          type: string\n      description: Matches the middle of the string with arbitrary head/tail (case-insensitive)\n    StringPredicateContainsNot:\n      type: object\n      properties:\n        containsNot:\n          type: string\n      description: Mismatches the middle of the string with arbitrary head/tail (case-insensitive)\n    StringPredicateMatches:\n      type: object\n      properties:\n        matches:\n          type: string\n      description: Matches the whole string (case-insensitive)\n    StringPredicateMatchesNot:\n      type: object\n      properties:\n        matchesNot:\n          type: string\n      description: Mismatches the whole string (case-insensitive)\n    StringPredicatePrefix:\n      type: object\n      properties:\n        prefix:\n          type: string\n      description: Prefix match (case-sensitive)\n    StringPredicateEquals:\n      type: object\n      properties:\n        equals:\n          type: string\n      description: Exact match (case-sensitive)\n    StringPredicateEqualsNot:\n      type: object\n      properties:\n        equalsNot:\n          type: string\n      description: Exact mismatch (case-sensitive)\n    TagFacetId:\n      type: string\n      minLength: 1\n      example: genre\n      description: |\n        Non-empty, lowercase ASCII string that identifies a tag facet.\n\n        Tag facets must not contain any whitespace characters and\n        are restricted to the following alphabet:\n\n        `+-./0123456789@[]_abcdefghijklmnopqrstuvwxyz`\n    TagFilter:\n      type: object\n      properties:\n        modifier:\n          $ref: '#/components/schemas/FilterModifier'\n        facets:\n          type: array\n          items:\n            $ref: '#/components/schemas/TagFacetId'\n          description: |\n            A non-empty array will match any of the given facets.\n            An empty array will only match unfaceted tags, i.e. tags\n            without a facet. A missing/null array will match any tags,\n            both with or without a facet.\n        label:\n          $ref: '#/components/schemas/StringPredicate'\n        score:\n          $ref: '#/components/schemas/NumericPredicate'\n    TagLabel:\n      type: string\n      minLength: 1\n      example: Hip Hop/Rap\n      description: |\n        Non-empty string that defines the textual content of the tag.\n        Tag labels must not contain any leading or trailing whitespace.\n    Tags:\n      description: |\n        A dictionary of tags indexed by facet.\n\n        The empty key \"\" stands for no facet and contains all plain tags,\n        i.e. tags without a facet.\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/PlainTags'\n    TagScore:\n      type: number\n      format: double\n      minimum: 0\n      maximum: 1\n      example: 0.83\n      description: |\n        Normalized numeric value between 0 and 1 that assigns a score to the tag.\n        If not specified the default score is 1.0, i.e. full score.\n    TempoBpm:\n      type: number\n      format: double\n      minimum: 0\n      example: 110.67\n      description: |\n        The tempo measured in `beats per minute` (bpm).\n    TimeSignature:\n      oneOf:\n        - $ref: '#/components/schemas/TimeSignatureTop'\n        - $ref: '#/components/schemas/TimeSignatureTopBottom'\n      description: |\n        The time signature of a track.\n\n        Either an incomplete signature with only the beats per measure\n        or a complete signature with both beats per measure and beat\n        unit / note value.\n    TimeSignatureTop:\n      allOf:\n        - $ref: '#/components/schemas/BeatsPerMeasure'\n      example: 4\n      description: |\n        Simplified time signature with only the beats per measure and\n        unknown beat unit.\n    TimeSignatureTopBottom:\n      type: array\n      minItems: 2\n      maxItems: 2\n      items:\n        oneOf:\n          - $ref: '#/components/schemas/BeatsPerMeasure'\n          - $ref: '#/components/schemas/BeatUnit'\n      description: |\n        An array with exactly 2 elements: The number of beats per measure\n        followed by the beat unit.\n      example: [3, 4]\n    DateTime:\n      type: string\n      format: date-time\n      description: |\n        A time stamp.\n\n        Values are truncated to millisecond precision.\n      example: '2019-10-12T07:20:50.52Z'\n    Title:\n      oneOf:\n        - $ref: '#/components/schemas/TitleName'\n        - type: array\n          items:\n            oneOf:\n              - $ref: '#/components/schemas/TitleName'\n              - $ref: '#/components/schemas/TitleKind'\n      description: |\n        Mandatory name, followed by optional level\n    TitleKind:\n      type: integer\n      enum: [0, 1, 2, 3, 4]\n      description: |\n        Optional level that defaults to 0 = main if missing:\n          * 0 = main title (default)\n          * 1 = subtitle\n          * 2 = sorting\n          * 3 = work title for classical music\n          * 4 = movement title for classical music\n    TitleName:\n      type: string\n      minLength: 1\n      example: Yellow Submarine\n    TotalCount:\n      type: integer\n      format: uint64\n      minimum: 0\n      example: 1746\n      description: |\n        Total number of items or occurrences.\n    TotalMediaSourceCount:\n      description: |\n        Total number of media sources.\n      allOf:\n        - $ref: '#/components/schemas/TotalCount'\n    TotalPlaylistCount:\n      description: |\n        Total number of playlists.\n      allOf:\n        - $ref: '#/components/schemas/TotalCount'\n    TotalTrackCount:\n      description: |\n        Total number of tracks.\n      allOf:\n        - $ref: '#/components/schemas/TotalCount'\n    TrackEntity:\n      description: |\n        Entity header followed by entity body\n      type: array\n      minItems: 2\n      maxItems: 2\n      items:\n        oneOf:\n          - $ref: '#/components/schemas/EntityHeader'\n          - $ref: '#/components/schemas/TrackEntityBody'\n    Track:\n      type: object\n      properties:\n        mediaSource:\n          $ref: '#/components/schemas/MediaSource'\n        recordedAt:\n          $ref: '#/components/schemas/RecordedAt'\n        releasedAt:\n          $ref: '#/components/schemas/ReleasedAt'\n        releasedOrigAt:\n          $ref: '#/components/schemas/ReleasedOrigAt'\n        publisher:\n          type: string\n          description: |\n            The publisher or record label\n        copyright:\n          description: Copyright\n          type: string\n        album:\n          $ref: '#/components/schemas/Album'\n        titles:\n          description: |\n            An array of titles\n          type: array\n          items:\n            $ref: '#/components/schemas/Title'\n        actors:\n          description: |\n            An array of actors\n          type: array\n          items:\n            $ref: '#/components/schemas/Actor'\n        indexes:\n          $ref: '#/components/schemas/Indexes'\n        metrics:\n          $ref: '#/components/schemas/Metrics'\n        cues:\n          description: |\n            An array of cues\n          type: array\n          items:\n            $ref: '#/components/schemas/TrackCue'\n        color:\n          $ref: '#/components/schemas/Color'\n        tags:\n          $ref: '#/components/schemas/Tags'\n    TrackCue:\n      type: object\n      properties:\n        bankIndex:\n          $ref: '#/components/schemas/CueBankIndex'\n        slotIndex:\n          $ref: '#/components/schemas/CueSlotIndex'\n        inMarker:\n          $ref: '#/components/schemas/CueInMarker'\n        outMarker:\n          $ref: '#/components/schemas/CueOutMarker'\n        kind:\n          $ref: '#/components/schemas/CueKind'\n        label:\n          $ref: '#/components/schemas/CueLabel'\n        color:\n          $ref: '#/components/schemas/Color'\n        flags:\n          $ref: '#/components/schemas/CueFlags'\n    TrackEntityBody:\n      type: object\n      properties:\n        track:\n          $ref: '#/components/schemas/Track'\n        updatedAt:\n          $ref: '#/components/schemas/DateTime'\n        lastSynchronizedRev:\n          $ref: '#/components/schemas/LastSynchronizedEntityRevision'\n      required:\n        - track\n        - updatedAt\n    TrackIndex:\n      allOf:\n        - $ref: '#/components/schemas/Index'\n    TrackSearchAllFilterNode:\n      type: object\n      properties:\n        all:\n          type: array\n          items:\n            $ref: '#/components/schemas/TrackSearchFilterNode'\n      required:\n        - all\n    TrackSearchAnyFilterNode:\n      type: object\n      properties:\n        any:\n          type: array\n          items:\n            $ref: '#/components/schemas/TrackSearchFilterNode'\n      required:\n        - any\n    TrackSearchFilterNode:\n      oneOf:\n        - $ref: '#/components/schemas/TrackSearchPhraseFieldFilterNode'\n        - $ref: '#/components/schemas/TrackSearchNumericFieldFilterNode'\n        - $ref: '#/components/schemas/TrackSearchDateTimeFieldFilterNode'\n        - $ref: '#/components/schemas/TrackSearchConditionFilterNode'\n        - $ref: '#/components/schemas/TrackSearchTagFilterNode'\n        - $ref: '#/components/schemas/TrackSearchCueLabelFilterNode'\n        - $ref: '#/components/schemas/TrackSearchPlaylistUidFilterNode'\n        - $ref: '#/components/schemas/TrackSearchAllFilterNode'\n        - $ref: '#/components/schemas/TrackSearchAnyFilterNode'\n        - $ref: '#/components/schemas/TrackSearchNotFilterNode'\n    TrackSearchCueLabelFilterNode:\n      type: object\n      properties:\n        cueLabel:\n          $ref: '#/components/schemas/CueLabelFilter'\n      required:\n        - cueLabel\n    TrackSearchPlaylistUidFilterNode:\n      type: object\n      properties:\n        playlistUid:\n          $ref: '#/components/schemas/EntityUid'\n      required:\n        - playlistUid\n    TrackSearchNotFilterNode:\n      type: object\n      properties:\n        not:\n          $ref: '#/components/schemas/TrackSearchFilterNode'\n      required:\n        - not\n    TrackSearchNumericFieldFilterNode:\n      type: object\n      properties:\n        numeric:\n          $ref: '#/components/schemas/NumericFieldFilter'\n      required:\n        - numeric\n    TrackSearchDateTimeFieldFilterNode:\n      type: object\n      properties:\n        dateTime:\n          $ref: '#/components/schemas/DateTimeFieldFilter'\n      required:\n        - dateTime\n    TrackSearchConditionFilterNode:\n      type: string\n      enum:\n        - sourceTracked\n        - sourceUntracked\n    TrackSearchPhraseFieldFilterNode:\n      type: object\n      properties:\n        phrase:\n          $ref: '#/components/schemas/PhraseFieldFilter'\n      required:\n        - phrase\n    TrackSearchTagFilterNode:\n      type: object\n      properties:\n        tag:\n          $ref: '#/components/schemas/TagFilter'\n      required:\n        - tag\n    TrackSortField:\n      type: string\n      enum:\n        - albumArtist\n        - albumTitle\n        - audioBitrateBps\n        - audioChannelCount\n        - audioDurationMs\n        - audioLoudnessLufs\n        - audioSampleRateHz\n        - collectedAt\n        - contentPath\n        - contentType\n        - createdAt\n        - discNumber\n        - discTotal\n        - musicTempoBpm\n        - musicKeyCode\n        - recordedAtDate\n        - releasedAtDate\n        - releasedOrigAtDate\n        - trackArtist\n        - trackNumber\n        - trackTitle\n        - trackTotal\n        - updatedAt\n    TrackSortOrder:\n      type: array\n      minItems: 2\n      maxItems: 2\n      items:\n        oneOf:\n          - $ref: '#/components/schemas/TrackSortField'\n          - $ref: '#/components/schemas/SortDirection'\n    TrackUid:\n      allOf:\n        - $ref: '#/components/schemas/EntityUid'\n    YYYY:\n      type: integer\n      format: int32\n      minimum: 1\n      maximum: 9999\n      example: 2019\n      description: |\n        A 4-digit integer representing a year\n    YYYYMMDD:\n      type: integer\n      format: int32\n      minimum: 10000\n      maximum: 99999999\n      example: 20191124\n      description: |\n        An 8-digit integer representing a naive date without any time zone information:\n        YYYYMMDD = YYYY (year, 4-digits) + MM (month, 2-digits) + DD (day of month, 2 digits):\n",
			"canonicalURL": "/gitlab.com/uklotzde/aoide-rs@372085e87e5990bcea2e26e29299a54dd491bac4/-/blob/websrv/res/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://gitlab.com/uklotzde/aoide-rs/blob/372085e87e5990bcea2e26e29299a54dd491bac4/websrv/res/openapi.yaml",
					"serviceKind": "GITLAB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"CueOutMarker\": parse schema: property \"mode\": parse schema: at 1:15476: parse enum values: parse value \"0\": unexpected type: \"\""
}