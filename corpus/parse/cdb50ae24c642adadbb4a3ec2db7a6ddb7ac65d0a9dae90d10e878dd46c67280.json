{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dsaltares/teamfindr"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "api/api.yaml",
			"byteSize": 22905,
			"content": "openapi: 3.0.0\ninfo:\n  description: API for the TeamPickr app\n  version: '1.0.0'\n  title: TeamPickr\n  contact:\n    email: david.saltares@gmail.com\n  license:\n    name: MIT\n    url: 'https://github.com/dsaltares/teamfindr/blob/main/LICENSE'\npaths:\n  /auth/verify:\n    get:\n      summary: verifies that the session for the user is valid\n      operationId: verifyUser\n      responses:\n        '200':\n          description: authenticated user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VerifySuccessResponse'\n        '401':\n          description: the session for the user is not valid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /auth/logout:\n    get:\n      summary: logs the user out\n      operationId: logOut\n      responses:\n        '301':\n          description: redirect to the application\n\n  /auth/push:\n    post:\n      summary: registers for push notifications\n      operationId: postPush\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostPushRequest'\n      responses:\n        '201':\n          description: registered device for push notifications\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PostPushResponse'\n        '401':\n          description: unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /users/{userId}:\n    patch:\n      summary: patches a user\n      operationId: patchUser\n      parameters:\n        - in: path\n          name: userId\n          schema:\n            type: string\n          required: true\n          description: id of the user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchUserRequest'\n      responses:\n        '200':\n          description: authenticated user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PatchUserResponse'\n        '404':\n          description: user not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: not authorized to update the user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: the session for the user is not valid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /venues:\n    post:\n      summary: creates a venue\n      operationId: postVenue\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostVenueRequest'\n      responses:\n        '201':\n          description: new venue\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PostVenueResponse'\n        '401':\n          description: unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n        '403':\n          description: unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    get:\n      summary: gets a list of venues\n      operationId: getVenues\n      parameters:\n        - in: query\n          name: lat\n          schema:\n            type: number\n          required: false\n          description: latitude\n        - in: query\n          name: lon\n          schema:\n            type: number\n          required: false\n          description: longitude\n        - in: query\n          name: radius\n          schema:\n            type: number\n          required: false\n          description: radius in m\n      responses:\n        '200':\n          description: list of venues\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetVenuesResponse'\n        '401':\n          description: unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /venues/{venueId}:\n    get:\n      summary: gets a venue by its id\n      operationId: getVenue\n      parameters:\n        - in: path\n          name: venueId\n          schema:\n            type: string\n          required: true\n          description: id of the venue\n      responses:\n        '200':\n          description: venue\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetVenueResponse'\n        '404':\n          description: venue not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: the session for the user is not valid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /events:\n    post:\n      summary: creates an event\n      operationId: postEvent\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostEventRequest'\n      responses:\n        '201':\n          description: new event\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PostEventResponse'\n        '401':\n          description: unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '404':\n          description: venue not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    get:\n      summary: gets a list of events\n      operationId: getEvents\n      parameters:\n        - in: query\n          name: lat\n          schema:\n            type: number\n          required: false\n          description: latitude\n        - in: query\n          name: lon\n          schema:\n            type: number\n          required: false\n          description: longitude\n        - in: query\n          name: radius\n          schema:\n            type: number\n          required: false\n          description: radius in m\n        - in: query\n          name: sports\n          schema:\n            type: string\n          required: false\n          description: sport to filter by\n        - in: query\n          name: date\n          schema:\n            type: string\n            format: date-time\n          required: false\n          description: date of the event\n        - in: query\n          name: excludeFull\n          schema:\n            type: boolean\n          required: false\n          description: whether to exclude full events\n        - in: query\n          name: venue\n          schema:\n            type: string\n          required: false\n          description: venue id\n        - in: query\n          name: after\n          schema:\n            type: string\n            format: date-time\n          required: false\n          description: filter and only return events after this date\n        - in: query\n          name: before\n          schema:\n            type: string\n            format: date-time\n          required: false\n          description: filter and only return events before this date\n        - in: query\n          name: isParticipant\n          schema:\n            type: boolean\n          required: false\n          description: whether to only include events where the user is the participant\n      responses:\n        '200':\n          description: list of events\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetEventsResponse'\n        '401':\n          description: unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /events/{eventId}:\n    get:\n      summary: gets an event by its id\n      operationId: getEvent\n      parameters:\n        - in: path\n          name: eventId\n          schema:\n            type: string\n          required: true\n          description: id of the event\n      responses:\n        '200':\n          description: event\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetEventResponse'\n        '404':\n          description: event not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: the session for the user is not valid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    patch:\n      summary: updates an event\n      operationId: postEvent\n      parameters:\n        - in: path\n          name: eventId\n          schema:\n            type: string\n          required: true\n          description: id of the event\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchEventRequest'\n      responses:\n        '200':\n          description: updated event\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PatchEventResponse'\n        '401':\n          description: unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '404':\n          description: venue not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /participants/{eventId}:\n    get:\n      summary: get a lot of participants for an event\n      operationId: getParticipants\n      parameters:\n        - in: path\n          name: eventId\n          schema:\n            type: string\n          required: true\n          description: id of the event\n      responses:\n        '200':\n          description: event\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetParticipantsResponse'\n        '404':\n          description: event not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: the session for the user is not valid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n    post:\n      summary: add requester as a participant to an event\n      operationId: postParticipant\n      parameters:\n        - in: path\n          name: eventId\n          schema:\n            type: string\n          required: true\n          description: id of the event\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostParticipantRequest'\n      responses:\n        '201':\n          description: participant added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ModifyParticipantsResponse'\n        '200':\n          description: participant was already added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ModifyParticipantsResponse'\n        '404':\n          description: event not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: the session for the user is not valid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '409':\n          description: cannot join event\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    delete:\n      summary: remove requesters from event participants\n      operationId: deleteParticipant\n      parameters:\n        - in: path\n          name: eventId\n          schema:\n            type: string\n          required: true\n          description: id of the event\n      responses:\n        '200':\n          description: participant deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ModifyParticipantsResponse'\n        '404':\n          description: event not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: the session for the user is not valid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '409':\n          description: cannot leave event\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /location:\n    get:\n      summary: approximates the location of the user via IP\n      operationId: getLocation\n      responses:\n        '200':\n          description: user location\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LocationResponse'\n        '404':\n          description: location from ip not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\ncomponents:\n  schemas:\n    VerifySuccessResponse:\n      type: object\n      required:\n        - user\n        - pushPublicKey\n      properties:\n        user:\n          $ref: '#/components/schemas/User'\n        pushPublicKey:\n          type: string\n    ErrorResponse:\n      type: object\n      required:\n        - message\n      properties:\n        message:\n          type: string\n    PostPushRequest:\n      type: object\n      required:\n        - subscription\n      properties:\n        subscription:\n          $ref: '#/components/schemas/PushSubscription'\n    PostPushResponse:\n      type: object\n    PatchUserRequest:\n      type: object\n      required:\n        - user\n      properties:\n        user:\n          type: object\n          properties:\n            firstName:\n              type: string\n            lastName:\n              type: string\n            avatar:\n              type: string\n    PatchUserResponse:\n      type: object\n      required:\n        - user\n      properties:\n        user:\n          $ref: '#/components/schemas/User'\n    PostVenueRequest:\n      type: object\n      required:\n        - venue\n      properties:\n        venue:\n          type: object\n          required:\n            - name\n            - location\n            - images\n          properties:\n            name:\n              type: string\n            location:\n              $ref: '#/components/schemas/Location'\n            images:\n              $ref: '#/components/schemas/Images'\n    PostVenueResponse:\n      type: object\n      required:\n        - venue\n      properties:\n        venue:\n          $ref: '#/components/schemas/Venue'\n    GetVenuesResponse:\n      type: object\n      required:\n        - venues\n      properties:\n        venues:\n          $ref: '#/components/schemas/Venues'\n    GetVenueResponse:\n      type: object\n      required:\n        - venue\n      properties:\n        venue:\n          $ref: '#/components/schemas/Venue'\n    PostEventRequest:\n      type: object\n      required:\n        - event\n      properties:\n        event:\n          type: object\n          required:\n            - venue\n            - sport\n            - startsAt\n            - duration\n            - capacity\n            - description\n            - price\n            - teams\n          properties:\n            startsAt:\n              type: string\n              format: date-time\n            venue:\n              type: string\n            sport:\n              $ref: '#/components/schemas/Sport'\n            duration:\n              type: number\n            capacity:\n              type: number\n            description:\n              type: string\n            price:\n              $ref: '#/components/schemas/Price'\n            linkOnly:\n              type: boolean\n            teams:\n              type: number\n        autoJoin:\n          type: boolean\n    PostEventResponse:\n      type: object\n      required:\n        - event\n      properties:\n        event:\n          $ref: '#/components/schemas/Event'\n    PatchEventRequest:\n      type: object\n      required:\n        - event\n      properties:\n        event:\n          type: object\n          properties:\n            canceledAt:\n              type: string\n              format: date-time\n    PatchEventResponse:\n      type: object\n      required:\n        - event\n      properties:\n        event:\n          $ref: '#/components/schemas/Event'\n    GetEventsResponse:\n      type: object\n      required:\n        - events\n      properties:\n        events:\n          $ref: '#/components/schemas/Events'\n    GetEventResponse:\n      type: object\n      required:\n        - event\n      properties:\n        events:\n          $ref: '#/components/schemas/Event'\n    GetParticipantsResponse:\n      type: object\n      required:\n        - participants\n      properties:\n        participants:\n          $ref: '#/components/schemas/Participants'\n    PostParticipantRequest:\n      type: object\n      properties:\n        team:\n          type: number\n    ModifyParticipantsResponse:\n      type: object\n      required:\n        - event\n        - participants\n      properties:\n        event:\n          $ref: '#/components/schemas/Event'\n        participants:\n          $ref: '#/components/schemas/Participants'\n    LocationResponse:\n      type: object\n      required:\n        - coordinates\n      properties:\n        coordinates:\n          $ref: '#/components/schemas/Coordinates'\n    User:\n      type: object\n      required:\n        - id\n        - email\n        - createdAt\n      properties:\n        id:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n        avatar:\n          type: string\n    Coordinates:\n      type: array\n      items:\n        type: number\n      minItems: 2\n      maxItems: 2\n    GeoType:\n      type: string\n      enum: [Point]\n    GeoJSON:\n      type: object\n      required:\n        - type\n        - coordinates\n      properties:\n        type:\n          $ref: '#/components/schemas/GeoType'\n        coordinates:\n          $ref: '#/components/schemas/Coordinates'\n    LocationType:\n      type: string\n      enum: [house, street, district, city, county, country, locality]\n    Location:\n      type: object\n      required:\n        - geo\n        - name\n      properties:\n        geo:\n          $ref: '#/components/schemas/GeoJSON'\n        name:\n          type: string\n        description:\n          type: string\n        country:\n          type: string\n        city:\n          type: string\n        postcode:\n          type: string\n        number:\n          type: string\n        street:\n          type: string\n        type:\n          $ref: '#/components/schemas/LocationType'\n    Images:\n      type: array\n      items:\n        type: string\n    Venue:\n      type: object\n      required:\n        - id\n        - createdAt\n        - name\n        - location\n        - images\n      properties:\n        id:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n        name:\n          type: string\n        location:\n          $ref: '#/components/schemas/Location'\n        images:\n          $ref: '#/components/schemas/Images'\n    Venues:\n      type: array\n      items:\n        $ref: '#/components/schemas/Venue'\n    Sport:\n      type: string\n      enum:\n        [\n          Football,\n          Basketball,\n          Tennis,\n          Squash,\n          Volleyball,\n          Handball,\n          Padel,\n          Badminton,\n          Table tennis,\n        ]\n    Currency:\n      type: string\n      enum: [EUR, GBP, USD, RON]\n    Price:\n      type: object\n      required:\n        - amount\n        - currency\n      properties:\n        amount:\n          type: number\n        currency:\n          $ref: '#/components/schemas/Currency'\n    Event:\n      type: object\n      required:\n        - id\n        - createdAt\n        - venue\n        - sport\n        - startsAt\n        - duration\n        - capacity\n        - numParticipants\n        - description\n        - createdBy\n        - price\n      properties:\n        id:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n        startsAt:\n          type: string\n          format: date-time\n        canceledAt:\n          type: string\n          format: date-time\n        venue:\n          $ref: '#/components/schemas/Venue'\n        sport:\n          $ref: '#/components/schemas/Sport'\n        duration:\n          type: number\n        capacity:\n          type: number\n        numParticipants:\n          type: number\n        description:\n          type: string\n        createdBy:\n          $ref: '#/components/schemas/User'\n        price:\n          $ref: '#/components/schemas/Price'\n        linkOnly:\n          type: boolean\n        teams:\n          type: array\n          items:\n            type: string\n    Events:\n      type: array\n      items:\n        $ref: '#/components/schemas/Event'\n    Participant:\n      type: object\n      required:\n        - id\n        - createdAt\n        - user\n        - event\n        - team\n      properties:\n        id:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n        user:\n          $ref: '#/components/schemas/User'\n        event:\n          type: string\n        team:\n          type: number\n    Participants:\n      type: array\n      items:\n        $ref: '#/components/schemas/Participant'\n    PushSubscription:\n      type: object\n      required:\n        - endpoint\n        - keys\n      properties:\n        endpoint:\n          type: string\n        expirationTime:\n          type: number\n          nullable: true\n        keys:\n          type: object\n          required:\n            - p256dh\n            - auth\n          properties:\n            p256dh:\n              type: string\n            auth:\n              type: string\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /events/{eventId}: patch: duplicate operationId: \"postEvent\""
}