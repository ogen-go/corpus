{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/CollActionteam/collaction_backend"
		},
		"file": {
			"name": "api2.yaml",
			"size": 0,
			"path": "docs/api2.yaml",
			"byteSize": 36921,
			"content": "openapi: 3.0.1\ninfo:\n  title: collaction-dev\n  version: \"1.1\"\nservers:\n  - url: \"https://api{subdomainSuffix}.{domain}/\"\n    variables:\n      subdomainSuffix:\n        default: \"-dev\"\n      domain:\n        default: collaction.org\npaths:\n  \"/crowdactions/{crowdactionID}\":\n    get:\n      tags:\n        - Crowdaction\n      summary: Get details of a specific crowdaction\n      parameters:\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n        - name: crowdactionID\n          in: path\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: password\n          description: Only include if crowdaction requires password\n          required: false\n          schema:\n            type: string\n            format: password\n      responses:\n        \"200\":\n          description: Crowdaction details\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: success\n                  data:\n                    allOf:\n                      - type: object\n                        properties:\n                          crowdactionID:\n                            type: string\n                            example: \u003e-\n                              sustainability#food#88615462-2789-4159-8659-2ecfd33ef305\n                      - $ref: \"#/components/schemas/CrowdactionDetails\"\n        \"401\":\n          description: Unauthorized (Invalid password)\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: fail\n                  data:\n                    type: string\n                    example:\n                      password: Invalid or missing password\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n        \"404\":\n          description: Crowdaction not found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: fail\n                  data:\n                    type: string\n                    example:\n                      password: crowdaction does not exist\n  /crowdactions:\n    get:\n      tags:\n        - Crowdaction\n      summary: Get list of crowdactions\n      parameters:\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n        - name: status\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - featured\n              - joinable\n              - active\n              - ended\n      responses:\n        \"200\":\n          description: List of crowdactions\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: success\n                  data:\n                    type: array\n                    items:\n                      allOf:\n                        - type: object\n                          properties:\n                            crowdactionID:\n                              type: string\n                              example: \u003e-\n                                sustainability#food#88615462-2789-4159-8659-2ecfd33ef305\n                        - $ref: \"#/components/schemas/CrowdactionListItem\"\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n  \"/crowdactions/{crowdactionID}/participation\":\n    parameters:\n      - $ref: \"#/components/parameters/ApiVersionParameter\"\n      - name: crowdactionID\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - Crowdaction\n      summary: Get existing participation in a particular crowdaction\n      responses:\n        \"200\":\n          description: Success message\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: success\n                  data:\n                    $ref: \"#/components/schemas/Participation\"\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n        \"404\":\n          description: Not found (Not participating)\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: fail\n                  data:\n                    type: object\n                    default:\n                      crowdactionID: not participating\n      security:\n        - FirebaseAuthorizer: []\n    delete:\n      tags:\n        - Crowdaction\n      summary: Stop participating in a particular crowdaction\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/EmptySuccess\"\n\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n        \"404\":\n          description: Not found (Not participating)\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: fail\n                  data:\n                    type: object\n                    default:\n                      crowdactionID: not participating\n      security:\n        - FirebaseAuthorizer: []\n    post:\n      tags:\n        - Crowdaction\n      summary: Participate in a particular crowdaction\n      parameters:\n        - in: query\n          name: password\n          description: Only include if crowdaction requires password\n          required: false\n          schema:\n            type: string\n            format: password\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                commitments:\n                  type: array\n                  items:\n                    type: string\n                  example:\n                    - no-meat\n                    - no-dairy\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/EmptySuccess\"\n\n        \"400\":\n          description: Bad request (Invalid commitments)\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: fail\n                  data:\n                    type: string\n                    example:\n                      commitments: Required commitment \"no-beef\" missing\n        \"401\":\n          description: Unauthorized (Invalid password)\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: fail\n                  data:\n                    type: string\n                    example:\n                      password: Invalid or missing password\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: fail\n                  data:\n                    type: string\n                    default:\n                      crowdactionID: already participating\n      security:\n        - FirebaseAuthorizer: []\n  \"/profiles/{userID}\":\n    parameters:\n      - $ref: \"#/components/parameters/ApiVersionParameter\"\n      - name: userID\n        in: path\n        required: true\n        schema:\n          type: string\n    post:\n      tags:\n        - Profile\n      summary: Create a profile for a new user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Profile\"\n      responses:\n        \"201\":\n          description: Profile was created successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    default: null\n                  status:\n                    type: string\n                    default: success\n        \"400\":\n          description: Bad request (Validation failed)\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: fail\n                  data:\n                    type: object\n                    example:\n                      displayname: Name must not be empty\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: fail\n                  data:\n                    type: object\n                    default:\n                      userID: Profile already exists\n      security:\n        - FirebaseAuthorizer: []\n    put:\n      tags:\n        - Profile\n      summary: Update the profile of an existing user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Profile\"\n      security:\n        - FirebaseAuthorizer: []\n      responses:\n        \"200\":\n          description: Profile was updated successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    default: null\n                  status:\n                    type: string\n                    default: success\n        \"400\":\n          description: Bad request (Validation failed)\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: fail\n                  data:\n                    type: object\n                    example:\n                      displayname: Name must not be empty\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n        \"404\":\n          description: Profile was not found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: fail\n                  data:\n                    type: object\n                    default:\n                      userID: No such profile\n    get:\n      tags:\n        - Profile\n      summary: View the profile of a user\n      responses:\n        \"200\":\n          description: Profile was found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: success\n                  data:\n                    $ref: \"#/components/schemas/Profile\"\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n        \"404\":\n          description: Profile was not found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: fail\n                  data:\n                    type: object\n                    default:\n                      userID: No such profile\n  /upload-profile-picture:\n    parameters:\n      - $ref: \"#/components/parameters/ApiVersionParameter\"\n    get:\n      tags:\n        - Profile\n      summary: Fetch an upload URL (POST) for the profile picture\n      responses:\n        \"200\":\n          description: \u003e-\n            Returns the URL where to upload (PUT) the square png image\n            (250-1024px)\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    example: success\n                  data:\n                    type: object\n                    properties:\n                      upload_url:\n                        type: string\n                        format: uri\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n      security:\n        - FirebaseAuthorizer: []\n  /contact:\n    parameters:\n      - $ref: \"#/components/parameters/ApiVersionParameter\"\n    post:\n      tags:\n        - Other\n      summary: Send a message to CollAction\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                data:\n                  $ref: \"#/components/schemas/Email\"\n                nonce:\n                  type: string\n                  example: c2dlcjIzc3NndnJzdnIyM\n                  description: |\n                    Nonce for PoW, see http://www.hashcash.org/\n                    (Not yet implemented -\u003e field will be ignored if present)\n      responses:\n        \"200\":\n          \"$ref\": \"#/components/responses/EmptySuccess\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: fail\n                  data:\n                    type: object\n                    example:\n                      email: Not a valid email address\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n  /cms/crowdactions:\n    parameters:\n      - $ref: \"#/components/parameters/ApiVersionParameter\"\n      - name: status\n        in: query\n        required: false\n        schema:\n          type: string\n          example: draft\n    get:\n      tags:\n        - CMS Crowdaction\n      summary: List crowdactions\n      responses:\n        \"200\":\n          description: Successfully listed crowdactions\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: success\n                  data:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/CmsCrowdactionListItem\"\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n      security:\n        - CMSAuthorizer: []\n    post:\n      tags:\n        - CMS Crowdaction\n      summary: Create a draft crowdaction\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                category:\n                  type: string\n                  example: sustainability\n                subcategory:\n                  type: string\n                  example: null\n                  description: optional (field does not have to be present)\n                title:\n                  type: string\n      responses:\n        \"201\":\n          description: Successfully created crowdaction draft\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: success\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        crowdactionID:\n                          type: string\n                          example: sustainability#food#88615462-2789-4159-8659-2ecfd33ef305\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n      security:\n        - CMSAuthorizer: []\n  \"/cms/crowdactions/{crowdactionID}\":\n    get:\n      tags:\n        - CMS Crowdaction\n      summary: Get the details of a specific crowdaction\n      parameters:\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n        - name: crowdactionID\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Crowdaction details\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: success\n                  data:\n                    allOf:\n                      - type: object\n                        properties:\n                          password:\n                            type: string\n                            default: null\n                          crowdactionID:\n                            type: string\n                            example: \u003e-\n                              sustainability#food#88615462-2789-4159-8659-2ecfd33ef305\n                      - $ref: \"#/components/schemas/CrowdactionDetails\"\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n        \"404\":\n          description: Crowdaction not found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: fail\n                  data:\n                    type: string\n                    example:\n                      password: crowdaction does not exist\n      security:\n        - CMSAuthorizer: []\n    put:\n      tags:\n        - CMS Crowdaction\n      summary: Update the details of a specific crowdaction\n      parameters:\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n        - name: crowdactionID\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              allOf:\n                - type: object\n                  properties:\n                    password:\n                      type: string\n                      default: null\n                    crowdactionID:\n                      type: string\n                      example: \u003e-\n                        sustainability#food#88615462-2789-4159-8659-2ecfd33ef305\n                - $ref: \"#/components/schemas/CrowdactionCore\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/EmptySuccess\"\n        \"400\":\n          description: Invalid change\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: fail\n                  data:\n                    type: string\n                    example:\n                      category: category of crowdaction cannot be changed\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n        \"404\":\n          description: Crowdaction not found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: fail\n                  data:\n                    type: string\n                    example:\n                      password: crowdaction does not exist\n      security:\n        - CMSAuthorizer: []\n    parameters:\n      - $ref: \"#/components/parameters/ApiVersionParameter\"\n      - name: crowdactionID\n        in: path\n        required: true\n        schema:\n          type: string\n    delete:\n      tags:\n        - CMS Crowdaction\n      summary: Delete crowdaction draft\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/EmptySuccess\"\n        \"400\":\n          description: Tried deleting crowdaction that is not a draft\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: fail\n                  data:\n                    default:\n                      type: object\n                      example:\n                        status: Only drafts can be deleted\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n      security:\n        - CMSAuthorizer: []\n  /cms/crowdactions/{crowdactionID}/status:\n    parameters:\n      - $ref: \"#/components/parameters/ApiVersionParameter\"\n      - name: crowdactionID\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - CMS Crowdaction\n      summary: Get crowdaction status\n      responses:\n        \"200\":\n          description: Successfully retrieved crowdaction status\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    default: success\n                  data:\n                    $ref: \"#/components/schemas/CmsCrowdactionStatus\"\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n      security:\n        - CMSAuthorizer: []\n    put:\n      tags:\n        - CMS Crowdaction\n      summary: Update crowdaction status\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                updateTo:\n                  type: string\n                  enum:\n                    - published\n                    - hidden\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/EmptySuccess\"\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n      security:\n        - CMSAuthorizer: []\n  /cms/crowdactions/{crowdactionID}/images/upload-{picture}:\n    parameters:\n      - $ref: \"#/components/parameters/ApiVersionParameter\"\n      - name: crowdactionID\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: picture\n        in: path\n        required: true\n        schema:\n          type: string\n          enum:\n            - banner\n            - card\n    get:\n      tags:\n        - CMS Crowdaction\n      summary: Fetch an upload URL (POST) for the crowdaction picture\n      responses:\n        \"200\":\n          description: \u003e-\n            Returns the URL where to upload (PUT) the png image\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    example: success\n                  data:\n                    type: object\n                    properties:\n                      upload_url:\n                        type: string\n                        format: uri\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n      security:\n        - CMSAuthorizer: []\n  \"/cms/users\":\n    parameters:\n      - $ref: \"#/components/parameters/ApiVersionParameter\"\n    get:\n      tags:\n        - CMS Users\n      summary: List CMS users\n      responses:\n        \"200\":\n          description: \u003e-\n            Returns a list of all CMS users\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    example: success\n                  data:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/CmsUser\"\n        \"401\":\n          description: \u003e-\n            Unauthorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    example: fail\n                  data:\n                    type: object\n                    properties:\n                      userType:\n                        type: string\n                        default: Only administrators may list users\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n      security:\n        - CMSAuthorizer: []\n    post:\n      tags:\n        - CMS Users\n      summary: Create a CMS user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  format: email\n                userType:\n                  $ref: \"#/components/schemas/CmsUserType\"\n      responses:\n        \"201\":\n          description: \u003e-\n            Created the new user\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    example: success\n                  data:\n                    $ref: \"#/components/schemas/CmsUser\"\n        \"401\":\n          description: \u003e-\n            Unauthorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    example: fail\n                  data:\n                    type: object\n                    properties:\n                      userType:\n                        type: string\n                        default: Only administrators may create new users\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n      security:\n        - CMSAuthorizer: []\n  \"/cms/users/{userID}\":\n    parameters:\n      - $ref: \"#/components/parameters/ApiVersionParameter\"\n      - name: userID\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    delete:\n      tags:\n        - CMS Users\n      summary: Delete a CMS user\n      responses:\n        \"200\":\n          description: \u003e-\n            User was deleted\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    example: success\n                  data:\n                    default: null\n        \"401\":\n          description: \u003e-\n            Unauthorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    example: fail\n                  data:\n                    type: object\n                    properties:\n                      userType:\n                        type: string\n                        default: Only administrators may delete users\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n      security:\n        - CMSAuthorizer: []\n  \"/cms/users/{userID}/type\":\n    parameters:\n      - $ref: \"#/components/parameters/ApiVersionParameter\"\n      - name: userID\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    put:\n      tags:\n        - CMS Users\n      summary: Change the type of a CMS user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                userType:\n                  $ref: \"#/components/schemas/CmsUserType\"\n      responses:\n        \"200\":\n          description: \u003e-\n            User was updated\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    example: success\n                  data:\n                    default: null\n        \"401\":\n          description: \u003e-\n            Unauthorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    example: fail\n                  data:\n                    type: object\n                    properties:\n                      userType:\n                        type: string\n                        default: Only administrators may modify users\n        \"403\":\n          $ref: \"#/components/responses/UnsupportedClientVersion\"\n      security:\n        - CMSAuthorizer: []\ncomponents:\n  parameters:\n    ApiVersionParameter:\n      name: X-CollActionAPI-Version\n      in: header\n      required: false\n      description: |\n        Semantic version of the API used by the client\n        (This parameter is currently not required, but might be in the future)\n      schema:\n        type: string\n        pattern: '^[0-9]+\\.[0-9]+$'\n        example: \"1.0\"\n  responses:\n    EmptySuccess:\n      description: Success\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              status:\n                type: string\n                default: success\n              data:\n                default: null\n    UnsupportedClientVersion:\n      description: Forbidden (Client version unsupported)\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              status:\n                type: string\n                default: fail\n              data:\n                type: object\n                example:\n                  X-CollActionAPI-Version: Unsupported client version! (Please update to 1.0)\n  securitySchemes:\n    FirebaseAuthorizer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    CMSAuthorizer:\n      description: Specific identity provider yet to be determined\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    CrowdactionCore:\n      type: object\n      properties:\n        author:\n          type: string\n          format: uuid\n          description: CMS userID of the author of the crowdaction\n        title:\n          type: string\n        description:\n          type: string\n        category:\n          type: string\n        subcategory:\n          type: string\n        location:\n          $ref: \"#/components/schemas/Location\"\n        dates:\n          $ref: \"#/components/schemas/CrowdactionDates\"\n        commitment_options:\n          type: array\n          items:\n            $ref: \"#/components/schemas/CommitmentOption\"\n    CrowdactionDetails:\n      type: object\n      allOf:\n        - type: object\n          properties:\n            images:\n              type: object\n              properties:\n                banner:\n                  $ref: \"#/components/schemas/Image\"\n            participation:\n              $ref: \"#/components/schemas/ParticipationSummary\"\n        - $ref: \"#/components/schemas/CrowdactionCore\"\n    CrowdactionListItem:\n      type: object\n      properties:\n        title:\n          type: string\n        category:\n          type: string\n        subcategory:\n          type: string\n        location:\n          $ref: \"#/components/schemas/Location\"\n        dates:\n          $ref: \"#/components/schemas/CrowdactionDates\"\n        password_required:\n          type: boolean\n        participation:\n          $ref: \"#/components/schemas/ParticipationSummary\"\n        images:\n          type: object\n          properties:\n            card:\n              $ref: \"#/components/schemas/Image\"\n    CrowdactionDates:\n      type: object\n      description: \u003e-\n        Whatever comes first between `end` and `join_before` applies for the\n        latter\n      properties:\n        start:\n          $ref: \"#/components/schemas/Date\"\n        end:\n          $ref: \"#/components/schemas/Date\"\n        join_before:\n          $ref: \"#/components/schemas/Date\"\n    Location:\n      type: object\n      properties:\n        country:\n          type: string\n          example: NL\n        city:\n          type: string\n          example: Amsterdam\n    CommitmentOption:\n      type: object\n      properties:\n        id:\n          type: string\n          example: vegetarian\n        label:\n          type: string\n          example: Becoming vegetarian\n        description:\n          type: string\n          example: I will not eat any meat from any animal (including fish).\n        requires:\n          type: array\n          description: \u003e\n            Commitments that are included in (and required by) this commitment.\n            They can also be individually selected\n          items:\n            $ref: \"#/components/schemas/CommitmentOption\"\n            example:\n              id: no-beef\n              label: Not eating beef\n              description: I will avoid eating beef (Goodbye stake).\n    Date:\n      type: string\n      pattern: '\\d{4}-\\d{2}-\\d{2}'\n      example: \"2021-11-28\"\n    ParticipationSummary:\n      type: object\n      properties:\n        participant_count:\n          type: integer\n        top_participants:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n                example: Peter Parker\n              userID:\n                type: string\n                format: uuid\n    Image:\n      type: object\n      properties:\n        url:\n          type: string\n          example: \"https://picsum.photos/300/200\"\n          format: uri\n        blur_hash:\n          type: string\n          example: LEHV6nWB2yk8pyo0adR*.7kCMdnj\n          description: \"(see https://blurha.sh/)\"\n    Participation:\n      type: object\n      properties:\n        userID:\n          type: string\n        name:\n          type: string\n          description: Displayname of the user\n        crowdactionID:\n          type: string\n          example: \"sustainability#food#88615462-2789-4159-8659-2ecfd33ef305\"\n        title:\n          type: string\n          description: Title of the crowdactions\n        commitments:\n          type: array\n          items:\n            type: string\n          example:\n            - vegetarian\n            - no-dairy\n          description: Array of commitment ids\n        date:\n          $ref: \"#/components/schemas/Date\"\n    Profile:\n      type: object\n      properties:\n        displayname:\n          type: string\n          example: Max Murphy\n        location:\n          $ref: \"#/components/schemas/Location\"\n        bio:\n          type: string\n          example: \u003e-\n            Hi, I am Max and I am trying to eat less meat to stop animal\n            suffering.\n    Email:\n      type: object\n      properties:\n        email:\n          type: string\n          description: Email address to which the response to the inquiry should be sent\n          format: email\n        subject:\n          type: string\n          example: Hello world\n        message:\n          type: string\n          example: \"Please respond to this email :)\"\n        app_version:\n          type: string\n          pattern: '^(?:ios|android) [0-9]+\\.[0-9]+\\.[0-9]+\\+[0-9]+$'\n          example: android 1.0.1+1\n    CmsCrowdactionStatus:\n      type: string\n      enum:\n        - draft\n        - upcoming\n        - ongoing\n        - ended\n        - hidden\n    CmsCrowdactionListItem:\n      type: object\n      properties:\n        crowdactionID:\n          type: string\n          example: sustainability#food#88615462-2789-4159-8659-2ecfd33ef305\n        status:\n          $ref: \"#/components/schemas/CmsCrowdactionStatus\"\n        password_required:\n          type: boolean\n          default: false\n        title:\n          type: string\n    CmsUser:\n      type: object\n      properties:\n        email:\n          type: string\n          format: email\n        userID:\n          type: string\n          format: uuid\n        userType:\n          $ref: \"#/components/schemas/CmsUserType\"\n    CmsUserType:\n      type: string\n      enum:\n        - Administrator\n        - Author\n"
		}
	},
	"Error": "parse: parse spec: parse components: responses: \"EmptySuccess\": content: application/json: schema: parse schema: property \"data\": parse schema: infer default type: cannot infer type from \"null\""
}