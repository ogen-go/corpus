{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/TrueBlocks/trueblocks-core"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/content/api/openapi.yaml",
			"byteSize": 90839,
			"content": "openapi: 3.0.3\ninfo:\n  title: TrueBlocks API\n  contact:\n    email: info@trueblocks.io\n    url: https://www.trueblocks.io\n  license:\n    name: GPL 3.0\n    url: http://www.gnu.org/licenses/\n  version: 0.32.0-beta\n  description: \u003e\n\n    A REST layer over the TrueBlocks application. With `chifra serve`, you can\n    run this on your own machine, and make calls to `localhost`.\n\n    ## How to use this API\n\n    This API's endpoints are exact translations of the commands used by the chifra\n    CLI application, and the query parameters mirror the commands' options and\n    flags. If you want details, [the commands have their own documentation page](/docs/using/introducing-chifra/).\n\n    For detailed descriptions of fields, see [the data model reference](/data-model/intro/).\n\n      ### Before you begin\n\n    1. [Install the trueblocks-core application](/docs/install/install-trueblocks/)\n      on your machine, change your configs as needed.\n    2. Run `chifra serve`\n\n\n      ### Example queries\n\n     By default, all calls are to `localhost:8080`.\n     All options and flags are passed through query parameters.\n\n     For example, to get block `100`, make a call to `/blocks` and specify\n     the block you want in the query parameter:\n\n     ```shell\n     curl \"http://localhost:8080/blocks?blocks=100\"\n     ```\n\n     Some parameters support ranges:\n\n     ```shell\n     curl \"http://localhost:8080/blocks?blocks=100-120\"\n     ```\n\n     Other parameters let you filter your responses. For example, to get only\n     the unique addresses from that block range:\n\n     ```shell\n     curl \"http://localhost:8080/blocks?blocks=100-110\u0026uniq=true\"\n     ```\n\n     You might want to cache queries on your local machine.\n\n     ```shell\n     \"http://localhost:8080/blocks?blocks=100-110\u0026cache=true\"\n     ```\n\n     Cacheing speeds up repeat queries significantly. The cache options are\n     particularly useful for calls to data-rich endpoints, like most endpoints\n     in the  \"Accounts\" collection.\n\n     Of course, caches occupy local storage. So cache wisely.\nservers:\n  - url: http://localhost:8080\n    description: Local endpoints\ntags:\n  - name: Accounts\n    description: Access and cache transactional data\n  - name: Chain Data\n    description: Access and cache blockchain-related data\n  - name: Chain State\n    description: Access to account and token state\n  - name: Admin\n    description: Control the scraper and build the index\n  - name: Other\n    description: Access to other and external data\npaths:\n  /list:\n    get:\n      tags:\n        - Accounts\n      summary: List transactions\n      description: List every appearance of an address anywhere on the chain.\n      operationId: accounts-list\n      parameters:\n        - name: addrs\n          description: one or more addresses (0x...) to list\n          required: true\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: address\n        - name: count\n          description: display only the count of records for each monitor\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: appearances\n          description: export each monitor's list of appearances (the default)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: silent\n          description: freshen the monitor only (no reporting)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: returns the requested data\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: data of the appropriate type from a single appearance of an address or the count of same\n                    type: array\n                    items:\n                      oneOf:\n                        - $ref: \"#/components/schemas/appearance\"\n                        - $ref: \"#/components/schemas/listStats\"\n                example:\n                  {\n                    \"data\":\n                      [\n                        {\n                          \"blockNumber\": 8854723,\n                          \"transactionIndex\": 61,\n                          \"address\": \"0xf503017d7baf7fbc0fff7492b751025c6a78179b\",\n                          \"name\": \"TrueBlocks 2020 Wallet 0xf503\",\n                        },\n                        {\n                          \"blockNumber\": 8855603,\n                          \"transactionIndex\": 121,\n                          \"address\": \"0xf503017d7baf7fbc0fff7492b751025c6a78179b\",\n                          \"name\": \"TrueBlocks 2020 Wallet 0xf503\",\n                        },\n                        { \"...\": \"...\" },\n                      ],\n                  }\n        \"400\":\n          description: bad input parameter\n  /export:\n    get:\n      tags:\n        - Accounts\n      summary: Export details\n      description: Export full detail of transactions for one or more addresses.\n      operationId: accounts-export\n      parameters:\n        - name: addrs\n          description: one or more addresses (0x...) to export\n          required: true\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: address\n        - name: topics\n          description: filter by one or more log topics (only for --logs option)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: topic\n        - name: fourbytes\n          description: filter by one or more fourbytes (only for transactions and trace options)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: fourbyte\n        - name: appearances\n          description: export a list of appearances\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: receipts\n          description: export receipts instead of transactional data\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: logs\n          description: export logs instead of transactional data\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: traces\n          description: export traces instead of transactional data\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: statements\n          description: \u003e\n            export reconciliations instead of transactional data (requires --accounting option)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: neighbors\n          description: export the neighbors of the given address\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: accounting\n          description: \u003e\n            attach accounting records to the exported data (applies to transactions export only)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: articulate\n          description: articulate transactions, traces, logs, and outputs\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: cache\n          description: write transactions to the cache (see notes)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: cacheTraces\n          description: write traces to the cache (see notes)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: count\n          description: \u003e\n            only available for --appearances mode, if present, return only the number of records\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: firstRecord\n          description: the first record to process\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: number\n        - name: maxRecords\n          description: the maximum number of records to process before reporting\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: number\n        - name: relevant\n          description: \u003e\n            for log and accounting export only, export only logs relevant to one of the given export addresses\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: emitter\n          description: \u003e\n            for log export only, export only logs if emitted by one of these address(es)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: address\n        - name: topic\n          description: for log export only, export only logs with this topic(s)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: topic\n        - name: asset\n          description: for the statements option only, export only reconciliations for this asset\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: address\n        - name: staging\n          description: \u003e\n            export transactions labeled staging (i.e. older than 28 blocks but not yet consolidated)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: unripe\n          description: export transactions labeled upripe (i.e. less than 28 blocks old)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: firstBlock\n          description: first block to process (inclusive)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: number\n        - name: lastBlock\n          description: last block to process (inclusive)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: number\n      responses:\n        \"200\":\n          description: returns the requested data\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: data of the appropriate type from a single appearance of an address or the count of same\n                    type: array\n                    items:\n                      oneOf:\n                        - $ref: \"#/components/schemas/appearance\"\n                        - $ref: \"#/components/schemas/reconciliation\"\n                        - $ref: \"#/components/schemas/listStats\"\n                        - $ref: \"#/components/schemas/transaction\"\n                        - $ref: \"#/components/schemas/receipt\"\n                        - $ref: \"#/components/schemas/log\"\n                        - $ref: \"#/components/schemas/trace\"\n                example:\n                  {\n                    \"data\":\n                      [\n                        {\n                          \"hash\": \"0x1a898c5448b37f693343917ea40b7ad1c43b28a4ddd37af1bd6d0bb4a0c99891\",\n                          \"blockHash\": \"0x1d7f60b34bad8ce0ba5e49e3845c7a62ba8db440b81f8df98ec6349c4d28ca8e\",\n                          \"blockNumber\": 8854723,\n                          \"transactionIndex\": 61,\n                          \"timestamp\": 1572639538,\n                          \"from\": \"0xbb984f85bd52d78eb2fbf2c5598bae7abb98c5bc\",\n                          \"to\": \"0xf503017d7baf7fbc0fff7492b751025c6a78179b\",\n                          \"value\": 5e+18,\n                          \"gas\": 21000,\n                          \"gasPrice\": 10000000000,\n                          \"maxFeePerGas\": 0,\n                          \"maxPriorityFeePerGas\": 0,\n                          \"isError\": 0,\n                          \"hasToken\": 0,\n                          \"receipt\":\n                            {\n                              \"contractAddress\": \"0x0\",\n                              \"gasUsed\": 21000,\n                              \"effectiveGasPrice\": 10000000000,\n                              \"status\": 1,\n                            },\n                          \"compressedTx\": \"0x ( )\",\n                          \"gasCost\": 210000000000000,\n                          \"gasUsed\": 21000,\n                          \"date\": \"2019-11-01 20:18:58 UTC\",\n                          \"ether\": 5,\n                        },\n                      ],\n                  }\n        \"400\":\n          description: bad input parameter\n  /monitors:\n    get:\n      tags:\n        - Accounts\n      summary: Manage monitors\n      description: Add, remove, clean, and list address monitors.\n      operationId: accounts-monitors\n      parameters:\n        - name: addrs\n          description: one or more addresses (0x...) to process\n          required: true\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: address\n        - name: clean\n          description: clean (i.e. remove duplicate appearances) from monitors\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: delete\n          description: delete the item, but do not remove it\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: undelete\n          description: undelete a previously deleted item\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: remove\n          description: remove a previously deleted item\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: returns the requested data\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: A local file indicating a user's interest in an address. Includes caches for reconicilations, transactions and appearances as well as an optional association to named account\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/monitor\"\n        \"400\":\n          description: bad input parameter\n  /names:\n    get:\n      tags:\n        - Accounts\n      summary: Names\n      description: Query addresses or names of well known accounts.\n      operationId: accounts-names\n      parameters:\n        - name: terms\n          description: a space separated list of one or more search terms\n          required: true\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: string\n        - name: expand\n          description: \u003e\n            expand search to include all fields (search name, address, and symbol otherwise)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: matchCase\n          description: do case-sensitive search\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: all\n          description: include all accounts in the search\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: custom\n          description: include your custom named accounts\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: prefund\n          description: include prefund accounts\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: named\n          description: include well know token and airdrop addresses in the search\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: addr\n          description: display only addresses in the results (useful for scripting)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: collections\n          description: display collections data\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: tags\n          description: export the list of tags and subtags only\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: delete\n          description: delete the item, but do not remove it\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: undelete\n          description: undelete a previously deleted item\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: remove\n          description: remove a previously deleted item\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: returns the requested data\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: an association between a name and address for use throughout TrueBlocks\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/name\"\n                example:\n                  [\n                    {\n                      \"tags\": \"50-Tokens:ERC20\",\n                      \"address\": \"0xfe5f141bf94fe84bc28ded0ab966c16b17490657\",\n                      \"name\": \"LibraToken\",\n                      \"symbol\": \"LBA\",\n                      \"source\": \"On chain\",\n                      \"decimals\": 18,\n                      \"description\": \"Decentralized lending infrastructure facilitating open access to credit networks on Ethereum.\",\n                    },\n                  ]\n        \"400\":\n          description: bad input parameter\n  /abis:\n    get:\n      tags:\n        - Accounts\n      summary: ABIs\n      description: Fetches the ABI for a smart contract.\n      operationId: accounts-abis\n      parameters:\n        - name: addrs\n          description: a list of one or more smart contracts whose ABIs to display\n          required: true\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: address\n        - name: known\n          description: load common 'known' ABIs from cache\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: sol\n          description: extract the abi definition from the provided .sol file(s)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: find\n          description: search for function or event declarations given a four- or 32-byte code(s)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: string\n      responses:\n        \"200\":\n          description: returns the requested data\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: a human readable representation of a Solidity function call or event\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/function\"\n                example:\n                 {\n                   \"data\": [\n                     {\n                       \"name\": \"PairCreated\",\n                       \"type\": \"event\",\n                       \"stateMutability\": \"nonpayable\",\n                       \"signature\": \"PairCreated(address,address,address,uint256)\",\n                       \"encoding\": \"0x0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9\",\n                       \"inputs\": [\n                         {\n                           \"type\": \"address\",\n                           \"name\": \"token0\",\n                           \"indexed\": true,\n                           \"internalType\": \"address\"\n                         },\n                         {\n                           \"type\": \"address\",\n                           \"name\": \"token1\",\n                           \"indexed\": true,\n                           \"internalType\": \"address\"\n                         },\n                         {\n                           \"type\": \"address\",\n                           \"name\": \"pair\",\n                           \"internalType\": \"address\"\n                         },\n                         {\n                           \"type\": \"uint256\",\n                           \"name\": \"val_0\",\n                           \"internalType\": \"uint256\"\n                         }\n                       ]\n                     }\n                   ]\n                 }\n        \"400\":\n          description: bad input parameter\n  /blocks:\n    get:\n      tags:\n        - Chain Data\n      summary: Get blocks\n      description: Retrieve one or more blocks from the chain or local cache.\n      operationId: chaindata-blocks\n      parameters:\n        - name: blocks\n          description: a space-separated list of one or more block identifiers\n          required: true\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: blknum\n        - name: hashes\n          description: \u003e\n            display only transaction hashes, default is to display full transaction detail\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: uncles\n          description: display uncle blocks (if any) instead of the requested block\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: trace\n          description: export the traces from the block as opposed to the block data\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: apps\n          description: display a list of uniq address appearances in the block\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: uniq\n          description: display a list of uniq address appearances per transaction\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: logs\n          description: display only the logs found in the block(s)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: emitter\n          description: \u003e\n            for the --logs option only, filter logs to show only those logs emitted by the given address(es)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: address\n        - name: topic\n          description: \u003e\n            for the --logs option only, filter logs to show only those with this topic(s)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: topic\n        - name: count\n          description: display the number of the lists of appearances for --addrs or --uniq\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: cache\n          description: force a write of the block to the cache\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: list\n          description: summary list of blocks running backwards from latest block minus num\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: number\n        - name: listCount\n          description: the number of blocks to report for --list option\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: number\n      responses:\n        \"200\":\n          description: returns the requested data\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: block data directly from the blockchain\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/block\"\n                example:\n                  {\n                    \"blockNumber\": 3141592,\n                    \"hash\": \"0x0b4c6fb75ded4b90218cf0346b0885e442878f104e1b60bf75d5b6860eeacd53\",\n                    \"...\": \"...\",\n                    \"transactions\": [],\n                  }\n        \"400\":\n          description: bad input parameter\n  /transactions:\n    get:\n      tags:\n        - Chain Data\n      summary: Get transactions\n      description: Retrieve one or more transactions from the chain or local cache.\n      operationId: chaindata-transactions\n      parameters:\n        - name: transactions\n          description: a space-separated list of one or more transaction identifiers\n          required: true\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: tx_id\n        - name: articulate\n          description: articulate the retrieved data if ABIs can be found\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: trace\n          description: include the transaction's traces in the results\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: uniq\n          description: display a list of uniq addresses found in the transaction\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: reconcile\n          description: reconcile the transaction as per the provided address\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: string\n        - name: cache\n          description: \u003e\n            force the results of the query into the tx cache (and the trace cache if applicable)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: returns the requested data\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: the transaction data for a given transaction directly from the blockchain\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/transaction\"\n        \"400\":\n          description: bad input parameter\n  /receipts:\n    get:\n      tags:\n        - Chain Data\n      summary: Get receipts\n      description: Retrieve receipts for the given transaction(s).\n      operationId: chaindata-receipts\n      parameters:\n        - name: transactions\n          description: a space-separated list of one or more transaction identifiers\n          required: true\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: tx_id\n        - name: articulate\n          description: articulate the retrieved data if ABIs can be found\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: returns the requested data\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: receipt data for a given transaction directly from the blockchain\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/receipt\"\n        \"400\":\n          description: bad input parameter\n  /logs:\n    get:\n      tags:\n        - Chain Data\n      summary: Get logs\n      description: Retrieve logs for the given transaction(s).\n      operationId: chaindata-logs\n      parameters:\n        - name: transactions\n          description: a space-separated list of one or more transaction identifiers\n          required: true\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: tx_id\n        - name: articulate\n          description: articulate the retrieved data if ABIs can be found\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: returns the requested data\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: log data for a given transaction directly from the blockchain\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/log\"\n        \"400\":\n          description: bad input parameter\n  /traces:\n    get:\n      tags:\n        - Chain Data\n      summary: Get traces\n      description: Retrieve traces for the given transaction(s).\n      operationId: chaindata-traces\n      parameters:\n        - name: transactions\n          description: a space-separated list of one or more transaction identifiers\n          required: true\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: tx_id\n        - name: articulate\n          description: articulate the retrieved data if ABIs can be found\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: filter\n          description: call the node's trace_filter routine with bang-separated filter\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: string\n        - name: statediff\n          description: export state diff traces (not implemented)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: count\n          description: show the number of traces for the transaction only (fast)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: returns the requested data\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: trace data for a given transaction directly from the blockchain\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/trace\"\n        \"400\":\n          description: bad input parameter\n  /when:\n    get:\n      tags:\n        - Chain Data\n      summary: Get block dates\n      description: Find block(s) based on date, blockNum, timestamp, or 'special'.\n      operationId: chaindata-when\n      parameters:\n        - name: blocks\n          description: \u003e\n            one or more dates, block numbers, hashes, or special named blocks (see notes)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: string\n        - name: list\n          description: export a list of the 'special' blocks\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: timestamps\n          description: ignore other options and generate timestamps only\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: returns the requested data\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: An indentified block named for convienience\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/datedBlock\"\n        \"400\":\n          description: bad input parameter\n  /state:\n    get:\n      tags:\n        - Chain State\n      summary: Get balance(s)\n      description: Retrieve account balance(s) for one or more addresses at given block(s).\n      operationId: chainstate-state\n      parameters:\n        - name: addrs\n          description: one or more addresses (0x...) from which to retrieve balances\n          required: true\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: address\n        - name: blocks\n          description: \u003e\n            an optional list of one or more blocks at which to report balances, defaults to 'latest'\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: blknum\n        - name: parts\n          description: control which state to export\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - none\n                - some\n                - all\n                - balance\n                - nonce\n                - code\n                - storage\n                - deployed\n                - accttype\n        - name: changes\n          description: only report a balance when it changes from one block to the next\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: noZero\n          description: suppress the display of zero balance accounts\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: call\n          description: a bang-separated string consisting of address!4-byte!bytes\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: string\n        - name: proxyFor\n          description: for the --call option only, redirects calls to this implementation\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: returns the requested data\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: the on-chain state of a given address\n                    type: array\n                    items:\n                      oneOf:\n                        - $ref: \"#/components/schemas/state\"\n                        - $ref: \"#/components/schemas/result\"\n                example:\n                  {\n                    \"data\":\n                      [\n                        {\n                          \"blockNumber\": 13176226,\n                          \"balance\": 258843698360318500,\n                          \"nonce\": 115,\n                          \"code\": \"0x\",\n                          \"storage\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n                          \"address\": \"0xa1e4380a3b1f749673e270229993ee55f35663b4\",\n                          \"deployed\": 0,\n                          \"accttype\": \"EOA\",\n                          \"ether\": 0.2588436983603185,\n                        },\n                      ],\n                  }\n        \"400\":\n          description: bad input parameter\n  /tokens:\n    get:\n      tags:\n        - Chain State\n      summary: Get token balance(s)\n      description: Retrieve token balance(s) for one or more addresses at given block(s).\n      operationId: chainstate-tokens\n      parameters:\n        - name: addrs\n          description: \u003e\n            two or more addresses (0x...), the first is an ERC20 token, balances for the rest are reported\n          required: true\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            minItems: 2\n            items:\n              type: string\n              format: address\n        - name: blocks\n          description: \u003e\n            an optional list of one or more blocks at which to report balances, defaults to 'latest'\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: blknum\n        - name: parts\n          description: which parts of the token information to retrieve\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - name\n                - symbol\n                - decimals\n                - totalSupply\n                - version\n                - none\n                - all\n        - name: byAcct\n          description: \u003e\n            consider each address an ERC20 token except the last, whose balance is reported for each token\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: noZero\n          description: suppress the display of zero balance accounts\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: returns the requested data\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: on-chain token related data for a give address at a given block height\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/token\"\n                example:\n                 {\n                   \"data\": [\n                     {\n                       \"holder\": \"0x2910543af39aba0cd09dbb2d50200b3e800a63d2\",\n                       \"balance\": \"624980000000000000\",\n                       \"address\": \"0xbb9bc244d798123fde783fcc1c72d3bb8c189413\",\n                       \"name\": \"The DAO Original\",\n                       \"decimals\": 1,\n                       \"isContract\": true,\n                       \"isErc20\": true,\n                       \"isErc721\": true\n                     }\n                   ]\n                 }\n        \"400\":\n          description: bad input parameter\n  /status:\n    get:\n      tags:\n        - Admin\n      summary: Report status\n      description: Report on the status of the TrueBlocks system.\n      operationId: admin-status\n      parameters:\n        - name: modes\n          description: the type of status info to retrieve\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - index\n                - monitors\n                - collections\n                - names\n                - abis\n                - caches\n                - some\n                - all\n        - name: details\n          description: \u003e\n            include details about items found in monitors, slurps, abis, or price caches\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: terse\n          description: show a terse summary report\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: returns the requested data\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: This data model carries information about the TrueBlocks system including both the API server and the local binary caches\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/status\"\n                example:\n                  {\n                    \"data\":\n                      [\n                        {\n                          \"clientVersion\": \"erigon/2021.09.2/linux-amd64/go1.16.3\",\n                          \"trueblocksVersion\": \"GHC-TrueBlocks//0.12.1-alpha-7ac3196d7-20210903\",\n                          \"rpcProvider\": \"http://localhost:23456\",\n                          \"configPath\": \"~/Library/Application Support/TrueBlocks/\",\n                          \"cachePath\": \"~/Library/Application Support/TrueBlocks/cache/\",\n                          \"indexPath\": \"~/Library/Application Support/TrueBlocks/unchained/\",\n                          \"isTesting\": false,\n                          \"isDocker\": false,\n                          \"isArchive\": true,\n                          \"isTracing\": true,\n                          \"hasEskey\": true,\n                          \"hasPinkey\": true,\n                          \"date\": \"2021-09-03 19:38:19 UTC\",\n                        },\n                      ],\n                  }\n        \"400\":\n          description: bad input parameter\n  /scrape:\n    get:\n      tags:\n        - Admin\n      summary: Scrape index\n      description: Scan the chain and update (and optionally pin) the TrueBlocks index of appearances.\n      operationId: admin-scrape\n      parameters:\n        - name: modes\n          description: which scraper(s) to control\n          required: true\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - indexer\n                - monitors\n                - both\n        - name: sleep\n          description: seconds to sleep between scraper passes\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: number\n        - name: pin\n          description: \u003e\n            pin chunks (and blooms) to IPFS as they are created (requires pinning service)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n        - name: blockCnt\n          description: maximum number of blocks to process per pass\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: number\n      responses:\n        \"200\":\n          description: returns the requested data\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: the IPFS hashes of the index chunk and its associated Bloom filter for the given block range\n                    type: array\n                    items:\n                      oneOf:\n                        - $ref: \"#/components/schemas/pinnedChunk\"\n                        - $ref: \"#/components/schemas/manifest\"\n        \"400\":\n          description: bad input parameter\n  /chunks:\n    get:\n      tags:\n        - Admin\n      summary: Manage chunks\n      description: Manage and investigate chunks and bloom filters.\n      operationId: admin-chunks\n      parameters:\n        - name: blocks\n          description: optional list of blocks to intersect with chunk ranges\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: blknum\n        - name: extract\n          description: show some or all of the contents of the chunk or bloom filters\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: string\n            enum:\n              - stats\n              - pins\n              - blooms\n              - index\n              - header\n              - addresses\n              - appearances\n      responses:\n        \"200\":\n          description: returns the requested data\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: the IPFS hashes of the index chunk and its associated Bloom filter for the given block range\n                    type: array\n                    items:\n                      oneOf:\n                        - $ref: \"#/components/schemas/pinnedChunk\"\n                        - $ref: \"#/components/schemas/manifest\"\n        \"400\":\n          description: bad input parameter\n  /init:\n    get:\n      tags:\n        - Admin\n      summary: Initialize index\n      description: Initialize the TrueBlocks system by downloading from IPFS.\n      operationId: admin-init\n      parameters:\n        - name: all\n          description: in addition to Bloom filters, download full index chunks\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: returns the requested data\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: the IPFS hashes of the index chunk and its associated Bloom filter for the given block range\n                    type: array\n                    items:\n                      oneOf:\n                        - $ref: \"#/components/schemas/pinnedChunk\"\n                        - $ref: \"#/components/schemas/manifest\"\n        \"400\":\n          description: bad input parameter\n  /quotes:\n    get:\n      tags:\n        - Other\n      summary: Price quotes\n      description: Update or display Ethereum price data, this tool has been deprecated.\n      operationId: other-quotes\n      parameters:\n        - name: period\n          description: increment of display\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: string\n            enum:\n              - \"5\"\n              - \"15\"\n              - \"30\"\n              - \"60\"\n              - \"120\"\n              - \"240\"\n              - \"1440\"\n              - \"10080\"\n              - hourly\n              - daily\n              - weekly\n        - name: pair\n          description: which price pair to freshen or list (see Poloniex)\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: string\n        - name: feed\n          description: the feed for the price data\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: string\n            enum:\n              - poloniex\n              - maker\n              - tellor\n      responses:\n        \"200\":\n          description: returns the requested data\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: the closing price of Ether in USD at a particular moment\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/quote\"\n                example:\n                  {\n                    \"data\":\n                      [\n                        {\n                          \"timestamp\": 1439078400,\n                          \"close\": 1.4,\n                          \"date\": \"2015-08-09 00:00:00 UTC\",\n                        },\n                        {\n                          \"timestamp\": 1439085600,\n                          \"close\": 1.4,\n                          \"date\": \"2015-08-09 02:00:00 UTC\",\n                        },\n                      ],\n                  }\n        \"400\":\n          description: bad input parameter\n  /slurp:\n    get:\n      tags:\n        - Other\n      summary: Slurp Etherscan\n      description: Fetch data from EtherScan for any address.\n      operationId: other-slurp\n      parameters:\n        - name: addrs\n          description: one or more addresses to slurp from Etherscan\n          required: true\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: address\n        - name: blocks\n          description: an optional range of blocks to slurp\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: blknum\n        - name: types\n          description: which types of transactions to request\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - ext\n                - int\n                - token\n                - nfts\n                - miner\n                - uncles\n                - all\n        - name: appearances\n          description: show only the blocknumer.tx_id appearances of the exported transactions\n          required: false\n          style: form\n          in: query\n          explode: true\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: returns the requested data\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: the transaction data for a given transaction directly from the blockchain\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/transaction\"\n                example:\n                  [\n                    {\n                      \"hash\": \"0x2ec382949ba0b22443aa4cb38267b1fb5e68e188109ac11f7a82f67571a0adf3\",\n                      \"blockHash\": \"0xeab8fe9da0b41b2c003db620bb9adbedd5fcc7222cc50d53431aa1df47a20dda\",\n                      \"blockNumber\": \"46217\",\n                      \"transactionIndex\": \"0\",\n                      \"nonce\": \"0\",\n                      \"timestamp\": \"1438919451\",\n                      \"from\": \"0xc8ebccc5f5689fa8659d83713341e5ad19349448\",\n                      \"to\": \"0xc8ebccc5f5689fa8659d83713341e5ad19349448\",\n                      \"value\": \"0\",\n                      \"gas\": \"21000\",\n                      \"gasPrice\": \"65334370444\",\n                      \"maxFeePerGas\": \"0\",\n                      \"maxPriorityFeePerGas\": \"0\",\n                      \"input\": \"0x\",\n                      \"isError\": \"0\",\n                      \"hasToken\": \"0\",\n                      \"gasUsed\": \"21000\",\n                      \"date\": \"2015-08-07 03:50:51 UTC\",\n                      \"ether\": \"0.000000000000000000\",\n                    },\n                  ]\n        \"400\":\n          description: bad input parameter\ncomponents:\n  schemas:\n    monitor:\n      description: \"A local file indicating a user's interest in an address. Includes caches for reconicilations, transactions and appearances as well as an optional association to named account\"\n      type: object\n      properties:\n        nApps:\n          type: number\n          format: blknum\n          description: \"the number of appearances for this monitor\"\n        firstApp:\n          type: number\n          format: blknum\n          description: \"the first block at which this address appears\"\n        latestApp:\n          type: number\n          format: blknum\n          description: \"the latest block at which this address appears\"\n        sizeInBytes:\n          type: number\n          format: uint64\n          description: \"the size of this monitor on disc\"\n        tags:\n          type: string\n          description: \"the tag given to this address\"\n        address:\n          type: string\n          format: address\n          description: \"the address being monitored\"\n        name:\n          type: string\n          description: \"the name given to this address\"\n        isCustom:\n          type: boolean\n          description: \"`true` if this address is customized\"\n        deleted:\n          type: boolean\n          description: \"`true` if deleted, `false` otherwise\"\n        symbol:\n          type: string\n        source:\n          type: string\n        decimals:\n          type: number\n          format: uint64\n        isContract:\n          type: boolean\n    appearance:\n      description: \"data of the appropriate type from a single appearance of an address or the count of same\"\n      type: object\n      properties:\n        blockNumber:\n          type: number\n          format: blknum\n          example: 10021\n          description: \"the number of the block\"\n        transactionIndex:\n          type: number\n          format: blknum\n          example: 305\n          description: \"the zero-indexed position of the transaction in the block\"\n        address:\n          type: string\n          format: address\n          description: \"the address of the appearance\"\n        name:\n          type: string\n          description: \"the name of the address, if found\"\n        timestamp:\n          type: number\n          format: timestamp\n          description: \"the timestamp for this appearance\"\n        date:\n          type: string\n          description: \"the date represented by the timestamp\"\n    reconciliation:\n      description: \"a reconiciliation of all inflows and outflows to a given account at a given transaction\"\n      type: object\n      properties:\n        blockNumber:\n          type: number\n          format: blknum\n          example: 10021\n          description: \"the number of the block\"\n        transactionIndex:\n          type: number\n          format: blknum\n          example: 305\n          description: \"the zero-indexed position of the transaction in the block\"\n        timestamp:\n          type: number\n          format: timestamp\n          example: 1438335038\n          description: \"the Unix timestamp of the object\"\n        assetAddr:\n          type: string\n          format: address\n          example: \"0xf503...179b\"\n          description: \"the accountedFor address for ETH recons, the token address itself otherwise\"\n        assetSymbol:\n          type: string\n          description: \"either ETH, WEI or the symbol of the asset being reconciled as extracted from the chain\"\n        decimals:\n          type: number\n          format: uint64\n          description: \"Equivalent to the extracted value of getSymbol from ERC20 or, if ETH or WEI then 18\"\n        prevBlk:\n          type: number\n          format: blknum\n          example: 10021\n          description: \"the block number of the previous reconciliation\"\n        prevBlkBal:\n          type: string\n          format: int256\n          description: \"the account balance for the given asset for the previous reconciliation\"\n        begBal:\n          type: string\n          format: int256\n          description: \"the beginning balance of the asset at the blockNumber\"\n        begBalDiff:\n          type: string\n          format: int256\n          description: \"the difference between the expected beginning balance (prevBlkBal) and the queried balance from the chain\"\n        amountIn:\n          type: string\n          format: int256\n          description: \"the top-level value of the incoming transfer for the accountedFor address\"\n        amountOut:\n          type: string\n          format: int256\n          description: \"the amount (in terms of the asset) of regular outflow during this bigint\"\n        internalIn:\n          type: string\n          format: int256\n          description: \"the internal value of the incoming transfer for the accountedFor address\"\n        internalOut:\n          type: string\n          format: int256\n          description: \"the value of any internal value transfers out of the accountedFor account\"\n        selfDestructIn:\n          type: string\n          format: int256\n          description: \"the incoming value of a self-destruct if recipient is the accountedFor address\"\n        selfDestructOut:\n          type: string\n          format: int256\n          description: \"the value of the self-destructed value out if the accountedFor address was self-destructed\"\n        minerBaseRewardIn:\n          type: string\n          format: int256\n          description: \"the base fee reward if the miner is the accountedFor address\"\n        minerNephewRewardIn:\n          type: string\n          format: int256\n          description: \"the nephew reward if the miner is the accountedFor address\"\n        minerTxFeeIn:\n          type: string\n          format: int256\n          description: \"the transaction fee reward if the miner is the accountedFor address\"\n        minerUncleRewardIn:\n          type: string\n          format: int256\n          description: \"the uncle reward if the miner who won the uncle block is the accountedFor address\"\n        prefundIn:\n          type: string\n          format: int256\n          description: \"at block zero (0) only, the amount of genesis income for the accountedFor address\"\n        spotPrice:\n          type: number\n          format: double\n          description: \"The on-chain price in USD (or if a token in ETH, or zero) at the time of the transaction\"\n        priceSource:\n          type: string\n          description: \"The on-chain source from which the spot price was taken\"\n        gasCostOut:\n          type: string\n          format: int256\n          description: \"if the transactions original sender is the accountedFor address, the amount of gas expended denominated in WEI.\"\n        endBal:\n          type: string\n          format: int256\n          description: \"the on-chain balance of the asset (see notes above about intra-block reconciliations)\"\n        totalIn:\n          type: string\n          format: int256\n          description: \"a calculated field -- the sum of all In fields\"\n        totalOut:\n          type: string\n          format: int256\n          description: \"a calculated field -- the sum of all Out fields\"\n        totalOutLessGas:\n          type: string\n          format: int256\n        amountNet:\n          type: string\n          format: int256\n          description: \"a calculated field -- totalIn - totalOut\"\n        endBalCalc:\n          type: string\n          format: int256\n          description: \"a calculated field -- begBal + amountNet\"\n        reconciliationType:\n          type: string\n          description: \"One of regular, traces, prevdiff-partial, partial-nextdiff, or `partial-partial`\"\n        endBalDiff:\n          type: string\n          format: int256\n          description: \"a calculated field -- endBal - endBalCalc, if non-zero, the reconciliation failed\"\n        reconciled:\n          type: boolean\n          description: \"a calculated field -- true if `endBal === endBalCalc` and `begBal === prevBlkBal`. `false` otherwise.\"\n    name:\n      description: \"an association between a name and address for use throughout TrueBlocks\"\n      type: object\n      properties:\n        tags:\n          type: string\n          example: \"31-Gitcoin:Core\"\n          description: \"colon separated list of tags\"\n        address:\n          type: string\n          format: address\n          example: \"0xabea...fbef\"\n          description: \"the address associated with this name\"\n        name:\n          type: string\n          example: \"zkSync\"\n          description: \"the name associated with this address (retrieved from on-chain data if available)\"\n        symbol:\n          type: string\n          example: \"GTC\"\n          description: \"the symbol for this address (retrieved from on-chain data if available)\"\n        source:\n          type: string\n          example: \"On-chain\"\n          description: \"user supplied source of where this name was found (or on-chain if name is on-chain)\"\n        decimals:\n          type: number\n          format: uint64\n          example: 18\n          description: \"number of decimals retrieved from an ERC20 smart contract, defaults to 18\"\n        description:\n          type: string\n          example: \"any test\"\n          description: \"user supplied description for the address\"\n        deleted:\n          type: boolean\n          description: \"`true` if deleted, `false` otherwise\"\n        isCustom:\n          type: boolean\n          description: \"`true` if the address is a custom address, `false` otherwise\"\n        isPrefund:\n          type: boolean\n          description: \"`true` if the address was one of the prefund addresses, `false` otherwise\"\n        isContract:\n          type: boolean\n          description: \"`true` if the address is a smart contract, `false` otherwise\"\n        isErc20:\n          type: boolean\n          description: \"`true` if the address is an ERC20, `false` otherwise\"\n        isErc721:\n          type: boolean\n          description: \"`true` if the address is an ERC720, `false` otherwise\"\n    listStats:\n      description: \"data of the appropriate type from a single appearance of an address or the count of same\"\n      type: object\n      properties:\n        address:\n          type: string\n          format: address\n          description: \"the address for this count\"\n        nRecords:\n          type: number\n          format: uint64\n          description: \"the number of appearances for the given address\"\n        fileSize:\n          type: number\n          format: uint64\n          description: \"the size of the monitor file containing those appearances\"\n    block:\n      description: \"block data directly from the blockchain\"\n      type: object\n      properties:\n        gasLimit:\n          type: string\n          format: gas\n          example: \"5000\"\n          description: \"the system-wide maximum amount of gas permitted in this block\"\n        hash:\n          type: string\n          format: hash\n          example: \"0xf128...1e98\"\n          description: \"the hash of the current block\"\n        blockNumber:\n          type: number\n          format: blknum\n          example: 10021\n          description: \"the number of the block\"\n        parentHash:\n          type: string\n          format: hash\n          example: \"0x66fc...31c9\"\n          description: \"hash of previous block\"\n        miner:\n          type: string\n          format: address\n          example: \"0xf927...2b13\"\n          description: \"Address of block's winning miner\"\n        difficulty:\n          type: number\n          format: uint64\n          example: 598133194256\n          description: \"the computational difficulty at this block\"\n        timestamp:\n          type: number\n          format: timestamp\n          example: 1438335038\n          description: \"the Unix timestamp of the object\"\n        transactions:\n          type: array\n          items:\n            $ref: \"#/components/schemas/transaction\"\n          description: \"a possibly empty array of transactions or transaction hashes\"\n        baseFeePerGas:\n          type: string\n          format: wei\n          example: \"120911\"\n          description: \"the base fee for this block\"\n        finalized:\n          type: boolean\n          example: true\n          description: \"flag indicating the system considers this data final\"\n        unclesCnt:\n          type: number\n          format: uint64\n          description: \"the number of uncles in this block\"\n    transaction:\n      description: \"the transaction data for a given transaction directly from the blockchain\"\n      type: object\n      properties:\n        gasPrice:\n          type: string\n          format: gas\n          example: \"63525836552\"\n          description: \"the number of wei per unit of gas the sender is willing to spend\"\n        hash:\n          type: string\n          format: hash\n          example: \"0xf128...1e98\"\n          description: \"The hash of the transaction\"\n        blockHash:\n          type: string\n          format: hash\n          example: \"0xc421...fb04\"\n          description: \"The hash of the block containing this transaction\"\n        blockNumber:\n          type: number\n          format: blknum\n          example: 10021\n          description: \"the number of the block\"\n        transactionIndex:\n          type: number\n          format: blknum\n          example: 305\n          description: \"the zero-indexed position of the transaction in the block\"\n        nonce:\n          type: number\n          format: uint64\n          example: 232\n          description: \"sequence number of the transactions sent by the sender\"\n        timestamp:\n          type: number\n          format: timestamp\n          example: 1438335038\n          description: \"the Unix timestamp of the object\"\n        from:\n          type: string\n          format: address\n          description: \"address from which the transaction was sent\"\n        to:\n          type: string\n          format: address\n          description: \"address to which the transaction was sent\"\n        value:\n          type: string\n          format: wei\n          example: \"0\"\n          description: \"the amount of wei sent with this transactions\"\n        gas:\n          type: string\n          format: gas\n          example: \"158660\"\n          description: \"the maximum number of gas allowed for this transaction\"\n        input:\n          type: string\n          format: bytes\n          example: \"0x3d18b912\"\n          description: \"byte data either containing a message or funcational data for a smart contracts. See the --articulate\"\n        receipt:\n          type: object\n          items:\n            $ref: \"#/components/schemas/receipt\"\n        statements:\n          type: array\n          items:\n            $ref: \"#/components/schemas/reconciliation\"\n          description: \"array of reconciliations\"\n        articulatedTx:\n          type: object\n          items:\n            $ref: \"#/components/schemas/function\"\n        compressedTx:\n          type: string\n          example: \"0x3d18b912( )\"\n          description: \"truncated, more readable version of the articulation\"\n        hasToken:\n          type: boolean\n          description: \"`true` if the transaction is token related, `false` otherwise\"\n        finalized:\n          type: boolean\n          example: true\n          description: \"flag indicating the system considers this data final\"\n        extraData:\n          type: string\n        isError:\n          type: boolean\n        date:\n          type: string\n          format: date\n    receipt:\n      description: \"receipt data for a given transaction directly from the blockchain\"\n      type: object\n      properties:\n        status:\n          type: number\n          format: uint32\n          description: \"`1` on transaction suceess, `null` if tx preceeds Byzantium, `0` otherwise\"\n        contractAddress:\n          type: string\n          format: address\n          description: \"the address of the newly created contract, if any\"\n        gasUsed:\n          type: string\n          format: gas\n          description: \"the amount of gas actually used by the transaction\"\n        logs:\n          type: array\n          items:\n            $ref: \"#/components/schemas/log\"\n          description: \"a possibly empty array of logs\"\n    log:\n      description: \"log data for a given transaction directly from the blockchain\"\n      type: object\n      properties:\n        blockNumber:\n          type: number\n          format: blknum\n          example: 10021\n          description: \"the number of the block\"\n        transactionIndex:\n          type: number\n          format: blknum\n          example: 305\n          description: \"the zero-indexed position of the transaction in the block\"\n        logIndex:\n          type: number\n          format: blknum\n          example: 354\n          description: \"the zero-indexed position of this log relative to the block\"\n        timestamp:\n          type: number\n          format: timestamp\n          description: \"the timestamp of the block this log appears in\"\n        address:\n          type: string\n          format: address\n          example: \"0xf503...179b\"\n          description: \"the smart contract that emitted this log\"\n        topics:\n          type: array\n          items:\n            $ref: \"#/components/schemas/topic\"\n          description: \"The first topic hashes event signature of the log, up to 3 additional index parameters may appear\"\n        data:\n          type: string\n          format: bytes\n          example: \"0x0000...3ff6\"\n          description: \"any remaining un-indexed parameters to the event\"\n        articulatedLog:\n          type: object\n          items:\n            $ref: \"#/components/schemas/function\"\n          description: \"a human-readable version of the topic and data fields\"\n        compressedLog:\n          type: string\n          example: \"Transfer(0xcfa...9f54...\"\n          description: \"a truncated, more readable version of the articulation\"\n    trace:\n      description: \"trace data for a given transaction directly from the blockchain\"\n      type: object\n      properties:\n        blockHash:\n          type: string\n          format: hash\n          example: \"0xf128...1e98\"\n          description: \"The hash of the block containing this trace\"\n        blockNumber:\n          type: number\n          format: blknum\n          example: 10021\n          description: \"the number of the block\"\n        transactionHash:\n          type: string\n          format: hash\n          description: \"the transaction's hash containing this trace\"\n        transactionIndex:\n          type: number\n          format: blknum\n          example: 305\n          description: \"the zero-indexed position of the transaction in the block\"\n        traceAddress:\n          type: array\n          items:\n            $ref: \"#/components/schemas/string\"\n          description: \"a particular trace's address in the trace tree\"\n        subtraces:\n          type: number\n          format: uint64\n          description: \"the number of children traces that the trace hash\"\n        type:\n          type: string\n          description: \"the type of the trace\"\n        action:\n          type: object\n          items:\n            $ref: \"#/components/schemas/traceAction\"\n          description: \"the trace action for this trace\"\n        result:\n          type: object\n          items:\n            $ref: \"#/components/schemas/traceResult\"\n          description: \"the trace result of this trace\"\n        articulatedTrace:\n          type: object\n          items:\n            $ref: \"#/components/schemas/function\"\n          description: \"human readable version of the trace action input data\"\n        compressedTrace:\n          type: string\n          description: \"a compressed string version of the articulated trace\"\n    traceAction:\n      description: \"the trace action data for a given trace directly from the blockchain\"\n      type: object\n      properties:\n        from:\n          type: string\n          format: address\n          description: \"address from which the trace was sent\"\n        to:\n          type: string\n          format: address\n          description: \"address to which the trace was sent\"\n        gas:\n          type: string\n          format: gas\n          example: \"158660\"\n          description: \"the maximum number of gas allowed for this trace\"\n        input:\n          type: string\n          format: bytes\n          description: \"an encoded version of the function call\"\n        callType:\n          type: string\n          description: \"the type of call\"\n        refundAddress:\n          type: string\n          format: address\n          example: \"0xf503...179b\"\n          description: \"if the call type is self-destruct, the address to which the refund is sent\"\n    traceResult:\n      description: \"the trace result data for a given trace directly from the blockchain\"\n      type: object\n      properties:\n        newContract:\n          type: string\n          format: address\n          example: \"0xf503...179b\"\n          description: \"Address of new contract, if any\"\n        code:\n          type: string\n          format: bytes\n          description: \"if this trace is creating a new smart contract, the byte code of that contract\"\n        gasUsed:\n          type: string\n          format: gas\n          description: \"the amount of gas used by this trace\"\n        output:\n          type: string\n          format: bytes\n          description: \"the result of the call of this trace\"\n    datedBlock:\n      description: \"An indentified block named for convienience\"\n      type: object\n      properties:\n        blockNumber:\n          type: number\n          format: blknum\n          example: 10021\n          description: \"the number of the block\"\n        timestamp:\n          type: number\n          format: timestamp\n          example: 1438335038\n          description: \"the Unix timestamp of the block\"\n        date:\n          type: string\n          format: date\n          example: \"2015-07-30 15:34:53 UTC\"\n          description: \"Human readable version of timestamp\"\n    state:\n      description: \"the on-chain state of a given address\"\n      type: object\n      properties:\n        blockNumber:\n          type: number\n          format: blknum\n          example: 10021\n          description: \"the block number at which this state was taken\"\n        balance:\n          type: string\n          format: wei\n          example: \"258843698360318500\"\n          description: \"the balance at the address at the given block height\"\n        nonce:\n          type: number\n          format: uint64\n          example: 115\n          description: \"the nonce of the address at the given block height\"\n        code:\n          type: string\n          format: bytes\n          example: \"0x\"\n          description: \"the byte code at the address (if this is a smart contract)\"\n        storage:\n          type: string\n          format: bytes\n          example: \"0x0000...0000\"\n          description: \"this field is un-implemented and current returns the first storage location in a smart contract\"\n        address:\n          type: string\n          format: address\n          example: \"0xa1e4...63b4\"\n          description: \"the address of the state being queried\"\n        deployed:\n          type: number\n          format: blknum\n          example: 8901011\n          description: \"the block number at which this smart contract was deployed (if a smart contact)\"\n        accttype:\n          type: string\n          example: \"one of 'EOA' or 'Contract'\"\n          description: \"the type of the address at the given block\"\n    result:\n      description: \"the result of a call to a smart contract\"\n      type: object\n      properties:\n        blockNumber:\n          type: number\n          format: blknum\n          example: 10021\n          description: \"the block number at which this call was made\"\n        address:\n          type: string\n          format: address\n          example: \"0xa1e4...63b4\"\n          description: \"the address of contract being called\"\n        signature:\n          type: string\n          description: \"the canonical signature of the interface\"\n        encoding:\n          type: string\n          description: \"the encoding for the function call\"\n        bytes:\n          type: string\n          description: \"the bytes data following the encoding of the call\"\n        callResult:\n          type: object\n          items:\n            $ref: \"#/components/schemas/function\"\n          description: \"the result of the call to the contract\"\n        compressedResult:\n          type: string\n          description: \"the compressed version of the result of the call to the contract\"\n        deployed:\n          type: number\n          format: blknum\n          example: 8901011\n          description: \"the block number at which this smart contract was deployed (if a smart contact)\"\n    token:\n      description: \"on-chain token related data for a give address at a given block height\"\n      type: object\n      properties:\n        holder:\n          type: string\n          format: address\n          example: \"0x2910...63d2\"\n          description: \"the address for which we are reporting the token balance\"\n        balance:\n          type: string\n          format: wei\n          example: \"258843698360318500\"\n          description: \"the balance at the address at the given block height\"\n        address:\n          type: string\n          format: address\n          example: \"0xa1e4...63b4\"\n          description: \"description: the address of the token contract being queried\"\n        name:\n          type: string\n          example: \"The DAO Original\"\n          description: \"the name of the token contract, if available\"\n        symbol:\n          type: string\n          example: \"GTC\"\n          description: \"the symbol for this token contract\"\n        decimals:\n          type: number\n          format: uint64\n          example: 18\n          description: \"the number of decimals for the token contract\"\n        isContract:\n          type: boolean\n          description: \"`true` if the address is a smart contract, `false` otherwise\"\n        isErc20:\n          type: boolean\n          description: \"`true` if the address is an ERC20, `false` otherwise\"\n        isErc721:\n          type: boolean\n          description: \"`true` if the address is an ERC720, `false` otherwise\"\n    status:\n      description: \"This data model carries information about the TrueBlocks system including both the API server and the local binary caches\"\n      type: object\n      properties:\n        clientVersion:\n          type: string\n          description: \"the version string as reported by the rpcProvider\"\n        clientIds:\n          type: string\n          description: \"netword_id and chain_id from the rpcProvider\"\n        trueblocksVersion:\n          type: string\n          description: \"the TrueBlocks version string\"\n        rpcProvider:\n          type: string\n          description: \"the current rpcProvider\"\n        configPath:\n          type: string\n          description: \"the path to config files\"\n        cachePath:\n          type: string\n          description: \"the path to the local binary caches\"\n        indexPath:\n          type: string\n          description: \"the path to the local binary indexes\"\n        host:\n          type: string\n          description: \"the host portion of the local API server\"\n        isTesting:\n          type: boolean\n          description: \"`true` if the server is running in test mode\"\n        isApi:\n          type: boolean\n          description: \"`true` if the server is running in API mode\"\n        isDocker:\n          type: boolean\n          description: \"`true` if running under a docker image\"\n        isScraping:\n          type: boolean\n          description: \"`true` if the index scraper is running\"\n        isArchive:\n          type: boolean\n          description: \"`true` if the rpcProvider is an archive node\"\n        isTracing:\n          type: boolean\n          description: \"`true` if the rpcProvider provides Parity traces\"\n        hasEskey:\n          type: boolean\n          description: \"`true` if an EtherScan key is present\"\n        hasPinkey:\n          type: boolean\n          description: \"`true` if a Pinata API key is present\"\n        ts:\n          type: number\n          format: timestamp\n          description: \"the timestamp when this status data was produced\"\n        chains:\n          type: array\n          items:\n            $ref: \"#/components/schemas/chain\"\n        caches:\n          type: array\n          items:\n            $ref: \"#/components/schemas/cache\"\n          description: \"a collection of information concerning the binary caches\"\n    cache:\n      description: \"The cache data model carries information about the various local binary caches\"\n      type: object\n      properties:\n        type:\n          type: string\n          description: \"the type of the cache (one of the nine different types)\"\n        path:\n          type: string\n          description: \"the physical path to the cache on the hard drive\"\n        nFiles:\n          type: number\n          format: uint64\n          description: \"the number of files in the cache\"\n        nFolders:\n          type: number\n          format: uint64\n          description: \"the number of subfolders in the cache\"\n        sizeInBytes:\n          type: number\n          format: uint64\n          description: \"the size of the cache in bytes\"\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/cacheEntry\"\n          description: \"an array of cache items\"\n    pinnedChunk:\n      description: \"the IPFS hashes of the index chunk and its associated Bloom filter for the given block range\"\n      type: object\n      properties:\n        fileName:\n          type: string\n          example: \"013142464-013145212\"\n          description: \"for each chunk, the range of blocks contained in that chunk\"\n        bloomHash:\n          type: string\n          format: ipfshash\n          example: \"QmXHjjY...HDqvWT\"\n          description: \"the IPFS hash of the bloom filter at that range\"\n        indexHash:\n          type: string\n          format: ipfshash\n          example: \"QmTbYpR...qWLj44\"\n          description: \"the IPFS hash of the index chunk at that range\"\n        firstApp:\n          type: number\n          format: blknum\n          description: \"the first appearance in the chunk\"\n        latestApp:\n          type: number\n          format: blknum\n          description: \"the latest appearance in the chunk\"\n    manifest:\n      description: \"a manifest of the IPFS hashes created for the unchained index\"\n      type: object\n      properties:\n        indexFormat:\n          type: string\n          description: \"IPFS cid of file describing the file format of an index chunk\"\n        bloomFormat:\n          type: string\n          description: \"IPFS cid of file describing the associated bloom filter\"\n        firstPin:\n          type: number\n          format: blknum\n          description: \"the block number of the first pin in the manifest (always zero)\"\n        lastPin:\n          type: number\n          format: blknum\n          description: \"the most recent block included in this manifest\"\n        pins:\n          type: array\n          items:\n            $ref: \"#/components/schemas/pinnedChunk\"\n          description: \"a list of all the pins in the unchained index\"\n    chain:\n      description: \"The chain data model carries information about configured chains\"\n      type: object\n      properties:\n        chain:\n          type: string\n          description: \"The common name of the chain\"\n        chainId:\n          type: number\n          format: uint64\n          description: \"The chain id as reported by the RPC\"\n        symbol:\n          type: string\n          description: \"The symbol of the base currency on the chain\"\n        rpcProvider:\n          type: string\n          description: \"A valid RPC provider for the chain\"\n        apiProvider:\n          type: string\n          description: \"A valid API provider for the explorer\"\n        remoteExplorer:\n          type: string\n          description: \"A remote explorer for the chain such as EtherScan\"\n        localExplorer:\n          type: string\n          description: \"The local explorer for the chain (typically TrueBlocks Explorer)\"\n        pinGateway:\n          type: string\n          description: \"An IPFS gateway for pinning the index if enabled\"\n    cacheEntry:\n      description: \"an entry in one of the caches\"\n      type: object\n      properties:\n        address:\n          type: string\n          format: address\n        name:\n          type: string\n    function:\n      description: \"a human readable representation of a Solidity function call or event\"\n      type: object\n      properties:\n        name:\n          type: string\n          description: \"the name of the interface\"\n        type:\n          type: string\n          description: \"the type of the interface, either 'event' or 'function'\"\n        signature:\n          type: string\n          description: \"the canonical signature of the interface\"\n        encoding:\n          type: string\n          description: \"the signature encoded with keccak\"\n        inputs:\n          type: array\n          items:\n            $ref: \"#/components/schemas/parameter\"\n          description: \"the input parameters to the function, if any\"\n        outputs:\n          type: array\n          items:\n            $ref: \"#/components/schemas/parameter\"\n          description: \"the output parameters to the function, if any\"\n    parameter:\n      description: \"an input or output paramter to a function\"\n      type: object\n      properties:\n        type:\n          type: string\n          description: \"the type of this parameter\"\n        name:\n          type: string\n          description: \"the name of this parameter\"\n        strDefault:\n          type: string\n          description: \"the default value of this parameter, if any\"\n        indexed:\n          type: boolean\n          description: \"`true` if this parameter is indexed\"\n        internalType:\n          type: string\n          description: \"for composite types, the internal type of the parameter\"\n        components:\n          type: array\n          items:\n            $ref: \"#/components/schemas/parameter\"\n          description: \"for composite types, the parameters making up the composite\"\n    quote:\n      description: \"the closing price of Ether in USD at a particular moment\"\n      type: object\n      properties:\n        timestamp:\n          type: number\n          format: timestamp\n          example: 1438270144\n          description: \"the timestamp of this quote\"\n        close:\n          type: number\n          format: double\n          example: 1240.10\n          description: \"price of the asset in US dollars\"\n        date:\n          type: string\n          format: date\n          example: \"2018-09-30 01:15:17 UTC\"\n          description: \"the date of the associated timestamp\"\n        name:\n          type: string\n          example: \"Byzantium\"\n          description: \"the name of the block for some named 'special' blocks\"\n    response:\n      required:\n        - result\n      type: object\n      properties:\n        data:\n          type: object\n        error:\n          type: array\n          example:\n            - error 1\n            - error 2\n          items:\n            type: string\n    hash:\n      type: string\n      format: hash\n      description: \"The 32-byte hash\"\n      example: \"0xf128...1e98\"\n    string:\n      type: string\n    topic:\n      type: string\n      format: bytes\n      description: \"One of four 32-byte topics of a log\"\n      example: \"0xf128...1e98\"\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"log\": parse schema: property \"articulatedLog\": parse schema: object cannot contain 'items' field"
}