{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aws-samples/aws-serverless-saas-workshop"
		},
		"file": {
			"name": "tenant-template.yaml",
			"size": 0,
			"path": "Solution/Lab3/server/tenant-template.yaml",
			"byteSize": 32350,
			"content": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: \u003e\n  Serverless SaaS Reference Architecture \n\nGlobals:\n  Function:\n    Timeout: 29\n    Layers:\n      - !Sub \"arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14\"\n    Environment:\n        Variables:\n          LOG_LEVEL: DEBUG         \n          POWERTOOLS_METRICS_NAMESPACE: \"ServerlessSaaS\"\n          \nParameters:\n  StageName:\n    Type: String\n    Default: \"prod\"\n    Description: \"Stage Name for the api\"\nResources: \n  ServerlessSaaSLayers:\n    Type: AWS::Serverless::LayerVersion\n    Properties:\n      LayerName: serverless-saas-dependencies-pooled\n      Description: Utilities for project\n      ContentUri: layers/\n      CompatibleRuntimes:\n        - python3.8          \n      LicenseInfo: 'MIT'\n      RetentionPolicy: Retain      \n    Metadata:\n      BuildMethod: python3.8   \n  \n  ProductTable:\n    Type: AWS::DynamoDB::Table\n    Properties: \n      AttributeDefinitions:\n        - AttributeName: shardId\n          AttributeType: S          \n        - AttributeName: productId\n          AttributeType: S          \n      KeySchema:\n        - AttributeName: shardId\n          KeyType: HASH  \n        - AttributeName: productId\n          KeyType: RANGE  \n      ProvisionedThroughput: \n        ReadCapacityUnits: 5\n        WriteCapacityUnits: 5\n      TableName: Product-pooled\n\n  OrderTable:\n    Type: AWS::DynamoDB::Table\n    Properties: \n      AttributeDefinitions:\n        - AttributeName: shardId\n          AttributeType: S \n        - AttributeName: orderId\n          AttributeType: S          \n      KeySchema:\n        - AttributeName: shardId\n          KeyType: HASH \n        - AttributeName: orderId\n          KeyType: RANGE  \n      ProvisionedThroughput: \n        ReadCapacityUnits: 5\n        WriteCapacityUnits: 5\n      TableName: Order-pooled\n\n  ProductFunctionExecutionRole:\n    Type: AWS::IAM::Role     \n    Properties:\n      RoleName: pooled-product-function-execution-role\n      Path: '/'\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      ManagedPolicyArns: \n        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy    \n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess\n      Policies:\n        - PolicyName: pooled-product-function-policy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:              \n              - Effect: Allow\n                Action:\n                  - dynamodb:GetItem\n                  - dynamodb:UpdateItem\n                  - dynamodb:PutItem\n                  - dynamodb:DeleteItem\n                  - dynamodb:Query\n                Resource:\n                  - !GetAtt ProductTable.Arn\n             \n  GetProductFunction:\n    Type: AWS::Serverless::Function \n    DependsOn: ProductFunctionExecutionRole \n    Properties:\n      CodeUri: ProductService/\n      Handler: product_service.get_product\n      Runtime: python3.8  \n      Tracing: Active\n      Role: !GetAtt ProductFunctionExecutionRole.Arn\n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: \"ProductService\"\n          PRODUCT_TABLE_NAME: !Ref ProductTable      \n  \n  GetProductsFunction:\n    Type: AWS::Serverless::Function \n    DependsOn: ProductFunctionExecutionRole \n    Properties:\n      CodeUri: ProductService/\n      Handler: product_service.get_products\n      Runtime: python3.8  \n      Tracing: Active\n      Role: !GetAtt ProductFunctionExecutionRole.Arn\n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: \"ProductService\"\n          PRODUCT_TABLE_NAME: !Ref ProductTable\n      \n  CreateProductFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: ProductFunctionExecutionRole \n    Properties:\n      CodeUri: ProductService/\n      Handler: product_service.create_product\n      Runtime: python3.8  \n      Tracing: Active \n      Role: !GetAtt ProductFunctionExecutionRole.Arn \n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: \"ProductService\"\n          PRODUCT_TABLE_NAME: !Ref ProductTable\n\n  UpdateProductFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: ProductFunctionExecutionRole \n    Properties:\n      CodeUri: ProductService/\n      Handler: product_service.update_product\n      Runtime: python3.8 \n      Tracing: Active\n      Role: !GetAtt ProductFunctionExecutionRole.Arn \n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: \"ProductService\"\n          PRODUCT_TABLE_NAME: !Ref ProductTable\n\n  DeleteProductFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: ProductFunctionExecutionRole \n    Properties:\n      CodeUri: ProductService/\n      Handler: product_service.delete_product\n      Runtime: python3.8 \n      Tracing: Active\n      Role: !GetAtt ProductFunctionExecutionRole.Arn \n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: \"ProductService\"\n          PRODUCT_TABLE_NAME: !Ref ProductTable\n\n  OrderFunctionExecutionRole:\n    Type: AWS::IAM::Role     \n    Properties:\n      RoleName: pooled-order-function-execution-role\n      Path: '/'\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      ManagedPolicyArns: \n        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy    \n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess\n      Policies:\n        - PolicyName: pooled-order-function-policy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:              \n              - Effect: Allow\n                Action:\n                  - dynamodb:GetItem\n                  - dynamodb:UpdateItem\n                  - dynamodb:PutItem\n                  - dynamodb:DeleteItem\n                  - dynamodb:Query\n                Resource:\n                  - !GetAtt OrderTable.Arn\n                \n  GetOrdersFunction:\n    Type: AWS::Serverless::Function \n    DependsOn: OrderFunctionExecutionRole \n    Properties:\n      CodeUri: OrderService/\n      Handler: order_service.get_orders\n      Runtime: python3.8  \n      Tracing: Active\n      Role: !GetAtt OrderFunctionExecutionRole.Arn\n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: \"OrderService\"\n          ORDER_TABLE_NAME: !Ref OrderTable\n      \n  GetOrderFunction:\n    Type: AWS::Serverless::Function \n    DependsOn: OrderFunctionExecutionRole \n    Properties:\n      CodeUri: OrderService/\n      Handler: order_service.get_order\n      Runtime: python3.8  \n      Tracing: Active\n      Role: !GetAtt OrderFunctionExecutionRole.Arn\n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: \"OrderService\"\n          ORDER_TABLE_NAME: !Ref OrderTable\n      \n  CreateOrderFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: OrderFunctionExecutionRole \n    Properties:\n      CodeUri: OrderService/\n      Handler: order_service.create_order\n      Runtime: python3.8  \n      Tracing: Active \n      Role: !GetAtt OrderFunctionExecutionRole.Arn \n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: \"OrderService\"\n          ORDER_TABLE_NAME: !Ref OrderTable\n  \n  UpdateOrderFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: OrderFunctionExecutionRole \n    Properties:\n      CodeUri: OrderService/\n      Handler: order_service.update_order\n      Runtime: python3.8 \n      Tracing: Active\n      Role: !GetAtt OrderFunctionExecutionRole.Arn \n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: \"OrderService\"\n          ORDER_TABLE_NAME: !Ref OrderTable\n  \n  DeleteOrderFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: OrderFunctionExecutionRole \n    Properties:\n      CodeUri: OrderService/\n      Handler: order_service.delete_order\n      Runtime: python3.8 \n      Tracing: Active\n      Role: !GetAtt OrderFunctionExecutionRole.Arn \n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: \"OrderService\"\n          ORDER_TABLE_NAME: !Ref OrderTable\n  \n  #Tenant Authorizer\n  TenantAuthorizerExecutionRole:\n    Type: AWS::IAM::Role     \n    Properties:\n      RoleName: tenant-authorizer-execution-role\n      Path: '/'\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      ManagedPolicyArns: \n        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy    \n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess   \n      Policies:      \n        - PolicyName: tenant-authorizer-execution-policy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - cognito-idp:List*                                    \n                Resource:\n                  - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*    \n    \n  BusinessServicesAuthorizerFunction:\n    Type: AWS::Serverless::Function \n    DependsOn: TenantAuthorizerExecutionRole\n    Properties:\n      CodeUri: Resources/\n      Handler: tenant_authorizer.lambda_handler\n      Runtime: python3.8\n      Role: !GetAtt TenantAuthorizerExecutionRole.Arn\n      MemorySize: 256\n      Tracing: Active\n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          TENANT_USER_POOL: !ImportValue Serverless-SaaS-CognitoTenantUserPoolId\n          TENANT_APP_CLIENT: !ImportValue Serverless-SaaS-CognitoTenantAppClientId\n          \n  ApiGatewayAccessLogs:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: /aws/api-gateway/access-logs-serverless-saas-tenant-api-pooled\n      RetentionInDays: 30\n  ApiGatewayTenantApi:\n    Type: AWS::Serverless::Api\n    Properties:\n      MethodSettings:\n        - DataTraceEnabled: False\n          LoggingLevel: INFO\n          MetricsEnabled: True\n          ResourcePath: '/*' \n          HttpMethod: '*' \n      AccessLogSetting:\n        DestinationArn: !GetAtt ApiGatewayAccessLogs.Arn\n        Format: '{ \"requestId\":\"$context.requestId\", \"ip\": \"$context.identity.sourceIp\", \"caller\":\"$context.identity.caller\", \"user\":\"$context.identity.user\",\"requestTime\":\"$context.requestTime\", \"httpMethod\":\"$context.httpMethod\",\"resourcePath\":\"$context.resourcePath\", \"status\":\"$context.status\",\"protocol\":\"$context.protocol\", \"responseLength\":\"$context.responseLength\" }'\n      TracingEnabled: True\n      DefinitionBody:\n        openapi: 3.0.1\n        info:\n          title: 'pooled-serverless-saas-tenant-api'\n        basePath: !Join ['', ['/', !Ref StageName]]\n        x-amazon-apigateway-api-key-source : \"AUTHORIZER\"\n        schemes:\n          - https\n        paths:\n          /order/{id}:\n            get:\n              summary: Returns a order\n              description: Return a order by a order id.\n              produces:\n                - application/json\n              parameters:\n                - name: id\n                  in: path\n                  required: true\n                  type: string\n              responses: {}\n              security:        \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !GetAtt GetOrderFunction.Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy \n            put:              \n              produces:\n                - application/json\n              responses: {}\n              security:      \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !GetAtt UpdateOrderFunction.Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy     \n            delete:\n              summary: Deletes a order\n              description: Deletes a order by a order id.\n              produces:\n                - application/json\n              parameters:\n                - name: id\n                  in: path\n                  required: true\n                  type: string\n              responses: {}\n              security:       \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !GetAtt DeleteOrderFunction.Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                type: mock      \n          /orders:\n            get:\n              summary: Returns all orders\n              description: Returns all orders.\n              produces:\n                - application/json\n              responses: {}\n              security:     \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !GetAtt GetOrdersFunction.Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                type: mock                              \n          /order:\n            post:              \n              produces:\n                - application/json\n              responses: {}\n              security:         \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !GetAtt CreateOrderFunction.Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                type: mock     \n          /product/{id}:\n            get:\n              summary: Returns a product\n              description: Return a product by a product id.\n              produces:\n                - application/json\n              parameters:\n                - name: id\n                  in: path\n                  required: true\n                  type: string\n              responses: {}\n              security:  \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !GetAtt GetProductFunction.Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy \n            put:              \n              produces:\n                - application/json\n              responses: {}\n              security: \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !GetAtt UpdateProductFunction.Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy     \n            delete:\n              summary: Deletes a product\n              description: Deletes a product by a product id.\n              produces:\n                - application/json\n              parameters:\n                - name: id\n                  in: path\n                  required: true\n                  type: string\n              responses: {}\n              security:     \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !GetAtt DeleteProductFunction.Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy \n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                type: mock      \n          /products:\n            get:\n              summary: Returns all products\n              description: Returns all products.\n              produces:\n                - application/json\n              responses: {}\n              security: \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !GetAtt GetProductsFunction.Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy  \n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                type: mock                           \n          /product:\n            post:              \n              produces:\n                - application/json\n              responses: {}\n              security:   \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !GetAtt CreateProductFunction.Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy   \n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                type: mock                                    \n        components:\n          securitySchemes:                    \n            Authorizer:\n              type: \"apiKey\"\n              name: \"Authorization\"\n              in: \"header\"\n              x-amazon-apigateway-authtype: \"custom\"\n              x-amazon-apigateway-authorizer:\n                authorizerUri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    - !GetAtt BusinessServicesAuthorizerFunction.Arn                      \n                    - /invocations\n                authorizerResultTtlInSeconds: 30\n                type: \"token\"\n      StageName: !Ref StageName\n  \n  GetProductsLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt GetProductsFunction.Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\n        \"\", [\n          \"arn:aws:execute-api:\", \n          {\"Ref\": \"AWS::Region\"}, \":\", \n          {\"Ref\": \"AWS::AccountId\"}, \":\", \n          !Ref ApiGatewayTenantApi, \"/*/*/*\"\n          ]\n        ] \n      \n  GetProductLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt \n        - GetProductFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\n        \"\", [\n          \"arn:aws:execute-api:\", \n          {\"Ref\": \"AWS::Region\"}, \":\", \n          {\"Ref\": \"AWS::AccountId\"}, \":\", \n          !Ref ApiGatewayTenantApi, \"/*/*/*\"\n          ]\n        ]  \n  CreateProductLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt \n        - CreateProductFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\n        \"\", [\n          \"arn:aws:execute-api:\", \n          {\"Ref\": \"AWS::Region\"}, \":\", \n          {\"Ref\": \"AWS::AccountId\"}, \":\", \n          !Ref ApiGatewayTenantApi, \"/*/*/*\"\n          ]\n        ]    \n  UpdateProductLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt \n        - UpdateProductFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\n        \"\", [\n          \"arn:aws:execute-api:\", \n          {\"Ref\": \"AWS::Region\"}, \":\", \n          {\"Ref\": \"AWS::AccountId\"}, \":\", \n          !Ref ApiGatewayTenantApi, \"/*/*/*\"\n          ]\n        ]         \n  DeleteProductLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt \n        - DeleteProductFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\n        \"\", [\n          \"arn:aws:execute-api:\", \n          {\"Ref\": \"AWS::Region\"}, \":\", \n          {\"Ref\": \"AWS::AccountId\"}, \":\", \n          !Ref ApiGatewayTenantApi, \"/*/*/*\"\n          ]\n        ]  \n  \n  GetOrdersLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt \n        - GetOrdersFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\n        \"\", [\n          \"arn:aws:execute-api:\", \n          {\"Ref\": \"AWS::Region\"}, \":\", \n          {\"Ref\": \"AWS::AccountId\"}, \":\", \n          !Ref ApiGatewayTenantApi, \"/*/*/*\"\n          ]\n        ]      \n\n  GetOrderLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt \n        - GetOrderFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\n        \"\", [\n          \"arn:aws:execute-api:\", \n          {\"Ref\": \"AWS::Region\"}, \":\", \n          {\"Ref\": \"AWS::AccountId\"}, \":\", \n          !Ref ApiGatewayTenantApi, \"/*/*/*\"\n          ]\n        ]  \n  CreateOrderLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt \n        - CreateOrderFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\n        \"\", [\n          \"arn:aws:execute-api:\", \n          {\"Ref\": \"AWS::Region\"}, \":\", \n          {\"Ref\": \"AWS::AccountId\"}, \":\", \n          !Ref ApiGatewayTenantApi, \"/*/*/*\"\n          ]\n        ]    \n  UpdateOrderLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt \n        - UpdateOrderFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\n        \"\", [\n          \"arn:aws:execute-api:\", \n          {\"Ref\": \"AWS::Region\"}, \":\", \n          {\"Ref\": \"AWS::AccountId\"}, \":\", \n          !Ref ApiGatewayTenantApi, \"/*/*/*\"\n          ]\n        ]         \n  DeleteOrderLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt \n        - DeleteOrderFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\n        \"\", [\n          \"arn:aws:execute-api:\", \n          {\"Ref\": \"AWS::Region\"}, \":\", \n          {\"Ref\": \"AWS::AccountId\"}, \":\", \n          !Ref ApiGatewayTenantApi, \"/*/*/*\"\n          ]\n        ]            \n\n  AuthorizerLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt BusinessServicesAuthorizerFunction.Arn     \n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\"\", [\"arn:aws:execute-api:\", !Ref \"AWS::Region\", \":\", !Ref \"AWS::AccountId\", \":\", !Ref ApiGatewayTenantApi, \"/*/*\" ]]\n      \n  \nOutputs:\n  TenantApiGatewayId:\n    Description: Id for Tenant API Gateway\n    Value: !Ref ApiGatewayTenantApi\n  TenantAPI:\n    Description: \"API Gateway endpoint URL for Tenant API\"\n    Value: !Join ['', [!Sub \"https://${ApiGatewayTenantApi}.execute-api.${AWS::Region}.amazonaws.com/\", !Ref StageName]]",
			"canonicalURL": "/github.com/aws-samples/aws-serverless-saas-workshop@760968b1de5901e15b55bae18d4a47f6b5e87f61/-/blob/Solution/Lab3/server/tenant-template.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aws-samples/aws-serverless-saas-workshop/blob/760968b1de5901e15b55bae18d4a47f6b5e87f61/Solution/Lab3/server/tenant-template.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse version: at Solution/Lab3/server/tenant-template.yaml:4:1: invalid version: invalid major version: strconv.Atoi: parsing \"\": invalid syntax"
}