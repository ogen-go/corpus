{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dcsaorg/DCSA-OpenAPI"
		},
		"file": {
			"name": "event_domain_v2.0.2.yaml",
			"size": 0,
			"path": "domain/event/event_domain_v2.0.2.yaml",
			"byteSize": 66849,
			"content": "# OpenAPI version identifier - required for OpenAPI 3.0 domains\nopenapi: 3.0.3\n\n#######################\n# Optional info section\n#######################\ninfo:\n  title: DCSA - Event Components\n  description: |\n    Common components for Events. This domain is central for all Event Hubs and `/v?/events` endPoints (used for polling) in APIs. It is used by\n    - [T\u0026T (Track \u0026 Trace)](https://app.swaggerhub.com/apis-docs/dcsaorg/DCSA_TNT). Event hub for the following Event types:\n      - TransportEvent\n      - EquipmentEvent\n      - ShipmentEvent\n    - Documentation Hub used by [EBL (Electronic Bill of Lading)](https://app.swaggerhub.com/apis/dcsaorg/DCSA_EBL) and [BKG (Booking)](https://app.swaggerhub.com/apis/dcsaorg/DCSA_BKG). Event hub for the following Event types:\n      - ShipmentEvent\n    - JIT Hub used by [JIT (Just in Time Portcalls)](https://app.swaggerhub.com/apis/dcsaorg/DCSA_JIT). Event hub for the following Event types:\n      - OperationsEvent\n\n    For a history of changes in this domain - please check [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/domain/event#v202). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  contact:\n    name: Digital Container Shipping Association (DCSA)\n    url: https://dcsa.org\n    email: info@dcsa.org\n  version: 2.0.2\n\ncomponents:\n  parameters:\n\n    ####################\n    ## Header parameters\n    ####################\n\n    apiVersion:\n      in: header\n      name: API-Version\n      required: true\n      schema:\n        type: string\n        example: 1.0.0\n      description: |\n        SemVer used to indicate the version of the contract (API version) returned.\n    notificationSignature:\n      in: header\n      name: Notification-Signature\n      required: true\n      description: |\n        the Notification-Signature is used to sign the notification. The header has the following format: \n\n        \u003ci\u003eNotification-Signature\u0026#58; \u0026lt;signature-type\u0026gt;=\u0026lt;signature\u0026gt;\u003c/i\u003e\n\n        The \u003ci\u003e\u0026lt;signature-type\u0026gt;\u003c/i\u003e part is a keyword that determines which algorithm was used to compute the signature.\n\n        The signature \u003cb\u003eMUST\u003c/b\u003e cover the entire request body of the request including whitespace and newlines. The content \u003cb\u003eMUST\u003c/b\u003e decoded into bytes using the UTF-8 encoding before computing the signature. None of the HTTP headers nor the request URL is covered by the signature.\n        \n        Supported signature typies are\u0026#58;\n        - sha256\n        \n        Example\u0026#58; sha256=ae688919f5e31f4c210ca6af362ce4d9ed87acfb51c1721a8507ee395de5e2de\n      schema:\n        type: string\n        pattern: '\\s*([a-zA-Z0-9-_+]+=[0-9a-fA-F]+)\\s*'\n        example: 'sha256=ae688919f5e31f4c210ca6af362ce4d9ed87acfb51c1721a8507ee395de5e2de'\n    signatureHeader:\n      in: header\n      name: Signature\n      required: true\n      description: |\n        The signature certifying the request originates from the carrier.\n      deprecated: true\n      schema:\n        properties:\n          keyId:\n            type: string\n            format: uuid\n            example: 4fb682bc-3cd1-43a9-a23a-618a61bd87ca\n          created:\n            type: integer\n            example: 1591960384 \n          headers:\n            type: string\n            example: '(request-target) (created) date host'\n          signature:\n            type: string\n            example: aGkgZnJvbSBkZW5tYXJr\n    subscriptionIDHeader:\n      in: header\n      name: Subscription-ID\n      required: true\n      description: 'The ID of the subscription triggering the event being sent.'\n      schema:\n        type: string\n        format: uuid\n        example: b80d923d-e8ac-4c34-9506-55d3de347034\n\n    #################\n    # Path parameters\n    #################\n\n    eventID:\n      in: path\n      name: eventID\n      schema:\n        $ref: '#/components/schemas/eventID'\n      required: true\n      deprecated: true\n      description: 'The ID of the event to receive'\n      example: 123e4567-e89b-12d3-a456-426614174000\n    subscriptionID:\n      in: path\n      name: subscriptionID\n      schema:\n        $ref: '#/components/schemas/subscriptionID'\n      required: true\n      description: 'The universal unique ID of the subscription.'\n      example: 123e4567-e89b-12d3-a456-426614174000\n\n    ##################\n    # Query parameters\n    ##################\n    \n    bookingReference:\n      in: query\n      name: bookingReference\n      deprecated: true\n      description: Deprecated - use carrierBookingReference instead.\n      required: false\n      schema:\n        type: string\n    carrierBookingReference:\n      in: query\n      name: carrierBookingReference\n      description: |\n        A set of unique characters provided by carrier to identify a booking.\n        \n        Specifying this filter will only return events related to this particular carrierBookingReference.\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/carrierBookingReference'\n    carrierBookingRequestReference:\n      in: query\n      name: carrierBookingRequestReference\n      description: |\n        A set of unique characters provided by carrier to identify a booking during the booking request phase.\n        \n        Specifying this filter will only return events related to this particular carrierBookingRequestReference.\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/carrierBookingRequestReference'\n    carrierVoyageNumber:\n      in: query\n      name: carrierVoyageNumber\n      description: |\n        Filter on the vessel operator-specific identifier of the Voyage.\n        \n        Specifying this filter will only return events related to this particular carrierVoyageNumber.\n        \n        \u003cb\u003eDeprecated:\u003c/b\u003e Use exportVoyageNumber instead\n      required: false\n      deprecated: true\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/carrierVoyageNumber'\n    exportVoyageNumber:\n      in: query\n      name: exportVoyageNumber\n      description: |\n        Filter on the vessel operator-specific identifier of the export Voyage.\n        \n        Specifying this filter will only return events related to this particular exportVoyageNumber.\n        \n        **Deprecated:** Use carrierExportVoyageNumber instead\n      required: false\n      deprecated: true\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/exportVoyageNumber'\n    carrierExportVoyageNumber:\n      in: query\n      name: carrierExportVoyageNumber\n      description: |\n        Filter on the vessel operator-specific identifier of the export Voyage.\n        \n        Specifying this filter will only return events related to this particular `carrierExportVoyageNumber`.\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/carrierExportVoyageNumber'\n    carrierServiceCode:\n      in: query\n      name: carrierServiceCode\n      description: |\n        Filter on the carrier specific identifier of the service.\n        \n        Specifying this filter will only return events related to this particular carrierServiceCode.\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/carrierServiceCode'\n    documentTypeCode:\n      in: query\n      name: documentTypeCode\n      explode: false\n      style: form\n      description: |\n        The documentTypeCode to filter by. Possible values are\n        - CBR (Carrier Booking Request Reference)\n        - BKG (Booking)\n        - SHI (Shipping Instruction)\n        - SRM (Shipment Release Message)\n        - TRD (Transport Document)\n        - ARN (Arrival Notice)\n        - VGM (Verified Gross Mass)\n        - CAS (Cargo Survey)\n        - CUS (Customs Inspection)\n        - DGD (Dangerous Goods Declaration)\n        - OOG (Out of Gauge)\n\n        It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example \u003ci\u003edocumentTypeCode=SHI,TRD\u003c/i\u003e Matches \u003cb\u003eboth\u003c/b\u003e ShippingInstruction (SHI) and TransportDocument (TRD) shipment events.\n\n        More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/documenttypecodes.csv\"\u003eGitHub\u003c/a\u003e.\n        \n        This filter is only relevant when filtering on ShipmentEvents\n      example: SHI,TRD\n      schema:\n        default: CBR,BKG,SHI,SRM,TRD,ARN,VGM,CAS,CUS,DGD,OOG\n\n        type: array\n        items:\n          $ref: '#/components/schemas/documentTypeCode'\n    equipmentEventTypeCode:\n      in: query\n      name: equipmentEventTypeCode\n      explode: false\n      style: form\n      description: |\n        Unique identifier for equipmentEventTypeCode.\n        - LOAD (Loaded)\n        - DISC (Discharged)\n        - GTIN (Gated in)\n        - GTOT (Gated out)\n        - STUF (Stuffed)\n        - STRP (Stripped)\n        - PICK (Pick-up)\n        - DROP (Drop-off)\n        - INSP (Inspected)\n        - RSEA (Resealed)\n        - RMVD (Removed)\n\n        It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example \u003ci\u003eequipmentEventTypeCode=GTIN,GTOT\u003c/i\u003e matches \u003cb\u003eboth\u003c/b\u003e Gated in (GTIN) and Gated out (GTOT) equipment events.\n        \n        Default is all equipmentEventTypeCodes.\n        \n        This filter is only relevant when filtering on EquipmentEvents\n      example: GTIN,GTOT\n      schema:\n        default: LOAD,DISC,GTIN,GTOT,STUF,STRP,PICK,DROP,INSP,RSEA,RMVD\n        type: array\n        items:\n          $ref: '#/components/schemas/equipmentEventTypeCode'\n    equipmentReference:\n      in: query\n      name: equipmentReference\n      description: |\n        Will filter by the unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\n        \n        Specifying this filter will only return events related to this particular equipmentReference\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/equipmentReference'\n    eventClassifierCode:\n      in: query\n      name: eventClassifierCode\n      description: |\n        Unique identifier for eventClassifierCode.\n      #   - ACT (Actual)\n      #   - PLN (Planned)\n      #   - EST (Estimated)\n      #   - REQ (Requested)\n\n      #   It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example \u003ci\u003eeventClassifierCode=EST,ACT\u003c/i\u003e matches \u003cb\u003eboth\u003c/b\u003e Estimated (EST) and Actual (ACT) events.\n        \n      #   Default is all eventClassifierCodes.\n        \n      #   Be aware that not all events support REQ (Requested).\n      # example: EST,ACT\n      schema:\n      #   default: ACT,PLN,EST,REQ\n      #   type: array\n        items:\n          $ref: '#/components/schemas/eventClassifierCode'\n    eventCreatedDateTime:\n      in: query\n      name: eventCreatedDateTime\n      description: |\n        Limit the result based on the creating date of the event. It is possible to use operators on this query parameter. This is done by adding a colon followed by an operator at the end of the queryParameterName (before the =)\n        \n        \u003ci\u003eeventCreatedDateTime\u003cb\u003e\u0026#58;gte\u003c/b\u003e=2021-04-01T14\u0026#58;12\u0026#58;56+01\u0026#58;00\u003c/i\u003e\n        \n        would result in all events created \u0026#8805; 2021-04-01T14\u0026#58;12\u0026#58;56+01\u0026#58;00\n        \n        The following operators are supported\n        - \u0026#58;gte (\u0026#8805; Greater than or equal)\n        - \u0026#58;gt (\u0026#62; Greater than)\n        - \u0026#58;lte (\u0026#8804; Less than or equal)\n        - \u0026#58;lt (\u0026#60; Less than)\n        - \u0026#58;eq (\u0026#61; Equal to)\n        \n        If no operator is provided, a \u003cb\u003estrictly equal\u003c/b\u003e is used (this is equivalent to \u003cb\u003e\u0026#58;eq\u003c/b\u003e operator).\n      required: false\n      example: 2021-04-01T14:12:56+01:00\n      schema:\n        $ref: '#/components/schemas/eventCreatedDateTime'\n    operationsEventTypeCode:\n      in: query\n      name: operationsEventTypeCode\n      description: |\n        The code to identify the type of event that is related to the operation\n        - STRT (Started)\n        - CMPL (Completed)\n        - ARRI (Arrived)\n        - DEPA (Departed)\n        - OMIT (Omitted)\n        - CANC (Cancelled)\n\n        It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example \u003ci\u003eoperationsEventTypeCode=ARRI,CMPL\u003c/i\u003e matches \u003cb\u003eboth\u003c/b\u003e Arrived (ARRI) and Completed (CMPL) operations events.\n        \n        Default is all operationsEventTypeCodes.\n      example: ARRI,CMPL\n      schema:\n        default: STRT,CMPL,ARRI,DEPA,OMIT,CANC\n        type: array\n        items:\n          $ref: '#/components/schemas/operationsEventTypeCode'\n    scheduleID:\n      in: query\n      name: scheduleID\n      description: |\n        ID uniquely identifying a schedule, to filter events by.\n        \n        This filter was added by mistake and is thus deprecated.\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/scheduleID'\n      deprecated: true\n    shipmentEventTypeCode:\n      in: query\n      name: shipmentEventTypeCode\n      explode: false\n      style: form\n      description: |\n        The status of the document in the process to filter by. Possible values are\n        - RECE (Received)\n        - DRFT (Drafted)\n        - PENA (Pending Approval)\n        - PENU (Pending Update)\n        - PENC (Pending Confirmation)\n        - CONF (Confirmed)\n        - REJE (Rejected)\n        - APPR (Approved)\n        - ISSU (Issued)\n        - SURR (Surrendered)\n        - SUBM (Submitted)\n        - VOID (Void)\n        - REQS (Requested)\n        - CMPL (Completed)\n        - HOLD (On Hold)\n        - RELS (Released)\n        - CANC (Cancelled)\n\n        It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example \u003ci\u003eshipmentEventTypeCode=RECE,DRFT\u003c/i\u003e  Matches \u003cb\u003eboth\u003c/b\u003e Received (RECE) and Drafted (DRFT) shipment events.\n\n        More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv\"\u003eGitHub\u003c/a\u003e.\n        \n        This filter is only relevant when filtering on ShipmentEvents\n      example: RECE,DRFT\n      schema:\n        default: RECE,DRFT,PENA,PENU,PENC,CONF,REJE,APPR,ISSU,SURR,SUBM,VOID,REQS,CMPL,HOLD,RELS,CANC\n        type: array\n        items:\n          $ref: '#/components/schemas/shipmentEventTypeCode'\n    shippingInstructionID:\n      in: query\n      name: shippingInstructionID\n      description: |\n        The Shipping Instruction ID identifier is an identifier that links to a shipping instruction\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/shippingInstructionID'\n    transportCallID:\n      in: query\n      name: transportCallID\n      description: |\n        ID uniquely identifying a transport call, to filter events by.\n        \n        Specifying this filter will only return events related to this particular transportCallID\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/transportCallID'\n    transportDocumentID:\n      in: query\n      name: transportDocumentID\n      description: |\n        A unique id to identify a transport document.\n        \n        Deprecated - use transportDocumentReference instead transportDocumentReference\n      deprecated: true\n      schema:\n        type: string\n        format: uuid\n    transportDocumentReference:\n      in: query\n      name: transportDocumentReference\n      description: |\n        A unique number reference allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n        \n        Specifying this filter will only return events related to this particular transportDocumentReference\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/transportDocumentReference'\n    transportEventTypeCode:\n      in: query\n      name: transportEventTypeCode\n      explode: false\n      style: form\n      description: |\n        Identifier for type of Transport event to filter by\n        - ARRI (Arrived)\n        - DEPA (Departed)\n\n        It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example \u003ci\u003etransportEventTypeCode=ARRI,DEPA\u003c/i\u003e matches \u003cb\u003eboth\u003c/b\u003e Arrived (ARRI) and Departed (DEPA) transport events.\n        \n        Default is all transportEventTypeCodes.\n        \n        This filter is only relevant when filtering on TransportEvents\n      example: ARRI,DEPA\n      schema:\n        default: ARRI,DEPA\n        type: array\n        items:\n          $ref: '#/components/schemas/transportEventTypeCode'\n    UNLocationCode:\n      in: query\n      name: UNLocationCode\n      description: |\n        The UN Location code specifying where the place is located.\n        \n        Specifying this filter will only return events related to this particular UN Location code.\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/UNLocationCode'\n    vesselIMONumber:\n      in: query\n      name: vesselIMONumber\n      description: |\n        The identifier of vessel for which schedule details are published. Depending on schedule type, this may not be available yet.\n        \n        Specifying this filter will only return events related to this particular vesselIMONumber.\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/vesselIMONumber'\n\n  ####################\n  # Common data models\n  ####################\n  \n  schemas:\n  \n    ###################\n    # Base Event object\n    ###################\n\n    baseEventBody:\n      type: object\n      description: |\n        The Event entity is described as a generalization of all the specific event categories. An event always takes place in relation to a shipment and can additionally be linked to a transport or an equipment\n      allOf:\n        - type: object\n          properties:\n            eventType:\n              $ref: '#/components/schemas/eventType'\n        - type: object\n          properties:\n            eventClassifierCode:\n              $ref: '#/components/schemas/eventClassifierCode'\n        - type: object\n          properties:\n            eventDateTime:\n              $ref: '#/components/schemas/eventDateTime'\n      required:\n        - eventType\n        - eventClassifierCode\n        - eventDateTime\n    \n    baseEvent:\n      type: object\n      allOf:\n        - type: object\n          properties:\n            eventID:\n              $ref: '#/components/schemas/eventID'\n        - type: object\n          properties:\n            eventCreatedDateTime:\n              $ref: '#/components/schemas/eventCreatedDateTime'\n        - $ref: '#/components/schemas/baseEventBody'\n      required:\n        - eventCreatedDateTime\n\n\n    ##########################\n    # Shipment Event object\n    ##########################\n\n\n    baseShipmentEvent:\n      type: object\n      description: |\n        The shipment event entity is a specialization of the event entity to support specification of data that only applies to a shipment event.\n      allOf:\n        #Overriding this property to have correct payload response examples\n        - type: object\n          properties:\n            eventType:\n              example: SHIPMENT\n              enum:\n                - SHIPMENT\n        #Overriding this property to have correct payload response examples\n        - type: object\n          properties:\n            eventDateTime:\n              description: |\n                Value for eventDateTime is when the event happened. Often this is the same as eventCreatedDateTime (which is when the event is created)\n        #Overriding this property to have correct payload response examples\n        - type: object\n          properties:\n            eventClassifierCode:\n              description: |\n                For `ShipmentEvents` the `eventClassifierCode` must be `ACT`\n              enum:\n                - ACT\n              example: ACT\n        - type: object\n          properties:\n            shipmentEventTypeCode:\n              $ref: '#/components/schemas/shipmentEventTypeCode'\n        - type: object\n          properties:\n            documentID:\n              $ref: '#/components/schemas/documentID'\n        - type: object\n          properties:\n            documentTypeCode:\n              $ref: '#/components/schemas/documentTypeCode'\n        # - type: object\n        #   properties:\n        #     shipmentInformationTypeCode:\n        #       $ref: '#/components/schemas/shipmentInformationType'\n        - type: object\n          properties:\n            reason:\n              $ref: '#/components/schemas/reason'\n        \n        #####################################\n        # Deprecated ShipmentEvent attributes\n        #####################################\n        \n        # - type: object\n        #   properties:\n        #     eventTypeCode:\n        #       $ref: '#/components/schemas/eventTypeCode'\n        # - type: object\n        #   properties:\n        #     eventTypeCode:\n        #       description: |\n        #         Unique identifier for Event Type Code. For shipment events this can be\n        #         - RECE (Received)\n        #         - CONF (Confirmed)\n        #         - ISSU (Issued)\n        #         - APPR (Approved)\n        #         - SUBM (Submitted)\n        #         - SURR (Surrendered)\n        #         - REJE (Rejected)\n        #         - PENA (Pending approval)\n                \n        #         Deprecated - use shipmentEventTypeCode instead\n        #       deprecated: true\n        #       example: RECE\n        #       enum:\n        #         - RECE\n        #         - CONF\n        #         - ISSU\n        #         - APPR\n        #         - SUBM\n        #         - SURR\n        #         - REJE\n        #         - PENA\n        # - type: object\n        #   properties:\n        #     shipmentID:\n        #       $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/shipmentID'\n        # - type: object\n        #   properties:\n        #     shipmentID:\n        #       description: |\n        #         ID uniquely identifying a shipment.\n                \n        #         Deprecated - this is replaced by documentID which can contain different values depending on the value of the documentTypeCode field\n        #       deprecated: true\n        - type: object\n          properties:\n            documentReferences:\n              $ref: '#/components/schemas/documentReferences'\n        - $ref: '#/components/schemas/references'\n      required:\n        - documentID\n        - shipmentEventTypeCode\n        - documentTypeCode\n\n    shipmentEvent:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/baseEvent'\n        - $ref: '#/components/schemas/baseShipmentEvent'\n\n\n    ###############################\n    # Transport Event object\n    ###############################\n\n\n    baseTransportEvent:\n      type: object\n      description: |\n        The transport event entity is a specialization of the event entity to support specification of data that only applies to a transport event.\n      allOf:\n        #Overriding this property to have correct payload response examples\n        - type: object\n          properties:\n            eventType:\n              example: TRANSPORT\n              enum:\n                - TRANSPORT\n        #Overriding this property to have correct payload response examples\n        - type: object\n          properties:\n            eventClassifierCode:\n              description: |\n                Code for the event classifier can be\n                - ACT (Actual)\n                - PLN (Planned)\n                - EST (Estimated)\n              enum:\n                - ACT\n                - PLN\n                - EST\n              example: ACT\n        - type: object\n          properties:\n            transportEventTypeCode:\n              $ref: '#/components/schemas/transportEventTypeCode'\n        - type: object\n          properties:\n            delayReasonCode:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/delayReasonCode'\n        - type: object\n          properties:\n            changeRemark:\n              $ref: '#/components/schemas/changeRemark'\n        - type: object\n          properties:\n            facilityTypeCode:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/facilityTypeCodeTRN'\n        - type: object\n          properties:\n            transportCall:\n              $ref: '#/components/schemas/transportCall'\n\n      required:\n        - transportCall\n        - transportEventTypeCode\n\n    operationsTransportEvent:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/baseEvent'\n        - $ref: '#/components/schemas/baseTransportEvent'\n\n    transportEvent:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/operationsTransportEvent'\n        - type: object\n          properties:\n            vesselScheduleChangeRemark:\n              $ref: '#/components/schemas/vesselScheduleChangeRemark'\n        - type: object\n          properties:\n            transportCallID:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/transportCallID'\n                - deprecated: true\n                - description: |\n                    The unique identifier for a transport call\n                    \n                    **Deprecated** - not needed as the TransportCall object is included\n        - type: object\n          properties:\n            eventTypeCode:\n              $ref: '#/components/schemas/eventTypeCode'\n        - type: object\n          properties:\n            eventTypeCode:\n              description: |\n                Unique identifier for Event Type Code, for transport events this is either\n                - ARRI (Arrival)\n                - DEPA (Departure)\n                \n                Deprecated - use transportEventTypeCode instead\n              deprecated: true\n              enum:\n                - ARRI\n                - DEPA\n        - type: object\n          properties:\n            documentReferences:\n              $ref: '#/components/schemas/documentReferences'\n        - $ref: '#/components/schemas/references'\n\n\n    ########################\n    # Equipment Event object\n    ########################\n\n\n    baseEquipmentEvent:\n      type: object\n      description: |\n        The equipment event entity is a specialization of the event entity to support specification of data that only applies to an equipment event.\n      allOf:\n        #Overriding this property to have correct payload response examples\n        - type: object\n          properties:\n            eventType:\n              example: EQUIPMENT\n              enum:\n                - EQUIPMENT\n        #Overriding this property to have correct payload response examples\n        - type: object\n          properties:\n            eventClassifierCode:\n              description: |\n                Code for the event classifier can be\n                - PLN (Planned)\n                - ACT (Actual)\n                - EST (Estimated)\n              enum:\n                - PLN\n                - ACT\n                - EST\n              example: EST\n        - type: object\n          properties:\n            equipmentEventTypeCode:\n              $ref: '#/components/schemas/equipmentEventTypeCode'\n        - type: object\n          properties:\n            equipmentReference:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/equipmentReference'\n        - type: object\n          properties:\n            ISOEquipmentCode:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/ISOEquipmentCode'\n        - type: object\n          properties:\n            emptyIndicatorCode:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/emptyIndicatorCode'\n        - type: object\n          properties:\n            eventLocation:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.2#/components/schemas/location'\n        - type: object\n          properties:\n            facilityTypeCode:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/facilityTypeCodeTRN'\n        - type: object\n          properties:\n            transportCallID:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/transportCallID'\n                - deprecated: true\n                - description: 'The unique identifier for a transport call\u003cbr\u003e\u003cbr\u003eDeprecated - not needed as the TransportCall object is included'\n        - type: object\n          properties:\n            transportCall:\n              $ref: '#/components/schemas/transportCall'\n        - type: object\n          properties:\n            documentReferences:\n              $ref: '#/components/schemas/documentReferences'\n        - $ref: '#/components/schemas/references'\n        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/2.0.2#/components/schemas/seals'\n\n        ######################################\n        # Deprecated EquipmentEvent attributes\n        ######################################\n\n        - type: object\n          properties:\n            eventTypeCode:\n              $ref: '#/components/schemas/eventTypeCode'\n        - type: object\n          properties:\n            eventTypeCode:\n              description: |\n                Unique identifier for Event Type Code, for transport events this is either\n                - LOAD (Loaded)\n                - DISC (Discharged)\n                - GTIN (Gated in)\n                - GTOT (Gated out)\n                - STUF (Stuffed)\n                - STRP (Stripped)\n                \n                Deprecated - use equipmentEventTypeCode instead\n              deprecated: true\n              enum: \n                - LOAD\n                - DISC\n                - GTIN\n                - GTOT\n                - STUF\n                - STRP\n      required:\n        - emptyIndicatorCode\n        - equipmentEventTypeCode\n\n    equipmentEvent:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/baseEvent'\n        - $ref: '#/components/schemas/baseEquipmentEvent'\n\n\n    #########################\n    # Operations Event object\n    #########################\n\n\n    baseOperationsEvent:\n      type: object\n      description: |\n        The operations event entity is a specialization of the event entity to support specification of data that only applies to an operations event.\n      allOf:\n        #Overriding this property to have correct payload response examples\n        - type: object\n          properties:\n            eventType:\n              example: OPERATIONS\n              enum:\n                - OPERATIONS\n        #Overriding this property to have correct payload response examples\n        - type: object\n          properties:\n            eventClassifierCode:\n              description: |\n                Code for the event classifier can be\n                - ACT (Actual)\n                - PLN (Planned)\n                - EST (Estimated)\n                - REQ (Requested)\n              enum:\n                - ACT\n                - PLN\n                - EST\n                - REQ\n              example: ACT\n        - type: object\n          properties:\n            operationsEventTypeCode:\n              $ref: '#/components/schemas/operationsEventTypeCode'\n        - type: object\n          properties:\n            publisher:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/1.0.4#/components/schemas/partyNoID'\n        - type: object\n          properties:\n            publisherRole:\n              $ref: '#/components/schemas/publisherRole'\n        - type: object\n          properties:\n            eventLocation:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.2#/components/schemas/location'\n                - description: The location where the event takes place.\n        - type: object\n          properties:\n            portCallServiceTypeCode:\n              $ref: '#/components/schemas/portCallServiceTypeCode'\n        - type: object\n          properties:\n            portCallPhaseTypeCode:\n              $ref: '#/components/schemas/portCallPhaseTypeCode'\n        - type: object\n          properties:\n            facilityTypeCode:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/facilityTypeCodeOPR'\n        - type: object\n          properties:\n            delayReasonCode:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/delayReasonCode'\n        - type: object\n          properties:\n            remark:\n              $ref: '#/components/schemas/remark'\n        - type: object\n          properties:\n            transportCall:\n              $ref: '#/components/schemas/transportCall'\n        - type: object\n          properties:\n            vesselPosition:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.2#/components/schemas/geoLocation'\n                - description: The position of the vessel at the time when the message was sent\n        - type: object\n          properties:\n            milesToDestinationPort:\n              allOf:\n                - $ref: '#/components/schemas/milesToDestinationPort'\n        - type: object\n          properties:\n            vesselDraft:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/vesselDraft'\n        - type: object\n          properties:\n            vesselDraftUnit:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/dimensionUnit'\n      required:\n        - operationsEventTypeCode\n        - publisher\n        - publisherRole\n        - transportCall\n\n    operationsEvent:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/baseEvent'\n        - $ref: '#/components/schemas/baseOperationsEvent'\n\n\n    ##############################\n    # Shipment Subscription object\n    ##############################\n\n\n    shipmentSubscriptionBody:\n      type: object\n      allOf:\n        - type: object\n          properties:\n            shipmentEventTypeCode:\n              $ref: '#/components/schemas/shipmentEventTypeCodes'\n        - type: object\n          properties:\n            documentTypeCode:\n              $ref: '#/components/schemas/documentTypeCodes'\n        - type: object\n          properties:\n            carrierBookingRequestReference:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/carrierBookingRequestReference'\n        - type: object\n          properties:\n            carrierBookingReference:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/carrierBookingReference'\n        - type: object\n          properties:\n            transportDocumentReference:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/transportDocumentReference'\n        - type: object\n          properties:\n            equipmentReference:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/equipmentReference'\n\n\n    ###############################\n    # Equipment Subscription object\n    ###############################\n\n\n    equipmentSubscriptionBody:\n      type: object\n      allOf:\n        - type: object\n          properties:\n            equipmentEventTypeCode:\n              $ref: '#/components/schemas/equipmentEventTypeCodes'\n        - type: object\n          properties:\n            equipmentReference:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/equipmentReference'\n        - type: object\n          properties:\n            UNLocationCode:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/UNLocationCode'\n\n\n    ###############################\n    # Transport Subscription object\n    ###############################\n\n\n    transportSubscriptionBody:\n      type: object\n      allOf:\n        - type: object\n          properties:\n            transportEventTypeCode:\n              $ref: '#/components/schemas/transportEventTypeCodes'\n        - type: object\n          properties:\n            scheduleID:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/scheduleID'\n                - deprecated: true\n                - description: 'ID uniquely identifying a schedul.\u003cbr\u003eDeprecated as this was added by mistake'\n        - type: object\n          properties:\n            transportCallID:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/transportCallID'\n        - type: object\n          properties:\n            vesselIMONumber:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/vesselIMONumber'\n        - type: object\n          properties:\n            carrierVoyageNumber:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/carrierVoyageNumber'\n                - deprecated: true\n        - type: object\n          properties:\n            exportVoyageNumber:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/exportVoyageNumber'\n        - type: object\n          properties:\n            carrierServiceCode:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/carrierServiceCode'\n        - type: object\n          properties:\n            UNLocationCode:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/UNLocationCode'\n\n\n    transportSubscriptionBodyWithScheduleID:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/transportSubscriptionBody'\n        - type: object\n          properties:\n            scheduleID:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/scheduleID'\n                - deprecated: true\n                - description: |\n                    ID uniquely identifying a schedul.\n                    \n                    **Deprecated** as this was added by mistake\n\n\n    ################################\n    # Operations Subscription object\n    ################################\n\n\n    operationsSubscriptionBody:\n      type: object\n      allOf:\n        - type: object\n          properties:\n            transportCallID:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/transportCallID'\n        - type: object\n          properties:\n            vesselIMONumber:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/vesselIMONumber'\n        - type: object\n          properties:\n            carrierVoyageNumber:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/carrierVoyageNumber'\n                - deprecated: true\n        - type: object\n          properties:\n            exportVoyageNumber:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/exportVoyageNumber'\n        - type: object\n          properties:\n            carrierExportVoyageNumber:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/carrierExportVoyageNumber'\n                - deprecated: true\n        - type: object\n          properties:\n            carrierServiceCode:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/carrierServiceCode'\n        - type: object\n          properties:\n            operationsEventTypeCode:\n              $ref: '#/components/schemas/operationsEventTypeCodes'\n        - type: object\n          properties:\n            UNLocationCode:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/UNLocationCode'\n\n    documentReferences:\n      type: array\n      description: |\n        An optional list of key-value (`documentReferenceType`-`documentReferenceValue`) pairs representing links to objects relevant to the event. The `documentReferenceType`-field is used to describe where the `documentReferenceValue`-field is pointing to.\n      example:\n        - documentReferenceType: BKG\n          documentReferenceValue: ABC123123123\n        - documentReferenceType: TRD\n          documentReferenceValue: 85943567-eedb-98d3-f4ed-aed697474ed4\n      items:\n        type: object\n        properties:\n          documentReferenceType:\n            type: string\n            description: |\n              Describes where the documentReferenceValue is pointing to:\n              - CBR (Carrier Booking Request Reference)\n              - BKG (Carrier Booking Reference)\n              - SHI (Shipping Instruction Reference)\n              - TRD (Transport Document Reference)\n            example: BKG\n            enum:\n              - CBR\n              - BKG\n              - SHI\n              - TRD\n          documentReferenceValue:\n            type: string\n            description:\n              The value of the identifier the documentReferenceType is describing\n            example: 123e4567-e89b-12d3-a456-426614174000\n\n    transportCall:\n      type: object\n      allOf:\n        - type: object\n          properties:\n            transportCallID:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/transportCallID'\n        # Extrending transportCall description\n        - type: object\n          properties:\n            transportCallID:\n              description: |\n                The unique identifier for a transport call\n                \n                **Deprecated:** Use `transportCallReference` instead\n        - type: object\n          properties:\n            transportCallReference:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/transportCallReference'\n        - type: object\n          properties:\n            portVisitReference:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/portVisitReference'\n        - type: object\n          properties:\n            carrierServiceCode:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/carrierServiceCode'\n        - type: object\n          properties:\n            carrierVoyageNumber:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/carrierVoyageNumber'\n                # Extending carrierVoyageNumber attributes\n                - description: |\n                    The vessel operator-specific identifier of the Voyage.\n\n                    In case there are multiple voyages the export voyage is chosen.\n                - deprecated: true\n        - type: object\n          properties:\n            exportVoyageNumber:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/exportVoyageNumber'\n        # Extend the description and deprecate\n        - type: object\n          properties:\n            exportVoyageNumber:\n              description: |\n                The identifier of an export voyage. The vessel operator-specific identifier of the export Voyage.\n                \n                **Deprecated:** Use `carrierExportVoyageNumber` instead\n              deprecated: true\n        - type: object\n          properties:\n            carrierExportVoyageNumber:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/carrierExportVoyageNumber'\n        # - type: object\n        #   properties:\n        #     universalExportVoyageReference:\n        #       $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/universalExportVoyageReference'\n        - type: object\n          properties:\n            importVoyageNumber:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/importVoyageNumber'\n        # Extend the description and deprecate\n        - type: object\n          properties:\n            importVoyageNumber:\n              description: |\n                The identifier of an import voyage. The vessel operator-specific identifier of the import Voyage.\n                \n                **Deprecated:** Use `carrierImportVoyageNumber` instead\n              deprecated: true\n        - type: object\n          properties:\n            carrierImportVoyageNumber:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/carrierImportVoyageNumber'\n        # - type: object\n        #   properties:\n        #     universalImportVoyageReference:\n        #       $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/universalImportVoyageReference'\n        - type: object\n          properties:\n            transportCallSequenceNumber:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/transportCallSequenceNumber'\n        - type: object\n          properties:\n            UNLocationCode:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/UNLocationCode'\n                # Extending UNLocationCode attributes\n                - deprecated: true\n                - description: |\n                    The UN Location code specifying where the place is located.\n                    \n                    **Deprecated**: Use UN Location Code defined in the location object instead\n        - type: object\n          properties:\n            facilityCode:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/facilityCode'\n                # Extending facilityCode attributes\n                - deprecated: true\n                - description: |\n                    The code used for identifying the specific facility. This code does not include the UN Location Code.\n\n                    **Deprecated**: Use facilityCode defined in the location object instead\n        - type: object\n          properties:\n            facilityCodeListProvider:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/facilityCodeListProvider'\n                # Extending facilityCodeListProvider attributes\n                - deprecated: true\n                - description: |\n                    The provider used for identifying the facility Code\n\n                    **Deprecated**: Use facilityCodeListProvider defined in the location object instead\n        - type: object\n          properties:\n            facilityTypeCode:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/facilityTypeCodeTRN'\n                # Extending facilityCodeListProvider attributes\n                - deprecated: true\n                - description: |\n                    A specialized version of the facilityCode to be used in TransportCalls. The code to identify the specific type of facility.\n\n                    - BOCR (Border crossing)\n                    - CLOC (Customer location)\n                    - COFS (Container freight station)\n                    - COYA (Deprecated - use OFFD intead)\n                    - OFFD (Off dock storage)\n                    - DEPO (Depot)\n                    - INTE (Inland terminal)\n                    - POTE (Port terminal)\n                    - RAMP (Ramp)\n\n                    **Deprecated**: Use facilityTypeCode defined on Event root level instead\n        - type: object\n          properties:\n            otherFacility:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/otherFacility'\n                # Extending the otherFacility attributes\n                - deprecated: true\n                - description: |\n                    An alternative way to capture the facility when no standardized DCSA facility code can be found.\n\n                    **Deprecated**: Use address object defined in the location object instead\n        - type: object\n          properties:\n            modeOfTransport:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/modeOfTransport'\n        - type: object\n          properties:\n            location:\n              anyOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.2#/components/schemas/geoLocation'\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.2#/components/schemas/facilityLocation'\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.2#/components/schemas/unLocationLocation'\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.2#/components/schemas/addressLocation'\n        - type: object\n          properties:\n            vessel:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/2.0.2#/components/schemas/vessel'\n      required:\n        - transportCallID\n        - modeOfTransport\n\n    references:\n      type: object\n      properties:\n        references:\n          type: array\n          items:\n            $ref: '#/components/schemas/reference'\n    reference:\n      type: object\n      description: |\n        References provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\n        \n        In addition to the References provided by the shipper or freight forwarder - the carrier can provide an extra `referenceType` called `EQ` which is a reference to an Equipment.\n      allOf:\n        - type: object\n          properties:\n            referenceType:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/referenceType'\n        # Extension of the referenceType to also include EQ\n        - type: object\n          properties:\n            referenceType:\n              description: |\n                The reference type codes defined by DCSA.\n                - FF (Freight Forwarder’s Reference)\n                - SI (Shipper’s Reference)\n                - PO (Purchase Order Reference)\n                - CR (Customer’s Reference)\n                - AAO (Consignee’s Reference)\n                - ECR (Empty container release reference)\n                - CSI (Customer shipment ID)\n                - BPR (Booking party reference number)\n                - BID (Booking Request ID)\n                - EQ (Equipment Reference)\n\n                More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/referencetypes.csv\"\u003eGitHub\u003c/a\u003e.\n              enum:\n                - FF\n                - SI\n                - PO\n                - CR\n                - AAO\n                - ECR\n                - CSI\n                - BPR\n                - BID\n                - EQ\n        - type: object\n          properties:\n            referenceValue:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/referenceValue'\n      required:\n        - referenceType\n        - referenceValue\n        \n\n    ##########################\n    # Simple types\n    ##########################\n\n\n    callbackUrl:\n      type: string\n      format: uri\n      description: |\n        The endPoint where a Carrier whould send back events to the Shipper. The callback can contain query parameters uniquely identifying the originator of the events.\n      example: https://myserver.com/send/callback/here?shipperRef=\u003cshipper defined unique id\u003e\n    changeRemark:\n      description: 'Free text information provided by the vessel operator regarding the reasons for the change in schedule and/or plans to mitigate schedule slippage.'\n      type: string\n      example: Bad weather\n      maxLength: 250\n    documentID:\n      type: string\n      description: |\n        The id of the object defined by the documentTypeCode.\n      example: the-id-of-the-documentTypeCode\n    documentTypeCode:\n      type: string\n      maxLength: 3\n      description: |\n        The code to identify the type of information documentID points to. Can be one of the following values\n        - CBR (Carrier Booking Request Reference)\n        - BKG (Booking)\n        - SHI (Shipping Instruction)\n        - SRM (Shipment Release Message)\n        - TRD (Transport Document)\n        - ARN (Arrival Notice)\n        - VGM (Verified Gross Mass)\n        - CAS (Cargo Survey)\n        - CUS (Customs Inspection)\n        - DGD (Dangerous Goods Declaration)\n        - OOG (Out of Gauge)\n        \n        More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/documenttypecodes.csv\"\u003eGitHub\u003c/a\u003e\n      example: SHI\n      enum:\n        - CBR\n        - BKG\n        - SHI\n        - SRM\n        - TRD\n        - ARN\n        - VGM\n        - CAS\n        - CUS\n        - DGD\n        - OOG\n    documentTypeCodes:\n      type: array\n      description: |\n        List of documentTypeCode to filter by. If multiple values are selected - the OR-operator will be used.\n\n        Default is none as it will not filter on documentTypeCode if not specified.\n      example: [SHI,TRD]\n      items:\n        $ref: '#/components/schemas/documentTypeCode'\n    equipmentEventTypeCode:\n      type: string\n      description: |\n        Unique identifier for equipmentEventTypeCode.\n        - LOAD (Loaded)\n        - DISC (Discharged)\n        - GTIN (Gated in)\n        - GTOT (Gated out)\n        - STUF (Stuffed)\n        - STRP (Stripped)\n        - PICK (Pick-up)\n        - DROP (Drop-off)\n        - INSP (Inspected)\n        - RSEA (Resealed)\n        - RMVD (Removed)\n        \n        More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/equipmenteventtypecodes.csv\"\u003eGitHub\u003c/a\u003e\n      enum: \n        - LOAD\n        - DISC\n        - GTIN\n        - GTOT\n        - STUF\n        - STRP\n        - PICK\n        - DROP\n        - INSP\n        - RSEA\n        - RMVD\n      example: LOAD\n    equipmentEventTypeCodes:\n      type: array\n      description: |\n        List of equipmentEventTypeCode to filter by. If multiple values are selected - the OR-operator will be used.\n\n        Default is none as it will not filter on equipmentEventTypeCode if not specified.\n      example: [GTIN,GTOT]\n      items:\n        $ref: '#/components/schemas/equipmentEventTypeCode'\n    eventClassifierCode:\n      type: string\n      description: |\n        Code for the event classifier. Values can vary depending on eventType\n      #   - PLN (Planned)\n      #   - ACT (Actual)\n      #   - REQ (Requested)\n      #   - EST (Estimated)\n      # enum:\n      #   - PLN\n      #   - ACT\n      #   - REQ\n      #   - EST\n      # example: ACT\n    eventID:\n      type: string\n      format: uuid\n      description: |\n        The unique identifier for the event (the message - not the source).\n        \n        \u003cb\u003eNB\u003c/b\u003e\u0026#58; This field should be considered Metadata\n      example: 3cecb101-7a1a-43a4-9d62-e88a131651e2\n    eventCreatedDateTime:\n      type: string\n      format: date-time\n      description: |\n        The timestamp of when the event was created.\n        \n        \u003cb\u003eNB\u003c/b\u003e\u0026#58; This field should be considered Metadata\n      example: '2021-01-09T14:12:56+01:00'\n    eventDateTime:\n      type: string\n      format: date-time\n      example: '2019-11-12T07:41:00+08:30'\n      description: The local date and time, where the event took place or when the event will take place, in ISO 8601 format.\n    eventType:\n      type: string\n      description: |\n        The Event Type of the object - to be used as a discriminator.\n\n        \u003cb\u003eNB\u003c/b\u003e\u0026#58; This field should be considered Metadata\n      # enum:\n      #   - EQUIPMENT\n      #   - SHIPMENT\n      #   - TRANSPORT\n      #   - OPERATIONS\n    eventTypeCode:\n      type: string\n      example: ARRI\n      maxLength: 4\n      description: |\n        Deprecated - Unique identifier for Event Type Code. This has been replaced by Specialized eventTypeCodes: shipmentEventTypeCode, transportEventTypeCode, equipmentEventTypeCode and opertaionsEventType\n      deprecated: true\n    milesToDestinationPort:\n      type: number\n      format: float\n      description: |\n        Remaining distance reported by the vessel to the next destination port in nautical miles    \n      example: 245.45\n    operationsEventTypeCode:\n      type: string\n      description: |\n        The code to identify the type of event that is related to the operation\n        - STRT (Started)\n        - CMPL (Completed)\n        - ARRI (Arrived)\n        - DEPA (Departed)\n        - OMIT (Omitted)\n        - CANC (Cancelled)\n        \n        More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/operationseventtypecodes.csv\"\u003eGitHub\u003c/a\u003e\n      enum:\n        - STRT\n        - CMPL\n        - ARRI\n        - DEPA\n        - OMIT\n        - CANC\n      example: STRT\n    operationsEventTypeCodes:\n      type: array\n      description: |\n        List of operationsEventTypeCode to filter by. If multiple values are selected - the OR-operator will be used.\n\n        Default is none as it will not filter on operationsEventTypeCode if not specified.\n      example: [ARRI,CMPL]\n      items:\n        $ref: '#/components/schemas/operationsEventTypeCode'\n    portCallPhaseTypeCode:\n      type: string\n      description: |\n        The general direction of the vessel for which information applies\n        - INBD (Inbound)\n        - ALGS (Alongside)\n        - SHIF (Shifting)\n        - OUTB (Outbound)\n\n        More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/portcallphasetypecodes.csv\"\u003eGitHub\u003c/a\u003e\n      enum:\n        - INBD\n        - ALGS\n        - SHIF\n        - OUTB\n      example: ALGS\n    portCallServiceTypeCode:\n      type: string\n      description: |\n        The type of the service provided in the port call\n        - PILO (Pilotage)\n        - MOOR (Mooring)\n        - CRGO (Cargo operations)\n        - TOWG (Towage)\n        - BUNK (Bunkering)\n        - LASH (Lashing)\n        - SAFE (Safety)\n        - FAST (All Fast)\n        - GWAY (Gangway down and secure)\n        - ANCO (Anchorage operations)\n        - SLUG (Sludge)\n        - SHPW (Shore Power)\n        - LCRO (Loading cargo operations)\n        - DCRO (Discharge cargo operations)\n        - VRDY (Vessel ready)\n        \n        More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/portcallservicetypecodes.csv\"\u003eGitHub\u003c/a\u003e\n      enum:\n        - PILO\n        - MOOR\n        - CRGO\n        - TOWG\n        - BUNK\n        - LASH\n        - SAFE\n        - FAST\n        - GWAY\n        - ANCO\n        - SLUG\n        - SHPW\n        - LCRO \n        - DCRO\n        - VRDY\n      example: BUNK\n    publisherRole:\n      type: string\n      description: |\n        The party function code of the publisher. The values are divided into 4 categories:\n        \n        #### Carrier\n        - CA (Carrier)\n        - AG (Carrier local agent)\n        - VSL (Vessel)\n        \n        #### Port\n        - ATH (Port Authorities)\n        - PLT (Port Pilot)\n        - TWG (Towage service provider)\n        - MOR (Mooring service provider)\n        \n        #### Terminal\n        - TR (Terminal)\n        \n        #### Service Provider\n        - LSH (Lashing service provider)\n        - BUK (Bunker service provider)\n        - SLU (Sludge service provider)\n        - SVP (Any other service provider)\n        \n        More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/publisherrole.csv\"\u003eGitHub\u003c/a\u003e\n      enum:\n        - CA\n        - AG\n        - VSL\n        - ATH\n        - PLT\n        - TWG\n        - MOR\n        - TR\n        - LSH\n        - BUK\n        - SLU\n        - SVP\n      example: TR\n    reason:\n      type: string\n      maxLength: 250\n      description: 'Reason field in a Shipment event. This field can be used to explain why a specific event has been sent.'\n      example: 'The following attributes are missing...'\n    remark:\n      description: |\n        Free text to provide additional information on the context.\n      type: string\n      example: Port closed due to strike\n      maxLength: 500\n    secret:\n      type: string\n      format: byte\n      description: |\n        A Base64 encoded secret shared between the Publisher and the Subscriber.\n        It is used to compute the contents of the Notification-Signature header.\n      example: 'MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDM2NTc4NjIzODk3NDY5MDgyNzM0OTg3MTIzNzg2NA=='\n    shipmentEventTypeCode:\n      type: string\n      description: |\n        The status of the document in the process. Possible values are\n        - RECE (Received)\n        - DRFT (Drafted)\n        - PENA (Pending Approval)\n        - PENU (Pending Update)\n        - PENC (Pending Confirmation)\n        - CONF (Confirmed)\n        - REJE (Rejected)\n        - APPR (Approved)\n        - ISSU (Issued)\n        - SURR (Surrendered)\n        - SUBM (Submitted)\n        - VOID (Void)\n        - REQS (Requested)\n        - CMPL (Completed)\n        - HOLD (On Hold)\n        - RELS (Released)\n        - CANC (Cancelled)\n\n        More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv\"\u003eGitHub\u003c/a\u003e\n      enum:\n        - RECE\n        - DRFT\n        - PENA\n        - PENU\n        - PENC\n        - CONF\n        - REJE\n        - APPR\n        - ISSU\n        - SURR\n        - SUBM\n        - VOID\n        - REQS\n        - CMPL\n        - HOLD\n        - RELS\n        - CANC\n      example: DRFT\n    shipmentEventTypeCodes:\n      type: array\n      description: |\n        List of shipmentEventTypeCode to filter by. If multiple values are selected - the OR-operator will be used.\n\n        Default is none as it will not filter on shipmentEventTypeCode if not specified.\n      example: [RECE,DRFT]\n      items:\n        $ref: '#/components/schemas/shipmentEventTypeCode'\n    # shipmentInformationType:\n    #   type: string\n    #   maxLength: 3\n    #   deprecated: true\n    #   description: |\n    #     The code to identify the type of information documentID points to. Can be one of the following values\n    #     - BOK (Booking - deprecated use BKG instead)\n    #     - BKG (Booking)\n    #     - SHI (Shipping Instruction)\n    #     - VGM (Verified Gross Mass)\n    #     - SRM (Shipment Release Message)\n    #     - TRD (Transport Document)\n    #     - ARN (Arrival Notice)\n        \n    #     \u003cb\u003eDeprecated\u003c/b\u003e - use documentTypeCode instead\n    #   example: SHI\n    #   enum:\n    #     - BOK\n    #     - BKG\n    #     - SHI\n    #     - VGM\n    #     - SRM\n    #     - TRD\n    #     - ARN\n    subscriptionID:\n      type: string\n      format: uuid\n      example: 8fbdc2d8-57c8-48b9-a04b-18fd8ec1d809\n      description: 'The carrier issues a unique ID to the shipper or consignee for that subscription'\n    transportDocumentTypeCodes:\n      type: array\n      description: |\n        List of transportDocumentType to filter by. If multiple values are selected - the OR-operator will be used.\n        \n        Default is none as it will not filter on transportDocumentType if not specified.\n      example: [BOL,SWB]\n      items:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2#/components/schemas/transportDocumentTypeCode'\n    transportEventTypeCode:\n      type: string\n      description: |\n        Identifier for type of Transport event\n        - ARRI (Arrived)\n        - DEPA (Departed)\n        \n        More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/transporteventtypecodes.csv\"\u003eGitHub\u003c/a\u003e\n      enum:\n        - ARRI\n        - DEPA\n        # - OMIT\n      example: ARRI\n    transportEventTypeCodes:\n      type: array\n      description: |\n        List of transportEventTypeCode to filter by. If multiple values are selected - the OR-operator will be used.\n\n        Default is none as it will not filter on transportEventTypeCode if not specified.\n      example: [ARRI,DEPA]\n      items:\n        $ref: '#/components/schemas/transportEventTypeCode'\n    vesselScheduleChangeRemark:\n      description: |\n        Free text information provided by the vessel operator regarding the reasons for the change in schedule and/or plans to mitigate schedule slippage.\n        \n        Deprecated - use changeRemark instead\n      type: string\n      example: Bad weather\n      maxLength: 250\n      deprecated: true\n",
			"canonicalURL": "/github.com/dcsaorg/DCSA-OpenAPI@1b8811d1099e42001cfe448916330eab6f260472/-/blob/domain/event/event_domain_v2.0.2.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/dcsaorg/DCSA-OpenAPI/blob/1b8811d1099e42001cfe448916330eab6f260472/domain/event/event_domain_v2.0.2.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"reference\": parse schema: parse schema: property \"referenceType\": parse schema: at 1:34044: external \"https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2\": get: https: do: Get \"https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.2\": host \"api.swaggerhub.com\" is not allowed"
}