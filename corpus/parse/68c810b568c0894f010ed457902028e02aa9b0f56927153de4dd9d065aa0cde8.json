{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mro/pin4sha.cgi"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "pinboard.in/v1/openapi.yaml",
			"byteSize": 12325,
			"content": "---\nopenapi: 3.0.1\ninfo:\n  title: Subset of the Pinboard API\n  version: '1'\n  description: |-\n    The Pinboard API is a way to interact programatically with your bookmarks,\n    notes and other Pinboard data.\n\n    Wherever possible the Pinboard API uses the same syntax and method names as\n    the Delicious V1 API. See differences from Delicious for a full list of\n    areas where the APIs diverge.\n\n    Future features may be\n    - auto-fill on /posts/get for unknown urls\n    - non UTC times\n    - enclosures (images, thumbnails, audio, video)\n  contact:\n    email: pinboard-api@mro.name\n    name: mro.name\n    url: https://code.mro.name/mro/pinboard4shaarli\nexternalDocs:\n  url: \"../about\"\n  description: DOAP RDF\nservers:\n- url: https://demo.mro.name/shaarli-v0.41b/pinboard4shaarli.cgi/v1\n- url: https://demo.mro.name/shaarli-v0.10.2/pinboard4shaarli.cgi/v1\n- url: https://demo.mro.name/shaarligo/shaarligo.cgi/v1\n- url: https://api.pinboard.in/v1\npaths:\n  \"/openapi.yaml\":\n    get:\n      tags:\n      - api\n      summary: API description\n      operationId: aboutOpenapi\n      responses:\n        '200':\n          description: API description\n          content:\n            text/x-yaml:\n              schema:\n                type: string\n  \"/user/api_token\":\n    get:\n      tags:\n      - user\n      summary: Returns the user's API token (for making API calls without a password).\n      operationId: apiToken\n      parameters:\n      - \"$ref\": \"#/components/parameters/formatParam\"\n      responses:\n        '200':\n          description: A auth-token\n          content:\n            application/xml:\n              schema:\n                xml:\n                  name: result\n                type: string\n                example: XOG86E7JIYMI\n            application/json:\n              schema:\n                properties:\n                  result:\n                    example: XOG86E7JIYMI\n        '501':\n          description: |-\n            Cannot tell a token. Imagine a stateless fa√ßade hiding a shaarli backend that has no idea of such a thing as an API token.\n            Only if auth was successful, otherwise you get a 401/403.\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: 501 token auth not supported, use HTTP Basic.\n  \"/posts/get\":\n    get:\n      tags:\n      - posts\n      summary: Returns one or more posts on a single day matching the arguments. If\n        no date or url is given, date of most recent bookmark will be used.\n      description: If called with a yet unknown URL, http GET the title and guess\n        tags from the URL\n      operationId: getPost\n      parameters:\n      - \"$ref\": \"#/components/parameters/formatParam\"\n      - name: tag\n        in: query\n        description: filter by up to three tags\n        schema:\n          \"$ref\": \"#/components/schemas/tag\"\n      - name: dt\n        in: query\n        description: return results bookmarked on this day\n        schema:\n          \"$ref\": \"#/components/schemas/date\"\n      - \"$ref\": \"#/components/parameters/urlParamOpt\"\n      - name: meta\n        in: query\n        description: include a change detection signature in a meta attribute\n        schema:\n          \"$ref\": \"#/components/schemas/yes_no\"\n      responses:\n        '200':\n          description: foo\n          content:\n            application/xml:\n              schema:\n                \"$ref\": \"#/components/schemas/posts\"\n  \"/posts/add\":\n    get:\n      tags:\n      - posts\n      summary: Add a bookmark. Arguments with shaded background are required.\n      operationId: addPost\n      parameters:\n      - \"$ref\": \"#/components/parameters/formatParam\"\n      - \"$ref\": \"#/components/parameters/urlParam\"\n      - name: description\n        in: query\n        description: Title of the item. This field is unfortunately named 'description'\n          for backwards compatibility with the delicious API\n        required: true\n        schema:\n          \"$ref\": \"#/components/schemas/title\"\n      - name: extended\n        in: query\n        description: Description of the item. Called 'extended' for backwards compatibility\n          with delicious API\n        schema:\n          \"$ref\": \"#/components/schemas/text\"\n      - name: tags\n        in: query\n        description: List of up to 100 tags\n        schema:\n          \"$ref\": \"#/components/schemas/tag\"\n      - name: dt\n        in: query\n        description: creation time for this bookmark. Defaults to current time. Datestamps\n          more than 10 minutes ahead of server time will be reset to current server\n          time\n        schema:\n          \"$ref\": \"#/components/schemas/datetime\"\n      - name: replace\n        in: query\n        description: Replace any existing bookmark with this URL. Default is yes.\n          If set to no, will throw an error if bookmark exists\n        schema:\n          \"$ref\": \"#/components/schemas/yes_no\"\n      - name: shared\n        in: query\n        description: Make bookmark public. Default is 'yes' unless user has enabled\n          the 'save all bookmarks as private' user setting, in which case default\n          is 'no'\n        schema:\n          \"$ref\": \"#/components/schemas/yes_no\"\n      - name: toread\n        in: query\n        description: Marks the bookmark as unread. Default is 'no'\n        schema:\n          \"$ref\": \"#/components/schemas/yes_no\"\n      responses:\n        '200':\n          \"$ref\": \"#/components/responses/Done\"\n  \"/posts/delete\":\n    get:\n      tags:\n      - posts\n      summary: Delete a bookmark.\n      operationId: deletePost\n      parameters:\n      - \"$ref\": \"#/components/parameters/formatParam\"\n      - \"$ref\": \"#/components/parameters/urlParam\"\n      responses:\n        '200':\n          \"$ref\": \"#/components/responses/Done\"\n  \"/tags/get\":\n    get:\n      tags:\n      - tags\n      summary: Returns a full list of the user's tags along with the number of times\n        they were used.\n      operationId: getTags\n      parameters:\n      - \"$ref\": \"#/components/parameters/formatParam\"\n      responses:\n        '200':\n          description: All tags\n          content:\n            application/xml:\n              schema:\n                xml:\n                  name: tags\n                properties:\n                  tag:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        count:\n                          xml:\n                            attribute: true\n                          type: integer\n                          example: 5\n                        tag:\n                          xml:\n                            attribute: true\n                          example: foo\n  \"/tags/delete\":\n    get:\n      tags:\n      - tags\n      summary: Delete an existing tag.\n      operationId: deleteTag\n      parameters:\n      - \"$ref\": \"#/components/parameters/formatParam\"\n      - name: tag\n        in: query\n        required: true\n        schema:\n          \"$ref\": \"#/components/schemas/tag\"\n      responses:\n        '200':\n          \"$ref\": \"#/components/responses/Done\"\n  \"/tags/rename\":\n    get:\n      tags:\n      - tags\n      summary: Rename an tag, or fold it in to an existing tag.\n      operationId: renameTag\n      parameters:\n      - \"$ref\": \"#/components/parameters/formatParam\"\n      - name: old\n        in: query\n        description: 'note: match is not case sensitive'\n        required: true\n        schema:\n          \"$ref\": \"#/components/schemas/tag\"\n      - name: new\n        in: query\n        description: if empty, nothing will happen\n        required: true\n        schema:\n          \"$ref\": \"#/components/schemas/tag\"\n      responses:\n        '200':\n          \"$ref\": \"#/components/responses/Done\"\ncomponents:\n  parameters:\n    formatParam:\n      name: format\n      in: query\n      schema:\n        \"$ref\": \"#/components/schemas/format\"\n    urlParam:\n      name: url\n      in: query\n      required: true\n      schema:\n        \"$ref\": \"#/components/schemas/URL\"\n    urlParamOpt:\n      name: url\n      in: query\n      schema:\n        \"$ref\": \"#/components/schemas/URL\"\n  responses:\n    Done:\n      description: A normal response\n      content:\n        application/xml:\n          schema:\n            xml:\n              name: result\n            properties:\n              code:\n                example:\n                - done\n                - something went wrong\n                xml:\n                  attribute: true\n  schemas:\n    tag:\n      type: string\n      description: up to 255 characters. May not contain commas or whitespace. Please\n        be aware that tags beginning with a period are treated as private and trigger\n        special private tag semantics.\n    URL:\n      type: string\n      description: as defined by RFC 3986. Allowed schemes are http, https, javascript,\n        mailto, ftp and file. The Safari-specific feed scheme is allowed but will\n        be treated as a synonym for http.\n    title:\n      type: string\n      description: up to 255 characters long\n    text:\n      type: string\n      description: up to 65536 characters long. Any URLs will be auto-linkified when\n        displayed.\n    datetime:\n      type: string\n      description: 'UTC timestamp in this format: 2010-12-11T19:48:02Z. Valid date\n        range is Jan 1, 1 AD to January 1, 2100 (but see note below about future timestamps).'\n      example: '2010-12-11T19:48:02Z'\n    date:\n      type: string\n      description: 'UTC date in this format: 2010-12-11. Same range as datetime above'\n      example: '2010-12-11'\n    yes_no:\n      type: string\n      description: the literal string 'yes' or 'no'\n      example: 'no'\n    md5:\n      type: string\n      description: 32 character hexadecimal MD5 hash\n    integer:\n      type: integer\n      description: integer in the range 0..2^32\n    format:\n      type: string\n      description: the literal string 'json' or 'xml'\n      example: json\n      default: xml\n    posts:\n      type: array\n      properties:\n        dt:\n          type: string\n          xml:\n            attribute: true\n          example: '2010-12-11T19:48:02Z'\n        tag:\n          type: string\n          xml:\n            attribute: true\n          example: webdev\n        user:\n          type: string\n          xml:\n            attribute: true\n          example: user\n      items:\n        type: object\n        xml:\n          name: post\n        properties:\n          href:\n            type: string\n            xml:\n              attribute: true\n            example: http://www.howtocreate.co.uk/tutorials/texterise.php?dom=1\n          description:\n            type: string\n            xml:\n              attribute: true\n            example: JavaScript DOM reference\n          extended:\n            type: string\n            xml:\n              attribute: true\n            example: dom reference\n          hash:\n            type: string\n            xml:\n              attribute: true\n            example: c0238dc0c44f07daedd9a1fd9bbdeebd\n          meta:\n            type: string\n            xml:\n              attribute: true\n            example: 92959a96fd69146c5fe7cbde6e5720f2\n          others:\n            type: string\n            xml:\n              attribute: true\n            example: 55\n          tag:\n            type: string\n            xml:\n              attribute: true\n            example: dom javascript webdev\n          time:\n            type: string\n            xml:\n              attribute: true\n            example: '2005-11-28T05:26:09.000Z'\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n    AuthToken:\n      type: apiKey\n      in: query\n      name: auth_token\n      description: |-\n        An authentication token is a short opaque identifier in the form\n        'username:TOKEN'.\n\n        Users can find their API token on their settings page. They can request\n        a new token at any time; this will invalidate their previous API token.\n\n        Any third-party sites making API requests on behalf of Pinboard users\n        from an outside server MUST use this authentication method instead of\n        storing the user's password. Violators will be blocked from using the\n        API.\nsecurity:\n- AuthToken: []\n- BasicAuth: []\ntags:\n- name: api\n  externalDocs:\n    url: https://pinboard.in/api\n    description: The original Pinboard API\n",
			"canonicalURL": "/github.com/mro/pin4sha.cgi@929e452db85992a0f8d7955a74af41a601f68508/-/blob/pinboard.in/v1/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/mro/pin4sha.cgi/blob/929e452db85992a0f8d7955a74af41a601f68508/pinboard.in/v1/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"posts\": resolve \"#/components/schemas/posts\": at pinboard.in/v1/openapi.yaml:326:9: properties: array cannot contain properties"
}