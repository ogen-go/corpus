{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aws/aws-sam-cli"
		},
		"file": {
			"name": "http_api_existing_openapi.yaml",
			"size": 0,
			"path": "tests/functional/commands/validate/lib/models/http_api_existing_openapi.yaml",
			"byteSize": 4151,
			"content": "%YAML 1.1\n---\nParameters:\n  Timeout:\n    Default: 15000\n    Type: Number\n\nGlobals:\n  HttpApi:\n    CorsConfiguration:\n      AllowHeaders:\n      - x-apigateway-header\n      AllowMethods:\n      - GET\n      AllowOrigins:\n      - https://global.com\n      MaxAge: 6000\n\nResources:\n  HttpApiFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: s3://sam-demo-bucket/todo_list.zip\n      Handler: index.restapi\n      Runtime: nodejs12.x\n      Policies: AmazonDynamoDBFullAccess\n      Events:\n        Basic: # integration exists\n          Type: HttpApi\n          Properties:\n            Path: /basic\n            Method: post\n            ApiId: !Ref MyApi\n            TimeoutInMillis: 10000\n        SimpleCase: # path exists, integration doesn't\n          Type: HttpApi\n          Properties:\n            ApiId: !Ref MyApi\n            TimeoutInMillis: !Ref Timeout\n            PayloadFormatVersion: '1.0'\n        PathParametersExisting:\n          Type: HttpApi\n          Properties:\n            ApiId: !Ref MyApi\n            Path: /get/{something}/with/{params}\n            Method: GET\n  MyApi:\n    Type: AWS::Serverless::HttpApi\n    Properties:\n      CorsConfiguration:\n        AllowOrigins:\n        - https://local.com\n      DefinitionBody:\n        info:\n          version: '1.0'\n          title:\n            Ref: AWS::StackName\n        x-amazon-apigateway-cors:\n          allowOrigins:\n          - https://www.overriden.com\n          allowMethods:\n          - POST\n          maxAge: 3600\n        paths:\n          /basic:\n            post:\n              x-amazon-apigateway-integration:\n                httpMethod: POST\n                type: aws_proxy\n                uri:\n                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DifferentFunction.Arn}/invocations\n                payloadFormatVersion: '1.0'\n              security:\n              - OpenIdAuth:\n                - scope3\n              responses: {}\n          /get/{something}/with/{params}:\n            get:\n              parameters:\n              - name: something\n                in: path\n              responses: {}\n          /integration:\n            post:\n              x-amazon-apigateway-integration:\n                httpMethod: POST\n                type: aws_proxy\n                uri:\n                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HttpApiFunction.Arn}/invocations\n                payloadFormatVersion: '1.0'\n              security:\n              - OpenIdAuth:\n                - scope1\n                - scope2\n              responses: {}\n          $default:\n            x-amazon-apigateway-any-method:\n              isDefaultRoute: true\n              security:\n              - OpenIdAuth:\n                - scope1\n                - scope2\n              responses: {}\n          /oauth2:\n            post:\n              x-amazon-apigateway-integration:\n                httpMethod: POST\n                type: aws_proxy\n                uri:\n                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HttpApiFunction.Arn}/invocations\n                payloadFormatVersion: '1.0'\n              security:\n              - oauth2Auth:\n                - scope4\n              responses: {}\n        openapi: 3.0.1\n        components:\n          securitySchemes:\n            oauth2Auth:\n              type: oauth2\n              x-amazon-apigateway-authorizer:\n                identitySource: $request.querystring.param\n                type: jwt\n                jwtConfiguration:\n                  audience:\n                  - MyApi\n                  issuer: https://www.example.com/v1/connect/oidc\n            OpenIdAuth:\n              type: openIdConnect\n              x-amazon-apigateway-authorizer:\n                identitySource: $request.querystring.param\n                type: jwt\n                jwtConfiguration:\n                  audience:\n                  - MyApi\n                  issuer: https://www.example.com/v1/connect/oidc\n                openIdConnectUrl: https://www.example.com/v1/connect\n",
			"canonicalURL": "/github.com/aws/aws-sam-cli@bce85fd41c1b522ac20899ff4f2917db6ed96b93/-/blob/tests/functional/commands/validate/lib/models/http_api_existing_openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aws/aws-sam-cli/blob/bce85fd41c1b522ac20899ff4f2917db6ed96b93/tests/functional/commands/validate/lib/models/http_api_existing_openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse version: at tests/functional/commands/validate/lib/models/http_api_existing_openapi.yaml:3:1: invalid version: invalid major version: strconv.Atoi: parsing \"\": invalid syntax"
}