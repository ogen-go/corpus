{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "receptive.io-1.0.0-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/receptive.io-1.0.0-swagger.yaml",
			"byteSize": 29682,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    email: support@receptive.io\n    name: Receptive Support\n    x-twitter: receptiveio\n  description: \u003e-\n    ## Who is this for?\n\n\n    This documentation is for developers creating their own integration with [Receptive's](https://www.receptive.io) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.\n\n\n    ## Authentication\n\n\n    API calls generally need to be authenticated. Generate an API Key at https://receptive.io/app/#/vendor/settings?section=integrate. This key should then be added to every request URL as a query parameter named 'auth-token'\n\n\n    ## Endpoint\n\n\n    API endpoint is https://api.eu-west-1.receptive.io.\n\n    ## Notes\n\n\n    API endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Receptive server depending on your hostname.\n\n\n    ## Generating client code\n\n\n    This documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)\n  title: Receptive\n  version: 1.0.0\n  x-apisguru-categories:\n    - ecommerce\n  x-logo:\n    url: https://twitter.com/receptiveio/profile_image?size=original\n  x-origin:\n    - format: swagger\n      url: http://apidoc.receptive.io/receptive.swagger.json\n      version: \"2.0\"\n  x-providerName: receptive.io\nsecurity:\n  - userApiKey: []\npaths:\n  /accounts:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/order_dir\"\n        - description: The field to use for sort\n          in: query\n          name: order_by\n          required: false\n          schema:\n            type: string\n            enum:\n              - churned\n              - last_seen\n              - name\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Account\"\n                type: array\n      summary: Query accounts\n      tags:\n        - account\n  \"/accounts/{id}\":\n    delete:\n      description: This removes most traces of an Accounts existence from the system.\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: number\n      responses:\n        \"200\":\n          description: the deleted Account\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Account\"\n      summary: Delete an Account\n      tags:\n        - account\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/accountIdInPath\"\n      responses:\n        \"200\":\n          description: an Account\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Account\"\n        \"410\":\n          $ref: \"#/components/responses/410\"\n      summary: Get an Account\n      tags:\n        - account\n    put:\n      parameters:\n        - $ref: \"#/components/parameters/accountIdInPath\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                monthly_value:\n                  format: float\n                  type: number\n                name:\n                  type: string\n                status:\n                  enum:\n                    - paying\n                    - prospect\n                    - not_paying\n                  type: string\n              type: object\n        description: Updated Account values\n      responses:\n        \"200\":\n          description: Success\n      summary: Update an Account\n      tags:\n        - account\n  \"/accounts/{id}/tags\":\n    delete:\n      description: Removes all custom tags associated with the Account\n      parameters:\n        - $ref: \"#/components/parameters/accountIdInPath\"\n      responses:\n        \"200\":\n          description: success\n      summary: Delete custom Account tags\n      tags:\n        - account\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/accountIdInPath\"\n      responses:\n        \"200\":\n          description: \u003e-\n            Returns an array of maps specifying tags under each tag group, for\n            example:\n\n\n            [\n\n\n            {'impacts' =\u003e ['sales']},\n\n\n            {'resources' =\u003e ['dev', 'test', 'support']}\n\n\n            ]\n        \"404\":\n          description: Account not found\n      summary: Get custom Account tags\n      tags:\n        - account\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/accountIdInPath\"\n      requestBody:\n        $ref: \"#/components/requestBodies/Tags\"\n      responses:\n        \"200\":\n          description: Updated Account tags\n        \"404\":\n          description: Account not found\n      summary: Overwrite current custom Account tags with the given tags\n      tags:\n        - account\n  /features:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/order_dir\"\n        - description: Filter by whether the features are shown/hidden from customer, if\n            supplied.\n          in: query\n          name: is_private\n          required: false\n          schema:\n            type: boolean\n        - description: Filter by User ID, if supplied.\n          in: query\n          name: wanted_by\n          required: false\n          schema:\n            type: integer\n        - description: The field to use for sort\n          in: query\n          name: order_by\n          required: false\n          schema:\n            type: string\n            enum:\n              - title\n              - created_at\n              - updated_at\n              - declined_at\n              - developing_at\n              - planned_at\n              - released_at\n              - waiting_at\n              - deleted_at\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Feature\"\n                type: array\n      summary: Query features\n      tags:\n        - feature\n  \"/features/{id}\":\n    get:\n      parameters:\n        - description: ID of the feature\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Feature\"\n      summary: Get a Feature by ID\n      tags:\n        - feature\n  \"/features/{id}/tags\":\n    delete:\n      description: Removes all custom tags associated with the Feature\n      parameters:\n        - description: Receptive's Feature ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: number\n      responses:\n        \"200\":\n          description: success\n      summary: Delete custom Feature tags\n      tags:\n        - feature\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/accountIdInPath\"\n      responses:\n        \"200\":\n          description: \u003e-\n            Returns an array of maps specifying tags under each tag group, for\n            example:\n\n\n            [\n\n\n            {'impacts' =\u003e ['sales']},\n\n\n            {'resources' =\u003e ['dev', 'test', 'support']}\n\n\n            ]\n        \"404\":\n          description: Feature not found\n      summary: Get custom Feature tags\n      tags:\n        - feature\n    post:\n      parameters:\n        - description: Receptive's Feature ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: number\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Tags\"\n        required: true\n      responses:\n        \"200\":\n          description: Updated Feature tags\n        \"404\":\n          description: Feature not found\n      summary: Overwrite current custom Feature tags with the given tags\n      tags:\n        - feature\n  /health-check/ping:\n    get:\n      description: Provides a response for automatic checks that the API and load balancers\n        are healthy\n      responses:\n        \"200\":\n          description: API is healthy\n        \"503\":\n          description: Load balancers cannot route a request to a healthy API server\n      security: []\n      summary: Health check for API\n      tags:\n        - system\n  /search:\n    get:\n      parameters:\n        - description: Specifies the type of entity being searched for. Must be set to\n            'feature'\n          in: query\n          name: scope\n          required: true\n          schema:\n            type: string\n            enum:\n              - feature\n        - description: The search term.\n          in: query\n          name: q\n          required: true\n          schema:\n            type: string\n        - description: \"A comma seperated list of status values to filter by, if required.\n            Valid values: 'new', 'waiting', 'planned', 'developing', 'released',\n            'declined'.\"\n          in: query\n          name: status\n          required: false\n          schema:\n            type: string\n            enum:\n              - new\n              - waiting\n              - planned\n              - developing\n              - released\n              - declined\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Feature\"\n                type: array\n      summary: Search features\n      tags:\n        - feature\n  /users:\n    get:\n      description: get a list of User records\n      parameters:\n        - description: role\n          in: query\n          name: role\n          required: true\n          schema:\n            type: string\n            enum:\n              - endUser\n              - vendorUser\n        - description: Filter by Account ID, if supplied. Only useful if role param is\n            endUser\n          in: query\n          name: account\n          required: false\n          schema:\n            type: integer\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/order_by\"\n        - $ref: \"#/components/parameters/order_dir\"\n      responses:\n        \"200\":\n          description: User records\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/User\"\n                type: array\n      summary: fetch User records\n      tags:\n        - user\n    post:\n      description: Replicates much of the functionality of the widget ping, allowing\n        callers to create or update User records for End Users. If you call this\n        with a new User and/or Account, the record will be created. If you call\n        for an existing User/Account, the record will be updated. You can also\n        call this at EndUser login time, or more frequently, to notify Receptive\n        that the EndUser has been seen. This keeps Receptive's 'last seen' data\n        fresh and updates your reporting. This endpoint is used by our Zapier\n        integration. The only value allowed in user.roles is 'endUser'. The id\n        you supply here for the User and Account should be your own unique id,\n        which Receptive calls external_id. This probably isn't the same as\n        Receptive's id seen elsewhere in the API.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EndUserPing\"\n        description: the account and user\n        required: true\n      responses:\n        \"200\":\n          description: Success\n      summary: Ping to create or update an EndUser and Account in one call\n      tags:\n        - user\n  /users/invite_end_user:\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                account_external_id:\n                  type: string\n                account_name:\n                  type: string\n                account_status:\n                  enum:\n                    - prospect\n                    - not_paying\n                    - paying\n                  type: string\n                email:\n                  type: string\n                full_name:\n                  type: string\n                monthly_value:\n                  format: float\n                  type: number\n                send_invite:\n                  type: boolean\n                user_external_id:\n                  type: string\n              required:\n                - account_status\n              type: object\n        required: true\n      responses:\n        \"200\":\n          description: success\n      summary: Invite an EndUser (customer)\n      tags:\n        - user\n  /users/invite_vendor_user:\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  type: string\n                external_id:\n                  type: string\n                full_name:\n                  type: string\n                permission_group_id:\n                  format: integer\n                  type: number\n                team:\n                  type: string\n              required:\n                - email\n                - full_name\n              type: object\n        required: true\n      responses:\n        \"200\":\n          description: success\n      summary: Invite a VendorUser (Team member)\n      tags:\n        - user\n        - team\n  /users/search:\n    get:\n      parameters:\n        - description: Find using your external ID, rather than the ID generated by\n            Receptive\n          in: query\n          name: external_id\n          required: false\n          schema:\n            type: string\n        - description: Find user by their email address. Role param must be specified when\n            using this option\n          in: query\n          name: email\n          required: false\n          schema:\n            type: string\n        - description: Users role ('vendorUser' or 'endUser'). Only useful when finding a\n            user by their email address\n          in: query\n          name: role\n          schema:\n            type: string\n            enum:\n              - endUser\n              - vendorUser\n      responses:\n        \"200\":\n          description: the User record\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"410\":\n          description: User has been deleted\n      summary: Find a User with a query\n      tags:\n        - user\n  \"/users/{id}\":\n    delete:\n      description: This removes most traces of a User's existence from the system. For an\n        EndUser you might want to consider just letting them churn after a\n        period of inactivity.\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: number\n      responses:\n        \"200\":\n          description: the deleted User\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n      summary: Delete a User\n      tags:\n        - user\n    get:\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: number\n      responses:\n        \"200\":\n          description: the User record\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"410\":\n          description: User has been deleted\n      summary: Get a User record\n      tags:\n        - user\n    put:\n      parameters:\n        - description: Receptive's User ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: number\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  type: string\n                external_id:\n                  type: string\n                name:\n                  type: string\n                permission_group_id:\n                  description: only valid for users with role 'vendorUser'\n                  format: integer\n                  type: number\n              type: object\n      responses:\n        \"200\":\n          description: updated User\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n      summary: Update a User\n      tags:\n        - user\n  \"/users/{id}/tags\":\n    delete:\n      description: Removes all custom tags associated with the User\n      parameters:\n        - description: Receptive's User ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: number\n      responses:\n        \"200\":\n          description: success\n      summary: Delete custom User tags\n      tags:\n        - user\n    get:\n      parameters:\n        - description: Receptive's User ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: number\n      responses:\n        \"200\":\n          description: \u003e-\n            Returns an array of maps specifying tags under each tag group, for\n            example:\n\n\n            [\n\n\n            {'impacts' =\u003e ['sales']},\n\n\n            {'resources' =\u003e ['dev', 'test', 'support']}\n\n\n            ]\n        \"404\":\n          description: User not found\n      summary: Get custom User tags\n      tags:\n        - user\n    post:\n      parameters:\n        - description: Receptive's User ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: number\n      requestBody:\n        $ref: \"#/components/requestBodies/Tags\"\n      responses:\n        \"200\":\n          description: Updated User tags\n        \"404\":\n          description: User not found\n      summary: Overwrite current custom User tags with the given tags\n      tags:\n        - user\n  /vendor_users:\n    post:\n      description: the POST /vendor_users is very similar to the POST\n        /users/invite_vendor_user but /vendor_users is intended for consumers to\n        refresh team member data periodically, rather than just a one-off user\n        creation.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  type: string\n                external_id:\n                  type: string\n                full_name:\n                  type: string\n                permission_group_id:\n                  format: integer\n                  type: number\n                team:\n                  description: A comma seperated list of teams the user belongs to\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          description: success\n      summary: Create or update a team member by their external_id\n      tags:\n        - user\n        - team\n  /votes:\n    get:\n      parameters:\n        - description: Include only votes by User that voted on a feature.\n          in: query\n          name: user_id\n          required: false\n          schema:\n            type: integer\n        - description: Include only votes for Feature with this Feature ID\n          in: query\n          name: feature_id\n          required: false\n          schema:\n            type: integer\n        - description: Include only votes that are positive\n          in: query\n          name: positive\n          required: false\n          schema:\n            type: boolean\n        - description: Include only votes that are negative\n          in: query\n          name: negative\n          required: false\n          schema:\n            type: boolean\n        - description: Offset to start at\n          in: query\n          name: start\n          required: false\n          schema:\n            type: number\n            minimum: 0\n        - description: Limit the number of records returned\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: number\n            minimum: 0\n      responses:\n        \"200\":\n          description: Vote records\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Vote\"\n                type: array\n      tags:\n        - votes\n    post:\n      description: Automatically subscribes/unsubscribes the User to the specifed feature\n        depending on the quantity value\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                user_id:\n                  type: string\n                votes:\n                  items:\n                    $ref: \"#/components/schemas/FeatureVote\"\n                  type: array\n              type: object\n        required: true\n      responses:\n        \"200\":\n          description: Updated votes\n      summary: update specified votes for a User\n      tags:\n        - votes\nservers:\n  - url: https://api.eu-west-1.receptive.io\ncomponents:\n  parameters:\n    accountIdInPath:\n      description: Account ID (generated by Receptive)\n      in: path\n      name: id\n      required: true\n      schema:\n        type: number\n    limit:\n      description: Limit the number of records returned\n      in: query\n      name: limit\n      required: false\n      schema:\n        type: number\n        minimum: 0\n    order_by:\n      description: The field to use for sort\n      in: query\n      name: order_by\n      required: false\n      schema:\n        type: string\n    order_dir:\n      description: The sort direction\n      in: query\n      name: order_dir\n      required: false\n      schema:\n        type: string\n        enum:\n          - asc\n          - desc\n    start:\n      description: Offset to start at\n      in: query\n      name: start\n      required: false\n      schema:\n        type: number\n        minimum: 0\n  responses:\n    \"410\":\n      description: Resource has been deleted\n      headers:\n        status:\n          schema:\n            type: integer\n            enum:\n              - \"410\"\n  requestBodies:\n    Tags:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Tags\"\n      description: |-\n        An array of maps specifying tags under each tag group, for example:\n\n        [\n\n        {'impacts' =\u003e ['sales']},\n\n        {'resources' =\u003e ['dev', 'test', 'support']}\n\n        ]\n      required: true\n  securitySchemes:\n    userApiKey:\n      description: Generate an API Key at\n        https://receptive.io/app/#/vendor/settings?section=integrate. This key\n        should then be added to every request URL as a query parameter.\n      in: query\n      name: auth-token\n      type: apiKey\n  schemas:\n    Account:\n      properties:\n        created_at:\n          format: dateTime\n          type: string\n        external_id:\n          description: ID for the Account, provided by the Receptive Customer\n          type: string\n        id:\n          type: string\n        is_paying:\n          type: boolean\n        monthly_value:\n          format: float\n          type: number\n        name:\n          type: string\n        status:\n          type: string\n      type: object\n    AccountWithTags:\n      properties:\n        created_at:\n          format: dateTime\n          type: string\n        id:\n          type: string\n        is_paying:\n          type: boolean\n        monthly_value:\n          format: float\n          type: number\n        name:\n          type: string\n        status:\n          type: string\n        tags:\n          $ref: \"#/components/schemas/Tags\"\n      type: object\n    EndUserPing:\n      properties:\n        account:\n          $ref: \"#/components/schemas/AccountWithTags\"\n        return_url:\n          type: string\n        user:\n          properties:\n            allowed_products:\n              $ref: \"#/components/schemas/Products\"\n            created_at:\n              format: dateTime\n              type: string\n            email:\n              type: string\n            full_name:\n              type: string\n            id:\n              type: string\n            roles:\n              enum:\n                - endUser\n              type: string\n            tags:\n              $ref: \"#/components/schemas/Tags\"\n          type: object\n      type: object\n    Feature:\n      properties:\n        app_url:\n          description: URL for this Feature\n          type: string\n        created_at:\n          type: string\n        created_by_user_id:\n          type: integer\n        declined_at:\n          type: string\n        description:\n          type: string\n        developing_at:\n          type: string\n        effort:\n          description: How much Effort is assigned to the development of this Feature. Not\n            visible to EndUsers\n          type: integer\n        form_entry:\n          description: a JSON serialized version of the Form containing the description and\n            other fields for this Feature.\n          type: string\n        id:\n          type: number\n        is_private:\n          description: Is this Feature hidden from EndUsers?\n          type: boolean\n        merged_to_feature_id:\n          description: If this Feature was merged into another, the ID of the preserved\n            Feature\n          type: integer\n        planned_at:\n          type: string\n        products:\n          items:\n            description: Products associated with this Feature\n            type: string\n          type: array\n        released_at:\n          type: string\n        resolution:\n          description: The latest Resolution set by the VendorUser\n          type: string\n        resolved_by_user_id:\n          type: integer\n        status:\n          enum:\n            - new\n            - waiting\n            - planned\n            - developing\n            - released\n            - declined\n          type: string\n        status_changed_at:\n          type: string\n        tags:\n          $ref: \"#/components/schemas/Tags\"\n        title:\n          type: string\n        updated_at:\n          type: string\n        updated_by_user_id:\n          type: integer\n        uploads:\n          items:\n            type: string\n          type: array\n        vendor_id:\n          type: integer\n        view_count:\n          description: How many times has this Feature been viewed. May only be visible to\n            VendorUsers, depending on config\n          type: integer\n        waiting_at:\n          type: string\n      type: object\n    FeatureVote:\n      properties:\n        feature_id:\n          type: string\n        quantity:\n          description: Value between -1 and 1000000. -1 indicates that the User is \"Not\n            Interested\" in the feature.\n          type: integer\n      type: object\n    Products:\n      description: \u003e-\n        Supplied as an array of maps where each map describes an existing or new\n        product e.g [{id:exising_product_id, name:existing name},\n        {id:new_product_id, name: new product name}]. \n\n        Existing product id/names held in your account can be referenced at https://receptive.io/app/#/vendor/products\n      items:\n        type: string\n      type: array\n    Tags:\n      description: \u003e-\n        Simple tags are supplied as an array of Strings e.g ['Foo', 'Bar']. \n\n        To put the tags in categories replace the Strings with maps of using tag category as the key and tag value as the value, e.g \n\n\n        [\n\n        {Color:Red}, {Flavor:Cherry}\n\n        ]. Simple and categorised tags can be mixed in the same array.\n      items:\n        type: string\n      type: array\n    User:\n      properties:\n        account:\n          $ref: \"#/components/schemas/UserAccount\"\n        created_at:\n          format: dateTime\n          type: string\n        email:\n          type: string\n        external_id:\n          type: string\n        id:\n          type: string\n        name:\n          type: string\n        roles:\n          enum:\n            - endUser\n          type: string\n      type: object\n    UserAccount:\n      properties:\n        id:\n          type: string\n        monthly_value:\n          format: float\n          type: number\n        name:\n          type: string\n        status:\n          enum:\n            - paying\n            - prospect\n            - not_paying\n          type: string\n      type: object\n    Vote:\n      properties:\n        created_at:\n          type: string\n        feature_id:\n          type: integer\n        quantity:\n          description: A negative number indicates that the User has indicated \"Not\n            Interested\" in a Features. Between 0 and 1000000 is the User's\n            current prioritization of the Feature.\n          type: integer\n        updated_at:\n          type: string\n        user_id:\n          type: integer\n      type: object\n"
		}
	},
	"Error": "parse: parse spec: parse components: responses: \"410\": headers: status: schema: parse enum values: parse value \"\\\"410\\\"\": expected type \"integer\", got \"string\""
}