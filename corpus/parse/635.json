{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/container-registry/harbor-python-client-api"
		},
		"file": {
			"name": "harbor_legacy_openapi3.yaml",
			"path": "harbor_legacy_openapi3.yaml",
			"content": "openapi: 3.0.0\ninfo:\n  title: Harbor API\n  description: These APIs provide services for manipulating Harbor project.\n  version: 2.0\nsecurity:\n  - basicAuth: []\npaths:\n  '/health':\n    get:\n      summary: Health check API\n      description: |\n        The endpoint returns the health stauts of the system.\n      tags:\n        - Products\n      responses:\n        '200':\n          description: The system health status.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OverallHealthStatus'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/OverallHealthStatus'\n  '/projects/{project_id}/metadatas':\n    get:\n      summary: Get project metadata.\n      description: |\n        This endpoint returns metadata of the project specified by project ID.\n      parameters:\n        - name: project_id\n          in: path\n          description: The ID of project.\n          required: true\n          schema:\n            type: integer\n            format: int64\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Get metadata successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectMetadata'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ProjectMetadata'\n        '401':\n          description: User need to login first.\n        '500':\n          description: Internal server errors.\n    post:\n      summary: Add metadata for the project.\n      description: |\n        This endpoint is aimed to add metadata of a project.\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          description: Selected project ID.\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProjectMetadata'\n        description: The metadata of project.\n        required: true\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Add metadata successfully.\n        '400':\n          description: Invalid request.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User does not have permission to the project.\n        '404':\n          description: Project ID does not exist.\n        '415':\n          $ref: '#/components/responses/UnsupportedMediaType'\n        '500':\n          description: Internal server errors.\n  '/projects/{project_id}/metadatas/{meta_name}':\n    get:\n      summary: Get project metadata\n      description: |\n        This endpoint returns specified metadata of a project.\n      parameters:\n        - name: project_id\n          in: path\n          description: Project ID for filtering results.\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: meta_name\n          in: path\n          description: The name of metadat.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Get metadata successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectMetadata'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ProjectMetadata'\n        '401':\n          description: User need to log in first.\n        '500':\n          description: Internal server errors.\n    put:\n      summary: Update metadata of a project.\n      description: |\n        This endpoint is aimed to update the metadata of a project.\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          description: The ID of project.\n          schema:\n            type: integer\n            format: int64\n        - name: meta_name\n          in: path\n          description: The name of metadat.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Updated metadata successfully.\n        '400':\n          description: Invalid request.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User does not have permission to the project.\n        '404':\n          description: Project or metadata does not exist.\n        '500':\n          description: Internal server errors.\n    delete:\n      summary: Delete metadata of a project\n      description: |\n        This endpoint is aimed to delete metadata of a project.\n      parameters:\n        - name: project_id\n          in: path\n          description: The ID of project.\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: meta_name\n          in: path\n          description: The name of metadat.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Metadata is deleted successfully.\n        '400':\n          description: Invalid requst.\n        '403':\n          description: User need to log in first.\n        '404':\n          description: Project or metadata does not exist.\n        '500':\n          description: Internal server errors.\n  '/projects/{project_id}/members':\n    get:\n      summary: Get all project member information\n      description: Get all project member information\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          description: Relevant project ID.\n          schema:\n            type: integer\n            format: int64\n        - name: entityname\n          in: query\n          description: The entity name to search.\n          schema:\n            type: string\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Get project members successfully.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProjectMemberEntity'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProjectMemberEntity'\n        '400':\n          description: The project id is invalid.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User in session does not have permission to the project.\n        '404':\n          description: Project ID does not exist.\n        '500':\n          description: Unexpected internal errors.\n    post:\n      summary: Create project member\n      description: \u003e-\n        Create project member relationship, the member can be one of the\n        user_member and group_member,  The user_member need to specify user_id\n        or username. If the user already exist in harbor DB, specify the\n        user_id,  If does not exist in harbor DB, it will SearchAndOnBoard the\n        user. The group_member need to specify id or ldap_group_dn. If the group\n        already exist in harbor DB. specify the user group's id,  If does not\n        exist, it will SearchAndOnBoard the group.\n      tags:\n        - Products\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          description: Relevant project ID.\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProjectMember'\n      responses:\n        '201':\n          description: Project member created successfully.\n          headers:\n            Location:\n              description: The URL of the created resource\n              schema:\n                type: string\n        '400':\n          description: \u003e-\n            Illegal format of project member or project id is invalid, or LDAP\n            DN is invalid.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User in session does not have permission to the project.\n        '409':\n          description: \u003e-\n            A user group with same group name already exist or an LDAP user\n            group with same DN already exist.\n        '500':\n          description: Unexpected internal errors.\n  '/projects/{project_id}/members/{mid}':\n    get:\n      summary: Get the project member information\n      description: Get the project member information\n      tags:\n        - Products\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          description: Relevant project ID.\n          schema:\n            type: integer\n            format: int64\n        - name: mid\n          in: path\n          required: true\n          description: The member ID\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Project member retrieved successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectMemberEntity'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ProjectMemberEntity'\n        '400':\n          description: 'Illegal format of project member or invalid project id, member id.'\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User in session does not have permission to the project.\n        '404':\n          description: Project or projet member does not exist.\n        '500':\n          description: Unexpected internal errors.\n    put:\n      summary: Update project member\n      description: Update project member relationship\n      tags:\n        - Products\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          description: Relevant project ID.\n          schema:\n            type: integer\n            format: int64\n        - name: mid\n          in: path\n          required: true\n          description: Member ID.\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleRequest'\n      responses:\n        '200':\n          description: Project member updated successfully.\n        '400':\n          description: \u003e-\n            Invalid role id, it should be 1,2 or 3, or invalid project id, or\n            invalid member id.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User in session does not have permission to the project.\n        '404':\n          description: project or project member does not exist.\n        '500':\n          description: Unexpected internal errors.\n    delete:\n      summary: Delete project member\n      tags:\n        - Products\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          description: Relevant project ID.\n          schema:\n            type: integer\n            format: int64\n        - name: mid\n          in: path\n          required: true\n          description: Member ID.\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Project member deleted successfully.\n        '400':\n          description: The project id or project member id is invalid.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User in session does not have permission to the project.\n        '500':\n          description: Unexpected internal errors.\n  '/statistics':\n    get:\n      summary: Get projects number and repositories number relevant to the user\n      description: \u003e\n        This endpoint is aimed to statistic all of the projects number and\n        repositories number relevant to the logined user, also the public\n        projects number and repositories number. If the user is admin, he can\n        also get total projects number and total repositories number.\n      tags:\n        - Products\n      responses:\n        '200':\n          description: \u003e-\n            Get the projects number and repositories number relevant to the user\n            successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatisticMap'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/StatisticMap'\n        '401':\n          description: User need to log in first.\n        '500':\n          description: Unexpected internal errors.\n  '/users':\n    get:\n      summary: Get registered users of Harbor.\n      description: \u003e\n        This endpoint is for user to search registered users, support for\n        filtering results with username.Notice, by now this operation is only\n        for administrator.\n      parameters:\n        - name: username\n          in: query\n          required: false\n          description: Username for filtering results.\n          schema:\n            type: string\n        - name: email\n          in: query\n          required: false\n          description: Email for filtering results.\n          schema:\n            type: string\n        - name: page\n          in: query\n          required: false\n          description: 'The page number, default is 1.'\n          schema:\n            type: integer\n            format: int32\n        - name: page_size\n          in: query\n          required: false\n          description: The size of per page.\n          schema:\n            type: integer\n            format: int32\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Searched for users of Harbor successfully.\n          headers:\n            X-Total-Count:\n              description: The total count of available items\n              schema:\n                type: integer\n            Link:\n              description: Link to previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        '400':\n          description: Invalid user ID.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User does not have permission of admin role.\n        '500':\n          description: Unexpected internal errors.\n    post:\n      summary: Creates a new user account.\n      description: |\n        This endpoint is to create a user if the user does not already exist.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: New created user.\n        required: true\n      tags:\n        - Products\n      responses:\n        '201':\n          description: User created successfully.\n          headers:\n            Location:\n              description: The URL of the created resource\n              schema:\n                type: string\n        '400':\n          description: Unsatisfied with constraints of the user creation.\n        '403':\n          description: \u003e-\n            User registration can only be used by admin role user when\n            self-registration is off.\n        '415':\n          $ref: '#/components/responses/UnsupportedMediaType'\n        '500':\n          description: Unexpected internal errors.\n  '/users/current':\n    get:\n      summary: Get current user info.\n      description: |\n        This endpoint is to get the current user information.\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Get current user information successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/User'\n        '401':\n          description: User need to log in first.\n  '/users/current/permissions':\n    get:\n      summary: Get current user permissions.\n      description: |\n        This endpoint is to get the current user permissions.\n      parameters:\n        - name: scope\n          in: query\n          required: false\n          description: Get permissions of the scope\n          schema:\n            type: string\n        - name: relative\n          in: query\n          required: false\n          description: \u003e\n            If true, the resources in the response are relative to the scope,\n\n            eg for resource '/project/1/repository' if relative is 'true' then\n            the resource in response will be 'repository'.\n          schema:\n            type: boolean\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Get current user permission successfully.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Permission'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Permission'\n        '401':\n          description: User need to log in first.\n        '500':\n          description: Internal errors.\n  '/users/search':\n    get:\n      summary: Search users by username\n      description: |\n        This endpoint is to search the users by username.\n      parameters:\n        - name: username\n          in: query\n          required: true\n          description: Username for filtering results.\n          schema:\n            type: string\n        - name: page\n          in: query\n          required: false\n          description: 'The page number, default is 1.'\n          schema:\n            type: integer\n            format: int32\n        - name: page_size\n          in: query\n          required: false\n          description: The size of per page.\n          schema:\n            type: integer\n            format: int32\n      tags:\n        - Products\n      responses:\n        '200':\n          description: 'Search users by username, email successfully.'\n          headers:\n            X-Total-Count:\n              description: The total count of available items\n              schema:\n                type: integer\n            Link:\n              description: Link to previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserSearch'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserSearch'\n        '500':\n          description: Unexpected internal errors.\n  '/users/{user_id}':\n    get:\n      summary: Get a user's profile.\n      description: |\n        Get user's profile with user id.\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          description: Registered user ID\n          schema:\n            type: integer\n            format: int\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Get user's profile successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: Invalid user ID.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User does not have permission of admin role.\n        '404':\n          description: User ID does not exist.\n        '500':\n          description: Unexpected internal errors.\n    put:\n      summary: Update a registered user to change his profile.\n      description: |\n        This endpoint let a registered user change his profile.\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          description: Registered user ID\n          schema:\n            type: integer\n            format: int\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserProfile'\n        description: 'Only email, realname and comment can be modified.'\n        required: true\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Updated user's profile successfully.\n        '400':\n          description: Invalid user ID.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User does not have permission of admin role.\n        '404':\n          description: User ID does not exist.\n        '500':\n          description: Unexpected internal errors.\n    delete:\n      summary: Mark a registered user as be removed.\n      description: |\n        This endpoint let administrator of Harbor mark a registered user as\n        be removed.It actually won't be deleted from DB.\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          description: User ID for marking as to be removed.\n          schema:\n            type: integer\n            format: int\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Marked user as be removed successfully.\n        '400':\n          description: Invalid user ID.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User does not have permission of admin role.\n        '404':\n          description: User ID does not exist.\n        '500':\n          description: Unexpected internal errors.\n  '/users/{user_id}/password':\n    put:\n      summary: Change the password on a user that already exists.\n      description: \u003e\n        This endpoint is for user to update password. Users with the admin role\n        can change any user's password. Guest users can change only their own\n        password.\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          description: Registered user ID.\n          schema:\n            type: integer\n            format: int\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Password'\n        description: \u003e-\n          Password to be updated, the attribute 'old_password' is optional when\n          the API is called by the system administrator.\n        required: true\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Updated password successfully.\n        '400':\n          description: Invalid user ID; Old password is blank; New password is blank.\n        '401':\n          description: Don't have authority to change password. Please check login status.\n        '403':\n          description: \u003e-\n            The caller does not have permission to update the password of the\n            user with given ID, or the old password in request body is not\n            correct.\n        '500':\n          description: Unexpected internal errors.\n  '/users/{user_id}/sysadmin':\n    put:\n      summary: Update a registered user to change to be an administrator of Harbor.\n      description: |\n        This endpoint let a registered user change to be an administrator\n        of Harbor.\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          description: Registered user ID\n          schema:\n            type: integer\n            format: int\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SysAdminFlag'\n        description: Toggle a user to admin or not.\n        required: true\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Updated user's admin role successfully.\n        '400':\n          description: Invalid user ID.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User does not have permission of admin role.\n        '404':\n          description: User ID does not exist.\n        '500':\n          description: Unexpected internal errors.\n  '/users/{user_id}/cli_secret':\n    put:\n      summary: Set CLI secret for a user.\n      description: \u003e\n        This endpoint let user generate a new CLI secret for himself.  This API\n        only works when auth mode is set to 'OIDC'.\n\n        Once this API returns with successful status, the old secret will be\n        invalid, as there will be only one CLI secret\n\n        for a user.\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          description: User ID\n          schema:\n            type: integer\n            format: int\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                secret:\n                  type: string\n                  description: The new secret\n        description: JSON object that includes the new secret\n        required: true\n      tags:\n        - Products\n      responses:\n        '200':\n          description: The secret is successfully updated\n        '400':\n          description: \u003e-\n            Invalid user ID.  Or user is not onboarded via OIDC authentication.\n            Or the secret does not meet the standard.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: Non-admin user can only generate the cli secret of himself.\n        '404':\n          description: User ID does not exist.\n        '412':\n          description: \u003e-\n            The auth mode of the system is not \"oidc_auth\", or the user is not\n            onboarded via OIDC AuthN.\n        '500':\n          description: Unexpected internal errors.\n  '/labels':\n    get:\n      summary: List labels according to the query strings.\n      description: |\n        This endpoint let user list labels by name, scope and project_id\n      parameters:\n        - name: name\n          in: query\n          required: false\n          description: The label name.\n          schema:\n            type: string\n        - name: scope\n          in: query\n          required: true\n          description: \u003e-\n            The label scope. Valid values are g and p. g for global labels and p\n            for project labels.\n          schema:\n            type: string\n        - name: project_id\n          in: query\n          required: false\n          description: 'Relevant project ID, required when scope is p.'\n          schema:\n            type: integer\n            format: int64\n        - name: page\n          in: query\n          required: false\n          description: The page number.\n          schema:\n            type: integer\n            format: int32\n        - name: page_size\n          in: query\n          required: false\n          description: The size of per page.\n          schema:\n            type: integer\n            format: int32\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Get successfully.\n          headers:\n            X-Total-Count:\n              description: The total count of available items\n              schema:\n                type: integer\n            Link:\n              description: Link to previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Label'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Label'\n        '400':\n          description: Invalid parameters.\n        '401':\n          description: User need to log in first.\n        '500':\n          description: Unexpected internal errors.\n    post:\n      summary: Post creates a label\n      description: |\n        This endpoint let user creates a label.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Label'\n        description: The json object of label.\n        required: true\n      tags:\n        - Products\n      responses:\n        '201':\n          description: Create successfully.\n          headers:\n            Location:\n              description: The URL of the created resource\n              schema:\n                type: string\n        '400':\n          description: Invalid parameters.\n        '401':\n          description: User need to log in first.\n        '409':\n          description: Label with the same name and same scope already exists.\n        '415':\n          $ref: '#/components/responses/UnsupportedMediaType'\n        '500':\n          description: Unexpected internal errors.\n  '/labels/{id}':\n    get:\n      summary: Get the label specified by ID.\n      description: |\n        This endpoint let user get the label by specific ID.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Label ID\n          schema:\n            type: integer\n            format: int64\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Get successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Label'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Label'\n        '401':\n          description: User need to log in first.\n        '404':\n          description: The resource does not exist.\n        '500':\n          description: Unexpected internal errors.\n    put:\n      summary: Update the label properties.\n      description: |\n        This endpoint let user update label properties.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Label ID\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Label'\n        description: The updated label json object.\n        required: true\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Update successfully.\n        '400':\n          description: Invalid parameters.\n        '401':\n          description: User need to log in first.\n        '404':\n          description: The resource does not exist.\n        '409':\n          description: The label with the same name already exists.\n        '500':\n          description: Unexpected internal errors.\n    delete:\n      summary: Delete the label specified by ID.\n      description: |\n        Delete the label specified by ID.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Label ID\n          schema:\n            type: integer\n            format: int64\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Delete successfully.\n        '400':\n          description: Invalid parameters.\n        '401':\n          description: User need to log in first.\n        '404':\n          description: The resource does not exist.\n        '500':\n          description: Unexpected internal errors.\n  '/usergroups':\n    get:\n      summary: Get all user groups information\n      description: Get all user groups information\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Get user group successfully.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserGroup'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserGroup'\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User in session does not have permission to the user group.\n        '500':\n          description: Unexpected internal errors.\n    post:\n      summary: Create user group\n      description: Create user group information\n      tags:\n        - Products\n      requestBody:\n        $ref: '#/components/requestBodies/UserGroup'\n      responses:\n        '201':\n          description: User group created successfully.\n          headers:\n            Location:\n              description: The URL of the created resource\n              schema:\n                type: string\n        '400':\n          description: Invalid LDAP group DN.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User in session does not have permission to the user group.\n        '409':\n          description: \u003e-\n            A user group with same group name already exist, or an LDAP user\n            group with same DN already exist.\n        '500':\n          description: Unexpected internal errors.\n  '/usergroups/{group_id}':\n    get:\n      summary: Get user group information\n      description: Get user group information\n      tags:\n        - Products\n      parameters:\n        - name: group_id\n          in: path\n          required: true\n          description: Group ID\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: User group get successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserGroup'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/UserGroup'\n        '400':\n          description: The user group id is invalid.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User in session does not have permission to the user group.\n        '404':\n          description: User group does not exist.\n        '500':\n          description: Unexpected internal errors.\n    put:\n      summary: Update group information\n      description: Update user group information\n      tags:\n        - Products\n      parameters:\n        - name: group_id\n          in: path\n          required: true\n          description: Group ID\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/UserGroup'\n      responses:\n        '200':\n          description: User group updated successfully.\n        '400':\n          description: The user group id is invalid.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: Only admin has this authority.\n        '404':\n          description: User group does not exist.\n        '500':\n          description: Unexpected internal errors.\n    delete:\n      summary: Delete user group\n      description: Delete user group\n      tags:\n        - Products\n      parameters:\n        - name: group_id\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: User group deleted successfully.\n        '400':\n          description: The user group id is invalid.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: Only admin has this authority.\n        '500':\n          description: Unexpected internal errors.\n  '/configurations':\n    get:\n      summary: Get system configurations.\n      description: \u003e\n        This endpoint is for retrieving system configurations that only provides\n        for admin user.\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Get system configurations successfully. The response body is a map.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigurationsResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ConfigurationsResponse'\n        '401':\n          description: User need to log in first.ß\n        '403':\n          description: User does not have permission of admin role.\n        '500':\n          description: Unexpected internal errors.\n    put:\n      summary: Modify system configurations.\n      description: \u003e\n        This endpoint is for modifying system configurations that only provides\n        for admin user.\n      tags:\n        - Products\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Configurations'\n        description: \u003e-\n          The configuration map can contain a subset of the attributes of the\n          schema, which are to be updated.\n        required: true\n      responses:\n        '200':\n          description: Modify system configurations successfully.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User does not have permission of admin role.\n        '500':\n          description: Unexpected internal errors.\n  '/email/ping':\n    post:\n      summary: Test connection and authentication with email server.\n      description: |\n        Test connection and authentication with email server.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EmailServerSetting'\n        description: \u003e-\n          Email server settings, if some of the settings are not assigned, they\n          will be read from system configuration.\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Ping email server successfully.\n        '400':\n          description: Inviald email server settings.\n        '401':\n          description: User need to login first.\n        '403':\n          description: Only admin has this authority.\n        '415':\n          $ref: '#/components/responses/UnsupportedMediaType'\n        '500':\n          description: Unexpected internal errors.\n  '/chartrepo/{repo}/charts/{name}/{version}/labels':\n    get:\n      summary: Return the attahced labels of chart.\n      description: Return the attahced labels of the specified chart version.\n      tags:\n        - Products\n        - Chart Repository\n        - Label\n      parameters:\n        - name: repo\n          in: path\n          required: true\n          description: The project name\n          schema:\n            type: string\n        - name: name\n          in: path\n          required: true\n          description: The chart name\n          schema:\n            type: string\n        - name: version\n          in: path\n          required: true\n          description: The chart version\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/schemas/Labels'\n        '401':\n          $ref: '#/components/schemas/UnauthorizedChartAPIError'\n        '403':\n          $ref: '#/components/schemas/ForbiddenChartAPIError'\n        '404':\n          $ref: '#/components/schemas/NotFoundChartAPIError'\n        '500':\n          $ref: '#/components/schemas/InternalChartAPIError'\n    post:\n      summary: Mark label to chart.\n      description: Mark label to the specified chart version.\n      tags:\n        - Products\n        - Chart Repository\n        - Label\n      parameters:\n        - name: repo\n          in: path\n          required: true\n          description: The project name\n          schema:\n            type: string\n        - name: name\n          in: path\n          required: true\n          description: The chart name\n          schema:\n            type: string\n        - name: version\n          in: path\n          required: true\n          description: The chart version\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Label'\n        description: The label being marked to the chart version\n        required: true\n      responses:\n        '200':\n          description: The label is successfully marked to the chart version.\n        '400':\n          $ref: '#/components/schemas/BadRequestFormatedError'\n        '401':\n          $ref: '#/components/schemas/UnauthorizedChartAPIError'\n        '403':\n          $ref: '#/components/schemas/ForbiddenChartAPIError'\n        '404':\n          $ref: '#/components/schemas/NotFoundChartAPIError'\n        '409':\n          $ref: '#/components/schemas/ConflictFormatedError'\n        '500':\n          $ref: '#/components/schemas/InternalChartAPIError'\n  '/chartrepo/{repo}/charts/{name}/{version}/labels/{id}':\n    delete:\n      summary: Remove label from chart.\n      description: Remove label from the specified chart version.\n      tags:\n        - Products\n        - Chart Repository\n        - Label\n      parameters:\n        - name: repo\n          in: path\n          required: true\n          description: The project name\n          schema:\n            type: string\n        - name: name\n          in: path\n          required: true\n          description: The chart name\n          schema:\n            type: string\n        - name: version\n          in: path\n          required: true\n          description: The chart version\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          description: The label ID\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: The label is successfully unmarked from the chart version.\n        '400':\n          $ref: '#/components/schemas/BadRequestFormatedError'\n        '401':\n          $ref: '#/components/schemas/UnauthorizedChartAPIError'\n        '403':\n          $ref: '#/components/schemas/ForbiddenChartAPIError'\n        '404':\n          $ref: '#/components/schemas/NotFoundChartAPIError'\n        '500':\n          $ref: '#/components/schemas/InternalChartAPIError'\n  '/system/CVEAllowlist':\n    get:\n      summary: Get the system level allowlist of CVE.\n      description: \u003e-\n        Get the system level allowlist of CVE.  This API can be called by all\n        authenticated users.\n      tags:\n        - Products\n        - System\n      responses:\n        '200':\n          description: Successfully retrieved the CVE allowlist.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CVEAllowlist'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/CVEAllowlist'\n        '401':\n          description: User is not authenticated.\n        '500':\n          description: Unexpected internal errors.\n    put:\n      summary: Update the system level allowlist of CVE.\n      description: \u003e-\n        This API overwrites the system level allowlist of CVE with the list in\n        request body.  Only system Admin has permission to call this API.\n      tags:\n        - Products\n        - System\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CVEAllowlist'\n        description: The allowlist with new content\n      responses:\n        '200':\n          description: Successfully updated the CVE allowlist.\n        '401':\n          description: User is not authenticated.\n        '403':\n          description: User does not have permission to call this API.\n        '500':\n          description: Unexpected internal errors.\nservers:\n  - url: 'http://localhost/api/v2.0'\n  - url: 'https://localhost/api/v2.0'\ncomponents:\n  parameters:\n    query:\n      name: q\n      description: \u003e-\n        Query string to query resources. Supported query patterns are \"exact\n        match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union\n        releationship(k={v1 v2 v3})\" and \"list with intersetion\n        relationship(k=(v1 v2 v3))\". The value of range and list can be\n        string(enclosed by \" or '), integer or time(in format \"2020-04-09\n        02:36:00\"). All of these query patterns should be put in the query\n        string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]\n      in: query\n      required: false\n      schema:\n        type: string\n  responses:\n    OK:\n      description: Success\n    Created:\n      description: Created\n      headers:\n        Location:\n          description: The URL of the created resource\n          schema:\n            type: string\n    BadRequest:\n      description: Bad Request\n    Unauthorized:\n      description: Unauthorized\n    Forbidden:\n      description: Forbidden\n    NotFound:\n      description: Not Found\n    Conflict:\n      description: Conflict\n    PreconditionFailed:\n      description: Precondition Failed\n    UnsupportedMediaType:\n      description: \u003e-\n        The Media Type of the request is not supported, it has to be\n        \"application/json\"\n    InternalServerError:\n      description: Internal Server Error\n  requestBodies:\n    UserGroup:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UserGroup'\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n  schemas:\n    ProjectMetadata:\n      type: object\n      properties:\n        public:\n          type: string\n          description: \u003e-\n            The public status of the project. The valid values are \"true\",\n            \"false\".\n        enable_content_trust:\n          type: string\n          description: \u003e-\n            Whether content trust is enabled or not. If it is enabled, user\n            can't pull unsigned images from this project. The valid values are\n            \"true\", \"false\".\n        prevent_vul:\n          type: string\n          description: \u003e-\n            Whether prevent the vulnerable images from running. The valid values\n            are \"true\", \"false\".\n        severity:\n          type: string\n          description: \u003e-\n            If the vulnerability is high than severity defined here, the images\n            can't be pulled. The valid values are \"none\", \"low\", \"medium\",\n            \"high\", \"critical\".\n        auto_scan:\n          type: string\n          description: \u003e-\n            Whether scan images automatically when pushing. The valid values are\n            \"true\", \"false\".\n        reuse_sys_cve_allowlist:\n          type: string\n          description: \u003e-\n            Whether this project reuse the system level CVE allowlist as the\n            allowlist of its own.  The valid values are \"true\", \"false\". If it\n            is set to \"true\" the actual allowlist associate with this project,\n            if any, will be ignored.\n    User:\n      type: object\n      properties:\n        user_id:\n          type: integer\n          format: int\n          description: The ID of the user.\n        username:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        realname:\n          type: string\n        comment:\n          type: string\n        deleted:\n          type: boolean\n        role_name:\n          type: string\n        role_id:\n          type: integer\n          format: int\n        sysadmin_flag:\n          type: boolean\n        admin_role_in_auth:\n          type: boolean\n          description: \u003e-\n            indicate the admin privilege is grant by authenticator (LDAP), is\n            always false unless it is the current login user\n        reset_uuid:\n          type: string\n        Salt:\n          type: string\n        creation_time:\n          type: string\n        update_time:\n          type: string\n    UserSearch:\n      type: object\n      properties:\n        user_id:\n          type: integer\n          format: int\n          description: The ID of the user.\n        username:\n          type: string\n    Password:\n      type: object\n      properties:\n        old_password:\n          type: string\n          description: The user's existing password.\n        new_password:\n          type: string\n          description: New password for marking as to be updated.\n    Role:\n      type: object\n      properties:\n        role_id:\n          type: integer\n          format: int32\n          description: ID in table.\n        role_code:\n          type: string\n          description: Description of permissions for the role.\n        role_name:\n          type: string\n          description: Name the the role.\n        role_mask:\n          type: string\n    RoleParam:\n      type: object\n      properties:\n        roles:\n          type: array\n          items:\n            type: integer\n            format: int32\n          description: Role ID for updating project role member.\n        username:\n          type: string\n          description: Username relevant to a project role member.\n    StatisticMap:\n      type: object\n      properties:\n        private_project_count:\n          type: integer\n          format: int32\n          description: The count of the private projects which the user is a member of.\n        private_repo_count:\n          type: integer\n          format: int32\n          description: \u003e-\n            The count of the private repositories belonging to the projects\n            which the user is a member of.\n        public_project_count:\n          type: integer\n          format: int32\n          description: The count of the public projects.\n        public_repo_count:\n          type: integer\n          format: int32\n          description: \u003e-\n            The count of the public repositories belonging to the public\n            projects which the user is a member of.\n        total_project_count:\n          type: integer\n          format: int32\n          description: 'The count of the total projects, only be seen when the is admin.'\n        total_repo_count:\n          type: integer\n          format: int32\n          description: \u003e-\n            The count of the total repositories, only be seen when the user is\n            admin.\n    SysAdminFlag:\n      type: object\n      properties:\n        sysadmin_flag:\n          type: boolean\n          description: 'true-admin, false-not admin.'\n    UserProfile:\n      type: object\n      properties:\n        email:\n          type: string\n          description: The new email.\n        realname:\n          type: string\n          description: The new realname.\n        comment:\n          type: string\n          description: The new comment.\n    LdapConf:\n      type: object\n      properties:\n        ldap_url:\n          type: string\n          description: The url of ldap service.\n        ldap_search_dn:\n          type: string\n          description: The search dn of ldap service.\n        ldap_search_password:\n          type: string\n          description: The search password of ldap service.\n        ldap_base_dn:\n          type: string\n          description: The base dn of ldap service.\n        ldap_filter:\n          type: string\n          description: The serach filter of ldap service.\n        ldap_uid:\n          type: string\n          description: The serach uid from ldap service attributes.\n        ldap_scope:\n          type: integer\n          format: int64\n          description: The serach scope of ldap service.\n        ldap_connection_timeout:\n          type: integer\n          format: int64\n          description: The connect timeout of ldap service(second).\n    LdapUsers:\n      type: object\n      properties:\n        ldap_username:\n          type: string\n          description: search ldap user name based on ldapconf.\n        ldap_realname:\n          type: string\n          description: \u003e-\n            system will try to guess the user realname form \"uid\" or \"cn\"\n            attribute.\n        ldap_email:\n          type: string\n          description: \u003e-\n            system will try to guess the user email address form \"mail\" or\n            \"email\" attribute.\n    LdapImportUsers:\n      type: object\n      properties:\n        ldap_uid_list:\n          type: array\n          description: selected uid list\n          items:\n            type: string\n    LdapFailedImportUsers:\n      type: object\n      properties:\n        ldap_uid:\n          type: string\n          description: the uid can't add to system.\n        error:\n          type: string\n          description: fail reason.\n    EmailServerSetting:\n      type: object\n      properties:\n        email_host:\n          type: string\n          description: The host of email server.\n        email_port:\n          type: integer\n          description: The port of email server.\n        email_username:\n          type: string\n          description: The username of email server.\n        email_password:\n          type: string\n          description: The password of email server.\n        email_ssl:\n          type: boolean\n          description: Use ssl/tls or not.\n        email_identity:\n          type: string\n          description: The dentity of email server.\n    ComponentOverviewEntry:\n      type: object\n      properties:\n        severity:\n          type: integer\n          description: '1-None/Negligible, 2-Unknown, 3-Low, 4-Medium, 5-High'\n        count:\n          type: integer\n          description: number of the components with certain severity.\n    Configurations:\n      type: object\n      properties:\n        auth_mode:\n          type: string\n          description: 'The auth mode of current system, such as \"db_auth\", \"ldap_auth\"'\n        count_per_project:\n          type: string\n          description: The default count quota for the new created projects.\n        email_from:\n          type: string\n          description: The sender name for Email notification.\n        email_host:\n          type: string\n          description: The hostname of SMTP server that sends Email notification.\n        email_port:\n          type: integer\n          description: The port of SMTP server.\n        email_identity:\n          type: string\n          description: By default it's empty so the email_username is picked.\n        email_username:\n          type: string\n          description: The username for authenticate against SMTP server.\n        email_ssl:\n          type: boolean\n          description: \u003e-\n            When it's set to true the system will access Email server via TLS by\n            default.  If it's set to false, it still will handle \"STARTTLS\" from\n            server side.\n        email_insecure:\n          type: boolean\n          description: \u003e-\n            Whether or not the certificate will be verified when Harbor tries to\n            access the email server.\n        ldap_url:\n          type: string\n          description: The URL of LDAP server.\n        ldap_base_dn:\n          type: string\n          description: The Base DN for LDAP binding.\n        ldap_filter:\n          type: string\n          description: The filter for LDAP binding.\n        ldap_scope:\n          type: integer\n          description: '0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'\n        ldap_uid:\n          type: string\n          description: \u003e-\n            The attribute which is used as identity for the LDAP binding, such\n            as \"CN\" or \"SAMAccountname\"\n        ldap_search_dn:\n          type: string\n          description: The DN of the user to do the search.\n        ldap_timeout:\n          type: integer\n          description: timeout in seconds for connection to LDAP server.\n        ldap_group_attribute_name:\n          type: string\n          description: \u003e-\n            The attribute which is used as identity of the LDAP group, default\n            is cn.\n        ldap_group_base_dn:\n          type: string\n          description: The base DN to search LDAP group.\n        ldap_group_search_filter:\n          type: string\n          description: The filter to search the ldap group.\n        ldap_group_search_scope:\n          type: integer\n          description: \u003e-\n            The scope to search ldap. '0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL,\n            2-LDAP_SCOPE_SUBTREE'\n        ldap_group_admin_dn:\n          type: string\n          description: \u003e-\n            Specify the ldap group which have the same privilege with Harbor\n            admin.\n        oidc_client_id:\n          type: string\n          description: The client id of the OIDC.\n        oidc_client_secret:\n          type: string\n          description: The client secret of the OIDC.\n        oidc_endpoint:\n          type: string\n          description: 'The URL of an OIDC-complaint server, must start with ''https://''.'\n        oidc_name:\n          type: string\n          description: The name of the OIDC provider.\n        oidc_scope:\n          type: string\n          description: \u003e-\n            The scope sent to OIDC server during authentication, should be\n            separated by comma. It has to contain “openid”, and\n            “offline_access”. If you are using google, please remove\n            “offline_access” from this field.\n        oidc_verify_cert:\n          type: boolean\n          description: \u003e-\n            Whether verify your OIDC server certificate, disable it if your OIDC\n            server is hosted via self-hosted certificate.\n        project_creation_restriction:\n          type: string\n          description: \u003e-\n            This attribute restricts what users have the permission to create\n            project.  It can be \"everyone\" or \"adminonly\".\n        quota_per_project_enable:\n          type: boolean\n          description: This attribute indicates whether quota per project enabled in harbor\n        read_only:\n          type: boolean\n          description: '''docker push'' is prohibited by Harbor if you set it to true.   '\n        self_registration:\n          type: boolean\n          description: \u003e-\n            Whether the Harbor instance supports self-registration.  If it's set\n            to false, admin need to add user to the instance.\n        storage_per_project:\n          type: string\n          description: The default storage quota for the new created projects.\n        token_expiration:\n          type: integer\n          description: 'The expiration time of the token for internal Registry, in minutes.'\n        verify_remote_cert:\n          type: boolean\n          description: \u003e-\n            Whether or not the certificate will be verified when Harbor tries to\n            access a remote Harbor instance for replication.\n        scan_all_policy:\n          type: object\n          properties:\n            type:\n              type: string\n              description: \u003e-\n                The type of scan all policy, currently the valid values are\n                \"none\" and \"daily\"\n            parameter:\n              type: object\n              properties:\n                daily_time:\n                  type: integer\n                  description: \u003e-\n                    The offset in seconds of UTC 0 o'clock, only valid when the\n                    policy type is \"daily\"\n              description: \u003e-\n                The parameters of the policy, the values are dependant on the\n                type of the policy.\n    ConfigurationsResponse:\n      type: object\n      properties:\n        auth_mode:\n          $ref: '#/components/schemas/StringConfigItem'\n        count_per_project:\n          $ref: '#/components/schemas/IntegerConfigItem'\n        email_from:\n          $ref: '#/components/schemas/StringConfigItem'\n        email_host:\n          $ref: '#/components/schemas/StringConfigItem'\n        email_port:\n          $ref: '#/components/schemas/IntegerConfigItem'\n        email_identity:\n          $ref: '#/components/schemas/StringConfigItem'\n        email_username:\n          $ref: '#/components/schemas/StringConfigItem'\n        email_ssl:\n          $ref: '#/components/schemas/BoolConfigItem'\n        email_insecure:\n          $ref: '#/components/schemas/BoolConfigItem'\n        ldap_url:\n          $ref: '#/components/schemas/StringConfigItem'\n        ldap_base_dn:\n          $ref: '#/components/schemas/StringConfigItem'\n        ldap_filter:\n          $ref: '#/components/schemas/StringConfigItem'\n        ldap_scope:\n          type: integer\n          description: '0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'\n        ldap_uid:\n          $ref: '#/components/schemas/StringConfigItem'\n        ldap_search_dn:\n          type: string\n          description: The DN of the user to do the search.\n        ldap_timeout:\n          $ref: '#/components/schemas/IntegerConfigItem'\n        ldap_group_attribute_name:\n          $ref: '#/components/schemas/StringConfigItem'\n        ldap_group_base_dn:\n          $ref: '#/components/schemas/StringConfigItem'\n        ldap_group_search_filter:\n          $ref: '#/components/schemas/StringConfigItem'\n        ldap_group_search_scope:\n          $ref: '#/components/schemas/IntegerConfigItem'\n        ldap_group_admin_dn:\n          $ref: '#/components/schemas/StringConfigItem'\n        oidc_client_id:\n          $ref: '#/components/schemas/StringConfigItem'\n        oidc_endpoint:\n          $ref: '#/components/schemas/StringConfigItem'\n        oidc_name:\n          $ref: '#/components/schemas/StringConfigItem'\n        oidc_scope:\n          $ref: '#/components/schemas/StringConfigItem'\n        oidc_verify_cert:\n          $ref: '#/components/schemas/BoolConfigItem'\n        project_creation_restriction:\n          $ref: '#/components/schemas/StringConfigItem'\n        quota_per_project_enable:\n          $ref: '#/components/schemas/BoolConfigItem'\n        read_only:\n          $ref: '#/components/schemas/BoolConfigItem'\n        self_registration:\n          $ref: '#/components/schemas/BoolConfigItem'\n        storage_per_project:\n          $ref: '#/components/schemas/IntegerConfigItem'\n        token_expiration:\n          $ref: '#/components/schemas/IntegerConfigItem'\n        verify_remote_cert:\n          $ref: '#/components/schemas/BoolConfigItem'\n        scan_all_policy:\n          type: object\n          properties:\n            type:\n              type: string\n              description: \u003e-\n                The type of scan all policy, currently the valid values are\n                \"none\" and \"daily\"\n            parameter:\n              type: object\n              properties:\n                daily_time:\n                  type: integer\n                  description: \u003e-\n                    The offset in seconds of UTC 0 o'clock, only valid when the\n                    policy type is \"daily\"\n              description: \u003e-\n                The parameters of the policy, the values are dependant on the\n                type of the policy.\n    Label:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The ID of label.\n        name:\n          type: string\n          description: The name of label.\n        description:\n          type: string\n          description: The description of label.\n        color:\n          type: string\n          description: The color of label.\n        scope:\n          type: string\n          description: 'The scope of label, g for global labels and p for project labels.'\n        project_id:\n          type: integer\n          description: The project ID if the label is a project label.\n        creation_time:\n          type: string\n          description: The creation time of label.\n        update_time:\n          type: string\n          description: The update time of label.\n        deleted:\n          type: boolean\n          description: The label is deleted or not.\n    ProjectMemberEntity:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: the project member id\n        project_id:\n          type: integer\n          description: the project id\n        entity_name:\n          type: string\n          description: the name of the group member.\n        role_name:\n          type: string\n          description: the name of the role\n        role_id:\n          type: integer\n          description: the role id\n        entity_id:\n          type: integer\n          description: \u003e-\n            the id of entity, if the member is a user, it is user_id in user\n            table. if the member is a user group, it is the user group's ID in\n            user_group table.\n        entity_type:\n          type: string\n          description: 'the entity''s type, u for user entity, g for group entity.'\n    ProjectMember:\n      type: object\n      properties:\n        role_id:\n          type: integer\n          description: \u003e-\n            The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for\n            maintainer\n        member_user:\n          $ref: '#/components/schemas/UserEntity'\n        member_group:\n          $ref: '#/components/schemas/UserGroup'\n    RoleRequest:\n      type: object\n      properties:\n        role_id:\n          type: integer\n          description: \u003e-\n            The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for\n            maintainer\n    UserEntity:\n      type: object\n      properties:\n        user_id:\n          type: integer\n          description: The ID of the user.\n        username:\n          type: string\n          description: The name of the user.\n    UserGroup:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The ID of the user group\n        group_name:\n          type: string\n          description: The name of the user group\n        group_type:\n          type: integer\n          description: 'The group type, 1 for LDAP group, 2 for HTTP group.'\n        ldap_group_dn:\n          type: string\n          description: The DN of the LDAP group if group type is 1 (LDAP group).\n    StringConfigItem:\n      type: object\n      properties:\n        value:\n          type: string\n          description: The string value of current config item\n        editable:\n          type: boolean\n          description: The configure item can be updated or not\n    BoolConfigItem:\n      type: object\n      properties:\n        value:\n          type: boolean\n          description: The boolean value of current config item\n        editable:\n          type: boolean\n          description: The configure item can be updated or not\n    IntegerConfigItem:\n      type: object\n      properties:\n        value:\n          type: integer\n          description: The integer value of current config item\n        editable:\n          type: boolean\n          description: The configure item can be updated or not\n    ChartAPIError:\n      description: The error object returned by chart repository API\n      type: object\n      required:\n        - error\n      properties:\n        error:\n          type: string\n          description: The error message returned by the chart API\n    UnauthorizedChartAPIError:\n      description: Unauthorized\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ChartAPIError'\n    ForbiddenChartAPIError:\n      description: Operation is forbidden or quota exceeded\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ChartAPIError'\n    InternalChartAPIError:\n      description: Internal server error occurred\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ChartAPIError'\n    NotFoundChartAPIError:\n      description: Not found\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ChartAPIError'\n    InsufficientStorageChartAPIError:\n      description: Insufficient storage\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ChartAPIError'\n    BadRequestFormatedError:\n      description: Bad request\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ChartAPIError'\n    ConflictFormatedError:\n      description: Conflicts\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ChartAPIError'\n    ChartMetadata:\n      type: object\n      description: The metadata of chart version\n      required:\n        - name\n        - version\n        - engine\n        - icon\n        - apiVersion\n        - appVersion\n      properties:\n        name:\n          type: string\n          description: The name of the chart\n        home:\n          type: string\n          description: The URL to the relevant project page\n        sources:\n          type: array\n          description: The URL to the source code of chart\n          items:\n            type: string\n        version:\n          type: string\n          description: A SemVer 2 version of chart\n        description:\n          type: string\n          description: A one-sentence description of chart\n        keywords:\n          type: array\n          description: A list of string keywords\n          items:\n            type: string\n        engine:\n          type: string\n          description: The name of template engine\n        icon:\n          type: string\n          description: The URL to an icon file\n        apiVersion:\n          type: string\n          description: The API version of this chart\n        appVersion:\n          type: string\n          description: The version of the application enclosed in the chart\n        deprecated:\n          type: boolean\n          description: Whether or not this chart is deprecated\n    ChartVersion:\n      type: object\n      description: A specified chart entry\n      allOf:\n        - $ref: '#/components/schemas/ChartMetadata'\n        - type: object\n          properties:\n            created:\n              type: string\n              description: The created time of the chart entry\n            removed:\n              type: boolean\n              description: A flag to indicate if the chart entry is removed\n            digest:\n              type: string\n              description: The digest value of the chart entry\n            urls:\n              type: array\n              description: The urls of the chart entry\n              items:\n                type: string\n      properties:\n        labels:\n          $ref: '#/components/schemas/Labels'\n    Labels:\n      type: array\n      description: A list of label\n      items:\n        $ref: '#/components/schemas/Label'\n    OverallHealthStatus:\n      type: object\n      description: The system health status\n      properties:\n        status:\n          type: string\n          description: \u003e-\n            The overall health status. It is \"healthy\" only when all the\n            components' status are \"healthy\"\n        components:\n          type: array\n          items:\n            $ref: '#/components/schemas/ComponentHealthStatus'\n    ComponentHealthStatus:\n      type: object\n      description: The health status of component\n      properties:\n        name:\n          type: string\n          description: The component name\n        status:\n          type: string\n          description: The health status of component\n        error:\n          type: string\n          description: (optional) The error message when the status is \"unhealthy\"\n    Permission:\n      type: object\n      description: The permission\n      properties:\n        resource:\n          type: string\n          description: The permission resoruce\n        action:\n          type: string\n          description: The permission action\n    Namespace:\n      type: object\n      description: The namespace of registry\n      properties:\n        name:\n          type: string\n          description: The name of namespace\n        metadata:\n          type: object\n          description: The metadata of namespace\n    CVEAllowlist:\n      type: object\n      description: The CVE Allowlist for system or project\n      properties:\n        id:\n          type: integer\n          description: ID of the allowlist\n        project_id:\n          type: integer\n          description: \u003e-\n            ID of the project which the allowlist belongs to.  For system level\n            allowlist this attribute is zero.\n        expires_at:\n          type: integer\n          description: \u003e-\n            the time for expiration of the allowlist, in the form of seconds\n            since epoch.  This is an optional attribute, if it's not set the CVE\n            allowlist does not expire.\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/CVEAllowlistItem'\n    CVEAllowlistItem:\n      type: object\n      description: The item in CVE allowlist\n      properties:\n        cve_id:\n          type: string\n          description: 'The ID of the CVE, such as \"CVE-2019-10164\"'\n    QuotaSwitcher:\n      type: object\n      properties:\n        enabled:\n          type: boolean\n          description: The quota is enable or disable\n"
		}
	},
	"Error": "json: cannot unmarshal number into Go struct field Info.info.version of type string"
}