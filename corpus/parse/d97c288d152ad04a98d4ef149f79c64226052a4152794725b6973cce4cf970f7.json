{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/maxdemarzi/uranusdb"
		},
		"file": {
			"name": "uranusdb.yaml",
			"size": 0,
			"path": "src/main/resources/static/swagger-ui/uranusdb.yaml",
			"byteSize": 14838,
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: UranusDB API\n  description: The UranusDB HTTP API\n  termsOfService: http://uranusdb.com/terms/\n  contact:\n      name: Max De Marzi\n      email: maxdemarzi@hotmail.com\n      url: http://maxdemarzi.com\n  license:\n      name: GNU Affero General Public License v3.0\n      url: https://www.gnu.org/licenses/agpl.html\nservers:\n  - url: http://localhost:8080/db\ntags:\n  - name: relationship_type\n    description: Relationship Type Endpoints\n  - name: node\n    description: Node Endpoints\n  - name: node_properties\n    description: Node Properties Endpoints\n  - name: node_property\n    description: Node Property Endpoints\n  - name: relationship\n    description: Relationship Endpoints\n  - name: relationship_properties\n    description: Relationship Properties Endpoints\n  - name: relationship_property\n    description: Relationship Property Endpoints\n  - name: related\n    description: Related Endpoints\npaths:\n  /relationship_types:\n    get:\n      description: Returns all relationship types in the database.\n      operationId: getRelationshipTypes\n      tags:\n        - relationship_type\n      responses:\n        '200':\n          description: Relationship Types Response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n          examples:\n            single:\n              summary: A single relationship type example\n              value: [\"FRIENDS\"]\n            multiple:\n              summary: Multiple relationship types example\n              value: [\"FRIENDS\", \"LIKES\", \"FOLLOWS\"]\n  /relationship_types/count:\n    get:\n      description: Returns all relationship type counts in the database.\n      operationId: getRelationshipTypesCounts\n      tags:\n        - relationship_type\n      responses:\n        '200':\n          description: Relationship Type Counts Response\n          content:\n            application/json:\n              schema:\n                type: array\n                $ref: '#/components/schemas/Counts'\n          examples:\n            single:\n              summary: A single relationship type count example\n              value: {\"FRIENDS\": 2}\n            multiple:\n              summary: Multiple relationship type counts example\n              value: {\"FRIENDS\":2, \"LIKES\":1, \"FOLLOWS\":4}\n  /relationship_type/{type}/count:\n    get:\n      description: Returns a relationship type count in the database.\n      operationId: getRelationshipTypeCount\n      tags:\n        - relationship_type\n      parameters:\n        - name: type\n          in: path\n          required: true\n          description: The relationship type count to retrieve\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Relationship Type Count Response\n          content:\n            application/json:\n              schema:\n                type: integer\n        '404':\n          description: Relationship Type Not Found\n  /node/{label}/{id}:\n    parameters:\n      - name: label\n        in: path\n        required: true\n        description: The label of the Node\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        description: The id of the Node\n        schema:\n          type: string\n    get:\n      summary: Retrieve Node\n      operationId: getNode\n      tags:\n        - node\n      responses:\n        '200':\n          description: Node Response\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: Node Not Found\n    post:\n      summary: Create Node\n      operationId: postNode\n      tags:\n        - node\n      requestBody:\n        description: Node Properties\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              person:\n                summary: A person node example\n                value: {\"name\": \"Max De Marzi\", \"age\": 39}\n              location:\n                summary: A location node example\n                value: {\"name\": \"Chicago\", \"type\": \"city\"}\n      responses:\n        '201':\n          description: Node Response\n          content:\n            application/json:\n              schema:\n                type: object\n    delete:\n      summary: Delete Node\n      operationId: deleteNode\n      tags:\n        - node\n  /node/{label}/{id}/properties:\n    parameters:\n      - name: label\n        in: path\n        required: true\n        description: The label of the Node\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        description: The id of the Node\n        schema:\n          type: string\n    put:\n      summary: Set Node Properties\n      operationId: putNodeProperties\n      tags:\n        - node_properties\n      requestBody:\n        description: Node Properties\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              person:\n                summary: A person node example\n                value: {\"name\": \"Max De Marzi\", \"age\": 39}\n              location:\n                summary: A location node example\n                value: {\"name\": \"Chicago\", \"type\": \"city\"}\n      responses:\n        '201':\n          description: Node Response\n          content:\n            application/json:\n              schema:\n                type: object\n    delete:\n      summary: Delete Node Properties\n      operationId: deleteNodeProperties\n      tags:\n        - node_properties\n  /node/{label}/{id}/property/{key}:\n    parameters:\n      - name: label\n        in: path\n        required: true\n        description: The label of the Node\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        description: The id of the Node\n        schema:\n          type: string\n      - name: key\n        in: path\n        required: true\n        description: The key of the Property\n        schema:\n          type: string\n    get:\n      summary: Retrieve a property from a Node\n      operationId: getNodeProperty\n      tags:\n        - node_property\n      responses:\n        '200':\n          description: Node Response\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: Not Found\n\n    put:\n      summary: Update a property from a Node\n      operationId: putNodeProperty\n      tags:\n        - node_property\n      requestBody:\n        description: Node Property\n        content:\n          text/plain:\n            schema:\n              type: object\n      responses:\n        '201':\n          description: Node Response\n          content:\n            application/json:\n              schema:\n                type: object\n    delete:\n      summary: Delete a property from a Node\n      operationId: deleteNodeProperty\n      tags:\n        - node_property\n      responses:\n        '204':\n          description: No Content\n  /relationship/{type}/{label1}/{from}/{label2}/{to}:\n    parameters:\n      - name: type\n        in: path\n        required: true\n        description: The Relationship Type\n        schema:\n          type: string\n      - name: label1\n        in: path\n        required: true\n        description: The label of the from Node\n        schema:\n          type: string\n      - name: from\n        in: path\n        required: true\n        description: The id of the from Node\n        schema:\n          type: string\n      - name: label2\n        in: path\n        required: true\n        description: The label of the to Node\n        schema:\n          type: string\n      - name: to\n        in: path\n        required: true\n        description: The id of the to Node\n        schema:\n          type: string\n    get:\n      summary: Retrieve Relationship\n      operationId: getRelationship\n      tags:\n        - relationship\n      responses:\n        '200':\n          description: Relationship Response\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: Relationship Not Found\n\n    post:\n      summary: Create Relationship\n      operationId: postRelationship\n      tags:\n        - relationship\n      requestBody:\n        description: Relationship Properties\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              rated:\n                summary: A rated relationship example\n                value: {\"stars\": 4}\n      responses:\n        '201':\n          description: Relationship Response\n          content:\n            application/json:\n              schema:\n                type: object\n\n    delete:\n      summary: Delete Relationship\n      operationId: deleteRelationship\n      tags:\n        - relationship\n  /relationship/{type}/{label1}/{from}/{label2}/{to}/properties:\n    parameters:\n      - name: type\n        in: path\n        required: true\n        description: The Relationship Type\n        schema:\n          type: string\n      - name: label1\n        in: path\n        required: true\n        description: The label of the from Node\n        schema:\n          type: string\n      - name: from\n        in: path\n        required: true\n        description: The id of the from Node\n        schema:\n          type: string\n      - name: label2\n        in: path\n        required: true\n        description: The label of the to Node\n        schema:\n          type: string\n      - name: to\n        in: path\n        required: true\n        description: The id of the to Node\n        schema:\n          type: string\n    put:\n      summary: Set Relationship Properties by label and id\n      operationId: putRelationshipProperties\n      tags:\n        - relationship_properties\n      requestBody:\n        description: Relationship Properties\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              rated:\n                summary: A rated relationship example\n                value: {\"stars\": 4}\n      responses:\n        '201':\n          description: Relationship Response\n          content:\n            application/json:\n              schema:\n                type: object\n    delete:\n      summary: Delete Relationship Properties\n      operationId: deleteRelationshipProperties\n      tags:\n        - relationship_properties\n  /relationship/{type}/{label1}/{from}/{label2}/{to}/property/{key}:\n    parameters:\n      - name: type\n        in: path\n        required: true\n        description: The Relationship Type\n        schema:\n          type: string\n      - name: label1\n        in: path\n        required: true\n        description: The label of the from Node\n        schema:\n          type: string\n      - name: from\n        in: path\n        required: true\n        description: The id of the from Node\n        schema:\n          type: string\n      - name: label2\n        in: path\n        required: true\n        description: The label of the to Node\n        schema:\n          type: string\n      - name: to\n        in: path\n        required: true\n        description: The id of the to Node\n        schema:\n          type: string\n      - name: key\n        in: path\n        required: true\n        description: The key of the Property\n        schema:\n          type: string\n    get:\n      summary: Retrieve a property from a Relationship\n      operationId: getRelationshipProperty\n      tags:\n        - relationship_property\n      responses:\n        '200':\n          description: Relationship Response\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: Not Found\n    put:\n      summary: Update a property from a Relationship\n      operationId: putRelationshipProperty\n      tags:\n        - relationship_property\n      requestBody:\n        description: Relationship Property\n        content:\n          text/plain:\n            schema:\n              type: object\n      responses:\n        '201':\n          description: Relationship Response\n          content:\n            application/json:\n              schema:\n                type: object\n    delete:\n      summary: Delete a property from a Relationship\n      operationId: deleteRelationshipProperty\n      tags:\n        - relationship_property\n      responses:\n        '204':\n          description: No Content\n\n  /related/{label1}/{from}/{label2}/{to}:\n    parameters:\n      - name: label1\n        in: path\n        required: true\n        description: The label of the from Node\n        schema:\n          type: string\n      - name: from\n        in: path\n        required: true\n        description: The id of the from Node\n        schema:\n          type: string\n      - name: label2\n        in: path\n        required: true\n        description: The label of the to Node\n        schema:\n          type: string\n      - name: to\n        in: path\n        required: true\n        description: The id of the to Node\n        schema:\n          type: string\n    get:\n      summary: Check if two Nodes are related\n      operationId: getRelated\n      tags:\n        - related\n      responses:\n        '200':\n          description: Nodes are related\n        '404':\n          description: Nodes aer not Related\n  /related/{type}/{label1}/{from}/{label2}/{to}:\n    parameters:\n      - name: type\n        in: path\n        required: true\n        description: The Relationship Type\n        schema:\n          type: string\n      - name: label1\n        in: path\n        required: true\n        description: The label of the from Node\n        schema:\n          type: string\n      - name: from\n        in: path\n        required: true\n        description: The id of the from Node\n        schema:\n          type: string\n      - name: label2\n        in: path\n        required: true\n        description: The label of the to Node\n        schema:\n          type: string\n      - name: to\n        in: path\n        required: true\n        description: The id of the to Node\n        schema:\n          type: string\n    get:\n      summary: Check if two Nodes are related\n      operationId: getRelatedByType\n      tags:\n        - related\n      responses:\n        '200':\n          description: Nodes are related\n        '404':\n          description: Nodes aer not Related\ncomponents:\n  schemas:\n    RelationshipType:\n      type: string\n      pattern: \"[A-Z0-9]{1,256}\"\n    Counts:\n      additionalProperties:\n        type: integer\n    RelationshipTypes:\n      type: array\n      items:\n        $ref: '#/components/schemas/RelationshipType'\n\n    Error:\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string"
		}
	},
	"Error": "parse: parse spec: paths: /node/{label}/{id}/properties: delete: operation \"deleteNodeProperties\": responses: no responses"
}