{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/centreon/centreon"
		},
		"file": {
			"name": "centreon-api-v22.04.yaml",
			"size": 0,
			"path": "doc/API/centreon-api-v22.04.yaml",
			"byteSize": 220471,
			"content": "openapi: 3.0.1\ninfo:\n  title: Centreon Web RestAPI\n  description: |\n    # New features\n    + Added real-time monitoring for hosts and services\n    + Added acknowledgement for hosts and services\n    + Added downtimes for hosts and services\n    + Added the list of monitoring server configurations\n    + Added the proxy configuration\n    # Information\n    All dates are in **ISO 8601** format\n    # Authentication\n    There are two modes of authentication:\n    * By token: after identification with your login credentials\n    * By cookie: by reusing a valid session ID\n  x-logo:\n    url: ./centreon-logo.png\n  contact:\n    name: Centreon\n    url: 'https://www.centreon.com'\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n  version: \"22.04\"\nexternalDocs:\n  description: You can contact us on our community Slack\n  url: 'https://centreon.slack.com/messages/CCRGLQSE5'\nservers:\n  - url: '{protocol}://{server}:{port}/centreon/api/{version}'\n    variables:\n      protocol:\n        enum:\n          - http\n          - https\n        default: http\n        description: \"HTTP schema\"\n      server:\n        default: localhost\n        description: \"IP address or hostname of Centreon server\"\n      port:\n        default: '80'\n        description: \"Port used by HTTP server\"\n      version:\n        default: v22.04\n        description: \"Version of the API\"\ntags:\n  - name: Acknowledgement\n  - name: Administration\n  - name: Authentication\n    description: \"Login and logout endpoints to retrieve authentication token\"\n  - name: Downtime\n  - name: Gorgone\n  - name: Host\n  - name: Host category\n  - name: Host group\n  - name: Meta service\n  - name: Host severity\n  - name: Host template\n  - name: Monitoring server\n  - name: Proxy\n  - name: Service\n  - name: Service group\n  - name: Topology\nsecurity:\n  - Token: []\n  - Cookie: []\npaths:\n  /login:\n    post:\n      tags:\n        - Authentication\n      summary: \"Login\"\n      description: \"Entry point to retrieve an authentication token.\"\n      security: []\n      requestBody:\n        description: \"Authentication schema\"\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticationRequest'\n        required: true\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LoginAuthenticationResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /logout:\n    get:\n      tags:\n        - Authentication\n      summary: \"Logout\"\n      description: \"Entry point to delete an existing authentication token.\"\n      security:\n        - Token: []\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogoutAuthenticationResponse'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /authentication/users/{alias}/password:\n    put:\n      tags:\n        - Authentication\n      summary: \"Update user password\"\n      parameters:\n      - name: alias\n        in: path\n        description: \"Alias of the user\"\n        required: true\n        schema:\n          type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                old_password:\n                  type: string\n                  description: \"Old user password\"\n                  example: \"Centreon!2021\"\n                new_password:\n                  type: \"string\"\n                  description: \"New user password\"\n                  example: \"Centreon!2022\"\n      responses:\n        '204':\n          description: Command Sent\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /authentication/providers/configurations:\n    get:\n      tags:\n        - Authentication\n      summary: \"Providers Configurations\"\n      description: \"Endpoint to list active existing providers configuration\"\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: integer\n                      description: \"Id of configuration\"\n                      example: 1\n                    type:\n                      type: \"string\"\n                      description: \"Type of provider\"\n                      example: \"local\"\n                    name:\n                      type: \"string\"\n                      description: \"Name of provider\"\n                      example: \"local\"\n                    authentication_uri:\n                      type: \"string\"\n                      description: \"Provider Uri used to proceed authentication\"\n                      example: \"/centreon/authentication/providers/configurations/local\"\n                    is_active:\n                      type: boolean\n                      description: \"Provider active or not\"\n                      example: true\n                    is_forced:\n                      type: boolean\n                      description: \"Provider forced or not\"\n                      example: false\n  /authentication/providers/configurations/{provider_configuration_name}:\n    post:\n      tags:\n       - Authentication\n      parameters:\n        - $ref: '#/components/parameters/providerConfigurationName'\n      summary: \"Authentication to provider\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                login:\n                  type: \"string\"\n                  example: \"admin\"\n                password:\n                  type: \"string\"\n                  example: \"centreon\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                properties:\n                  redirect_uri:\n                    type: string\n                    example: \"/centreon/main.php?p=50113\u0026o=ldap\"\n        '302':\n          description: \"Found\"\n  /authentication/logout:\n    post:\n      tags:\n        - Authentication\n      summary: \"Logout Session\"\n      description: \"Entry point to delete an existing session token.\"\n      security:\n        - Token: []\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogoutAuthenticationResponse'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/hosts/templates:\n    get:\n      tags:\n        - Host template\n      summary: \"List all host templates\"\n      description: |\n        Return all host templates configurations.\n\n        The available parameters to **search** / **sort_by** are:\n\n        * id\n        * name\n        * alias\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Configuration.Host.Template'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/hosts/categories:\n    get:\n      tags:\n        - Host category\n      summary: \"List all host categories\"\n      description: |\n        List of all host category configurations\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Configuration.Host.Category'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/hosts/severities:\n    get:\n      tags:\n        - Host severity\n      summary: \"List all host severities\"\n      description: |\n        List of all host severity configurations\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Configuration.Host.Severity'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/hosts/groups:\n    get:\n      tags:\n        - Host group\n      summary: \"List all host groups\"\n      description: |\n        Return all host group configurations.\n\n        The available parameters to **search** / **sort_by** are:\n\n        * id\n        * name\n        * alias\n        * is_activated\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Configuration.Host.Group'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/icons:\n    get:\n      tags:\n        - Icons\n      summary: \"List all icons\"\n      description: |\n        List all icons from centreon configuration.\n\n        The available parameters to **search** / **sort_by** are:\n\n          * id\n          * name\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id:\n                          type: integer\n                          description: \"id of the icon\"\n                          example: 1\n                        directory:\n                          type: string\n                          description: \"directory of the icon\"\n                          example: \"ppm\"\n                        name:\n                          type: string\n                          description: \"name of the icon\"\n                          example: \"operatingsystems-linux-snmp-linux-128.png\"\n                        url:\n                          type: string\n                          description: \"url to get the icon\"\n                          example: \"/centreon/img/media/ppm/operatingsystems-linux-snmp-linux-128.png\"\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/proxy:\n    get:\n      tags:\n        - Proxy\n      summary: \"Display the default configuration of the Centreon proxy\"\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Configuration.Proxy'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      tags:\n        - Proxy\n      summary: \"Update the default configuration of the Centreon proxy\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Configuration.Proxy'\n      responses:\n        '204':\n          description: Command Sent\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/monitoring-servers:\n    get:\n      tags:\n        - Monitoring server\n      summary: \"List all monitoring servers configurations\"\n      description: |\n        List all monitoring servers configurations.\n\n        The available parameters to **search** / **sort_by** are:\n\n          * id\n          * name\n          * is_localhost\n          * address\n          * is_activate\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Configuration.MonitoringServerMain'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/monitoring-servers/{monitoring_server_id}/generate:\n    get:\n      tags:\n        - Monitoring server\n      summary: \"Generate the configuration of the monitoring server\"\n      description: |\n        Generate and move the configuration files of the monitoring server\n      parameters:\n        - $ref: '#/components/parameters/MonitoringServerId'\n      responses:\n        '204':\n          description: \"Generation OK\"\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/monitoring-servers/{monitoring_server_id}/reload:\n    get:\n      tags:\n      - Monitoring server\n      summary: \"Reload the configuration of the monitoring server\"\n      description: |\n        Reload the configuration files of the monitoring server\n      parameters:\n      - $ref: '#/components/parameters/MonitoringServerId'\n      responses:\n        '204':\n          description: \"Reload OK\"\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/monitoring-servers/{monitoring_server_id}/generate-and-reload:\n    get:\n      tags:\n      - Monitoring server\n      summary: \"Generate and reload the configuration of the monitoring server\"\n      description: |\n        Generate, move and reload the configuration files of the monitoring server\n      parameters:\n      - $ref: '#/components/parameters/MonitoringServerId'\n      responses:\n        '204':\n          description: \"Generation and reload OK\"\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/monitoring-servers/generate:\n    get:\n      tags:\n      - Monitoring server\n      summary: \"Generate the configuration for all monitoring servers\"\n      description: |\n        Generate and move the configuration files for all monitoring servers.\n\n        The process will stop at the first error.\n      responses:\n        '204':\n          description: \"Generation OK\"\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/monitoring-servers/reload:\n    get:\n      tags:\n      - Monitoring server\n      summary: \"Reload the configuration for all monitoring servers\"\n      description: |\n        Reload the configuration files for all monitoring servers.\n\n        The process will stop at the first error.\n      responses:\n        '204':\n          description: \"Reload OK\"\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/monitoring-servers/generate-and-reload:\n    get:\n      tags:\n      - Monitoring server\n      summary: \"Generate and reload the configuration for all monitoring servers\"\n      description: |\n        Generate, move and reload the configuration files for all monitoring servers.\n\n        The process will stop at the first error.\n      responses:\n        '204':\n          description: \"Generation and reload OK\"\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/metaservices:\n    get:\n      tags:\n        - Meta service\n      summary: \"List all meta services configurations\"\n      description: |\n        List all meta services configurations.\n\n        The available parameters to **search** / **sort_by** are:\n\n          * id\n          * name\n          * is_activate\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Configuration.MetaServices'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/metaservices/{meta_id}:\n    get:\n      tags:\n        - Meta service\n      summary: \"Get a meta service\"\n      description: \"Get a meta service configuration by its id\"\n      parameters:\n        - $ref: '#/components/parameters/MetaId'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Configuration.MetaServices'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/metaservices/{meta_id}/metrics:\n    get:\n      tags:\n        - Meta service\n      summary: \"List all meta service metrics\"\n      description: |\n        List all meta services metrics from realtime.\n\n        The available parameters to **search** / **sort_by** are:\n\n          * id\n          * name\n          * service_description\n          * host_name\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n        - $ref: '#/components/parameters/MetaId'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Monitoring.MetaServiceMetric'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/hosts/{host_id}/notification-policy:\n    get:\n      tags:\n        - Notification Policy\n      summary: \"Get notification policy of a host\"\n      description: \"Return the notified contacts and contact groups of a host.\"\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n      responses:\n        '200':\n          description: \"Successful request\"\n          content:\n            application/json:\n              schema:\n                $ref: './NotificationPolicy.yaml'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/hosts/{host_id}/services/{service_id}/notification-policy:\n    get:\n      tags:\n        - Notification Policy\n      summary: \"Get notification policy of a service\"\n      description: \"Return the notified contacts and contact groups of a service.\"\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n        - $ref: '#/components/parameters/ServiceId'\n      responses:\n        '200':\n          description: \"Successful request\"\n          content:\n            application/json:\n              schema:\n                $ref: './NotificationPolicy.yaml'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/metaservices/{meta_id}/notification-policy:\n    get:\n      tags:\n        - Notification Policy\n      summary: \"Get notification policy of a meta service\"\n      description: \"Return the notified contacts and contact groups of a meta service.\"\n      parameters:\n        - $ref: '#/components/parameters/MetaId'\n      responses:\n        '200':\n          description: \"Successful request\"\n          content:\n            application/json:\n              schema:\n                $ref: './NotificationPolicy.yaml'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/servers:\n    get:\n      tags:\n        - Monitoring server\n      summary: \"List all real time monitoring servers\"\n      description: |\n        List all monitoring servers configured and stored in real time.\n\n        The available parameters to **search** / **sort_by** are:\n\n          * id\n          * name\n          * running\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Monitoring.Servers'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /users/acl/actions:\n    get:\n      tags:\n        - User\n      summary: \"List allowed actions\"\n      description: \"List allowed actions of the current user.\"\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  host:\n                    type: object\n                    properties:\n                      check:\n                        type: boolean\n                        description: if check is allowed on host\n                        example: true\n                      acknowledgement:\n                        type: boolean\n                        description: if acknowledgement is allowed on host\n                        example: true\n                      downtime:\n                        type: boolean\n                        description: if downtime is allowed on host\n                        example: false\n                  service:\n                    type: object\n                    properties:\n                      check:\n                        type: boolean\n                        description: if check is allowed on service\n                        example: true\n                      acknowledgement:\n                        type: boolean\n                        description: if acknowledgement is allowed on service\n                        example: true\n                      downtime:\n                        type: boolean\n                        description: if downtime is allowed on service\n                        example: false\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/users:\n    get:\n      tags:\n      - User\n      summary: Get configured users\n      description: |\n        Get list of configured users\n\n        The available parameters to **search** / **sort_by** are:\n\n        * id\n        * alias\n        * name\n        * email\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Configuration.User'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/users/current/parameters:\n    get:\n      tags:\n      - User\n      summary: \"List user parameters\"\n      description: \"List configured parameters for the current user\"\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                    description: Contact ID\n                    example: 1\n                  name:\n                    type: string\n                    description: Name of the current user\n                    example: Administrator\n                  alias:\n                    type: string\n                    description: Alias of the current user\n                    example: admin\n                  email:\n                    type: string\n                    description: Email of the current user\n                    example: admin@localhost\n                  timezone:\n                    type: string\n                    description: Timezone for the current user\n                    example: Europe/Paris\n                  locale:\n                    type: string\n                    nullable: true\n                    description: Locale of the current user\n                    example: en_US\n                  is_admin:\n                    type: boolean\n                    description: If the current user is an administrator\n                    example: true\n                  use_deprecated_pages:\n                    type: boolean\n                    description: Indicates if user wants to use deprecated monitoring pages\n                    example: false\n                  theme:\n                    type: string\n                    description: Selected theme of the current user\n                    example: light\n                  default_page:\n                    type: string\n                    nullable: true\n                    description: Default page for the current user\n                    example: '/main.php?p=60901'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    patch:\n      tags:\n      - User\n      summary: Update a user\n      description: |\n        Update a user\n        \n        The available parameters to be updated are :\n        \n        * theme\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                theme:\n                  type: string\n                  description: Theme\n                  enum: [ light, dark ]\n                  example: light\n      responses:\n        204:\n          description: \"User updated\"\n        403:\n          $ref: '#/components/responses/Forbidden'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/contact-template:\n    get:\n      tags:\n      - User\n      summary: \"List contact templates\"\n      description: \"List configured contact templates\"\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Configuration.ContactTemplate'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /users/filters/{page_name}:\n    get:\n      tags:\n        - User\n      summary: \"List user filters by page\"\n      description: |\n        `internal`\n\n        `Since Centreon web 20.04.6`\n\n        List user filters saved for a given page.\n      parameters:\n        - $ref: '#/components/parameters/FilterPageName'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User.Filter'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - User filters\n      summary: \"Add user filter\"\n      description: |\n        `internal`\n\n        `Since Centreon web 20.04.6`\n\n        Add user filter for a given page.\n      parameters:\n        - $ref: '#/components/parameters/FilterPageName'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: filter name\n                  example: my filter 1\n                criterias:\n                  type: array\n                  description: list of filter criterias\n                  items:\n                    type: object\n                    example:\n                      type: text\n                      name: field1\n                      value: search value 1\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User.Filter'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /users/filters/{page_name}/{filter_id}:\n    get:\n      tags:\n        - User\n      summary: \"Detailed user filter\"\n      description: |\n        `internal`\n\n        `Since Centreon web 20.04.6`\n\n        Get detailed information of a user filter for a given page.\n      parameters:\n        - $ref: '#/components/parameters/FilterPageName'\n        - $ref: '#/components/parameters/FilterId'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User.Filter'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      tags:\n        - User filters\n      summary: \"Update user filter\"\n      description: |\n        `internal`\n\n        `Since Centreon web 20.04.6`\n\n        Update user filter for a given page.\n      parameters:\n        - $ref: '#/components/parameters/FilterPageName'\n        - $ref: '#/components/parameters/FilterId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User.Filter'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User.Filter'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    patch:\n      tags:\n        - User filters\n      summary: \"Patch user filter\"\n      description: |\n        `internal`\n\n        `Since Centreon web 20.04.6`\n\n        Patch user filter order for a given page.\n      parameters:\n        - $ref: '#/components/parameters/FilterPageName'\n        - $ref: '#/components/parameters/FilterId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required: [order]\n              properties:\n                order:\n                  type: integer\n                  description: filter order\n                  example: 1\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User.Filter'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - User filters\n      summary: \"Delete user filter\"\n      description: |\n        `internal`\n\n        `Since Centreon web 20.04.6`\n\n        Delete user filter for a given page.\n      parameters:\n        - $ref: '#/components/parameters/FilterPageName'\n        - $ref: '#/components/parameters/FilterId'\n      responses:\n        '204':\n          description: \"OK\"\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/resources:\n    get:\n      tags:\n        - Resource\n      summary: \"List all resources including hosts and services\"\n      description: |\n        List all the resources in real-time monitoring : hosts and services.\n\n        The available parameters to **search** / **sort_by** are:\n\n        * id\n        * name\n        * alias\n        * fqdn\n        * type\n        * status_code\n        * status\n        * action_url\n        * notes_label\n        * notes_url\n        * parent_name\n        * parent_status\n        * severity_level\n        * in_downtime\n        * acknowledged\n        * last_status_change\n        * tries\n        * last_check\n        * information\n        * monitoring_server_name\n        * status_types\n\n        Only for **searching**:\n\n        ---\n\n        * h.name\n        * h.alias\n        * h.address\n        * h.fqdn\n        * s.description\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n        - $ref: '#/components/parameters/ResourceFilterType'\n        - $ref: '#/components/parameters/ResourceFilterState'\n        - $ref: '#/components/parameters/ResourceFilterStatus'\n        - $ref: '#/components/parameters/ResourceFilterHostgroupName'\n        - $ref: '#/components/parameters/ResourceFilterServicegroupName'\n        - $ref: '#/components/parameters/ResourceFilterMonitoringServerName'\n        - $ref: '#/components/parameters/ResourceFilterStatusTypes'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Monitoring.ResourceMain'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/resources/hosts/{host_id}:\n    get:\n      tags:\n        - Resource\n      summary: \"Get a Host resource type detail\"\n      description: \"Return the full detail of a resource typed Host.\"\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n      responses:\n        '200':\n          description: \"Successful request\"\n          content:\n            application/json:\n              schema:\n                $ref: './ResourceHostDetail.yaml'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/HostNotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/resources/hosts/{host_id}/services/{service_id}:\n    get:\n      tags:\n        - Resource\n      summary: \"Get a Service resource type detail\"\n      description: \"Return the full detail of a resource typed Service.\"\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n        - $ref: '#/components/parameters/ServiceId'\n      responses:\n        '200':\n          description: \"Successful request\"\n          content:\n            application/json:\n              schema:\n                $ref: './ResourceServiceDetail.yaml'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFoundHostOrService'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts:\n    get:\n      tags:\n        - Host\n      summary: \"List all hosts\"\n      description: |\n        List all the hosts in real-time monitoring.\n\n        The available parameters to **search** / **sort_by** are:\n\n        * host.id\n        * host.name\n        * host.alias\n        * host.address\n        * host.state\n        * poller.id\n        * service.display_name\n        * host_group.id\n        * host.is_acknowledged\n        * host.downtime\n        * host.criticality\n      parameters:\n        - $ref: '#/components/parameters/ShowService'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Monitoring.HostMain'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/{host_id}:\n    get:\n      tags:\n        - Host\n      summary: \"Get a host\"\n      description: \"Return a single host with full details and some details about its services.\"\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Monitoring.HostFull'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/services:\n    get:\n      tags:\n        - Service\n      summary: \"List all services\"\n      description: |\n        List all the services in real-time monitoring.\n\n        The available parameters to **search** / **sort_by** are:\n\n        * host.id\n        * host.name\n        * host.alias\n        * host.address\n        * host.state\n        * host_group.id\n        * service.display_name\n        * service.description\n        * service.is_acknowledged\n        * service.output\n        * service.state\n        * service_group.id\n        * poller.id\n        * service.downtime\n        * service.criticality\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      allOf:\n                        - $ref: '#/components/schemas/Monitoring.ServiceMain'\n                        - $ref: '#/components/schemas/Monitoring.ServiceWithHost'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/{host_id}/services:\n    get:\n      tags:\n        - Service\n      summary: \"List services related to a host\"\n      description: |\n        List all services related to a host in real-time monitoring.\n\n        The available parameters to **search** / **sort_by** are:\n\n        * service.id\n        * service.description\n        * service.display_name\n        * service_group.id\n        * service.is_acknowledged\n        * service.state\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Monitoring.ServiceMain'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/{host_id}/services/{service_id}:\n    get:\n      tags:\n        - Service\n      summary: \"Get a service\"\n      description: \"Return a single service with full details.\"\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n        - $ref: '#/components/parameters/ServiceId'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Monitoring.ServiceFull'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/{host_id}/services/{service_id}/servicegroups:\n    get:\n      tags:\n        - Service group\n      summary: \"Get service groups by host id and service id\"\n      description: \"Return a list of service groups for host-service pair.\"\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n        - $ref: '#/components/parameters/ServiceId'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Monitoring.ServiceGroup'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/{host_id}/hostgroups:\n    get:\n      tags:\n        - Host group\n      summary: \"List all host groups by host id\"\n      description: |\n        List all the host groups in real-time monitoring by host id\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      allOf:\n                        - $ref: '#/components/schemas/Monitoring.HostGroup'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hostgroups:\n    get:\n      tags:\n        - Host group\n      summary: \"List all host groups\"\n      description: |\n        List all the host groups in real-time monitoring.\n\n        The available parameters to **search** / **sort_by** are:\n\n        * host.id\n        * host.name\n        * host.alias\n        * host.address\n        * host.state\n        * poller.id\n        * service.display_name\n        * host_group.id\n      parameters:\n        - $ref: '#/components/parameters/ShowHost'\n        - $ref: '#/components/parameters/ShowService'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      allOf:\n                        - $ref: '#/components/schemas/Monitoring.HostGroup'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/servicegroups:\n    get:\n      tags:\n        - Service group\n      summary: \"List all service groups\"\n      description: |\n        List all the service groups in real-time monitoring.\n\n        The available parameters to **search** / **sort_by** are:\n\n        * id\n        * name\n      parameters:\n        - $ref: '#/components/parameters/ShowService'\n        - $ref: '#/components/parameters/ShowHost'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      allOf:\n                        - $ref: '#/components/schemas/Monitoring.ServiceGroup'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/acknowledgements:\n    get:\n      tags:\n        - Acknowledgement\n      summary: \"List all acknowledgements\"\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      allOf:\n                        - $ref: '#/components/schemas/Acknowledgement.Host'\n                        - $ref: '#/components/schemas/Acknowledgement.Service'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/resources/acknowledgements:\n    delete:\n      tags:\n        - Acknowledgement\n      summary: \"Massively disacknowledge resources\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Acknowledgement.Disacknowledge.Bulk'\n      responses:\n        '204':\n          description: \"OK\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/acknowledgements/{acknowledgement_id}:\n    get:\n      tags:\n        - Acknowledgement\n      summary: \"Display one acknowledgement\"\n      description: \"Display one acknowledgement.\"\n      parameters:\n        - $ref: '#/components/parameters/AcknowledgementId'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Acknowledgement.Service'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/acknowledgements:\n    get:\n      tags:\n        - Acknowledgement\n      summary: \"List all hosts acknowledgements\"\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      allOf:\n                        - $ref: '#/components/schemas/Acknowledgement.Host'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Acknowledgement\n      summary: \"Add an acknowledgement on multiple hosts\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Acknowledgement.Hosts.Add'\n      responses:\n        '204':\n          description: \"Commands Sent\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/services/acknowledgements:\n    get:\n      tags:\n        - Acknowledgement\n      summary: \"List all services acknowledgements\"\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      allOf:\n                        - $ref: '#/components/schemas/Acknowledgement.Service'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Acknowledgement\n      summary: \"Add an acknowledgement on multiple services\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Acknowledgement.Services.Add'\n      responses:\n        '204':\n          description: \"Commands Sent\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/{host_id}/acknowledgements:\n    get:\n      tags:\n        - Acknowledgement\n      summary: \"List all acknowledgements of a host\"\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n        - $ref: '#/components/parameters/HostId'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      allOf:\n                        - $ref: '#/components/schemas/Acknowledgement.Host'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Acknowledgement\n      summary: \"Add an acknowledgement on chosen host\"\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Acknowledgement.Host.Add'\n      responses:\n        '204':\n          description: \"Command Sent\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - Acknowledgement\n      summary: \"Cancel an acknowledgement on a host\"\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n      responses:\n        '204':\n          description: \"Command Sent\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/{host_id}/services/{service_id}/acknowledgements:\n    get:\n      tags:\n        - Acknowledgement\n      summary: \"List all acknowledgements of a service\"\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n        - $ref: '#/components/parameters/HostId'\n        - $ref: '#/components/parameters/ServiceId'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      allOf:\n                        - $ref: '#/components/schemas/Acknowledgement.Service'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Acknowledgement\n      summary: \"Add an acknowledgement on chosen service\"\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n        - $ref: '#/components/parameters/ServiceId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Acknowledgement.Service.Add'\n      responses:\n        '204':\n          description: \"Command Sent\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - Acknowledgement\n      summary: \"Cancel an acknowledgement on a service\"\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n        - $ref: '#/components/parameters/ServiceId'\n      responses:\n        '204':\n          description: \"Command Sent\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/metaservices/{meta_id}/acknowledgements:\n    get:\n      tags:\n        - Acknowledgement\n        - Meta service\n      summary: \"List all acknowledgements of a metaservice\"\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n        - $ref: '#/components/parameters/MetaId'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      allOf:\n                        - $ref: '#/components/schemas/Acknowledgement.Service'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Acknowledgement\n      summary: \"Add an acknowledgement on chosen metaservice\"\n      parameters:\n        - $ref: '#/components/parameters/MetaId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Acknowledgement.Service.Add'\n      responses:\n        '204':\n          description: \"Command Sent\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - Acknowledgement\n      summary: \"Cancel an acknowledgement on a metaservice\"\n      parameters:\n        - $ref: '#/components/parameters/MetaId'\n      responses:\n        '204':\n          description: \"Command Sent\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/downtimes:\n    get:\n      tags:\n        - Downtime\n      summary: \"List all downtimes\"\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n      description: |\n        List all downtimes\n\n        The available parameters to **search** / **sort_by** are:\n\n          * id\n          * entry_time\n          * is_cancelled\n          * comment\n          * deletion_time\n          * duration\n          * end_time\n          * is_fixed\n          * start_time\n          * host.id\n          * host.name\n          * host.alias\n          * host.address\n          * host.display_name\n          * host.state\n          * poller.id\n          * contact.id\n          * contact.name\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      allOf:\n                        - $ref: '#/components/schemas/Downtime.Service'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/downtimes/{downtime_id}:\n    get:\n      tags:\n        - Downtime\n      summary: \"Display one downtime\"\n      description: \"Display one downtime.\"\n      parameters:\n        - $ref: '#/components/parameters/DowntimeId'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Downtime.Service'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - Downtime\n      summary: \"Cancel a downtime\"\n      description: \"Cancel a downtime.\"\n      parameters:\n        - $ref: '#/components/parameters/DowntimeId'\n      responses:\n        '204':\n          description: \"Command Sent\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/downtimes:\n    get:\n      tags:\n        - Downtime\n      summary: \"List all hosts downtimes\"\n      description: |\n        List all downtimes of hosts\n\n        The available parameters to **search** / **sort_by** are:\n\n          * id\n          * entry_time\n          * is_cancelled\n          * comment\n          * deletion_time\n          * duration\n          * end_time\n          * is_fixed\n          * start_time\n          * host.id\n          * host.name\n          * host.alias\n          * host.address\n          * host.display_name\n          * host.state\n          * poller.id\n          * contact.id\n          * contact.name\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      allOf:\n                        - $ref: '#/components/schemas/Downtime.Host'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Downtime\n      summary: \"Add an downtime on multiple hosts\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Downtime.Hosts.Add'\n      responses:\n        '204':\n          description: \"Commands Sent\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/services/downtimes:\n    get:\n      tags:\n        - Downtime\n      summary: \"List all services downtimes\"\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n      description: |\n        List all downtimes of services\n\n        The available parameters to **search** / **sort_by** are:\n\n          * id\n          * entry_time\n          * is_cancelled\n          * comment\n          * deletion_time\n          * duration\n          * end_time\n          * is_fixed\n          * start_time\n          * host.id\n          * host.name\n          * host.alias\n          * host.address\n          * host.display_name\n          * host.state\n          * poller.id\n          * contact.id\n          * contact.name\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      allOf:\n                        - $ref: '#/components/schemas/Downtime.Service'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Downtime\n      summary: \"Add an downtime on multiple services\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Downtime.Services.Add'\n      responses:\n        '204':\n          description: \"Commands Sent\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/{host_id}/downtimes:\n    get:\n      tags:\n        - Downtime\n      summary: \"List all downtimes of a host\"\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n        - $ref: '#/components/parameters/ShowService'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n      description: |\n        List all downtimes of a host.\n\n        The available parameters to **search** / **sort_by** are:\n\n          * id\n          * entry_time\n          * is_cancelled\n          * comment\n          * deletion_time\n          * duration\n          * end_time\n          * is_fixed\n          * start_time\n          * contact.id\n          * contact.name\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      allOf:\n                        - $ref: '#/components/schemas/Downtime.Host'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Downtime\n      summary: \"Add a downtime on a host\"\n      description: \"Add a downtime on a host.\"\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Downtime.Host.Add'\n      responses:\n        '204':\n          description: \"Command Sent\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/{host_id}/services/{service_id}/downtimes:\n    get:\n      tags:\n        - Downtime\n      summary: \"List all downtimes of a service\"\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n        - $ref: '#/components/parameters/HostId'\n        - $ref: '#/components/parameters/ServiceId'\n      description: |\n        List all downtimes of a service.\n\n        The available parameters to **search** / **sort_by** are:\n\n          * id\n          * entry_time\n          * is_cancelled\n          * comment\n          * deletion_time\n          * duration\n          * end_time\n          * is_fixed\n          * start_time\n          * contact.id\n          * contact.name\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      allOf:\n                        - $ref: '#/components/schemas/Downtime.Service'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Downtime\n      summary: \"Add a downtime on a service\"\n      description: \"Add a downtime on a service.\"\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n        - $ref: '#/components/parameters/ServiceId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Downtime.Service.Add'\n      responses:\n        '204':\n          description: \"Command Sent\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/metaservices/{meta_id}/downtimes:\n    get:\n      tags:\n        - Downtime\n        - Meta service\n      summary: \"List all downtimes of a metaservice\"\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n        - $ref: '#/components/parameters/MetaId'\n      description: |\n        List all downtimes of a service.\n\n        The available parameters to **search** / **sort_by** are:\n\n          * id\n          * entry_time\n          * is_cancelled\n          * comment\n          * deletion_time\n          * duration\n          * end_time\n          * is_fixed\n          * start_time\n          * contact.id\n          * contact.name\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      allOf:\n                        - $ref: '#/components/schemas/Downtime.Service'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Downtime\n      summary: \"Add a downtime on a metaservice\"\n      description: \"Add a downtime on a metaservice.\"\n      parameters:\n        - $ref: '#/components/parameters/MetaId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Downtime.Service.Add'\n      responses:\n        '204':\n          description: \"Command Sent\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/check:\n    post:\n      tags:\n        - Check\n      summary: \"Check multiple hosts\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Check.Hosts'\n      responses:\n        '204':\n          description: \"Commands Sent\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/services/check:\n    post:\n      tags:\n        - Check\n      summary: \"Check multiple services\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Check.Services'\n      responses:\n        '204':\n          description: \"Commands Sent\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/{host_id}/check:\n    post:\n      tags:\n        - Check\n      summary: \"Check host\"\n      description: \"Schedule immediate check on chosen host\"\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Check.Host'\n      responses:\n        '204':\n          description: 'Command Sent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: 'Host not found'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/{host_id}/services/{service_id}/check:\n    post:\n      tags:\n        - Check\n      summary: \"Check service\"\n      description: \"Schedule immediate check on chosen service\"\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n        - $ref: '#/components/parameters/ServiceId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Check.Service'\n      responses:\n        '204':\n          description: 'Command Sent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: 'Host or service not found'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/metaservices/{meta_id}/check:\n    post:\n      tags:\n        - Check\n        - Meta service\n      summary: \"Check metaservice\"\n      description: \"Schedule immediate check on chosen metaservice\"\n      parameters:\n        - $ref: '#/components/parameters/MetaId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Check.Service'\n      responses:\n        '204':\n          description: 'Command Sent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: 'Host or service not found'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/resources/check:\n    post:\n      tags:\n        - Check\n      summary: \"Check resources\"\n      description: \"Schedule immediate check on chosen resources\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Check.Resources'\n      responses:\n        '204':\n          description: 'Command Sent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: 'Host or service not found'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/{host_id}/submit:\n    post:\n      tags:\n        - Submit\n      summary: \"Submit a result to a single host\"\n      description: \"Submit a result (check status, output and perfdata) to a single host\"\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SubmitResult.Host'\n      responses:\n        '204':\n          description: 'Command Sent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: 'Host not found'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/{host_id}/services/{service_id}/submit:\n    post:\n      tags:\n        - Submit\n      summary: \"Submit a result to a single service\"\n      description: \"Submit a result (check status, output and perfdata) to a single service\"\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n        - $ref: '#/components/parameters/ServiceId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SubmitResult.Service'\n      responses:\n        '204':\n          description: 'Command Sent'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: 'Host or service not found'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/metaservices/{meta_id}/submit:\n    post:\n      tags:\n        - Submit\n        - Meta service\n      summary: \"Submit a result to a single metaservice\"\n      description: \"Submit a result (check status, output and perfdata) to a single metaservice\"\n      parameters:\n        - $ref: '#/components/parameters/MetaId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SubmitResult.Service'\n      responses:\n        '204':\n          description: 'Command Sent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          description: 'Host or service not found'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/resources/submit:\n    post:\n      tags:\n        - Submit\n      summary: \"Submit result to resources\"\n      description: \"Submit a result (check status, output and perfdata) to resources\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SubmitResult.Resources'\n      responses:\n        '204':\n          description: 'Command Sent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          description: 'Host or service not found'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/resources/comments:\n    post:\n      tags:\n        - Comment\n      summary: \"Add comment to resources\"\n      description: \"Add at least one comment to a single or to multiple resources\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Comment.Resources'\n      responses:\n        '204':\n          description: 'Command Sent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          description: 'Host or service not found'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/{host_id}/services/{service_id}/metrics/start/{start}/end/{end}:\n    get:\n      tags:\n        - Metrics\n      summary: 'Get service metrics'\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n        - $ref: '#/components/parameters/ServiceId'\n        - $ref: '#/components/parameters/MetricStartDate'\n        - $ref: '#/components/parameters/MetricEndDate'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  global:\n                    type: object\n                    properties:\n                      title:\n                        type: string\n                        description: title of the graph\n                        example: graph title\n                      start:\n                        type: integer\n                        description: timestamp of the start interval\n                        example: 1594504800\n                      end:\n                        type: integer\n                        description: timestamp of the end interval\n                        example: 1594591200\n                      vertical-label:\n                        type: string\n                        description: vertical label (should not be used cause multiple y-axis possible)\n                        example: \"Value\"\n                      base:\n                        type: string\n                        description: base scale\n                        example: '1024'\n                      width:\n                        type: string\n                        description: width of the graph (should not be used)\n                        example: '550'\n                      height:\n                        type: string\n                        description: height of the graph (should not be used)\n                        example: '140'\n                      lower-limit:\n                        type: string\n                        description: lower value of the graph\n                        example: '0'\n                      scaled:\n                        type: integer\n                        description: if the graph needs to be automatically scaled\n                        example: 1\n                      multiple_services:\n                        type: boolean\n                        description: if multiple services are selected (always false)\n                        example: false\n                  metrics:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        index_id:\n                          type: string\n                          description: index id in centreon_storage.index_data table\n                          example: '4'\n                        metric_id:\n                          type: string\n                          description: metric id in centreon_storage.metrics table\n                          example: '29'\n                        metric:\n                          type: string\n                          description: name of the metric\n                          example: 'cpu'\n                        metric_legend:\n                          type: string\n                          description: name of the metric in legend\n                          example: 'cpu'\n                        unit:\n                          type: string\n                          description: metric unit\n                          example: '%'\n                        hidden:\n                          type: integer\n                          description: if the metric is hidden\n                          example: 0\n                        min:\n                          type: string\n                          description: min value\n                          example: '0'\n                        max:\n                          type: string\n                          description: max value\n                          example: '100'\n                        virtual:\n                          type: integer\n                          description: if the metric is virtual\n                          example: 0\n                        ds_data:\n                          type: object\n                          description: metric line properties\n                          properties:\n                            ds_min:\n                              type: string\n                              description: minimum value\n                              example: '1'\n                            ds_max:\n                              type: string\n                              description: maximum value\n                              example: '1'\n                            ds_minmax_int:\n                              type: string\n                              nullable: true\n                              description: unknown\n                              example: null\n                            ds_last:\n                              type: string\n                              description: last value\n                              example: '1'\n                            ds_average:\n                              type: string\n                              description: average value\n                              example: '1'\n                            ds_total:\n                              type: string\n                              nullable: true\n                              description: unknown\n                              example: null\n                            ds_tickness:\n                              type: string\n                              description: unknown\n                              example: '1'\n                            ds_color_line_mode:\n                              type: string\n                              description: unknown\n                              example: '1'\n                            ds_color_line:\n                              type: string\n                              description: color of the line\n                              example: '#666600'\n                        legend:\n                          type: string\n                          description: metric name in legend\n                          example: 'cpu (%)'\n                        stack:\n                          type: integer\n                          description: if the metric is stacked with other metrics\n                          example: 0\n                        warn:\n                          type: string\n                          nullable: true\n                          description: warning threshold\n                          example: null\n                        warn_low:\n                          type: string\n                          nullable: true\n                          description: low warning threshold\n                          example: null\n                        crit:\n                          type: string\n                          nullable: true\n                          description: critical threshold\n                          example: null\n                        crit_low:\n                          type: string\n                          nullable: true\n                          description: low critical threshold\n                          example: null\n                        ds_color_area_warn:\n                          type: string\n                          description: color of the area under warning threshold\n                          example: '#ff9a13'\n                        ds_color_area_crit:\n                          type: string\n                          description: color of the area under critical threshold\n                          example: '#e00b3d'\n                        ds_order:\n                          type: integer\n                          description: order used for stacking\n                          example: 0\n                        data:\n                          type: array\n                          items:\n                            type: number\n                            description: value of the metric\n                          example:\n                            - 1.0\n                            - null\n                            - 1.0\n                        prints:\n                          type: array\n                          items:\n                            type: array\n                            items:\n                              type: string\n                              description: label to display in legend\n                              example: 'Last:1.00'\n                        last_value:\n                          type: number\n                          nullable: true\n                          description: last value\n                          example: 5.0\n                        minimum_value:\n                          type: number\n                          nullable: true\n                          description: minimum value\n                          example: 0.0\n                        maximum_value:\n                          type: number\n                          nullable: true\n                          description: maximum value\n                          example: 10.0\n                        average_value:\n                          type: number\n                          nullable: true\n                          description: average value\n                          example: 5.64\n                  times:\n                    type: array\n                    items:\n                      type: string\n                      format: timestamp\n                      description: timestamp of the tick\n                    example:\n                      - '1594505100'\n                      - '1594505400'\n                      - '1594505700'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFoundHostOrService'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/{host_id}/services/{service_id}/status/start/{start}/end/{end}:\n    get:\n      tags:\n        - Metrics\n      summary: 'Get service status data'\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n        - $ref: '#/components/parameters/ServiceId'\n        - $ref: '#/components/parameters/MetricStartDate'\n        - $ref: '#/components/parameters/MetricEndDate'\n      description: 'Get status data from a service between given interval'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  critical:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        start:\n                          type: string\n                          description: start time (timestamp)\n                          example: \"1581987121\"\n                        end:\n                          type: string\n                          description: end time (timestamp)\n                          example: \"1581987181\"\n                  warning:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        start:\n                          type: string\n                          description: start time (timestamp)\n                          example: \"1581987121\"\n                        end:\n                          type: string\n                          description: end time (timestamp)\n                          example: \"1581987181\"\n                  ok:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        start:\n                          type: string\n                          description: start time (timestamp)\n                          example: \"1581987121\"\n                        end:\n                          type: string\n                          description: end time (timestamp)\n                          example: \"1581987181\"\n                  unknown:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        start:\n                          type: string\n                          description: start time (timestamp)\n                          example: \"1581987121\"\n                        end:\n                          type: string\n                          description: end time (timestamp)\n                          example: \"1581987181\"\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFoundHostOrService'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/{host_id}/services/{service_id}/metrics/performance:\n    get:\n      tags:\n        - Metrics\n      summary: 'Get service performance data'\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n        - $ref: '#/components/parameters/ServiceId'\n        - in: query\n          name: start\n          required: false\n          description: \"Start date of metrics (default date is 24 hours in the past)\"\n          schema:\n            type: string\n            format: date-time\n            example: '2020-02-18T00:00:00'\n        - in: query\n          name: end\n          required: false\n          description: \"End date of metrics (default date is current date)\"\n          schema:\n            type: string\n            format: date-time\n            example: '2020-02-19T00:00:00'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  global:\n                    type: object\n                    properties:\n                      title:\n                        type: string\n                        description: title of the graph\n                        example: 'graph title'\n                      start:\n                        type: string\n                        format: date-time\n                        description: datetime of the start interval\n                        example: '2020-02-18T00:00:00'\n                      end:\n                        type: string\n                        format: date-time\n                        description: datetime of the end interval\n                        example: '2020-02-19T00:00:00'\n                      vertical-label:\n                        type: string\n                        description: vertical label (should not be used cause multiple y-axis possible)\n                        example: 'Value'\n                      base:\n                        type: string\n                        description: base scale\n                        example: '1024'\n                      width:\n                        type: string\n                        description: width of the graph (should not be used)\n                        example: '550'\n                      height:\n                        type: string\n                        description: height of the graph (should not be used)\n                        example: '140'\n                      lower-limit:\n                        type: string\n                        description: lower value of the graph\n                        example: '0'\n                      scaled:\n                        type: integer\n                        description: if the graph needs to be automatically scaled\n                        example: 1\n                      multiple_services:\n                        type: boolean\n                        description: if multiple services are selected (always false)\n                        example: false\n                  metrics:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        index_id:\n                          type: string\n                          description: index id in centreon_storage.index_data table\n                          example: '4'\n                        metric_id:\n                          type: string\n                          description: metric id in centreon_storage.metrics table\n                          example: '29'\n                        metric:\n                          type: string\n                          description: name of the metric\n                          example: 'cpu'\n                        metric_legend:\n                          type: string\n                          description: name of the metric in legend\n                          example: 'cpu'\n                        unit:\n                          type: string\n                          description: metric unit\n                          example: '%'\n                        hidden:\n                          type: integer\n                          description: if the metric is hidden\n                          example: 0\n                        min:\n                          type: string\n                          description: min value\n                          example: '0'\n                        max:\n                          type: string\n                          description: max value\n                          example: '100'\n                        virtual:\n                          type: integer\n                          description: if the metric is virtual\n                          example: 0\n                        ds_data:\n                          type: object\n                          description: metric line properties\n                          properties:\n                            ds_min:\n                              type: string\n                              description: minimum value\n                              example: '1'\n                            ds_max:\n                              type: string\n                              description: maximum value\n                              example: '1'\n                            ds_minmax_int:\n                              type: string\n                              nullable: true\n                              description: unknown\n                              example: null\n                            ds_last:\n                              type: string\n                              description: last value\n                              example: '1'\n                            ds_average:\n                              type: string\n                              description: average value\n                              example: '1'\n                            ds_total:\n                              type: string\n                              nullable: true\n                              description: unknown\n                              example: null\n                            ds_tickness:\n                              type: string\n                              description: unknown\n                              example: '1'\n                            ds_color_line_mode:\n                              type: string\n                              description: unknown\n                              example: '1'\n                            ds_color_line:\n                              type: string\n                              description: color of the line\n                              example: '#666600'\n                        legend:\n                          type: string\n                          description: metric name in legend\n                          example: 'cpu (%)'\n                        stack:\n                          type: integer\n                          description: if the metric is stacked with other metrics\n                          example: 0\n                        warn:\n                          type: string\n                          nullable: true\n                          description: warning threshold\n                          example: null\n                        warn_low:\n                          type: string\n                          nullable: true\n                          description: low warning threshold\n                          example: null\n                        crit:\n                          type: string\n                          nullable: true\n                          description: critical threshold\n                          example: null\n                        crit_low:\n                          type: string\n                          nullable: true\n                          description: low critical threshold\n                          example: null\n                        ds_color_area_warn:\n                          type: string\n                          description: color of the area under warning threshold\n                          example: '#ff9a13'\n                        ds_color_area_crit:\n                          type: string\n                          description: color of the area under critical threshold\n                          example: '#e00b3d'\n                        ds_order:\n                          type: integer\n                          description: order used for stacking\n                          example: 0\n                        data:\n                          type: array\n                          items:\n                            type: number\n                            format: float\n                            description: value of the metric\n                          example:\n                            - 1.0\n                            - null\n                            - 1.0\n                        prints:\n                          type: array\n                          items:\n                            type: array\n                            items:\n                              type: string\n                              description: label to display in legend\n                              example: 'Last:1.00'\n                        minimum_value:\n                          type: number\n                          format: float\n                          description: minimum value\n                          example: 1.0\n                        maximum_value:\n                          type: number\n                          format: float\n                          description: maximum value\n                          example: 1.0\n                  times:\n                    type: array\n                    items:\n                      type: string\n                      format: date-time\n                      description: datetime of the tick\n                    example:\n                      - '2020-02-19T00:00:00'\n                      - '2020-02-19T00:05:00'\n                      - '2020-02-19T00:10:00'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFoundHostOrService'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/{host_id}/services/{service_id}/metrics/status:\n    get:\n      tags:\n        - Metrics\n      summary: 'Get service status data'\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n        - $ref: '#/components/parameters/ServiceId'\n        - in: query\n          name: start\n          required: false\n          description: \"Start date of metrics (default date is 24 hours in the past)\"\n          schema:\n            type: string\n            format: date-time\n            example: '2020-02-18T00:00:00'\n        - in: query\n          name: end\n          required: false\n          description: \"End date of metrics (default date is current date)\"\n          schema:\n            type: string\n            format: date-time\n            example: '2020-02-19T00:00:00'\n      description: 'Get status data from a service between given interval'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  critical:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        start:\n                          type: string\n                          description: start time (timestamp)\n                          example: '1581987121'\n                        end:\n                          type: string\n                          description: end time (timestamp)\n                          example: '1581987181'\n                  warning:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        start:\n                          type: string\n                          description: start time (timestamp)\n                          example: '1581987121'\n                        end:\n                          type: string\n                          description: end time (timestamp)\n                          example: '1581987181'\n                  ok:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        start:\n                          type: string\n                          description: start time (timestamp)\n                          example: '1581987121'\n                        end:\n                          type: string\n                          description: end time (timestamp)\n                          example: '1581987181'\n                  unknown:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        start:\n                          type: string\n                          description: start time (timestamp)\n                          example: '1581987121'\n                        end:\n                          type: string\n                          description: end time (timestamp)\n                          example: '1581987181'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFoundHostOrService'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/{host_id}/timeline:\n    get:\n      tags:\n        - Timeline\n      summary: \"Get host timeline\"\n      description: |\n        List all events for a given host\n\n        The available parameters to **search** / **sort_by** are:\n\n        * type\n        * content\n        * date\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Monitoring.TimelineEvent'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/hosts/{host_id}/services/{service_id}/timeline:\n    get:\n      tags:\n        - Timeline\n      summary: \"Get service timeline\"\n      description: |\n        List all events for a given service\n\n        The available parameters to **search** / **sort_by** are:\n\n        * type\n        * content\n        * date\n      parameters:\n        - $ref: '#/components/parameters/HostId'\n        - $ref: '#/components/parameters/ServiceId'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/SortBy'\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Monitoring.TimelineEvent'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/resources/acknowledge:\n    post:\n      tags:\n        - Acknowledgement\n      summary: \"Acknowledge multiple resources\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Acknowledgement.Bulk'\n      responses:\n        '204':\n          description: \"Command Sent\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /monitoring/resources/downtime:\n    post:\n      tags:\n        - Downtime\n      summary: \"Set downtime for multiple resources\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Downtime.Bulk'\n      responses:\n        '204':\n          description: \"Command Sent\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /platform:\n    patch:\n      tags:\n        - Platform\n      summary: \"Update a platform information\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Platform.Full'\n      responses:\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '204':\n          description: \"Platform updated\"\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /platform/versions:\n    get:\n      tags:\n        - Platform\n      summary: \"List versions of web, widgets and modules\"\n      description: \"List versions of web, widgets and modules\"\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  web:\n                      $ref: '#/components/schemas/Platform.Versions'\n                  widgets:\n                    type: object\n                    properties:\n                      widgetName:\n                        type: object\n                        $ref: '#/components/schemas/Platform.Versions'\n                  modules:\n                    type: object\n                    properties:\n                      moduleName:\n                        type: object\n                        $ref: '#/components/schemas/Platform.Versions'\n  /platform/installation/status:\n    get:\n      tags:\n        - Platform\n      summary: \"Get centreon web versions\"\n      description: \"Get installation status and available versions of centreon web\"\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                required: [\"installed_version\", \"has_upgrade_available\"]\n                properties:\n                  is_installed:\n                    type: boolean\n                    description: Installation status of centreon web\n                    example: true\n                  has_upgrade_available:\n                    type: boolean\n                    description: |\n                      upgrade available or not\n                    example: true\n  /platform/topology:\n    post:\n      tags:\n        - Topology\n      summary: \"Register to platform topology\"\n      description: \"Register a server to the platform topology\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Topology.Register'\n      responses:\n        '201':\n          description: \"OK\"\n        '409':\n          description: \"Conflict. More details are specified in the response\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int64\n                    example: 409\n                  message:\n                    type: string\n                    example: \"A platform using the name : 'myPoller' or address : '1.1.1.2' already exists\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    get:\n      tags:\n        - Topology\n      summary: \"Get a platform topology\"\n      description: \"Get a platform topology in Json Graph Format\"\n      responses:\n        '200':\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: object\n                required: [\"graph\", \"nodes\", \"edges\"]\n                properties:\n                  graph:\n                    type: object\n                    description: General informations about schema\n                    properties:\n                      label:\n                        type: string\n                        description: type of Json Graph\n                        example: \"centreon-topology\"\n                      metadata:\n                        type: object\n                        properties:\n                          version:\n                            type: string\n                            description: Version of the topology\n                            example: \"1.0.0\"\n                      nodes:\n                        type: object\n                        minItems: 1\n                        properties:\n                          id:\n                            properties:\n                              type:\n                                type: string\n                                description: Server Type of a platform\n                                example: \"central\"\n                              label:\n                                type: string\n                                description: logical name of a platform\n                                example: \"Central\"\n                              metadata:\n                                type: object\n                                properties:\n                                  centreon-id:\n                                    type: string\n                                    description: id of a platform as known in centreon database\n                                    example: \"1\"\n                                  hostname:\n                                    type: string\n                                    description: physical name of a platform\n                                    example: \"localhost.localdomain\"\n                                  address:\n                                    type: string\n                                    description: address of a platform\n                                    example: \"192.168.0.1\"\n                      edges:\n                        type: array\n                        minItems: 0\n                        items:\n                          type: object\n                          properties:\n                            source:\n                              type: string\n                              description: children platform id as known in the topology\n                              example: \"91\"\n                            relation:\n                              type: string\n                              description: broker communication type\n                              example: \"peer_retention\"\n                            target:\n                              type: string\n                              description: parent platform id as known in the topology\n                              example: \"1\"\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /platform/topology/{poller_id}:\n    delete:\n      tags:\n        - Topology\n      parameters:\n        - $ref: '#/components/parameters/PollerId'\n      summary: 'Delete a Platform'\n      description: \"Delete a platform from the topology\"\n      responses:\n        '204':\n          description: \"Platform deleted\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /gorgone/pollers/{poller_id}/responses/{token}:\n    get:\n      tags:\n        - Gorgone\n      parameters:\n        - $ref: '#/components/parameters/PollerId'\n        - $ref: '#/components/parameters/GorgoneToken'\n      summary: \"Gorgone poller responses token\"\n      responses:\n        '200':\n            description: \"OK\"\n            content:\n              application/json:\n                schema:\n                  type: object\n                  items:\n                    $ref: '#/components/schemas/Gorgone.Response'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /gorgone/pollers/{poller_id}/commands/{command_name}:\n    post:\n      tags:\n        - Gorgone\n      parameters:\n        - $ref: '#/components/parameters/PollerId'\n        - $ref: '#/components/parameters/CommandName'\n      summary: \"Gorgone command on specific poller\"\n      responses:\n        '200':\n            description: \"OK\"\n            content:\n              application/json:\n                schema:\n                  type: object\n                  properties:\n                    token:\n                      type: string\n                      description: \"Token used to retrieve the data linked to the command\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /administration/authentication/providers/local:\n    get:\n      tags:\n        - Administration\n      summary: get local provider configuration with password security policy\n      responses:\n        '200':\n            description: \"OK\"\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/AuthenticationLocalProvider'\n    put:\n      tags:\n        - Administration\n      summary: update local provider configuration\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticationLocalProvider'\n      responses:\n        '204':\n            description: \"OK\"\n  /administration/authentication/providers/web-sso:\n    get:\n      tags:\n        - Administration\n      summary: get WebSSO provider configuration with password security policy\n      responses:\n        '200':\n            description: \"OK\"\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/AuthenticationWebSSOProvider'\n    put:\n      tags:\n        - Administration\n      summary: update WebSSO provider configuration\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticationWebSSOProvider'\n      responses:\n        '204':\n            description: \"OK\"\n  /administration/authentication/providers/openid:\n    get:\n      tags:\n        - Administration\n      summary: get openid provider configuration\n      responses:\n        '200':\n            description: \"OK\"\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/AuthenticationOpenIdProvider'\n    put:\n      tags:\n        - Administration\n      summary: update openid provider configuration\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticationOpenIdProvider'\n      responses:\n        '204':\n            description: \"Configuration updated\"\n  /administration/parameters:\n    post:\n      tags:\n        - Administration\n      summary: \"Administration parameters\"\n      responses:\n        '200':\n            description: \"OK\"\n            content:\n              application/json:\n                schema:\n                  type: object\n                  properties:\n                    monitoring_default_downtime_duration:\n                      type: integer\n                      description: Default downtime duration\n                      example: 3600\n                    monitoring_default_refresh_interval:\n                      type: integer\n                      description: Default monitoring refresh interval\n                      example: 15\n                    monitoring_default_acknowledgement_persistent:\n                      type: boolean\n                      description: Default monitoring acknowledgement persistent option\n                      example: true\n                    monitoring_default_acknowledgement_sticky:\n                      type: boolean\n                      description: Default monitoring acknowledgement sticky option\n                      example: true\n                    monitoring_default_acknowledgement_notify:\n                      type: boolean\n                      description: Default monitoring acknowledgement notify option\n                      example: true\n                    monitoring_default_acknowledgement_force_active_checks:\n                      type: boolean\n                      description: Default monitoring acknowledgement force active checks option\n                      example: true\n                    monitoring_default_acknowledgement_with_services:\n                      type: boolean\n                      description: Default monitoring acknowledgement with services option\n                      example: true\n                    monitoring_default_downtime_fixed:\n                      type: boolean\n                      description: Default monitoring downtime fixed option\n                      example: true\n                    monitoring_default_downtime_with_services:\n                      type: boolean\n                      description: Default set downtimes on services attached to hosts option\n                      example: true\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\ncomponents:\n  securitySchemes:\n    Token:\n      description: |\n        The use of the API requires a security token.\n\n        To retrieve it, you will need to authenticate yourself with your login credentials.\n\n        The token will be deleted if it has not been used for more than one hour.\n      type: apiKey\n      name: X-AUTH-TOKEN\n      in: header\n    Cookie:\n      description: |\n        If you have already connected on the Centreon web application, you can reused the PHPSESSID cookie.\n        The cookie will be valid as long as the connection to Centreon is maintained.\n      type: apiKey\n      name: PHPSESSID\n      in: cookie\n  parameters:\n    Search:\n      in: query\n      name: search\n      required: false\n      schema:\n        type: string\n      description: \u003e\n        Retrieve only data matching the defined search value.\n\n        Simple search can be done like the following example:\n        ```\n        search={\"host.name\":\"Central\"}\n        ```\n\n        Complex search can be done with aggregators and operators.\n\n        Available search aggregators are:\n          * `$or`\n          * `$and`\n\n        Available search operators are:\n          * `$eq` → equal\n          * `$neq` → not equal\n          * `$lt` → less than\n          * `$le` → less or equal than\n          * `$gt` → greater than\n          * `$ge` → greater or equal than\n          * `$lk` → like\n          * `$nk` → not like\n          * `$in` → in\n          * `$ni` → not in\n\n        Examples without nested aggregators:\n          ```\n          search={\n            \"$or\":[\n              {\"host.name\":{\"$eq\":\"name_1\"}},\n              {\"host.name\":{\"$eq\":\"name_2\"}}\n            ]\n          }\n          ```\n          ```\n          search={\n            \"$and\":[\n              {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n              {\"host.name\":{\"$lk\":\"fr%\"}}\n            ]\n          }\n          ```\n\n        Example with nested aggregators:\n          ```\n          search={\n            \"$or\":[\n              {\n                \"$and\":[\n                  {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n                  {\"host.name\":{\"$lk\":\"fr%\"}}\n                ]\n              },\n              {\n                \"$and\":[\n                  {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n                  {\"host.name\":{\"$lk\":\"us%\"}}\n                ]\n              }\n            ]\n          }\n          ```\n    Limit:\n      in: query\n      name: limit\n      required: false\n      description: \"Number of items per pages\"\n      schema:\n        type: integer\n        minimum: 1\n        default: 10\n        example: 20\n    Page:\n      in: query\n      name: page\n      required: false\n      description: \"Number of the requested page\"\n      schema:\n        type: integer\n        minimum: 1\n        default: 1\n        example: 4\n    SortBy:\n      in: query\n      name: sort_by\n      required: false\n      description: \"Sort the resulted data by its properties\"\n      schema:\n        type: object\n        example: '{\"host.name\":\"ASC\"}'\n    MetricStartDate:\n      in: path\n      name: start\n      required: true\n      description: \"Start date of metrics (default date is 24 hours in the past)\"\n      schema:\n        type: string\n        format: date-time\n        example: '2020-02-18T00:00:00'\n    MetricEndDate:\n      in: path\n      name: end\n      required: true\n      description: \"End date of metrics (default date is current date)\"\n      schema:\n        type: string\n        format: date-time\n        example: '2020-02-19T00:00:00'\n    ResourceFilterType:\n      in: query\n      name: types\n      required: false\n      description: \"Filter the resources by type\"\n      schema:\n        type: array\n        items:\n          type: string\n          enum: [service, host, metaservice]\n        example: '[\"host\"]'\n    ResourceFilterState:\n      in: query\n      name: states\n      required: false\n      description: \"Filter the resources by state\"\n      schema:\n        type: array\n        items:\n          type: string\n          enum: [unhandled_problems, resources_problems, in_downtime, acknowledged, all]\n        example: '[\"in_downtime\", \"acknowledged\"]'\n    ResourceFilterStatus:\n      in: query\n      name: statuses\n      required: false\n      description: \"Filter the resources by status\"\n      schema:\n        type: array\n        items:\n          type: string\n          enum: [OK, UP, WARNING, DOWN, CRITICAL, UNREACHABLE, UNKNOWN, PENDING]\n        example: '[\"OK\", \"UP\", \"PENDING\"]'\n    ResourceFilterHostgroupName:\n      in: query\n      name: hostgroup_names\n      required: false\n      description: \"Filter the resources by host group names\"\n      schema:\n        type: array\n        items:\n          type: string\n        example: '[\"ESX-Paris\", \"ESX-London\"]'\n    ResourceFilterServicegroupName:\n      in: query\n      name: servicegroup_names\n      required: false\n      description: \"Filter the resources by service group names\"\n      schema:\n        type: array\n        items:\n          type: string\n        example: '[\"Memory-Services\", \"Ping-Services\"]'\n    ResourceFilterMonitoringServerName:\n      in: query\n      name: monitoring_server_names\n      required: false\n      description: \"Filter the resources by monitoring server names\"\n      schema:\n        type: array\n        items:\n          type: string\n        example: '[\"Central\", \"Remote-Server-Paris\", \"Poller-Lyon\"]'\n    ResourceFilterStatusTypes:\n      in: query\n      name: status_types\n      required: false\n      description: \"Filter the resources by status types\"\n      schema:\n        type: array\n        items:\n          type: string\n          enum: [\"soft\", \"hard\"]\n        example: '[\"soft\"]'\n    ShowHost:\n      in: query\n      name: show_host\n      description: \"Allows to display hosts belonging to items\"\n      schema:\n        type: boolean\n        default: false\n        example: true\n    ShowService:\n      in: query\n      name: show_service\n      description: \"Allows to display services belonging to items\"\n      schema:\n        type: boolean\n        default: false\n        example: true\n    HostId:\n      in: path\n      name: host_id\n      description: \"ID of the host\"\n      required: true\n      schema:\n        type: integer\n        format: int64\n        example: 12\n    ServiceId:\n      in: path\n      name: service_id\n      description: \"ID of the service\"\n      required: true\n      schema:\n        type: integer\n        format: int64\n        example: 5\n    MetaId:\n      in: path\n      name: meta_id\n      description: \"ID of the meta service\"\n      required: true\n      schema:\n        type: integer\n        format: int64\n        example: 1\n    MonitoringServerId:\n      in: path\n      name: monitoring_server_id\n      description: \"ID of the monitoring server (poller)\"\n      required: true\n      schema:\n        type: integer\n        format: int64\n        example: 1\n    AcknowledgementId:\n      in: path\n      name: acknowledgement_id\n      description: \"ID of the acknowledgement\"\n      required: true\n      schema:\n        type: integer\n        format: int64\n        example: 227\n    DowntimeId:\n      in: path\n      name: downtime_id\n      description: \"ID of the downtime\"\n      required: true\n      schema:\n        type: integer\n        format: int64\n        example: 329\n    providerConfigurationName:\n      in: path\n      name: provider_configuration_name\n      required: true\n      schema:\n        type: string\n        example: \"local\"\n    FilterPageName:\n      in: path\n      name: page_name\n      description: \"name of the page\"\n      required: true\n      schema:\n        type: string\n        example: events-view\n    FilterId:\n      in: path\n      name: filter_id\n      description: \"id of the filter\"\n      required: true\n      schema:\n        type: integer\n        format: int64\n        example: 1\n    PollerId:\n      in: path\n      name: poller_id\n      description: \"ID of the poller\"\n      required: true\n      schema:\n        type: integer\n        format: int64\n        example: 5\n    GorgoneToken:\n      in: path\n      name: token\n      description: \"Gorgone Token\"\n      required: true\n      schema:\n        type: string\n    CommandName:\n      in: path\n      name: command_name\n      description: \"Gorgone Command\"\n      required: true\n      schema:\n        type: string\n  responses:\n    Unauthorized:\n      description: \"Unauthorized\"\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              code:\n                type: integer\n                format: int64\n                example: 401\n              message:\n                type: string\n    BadRequest:\n      description: |\n        Indicates that the server cannot or will not process the request due to something that is perceived to be\n        a client error (e.g., malformed request syntax, invalid request message framing)\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              code:\n                type: integer\n                format: int64\n                example: 400\n              message:\n                type: string\n                example: \"Property 'name' not found\"\n    Forbidden:\n      description: \"Forbidden\"\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              code:\n                type: integer\n                format: int64\n                example: 403\n              message:\n                type: string\n                example: \"You are not authorized to access this resource\"\n    NotFound:\n      description: \"Not Found\"\n    HostNotFound:\n      description: \"Not Found\"\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              code:\n                type: integer\n                format: int64\n                example: 404\n              message:\n                type: string\n                example: \"Host not found\"\n    NotFoundHostOrService:\n      description: \"Host or service not found\"\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              code:\n                type: integer\n                format: int64\n                example: 404\n              message:\n                type: string\n                example: \"Host 12 not found\"\n    InternalServerError:\n      description: \"Internal Server Error\"\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              code:\n                type: integer\n                format: int64\n                example: 500\n              message:\n                type: string\n                example: \"Internal Server Error\"\n  schemas:\n    AuthenticationRequest:\n      type: object\n      properties:\n        security:\n          type: object\n          properties:\n            credentials:\n              type: object\n              properties:\n                login:\n                  type: string\n                  description: \"Login\"\n                  example: \"admin\"\n                password:\n                  type: string\n                  description: \"Password\"\n                  example: \"centreon\"\n    LoginAuthenticationResponse:\n      type: object\n      properties:\n        contact:\n          type: object\n          properties:\n            id:\n              type: integer\n              description: \"Contact ID\"\n              example: 3\n            name:\n              type: string\n              description: \"Contact name\"\n              example: \"Admin\"\n            alias:\n              type: string\n              description: \"Contact alias\"\n              example: \"admin\"\n            email:\n              type: string\n              format: email\n              description: \"Contact email\"\n              example: \"admin@localhost\"\n            is_admin:\n              type: boolean\n              description: \"Indicates whether it is an admin user or not\"\n              example: true\n        security:\n          type: object\n          properties:\n            token:\n              type: string\n              description: \"Security authentication token\"\n              example: \"9ed937d3911d212eae59300ac6977352\"\n    LogoutAuthenticationResponse:\n      type: object\n      properties:\n        message:\n          type: string\n          example: \"Successful logout\"\n    Meta:\n      type: object\n      properties:\n        page:\n          type: integer\n          description: \"Number of the pagined page\"\n          example: 1\n        limit:\n          type: integer\n          description: \"Number of items per page\"\n          example: 10\n        search:\n          type: object\n          description: \"Search parameter passed to URL\"\n        sort_by:\n          type: object\n          description: \"Sort parameter passed to URL\"\n        total:\n          type: integer\n          description: \"Number of items found\"\n          example: 1\n    AuthenticationLocalProvider:\n      type: object\n      required:\n        - password_security_policy\n      properties:\n        password_security_policy:\n          type: object\n          required:\n            - password_min_length\n            - has_uppercase\n            - has_lowercase\n            - has_number\n            - has_special_character\n            - attempts\n            - blocking_duration\n            - password_expiration\n            - can_reuse_passwords\n            - delay_before_new_password\n            - contact_template_id\n          properties:\n            password_min_length:\n              description: minimum length of the password\n              type: integer\n              minimum: 8\n              maximum: 128\n              default: 12\n            has_uppercase:\n              description: if the password must contain uppercase character\n              type: boolean\n              default: true\n            has_lowercase:\n              description: if the password must contain lowercase character\n              type: boolean\n              default: true\n            has_number:\n              description: if the password must contain number\n              type: boolean\n              default: true\n            has_special_character:\n              description: if the password must contain special character\n              type: boolean\n              default: true\n            attempts:\n              description: login attempts before blocking\n              type: integer\n              nullable: true\n              minimum: 1\n              maximum: 10\n              default: 5\n            blocking_duration:\n              description: blocking duration in seconds before new login attempt\n              type: integer\n              nullable: true\n              maximum: 604800\n              default: 900\n            password_expiration:\n              description: password expiration policy\n              type: object\n              required:\n                - expiration_delay\n                - excluded_users\n              properties:\n                expiration_delay:\n                  description: password expiration delay in seconds\n                  type: integer\n                  nullable: true\n                  minimum: 604800\n                  maximum: 31557600\n                  default: 15552000\n                excluded_users:\n                  description: list of users without password expiration rule\n                  type: array\n                  items:\n                    type: string\n                    description: user login\n                    nullable: false\n                    example: admin\n                    minLength: 1\n                    maxLength: 255\n            can_reuse_passwords:\n              description: is allowed or not to reuse a password among 3 last\n              type: boolean\n              default: false\n            delay_before_new_password:\n              description: delay in seconds before a new password can be set\n              type: integer\n              nullable: true\n              minimum: 3600\n              maximum: 604800\n              default: 3600\n    AuthenticationWebSSOProvider:\n      type: object\n      required:\n        - is_active\n        - is_forced\n        - trusted_client_addresses\n        - blacklist_client_addresses\n        - login_header_attribute\n        - pattern_matching_login\n        - pattern_replace_login\n      properties:\n        is_active:\n          type: boolean\n          description: \"Indicates whether the provider is active or not\"\n          example: true\n        is_forced:\n          type: boolean\n          description: \"Indicates whether the provider is forced or not\"\n          example: false\n        trusted_client_addresses:\n          type: array\n          description: \"List of trusted client addresses\"\n          items:\n            type: string\n            description: \"Client address\"\n            example: \"127.0.0.1\"\n        login_header_attribute:\n          type: string\n          description: \"Login header attribute\"\n          example: \"HTTP_X_CENTREON_USER\"\n          nullable: true\n        pattern_matching_login:\n          type: string\n          description: \"Pattern matching login\"\n          example: \"^(.*)@(.*)$\"\n          nullable: true\n        pattern_replace_login:\n          type: string\n          description: \"Pattern replace login\"\n          example: \"^(.*)@(.*)$\"\n    AuthenticationOpenIdProvider:\n      type: object\n      required:\n        - is_active\n        - is_forced\n        - trusted_client_addresses\n        - blacklist_client_addresses\n        - base_url\n        - authorization_endpoint\n        - token_endpoint\n        - introspection_token_endpoint\n        - userinfo_endpoint\n        - endsession_endpoint\n        - connection_scopes\n        - login_claim\n        - client_id\n        - client_secret\n        - authentication_type\n        - verify_peer\n        - auto_import\n        - contact_template\n        - email_bind_attribute\n        - alias_bind_attribute\n        - fullname_bind_attribute\n      properties:\n        is_active:\n          type: boolean\n          description: \"Indicates whether the provider is active or not\"\n          example: true\n        is_forced:\n          type: boolean\n          description: \"Indicates whether the provider is forced or not\"\n          example: false\n        trusted_client_addresses:\n          type: array\n          description: \"List of trusted client addresses\"\n          items:\n            type: string\n            description: \"IP address\"\n            example: \"127.0.0.1\"\n        blacklist_client_addresses:\n          type: array\n          description: \"List of blacklisted client addresses\"\n          items:\n            type: string\n            description: \"IP address\"\n            example: \"127.0.0.1\"\n        base_url:\n          type: string\n          description: \"Base URL of the provider\"\n          example: \"https://localhost:8080\"\n          nullable: true\n        authorization_endpoint:\n          type: string\n          description: \"Authorization endpoint of the provider\"\n          example: \"/authorize\"\n          nullable: true\n        token_endpoint:\n          type: string\n          description: \"Token endpoint of the provider\"\n          example: \"/token\"\n          nullable: true\n        introspection_token_endpoint:\n          type: string\n          description: \"Introspection token endpoint of the provider\"\n          example: \"/introspect\"\n          nullable: true\n        userinfo_endpoint:\n          type: string\n          description: \"Userinfo endpoint of the provider\"\n          example: \"/userinfo\"\n          nullable: true\n        endsession_endpoint:\n          type: string\n          description: \"Endsession endpoint of the provider\"\n          example: \"/logout\"\n          nullable: true\n        connection_scopes:\n          type: array\n          description: \"List of scopes to request\"\n          items:\n            type: string\n            description: \"Scope\"\n            example: \"openid\"\n        login_claim:\n          type: string\n          description: \"Claim used to login\"\n          example: \"sub\"\n          nullable: true\n        client_id:\n          type: string\n          description: \"Client ID\"\n          example: \"client_id\"\n          nullable: true\n        client_secret:\n          type: string\n          description: \"Client secret\"\n          example: \"client_secret\"\n          nullable: true\n        authentication_type:\n          type: string\n          description: \"Authentication type\"\n          example: \"client_secret_post\"\n          nullable: true\n          enum:\n            - client_secret_post\n            - client_secret_basic\n        verify_peer:\n          type: boolean\n          description: \"Verify peer\"\n          example: true\n        auto_import:\n          type: boolean\n          description: \"Auto import user from external provider\"\n          example: true\n        contact_template:\n          type: object\n          properties:\n            id:\n              type: integer\n              description: \"Contact template ID\"\n              example: 1\n            name:\n              type: string\n              description: \"Contact template name\"\n              example: \"Default\"\n        email_bind_attribute:\n          type: string\n          description: \"Email bind attribute\"\n          example: \"email\"\n          nullable: true\n        alias_bind_attribute:\n          type: string\n          description: \"Alias bind attribute\"\n          example: \"preferred_username\"\n          nullable: true\n        fullname_bind_attribute:\n          type: string\n          description: \"Fullname bind attribute\"\n          example: \"name\"\n          nullable: true\n    Comment.Resources:\n      type: object\n      required: [ resources ]\n      properties:\n        resources:\n          type: array\n          items:\n            type: object\n            required: [ comment,id ]\n            properties:\n              type:\n                type: string\n                enum: [ host, service ]\n                description: \"Type of resource\"\n                example: \"service\"\n              id:\n                type: integer\n                description: \"Resource ID\"\n                example: 10\n              parent:\n                type: object\n                nullable: true\n                properties:\n                  id:\n                    type: integer\n                    description: \"Parent resource ID\"\n                    example: 17\n              date:\n                type: string\n                format: date-time\n                nullable: true\n                description: \"Date of the comment (ISO8601)\"\n              comment:\n                type: string\n                description: \"Comment to add to the monitored resource\"\n                example: \"Resource is not-OK but it is expected\"\n    Configuration.User:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: User id\n          example: 1\n        alias:\n          type: string\n          description: User alias / login\n          example: admin\n        email:\n          type: string\n          description: email address\n          example: root@localhost\n        is_admin:\n          type: boolean\n          description: is admin or not\n          example: true\n    Configuration.Host.Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: \"Host category id\"\n          example: 1\n        name:\n          type: string\n          description: \"Host category name\"\n          example: \"host-category\"\n        alias:\n          type: string\n          description: \"Host category alias\"\n          example: \"host-category\"\n        is_activated:\n          type: boolean\n          description: \"Indicates whether this host category is enabled or not\"\n          example: \"true\"\n        comments:\n          type: string\n          description: \"Host category comments\"\n          nullable: true\n    Configuration.Host.Severity:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: \"Host severity id\"\n          example: 1\n        name:\n          type: string\n          description: \"Host severity name\"\n          example: \"host-severity\"\n        alias:\n          type: string\n          description: \"Host severity alias\"\n          example: \"host-severity\"\n        level:\n          type: integer\n          description: \"Host severity priority\"\n          example: 2\n        icon:\n          $ref: '#/components/schemas/Media.Image'\n          description: \"Define the image associated with this severity\"\n        comments:\n          type: string\n          description: \"Host severity comments\"\n          nullable: true\n        is_activated:\n          type: boolean\n          description: \"Indicates whether this host severity is enabled or not\"\n    Configuration.Host.Template:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: \"Host template id\"\n          example: 1\n        name:\n          type: string\n          description: \"Host template name\"\n          example: \"generic-active-host\"\n        alias:\n          type: string\n          description: \"Host template alias\"\n          example: \"generic-active-host\"\n        display_name:\n          type: string\n          nullable: true\n          description: \"Host template display name\"\n          example: \"generic-active-host\"\n        address:\n          type: string\n          nullable: true\n          description: \"Address or DNS of the host template\"\n          example: \"127.0.0.1\"\n        comment:\n          type: string\n          nullable: true\n          description: \"Host template comments\"\n        is_activated:\n          type: boolean\n          description: \"Indicates whether the host template is activated or not\"\n        is_locked:\n          type: boolean\n          description: \"Indicates whether the configuration is locked for editing or not\"\n        active_checks_status:\n          type: integer\n          description: |\n            Indicates whether the active checks is enabled or not\n\n            * `0` - STATUS_DISABLED\n            * `1` - STATUS_ENABLE\n            * `2` - STATUS_DEFAULT (inheritance of his parent's value. If there is no parent, the values used will be that of the Centreon Engine)\n        passive_checks_status:\n          type: integer\n          description: |\n            Indicates whether the passive checks is enabled or not\n\n            * `0` - STATUS_DISABLED\n            * `1` - STATUS_ENABLE\n            * `2` - STATUS_DEFAULT (inheritance of his parent's value. If there is no parent, the values used will be that of the Centreon Engine)\n        max_check_attemps:\n          type: integer\n          nullable: true\n          description: \"Define the number of times that monitoring engine will retry the host check command if it returns any non-OK state\"\n        check_interval:\n          type: integer\n          nullable: true\n          description: |\n            Define the number of 'time units' between regularly scheduled checks of the host.\n\n            With the default time unit of 60s, this number will mean multiples of 1 minute.\n        retry_check_interval:\n          type: integer\n          nullable: true\n          description: |\n            Define the number of \"time units\" to wait before scheduling a re-check for this host after a non-UP state was detected.\n\n            With the default time unit of 60s, this number will mean multiples of 1 minute.\n\n            Once the host has been retried max_check_attempts times without a change in its status,\n            it will revert to being scheduled at its \"normal\" check interval rate.\n        notifications_status:\n          type: integer\n          description: |\n            Specify whether notifications for this host are enabled or not\n\n            * `0` - STATUS_DISABLED\n            * `1` - STATUS_ENABLE\n            * `2` - STATUS_DEFAULT (inheritance of his parent's value. If there is no parent, the values used will be that of the Centreon Engine)\n        notification_interval:\n          type: integer\n          nullable: true\n          description: |\n            Define the number of \"time units\" to wait before re-notifying a contact that this host is still down or unreachable.\n\n            With the default time unit of 60s, this number will mean multiples of 1 minute.\n\n            A value of 0 disables re-notifications of contacts about problems for this host - only one problem notification will be sent out.\n        first_notification_delay:\n          type: integer\n          nullable: true\n          description: |\n            Define the number of \"time units\" to wait before sending out the first problem notification when this host enters a non-UP state.\n\n            With the default time unit of 60s, this number will mean multiples of 1 minute.\n        recovery_notification_delay:\n          type: integer\n          nullable: true\n          description: |\n            Define the number of \"time units\" to wait before sending out the recovery notification when this host enters an UP state.\n\n            With the default time unit of 60s, this number will mean multiples of 1 minute.\n        notification_options:\n          type: integer\n          description: |\n            Define the states of the host for which notifications should be sent out.\n\n            The value is the sum of all the values of the selected options.\n\n            * `1` - DOWN\n            * `2` - UNREACHABLE\n            * `4` - RECOVERY\n            * `8` - FLAPPING\n            * `16` - DOWNTIME_SCHEDULED\n\n            example: A value equal to 5 corresponding to the selected options DOWN and RECOVERY\n          example: 5\n        stalking_options:\n          type: integer\n          description: |\n            This directive determines the host states for which stalking is enabled.\n\n            The value is the sum of all the values of the selected options.\n\n            * `1` - UP\n            * `2` - DOWN\n            * `4` - UNREACHABLE\n\n            example: A value equal to 3 corresponding to the selected options UP and DOWN\n          example: 3\n        snmp_community:\n          type: string\n          nullable: true\n          description: \"Community of the SNMP agent\"\n        snmp_version:\n          type: string\n          nullable: true\n          enum: [1, 2c, 3]\n          description: |\n            Version of the SNMP agent.\n\n            The value can be `1`, `2c` or `3`\n          example: \"2c\"\n        icon:\n          $ref: '#/components/schemas/Media.Image'\n          nullable: true\n          description: \"Define the image that should be associated with this template\"\n        alternative_icon:\n          type: string\n          nullable: true\n          maxLength: 200\n          description: \"Define an optional string that is used in the alternative description of the icon image\"\n        status_map_image:\n          $ref: '#/components/schemas/Media.Image'\n          nullable: true\n          description: \"Define an image that should be associated with this host template in the statusmap CGI in monitoring engine.\"\n        url_notes:\n          type: string\n          nullable: true\n          maxLength: 65535\n          description: \"Define an optional URL that can be used to provide more information about the host.\"\n        action_url:\n          type: string\n          nullable: true\n          maxLength: 65535\n          description: \"Define an optional URL that can be used to provide more actions to be performed on the host.\"\n        notes:\n          type: string\n          nullable: true\n          maxLength: 65535\n          description: \"Define an optional notes.\"\n        parents:\n          type: array\n          description: \"Host template parent ids\"\n          items:\n            type: integer\n    Configuration.Host.Group:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: \"Host group id\"\n          example: 1\n        name:\n          type: string\n          maxLength: 200\n          description: \"Host group name\"\n          example: \"MySQL-Servers\"\n        alias:\n          type: string\n          nullable: true\n          maxLength: 200\n          description: \"Host group alias\"\n          example: \"All MySQL Servers\"\n        notes:\n          type: string\n          nullable: true\n          maxLength: 255\n          description: \"Define an optional string of notes pertaining to the host group\"\n          example: \"my notes\"\n        notes_url:\n          type: string\n          nullable: true\n          maxLength: 255\n          description: \"Define an optional URL that can be used to provide more information about the host group\"\n          example: \"notes url\"\n        action_url:\n          type: string\n          nullable: true\n          maxLength: 255\n          description: \"Define an optional URL that can be used to provide more actions to be performed on the host group. You will see the link to the action URL in the host group details\"\n          example: \"action url\"\n        icon:\n          $ref: '#/components/schemas/Media.NullableImage'\n          description: \"Define the image that should be associated with this host group\"\n        icon_map:\n          $ref: '#/components/schemas/Media.NullableImage'\n          description: \"Define an image that should be associated with this host group in the statusmap CGI in monitoring engine\"\n        geo_coords:\n          type: string\n          nullable: true\n          maxLength: 32\n          description: \"Geographical coordinates use by Centreon Map module to position element on map\"\n          example: \"48.51,2.20\"\n        rrd:\n          type: integer\n          nullable: true\n          minimum: 1\n          maximum: 2147483648\n          description: \"RRD retention duration in days of all the services that are in this host group\"\n          example: 2\n        comment:\n          type: string\n          nullable: true\n          maxLength: 65535\n          description: \"Comments on this host group\"\n        is_activated:\n          type: boolean\n          description: \"Indicates whether the host group is activated or not\"\n    Configuration.ContactTemplate:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          description: \"Contact template id\"\n          example: 1\n        name:\n          type: string\n          description: \"Contact template name\"\n          example: \"Contact Template\"\n    Media.NullableImage:\n      type: object\n      nullable: true\n      properties:\n        id:\n          type: integer\n          description: \"Image id\"\n        name:\n          type: string\n          description: \"Image name\"\n          maxLength: 255\n        path:\n          type: string\n          maxLength: 255\n          description: \"Image path\"\n        comment:\n          type: string\n          nullable: true\n          maxLength: 65535\n          description: \"Image comments\"\n    Media.Image:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: \"Image id\"\n        name:\n          type: string\n          description: \"Image name\"\n          maxLength: 255\n        path:\n          type: string\n          maxLength: 255\n          description: \"Image path\"\n        comment:\n          type: string\n          nullable: true\n          maxLength: 65535\n          description: \"Image comments\"\n    User.Filter:\n      type: object\n      required: [name, criterias]\n      properties:\n        id:\n          type: integer\n          description: filter id\n          example: 1\n        name:\n          type: string\n          description: filter name\n          example: my filter 1\n        criterias:\n          type: array\n          description: list of filter criterias\n          items:\n            type: object\n            example:\n              type: text\n              name: field1\n              value: search value 1\n        order:\n          type: integer\n          description: filter order\n          example: 1\n    Configuration.MonitoringServerMain:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: \"ID of the server\"\n          example: 2\n        name:\n          type: string\n          description: \"Name of the server\"\n          example: \"Central\"\n        address:\n          type: string\n          description: \"IP address of the server\"\n          example: \"127.0.0.1\"\n        is_localhost:\n          type: boolean\n          description: \"Indicates whether it's the localhost server\"\n          example: true\n        is_default:\n          type: boolean\n          description: \"Indicates whether it's the default server\"\n          example: true\n        ssh_port:\n          type: integer\n          description: \"SSH port of the server\"\n          example: 22\n        last_restart:\n          type: string\n          format: date-time\n          description: \"Date of the last Engine restart request\"\n        engine_start_command:\n          type: string\n          description: \"System start command for Engine\"\n          example: \"service centengine start\"\n        engine_stop_command:\n          type: string\n          description: \"System stop command for Engine\"\n          example: \"service centengine stop\"\n        engine_restart_command:\n          type: string\n          description: \"System restart command for Engine\"\n          example: \"service centengine restart\"\n        engine_reload_command:\n          type: string\n          description: \"System reload command for Engine\"\n          example: \"service centengine reload\"\n        nagios_bin:\n          type: string\n          description: \"Full path of the Engine binary\"\n          example: \"/usr/sbin/centengine\"\n        nagiostats_bin:\n          type: string\n          description: \"Full path of the Engine statistics binary\"\n          example: \"/usr/sbin/centenginestats\"\n        broker_reload_command:\n          type: string\n          description: \"System reload command for Broker\"\n          example: \"service cbd reload\"\n        centreonbroker_cfg_path:\n          type: string\n          description: \"Full path of the Broker configuration\"\n          example: \"/etc/centreon-broker\"\n        centreonbroker_module_path:\n          type: string\n          description: \"Full path of the Broker module's libraries\"\n          example: \"/usr/share/centreon/lib/centreon-broker\"\n        centreonbroker_logs_path:\n          type: string\n          description: \"Full path of the Broker logs\"\n          example: null\n        centreonconnector_path:\n          type: string\n          description: \"Full path of the Engine connectors\"\n          example: \"/usr/lib64/centreon-connector\"\n        init_script_centreontrapd:\n          type: string\n          description: \"System name of Centreontrapd daemon\"\n          example: \"centreontrapd\"\n        snmp_trapd_path_conf:\n          type: string\n          description: \"Full path of the Centreontrapd daemon configuration\"\n          example: \"/etc/snmp/centreon_traps/\"\n        remote_id:\n          type: integer\n          description: \"ID of the master Remote Server linked to the server\"\n          example: null\n        remote_server_use_as_proxy:\n          type: boolean\n          description: \"Indicates whether Remote Servers are used as SSH proxies\"\n          example: true\n        is_updated:\n          type: boolean\n          description: \"Indicates whether the monitoring configuration has changed since last restart\"\n          example: true\n        is_activate:\n          type: boolean\n          description: \"Indicates whether the server configuration is activated\"\n          example: true\n    Configuration.MetaServices:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: \"ID of the meta service\"\n          example: 2\n        name:\n          type: string\n          description: \"Name of the meta service\"\n          example: \"TOTAL_FIREWALL_CONNECTIONS\"\n        output:\n          type: string\n          description: \"Output configured for the meta service\"\n          example: \"Number of connections: %d\"\n        calulation_type:\n          type: string\n          description: |\n            Function to be applied to calculate the meta service status.\n             * average\n             * minimum\n             * maximum\n             * sum\n          example: \"average\"\n        data_source_type:\n          type: string\n          description: |\n            Data source type of the meta service.\n             * gauge\n             * counter\n             * derive\n             * absolute\n          default: \"gauge\"\n          example: \"gauge\"\n        meta_select_mode:\n          type: integer\n          description: |\n            Selection mode for services to be considered for this meta service.\n              * 1 - Service list mod, mark selected services in the options on meta service list.\n              * 2 - SQL matching mod, specify a search string to be used in an SQL query\n          default: 1\n          example: 2\n        regexp_string:\n          type: string\n          description: \"Search string to be used in a SQL LIKE query for service selection\"\n          example: \"%service_name%\"\n        metric:\n          type: string\n          description: \"Metric name used to measure meta service status\"\n          example: \"used\"\n        warning:\n          type: string\n          description: \"Absolute value for warning level\"\n          example: \"80\"\n        critical:\n          type: string\n          description: \"Absolute value for critical level\"\n          example: \"90\"\n        is_activated:\n          type: boolean\n          description: \"Indicates whether the meta service configuration is activated\"\n          example: true\n    Monitoring.MetaServiceMetric:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: \"ID of the meta service metric\"\n          example: 2\n        name:\n          type: string\n          description: \"Name of the meta service metric\"\n          example: \"rta\"\n        unitName:\n          type: string\n          description: \"Name of the meta service metric unit\"\n          example: \"ms\"\n        currentValue:\n          type: number\n          description: \"Current value of the metric in the realtime\"\n          example: 0.250\n        resource:\n          $ref: '#/components/schemas/Monitoring.ResourceMain'\n    Monitoring.Servers:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: \"ID of the server\"\n          example: 2\n        name:\n          type: string\n          description: \"Name of the server\"\n          example: \"Central\"\n        address:\n          type: string\n          description: \"IP address of the server\"\n          example: \"127.0.0.1\"\n          nullable: true\n        description:\n          type: string\n          description: \"Description of the server\"\n          example: \"Central server\"\n          nullable: true\n        isRunning:\n          type: boolean\n          description: \"Indicates if the server is running or not\"\n          example: true\n        lastAlive:\n          type: integer\n          description: \"Timestamp of last time server was alive\"\n          nullable: true\n        version:\n          type: string\n          description: \"Version of the server (centreon-engine)\"\n          example: \"20.10.0\"\n          nullable: true\n    Acknowledgement.Resource:\n      type: object\n      properties:\n        comment:\n          type: string\n          description: \"Short description of the acknowledgement\"\n          example: \"Acknowledged by admin\"\n        with_services:\n          type: boolean\n          description: \"Indicates whether or not we should acknowledge the host-related services.\"\n          example: true\n          default: true\n        is_notify_contacts:\n          type: boolean\n          description: \"Indicates whether or not notification is sent to the contacts linked to the host or service.\"\n          example: false\n          default: true\n        is_persistent_comment:\n          type: boolean\n          description: \"Indicates if the acknowledgment will be maintained in case a restart of the scheduler occurs.\"\n          example: false\n          default: true\n        is_sticky:\n          type: boolean\n          description: \"Indicates if the acknowledgment will be maintained in case of non-OK status change.\"\n          example: false\n          default: true\n    Disacknowledgement.Resource:\n      type: object\n      properties:\n        with_services:\n          type: boolean\n          description: \"Indicates whether we should disacknowledge the host-related services\"\n          example: true\n    Acknowledgement.Bulk:\n      type: object\n      properties:\n        acknowledgement:\n          $ref: '#/components/schemas/Acknowledgement.Resource'\n        resources:\n          type: array\n          items:\n            allOf:\n              - $ref: '#/components/schemas/Monitoring.Resource.Disacknowledge.Host'\n              - $ref: '#/components/schemas/Monitoring.Resource.Disacknowledge.Service'\n    Acknowledgement.Disacknowledge.Bulk:\n      type: object\n      properties:\n        disacknowledgement:\n          $ref: '#/components/schemas/Disacknowledgement.Resource'\n        resources:\n          type: array\n          items:\n            allOf:\n              - $ref: '#/components/schemas/Monitoring.Resource.Disacknowledge.Host'\n              - $ref: '#/components/schemas/Monitoring.Resource.Disacknowledge.Service'\n    Acknowledgement.Host:\n      type: object\n      nullable: true\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: \"ID of the acknowledgement\"\n          example: 34\n        author_id:\n          type: integer\n          format: int64\n          description: \"ID of the contact who requested an acknowledgement\"\n          example: 3\n        author_name:\n          type: string\n          description: \"Name of the contact who requested an acknowledgement\"\n          example: \"admin\"\n        comment:\n          type: string\n          description: \"Short description of the acknowledgement\"\n          example: \"Acknowledged by admin\"\n        deletion_time:\n          type: string\n          format: date-time\n          nullable: true\n          description: \"Date of the request for cancellation of the acknowledgement (ISO8601)\"\n        entry_time:\n          type: string\n          format: date-time\n          description: \"Date of the request for acknowledgement (ISO8601)\"\n        host_id:\n          type: integer\n          format: int64\n          description: \"ID of the host\"\n          example: 12\n        poller_id:\n          type: integer\n          format: int64\n          description: \"ID of the poller\"\n          example: 1\n        is_notify_contacts:\n          type: boolean\n          description: \"Indicates whether notification is sent to the contacts linked to the host or service\"\n          example: false\n        is_persistent_comment:\n          type: boolean\n          description: \"Indicates whether acknowledgement is maintained in the case of a restart of the scheduler\"\n          example: true\n        is_sticky:\n          type: boolean\n          description: \"Indicates whether acknowledgement is maintained in the case of a change of status\"\n          example: true\n        state:\n          type: integer\n          description: |\n            State type\n             * `1` - WARNING\n             * `2` - CRITICAL\n             * `3` - UNKNOWN\n          example: 1\n    Acknowledgement.Service:\n      nullable: true\n      allOf:\n        - $ref: '#/components/schemas/Acknowledgement.Host'\n        - type: object\n          nullable: true\n          properties:\n            service_id:\n              type: integer\n              format: int64\n              description: \"ID of the service\"\n              example: 5\n    Acknowledgement.Host.Add:\n      allOf:\n        - $ref: '#/components/schemas/Acknowledgement.Service.Add'\n        - type: object\n          properties:\n            with_services:\n              type: boolean\n              description: \"Indicates whether we should add the downtime on the host-related services\"\n              example: true\n    Acknowledgement.Hosts.Add:\n      type: array\n      items:\n        allOf:\n          - $ref: '#/components/schemas/Acknowledgement.Host.Add'\n          - $ref: '#/components/schemas/Bulk.Resource.Id'\n    Acknowledgement.Service.Add:\n      type: object\n      properties:\n        comment:\n          type: string\n          description: \"Short description of the acknowledgement\"\n          example: \"Acknowledged by admin\"\n        is_notify_contacts:\n          type: boolean\n          description: \"Indicates whether notification is sent to the contacts linked to the host or service\"\n          example: false\n        is_persistent_comment:\n          type: boolean\n          description: \"Indicates whether acknowledgement is maintained in the case of a restart of the scheduler\"\n          example: true\n        is_sticky:\n          type: boolean\n          description: \"Indicates whether acknowledgement is maintained in the case of a change of status\"\n          example: true\n    Acknowledgement.Services.Add:\n      type: array\n      items:\n        allOf:\n          - $ref: '#/components/schemas/Acknowledgement.Service.Add'\n          - $ref: '#/components/schemas/Bulk.Resource.Id'\n    Downtime.Host.Add:\n      allOf:\n        - $ref: '#/components/schemas/Downtime.Service.Add'\n        - type: object\n          properties:\n            with_services:\n              type: boolean\n              description: \"Indicates whether we should add the downtime on the host-related services\"\n              example: true\n    Downtime.Hosts.Add:\n      type: array\n      items:\n        allOf:\n          - $ref: '#/components/schemas/Downtime.Host.Add'\n          - $ref: '#/components/schemas/Bulk.Resource.Id'\n    Downtime.Service.Add:\n      type: object\n      properties:\n        start_time:\n          type: string\n          format: date-time\n          description: \"Scheduled start date of the downtime (ISO8601)\"\n        end_time:\n          type: string\n          format: date-time\n          description: \"Scheduled end date of the downtime (ISO8601)\"\n        is_fixed:\n          type: boolean\n          description: \"Indicates whether the downtime is fixed\"\n          example: true\n        duration:\n          type: integer\n          description: \"Downtime duration in seconds\"\n          example: 3600\n        author_id:\n          type: integer\n          description: \"ID of the contact who requested the downtime\"\n          example: 3\n        comment:\n          type: string\n          description: \"Comment of the downtime\"\n          example: \"Downtime set by admin\"\n    Downtime.Services.Add:\n      type: array\n      items:\n        allOf:\n          - $ref: '#/components/schemas/Downtime.Service.Add'\n          - $ref: '#/components/schemas/Bulk.Resource.Id'\n    Downtime.Host:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: \"ID of the downtime\"\n          example: 329\n        author_id:\n          type: integer\n          description: \"ID of the contact who requested the downtime\"\n          example: 3\n        author_name:\n          type: string\n          description: \"Name of the contact who requested the downtime\"\n          example: \"admin\"\n        host_id:\n          type: integer\n          description: \"ID of the host on which the downtime is set\"\n          example: 12\n        comment:\n          type: string\n          description: \"Comment of the downtime\"\n          example: \"Downtime set by admin\"\n        duration:\n          type: integer\n          description: \"Downtime duration in seconds\"\n          example: 7200\n        entry_time:\n          type: string\n          format: date-time\n          description: \"Date of the request to create the downtime (ISO8601)\"\n        start_time:\n          type: string\n          format: date-time\n          description: \"Scheduled start date of the downtime (ISO8601)\"\n        end_time:\n          type: string\n          format: date-time\n          description: \"Scheduled end date of the downtime (ISO8601)\"\n        deletion_time:\n          type: string\n          format: date-time\n          nullable: true\n          description: \"Date of cancellation of downtime (ISO8601)\"\n          example: null\n        actual_start_time:\n          type: string\n          format: date-time\n          description: \"Start date of the downtime (ISO8601)\"\n        actual_end_time:\n          type: string\n          format: date-time\n          description: \"End date of the downtime (ISO8601)\"\n          example: null\n        is_started:\n          type: boolean\n          description: \"Indicates whether the downtime has started\"\n          example: true\n        is_cancelled:\n          type: boolean\n          description: \"Indicates whether the downtime has been cancelled\"\n          example: false\n        is_fixed:\n          type: boolean\n          description: \"Indicates whether the downtime is fixed\"\n          example: true\n    Downtime.Service:\n      allOf:\n        - $ref: '#/components/schemas/Downtime.Host'\n        - type: object\n          properties:\n            service_id:\n              type: integer\n              description: \"ID of the service on which the downtime is set\"\n              example : 5\n    Downtime.Resource:\n      type: object\n      properties:\n        comment:\n          type: string\n          description: \"Short description of the downtime\"\n          example: \"Downtime set by admin\"\n        with_services:\n          type: boolean\n          description: \"Indicates whether we should add the downtime on the host-related services\"\n          example: true\n        is_fixed:\n          type: boolean\n          description: \"Indicates whether the downtime is fixed\"\n          example: true\n        duration:\n          type: integer\n          description: \"Downtime duration in seconds\"\n          example: 7200\n        start_time:\n          type: string\n          format: date-time\n          description: \"Scheduled start date of the downtime (ISO8601)\"\n        end_time:\n          type: string\n          format: date-time\n          description: \"Scheduled end date of the downtime (ISO8601)\"\n    Downtime.Bulk:\n      type: object\n      properties:\n        downtime:\n          $ref: '#/components/schemas/Downtime.Resource'\n        resources:\n          type: array\n          items:\n            allOf:\n              - $ref: '#/components/schemas/Monitoring.Resource.Disacknowledge.Host'\n              - $ref: '#/components/schemas/Monitoring.Resource.Disacknowledge.Service'\n    Check.Host:\n      type: object\n      properties:\n        is_forced:\n          type: boolean\n          description: \"Indicates whether the check is forced (do not take into account the check timeperiod)\"\n          example: true\n    Check.Hosts:\n      type: array\n      items:\n        allOf:\n          - $ref: '#/components/schemas/Check.Host'\n          - $ref: '#/components/schemas/Bulk.Resource.Id'\n    Check.Service:\n      allOf:\n        - $ref: '#/components/schemas/Check.Host'\n    Check.Services:\n      type: array\n      items:\n        allOf:\n          - $ref: '#/components/schemas/Check.Service'\n          - $ref: '#/components/schemas/Bulk.Resource.Id'\n    Check.Resources:\n      type: object\n      properties:\n        resources:\n          type: array\n          items:\n            type: object\n            properties:\n              type:\n                type: string\n                enum: [host, service, metaservice]\n                description: \"Type of resource\"\n                example: \"service\"\n              id:\n                type: integer\n                description: \"Resource ID\"\n                example: 10\n              parent:\n                type: object\n                nullable: true\n                properties:\n                  id:\n                    type: integer\n                    description: \"Parent resource ID\"\n                    example: 17\n    SubmitResult.Host:\n      type: object\n      required: [status]\n      properties:\n        status:\n          type: integer\n          enum: [0, 1, 2]\n          description: |\n            Host status code that can be submitted\n            * `0` - UP\n            * `1` - DOWN\n            * `2` - UNREACHABLE\n          example: 1\n        output:\n          type: string\n          nullable: true\n          description: \"Output result of the check sent\"\n          example: \"CRITICAL: Connection lost\"\n        performance_data:\n          type: string\n          nullable: true\n          description: \"Performance data result of the check sent\"\n          example: \"'nbproc'=0;;1:1;0;\"\n    SubmitResult.Service:\n      type: object\n      required: [status]\n      properties:\n        status:\n          type: string\n          enum: [0, 1, 2, 3]\n          description: |\n            Service status code that can be submitted\n            * `0` - OK\n            * `1` - WARNING\n            * `2` - CRITICAL\n            * `3` - UNKNOWN\n          example: 2\n        output:\n          type: string\n          nullable: true\n          description: \"Output result of the check sent\"\n          example: \"CRITICAL: Memory exceeded \"\n        performance_data:\n          type: string\n          nullable: true\n          description: \"Performance data result of the check sent\"\n          example: \"'used'=453849088B;;;0;1927262208\"\n    SubmitResult.Resources:\n      type: object\n      required: [resources]\n      properties:\n        resources:\n          type: array\n          items:\n            type: object\n            required: [status,id]\n            properties:\n              type:\n                type: string\n                enum: [host, service, metaservice]\n                description: \"Type of resource\"\n                example: \"service\"\n              id:\n                type: integer\n                description: \"Resource ID\"\n                example: 10\n              parent:\n                type: object\n                nullable: true\n                properties:\n                  id:\n                    type: integer\n                    description: \"Parent resource ID\"\n                    example: 17\n              status:\n                type: integer\n                enum: [0, 1, 2, 3]\n                description: |\n                  Resource status code that can be submitted\n                  * `0` - OK or UP\n                  * `1` - WARNING or DOWN\n                  * `2` - CRITICAL or UNREACHABLE\n                  * `3` - UNKNOWN\n                example: 2\n              output:\n                type: string\n                nullable: true\n                description: \"Output result of the check sent\"\n                example: \"CRITICAL: Memory exceeded \"\n              performance_data:\n                type: string\n                nullable: true\n                description: \"Performance data result of the check sent\"\n                example: \"'used'=453849088B;;;0;1927262208\"\n    Monitoring.Resource.Disacknowledge.Host:\n      type: object\n      properties:\n        type:\n          type: string\n          description: \"Type of the resource\"\n          example: \"service|host\"\n        id:\n          type: integer\n          format: int32\n          description: \"ID of the resource\"\n          example: 12\n    Monitoring.Resource.Disacknowledge.Service:\n      type: object\n      properties:\n        type:\n          type: string\n          description: \"Type of the resource\"\n          example: \"service|host\"\n        id:\n          type: integer\n          format: int32\n          description: \"ID of the resource\"\n          example: 12\n        parent:\n          type: object\n          properties:\n            id:\n              type: integer\n              format: int64\n              description: \"ID of the parent resource\"\n              example: 12\n    Monitoring.ResourceMain:\n      type: object\n      properties:\n        type:\n          type: string\n          description: \"Type of the resource\"\n          example: \"service|host\"\n        short_type:\n          type: string\n          description: \"Short name of the resource type\"\n          example: \"s|h\"\n        id:\n          type: integer\n          format: int32\n          description: \"ID of the resource\"\n          example: 12\n        name:\n          type: string\n          description: \"Resource name\"\n          example: \"Ping\"\n        alias:\n          type: string\n          nullable: true\n          description: \"Resource alias\"\n          example: null\n        fqdn:\n          type: string\n          nullable: true\n          description: \"Resource fqdn\"\n          example: null\n        links:\n          $ref: '#/components/schemas/Monitoring.ResourceLinks'\n        monitoring_server_name:\n          type: string\n          description: \"Monitoring Server from which is monitored the Resource\"\n          example: \"Central\"\n        icon:\n          type: object\n          nullable: true\n          properties:\n            id:\n              type: integer\n              format: int32\n              description: \"ID of the image\"\n              example: 12\n            name:\n              type: string\n              description: \"Name of the icon\"\n              example: \"memory\"\n            url:\n              type: string\n              description: \"Url of the icon\"\n              example: \"/media/memory.png\"\n        parent:\n          type: object\n          nullable: true\n          properties:\n            type:\n              type: string\n              description: \"Type of the resource\"\n              example: \"service|host\"\n            short_type:\n              type: string\n              description: \"Short name of the resource type\"\n              example: \"s|h\"\n            id:\n              type: integer\n              format: int64\n              description: \"ID of the parent resource\"\n              example: 12\n            name:\n              type: string\n              description: \"Parent resource name\"\n              example: \"Central\"\n            alias:\n              type: string\n              nullable: true\n              description: \"Parent resource alias\"\n              example: \"Host\"\n            fqdn:\n              type: string\n              description: \"Parent resource fqdn\"\n              example: \"127.0.0.1\"\n            links:\n              $ref: '#/components/schemas/Monitoring.ResourceLinks'\n            status:\n              type: object\n              properties:\n                code:\n                  type: integer\n                  description: |\n                    resource status code\n                    * `0` - UP or OK\n                    * `1` - DOWN or WARNING\n                    * `2` - UNREACHABLE or CRITICAL\n                    * `3` - UNKNOWN\n                    * `4` - PENDING\n                  example: 0\n                name:\n                  type: string\n                  description: |\n                    resource status name\n                    * UP\n                    * DOWN\n                    * UNREACHABLE\n                    * PENDING\n                    * OK\n                    * WARNING\n                    * CRITICAL\n                    * UNKNOWN\n                  example: \"UP\"\n                severity_code:\n                  type: integer\n                  description: |\n                    resource status name\n                    * `1` - DOWN or CRITICAL\n                    * `2` - WARNING\n                    * `3` - UNKNOWN or UNREACHABLE\n                    * `4` - PENDING\n                    * `5` - UP or OK\n                  example: 1\n            icon:\n              type: object\n              nullable: true\n              properties:\n                name:\n                  type: string\n                  description: \"Name of the icon\"\n                  example: \"linux\"\n                url:\n                  type: string\n                  description: \"Url of the icon\"\n                  example: \"/img/media/topology/firewall.png\"\n        status:\n          $ref: '#/components/schemas/Monitoring.ResourceStatus'\n        in_downtime:\n          type: boolean\n          description: \"Indicates whether resource is in downtime\"\n          example: false\n        acknowledged:\n          type: boolean\n          description: \"Indicates whether resource is acknowledged\"\n          example: false\n        severity_level:\n          type: integer\n          nullable: true\n          description: \"level of the severity\"\n          example: 1\n        duration:\n          type: string\n          nullable: true\n          description: \"Duration since last status change\"\n          example: \"2h 3m\"\n        last_status_change:\n          type: string\n          format: date-time\n          nullable: true\n          description: \"Date of the last status change (ISO8601)\"\n        last_time_with_no_issue:\n          type: string\n          format: date-time\n          nullable: true\n          description: \"Date of the last status change (ISO8601)\"\n        tries:\n          type: string\n          nullable: true\n          description: \"Number of check tries\"\n          example: \"3/3 (H)\"\n        last_check:\n          type: string\n          nullable: true\n          description: \"Duration since last check\"\n          example: \"1h 45m\"\n        information:\n          type: string\n          description: \"Output of the resource\"\n          example: \"OK - Ping is ok\"\n        active_checks:\n          type: boolean\n          nullable: true\n          description: \"Indicates whether active checks are enabled\"\n          example: true\n        passive_checks:\n          type: boolean\n          nullable: true\n          description: \"Indicates whether passive checks are enabled\"\n          example: true\n    Monitoring.ResourceLinks:\n      type: object\n      properties:\n        uris:\n          type: object\n          properties:\n            configuration:\n              type: string\n              nullable: true\n              description: \"configuration uri\"\n              example: \"/centreon/main.php?p=60101\u0026o=c\u0026host_id=11\"\n            logs:\n              type: string\n              nullable: true\n              description: \"logs uri\"\n              example: \"/centreon/main.php?p=20301\u0026h=11\"\n            reporting:\n              type: string\n              nullable: true\n              description: \"reporting uri\"\n              example: \"/centreon/main.php?p=307\u0026host=11\"\n        endpoints:\n          type: object\n          properties:\n            details:\n              type: string\n              nullable: true\n              description: \"resource details endpoint\"\n              example: \"/centreon/api/latest/monitoring/resources/hosts/11\"\n            timeline:\n              type: string\n              nullable: true\n              description: \"resource timeline endpoint\"\n              example: \"/centreon/api/latest/monitoring/hosts/11/timeline\"\n            status_graph:\n              type: string\n              nullable: true\n              description: \"resource status graph endpoint\"\n              example: null\n            performance_graph:\n              type: string\n              nullable: true\n              description: \"resource performance graph endpoint\"\n              example: null\n            acknowledgement:\n              type: string\n              nullable: true\n              description: \"current resource acknowledgement endpoint\"\n              example: \"/centreon/api/latest/monitoring/hosts/11/acknowledgements?limit=1\"\n            downtime:\n              type: string\n              nullable: true\n              description: \"current resource downtimes endpoint\"\n              example: \"/centreon/api/latest/monitoring/hosts/11/downtimes?search=%7B%22%24and%22:%5B%7B%22start_time%22:%7B%22%24lt%22:1599655905%7D,%22end_time%22:%7B%22%24gt%22:1599655905%7D,%220%22:%7B%22%24or%22:%7B%22is_cancelled%22:%7B%22%24neq%22:1%7D,%22deletion_time%22:%7B%22%24gt%22:1599655905%7D%7D%7D%7D%5D%7D\"\n            notification_policy:\n              type: string\n              nullable: true\n              description: \"current resource notification policy endpoint\"\n              example: \"/centreon/api/latest/configurations/hosts/11/notification-policy\"\n        externals:\n          type: object\n          properties:\n            action_url:\n              type: string\n              nullable: true\n              description: \"URL that can be used to provide more actions to be performed on the resource\"\n              example: \"http://mediawiki/resource/name\"\n            notes:\n              $ref: '#/components/schemas/Monitoring.Notes'\n    Monitoring.Notes:\n      type: object\n      nullable: true\n      properties:\n        url:\n          type: string\n          nullable: true\n          description: \"URL that can be used to provide more information on the resource\"\n          example: \"http://mediawiki/resource/name\"\n        label:\n          type: string\n          nullable: true\n          description: \"Note that can be used to describe the note url\"\n          example: \"How to turn back on the server\"\n    Monitoring.ResourceStatus:\n      type: object\n      properties:\n        code:\n          type: integer\n          description: |\n            resource status code\n            * `0` - UP or OK\n            * `1` - DOWN or WARNING\n            * `2` - UNREACHABLE or CRITICAL\n            * `3` - UNKNOWN\n            * `4` - PENDING\n          example: 0\n        name:\n          type: string\n          description: |\n            resource status name\n            * UP\n            * DOWN\n            * UNREACHABLE\n            * PENDING\n            * OK\n            * WARNING\n            * CRITICAL\n            * UNKNOWN\n          example: \"UP\"\n        severity_code:\n          type: integer\n          description: |\n            resource status name\n            * `1` - DOWN or CRITICAL\n            * `2` - WARNING\n            * `3` - UNKNOWN or UNREACHABLE\n            * `4` - PENDING\n            * `5` - UP or OK\n          example: 1\n    Monitoring.HostGroup:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: \"ID of the host group\"\n          example: 28\n        name:\n          type: string\n          description: \"Name of the host group\"\n          example: \"All\"\n        host:\n          allOf:\n            - $ref: '#/components/schemas/Monitoring.HostMin'\n            - $ref: '#/components/schemas/Monitoring.HostWithService'\n    Monitoring.HostMin:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: \"ID of the host\"\n          example: 12\n        alias:\n          type: string\n          description: \"Host alias\"\n          example: \"Central\"\n        display_name:\n          type: string\n          description: \"Host display name\"\n          example: \"Central\"\n        name:\n          type: string\n          description: \"Host name\"\n          example: \"Central\"\n        state:\n          type: integer\n          description: |\n            Host state\n             * `0` - UP\n             * `1` - DOWN\n             * `2` - UNREACHABLE\n             * `4` - PENDING\n          example: 0\n    Monitoring.HostFull:\n      allOf:\n        - $ref: '#/components/schemas/Monitoring.HostMain'\n        - type: object\n          properties:\n            active_checks:\n              type: boolean\n              description: \"Indicates whether active checks are enabled for the host\"\n              example: true\n            check_command:\n              type: string\n              description: \"Command name used for active checks\"\n              example: \"base_host_alive\"\n            check_interval:\n              type: number\n              format: float\n              description: \"Interval between two checks\"\n              example: 5.0\n            check_period:\n              type: string\n              description: \"Name of the check period\"\n              example: \"24x7\"\n            check_type:\n              type: integer\n              description: |\n                Type of the last check\n                  * `0` - Active\n                  * `1` - Passive\n              example: 0\n            last_hard_state:\n              type: string\n              nullable: true\n              format: date-time\n              description: \"Date of the last hard state (ISO8601)\"\n            last_notification:\n              type: string\n              nullable: true\n              format: date-time\n              description: \"Date of the last notification (ISO8601)\"\n            latency:\n              type: number\n              format: float\n              description: \"Time difference between scheduled check time and actual check time\"\n              example: 0.005\n            next_check:\n              type: string\n              nullable: true\n              format: date-time\n              description: \"Scheduled date for the next check (ISO8601)\"\n            next_host_notification:\n              type: integer\n              description: ...\n            notification_interval:\n              type: number\n              format: float\n              description: \"Interval of periodic notification or `0` if its off\"\n              example: 30.0\n            notification_number:\n              type: integer\n              description: \"Current notification number\"\n              example: 3\n            notify:\n              type: boolean\n              description: \"Indicates whether notifications of the host are enabled\"\n              example: true\n            notify_on_down:\n              type: boolean\n              description: \"Indicates whether notifications are sent when the host is down\"\n              example: true\n            notify_on_downtime:\n              type: boolean\n              description: \"Indicates whether a notification is sent when the host is put in a downtime period\"\n              example: false\n            notify_on_flapping:\n              type: boolean\n              description: \"Indicates whether notifications are sent when the host is flapping\"\n              example: false\n            notify_on_recovery:\n              type: boolean\n              description: \"Indicates whether notifications are sent when the host has recovered\"\n              example: true\n            notify_on_unreachable:\n              type: boolean\n              description: \"Indicates whether notifications are sent when the host is unreachable\"\n              example: false\n            flapping:\n              type: boolean\n              description: \"Is the host flapping or not\"\n              example: false\n            percent_state_change:\n              type: number\n              format: float\n              description: \"Percent state change since last check\"\n              example: 3.5\n            downtimes:\n              type: array\n              items:\n                $ref: '#/components/schemas/Downtime.Host'\n            acknowledgement:\n              type: object\n              properties:\n                host:\n                  allOf:\n                    - $ref: '#/components/schemas/Acknowledgement.Host'\n    Monitoring.HostMain:\n      allOf:\n        - $ref: '#/components/schemas/Monitoring.HostMin'\n        - $ref: '#/components/schemas/Monitoring.HostWithService'\n        - type: object\n          properties:\n            poller_id:\n              type: integer\n              format: int64\n              description: \"ID of the poller to which the host is linked\"\n              example: 1\n            acknowledged:\n              type: boolean\n              description: \"Indicates whether the last status was acknowledged\"\n              example: false\n            address_ip:\n              type: string\n              format: ipv4\n              description: \"IP address of the host\"\n              example: \"127.0.0.1\"\n            check_attempt:\n              type: integer\n              description: \"Number of the current check attempt\"\n              example: 1\n            checked:\n              type: boolean\n              description: \"Indicates whether the host is checked\"\n              example: true\n            execution_time:\n              type: number\n              format: float\n              nullable: true\n              description: \"Time duration to check the host\"\n              example: 0.070906\n            icon_image:\n              type: string\n              description: \"File of the icon used to represent this host\"\n              example: \"ppm/operatingsystems-linux-snmp-linux-128.png\"\n            icon_image_alt:\n              type: string\n              description: \"Alternative text of the icon representing the host\"\n              example: \"\"\n            last_check:\n              type: string\n              format: date-time\n              nullable: true\n              description: \"Date of last check (ISO8601)\"\n            last_hard_state_change:\n              type: string\n              format: date-time\n              nullable: true\n              description: \"Date of the last hard state change (ISO8601)\"\n            last_state_change:\n              type: string\n              format: date-time\n              nullable: true\n              description: \"Date of the last state change (soft or hard) (ISO8601)\"\n            last_time_down:\n              type: string\n              format: date-time\n              nullable: true\n              description: \"The last time the host was DOWN (ISO8601)\"\n            last_time_unreachable:\n              type: string\n              format: date-time\n              nullable: true\n              description: \"The last time the host was UNREACHABLE (ISO8601)\"\n            last_time_up:\n              type: string\n              format: date-time\n              nullable: true\n              description: \"The last time the host was UP (ISO8601)\"\n            last_update:\n              type: string\n              format: date-time\n              nullable: true\n              description: \"Date of last update (ISO8601)\"\n            max_check_attempts:\n              type: integer\n              format: int64\n              description: \"Max check attempts for active host check (before changing the state type to HARD)\"\n              example: 3\n            output:\n              type: string\n              description: \"Output of the last host check\"\n              example: \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\"\n            passive_checks:\n              type: boolean\n              description: \"Indicates whether the check script is passive or not\"\n              example: false\n            state_type:\n              type: integer\n              description: |\n                State type\n                 * `0` - SOFT\n                 * `1` - HARD\n              example: 0\n            timezone:\n              type: string\n              description: Timezone used for dates\n              example: ':Europe/Paris'\n            scheduled_downtime_depth:\n              type: integer\n              description: \"Is there scheduled downtime for host or not (1 or 0)\"\n              example: 0\n            criticality:\n              type: integer\n              nullable: true\n              description: \"Host criticality level (for display purposes)\"\n              example: 10\n    Monitoring.HostWithService:\n      type: object\n      properties:\n        services:\n          type: array\n          items:\n            $ref: '#/components/schemas/Monitoring.ServiceMin'\n    Monitoring.ServiceGroup:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: \"ID of the service group\"\n          example: 13\n        name:\n          type: string\n          description: \"Name of the service group\"\n          example: \"MySG\"\n    Monitoring.ServiceMin:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: \"ID of the service\"\n          example: 5\n        description:\n          type: string\n          description: \"Service description\"\n          example: \"Ping\"\n        display_name:\n          type: string\n          description: \"Service display name\"\n          example: \"Ping\"\n        state:\n          type: integer\n          description: |\n            The current state of the service\n              * `0` - OK\n              * `1` - WARNING\n              * `2` - CRITICAL\n              * `3` - UNKNOWN\n              * `4` - PENDING\n          example: 0\n    Monitoring.ServiceMain:\n      allOf:\n        - $ref: '#/components/schemas/Monitoring.ServiceMin'\n        - type: object\n          properties:\n            check_attempt:\n              type: string\n              description: \"Number of the current check attempt\"\n              example: 1\n            icon_image:\n              type: string\n              description: \"File name of the icon representing the service\"\n              example: \"\"\n            icon_image_alt:\n              type: string\n              description: \"Alternative text of the icon representing the service\"\n              example: \"\"\n            last_check:\n              type: string\n              format: date-time\n              nullable: true\n              description: \"Date of last check (ISO8601)\"\n            last_state_change:\n              type: string\n              format: date-time\n              nullable: true\n              description: \"Date of the last state change (ISO8601)\"\n            max_check_attempts:\n              type: integer\n              description: \"Max check attempts\"\n              example: 3\n            output:\n              type: string\n              description: \"Output of the last service check\"\n              example: \"OK - 127.0.0.1 rta 0.025ms lost 0%\\n\"\n            state_type:\n              type: integer\n              description: |\n                Type of the current state\n                  * `0` - SOFT\n                  * `1` - HARD\n              example: 1\n            criticality:\n              type: integer\n              nullable: true\n              description: \"Service criticality level (for display purposes)\"\n              example: 10\n            status:\n              $ref: '#/components/schemas/Monitoring.ResourceStatus'\n            duration:\n              type: string\n              nullable: true\n              description: \"Duration since last status change\"\n              example: \"2h 3m\"\n    Monitoring.ServiceFull:\n      allOf:\n        - $ref: '#/components/schemas/Monitoring.ServiceMain'\n        - type: object\n          properties:\n            check_command:\n              type: string\n              description: \"Command name used for active checks\"\n              example: \"base_centreon_ping\"\n            check_interval:\n              type: number\n              format: float\n              description: \"Interval between two scheduled checks of the service\"\n              example: 5.0\n            check_period:\n              type: string\n              description: \"Name of the check period\"\n              example: \"24x7\"\n            check_type:\n              type: integer\n              description: |\n                Type of the last check\n                  * `0` - Active\n                  * `1` - Passive\n              example: 0\n            command_line:\n              type: string\n              nullable: true\n              description: \"Command used for active checks\"\n              example: \"/usr/lib64/nagios/plugins/check_icmp -H 127.0.0.1 -n 5 -w 200,20% -c 400,50%\"\n            execution_time:\n              type: number\n              format: float\n              description: \"Time duration to check the service\"\n              example: 0.179335\n            is_acknowledged:\n              type: boolean\n              description: \"Indicates whether the last status was acknowledged\"\n              example: false\n            is_active_check:\n              type: boolean\n              description: \"Indicates whether active checks are enabled for the service\"\n              example: true\n            is_checked:\n              type: boolean\n              description: \"Indicates whether the service has been checked\"\n              example: true\n            last_hard_state_change:\n              type: string\n              format: date-time\n              nullable: true\n              description: \"Date of the last hard state change (ISO8601)\"\n            last_notification:\n              type: string\n              format: date-time\n              nullable: true\n              description: \"Date of the last notification (ISO8601)\"\n            last_time_critical:\n              type: string\n              format: date-time\n              nullable: true\n              description: \"The last time the service was CRITICAL (ISO8601)\"\n            last_time_ok:\n              type: string\n              format: date-time\n              nullable: true\n              description: \"The last time the service was OK (ISO8601)\"\n            last_time_unknown:\n              type: string\n              format: date-time\n              nullable: true\n              description: \"The last time the service was UNKNOWN (ISO8601)\"\n            last_time_warning:\n              type: string\n              format: date-time\n              nullable: true\n              description: \"The last time the service was WARNING (ISO8601)\"\n            last_update:\n              type: string\n              format: date-time\n              nullable: true\n              description: \"Date of the last update (ISO8601)\"\n            latency:\n              type: number\n              format: float\n              description: \"Time difference between scheduled check time and actual check time\"\n              example: 0.031\n            next_check:\n              type: string\n              nullable: true\n              format: date-time\n              description: \"Scheduled date for the next check (ISO8601)\"\n            performance_data:\n              type: string\n              description: \"Performance data of the last check plugin\"\n              example: \"rta=0.025ms;200.000;400.000;0; rtmax=0.061ms;;;; rtmin=0.015ms;;;; pl=0%;20;50;0;100 \"\n            scheduled_downtime_depth:\n              type: integer\n              description: \"Number of scheduled downtimes the service is currently in\"\n              example: 0\n            downtimes:\n              type: array\n              items:\n                $ref: '#/components/schemas/Downtime.Service'\n            acknowledgement:\n              allOf:\n                - $ref: '#/components/schemas/Acknowledgement.Service'\n              type: object\n              nullable: true\n            flapping:\n              type: boolean\n              description: \"Is the host flapping or not\"\n              example: false\n    Monitoring.ServiceWithHost:\n      type: object\n      properties:\n        hosts:\n          $ref: '#/components/schemas/Monitoring.HostMin'\n    Bulk.Resource.Id:\n      type: object\n      properties:\n        resource_id:\n          type: integer\n          format: int64\n          description: \"ID of the resource\"\n          example: 12\n        parent_resource_id:\n          type: integer\n          format: int64\n          nullable: true\n          description: \"ID of the parent resource (eg: host id)\"\n          example: 5\n    Configuration.Proxy:\n      type: object\n      properties:\n        url:\n          type: string\n          description: \"URL of the proxy\"\n          example: \"proxy.internal.company.org\"\n        port:\n          type: integer\n          description: \"Port of the proxy\"\n          minimum: 0\n          maximum: 65535\n          example: 3128\n        user:\n          type: string\n          nullable: true\n          description: \"Login used to connect to proxy\"\n          example: \"proxy-user\"\n        password:\n          type: string\n          nullable: true\n          description: \"Password used to connect to proxy\"\n          example: \"proxy-pass\"\n      required:\n        - url\n        - port\n        - user\n        - password\n    Monitoring.TimelineEvent:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: \"Id of the event (it is not uniq)\"\n          example: 1\n        type:\n          type: string\n          enum: [event, notification, downtime, acknowledgement, comment]\n          description: \"Type of event\"\n          example: \"event\"\n        date:\n          type: string\n          format: date-time\n          description: \"The date the event happened (ISO8601)\"\n        start_date:\n          type: string\n          format: date-time\n          nullable: true\n          description: \"The date the event started (ISO8601) (start date of downtime)\"\n        end_date:\n          type: string\n          format: date-time\n          nullable: true\n          description: \"The date the event ended (ISO8601) (end date of downtime)\"\n        content:\n          type: string\n          description: \"The content of the event\"\n        contact:\n          type: object\n          nullable: true\n          description: \"The contact of the event\"\n          properties:\n            id:\n              type: integer\n              nullable: true\n              description: \"Id of the contact\"\n            name:\n              type: string\n              description: \"Name of the contact\"\n        status:\n          $ref: '#/components/schemas/Monitoring.ResourceStatus'\n        tries:\n          type: integer\n          nullable: true\n          description: \"The count of retry\"\n    Topology.Register:\n      type: object\n      required: [name, type, address]\n      properties:\n        name:\n          type: string\n          description: \"Name of the server to register in the topology\"\n          example: \"myPoller\"\n        hostname:\n          type: string\n          description: \"Platform's 'physical' name\"\n          example: \"my.poller.physical.hostname\"\n        type:\n          type: string\n          enum: [central, poller, remote, map, mbi]\n          example: \"poller\"\n          description: \u003e\n            Type of the server from available Server types :\n              * 'Central'\n              * 'Poller'\n              * 'Remote'\n              * 'MAP'\n              * 'MBI'\n        address:\n          type: string\n          description: \"Address of the server. IPv4, IPv6 or DNS\"\n          example: \"1.1.1.2\"\n        parent_address:\n          type: string\n          description: \u003e\n            It should not be added to register a Central or other platforms in specific cases:\n            Eg : To register a remote server as top level platform on its own platform.\n\n            Mandatory parameter for all other types, to be able to link a platform to its parent\n            Example :\n            - To link a poller to a Central\n            - To link a remote server to a Central\n            - To link a poller to a remote server\n          example: \"1.1.1.1\"\n    Platform.Full:\n      type: object\n      properties:\n        platformName:\n          type: string\n          description: \"The name of the platform\"\n        isRemote:\n          type: boolean\n          example: true\n          description: \"Platform is a remote server\"\n        centralServerAddress:\n          type: string\n          example: \"192.168.0.1\"\n          description: \"Central linked address\"\n        apiUsername:\n          type: string\n          example: \"admin\"\n          description: \"Api Username\"\n        apiCredentials:\n          type: string\n          example: \"centreon\"\n          description: \"Api Password\"\n        apiScheme:\n          type: string\n          example: \"http\"\n          description: \"Protocol\"\n        apiPort:\n          type: integer\n          example: \"80\"\n          description: \"Port used by the API\"\n        apiPath:\n          type: string\n          example: \"centreon\"\n          description: \"name of your API root folder\"\n        peerValidation:\n          type: boolean\n          example: false\n          description: \"Usage of peer validation\"\n        proxy:\n          type: object\n          properties:\n            host:\n              type: string\n              nullable: true\n              example: \"example.proxy.com\"\n              description: \"Host of your proxy\"\n            port:\n              type: integer\n              nullable: true\n              example: 80\n              description: \"Proxy port\"\n            user:\n              type: string\n              nullable: true\n              example: \"admin\"\n              description: \"proxy username\"\n            password:\n              type: string\n              nullable: true\n              example: \"centreon\"\n              description: \"proxy password\"\n    Gorgone.Response:\n      type: object\n      properties:\n        message:\n          type: string\n          description: \"Message returned by Gorgone\"\n          example: \"Logs found\"\n        token:\n          type: string\n          description: \"Token used to identify the command\"\n        data:\n          type: array\n          items:\n            type: object\n            properties:\n              creation_time:\n                type: string\n                format: date-time\n                description: \"Creation of dataset in ISO Format\"\n                example: \"2020-11-24T09:13:04+01:00\"\n              event_time:\n                type: string\n                format: date-time\n                description: \"Time when event occured in ISO Format\"\n                example: \"2020-11-24T09:11:00+01:00\"\n              id:\n                type: number\n                format: integer\n                description: \"Id of the Event\"\n                example: 1\n              token:\n                type: string\n                description: \"Token used to identify the command\"\n              code:\n                type: number\n                format: integer\n                description: \"Return code of response\"\n                example: 2\n              data:\n                type: string\n                description: \"Data on JSON Format\"\n                example: \"{\\\"action\\\":\\\"getthumbprint\\\",\\\"data\\\":{\\\"thumbprint\\\":\\\"xxxx_xxxxxxxxx\\\"},\\\"message\\\":\\\"ok\\\"}\"\n    Platform.Versions:\n      type: object\n      description: \"version\"\n      properties:\n        version:\n          type: string\n          description: \"Full Version\"\n          example: 22.04.0\n        major:\n          type: string\n          description: \"Major version\"\n          example: \"22\"\n        minor:\n          type: string\n          description: \"Minor version\"\n          example: \"04\"\n        fix:\n          type: string\n          description: \"Fix version\"\n          example: \"0\"\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"SubmitResult.Service\": parse schema: property \"status\": parse enum values: parse value \"0\": expected type \"string\", got \"number\""
}