{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nuts-foundation/nuts-node"
		},
		"file": {
			"name": "v2.yaml",
			"size": 0,
			"path": "docs/_static/vcr/v2.yaml",
			"byteSize": 28848,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: Nuts Verifiable Credential API spec\n  description: |\n    API specification for common operations on Verifiable credentials.\n    It allows the three roles, issuer, holer and verifier to issue, revoke, search, present and verify credentials.\n  version: 2.0.0\n  license:\n    name: GPLv3\nservers:\n  - url: http://localhost:1323\npaths:\n  /internal/vcr/v2/vc/{id}:\n    parameters:\n      - name: id\n        in: path\n        description: URL encoded ID.\n        required: true\n        example: \"did:nuts:B8PUHs2AUHbFF1xLLK4eZjgErEcMXHxs68FteY7NDtCY#c4199b74-0c0a-4e09-a463-6927553e65f5\"\n        schema:\n          type: string\n    get:\n      summary: \"Resolves a verifiable credential\"\n      description: \u003e\n        Returns the resolved credential, whether its revocation/trust state.\n\n        error returns:\n        * 404 - Corresponding credential could not be found\n        * 500 - An error occurred while processing the request\n      operationId: \"resolveVC\"\n      tags:\n        - credential\n      responses:\n        \"200\":\n          description: Credential has been found and is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VerifiableCredential'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vcr/v2/search:\n    post:\n      summary: \"Searches for verifiable credentials that could be used for different use-cases.\"\n      description: \u003e\n        The result contains a list of matching credentials. Only verified credentials are returned.\n        The search parameters define how the raw results are filtered.\n\n        error returns:\n        * 400 - Incorrect search query\n        * 500 - An error occurred while processing the request\n      operationId: \"searchVCs\"\n      requestBody:\n        required: true\n        description: \u003e\n          Searching for VCs is done by passing a JSON-LD document as query.\n          Each field in the request body must be present in the VC in order for it to be passed as result.\n          Different JSON-LD contexts can be used allowing for different JSON formats. Consult the node documentation on the supported contexts.\n          The type of the credential must contain \"VerifiableCredential\" and the additional Nuts credential type that matches the credentialSubject context.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchVCRequest'\n            examples:\n              NutsOrganizationCredential:\n                value: \u003e\n                  {\n                    \"query\": {\n                      \"@context\": [\"https://www.w3.org/2018/credentials/v1\",\"https://nuts.nl/credentials/v1\"],\n                      \"type\": [\"VerifiableCredential\", \"NutsOrganizationCredential\"],\n                      \"credentialSubject\":{\n                        \"organization\": {\n                          \"name\": \"Zorggroep de Nootjes\",\n                          \"city\": \"Amandelmere\"\n                        }\n                      }\n                    }\n                  }\n              NutsAuthorizationCredential:\n                value: \u003e\n                  {\n                    \"query\": {\n                      \"@context\": [\"https://www.w3.org/2018/credentials/v1\",\"https://nuts.nl/credentials/v1\"],\n                      \"type\": [\"VerifiableCredential\", \"NutsAuthorizationCredential\"],\n                      \"credentialSubject\":{\n                        \"id\": \"did:nuts:123\",\n                        \"purposeOfUse\": \"eOverdracht-receiver\",\n                        \"resources\": {\n                          \"path\":\"/Task/123\"\n                        },\n                        \"subject\": \"urn:oid:2.16.840.1.113883.2.4.6.3:123456782\"\n                      }\n                    },\n                    \"searchOptions\": {\n                      \"allowUntrustedIssuer\": true\n                    }\n                  }\n      tags:\n        - credential\n      responses:\n        \"200\":\n          description: A list of matching credentials\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchVCResults'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vcr/v2/issuer/vc:\n    post:\n      summary: Issues a new Verifiable Credential\n      description: |\n        Issues a new Verifiable Credential for provided type in the context.\n        \n        error returns:\n        * 400 - One or more of the given parameters are invalid\n        * 412 - A private transaction is issued for a subject that does not have a NutsComm address\n        * 500 - An error occurred while processing the request\n      operationId: \"issueVC\"\n      tags:\n        - credential\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IssueVCRequest'\n      responses:\n        \"200\":\n          description: \"New VC has been created successfully. Returns the Verifiable Credential.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VerifiableCredential'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vcr/v2/issuer/vc/search:\n    get:\n      summary: \"Searches for verifiable credentials issued by this node which matches the search params\"\n      description: \u003e\n        The SearchVCResult contains a list of matching credentials regardless of the validity.\n        The entry may contain a revocation which means the credential has been revoked.\n\n        error returns:\n        * 400 - Invalid search parameters\n        * 500 - An error occurred while processing the request\n      operationId: \"searchIssuedVCs\"\n      parameters:\n        - name: credentialType\n          in: query\n          description: The type of the credential\n          example: NutsOrganizationCredential\n          required: true\n          schema:\n            type: string\n        - name: issuer\n          in: query\n          description: the DID of the issuer\n          example: did:nuts:123\n          required: true\n          schema:\n            type: string\n        - name: subject\n          in: query\n          description: the URI which indicates the subject (usually a DID)\n          example: did:nuts:456\n          required: false\n          schema:\n            type: string\n      tags:\n        - credential\n      responses:\n        \"200\":\n          description: A list of matching credentials\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchVCResults'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vcr/v2/issuer/vc/{id}:\n    parameters:\n      - name: id\n        in: path\n        description: URL encoded ID.\n        required: true\n        example: \"did:nuts:B8PUHs2AUHbFF1xLLK4eZjgErEcMXHxs68FteY7NDtCY#c4199b74-0c0a-4e09-a463-6927553e65f5\"\n        schema:\n          type: string\n    delete:\n      summary: \"Revoke an issued credential\"\n      description: |\n        Revoke a credential.\n\n        error returns:\n        * 400 - Credential can't be revoked. Most likely due to a missing private key.\n        * 404 - Credential is not found\n        * 409 - Credential has already been revoked\n        * 500 - An error occurred while processing the request\n      operationId: \"revokeVC\"\n      tags:\n        - credential\n      responses:\n        \"200\":\n          description: Revocation has been processed locally. It has also been published to the network.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Revocation'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vcr/v2/verifier/vc:\n    post:\n      summary: Verifies a Verifiable Credential\n      description: |\n        Verifies a Verifiable Credential. It checks: \n        * The signature\n        * Expiration\n        * Rrevocation status\n        * If the issuer is trusted\n        * If the issuer was not deactivated at time of issuing\n        \n        error returns:\n        * 400 - One or more of the given parameters are invalid\n        * 500 - An error occurred while processing the request\n      operationId: \"verifyVC\"\n      tags:\n        - credential\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VCVerificationRequest'\n      responses:\n        \"200\":\n          description: \"The verification result\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VCVerificationResult'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vcr/v2/verifier/vp:\n    post:\n      summary: Verifies a Verifiable Presentation\n      description: |\n        Verifies a Verifiable Presentation. It checks:\n        * Signature of the verifiable presentation and the verifiable credentials\n        * Expiration\n        * Revocation status\n        * If the issuers of the verifiable credentials are trusted\n        * If the issuers of the verifiable credentials were not deactivated at time of issuing\n\n        If the verification can be performed successfully (regardless whether checks failed), HTTP status 200 is returned.\n        Callers MUST observe the \"validity\" field of the verification result to check whether the VP is valid.\n\n        error returns:\n        * 400 - A parameter or the format of the verifiable presentation is invalid\n        * 500 - An error occurred while processing the request\n      operationId: \"verifyVP\"\n      tags:\n        - credential\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VPVerificationRequest'\n      responses:\n        \"200\":\n          description: \"The verification result\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VPVerificationResult'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vcr/v2/verifier/trust:\n    post:\n      summary: Mark all the VCs of given type and issuer as 'trusted'.\n      description: |\n        The added trust is persisted and may be removed with a delete operation.\n\n        error returns:\n        * 400 - Invalid paramters\n        * 500 - An error occurred while processing the request\n      operationId: \"trustIssuer\"\n      tags:\n        - credential\n      requestBody:\n        required: true\n        description: a issuer/credentialType combination\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CredentialIssuer\"\n      responses:\n        \"204\":\n          description: The change was accepted.\n        default:\n          $ref: '../common/error_response.yaml'\n    delete:\n      summary: Remove trust in an issuer/credentialType combination\n      description: |\n        The removed trust is persisted.\n\n        error returns:\n        * 400 - Invalid paramters\n        * 500 - An error occurred while processing the request\n      operationId: \"untrustIssuer\"\n      tags:\n        - credential\n      requestBody:\n        required: true\n        description: a issuer/credentialType combination\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CredentialIssuer\"\n      responses:\n        \"204\":\n          description: The change was accepted.\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vcr/v2/verifier/{credentialType}/trusted:\n    get:\n      summary: \"List all trusted issuers for a given credential type\"\n      description: |\n        List all trusted issuers for a given credential type.\n\n        error returns:\n        * 400 - Malformed credential type\n        * 404 - Unkown credential type\n      operationId: \"listTrusted\"\n      tags:\n        - credential\n      parameters:\n        - name: credentialType\n          in: path\n          description: URL encoded Verifiable Credential Type.\n          required: true\n          example: \"NutsOrganizationCredential\"\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: List of trusted issuers is returned.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DID'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vcr/v2/verifier/{credentialType}/untrusted:\n    get:\n      summary: \"List all untrusted issuers for a given credential type\"\n      description: |\n        List all untrusted issuers for a given credential type.\n\n        error returns:\n        * 400 - Malformed credential type\n        * 404 - Unkown credential type\n      operationId: \"listUntrusted\"\n      tags:\n        - credential\n      parameters:\n        - name: credentialType\n          in: path\n          description: URL encoded Verifiable Credential Type.\n          required: true\n          example: \"NutsOrganizationCredential\"\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: List of untrusted issuers is returned.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DID'\n        default:\n          $ref: '../common/error_response.yaml'\n\n  /internal/vcr/v2/holder/vp:\n    post:\n      summary: Create a new Verifiable Presentation for a set of Verifiable Credentials.\n      description: |\n        Given a list of VCs, create a new presentation.\n\n        error returns:\n        * 400 - Invalid paramters\n        * 500 - An error occurred while processing the request\n      operationId: createVP\n      tags:\n        - credential\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateVPRequest\"\n      responses:\n        \"200\":\n          description: The verifiable presentation.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VerifiablePresentation\"\n\n\n\ncomponents:\n  schemas:\n    IssueVCRequest:\n      type: object\n      description: A request for issuing a new Verifiable Credential.\n      required:\n        - type\n        - issuer\n        - credentialSubject\n      properties:\n        \"@context\":\n          description: |\n            The resolvable context of the credentialSubject as URI. If omitted, the \"https://nuts.nl/credentials/v1\" context is used.\n            Note: it is not needed to provide the \"https://www.w3.org/2018/credentials/v1\" context here.\n          type: string\n          example: \"http://schema.org\"\n          default: \"https://nuts.nl/credentials/v1\"\n        type:\n          description: Type definition for the credential.\n          type: string\n          example: \"NutsOrganizationCredential\"\n        issuer:\n          description: DID according to Nuts specification.\n          type: string\n          example: \"did:nuts:B8PUHs2AUHbFF1xLLK4eZjgErEcMXHxs68FteY7NDtCY\"\n        expirationDate:\n          description: rfc3339 time string until when the credential is valid.\n          type: string\n          example: \"2012-01-02T12:00:00Z\"\n        publishToNetwork:\n          description: |\n            If set, the node publishes this credential to the network. This is the default behaviour.\n            When set to false, the caller is responsible for distributing the VC to a holder. When the issuer is\n            also the holder, it then can be used to directly create a presentation (self issued).\n            Note: a not published credential can still be publicaly revoked.\n          type: boolean\n          default: true\n        visibility:\n            description: |\n              When publishToNetwork is true, the credential can be published publicly or privately to the holder.\n              This field is mandatory if publishToNetwork is true to prevent accidents. It defaults to \"private\".\n            type: string\n            enum: [ public, private ]\n            default: private\n        credentialSubject:\n          $ref: '#/components/schemas/CredentialSubject'\n    VerifiableCredential:\n      type: object\n      description: A credential according to the W3C and Nuts specs.\n      required:\n        - \"@context\"\n        - type\n        - issuer\n        - issuanceDate\n        - credentialSubject\n        - proof\n      properties:\n        \"@context\":\n          description: \"List of URIs of JSON-LD contexts of the VC.\"\n          type: array\n          items:\n            type: string\n        id:\n          description: Credential ID. An URI wich uniquely identifies the credential e.g. the issuers DID concatenated with an uuid.\n          example: \"did:nuts:123#B8PUHs2AUHbFF1xLLK4eZjgErEcMXHxs68FteY7NDtCY\"\n          type: string\n        type:\n          description: A single string or array of strings. The value(s) indicate the type of credential. It should contain `VerifiableCredential`. Each type should be defined in the @context.\n          type: object\n        issuer:\n          $ref: '#/components/schemas/DID'\n        issuanceDate:\n          description: rfc3339 time string when the credential was issued.\n          type: string\n          example: \"2012-01-02T12:00:00Z\"\n        expirationDate:\n          description: rfc3339 time string untill when the credential is valid.\n          type: string\n          example: \"2012-01-02T12:00:00Z\"\n        credentialSubject:\n          $ref: '#/components/schemas/CredentialSubject'\n        proof:\n          description: one or multiple cryptographic proofs\n          type: object\n    SearchVCRequest:\n      type: object\n      description: request body for searching VCs\n      required:\n        - query\n      properties:\n        searchOptions:\n          $ref: \"#/components/schemas/SearchOptions\"\n        query:\n          type: object\n          description: A partial VerifiableCredential in JSON-LD format. Each field will be used to match credentials against. All fields MUST be present.\n    SearchVCResults:\n      type: object\n      description: result of a Search operation.\n      required:\n        - verifiableCredentials\n      properties:\n        verifiableCredentials:\n          type: array\n          items:\n            $ref: \"#/components/schemas/SearchVCResult\"\n    SearchVCResult:\n      type: object\n      description: result of a Search operation.\n      required:\n        - verifiableCredential\n      properties:\n        revocation:\n          $ref: \"#/components/schemas/Revocation\"\n        verifiableCredential:\n          $ref: \"#/components/schemas/VerifiableCredential\"\n    SearchOptions:\n      type: object\n      properties:\n        allowUntrustedIssuer:\n          description: If set to true, VCs from an untrusted issuer are returned.\n          type: boolean\n          default: false\n    Revocation:\n      type: object\n      description: Credential revocation record\n      required:\n        - issuer\n        - subject\n        - date\n      properties:\n        issuer:\n          $ref: '#/components/schemas/DID'\n        subject:\n          type: string\n          description: subject refers to the credential identifier that is revoked (not the credential subject)\n        reason:\n          type: string\n          description: reason describes why the VC has been revoked\n        date:\n          type: string\n          description: date is a rfc3339 formatted datetime.\n        proof:\n          type: object\n          description: Proof contains the cryptographic proof(s).\n    DID:\n      type: string\n      description: DID according to Nuts specification\n      example: \"did:nuts:B8PUHs2AUHbFF1xLLK4eZjgErEcMXHxs68FteY7NDtCY\"\n    CredentialSubject:\n      type: object\n      description: Subject of a Verifiable Credential identifying the holder and expressing claims.\n\n    VCVerificationRequest:\n      required:\n        - verifiableCredential\n      properties:\n        verifiableCredential:\n          $ref: \"#/components/schemas/VerifiableCredential\"\n        verificationOptions:\n          $ref: \"#/components/schemas/VCVerificationOptions\"\n    VCVerificationOptions:\n      type: object\n      properties:\n        allowUntrustedIssuer:\n          description: If set to true, an untrusted credential issuer is alowed.\n          type: boolean\n          default: false\n    VCVerificationResult:\n      description: Contains the verifiable credential verification result.\n      type: object\n      required:\n        - validity\n      properties:\n        validity:\n          type: boolean\n          description: Indicates the validity of the signature, issuer and revocation state.\n        message:\n          type: string\n          description: Indicates what went wrong\n\n    CreateVPRequest:\n      type: object\n      description: A request for creating a new Verifiable Presentation for a set of Verifiable Credentials.\n      required:\n        - verifiableCredentials\n      properties:\n        verifiableCredentials:\n          type: array\n          items:\n            $ref: \"#/components/schemas/VerifiableCredential\"\n        signerDID:\n          description: |\n            Specifies the DID of the signing party that must be used to create the digital signature.\n            If not specified, it is derived from the given Verifiable Credentials' subjectCredential ID.\n            It can only be derived if all given Verifiable Credentials have the same, single subjectCredential.\n          type: string\n          format: uri\n        proofPurpose:\n          type: string\n          description: |\n            The specific intent for the proof, the reason why an entity created it. Acts as a safeguard to prevent the\n            proof from being misused for a purpose other than the one it was intended for.\n        challenge:\n          type: string\n          description: |\n            A random or pseudo-random value used by some authentication protocols to mitigate replay attacks.\n        domain:\n          type: string\n          description: |\n            A string value that specifies the operational domain of a digital proof. This could be an Internet domain\n            name like example.com, an ad-hoc value such as mycorp-level3-access, or a very specific transaction value\n            like 8zF6T$mqP. A signer could include a domain in its digital proof to restrict its use to particular\n            target, identified by the specified domain.\n        expires:\n          type: string\n          description: Date and time at which proof will expire. If omitted, the proof does not have an end date.\n          format: date-time\n          example: '2021-12-20T09:00:00Z'\n\n    VPVerificationRequest:\n      required:\n        - verifiablePresentation\n      properties:\n        verifiablePresentation:\n          $ref: \"#/components/schemas/VerifiablePresentation\"\n        validAt:\n          type: string\n          description: Date and time at which the VP should be valid. If not supplied, the current date/time is used.\n          format: date-time\n          example: '2021-12-20T09:00:00Z'\n        verifyCredentials:\n          type: boolean\n          description: Indicates whether the Verifiable Credentials within the VP must be verified, default true.\n          default: true\n    VPVerificationResult:\n      description: Contains the verifiable presentation verification result.\n      type: object\n      required:\n        - validity\n      properties:\n        validity:\n          type: boolean\n          description: Indicates the validity of the signature, issuer and revocation state.\n        message:\n          type: string\n          description: Indicates what went wrong\n        credentials:\n          description: If the VP is valid, it will contain the credentials inside the VP.\n          type: array\n          items:\n            $ref: '#/components/schemas/VerifiableCredential'\n\n    VerifiablePresentation:\n      type: object\n      description: Verifiable Presentation\n      title: Verifiable Presentation Model\n      required:\n        - \"@context\"\n        - type\n      properties:\n        \"@context\":\n          description: |\n            An ordered set where the first item is a URI https://www.w3.org/2018/credentials/v1. It is used to define\n            terms and help to express specific identifiers in a compact manner.\n          uniqueItems: true\n          example: [\n              \"https://www.w3.org/2018/credentials/v1\"\n          ]\n          type: array\n          items:\n            type: string\n        id:\n          type: string\n          description: URI that is used to unambiguously refer to an object, such as a person, product, or organization.\n          example: https://example.edu/credentials/1872,\n          format: uri\n        type:\n          description: A single string or array of strings. Values indicate the type of object. It should contain `VerifiablePresentation`. Each type must be defined in the @context.\n          example: \"VerifiablePresentation\"\n          type: object\n        verifiableCredential:\n          description: |\n            VerifiableCredential is composed of a list containing one or more verifiable credentials, in a\n            cryptographically verifiable format.\n          type: array\n          items:\n            $ref: '#/components/schemas/VerifiableCredential'\n        holder:\n          type: string\n          description: \"URI of the entity that is generating the presentation.\"\n          format: uri\n          example: \"did:nuts:123\"\n        proof:\n          $ref: \"#/components/schemas/EmbeddedProof\"\n    EmbeddedProof:\n      title: Embedded Proof\n      type: object\n      description: |\n        Cryptographic proofs that can be used to detect tampering and verify the authorship of a\n        credential or presentation. An embedded proof is a mechanism where the proof is included in\n        the data, such as a Linked Data Signature.\n      required:\n        - type\n        - created\n        - proofPurpose\n        - verificationMethod\n        - jws\n      properties:\n        type:\n          type: string\n          description: Type of the object or the datatype of the typed value. Currently only supported value is \"JsonWebSignature2020\".\n          example: JsonWebSignature2020.\n        created:\n          type: string\n          description: Date and time at which proof has been created.\n          format: date-time\n          example: '2021-12-20T09:00:00Z'\n        proofPurpose:\n          type: string\n          description: |\n            It expresses the purpose of the proof and ensures the information is protected by the\n            signature.\n          example: assertionMethod\n        challenge:\n          type: string\n          description: |\n            A random or pseudo-random value, provided by the verifier, used by some authentication protocols to\n            mitigate replay attacks.\n        domain:\n          type: string\n          description: |\n            A string value that specifies the operational domain of a digital proof. This could be an Internet domain\n            name like example.com, an ad-hoc value such as mycorp-level3-access, or a very specific transaction value\n            like 8zF6T$mqP. A signer could include a domain in its digital proof to restrict its use to particular\n            target, identified by the specified domain.\n        nonce:\n          type: string\n          description: |\n            A unique string value generated by the holder, MUST only be used once for a particular domain\n            and window of time. This value can be used to mitigate replay attacks.\n        verificationMethod:\n          type: string\n          description: |\n            Specifies the public key that can be used to verify the digital signature.\n            Dereferencing a public key URL reveals information about the controller of the key,\n            which can be checked against the issuer of the credential.\n          example: did:nuts:123#key-5\n        jws:\n          type: string\n          description: JSON Web Signature\n          example: eyJhbGciOiJFUzI1NksifQ.eyJzdWIiOiJFQlNJIDIwMTkifQ.oggE3ft3kJYPGGa9eBibpbjgeJXw4fLbVMouVoM2NfcDxsl_UUUIarsS1VpBoYEs7s9cBlc4uC0EbnJCHfVJIw\n    CredentialIssuer:\n      type: object\n      required:\n        - issuer\n        - credentialType\n      properties:\n        issuer:\n          description: the DID of an issuer\n          example: \"did:nuts:B8PUHs2AUHbFF1xLLK4eZjgErEcMXHxs68FteY7NDtCY\"\n          type: string\n        credentialType:\n          description: a credential type\n          example: NutsOrganizationCredential\n          type: string\n"
		}
	},
	"Error": "parse: parse spec: paths: /internal/vcr/v2/issuer/vc/search: get: operation \"searchIssuedVCs\": responses: default: resolve \"../common/error_response.yaml\" reference: invalid response reference: \"../common/error_response.yaml\""
}