{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/sdslabs/gctl"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "client/api/openapi.yaml",
			"byteSize": 48695,
			"content": "openapi: 3.0.1\ninfo:\n  contact:\n    email: contact@sdslabs.co.in\n    name: SDSLabs\n    url: https://chat.sdslabs.co\n  description: |-\n    Handles authentication, creation/management of applications, databases, users and also provides a superuser API. \u003cbr\u003e\u003cbr\u003e Only a superuser can avail the superuser API. A superuser can **grant/revoke** superuser privileges to other users. A default  superuser is created every time a Gasper instance is launched whose credentials are defined in the `admin` section of `config.toml`, the main configuration file. A sample configuration file is available [here](https://github.com/sdslabs/gasper/blob/develop/config.sample.toml#L37).\u003cbr\u003e\u003cbr\u003e\n    **Note:-** Normally the applications and databases can only be managed by their owners but the superuser can bypass that check.\u003cbr\u003e\u003cbr\u003e\n    **PS:-** If you want to programmatically generate a client for this API, you can find the corresponding OpenAPI specifications [here](https://github.com/sdslabs/gasper/tree/develop/docs/content/api/specs). We recommend using [OpenAPI-Generator](https://openapi-generator.tech/) for generating clients.\n  license:\n    name: MIT\n    url: https://github.com/sdslabs/gasper/blob/develop/LICENSE.md\n  title: Gasper Master API\n  version: \"1.0\"\nexternalDocs:\n  description: Find out more about Gasper\n  url: https://github.com/sdslabs/gasper\nservers:\n- url: http://localhost:3000\ntags:\n- description: Authentication for all endpoints\n  name: auth\n- description: Application management\n  name: apps\n- description: Database management\n  name: dbs\n- description: User specific operations\n  name: user\n- description: Operations with superuser privileges\n  name: admin\npaths:\n  /auth/login:\n    post:\n      operationId: login\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Login'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LoginResponse'\n          description: Login successful\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_400'\n          description: Bad Request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Internal Server Error\n      summary: Login to get a Bearer token\n      tags:\n      - auth\n  /auth/register:\n    post:\n      operationId: register\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200'\n          description: Registration successful\n      summary: Register a user\n      tags:\n      - auth\n  /auth/refresh:\n    get:\n      operationId: refresh\n      parameters:\n      - description: Bearer Token Authentication\n        explode: false\n        in: header\n        name: Authorization\n        required: true\n        schema:\n          example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n          type: string\n        style: simple\n      responses:\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_401'\n          description: Unauthorized\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LoginResponse'\n          description: Refresh successful\n      security:\n      - bearerAuth: []\n      summary: Refresh JWT token using existing token\n      tags:\n      - auth\n  /instances:\n    get:\n      operationId: fetchIntancesByUser\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_1'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Fetch all instances owned by a user\n      tags:\n      - instances\n  /apps/{language}:\n    post:\n      operationId: createApp\n      parameters:\n      - description: The programming language in which the application is written\n        explode: false\n        in: path\n        name: language\n        required: true\n        schema:\n          enum:\n          - static\n          - php\n          - nodejs\n          - python2\n          - python3\n          - golang\n          - ruby\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Application'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_2'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Create an application\n      tags:\n      - apps\n  /apps:\n    get:\n      operationId: fetchAppsByUser\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_3'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Fetch all applications owned by a user\n      tags:\n      - apps\n  /apps/{app}:\n    delete:\n      operationId: deleteAppByUser\n      parameters:\n      - description: The name of the application\n        explode: false\n        in: path\n        name: app\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_2'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Delete an application owned by a user\n      tags:\n      - apps\n    get:\n      operationId: fetchAppByUser\n      parameters:\n      - description: The name of the application\n        explode: false\n        in: path\n        name: app\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_3'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Fetch a single application owned by a user\n      tags:\n      - apps\n    put:\n      operationId: updateAppByUser\n      parameters:\n      - description: The name of the application\n        explode: false\n        in: path\n        name: app\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Application'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_2'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Update an application owned by a user\n      tags:\n      - apps\n  /apps/{app}/rebuild:\n    patch:\n      operationId: rebuildAppByUser\n      parameters:\n      - description: The name of the application\n        explode: false\n        in: path\n        name: app\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_2'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Rebuild an application\n      tags:\n      - apps\n  /apps/{app}/transfer/{userEmail}:\n    patch:\n      operationId: transferAppByUser\n      parameters:\n      - description: The name of the application\n        explode: false\n        in: path\n        name: app\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Email ID of the user\n        explode: false\n        in: path\n        name: userEmail\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_2'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Transfer ownership of an application to another user\n      tags:\n      - apps\n  /apps/{app}/term:\n    get:\n      operationId: fetchTerminalByUser\n      parameters:\n      - description: The name of the application\n        explode: false\n        in: path\n        name: app\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_4'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Fetch a browser terminal instance for an application owned by a user\n      tags:\n      - apps\n  /apps/{app}/logs:\n    get:\n      operationId: fetchLogsByUser\n      parameters:\n      - description: The name of the application\n        explode: false\n        in: path\n        name: app\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Fetch the last **n** logs (Fetches all logs if not specified)\n        explode: true\n        in: query\n        name: tail\n        required: false\n        schema:\n          example: 3\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_5'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Fetch logs of an application\n      tags:\n      - apps\n  /apps/{app}/metrics:\n    get:\n      operationId: fetchMetricsByUser\n      parameters:\n      - description: The name of the application\n        explode: false\n        in: path\n        name: app\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Fetch metrics in the last **n** seconds\n        explode: true\n        in: query\n        name: seconds\n        required: false\n        schema:\n          example: 8\n          type: integer\n        style: form\n      - description: Fetch metrics in the last **n** minutes\n        explode: true\n        in: query\n        name: minutes\n        required: false\n        schema:\n          example: 7\n          type: integer\n        style: form\n      - description: Fetch metrics in the last **n** hours\n        explode: true\n        in: query\n        name: hours\n        required: false\n        schema:\n          example: 6\n          type: integer\n        style: form\n      - description: Fetch metrics in the last **n** days\n        explode: true\n        in: query\n        name: days\n        required: false\n        schema:\n          example: 5\n          type: integer\n        style: form\n      - description: Fetch metrics in the last **n** weeks\n        explode: true\n        in: query\n        name: weeks\n        required: false\n        schema:\n          example: 4\n          type: integer\n        style: form\n      - description: Fetch metrics in the last **n** months\n        explode: true\n        in: query\n        name: months\n        required: false\n        schema:\n          example: 3\n          type: integer\n        style: form\n      - description: Fetch metrics in the last **n** years\n        explode: true\n        in: query\n        name: years\n        required: false\n        schema:\n          example: 2\n          type: integer\n        style: form\n      - description: Fetch metrics in the last **n** decades\n        explode: true\n        in: query\n        name: decades\n        required: false\n        schema:\n          example: 1\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_6'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Fetch metrics of an application\n      tags:\n      - apps\n  /dbs/{databaseType}:\n    post:\n      operationId: createDB\n      parameters:\n      - description: The type of database\n        explode: false\n        in: path\n        name: databaseType\n        required: true\n        schema:\n          enum:\n          - mysql\n          - mongodb\n          - postgresql\n          - redis\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Database'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_2'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Create a database\n      tags:\n      - dbs\n  /dbs:\n    get:\n      operationId: fetchDbsByUser\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_7'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Fetch all databases owned by a user\n      tags:\n      - dbs\n  /dbs/{db}:\n    delete:\n      operationId: deleteDbByUser\n      parameters:\n      - description: Name of the database\n        explode: false\n        in: path\n        name: db\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_2'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Delete a single database owned by a user\n      tags:\n      - dbs\n    get:\n      operationId: fetchDbByUser\n      parameters:\n      - description: Name of the database\n        explode: false\n        in: path\n        name: db\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_7'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Fetch a single database owned by a user\n      tags:\n      - dbs\n  /dbs/{db}/transfer/{userEmail}:\n    patch:\n      operationId: transferDbByUser\n      parameters:\n      - description: Name of the database\n        explode: false\n        in: path\n        name: db\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Email ID of the user\n        explode: false\n        in: path\n        name: userEmail\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_2'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Transfer ownership of a database to another user\n      tags:\n      - dbs\n  /user:\n    delete:\n      operationId: deleteUser\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_9'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Delete user\n      tags:\n      - user\n    get:\n      operationId: fetchUser\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_8'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Fetch logged in user's info\n      tags:\n      - user\n  /user/password:\n    put:\n      operationId: updatePassword\n      parameters: []\n      requestBody:\n        $ref: '#/components/requestBodies/inline_object'\n        content:\n          application/json:\n            schema:\n              properties:\n                old_password:\n                  description: The current password in use\n                  example: alphadose\n                  type: string\n                new_password:\n                  description: The new password meant to replace the old one\n                  example: betadose\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_10'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Update the password of the logged in user\n      tags:\n      - user\n  /admin/apps:\n    get:\n      operationId: fetchAppsByAdmin\n      parameters:\n      - description: Name of the application\n        explode: true\n        in: query\n        name: name\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Owner of the application\n        explode: true\n        in: query\n        name: owner\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Language in which the application is written\n        explode: true\n        in: query\n        name: language\n        required: false\n        schema:\n          enum:\n          - php\n          - static\n          - nodejs\n          - python2\n          - python3\n          - golang\n          - ruby\n          example: nodejs\n          type: string\n        style: form\n      - description: Docker Image used in building the application's container\n        explode: true\n        in: query\n        name: docker_image\n        required: false\n        schema:\n          example: sdsws/node:2.0\n          type: string\n        style: form\n      - description: IPv4 address of the node in which the application is deployed\n        explode: true\n        in: query\n        name: host_ip\n        required: false\n        schema:\n          example: 192.168.208.208\n          type: string\n        style: form\n      - description: Application's Git Repository URL\n        explode: true\n        in: query\n        name: git_url\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Port assigned by the node to the application's docker container\n        explode: true\n        in: query\n        name: container_port\n        required: false\n        schema:\n          example: \"35000\"\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_3'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Fetch all applications with/without a filter defined by query params\n      tags:\n      - admin\n  /admin/apps/{app}:\n    delete:\n      operationId: deleteAppByAdmin\n      parameters:\n      - description: The name of the application\n        explode: false\n        in: path\n        name: app\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_2'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Delete an application\n      tags:\n      - admin\n    get:\n      operationId: fetchAppByAdmin\n      parameters:\n      - description: The name of the application\n        explode: false\n        in: path\n        name: app\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_3'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Fetch a single application\n      tags:\n      - admin\n  /admin/dbs:\n    get:\n      operationId: fetchDbsByAdmin\n      parameters:\n      - description: Name of the database\n        explode: true\n        in: query\n        name: name\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: User of the database\n        explode: true\n        in: query\n        name: user\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Owner of the database\n        explode: true\n        in: query\n        name: owner\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Type of the database\n        explode: true\n        in: query\n        name: language\n        required: false\n        schema:\n          enum:\n          - mysql\n          - mongodb\n          - postgresql\n          - redis\n          example: mysql\n          type: string\n        style: form\n      - description: IPv4 address of the node in which the database is deployed\n        explode: true\n        in: query\n        name: host_ip\n        required: false\n        schema:\n          example: 192.168.208.208\n          type: string\n        style: form\n      - description: Port assigned by the node to the database's docker container\n        explode: true\n        in: query\n        name: container_port\n        required: false\n        schema:\n          example: \"35000\"\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_7'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Fetch all databases with/without a filter defined by query params\n      tags:\n      - admin\n  /admin/dbs/{db}:\n    delete:\n      operationId: deleteDbByAdmin\n      parameters:\n      - description: Name of the database\n        explode: false\n        in: path\n        name: db\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_2'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Delete a single database\n      tags:\n      - admin\n    get:\n      operationId: fetchDbByAdmin\n      parameters:\n      - description: Name of the database\n        explode: false\n        in: path\n        name: db\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_7'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Fetch a single database\n      tags:\n      - admin\n  /admin/users:\n    get:\n      operationId: fetchUsersByAdmin\n      parameters:\n      - description: Name of the user\n        explode: true\n        in: query\n        name: username\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Email of the user\n        explode: true\n        in: query\n        name: email\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Field denoting superuser privileges\n        explode: true\n        in: query\n        name: admin\n        required: false\n        schema:\n          type: boolean\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_11'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Fetch all users with/without a filter defined by query params\n      tags:\n      - admin\n  /admin/users/{userEmail}:\n    delete:\n      operationId: deleteUserByAdmin\n      parameters:\n      - description: Email ID of the user\n        explode: false\n        in: path\n        name: userEmail\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_2'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Delete a single user\n      tags:\n      - admin\n    get:\n      operationId: fetchUserByAdmin\n      parameters:\n      - description: Email ID of the user\n        explode: false\n        in: path\n        name: userEmail\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_11'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Fetch a single user\n      tags:\n      - admin\n  /admin/users/{userEmail}/grant:\n    patch:\n      operationId: grantSuperuserPrivilege\n      parameters:\n      - description: Email ID of the user\n        explode: false\n        in: path\n        name: userEmail\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_2'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Grant superuser privileges to a single user\n      tags:\n      - admin\n  /admin/users/{userEmail}/revoke:\n    patch:\n      operationId: revokeSuperuserPrivilege\n      parameters:\n      - description: Email ID of the user\n        explode: false\n        in: path\n        name: userEmail\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_2'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Revoke superuser privileges from a single user\n      tags:\n      - admin\n  /admin/nodes:\n    get:\n      operationId: fetchNodesByAdmin\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_12'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Fetch bind addresses(IP:Port) of all microservices on all nodes\n      tags:\n      - admin\n  /admin/nodes/{type}:\n    get:\n      operationId: fetchNodeByAdmin\n      parameters:\n      - description: Type of microservice\n        explode: false\n        in: path\n        name: type\n        required: true\n        schema:\n          enum:\n          - master\n          - workers\n          - master\n          - genproxy\n          - appmaker\n          - genssh\n          - gendns\n          - mysql\n          - mongodb\n          - postgresql\n          - redis\n          example: master\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_13'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Fetch bind addresses(IP:Port) of a single microservice on all nodes\n      tags:\n      - admin\ncomponents:\n  requestBodies:\n    inline_object:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/inline_object'\n      required: true\n  schemas:\n    Context:\n      example:\n        port: 3000\n        build:\n        - npm install\n        - grunt build\n        index: index.js\n        rc_file: false\n        run:\n        - node index.js\n      properties:\n        index:\n          description: Entrypoint for an application\n          example: index.js\n          type: string\n        port:\n          default: 80\n          description: Port on which the application runs\n          example: 3000\n          format: int64\n          type: integer\n        rc_file:\n          default: false\n          description: Is a Run Commands file present in the application's git repository's\n            root directory?\n          type: boolean\n        build:\n          description: Commands for installing application dependencies\n          example:\n          - npm install\n          - grunt build\n          items:\n            type: string\n          type: array\n        run:\n          description: Commands for running the application\n          example:\n          - node index.js\n          items:\n            type: string\n          type: array\n      required:\n      - index\n      type: object\n    Git:\n      example:\n        access_token: access_token\n        repo_url: https://github.com/sdslabs/gasper\n        branch: master\n      properties:\n        repo_url:\n          description: Git Repository URL of the application\n          example: https://github.com/sdslabs/gasper\n          type: string\n        access_token:\n          description: Access token for cloning the application's git repository\n          type: string\n        branch:\n          default: master\n          description: Specific branch to clone\n          example: master\n          type: string\n      required:\n      - repo_url\n      type: object\n    Application:\n      example:\n        password: password\n        git:\n          access_token: access_token\n          repo_url: https://github.com/sdslabs/gasper\n          branch: master\n        name: name\n        context:\n          port: 3000\n          build:\n          - npm install\n          - grunt build\n          index: index.js\n          rc_file: false\n          run:\n          - node index.js\n        resources:\n          memory: 0.5\n          cpu: 0.25\n        env:\n          key: env\n      properties:\n        name:\n          description: Name of the application\n          type: string\n        password:\n          description: Password required for SSH access to the application's docker\n            container\n          type: string\n        git:\n          $ref: '#/components/schemas/Git'\n        context:\n          $ref: '#/components/schemas/Context'\n        env:\n          additionalProperties:\n            type: string\n          description: Environment variables required by the application\n          type: object\n        resources:\n          $ref: '#/components/schemas/Application_resources'\n      required:\n      - context\n      - git\n      - name\n      - password\n      type: object\n    CreatedApplication:\n      example:\n        owner: anish.mukherjee1996@gmail.com\n        container_port: 35000\n        host_ip: 192.168.208.206\n        app_url: alphadose.app.sdslabs.co\n        ssh_cmd: ssh -p 2222 alphadose@192.168.208.206\n        name_servers:\n        - 8.8.8.8\n        - 8.8.4.4\n        language: nodejs\n        _id: _id\n        instance_type: app\n        container_id: container_id\n        docker_image: sdsws/node:2.0\n      properties:\n        container_id:\n          description: ID of the application's docker container\n          type: string\n        container_port:\n          description: Port assigned by the node to the application's docker container\n          example: 35000\n          format: int64\n          type: integer\n        docker_image:\n          description: Docker image used in building the application's container\n          example: sdsws/node:2.0\n          type: string\n        app_url:\n          description: The domain name of the application (DNS entry is managed by\n            GenDNS 💡)\n          example: alphadose.app.sdslabs.co\n          type: string\n        host_ip:\n          description: IPv4 address of the node\n          example: 192.168.208.206\n          type: string\n        name_servers:\n          description: The DNS NameServers used by the application's docker container\n          example:\n          - 8.8.8.8\n          - 8.8.4.4\n          items:\n            type: string\n          type: array\n        instance_type:\n          description: The kind of instance this application belongs to\n          example: app\n          type: string\n        language:\n          description: The programming language in which the application is written\n          enum:\n          - php\n          - nodejs\n          - static\n          - python2\n          - python3\n          - golang\n          - ruby\n          example: nodejs\n          type: string\n        owner:\n          description: Owner of the application\n          example: anish.mukherjee1996@gmail.com\n          type: string\n        ssh_cmd:\n          description: Command to SSH into the application's docker container\n          example: ssh -p 2222 alphadose@192.168.208.206\n          type: string\n        _id:\n          description: Application's identifier assigned by MongoDB\n          type: string\n      type: object\n    User:\n      example:\n        password: password\n        email: email\n        username: username\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n        email:\n          type: string\n      required:\n      - email\n      - password\n      - username\n      type: object\n    CreatedUser:\n      example:\n        admin: true\n        _id: _id\n        email: email\n        username: username\n      properties:\n        username:\n          type: string\n        email:\n          type: string\n        admin:\n          description: Field denoting superuser privileges\n          example: true\n          type: boolean\n        _id:\n          description: User's identifier assigned by MongoDB\n          type: string\n      type: object\n    Login:\n      example:\n        password: password\n        email: email\n      properties:\n        email:\n          type: string\n        password:\n          type: string\n      required:\n      - email\n      - password\n      type: object\n    LoginResponse:\n      example:\n        code: 200\n        expire: 2019-10-28T00:58:11+05:30\n        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n      properties:\n        code:\n          example: 200\n          format: int32\n          type: integer\n        expire:\n          example: 2019-10-28T00:58:11+05:30\n          format: date-time\n          type: string\n        token:\n          description: The token required for authentication via bearer scheme\n          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n          type: string\n      type: object\n    Database:\n      example:\n        password: password\n        name: name\n      properties:\n        name:\n          description: Name of the database\n          type: string\n        password:\n          description: Password of the database\n          type: string\n      required:\n      - name\n      - password\n      type: object\n    CreatedDatabase:\n      example:\n        owner: owner\n        host_ip: 192.168.208.208\n        port: \"35000\"\n        db_url: alphadose.db.sdslabs.co\n        language: mysql\n        user: user\n        instance_type: instance_type\n      properties:\n        user:\n          description: Username of the database\n          type: string\n        owner:\n          description: Owner of the database\n          type: string\n        db_url:\n          description: The domain name of the database (DNS entry is managed by GenDNS\n            💡)\n          example: alphadose.db.sdslabs.co\n          type: string\n        host_ip:\n          description: IPv4 address of the node where the database is deployed\n          example: 192.168.208.208\n          type: string\n        port:\n          description: Port on which the database server is running\n          example: \"35000\"\n          type: string\n        instance_type:\n          description: The kind of instance the database belongs to\n          type: string\n        language:\n          description: The type of database\n          enum:\n          - mysql\n          - mongodb\n          - postgresql\n          - redis\n          example: mysql\n          type: string\n      type: object\n    Metrics:\n      example:\n        max_memory_usage: 0.5\n        host_ip: 192.168.208.208\n        alive: true\n        online_cpus: 4\n        name: sampledose\n        memory_usage: 0.2\n        _id: _id\n        memory_limit: 1\n        cpu_usage: 0.1\n        timestamp: 1576210138\n      properties:\n        _id:\n          description: Document's identifier assigned by MongoDB\n          type: string\n        name:\n          description: Name of the application\n          example: sampledose\n          type: string\n        host_ip:\n          description: IPv4 address of the node where the application is deployed\n          example: 192.168.208.208\n          type: string\n        alive:\n          description: Is the application up and running?\n          type: boolean\n        online_cpus:\n          description: The number of available CPUs in the node\n          example: 4\n          type: integer\n        cpu_usage:\n          description: Fraction of total CPUs utilized by the application\n          example: 0.1\n          format: double\n          type: number\n        memory_usage:\n          description: Fraction of memory utilized by the application\n          example: 0.2\n          format: double\n          type: number\n        max_memory_usage:\n          description: Highest fraction of memory utilized by the application in its\n            lifetime\n          example: 0.5\n          format: double\n          type: number\n        memory_limit:\n          description: Memory (in GigaBytes) alloted to the application\n          example: 1\n          format: float\n          type: number\n        timestamp:\n          description: Unix timestamp of the metrics document\n          example: 1576210138\n          format: int64\n          type: integer\n      type: object\n    Instances:\n      example:\n        name: Facebook\n        language: nodejs\n        _id: _id\n        instance_type: app\n      properties:\n        _id:\n          description: Document's identifier assigned by MongoDB\n          type: string\n        name:\n          description: Name of the application or database\n          example: Facebook\n          type: string\n        instance_type:\n          description: The kind of instance this application belongs to\n          example: app\n          type: string\n        language:\n          description: The programming language in which the application is written\n          enum:\n          - php\n          - nodejs\n          - static\n          - python2\n          - python3\n          - golang\n          - ruby\n          example: nodejs\n          type: string\n      type: object\n    inline_response_400:\n      properties:\n        success:\n          example: false\n          type: boolean\n        error:\n          type: string\n    inline_response_500:\n      properties:\n        success:\n          example: false\n          type: boolean\n        error:\n          example: INTERNAL_SERVER_ERROR\n          type: string\n    inline_response_200:\n      example:\n        success: true\n        message: User created\n      properties:\n        success:\n          type: boolean\n        message:\n          example: User created\n          type: string\n    inline_response_401:\n      properties:\n        success:\n          example: false\n          type: boolean\n        error:\n          example: Token is expired\n          type: string\n    inline_response_200_1:\n      example:\n        data:\n        - name: Facebook\n          language: nodejs\n          _id: _id\n          instance_type: app\n        - name: Facebook\n          language: nodejs\n          _id: _id\n          instance_type: app\n        success: true\n      properties:\n        success:\n          type: boolean\n        data:\n          items:\n            $ref: '#/components/schemas/Instances'\n          type: array\n    inline_response_200_2:\n      example:\n        success: true\n      properties:\n        success:\n          type: boolean\n    inline_response_200_3:\n      example:\n        data:\n        - owner: anish.mukherjee1996@gmail.com\n          container_port: 35000\n          host_ip: 192.168.208.206\n          app_url: alphadose.app.sdslabs.co\n          ssh_cmd: ssh -p 2222 alphadose@192.168.208.206\n          name_servers:\n          - 8.8.8.8\n          - 8.8.4.4\n          language: nodejs\n          _id: _id\n          instance_type: app\n          container_id: container_id\n          docker_image: sdsws/node:2.0\n        - owner: anish.mukherjee1996@gmail.com\n          container_port: 35000\n          host_ip: 192.168.208.206\n          app_url: alphadose.app.sdslabs.co\n          ssh_cmd: ssh -p 2222 alphadose@192.168.208.206\n          name_servers:\n          - 8.8.8.8\n          - 8.8.4.4\n          language: nodejs\n          _id: _id\n          instance_type: app\n          container_id: container_id\n          docker_image: sdsws/node:2.0\n        success: true\n      properties:\n        success:\n          type: boolean\n        data:\n          items:\n            $ref: '#/components/schemas/CreatedApplication'\n          type: array\n    inline_response_200_4:\n      example:\n        success: true\n        url: master.sdslabs.co:51000\n        raw_url: 10.43.3.24:51000\n      properties:\n        success:\n          type: boolean\n        url:\n          description: The URL endpoint for accessing the browser terminal instance\n            in the form of domain_name:port\n          example: master.sdslabs.co:51000\n          type: string\n        raw_url:\n          description: The URL endpoint for accessing the browser terminal instance\n            in the form of ip_address:port\n          example: 10.43.3.24:51000\n          type: string\n    inline_response_200_5:\n      example:\n        data:\n        - 2019-10-28T05:46:19.012861400Z Server listening on port 3000\n        success: true\n      properties:\n        success:\n          type: boolean\n        data:\n          example:\n          - 2019-10-28T05:46:19.012861400Z Server listening on port 3000\n          items:\n            type: string\n          type: array\n    inline_response_200_6:\n      example:\n        data:\n        - max_memory_usage: 0.5\n          host_ip: 192.168.208.208\n          alive: true\n          online_cpus: 4\n          name: sampledose\n          memory_usage: 0.2\n          _id: _id\n          memory_limit: 1\n          cpu_usage: 0.1\n          timestamp: 1576210138\n        - max_memory_usage: 0.5\n          host_ip: 192.168.208.208\n          alive: true\n          online_cpus: 4\n          name: sampledose\n          memory_usage: 0.2\n          _id: _id\n          memory_limit: 1\n          cpu_usage: 0.1\n          timestamp: 1576210138\n        success: true\n      properties:\n        success:\n          type: boolean\n        data:\n          items:\n            $ref: '#/components/schemas/Metrics'\n          type: array\n    inline_response_200_7:\n      example:\n        data:\n        - owner: owner\n          host_ip: 192.168.208.208\n          port: \"35000\"\n          db_url: alphadose.db.sdslabs.co\n          language: mysql\n          user: user\n          instance_type: instance_type\n        - owner: owner\n          host_ip: 192.168.208.208\n          port: \"35000\"\n          db_url: alphadose.db.sdslabs.co\n          language: mysql\n          user: user\n          instance_type: instance_type\n        success: true\n      properties:\n        success:\n          type: boolean\n        data:\n          items:\n            $ref: '#/components/schemas/CreatedDatabase'\n          type: array\n    inline_response_200_8:\n      example:\n        success: true\n        admin: true\n        email: anish.mukherjee1996@gmail.com\n        username: alphadose\n      properties:\n        success:\n          type: boolean\n        username:\n          example: alphadose\n          type: string\n        email:\n          example: anish.mukherjee1996@gmail.com\n          type: string\n        admin:\n          type: boolean\n    inline_response_200_9:\n      example:\n        success: true\n        message: user deleted\n      properties:\n        success:\n          type: boolean\n        message:\n          example: user deleted\n          type: string\n    inline_object:\n      properties:\n        old_password:\n          description: The current password in use\n          example: alphadose\n          type: string\n        new_password:\n          description: The new password meant to replace the old one\n          example: betadose\n          type: string\n      type: object\n    inline_response_200_10:\n      example:\n        success: true\n        message: password updated\n      properties:\n        success:\n          type: boolean\n        message:\n          example: password updated\n          type: string\n    inline_response_200_11:\n      example:\n        data:\n        - admin: true\n          _id: _id\n          email: email\n          username: username\n        - admin: true\n          _id: _id\n          email: email\n          username: username\n        success: true\n      properties:\n        success:\n          type: boolean\n        data:\n          items:\n            $ref: '#/components/schemas/CreatedUser'\n          type: array\n    inline_response_200_12:\n      example:\n        postgresql:\n        - 192.168.208.206:9000\n        success: true\n        mysql:\n        - 192.168.208.206:9000\n        appmaker:\n        - 192.168.208.206:4000\n        gendns:\n        - 192.168.208.206:53\n        genproxy:\n        - 192.168.208.206:80\n        mongodb:\n        - 192.168.208.206:9000\n        redis:\n        - 192.168.208.206:9000\n        genssh:\n        - 192.168.208.206:2222\n        master:\n        - 192.168.208.206:3000\n      properties:\n        success:\n          type: boolean\n        master:\n          example:\n          - 192.168.208.206:3000\n          items:\n            type: string\n          type: array\n        genproxy:\n          example:\n          - 192.168.208.206:80\n          items:\n            type: string\n          type: array\n        gendns:\n          example:\n          - 192.168.208.206:53\n          items:\n            type: string\n          type: array\n        appmaker:\n          example:\n          - 192.168.208.206:4000\n          items:\n            type: string\n          type: array\n        mongodb:\n          example:\n          - 192.168.208.206:9000\n          items:\n            type: string\n          type: array\n        mysql:\n          example:\n          - 192.168.208.206:9000\n          items:\n            type: string\n          type: array\n        postgresql:\n          example:\n          - 192.168.208.206:9000\n          items:\n            type: string\n          type: array\n        redis:\n          example:\n          - 192.168.208.206:9000\n          items:\n            type: string\n          type: array\n        genssh:\n          example:\n          - 192.168.208.206:2222\n          items:\n            type: string\n          type: array\n    inline_response_200_13:\n      example:\n        success: true\n        master:\n        - 192.168.208.206:3000\n      properties:\n        success:\n          type: boolean\n        master:\n          example:\n          - 192.168.208.206:3000\n          items:\n            type: string\n          type: array\n    Application_resources:\n      description: Resources required by the application\n      example:\n        memory: 0.5\n        cpu: 0.25\n      properties:\n        cpu:\n          description: Number of virtual CPUs\n          example: 0.25\n          format: float\n          type: number\n        memory:\n          description: Memory in GigaBytes (GB)\n          example: 0.5\n          format: float\n          type: number\n  securitySchemes:\n    bearerAuth:\n      bearerFormat: JWT\n      scheme: bearer\n      type: http\n",
			"canonicalURL": "/github.com/sdslabs/gctl@c5d95e6c05aae0f28afcb9ca7f2c94e7a851586d/-/blob/client/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/sdslabs/gctl/blob/c5d95e6c05aae0f28afcb9ca7f2c94e7a851586d/client/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/admin/nodes/{type}\": get: operation \"fetchNodeByAdmin\": parameters: parse parameter \"type\": schema: at 1:22214: parse enum values: duplicate enum values: \"\\\"master\\\"\", at index 0 and 2"
}