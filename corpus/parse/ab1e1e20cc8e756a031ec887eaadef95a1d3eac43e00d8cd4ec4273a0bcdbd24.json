{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/jjs-dev/jjs"
		},
		"file": {
			"name": "openapi-gen.json",
			"size": 0,
			"path": "src/apiserver_old/engine/docs/openapi-gen.json",
			"byteSize": 21987,
			"content": "{\n  \"components\": {\n    \"parameters\": {\n      \"contest_name\": {\n        \"in\": \"path\",\n        \"name\": \"name\",\n        \"required\": true,\n        \"schema\": {\n          \"type\": \"string\"\n        }\n      },\n      \"run_id\": {\n        \"in\": \"path\",\n        \"name\": \"id\",\n        \"required\": true,\n        \"schema\": {\n          \"format\": \"uint32\",\n          \"type\": \"integer\"\n        }\n      }\n    },\n    \"schemas\": {\n      \"ApiVersion\": {\n        \"properties\": {\n          \"major\": {\n            \"description\": \"MAJOR component\",\n            \"format\": \"uint16\",\n            \"minimum\": 0.0,\n            \"type\": \"integer\"\n          },\n          \"minor\": {\n            \"description\": \"MINOR component\",\n            \"format\": \"uint16\",\n            \"minimum\": 0.0,\n            \"type\": \"integer\"\n          }\n        },\n        \"required\": [\n          \"major\",\n          \"minor\"\n        ],\n        \"type\": \"object\"\n      },\n      \"Contest\": {\n        \"properties\": {\n          \"id\": {\n            \"description\": \"Configured by human, something readable like 'olymp-2019', or 'test-contest'\",\n            \"type\": \"string\"\n          },\n          \"title\": {\n            \"description\": \"E.g. \\\"Berlandian Olympiad in Informatics. Finals. Day 3.\\\"\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"title\"\n        ],\n        \"type\": \"object\"\n      },\n      \"InvokeStatus\": {\n        \"properties\": {\n          \"code\": {\n            \"type\": \"string\"\n          },\n          \"kind\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"code\",\n          \"kind\"\n        ],\n        \"type\": \"object\"\n      },\n      \"Participation\": {\n        \"properties\": {\n          \"phase\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"phase\"\n        ],\n        \"type\": \"object\"\n      },\n      \"Problem\": {\n        \"properties\": {\n          \"name\": {\n            \"description\": \"Problem name\",\n            \"type\": \"string\"\n          },\n          \"rel_name\": {\n            \"description\": \"Problem relative name (aka problem code) as contestants see. This is usually one letter or something similar, e.g. 'A' or '3F'.\",\n            \"type\": \"string\"\n          },\n          \"title\": {\n            \"description\": \"Problem title as contestants see, e.g. \\\"Find max flow\\\".\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"rel_name\",\n          \"title\"\n        ],\n        \"type\": \"object\"\n      },\n      \"Run\": {\n        \"description\": \"Represents a run.\",\n        \"properties\": {\n          \"contest_id\": {\n            \"type\": \"string\"\n          },\n          \"id\": {\n            \"format\": \"int32\",\n            \"type\": \"integer\"\n          },\n          \"problem_name\": {\n            \"type\": \"string\"\n          },\n          \"score\": {\n            \"format\": \"int32\",\n            \"nullable\": true,\n            \"type\": \"integer\"\n          },\n          \"status\": {\n            \"allOf\": [\n              {\n                \"$ref\": \"#/components/schemas/InvokeStatus\"\n              }\n            ],\n            \"nullable\": true\n          },\n          \"toolchain_name\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"contest_id\",\n          \"id\",\n          \"problem_name\",\n          \"toolchain_name\"\n        ],\n        \"type\": \"object\"\n      },\n      \"RunLiveStatusUpdate\": {\n        \"description\": \"Represents Live Status Update\\n\\nSome fields can be missing for various reasons, it is normal that particular object will look like {liveScore: null, currentTest: null, finish: false}. Information in all fields except `finish` can be inaccurate, incorrect or outdated. You can rely on following: if `finish` is true, final judging results are available\",\n        \"properties\": {\n          \"current_test\": {\n            \"description\": \"Current running test\",\n            \"format\": \"int32\",\n            \"nullable\": true,\n            \"type\": \"integer\"\n          },\n          \"finish\": {\n            \"description\": \"Whether final status is available\",\n            \"type\": \"boolean\"\n          },\n          \"live_score\": {\n            \"description\": \"Estimation of score. Usually, final score will be greater than or equal to `live_score`\",\n            \"format\": \"int32\",\n            \"nullable\": true,\n            \"type\": \"integer\"\n          }\n        },\n        \"required\": [\n          \"finish\"\n        ],\n        \"type\": \"object\"\n      },\n      \"RunPatch\": {\n        \"properties\": {\n          \"rejudge\": {\n            \"default\": false,\n            \"description\": \"Queue for judging again\",\n            \"type\": \"boolean\"\n          },\n          \"score\": {\n            \"default\": null,\n            \"description\": \"New score (useful for custom judging)\",\n            \"format\": \"int32\",\n            \"nullable\": true,\n            \"type\": \"integer\"\n          }\n        },\n        \"type\": \"object\"\n      },\n      \"RunSimpleSubmitParams\": {\n        \"properties\": {\n          \"code\": {\n            \"description\": \"Base64-encoded source text\",\n            \"type\": \"string\"\n          },\n          \"contest\": {\n            \"description\": \"Contest where run is submitted\",\n            \"type\": \"string\"\n          },\n          \"problem\": {\n            \"description\": \"Problem name, relative to contest\",\n            \"type\": \"string\"\n          },\n          \"toolchain\": {\n            \"description\": \"Toolchain to use when judging this run\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"code\",\n          \"contest\",\n          \"problem\",\n          \"toolchain\"\n        ],\n        \"type\": \"object\"\n      },\n      \"SessionToken\": {\n        \"description\": \"Type that represents session You shouldn't do any assumptions about this type representation\",\n        \"properties\": {\n          \"data\": {\n            \"description\": \"Opaque string that represents session data On all subsequent requests, put this string as value of header `X-Jjs-Auth`\",\n            \"type\": \"string\"\n          },\n          \"raw_data\": {\n            \"description\": \"in dev mode, contains session data in unencrypted form\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"data\"\n        ],\n        \"type\": \"object\"\n      },\n      \"SimpleAuthParams\": {\n        \"properties\": {\n          \"login\": {\n            \"description\": \"Login\",\n            \"type\": \"string\"\n          },\n          \"password\": {\n            \"description\": \"Password\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"login\",\n          \"password\"\n        ],\n        \"type\": \"object\"\n      },\n      \"Toolchain\": {\n        \"properties\": {\n          \"id\": {\n            \"description\": \"Internal name, e.g. \\\"cpp.san.9.1\\\"\",\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"description\": \"Human readable name, e.g. \\\"GCC C++ v9.1 with sanitizers enables\\\"\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"name\"\n        ],\n        \"type\": \"object\"\n      },\n      \"User\": {\n        \"properties\": {\n          \"id\": {\n            \"description\": \"UUID of this user.\",\n            \"type\": \"string\"\n          },\n          \"login\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"login\"\n        ],\n        \"type\": \"object\"\n      },\n      \"UserCreateParams\": {\n        \"properties\": {\n          \"groups\": {\n            \"default\": [],\n            \"description\": \"List of groups new user should belong to\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"login\": {\n            \"description\": \"Login (must be unique)\",\n            \"type\": \"string\"\n          },\n          \"password\": {\n            \"description\": \"Password (no strength validation is performed)\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"login\",\n          \"password\"\n        ],\n        \"type\": \"object\"\n      }\n    },\n    \"securitySchemes\": {\n      \"AccessToken\": {\n        \"description\": \"This token is issued by `/auth/simple` endpoint. If it returned SessionToken `tok`, then AccessToken is \\\"Token ${tok.data}\\\"\",\n        \"in\": \"header\",\n        \"name\": \"Authorization\",\n        \"type\": \"apiKey\"\n      }\n    }\n  },\n  \"info\": {\n    \"title\": \"JJS main API\",\n    \"version\": \"\"\n  },\n  \"openapi\": \"3.0.0\",\n  \"paths\": {\n    \"/auth/simple\": {\n      \"post\": {\n        \"description\": \"In future, other means to authn will be added.\\nSee `SessionToken` documentation for more details.\",\n        \"operationId\": \"logIn\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/SimpleAuthParams\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/SessionToken\"\n                }\n              }\n            },\n            \"description\": \"ok\"\n          }\n        },\n        \"summary\": \"Login using login and password\"\n      }\n    },\n    \"/contests\": {\n      \"get\": {\n        \"operationId\": \"listContests\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Contest\"\n                  },\n                  \"type\": \"array\"\n                }\n              }\n            },\n            \"description\": \"ok\"\n          }\n        },\n        \"summary\": \"Lists contests\"\n      }\n    },\n    \"/contests/{name}\": {\n      \"get\": {\n        \"description\": \"If contest with this name does not exists, `null` is returned\",\n        \"operationId\": \"getContest\",\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/contest_name\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Contest\"\n                }\n              }\n            },\n            \"description\": \"ok\"\n          }\n        },\n        \"summary\": \"Finds contest by name\"\n      }\n    },\n    \"/contests/{name}/participation\": {\n      \"get\": {\n        \"description\": \"You should check that status is \\\"ACTIVE\\\". If it is not, you need register to contest (see updateContestParticipation).\\nOtherwise, you will not be able to submit runs\",\n        \"operationId\": \"getContestParticipation\",\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/contest_name\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Participation\"\n                }\n              }\n            },\n            \"description\": \"ok\"\n          }\n        },\n        \"summary\": \"Get information about current user participation\"\n      },\n      \"patch\": {\n        \"description\": \"Using this operation you can start patricipating in contest\",\n        \"operationId\": \"updateContestParticipation\",\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/contest_name\"\n          }\n        ],\n        \"responses\": {\n          \"204\": {\n            \"description\": \"ok\"\n          }\n        },\n        \"summary\": \"Update current user participation\"\n      }\n    },\n    \"/contests/{name}/problems\": {\n      \"get\": {\n        \"operationId\": \"listContestProblems\",\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/contest_name\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Problem\"\n                  },\n                  \"type\": \"array\"\n                }\n              }\n            },\n            \"description\": \"ok\"\n          }\n        },\n        \"summary\": \"Lists all problems in contest `name`\"\n      }\n    },\n    \"/contests/{name}/standings\": {\n      \"get\": {\n        \"operationId\": \"getContestStandings\",\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/contest_name\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\"\n                }\n              }\n            },\n            \"description\": \"ok\"\n          }\n        },\n        \"summary\": \"Returns standings as JSON object\"\n      }\n    },\n    \"/runs\": {\n      \"get\": {\n        \"operationId\": \"listRuns\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Run\"\n                  },\n                  \"type\": \"array\"\n                }\n              }\n            },\n            \"description\": \"ok\"\n          }\n        },\n        \"summary\": \"List runs\"\n      },\n      \"post\": {\n        \"operationId\": \"submitRun\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/RunSimpleSubmitParams\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Run\"\n                }\n              }\n            },\n            \"description\": \"ok\"\n          }\n        },\n        \"summary\": \"Submit run\"\n      }\n    },\n    \"/runs/{id}\": {\n      \"delete\": {\n        \"operationId\": \"deleteRun\",\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/run_id\"\n          }\n        ],\n        \"responses\": {\n          \"204\": {\n            \"description\": \"ok\"\n          }\n        },\n        \"summary\": \"Deletes run\"\n      },\n      \"get\": {\n        \"operationId\": \"getRun\",\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/run_id\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Run\"\n                }\n              }\n            },\n            \"description\": \"ok\"\n          }\n        },\n        \"summary\": \"Loads run by id\"\n      },\n      \"patch\": {\n        \"description\": \"Updates run according to given arguments\\n\\nOn success, new run state is returned\",\n        \"operationId\": \"patchRun\",\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/run_id\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/RunPatch\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Run\"\n                }\n              }\n            },\n            \"description\": \"ok\"\n          }\n        },\n        \"summary\": \"Modifies run\"\n      }\n    },\n    \"/runs/{id}/binary\": {\n      \"get\": {\n        \"operationId\": \"getRunBinary\",\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/run_id\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            },\n            \"description\": \"ok\"\n          },\n          \"204\": {\n            \"description\": \"run binary is not available\"\n          }\n        },\n        \"summary\": \"Returns run build artifact as base64-encoded JSON string\"\n      }\n    },\n    \"/runs/{id}/live\": {\n      \"get\": {\n        \"operationId\": \"getRunLiveStatus\",\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/run_id\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RunLiveStatusUpdate\"\n                }\n              }\n            },\n            \"description\": \"ok\"\n          }\n        },\n        \"summary\": \"returns incremental Live Status\"\n      }\n    },\n    \"/runs/{id}/protocol\": {\n      \"get\": {\n        \"operationId\": \"getRunProtocol\",\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/run_id\"\n          },\n          {\n            \"description\": \"If false, compilation logs will be excluded\",\n            \"in\": \"query\",\n            \"name\": \"compile_log\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          },\n          {\n            \"description\": \"If false, test data will be excluded for all tests\",\n            \"in\": \"query\",\n            \"name\": \"test_data\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          },\n          {\n            \"description\": \"If false, solution stdout\u0026stderr will be excluded for all tests\",\n            \"in\": \"query\",\n            \"name\": \"output\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          },\n          {\n            \"description\": \"If false, correct answer will be excluded for all tests\",\n            \"in\": \"query\",\n            \"name\": \"answer\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          },\n          {\n            \"description\": \"If false, resource usage will be excluded for all tests\",\n            \"in\": \"query\",\n            \"name\": \"resource_usage\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"/application/json\": {\n                \"schema\": {\n                  \"type\": \"object\"\n                }\n              }\n            },\n            \"description\": \"ok\"\n          }\n        },\n        \"summary\": \"Returns invocation protocol as JSON document\"\n      }\n    },\n    \"/runs/{id}/source\": {\n      \"get\": {\n        \"operationId\": \"getRunSource\",\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/run_id\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            },\n            \"description\": \"ok\"\n          },\n          \"204\": {\n            \"description\": \"run source is not available\"\n          }\n        },\n        \"summary\": \"Returns run source as base64-encoded JSON string\"\n      }\n    },\n    \"/system/api-version\": {\n      \"get\": {\n        \"description\": \"Version is returned in format {major: MAJOR, minor: MINOR}.\\nMAJOR component is incremented, when backwards-incompatible changes were made.\\nMINOR component is incremented, when backwards-compatible changes were made.\\n\\nIt means, that if you developed application with apiVersion X.Y, your application\\nshould assert that MAJOR = X and MINOR \u003e= Y\",\n        \"operationId\": \"apiVersion\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ApiVersion\"\n                }\n              }\n            },\n            \"description\": \"ok\"\n          }\n        },\n        \"summary\": \"Returns API version\"\n      }\n    },\n    \"/system/is-dev\": {\n      \"get\": {\n        \"description\": \"Please note that you don't have to respect this information, but following is recommended:\\n - Display it in each page/view.\\n - Change theme.\\n - On login view, add button \\\"login as root\\\".\",\n        \"operationId\": \"isDev\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"boolean\"\n                }\n              }\n            },\n            \"description\": \"ok\"\n          }\n        },\n        \"summary\": \"Returns if JJS is running in development mode.\"\n      }\n    },\n    \"/toolchains\": {\n      \"get\": {\n        \"operationId\": \"listToolchains\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Toolchain\"\n                  },\n                  \"type\": \"array\"\n                }\n              }\n            },\n            \"description\": \"ok\"\n          }\n        },\n        \"summary\": \"Lists toolchains\"\n      }\n    },\n    \"/users\": {\n      \"post\": {\n        \"operationId\": \"createUser\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/UserCreateParams\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/User\"\n                }\n              }\n            },\n            \"description\": \"ok\"\n          }\n        },\n        \"summary\": \"Creates new user\"\n      }\n    }\n  },\n  \"security\": [\n    {\n      \"AccessToken\": []\n    }\n  ]\n}",
			"canonicalURL": "/github.com/jjs-dev/jjs@bf00423f70f8a6ed508bbcb8b38840225e43cc73/-/blob/src/apiserver_old/engine/docs/openapi-gen.json",
			"externalURLs": [
				{
					"url": "https://github.com/jjs-dev/jjs/blob/bf00423f70f8a6ed508bbcb8b38840225e43cc73/src/apiserver_old/engine/docs/openapi-gen.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/runs/{id}/protocol\": get: operation \"getRunProtocol\": responses: 200: content: at 702:15: content type \"/application/json\": mime: no media type"
}