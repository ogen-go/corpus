{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/plantbreeding/BrAPI"
		},
		"file": {
			"name": "ReferenceSet.yaml",
			"size": 0,
			"path": "Specification/BrAPI-Genotyping/ReferenceSets/Schemas/ReferenceSet.yaml",
			"byteSize": 3239,
			"content": "info:\n  title: BrAPI\n  version: ''\nopenapi: 3.0.0\npaths: {}\ncomponents:\n  schemas:\n    ReferenceSet:\n      description: A `ReferenceSet` is a set of `Reference` s which typically comprise a reference assembly, such as `GRCH_38`. A `ReferenceSet` defines a common coordinate space for comparing reference-aligned experimental data.\n      type: object\n      properties:\n        assemblyPUI:\n          description: The remaining information is about the source of the sequences Public id of this reference set, such as `GRCH_37`.\n          type: string\n          example: 'doi://10.12345/fake/9876'\n        additionalInfo:\n          additionalProperties:\n            type: string\n          description: Additional arbitrary info\n          type: object\n        externalReferences: \n          $ref: '#/components/schemas/ExternalReferences'\n        description:\n          description: Optional free text description of this reference set.\n          type: string\n          example: This is an example description for an assembly\n        referenceSetDbId:\n          description: The unique identifier for a ReferenceSet\n          type: string\n          example: c1ecfef1\n        referenceSetName:\n          description: The human readable name of a ReferenceSet\n          type: string\n          example: The Best Assembly Ever\n        isDerived:\n          description: A reference set may be derived from a source if it contains additional sequences, or some of the sequences within it are derived (see the definition of `isDerived` in `Reference`).\n          format: boolean\n          type: boolean\n        md5checksum:\n          description: |-\n            Order-independent MD5 checksum which identifies this `ReferenceSet`.\n\n            To compute this checksum, make a list of `Reference.md5checksum` for all\n            `Reference` s in this set. Then sort that list, and take the MD5 hash of\n            all the strings concatenated together. Express the hash as a lower-case\n            hexadecimal string.\n          type: string\n          example: c2365e900c81a89cf74d83dab60df146\n        sourceGermplasm:\n          description: All known corresponding Germplasm\n          type: array\n          items:\n            type: object\n            properties:\n              germplasmDbId:\n                description: The ID which uniquely identifies a germplasm within the given database server\n                type: string\n                example: d4076594\n              germplasmName:\n                description: The human readable name of a germplasm\n                type: string\n                example: A0000003\n        sourceAccessions:\n          description: All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally with a version number, e.g. `NC_000001.11`.\n          items:\n            type: string\n          type: array\n          example: [\"A0000002\", \"A0009393\"]\n        sourceURI:\n          description: Specifies a FASTA format file/string.\n          type: string\n          example: https://wiki.brapi.org/files/demo.fast\n        commonCropName:\n          description: Common name for the crop \n          type: string\n          example: Maize\n        species:\n          $ref: '#/components/schemas/OntologyTerm'\n\n",
			"canonicalURL": "/github.com/plantbreeding/BrAPI@a45723dba8753a1c1177ec8f7759d57ebcf5f5b1/-/blob/Specification/BrAPI-Genotyping/ReferenceSets/Schemas/ReferenceSet.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/plantbreeding/BrAPI/blob/a45723dba8753a1c1177ec8f7759d57ebcf5f5b1/Specification/BrAPI-Genotyping/ReferenceSets/Schemas/ReferenceSet.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"ReferenceSet\": parse schema: property \"externalReferences\": parse schema: resolve \"#/components/schemas/ExternalReferences\": find schema: resolve \"#/components/schemas/ExternalReferences\": can't find value for \"components/schemas/ExternalReferences\""
}