{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/SecureIdentityAlliance/osia"
		},
		"file": {
			"name": "notification.yaml",
			"size": 0,
			"path": "src/doc/yaml/notification.yaml",
			"byteSize": 13221,
			"content": "\r\n# (c) Secure Identity Alliance\r\n\r\nopenapi: 3.0.0\r\ninfo:\r\n  description: \u003e\r\n    The OSIA Notification Interface.\r\n    \r\n    Notifications are guaranteed to be delivered at least once. In some situation,\r\n    it is possible they are delivered twice.\r\n\r\n    Change log:\r\n    \r\n    - 1.2.0:\r\n      - Add error structure on 400 errors\r\n      - Force additionalProperties to false when extension is not allowed\r\n    - 1.1.0:\r\n      - Addition of security\r\n      - Rename operation ID to be consistent with the other services\r\n    - 1.0.0: Initial version\r\n\r\n  version: 1.2.0\r\n  title: OSIA Notification Interface\r\n  license:\r\n    name: SIA\r\n    url: \"https://raw.githubusercontent.com/SecureIdentityAlliance/osia/master/LICENSE\"\r\ntags:\r\n  - name: Subscriber\r\n  - name: Publisher\r\nservers:\r\n  - url: https://notification.com/\r\npaths:\r\n  /v1/subscriptions:\r\n    post:\r\n      summary: Subscribe to a topic\r\n      description: |\r\n        Subscribes a client to receive event notification.\r\n        \r\n        Subscriptions are idempotent. Subscribing twice for the same topic and\r\n        endpoint (protocol, address) will return the same subscription ID and the\r\n        subscriber will receive only once the notifications.\r\n      security:\r\n        - BearerAuth: [notif.sub.write]\r\n      operationId: subscribe\r\n      tags:\r\n        - Subscriber\r\n      parameters:\r\n        - name: topic\r\n          in: query\r\n          required: true\r\n          description: The name of the topic for which notifications will be sent\r\n          schema:\r\n            type: string\r\n        - name: protocol\r\n          in: query\r\n          required: false\r\n          description: The protocol used to send the notification\r\n          schema:\r\n            type: string\r\n            enum: [http, email]\r\n        - name: address\r\n          in: query\r\n          required: true\r\n          description: the endpoint address, where the notifications will be sent.\r\n          schema:\r\n            type: string\r\n            example: https://tonys-server.com\r\n        - name: policy\r\n          in: query\r\n          required: false\r\n          description: |\r\n            The delivery policy, expressing what happens when the message cannot be delivered.\r\n            \r\n            If not specified, retry will be done every hour for 7 days.\r\n            \r\n            The value is a set of integer separated by comma:\r\n            \r\n            - countdown: the number of seconds to wait before retrying. Default: 3600.\r\n            - max: the maximum max number of retry. -1 indicates infinite retry. Default: 168\r\n          schema:\r\n            type: string\r\n            example: \"3600,-1\"\r\n      responses:\r\n        200:\r\n          description: Subscription successfully created. Waiting for confirmation message.\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Subscription'\r\n        400:\r\n          description: Bad request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        500:\r\n          description: Unexpected error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n      callbacks:\r\n        onEvent:\r\n          # when event is sent, it will be sent to the `address` provided\r\n          # when making the subscription\r\n          '{$request.query.address}':\r\n            post:\r\n              operationId: notificationCB\r\n              parameters:\r\n                - name: message-type\r\n                  in: header\r\n                  required: true\r\n                  description: the type of the message\r\n                  schema:\r\n                    type: string\r\n                    enum: [SubscriptionConfirmation,Notification]\r\n                - name: subscription-id\r\n                  in: header\r\n                  required: false\r\n                  description: the unique ID of the subscription\r\n                  schema:\r\n                    type: string\r\n                - name: message-id\r\n                  in: header\r\n                  required: true\r\n                  description: the unique ID of the message\r\n                  schema:\r\n                    type: string\r\n                - name: topic-id\r\n                  in: header\r\n                  required: true\r\n                  description: the unique ID of the topic\r\n                  schema:\r\n                    type: string\r\n              requestBody:\r\n                description: The message\r\n                content:\r\n                  application/json:\r\n                    schema:\r\n                      $ref: '#/components/schemas/Message'\r\n              responses:\r\n                200:\r\n                  description: Message received and processed.\r\n                500:\r\n                  description: Unexpected error\r\n                  content:\r\n                    application/json:\r\n                      schema:\r\n                        $ref: '#/components/schemas/Error'\r\n\r\n    get:\r\n      summary: Get all subscriptions\r\n      operationId: listSubscription\r\n      security:\r\n        - BearerAuth: [notif.sub.read]\r\n      tags:\r\n        - Subscriber\r\n      responses:\r\n        200:\r\n          description: Get all subscriptions\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/Subscription'\r\n        500:\r\n          description: Unexpected error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n            \r\n  /v1/subscriptions/{uuid}:\r\n    delete:\r\n      summary: Unsubscribe from a topic\r\n      description: Unsubscribes a client from receiving notifications for a topic\r\n      operationId: unsubscribe\r\n      security:\r\n        - BearerAuth: [notif.sub.write]\r\n      tags:\r\n        - Subscriber\r\n      parameters:\r\n        - name: uuid\r\n          in: path\r\n          required: true\r\n          description: the unique ID returned when the subscription was done\r\n          schema:\r\n            type: string\r\n      responses:\r\n        204:\r\n          description: Subscription successfully removed\r\n        400:\r\n          description: Bad request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        404:\r\n          description: Subscription not found\r\n        500:\r\n          description: Unexpected error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n  /v1/subscriptions/confirm:\r\n    get:\r\n      summary: Confirm the subscription\r\n      description: |\r\n        Confirm a subscription\r\n      operationId: confirm\r\n      security:\r\n        - BearerAuth: [notif.sub.write]\r\n      tags:\r\n        - Subscriber\r\n      parameters:\r\n        - name: token\r\n          in: query\r\n          required: true\r\n          description: the token sent to the endpoint\r\n          schema:\r\n            type: string\r\n      responses:\r\n        200:\r\n          description: Subscription successfully confirmed\r\n        400:\r\n          description: Bad request (invalid token)\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        500:\r\n          description: Unexpected error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n  \r\n  \r\n  /v1/topics:\r\n    post:\r\n      summary: Create a topic\r\n      description: Create a new topic. This service is idempotent.\r\n      operationId: createTopic\r\n      security:\r\n        - BearerAuth: [notif.topic.write]\r\n      tags:\r\n        - Publisher\r\n      parameters:\r\n        - name: name\r\n          in: query\r\n          required: true\r\n          description: The topic name\r\n          schema:\r\n            type: string\r\n      responses:\r\n        200:\r\n          description: Topic was created.\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Topic'\r\n        400:\r\n          description: Bad request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        500:\r\n          description: Unexpected error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n    get:\r\n      summary: Get all topics\r\n      operationId: listTopics\r\n      security:\r\n        - BearerAuth: [notif.topic.read]\r\n      tags:\r\n        - Publisher\r\n      responses:\r\n        200:\r\n          description: Get all topics\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/Topic'\r\n        500:\r\n          description: Unexpected error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n  /v1/topics/{uuid}:\r\n    delete:\r\n      summary: Delete a topic\r\n      description: Delete a topic\r\n      operationId: deleteTopic\r\n      security:\r\n        - BearerAuth: [notif.topic.write]\r\n      tags:\r\n        - Publisher\r\n      parameters:\r\n        - name: uuid\r\n          in: path\r\n          required: true\r\n          description: the unique ID returned when the topic was created\r\n          schema:\r\n            type: string\r\n      responses:\r\n        204:\r\n          description: Topic successfully removed\r\n        400:\r\n          description: Bad request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        404:\r\n          description: Topic not found\r\n        500:\r\n          description: Unexpected error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n  /v1/topics/{uuid}/publish:\r\n    post:\r\n      summary: Post a notification to a topic.\r\n      operationId: publish\r\n      security:\r\n        - BearerAuth: [notif.topic.publish]\r\n      tags:\r\n        - Publisher\r\n      parameters:\r\n        - name: uuid\r\n          in: path\r\n          required: true\r\n          description: the unique ID of the topic\r\n          schema:\r\n            type: string\r\n        - name: subject\r\n          in: query\r\n          required: false\r\n          description: the subject of the message.\r\n          schema:\r\n            type: string\r\n      requestBody:\r\n        description: Message posted\r\n        required: true\r\n        content:\r\n          plain/text:\r\n            schema:\r\n              type: string\r\n      responses:\r\n        200:\r\n          description: Notification published\r\n        400:\r\n          description: Bad request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        500:\r\n          description: Unexpected error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\ncomponents:\r\n  securitySchemes:\r\n    BearerAuth:\r\n      type: http\r\n      scheme: bearer\r\n      bearerFormat: JWT\r\n  schemas:\r\n    Error:\r\n      type: object\r\n      required:\r\n        - code\r\n        - message\r\n      properties:\r\n        code:\r\n          type: integer\r\n          format: int32\r\n        message:\r\n          type: string\r\n      additionalProperties: false\r\n    Message:\r\n      type: object\r\n      required:\r\n        - type\r\n        - message\r\n      properties:\r\n        type:\r\n          type: string\r\n          enum: [SubscriptionConfirmation, Notification]\r\n        token:\r\n          type: string\r\n          description: Confirmation token, also available in subscribeURL\r\n        topic:\r\n          type: string\r\n        message:\r\n          type: string\r\n        messageId:\r\n          type: string\r\n        subject:\r\n          type: string\r\n        subscribeURL:\r\n          type: string\r\n          format: uri\r\n          description: URL to visit to confirm the subscription to a topic\r\n        timestamp:\r\n          type: string\r\n          format: date-time\r\n      additionalProperties: false\r\n    Topic:\r\n      type: object\r\n      properties:\r\n        uuid:\r\n          type: string\r\n          description: The unique ID of the topic\r\n        name:\r\n          type: string\r\n      additionalProperties: false\r\n    Subscription:\r\n      type: object\r\n      properties:\r\n        uuid:\r\n          type: string\r\n          description: The unique ID of the subscription\r\n        topic:\r\n          type: string\r\n          description: Topic unique ID\r\n        protocol:\r\n          type: string\r\n          enum: [http, email]\r\n        address:\r\n          type: string\r\n        policy:\r\n          type: string\r\n        active:\r\n          type: boolean\r\n          description: Status indicating if the subscription was confirmed or not.\r\n      additionalProperties: false\r\n      \r\n",
			"canonicalURL": "/github.com/SecureIdentityAlliance/osia@4b614e5041670c21188792cfa71ad71ad23f2ce7/-/blob/src/doc/yaml/notification.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/SecureIdentityAlliance/osia/blob/4b614e5041670c21188792cfa71ad71ad23f2ce7/src/doc/yaml/notification.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/v1/subscriptions\": get: operation \"listSubscription\": security: at 1:2439: list of scopes MUST be empty for \"type\" \"http\""
}