{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bakdata/quick"
		},
		"file": {
			"name": "Quick-Manager-v1.yaml",
			"size": 0,
			"path": "openapi/spec/Quick-Manager-v1.yaml",
			"byteSize": 9501,
			"content": "openapi: 3.0.0\n\ninfo:\n  version: 1.0.0\n  title: Quick Manager\n\nservers:\n  - url: http://quick-manager/\n    description: Production server\n\npaths:\n  /gateway:\n    post:\n      summary: Creates a new gateway\n      operationId: createGateway\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: 'schemas.yaml#/components/schemas/GatewayCreationData'\n      responses:\n        200:\n          $ref: 'responses.yaml#/components/responses/Success'\n        401:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n        default:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n\n\n  /gateways:\n    get:\n      summary: List all deployed gateways\n      operationId: listAllGateways\n      responses:\n        200:\n          description: List all informations about the deployed gateways\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: 'schemas.yaml#/components/schemas/GatewayDescription'\n\n  /gateway/{name}:\n    parameters:\n      - $ref: 'parameters.yaml#/components/parameters/gatewayNameParam'\n    get:\n      summary: Retrieves information about a gateway\n      operationId: getGateway\n      responses:\n        200:\n          description: All information about the gateway\n          content:\n            application/json:\n              schema:\n                $ref: 'schemas.yaml#/components/schemas/GatewayDescription'\n        401:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n        default:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n    delete:\n      summary: Deletes a gateway\n      operationId: deleteGateway\n      responses:\n        200:\n          $ref: 'responses.yaml#/components/responses/Success'\n        401:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n        default:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n\n  /gateway/{name}/schema:\n    post:\n      summary: Creates a new GraphQL schema\n      operationId: createSchema\n      parameters:\n        - $ref: 'parameters.yaml#/components/parameters/gatewayNameParam'\n      requestBody:\n        description: GraphQL schema\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: 'schemas.yaml#/components/schemas/SchemaData'\n      responses:\n        200:\n          $ref: 'responses.yaml#/components/responses/Success'\n        401:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n        default:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n\n  /gateway/{name}/schema/{type}/graphql:\n    get:\n      summary: Returns the Gateway schema in GraphQL format\n      operationId: getGraphqlWriteSchema\n      parameters:\n        - $ref: 'parameters.yaml#/components/parameters/gatewayNameParam'\n        - $ref: 'parameters.yaml#/components/parameters/gatewaySchemaTypeParam'\n      responses:\n        200:\n          description: Gateway schema in GraphQL Format\n          content:\n            application/json:\n              schema:\n                $ref: 'schemas.yaml#/components/schemas/SchemaData'\n        401:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n        default:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n\n  /gateway/{name}/schema/{type}/avro:\n    get:\n      summary: Returns the Gateway schema in Avro format\n      operationId: getAvroWriteSchema\n      parameters:\n        - $ref: 'parameters.yaml#/components/parameters/gatewayNameParam'\n        - $ref: 'parameters.yaml#/components/parameters/gatewaySchemaTypeParam'\n      responses:\n        200:\n          description: Gateway schema in Avro Format\n          content:\n            application/json:\n              schema:\n                $ref: 'schemas.yaml#/components/schemas/SchemaData'\n        401:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n        default:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n\n  /topics:\n    get:\n      summary: List all registered topic\n      operationId: listAllTopics\n      responses:\n        200:\n          description: List of all information about the registered topics\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: 'schemas.yaml#/components/schemas/TopicData'\n        401:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n        default:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n\n  /topic/{name}:\n    parameters:\n      - $ref: 'parameters.yaml#/components/parameters/topicNameParam'\n    get:\n      summary: Gets information about a topic\n      operationId: getTopicInformation\n      responses:\n        200:\n          description: All information about the topic\n          content:\n            application/json:\n              schema:\n                $ref: 'schemas.yaml#/components/schemas/TopicData'\n        401:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n        default:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n    post:\n      summary: Creates a new topic\n      operationId: createNewTopic\n      parameters:\n        - $ref: 'parameters.yaml#/components/parameters/keyType'\n        - $ref: 'parameters.yaml#/components/parameters/valueType'\n      requestBody:\n        description: Additional topic data\n        required: false\n        content:\n          application/json:\n            schema:\n              $ref: 'schemas.yaml#/components/schemas/TopicCreationData'\n      responses:\n        200:\n          $ref: 'responses.yaml#/components/responses/Success'\n        401:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n        default:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n    delete:\n      summary: Deletes topic\n      operationId: deleteTopic\n      responses:\n        200:\n          $ref: 'responses.yaml#/components/responses/Success'\n        401:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n        default:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n\n  /topic/mirror:\n    post:\n      summary: Creates a mirror for a topic\n      operationId: createMirror\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: 'schemas.yaml#/components/schemas/MirrorCreationData'\n      responses:\n        200:\n          $ref: 'responses.yaml#/components/responses/Success'\n        401:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n        default:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n\n  /topic/{name}/mirror:\n    parameters:\n      - $ref: 'parameters.yaml#/components/parameters/topicNameParam'\n    delete:\n      summary: Deletes mirror of topic\n      operationId: deleteMirror\n      responses:\n        200:\n          $ref: 'responses.yaml#/components/responses/Success'\n        default:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n\n  /application:\n    post:\n      summary: Deploys a new application\n      operationId: deployApplication\n      requestBody:\n        description: ApplicationCreationData object containing the app's information\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: 'schemas.yaml#/components/schemas/ApplicationCreationData'\n      responses:\n        200:\n          $ref: 'responses.yaml#/components/responses/Success'\n        401:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n        default:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n\n  /applications:\n    get:\n      summary: Retrieves all deployed quick applications\n      operationId: getApplications\n      responses:\n        200:\n          # TODO add response schema for all applications\n          $ref: 'responses.yaml#/components/responses/Success'\n        401:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n        default:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n\n  /application/{name}:\n    parameters:\n      - $ref: 'parameters.yaml#/components/parameters/applicationNameParam'\n    get:\n      summary: Retrieves information about the given application\n      operationId: getApplicationInformation\n      responses:\n        200:\n          # TODO add response schema for a single application\n          $ref: 'responses.yaml#/components/responses/Success'\n        401:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n        default:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n\n    delete:\n      summary: Deletes an application\n      operationId: deleteApplication\n      responses:\n        200:\n          $ref: 'responses.yaml#/components/responses/Success'\n        401:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n        default:\n          $ref: 'responses.yaml#/components/responses/DefaultError'\n\ncomponents:\n  securitySchemes:\n    ApiKeyAuth: # Name for the security scheme\n      type: apiKey\n      in: header       # Place the key is set\n      name: X-API-Key  # Name of the header\n\n# Apply the API key globally to all operations\nsecurity:\n  - ApiKeyAuth: [ ]   # Use the same name as under securitySchemes\n",
			"canonicalURL": "/github.com/bakdata/quick@0e09aaba24e7f9b1d976a16968930dfc98069d21/-/blob/openapi/spec/Quick-Manager-v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/bakdata/quick/blob/0e09aaba24e7f9b1d976a16968930dfc98069d21/openapi/spec/Quick-Manager-v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/application\": post: operation \"deployApplication\": requestBody: parse content: application/json: schema: parse schema: at 1:300: external \"schemas.yaml\": get: file: local file reference is not allowed"
}