{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/grycap/oscar"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "docs/api.yaml",
			"byteSize": 14342,
			"content": "openapi: 3.0.3\ninfo:\n  title: OSCAR API\n  version: v2.0.0\n  license:\n    name: Apache 2.0\n    url: 'https://www.apache.org/licenses/LICENSE-2.0'\n  description: OSCAR API documentation\n  contact:\n    name: Sebasti√°n Risco\n    email: srisco@i3m.upv.es\nexternalDocs:\n  description: More documentation available on GitHub\n  url: 'https://github.com/grycap/oscar'\npaths:\n  /system/services:\n    get:\n      summary: List services\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Service'\n        '401':\n          description: Unauthorized\n        '500':\n          description: Internal Server Error\n      operationId: ListServices\n      description: List all created services\n      security:\n        - basicAuth: []\n      tags:\n        - services\n    post:\n      summary: Create service\n      operationId: CreateService\n      responses:\n        '201':\n          description: Created\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '500':\n          description: Internal Server Error\n      description: Create a service\n      security:\n        - basicAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Service'\n      tags:\n        - services\n    put:\n      summary: Update service\n      operationId: UpdateService\n      responses:\n        '204':\n          description: No Content\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not Found\n        '500':\n          description: Internal Server Error\n      description: Update a service\n      security:\n        - basicAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Service'\n      tags:\n        - services\n  '/system/services/{serviceName}':\n    parameters:\n      - schema:\n          type: string\n        name: serviceName\n        in: path\n        required: true\n    get:\n      summary: Read service\n      tags:\n        - services\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Service'\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not Found\n        '500':\n          description: Internal Server Error\n      operationId: ReadService\n      security:\n        - basicAuth: []\n      description: Read a service\n    delete:\n      summary: Delete service\n      operationId: DeleteService\n      responses:\n        '204':\n          description: No Content\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not Found\n        '500':\n          description: Internal Server Error\n      description: Delete a service\n      security:\n        - basicAuth: []\n      tags:\n        - services\n  '/system/logs/{serviceName}':\n    parameters:\n      - schema:\n          type: string\n        name: serviceName\n        in: path\n        required: true\n    get:\n      summary: List jobs\n      tags:\n        - logs\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  jobName:\n                    allOf:\n                      - $ref: '#/components/schemas/JobInfo'\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not Found\n        '500':\n          description: Internal Server Error\n      operationId: ListJobs\n      security:\n        - basicAuth: []\n      description: List all jobs with their status\n    delete:\n      summary: Delete jobs\n      operationId: DeleteJobs\n      responses:\n        '204':\n          description: No Content\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not Found\n        '500':\n          description: Internal Server Error\n      description: Delete all jobs from a service.\n      security:\n        - basicAuth: []\n      parameters:\n        - schema:\n            type: boolean\n          in: query\n          name: all\n          description: 'If \"all\" is true delete pending, running and failed jobs, else delete only completed jobs (default: false)'\n      tags:\n        - logs\n  '/system/logs/{serviceName}/{jobName}':\n    parameters:\n      - schema:\n          type: string\n        name: serviceName\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: jobName\n        in: path\n        required: true\n    get:\n      summary: Get logs\n      tags:\n        - logs\n      responses:\n        '200':\n          description: OK\n          content:\n            text/plain:\n              schema:\n                type: string\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not Found\n        '500':\n          description: Internal Server Error\n      operationId: GetJobLogs\n      description: Get the logs from a job\n      security:\n        - basicAuth: []\n      parameters:\n        - schema:\n            type: boolean\n          in: query\n          name: timestamps\n    delete:\n      summary: Delete job\n      operationId: DeleteJob\n      responses:\n        '204':\n          description: No Content\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not Found\n        '500':\n          description: Internal Server Error\n      description: Delete a job\n      security:\n        - basicAuth: []\n      tags:\n        - logs\n  /system/info:\n    get:\n      summary: Get info\n      tags:\n        - info\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        '401':\n          description: Unauthorized\n        '500':\n          description: Internal Server Error\n      operationId: GetInfo\n      description: Get system info\n      security:\n        - basicAuth: []\n  /health:\n    get:\n      summary: Health\n      tags:\n        - health\n      responses:\n        '200':\n          description: OK\n      operationId: HealthCheck\n      description: Health check\n  '/job/{serviceName}':\n    parameters:\n      - schema:\n          type: string\n        name: serviceName\n        in: path\n        required: true\n    post:\n      summary: Invoke service (async)\n      operationId: InvokeAsync\n      responses:\n        '201':\n          description: Created\n        '404':\n          description: Not Found\n        '500':\n          description: Internal Server Error\n      tags:\n        - async\n      security:\n        - token: []\n      description: Invoke a service asynchronously (create kubernetes job)\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n              format: binary\n            examples: {}\n        description: Event\n  /system/config:\n    get:\n      summary: Your GET endpoint\n      tags:\n        - config\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Config'\n        '401':\n          description: ''\n        '500':\n          description: Internal Server Error\n      operationId: GetConfig\n      description: Get system configuration\n      security:\n        - basicAuth: []\n  '/run/{serviceName}':\n    parameters:\n      - schema:\n          type: string\n        name: serviceName\n        in: path\n        required: true\n    post:\n      summary: Invoke service (sync)\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: Not Found\n        '500':\n          description: Internal Server Error\n      operationId: InvokeSync\n      tags:\n        - sync\n      security:\n        - token: []\n      description: Invoke a service synchronously (a Serverless backend is required)\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n              format: binary\n        description: Event\ncomponents:\n  schemas:\n    Service:\n      title: Service\n      type: object\n      properties:\n        name:\n          type: string\n        cluster_id:\n          type: string\n        memory:\n          type: string\n        cpu:\n          type: string\n        enable_gpu:\n          type: bool\n          default: false\n        total_memory:\n          type: string\n        total_cpu:\n          type: string\n        synchronous:\n          type: object\n          properties:\n            min_scale:\n              type: integer\n              default: 0\n            max_scale:\n              type: integer\n              default: 0\n        replicas:\n          type: array\n          items:\n            type: object\n            properties:\n              type: \n                type: string\n              cluster_id: \n                type: string\n              service_name: \n                type: string\n              url: \n                type: string\n              ssl_verify: \n                type: boolean\n                default: true\n              priority: \n                type: integer\n                default: 0\n              headers:\n                type: object\n                additionalProperties:\n                  type: string\n                  properties:\n                    value:\n                      type: string\n        rescheduler_threshold:\n          type: string\n        token:\n          type: string\n          readOnly: true\n        log_level:\n          type: string\n        image:\n          type: string\n        alpine:\n          type: boolean\n          default: false\n        script:\n          type: string\n        image_pull_secrets: \n          type: array\n          items: \n            type: string\n        environment:\n          type: object\n          properties:\n            Variables:\n              type: object\n              additionalProperties:\n                type: string\n        annotations:\n          type: object\n          additionalProperties:\n            type: string\n        labels:\n          type: object\n          additionalProperties:\n            type: string\n        input:\n          type: array\n          items:\n            $ref: '#/components/schemas/StorageIOConfig'\n        output:\n          type: array\n          items:\n            $ref: '#/components/schemas/StorageIOConfig'\n        storage_providers:\n          $ref: '#/components/schemas/StorageProviders'\n        clusters:\n          $ref: '#/components/schemas/Clusters'\n      required:\n        - name\n        - image\n        - script\n    StorageIOConfig:\n      title: StorageIOConfig\n      type: object\n      properties:\n        storage_provider:\n          type: string\n        path:\n          type: string\n        suffix:\n          type: array\n          items:\n            type: string\n        prefix:\n          type: array\n          items:\n            type: string\n    StorageProviders:\n      title: StorageProviders\n      type: object\n      properties:\n        s3:\n          type: object\n          properties:\n            id:\n              type: object\n              properties:\n                access_key:\n                  type: string\n                secret_key:\n                  type: string\n                region:\n                  type: string\n        minio:\n          type: object\n          properties:\n            id:\n              $ref: '#/components/schemas/MinIOProvider'\n        onedata:\n          type: object\n          properties:\n            id:\n              type: object\n              properties:\n                oneprovider_host:\n                  type: string\n                token:\n                  type: string\n                space:\n                  type: string\n        webdav:\n          type: object\n          properties:\n            id:\n              type: object\n              properties:\n                hostname:\n                  type: string\n                login:\n                  type: string\n                password:\n                  type: string\n    Clusters:\n      title: Clusters\n      type: object\n      properties:\n        id:\n          type: object\n          properties:\n            endpoint:\n              type: string\n            auth_user:\n              type: string\n            auth_password:\n              type: string\n            ssl_verify:\n              type: boolean\n    JobInfo:\n      title: JobInfo\n      type: object\n      properties:\n        status:\n          type: string\n        creation_time:\n          type: string\n        start_time:\n          type: string\n        finish_time:\n          type: string\n    Info:\n      title: Info\n      type: object\n      properties:\n        version:\n          type: string\n        git_commit:\n          type: string\n        architecture:\n          type: string\n        kubernetes_version:\n          type: string\n        serverless_backend:\n          type: object\n          properties:\n            name:\n              type: string\n            version:\n              type: string\n    Config:\n      title: Config\n      type: object\n      properties:\n        minio_provider:\n          $ref: '#/components/schemas/MinIOProvider'\n        name:\n          type: string\n        namespace:\n          type: string\n        gpu_avaliable:\n          type: bool\n        serverless_backend:\n          type: string\n        yunikorn_enable:\n          type: boolean\n    MinIOProvider:\n      title: MinIOProvider\n      type: object\n      properties:\n        endpoint:\n          type: string\n        region:\n          type: string\n        secret_key:\n          type: string\n        access_key:\n          type: string\n        verify:\n          type: boolean\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n      description: ''\n    token:\n      type: http\n      scheme: bearer\n      description: ''\ntags:\n  - name: services\n  - name: logs\n  - name: sync\n  - name: async\n  - name: info\n  - name: health\nservers:\n  - url: 'https://localhost'\n    description: ''\n",
			"canonicalURL": "/github.com/grycap/oscar@b4fe596d16066bf38268685861f909ca5f1d425a/-/blob/docs/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/grycap/oscar/blob/b4fe596d16066bf38268685861f909ca5f1d425a/docs/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"Config\": resolve \"#/components/schemas/Config\": property \"gpu_avaliable\": at docs/api.yaml:571:17: type: unexpected schema type: \"bool\""
}