{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stichtingsem/technology-prototype"
		},
		"file": {
			"name": "course.v1.yaml",
			"size": 0,
			"path": "reference/course.v1.yaml",
			"byteSize": 18874,
			"content": "openapi: 3.0.0\ninfo:\n  title: 'Stream, Progress \u0026 Results API'\n  version: '1.0'\n  description: |-\n    This API enables a learning application to provide information about the specific activities available within the application that can be scheduled within an LMS.  This data is always exchanged in the context of a school, as not only can information vary by school (e.g. a learning application may allow material to be modified or configured specific to the needs of that organisation), but this API enables the sharing of progress and results - which is sensitive data and as such we must ensure that it is only shared after approval by the school to exchange this information between the LA and the LMS.\n\n    ### Event Access\n\n    |Events|Event Data|Rationale|\n    |------|---------|\n    |la.result| // as per XAPI statements |To enable the LMS to receive XAPI statements after registering webhook for a specific school|\n    |la.stream| // as per Course |To enable the LMS to receive updates to course information for a specific school|\n\n    ## Scopes and Data\n\n    - la.stream.school\n    - la.results.school\n  contact:\n    name: Stichting SEM\n    url: 'https://stichtingsem.org/'\nservers:\n  - url: 'https://example.stichtingsem.org/api'\n    description: course\npaths:\n  /stream:\n    x-tags:\n      - stream\n    get:\n      summary: Get information about all of the courses available within LA based on Stream identifier (this identifier is shared in the catalogue API)\n      tags: []\n      parameters:\n        - in: query\n          name: streamId\n          description: |\n            Optionally filter by a specific stream identifier\n          schema:\n            type: string\n            example: havo-1\n        - in: query\n          name: start\n          description: 'Start point for pagination of results, defaults to 0,'\n          schema:\n            type: integer\n            format: int32\n          examples:\n            default:\n              value: 0d\n              summary: The start point for pagination\n        - in: query\n          name: limit\n          description: 'Limit of number of results returned by page, defaults to 20 with max 100.'\n          schema:\n            type: integer\n            maximum: 100\n            format: int32\n          examples:\n            default:\n              value: 20\n              summary: The default value if none is provided\n            max:\n              value: 100\n              summary: The largest recommended page size\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/StreamCourseRef'\n      operationId: get-stream-courses\n      description: Get courses from the catalogue - either all or those matching specific criteria.\n  '/stream/{id}':\n    x-tags:\n      - stream\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n    get:\n      summary: Get metadata about a specific stream course by ID\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StreamCourse'\n      operationId: get-stream-course\n      description: Get a specific course by stream ID - returns basic metadata.\n  '/stream/{id}/cmi5e-course':\n    x-tags:\n      - stream\n    parameters:\n      - in: path\n        name: id\n        schema:\n          type: string\n        required: true\n      - in: query\n        name: activityType\n        description: |\n          Filter to only specific activityTypes\n        schema:\n          type: string\n        example: 'reference, excercise, arrangement, user-arrangement'\n    get:\n      summary: Get the CMI5 Course content for a given stream\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/CMI5.Course'\n      operationId: get-stream-course-cmi5\n      description: Get a specific course by stream ID - returns full CMI5 Extended Course XML\n  '/stream/{id}/results':\n    x-tags:\n      - results\n      - stream\n    parameters:\n      - in: path\n        schema:\n          type: string\n        name: id\n        required: true\n      - in: query\n        name: start\n        description: 'Start point for pagination of results, defaults to 0,'\n        schema:\n          type: integer\n          format: int32\n        examples:\n          default:\n            value: 0d\n            summary: The start point for pagination\n      - in: query\n        name: limit\n        description: 'Limit of number of results returned by page, defaults to 20 with max 100.'\n        schema:\n          type: integer\n          maximum: 100\n          format: int32\n        examples:\n          default:\n            value: 20\n            summary: The default value if none is provided\n          max:\n            value: 100\n            summary: The largest recommended page size\n      - in: query\n        name: schoolYear\n        description: School year the results were recorded in\n        schema:\n          type: string\n        examples:\n          default:\n            value: 2020-2021\n            summary: The default value if none is provided          \n    get:\n      summary: 'Get XAPI statements related to a specific course, newest statements first'\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Statement'\n      operationId: get-course-statements\n      description: Get statements related to a specific course\n  '/stream/{id}/student/{studentId}/results':\n    x-tags:\n      - stream\n      - results\n    parameters:\n      - in: path\n        schema:\n          type: string\n        name: id\n        description: Unique stream identifier\n        required: true\n      - in: path\n        schema:\n          type: string\n        name: studentId\n        description: Unique student identifier\n        required: true\n      - in: query\n        name: start\n        description: 'Start point for pagination of results, defaults to 0,'\n        schema:\n          type: integer\n          format: int32\n        examples:\n          default:\n            value: 0d\n            summary: The start point for pagination\n      - in: query\n        name: limit\n        description: 'Limit of number of results returned by page, defaults to 20 with max 100.'\n        schema:\n          type: integer\n          maximum: 100\n          format: int32\n        examples:\n          default:\n            value: 20\n            summary: The default value if none is provided\n          max:\n            value: 100\n            summary: The largest recommended page size\n      - in: query\n        name: schoolYear\n        description: School year the results were recorded in\n        schema:\n          type: string\n        examples:\n          default:\n            value: 2020-2021\n            summary: The default value if none is provided    \n    get:\n      summary: 'Get XAPI statements related to a specific student, newest statements first'\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Statement'\n      operationId: get-user-statements\n      description: Get statements for a specific user\ncomponents:\n  schemas:\n    StreamCourse:\n      title: Stream Course\n      type: object\n      description: 'A course that is available from a learning application, response is a CMI5 Course - we need to decide if we convert the XSD into OpenAPI spec definitions or leave it open here.'\n      x-tags:\n        - stream\n    StreamCourseRef:\n      title: Stream Course Reference\n      type: object\n      description: A reference to a course provided by a learning application - used to enable searching / filtering.\n      x-tags:\n        - stream\n      properties:\n        id:\n          type: string\n          description: A unique identifier\n        name:\n          type: string\n          description: A short name\n        streamId:\n          type: string\n          description: Description of the author (in cases not the provider of the LA)\n        relatedProducts:\n          type: array\n          description: |\n            An array of related products this course applies to\n          items:\n            type: string\n        levelSubjects:\n          type: array\n          description: The set of levels and subjects that this product is targeted at.\n          items:\n            $ref: '#/components/schemas/LevelSubjects'\n    LevelSubjects:\n      title: LevelSubjects\n      type: object\n      description: The combination of level and subject that indicates what a product is targeted at.\n      properties:\n        level:\n          type: string\n          description: Government level - e.g. havo-1\n        subjectCode:\n          type: string\n          description: |\n            Subject code for specific subject at this level\n    CMI5.Course:\n      title: CMI5 Course\n      type: object\n      description: 'A course that is available from a learning application, response is a CMI5 Course - we need to decide if we convert the XSD into OpenAPI spec definitions or leave it open here.'\n      x-tags:\n        - stream\n      properties:\n        id:\n          type: string\n          description: A unique identifier\n        name:\n          type: string\n          description: A short name\n        author:\n          type: string\n          description: Description of the author (in cases not the provider of the LA)\n        streamId:\n          type: string\n          description: Description of the author (in cases not the provider of the LA)\n        relatedProducts:\n          type: array\n          description: |\n            An array of related products this course applies to\n          items:\n            type: string\n    Statement:\n      title: XAPI Statement\n      type: object\n      required:\n        - id\n        - actor\n        - verb\n        - object\n      properties:\n        id:\n          type: string\n        actor:\n          type: object\n          description: 'Whom the Statement is about, as an Agent or Group Object.'\n          enum:\n            - $ref: '#/components/schemas/Agent'\n            - $ref: '#/components/schemas/Group'\n        verb:\n          type: object\n          description: Action taken by the Actor.\n        object:\n          type: object\n          description: Activity or Agent that is the Object of the Statement.\n          enum:\n            - $ref: '#/components/schemas/Activity'\n            - $ref: '#/components/schemas/Agent'\n        result:\n          $ref: '#/components/schemas/Result'\n        context:\n          type: object\n        timestamp:\n          type: string\n        stored:\n          type: string\n        authority:\n          type: object\n        version:\n          type: string\n        attachments:\n          type: array\n          items:\n            $ref: '#/components/schemas/Attachment'\n    StatementResult:\n      title: XAPI Statement Result\n      type: object\n      properties:\n        statementId:\n          type: string\n          description: Id of Statement to fetch\n        voidedStatementId:\n          type: string\n          description: Id of voided Statement to fetch. see Voided Statements\n        agent:\n          type: object\n          enum:\n            - $ref: '#/components/schemas/Agent'\n            - $ref: '#/components/schemas/Group'\n          description: 'Filter, only return Statements for which the specified Agent or Group is the Actor or Object of the Statement'\n        verb:\n          type: string\n          description: 'Filter, only return Statements matching the specified Verb id.'\n        activity:\n          type: string\n          description: 'Filter, only return Statements for which the Object of the Statement is an Activity with the specified id.'\n        registration:\n          type: string\n          description: 'Filter, only return Statements matching the specified registration id. Note that although frequently a unique registration will be used for one Actor assigned to one Activity, this cannot be assumed. If only Statements for a certain Actor or Activity are required, those parameters also need to be specified.'\n        related_activities:\n          type: boolean\n          default: false\n          description: 'Apply the Activity filter broadly. Include Statements for which the Object, any of the context Activities, or any of those properties in a contained SubStatement match the Activity parameter, instead of that parameter''s normal behavior. Matching is defined in the same way it is for the \"activity\" parameter.'\n        related_agents:\n          type: boolean\n          default: false\n          description: 'Apply the Agent filter broadly. Include Statements for which the Actor, Object, Authority, Instructor, Team, or any of these properties in a contained SubStatement match the Agent parameter, instead of that parameter''s normal behavior. Matching is defined in the same way it is for the \"agent\" parameter.'\n        since:\n          type: string\n          format: date-time\n          description: Only Statements stored since the specified Timestamp (exclusive) are returned.\n        until:\n          type: string\n          format: date-time\n          description: Only Statements stored at or before the specified Timestamp are returned.\n        limit:\n          type: integer\n          default: 0\n          description: Maximum number of Statements to return. 0 indicates return the maximum the server will allow.\n        format:\n          type: string\n          default: exact\n          enum:\n            - ids\n            - exact\n            - canonical\n        attachments:\n          type: boolean\n          default: false\n          description: 'If true, the LRS uses the multipart response format and includes all attachments as described previously. If false, the LRS sends the prescribed response with Content-Type application/json and does not send attachment data.'\n        ascending:\n          type: boolean\n          default: false\n          description: 'If true, return results in ascending order of stored time'\n    Group:\n      title: XAPI Group\n      type: object\n    Agent:\n      title: XAPI Agent\n      type: object\n      properties:\n        objectType:\n          type: string\n        name:\n          type: string\n    Person:\n      title: XAPI Person\n      type: object\n      required:\n        - objectType\n      properties:\n        objectType:\n          type: string\n          default: Person\n        name:\n          type: array\n          items:\n            type: string\n            description: List of names of Agents retrieved.\n        mbox:\n          type: array\n          items:\n            type: string\n            description: List of e-mail addresses of Agents retrieved.\n        mbox_sha1sum:\n          type: array\n          items:\n            type: string\n            description: List of the SHA1 hashes of mailto IRIs (such as go in an mbox property).\n        openid*:\n          type: array\n          items:\n            type: string\n            description: List of openids that uniquely identify the Agents retrieved.\n        account*:\n          type: array\n          items:\n            $ref: '#/components/schemas/Account'\n    Account:\n      title: XAPI Account\n      type: object\n      required:\n        - homePage\n        - name\n      properties:\n        homePage:\n          type: string\n        name:\n          type: string\n    Verb:\n      title: XAPI Verb\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: string\n        display:\n          type: object\n          description: 'The human readable representation of the Verb in one or more languages. This does not have any impact on the meaning of the Statement, but serves to give a human-readable display of the meaning already determined by the chosen Verb.'\n      example:\n        id: 'http://example.com/xapi/verbs#defenestrated'\n        display:\n          en-US: defenestrated\n          es: defenestrado\n    Activity:\n      title: XAPI Activity\n      type: object\n      properties:\n        name:\n          type: object\n        description:\n          type: object\n        type:\n          type: object\n        moreInfo:\n          type: object\n        extensions:\n          type: object\n    StatementReference:\n      title: XAPI Statement Reference\n      type: object\n      required:\n        - objectType\n        - id\n      properties:\n        objectType:\n          type: string\n        id:\n          type: string\n    Result:\n      title: XAPI Result\n      type: object\n      properties:\n        score:\n          $ref: '#/components/schemas/Score'\n        success:\n          type: boolean\n        completion:\n          type: boolean\n        response:\n          type: string\n        duration:\n          type: string\n        extensions:\n          type: object\n    Score:\n      title: XAPI Score\n      type: object\n      properties:\n        scaled:\n          type: number\n        raw:\n          type: number\n        min:\n          type: number\n        max:\n          type: number\n    Context:\n      title: XAPI Context\n      type: object\n      properties:\n        registration:\n          type: string\n        instructor:\n          $ref: '#/components/schemas/Agent'\n        team:\n          type: object\n        contextActivities:\n          type: object\n        revision:\n          type: string\n        platform:\n          type: string\n        language:\n          type: string\n        statement:\n          $ref: '#/components/schemas/Statement'\n        extensions:\n          type: object\n    Attachment:\n      title: XAPI Attachment\n      type: object\n      required:\n        - usageType\n        - display\n        - contentType\n        - length\n        - sha2\n      properties:\n        usageType:\n          type: string\n        display:\n          type: object\n        description:\n          type: object\n        contentType:\n          type: string\n        length:\n          type: integer\n        sha2:\n          type: string\n        fileUrl:\n          type: string\n  securitySchemes:\n    API Key - 1:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: ''\n          refreshUrl: ''\n          scopes:\n            la.course.school: Access to available course information available to a school\n            la.results.school: Access to progress and results for a specific learner at a specific school'\n",
			"canonicalURL": "/github.com/stichtingsem/technology-prototype@3bf27b60f5566865821b0496df27c73dc3e3c5e2/-/blob/reference/course.v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/stichtingsem/technology-prototype/blob/3bf27b60f5566865821b0496df27c73dc3e3c5e2/reference/course.v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"StatementResult\": parse schema: property \"agent\": at 1:4704: parse enum values: parse value \"{\\\"$ref\\\":\\\"#/components/schemas/Agent\\\"}\": unexpected type: \"object\""
}