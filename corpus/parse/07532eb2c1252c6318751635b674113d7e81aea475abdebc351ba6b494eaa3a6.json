{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/swrlab/swrlab"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/openapi.yaml",
			"byteSize": 77934,
			"content": "# yamllint disable rule:line-length\nopenapi: 3.0.0\ninfo:\n  title: SWR Audio Lab - Radiohub\n  description: \"This documentation is also available as [openapi.json](https://docs.radiohub.swr.digital/openapi.json)\\\n    \\ or [openapi.yaml](https://docs.radiohub.swr.digital/openapi.yaml).\\n\\n  \\n\\\n    Authorization keys can be requested via [lab@swr.de](mailto:lab@swr.de) and shall\\\n    \\ be sent as base64 encoded basic auth information in the header. Please report\\\n    \\ all problems or bugs to [lab@swr.de](mailto:lab@swr.de) or via the [Github repo](https://github.com/swrlab/swr-radiohub-docs/issues)\\\n    \\ and possibly include the `trace` information from the response header or info\\\n    \\ object.\\n\\n The dev environment uses data from the dev database; staging and\\\n    \\ production environments both access production data. The `appId` therefore follows\\\n    \\ the same structure. Caching is separate for each stage.\"\n  contact:\n    name: SWR Audio Lab\n    email: lab@swr.de\n  license:\n    name: Â© SWR Audio Lab\n  version: 2.14.0\nservers:\n  - url: https://api.lab.swr.de/radiohub\n    description: Radiohub production\n  - url: https://api.lab.swr.de/radiohub-dev\n    description: Radiohub development\n  - url: https://api.lab.swr.de/radiohub-stage\n    description: Radiohub staging\npaths:\n  /v2/content/page/{identifier}/{query}:\n    get:\n      tags:\n        - content\n      summary: Get a preconfigured content index page\n      description: Receive all teaser elements for a custom page\n      parameters:\n        - name: identifier\n          in: path\n          description: Which identifier shall be used to query this content\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - ref\n        - name: query\n          in: path\n          description: Page ref\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n          example: app-news\n        - name: appId\n          in: query\n          description: Provide a valid appId to create a connection to user preference\n            and station\n          required: true\n          style: form\n          explode: true\n          schema:\n            type: string\n      responses:\n        '500':\n          description: Server error occured.\n        default:\n          description: If status code other than 200, an error message will be provided,\n            otherwise the cover will be returned as image.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/contentPageResponse'\n      security:\n        - BasicAuth: []\n  /v2/content/block/{identifier}/{query}:\n    get:\n      tags:\n        - content\n      summary: Get a content.block index\n      description: Receive the full content.block elements\n      parameters:\n        - name: identifier\n          in: path\n          description: Which identifier shall be used to query this content\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - id\n        - name: query\n          in: path\n          description: Block ID\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: integer\n        - name: appId\n          in: query\n          description: Provide a valid appId to create a connection to user preference\n            and station\n          required: true\n          style: form\n          explode: true\n          schema:\n            type: string\n      responses:\n        '500':\n          description: Server error occured.\n        default:\n          description: If status code other than 200, an error message will be provided,\n            otherwise the cover will be returned as image.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/contentBlockResponse'\n      security:\n        - BasicAuth: []\n  /v2/content/collection/{identifier}/{query}:\n    get:\n      tags:\n        - content\n      summary: Get an entire content.collection\n      description: Receive all recent entries for a content collection by their reference.\n      parameters:\n        - name: identifier\n          in: path\n          description: Which identifier shall be used to query this content\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - id\n              - ref\n        - name: query\n          in: path\n          description: Collection ref or ID\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n          example: songtinder-sammler-100\n      responses:\n        '500':\n          description: Server error occured.\n        default:\n          description: If status code other than 200, an error message will be provided,\n            otherwise the cover will be returned as image.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/contentCollectionResponse'\n      security:\n        - BasicAuth: []\n  /v2/content/collection/latest/{identifier}/{query}/{offset}:\n    get:\n      tags:\n        - content\n      summary: Get latest content.entry from content.collection\n      description: Receive a content object by the content collection id.\n      parameters:\n        - name: identifier\n          in: path\n          description: Which identifier shall be used to query this content\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - id\n              - ref\n        - name: query\n          in: path\n          description: Radiohub import ID\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n          example: '4539478696787968'\n        - name: offset\n          in: path\n          description: Offset to the newest item. 0 is newest, higher will be older\n            items. Max value is defined by `offsetMax` in the info response object\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: number\n      responses:\n        '500':\n          description: Server error occured.\n        default:\n          description: If status code other than 200, an error message will be provided,\n            otherwise the cover will be returned as image.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/contentEntryResponse'\n      security:\n        - BasicAuth: []\n  /v2/content/entry/{identifier}/{query}:\n    get:\n      tags:\n        - content\n      summary: Get a specific content.entry\n      description: Receive a content.entry by id or ref.\n      parameters:\n        - name: identifier\n          in: path\n          description: Which identifier shall be used to query this content\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - id\n              - ref\n        - name: query\n          in: path\n          description: Radiohub ID or ref\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n          example: '4539478696787968'\n      responses:\n        '500':\n          description: Server error occured.\n        default:\n          description: If status code other than 200, an error message will be provided,\n            otherwise the cover will be returned as image.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/contentEntryResponse'\n      security:\n        - BasicAuth: []\n  /v2/content/thumb/{ref}/{format}/img.jpg:\n    get:\n      tags:\n        - content\n        - images\n      summary: Load a prefetched image from SWR CMS\n      description: Load the original image or resized version. Uncached images will\n        be generated and served from storage.\n      parameters:\n        - name: ref\n          in: path\n          description: Set ref for the image that shall be displayed (`thumbRef`).\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: format\n          in: path\n          description: Set the aspect ratio for the image\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - 16x9\n              - 1x1\n        - name: width\n          in: query\n          description: Optional width in pixels that the image shall be resized to\n          required: false\n          style: form\n          explode: true\n          schema:\n            maximum: 2560\n            minimum: 2\n            type: number\n        - name: height\n          in: query\n          description: Optional height in pixels that the image shall be resized to.\n            If both width and height are set, then the image will be cropped.  Otherwise\n            the respectively opposite dimension is set to auto\n          required: false\n          style: form\n          explode: true\n          schema:\n            maximum: 2560\n            minimum: 2\n            type: number\n        - name: fileType\n          in: query\n          description: Force the output to a specific file type. If unset, the output\n            will be jpg.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - jpg\n              - png\n              - webp\n      responses:\n        '400':\n          description: Invalid query input\n        '500':\n          description: Server error occured or key not found.\n        default:\n          description: Image\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n            image/png:\n              schema:\n                type: string\n                format: binary\n            image/webp:\n              schema:\n                type: string\n                format: binary\n      servers:\n        - url: https://api.lab.swr.de/\n          description: This service is acessible through the primary path\n  /v2/cover/{mdid}/:\n    get:\n      tags:\n        - cover\n      summary: Get a cover based on SWR's mdid\n      description: Query Radiohub to get a cover for a played item based on a mdid\n        reference.\n      parameters:\n        - name: mdid\n          in: path\n          description: SWR mdid (starts with M0...)\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n          example: M0571919.001\n        - name: width\n          in: query\n          description: Optionally set a desired width, if no height is provided, the\n            cover stays square-sized, otherwise it will be cropped. Default if unset\n            is 256px, max is 1024px.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: integer\n        - name: height\n          in: query\n          description: Optionally set a desired height, if no width is provided, the\n            cover stays square-sized, otherwise it will be cropped\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: integer\n        - name: station\n          in: query\n          description: Apply a branding to the image. Branded covers are only available\n            if this station has ever played that track.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - swr1bw\n              - swr1rp\n              - swr2\n              - swr3\n              - swr4bw\n              - swr4rp\n              - dasding\n      responses:\n        '500':\n          description: Server error occured.\n        default:\n          description: If status code other than 200, an error message will be provided,\n            otherwise the cover will be returned as image.\n          content:\n            image/*:\n              schema:\n                type: string\n                format: binary\n  /v2/feedback/station/:\n    post:\n      tags:\n        - feedback\n      summary: Publish an inbound feedback message\n      description: Send a feedback message from an external device or platform to\n        SWR's feedback system.\n      parameters:\n        - name: appId\n          in: query\n          description: Provide a valid `appId`.\n          required: true\n          style: form\n          explode: true\n          schema:\n            type: string\n      requestBody:\n        description: |\n          - When posting a feedback entry, `name` (body) and `appId` (query) are always required.\n          - `city` is only optional for _dasding_, otherwise required as well.\n          - Each post needs to contain either `file` or `message`.\n          - The field `file` can be an image (e.g. jpg or png), audio (e.g. aac or mp3) or video (e.g. mp4 or mov) up to 50MB.\n          - The station will be determined based on the user's `appId`.\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/feedbackBody'\n        required: true\n      responses:\n        '200':\n          description: If status code other than 200, an error message will be provided,\n            otherwise message is null.\n        '400':\n          description: Query not allowed or appId not provided.\n        '413':\n          description: File too large (\u003e50MB).\n        '500':\n          description: Server error occured.\n      security:\n        - BasicAuth: []\n  /images/v1/get/{key}/img:\n    get:\n      tags:\n        - images\n      summary: Load an image from image service\n      description: Load the original image or resized version. A list of all keys\n        can be seen in the SWR Audio Lab dashboard. Contact lab@swr.de for access.\n        Uncached images will be generated and served from storage. See response header\n        \"swr-datasource\" for details. Clients should also respect cache control if\n        possible.\n      parameters:\n        - name: key\n          in: path\n          description: Set key for the image that shall be displayed.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: DASDING-512\n        - name: width\n          in: query\n          description: 'Optional width in pixels that the image shall be resized to.\n            Minimum: 1, maximum 2560px'\n          required: false\n          style: form\n          explode: true\n          schema:\n            maximum: 2560\n            minimum: 2\n            type: number\n        - name: height\n          in: query\n          description: 'Optional height in pixels that the image shall be resized to.\n            Minimum: 1, maximum 2560px. If both width and height are set, then the image\n            will be cropped. Otherwise the respectively opposite dimension is set to\n            auto'\n          required: false\n          style: form\n          explode: true\n          schema:\n            maximum: 2560\n            minimum: 2\n            type: number\n        - name: fileType\n          in: query\n          description: Force the output to a specific file type. If unset, the output\n            will match the input file type.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - jpg\n              - png\n              - webp\n      responses:\n        '400':\n          description: Invalid query input\n        '500':\n          description: Server error occured or key not found.\n        default:\n          description: Image\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n            image/png:\n              schema:\n                type: string\n                format: binary\n            image/webp:\n              schema:\n                type: string\n                format: binary\n      servers:\n        - url: https://api.lab.swr.de/\n          description: This service is acessible through the primary path\n  /images/v1/get/{key}/json:\n    get:\n      tags:\n        - images\n      summary: Receive details about a cacheable image\n      description: Similar to the image service endpoint but here only a JSON object\n        of the database entry will be served. Should only be used for debugging solutions,\n        not to download an image. Accessibility of the sourceUrl is not guaranteed\n        and will be limited in future versions.\n      parameters:\n        - name: key\n          in: path\n          description: Set key for the image that shall be displayed. A list of all\n            keys can be seen in the SWR Audio Lab dashboard. Contact lab@swr.de for\n            access.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: DASDING-512\n      responses:\n        '401':\n          description: Unauthorized access to API.\n        '500':\n          description: Server error occured or key not found.\n        default:\n          description: JSON object\n          content:\n            image/json:\n              schema:\n                type: object\n      security:\n        - BasicAuth: []\n      servers:\n        - url: https://api.lab.swr.de/\n          description: This service is acessible through the primary path\n  /swr2/images/get/{key}/{format}/{overlay}/{width}/img.jpg:\n    get:\n      tags:\n        - images\n      summary: Load an image from swr2 image service\n      description: Load the original image or resized version. A list of all keys\n        can be seen in the SWR Audio Lab dashboard. Contact lab@swr.de for access.\n        Uncached images will be generated and served from storage. See response header\n        \"swr-datasource\" for details. Clients should also respect cache control if\n        possible.\n      parameters:\n        - name: key\n          in: path\n          description: Set key for the image that shall be displayed.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: logo\n        - name: format\n          in: path\n          description: Set the aspect ratio for the image. rund is a 1x1 image which\n            is title safe for round usage.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - 16x9\n              - 4x3\n              - 1x1\n              - rund\n        - name: overlay\n          in: path\n          description: Toggle whether a swr2 logo overlay shall be included. This feature\n            is end of life and you should always request the 0 version.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - '0'\n              - '1'\n        - name: width\n          in: path\n          description: Width in pixels that the image shall be resized to\n          required: true\n          style: simple\n          explode: false\n          schema:\n            maximum: 2560\n            minimum: 2\n            type: number\n            example: 256\n      responses:\n        '400':\n          description: Invalid query input\n        '500':\n          description: Server error occured or key not found.\n        default:\n          description: Image\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n      servers:\n        - url: https://api.lab.swr.de/\n          description: This service is acessible through the primary path\n  /swr2/images/get/{key}/json:\n    get:\n      tags:\n        - images\n      summary: Receive details about a cacheable image\n      description: Similar to the swr2 image service endpoint but here only a JSON\n        object of the database entry will be served. Should only be used for debugging\n        solutions, not to download an image. Accessibility of the sourceUrl is not\n        guaranteed and will be limited in future versions.\n      parameters:\n        - name: key\n          in: path\n          description: Set key for the image that shall be displayed. A list of all\n            keys can be seen in the SWR Audio Lab dashboard. Contact lab@swr.de for\n            access.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: logo\n      responses:\n        '401':\n          description: Unauthorized access to API.\n        '500':\n          description: Server error occured or key not found.\n        default:\n          description: JSON object\n          content:\n            image/json:\n              schema:\n                type: object\n      security:\n        - BasicAuth: []\n      servers:\n        - url: https://api.lab.swr.de/\n          description: This service is acessible through the primary path\n  /v2/schedule/live/{station}/:\n    get:\n      tags:\n        - schedule\n      summary: Receive the show that's live as scheduled\n      description: Query Radiohub to get the current live show for a specific station.\n      parameters:\n        - name: station\n          in: path\n          description: Set the radio station for the schedule query\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - swr1bw\n              - swr1rp\n              - swr2\n              - swr3\n              - swr4bw\n              - swr4rp\n              - swraktuell\n              - dasding\n      responses:\n        '401':\n          description: Unauthorized access to API.\n        '500':\n          description: Server error occured.\n        default:\n          description: If status code other than 200, an error message will be provided,\n            otherwise message is null.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/scheduleResponse'\n  /v2/schedule/day/{station}/{day}:\n    get:\n      tags:\n        - schedule\n      summary: Receive the show that's live as scheduled\n      description: Query Radiohub to get the current live show for a specific station.\n      parameters:\n        - name: station\n          in: path\n          description: Set the radio station for the schedule query\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - swr1bw\n              - swr1rp\n              - swr2\n              - swr3\n              - swr4bw\n              - swr4rp\n              - swraktuell\n              - dasding\n        - name: day\n          in: path\n          description: Specify a certain date to be checked in the format YYYYMMDD.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: '20191007'\n      responses:\n        '200':\n          description: If status code other than 200, an error message will be provided,\n            otherwise message is null.\n          content:\n            application/json:\n              schema:\n                minItems: 2\n                type: array\n                items:\n                  $ref: '#/components/schemas/scheduleResponse'\n        '401':\n          description: Unauthorized access to API.\n        '500':\n          description: Server error occured.\n      security:\n        - BasicAuth: []\n  /v2/schedule/time/{station}/{format}/{time}:\n    get:\n      tags:\n        - schedule\n      summary: Receive the show that's live as scheduled\n      description: Query Radiohub based on a ms or s timestamp to get the show for\n        a specific station.\n      parameters:\n        - name: station\n          in: path\n          description: Set the radio station for the schedule query\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - swr1bw\n              - swr1rp\n              - swr2\n              - swr3\n              - swr4bw\n              - swr4rp\n              - swraktuell\n              - dasding\n        - name: format\n          in: path\n          description: Choose whether to use a UNIX timestamp in seconds or milliseconds.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - ms\n              - s\n        - name: time\n          in: path\n          description: Timestamp in preferred format\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: integer\n      responses:\n        '401':\n          description: Unauthorized access to API.\n        '500':\n          description: Server error occured.\n        default:\n          description: If status code other than 200, an error message will be provided,\n            otherwise message is null.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/scheduleResponse'\n      security:\n        - BasicAuth: []\n  /v2/schedule/purge/{station}/:\n    get:\n      tags:\n        - schedule\n      summary: Purge cache information for a station\n      description: Shall only be used in cases when meta information has been changed\n        and needs to be re-cached.\n      parameters:\n        - name: station\n          in: path\n          description: Set the radio station for the schedule query\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - swr1bw\n              - swr1rp\n              - swr2\n              - swr3\n              - swr4bw\n              - swr4rp\n              - swraktuell\n              - dasding\n      responses:\n        '401':\n          description: Unauthorized access to API.\n        '500':\n          description: Server error occured.\n        default:\n          description: If status code other than 200, an error message will be provided,\n            otherwise message is null.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/schedulePurgeResponse'\n      security:\n        - BasicAuth: []\n  /v2/stream/start/{station}/:\n    get:\n      tags:\n        - stream\n      summary: Start a linear non-interactive radio stream based on station and parameters\n      description: |-\n        Linking service to provide the latest streamUrl with certain given parameters.\n\n        For SWR classic an additional parameter `isLive` is provided in the JSON output (see example response below).\n\n        Some requests require an authentication with special permissions (`swrRadiohubStreamStart`) - Especially responsive radio triggered by the y parameter, those responses also feature a different JSON structure.\n        Note Interactive radio sessions no longer use this call.\n      parameters:\n        - name: station\n          in: path\n          description: \"Set the radio station. \\n\\nNote that not all stations provide\\\n            \\ all features such as video oder skippable radio.\"\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - swr3\n              - dasding\n              - swrclassic\n        - name: r\n          in: query\n          description: \"_(returnData)_ \\n\\nChoose whether to redirect to streamUrl or\\\n            \\ receive JSON data object.\"\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: boolean\n        - name: f\n          in: query\n          description: \"_(desiredFormat)_ \\n\\nSet the streaming format. Note that video\\\n            \\ is not available in combination with all queries. \\n\\nDefaults to mp3.\"\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - mp3\n              - aac\n              - video\n        - name: q\n          in: query\n          description: \"_(desiredQuality)_ \\n\\nSet the streaming quality. Note that\\\n            \\ adaptive is only available for f=video while high and low are for mp3/aac.\\n\\\n            \\nDefaults to low.\"\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - high\n              - low\n              - adaptive\n        - name: d\n          in: query\n          description: \"_(deviceType)_ \\n\\nSet the type of device and/or aggregator.\\\n            \\ Example list is not complete and only serves as a reference. Names are\\\n            \\ provided by SWR Audio Lab.\"\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - amazonAlexaSkill\n              - googleHomeAction\n              - swrClassicAppleTv\n      responses:\n        '400':\n          description: Query not allowed.\n        '500':\n          description: Server error occured or key not found.\n        default:\n          description: JSON object\n          content:\n            image/json:\n              schema:\n                type: object\n        x-swrclassic:\n          description: Example of a result where `station` is `swrclassic` to signalize\n            live modus.\n          content:\n            image/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: integer\n                    format: int64\n                    example: 200\n                  message:\n                    type: string\n                    description: Message will be provided if status is not 200, otherwise\n                      null\n                  data:\n                    type: object\n                    properties:\n                      isLive:\n                        type: boolean\n                        example: true\n                      streamUrl:\n                        type: string\n                        example: https://...m3u8\n                      streamTitle:\n                        type: string\n                        example: Live aus...\n                      updatedAt:\n                        type: integer\n                        format: int64\n                        example: 1563785270\n                      airtimeStart:\n                        type: integer\n                        format: int64\n                        example: 1563692428\n                      airtimeEnd:\n                        type: integer\n                        format: int64\n                        example: 1563859828\n                  info:\n                    $ref: '#/components/schemas/infoResponse'\n                  links:\n                    type: object\n  /v2/stream/meta/:\n    get:\n      tags:\n        - stream\n      summary: Receive meta information about a current session\n      description: All live information and meta data details that the system knows\n        about a running audio session for the skippable radio platform.\n      parameters:\n        - name: appId\n          in: query\n          description: Provide a valid `appId`.\n          required: true\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: syncUrl\n          in: query\n          description: Provide the ybrid metadata Url to improve sync and buffer handling.\n            Only provide the Url once and as quickly as possible after receiving it\n            from ybrid.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: isPlaying\n          in: query\n          description: If set to false, no radio session will be opened and only the\n            basic metadata is provided\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: boolean\n            default: false\n        - name: channelId\n          in: query\n          description: Start a session with a specified channel. Only applies when the\n            user has no active session or previous call was `isPlaying=false`.\n          required: false\n          style: form\n          explode: false\n          schema:\n            type: string\n            example: swr-raka12\n        - name: shiftJump\n          in: query\n          description: Automatically start a session at a specific timestamp. Can be\n            combined with `channelId`. Only applies when user has no active session\n            or previous call was `isPlaying=false`.\n          required: false\n          style: form\n          explode: false\n          schema:\n            type: integer\n            example: 1585366272000\n      responses:\n        '400':\n          description: Query not allowed or appId not provided.\n        '500':\n          description: Server error occured\n        default:\n          description: JSON object\n          content:\n            image/json:\n              schema:\n                $ref: '#/components/schemas/streamMetaResponse'\n  /v2/stream/shift/{action}/:\n    get:\n      tags:\n        - stream\n      summary: Control the timeshift position of a user's stream\n      description: For a detailed workflow of responsive radio streams, see the STREAMING.md\n        document in this repository.\n      parameters:\n        - name: action\n          in: path\n          description: The type of action for the livestream\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - jump\n              - live\n              - offset\n              - back\n              - ahead\n        - name: appId\n          in: query\n          description: Always provide the user's appId for all responsive radio requests.\n          required: true\n          style: form\n          explode: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Query not allowed or appId not provided.\n        '500':\n          description: Server error occured or key not found.\n        default:\n          description: JSON object\n          content:\n            image/json:\n              schema:\n                $ref: '#/components/schemas/streamMetaResponse'\n  /v2/stream/shift/{action}/{time}:\n    get:\n      tags:\n        - stream\n      summary: Control the timeshift of a user's stream with time offset\n      description: For a detailed workflow of responsive radio streams, see the STREAMING.md\n        document in this repository.\n      parameters:\n        - name: action\n          in: path\n          description: The type of action for the livestream\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - jump\n              - live\n              - offset\n              - back\n              - ahead\n        - name: time\n          in: path\n          description: The time difference if required by `action`\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: integer\n        - name: appId\n          in: query\n          description: Always provide the user's appId for all responsive radio requests.\n          required: true\n          style: form\n          explode: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Query not allowed or appId not provided.\n        '500':\n          description: Server error occured or key not found.\n        default:\n          description: JSON object\n          content:\n            image/json:\n              schema:\n                $ref: '#/components/schemas/streamMetaResponse'\n  /v2/stream/shift/{action}/{type}:\n    get:\n      tags:\n        - stream\n      summary: Jump to the timeshift position of a specific track type\n      description: For a detailed workflow of responsive radio streams, see the STREAMING.md\n        document in this repository.\n      parameters:\n        - name: action\n          in: path\n          description: The type of action for the livestream\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - back\n              - ahead\n        - name: type\n          in: path\n          description: The track type\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - music\n              - advertisement\n              - jingle\n              - news\n              - traffic\n              - voice\n              - weather\n              - unrecognized\n        - name: appId\n          in: query\n          description: Always provide the user's appId for all responsive radio requests.\n          required: true\n          style: form\n          explode: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Query not allowed or appId not provided.\n        '500':\n          description: Server error occured or key not found.\n        default:\n          description: JSON object\n          content:\n            image/json:\n              schema:\n                $ref: '#/components/schemas/streamMetaResponse'\n  /v2/stream/switch/skip:\n    get:\n      tags:\n        - stream\n      summary: Control the content of a user's stream by skipping\n      description: For a detailed workflow of responsive radio streams, see the STREAMING.md\n        document in this repository.\n      parameters:\n        - name: appId\n          in: query\n          description: Always provide the user's appId for all responsive radio requests.\n          required: true\n          style: form\n          explode: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Query not allowed or appId not provided.\n        '500':\n          description: Server error occured or key not found.\n        default:\n          description: JSON object\n          content:\n            image/json:\n              schema:\n                $ref: '#/components/schemas/streamMetaResponse'\n  /v2/stream/switch/{action}/{id}:\n    get:\n      tags:\n        - stream\n      summary: Control the content of a user's stream\n      description: For a detailed workflow of responsive radio streams, see the STREAMING.md\n        document in this repository. When switching to a channel, provide the channel\n        id, for news provide the channel id.\n      parameters:\n        - name: action\n          in: path\n          description: The type of action for the livestream\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - channel\n              - news\n        - name: id\n          in: path\n          description: The content id required for `action`\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: integer\n        - name: appId\n          in: query\n          description: Always provide the user's appId for all responsive radio requests.\n          required: true\n          style: form\n          explode: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Query not allowed or appId not provided\n        '500':\n          description: Server error occured or key not found.\n        default:\n          description: JSON object\n          content:\n            image/json:\n              schema:\n                $ref: '#/components/schemas/streamMetaResponse'\n  /v2/track/live/{station}/:\n    get:\n      tags:\n        - track\n      summary: Receive the track that's playing right now\n      description: Query Radiohub to get the current live show for a specific station.\n      parameters:\n        - name: station\n          in: path\n          description: Set the radio station for the schedule query\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - swr1bw\n              - swr1rp\n              - swr2\n              - swr3\n              - swr4bw\n              - swr4rp\n              - swraktuell\n              - dasding\n      responses:\n        '401':\n          description: Unauthorized access to API.\n        '500':\n          description: Server error occured.\n        default:\n          description: If status code other than 200, an error message will be provided,\n            otherwise message is null.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/trackResponse'\n      security:\n        - BasicAuth: []\n  /v2/track/list/{station}/:\n    get:\n      tags:\n        - track\n      summary: Receive all tracks from the past 4 hours\n      description: Query Radiohub to get the tracks from the past 4 hours for a specific\n        station.\n      parameters:\n        - name: station\n          in: path\n          description: Set the radio station for the schedule query\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - swr1bw\n              - swr1rp\n              - swr2\n              - swr3\n              - swr4bw\n              - swr4rp\n              - swraktuell\n              - dasding\n      responses:\n        '401':\n          description: Unauthorized access to API.\n        '500':\n          description: Server error occured.\n        default:\n          description: If status code other than 200, an error message will be provided,\n            otherwise message is null.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/trackListResponse'\n      security:\n        - BasicAuth: []\n  /v2/track/like/:\n    post:\n      tags:\n        - track\n      summary: Update the like-relationship between a track and a user (appId)\n      description: Update the like or dislike status for a user. For `like` requests\n        the `refPlaylistId` is required, for `dislike` requests `refMdId` is sufficient.\n      parameters:\n        - name: appId\n          in: query\n          description: Provide a valid `appId`.\n          required: true\n          style: form\n          explode: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/body_1'\n      responses:\n        '401':\n          description: Unauthorized access to API.\n        '500':\n          description: Server error occured.\n        default:\n          description: If status code other than 200, an error message will be provided,\n            otherwise message is null.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_default'\n  /v2/traffic/search/{provider}/{roadName}/:\n    get:\n      tags:\n        - traffic\n      summary: Search for traffic incidents\n      description: Query ARD Traffic (TPEG) via Radiohub to get a list of incidents.\n      parameters:\n        - name: provider\n          in: path\n          description: Set the ARD partner whose details shall be displayed. Set to\n            ard for full output.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - ard\n              - br\n              - swr\n              - ndr\n              - hr\n              - wdr\n              - mdr\n              - rbb\n        - name: roadName\n          in: path\n          description: Comma, separated and url encoded list of road names, like A5\n            or B10. Capitalization does not matter, however uppercase is preferred.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: A5,A8\n        - name: includeLocation\n          in: query\n          description: 'String-formatted boolean information whether the full GPS location\n            shall be returned. Default if unset: false'\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: boolean\n            example: false\n      responses:\n        '401':\n          description: Unauthorized access to API.\n        '500':\n          description: Server error occured.\n        default:\n          description: If status code other than 200, an error message will be provided,\n            otherwise message is null.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/trafficResponse'\n      security:\n        - BasicAuth: []\n  /v2/traffic/geo/{provider}/{lat}/{lon}/:\n    get:\n      tags:\n        - traffic\n      summary: Get the neareast incidents\n      description: Query ARD Traffic (TPEG) via Radiohub to get a list of incidents\n        via supplied geo coordinates.\n      parameters:\n        - name: provider\n          in: path\n          description: Set the ARD partner whose details shall be displayed. Set to\n            ard for full output.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - ard\n              - br\n              - swr\n              - ndr\n              - hr\n              - wdr\n              - mdr\n              - rbb\n        - name: lat\n          in: path\n          description: Geo Latitude\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: '48.767014'\n        - name: lon\n          in: path\n          description: Geo Longitude\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: '8.224037'\n        - name: includeLocation\n          in: query\n          description: 'String-formatted boolean information whether the full GPS location\n            shall be returned. Default if unset: false.'\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: boolean\n            example: false\n        - name: customRadius\n          in: query\n          description: 'Radius in Kilometers that shall be used. Default if unset: 30.'\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n      responses:\n        '401':\n          description: Unauthorized access to API.\n        '500':\n          description: Server error occured.\n        default:\n          description: If status code other than 200, an error message will be provided,\n            otherwise message is null.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/trafficResponse'\n      security:\n        - BasicAuth: []\n  /v2/user/app/register/{station}:\n    get:\n      tags:\n        - user\n      summary: Register an user device for appId access\n      description: The `appId` is needed for all responsive radio actions. For a detailed\n        workflow of responsive radio streams, see the STREAMING.md document in this\n        repository.\n      parameters:\n        - name: station\n          in: path\n          description: The type of action for the livestream\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - dasding\n              - swr3\n      responses:\n        '400':\n          description: Query not allowed\n        '500':\n          description: Server error occured\n        default:\n          description: JSON object\n          content:\n            image/json:\n              schema:\n                $ref: '#/components/schemas/userAppRegisterResponse'\n      security:\n        - BasicAuth: []\n  /v2/geo/search/:\n    get:\n      tags:\n        - weather\n      summary: Turn a location search into lat/lon\n      description: Allow users to search for a location to receive lat/lon coordinates\n        for weather queries. Devices are encouraged to save the lat/lon response to\n        avoid having to query this API every time.\n      parameters:\n        - name: query\n          in: query\n          description: Location query\n          required: true\n          style: form\n          explode: true\n          schema:\n            type: string\n            example: Freiburg\n      responses:\n        '401':\n          description: Unauthorized access to API.\n        '500':\n          description: Server error occured.\n        default:\n          description: If status code other than 200, an error message will be provided,\n            otherwise message is null.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/geoSearchResponse'\n    post:\n      tags:\n        - weather\n      summary: Turn a location search into lat/lon\n      description: Allow users to search for a location to receive lat/lon coordinates\n        for weather queries. Devices are encouraged to save the lat/lon response to\n        avoid having to query this API every time.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/body'\n        required: true\n      responses:\n        '401':\n          description: Unauthorized access to API.\n        '500':\n          description: Server error occured.\n        default:\n          description: If status code other than 200, an error message will be provided,\n            otherwise message is null.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/geoSearchResponse'\n      security:\n        - BasicAuth: []\n  /v2/weather/geo/{lat}/{lon}/:\n    get:\n      tags:\n        - weather\n      summary: Get the weather\n      description: Receive SWR's weather report for a specific geolocation.\n      parameters:\n        - name: lat\n          in: path\n          description: Geo Latitude\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: '48.767014'\n        - name: lon\n          in: path\n          description: Geo Longitude\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: '8.224037'\n      responses:\n        '401':\n          description: Unauthorized access to API.\n        '500':\n          description: Server error occured.\n        default:\n          description: If status code other than 200, an error message will be provided,\n            otherwise message is null.\n          content:\n            application/json:\n              schema:\n                type: object\n      security:\n        - BasicAuth: []\ncomponents:\n  schemas:\n    contentEntry:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Unique identifier for this content element and import, can\n            be used for further queries.\n          example: 1234\n        type:\n          type: string\n          description: Defines the type of content entry. Can be article, audio or\n            video.\n          example: content.entry.*\n        link:\n          type: string\n          example: https://api.lab.swr.de/radiohub/v2/content/entry/id/1234?appId=56789\n        sophoraRef:\n          type: string\n          example: av-o1083229-100\n        sophoraCollectionRef:\n          type: string\n          example: songtinder-sammler-100\n        station:\n          type: string\n          example: dasding\n          enum:\n            - swr1bw\n            - swr1rp\n            - swr2\n            - swr3\n            - swr4bw\n            - swr4rp\n            - dasding\n        title:\n          type: string\n        subtitle:\n          type: string\n        teaser:\n          type: string\n        availabilityStart:\n          type: integer\n          example: 1575892066227\n        availabilityEnd:\n          type: integer\n          example: 1733744866227\n        updatedAt:\n          type: integer\n          example: 1575892066226\n        durationInSeconds:\n          type: integer\n          example: 826\n        durationReadable:\n          type: string\n          example: 14 Min\n        articleUrl:\n          type: string\n        webUrl:\n          type: string\n        isDownloadable:\n          type: boolean\n          example: true\n        sourceDownloadUrl:\n          type: string\n          example: https://avdlswr-a.akamaihd.net/dasding/...\n        sourcePlaybackUrl:\n          type: string\n          example: https://pdodswr-a.akamaihd.net/dasding/...\n        thumbAlt:\n          type: string\n          example: Bosse\n        thumbCredit:\n          type: string\n          example: DASDING\n        thumbRef:\n          type: string\n    contentCollection:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Unique identifier for this content.collection\n          example: 1234\n        type:\n          type: string\n          description: Defines the type of content.collection.\n          example: content.collection.*\n        link:\n          type: string\n          example: https://api.lab.swr.de/radiohub/v2/content/collection/id/1234?appId=56789\n        title:\n          type: string\n        subtitle:\n          type: string\n        data:\n          minItems: 0\n          type: array\n          items:\n            $ref: '#/components/schemas/contentEntry'\n      description: Content collections are a parent element to content.entry\n    contentBlockBreaking:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Unique identifier for this content block\n          example: 1234\n        type:\n          type: string\n          description: Defines the type of content block.\n          example: content.block.breaking\n        link:\n          type: string\n          example: https://api.lab.swr.de/radiohub/v2/content/block/id/1234?appId=56789\n        title:\n          type: string\n        subtitle:\n          type: string\n          nullable: true\n        data:\n          minItems: 0\n          type: array\n          items:\n            $ref: '#/components/schemas/contentBlockBreaking_data'\n    contentBlockPodcast:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Unique identifier for this content block\n          example: 1234\n        type:\n          type: string\n          description: Defines the type of content block.\n          example: content.block.podcast\n        link:\n          type: string\n          example: https://api.lab.swr.de/radiohub/v2/content/block/id/1234?appId=56789\n        title:\n          type: string\n        subtitle:\n          type: string\n        data:\n          minItems: 0\n          type: array\n          items:\n            $ref: '#/components/schemas/contentCollection'\n    contentBlock:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Unique identifier for this content block\n          example: 1234\n        type:\n          type: string\n          description: Defines the type of content block. Can be article, audio or\n            video.\n          example: content.block.*\n        link:\n          type: string\n          example: https://api.lab.swr.de/radiohub/v2/content/block/id/1234?appId=56789\n        title:\n          type: string\n        subtitle:\n          type: string\n        data:\n          minItems: 0\n          type: array\n          items:\n            $ref: '#/components/schemas/contentEntry'\n    contentEntryResponse:\n      type: object\n      properties:\n        status:\n          type: integer\n          format: int64\n          example: 200\n        message:\n          type: string\n          description: Message will be provided if status is not 200, otherwise null\n          nullable: true\n        data:\n          $ref: '#/components/schemas/contentEntry'\n        info:\n          $ref: '#/components/schemas/infoResponse'\n        links:\n          type: object\n    contentCollectionResponse:\n      type: object\n      properties:\n        status:\n          type: integer\n          format: int64\n          example: 200\n        message:\n          type: string\n          description: Message will be provided if status is not 200, otherwise null\n          nullable: true\n        data:\n          $ref: '#/components/schemas/contentCollection'\n        info:\n          $ref: '#/components/schemas/infoResponse'\n        links:\n          type: object\n    contentBlockResponse:\n      type: object\n      properties:\n        status:\n          type: integer\n          format: int64\n          example: 200\n        message:\n          type: string\n          description: Message will be provided if status is not 200, otherwise null\n          nullable: true\n        data:\n          oneOf:\n            - $ref: '#/components/schemas/contentBlockBreaking'\n            - $ref: '#/components/schemas/contentBlockPodcast'\n            - $ref: '#/components/schemas/contentBlock'\n        info:\n          $ref: '#/components/schemas/infoResponse'\n        links:\n          type: object\n    contentPageResponse:\n      type: object\n      properties:\n        status:\n          type: integer\n          format: int64\n          example: 200\n        message:\n          type: string\n          description: Message will be provided if status is not 200, otherwise null\n          nullable: true\n        data:\n          type: array\n          items:\n            anyOf:\n              - $ref: '#/components/schemas/contentBlockBreaking'\n              - $ref: '#/components/schemas/contentBlockPodcast'\n              - $ref: '#/components/schemas/contentBlock'\n        info:\n          $ref: '#/components/schemas/infoResponse'\n        links:\n          type: object\n    feedbackBody:\n      required:\n        - name\n      type: object\n      properties:\n        name:\n          type: string\n        email:\n          type: string\n        phone:\n          type: string\n        city:\n          type: string\n        message:\n          type: string\n        file:\n          type: string\n          format: binary\n    geoSearchData:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Freiburg im Breisgau\n        city:\n          type: string\n          example: Freiburg im Breisgau\n        area:\n          type: string\n          example: Freiburg im Breisgau\n        state:\n          type: string\n          example: Baden-WÃ¼rttemberg\n        country:\n          type: string\n          example: Deutschland\n        countryCode:\n          type: string\n          example: DE\n        lat:\n          type: number\n          format: double\n          example: 47.99719\n        lon:\n          type: number\n          format: double\n          example: 7.85377\n        type:\n          type: string\n          example: city\n    geoSearchResponse:\n      type: object\n      properties:\n        status:\n          type: integer\n          format: int64\n          example: 200\n        message:\n          type: string\n          description: Message will be provided if status is not 200, otherwise null\n        data:\n          maxItems: 10\n          minItems: 0\n          type: array\n          items:\n            $ref: '#/components/schemas/geoSearchData'\n        info:\n          $ref: '#/components/schemas/infoResponse'\n        links:\n          $ref: '#/components/schemas/scheduleResponse_links'\n      description: Defines a schedule response\n    infoResponse:\n      type: object\n      properties:\n        trace:\n          type: string\n          example: xyz\n        service:\n          type: string\n          example: swr-radiohub-api-dev;dev;...\n      description: Defines a schedule response\n    scheduleResponse:\n      type: object\n      properties:\n        status:\n          type: integer\n          format: int64\n          example: 200\n        message:\n          type: string\n          description: Message will be provided if status is not 200, otherwise null\n        data:\n          $ref: '#/components/schemas/scheduleResponse_data'\n        info:\n          $ref: '#/components/schemas/infoResponse'\n        links:\n          $ref: '#/components/schemas/scheduleResponse_links'\n      description: Defines a schedule response\n    scheduleResponseImage:\n      type: object\n      properties:\n        type:\n          type: string\n          description: The type of image service this image can be fetched from\n          example: images\n          enum:\n            - images\n            - content\n        ref:\n          type: string\n          description: Image ref to be used with the image service\n          example: SWR3-mod-BarschJanitz\n    scheduleResponseTextLongform:\n      type: object\n      properties:\n        text:\n          type: string\n          example: Line 1\n        underline:\n          type: boolean\n          example: false\n        italic:\n          type: boolean\n          example: false\n        bold:\n          type: boolean\n          example: false\n    scheduleResponseAnchorList:\n      type: object\n      properties:\n        name:\n          type: string\n        imageUrl:\n          type: string\n        image:\n          $ref: '#/components/schemas/scheduleResponseImage'\n        webUrl:\n          type: string\n          nullable: true\n    scheduleResponse_data:\n      type: object\n      properties:\n        title:\n          type: string\n          example: Nachrichten\n        subtitle:\n          type: string\n        airtimeStart:\n          type: integer\n        airtimeEnd:\n          type: integer\n        updatedAt:\n          type: integer\n        thumbUrl:\n          type: string\n        isThumbAvailable:\n          type: boolean\n          example: false\n        anchorImageUrl:\n          type: string\n          nullable: true\n        anchorList:\n          minItems: 0\n          type: array\n          nullable: true\n          items:\n            $ref: '#/components/schemas/scheduleResponseAnchorList'\n        textLongform:\n          type: array\n          items:\n            $ref: '#/components/schemas/scheduleResponseTextLongform'\n        programId:\n          type: integer\n          nullable: true\n        ref:\n          type: integer\n          example: 2906737\n    scheduleResponse_links:\n      type: object\n      properties:\n        purge:\n          type: string\n    schedulePurgeResponse:\n      type: object\n      properties:\n        status:\n          type: integer\n          format: int64\n          example: 201\n        message:\n          type: string\n          description: Message will be provided if status is not 200, otherwise null\n        data:\n          $ref: '#/components/schemas/schedulePurgeResponse_data'\n        info:\n          $ref: '#/components/schemas/infoResponse'\n        links:\n          $ref: '#/components/schemas/scheduleResponse_links'\n      description: Defines a schedule response after purging\n    schedulePurgeResponse_data:\n      type: object\n      properties:\n        key:\n          type: string\n        response:\n          type: string\n    trackObject:\n      type: object\n      properties:\n        displayTitle:\n          type: string\n          example: Post Malone\n        displayArtist:\n          type: string\n          example: Sam Feldt feat. RANI\n        type:\n          type: string\n          example: music\n          enum:\n            - music\n            - advertisement\n            - jingle\n            - news\n            - traffic\n            - voice\n            - weather\n            - unrecognized\n        triggeredAtMs:\n          type: integer\n          description: Item recorded in database (UNIX-ms)\n          example: 1576081213585\n        playedAtMs:\n          type: integer\n          description: Item playback time (UNIX-ms)\n          example: 1576081210000\n        refPlaylistId:\n          type: integer\n          description: Unique ID within a station to reference a played track\n          example: 11112403\n        refMdId:\n          type: string\n          description: SWR metadata ID to reference a track\n          example: M0571440.001\n        durationPlan:\n          type: integer\n          description: For how long the track is schedule to be played back on air\n          example: 173\n    trackResponse:\n      type: object\n      properties:\n        status:\n          type: integer\n          format: int64\n          example: 200\n        message:\n          type: string\n          description: Message will be provided if status is not 200, otherwise null\n        data:\n          $ref: '#/components/schemas/trackObject'\n        info:\n          $ref: '#/components/schemas/infoResponse'\n        links:\n          $ref: '#/components/schemas/trackResponse_links'\n      description: Defines a track response\n    trackResponse_links:\n      type: object\n      properties:\n        cover:\n          type: string\n    trackListResponse:\n      type: object\n      properties:\n        status:\n          type: integer\n          format: int64\n          example: 200\n        message:\n          type: string\n          description: Message will be provided if status is not 200, otherwise null\n        data:\n          maxItems: 100\n          minItems: 1\n          type: array\n          items:\n            $ref: '#/components/schemas/trackObject'\n        info:\n          $ref: '#/components/schemas/infoResponse'\n        links:\n          type: object\n      description: Defines a track response\n    trafficResponse:\n      type: object\n      properties:\n        status:\n          type: integer\n          format: int64\n          example: 200\n        message:\n          type: string\n          description: Message will be provided if status is not 200, otherwise null\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/trafficResponse_data'\n        info:\n          $ref: '#/components/schemas/infoResponse'\n        links:\n          $ref: '#/components/schemas/trackResponse_links'\n      description: Defines a track response\n    trafficResponse_geoPoint:\n      maxItems: 3\n      minItems: 2\n      type: array\n      description: Defines a schedule response\n      example:\n        - 52.3782\n        - 4.8999\n      externalDocs:\n        url: http://geojson.org/geojson-spec.html#id2\n      items:\n        type: number\n        format: double\n    trafficResponse_locationBox:\n      type: object\n      properties:\n        a:\n          $ref: '#/components/schemas/trafficResponse_geoPoint'\n        b:\n          $ref: '#/components/schemas/trafficResponse_geoPoint'\n      description: Bounding box of the entire incident.\n    trafficResponse_data:\n      type: object\n      properties:\n        ticId:\n          type: string\n          description: Uniquely identifies a traffic incident.\n        urgency:\n          type: integer\n          description: Describes the level of the incident. 1 is normal, 2 is a warning.\n          example: 1\n        type:\n          type: string\n          example: construction\n          enum:\n            - warning\n            - construction\n            - congestion\n            - other\n        createdAt:\n          type: integer\n          description: UNIX timestamp when the incident was created.\n          example: 1559627077\n        text:\n          type: string\n          description: Written text about the incident.\n        provider:\n          type: string\n          description: LRA (Landesrundfunkanstalt) that submitted the information.\n          example: SWR\n        roadName:\n          type: string\n          description: Comma-separated string with all included roads. Usually just\n            one, but in rare cases, can be multiple ones. Can be null if road is not\n            well-known (city street, diversion).\n          nullable: true\n          example: A5\n        roadNameArray:\n          type: array\n          description: Array-formatted data of roadName.\n          items:\n            type: string\n            example: A5\n        locationType:\n          type: string\n          description: Describes the type of Geo information. Multi* locations include\n            a second point or string (usually the reverse route of a road).\n          example: LineString\n          enum:\n            - Point\n            - LineString\n            - MultiPoint\n            - MultiLineString\n        locationBox:\n          $ref: '#/components/schemas/trafficResponse_locationBox'\n        location:\n          minItems: 1\n          type: array\n          description: Geo information for point or line.\n          nullable: true\n          items:\n            $ref: '#/components/schemas/trafficResponse_geoPoint'\n        distance:\n          type: number\n          description: Only supplied when querying by geo coordinates.\n          format: double\n          nullable: true\n    userAppRegisterResponse:\n      type: object\n      properties:\n        status:\n          type: integer\n          format: int64\n          example: 200\n        message:\n          type: string\n          description: Message will be provided if status is not 200, otherwise null\n        data:\n          $ref: '#/components/schemas/userAppRegisterResponse_data'\n        info:\n          $ref: '#/components/schemas/infoResponse'\n        links:\n          type: object\n      description: Defines a track response\n    streamMetaSession:\n      type: object\n      properties:\n        streamUrl:\n          type: string\n        hasChanged:\n          type: boolean\n          description: Whether the streamUrl has changed since the last meta call.\n            In that case the new Url shall be reloaded in the audio player.\n          example: false\n    streamMetaMetaChannelOptions:\n      type: object\n      properties:\n        swr3-live:\n          $ref: '#/components/schemas/streamMetaMetaChannelOptions_swr3live'\n      description: One or more channels than can be played\n    streamMetaMetaSkip:\n      type: object\n      properties:\n        active:\n          type: boolean\n          description: Is skipping currently active?\n          default: false\n        available:\n          type: boolean\n          description: Is skipping generally available at the moment?\n          default: false\n        index:\n          type: integer\n          example: 0\n        remaining:\n          type: integer\n          example: 3\n      description: One or more channels than can be played\n    streamMetaMetaWave:\n      type: object\n      properties:\n        secondsPerSample:\n          type: integer\n          description: How many seconds were processed for each sample\n          example: 15\n        length:\n          type: integer\n          description: Count of all data samples\n          example: 239\n        min:\n          type: number\n          description: Smallest sample size for scaling the waveform\n          format: double\n          example: 0.00085\n        max:\n          type: number\n          description: Largest sample size for scaling the waveform\n          format: double\n          example: 0.01744\n        updatedAt:\n          type: integer\n          description: Timestamp of the data generation\n          example: 1582816851938\n        data:\n          type: array\n          description: All samples, newest ones are first\n          example: 0.0025184983\n          items:\n            type: number\n            format: double\n      description: Live waveform data, generated historically for the entire timeshift\n        period\n      nullable: true\n    streamMetaMetaScheduleNow:\n      type: object\n      properties:\n        title:\n          type: string\n          example: Club\n        subtitle:\n          type: string\n        airtimeStart:\n          type: integer\n        airtimeEnd:\n          type: integer\n        updatedAt:\n          type: integer\n        thumbUrl:\n          type: string\n          nullable: true\n        thumb:\n          $ref: '#/components/schemas/scheduleResponseImage'\n        webUrl:\n          type: string\n          nullable: true\n        anchorImageUrl:\n          type: string\n        anchorImage:\n          $ref: '#/components/schemas/scheduleResponseImage'\n        anchorList:\n          minItems: 0\n          type: array\n          nullable: true\n          items:\n            $ref: '#/components/schemas/scheduleResponseAnchorList'\n        ref:\n          type: integer\n      description: Schedule item which was on air at the user's playback position\n    streamMetaMeta:\n      type: object\n      properties:\n        playerActions:\n          minItems: 0\n          type: array\n          example:\n            - togglePlay\n            - shiftOffsetBack\n            - shiftOffsetAhead\n            - shiftBack\n            - shiftAhead\n            - shiftLive\n          items:\n            type: string\n        channelActive:\n          type: string\n          example: swr3-live\n        channelMain:\n          type: string\n          example: swr3-live\n        channelOptions:\n          $ref: '#/components/schemas/streamMetaMetaChannelOptions'\n        shiftOffset:\n          type: integer\n          example: 0\n        skip:\n          $ref: '#/components/schemas/streamMetaMetaSkip'\n        trackNow:\n          $ref: '#/components/schemas/trackObject'\n        trackNext:\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/trackObject'\n            - type: object\n        trackList:\n          type: array\n          description: Array of tracks that have been played over the past 4 hours.\n            The most recent one is the first element, after that it goes back in time.\n          items:\n            $ref: '#/components/schemas/trackObject'\n        wave:\n          $ref: '#/components/schemas/streamMetaMetaWave'\n        scheduleNow:\n          $ref: '#/components/schemas/streamMetaMetaScheduleNow'\n    streamMetaResponse:\n      type: object\n      properties:\n        status:\n          type: integer\n          format: int64\n          example: 200\n        message:\n          type: string\n          description: Message will be provided if status is not 200, otherwise null\n        data:\n          $ref: '#/components/schemas/streamMetaResponse_data'\n        info:\n          $ref: '#/components/schemas/infoResponse'\n        links:\n          type: object\n      description: Defines a radio meta response\n    userAppRegisterResponse_data:\n      type: object\n      properties:\n        id:\n          type: integer\n        station:\n          type: string\n          enum:\n            - dasding\n            - swr3\n    body:\n      type: object\n      properties:\n        query:\n          type: string\n          example: Freiburg\n    body_1:\n      required:\n        - action\n      type: object\n      properties:\n        action:\n          type: string\n          enum:\n            - like\n            - dislike\n        refPlaylistId:\n          type: string\n        refMdId:\n          type: string\n    inline_response_default:\n      type: object\n      properties:\n        status:\n          type: integer\n          format: int64\n          example: 200\n        message:\n          type: string\n          description: Message will be provided if status is not 200, otherwise null\n        data:\n          type: object\n        info:\n          $ref: '#/components/schemas/infoResponse'\n        links:\n          type: object\n    contentBlockBreaking_data:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Unique identifier for this content element and import, can\n            be used for further queries.\n          example: 1234\n        type:\n          type: string\n          description: Defines the type of content entry. Can be article, audio or\n            video.\n          example: content.entry.breaking\n        title:\n          type: string\n        subtitle:\n          type: string\n          example: Song-Tindern\n        teaser:\n          type: string\n        availabilityStart:\n          type: integer\n          example: 1575892066227\n        availabilityEnd:\n          type: integer\n          example: 1733744866227\n        articleUrl:\n          type: string\n          nullable: true\n        webUrl:\n          type: string\n          nullable: true\n        thumbAlt:\n          type: string\n          nullable: true\n          example: Bosse\n        thumbCredit:\n          type: string\n          nullable: true\n          example: DASDING\n        thumbRef:\n          type: string\n          nullable: true\n    streamMetaMetaChannelOptions_swr3live:\n      type: object\n      properties:\n        title:\n          type: string\n          example: SWR3 Livestream\n        id:\n          type: string\n          example: swr3-live\n        iconRef:\n          type: string\n          example: SWR3-channel-live-1x1\n    streamMetaResponse_data:\n      type: object\n      properties:\n        session:\n          $ref: '#/components/schemas/streamMetaSession'\n        meta:\n          $ref: '#/components/schemas/streamMetaMeta'\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n",
			"canonicalURL": "/github.com/swrlab/swrlab@49996286b2b4d58ad74bd448050f0ed6b7a78b58/-/blob/openapi/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/swrlab/swrlab/blob/49996286b2b4d58ad74bd448050f0ed6b7a78b58/openapi/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: at openapi/openapi.yaml:1135:3: duplicate path: \"/v2/stream/shift/{action}/{type}\""
}