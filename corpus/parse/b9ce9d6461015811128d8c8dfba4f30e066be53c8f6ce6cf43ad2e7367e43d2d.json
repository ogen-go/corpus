{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "adyen.com-PaymentService-46-openapi.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/adyen.com-PaymentService-46-openapi.yaml",
			"byteSize": 96079,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://pal-test.adyen.com/pal/servlet/Payment/v46\ninfo:\n  contact:\n    email: support@adyen.com\n    name: Adyen Support\n    url: https://support.adyen.com/\n    x-twitter: Adyen\n  description: \u003e-\n    A set of API endpoints that allow you to initiate, settle, and modify\n    payments on the Adyen payments platform. You can use the API to accept card\n    payments (including One-Click and 3D Secure), bank transfers, ewallets, and\n    many other payment methods.\n\n\n    To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).\n\n\n    ## Authentication\n\n    To connect to the Payments API, you must use your basic authentication credentials. For this, create your web service user, as described in [How to get the WS user password](https://docs.adyen.com/user-management/how-to-get-the-web-service-ws-user-password). Then use its credentials to authenticate your request, for example:\n\n\n    ```\n\n    curl\n\n    -U \"ws@Company.YourCompany\":\"YourWsPassword\" \\\n\n    -H \"Content-Type: application/json\" \\\n\n    ...\n\n    ```\n\n    Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).\n\n\n    ## Versioning\n\n    Payments API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.\n\n\n    For example:\n\n    ```\n\n    https://pal-test.adyen.com/pal/servlet/Payment/v46/authorise\n\n    ```\n  termsOfService: https://www.adyen.com/legal/terms-and-conditions\n  title: Adyen Payment Service\n  version: \"46\"\n  x-apisguru-categories:\n    - payment\n  x-logo:\n    url: https://twitter.com/Adyen/profile_image?size=original\n  x-origin:\n    - converter:\n        url: https://github.com/lucybot/api-spec-converter\n        version: 2.7.31\n      format: openapi\n      url: https://raw.githubusercontent.com/adyen/adyen-openapi/master/specs/3.0/PaymentService-v46.json\n      version: \"3.0\"\n  x-preferred: false\n  x-providerName: adyen.com\n  x-serviceName: PaymentService\npaths:\n  /adjustAuthorisation:\n    post:\n      description: \u003e-\n        Allows you to increase or decrease the authorised amount after the\n        initial authorisation has taken place. This functionality enables\n        tipping, improving the chances your authorisation will be valid,\n        charging the shopper when they have already left the merchant premises,\n        etc.\n\n\n        For more information, refer to [Adjust Authorisation](https://docs.adyen.com/development-resources/payment-modifications/adjust-authorisation).\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ModificationRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ModificationResult\"\n          description: OK - the request has succeeded.\n        \"400\":\n          description: Bad Request - a problem reading or understanding the request.\n        \"401\":\n          description: Unauthorized - authentication required.\n        \"403\":\n          description: Forbidden - insufficient permissions to process the request.\n        \"422\":\n          description: Unprocessable Entity - a request validation error.\n        \"500\":\n          description: Internal Server Error - the server could not process the request.\n      summary: Increases or decreases the authorised amount.\n      x-groupName: Modifications\n      x-sortIndex: 6\n  /authorise:\n    post:\n      description: \u003e-\n        Creates a payment with a unique reference (`pspReference`) and attempts\n        to obtain an authorisation hold. For cards, this amount can be captured\n        or cancelled later. Non-card payment methods typically don't support\n        this and will automatically capture as part of the authorisation.\n\n\n        For more information, refer to [Classic integration](https://docs.adyen.com/classic-integration).\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PaymentRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PaymentResult\"\n          description: OK - the request has succeeded.\n        \"400\":\n          description: Bad Request - a problem reading or understanding the request.\n        \"401\":\n          description: Unauthorized - authentication required.\n        \"403\":\n          description: Forbidden - insufficient permissions to process the request.\n        \"422\":\n          description: Unprocessable Entity - a request validation error.\n        \"500\":\n          description: Internal Server Error - the server could not process the request.\n      summary: Creates a payment authorisation.\n      x-groupName: General\n      x-sortIndex: 1\n  /authorise3d:\n    post:\n      description: \u003e-\n        For an authenticated 3D Secure session, completes the payment\n        authorisation. This endpoint must receive the `md` and `paResponse`\n        parameters that you get from the card issuer after a shopper pays via 3D\n        Secure.\n\n\n        For more information, refer to [3D Secure](https://docs.adyen.com/classic-integration/3d-secure).\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PaymentRequest3d\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PaymentResult\"\n          description: OK - the request has succeeded.\n        \"400\":\n          description: Bad Request - a problem reading or understanding the request.\n        \"401\":\n          description: Unauthorized - authentication required.\n        \"403\":\n          description: Forbidden - insufficient permissions to process the request.\n        \"422\":\n          description: Unprocessable Entity - a request validation error.\n        \"500\":\n          description: Internal Server Error - the server could not process the request.\n      summary: Completes a 3D Secure payment authorisation.\n      x-groupName: General\n      x-sortIndex: 2\n  /authorise3ds2:\n    post:\n      description: \u003e-\n        For an authenticated 3D Secure 2 session, completes the payment\n        authorisation. This endpoint must receive the `threeDS2Token` and\n        `threeDS2Result` parameters.\n\n\n        For more information, refer to [3D Secure 2](https://docs.adyen.com/checkout/3d-secure-2).\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PaymentRequest3ds2\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PaymentResult\"\n          description: OK - the request has succeeded.\n        \"400\":\n          description: Bad Request - a problem reading or understanding the request.\n        \"401\":\n          description: Unauthorized - authentication required.\n        \"403\":\n          description: Forbidden - insufficient permissions to process the request.\n        \"422\":\n          description: Unprocessable Entity - a request validation error.\n        \"500\":\n          description: Internal Server Error - the server could not process the request.\n      summary: Completes a 3D Secure 2 payment authorisation.\n      x-groupName: General\n      x-sortIndex: 3\n  /cancel:\n    post:\n      description: \u003e-\n        Cancels the authorisation hold on a payment, returning a unique\n        reference for this request. You can cancel payments after authorisation\n        only for payment methods that support distinct authorisations and\n        captures.\n\n\n        For more information, refer to [Cancel](https://docs.adyen.com/development-resources/payment-modifications/cancel).\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ModificationRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ModificationResult\"\n          description: OK - the request has succeeded.\n        \"400\":\n          description: Bad Request - a problem reading or understanding the request.\n        \"401\":\n          description: Unauthorized - authentication required.\n        \"403\":\n          description: Forbidden - insufficient permissions to process the request.\n        \"422\":\n          description: Unprocessable Entity - a request validation error.\n        \"500\":\n          description: Internal Server Error - the server could not process the request.\n      summary: Cancels an authorised payment.\n      x-groupName: Modifications\n      x-sortIndex: 2\n  /cancelOrRefund:\n    post:\n      description: \u003e-\n        Cancels a payment if it has not been captured yet, or refunds it if it\n        has already been captured. This is useful when it is not certain if the\n        payment has been captured or not (for example, when using auto-capture).\n\n\n        \u003e Do not use this request for payments that involve (multiple) partial captures.\n\n\n        For more information, refer to [Cancel or refund](https://docs.adyen.com/development-resources/payment-modifications/cancel-or-refund).\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ModificationRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ModificationResult\"\n          description: OK - the request has succeeded.\n        \"401\":\n          description: Unauthorized - authentication required.\n        \"403\":\n          description: Forbidden - insufficient permissions to process the request.\n        \"422\":\n          description: Unprocessable Entity - a request validation error.\n        \"500\":\n          description: Internal Server Error - the server could not process the request.\n      summary: Cancels or refunds a payment.\n      x-groupName: Modifications\n      x-sortIndex: 4\n  /capture:\n    post:\n      description: \u003e-\n        Captures the authorisation hold on a payment, returning a unique\n        reference for this request. Usually the full authorisation amount is\n        captured, however it's also possible to capture a smaller amount, which\n        results in cancelling the remaining authorisation balance.\n\n\n        Payment methods, which automatically capture as part of authorisation, don't need to be captured, but submitting a capture request on these transactions will not result in double charges. If immediate or delayed auto-capture is enabled, calling the capture method is not neccessary.\n\n\n        For more information, refer to [Capture](https://docs.adyen.com/development-resources/payment-modifications/capture).\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ModificationRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ModificationResult\"\n          description: OK - the request has succeeded.\n        \"400\":\n          description: Bad Request - a problem reading or understanding the request.\n        \"401\":\n          description: Unauthorized - authentication required.\n        \"403\":\n          description: Forbidden - insufficient permissions to process the request.\n        \"422\":\n          description: Unprocessable Entity - a request validation error.\n        \"500\":\n          description: Internal Server Error - the server could not process the request.\n      summary: Captures an authorised payment.\n      x-groupName: Modifications\n      x-sortIndex: 1\n  /refund:\n    post:\n      description: \u003e-\n        Refunds a payment that has previously been captured, returning a unique\n        reference for this request. Refunding can be done on the full captured\n        amount or a partial amount. Multiple (partial) refunds will be accepted\n        as long as their sum doesn't exceed the captured amount. Payments which\n        have been authorised, but not captured, cannot be refunded, use the\n        /cancel method instead.\n\n\n        \u003e Some payment methods/gateways do not support partial/multiple refunds.\n\n        \u003e A margin above the captured limit can be configured to cover shipping/handling costs.\n\n\n        For more information, refer to [Refund](https://docs.adyen.com/development-resources/payment-modifications/refund).\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ModificationRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ModificationResult\"\n          description: OK - the request has succeeded.\n        \"401\":\n          description: Unauthorized - authentication required.\n        \"403\":\n          description: Forbidden - insufficient permissions to process the request.\n        \"422\":\n          description: Unprocessable Entity - a request validation error.\n        \"500\":\n          description: Internal Server Error - the server could not process the request.\n      summary: Refunds a captured payment.\n      x-groupName: Modifications\n      x-sortIndex: 3\n  /retrieve3ds2Result:\n    post:\n      description: Retrieves the `threeDS2Result` after doing a 3D Secure 2 authentication\n        only.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ThreeDS2ResultRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ThreeDS2ResultResponse\"\n          description: OK - the request has succeeded.\n        \"400\":\n          description: Bad Request - a problem reading or understanding the request.\n        \"401\":\n          description: Unauthorized - authentication required.\n        \"403\":\n          description: Forbidden - insufficient permissions to process the request.\n        \"422\":\n          description: Unprocessable Entity - a request validation error.\n        \"500\":\n          description: Internal Server Error - the server could not process the request.\n      summary: Retrieves the `threeDS2Result` after doing a 3D Secure 2 authentication\n        only.\n      x-groupName: General\n      x-sortIndex: 4\n  /technicalCancel:\n    post:\n      description: \u003e-\n        This endpoint allows you to cancel a payment if you do not have the PSP\n        reference of the original payment request available.\n\n\n        In your call, refer to the original payment by using the `reference` that you specified in your payment request.\n\n\n        For more information, see [Technical cancel](https://docs.adyen.com/development-resources/payment-modifications/cancel#technical-cancel).\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ModificationRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ModificationResult\"\n          description: OK - the request has succeeded.\n        \"400\":\n          description: Bad Request - a problem reading or understanding the request.\n        \"401\":\n          description: Unauthorized - authentication required.\n        \"403\":\n          description: Forbidden - insufficient permissions to process the request.\n        \"422\":\n          description: Unprocessable Entity - a request validation error.\n        \"500\":\n          description: Internal Server Error - the server could not process the request.\n      summary: Cancels a payment using your custom reference.\n      x-groupName: Modifications\n      x-sortIndex: 5\n  /voidPendingRefund:\n    post:\n      description: \u003e-\n        This endpoint allows you to cancel the refund request before it has been\n        completed.\n\n\n        In your call, you can refer to the original refund request either by using the `tenderReference`, or the `pspReference`. We recommend implementing based on the `tenderReference`, as this is generated for both offline and online transactions.\n\n\n        For more information, refer to [Cancel a refund](https://docs.adyen.com/point-of-sale/build-your-integration/cancel-a-pos-refund-request).\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ModificationRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ModificationResult\"\n          description: OK - the request has succeeded.\n        \"401\":\n          description: Unauthorized - authentication required.\n        \"403\":\n          description: Forbidden - insufficient permissions to process the request.\n        \"422\":\n          description: Unprocessable Entity - a request validation error.\n        \"500\":\n          description: Internal Server Error - the server could not process the request.\n      summary: Cancels a POS refund request before it has been completed.\n      x-groupName: Modifications\n      x-sortIndex: 7\ncomponents:\n  schemas:\n    AccountInfo:\n      properties:\n        accountAgeIndicator:\n          description: \u003e-\n            Indicator for the length of time since this shopper account was\n            created in the merchant's environment.\n\n            Allowed values:\n\n            * notApplicable\n\n            * thisTransaction\n\n            * lessThan30Days\n\n            * from30To60Days\n\n            * moreThan60Days\n          enum:\n            - notApplicable\n            - thisTransaction\n            - lessThan30Days\n            - from30To60Days\n            - moreThan60Days\n          type: string\n        accountChangeDate:\n          description: Date when the shopper's account was last changed.\n          format: date-time\n          type: string\n        accountChangeIndicator:\n          description: \u003e-\n            Indicator for the length of time since the shopper's account was\n            last updated.\n\n            Allowed values:\n\n            * thisTransaction\n\n            * lessThan30Days\n\n            * from30To60Days\n\n            * moreThan60Days\n          enum:\n            - thisTransaction\n            - lessThan30Days\n            - from30To60Days\n            - moreThan60Days\n          type: string\n        accountCreationDate:\n          description: Date when the shopper's account was created.\n          format: date-time\n          type: string\n        addCardAttemptsDay:\n          description: Number of attempts the shopper tried to add a card to their account\n            in the last day.\n          format: int32\n          type: integer\n        deliveryAddressUsageDate:\n          description: Date the selected delivery address was last used.\n          format: date-time\n          type: string\n        deliveryAddressUsageIndicator:\n          description: \u003e-\n            Indicator for the length of time since this delivery address was\n            last used.\n\n            Allowed values:\n\n            * thisTransaction\n\n            * lessThan30Days\n\n            * from30To60Days\n\n            * moreThan60Days\n          enum:\n            - thisTransaction\n            - lessThan30Days\n            - from30To60Days\n            - moreThan60Days\n          type: string\n        homePhone:\n          description: Shopper's home phone number (including the country code).\n          type: string\n        mobilePhone:\n          description: Shopper's mobile phone number (including the country code).\n          type: string\n        passwordChangeDate:\n          description: Date when the shopper last changed their password.\n          format: date-time\n          type: string\n        passwordChangeIndicator:\n          description: |-\n            Indicator when the shopper has changed their password.\n            Allowed values:\n            * notApplicable\n            * thisTransaction\n            * lessThan30Days\n            * from30To60Days\n            * moreThan60Days\n          enum:\n            - notApplicable\n            - thisTransaction\n            - lessThan30Days\n            - from30To60Days\n            - moreThan60Days\n          type: string\n        pastTransactionsDay:\n          description: Number of all transactions (successful and abandoned) from this\n            shopper in the past 24 hours.\n          format: int32\n          type: integer\n        pastTransactionsYear:\n          description: Number of all transactions (successful and abandoned) from this\n            shopper in the past year.\n          format: int32\n          type: integer\n        paymentAccountAge:\n          description: Date this payment method was added to the shopper's account.\n          format: date-time\n          type: string\n        paymentAccountIndicator:\n          description: \u003e-\n            Indicator for the length of time since this payment method was added\n            to this shopper's account.\n\n            Allowed values:\n\n            * notApplicable\n\n            * thisTransaction\n\n            * lessThan30Days\n\n            * from30To60Days\n\n            * moreThan60Days\n          enum:\n            - notApplicable\n            - thisTransaction\n            - lessThan30Days\n            - from30To60Days\n            - moreThan60Days\n          type: string\n        purchasesLast6Months:\n          description: Number of successful purchases in the last six months.\n          format: int32\n          type: integer\n        suspiciousActivity:\n          description: Whether suspicious activity was recorded on this account.\n          type: boolean\n        workPhone:\n          description: Shopper's work phone number (including the country code).\n          type: string\n    Address:\n      properties:\n        city:\n          description: \u003e-\n            The name of the city.\n\n            \u003eRequired if either houseNumberOrName, street, postalCode, or stateOrProvince are provided.\n          type: string\n        country:\n          description: \u003e-\n            The two-character country code of the address. The permitted country\n            codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').\n\n            \u003e If you don't know the country or are not collecting the country from the shopper, provide `countryCode` as `ZZ`.\n          type: string\n        houseNumberOrName:\n          description: The number or name of the house.\n          type: string\n        postalCode:\n          description: \u003e-\n            The postal code.\n\n            \u003eA maximum of five (5) digits for an address in the USA, or a maximum of ten (10) characters for an address in all other countries.\n          type: string\n        stateOrProvince:\n          description: \u003e-\n            The abbreviation of the state or province.\n\n            \u003eTwo (2) characters for an address in the USA or Canada, or a maximum of three (3) characters for an address in all other countries.\n\n            \u003eRequired for an address in the USA or Canada if either houseNumberOrName, street, city, or postalCode are provided.\n          type: string\n        street:\n          description: \u003e-\n            The name of the street.\n\n            \u003eThe house number should not be included in this field; it should be separately provided via `houseNumberOrName`.\n\n            \u003eRequired if either houseNumberOrName, city, postalCode, or stateOrProvince are provided.\n          type: string\n      required:\n        - country\n    Amount:\n      properties:\n        currency:\n          description: The three-character [ISO currency\n            code](https://docs.adyen.com/development-resources/currency-codes).\n          maxLength: 3\n          minLength: 3\n          type: string\n        value:\n          description: \u003e-\n            The payable amount that can be charged for the transaction.\n\n\n            The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).\n          format: int64\n          type: integer\n      required:\n        - value\n        - currency\n    BankAccount:\n      properties:\n        bankAccountNumber:\n          description: The bank account number (without separators).\n          type: string\n        bankCity:\n          description: The bank city.\n          type: string\n        bankLocationId:\n          description: The location id of the bank. The field value is `nil` in most cases.\n          type: string\n        bankName:\n          description: The name of the bank.\n          type: string\n        bic:\n          description: The [Business Identifier\n            Code](https://en.wikipedia.org/wiki/ISO_9362) (BIC) is the SWIFT\n            address assigned to a bank. The field value is `nil` in most cases.\n          type: string\n        countryCode:\n          description: |-\n            Country code where the bank is located.\n\n            A valid value is an ISO two-character country code (e.g. 'NL').\n          type: string\n        iban:\n          description: The [International Bank Account\n            Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number)\n            (IBAN).\n          type: string\n        ownerName:\n          description: \u003e-\n            The name of the bank account holder.\n\n            If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example:\n\n            * χ12 is converted to ch12.\n\n            * üA is converted to euA.\n\n            * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n\n            After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example:\n\n            * John17 - allowed.\n\n            * J17 - allowed.\n\n            * 171 - not allowed.\n\n            * John-7 - allowed.\n\n            \u003e If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'.\n          type: string\n        taxId:\n          description: The bank account holder's tax ID.\n          type: string\n    BrowserInfo:\n      properties:\n        acceptHeader:\n          description: The accept header value of the shopper's browser.\n          maxLength: 50\n          minLength: 10\n          type: string\n        colorDepth:\n          description: \"The color depth of the shopper's browser in bits per pixel. This\n            should be obtained by using the browser's `screen.colorDepth`\n            property. Accepted values: 1, 4, 8, 15, 16, 24, 32 or 48 bit color\n            depth.\"\n          format: int32\n          type: integer\n        javaEnabled:\n          description: Boolean value indicating if the shopper's browser is able to execute\n            Java.\n          type: boolean\n        javaScriptEnabled:\n          description: Boolean value indicating if the shopper's browser is able to execute\n            JavaScript. A default 'true' value is assumed if the field is not\n            present.\n          type: boolean\n        language:\n          description: The `navigator.language` value of the shopper's browser (as defined\n            in IETF BCP 47).\n          type: string\n        screenHeight:\n          description: The total height of the shopper's device screen in pixels.\n          format: int32\n          type: integer\n        screenWidth:\n          description: The total width of the shopper's device screen in pixels.\n          format: int32\n          type: integer\n        timeZoneOffset:\n          description: Time difference between UTC time and the shopper's browser local\n            time, in minutes.\n          format: int32\n          type: integer\n        userAgent:\n          description: The user agent value of the shopper's browser.\n          maxLength: 50\n          minLength: 10\n          type: string\n      required:\n        - userAgent\n        - acceptHeader\n        - javaEnabled\n        - colorDepth\n        - screenHeight\n        - screenWidth\n        - timeZoneOffset\n        - language\n    Card:\n      properties:\n        cvc:\n          description: \u003e-\n            The [card verification\n            code](https://docs.adyen.com/payments-essentials/payment-glossary#card_security_code_cvc_cvv_cid_)\n            (1-20 characters). Depending on the card brand, it is known also as:\n\n            * CVV2/CVC2 – length: 3 digits\n\n            * CID – length: 4 digits\n\n            \u003e If you are using [Client-Side Encryption](https://docs.adyen.com/classic-integration/cse-integration-ecommerce), the CVC code is present in the encrypted data. You must never post the card details to the server.\n\n            \u003e This field must be always present in a [one-click payment request](https://docs.adyen.com/classic-integration/recurring-payments).\n\n            \u003e When this value is returned in a response, it is always empty because it is not stored.\n          maxLength: 20\n          minLength: 1\n          type: string\n        expiryMonth:\n          description: |-\n            The card expiry month.\n            Format: 2 digits, zero-padded for single digits. For example:\n            * 03 = March\n            * 11 = November\n          maxLength: 2\n          minLength: 1\n          type: string\n        expiryYear:\n          description: |-\n            The card expiry year.\n            Format: 4 digits. For example: 2020\n          maxLength: 4\n          minLength: 4\n          type: string\n        holderName:\n          description: The name of the cardholder, as printed on the card.\n          maxLength: 50\n          minLength: 1\n          type: string\n        issueNumber:\n          description: The issue number of the card (for some UK debit cards only).\n          maxLength: 2\n          minLength: 1\n          type: string\n        number:\n          description: \u003e-\n            The card number (4-19 characters). Do not use any separators.\n\n            When this value is returned in a response, only the last 4 digits of the card number are returned.\n          maxLength: 19\n          minLength: 4\n          type: string\n        startMonth:\n          description: The month component of the start date (for some UK debit cards only).\n          maxLength: 2\n          minLength: 1\n          type: string\n        startYear:\n          description: The year component of the start date (for some UK debit cards only).\n          maxLength: 4\n          minLength: 4\n          type: string\n      required:\n        - number\n        - expiryMonth\n        - expiryYear\n        - holderName\n    DeviceRenderOptions:\n      properties:\n        sdkInterface:\n          description: |-\n            Supported SDK interface types.\n            Allowed values:\n            * Native\n            * Html\n            * both\n          enum:\n            - Html\n            - Native\n            - both\n          type: string\n        sdkUiType:\n          description: |-\n            UI types supported for displaying specific challenges.\n            Allowed values:\n            * text\n            * singleSelect\n            * outOfBand\n            * otherHtml\n            * multiSelect\n          items:\n            enum:\n              - multiSelect\n              - otherHtml\n              - outOfBand\n              - singleSelect\n              - text\n            type: string\n          type: array\n    ForexQuote:\n      properties:\n        account:\n          description: The account name.\n          type: string\n        accountType:\n          description: The account type.\n          type: string\n        baseAmount:\n          $ref: \"#/components/schemas/Amount\"\n          description: The base amount.\n        basePoints:\n          description: The base points.\n          format: int32\n          type: integer\n        buy:\n          $ref: \"#/components/schemas/Amount\"\n          description: The buy rate.\n        interbank:\n          $ref: \"#/components/schemas/Amount\"\n          description: The interbank amount.\n        reference:\n          description: The reference assigned to the forex quote request.\n          type: string\n        sell:\n          $ref: \"#/components/schemas/Amount\"\n          description: The sell rate.\n        signature:\n          description: The signature to validate the integrity.\n          type: string\n        source:\n          description: The source of the forex quote.\n          type: string\n        type:\n          description: The type of forex.\n          type: string\n        validTill:\n          description: The date until which the forex quote is valid.\n          format: date-time\n          type: string\n      required:\n        - validTill\n        - basePoints\n    FraudCheckResult:\n      properties:\n        accountScore:\n          description: The fraud score generated by the risk check.\n          format: int32\n          type: integer\n        checkId:\n          description: The ID of the risk check.\n          format: int32\n          type: integer\n        name:\n          description: The name of the risk check.\n          type: string\n      required:\n        - checkId\n        - name\n        - accountScore\n    FraudResult:\n      properties:\n        accountScore:\n          description: The total fraud score generated by the risk checks.\n          format: int32\n          type: integer\n        results:\n          description: The result of the individual risk checks.\n          items:\n            $ref: \"#/components/schemas/FraudCheckResult\"\n          type: array\n      required:\n        - accountScore\n    Installments:\n      properties:\n        value:\n          description: \u003e-\n            Defines the number of installments. Its value needs to be greater\n            than zero.\n\n\n            Usually, the maximum allowed number of installments is capped. For example, it may not be possible to split a payment in more than 24 installments. The acquirer sets this upper limit, so its value may vary.\n          format: int32\n          type: integer\n      required:\n        - value\n    MerchantRiskIndicator:\n      properties:\n        addressMatch:\n          description: Whether the chosen delivery address is identical to the billing\n            address.\n          type: boolean\n        deliveryAddressIndicator:\n          description: |-\n            Indicator regarding the delivery address.\n            Allowed values:\n            * `shipToBillingAddress`\n            * `shipToVerifiedAddress`\n            * `shipToNewAddress`\n            * `shipToStore`\n            * `digitalGoods`\n            * `goodsNotShipped`\n            * `other`\n          enum:\n            - shipToBillingAddress\n            - shipToVerifiedAddress\n            - shipToNewAddress\n            - shipToStore\n            - digitalGoods\n            - goodsNotShipped\n            - other\n          type: string\n        deliveryEmail:\n          description: The delivery email address (for digital goods).\n          type: string\n        deliveryTimeframe:\n          description: |-\n            The estimated delivery time for the shopper to receive the goods.\n            Allowed values:\n            * `electronicDelivery`\n            * `sameDayShipping`\n            * `overnightShipping`\n            * `twoOrMoreDaysShipping`\n          enum:\n            - electronicDelivery\n            - sameDayShipping\n            - overnightShipping\n            - twoOrMoreDaysShipping\n          type: string\n        giftCardAmount:\n          $ref: \"#/components/schemas/Amount\"\n          description: The amount of prepaid or gift cards used for this purchase.\n        giftCardCount:\n          description: Number of individual prepaid or gift cards used for this purchase.\n          format: int32\n          type: integer\n        preOrderDate:\n          description: For pre-order purchases, the expected date this product will be\n            available to the shopper.\n          format: date-time\n          type: string\n        preOrderPurchase:\n          description: Indicator for whether this transaction is for pre-ordering a product.\n          type: boolean\n        reorderItems:\n          description: Indicator for whether the shopper has already purchased the same\n            items in the past.\n          type: boolean\n    ModificationRequest:\n      properties:\n        additionalData:\n          description: \u003e-\n            This field contains additional data, which may be required for a\n            particular modification request.\n\n\n            The additionalData object consists of entries, each of which includes the key and value. For more information on possible key-value pairs, refer to the [ModificationRequest.additionalData](https://docs.adyen.com/api-reference/payments-api/modificationrequest/modificationrequest-additionaldata) section.\n          type: object\n        merchantAccount:\n          description: The merchant account that is used to process the payment.\n          type: string\n        modificationAmount:\n          $ref: \"#/components/schemas/Amount\"\n          description: The amount that needs to be captured/refunded. Required for\n            `/capture` and `/refund`, not allowed for `/cancel`. The `currency`\n            must match the currency used in authorisation, the `value` must be\n            smaller than or equal to the authorised amount.\n        mpiData:\n          $ref: \"#/components/schemas/ThreeDSecureData\"\n          description: Authentication data produced by an MPI (Mastercard SecureCode or\n            Verified By Visa).\n        originalMerchantReference:\n          description: The original merchant reference to cancel.\n          type: string\n        originalReference:\n          description: |-\n            The original pspReference of the payment to modify.\n            This reference is returned in:\n            * authorisation response\n            * authorisation notification\n          type: string\n        reference:\n          description: \u003e-\n            Optionally, you can specify your reference for the payment\n            modification. This reference is visible in Customer Area and in\n            reports.\n\n            Maximum length: 80 characters.\n          type: string\n        splits:\n          description: The details of how the payment should be split when distributing a\n            payment to a Marketpay Marketplace and its Accounts.\n          items:\n            $ref: \"#/components/schemas/Split\"\n          type: array\n        tenderReference:\n          description: The transaction reference provided by the PED. For point-of-sale\n            integrations only.\n          type: string\n        uniqueTerminalId:\n          description: Unique terminal ID for the PED that originally processed the\n            request. For point-of-sale integrations only.\n          type: string\n      required:\n        - merchantAccount\n        - originalReference\n    ModificationResult:\n      properties:\n        additionalData:\n          description: This field contains additional data, which may be returned in a\n            particular modification response.\n          type: object\n        pspReference:\n          description: Adyen's 16-character string reference associated with the\n            transaction/request. This value is globally unique; quote it when\n            communicating with us about this request.\n          type: string\n        response:\n          description: Indicates if the modification request has been received for\n            processing.\n          enum:\n            - \"[capture-received]\"\n            - \"[cancel-received]\"\n            - \"[refund-received]\"\n            - \"[cancelOrRefund-received]\"\n          type: string\n    Name:\n      properties:\n        firstName:\n          description: The first name.\n          type: string\n        gender:\n          description: |-\n            The gender.\n            \u003eThe following values are permitted: `MALE`, `FEMALE`, `UNKNOWN`.\n          enum:\n            - MALE\n            - FEMALE\n            - UNKNOWN\n          maxLength: 1\n          minLength: 1\n          type: string\n        infix:\n          description: |-\n            The name's infix, if applicable.\n            \u003eA maximum length of twenty (20) characters is imposed.\n          type: string\n        lastName:\n          description: The last name.\n          type: string\n      required:\n        - firstName\n        - lastName\n        - gender\n    PaymentRequest:\n      properties:\n        accountInfo:\n          $ref: \"#/components/schemas/AccountInfo\"\n          description: \u003e-\n            Shopper account information for 3D Secure 2.\n\n            \u003e For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.\n        additionalAmount:\n          $ref: \"#/components/schemas/Amount\"\n          description: \u003e-\n            If you want a [BIN or card\n            verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification)\n            request to use a non-zero value, assign this value to\n            `additionalAmount` (while the amount must be still set to 0 to\n            trigger BIN or card verification).\n\n            Required to be in the same currency as the `amount`. \n        additionalData:\n          description: This field contains additional data, which may be required for a\n            particular payment request.\n          type: object\n        amount:\n          $ref: \"#/components/schemas/Amount\"\n          description: The amount information for the transaction. For [BIN or card\n            verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification)\n            requests, set amount to 0 (zero).\n        bankAccount:\n          $ref: \"#/components/schemas/BankAccount\"\n          description: \u003e-\n            The details of the bank account, from which the payment should be\n            made.\n\n            \u003e Either `bankAccount` or `card` field must be provided in a payment request.\n        billingAddress:\n          $ref: \"#/components/schemas/Address\"\n          description: \u003e-\n            The address where to send the invoice.\n\n            \u003e For 3D Secure 2 transactions, schemes require the `billingAddress` for both `deviceChannel` **browser** and **app**. Include all of the fields within this object.\n        browserInfo:\n          $ref: \"#/components/schemas/BrowserInfo\"\n          description: \u003e-\n            The shopper's browser information.\n\n            \u003e For 3D Secure 2 transactions, `browserInfo` is required for `channel` **web** (or `deviceChannel` **browser**).\n        captureDelayHours:\n          description: The delay between the authorisation and scheduled auto-capture,\n            specified in hours.\n          format: int32\n          type: integer\n        card:\n          $ref: \"#/components/schemas/Card\"\n          description: \u003e-\n            A container for card data.\n\n            \u003e Either `bankAccount` or `card` field must be provided in a payment request.\n        dateOfBirth:\n          description: |-\n            The shopper's date of birth.\n\n            Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD\n          format: date-time\n          type: string\n        dccQuote:\n          $ref: \"#/components/schemas/ForexQuote\"\n          description: The forex quote as returned in the response of the forex service.\n        deliveryAddress:\n          $ref: \"#/components/schemas/Address\"\n          description: The address where the purchased goods should be delivered.\n        deliveryDate:\n          description: \u003e-\n            The date and time the purchased goods should be delivered.\n\n\n            Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD\n\n\n            Example: 2017-07-17T13:42:40.428+01:00\n          format: date-time\n          type: string\n        deviceFingerprint:\n          description: A string containing the shopper's device fingerprint. For more\n            information, refer to [Device\n            fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).\n          type: string\n        entityType:\n          description: The type of the entity the payment is processed for.\n          enum:\n            - NaturalPerson\n            - CompanyName\n          type: string\n        fraudOffset:\n          description: An integer value that is added to the normal fraud score. The value\n            can be either positive or negative.\n          format: int32\n          type: integer\n        installments:\n          $ref: \"#/components/schemas/Installments\"\n          description: Contains installment settings. For more information, refer to\n            [Installments](https://docs.adyen.com/payment-methods/installment-payments).\n        mcc:\n          description: The [merchant category\n            code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is\n            a four-digit number, which relates to a particular market segment.\n            This code reflects the predominant activity that is conducted by the\n            merchant.\n          type: string\n        merchantAccount:\n          description: The merchant account identifier, with which you want to process the\n            transaction.\n          type: string\n        merchantOrderReference:\n          description: \u003e-\n            This reference allows linking multiple transactions to each other\n            for reporting purposes (i.e. order auth-rate). The reference should\n            be unique per billing cycle.\n\n            The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations.\n\n            \u003e We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.\n          type: string\n        merchantRiskIndicator:\n          $ref: \"#/components/schemas/MerchantRiskIndicator\"\n          description: \u003e-\n            Additional risk fields for 3D Secure 2.\n\n            \u003e For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.\n        metadata:\n          description: \u003e-\n            Metadata consists of entries, each of which includes a key and a\n            value.\n\n            Limitations: Error \"177\", \"Metadata size exceeds limit\"\n          type: object\n        mpiData:\n          $ref: \"#/components/schemas/ThreeDSecureData\"\n          description: Authentication data produced by an MPI (Mastercard SecureCode or\n            Verified By Visa).\n        nationality:\n          description: The two-character country code of the shopper's nationality.\n          maxLength: 2\n          type: string\n        orderReference:\n          description: When you are doing multiple partial (gift card) payments, this is\n            the `pspReference` of the first payment. We use this to link the\n            multiple payments to each other. As your own reference for linking\n            multiple payments, use the `merchantOrderReference`instead.\n          type: string\n        recurring:\n          $ref: \"#/components/schemas/Recurring\"\n          description: The recurring settings for the payment. Use this property when you\n            want to enable [recurring\n            payments](https://docs.adyen.com/classic-integration/recurring-payments).\n        recurringProcessingModel:\n          description: \u003e\n            Defines a recurring payment type.\n\n            Allowed values:\n\n            * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.\n\n            * `CardOnFile` – Card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.\n\n            * `UnscheduledCardOnFile` – A transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.\n          enum:\n            - CardOnFile\n            - Subscription\n            - UnscheduledCardOnFile\n          type: string\n        reference:\n          description: \u003e-\n            The reference to uniquely identify a payment. This reference is used\n            in all communication with you about the payment status. We recommend\n            using a unique value per payment; however, it is not a requirement.\n\n            If you need to provide multiple references for a transaction, separate them with hyphens (\"-\").\n\n            Maximum length: 80 characters.\n          type: string\n        selectedBrand:\n          description: \u003e-\n            Some payment methods require defining a value for this field to\n            specify how to process the transaction.\n\n\n            For the Bancontact payment method, it can be set to:\n\n            * `maestro` (default), to be processed like a Maestro card, or\n\n            * `bcmc`, to be processed like a Bancontact card.\n          type: string\n        selectedRecurringDetailReference:\n          description: The `recurringDetailReference` you want to use for this payment. The\n            value `LATEST` can be used to select the most recently stored\n            recurring detail.\n          type: string\n        sessionId:\n          description: A session ID used to identify a payment session.\n          type: string\n        shopperEmail:\n          description: \u003e-\n            The shopper's email address. We recommend that you provide this\n            data, as it is used in velocity fraud checks.\n\n            \u003e For 3D Secure 2 transactions, schemes require the `shopperEmail` for both `deviceChannel` **browser** and **app**.\n          type: string\n        shopperIP:\n          description: \u003e-\n            The shopper's IP address. We recommend that you provide this data,\n            as it is used in a number of risk checks (for instance, number of\n            payment attempts or location-based checks).\n\n            \u003e This field is mandatory for some merchants depending on your business model. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).\n          type: string\n        shopperInteraction:\n          description: \u003e-\n            Specifies the sales channel, through which the shopper gives their\n            card details, and whether the shopper is a returning customer.\n\n            For the web service API, Adyen assumes Ecommerce shopper interaction by default.\n\n\n            This field has the following possible values:\n\n            * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.\n\n            * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).\n\n            * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.\n\n            * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.\n          enum:\n            - Ecommerce\n            - ContAuth\n            - Moto\n            - POS\n          type: string\n        shopperLocale:\n          description: The combination of a language code and a country code to specify the\n            language to be used in the payment.\n          type: string\n        shopperName:\n          $ref: \"#/components/schemas/Name\"\n          description: The shopper's full name and gender (if specified).\n        shopperReference:\n          description: \u003e-\n            The shopper's reference to uniquely identify this shopper (e.g. user\n            ID or account ID).\n\n            \u003e This field is required for recurring payments.\n          type: string\n        shopperStatement:\n          description: The text to appear on the shopper's bank statement.\n          type: string\n        socialSecurityNumber:\n          description: The shopper's social security number.\n          type: string\n        splits:\n          description: The details of how the payment should be split when distributing a\n            payment to a MarketPay Marketplace and its Accounts.\n          items:\n            $ref: \"#/components/schemas/Split\"\n          type: array\n        store:\n          description: The physical store, for which this payment is processed.\n          maxLength: 16\n          minLength: 1\n          type: string\n        telephoneNumber:\n          description: The shopper's telephone number.\n          type: string\n        threeDS2RequestData:\n          $ref: \"#/components/schemas/ThreeDS2RequestData\"\n          description: Request fields for 3D Secure 2.\n        totalsGroup:\n          description: The reference value to aggregate sales totals in reporting. When not\n            specified, the store field is used (if available).\n          maxLength: 16\n          minLength: 1\n          type: string\n        trustedShopper:\n          description: Set to true if the payment should be routed to a trusted MID.\n          type: boolean\n      required:\n        - merchantAccount\n        - reference\n        - amount\n    PaymentRequest3d:\n      properties:\n        accountInfo:\n          $ref: \"#/components/schemas/AccountInfo\"\n          description: \u003e-\n            Shopper account information for 3D Secure 2.\n\n            \u003e For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.\n        additionalAmount:\n          $ref: \"#/components/schemas/Amount\"\n          description: \u003e-\n            If you want a [BIN or card\n            verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification)\n            request to use a non-zero value, assign this value to\n            `additionalAmount` (while the amount must be still set to 0 to\n            trigger BIN or card verification).\n\n            Required to be in the same currency as the `amount`. \n        additionalData:\n          description: \u003e-\n            This field contains additional data, which may be required for a\n            particular payment request.\n\n\n            The `additionalData` object consists of entries, each of which includes the key and value. For more information on possible key-value pairs, refer to the [additionalData section](https://docs.adyen.com/api-reference/payments-api#paymentrequestadditionaldata).\n          type: object\n        amount:\n          $ref: \"#/components/schemas/Amount\"\n          description: The amount information for the transaction. For [BIN or card\n            verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification)\n            requests, set amount to 0 (zero).\n        billingAddress:\n          $ref: \"#/components/schemas/Address\"\n          description: \u003e-\n            The address where to send the invoice.\n\n            \u003e For 3D Secure 2 transactions, schemes require the `billingAddress` for both `deviceChannel` **browser** and **app**. Include all of the fields within this object.\n        browserInfo:\n          $ref: \"#/components/schemas/BrowserInfo\"\n          description: \u003e-\n            The shopper's browser information.\n\n            \u003e For 3D Secure 2 transactions, `browserInfo` is required for `channel` **web** (or `deviceChannel` **browser**).\n        captureDelayHours:\n          description: The delay between the authorisation and scheduled auto-capture,\n            specified in hours.\n          format: int32\n          type: integer\n        dateOfBirth:\n          description: |-\n            The shopper's date of birth.\n\n            Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD\n          format: date-time\n          type: string\n        dccQuote:\n          $ref: \"#/components/schemas/ForexQuote\"\n          description: The forex quote as returned in the response of the forex service.\n        deliveryAddress:\n          $ref: \"#/components/schemas/Address\"\n          description: The address where the purchased goods should be delivered.\n        deliveryDate:\n          description: \u003e-\n            The date and time the purchased goods should be delivered.\n\n\n            Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD\n\n\n            Example: 2017-07-17T13:42:40.428+01:00\n          format: date-time\n          type: string\n        deviceFingerprint:\n          description: A string containing the shopper's device fingerprint. For more\n            information, refer to [Device\n            fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).\n          type: string\n        fraudOffset:\n          description: An integer value that is added to the normal fraud score. The value\n            can be either positive or negative.\n          format: int32\n          type: integer\n        installments:\n          $ref: \"#/components/schemas/Installments\"\n          description: Contains installment settings. For more information, refer to\n            [Installments](https://docs.adyen.com/payment-methods/installment-payments).\n        mcc:\n          description: The [merchant category\n            code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is\n            a four-digit number, which relates to a particular market segment.\n            This code reflects the predominant activity that is conducted by the\n            merchant.\n          type: string\n        md:\n          description: The payment session identifier returned by the card issuer.\n          type: string\n        merchantAccount:\n          description: The merchant account identifier, with which you want to process the\n            transaction.\n          type: string\n        merchantOrderReference:\n          description: \u003e-\n            This reference allows linking multiple transactions to each other\n            for reporting purposes (i.e. order auth-rate). The reference should\n            be unique per billing cycle.\n\n            The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations.\n\n            \u003e We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.\n          type: string\n        merchantRiskIndicator:\n          $ref: \"#/components/schemas/MerchantRiskIndicator\"\n          description: \u003e-\n            Additional risk fields for 3D Secure 2.\n\n            \u003e For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.\n        metadata:\n          description: \u003e-\n            Metadata consists of entries, each of which includes a key and a\n            value.\n\n            Limitations: Error \"177\", \"Metadata size exceeds limit\"\n          type: object\n        orderReference:\n          description: When you are doing multiple partial (gift card) payments, this is\n            the `pspReference` of the first payment. We use this to link the\n            multiple payments to each other. As your own reference for linking\n            multiple payments, use the `merchantOrderReference`instead.\n          type: string\n        paResponse:\n          description: Payment authorisation response returned by the card issuer. The\n            `paResponse` field holds the PaRes value received from the card\n            issuer.\n          type: string\n        recurring:\n          $ref: \"#/components/schemas/Recurring\"\n          description: The recurring settings for the payment. Use this property when you\n            want to enable [recurring\n            payments](https://docs.adyen.com/classic-integration/recurring-payments).\n        recurringProcessingModel:\n          description: \u003e\n            Defines a recurring payment type.\n\n            Allowed values:\n\n            * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.\n\n            * `CardOnFile` – Card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.\n\n            * `UnscheduledCardOnFile` – A transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.\n          enum:\n            - CardOnFile\n            - Subscription\n            - UnscheduledCardOnFile\n          type: string\n        reference:\n          description: \u003e-\n            The reference to uniquely identify a payment. This reference is used\n            in all communication with you about the payment status. We recommend\n            using a unique value per payment; however, it is not a requirement.\n\n            If you need to provide multiple references for a transaction, separate them with hyphens (\"-\").\n\n            Maximum length: 80 characters.\n          type: string\n        selectedBrand:\n          description: \u003e-\n            Some payment methods require defining a value for this field to\n            specify how to process the transaction.\n\n\n            For the Bancontact payment method, it can be set to:\n\n            * `maestro` (default), to be processed like a Maestro card, or\n\n            * `bcmc`, to be processed like a Bancontact card.\n          type: string\n        selectedRecurringDetailReference:\n          description: The `recurringDetailReference` you want to use for this payment. The\n            value `LATEST` can be used to select the most recently stored\n            recurring detail.\n          type: string\n        sessionId:\n          description: A session ID used to identify a payment session.\n          type: string\n        shopperEmail:\n          description: \u003e-\n            The shopper's email address. We recommend that you provide this\n            data, as it is used in velocity fraud checks.\n\n            \u003e For 3D Secure 2 transactions, schemes require the `shopperEmail` for both `deviceChannel` **browser** and **app**.\n          type: string\n        shopperIP:\n          description: \u003e-\n            The shopper's IP address. We recommend that you provide this data,\n            as it is used in a number of risk checks (for instance, number of\n            payment attempts or location-based checks).\n\n            \u003e This field is mandatory for some merchants depending on your business model. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).\n          type: string\n        shopperInteraction:\n          description: \u003e-\n            Specifies the sales channel, through which the shopper gives their\n            card details, and whether the shopper is a returning customer.\n\n            For the web service API, Adyen assumes Ecommerce shopper interaction by default.\n\n\n            This field has the following possible values:\n\n            * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.\n\n            * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).\n\n            * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.\n\n            * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.\n          enum:\n            - Ecommerce\n            - ContAuth\n            - Moto\n            - POS\n          type: string\n        shopperLocale:\n          description: The combination of a language code and a country code to specify the\n            language to be used in the payment.\n          type: string\n        shopperName:\n          $ref: \"#/components/schemas/Name\"\n          description: The shopper's full name and gender (if specified).\n        shopperReference:\n          description: \u003e-\n            The shopper's reference to uniquely identify this shopper (e.g. user\n            ID or account ID).\n\n            \u003e This field is required for recurring payments.\n          type: string\n        shopperStatement:\n          description: The text to appear on the shopper's bank statement.\n          type: string\n        socialSecurityNumber:\n          description: The shopper's social security number.\n          type: string\n        splits:\n          description: The details of how the payment should be split when distributing a\n            payment to a MarketPay Marketplace and its Accounts.\n          items:\n            $ref: \"#/components/schemas/Split\"\n          type: array\n        store:\n          description: The physical store, for which this payment is processed.\n          maxLength: 16\n          minLength: 1\n          type: string\n        telephoneNumber:\n          description: The shopper's telephone number.\n          type: string\n        threeDS2RequestData:\n          $ref: \"#/components/schemas/ThreeDS2RequestData\"\n          description: Request fields for 3D Secure 2.\n        totalsGroup:\n          description: The reference value to aggregate sales totals in reporting. When not\n            specified, the store field is used (if available).\n          maxLength: 16\n          minLength: 1\n          type: string\n        trustedShopper:\n          description: Set to true if the payment should be routed to a trusted MID.\n          type: boolean\n      required:\n        - merchantAccount\n        - paResponse\n        - md\n    PaymentRequest3ds2:\n      properties:\n        accountInfo:\n          $ref: \"#/components/schemas/AccountInfo\"\n          description: \u003e-\n            Shopper account information for 3D Secure 2.\n\n            \u003e For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.\n        additionalAmount:\n          $ref: \"#/components/schemas/Amount\"\n          description: \u003e-\n            If you want a [BIN or card\n            verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification)\n            request to use a non-zero value, assign this value to\n            `additionalAmount` (while the amount must be still set to 0 to\n            trigger BIN or card verification).\n\n            Required to be in the same currency as the `amount`. \n        additionalData:\n          description: \u003e-\n            This field contains additional data, which may be required for a\n            particular payment request.\n\n\n            The `additionalData` object consists of entries, each of which includes the key and value. For more information on possible key-value pairs, refer to the [additionalData section](https://docs.adyen.com/api-reference/payments-api#paymentrequestadditionaldata).\n          type: object\n        amount:\n          $ref: \"#/components/schemas/Amount\"\n          description: The amount information for the transaction. For [BIN or card\n            verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification)\n            requests, set amount to 0 (zero).\n        billingAddress:\n          $ref: \"#/components/schemas/Address\"\n          description: \u003e-\n            The address where to send the invoice.\n\n            \u003e For 3D Secure 2 transactions, schemes require the `billingAddress` for both `deviceChannel` **browser** and **app**. Include all of the fields within this object.\n        browserInfo:\n          $ref: \"#/components/schemas/BrowserInfo\"\n          description: \u003e-\n            The shopper's browser information.\n\n            \u003e For 3D Secure 2 transactions, `browserInfo` is required for `channel` **web** (or `deviceChannel` **browser**).\n        captureDelayHours:\n          description: The delay between the authorisation and scheduled auto-capture,\n            specified in hours.\n          format: int32\n          type: integer\n        dateOfBirth:\n          description: |-\n            The shopper's date of birth.\n\n            Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD\n          format: date-time\n          type: string\n        dccQuote:\n          $ref: \"#/components/schemas/ForexQuote\"\n          description: The forex quote as returned in the response of the forex service.\n        deliveryAddress:\n          $ref: \"#/components/schemas/Address\"\n          description: The address where the purchased goods should be delivered.\n        deliveryDate:\n          description: \u003e-\n            The date and time the purchased goods should be delivered.\n\n\n            Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD\n\n\n            Example: 2017-07-17T13:42:40.428+01:00\n          format: date-time\n          type: string\n        deviceFingerprint:\n          description: A string containing the shopper's device fingerprint. For more\n            information, refer to [Device\n            fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).\n          type: string\n        fraudOffset:\n          description: An integer value that is added to the normal fraud score. The value\n            can be either positive or negative.\n          format: int32\n          type: integer\n        installments:\n          $ref: \"#/components/schemas/Installments\"\n          description: Contains installment settings. For more information, refer to\n            [Installments](https://docs.adyen.com/payment-methods/installment-payments).\n        mcc:\n          description: The [merchant category\n            code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is\n            a four-digit number, which relates to a particular market segment.\n            This code reflects the predominant activity that is conducted by the\n            merchant.\n          type: string\n        merchantAccount:\n          description: The merchant account identifier, with which you want to process the\n            transaction.\n          type: string\n        merchantOrderReference:\n          description: \u003e-\n            This reference allows linking multiple transactions to each other\n            for reporting purposes (i.e. order auth-rate). The reference should\n            be unique per billing cycle.\n\n            The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations.\n\n            \u003e We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.\n          type: string\n        merchantRiskIndicator:\n          $ref: \"#/components/schemas/MerchantRiskIndicator\"\n          description: \u003e-\n            Additional risk fields for 3D Secure 2.\n\n            \u003e For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.\n        metadata:\n          description: \u003e-\n            Metadata consists of entries, each of which includes a key and a\n            value.\n\n            Limitations: Error \"177\", \"Metadata size exceeds limit\"\n          type: object\n        orderReference:\n          description: When you are doing multiple partial (gift card) payments, this is\n            the `pspReference` of the first payment. We use this to link the\n            multiple payments to each other. As your own reference for linking\n            multiple payments, use the `merchantOrderReference`instead.\n          type: string\n        recurring:\n          $ref: \"#/components/schemas/Recurring\"\n          description: The recurring settings for the payment. Use this property when you\n            want to enable [recurring\n            payments](https://docs.adyen.com/classic-integration/recurring-payments).\n        recurringProcessingModel:\n          description: \u003e\n            Defines a recurring payment type.\n\n            Allowed values:\n\n            * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.\n\n            * `CardOnFile` – Card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.\n\n            * `UnscheduledCardOnFile` – A transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.\n          enum:\n            - CardOnFile\n            - Subscription\n            - UnscheduledCardOnFile\n          type: string\n        reference:\n          description: \u003e-\n            The reference to uniquely identify a payment. This reference is used\n            in all communication with you about the payment status. We recommend\n            using a unique value per payment; however, it is not a requirement.\n\n            If you need to provide multiple references for a transaction, separate them with hyphens (\"-\").\n\n            Maximum length: 80 characters.\n          type: string\n        selectedBrand:\n          description: \u003e-\n            Some payment methods require defining a value for this field to\n            specify how to process the transaction.\n\n\n            For the Bancontact payment method, it can be set to:\n\n            * `maestro` (default), to be processed like a Maestro card, or\n\n            * `bcmc`, to be processed like a Bancontact card.\n          type: string\n        selectedRecurringDetailReference:\n          description: The `recurringDetailReference` you want to use for this payment. The\n            value `LATEST` can be used to select the most recently stored\n            recurring detail.\n          type: string\n        sessionId:\n          description: A session ID used to identify a payment session.\n          type: string\n        shopperEmail:\n          description: \u003e-\n            The shopper's email address. We recommend that you provide this\n            data, as it is used in velocity fraud checks.\n\n            \u003e For 3D Secure 2 transactions, schemes require the `shopperEmail` for both `deviceChannel` **browser** and **app**.\n          type: string\n        shopperIP:\n          description: \u003e-\n            The shopper's IP address. We recommend that you provide this data,\n            as it is used in a number of risk checks (for instance, number of\n            payment attempts or location-based checks).\n\n            \u003e This field is mandatory for some merchants depending on your business model. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).\n          type: string\n        shopperInteraction:\n          description: \u003e-\n            Specifies the sales channel, through which the shopper gives their\n            card details, and whether the shopper is a returning customer.\n\n            For the web service API, Adyen assumes Ecommerce shopper interaction by default.\n\n\n            This field has the following possible values:\n\n            * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.\n\n            * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).\n\n            * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.\n\n            * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.\n          enum:\n            - Ecommerce\n            - ContAuth\n            - Moto\n            - POS\n          type: string\n        shopperLocale:\n          description: The combination of a language code and a country code to specify the\n            language to be used in the payment.\n          type: string\n        shopperName:\n          $ref: \"#/components/schemas/Name\"\n          description: The shopper's full name and gender (if specified).\n        shopperReference:\n          description: \u003e-\n            The shopper's reference to uniquely identify this shopper (e.g. user\n            ID or account ID).\n\n            \u003e This field is required for recurring payments.\n          type: string\n        shopperStatement:\n          description: The text to appear on the shopper's bank statement.\n          type: string\n        socialSecurityNumber:\n          description: The shopper's social security number.\n          type: string\n        splits:\n          description: The details of how the payment should be split when distributing a\n            payment to a MarketPay Marketplace and its Accounts.\n          items:\n            $ref: \"#/components/schemas/Split\"\n          type: array\n        store:\n          description: The physical store, for which this payment is processed.\n          maxLength: 16\n          minLength: 1\n          type: string\n        telephoneNumber:\n          description: The shopper's telephone number.\n          type: string\n        threeDS2RequestData:\n          $ref: \"#/components/schemas/ThreeDS2RequestData\"\n          description: Request fields for 3D Secure 2.\n        threeDS2Result:\n          $ref: \"#/components/schemas/ThreeDS2Result\"\n          description: Thre ThreeDS2Result that was returned in the final CRes.\n        threeDS2Token:\n          description: The ThreeDS2Token that was returned in the /authorise call.\n          type: string\n        totalsGroup:\n          description: The reference value to aggregate sales totals in reporting. When not\n            specified, the store field is used (if available).\n          maxLength: 16\n          minLength: 1\n          type: string\n        trustedShopper:\n          description: Set to true if the payment should be routed to a trusted MID.\n          type: boolean\n      required:\n        - merchantAccount\n        - reference\n        - amount\n    PaymentResult:\n      properties:\n        additionalData:\n          description: This field contains additional data, which may be required to return\n            in a particular payment response. To choose data fields to be\n            returned, go to **Customer Area** \u003e **Account** \u003e **API URLs**.\n          type: object\n        authCode:\n          description: \u003e-\n            Authorisation code:\n\n            * When the payment is authorised successfully, this field holds the authorisation code for the payment.\n\n            * When the payment is not authorised, this field is empty.\n          type: string\n        dccAmount:\n          $ref: \"#/components/schemas/Amount\"\n          description: \u003e-\n            Includes the currency of the conversion and the value of the\n            transaction.\n\n            \u003e This value only applies if you have implemented Dynamic Currency Conversion. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).\n        dccSignature:\n          description: \u003e-\n            Cryptographic signature used to verify `dccQuote`.\n\n            \u003e This value only applies if you have implemented Dynamic Currency Conversion. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).\n          type: string\n        fraudResult:\n          $ref: \"#/components/schemas/FraudResult\"\n          description: The fraud result properties of the payment.\n        issuerUrl:\n          description: |-\n            The URL to direct the shopper to.\n            \u003e In case of SecurePlus, do not redirect a shopper to this URL.\n          type: string\n        md:\n          description: The payment session.\n          type: string\n        paRequest:\n          description: \u003e-\n            The 3D request data for the issuer.\n\n\n            If the value is **CUPSecurePlus-CollectSMSVerificationCode**, collect an SMS code from the shopper and pass it in the `/authorise3D` request. For more information, see [3D Secure](https://docs.adyen.com/classic-integration/3d-secure).\n          type: string\n        pspReference:\n          description: \u003e-\n            Adyen's 16-character string reference associated with the\n            transaction/request. This value is globally unique; quote it when\n            communicating with us about this request.\n\n\n            \u003e `pspReference` is returned only for non-redirect payment methods.\n          type: string\n        refusalReason:\n          description: \u003e-\n            If the payment's authorisation is refused or an error occurs during\n            authorisation, this field holds Adyen's mapped reason for the\n            refusal or a description of the error.\n\n\n            When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.\n          type: string\n        resultCode:\n          description: \u003e\n            The result of the payment. Possible values:\n\n\n            * **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions.\n\n            * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state.\n\n            * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state.\n\n            * **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions.\n\n            * **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state.\n\n            * **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions.\n\n            * **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.\n\n            * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. For more information on handling a pending payment, refer to [Payments with pending status](https://docs.adyen.com/development-resources/payments-with-pending-status).\n\n            * **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments.\n\n            * **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation.\n          enum:\n            - AuthenticationFinished\n            - Authorised\n            - Cancelled\n            - ChallengeShopper\n            - Error\n            - IdentifyShopper\n            - Pending\n            - Received\n            - RedirectShopper\n            - Refused\n          type: string\n    Recurring:\n      properties:\n        contract:\n          description: \u003e-\n            The type of recurring contract to be used.\n\n            Possible values:\n\n            * `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-essentials/payment-glossary#card_security_code_cvc_cvv_cid_).\n\n            * `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payment-glossary#cardnotpresentcnp).\n\n            * `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not.\n\n            * `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/features/third-party-payouts).\n          enum:\n            - ONECLICK\n            - RECURRING\n            - PAYOUT\n          type: string\n        recurringDetailName:\n          description: A descriptive name for this detail.\n          type: string\n        recurringExpiry:\n          description: Date after which no further authorisations shall be performed. Only\n            for 3D Secure 2.\n          format: date-time\n          type: string\n        recurringFrequency:\n          description: Minimum number of days between authorisations. Only for 3D Secure 2.\n          type: string\n        tokenService:\n          description: The name of the token service.\n          enum:\n            - VISATOKENSERVICE\n            - MCTOKENSERVICE\n          type: string\n    SDKEphemPubKey:\n      properties:\n        crv:\n          description: The `crv` value as received from the 3D Secure 2 SDK.\n          type: string\n        kty:\n          description: The `kty` value as received from the 3D Secure 2 SDK.\n          type: string\n        x:\n          description: The `x` value as received from the 3D Secure 2 SDK.\n          type: string\n        y:\n          description: The `y` value as received from the 3D Secure 2 SDK.\n          type: string\n    Split:\n      properties:\n        account:\n          description: |-\n            The account to which this split applies.\n\n            \u003eRequired if the type is `MarketPlace`.\n          type: string\n        amount:\n          $ref: \"#/components/schemas/SplitAmount\"\n          description: The amount of this split.\n        description:\n          description: A description of this split.\n          type: string\n        reference:\n          description: \u003e-\n            The reference of this split. Used to link other operations (e.g.\n            captures and refunds) to this split.\n\n\n            \u003eRequired if the type is `MarketPlace`.\n          type: string\n        type:\n          description: \u003e-\n            The type of this split.\n\n\n            \u003ePermitted values: `Default`, `PaymentFee`, `VAT`, `Commission`, `MarketPlace`, `Verification`.\n          enum:\n            - Commission\n            - Default\n            - MarketPlace\n            - PaymentFee\n            - VAT\n            - Verification\n          type: string\n      required:\n        - amount\n        - type\n    SplitAmount:\n      properties:\n        currency:\n          description: \u003e-\n            The three-character [ISO currency\n            code](https://docs.adyen.com/development-resources/currency-codes).\n\n\n            If this value is not provided, the currency in which the payment is made will be used.\n          maxLength: 3\n          minLength: 3\n          type: string\n        value:\n          description: \u003e-\n            The payable amount that can be charged for the transaction.\n\n\n            The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).\n          format: int64\n          type: integer\n      required:\n        - value\n    ThreeDS2RequestData:\n      properties:\n        authenticationOnly:\n          description: If set to true, you will only perform the [3D Secure 2\n            authentication](https://docs.adyen.com/checkout/3d-secure-2/3ds2-checkout-authentication-only-integration),\n            and not the payment authorisation.\n          type: boolean\n        challengeIndicator:\n          description: \u003e\n            Possibility to specify a preference for receiving a challenge from\n            the issuer.\n\n            Allowed values:\n\n            * `noPreference`\n\n            * `requestNoChallenge`\n\n            * `requestChallenge`\n          enum:\n            - noPreference\n            - requestNoChallenge\n            - requestChallenge\n          type: string\n        deviceChannel:\n          description: |-\n            The environment of the shopper.\n            Allowed values:\n            * `app`\n            * `browser`\n          type: string\n        deviceRenderOptions:\n          $ref: \"#/components/schemas/DeviceRenderOptions\"\n          description: |-\n            Display options for the 3D Secure 2 SDK.\n             Required for `deviceChannel` **app**.\n        messageVersion:\n          description: The `messageVersion` value indicating the 3D Secure 2 protocol\n            version.\n          type: string\n        notificationURL:\n          description: URL to where the issuer should send the `CRes`. Required if you are\n            not using components for `channel` **Web** or if you are using\n            classic integration `deviceChannel` **browser**.\n          type: string\n        sdkAppID:\n          description: |-\n            The `sdkAppID` value as received from the 3D Secure 2 SDK.\n            Required for `deviceChannel` set to **app**.\n          type: string\n        sdkEncData:\n          description: |-\n            The `sdkEncData` value as received from the 3D Secure 2 SDK.\n            Required for `deviceChannel` set to **app**.\n          type: string\n        sdkEphemPubKey:\n          $ref: \"#/components/schemas/SDKEphemPubKey\"\n          description: |-\n            The `sdkEphemPubKey` value as received from the 3D Secure 2 SDK.\n            Required for `deviceChannel` set to **app**.\n        sdkMaxTimeout:\n          description: \u003e-\n            The maximum amount of time in minutes for the 3D Secure 2\n            authentication process.\n\n            Only for `deviceChannel` set to **app**.\n          format: int32\n          type: integer\n        sdkReferenceNumber:\n          description: |-\n            The `sdkReferenceNumber` value as received from the 3D Secure 2 SDK.\n            Only for `deviceChannel` set to **app**.\n          type: string\n        sdkTransID:\n          description: |-\n            The `sdkTransID` value as received from the 3D Secure 2 SDK.\n            Only for `deviceChannel` set to **app**.\n          type: string\n        threeDSCompInd:\n          description: Completion indicator for the device fingerprinting.\n          type: string\n        threeDSRequestorID:\n          description: Required for [authentication-only\n            integration](https://docs.adyen.com/checkout/3d-secure-2/3ds2-checkout-authentication-only-integration)\n            for Visa. Unique 3D Secure requestor identifier assigned by the\n            Directory Server when you enrol for 3D Secure 2.\n          type: string\n        threeDSRequestorName:\n          description: Required for [authentication-only\n            integration](https://docs.adyen.com/checkout/3d-secure-2/3ds2-checkout-authentication-only-integration)\n            for Visa. Unique 3D Secure requestor name assigned by the Directory\n            Server when you enrol for 3D Secure 2.\n          type: string\n        threeDSRequestorURL:\n          description: URL of the (customer service) website that will be shown to the\n            shopper in case of technical errors during the 3D Secure 2 process.\n          type: string\n      required:\n        - deviceChannel\n    ThreeDS2Result:\n      properties:\n        authenticationValue:\n          description: The `authenticationValue` value as defined in the 3D Secure 2\n            specification.\n          type: string\n        dsTransID:\n          description: The `dsTransID` value as defined in the 3D Secure 2 specification.\n          type: string\n        eci:\n          description: The `eci` value as defined in the 3D Secure 2 specification.\n          type: string\n        threeDSServerTransID:\n          description: The `threeDSServerTransID` value as defined in the 3D Secure 2\n            specification.\n          type: string\n        timestamp:\n          description: The `timestamp` value of the 3D Secure 2 authentication.\n          type: string\n        transStatus:\n          description: The `transStatus` value as defined in the 3D Secure 2 specification.\n          type: string\n        transStatusReason:\n          description: The `transStatusReason` value as defined in the 3D Secure 2\n            specification.\n          type: string\n    ThreeDS2ResultRequest:\n      properties:\n        merchantAccount:\n          description: The merchant account identifier, with which you want to process the\n            transaction.\n          type: string\n        pspReference:\n          description: The pspReference returned in the /authorise call.\n          type: string\n      required:\n        - merchantAccount\n        - pspReference\n    ThreeDS2ResultResponse:\n      properties:\n        threeDS2Result:\n          $ref: \"#/components/schemas/ThreeDS2Result\"\n          description: The result of the 3D Secure 2 authentication.\n    ThreeDSecureData:\n      properties:\n        authenticationResponse:\n          description: \u003e-\n            In 3D Secure 1, the authentication response if the shopper was\n            redirected.\n\n\n            In 3D Secure 2, this is the `transStatus` from challenge flow. If the transaction was frictionless, set this value to **Y**.\n          enum:\n            - Y\n            - N\n            - U\n            - A\n          type: string\n        cavv:\n          description: The cardholder authentication value (base64 encoded, 20 bytes in a\n            decoded form).\n          format: byte\n          type: string\n        cavvAlgorithm:\n          description: The CAVV algorithm used. Include this only for 3D Secure 1.\n          type: string\n        directoryResponse:\n          description: \u003e-\n            In 3D Secure 1, this is the enrollment response from the 3D\n            directory server.\n\n\n            In 3D Secure 2, this is the `transStatus` from 3D Secure device fingerprinting result.\n          enum:\n            - Y\n            - N\n            - U\n            - E\n            - C\n          type: string\n        dsTransID:\n          description: Supported for 3D Secure 2. The unique transaction identifier\n            assigned by the Directory Server (DS) to identify a single\n            transaction.\n          type: string\n        eci:\n          description: The electronic commerce indicator.\n          type: string\n        threeDSVersion:\n          description: The version of the 3D Secure protocol.\n          type: string\n        xid:\n          description: Supported for 3D Secure 1. The transaction identifier\n            (Base64-encoded, 20 bytes in a decoded form).\n          format: byte\n          type: string\nx-groups:\n  - General\n  - Modifications\n"
		}
	},
	"Error": "parse: parse spec: paths: /cancelOrRefund: post: operation \"\": requestBody: content: \"application/json\": parse schema: parse schema: resolve \"#/components/schemas/ModificationRequest\": parse schema: property \"mpiData\": parse schema: resolve \"#/components/schemas/ThreeDSecureData\": parse schema: property \"authenticationResponse\": parse enum values: parse value \"true\": expected type \"string\", got \"bool\""
}