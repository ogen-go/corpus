{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/shalvah/TheCensorshipAPI"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "public/docs/openapi.yaml",
			"byteSize": 26649,
			"content": "openapi: 3.0.3\ninfo:\n    title: 'The Censorship API'\n    description: 'The Censorship API gives you the power to censor anybody, anywhere. Keep them from using dirty words, like \"family\", and \"love\". Ugh🤮.'\n    version: 1.0.0\nservers:\n    -\n        url: 'http://localhost:8000'\npaths:\n    /api/badwords:\n        get:\n            summary: 'Fetch the list of bad words.'\n            description: ''\n            parameters:\n                -\n                    in: query\n                    name: 'filters[how_bad_is_it]'\n                    description: 'Filter by level of badness.'\n                    example: eaque\n                    required: false\n                    schema:\n                        type: string\n                        description: 'Filter by level of badness.'\n                        example: eaque\n                -\n                    in: query\n                    name: 'filters[created_at]'\n                    description: 'Filter for when the word was created.'\n                    example: blanditiis\n                    required: false\n                    schema:\n                        type: string\n                        description: 'Filter for when the word was created.'\n                        example: blanditiis\n                -\n                    in: query\n                    name: 'fields[]'\n                    description: 'Fields to include in the response'\n                    example: corporis\n                    required: false\n                    schema:\n                        type: string\n                        description: 'Fields to include in the response'\n                        example: corporis\n                -\n                    in: query\n                    name: page\n                    description: 'Page number to return.'\n                    example: 1\n                    required: false\n                    schema:\n                        type: string\n                        description: 'Page number to return.'\n                        example: 1\n                -\n                    in: query\n                    name: pageSize\n                    description: 'Number of items to return in a page. Defaults to 10.'\n                    example: null\n                    required: false\n                    schema:\n                        type: string\n                        description: 'Number of items to return in a page. Defaults to 10.'\n                        example: null\n                -\n                    in: header\n                    name: Content-Type\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n                -\n                    in: header\n                    name: Accept\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n            responses:\n                200:\n                    description: ''\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                example:\n                                    current_page: 1\n                                    data: [{ id: 1, word: est, how_bad_is_it: 'very bad', created_at: '2020-09-10T17:19:10.000000Z', updated_at: '2020-09-10T17:19:10.000000Z' }, { id: 2, word: molestiae, how_bad_is_it: 'very bad', created_at: '2020-09-10T17:19:10.000000Z', updated_at: '2020-09-10T17:19:10.000000Z' }]\n                                    first_page_url: 'http://localhost/api/badwords?page=1'\n                                    from: 1\n                                    last_page: 6\n                                    last_page_url: 'http://localhost/api/badwords?page=6'\n                                    links: [{ url: null, label: Previous, active: false }, { url: 'http://localhost/api/badwords?page=1', label: 1, active: true }, { url: 'http://localhost/api/badwords?page=2', label: 2, active: false }, { url: 'http://localhost/api/badwords?page=3', label: 3, active: false }, { url: 'http://localhost/api/badwords?page=4', label: 4, active: false }, { url: 'http://localhost/api/badwords?page=5', label: 5, active: false }, { url: 'http://localhost/api/badwords?page=6', label: 6, active: false }, { url: 'http://localhost/api/badwords?page=2', label: Next, active: false }]\n                                    next_page_url: 'http://localhost/api/badwords?page=2'\n                                    path: 'http://localhost/api/badwords'\n                                    per_page: 2\n                                    prev_page_url: null\n                                    to: 2\n                                    total: 12\n                                properties:\n                                    current_page: { type: integer, example: 1 }\n                                    data: { type: array, example: [{ id: 1, word: est, how_bad_is_it: 'very bad', created_at: '2020-09-10T17:19:10.000000Z', updated_at: '2020-09-10T17:19:10.000000Z' }, { id: 2, word: molestiae, how_bad_is_it: 'very bad', created_at: '2020-09-10T17:19:10.000000Z', updated_at: '2020-09-10T17:19:10.000000Z' }], items: { type: object } }\n                                    first_page_url: { type: string, example: 'http://localhost/api/badwords?page=1' }\n                                    from: { type: integer, example: 1 }\n                                    last_page: { type: integer, example: 6 }\n                                    last_page_url: { type: string, example: 'http://localhost/api/badwords?page=6' }\n                                    links: { type: array, example: [{ url: null, label: Previous, active: false }, { url: 'http://localhost/api/badwords?page=1', label: 1, active: true }, { url: 'http://localhost/api/badwords?page=2', label: 2, active: false }, { url: 'http://localhost/api/badwords?page=3', label: 3, active: false }, { url: 'http://localhost/api/badwords?page=4', label: 4, active: false }, { url: 'http://localhost/api/badwords?page=5', label: 5, active: false }, { url: 'http://localhost/api/badwords?page=6', label: 6, active: false }, { url: 'http://localhost/api/badwords?page=2', label: Next, active: false }], items: { type: object } }\n                                    next_page_url: { type: string, example: 'http://localhost/api/badwords?page=2' }\n                                    path: { type: string, example: 'http://localhost/api/badwords' }\n                                    per_page: { type: integer, example: 2 }\n                                    prev_page_url: { type: string, example: null }\n                                    to: { type: integer, example: 2 }\n                                    total: { type: integer, example: 12 }\n            tags:\n                - 'Bad words'\n            security: []\n        post:\n            summary: 'Add a word to the list.'\n            description: \"This endpoint allows you to add a word to the list. It's a really useful endpoint,\\nand you should play around with it for a bit.\\n\u003caside class=\\\"warning\\\"\u003eWe mean it; you really should.😕\u003c/aside\u003e\"\n            parameters:\n                -\n                    in: header\n                    name: Content-Type\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n                -\n                    in: header\n                    name: Accept\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n            responses:\n                201:\n                    description: '201, Word added'\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                example:\n                                    id: 'http://google.com?page=3'\n                                properties:\n                                    id: { type: string, example: 'http://google.com?page=3' }\n            tags:\n                - 'Bad words'\n            requestBody:\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            properties:\n                                word:\n                                    type: string\n                                    description: 'The word.'\n                                    example: '\"children\"'\n                                how_bad_is_it:\n                                    type: string\n                                    description: 'One of: `unspeakable`, `horrible`, `very bad`, `bad`.'\n                                    example: 'very bad'\n                                dad:\n                                    type: boolean\n                                    description: ''\n                                    example: false\n                            required:\n                                - word\n            security: []\n    '/api/badwords/{badword}':\n        get:\n            summary: 'Fetch a specific bad word.'\n            description: ''\n            parameters:\n                -\n                    in: header\n                    name: Content-Type\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n                -\n                    in: header\n                    name: Accept\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n            responses:\n                200:\n                    description: ''\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                example:\n                                    id: 1\n                                    word: est\n                                    how_bad_is_it: 'very bad'\n                                    created_at: '2020-09-10T17:19:10.000000Z'\n                                    updated_at: '2020-09-10T17:19:10.000000Z'\n                                properties:\n                                    id: { type: integer, example: 1 }\n                                    word: { type: string, example: est }\n                                    how_bad_is_it: { type: string, example: 'very bad' }\n                                    created_at: { type: string, example: '2020-09-10T17:19:10.000000Z' }\n                                    updated_at: { type: string, example: '2020-09-10T17:19:10.000000Z' }\n            tags:\n                - 'Bad words'\n            security: []\n        put:\n            summary: 'Update a bad word.'\n            description: ''\n            parameters:\n                -\n                    in: header\n                    name: Authorization\n                    description: ''\n                    example: 'Bearer {YOUR_AUTH_KEY}'\n                    schema:\n                        type: string\n                -\n                    in: header\n                    name: Content-Type\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n                -\n                    in: header\n                    name: Accept\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n            responses: {  }\n            tags:\n                - 'Bad words'\n            requestBody:\n                required: false\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            properties:\n                                how_bad_is_it:\n                                    type: string\n                                    description: 'One of: `unspeakable`, `horrible`, `very bad`, `bad`.'\n                                    example: 'very bad'\n        delete:\n            summary: 'Remove a bad word from the list.'\n            description: ''\n            parameters:\n                -\n                    in: header\n                    name: Content-Type\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n                -\n                    in: header\n                    name: Accept\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n            responses:\n                204:\n                    description: '204'\n            tags:\n                - 'Bad words'\n            security: []\n        parameters:\n            -\n                in: path\n                name: badword\n                description: 'The ID of the word.'\n                example: '1'\n                required: true\n                schema:\n                    type: string\n    /api/healthcheck:\n        get:\n            summary: 'Health check'\n            description: \"Check if the API is still alive.\\n\\nPS. This is a Closure route. 😄\"\n            parameters:\n                -\n                    in: header\n                    name: Content-Type\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n                -\n                    in: header\n                    name: Accept\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n            responses:\n                200:\n                    description: ''\n                    content:\n                        text/plain:\n                            schema:\n                                type: string\n                                example: 'Hi!! 👋'\n            tags:\n                - Endpoints\n            security: []\n    /api/user:\n        get:\n            summary: ''\n            description: ''\n            parameters:\n                -\n                    in: header\n                    name: Content-Type\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n                -\n                    in: header\n                    name: Accept\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n            responses:\n                401:\n                    description: ''\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                example:\n                                    message: Unauthenticated.\n                                properties:\n                                    message: { type: string, example: Unauthenticated. }\n            tags:\n                - Endpoints\n            security: []\n    /api/services/highlightBadWordsInText:\n        post:\n            summary: 'Highlight bad words in texts.'\n            description: 'This endpoint will highlight any bad words in the provided texts, surrounding them with `\u003cem\u003e\u003c/em\u003e` HTML tags.'\n            parameters:\n                -\n                    in: header\n                    name: Content-Type\n                    description: ''\n                    example: application/x-www-form-urlencoded\n                    schema:\n                        type: string\n                -\n                    in: header\n                    name: Accept\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n            responses:\n                200:\n                    description: '200'\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                example:\n                                    highlighted: 'He \u003cem\u003eloves\u003c/em\u003e his \u003cem\u003efamily\u003c/em\u003e sooo much!'\n                                properties:\n                                    highlighted: { type: string, example: 'He \u003cem\u003eloves\u003c/em\u003e his \u003cem\u003efamily\u003c/em\u003e sooo much!' }\n            tags:\n                - Services\n            requestBody:\n                required: false\n                content:\n                    application/x-www-form-urlencoded:\n                        schema:\n                            type: object\n                            properties:\n                                texts:\n                                    type: array\n                                    description: 'Texts to be highlighted.'\n                                    example: ['He loves his family sooo much', 'But they don''t fucking love him back.']\n                                    items: { type: string }\n                                things:\n                                    type: array\n                                    description: 'Things to be done.'\n                                    example: [[], []]\n                                    items: { type: object, properties: { name: { type: string, description: Thing., example: sapiente } }, required: [name] }\n            security: []\n    '/api/services/censorTexts/{mode}':\n        post:\n            summary: 'Censor bad words in texts.'\n            description: 'This endpoint will censor any bad words in a list of texts.'\n            parameters:\n                -\n                    in: header\n                    name: Content-Type\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n                -\n                    in: header\n                    name: Accept\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n            responses:\n                200:\n                    description: '200'\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    type: string\n                                example:\n                                    - 'He l===s his f====y sooo much'\n                                    - 'But they don''t fucking l===e him back.'\n            tags:\n                - Services\n            requestBody:\n                required: false\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            properties:\n                                texts:\n                                    type: array\n                                    description: 'Text to be censored.'\n                                    example: 'He loves his family sooo much'\n                                    items: { type: string }\n                                items:\n                                    type: object\n                                    description: 'An it'\n                                    example: []\n                                    properties: { inttt: { type: integer, description: 'Other it', example: 4 } }\n                                things:\n                                    type: array\n                                    description: 'Things to be done.'\n                                    example: [[], []]\n                                    items: { type: object, properties: { name: { type: string, description: Thing., example: nam } }, required: [name] }\n            security: []\n        parameters:\n            -\n                in: path\n                name: mode\n                description: \"Optional parameter. Censorship mode. `full` will replace the entire word with `=====`,\\n`partial` will replace all characters but the first and last. Defaults to `partial`.\"\n                required: true\n                schema:\n                    type: string\n                examples:\n                    omitted:\n                        summary: 'When the value is omitted'\n                        value: ''\n                    present:\n                        summary: 'When the value is present'\n                        value: ea\n    /api/services/censorImage:\n        post:\n            summary: 'Censor bad words in an image.'\n            description: 'This endpoint will censor any bad words in the provided image and return the censored image. All bad words will be replaced by ======.'\n            parameters:\n                -\n                    in: header\n                    name: Content-Type\n                    description: ''\n                    example: multipart/form-data\n                    schema:\n                        type: string\n                -\n                    in: header\n                    name: Accept\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n            responses:\n                200:\n                    description: 'The censored image'\n                    content:\n                        application/octet-stream:\n                            schema:\n                                type: string\n                                format: binary\n                400:\n                    description: '400, When the image''s words are too powerful😢'\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                example:\n                                    message: 'Operation failed'\n                                    reason: 'The words are too touching.😭'\n                                properties:\n                                    message: { type: string, example: 'Operation failed' }\n                                    reason: { type: string, example: 'The words are too touching.😭' }\n            tags:\n                - Services\n            requestBody:\n                required: true\n                content:\n                    multipart/form-data:\n                        schema:\n                            type: object\n                            properties:\n                                image:\n                                    type: string\n                                    format: binary\n                                    description: 'The image containing text to be censored.'\n                            required:\n                                - image\n            security: []\n    /api/services/getTopBadWords:\n        get:\n            summary: 'Get the most frequently used bad words.'\n            description: 'PS: This response was generated using the `@apiResource` and `@apiResourceModel` tag. 😏'\n            parameters:\n                -\n                    in: header\n                    name: Content-Type\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n                -\n                    in: header\n                    name: Accept\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n            responses:\n                200:\n                    description: ''\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                example:\n                                    data: [{ word: sed, how_bad_is_it: 'very bad' }, { word: consequatur, how_bad_is_it: horrible }]\n                                    links: { first: '/?page=1', last: null, prev: null, next: null }\n                                    meta: { current_page: 1, from: 1, path: /, per_page: '5', to: 2 }\n                                properties:\n                                    data: { type: array, example: [{ word: sed, how_bad_is_it: 'very bad' }, { word: consequatur, how_bad_is_it: horrible }], items: { type: object } }\n                                    links: { type: object, example: { first: '/?page=1', last: null, prev: null, next: null } }\n                                    meta: { type: object, example: { current_page: 1, from: 1, path: /, per_page: '5', to: 2 } }\n            tags:\n                - Services\n            security: []\n    /api/services/getBadWordStats:\n        get:\n            summary: 'Get stats for a word''s usage.'\n            description: 'PS: This response was generated using the `@transformer` tag. 😏'\n            parameters:\n                -\n                    in: header\n                    name: Content-Type\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n                -\n                    in: header\n                    name: Accept\n                    description: ''\n                    example: application/json\n                    schema:\n                        type: string\n            responses:\n                200:\n                    description: ''\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                example:\n                                    data: { word: earum, last_used: 1602167486, frequency: 1240354959 }\n                                properties:\n                                    data: { type: object, example: { word: earum, last_used: 1602167486, frequency: 1240354959 } }\n            tags:\n                - Services\n            security: []\ncomponents:\n    securitySchemes:\n        default:\n            type: http\n            scheme: bearer\n            description: ''\nsecurity:\n    -\n        default: []\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /api/badwords/{badword}: put: responses: no responses"
}