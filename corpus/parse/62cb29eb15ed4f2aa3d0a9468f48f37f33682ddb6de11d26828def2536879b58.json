{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ramank775/chat-server"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/openapi.yaml",
			"byteSize": 7821,
			"content": "openapi: 3.1.0\ninfo:\n  title: Vartalap\n  description: \u003e-\n    [Vartalap](https://vartalap.one9x.org/) is an open source personal chat\n    application. It is design to provide the level of transparency in the\n    personal messaging application with your data.\n\n\n    This is a API documentation of the Vartalap.\n\n\n    For Authorization always set the following headers\n\n\n    ``` plaintext\n\n    accesskey= # Authentication token as response of login api\n\n    user= # Authenticated username\n\n    ```\n  version: 1.0.0\nservers:\n  - url: http://{{baseurl}}\ncomponents:\n  securitySchemes:\n    apikeyAuth:\n      type: http\n      scheme: apikey\nsecurity:\n  - apikeyAuth: []\ntags:\n  - name: v1.0\n  - name: v1.0 \u003e Auth\n    description: Authentication endpoints\n  - name: v1.0 \u003e Profile\n    description: User Profile Endpoints\n  - name: v1.0 \u003e Gateway\n    description: \u003e-\n      Web socket and HTTP Gateway\n\n\n      As postman doesn't yet support adding web socket request in normal\n      collection.\n\n\n      Endpoint: `wss://{{hostname}}/wss`\n  - name: v1.0 \u003e Group\n    description: Endpoints for performing group related actions\n  - name: v1.0 \u003e Assets\n    description: File service endpoint to upload and download files\n  - name: v1.0 \u003e Contact Book\npaths:\n  /v1.0/login:\n    post:\n      tags:\n        - v1.0 \u003e Auth\n      summary: Login With Firebase\n      description: Authenticate with Firebase such as Phone Auth\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                username: '{{username}}'\n                notificationToken: fcm token\n      parameters:\n        - name: token\n          in: header\n          schema:\n            type: string\n          description: Firebase auth token\n          example: '{{firebase_auth_token}}'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /v1.0/profile/:\n    get:\n      tags:\n        - v1.0 \u003e Profile\n      summary: Get Profile\n      description: Get User profile\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /v1.0/messages:\n    post:\n      tags:\n        - v1.0 \u003e Gateway\n      summary: Send Message\n      description: Http endpoint to send messages\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                - _v: 2\n                  id: string\n                  head:\n                    type: chat|group|channel|bot|notification\n                    to: username|group_id|channel_id|bot_id\n                    from: username\n                    chatid: chatid\n                    contentType: json|text|video|audio|location|form\n                    action: \u003e-\n                      message|ack|subscribe|unsubscribe|join|leave|create|add-member|remove-member\n                  meta:\n                    hash: md5:hash\n                    content_hash: md5:hash\n                    generate_ts: 123455667890\n                  body:\n                    text: Hello this a text message\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /v1.0/groups/:\n    get:\n      tags:\n        - v1.0 \u003e Group\n      summary: Get All Groups\n      description: Get All the groups user have access to\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    post:\n      tags:\n        - v1.0 \u003e Group\n      summary: Create New Group\n      description: Create new group chat\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                name: Group Name/Title\n                profilePic: profile-pic-id\n                members:\n                  - member_1_username\n                  - member_2_username\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /v1.0/groups/{groupId}:\n    get:\n      tags:\n        - v1.0 \u003e Group\n      summary: Get Group Info\n      description: Get group chat information including name, display pic, members\n      parameters:\n        - name: groupId\n          in: path\n          schema:\n            type: string\n          required: true\n          example: e3dbe14f-c8da-4436-b912-da059098c6a5\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /v1.0/groups/{groupId}/members:\n    post:\n      tags:\n        - v1.0 \u003e Group\n      summary: Add Members to Group\n      description: Add members to existing group chat\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                members:\n                  - member_3_username\n                  - member_4_username\n      parameters:\n        - name: groupId\n          in: path\n          schema:\n            type: string\n          required: true\n          example: e3dbe14f-c8da-4436-b912-da059098c6a5\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    delete:\n      tags:\n        - v1.0 \u003e Group\n      summary: Remove Member From Group\n      description: \u003e-\n        Remove other members only valid if you have admin permission or Leave\n        group chat.\n      parameters:\n        - name: groupId\n          in: path\n          schema:\n            type: string\n          required: true\n          example: e3dbe14f-c8da-4436-b912-da059098c6a5\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /v1.0/assets/upload/presigned_url:\n    get:\n      tags:\n        - v1.0 \u003e Assets\n      summary: Generate Presigned URL for upload\n      parameters:\n        - name: ext\n          in: query\n          schema:\n            type: string\n          example: .png\n        - name: category\n          in: query\n          schema:\n            type: string\n          example: chat\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /v1.0/assets/download/{assetId}/presigned_url:\n    get:\n      tags:\n        - v1.0 \u003e Assets\n      summary: Get Presigned Url to download assets\n      parameters:\n        - name: assetId\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /v1.0/assets/{assetId}/status:\n    put:\n      tags:\n        - v1.0 \u003e Assets\n      summary: Update Asset Status\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                status: true\n      parameters:\n        - name: assetId\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /v1.0/contactbook/sync:\n    post:\n      tags:\n        - v1.0 \u003e Contact Book\n      summary: Sync Contact\n      description: Sync contact book, to fetch list of users using this service\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                users:\n                  - username_1\n                  - username_2\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n",
			"canonicalURL": "/github.com/ramank775/chat-server@56f5173ffb4e10d33d7b1a7c5e72b99f01980e88/-/blob/docs/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ramank775/chat-server/blob/56f5173ffb4e10d33d7b1a7c5e72b99f01980e88/docs/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/v1.0/assets/{assetId}/status\": at 1:1306: put: at 1:1313: at 1:5486: security: parse security scheme \"apikeyAuth\": at 1:48: http: at 1:48: invalid \"scheme\": \"apikey\""
}