{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/zendesk/sunshine-conversations-api-spec"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 300065,
			"content": "openapi: 3.0.2\ninfo:\n  version: 9.8.0\n  title: Sunshine Conversations API\n  termsOfService: \u003e-\n    https://www.zendesk.com/company/customers-partners/master-subscription-agreement/\n  description: \u003e\n    # Introduction\n\n\n    \u003caside class=\"notice\"\u003eAs a stepping stone to new and greater things, we’ve\n    updated Sunshine Conversations API to v2. For users wanting to access v1,\n    please proceed \u003ca href=\"https://docs.smooch.io/rest/v1\"\u003ehere\u003c/a\u003e. \n\n    \u003c/aside\u003e\n\n\n    Welcome to the Sunshine Conversations API. The API allows you to craft\n    entirely unique messaging experiences for your app and website as well as\n    talk to any backend or external service.\n\n\n    The Sunshine Conversations API is designed according to REST principles. The\n    API accepts JSON in request bodies and requires that the content-type:\n    application/json header be specified for\n\n    all such requests. The API will always respond with an object. Depending on\n    context, resources may be returned as single objects or as arrays of\n    objects, nested within the response object.\n\n\n    In some cases, the API will also facilitate cross-origin resource sharing so\n    that it can be called from a web application.\n\n\n    \u003caside class=\"notice\"\u003eNote that for authenticated requests, cross-origin\n    resource sharing is only available to appUser scoped credentials. Attempting\n    to call the API from the browser using \n\n    app or account scoped credentials will result in a \u003ca\n    href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"\u003esame-origin\n    policy\u003c/a\u003e browser error. For more information, refer \n\n    to the \u003ca\n    href=\"http://docs.smooch.io/guide/authorization/#handle-credentials-with-caution\"\u003eAuthorization\n    guide\u003c/a\u003e.\u003c/aside\u003e\n\n\n    ## Regions\n\n\n    Sunshine Conversations is available in the following regions. Each Sunshine\n    Conversations region has its own API host.\n\n\n    | Region         | Host                       |\n\n    | -------------- | -------------------------- |\n\n    | United States  | https://api.smooch.io      |\n\n    | European Union | https://api.eu-1.smooch.io |\n\n\n    For more information on regions, visit [the guide](/guide/regions/).\n\n\n    \u003caside class=\"notice\"\u003eWhen configuring an API host, make sure to always use\n    `https`. Some API clients can have unexpected behaviour when following\n    redirects from `http` to `https`.\u003c/aside\u003e\n\n\n    ## Errors\n\n\n    Sunshine Conversations uses standard HTTP status codes to communicate\n    errors. In general, a `2xx` status code indicates success while `4xx`\n    indicates an error, in which case, the response body includes a JSON object\n    which includes an array of errors, with a text `code` and `title` containing\n    more details. Multiple errors can only be included in a `400 Bad Request`. A\n    `5xx` status code indicates that something went wrong on our end.\n\n\n    ```javascript\n\n    {\n       \"errors\":  [\n        {\n            \"code\": \"unauthorized\",\n            \"title\": \"Authorization is required\"\n        }\n       ]\n    }\n\n    ```\n\n\n    ## API Version\n\n\n    The latest version of the API is v2. Version v1.1 is still supported and you\n    can continue using it but we encourage you to upgrade to the latest version.\n    To learn more about API versioning at Sunshine Conversations, including\n    instructions on how to upgrade to the latest version, [visit our\n    docs](https://docs.smooch.io/guide/versioning).\n\n\n    ## API Pagination and Records Limits\n\n\n    All paginated endpoints support cursor-based pagination.\n\n    ### Cursor Pagination\n\n\n    Cursor-based pagination is a common pagination strategy that avoids many of\n    the pitfalls of offset–limit pagination. It works by returning a pointer to\n    a specific item in the dataset. On subsequent requests, the server returns\n    results after the given pointer. \n\n\n    A `page[after]` or `page[before]` query string parameter may be provided,\n    they are cursors pointing to a record id.\n\n\n    The `page[after]` cursor indicates that only records **subsequent** to it\n    should be returned.\n\n\n    The `page[before]` cursor indicates that only records **preceding** it\n    should be returned.\n\n\n    **Only one** of `page[after]` or `page[before]` may be provided in a query,\n    not both.\n\n\n    In most endpoints, an optional `page[size]` query parameter may be passed to\n    control the number of records returned by the request.\n\n\n    ## API Libraries\n\n\n    Sunshine Conversations provides an official API library for\n    [Java](https://github.com/zendesk/sunshine-conversations-java), with more\n    languages to come. These helpful libraries wrap calls to the API and can\n    make interfacing with Sunshine Conversations easier.\n\n\n    ## Postman Collection\n\n\n    \u003ca\n    style=\"display:inline-block;background:url(https://run.pstmn.io/button.svg);height:30px;width:\n    123px;\"\n    href=\"https://s3.amazonaws.com/docs.smooch.io/sunco-openapi/postman_collection.json\"\u003e\u003c/a\u003e\n\n\n    In addition to API libraries, Sunshine Conversations also has a Postman\n    collection that can be used for development or testing purposes. See the\n    [guide](https://docs.smooch.io/guide/postman-collection/) for information on\n    how to install and use the collection in your Postman client.\n\n\n    ## Rate Limits\n\n\n    Sunshine Conversations APIs are subject to rate limiting. If the rate limit\n    is exceeded Sunshine Conversations may return a `429 Too Many Requests` HTTP\n    status code. We apply rate limits to prevent abuse, spam, denial-of-service\n    attacks, and similar issues. Our goal is to keep the limits high enough so\n    that any application using Sunshine Conversations as intended will not\n    encounter them. However usage spikes do occur and encountering a rate limit\n    may be unavoidable. In order to avoid production outages, when calling the\n    Sunshine Conversations API you should implement `429` retry logic using\n    exponential backoff and jitter.\n\n\n    If your use case involves making API calls in bulk, please [contact\n    us](https://smooch.io/contact).\n\n\n    ## Request Size Limits\n\n\n    The Sunshine Conversations API imposes the following size limits on HTTP\n    requests:\n\n\n    | Request Type | Limit |\n\n    | ------------ | ----- |\n\n    | JSON         | 100kb |\n\n    | File upload  | 50mb  |\n\n\n    ## Authorization\n\n\n    This is an overview of how authorization works with the Sunshine\n    Conversations API. Sunshine Conversations allows basic authentication or\n    JSON Web Tokens (JWTs) as authentication methods for server-to-server calls.\n    [See below](#authentication) for more details.\n\n    There are two different authorization scopes available - app and account.\n\n\n    | Scope   | Authorized Methods                       |\n\n    | ------- | ---------------------------------------- |\n\n    | app     | All methods besides Account Provisioning |\n\n    | account | All methods                              |\n\n\n    The app scope can be used to access any of the Sunshine Conversations APIs,\n    besides account provisioning methods, on behalf of a single app, or any app\n    user related to that app. The account scope can be used to access any of the\n    Sunshine Conversations and Account Provisioning APIs on behalf of the\n    account owner, any app belonging to the account, or any app user related to\n    those apps.\n\n\n    \u003caside class=\"notice\"\u003eAn additional scope of `appUser` can also be used to\n    authenticate users when using one of the Sunshine Conversations native SDK\n    integrations. For information on how and when to use this scope, see the\n    guide for \u003ca\n    href=\"https://docs.smooch.io/guide/authenticating-users/\"\u003eauthenticating\n    users.\u003c/a\u003e\u003c/aside\u003e\n\n\n    ## Authentication\n\n\n    To authenticate requests to the API, you will need an API key, composed of a\n    key id and a secret.\n\n    For an overview of how authentication works in Sunshine Conversations and\n    instructions on how to generate an API key, see the guide.\n\n    API requests can be authenticated in two ways:\n\n\n    - With Basic authentication you can make requests using an API key directly.\n\n    - With JSON Web Tokens (JWTs) you sign tokens with an API key, which are\n    then used to authenticate with the API. See [When to Use\n    JWTs?](https://docs.smooch.io/guide/jwt/#when-to-use-jwts) to learn if JWTs\n    are relevant for your usage.\n\n    - Before using an API key in production, make sure to familiarize yourself\n    with best practices on how to [securely handle\n    credentials](https://docs.smooch.io/guide/authentication-secure-credential-handling/).\n\n\n    ### Basic Authentication\n\n\n    API requests can be authenticated with [basic\n    authentication](https://en.wikipedia.org/wiki/Basic_access_authentication)\n    using an API key. The key id is used as the username and the secret as the\n    password. The scope of access is determined by the owner of the API key. See\n    the\n    [guide](https://docs.smooch.io/guide/basic-authentication/#scope-of-access)\n    for more details.\n\n\n    ### JWTs\n\n\n    JSON Web Tokens (JWTs) are an industry standard authentication method. The\n    full specification is described [here](https://tools.ietf.org/html/rfc7519),\n    and a set of supported JWT libraries for a variety of languages and\n    platforms can be found at http://jwt.io. To summarize, a JWT is composed of\n    a header, a payload, and a signature. The payload contains information\n    called claims which describe the subject to whom the token was issued.\n\n    The JWT itself is transmitted via the HTTP `authorization` header. The token\n    should be prefixed with “Bearer” followed by a space. For example: `Bearer\n    your-jwt`.\n\n    To generate a JWT, you need an API key, which is composed of a key ID and a\n    secret. The key ID is included in a JWT’s header, as the `kid` property,\n    while the secret is used to sign the JWT.\n\n    For more in-depth coverage, see the\n    [guide](https://docs.smooch.io/guide/jwt).\n\n\n    #### Header\n\n\n    The JWT header must contain the key id (kid) of the API key that is used to\n    sign it. The algorithm (alg) used should be HS256. Unsigned JWTs are not\n    accepted.\n\n\n    ```javascript\n\n    {\n        \"alg\": \"HS256\",\n        \"typ\": \"JWT\",\n        \"kid\": \"act_5963ceb97cde542d000dbdb1\"\n    }\n\n    ```\n\n\n    #### Payload\n\n\n    The JWT payload must include a scope claim which specifies the caller’s\n    scope of access.\n\n\n    - account-scoped JWTs must be generated with an API key associated with a\n    Sunshine Conversations account (act*) or service account (svc*).\n\n\n    ```javascript\n\n    {\n        \"scope\": \"account\"\n    }\n\n    ```\n\n\n    - app-scoped JWTs can be generated with an API key associated with an app\n    (app\\_).\n\n\n    ```javascript\n\n    {\n       \"scope\": \"app\"\n    }\n\n    ```\n  x-logo:\n    url: sunco_logo.svg\n    altText: Sunshine Conversations\n    href: https://smooch.io/\nservers:\n  - url: https://api.smooch.io\n    description: United States server\n  - url: https://api.eu-1.smooch.io\n    description: European Union server\ntags:\n  - name: Apps\n    x-displayName: Apps\n    description: \"If you’re looking to enable messaging inside your product for your customers, with as much control over the experience as you’d like, you can create and control Sunshine Conversations apps programmatically using [Account Provisioning](https://docs.smooch.io/guide/intro-to-account-provisioning/).\\n### Authentication\\nAccount Provisioning endpoints require `account` scope. See the [authorization](#authorization) and [authentication](#authentication) sections for information.\\nA user account API key (key id that starts with `act_`) can access all account provisioning routes. You can create an account key by going to your account page.\\nA service account API key (key id that starts with `svc_`) may be used to manage apps, but not service accounts or service account keys.\\n\\n| Key Type       | Authorized Methods                                                |\\n| -------------- | ----------------------------------------------------------------- |\\n| act            | All Core and Account Provisioning methods.                        |\\n| svc   \\t       | All Core methods, App Management methods, and App Keys methods.   |\\n\\n### Service Accounts\\nService Account schema and endpoints used for provisioning service accounts. A service account represents an API user, with its own set of credentials, that has only access to a certain subset of apps. For software makers that create apps on behalf of separate customers or businesses, service accounts can be used to generate and distribute credentials that only have access to a single business's data.\\n\\n### App settings\\nApps have a number of optional settings that can be used to customize specific behaviors. See \\nthe `settings` object described below for more information.\\n\"\n  - name: App Keys\n    x-displayName: App Keys\n    description: \u003e-\n      This set of endpoints is used to provision and revoke API keys for a\n      Sunshine Conversations app. An app can have a maximum of 10 keys.\n  - name: Attachments\n    x-displayName: Attachments\n    description: \u003e\n      You can upload files of any type that can then be used to send a file,\n      image or carousel message to a user.\n\n\n      ## Attachments for Messages\n\n      The attachments API allows you to upload a file for the purpose of sending\n      a message.\n\n      Using the for parameter, you can signal to Sunshine Conversations that\n      your upload will be used to send a message to a user.\n\n      Knowing this, Sunshine Conversations will safely delete the attachment\n      when the message, conversation or user is deleted.\n  - name: Conversations\n    x-displayName: Conversations\n    description: \u003e-\n      A stored history of messages sent to and received from a `user`. This set\n      of endpoints is used to provision and manage conversations.\n  - name: Participants\n    x-displayName: Participants\n    description: \u003e-\n      Endpoints used for managing conversation\n      [participants](https://docs.smooch.io/guide/multi-party-conversations#participant).\n  - name: Messages\n    x-displayName: Messages\n    description: \u003e-\n      Endpoints used for managing\n      [messages](https://docs.smooch.io/guide/key-concepts/#message).\n  - name: Activities\n    x-displayName: Activities\n    description: Notify Sunshine Conversations of different conversation activities.\n  - name: Switchboard Actions\n    x-displayName: Switchboard Actions\n    description: Manage which switchboard integration has control over a conversation.\n  - name: Integrations\n    x-displayName: Integrations\n    description: \u003e\n      This set of endpoints is used to configure and manage various front-end\n      messaging channels.\n  - name: CustomIntegrationApiKeys\n    x-displayName: Custom Integration API Keys\n    description: \u003e-\n      This set of endpoints is used to provision and revoke API keys for a\n      Sunshine Conversations integration. An integration can have a maximum of\n      10 keys. This endpoint is only available for integrations of type custom.\n      An error will be returned when attempting to provision API keys for any\n      other integration type.\n  - name: Switchboards\n    x-displayName: Switchboards\n    description: Switchboard operations\n  - name: Switchboard Integrations\n    x-displayName: Switchboard Integrations\n    description: Switchboard Integrations operations\n  - name: Users\n    x-displayName: Users\n    description: This set of endpoints is used to manage users.\n  - name: Clients\n    x-displayName: Clients\n    description: \u003e-\n      Endpoints used for provisioning\n      [clients](https://docs.smooch.io/guide/key-concepts/#client).\n  - name: Changelog\n    description: \u003e-\n      All notable changes to the API will be referenced in the [v2 API\n      changelog](https://docs.smooch.io/guide/v2-api-changelog/).\n  - name: Webhooks\n    description: \u003e\n      Endpoints for managing webhooks associated to a Sunshine Conversations\n      Connect integration or a custom integration. Webhooks are a fantastic way\n      to extend the Sunshine Conversations platform beyond the built-in feature\n      set. You can use webhooks to build your own Sunshine Conversations chat\n      clients, to integrate more deeply with your favorite CRM, or to build a\n      bot.\n\n      A webhook can only operate within the scope of a single Sunshine\n      Conversations app.\n\n      \u003caside class=\"notice\"\u003eAn app is limited to 10 webhooks. A webhook can\n      subscribe to multiple trigger events. We recommend using a single webhook\n      that registers to all the events you need.\u003c/aside\u003e\n\n\n      ## Webhook Triggers\n\n      When a webhook trigger is triggered, a POST request will be made to the\n      URL configured in your webhook object along with a JSON payload specific\n      for the event type.\n\n\n      | Trigger                 | Description                       |\n\n      | ----------------------  | -------------------------- |\n\n      | client:add     | When initiating a channel link or when an SDK client is\n      created.    |\n\n      | client:remove     | When a client is removed. This can happen\n      when:\u003cbr/\u003e1. directly using the API\u003cbr/\u003e2. removing the client using the\n      SDK\u003cbr/\u003e3. transferring a client due to a channel link\u003cbr/\u003e4. failing or\n      cancelling a channel link   |\n\n      | client:update     | When a client is updated. This can happen\n      when:\u003cbr/\u003e1. a channel finds a user that matches the information\n      provided\u003cbr/\u003e2. a client is activated\u003cbr/\u003e3. a user unsubscribes from a\n      conversation or blocks the app    |\n\n      | conversation:create     | When a new conversation is created.    |\n\n      | conversation:join     | When a new participant joins a `sdkGroup`\n      conversation.    |\n\n      | conversation:leave     | When a participant leaves a `sdkGroup`\n      conversation.     |\n\n      | conversation:remove  | When a conversation is deleted. |\n\n      | conversation:message  | When a new message was sent in the conversation.\n      |\n\n      | conversation:message:delivery:channel  | When a message is successfully\n      delivered to a channel. |\n\n      | conversation:message:delivery:failure  | When a new message fails to be\n      delivered in the conversation. |\n\n      | conversation:message:delivery:user  | When a new message is successfully\n      delivered to a user. |\n\n      | conversation:postback  | When a user clicks on a postback action button.\n      |\n\n      | conversation:read  | When a user has read the conversation. |\n\n      | conversation:typing  | When a user starts or stops typing. |\n\n      | switchboard:acceptControl | When a switchboard integration accepts\n      control of a conversation. | \n\n      | switchboard:acceptControl:failure   | When control of a conversation\n      fails to be accepted by a switchboard integration. |\n\n      | switchboard:offerControl  | When a switchboard integration has been\n      offered control of the conversation. |\n\n      | switchboard:offerControl:failure | When control of a conversation can't\n      be offered to another switchboard integration. |\n\n      | switchboard:passControl | When a switchboard integration gives control\n      of the conversation to another switchboard integration. |\n\n      | switchboard:passControl:failure | When changing a switchboard\n      integration to active fails. |\n\n      | user:merge         | When two or more users are merged into one. |\n\n      | user:update         | When a user is updated. (Currently, when a user's\n      identification is updated.)|\n\n\n      ## Securing Sunshine Conversations Webhooks\n\n      When a webhook is created, a shared secret will be generated for it. The\n      secret can be used to determine the veracity of a request to your webhook\n      route. It is included as an `X-API-Key` header with each webhook request\n      sent to the target URL.\n\n      That secret is available in the response to the POST request used to\n      generate the webhook, or through a GET request to the webhook route.\n\n\n      ## Retry policy\n\n\n      A webhook call will be attempted up to 5 times over a 15 minute window.\n      The attempts will happen at an exponentially increasing interval if the\n      target responds with anything but a success (2XX) or a [non-recoverable\n      error](#non-recoverable-errors). If no response is received within 20\n      seconds, the call will be considered a failure and will also be\n      reattempted.\n\n\n      ### Non-recoverable Errors\n\n      The following status codes are deemed to be non-recoverable and Sunshine\n      Conversations will not reattempt a call when receiving a response with\n      them:\n\n\n      - 400: The target exists, but can’t process the payload.\n\n      - 401: The target is behind authentication or doesn’t recognize the\n      webhook secret.\n\n      - 403: Sunshine Conversations should not be calling the target.\n\n      - 404: The target doesn’t exist.\n\n      - 406: The target exists, and rejected the webhook intentionally.\n  - name: Sunshine Conversations Connect\n    x-displayName: Sunshine Conversations Connect\n    description: \u003e\n      Sunshine Conversations has a rapidly growing partner ecosystem which helps\n      you unlock messaging in your product or service and lets customers find\n      you alongside complementary partners. If you're interested in becoming a\n      partner, tell us what you're building with Sunshine Conversations using\n      our [partner\n      application](https://docs.smooch.io/guide/becoming-an-integration-partner/)\n      and we'll provision you with everything you'll need to build your end of\n      the OAuth flow using Sunshine Conversations Connect. In the meantime the\n      OAuth endpoints detailed below can be tested by impersonating Shoplifter,\n      a partnership we built for testing purposes.\n\n\n      # Add to Sunshine Conversations Button\n\n      ```html\n\n      \u003ca\n      href=\"https://app.smooch.io/oauth/authorize?client_id=shoplifter\u0026response_type=code\"\u003e\u003cimg\n      alt=\"Add to Sunshine Conversations\" height=\"40\" width=\"278\"\n      src=\"https://cdn.smooch.io/images/add_to_sunshine_conversations.png\"\n      srcset=\"https://cdn.smooch.io/images/add_to_sunshine_conversations.png 1x,\n      https://cdn.smooch.io/images/add_to_sunshine_conversations@2x.png\n      2x\"/\u003e\u003c/a\u003e\n\n      ```\n\n      This HTML template can be used to place an \"Add to Sunshine Conversations\"\n      button on your website.\n\n\n      \u003cp class=\"add-to-sunshine-conversations-button\"\u003e\n          \u003ca href=\"https://app.smooch.io/oauth/authorize?client_id=shoplifter\u0026response_type=code\"\u003e\u003cimg alt=\"Add to Sunshine Conversations\" height=\"40\" width=\"278\" src=\"https://cdn.smooch.io/images/add_to_sunshine_conversations.png\" srcset=\"https://cdn.smooch.io/images/add_to_sunshine_conversations.png 1x, https://cdn.smooch.io/images/add_to_sunshine_conversations@2x.png 2x\"/\u003e\u003c/a\u003e\n      \u003c/p\u003e\n\n\n      # Sample Application\n\n      An open source sample application implementing Sunshine Conversations\n      Connect has been created to help demonstrate how to get it working. Give\n      [Shoplifter](https://shoplifter.herokuapp.com/) a try.\n\n\n      The source code is available [here](https://github.com/smooch/shoplifter).\n  - name: OAuth Endpoints\n    x-displayName: OAuth Endpoints\n    description: \"The scope of an issued access token is integration scope. This allows API calls to be made to a specific Sunshine Conversations app on behalf of an integration, identified by the integration’s clientId. The access token grants permission to get and create users and conversations associated with the app. The token also grants permission to create webhooks, however only webhooks created for the integration will be visible. An access token with integration scope cannot see or modify webhooks that were created by other integrations, for example.\\n\\n| API\\t      | Access\\t|\\n| --------  | ------- |\\n| [/v2/apps/:appId/users/\\\\*](#tag/Users)\\t| Yes\\t|\\n| [/v2/apps/:appId/conversations/\\\\*](#tag/Conversations)\\t| Yes\\t|\\n| [/v2/apps/:appId/integrations/me/webhooks/\\\\*](#tag/Webhooks/operation/eventWebhooks)\\t| Yes\\t|\\n| [/v2/apps/:appId/switchboards/\\\\*](#tag/Switchboards) | No |\\n| [/v2/apps/\\\\*](#tag/Apps) | No |\\n\"\nx-tagGroups:\n  - name: Account Provisioning\n    tags:\n      - Apps\n      - App Keys\n  - name: Attachments\n    tags:\n      - Attachments\n  - name: Conversations\n    tags:\n      - Conversations\n      - Participants\n      - Messages\n      - Activities\n      - Switchboard Actions\n  - name: Integrations\n    tags:\n      - Integrations\n      - Webhooks\n      - CustomIntegrationApiKeys\n  - name: Switchboards\n    tags:\n      - Switchboards\n      - Switchboard Integrations\n  - name: Users\n    tags:\n      - Users\n      - Clients\n  - name: Sunshine Conversations Connect\n    tags:\n      - Sunshine Conversations Connect\n      - OAuth Endpoints\n  - name: Changelog\n    tags:\n      - Changelog\npaths:\n  /v2/apps:\n    post:\n      tags:\n        - Apps\n      summary: Create App\n      operationId: createApp\n      description: \u003e-\n        Creates a new app. When using [service account](#service-accounts)\n        credentials, the service account is automatically granted access to the\n        app.\n      security:\n        - basicAuth:\n            - account\n        - bearerAuth:\n            - account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/appCreateBody'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/appResponse'\n        '400':\n          description: should have required property 'displayName'\n        '402':\n          description: \u003e-\n            Your account has reached the maximum number of apps for your\n            subscription plan\n    get:\n      tags:\n        - Apps\n      summary: List Apps\n      operationId: listApps\n      description: \u003e\n        Lists all apps that a user is part of. This API is paginated through\n        [cursor\n        pagination](#section/Introduction/API-pagination-and-records-limits). \n\n        ```shell\n\n        /v2/apps?page[after]=5e1606762556d93e9c176f69\u0026page[size]=10\n\n        ```\n      security:\n        - basicAuth:\n            - account\n        - bearerAuth:\n            - account\n      parameters:\n        - $ref: '#/components/parameters/pageQuery'\n        - $ref: '#/components/parameters/appFilterQuery'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/appListResponse'\n        '400':\n          description: Invalid page query parameters\n        '403':\n          description: The serviceAccountId provided does not match supplied credentials\n  /v2/apps/{appId}:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n    get:\n      tags:\n        - Apps\n      summary: Get App\n      operationId: getApp\n      description: Fetches an individual app.\n      security:\n        - basicAuth:\n            - app\n            - account\n        - bearerAuth:\n            - app\n            - account\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/appResponse'\n        '404':\n          description: App not found\n    patch:\n      tags:\n        - Apps\n      summary: Update App\n      operationId: updateApp\n      description: Updates an app.\n      security:\n        - basicAuth:\n            - account\n        - bearerAuth:\n            - account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/appUpdateBody'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/appResponse'\n        '400':\n          description: App metadata is limited to 4096 bytes in size.\n        '404':\n          description: App not found\n    delete:\n      tags:\n        - Apps\n      summary: Delete App\n      operationId: deleteApp\n      description: Removes the specified app, including all its enabled integrations.\n      security:\n        - basicAuth:\n            - account\n        - bearerAuth:\n            - account\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: App not found\n  /v2/apps/{appId}/keys:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n    post:\n      tags:\n        - App Keys\n      summary: Create App Key\n      operationId: createAppKey\n      description: \u003e\n        Creates an API key for the specified app. The response body will include\n        a secret \n\n        as well as its corresponding id, which you can use to generate JSON Web\n        Tokens to \n\n        securely make API calls on behalf of the app.\n      security:\n        - basicAuth:\n            - account\n        - bearerAuth:\n            - account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: AppKeyCreateBody\n              properties:\n                displayName:\n                  allOf:\n                    - $ref: '#/components/schemas/displayName'\n                  nullable: false\n                  description: The name of the API key.\n                  example: Key 1\n              required:\n                - displayName\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/appKeyResponse'\n    get:\n      tags:\n        - App Keys\n      summary: List App Keys\n      operationId: listAppKeys\n      description: Lists all API keys for a given app.\n      security:\n        - basicAuth:\n            - account\n        - bearerAuth:\n            - account\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/appKeyListResponse'\n  /v2/apps/{appId}/keys/{keyId}:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/keyId'\n    get:\n      tags:\n        - App Keys\n      summary: Get App Key\n      operationId: getAppKey\n      description: Returns an API key.\n      security:\n        - basicAuth:\n            - account\n        - bearerAuth:\n            - account\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/appKeyResponse'\n        '404':\n          description: Not Found\n    delete:\n      tags:\n        - App Keys\n      summary: Delete App Key\n      operationId: deleteAppKey\n      description: Removes an API key.\n      security:\n        - basicAuth:\n            - account\n        - bearerAuth:\n            - account\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: App not found\n  /v2/apps/{appId}/attachments:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/accessQuery'\n      - $ref: '#/components/parameters/forQuery'\n      - $ref: '#/components/parameters/conversationIdQuery'\n    post:\n      tags:\n        - Attachments\n      summary: Upload Attachment\n      operationId: uploadAttachment\n      description: \u003e\n        Upload an attachment to Sunshine Conversations to use in future\n        messages. Files are uploaded using the multipart/form-data content type.\n        Use the returned mediaUrl to send a file, image or carousel message.\n\n        \u003caside class=\"notice\"\u003eNote that Sunshine Conversations limits the size\n        and type of file you can upload to the platform. See the \u003ca\n        href=\"https://docs.smooch.io/guide/validating-files\"\u003efile validation\u003c/a\u003e\n        guide for more details.\u003c/aside\u003e\n      security:\n        - basicAuth:\n            - integration\n            - app\n            - account\n        - bearerAuth:\n            - integration\n            - app\n            - account\n      requestBody:\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/attachmentUploadBody'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/attachmentResponse'\n        '400':\n          description: Bad request\n  /v2/apps/{appId}/attachments/remove:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n    post:\n      tags:\n        - Attachments\n      summary: Delete Attachment\n      operationId: deleteAttachment\n      description: \u003e\n        Remove an attachment uploaded to Sunshine Conversations through the\n        Upload attachment API.\n\n        See [Attachments for Messages](#section/Attachments-for-Messages) to\n        have attachments automatically deleted when deleting messages,\n        conversations or users.\n\n        \u003caside class=\"notice\"\u003eNote that deleted attachments can remain available\n        on our CDN’s cache up to 15 minutes after the delete call.\u003c/aside\u003e\n      security:\n        - basicAuth:\n            - integration\n            - app\n            - account\n        - bearerAuth:\n            - integration\n            - app\n            - account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/attachmentDeleteBody'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: Attachment not found\n  /v2/apps/{appId}/attachments/token:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n    post:\n      tags:\n        - Attachments\n      summary: Generate Media Token\n      operationId: generateMediaJsonWebToken\n      description: \u003e\n        Generates a media JWT for a list of attachment paths. This media token\n        is a prerequisite for setting the cookie needed to visualize a private\n        attachment.\n\n        \u003caside class=\"notice\"\u003eNote you have the ability to allow files using\n        different rules, see \u003ca\n        href=\"https://docs.smooch.io/guide/private-attachments\"\u003ePrivate\n        Attachments\u003c/a\u003e for more details.\u003c/aside\u003e\n      security:\n        - basicAuth:\n            - app\n            - account\n        - bearerAuth:\n            - app\n            - account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/attachmentMediaTokenBody'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/attachmentMediaTokenResponse'\n  /v2/apps/{appId}/attachments/cookie:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n    get:\n      tags:\n        - Attachments\n      summary: Set Cookie\n      operationId: setCookie\n      description: \u003e\n        With the media JWT retrieved, pass it in the header of the below request\n        as it’s authorization in order to set a cookie in the user’s browser\n        corresponding to the path within the media JWT.\n\n        The expiration date of this cookie will match the expiration date of the\n        media JWT. This cookie will be needed to visualize a private attachment.\n      security:\n        - bearerAuth:\n            - mediaToken\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n  /v2/apps/{appId}/conversations:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n    post:\n      tags:\n        - Conversations\n      summary: Create Conversation\n      operationId: createConversation\n      description: Create a conversation for the specified user(s).\n      security:\n        - basicAuth:\n            - integration\n            - app\n            - account\n        - bearerAuth:\n            - integration\n            - app\n            - account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/conversationCreateBody'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/conversationResponse'\n        '404':\n          description: App not found\n    get:\n      tags:\n        - Conversations\n      summary: List Conversations\n      operationId: listConversations\n      description: \u003e\n        Lists all conversations that a user is part of. This API is paginated\n        through [cursor\n        pagination](#section/Introduction/API-pagination-and-records-limits).\n\n        ```shell\n\n        /v2/apps/:appId/conversations?filter[userId]=42589ad070d43be9b00ff7e5\n\n        ```\n      security:\n        - basicAuth:\n            - integration\n            - app\n            - account\n        - bearerAuth:\n            - integration\n            - app\n            - account\n      parameters:\n        - $ref: '#/components/parameters/pageQuery'\n        - $ref: '#/components/parameters/conversationFilterQuery'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/conversationListResponse'\n        '400':\n          description: Invalid page query parameters\n        '404':\n          description: User not found\n  /v2/apps/{appId}/conversations/{conversationId}:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/conversationId'\n    get:\n      tags:\n        - Conversations\n      summary: Get Conversation\n      operationId: getConversation\n      description: Fetches an individual conversation.\n      security:\n        - basicAuth:\n            - integration\n            - app\n            - account\n        - bearerAuth:\n            - integration\n            - app\n            - account\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/conversationResponse'\n        '404':\n          description: Conversation not found\n    patch:\n      tags:\n        - Conversations\n      summary: Update Conversation\n      operationId: updateConversation\n      description: Updates a conversation record.\n      security:\n        - basicAuth:\n            - integration\n            - app\n            - account\n        - bearerAuth:\n            - integration\n            - app\n            - account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/conversationUpdateBody'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/conversationResponse'\n        '404':\n          description: Conversation not found\n    delete:\n      tags:\n        - Conversations\n      summary: Delete Conversation\n      operationId: deleteConversation\n      description: \u003e-\n        Delete an entire conversation record, along with its messages and\n        attachments. Note that the default conversation cannot be deleted, but\n        the messages contained [can be](#deleteAllMessages).\n      security:\n        - basicAuth:\n            - integration\n            - app\n            - account\n        - bearerAuth:\n            - integration\n            - app\n            - account\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n        '400':\n          description: \u003e-\n            Conversation c93bb9c14dde8ffb94564eae cannot be deleted because it\n            is the default.\n        '404':\n          description: Conversation not found\n  /v2/apps/{appId}/conversations/{conversationId}/join:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/conversationId'\n    post:\n      tags:\n        - Participants\n      summary: Join Conversation\n      operationId: joinConversation\n      description: \u003e\n        Adds a user to a conversation using either their userId or\n        userExternalId. The endpoint only\n\n        supports adding a participant to a sdkGroup conversation.\n      security:\n        - basicAuth:\n            - integration\n            - app\n            - account\n        - bearerAuth:\n            - integration\n            - app\n            - account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/participantJoinBody'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: object\n                title: ParticipantResponse\n                description: The created participant.\n                properties:\n                  participant:\n                    $ref: '#/components/schemas/participant'\n        '400':\n          description: Too many participants\n        '404':\n          description: Conversation not found\n  /v2/apps/{appId}/conversations/{conversationId}/participants:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/conversationId'\n    get:\n      tags:\n        - Participants\n      summary: List Participants\n      operationId: listParticipants\n      description: \u003e\n        Lists all the participants of a particular conversation. This API is\n        paginated through [cursor\n        pagination](#section/Introduction/API-pagination-and-records-limits).\n\n\n        ```shell\n\n        /v2/apps/:appId/conversations/:conversationId/participants?page[before]=26508c10541a4b0ff472e5e2\n\n        ```\n      security:\n        - basicAuth:\n            - integration\n            - app\n            - account\n        - bearerAuth:\n            - integration\n            - app\n            - account\n      parameters:\n        - $ref: '#/components/parameters/pageQuery'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/participantListResponse'\n        '400':\n          description: Invalid page query parameters\n        '404':\n          description: Not found\n  /v2/apps/{appId}/conversations/{conversationId}/leave:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/conversationId'\n    post:\n      tags:\n        - Participants\n      summary: Leave Conversation\n      operationId: leaveConversation\n      description: \u003e\n        Removes a user from a conversation using either their userId,\n        userExternalId, or participantId.\n      security:\n        - basicAuth:\n            - integration\n            - app\n            - account\n        - bearerAuth:\n            - integration\n            - app\n            - account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/participantLeaveBody'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: User is not a member of the conversation\n  /v2/apps/{appId}/conversations/{conversationId}/messages:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/conversationId'\n    post:\n      tags:\n        - Messages\n      summary: Post Message\n      operationId: postMessage\n      description: Send a message in a particular conversation.\n      security:\n        - basicAuth:\n            - integration\n            - app\n            - account\n        - bearerAuth:\n            - integration\n            - app\n            - account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/messagePost'\n            examples:\n              text:\n                $ref: '#/components/examples/text'\n              carousel:\n                $ref: '#/components/examples/carousel'\n              file:\n                $ref: '#/components/examples/file'\n              form:\n                $ref: '#/components/examples/form'\n              image:\n                $ref: '#/components/examples/image'\n              list:\n                $ref: '#/components/examples/list'\n              location:\n                $ref: '#/components/examples/location'\n              whatsapp template:\n                $ref: '#/components/examples/whatsappTemplate'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/messagePostResponse'\n              examples:\n                text:\n                  $ref: '#/components/examples/text-2'\n                carousel:\n                  $ref: '#/components/examples/carousel-2'\n                file:\n                  $ref: '#/components/examples/file-2'\n                form:\n                  $ref: '#/components/examples/form-2'\n                image:\n                  $ref: '#/components/examples/image-2'\n                list:\n                  $ref: '#/components/examples/list-2'\n                location:\n                  $ref: '#/components/examples/location-2'\n    get:\n      tags:\n        - Messages\n      summary: List Messages\n      operationId: listMessages\n      description: \u003e\n        List all messages for a particular conversation. This API is paginated\n        through\n\n        [cursor\n        pagination](#section/Introduction/API-pagination-and-records-limits), in\n        the _backwards_ direction, with the\n\n        most recent (i.e. last) page of messages being returned by default. The\n        `hasMore` flag indicates whether more messages\n\n        exist in the direction you are currently paginating through. To page\n        backwards in the history, use the `beforeCursor` or follow the `prev`\n\n        link. The page size limit is fixed at 100 messages per page.\n\n\n        ```shell\n\n        /v2/apps/:appId/conversations/:conversationId/messages?page[before]=5f32b88acf6bf25073b2be56\n\n        ```\n      security:\n        - basicAuth:\n            - integration\n            - app\n            - account\n        - bearerAuth:\n            - integration\n            - app\n            - account\n      parameters:\n        - $ref: '#/components/parameters/pageQuery'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/messageListResponse'\n        '404':\n          description: Message not found\n    delete:\n      tags:\n        - Messages\n      summary: Delete All Messages\n      operationId: deleteAllMessages\n      description: Delete all messages of a particular conversation.\n      security:\n        - basicAuth:\n            - integration\n            - app\n            - account\n        - bearerAuth:\n            - integration\n            - app\n            - account\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: Not found\n  /v2/apps/{appId}/conversations/{conversationId}/messages/{messageId}:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/conversationId'\n      - $ref: '#/components/parameters/messageId'\n    delete:\n      tags:\n        - Messages\n      summary: Delete Message\n      operationId: deleteMessage\n      description: Delete a single message of a particular conversation.\n      security:\n        - basicAuth:\n            - integration\n            - app\n            - account\n        - bearerAuth:\n            - integration\n            - app\n            - account\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: Not found\n  /v2/apps/{appId}/conversations/{conversationId}/activity:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/conversationId'\n    post:\n      tags:\n        - Activities\n      summary: Post Activity\n      operationId: postActivity\n      description: \u003e\n        Notify Sunshine Conversations of different conversation activities.\n        Supported activity types are:\n\n        * Typing activity\n\n        * Conversation read event\n      security:\n        - basicAuth:\n            - integration\n            - app\n            - account\n        - bearerAuth:\n            - integration\n            - app\n            - account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/activityPost'\n            examples:\n              request:\n                value:\n                  author:\n                    type: user\n                    userId: 5963c0d619a30a2e00de36b8\n                  type: conversation:read\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n  /v2/apps/{appId}/conversations/{conversationId}/acceptControl:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/conversationId'\n    post:\n      tags:\n        - Switchboard Actions\n      summary: Accept Control\n      operationId: acceptControl\n      description: \u003e-\n        The acceptControl action transfers the control of the conversation to\n        the pending switchboard integration. When using integration auth scope,\n        a 403 is returned if the pending switchboard integration is not the\n        authenticated integration.\n      security:\n        - basicAuth:\n            - integration\n            - app\n            - account\n        - bearerAuth:\n            - integration\n            - app\n            - account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/acceptControlBody'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n  /v2/apps/{appId}/conversations/{conversationId}/offerControl:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/conversationId'\n    post:\n      tags:\n        - Switchboard Actions\n      summary: Offer Control\n      operationId: offerControl\n      description: \u003e-\n        The offerControl action will invite a switchboard integration to accept\n        control of the conversation (changing its status to pending), and\n        trigger a webhook signal to that integration indicating that they have\n        been offered control of the conversation. Invalidates previous\n        offerControl actions.\n      security:\n        - basicAuth:\n            - integration\n            - app\n            - account\n        - bearerAuth:\n            - integration\n            - app\n            - account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/offerControlBody'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: Not Found\n  /v2/apps/{appId}/conversations/{conversationId}/passControl:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/conversationId'\n    post:\n      tags:\n        - Switchboard Actions\n      summary: Pass Control\n      operationId: passControl\n      description: \u003e-\n        The passControl action marks the named switchboard integration as active\n        and transition all the other switchboard integrations to standby status.\n      security:\n        - basicAuth:\n            - integration\n            - app\n            - account\n        - bearerAuth:\n            - integration\n            - app\n            - account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/passControlBody'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: Not Found\n  /v2/apps/{appId}/conversations/{conversationId}/releaseControl:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/conversationId'\n    post:\n      tags:\n        - Switchboard Actions\n      summary: Release Control\n      operationId: releaseControl\n      description: \u003e-\n        The releaseControl action releases the control of the conversation by\n        nullifying its switchboard state. When using integration auth scope, a\n        403 is returned if the active switchboard integration is not the\n        authenticated integration.\n      security:\n        - basicAuth:\n            - integration\n            - app\n            - account\n        - bearerAuth:\n            - integration\n            - app\n            - account\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n  /v2/apps/{appId}/integrations:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n    post:\n      tags:\n        - Integrations\n      summary: Create Integration\n      operationId: createIntegration\n      description: \u003e-\n        The Create Integration endpoint allows you to provision apps with\n        front-end messaging channels. Selecting a `custom` integration allows\n        the creation of webhooks.\n      security:\n        - basicAuth:\n            - app\n            - account\n        - bearerAuth:\n            - app\n            - account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/integration'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/integrationResponse'\n                description: The created integration.\n              examples:\n                success:\n                  $ref: '#/components/examples/integrationResponse'\n        '400':\n          description: Invalid integration type\n    get:\n      tags:\n        - Integrations\n      summary: List Integrations\n      operationId: listIntegrations\n      description: \u003e\n        List available integrations. This API is paginated through [cursor\n        pagination](#section/Introduction/API-pagination-and-records-limits).\n\n        ```shell\n\n        /v2/apps/:appId/integrations?page[after]=5e1606762556d93e9c176f69\u0026page[size]=10\u0026filter[types]=custom,web\n\n        ```\n      security:\n        - basicAuth:\n            - app\n            - account\n        - bearerAuth:\n            - app\n            - account\n      parameters:\n        - $ref: '#/components/parameters/pageQuery'\n        - $ref: '#/components/parameters/integrationFilterQuery'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/integrationListResponse'\n              examples:\n                success:\n                  $ref: '#/components/examples/integrationListResponse'\n        '400':\n          description: Invalid query parameters\n  /v2/apps/{appId}/integrations/{integrationId}:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/integrationId'\n    get:\n      tags:\n        - Integrations\n      summary: Get Integration\n      operationId: getIntegration\n      description: Get integration.\n      security:\n        - basicAuth:\n            - app\n            - account\n        - bearerAuth:\n            - app\n            - account\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/integrationResponse'\n                description: The fetched integration.\n              examples:\n                success:\n                  $ref: '#/components/examples/integrationResponse'\n        '404':\n          description: Integration not found\n    patch:\n      tags:\n        - Integrations\n      summary: Update Integration\n      operationId: updateIntegration\n      description: \u003e-\n        Allows you to update certain fields of existing integrations. If\n        updating a specific property is not supported, you must delete the\n        integration and re-create it with the new data.\n      security:\n        - basicAuth:\n            - app\n            - account\n        - bearerAuth:\n            - app\n            - account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/integrationUpdate'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/integrationResponse'\n                description: The updated integration.\n              examples:\n                success:\n                  $ref: '#/components/examples/integrationResponse'\n        '404':\n          description: Integration not found\n    delete:\n      tags:\n        - Integrations\n      summary: Delete Integration\n      operationId: deleteIntegration\n      description: Delete the specified integration.\n      security:\n        - basicAuth:\n            - app\n            - account\n        - bearerAuth:\n            - app\n            - account\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: Integration not found\n  /v2/apps/{appId}/integrations/{integrationId}/keys:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/integrationId'\n    post:\n      tags:\n        - CustomIntegrationApiKeys\n      summary: Create Integration Key\n      operationId: createCustomIntegrationKey\n      description: \u003e-\n        Creates an API key for the specified custom integration. The response\n        body will include a secret as well it’s corresponding id, which you can\n        use to generate JSON Web Tokens to securely make API calls on behalf of\n        the integration.\n      security:\n        - basicAuth:\n            - app\n            - account\n        - bearerAuth:\n            - app\n            - account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: IntegrationApiKey\n              properties:\n                displayName:\n                  type: string\n                  description: The name of the API key.\n                  example: My custom key\n              required:\n                - displayName\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/integrationApiKeyResponse'\n    get:\n      tags:\n        - CustomIntegrationApiKeys\n      summary: List Integration Keys\n      operationId: listCustomIntegrationKeys\n      description: Lists all API keys for a given integration.\n      security:\n        - basicAuth:\n            - app\n            - account\n        - bearerAuth:\n            - app\n            - account\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                title: IntegrationApiKeyListResponse\n                properties:\n                  keys:\n                    type: array\n                    description: Integration keys of the supplied integration.\n                    items:\n                      $ref: '#/components/schemas/apiKey'\n        '400':\n          description: API keys are available only for custom integrations\n  /v2/apps/{appId}/integrations/{integrationId}/keys/{keyId}:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/integrationId'\n      - $ref: '#/components/parameters/keyId'\n    get:\n      tags:\n        - CustomIntegrationApiKeys\n      summary: Get Integration Key\n      operationId: getCustomIntegrationKey\n      description: Get the specified API key.\n      security:\n        - basicAuth:\n            - app\n            - account\n        - bearerAuth:\n            - app\n            - account\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/integrationApiKeyResponse'\n    delete:\n      tags:\n        - CustomIntegrationApiKeys\n      summary: Delete Integration Key\n      operationId: deleteCustomIntegrationKey\n      description: Removes an API key.\n      security:\n        - basicAuth:\n            - app\n            - account\n        - bearerAuth:\n            - app\n            - account\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n  /v2/apps/{appId}/integrations/{integrationId}/webhooks:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/integrationId'\n    post:\n      tags:\n        - Webhooks\n      summary: Create Webhook\n      operationId: createWebhook\n      description: \u003e-\n        Creates a new webhook associated with a Sunshine Conversations Connect\n        integration or a custom integration.\n      security:\n        - basicAuth:\n            - integration\n            - app\n        - bearerAuth:\n            - integration\n            - app\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/webhookCreateBody'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/webhookResponse'\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n    get:\n      tags:\n        - Webhooks\n      summary: List Webhooks\n      operationId: listWebhooks\n      description: \u003e-\n        Lists all webhooks for a given Sunshine Conversations Connect\n        integration or custom integration.\n      security:\n        - basicAuth:\n            - integration\n            - app\n        - bearerAuth:\n            - integration\n            - app\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/webhookListResponse'\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n  /v2/apps/{appId}/integrations/{integrationId}/webhooks/{webhookId}:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/integrationId'\n      - $ref: '#/components/parameters/webhookId'\n    get:\n      tags:\n        - Webhooks\n      summary: Get Webhook\n      operationId: getWebhook\n      description: \u003e-\n        Gets the specified webhook associated with a Sunshine Conversations\n        Connect integration or a custom integration.\n      security:\n        - basicAuth:\n            - integration\n            - app\n        - bearerAuth:\n            - integration\n            - app\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/webhookResponse'\n        '404':\n          description: Not Found\n    patch:\n      tags:\n        - Webhooks\n      summary: Update Webhook\n      operationId: updateWebhook\n      description: \u003e-\n        Updates the specified webhook associated with a Sunshine Conversations\n        Connect integration or a custom integration.\n      security:\n        - basicAuth:\n            - integration\n            - app\n        - bearerAuth:\n            - integration\n            - app\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/webhookBody'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/webhookResponse'\n        '400':\n          description: Bad Request\n        '404':\n          description: Not Found\n    delete:\n      tags:\n        - Webhooks\n      summary: Delete Webhook\n      operationId: deleteWebhook\n      description: \u003e-\n        Deletes the specified webhook associated with a Sunshine Conversations\n        Connect integration or a custom integration.\n      security:\n        - basicAuth:\n            - integration\n            - app\n        - bearerAuth:\n            - integration\n            - app\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: Not Found\n  /v2/apps/{appId}/switchboards:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n    post:\n      tags:\n        - Switchboards\n      summary: Create Switchboard\n      operationId: createSwitchboard\n      description: Create a switchboard.\n      security:\n        - basicAuth:\n            - app\n            - account\n        - bearerAuth:\n            - app\n            - account\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/switchboardResponse'\n              examples:\n                response:\n                  value:\n                    switchboard:\n                      id: 5ef21b132f21af34f088530d\n                      enabled: false\n        '404':\n          description: Not Found\n    get:\n      tags:\n        - Switchboards\n      summary: List Switchboards\n      operationId: listSwitchboards\n      description: |\n        Lists all switchboards belonging to the app.\n      security:\n        - basicAuth:\n            - app\n            - account\n        - bearerAuth:\n            - app\n            - account\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/switchboardListResponse'\n        '404':\n          description: Not Found\n  /v2/apps/{appId}/switchboards/{switchboardId}:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/switchboardId'\n    patch:\n      tags:\n        - Switchboards\n      summary: Update Switchboard\n      operationId: updateSwitchboard\n      description: Updates a switchboard record.\n      security:\n        - basicAuth:\n            - app\n            - account\n        - bearerAuth:\n            - app\n            - account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/switchboardUpdateBody'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/switchboardResponse'\n        '404':\n          description: Not Found\n    delete:\n      tags:\n        - Switchboards\n      summary: Delete Switchboard\n      operationId: deleteSwitchboard\n      description: \u003e-\n        Deletes the switchboard and all its switchboard integrations. The\n        integrations linked to these switchboard integrations are not deleted\n        and will start receiving all conversation events.\n      security:\n        - basicAuth:\n            - app\n            - account\n        - bearerAuth:\n            - app\n            - account\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: Not Found\n  /v2/apps/{appId}/switchboards/{switchboardId}/switchboardIntegrations:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/switchboardId'\n    post:\n      tags:\n        - Switchboard Integrations\n      summary: Create Switchboard Integration\n      operationId: createSwitchboardIntegration\n      description: Create a switchboard integration.\n      security:\n        - basicAuth:\n            - app\n            - account\n        - bearerAuth:\n            - app\n            - account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/switchboardIntegrationCreateBody'\n            examples:\n              request:\n                value:\n                  name: bot\n                  integrationType: zd:agentWorkspace\n                  deliverStandbyEvents: true\n                  nextSwitchboardIntegrationId: 5ef21b86e933b7355c11c606\n                  messageHistoryCount: 5\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/switchboardIntegrationResponse'\n        '400':\n          description: Only one switchboard per app can be created\n        '404':\n          description: Switchboard not found\n    get:\n      tags:\n        - Switchboard Integrations\n      summary: List Switchboard Integrations\n      operationId: listSwitchboardIntegrations\n      description: |\n        Lists all switchboard integrations linked to the switchboard.\n      security:\n        - basicAuth:\n            - app\n            - account\n        - bearerAuth:\n            - app\n            - account\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/switchboardIntegrationListResponse'\n        '404':\n          description: Switchboard not found\n  /v2/apps/{appId}/switchboards/{switchboardId}/switchboardIntegrations/{switchboardIntegrationId}:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/switchboardId'\n      - $ref: '#/components/parameters/switchboardIntegrationId'\n    patch:\n      tags:\n        - Switchboard Integrations\n      summary: Update Switchboard Integration\n      operationId: updateSwitchboardIntegration\n      description: Updates a switchboard integration record.\n      security:\n        - basicAuth:\n            - app\n            - account\n        - bearerAuth:\n            - app\n            - account\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/switchboardIntegrationUpdateBody'\n            examples:\n              request:\n                value:\n                  name: bot\n                  integrationType: zd:agentWorkspace\n                  deliverStandbyEvents: true\n                  nextSwitchboardIntegrationId: 5ef21b86e933b7355c11c606\n                  messageHistoryCount: 5\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/switchboardIntegrationResponse'\n        '404':\n          description: \u003e-\n            Enabled switchboard must have an associated default\n            switchboardIntegration\n    delete:\n      tags:\n        - Switchboard Integrations\n      summary: Delete Switchboard Integration\n      operationId: deleteSwitchboardIntegration\n      description: \u003e-\n        Deletes the switchboard integration. If the deleted switchboard\n        integration had an active status for some conversations, the default\n        switchboard integration will replace it. Note that it is forbidden to\n        delete a switchboard integration if it's the default one (a new one must\n        be chosen first) or if another switchboard integration's\n        `nextSwitchboardIntegrationId` refers to it. The integration that was\n        linked to the deleted switchboard integration will start receiving all\n        conversation events, regardless of the switchboard status.\n      security:\n        - basicAuth:\n            - app\n            - account\n        - bearerAuth:\n            - app\n            - account\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: Not Found\n  /v2/apps/{appId}/users:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n    post:\n      tags:\n        - Users\n      summary: Create User\n      operationId: createUser\n      description: Creates a new user.\n      security:\n        - basicAuth:\n            - account\n            - app\n            - integration\n        - bearerAuth:\n            - account\n            - app\n            - integration\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/userCreateBody'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/userResponse'\n        '409':\n          description: User already exists\n  /v2/apps/{appId}/users/{userIdOrExternalId}:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/userIdOrExternalId'\n    get:\n      tags:\n        - Users\n      summary: Get User\n      operationId: getUser\n      description: Fetches an individual user.\n      security:\n        - basicAuth:\n            - app\n            - account\n            - integration\n        - bearerAuth:\n            - app\n            - account\n            - integration\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/userResponse'\n        '404':\n          description: User not found\n    patch:\n      tags:\n        - Users\n      summary: Update User\n      operationId: updateUser\n      description: Updates a user.\n      security:\n        - basicAuth:\n            - app\n            - account\n            - integration\n        - bearerAuth:\n            - app\n            - account\n            - integration\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/userUpdateBody'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/userResponse'\n        '404':\n          description: User not found\n    delete:\n      tags:\n        - Users\n      summary: Delete User\n      operationId: deleteUser\n      description: \u003e-\n        Delete a user, its clients and its conversation history. The user is\n        considered completely deleted once the `user:delete` webhook is fired.\n        To only delete a user’s personal information, see [Delete User Personal\n        Information](#operation/deleteUserPersonalInformation).\n      security:\n        - basicAuth:\n            - app\n            - account\n            - integration\n        - bearerAuth:\n            - app\n            - account\n            - integration\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: User not found\n  /v2/apps/{appId}/users/{userIdOrExternalId}/clients:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/userIdOrExternalId'\n    post:\n      tags:\n        - Clients\n      summary: Create Client\n      operationId: createClient\n      description: \u003e-\n        Create a client and link it to a channel specified by the\n        `matchCriteria.type`. Note that the client is initially created with a\n        `pending` status. The status of the linking request can be tracked by\n        listening to the `link:match`, `link:success` and `link:failure`\n        webhooks (only available in v1). For more information, see\n        [link-events](https://docs.smooch.io/rest/v1/#link-events).\n      security:\n        - basicAuth:\n            - app\n            - account\n            - integration\n        - bearerAuth:\n            - app\n            - account\n            - integration\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/clientCreate'\n            examples:\n              mailgun:\n                value:\n                  matchCriteria:\n                    type: mailgun\n                    integrationId: 582dedf230e788746891281a\n                    primary: true\n                    address: steveb@channel5.com\n                    subject: New message from {appName}\n                  confirmation:\n                    type: immediate\n                    message:\n                      author:\n                        type: business\n                        displayName: Steve\n                        avatarUrl: https://www.gravatar.com/image.jpg\n                      content:\n                        type: text\n                        text: Hello!\n                      metadata:\n                        lang: en-ca\n                  target:\n                    conversationId: 029c31f25a21b47effd7be90\n              messsagebird:\n                value:\n                  matchCriteria:\n                    type: messsagebird\n                    integrationId: 582dedf230e788746891281a\n                    primary: true\n                    phoneNumber: +1 212-555-2368\n                  confirmation:\n                    type: immediate\n                    message:\n                      author:\n                        type: business\n                        displayName: Steve\n                        avatarUrl: https://www.gravatar.com/image.jpg\n                      content:\n                        type: text\n                        text: Hello!\n                      metadata:\n                        lang: en-ca\n                  target:\n                    conversationId: 029c31f25a21b47effd7be90\n              twilio:\n                value:\n                  matchCriteria:\n                    type: twilio\n                    integrationId: 582dedf230e788746891281a\n                    primary: true\n                    phoneNumber: +1 212-555-2368\n                  confirmation:\n                    type: immediate\n                    message:\n                      author:\n                        type: business\n                        displayName: Steve\n                        avatarUrl: https://www.gravatar.com/image.jpg\n                      content:\n                        type: text\n                        text: Hello!\n                      metadata:\n                        lang: en-ca\n                  target:\n                    conversationId: 029c31f25a21b47effd7be90\n              whatsapp:\n                value:\n                  matchCriteria:\n                    type: whatsapp\n                    integrationId: 582dedf230e788746891281a\n                    primary: true\n                    phoneNumber: +1 212-555-2368\n                  confirmation:\n                    type: immediate\n                    message:\n                      author:\n                        type: business\n                        displayName: Steve\n                        avatarUrl: https://www.gravatar.com/image.jpg\n                      content:\n                        type: text\n                        text: Hello!\n                      metadata:\n                        lang: en-ca\n                  target:\n                    conversationId: 029c31f25a21b47effd7be90\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: object\n                title: ClientResponse\n                properties:\n                  client:\n                    $ref: '#/components/schemas/client'\n    get:\n      tags:\n        - Clients\n      summary: List Clients\n      operationId: listClients\n      description: \u003e\n        Get all the clients for a particular user, including both linked clients\n        and pending clients.\n\n        This API is paginated through [cursor\n        pagination](#section/Introduction/API-pagination-and-records-limits).\n\n\n        ```shell\n\n        /v2/apps/:appId/users/:userId/clients?page[after]=5ebee0975ac5304b664a12fa\n\n        ```\n      security:\n        - basicAuth:\n            - app\n            - account\n            - integration\n        - bearerAuth:\n            - app\n            - account\n            - integration\n      parameters:\n        - $ref: '#/components/parameters/pageQuery'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/clientListResponse'\n        '400':\n          description: Invalid page query parameters\n  /v2/apps/{appId}/users/{userIdOrExternalId}/clients/{clientId}:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/userIdOrExternalId'\n      - $ref: '#/components/parameters/clientId'\n    delete:\n      tags:\n        - Clients\n      summary: Remove Client\n      operationId: removeClient\n      description: \u003e-\n        Remove a particular client and unsubscribe it from all connected\n        conversations.\n      security:\n        - basicAuth:\n            - app\n            - account\n            - integration\n        - bearerAuth:\n            - app\n            - account\n            - integration\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n        '400':\n          description: Cannot remove a client of type 'sdk'\n        '404':\n          description: Client not found\n  /v2/apps/{appId}/users/{userIdOrExternalId}/personalinformation:\n    parameters:\n      - $ref: '#/components/parameters/appId'\n      - $ref: '#/components/parameters/userIdOrExternalId'\n    delete:\n      tags:\n        - Users\n      summary: Delete User Personal Information\n      operationId: deleteUserPersonalInformation\n      description: \u003e-\n        Delete a user’s personal information. Calling this API will clear\n        `givenName`, `surname`, `email` and `avatarUrl` and every custom\n        property for the specified user. For every client owned by the user, it\n        will also clear `displayName`, `avatarUrl` and any channel specific\n        information stored in the info and raw fields. Calling this API doesn’t\n        delete the user’s conversation history. To fully delete the user, see\n        [Delete User](#operation/deleteUser).\n      security:\n        - basicAuth:\n            - app\n            - account\n            - integration\n        - bearerAuth:\n            - app\n            - account\n            - integration\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/userResponse'\n              examples:\n                success:\n                  $ref: '#/components/examples/userDeletePersonalInformationResponse'\n        '404':\n          description: User not found\n  /oauth/authorize:\n    get:\n      tags:\n        - OAuth Endpoints\n      summary: Authorize\n      operationId: authorize\n      description: \u003e-\n        This endpoint begins the OAuth flow. It relies on a browser session for\n        authentication. If the user is not logged in to Sunshine Conversations\n        they will be redirected to the login page. If the user has many apps,\n        they will first be prompted to select the one they wish to integrate\n        with. They will then be presented with an Allow/Deny dialog, describing\n        details of the access your integration is requesting.\n      security: []\n      parameters:\n        - $ref: '#/components/parameters/clientIdQuery'\n        - $ref: '#/components/parameters/responseTypeQuery'\n        - $ref: '#/components/parameters/stateQuery'\n        - $ref: '#/components/parameters/redirectUriQuery'\n      responses:\n        '302':\n          description: Found. Redirecting to /login\n        '404':\n          description: The provided redirect_uri does not match the client_id configuration\n  /oauth/token:\n    post:\n      tags:\n        - OAuth Endpoints\n      summary: Get Token\n      operationId: getToken\n      description: \u003e-\n        This endpoint is used to exchange an authorization code for an access\n        token. It should only be used in server-to-server calls.\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                code:\n                  type: string\n                  description: The authorization code received via /oauth/authorize\n                  example: '658965'\n                grant_type:\n                  type: string\n                  description: Must be set to the string `authorization_code`\n                  example: authorization_code\n                client_id:\n                  type: string\n                  description: Your integration’s unique identifier\n                  example: 5e4af71a81966cfff3ef6550\n                client_secret:\n                  type: string\n                  description: Your integration’s secret\n                  example: 5XJ85yjUtRcaQu_pDINblPZb\n              required:\n                - code\n                - grant_type\n                - client_id\n                - client_secret\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                properties:\n                  access_token:\n                    type: string\n                    description: \u003e-\n                      An access token that can now be used to call Sunshine\n                      Conversations APIs.\n                  token_type:\n                    type: string\n                    description: Bearer. All issued tokens are of this type.\n        '401':\n          description: Authorization is required\n  /oauth/authorization:\n    delete:\n      tags:\n        - OAuth Endpoints\n      summary: Revoke Access\n      operationId: revokeAccess\n      description: \u003e\n        This endpoint is used to revoke your integration’s access to the user’s\n        Sunshine Conversations app. Revoking access means your integration will\n        no longer be able to interact with the app, and any webhooks the\n        integration had previously configured will be removed. \n\n        Calling this endpoint is equivalent to the user removing your\n        integration manually in the Sunshine Conversations web app. Your\n        integration’s `removeUrl` (if configured) will also be called when an\n        integration is removed in this way.\n      security:\n        - basicAuth:\n            - integration\n        - bearerAuth:\n            - integration\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\nx-webhooks:\n  Webhook Event:\n    post:\n      tags:\n        - Webhooks\n      description: \u003e\n        A webhook payload contains an array of events, which may or may not\n        originate from the same user\n\n        or conversation. When processing webhook payloads, your application\n        should take care to process\n\n        each event in the array.\n      summary: Webhook Events\n      operationId: eventWebhooks\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                app:\n                  $ref: '#/components/schemas/appSubSchema'\n                webhook:\n                  $ref: '#/components/schemas/webhookSubSchema'\n                events:\n                  type: array\n                  description: The list of events that occurred.\n                  items:\n                    anyOf:\n                      - $ref: '#/components/schemas/clientAddEvent'\n                      - $ref: '#/components/schemas/clientRemoveEvent'\n                      - $ref: '#/components/schemas/clientUpdateEvent'\n                      - $ref: '#/components/schemas/conversationCreateEvent'\n                      - $ref: '#/components/schemas/conversationJoinEvent'\n                      - $ref: '#/components/schemas/conversationLeaveEvent'\n                      - $ref: '#/components/schemas/conversationRemoveEvent'\n                      - $ref: \u003e-\n                          #/components/schemas/conversationMessageDeliveryChannelEvent\n                      - $ref: \u003e-\n                          #/components/schemas/conversationMessageDeliveryFailureEvent\n                      - $ref: \u003e-\n                          #/components/schemas/conversationMessageDeliveryUserEvent\n                      - $ref: '#/components/schemas/conversationMessageEvent'\n                      - $ref: '#/components/schemas/conversationPostbackEvent'\n                      - $ref: '#/components/schemas/conversationReadEvent'\n                      - $ref: '#/components/schemas/conversationTypingEvent'\n                      - $ref: '#/components/schemas/switchboardAcceptControl'\n                      - $ref: '#/components/schemas/switchboardAcceptControlFailure'\n                      - $ref: '#/components/schemas/switchboardOfferControl'\n                      - $ref: '#/components/schemas/switchboardOfferControlFailure'\n                      - $ref: '#/components/schemas/switchboardPassControl'\n                      - $ref: '#/components/schemas/switchboardPassControlFailure'\n                      - $ref: '#/components/schemas/userMergeEvent'\n                      - $ref: '#/components/schemas/userUpdateEvent'\n            examples:\n              client:add:\n                $ref: '#/components/examples/clientAddEvent'\n              client:remove:\n                $ref: '#/components/examples/clientRemoveEvent'\n              client:update:\n                $ref: '#/components/examples/clientUpdateEvent'\n              conversation:create:\n                $ref: '#/components/examples/conversationCreateEvent'\n              conversation:join:\n                $ref: '#/components/examples/conversationJoinEvent'\n              conversation:leave:\n                $ref: '#/components/examples/conversationLeaveEvent'\n              conversation:remove:\n                $ref: '#/components/examples/conversationRemoveEvent'\n              conversation:message:delivery:channel:\n                $ref: '#/components/examples/conversationMessageDeliveryChannelEvent'\n              conversation:message:delivery:failure:\n                $ref: '#/components/examples/conversationMessageDeliveryFailureEvent'\n              conversation:message:delivery:user:\n                $ref: '#/components/examples/conversationMessageDeliveryUserEvent'\n              conversation:message:\n                $ref: '#/components/examples/conversationMessageEvent'\n              conversation:postback:\n                $ref: '#/components/examples/conversationPostbackEvent'\n              conversation:read:\n                $ref: '#/components/examples/conversationReadEvent'\n              conversation:typing:\n                $ref: '#/components/examples/conversationTypingEvent'\n              switchboard:acceptControl:\n                $ref: '#/components/examples/switchboardAcceptControlEvent'\n              switchboard:acceptControl:failure:\n                $ref: '#/components/examples/switchboardAcceptControlFailureEvent'\n              switchboard:offerControl:\n                $ref: '#/components/examples/switchboardOfferControlEvent'\n              switchboard:offerControl:failure:\n                $ref: '#/components/examples/switchboardOfferControlFailureEvent'\n              switchboard:passControl:\n                $ref: '#/components/examples/switchboardPassControlEvent'\n              switchboard:passControl:failure:\n                $ref: '#/components/examples/switchboardPassControlFailureEvent'\n              user:merge:\n                $ref: '#/components/examples/userMergeEvent'\n              user:update:\n                $ref: '#/components/examples/userUpdateEvent'\n      responses:\n        '200':\n          description: Ok\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    basicAuth:\n      type: http\n      scheme: basic\n  schemas:\n    page:\n      type: object\n      properties:\n        after:\n          type: string\n          description: \u003e\n            A record id. Results will only contain the records that come after\n            the specified record. \n\n            Only one of `after` or `before` can be provided, not both.\n          example: 5e1606762556d93e9c176f69\n          minLength: 24\n          maxLength: 24\n        before:\n          type: string\n          description: \u003e\n            A record id. Results will only contain the records that come before\n            the specified record.\n\n            Only one of `after` or `before` can be provided, not both.\n          example: 5e1606762556d93e9c176f69\n          minLength: 24\n          maxLength: 24\n        size:\n          type: integer\n          description: \u003e-\n            The number of records to return. Does not apply to the\n            `listMessages` endpoint.\n          default: 25\n          example: 10\n          minimum: 1\n          maximum: 100\n    displayName:\n      type: string\n      nullable: true\n      minLength: 1\n      maxLength: 100\n    appSettings:\n      type: object\n      description: Customizable app settings.\n      properties:\n        conversationRetentionSeconds:\n          type: integer\n          description: \u003e\n            Number of seconds of inactivity before a conversation’s messages \n\n            will be automatically deleted. See \n\n            [Conversation Retention\n            Seconds](https://docs.smooch.io/guide/creating-and-managing-apps/#conversation-retention-seconds)\n\n            for more information.\n          minimum: 0\n        maskCreditCardNumbers:\n          type: boolean\n          description: |\n            A boolean specifying whether credit card numbers should be masked \n            when sent through Sunshine Conversations.\n        useAnimalNames:\n          type: boolean\n          description: \u003e\n            A boolean specifying whether animal names should be used for \n\n            unnamed users. See the \n\n            [user naming\n            guide](https://docs.smooch.io/guide/receiving-messages/#message-author-name)\n\n            for details.\n        echoPostback:\n          type: boolean\n          description: \u003e\n            A boolean specifying whether a message should be added to the\n            conversation \n\n            history when a postback button is clicked. See \n\n            [Echo\n            Postbacks](https://docs.smooch.io/guide/creating-and-managing-apps/#echo-postbacks)\n\n            for more information.\n        ignoreAutoConversationStart:\n          type: boolean\n          description: \u003e\n            A boolean specifying whether a non message event coming from a\n            channel will \n\n            trigger a \n\n            [start\n            conversation](https://docs.smooch.io/rest/#section/Webhook-Triggers)\n\n            event and count as a monthly active user (MAU).\n\n            \u003caside class=\"notice\"\u003eCalling \u003ccode\u003estartConversation()\u003c/code\u003e (or\n            equivalent) from the Android, \n\n            iOS or Web SDK will count as a MAU, regardless of the value of this\n            setting.\u003c/aside\u003e\n        multiConvoEnabled:\n          type: boolean\n          description: \u003e\n            A boolean specifying whether users are allowed to be part of several\n            conversations.\n\n            Enabling `multiConvo` is **irreversible**.\n        attachmentsAccess:\n          type: string\n          description: \u003e\n            A string specifying whether attachments should be stored in a\n            publicly or privately accessible cloud storage.\n\n            attachmentsAccess is set to public by default but can be modified to\n            private.\n\n            See \u003ca\n            href=\"https://docs.smooch.io/guide/private-attachments/\"\u003ePrivate\n            Attachments\u003c/a\u003e for more information.\n          example: public\n        attachmentsTokenExpirationSeconds:\n          type: integer\n          description: \u003e\n            Number of seconds representing the expiration time of the generated\n            media tokens for private attachments. The JWT will be valid for 2\n            hours by default.\n\n            See See \u003ca\n            href=\"https://docs.smooch.io/guide/private-attachments/\"\u003ePrivate\n            Attachments\u003c/a\u003e for more information.\n          example: 64028\n    metadata:\n      type: object\n      nullable: true\n      description: |\n        Flat object containing custom properties. Strings, numbers and booleans \n        are the only supported format that can be passed to metadata.\n        The metadata is limited to 4KB in size.\n      example:\n        lang: en-ca\n    app:\n      type: object\n      properties:\n        id:\n          type: string\n          description: \u003e-\n            A canonical ID that can be used to retrieve the Sunshine\n            Conversations app.\n          example: 5d8cff3cd55b040010928b5b\n        displayName:\n          allOf:\n            - $ref: '#/components/schemas/displayName'\n          description: The friendly name of the app.\n          example: My App\n        settings:\n          $ref: '#/components/schemas/appSettings'\n        metadata:\n          $ref: '#/components/schemas/metadata'\n    meta:\n      type: object\n      description: Response metadata.\n      properties:\n        hasMore:\n          type: boolean\n          description: A flag that indicates if there are more records that can be fetched.\n        afterCursor:\n          type: string\n          description: \u003e\n            A record id that can be used as a `page[after]` parameter in a new\n            request to get the next page. \n\n            Not specified if there are no subsequent pages.\n          example: 55c8d9758590aa1900b9b9f6\n        beforeCursor:\n          type: string\n          description: \u003e\n            A record id that can be used as a `page[before]` parameter in a new\n            request to get the previous page. \n\n            Not specified if there are no previous pages.\n          example: 55c8d9758590aa1900b9b9f6\n    links:\n      type: object\n      description: Previous and next page links, if they exist.\n      properties:\n        prev:\n          type: string\n          description: \u003e-\n            A link to the previous page. Not specified if there are no previous\n            pages.\n          example: https://api.smooch.io/v2/apps?page[before]=fcafad804c39a39648004af9\n        next:\n          type: string\n          description: \u003e-\n            A link to the next page. Not specified if there are no subsequent\n            pages.\n          example: https://api.smooch.io/v2/apps?page[after]=5ea868f862cdd24abf010b38\n    appListResponse:\n      type: object\n      properties:\n        apps:\n          type: array\n          description: List of returned apps.\n          items:\n            $ref: '#/components/schemas/app'\n        meta:\n          $ref: '#/components/schemas/meta'\n        links:\n          $ref: '#/components/schemas/links'\n    appCreateBody:\n      type: object\n      title: AppCreateBody\n      properties:\n        displayName:\n          allOf:\n            - $ref: '#/components/schemas/displayName'\n          nullable: false\n          description: The friendly name of the app.\n          example: My App\n        settings:\n          $ref: '#/components/schemas/appSettings'\n        metadata:\n          $ref: '#/components/schemas/metadata'\n      required:\n        - displayName\n    appResponse:\n      type: object\n      title: AppResponse\n      properties:\n        app:\n          allOf:\n            - $ref: '#/components/schemas/app'\n          description: The app.\n    appUpdateBody:\n      type: object\n      properties:\n        displayName:\n          allOf:\n            - $ref: '#/components/schemas/displayName'\n          nullable: false\n          description: The friendly name of the app.\n          example: My App\n        settings:\n          $ref: '#/components/schemas/appSettings'\n        metadata:\n          $ref: '#/components/schemas/metadata'\n    appKey:\n      type: object\n      properties:\n        id:\n          type: string\n          description: \u003e-\n            The unique ID of the API key, used when signing JWTs or accessing\n            the API using Basic Authentication.\n          example: app_5723a347f82ba0516cb4ea34\n        displayName:\n          type: string\n          description: The name of the API key.\n          example: Key 1\n        secret:\n          type: string\n          description: \u003e-\n            The secret of the API key, used when signing JWTs or accessing the\n            API using Basic Authentication\n          example: 5XJ85yjUtRcaQu_pDINblPZb\n    appKeyListResponse:\n      type: object\n      properties:\n        keys:\n          type: array\n          description: List of returned keys.\n          items:\n            $ref: '#/components/schemas/appKey'\n    appKeyResponse:\n      type: object\n      title: AppKeyResponse\n      properties:\n        key:\n          allOf:\n            - $ref: '#/components/schemas/appKey'\n          description: The created key object.\n    attachmentUploadBody:\n      type: object\n      properties:\n        source:\n          type: string\n          format: binary\n      required:\n        - source\n    attachmentSchema:\n      type: object\n      properties:\n        mediaUrl:\n          type: string\n          description: Uploaded attachment’s url\n          example: \u003e-\n            https://smooch.io/rocks.smooch.media-dev/apps/5ec41c54fe13cc5ac404bedc/conversations/c616a583e4c240a871818541/TmYMVQUBNsQRItX4fKf4aC-T/Screen%20Shot%202020-09-02%20at%204.04.41%20PM.png\n        mediaType:\n          type: string\n          description: Uploaded attachment's media type\n          example: image/png\n    attachmentResponse:\n      type: object\n      title: AttachmentResponse\n      properties:\n        attachment:\n          allOf:\n            - $ref: '#/components/schemas/attachmentSchema'\n          description: The uploaded attachment object.\n    attachmentDeleteBody:\n      type: object\n      properties:\n        mediaUrl:\n          type: string\n          description: The media URL used for a file or image message.\n          example: https://s3.amazonaws.com/document.pdf\n      required:\n        - mediaUrl\n    attachmentMediaTokenBody:\n      type: object\n      properties:\n        paths:\n          type: array\n          description: \u003e-\n            An array of strings representing the list of attachment paths used\n            to generate the media JWT. One token will be generated for each\n            path. Each token will be valid for 2 hours by default. This value\n            can be modified, see [App Settings](#operation/createApp) for more\n            information.\n          items:\n            type: string\n            example: /apps/5ec41c54fe13cc5ac404bedc\n      required:\n        - paths\n    attachmentMediaTokenResponse:\n      type: object\n      title: AttachmentMediaTokenResponse\n      properties:\n        tokens:\n          type: object\n          additionalProperties:\n            type: string\n          example:\n            /apps/5ec41c54fe13cc5ac404bedc: \u003e-\n              eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6IjM3NzdBNUM3LUI3QUQtNDEyMC1BNEVDLUNBNzk1ODlDRTYxNSJ9.eyJwYXRoIjoiL2FwcHMvNWVkYTk3ZDBhNmQ5ZmUwMDBmN2U2ODQyIiwiZXhwIjoxNTkzMjA2MzEzLCJpYXQiOjE1OTMxOTkxMTN9.R1i7e5YgRHv_QjUqUcP9c5xa4VgJ5aen675V84r1euCjNz165qqkZaep6of7aXNBKsZ29AI1CgbVt_nPn3ZsYTBc1cQ96ucqTv8tFR0FHf20-oR-_1egdyyLqJjxb0UI1wGZPGCP8mEs3mQwMu4lvZMF9vaty1Ye8wy-lPAPYFuZMb1rCES0QT6QUOAn45hAAfdT1zKqQ8ImV5eWVi6m0ENqV-JjExsiZ2mAMwyguDJ5yJUQLGKOV3f_Our1fVWfit5cGoMk-97o3009o628gVfSZVzPuvdNIfQOb0UUr_ELsI2qbY_Ju4REpSqYwdkjvSd3T20baf5K7_FGOrxPQitHAZojQAdlRK3mB-kC3IbVa93YFBcLK5UbRXnJYAo24UH828vU-MLgRrgzD6oVpcxNk8yyaLThJpTynO9Eoi0vKJ0m-_3A1ASKzYrR6ZZZWmRsFtZVtlpS21oYuO2tvS4EkbM8AhH4nh6V8oQUkQtvYIZKkEOadc0AFTjbv-le35hHLmHBZigUTRoZKokeglSDKr0FwDZylp7V3O8l6X0EhOU0BCoP1UYrEf8GjPdSLvu0Mno_k6hFw2Hx9DTdvnybZYroMkG31To2nmVhPglZ4FCswGV85HcqCcWQjhugFmB--9aE19G-OGOVFJfH6rFp0_cB4AxM9kSHQsWyuUs\n          description: \u003e-\n            Object with key value pair where the key is the path and the value\n            is the media JWT.\n    conversationType:\n      type: string\n      description: The type of the conversation.\n      enum:\n        - personal\n        - sdkGroup\n      example: personal\n    name:\n      type: string\n      description: \u003e-\n        Identifier for use in control transfer protocols. Restricted to\n        alphanumeric characters, `-` and `_`.\n      maxLength: 128\n      example: bot\n    switchboardIntegrationId:\n      type: string\n      description: \u003e-\n        Id of the integration that should deliver events routed by the\n        switchboard.\n      example: 5ef21b86e933b7355c11c605\n    switchboardIntegrationType:\n      type: string\n      description: \u003e-\n        Type of integration that should deliver events routed by the\n        switchboard. If referencing an OAuth integration, the clientId issued by\n        Sunshine Conversations during the OAuth partnership process will be the\n        value of integrationType.\n      example: zd:agentWorkspace\n    switchboardIntegrationWebhook:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique ID of the switchboard integration.\n          example: 5ef21b86e933b7355c11c604\n        name:\n          $ref: '#/components/schemas/name'\n        integrationId:\n          $ref: '#/components/schemas/switchboardIntegrationId'\n        integrationType:\n          $ref: '#/components/schemas/switchboardIntegrationType'\n    conversationTruncated:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique ID of the conversation.\n          example: c93bb9c14dde8ffb94564eae\n        type:\n          $ref: '#/components/schemas/conversationType'\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        activeSwitchboardIntegration:\n          allOf:\n            - $ref: '#/components/schemas/switchboardIntegrationWebhook'\n          description: \u003e-\n            The current switchboard integration that is in control of the\n            conversation. This field is omitted if no\n            `activeSwitchboardIntegration` exists for the conversation.\n          nullable: true\n        pendingSwitchboardIntegration:\n          allOf:\n            - $ref: '#/components/schemas/switchboardIntegrationWebhook'\n          description: \u003e-\n            The switchboard integration that is awaiting control. This field is\n            omitted if no switchboard integration has been previously offered\n            control.\n          nullable: true\n    description:\n      type: string\n      nullable: true\n      minLength: 1\n      maxLength: 100\n      description: A short text describing the conversation.\n      example: Conversation between Rogers and Carl.\n    icon:\n      type: string\n      nullable: true\n      format: uri\n      minLength: 1\n      maxLength: 2048\n      description: \u003e-\n        A custom conversation icon url. The image must be in either JPG, PNG, or\n        GIF format\n      example: https://www.gravatar.com/image.jpg\n    conversation:\n      allOf:\n        - $ref: '#/components/schemas/conversationTruncated'\n        - type: object\n          properties:\n            isDefault:\n              type: boolean\n              description: \u003e\n                Whether the conversation is the default conversation for the\n                user. Will be\n\n                true for the first personal conversation created for the user,\n                and false in\n\n                all other cases.\n              example: false\n            displayName:\n              allOf:\n                - $ref: '#/components/schemas/displayName'\n              description: \u003e\n                A friendly name for the conversation, may be displayed to the\n                business or\n\n                the user.\n              example: My conversation\n            description:\n              $ref: '#/components/schemas/description'\n            iconUrl:\n              $ref: '#/components/schemas/icon'\n            businessLastRead:\n              type: string\n              description: \u003e\n                A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ\n\n                representing the moment the conversation was last marked as read\n                with\n\n                role business.\n              nullable: true\n              example: '2020-06-23T14:33:47.492Z'\n            lastUpdatedAt:\n              type: string\n              description: \u003e\n                A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ\n\n                representing the moment the last message was received in the\n\n                conversation, or the creation time if no messages have been\n                received yet.\n              nullable: true\n              example: '2020-06-26T14:33:47.120Z'\n    conversationListResponse:\n      type: object\n      properties:\n        conversations:\n          type: array\n          description: List of returned conversations.\n          items:\n            $ref: '#/components/schemas/conversation'\n        meta:\n          $ref: '#/components/schemas/meta'\n        links:\n          $ref: '#/components/schemas/links'\n    participantSubSchema:\n      anyOf:\n        - type: object\n          title: ParticipantWithUserId\n          properties:\n            userId:\n              type: string\n              description: \u003e-\n                The id of the user that will be participating in the\n                conversation. It will return `404` if the user can’t be found.\n                One of `userId` or `userExternalId` is required, but not both.\n              example: 42589ad070d43be9b00ff7e5\n            subscribeSDKClient:\n              description: \u003e-\n                When passed as true, the SDK client of the concerned participant\n                will be subscribed to the conversation. The user will start\n                receiving push notifications for this conversation right away,\n                without having to view the conversation on the SDK beforehand.\n                An SDK client will be created for users that don’t already have\n                one. This field is required if the conversation is of type\n                `sdkGroup`.\n              type: boolean\n              example: false\n        - type: object\n          title: ParticipantWithUserExternalId\n          properties:\n            userExternalId:\n              type: string\n              description: \u003e-\n                The `externalId` of the user that will be participating in the\n                conversation. It will return `404` if the user can’t be found.\n                One of `userId` or `userExternalId` is required, but not both.\n              example: your-own-user-id\n            subscribeSDKClient:\n              description: \u003e-\n                When passed as true, the SDK client of the concerned participant\n                will be subscribed to the conversation. The user will start\n                receiving push notifications for this conversation right away,\n                without having to view the conversation on the SDK beforehand.\n                An SDK client will be created for users that don’t already have\n                one. This field is required if the conversation is of type\n                `sdkGroup`.\n              type: boolean\n              example: false\n    conversationCreateBody:\n      type: object\n      title: ConversationCreateBody\n      properties:\n        type:\n          $ref: '#/components/schemas/conversationType'\n        participants:\n          type: array\n          description: \u003e\n            The users participating in the conversation. For `personal`\n            conversations, this field is required with a length of exactly 1.\n            For `sdkGroup` conversations, must have a length less than or equal\n            to 10.\n\n            Can be omitted to have a conversation with no participants if the\n            type is `sdkGroup`.\n          items:\n            $ref: '#/components/schemas/participantSubSchema'\n          maxItems: 10\n        displayName:\n          allOf:\n            - $ref: '#/components/schemas/displayName'\n          description: \u003e\n            A friendly name for the conversation, may be displayed to the\n            business or\n\n            the user.\n          example: My conversation\n        description:\n          $ref: '#/components/schemas/description'\n        iconUrl:\n          $ref: '#/components/schemas/icon'\n        metadata:\n          $ref: '#/components/schemas/metadata'\n      required:\n        - type\n    conversationResponse:\n      type: object\n      title: ConversationResponse\n      properties:\n        conversation:\n          allOf:\n            - $ref: '#/components/schemas/conversation'\n          description: The conversation.\n    conversationUpdateBody:\n      type: object\n      properties:\n        displayName:\n          allOf:\n            - $ref: '#/components/schemas/displayName'\n          description: \u003e\n            A friendly name for the conversation, may be displayed to the\n            business or\n\n            the user.\n          example: My conversation\n        description:\n          $ref: '#/components/schemas/description'\n        iconUrl:\n          $ref: '#/components/schemas/icon'\n        metadata:\n          $ref: '#/components/schemas/metadata'\n    participantJoinBody:\n      allOf:\n        - $ref: '#/components/schemas/participantSubSchema'\n    clientType:\n      type: string\n      description: \u003e-\n        The type of integration that the client represents. Can be any of the\n        supported integration types, or sdk for integrations of type ios,\n        android, and web.\n      enum:\n        - line\n        - mailgun\n        - messagebird\n        - messenger\n        - sdk\n        - telegram\n        - twilio\n        - twitter\n        - viber\n        - wechat\n        - whatsapp\n      example: telegram\n    clientAssociation:\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/clientType'\n        clientId:\n          type: string\n          description: The id of the client being referenced.\n          example: 42589ad070d43be9b00ff7e5\n    participant:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique ID of the participant.\n          example: c93bb9c14dde8ffb94564eae\n        userId:\n          type: string\n          description: The id of the associated user.\n          example: 42589ad070d43be9b00ff7e5\n        unreadCount:\n          type: integer\n          description: Number of messages the user has not yet read.\n          example: 0\n        clientAssociations:\n          type: array\n          description: \u003e\n            Represents the clients that are active in the conversation for a\n            particular\n\n            user. A participant can have multiple clientAssociations in the case\n            of\n\n            channel transfer, business initiated conversations, or identified\n            users.\n\n            The order of the array indicates how recently a client has\n            interacted with\n\n            the conversation, with the most recent client first. The first item\n            in the\n\n            array is considered to be the user's primary client for that\n            conversation,\n\n            and will be selected first for message delivery.\n          items:\n            $ref: '#/components/schemas/clientAssociation'\n        userExternalId:\n          type: string\n          description: The externalId of the associated user.\n          example: your-own-id\n          nullable: true\n        lastRead:\n          type: string\n          description: \u003e-\n            A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ\n            representing the latest message the user has read.\n          example: '2019-01-14T18:55:12.515Z'\n          nullable: true\n    participantListResponse:\n      type: object\n      description: List of returned participants.\n      properties:\n        participants:\n          type: array\n          items:\n            $ref: '#/components/schemas/participant'\n        meta:\n          $ref: '#/components/schemas/meta'\n        links:\n          $ref: '#/components/schemas/links'\n    participantLeaveBody:\n      oneOf:\n        - type: object\n          title: ParticipantLeaveBodyUserId\n          properties:\n            userId:\n              type: string\n              description: \u003e\n                The id of the user that will be removed from the conversation.\n                It will\n\n                return 404 if the user can’t be found.\n              example: 42589ad070d43be9b00ff7e5\n        - type: object\n          title: ParticipantLeaveBodyUserExternalId\n          properties:\n            userExternalId:\n              type: string\n              description: \u003e\n                The externalId of the user that will be removed from the\n                conversation. It\n\n                will return 404 if the user can’t be found.\n              example: your-own-user-id\n        - type: object\n          title: ParticipantLeaveBodyParticipantId\n          properties:\n            participantId:\n              type: string\n              description: \u003e\n                The participantId of the user that will be removed from the\n                conversation.\n\n                It will return 404 if the user can’t be found.\n              example: 42589ad070d43be9b00ff7e5\n    author:\n      type: object\n      description: The author of the message.\n      properties:\n        type:\n          type: string\n          description: The type of the author.\n          enum:\n            - business\n            - user\n          example: business\n        userId:\n          type: string\n          description: The id of the user. Only supported when `type` is user.\n          example: 5963c0d619a30a2e00de36b8\n        userExternalId:\n          type: string\n          description: The externalId of the user. Only supported when `type` is user.\n          writeOnly: true\n          example: your-own-id\n        displayName:\n          type: string\n          description: The display name of the message author.\n          example: Steve\n        avatarUrl:\n          allOf:\n            - $ref: '#/components/schemas/icon'\n          nullable: false\n          description: \u003e-\n            A custom message icon url. The image must be in either JPG, PNG, or\n            GIF format\n      required:\n        - type\n    buy:\n      type: object\n      properties:\n        type:\n          type: string\n          description: The type of action.\n          default: buy\n        text:\n          type: string\n          description: The button text.\n          example: Buy vinegar\n        amount:\n          type: integer\n          description: \u003e-\n            The amount being charged. It needs to be specified in cents and is\n            an integer (9.99$ -\u003e 999).\n          example: 8000\n        currency:\n          type: string\n          description: \u003e-\n            An ISO 4217 standard currency code in lowercase. Used for actions of\n            type buy.\n          example: CAD\n        metadata:\n          $ref: '#/components/schemas/metadata'\n      required:\n        - text\n        - type\n        - amount\n    extraChannelOptions:\n      type: object\n      description: Extra options to pass directly to the channel API.\n      properties:\n        messenger:\n          type: object\n          description: Messenger channel options.\n          properties:\n            messenger_extensions:\n              type: boolean\n              description: \u003e-\n                For webview type actions, a boolean value indicating whether the\n                URL should be loaded with Messenger Extensions enabled. [More\n                info](https://developers.facebook.com/docs/messenger-platform/send-api-reference/url-button).\n              default: false\n              example: false\n            webview_share_button:\n              type: string\n              description: \u003e-\n                For webview type actions, a string value indicating if the share\n                button should be hidden. [More\n                Info](https://developers.facebook.com/docs/messenger-platform/reference/buttons/url).\n              enum:\n                - hide\n    link:\n      type: object\n      description: A link action will open the provided URI when tapped.\n      properties:\n        type:\n          type: string\n          description: The type of action.\n          default: link\n        uri:\n          type: string\n          format: uri\n          description: \u003e-\n            The action URI. This is the link that will be used in the clients\n            when clicking the button.\n        text:\n          type: string\n          description: The button text.\n        default:\n          type: boolean\n          description: \u003e-\n            Boolean value indicating whether the action is the default action\n            for a message item in Facebook Messenger.\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        extraChannelOptions:\n          $ref: '#/components/schemas/extraChannelOptions'\n      required:\n        - text\n        - type\n        - uri\n    locationRequest:\n      type: object\n      description: A location request action will prompt the user to share their location.\n      properties:\n        type:\n          type: string\n          description: The type of action.\n          default: locationRequest\n        text:\n          type: string\n          description: The button text.\n        metadata:\n          $ref: '#/components/schemas/metadata'\n      required:\n        - text\n        - type\n    postback:\n      type: object\n      properties:\n        type:\n          type: string\n          description: The type of action.\n          default: postback\n        text:\n          type: string\n          description: The button text.\n        payload:\n          type: string\n          description: The payload of a postback or reply button.\n        metadata:\n          $ref: '#/components/schemas/metadata'\n      required:\n        - text\n        - type\n        - payload\n    reply:\n      type: object\n      properties:\n        type:\n          type: string\n          description: The type of action.\n        text:\n          type: string\n          description: \u003e-\n            The button text. Text longer than 20 characters will be truncated on\n            Facebook Messenger, and longer than 40 characters will be truncated\n            on Web Messenger, iOS, and Android.\n        payload:\n          type: string\n          description: \u003e-\n            A string payload to help you identify the action context. Used when\n            posting the reply. You can also use metadata for more complex needs.\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        iconUrl:\n          type: string\n          description: An icon to render next to the reply option.\n      required:\n        - text\n        - type\n        - payload\n    webview:\n      type: object\n      description: \u003e-\n        When a webview actions is clicked/tapped, the provided URI will be\n        loaded in a webview. Channels that do not support webviews will open the\n        fallback URI instead.\n      properties:\n        type:\n          type: string\n          description: The type of action.\n        uri:\n          type: string\n          format: uri\n          description: \u003e-\n            The webview URI. This is the URI that will open in the webview when\n            clicking the button.\n        text:\n          type: string\n          description: The button text.\n        default:\n          type: boolean\n          description: \u003e-\n            Boolean value indicating whether the action is the default action\n            for a message item in Facebook Messenger.\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        extraChannelOptions:\n          $ref: '#/components/schemas/extraChannelOptions'\n        size:\n          type: string\n          enum:\n            - compact\n            - tall\n            - full\n          description: The size to display a webview. Used for actions of type webview.\n        fallback:\n          type: string\n          description: \u003e-\n            The fallback uri for channels that don’t support webviews. Used for\n            actions of type webview.\n        openOnReceive:\n          type: boolean\n          description: \u003e-\n            Boolean value indicating if the webview should open automatically.\n            Only one action per message can be set to true. Currently only\n            supported on the Web Messenger.\n      required:\n        - text\n        - type\n        - uri\n        - fallback\n    action:\n      oneOf:\n        - $ref: '#/components/schemas/buy'\n        - $ref: '#/components/schemas/link'\n        - $ref: '#/components/schemas/locationRequest'\n        - $ref: '#/components/schemas/postback'\n        - $ref: '#/components/schemas/reply'\n        - $ref: '#/components/schemas/webview'\n      discriminator:\n        propertyName: type\n    textMessage:\n      type: object\n      properties:\n        type:\n          type: string\n          description: The type of message.\n          default: text\n        text:\n          type: string\n          description: \u003e-\n            The text content of the message. Optional only if actions are\n            provided.\n          maxLength: 4096\n          example: Hello!\n        actions:\n          type: array\n          description: Array of message actions.\n          items:\n            $ref: '#/components/schemas/action'\n        payload:\n          type: string\n          description: \u003e-\n            The payload of a [reply\n            button](https://docs.smooch.io/guide/structured-messages/#reply-buttons)\n            response message.\n      required:\n        - type\n    actionSubset:\n      oneOf:\n        - $ref: '#/components/schemas/buy'\n        - $ref: '#/components/schemas/link'\n        - $ref: '#/components/schemas/postback'\n        - $ref: '#/components/schemas/webview'\n      discriminator:\n        propertyName: type\n    item:\n      type: object\n      properties:\n        title:\n          type: string\n          description: The title of the item.\n          minLength: 1\n          maxLength: 128\n        description:\n          type: string\n          description: The description of the item.\n          maxLength: 128\n        mediaUrl:\n          type: string\n          format: uri\n          description: The image url attached to the item.\n          maxLength: 2048\n        mediaType:\n          type: string\n          description: The MIME type for any image attached in the mediaUrl.\n          maxLength: 128\n        altText:\n          type: string\n          maxLength: 128\n          description: \u003e-\n            An optional description of the media for accessibility purposes. The\n            field will be saved by default with the file name as the value.\n        size:\n          type: string\n          description: The size of the image.\n          enum:\n            - compact\n            - large\n        actions:\n          type: array\n          description: \u003e-\n            An array of objects representing the actions associated with the\n            item.\n          items:\n            $ref: '#/components/schemas/actionSubset'\n          minItems: 1\n          maxItems: 3\n        metadata:\n          $ref: '#/components/schemas/metadata'\n      required:\n        - title\n        - actions\n    carouselMessage:\n      type: object\n      description: \u003e-\n        Carousel messages are a horizontally scrollable set of items that may\n        each contain text, an image, and message actions. Not all messaging\n        channels fully support carousel messages; currently only Facebook\n        Messenger, LINE, Telegram, Viber, the Web Messenger, the Android SDK and\n        the iOS SDK cover the full functionality. For all other platforms a\n        carousel message is rendered as raw text. The raw text fallback does not\n        include any images or postback message actions.\n      properties:\n        type:\n          type: string\n          description: The type of message.\n          default: carousel\n        text:\n          type: string\n          description: \u003e-\n            The fallback text message used when carousel messages are not\n            supported by the channel.\n          readOnly: true\n        items:\n          type: array\n          description: \u003e-\n            An array of objects representing the items associated with the\n            message. Only present in carousel and list type messages.\n          items:\n            $ref: '#/components/schemas/item'\n          minItems: 1\n          maxItems: 10\n        displaySettings:\n          type: object\n          description: Settings to adjust the carousel layout.\n          properties:\n            imageAspectRatio:\n              type: string\n              description: \u003e-\n                Specifies how to display all carousel images. Valid values are\n                horizontal (default) and square. Only supported in Facebook\n                Messenger, Web Messenger, Android SDK and iOS SDK carousels.\n              enum:\n                - horizontal\n                - square\n      required:\n        - type\n        - items\n    fileMessage:\n      type: object\n      properties:\n        type:\n          type: string\n          description: The type of message.\n          default: file\n        mediaUrl:\n          type: string\n          format: uri\n          description: The URL for media, such as an image, attached to the message.\n        mediaSize:\n          type: number\n          description: The size of the media.\n          readOnly: true\n        mediaType:\n          type: string\n          description: The media type of the file.\n          readOnly: true\n        altText:\n          type: string\n          maxLength: 128\n          description: \u003e-\n            An optional description of the file for accessibility purposes. The\n            field will be saved by default with the file name as the value.\n        text:\n          type: string\n          description: The text content of the message.\n      required:\n        - type\n        - mediaUrl\n    formOptions:\n      type: array\n      description: Array of objects representing options for a field of type select.\n      items:\n        type: object\n        properties:\n          label:\n            type: string\n            description: \u003e-\n              The label of the option. What the option is displayed as on Web\n              Messenger.\n            minLength: 1\n            maxLength: 128\n          name:\n            type: string\n            description: The name of the field. Must be unique per field.\n            minLength: 1\n            maxLength: 128\n      maxItems: 100\n    field:\n      type: object\n      description: \u003e\n        Properties that can be expected to receive inside a form or formResponse\n        message field.\n      properties:\n        type:\n          type: string\n          description: The field type.\n          enum:\n            - email\n            - select\n            - text\n        name:\n          type: string\n          description: The name of the field. Must be unique per form or formResponse.\n          minLength: 1\n          maxLength: 128\n        label:\n          type: string\n          description: \u003e-\n            The label of the field. What the field is displayed as on Web\n            Messenger.\n          minLength: 1\n          maxLength: 128\n        placeholder:\n          type: string\n          description: Placeholder text for the field. Form message only.\n          minLength: 1\n          maxLength: 128\n        minSize:\n          type: integer\n          description: \u003e-\n            The minimum allowed length for the response for a field of type\n            text. Form message only.\n          default: 1\n          minimum: 1\n          maximum: 128\n        maxSize:\n          type: integer\n          description: \u003e-\n            The maximum allowed length for the response for a field of type\n            text. Form message only.\n          default: 128\n          minimum: 1\n          maximum: 128\n        text:\n          type: string\n          description: Specifies the response for a text field.\n          minLength: 1\n          maxLength: 128\n        email:\n          type: string\n          description: Specifies the response for a email field.\n          minLength: 1\n          maxLength: 128\n        select:\n          type: array\n          description: \u003e-\n            Array of objects representing the response for a field of type\n            select. Form and formResponse messages only.\n          items:\n            type: object\n        options:\n          $ref: '#/components/schemas/formOptions'\n      required:\n        - type\n        - name\n        - label\n    formMessage:\n      type: object\n      description: \u003e-\n        A form type message without text or actions. Only supported in the Web\n        SDK.\n      properties:\n        type:\n          type: string\n          description: The type of message.\n          default: form\n        blockChatInput:\n          type: boolean\n          description: true if the message should block the chat input on Web Messenger.\n        fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/field'\n          description: \u003e-\n            An array of objects representing fields associated with the message.\n            Only present in form and formResponse messages.\n          minItems: 1\n          maxItems: 20\n      required:\n        - type\n        - fields\n    formResponseMessage:\n      type: object\n      description: \u003e-\n        A formResponse type message is a response to a form type message.\n        formResponse type messages are only supported as responses to form\n        messages on Web Messenger and cannot be sent via the API.\n      properties:\n        type:\n          type: string\n          description: The type of message.\n          default: formResponse\n        fields:\n          type: array\n          description: Array of field objects that contain the submitted fields.\n          items:\n            $ref: '#/components/schemas/field'\n          minItems: 1\n          maxItems: 20\n        textFallback:\n          type: string\n          description: \u003e-\n            A string containing the `label: value` of all fields, each separated\n            by a newline character.\n          readOnly: true\n      required:\n        - type\n        - fields\n    imageMessage:\n      type: object\n      properties:\n        type:\n          type: string\n          description: The type of message.\n          default: image\n        mediaUrl:\n          type: string\n          format: uri\n          description: The URL for media, such as an image, attached to the message.\n        altText:\n          type: string\n          maxLength: 128\n          description: \u003e-\n            An optional description of the image for accessibility purposes. The\n            field will be saved by default with the file name as the value.\n        text:\n          type: string\n          description: \u003e-\n            The text content of the message. Optional only if actions are\n            provided.\n        actions:\n          type: array\n          description: Array of message actions.\n          items:\n            $ref: '#/components/schemas/action'\n      required:\n        - type\n        - mediaUrl\n    listMessage:\n      type: object\n      title: ListMessage\n      description: \u003e\n        List messages are a vertically scrollable set of items that may each\n        contain text, an image, and message actions. Not all messaging channels\n        fully support list messages.\n\n        * Facebook Messenger and WeChat have native support.\n\n        * For LINE and our Android, iOS and Web SDK, Sunshine Conversations\n        converts list messages to carousel.\n\n        * On WhatsApp, Telegram and Twitter, Sunshine Conversations converts\n        list messages to multiple rich messages.\n\n        * On all other platforms, Sunshine Conversations converts list messages\n        to raw text.\n      properties:\n        type:\n          type: string\n          description: The type of message.\n          default: list\n        items:\n          type: array\n          description: \u003e-\n            An array of objects representing the items associated with the\n            message. Only present in carousel and list type messages.\n          items:\n            $ref: '#/components/schemas/item'\n          minItems: 1\n          maxItems: 10\n        actions:\n          type: array\n          description: \u003e-\n            An array of objects representing the actions associated with the\n            message. The array length is limited by the third party channel.\n          items:\n            $ref: '#/components/schemas/actionSubset'\n          minItems: 1\n          maxItems: 10\n      required:\n        - type\n        - items\n    locationMessage:\n      type: object\n      description: \u003e-\n        A location type message includes the coordinates (latitude and\n        longitude) of a location and an optional location object which can\n        include the name and address of the location. Typically sent in response\n        to a Location Request.\n      properties:\n        type:\n          type: string\n          description: The type of message.\n          default: location\n        text:\n          type: string\n          description: \u003e-\n            The fallback text message used when location messages are not\n            supported by the channel.\n          readOnly: true\n        coordinates:\n          type: object\n          description: The coordinates of the location.\n          properties:\n            lat:\n              type: number\n              description: Global latitude.\n            long:\n              type: number\n              description: Global longitude.\n          required:\n            - lat\n            - long\n        location:\n          type: object\n          description: Information about the location.\n          properties:\n            address:\n              type: string\n              description: A string representing the address of the location.\n            name:\n              type: string\n              description: A string representing the name of the location.\n      required:\n        - type\n        - coordinates\n    templateMessage:\n      type: object\n      properties:\n        type:\n          type: string\n          description: The type of message.\n          default: template\n        template:\n          type: object\n          description: \u003e-\n            The whatsapp template message to send. For more information, consult\n            the\n            [guide](https://docs.smooch.io/guide/whatsapp#sending-message-templates).\n            `schema` must be set to `whatsapp`.\n      required:\n        - type\n        - template\n    content:\n      oneOf:\n        - $ref: '#/components/schemas/textMessage'\n        - $ref: '#/components/schemas/carouselMessage'\n        - $ref: '#/components/schemas/fileMessage'\n        - $ref: '#/components/schemas/formMessage'\n        - $ref: '#/components/schemas/formResponseMessage'\n        - $ref: '#/components/schemas/imageMessage'\n        - $ref: '#/components/schemas/listMessage'\n        - $ref: '#/components/schemas/locationMessage'\n        - $ref: '#/components/schemas/templateMessage'\n      discriminator:\n        propertyName: type\n        mapping:\n          text: '#/components/schemas/textMessage'\n          carousel: '#/components/schemas/carouselMessage'\n          file: '#/components/schemas/fileMessage'\n          form: '#/components/schemas/formMessage'\n          formResponse: '#/components/schemas/formResponseMessage'\n          image: '#/components/schemas/imageMessage'\n          list: '#/components/schemas/listMessage'\n          location: '#/components/schemas/locationMessage'\n          template: '#/components/schemas/templateMessage'\n    client:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique ID of the client.\n          example: 5c9a34160c89726709136733\n        type:\n          $ref: '#/components/schemas/clientType'\n        status:\n          type: string\n          description: \u003e-\n            The client status. Indicates if the client is able to receive\n            messages or not. Can be pending, inactive, active, or blocked.\n          enum:\n            - active\n            - blocked\n            - inactive\n            - pending\n          example: active\n        integrationId:\n          type: string\n          description: \u003e-\n            The ID of the integration that the client was created for. Unused\n            for clients of type sdk, as they incorporate multiple integrations.\n          nullable: true\n          example: 582dedf230e788746891281a\n        externalId:\n          type: string\n          description: \u003e-\n            The ID of the user on an external channel. For example, the user’s\n            phone number for Twilio, or their page-scoped user ID for Facebook\n            Messenger. Applies only to non-SDK clients.\n          nullable: true\n          example: your-own-id\n        lastSeen:\n          type: string\n          description: \u003e-\n            A datetime string with the format `YYYY-MM-DDThh:mm:ss.SSSZ`\n            representing the last time the user interacted with this client.\n          nullable: true\n          example: '2020-08-20T16:13:07.462Z'\n        linkedAt:\n          type: string\n          description: \u003e-\n            A timestamp signifying when the client was added to the user.\n            Formatted as `YYYY-MM-DDThh:mm:ss.SSSZ`.\n          nullable: true\n          example: '2020-06-23T14:33:47.492Z'\n        displayName:\n          type: string\n          description: The user's display name on the channel.\n          nullable: true\n          example: Steve\n        avatarUrl:\n          type: string\n          description: The URL for the user's avatar on the channel.\n          format: uri\n          nullable: true\n        info:\n          type: object\n          description: \u003e-\n            A flat curated object with properties that vary for each client\n            platform. All keys are optional and not guaranteed to be available.\n          nullable: true\n        raw:\n          type: object\n          description: \u003e-\n            An object with raw properties that vary for each client platform.\n            All keys are optional and not guaranteed to be available.\n          nullable: true\n    device:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique ID of the device.\n          example: de13bee15b51033b34162411\n        type:\n          type: string\n          description: The type of integration that the device represents.\n          enum:\n            - android\n            - ios\n            - web\n        guid:\n          type: string\n          description: \u003e-\n            A unique identifier for the device, generated client-side by the\n            SDK.\n        clientId:\n          type: string\n          description: The id of the client to which this device is associated.\n        status:\n          type: string\n          description: \u003e-\n            The device status. Indicates if the device will receive push\n            notifications or not.\n          enum:\n            - active\n            - inactive\n        integrationId:\n          type: string\n          description: The ID of the integration that the device was created for.\n        lastSeen:\n          type: string\n          description: \u003e-\n            A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ\n            representing the last time the user interacted with this device.\n        pushNotificationToken:\n          type: string\n          description: The token used for push notifications on Android and iOS devices.\n          nullable: true\n        info:\n          type: object\n          description: \u003e-\n            A flat curated object with properties that vary for each SDK\n            platform. All keys are optional and not guaranteed to be available.\n          nullable: true\n        appVersion:\n          type: string\n          description: \u003e-\n            Version of the mobile app in which the SDK is embedded. Not\n            applicable for devices of type web.\n          nullable: true\n    source:\n      type: object\n      description: The source of the message.\n      properties:\n        type:\n          type: string\n          description: \u003e-\n            An identifier for the channel from which a message originated. May\n            include one of api, sdk, messenger, or any number of other channels.\n          example: ios\n        integrationId:\n          type: string\n          description: \u003e-\n            Identifier indicating which integration the message was sent from.\n            For user messages only.\n          example: de13bee15b51033b34162411\n          nullable: true\n        originalMessageId:\n          type: string\n          description: Message identifier assigned by the originating channel.\n          example: 5f40256af057d0000dda9bd7\n          nullable: true\n        originalMessageTimestamp:\n          type: string\n          description: \u003e-\n            A datetime string with the format `YYYY-MM-DDThh:mm:ss.SSSZ`\n            representing when the third party channel received the message.\n          example: '2019-03-21T18:45:53.720Z'\n          nullable: true\n        client:\n          allOf:\n            - $ref: '#/components/schemas/client'\n          description: \u003e-\n            The client from which the user authored the message or activity, if\n            applicable. This field is not applicable in API responses, it is\n            used only in webhook payloads if the `includeFullSource` option is\n            enabled.\n          nullable: true\n        device:\n          allOf:\n            - $ref: '#/components/schemas/device'\n          description: \u003e-\n            The device from which the user authored the message or activity, if\n            applicable. This field is not applicable in API responses, it is\n            used only in webhook payloads if the `includeFullSource` option is\n            enabled.\n          nullable: true\n      required:\n        - type\n    message:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique ID of the message.\n          example: 5e552ef595e5206375bb835d\n        received:\n          type: string\n          description: \u003e-\n            A datetime string with the format `YYYY-MM-DDThh:mm:ss.SSSZ`\n            representing when Sunshine Conversations received the message.\n          example: '2019-03-21T18:48:52.760Z'\n        author:\n          $ref: '#/components/schemas/author'\n        content:\n          allOf:\n            - $ref: '#/components/schemas/content'\n          description: The content of the message.\n        source:\n          $ref: '#/components/schemas/source'\n        quotedMessage:\n          allOf:\n            - $ref: '#/components/schemas/quotedMessage'\n          description: \u003e-\n            The quoted message is currently only available for WhatsApp and Web\n            Messenger `formResponse` messages.\n          nullable: true\n        metadata:\n          allOf:\n            - $ref: '#/components/schemas/metadata'\n          nullable: true\n        deleted:\n          type: boolean\n          description: \u003e-\n            true if the message serves as a placeholder for one that has been\n            deleted.\n          nullable: true\n    quotedMessageMessage:\n      title: QuotedMessageMessage\n      type: object\n      properties:\n        type:\n          type: string\n          description: \u003e-\n            The type of quotedMessage - a complete Sunshine Conversations\n            message is provided.\n          default: message\n        message:\n          allOf:\n            - $ref: '#/components/schemas/message'\n    quotedMessageExternalMessageId:\n      title: QuotedMessageExternalMessageId\n      type: object\n      properties:\n        type:\n          type: string\n          description: \u003e-\n            The type of quotedMessage - `externalMessageId` if no Sunshine\n            Conversations message matched the quoted message.\n          default: externalMessageId\n        externalMessageId:\n          type: string\n          description: The external message Id of the quoted message.\n    quotedMessage:\n      oneOf:\n        - $ref: '#/components/schemas/quotedMessageMessage'\n        - $ref: '#/components/schemas/quotedMessageExternalMessageId'\n    messageListResponse:\n      type: object\n      title: MessageListResponse\n      properties:\n        messages:\n          type: array\n          description: List of returned messages.\n          items:\n            $ref: '#/components/schemas/message'\n        meta:\n          $ref: '#/components/schemas/meta'\n        links:\n          $ref: '#/components/schemas/links'\n    destination:\n      oneOf:\n        - type: object\n          title: integrationId\n          properties:\n            integrationId:\n              type: string\n              description: \u003e\n                The id of the integration to deliver the message to. Will return\n                an error if\n\n                the integration does not exist or if the user does not have a\n                client for the\n\n                integration attached to the conversation.\n              example: 582dedf230e788746891281a\n        - type: object\n          title: integrationType\n          properties:\n            integrationType:\n              type: string\n              description: \u003e\n                The type of the integration to deliver the message to. Can be\n                set to `none` if sending a [silent\n                message](https://docs.smooch.io/guide/sending-messages/#silent-messages).\n                Will return an error\n\n                if the user does not have a client of that type attached to the\n\n                conversation.\n              example: whatsapp\n      description: \u003e\n        The destination of the message, in the case of [channel\n        targeting](https://docs.smooch.io/guide/sending-messages/#targeting-a-specific-channel)\n        or sending [silent\n        messages](https://docs.smooch.io/guide/sending-messages/#silent-messages).\n        Only\n\n        applicable if the author role is `business` and the conversation is of\n        type\n\n        `personal`.\n    messageOverridePayload:\n      type: object\n      description: The exact payload to send to the channel.\n      properties:\n        payload:\n          type: object\n    messageOverride:\n      anyOf:\n        - type: object\n          title: MessageOverrideApple\n          properties:\n            apple:\n              $ref: '#/components/schemas/messageOverridePayload'\n        - type: object\n          title: MessageOverrideLine\n          properties:\n            line:\n              $ref: '#/components/schemas/messageOverridePayload'\n        - type: object\n          title: MessageOverrideMessenger\n          properties:\n            messenger:\n              $ref: '#/components/schemas/messageOverridePayload'\n        - type: object\n          title: MessageOverrideWhatsapp\n          properties:\n            whatsapp:\n              $ref: '#/components/schemas/messageOverridePayload'\n      description: \u003e-\n        A raw payload containing a message that is sent directly to a channel.\n        Messages for [Apple Business\n        Chat](https://docs.smooch.io/guide/apple-business-chat/#passthrough-api),\n        [Line](https://docs.smooch.io/guide/line/#passthrough-api),\n        [Messenger](https://docs.smooch.io/guide/facebook-messenger/#passthrough-api),\n        [Whatsapp](https://docs.smooch.io/guide/whatsapp/#passthrough-api)\n        channels are supported.\n    messagePost:\n      type: object\n      properties:\n        author:\n          allOf:\n            - $ref: '#/components/schemas/author'\n          description: The author of the message.\n        content:\n          allOf:\n            - $ref: '#/components/schemas/content'\n          description: The content of the message.\n        destination:\n          $ref: '#/components/schemas/destination'\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        override:\n          $ref: '#/components/schemas/messageOverride'\n        schema:\n          type: string\n          description: \u003e\n            When `schema` is set to `\"whatsapp\"`, the `content` key is expected\n            to conform to the [native WhatsApp\n            schema](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates)\n            for sending message templates.\n\n            For more details, consult the documentation for [sending message\n            templates on\n            WhatsApp](https://docs.smooch.io/guide/whatsapp/#sending-message-templates).\n          example: whatsapp\n      required:\n        - author\n        - content\n    messagePostResponse:\n      type: object\n      description: \u003e-\n        The created messages. A single request may produce multiple messages\n        when the shorthand syntax is used to send a template message with\n        leading text.\n      properties:\n        messages:\n          type: array\n          items:\n            $ref: '#/components/schemas/message'\n    activityTypes:\n      type: object\n      properties:\n        type:\n          type: string\n          description: If the author type is `user`, only `conversation:read` is supported.\n          enum:\n            - conversation:read\n            - typing:start\n            - typing:stop\n    activityPost:\n      allOf:\n        - type: object\n          properties:\n            author:\n              allOf:\n                - $ref: '#/components/schemas/author'\n              description: The author of the activity.\n        - $ref: '#/components/schemas/activityTypes'\n      required:\n        - author\n        - type\n    acceptControlBody:\n      type: object\n      properties:\n        metadata:\n          allOf:\n            - $ref: '#/components/schemas/metadata'\n          description: \u003e-\n            Flat object containing custom properties. Strings, numbers and\n            booleans are the only supported format that can be passed to\n            metadata. The metadata is limited to 4KB in size. The metadata\n            object will be included in the `switchboard:acceptControl` and\n            `switchboard:acceptControl:failure` webhooks.\n    offerControlBody:\n      type: object\n      properties:\n        switchboardIntegration:\n          type: string\n          description: \u003e-\n            The id or the name of the switchboard integration that will become\n            pending. Also supports the `next` keyword to offer control to the\n            next switchboard integration designated in the switchboard hierarchy\n            configuration. This cannot match the active switchboard integration.\n          example: next\n        metadata:\n          allOf:\n            - $ref: '#/components/schemas/metadata'\n          description: \u003e-\n            Flat object containing custom properties. Strings, numbers and\n            booleans are the only supported format that can be passed to\n            metadata. The metadata is limited to 4KB in size. The metadata\n            object will be included in the `switchboard:offerControl` and\n            `switchboard:offerControl:failure` webhooks.\n      required:\n        - switchboardIntegration\n    passControlBody:\n      type: object\n      properties:\n        switchboardIntegration:\n          type: string\n          description: \u003e-\n            The id or the name of the switchboard integration that will become\n            active. May also use the `next` keyword to transfer control to the\n            next switchboard integration designated in the switchboard hierarchy\n            configuration\n          example: next\n        metadata:\n          allOf:\n            - $ref: '#/components/schemas/metadata'\n          description: \u003e-\n            Flat object containing custom properties. Strings, numbers and\n            booleans are the only supported format that can be passed to\n            metadata. The metadata is limited to 4KB in size. The metadata\n            object will be included in the `switchboard:passControl` webhook.\n      required:\n        - switchboardIntegration\n    integration:\n      type: object\n      description: The integration.\n      properties:\n        id:\n          type: string\n          description: The unique ID of the integration.\n          readOnly: true\n          example: 5e4af71a81966cfff3ef6550\n        type:\n          type: string\n          example: android\n        status:\n          $ref: '#/components/schemas/status'\n        displayName:\n          type: string\n          description: A human-friendly name used to identify the integration.\n          example: Channel name\n          maxLength: 100\n          nullable: true\n      required:\n        - type\n      discriminator:\n        propertyName: type\n        mapping:\n          android: '#/components/schemas/android'\n          apple: '#/components/schemas/apple'\n          custom: '#/components/schemas/custom'\n          instagram: '#/components/schemas/instagram'\n          ios: '#/components/schemas/ios'\n          line: '#/components/schemas/line'\n          mailgun: '#/components/schemas/mailgun'\n          messagebird: '#/components/schemas/messagebird'\n          messenger: '#/components/schemas/messenger'\n          telegram: '#/components/schemas/telegram'\n          twilio: '#/components/schemas/twilio'\n          twitter: '#/components/schemas/twitter'\n          viber: '#/components/schemas/viber'\n          web: '#/components/schemas/web'\n          whatsapp: '#/components/schemas/whatsapp'\n    android:\n      allOf:\n        - $ref: '#/components/schemas/integration'\n        - type: object\n          properties:\n            type:\n              type: string\n              description: \u003e\n                To configure an android integration, first visit the [Firebase\n                Console](https://console.firebase.google.com/). Copy the\n                `serverKey` and `senderId` from the Cloud Messaging tab in the\n                settings of your project and call the create integrations\n                endpoint with this data.\n\n                If you would like to continue using your legacy GCM `serverKey`\n                you can also obtain it from the [Google Developer\n                Console](https://console.developers.google.com/).\n              default: android\n            serverKey:\n              type: string\n              description: Your server key from the fcm console.\n              minLength: 1\n              writeOnly: true\n              nullable: true\n              example: \u003cserver-key\u003e\n            senderId:\n              type: string\n              description: Your sender id from the fcm console.\n              minLength: 1\n              nullable: true\n              example: \u003csender-id\u003e\n            canUserCreateMoreConversations:\n              type: boolean\n              description: \u003e-\n                Allows users to create more than one conversation on the android\n                integration.\n    apple:\n      allOf:\n        - $ref: '#/components/schemas/integration'\n        - type: object\n          properties:\n            type:\n              type: string\n              description: \u003e\n                To configure an Apple Business Chat integration, acquire the\n                required information and call the Create Integration endpoint.\n              default: apple\n            businessId:\n              type: string\n              description: Apple Business Chat ID.\n              example: 2740f141-89c1-515f-07eb-1128dd73491\n            apiSecret:\n              type: string\n              description: \u003e-\n                Your Apple API secret which is tied to your Messaging Service\n                Provider.\n              writeOnly: true\n              example: QLA//Z13paUYo/2tLReQa-43c5JEAASujGamiY/QTvs=\n            mspId:\n              type: string\n              description: Your Messaging Service Provider ID.\n              example: e7e495d5-bf78-531d-baf6-7f419f7fb592\n          required:\n            - businessId\n            - apiSecret\n            - mspId\n    target:\n      type: string\n      description: URL to be called when the webhook is triggered.\n      example: https://example.com/callback\n    triggers:\n      type: array\n      items:\n        type: string\n      example:\n        - conversation:read\n        - conversation:message\n      description: \u003e-\n        An array of triggers the integration is subscribed to. This property is\n        case sensitive. [More\n        details](https://docs.smooch.io/rest/#section/Webhook-Triggers).\n    includeFullUser:\n      type: boolean\n      description: \u003e-\n        A boolean specifying whether webhook payloads should include the\n        complete user schema for events involving a specific user.\n      default: false\n    includeFullSource:\n      type: boolean\n      description: \u003e-\n        A boolean specifying whether webhook payloads should include the client\n        and device object (when applicable).\n      default: false\n    webhook:\n      type: object\n      properties:\n        id:\n          type: string\n          description: A unique identifier for the webhook.\n          readOnly: true\n          example: 5e554d2cac66fb73a3c01871\n        version:\n          type: string\n          description: \u003e-\n            Schema version of the payload delivered to this webhook. Can be\n            `v1`, `v1.1` or `v2`.\n          readOnly: true\n          example: v2\n        target:\n          $ref: '#/components/schemas/target'\n        triggers:\n          $ref: '#/components/schemas/triggers'\n        secret:\n          type: string\n          description: Webhook secret, used to verify the origin of incoming requests.\n          example: 8564b3e6a8b20a4bdb68b05ce9bc5936\n        includeFullUser:\n          $ref: '#/components/schemas/includeFullUser'\n        includeFullSource:\n          $ref: '#/components/schemas/includeFullSource'\n      required:\n        - target\n        - triggers\n    custom:\n      allOf:\n        - $ref: '#/components/schemas/integration'\n        - type: object\n          properties:\n            type:\n              type: string\n              description: \u003e\n                To configure a custom integration you need to setup a webhook\n                with a set of triggers and target.\n              default: custom\n            webhooks:\n              type: array\n              items:\n                $ref: '#/components/schemas/webhook'\n              description: An array of webhooks associated with the custom integration.\n              minItems: 1\n              maxItems: 1\n          required:\n            - webhooks\n    instagram:\n      allOf:\n        - $ref: '#/components/schemas/integration'\n        - type: object\n          properties:\n            type:\n              type: string\n              description: |\n                Instagram Direct setup steps:\n                  - Take note of your Facebook app ID and secret (apps can be created at [developer.facebook.com](https://developer.facebook.com));\n                  - The Facebook app must have been submitted to Meta for app review with the \"pages_manage_metadata\" (to retrieve Page Access Tokens for the Pages and apps that the app user administers and to set a webhook), \"instagram_basic\", and \"instagram_manage_messages\" (to retrieve basic Instagram account information and send messages) permissions.\n                  - In order to integrate an Instagram Direct app, you must acquire a Page Access Token from your user. Once you have acquired a page access token from your user, call the Create Integration endpoint with your app secret and ID and the user’s page access token.\n              default: instagram\n            pageAccessToken:\n              type: string\n              description: \u003e-\n                The Facebook Page Access Token of the Facebook page that is\n                linked to your Instagram account.\n              writeOnly: true\n              example: your_page_access_token\n            appId:\n              type: string\n              description: Your Facebook App ID.\n              example: your_facebook_app_id\n            appSecret:\n              type: string\n              description: Your Facebook App secret.\n              writeOnly: true\n              example: your_facebook_app_secret\n            businessName:\n              type: string\n              description: Your Instagram Business account name\n              readOnly: true\n              example: instagram_name\n            businessUsername:\n              type: string\n              description: Your Instagram Business unique username\n              readOnly: true\n              example: instagram_username\n            pageId:\n              type: string\n              description: \u003e-\n                The ID of the Facebook Page linked to your Instagram Business\n                account\n              readOnly: true\n              example: '106731941223392'\n            businessId:\n              type: string\n              description: The ID of the Instagram Business account\n              readOnly: true\n              example: '17841444303043201'\n            username:\n              type: string\n              description: \u003e-\n                The Facebook user's username. This is returned when integrating\n                through the Dashboard\n              readOnly: true\n              example: facebook_username\n            userId:\n              type: string\n              description: \u003e-\n                The Facebook user's user ID. This is returned when integrating\n                through the Dashboard\n              readOnly: true\n              example: '100885965124932'\n          required:\n            - pageAccessToken\n            - appId\n            - appSecret\n    ios:\n      allOf:\n        - $ref: '#/components/schemas/integration'\n        - type: object\n          properties:\n            type:\n              type: string\n              description: \u003e\n                To configure an ios integration, call the create integration\n                endpoint with a base64 encoded Apple Push Notification\n                certificate from the [Apple Developer\n                Portal](https://developer.apple.com/).\n              default: ios\n            certificate:\n              type: string\n              description: \u003e\n                The binary of your APN certificate base64 encoded. To base64\n                encode your certificate you can use this command in the\n                terminal:\n\n                `openssl base64 -in YOUR_CERTIFICATE.p12 | tr -d '\\n'`\n              minLength: 1\n              writeOnly: true\n              nullable: true\n              example: your_APN_certificate\n            password:\n              type: string\n              description: The password for your APN certificate.\n              writeOnly: true\n              example: your_APN_password\n            production:\n              type: boolean\n              description: \u003e-\n                The APN environment to connect to (Production, if true, or\n                Sandbox). Defaults to value inferred from certificate if not\n                specified.\n            autoUpdateBadge:\n              type: boolean\n              description: \u003e-\n                Use the unread count of the conversation as the application\n                badge.\n            canUserCreateMoreConversations:\n              type: boolean\n              description: \u003e-\n                Allows users to create more than one conversation on the iOS\n                integration.\n    line:\n      allOf:\n        - $ref: '#/components/schemas/integration'\n        - type: object\n          properties:\n            type:\n              type: string\n              description: \u003e\n                For LINE, each of your customers will need to manually configure\n                a webhook in their LINE configuration page that will point to\n                Sunshine Conversations servers. You must instruct your customers\n                how to configure this manually on their LINE bot page.\n\n                Once you’ve acquired all the required information, call the\n                Create Integration endpoint.\n\n                Then, using the returned integration _id, your customer must set\n                the Callback URL field in their LINE Business Center page.\n\n                The URL should look like the following:\n                `https://app.smooch.io:443/api/line/webhooks/{appId}/{integrationId}`.\n              default: line\n            channelId:\n              type: string\n              description: \u003e-\n                LINE Channel ID. Can be omitted along with `channelSecret` to\n                integrate LINE to setup a webhook before receiving the\n                `channelId` and `channelSecret` back from LINE.\n              example: '1286564967'\n            channelSecret:\n              type: string\n              description: \u003e-\n                LINE Channel Secret. Can be omitted along with `channelId` to\n                integrate LINE to setup a webhook before receiving the\n                `channelId` and `channelSecret` back from LINE.\n              example: your_line_channel_secret\n            channelAccessToken:\n              type: string\n              description: LINE Channel Access Token.\n              example: your_line_channel_token\n            serviceCode:\n              type: string\n              description: LINE Service Code.\n              example: your_line_service_code\n            switcherSecret:\n              type: string\n              description: LINE Switcher Secret.\n              minLength: 1\n              example: your_line_switcher_secret\n            qrCodeUrl:\n              type: string\n              description: \u003e-\n                URL provided by LINE in the [Developer\n                Console](https://developers.line.biz/console/).\n              example: https://qr-official.line.me/M/1O4fb8.png\n            lineId:\n              type: string\n              description: LINE Basic ID. Is automatically set when qrCodeUrl is updated.\n              readOnly: true\n              example: 104fb8\n    mailgun:\n      allOf:\n        - $ref: '#/components/schemas/integration'\n        - type: object\n          properties:\n            type:\n              type: string\n              description: \u003e\n                To configure a Mailgun integration, visit the API Keys tab in\n                the settings page of the Mailgun dashboard and copy your active\n                API key. Call the Create Integration endpoint with your API Key,\n                a domain you have configured in Mailgun, and the incoming\n                address you would like to use. Must have the same domain as the\n                one specified in the domain parameter.\n              default: mailgun\n            apiKey:\n              type: string\n              description: The public API key of your Mailgun account.\n              minLength: 1\n              writeOnly: true\n              example: key-f265hj32f0sd897lqd2j5keb96784043\n            domain:\n              type: string\n              description: \u003e-\n                The domain used to relay email. This domain must be configured\n                and verified in your Mailgun account.\n              minLength: 1\n              example: sandbox123.mailgun.org\n            incomingAddress:\n              type: string\n              description: \u003e-\n                Sunshine Conversations will receive all emails sent to this\n                address. It will also be used as the Reply-To address.\n              minLength: 1\n              example: mytestemail@sandbox123.mailgun.org\n            hideUnsubscribeLink:\n              type: boolean\n              description: \u003e-\n                A boolean value indicating whether the unsubscribe link should\n                be omitted from outgoing emails. When enabled, it is expected\n                that the business is providing the user a way to unsubscribe by\n                some other means. By default, the unsubscribe link will be\n                included in all outgoing emails.\n            fromAddress:\n              type: string\n              description: \u003e-\n                Email address to use as the From and Reply-To address if it must\n                be different from incomingAddress. Only use this option if the\n                address that you supply is configured to forward emails to the\n                incomingAddress, otherwise user replies will be lost. You must\n                also make sure that the domain is properly configured as a mail\n                provider so as to not be flagged as spam by the user’s email\n                client. May be unset with null.\n              minLength: 1\n              nullable: true\n              example: test@sandbox123.mailgun.org\n          required:\n            - apiKey\n            - domain\n            - incomingAddress\n    messagebird:\n      allOf:\n        - $ref: '#/components/schemas/integration'\n        - type: object\n          properties:\n            type:\n              type: string\n              description: \u003e\n                To configure a MessageBird integration, acquire the accessKey,\n                the signingKey and the MessageBird number you would like to use,\n                then call the Create Integration endpoint. The response will\n                include the integration’s `_id` and `webhookSecret`, which must\n                be used to configure the webhook in MessageBird.\n\n                In the Flow Builder for the MessageBird number you’ve used to\n                integrate, add a new step with the following settings:\n\n                - Create a new Call HTTP endpoint with SMS flow.\n\n                - Select your desired SMS number for Incoming SMS.\n\n                - Click on Forward to URL and set its method to POST.\n\n                - Then, using the integration _id and webhookSecret returned\n                from the create integration call, enter the following into the\n                URL field: \n\n                `https://app.smooch.io/api/messagebird/webhooks/{appId}/{integrationId}/{webhookSecret}`\n\n                - Select application/json for the Set Content-Type header field.\n\n                - Save and publish your changes.\n              default: messagebird\n            accessKey:\n              type: string\n              description: The public API key of your MessageBird account.\n              minLength: 1\n              writeOnly: true\n              example: 9V2iJmd93kFJ390L9495JCl11\n            signingKey:\n              type: string\n              description: \u003e-\n                The signing key of your MessageBird account. Used to validate\n                the webhooks' origin.\n              minLength: 1\n              writeOnly: true\n              example: Uu6N09Lkdji3820DJIO89I39sl9dJ\n            originator:\n              type: string\n              description: \u003e-\n                Sunshine Conversations will receive all messages sent to this\n                phone number.\n              minLength: 1\n              example: '12262121021'\n            webhookSecret:\n              type: string\n              description: The secret that is used to configure webhooks in MessageBird.\n              readOnly: true\n              example: 72ade38394d1da51566cede33bd1e67e\n          required:\n            - accessKey\n            - signingKey\n            - originator\n    messenger:\n      allOf:\n        - $ref: '#/components/schemas/integration'\n        - type: object\n          properties:\n            type:\n              type: string\n              description: \u003e\n                Facebook Messenger Setup steps:\n\n                - Take note of your Facebook app ID and secret (apps can be\n                created at developer.facebook.com);\n\n                - The Facebook app must have been submitted to Meta for app\n                review with the “pages_manage_metadata” (to retrieve Page Access\n                Tokens for the Pages, apps that the app user administers and set\n                a webhook) and “pages_messaging” (to send messages) permissions.\n\n                - In order to integrate a Facebook Messenger app you must\n                acquire a Page Access Token from your user. Once you have\n                acquired a page access token from your user, call the Create\n                Integration endpoint with your app secret and ID and the user’s\n                page access token.\n              default: messenger\n            pageAccessToken:\n              type: string\n              description: A Facebook Page Access Token.\n              example: your_access_token\n            appId:\n              type: string\n              description: A Facebook App ID.\n              example: your_facebook_app_id\n            appSecret:\n              type: string\n              description: A Facebook App Secret.\n              writeOnly: true\n              example: your_facebook_app_secret\n            pageId:\n              type: number\n              description: A Facebook page ID.\n              example: '123212323432123'\n            pageName:\n              type: string\n              description: A Facebook page name.\n              example: An Awesome Page\n          required:\n            - pageAccessToken\n            - appId\n            - appSecret\n    telegram:\n      allOf:\n        - $ref: '#/components/schemas/integration'\n        - type: object\n          properties:\n            type:\n              type: string\n              description: \u003e\n                To configure a Telegram integration, acquire the required\n                information from the user and call the Create Integration\n                endpoint.\n              default: telegram\n            token:\n              type: string\n              description: Telegram Bot Token.\n              minLength: 1\n              writeOnly: true\n              example: 192033615:AAEuee2FS2JYKWfDlTulfygjaIGJi4s\n            username:\n              type: string\n              description: Username of the botId\n              readOnly: true\n            botId:\n              type: string\n              description: A human-friendly name used to identify the integration.\n              readOnly: true\n          required:\n            - token\n    twilio:\n      allOf:\n        - $ref: '#/components/schemas/integration'\n        - type: object\n          properties:\n            type:\n              type: string\n              description: \u003e\n                To configure a Twilio integration, acquire the required\n                information from the user and call the Create Integration\n                endpoint.\n              default: twilio\n            accountSid:\n              type: string\n              description: Twilio Account SID.\n              example: ACa1b4c65ee0722712fab89867cb14eac7\n            authToken:\n              type: string\n              description: Twilio Auth Token.\n              minLength: 1\n              writeOnly: true\n              example: 160c024303f53049e1e060fd67ca6aefc\n            phoneNumberSid:\n              type: string\n              description: \u003e-\n                SID for specific phone number. One of `messagingServiceSid` or\n                `phoneNumberSid` must be provided when creating a Twilio\n                integration.\n              minLength: 1\n              example: PN0674df0ecee0c9819bca0ff0bc0a159e\n            messagingServiceSid:\n              type: string\n              description: \u003e-\n                SID for specific messaging service. One of `messagingServiceSid`\n                or `phoneNumberSid` must be provided when creating a Twilio\n                integration.\n              minLength: 1\n          required:\n            - accountSid\n            - authToken\n    twitter:\n      allOf:\n        - $ref: '#/components/schemas/integration'\n        - type: object\n          properties:\n            type:\n              type: string\n              description: \u003e\n                To set up a Twitter integration, please follow the steps\n                outlined in the [Twitter Setup\n                Guide](https://docs.smooch.io/guide/twitter/#setup).\n              default: twitter\n            tier:\n              type: string\n              description: Your Twitter app’s tier, sandbox, premium or enterprise.\n              enum:\n                - sandbox\n                - premium\n                - enterprise\n            envName:\n              type: string\n              description: \u003e-\n                The Twitter dev environments label (required for sandbox and\n                premium tiers).\n              minLength: 1\n              example: your_env_label\n            consumerKey:\n              type: string\n              description: The consumer key for your Twitter app.\n              minLength: 1\n              example: your_consumer_key\n            consumerSecret:\n              type: string\n              description: The consumer key secret for your Twitter app.\n              minLength: 1\n              example: your_consumer_secret\n            accessTokenKey:\n              type: string\n              description: The access token key obtained from your user via oauth.\n              minLength: 1\n              writeOnly: true\n              example: your_access_token_key\n            accessTokenSecret:\n              type: string\n              description: The access token secret obtained from your user via oauth.\n              minLength: 1\n              example: your_access_token_secret\n          required:\n            - tier\n            - consumerKey\n            - consumerSecret\n            - acceessTokenKey\n            - accessTokenSecret\n    viber:\n      allOf:\n        - $ref: '#/components/schemas/integration'\n        - type: object\n          properties:\n            type:\n              type: string\n              description: \u003e\n                To configure a Viber integration, acquire the Viber Public\n                Account token from the user and call the Create Integration\n                endpoint.\n              default: viber\n            token:\n              type: string\n              description: Viber Public Account token.\n              minLength: 1\n              writeOnly: true\n              example: 445da6az1s345z78-dazcczb2542zv51a-e0vc5fva17480im9\n            uri:\n              type: string\n              description: Unique URI of the Viber account.\n              readOnly: true\n            accountId:\n              type: string\n              description: Unique ID of the Viber account.\n              readOnly: true\n          required:\n            - token\n    prechatCapture:\n      type: object\n      properties:\n        avatarUrl:\n          type: string\n          description: \u003e-\n            Sets the URL of the avatar to use for the automatic reply to the\n            prechat capture messages.\n          default: undefined\n          example: https://domain.com/images/avatar.png\n        enabled:\n          type: boolean\n          description: \u003e-\n            If true, enables the Prechat Capture add-on when the Web Messenger\n            is initialized.\n          default: false\n        enableEmailLinking:\n          type: boolean\n          description: \u003e-\n            f true and Mailgun is integrated, will automatically link submitted\n            emails.\n          default: false\n        fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/field'\n          description: \u003e-\n            Array of Fields. Overrides the default Prechat Capture fields to\n            define a custom form.\n          example:\n            - type: email\n              name: email\n              label: Email\n              placeholder: your@email.com\n            - type: text\n              name: company-website\n              label: Company website\n              placeholder: mycompany.com\n    web:\n      allOf:\n        - $ref: '#/components/schemas/integration'\n        - type: object\n          properties:\n            type:\n              type: string\n              description: \u003e\n                To configure a Web Messenger integration, acquire the required\n                information and call the Create Integration endpoint.\n              default: web\n            brandColor:\n              type: string\n              description: \u003e\n                This color will be used in the messenger header and the button\n                or tab\n\n                in idle state. Must be a 3 or 6-character hexadecimal color.\n              default: 65758e\n            fixedIntroPane:\n              type: boolean\n              description: \u003e\n                When true, the introduction pane will be pinned at the top of\n                the\n\n                conversation instead of scrolling with it.\n              default: false\n            conversationColor:\n              type: string\n              description: \u003e\n                This color will be used for customer messages, quick replies and\n\n                actions in the footer. Must be a 3 or 6-character hexadecimal\n                color.\n              default: 0099ff\n            actionColor:\n              type: string\n              description: \u003e\n                This color will be used for call-to-actions inside your\n                messages. Must\n\n                be a 3 or 6-character hexadecimal color.\n              default: 0099ff\n            displayStyle:\n              type: string\n              description: \u003e\n                Choose how the messenger will appear on your website. Must be\n                either\n\n                button or tab.\n              default: button\n            buttonIconUrl:\n              type: string\n              description: \u003e\n                With the button style Web Messenger, you have the option of\n                selecting\n\n                your own button icon. The image must be at least 200 x 200\n                pixels and\n\n                must be in either JPG, PNG, or GIF format.\n              nullable: true\n              example: https://domain.com/images/avatar.png\n            buttonWidth:\n              type: string\n              description: \u003e\n                With the button style Web Messenger, you have the option of\n                specifying\n\n                the button width.\n              default: '58'\n            buttonHeight:\n              type: string\n              description: \u003e\n                With the button style Web Messenger, you have the option of\n                specifying\n\n                the button height.\n              default: '58'\n            integrationOrder:\n              type: array\n              description: \u003e\n                Array of integration IDs, order will be reflected in the Web\n\n                Messenger. When set, only integrations from this list will be\n\n                displayed in the Web Messenger. If unset, all integrations will\n                be\n\n                displayed.\n              items:\n                type: string\n              nullable: true\n              example: '[\"59fc8466260f48003505228b\", \"59d79780481d34002b7d3617\"]'\n            businessName:\n              type: string\n              description: A custom business name for the Web Messenger.\n              example: Kent Shop\n            businessIconUrl:\n              type: string\n              description: \u003e\n                A custom business icon url for the Web Messenger. The image must\n                be at\n\n                least 200 x 200 pixels and must be in either JPG, PNG, or GIF\n                format.\n              example: https://www.gravatar.com/image.jpg\n            backgroundImageUrl:\n              type: string\n              description: \u003e\n                A background image url for the conversation. Image will be tiled\n                to\n\n                fit the window.\n              example: https://a-beautiful-tile.png\n            originWhitelist:\n              type: array\n              description: \u003e\n                A list of origins to whitelist. When set, only the origins from\n                this list will be able to initialize the Web Messenger. If\n                unset, all origins are whitelisted.\n\n                The elements in the list should follow the serialized-origin\n                format from RFC 6454: scheme \"://\" host [ \":\" port ], where\n                scheme is http or https.\n              items:\n                type: string\n              nullable: true\n              example: https://yourdomain.com\n            prechatCapture:\n              description: \u003e\n                Object whose properties can be set to specify the add-on’s\n                options.\n\n                See the\n\n                [guide](https://docs.smooch.io/guide/web-messenger/#prechat-capture)\n\n                to learn more about Prechat Capture.\n              allOf:\n                - $ref: '#/components/schemas/prechatCapture'\n            canUserSeeConversationList:\n              type: boolean\n              description: \u003e\n                Allows users to view their list of conversations. By default,\n                the list\n\n                of conversations will be visible. *This setting only applies to\n                apps\n\n                where `settings.multiConvoEnabled` is set to `true`*.\n              example: false\n            canUserCreateMoreConversations:\n              type: boolean\n              description: \u003e\n                Allows users to create more than one conversation on the web\n                messenger\n\n                integration.\n    whatsapp:\n      allOf:\n        - $ref: '#/components/schemas/integration'\n        - type: object\n          properties:\n            type:\n              type: string\n              description: \u003e\n                To configure a WhatsApp integration, use your WhatsApp API\n                Client connection information. Sunshine Conversations can\n                provide WhatsApp API Client hosting for approved brands. See our\n                [WhatsApp\n                guide](https://docs.smooch.io/guide/whatsapp/#whatsapp-api-client)\n                for more details on WhatsApp API Client hosting.\n              default: whatsapp\n            deploymentId:\n              type: string\n              description: \u003e-\n                The Id of the deployment. The integrationId and the appId will\n                be added to the deployment. Additionally, the deployment’s\n                status will be set to integrated.\n              example: 55c8d9758590aa1900b9b9aa\n            hsmFallbackLanguage:\n              type: string\n              description: \u003e-\n                Specify a fallback language to use when sending WhatsApp message\n                template using the short hand syntax. Defaults to en_US. See\n                WhatsApp documentation for more info.\n              nullable: true\n              default: en_US\n            accountId:\n              type: string\n              description: \u003e-\n                The business ID associated with the WhatsApp account. In\n                combination with accountManagementAccessToken, it’s used for\n                Message Template Reconstruction.\n              nullable: true\n              example: your_whatsApp_account_id\n            accountManagementAccessToken:\n              type: string\n              description: \u003e-\n                An access token associated with the accountId used to query the\n                WhatsApp Account Management API. In combination with accountId,\n                it’s used for Message Template Reconstruction.\n              nullable: true\n              example: your_access_token\n            phoneNumber:\n              type: string\n              description: \u003e-\n                The phone number that is associated with the deployment of this\n                integration, if one exists.\n              readOnly: true\n              nullable: true\n              example: '15144441919'\n          required:\n            - deploymentId\n    status:\n      type: string\n      description: The status of the integration.\n      enum:\n        - inactive\n        - active\n        - error\n      readOnly: true\n    integrationListResponse:\n      type: object\n      properties:\n        integrations:\n          type: array\n          description: List of returned integrations.\n          items:\n            $ref: '#/components/schemas/integration'\n        meta:\n          $ref: '#/components/schemas/meta'\n        links:\n          $ref: '#/components/schemas/links'\n    integrationResponse:\n      type: object\n      title: integrationResponse\n      properties:\n        integration:\n          $ref: '#/components/schemas/integration'\n    integrationUpdateBase:\n      type: object\n      properties:\n        displayName:\n          type: string\n          description: \u003e-\n            A human-friendly name used to identify the integration.\n            `displayName` can be unset by changing it to `null`.\n          minLength: 1\n          maxLength: 100\n          nullable: true\n          example: My awesome integration\n    androidUpdate:\n      allOf:\n        - $ref: '#/components/schemas/integrationUpdateBase'\n        - type: object\n          properties:\n            serverKey:\n              type: string\n              description: Your server key from the fcm console.\n              minLength: 1\n              writeOnly: true\n              nullable: true\n              example: \u003cserver-key\u003e\n            senderId:\n              type: string\n              description: Your sender id from the fcm console.\n              minLength: 1\n              nullable: true\n              example: \u003csender-id\u003e\n            canUserCreateMoreConversations:\n              type: boolean\n              description: \u003e-\n                Allows users to create more than one conversation on the android\n                integration.\n    appleUpdate:\n      allOf:\n        - $ref: '#/components/schemas/integrationUpdateBase'\n    customUpdate:\n      allOf:\n        - $ref: '#/components/schemas/integrationUpdateBase'\n    instagramUpdate:\n      allOf:\n        - $ref: '#/components/schemas/integrationUpdateBase'\n        - type: object\n          properties:\n            pageAccessToken:\n              type: string\n              description: A Facebook Page Access Token.\n              example: your_access_token\n    iosUpdate:\n      allOf:\n        - $ref: '#/components/schemas/integrationUpdateBase'\n        - type: object\n          properties:\n            certificate:\n              type: string\n              description: The binary of your APN certificate base64 encoded.\n              minLength: 1\n              writeOnly: true\n              nullable: true\n              example: your_APN_certificate\n            password:\n              type: string\n              description: The password for your APN certificate.\n              writeOnly: true\n              example: your_APN_password\n            production:\n              type: boolean\n              description: \u003e-\n                The APN environment to connect to (Production, if true, or\n                Sandbox). Defaults to value inferred from certificate if not\n                specified.\n            autoUpdateBadge:\n              type: boolean\n              description: \u003e-\n                Use the unread count of the conversation as the application\n                badge.\n            canUserCreateMoreConversations:\n              type: boolean\n              description: \u003e-\n                Allows users to create more than one conversation on the iOS\n                integration.\n    lineUpdate:\n      allOf:\n        - $ref: '#/components/schemas/integrationUpdateBase'\n    mailgunUpdate:\n      allOf:\n        - $ref: '#/components/schemas/integrationUpdateBase'\n        - type: object\n          properties:\n            hideUnsubscribeLink:\n              type: boolean\n              description: \u003e-\n                A boolean value indicating whether the unsubscribe link should\n                be omitted from outgoing emails. When enabled, it is expected\n                that the business is providing the user a way to unsubscribe by\n                some other means. By default, the unsubscribe link will be\n                included in all outgoing emails.\n            fromAddress:\n              type: string\n              description: \u003e-\n                Email address to use as the From and Reply-To address if it must\n                be different from incomingAddress. Only use this option if the\n                address that you supply is configured to forward emails to the\n                incomingAddress, otherwise user replies will be lost. You must\n                also make sure that the domain is properly configured as a mail\n                provider so as to not be flagged as spam by the user’s email\n                client. May be unset with null.\n              minLength: 1\n              nullable: true\n              example: test@sandbox123.mailgun.org\n    messageBirdUpdate:\n      allOf:\n        - $ref: '#/components/schemas/integrationUpdateBase'\n    messengerUpdate:\n      allOf:\n        - $ref: '#/components/schemas/integrationUpdateBase'\n        - type: object\n          properties:\n            pageAccessToken:\n              type: string\n              description: A Facebook Page Access Token.\n              example: your_access_token\n    telegramUpdate:\n      allOf:\n        - $ref: '#/components/schemas/integrationUpdateBase'\n    twilioUpdate:\n      allOf:\n        - $ref: '#/components/schemas/integrationUpdateBase'\n    twitterUpdate:\n      allOf:\n        - $ref: '#/components/schemas/integrationUpdateBase'\n    viberUpdate:\n      allOf:\n        - $ref: '#/components/schemas/integrationUpdateBase'\n    webUpdate:\n      allOf:\n        - $ref: '#/components/schemas/integrationUpdateBase'\n        - type: object\n          description: \u003e\n            To configure a Web Messenger integration, acquire the required\n            information and call the Create Integration endpoint.\n          properties:\n            brandColor:\n              type: string\n              description: \u003e-\n                This color will be used in the messenger header and the button\n                or tab in idle state. Must be a 3 or 6-character hexadecimal\n                color.\n              default: 65758e\n            fixedIntroPane:\n              type: boolean\n              description: \u003e-\n                When true, the introduction pane will be pinned at the top of\n                the conversation instead of scrolling with it.\n              default: false\n            conversationColor:\n              type: string\n              description: \u003e-\n                This color will be used for customer messages, quick replies and\n                actions in the footer. Must be a 3 or 6-character hexadecimal\n                color.\n              default: 0099ff\n            actionColor:\n              type: string\n              description: \u003e-\n                This color will be used for call-to-actions inside your\n                messages. Must be a 3 or 6-character hexadecimal color.\n              default: 0099ff\n            displayStyle:\n              type: string\n              description: \u003e-\n                Choose how the messenger will appear on your website. Must be\n                either button or tab.\n              default: button\n            buttonIconUrl:\n              type: string\n              description: \u003e-\n                With the button style Web Messenger, you have the option of\n                selecting your own button icon. The image must be at least 200 x\n                200 pixels and must be in either JPG, PNG, or GIF format.\n              nullable: true\n            buttonWidth:\n              type: string\n              description: \u003e-\n                With the button style Web Messenger, you have the option of\n                specifying the button width.\n              default: '58'\n            buttonHeight:\n              type: string\n              description: \u003e-\n                With the button style Web Messenger, you have the option of\n                specifying the button height.\n              default: '58'\n            integrationOrder:\n              type: array\n              description: \u003e-\n                Array of integration IDs, order will be reflected in the Web\n                Messenger. When set, only integrations from this list will be\n                displayed in the Web Messenger. If unset, all integrations will\n                be displayed.\n              items:\n                type: string\n              nullable: true\n              example:\n                - 59fc8466260f48003505228b\n                - 59d79780481d34002b7d3617\n            businessName:\n              type: string\n              description: A custom business name for the Web Messenger.\n              example: Kent Shop\n            businessIconUrl:\n              type: string\n              description: \u003e-\n                A custom business icon url for the Web Messenger. The image must\n                be at least 200 x 200 pixels and must be in either JPG, PNG, or\n                GIF format.\n              example: https://www.gravatar.com/image.jpg\n            backgroundImageUrl:\n              type: string\n              description: \u003e-\n                A background image url for the conversation. Image will be tiled\n                to fit the window.\n              example: https://a-beautiful-tile.png\n            originWhitelist:\n              type: array\n              description: \u003e\n                A list of origins to whitelist. When set, only the origins from\n                this list will be able to initialize the Web Messenger. If\n                unset, all origins are whitelisted.\n\n                The elements in the list should follow the serialized-origin\n                format from RFC 6454: scheme \"://\" host [ \":\" port ], where\n                scheme is http or https.\n              items:\n                type: string\n              nullable: true\n            prechatCapture:\n              description: \u003e-\n                Object whose properties can be set to specify the add-on’s\n                options. See the\n                [guide](https://docs.smooch.io/guide/web-messenger/#prechat-capture)\n                to learn more about Prechat Capture.\n              allOf:\n                - $ref: '#/components/schemas/prechatCapture'\n            canUserCreateMoreConversations:\n              type: boolean\n              description: \u003e-\n                Allows users to create more than one conversation on the web\n                messenger integration.\n    whatsAppUpdate:\n      allOf:\n        - $ref: '#/components/schemas/integrationUpdateBase'\n        - type: object\n          properties:\n            hsmFallbackLanguage:\n              type: string\n              description: \u003e-\n                Specify a fallback language to use when sending WhatsApp message\n                template using the short hand syntax. Defaults to en_US. See\n                WhatsApp documentation for more info.\n              nullable: true\n              default: en_US\n            accountId:\n              type: string\n              description: \u003e-\n                The business ID associated with the WhatsApp account. In\n                combination with accountManagementAccessToken, it’s used for\n                Message Template Reconstruction.\n              nullable: true\n              example: your_whatsApp_account_id\n            accountManagementAccessToken:\n              type: string\n              description: \u003e-\n                An access token associated with the accountId used to query the\n                WhatsApp Account Management API. In combination with accountId,\n                it’s used for Message Template Reconstruction.\n              nullable: true\n              example: your_access_token\n    integrationUpdate:\n      oneOf:\n        - $ref: '#/components/schemas/androidUpdate'\n        - $ref: '#/components/schemas/appleUpdate'\n        - $ref: '#/components/schemas/customUpdate'\n        - $ref: '#/components/schemas/instagramUpdate'\n        - $ref: '#/components/schemas/iosUpdate'\n        - $ref: '#/components/schemas/lineUpdate'\n        - $ref: '#/components/schemas/mailgunUpdate'\n        - $ref: '#/components/schemas/messageBirdUpdate'\n        - $ref: '#/components/schemas/messengerUpdate'\n        - $ref: '#/components/schemas/telegramUpdate'\n        - $ref: '#/components/schemas/twilioUpdate'\n        - $ref: '#/components/schemas/twitterUpdate'\n        - $ref: '#/components/schemas/viberUpdate'\n        - $ref: '#/components/schemas/webUpdate'\n        - $ref: '#/components/schemas/whatsAppUpdate'\n    apiKey:\n      type: object\n      description: The integration key.\n      properties:\n        id:\n          type: string\n          description: \u003e-\n            The unique ID of the API key, used when signing JWTs or accessing\n            the API using Basic Authentication.\n          example: int_5e4b0f225aca01092928f917\n        displayName:\n          allOf:\n            - $ref: '#/components/schemas/displayName'\n          description: The name of the API key.\n          example: My custom key\n        secret:\n          type: string\n          description: \u003e-\n            The secret of the API key, used when signing JWTs or accessing the\n            API using Basic Authentication\n          example: Ck1LjzzlUzvlCTtqAdQ2z1QukuBTrN3TIx\n    integrationApiKeyResponse:\n      type: object\n      properties:\n        key:\n          $ref: '#/components/schemas/apiKey'\n    webhookListResponse:\n      type: object\n      properties:\n        webhooks:\n          type: array\n          description: List of webhooks associated with the integration.\n          items:\n            $ref: '#/components/schemas/webhook'\n    webhookBody:\n      type: object\n      properties:\n        target:\n          $ref: '#/components/schemas/target'\n        triggers:\n          $ref: '#/components/schemas/triggers'\n        includeFullUser:\n          $ref: '#/components/schemas/includeFullUser'\n        includeFullSource:\n          $ref: '#/components/schemas/includeFullSource'\n    webhookCreateBody:\n      allOf:\n        - $ref: '#/components/schemas/webhookBody'\n      required:\n        - target\n        - triggers\n    webhookResponse:\n      type: object\n      title: WebhookResponse\n      properties:\n        webhook:\n          allOf:\n            - $ref: '#/components/schemas/webhook'\n          description: The webhook.\n    enabled:\n      type: boolean\n      description: \u003e-\n        Whether the switchboard is enabled. Allows creating the switchboard in a\n        disabled state so that messages don't get lost or misrouted during\n        switchboard configuration. When a switchboard is disabled, integrations\n        linked to the switchboard will receive all events.\n    defaultSwitchboardIntegrationId:\n      type: string\n      description: \u003e-\n        The id of the switchboard integration that will be given control when a\n        new conversation begins. It will also be used for conversations that\n        existed before the switchboard was enabled.\n      example: 5ef21b132f21af34f088530e\n    switchboard:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique ID of the switchboard.\n          example: 5ef21b132f21af34f088530d\n        enabled:\n          $ref: '#/components/schemas/enabled'\n        defaultSwitchboardIntegrationId:\n          $ref: '#/components/schemas/defaultSwitchboardIntegrationId'\n      required:\n        - id\n        - enabled\n    switchboardListResponse:\n      type: object\n      properties:\n        switchboards:\n          type: array\n          description: List of returned switchboards.\n          items:\n            $ref: '#/components/schemas/switchboard'\n    switchboardResponse:\n      type: object\n      title: SwitchboardResponse\n      properties:\n        switchboard:\n          allOf:\n            - $ref: '#/components/schemas/switchboard'\n          description: The switchboard.\n    switchboardUpdateBody:\n      type: object\n      properties:\n        enabled:\n          $ref: '#/components/schemas/enabled'\n        defaultSwitchboardIntegrationId:\n          $ref: '#/components/schemas/defaultSwitchboardIntegrationId'\n    deliverStandbyEvents:\n      type: boolean\n      description: \u003e-\n        Setting to determine if webhooks should be sent when the switchboard\n        integration is not in control of a conversation (standby status)\n    nextSwitchboardIntegrationId:\n      type: string\n      description: \u003e-\n        The switchboard integration id to which control of a conversation is\n        passed / offered by default.\n      example: 5ef21b86e933b7355c11c606\n    messageHistoryCount:\n      type: integer\n      minimum: 1\n      maximum: 10\n      nullable: true\n      description: Number of messages to include in the message history context.\n      example: 5\n    switchboardIntegration:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique ID of the switchboard integration.\n          example: 5ef21b86e933b7355c11c604\n        name:\n          $ref: '#/components/schemas/name'\n        integrationId:\n          $ref: '#/components/schemas/switchboardIntegrationId'\n        integrationType:\n          $ref: '#/components/schemas/switchboardIntegrationType'\n        deliverStandbyEvents:\n          $ref: '#/components/schemas/deliverStandbyEvents'\n        nextSwitchboardIntegrationId:\n          $ref: '#/components/schemas/nextSwitchboardIntegrationId'\n        messageHistoryCount:\n          $ref: '#/components/schemas/messageHistoryCount'\n      required:\n        - id\n        - name\n        - integrationId\n        - integrationType\n        - deliverStandbyEvents\n    switchboardIntegrationListResponse:\n      type: object\n      properties:\n        switchboardIntegrations:\n          type: array\n          description: List of returned switchboard integrations.\n          items:\n            $ref: '#/components/schemas/switchboardIntegration'\n    switchboardIntegrationCreateBody:\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/name'\n        integrationId:\n          allOf:\n            - $ref: '#/components/schemas/switchboardIntegrationId'\n          description: \u003e-\n            The id of the integration to link to the switchboard integration.\n            Must be used when linking a custom integration. One of\n            `integrationId` or `integrationType` must be provided.\n        integrationType:\n          allOf:\n            - $ref: '#/components/schemas/switchboardIntegrationType'\n          description: \u003e-\n            The type of the integration to link to the switchboard integration.\n            Must be used when linking an OAuth integration. One of\n            `integrationId` or `integrationType` must be provided.\n        deliverStandbyEvents:\n          allOf:\n            - $ref: '#/components/schemas/deliverStandbyEvents'\n          default: true\n        nextSwitchboardIntegrationId:\n          allOf:\n            - $ref: '#/components/schemas/nextSwitchboardIntegrationId'\n          nullable: true\n        messageHistoryCount:\n          $ref: '#/components/schemas/messageHistoryCount'\n      required:\n        - name\n    switchboardIntegrationResponse:\n      type: object\n      title: SwitchboardIntegrationResponse\n      properties:\n        switchboardIntegration:\n          allOf:\n            - $ref: '#/components/schemas/switchboardIntegration'\n          description: The switchboard integration.\n    switchboardIntegrationUpdateBody:\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/name'\n        integrationId:\n          allOf:\n            - $ref: '#/components/schemas/switchboardIntegrationId'\n          description: \u003e-\n            The id of the integration to link to the switchboard integration.\n            Must be used when linking a custom integration. Can't provide both\n            `integrationId` and `integrationType`.\n        integrationType:\n          allOf:\n            - $ref: '#/components/schemas/switchboardIntegrationType'\n          description: \u003e-\n            The type of the integration to link to the switchboard integration.\n            Must be used when linking an OAuth integration. Can't provide both\n            `integrationId` and `integrationType`.\n        deliverStandbyEvents:\n          $ref: '#/components/schemas/deliverStandbyEvents'\n        nextSwitchboardIntegrationId:\n          allOf:\n            - $ref: '#/components/schemas/nextSwitchboardIntegrationId'\n          nullable: true\n        messageHistoryCount:\n          $ref: '#/components/schemas/messageHistoryCount'\n    signedUpAt:\n      type: string\n      description: \u003e-\n        The date at which the user signed up. Must be ISO 8601 time format\n        `YYYY-MM-DDThh:mm:ss.sssZ`.\n      example: '2020-05-21T15:53:30.197Z'\n    profile:\n      type: object\n      description: Object hosting user profile information.\n      properties:\n        givenName:\n          type: string\n          description: The user's given name (first name).\n          minLength: 1\n          maxLength: 128\n          nullable: true\n          example: Jane\n        surname:\n          type: string\n          description: The user's surname (last name).\n          minLength: 1\n          maxLength: 128\n          nullable: true\n          example: Doe\n        email:\n          type: string\n          description: The user's email address.\n          format: email\n          minLength: 1\n          maxLength: 128\n          nullable: true\n          example: jane.doe@gmail.com\n        avatarUrl:\n          type: string\n          description: The user's avatar.\n          format: uri\n          minLength: 1\n          maxLength: 2048\n          nullable: true\n          example: https://s3.amazonaws.com/avatar.jpg\n        locale:\n          type: string\n          description: End-user's locale information in BCP 47 format.\n          minLength: 1\n          maxLength: 64\n          nullable: true\n          example: fr-CA\n    userCreateBody:\n      type: object\n      title: UserCreateBody\n      properties:\n        externalId:\n          type: string\n          minLength: 1\n          maxLength: 1024\n          description: \u003e\n            A unique identifier for the user. The `externalId` can be used to\n            link a user to the same conversation [across multiple\n            devices](https://docs.smooch.io/guide/authenticating-users/).\n          example: your-own-id\n        signedUpAt:\n          $ref: '#/components/schemas/signedUpAt'\n        profile:\n          $ref: '#/components/schemas/profile'\n        metadata:\n          $ref: '#/components/schemas/metadata'\n      required:\n        - externalId\n    userTruncated:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique ID of the user.\n          example: 7494535bff5cef41a15be74d\n        externalId:\n          type: string\n          description: |\n            An optional ID that can also be used to retrieve the user.\n          example: your-own-id\n          nullable: true\n    user:\n      allOf:\n        - $ref: '#/components/schemas/userTruncated'\n        - type: object\n          properties:\n            signedUpAt:\n              allOf:\n                - $ref: '#/components/schemas/signedUpAt'\n            profile:\n              allOf:\n                - $ref: '#/components/schemas/profile'\n            metadata:\n              allOf:\n                - $ref: '#/components/schemas/metadata'\n              nullable: false\n    userResponse:\n      type: object\n      title: UserResponse\n      properties:\n        user:\n          allOf:\n            - $ref: '#/components/schemas/user'\n          description: The user.\n    userUpdateBody:\n      type: object\n      title: UserUpdateBody\n      properties:\n        signedUpAt:\n          allOf:\n            - $ref: '#/components/schemas/signedUpAt'\n        profile:\n          allOf:\n            - $ref: '#/components/schemas/profile'\n        metadata:\n          $ref: '#/components/schemas/metadata'\n    clientListResponse:\n      type: object\n      properties:\n        clients:\n          type: array\n          description: List of returned clients.\n          items:\n            $ref: '#/components/schemas/client'\n        meta:\n          $ref: '#/components/schemas/meta'\n        links:\n          $ref: '#/components/schemas/links'\n    matchCriteriaMailgun:\n      allOf:\n        - $ref: '#/components/schemas/matchCriteriaBase'\n        - type: object\n          description: \u003e-\n            The set of criteria used to determine the user's identity on a\n            third-party channel.\n          properties:\n            type:\n              type: string\n              description: The channel type.\n              default: mailgun\n            address:\n              type: string\n              description: The user’s email address.\n              example: steveb@channel5.com\n            subject:\n              type: string\n              description: May be specified to set the subject for the outgoing email.\n              default: New message from {appName}\n          required:\n            - address\n    matchCriteriaMessagebird:\n      allOf:\n        - $ref: '#/components/schemas/matchCriteriaBase'\n        - type: object\n          description: \u003e-\n            The set of criteria used to determine the user's identity on a\n            third-party channel.\n          properties:\n            type:\n              type: string\n              description: The channel type.\n              default: messagebird\n            phoneNumber:\n              type: string\n              description: \u003e\n                The user’s phone number. It must contain the + prefix and the\n                country code.\n\n                Examples of valid phone numbers: +1 212-555-2368, +12125552368,\n                +1 212 555 2368.\n\n                Examples of invalid phone numbers: 212 555 2368, 1 212 555 2368.\n              example: '+15550001234'\n          required:\n            - phoneNumber\n    matchCriteriaTwilio:\n      allOf:\n        - $ref: '#/components/schemas/matchCriteriaBase'\n        - type: object\n          description: \u003e-\n            The set of criteria used to determine the user's identity on a\n            third-party channel.\n          properties:\n            type:\n              type: string\n              description: The channel type.\n              default: twilio\n            phoneNumber:\n              type: string\n              description: \u003e\n                The user’s phone number. It must contain the + prefix and the\n                country code.\n\n                Examples of valid phone numbers: +1 212-555-2368, +12125552368,\n                +1 212 555 2368.\n\n                Examples of invalid phone numbers: 212 555 2368, 1 212 555 2368.\n              example: '+15550001234'\n          required:\n            - phoneNumber\n    matchCriteriaWhatsapp:\n      allOf:\n        - $ref: '#/components/schemas/matchCriteriaBase'\n        - type: object\n          description: \u003e-\n            The set of criteria used to determine the user's identity on a\n            third-party channel.\n          properties:\n            type:\n              type: string\n              description: The channel type.\n              default: whatsapp\n            phoneNumber:\n              type: string\n              description: \u003e\n                The user’s phone number. It must contain the + prefix and the\n                country code.\n\n                Examples of valid phone numbers: +1 212-555-2368, +12125552368,\n                +1 212 555 2368.\n\n                Examples of invalid phone numbers: 212 555 2368, 1 212 555 2368.\n              example: '+15550001234'\n          required:\n            - phoneNumber\n    matchCriteriaBase:\n      type: object\n      description: \u003e-\n        The set of criteria used to determine the user's identity on a\n        third-party channel.\n      properties:\n        type:\n          type: string\n          description: The channel type.\n        integrationId:\n          type: string\n          description: The ID of the integration to link. Must match the provided type.\n          example: 582dedf230e788746891281a\n        primary:\n          type: boolean\n          description: \u003e-\n            Flag indicating whether the client will become the primary for the\n            target conversation once linking is complete.\n          default: true\n      required:\n        - type\n        - integrationId\n    matchCriteria:\n      oneOf:\n        - $ref: '#/components/schemas/matchCriteriaMailgun'\n        - $ref: '#/components/schemas/matchCriteriaMessagebird'\n        - $ref: '#/components/schemas/matchCriteriaTwilio'\n        - $ref: '#/components/schemas/matchCriteriaWhatsapp'\n      discriminator:\n        propertyName: type\n        mapping:\n          mailgun: '#/components/schemas/matchCriteriaMailgun'\n          messagebird: '#/components/schemas/matchCriteriaMessagebird'\n          twilio: '#/components/schemas/matchCriteriaTwilio'\n          whatsapp: '#/components/schemas/matchCriteriaWhatsapp'\n      description: \u003e-\n        The set of criteria used to determine the user's identity on a\n        third-party channel.\n    clientCreate:\n      type: object\n      properties:\n        matchCriteria:\n          $ref: '#/components/schemas/matchCriteria'\n        confirmation:\n          type: object\n          title: Confirmation\n          description: The confirmation options of the link request.\n          properties:\n            type:\n              type: string\n              description: The type of confirmation.\n              enum:\n                - immediate\n                - userActivity\n                - prompt\n            message:\n              allOf:\n                - $ref: '#/components/schemas/messagePost'\n              description: \u003e-\n                The message used to reach out to the user, if desired. Messages\n                sent via this method can only be of type text and image. If\n                actions are included they can only be of type link. The\n                confirmation message will not be added to the user’s\n                conversation.\n          required:\n            - type\n        target:\n          type: object\n          title: Target\n          description: The target conversation to attach the client to.\n          properties:\n            conversationId:\n              type: string\n              description: The conversation ID of the target conversation.\n              example: 029c31f25a21b47effd7be90\n          required:\n            - conversationId\n      required:\n        - matchCriteria\n        - confirmation\n        - target\n    appSubSchema:\n      type: object\n      description: The app that triggered the events.\n      properties:\n        id:\n          type: string\n          description: The unique ID of the app.\n          example: 5e4af71a81966cfff3ef6550\n    webhookSubSchema:\n      type: object\n      description: The webhook that generated the payload.\n      properties:\n        id:\n          type: string\n          description: The unique ID of the webhook.\n        version:\n          type: string\n          description: Schema version of the payload delivered to this webhook (v2).\n      example:\n        id: 582dedf230e788746891281a\n        version: v2\n    eventSubSchema:\n      type: object\n      properties:\n        id:\n          type: string\n          description: \u003e-\n            The unique ID of the event. May be used to ensure that an event is\n            not processed twice in the case of a webhook that is re-tried due to\n            an error or timeout.\n        type:\n          type: string\n          description: \u003e-\n            The type of the event. Will match one of the subscribed triggers for\n            your [webhook](#operation/createWebhook).\n        createdAt:\n          type: string\n          description: \u003e-\n            A timestamp signifying when the event was generated. Formatted as\n            `YYYY-MM-DDThh:mm:ss.SSSZ`.\n      example:\n        id: 0ca7d56ba7b2e081e479fe9e\n        type: conversation:message\n        createdAt: '2020-02-25T18:06:37.547Z'\n    sourceWebhook:\n      type: object\n      properties:\n        type:\n          type: string\n          description: \u003e-\n            An identifier for the channel from which a message originated. May\n            include one of api, sdk, messenger, or any number of other channels.\n          example: ios\n        integrationId:\n          type: string\n          description: \u003e-\n            Identifier indicating which integration the message was sent from.\n            For user messages only.\n        originalMessageId:\n          type: string\n          description: Message identifier assigned by the originating channel.\n          nullable: true\n        originalMessageTimestamp:\n          type: string\n          description: \u003e-\n            A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ\n            representing when the third-party channel received the message.\n          nullable: true\n        client:\n          allOf:\n            - $ref: '#/components/schemas/client'\n          description: \u003e-\n            The client from which the user authored the message or activity, if\n            applicable. This field will only be present if the\n            `includeFullSource` option is enabled for the webhook.\n          nullable: true\n        device:\n          allOf:\n            - $ref: '#/components/schemas/device'\n          description: \u003e-\n            The device from which the user authored the message or activity, if\n            applicable. This field will only be present if the\n            `includeFullSource` option is enabled for the webhook\n          nullable: true\n    clientAddEvent:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              type: object\n              description: \u003e-\n                The payload of the event. The contents of this object depend on\n                the type of event.\n              properties:\n                conversation:\n                  allOf:\n                    - $ref: '#/components/schemas/conversationTruncated'\n                  description: \u003e\n                    The conversation associated with the creation of the client.\n                    This field is only present\n\n                    when the reason is `channelLinking` and when attaching the\n                    client to a specific conversation.\n                  nullable: true\n                user:\n                  allOf:\n                    - $ref: '#/components/schemas/userTruncated'\n                  description: The user associated with the client.\n                client:\n                  allOf:\n                    - $ref: '#/components/schemas/client'\n                  description: The client that was just created.\n                reason:\n                  type: string\n                  description: \u003e\n                    The reason for which the client was added.\n\n                    * `channelLinking` - The client was created as a result of\n                    initiating a channel link.\n\n                    * `sdkLogin` - The client was created as a result of logging\n                    into an SDK device.\n\n                    * `authCode` - The client was created as a result of\n                    initializing an SDK client with an `authCode`.\n                  enum:\n                    - channelLinking\n                    - sdkLogin\n                    - authCode\n                source:\n                  allOf:\n                    - $ref: '#/components/schemas/sourceWebhook'\n                  description: \u003e-\n                    The source where this event originated from. This could be\n                    the API or an SDK device.\n      title: client:add\n    clientRemoveEvent:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              type: object\n              description: \u003e-\n                The payload of the event. The contents of this object depend on\n                the type of event.\n              properties:\n                conversation:\n                  allOf:\n                    - $ref: '#/components/schemas/conversationTruncated'\n                  description: \u003e\n                    The conversation associated with the removal of the client.\n                    This field is only present\n\n                    when the reason is `theft`, `linkCancelled` or `linkFailed`.\n\n                    Note that for the `theft` reason, the conversation will not\n                    be present if it has been deleted.\n                  nullable: true\n                user:\n                  allOf:\n                    - $ref: '#/components/schemas/userTruncated'\n                  description: The user associated with the client.\n                client:\n                  allOf:\n                    - $ref: '#/components/schemas/client'\n                  description: The removed client.\n                reason:\n                  type: string\n                  description: \u003e\n                    The reason for which the client was removed.\n\n                    * `api` - The client was removed using the API.\n\n                    * `linkCancelled` - The user cancelled a channel link.\n\n                    * `linkFailed` - The client was removed after a channel link\n                    attempt failed.\n\n                    * `sdk` - The client was removed using the SDK.\n\n                    * `theft` - The client was transferred to another user due\n                    to a channel link.\n                  enum:\n                    - api\n                    - linkCancelled\n                    - linkFailed\n                    - sdk\n                    - theft\n                error:\n                  type: object\n                  description: \u003e-\n                    Object containing details of what went wrong. This field\n                    will only be present when the reason is `linkCancelled` or\n                    `linkFailed`.\n                  nullable: true\n                source:\n                  allOf:\n                    - $ref: '#/components/schemas/sourceWebhook'\n                  description: \u003e-\n                    The source where this event originated from. This could be\n                    the API or an SDK device.\n      title: client:remove\n    clientUpdateEvent:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              type: object\n              description: \u003e-\n                The payload of the event. The contents of this object depend on\n                the type of event.\n              properties:\n                conversation:\n                  allOf:\n                    - $ref: '#/components/schemas/conversationTruncated'\n                  description: The conversation which triggered a change in the client.\n                user:\n                  allOf:\n                    - $ref: '#/components/schemas/userTruncated'\n                  description: The user associated with the client.\n                client:\n                  allOf:\n                    - $ref: '#/components/schemas/client'\n                  description: The updated client.\n                reason:\n                  type: string\n                  description: \u003e\n                    The reason for which the client was updated.\n\n                    * `confirmed` - The client is now active and ready to use.\n\n                    * `blocked` - The user has unsubscribed from the\n                    conversation.\n\n                    * `matched` - The channel found a user that matches the\n                    information provided.\n                  enum:\n                    - confirmed\n                    - blocked\n                    - matched\n      title: client:update\n    referral:\n      type: object\n      properties:\n        code:\n          type: string\n          description: The referral’s identifier.\n        details:\n          type: object\n          nullable: true\n          description: Nested object containing additional information.\n          properties:\n            source:\n              type: string\n              description: The source of the referral - MESSENGER_CODE, ADS etc…\n              example: MESSENGER_CODE\n            type:\n              type: string\n              description: The type of referral, typically OPEN-THREAD.\n              example: OPEN-THREAD\n            adId:\n              type: string\n              nullable: true\n              description: \u003e-\n                If the referral came from an ad, this field will be present with\n                the ad’s Id.\n              example: '4216212847577'\n    conversationCreateEvent:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              type: object\n              description: \u003e-\n                The payload of the event. The contents of this object depend on\n                the type of event.\n              properties:\n                conversation:\n                  allOf:\n                    - $ref: '#/components/schemas/conversationTruncated'\n                  description: The conversation that was created.\n                creationReason:\n                  type: string\n                  description: \u003e\n                    The reason why the conversation was created, if applicable.\n\n                    * `linkRequest` - The conversation was created in order to\n                    generate a link request to transfer the user to a different\n                    channel.\n\n                    * `message` - The conversation was created because a message\n                    was sent.\n\n                    * `none` - The conversation was not created for a specific\n                    purpose. Used primarily when a conversation is created via\n                    the Create Conversation API.\n\n                    * `notification` - The conversation was created by a call to\n                    the Notification API.\n\n                    * `prechatCapture` - The conversation was created because\n                    the user completed a prechat capture form in the Web\n                    Messenger.\n\n                    * `startConversation` - The conversation was created because\n                    of a call to the startConversation API on one of the SDK\n                    integrations, or a start conversation event was triggered\n                    from a messaging channel.\n                  enum:\n                    - linkRequest\n                    - message\n                    - none\n                    - notification\n                    - prechatCapture\n                    - startConversation\n                source:\n                  allOf:\n                    - $ref: '#/components/schemas/sourceWebhook'\n                  description: The source of the creation.\n                user:\n                  allOf:\n                    - $ref: '#/components/schemas/user'\n                  description: \u003e-\n                    The user associated with the conversation. Only present if\n                    the created conversation was of type personal. For sdkGroup\n                    conversations, the list of participants can be fetched using\n                    the List Participants API, if required.\n                  nullable: true\n                referral:\n                  allOf:\n                    - $ref: '#/components/schemas/referral'\n                  description: Referral information, if applicable.\n                  nullable: true\n      title: conversation:create\n    conversationJoinEvent:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              type: object\n              description: \u003e-\n                The payload of the event. The contents of this object depend on\n                the type of event.\n              properties:\n                conversation:\n                  allOf:\n                    - $ref: '#/components/schemas/conversationTruncated'\n                  description: The conversation in which the user was added.\n                user:\n                  allOf:\n                    - $ref: '#/components/schemas/userTruncated'\n                  description: The user that joined the conversation.\n      title: conversation:join\n    conversationLeaveEvent:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              type: object\n              description: \u003e-\n                The payload of the event. The contents of this object depend on\n                the type of event.\n              properties:\n                conversation:\n                  allOf:\n                    - $ref: '#/components/schemas/conversationTruncated'\n                  description: The conversation in which the user was removed.\n                user:\n                  allOf:\n                    - $ref: '#/components/schemas/userTruncated'\n                  description: The user that left the conversation.\n      title: conversation:leave\n    conversationRemoveEvent:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              type: object\n              description: \u003e-\n                The payload of the event. The contents of this object depend on\n                the type of event.\n              properties:\n                conversation:\n                  allOf:\n                    - $ref: '#/components/schemas/conversationTruncated'\n                  description: The conversation that was deleted.\n      title: conversation:remove\n    conversationMessageDeliveryPayload:\n      type: object\n      description: \u003e-\n        The payload of the event. The contents of this object depend on the type\n        of event.\n      properties:\n        user:\n          allOf:\n            - $ref: '#/components/schemas/user'\n          description: The user associated with the conversation.\n        conversation:\n          allOf:\n            - $ref: '#/components/schemas/conversationTruncated'\n          description: The conversation in which the message was sent.\n        message:\n          type: object\n          properties:\n            id:\n              type: string\n              description: A string representing the ID of the message.\n          description: The message that was sent.\n        destination:\n          type: object\n          description: A nested object representing the destination of the message.\n          properties:\n            type:\n              type: string\n              description: \u003e-\n                An identifier for the channel to which a message was sent to.\n                May include one of \"web\", \"ios\", \"android\", \"messenger\",\n                \"viber\", \"telegram\", \"wechat\", \"line\", \"twilio\", \"api\",\n                \"notification\", or any other channel.\n            integrationId:\n              type: string\n              description: Identifier indicating which integration the message was sent to.\n        externalMessages:\n          type: array\n          nullable: true\n          description: \u003e-\n            An array of objects representing the third-party messages associated\n            with the event. The order of the external messages is not guaranteed\n            to be the same across the different triggers. Note that some\n            channels don’t expose message IDs, in which case this field will be\n            unset.\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n                description: A string representing the ID of the external message.\n        isFinalEvent:\n          type: boolean\n          description: \u003e-\n            A boolean indicating whether the webhook is the final one for the\n            `message.id` and `destination.type` pair.\n    conversationMessageDeliveryChannelEvent:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              $ref: '#/components/schemas/conversationMessageDeliveryPayload'\n      title: conversation:message:delivery:channel\n    conversationMessageDeliveryFailureEvent:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              allOf:\n                - $ref: '#/components/schemas/conversationMessageDeliveryPayload'\n                - type: object\n                  properties:\n                    error:\n                      type: object\n                      description: \u003e-\n                        A nested object representing the error associated with\n                        the delivery failure.\n                      properties:\n                        code:\n                          type: string\n                          description: \u003e-\n                            A string representing the error code associated with\n                            the error.\n                        message:\n                          type: string\n                          description: The description associated with the error.\n      title: conversation:message:delivery:failure\n    conversationMessageDeliveryUserEvent:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              $ref: '#/components/schemas/conversationMessageDeliveryPayload'\n      title: conversation:message:delivery:user\n    authorWebhook:\n      type: object\n      description: The author of the activity.\n      properties:\n        type:\n          type: string\n          description: The `type` of the author.\n          enum:\n            - business\n            - user\n        userId:\n          type: string\n          description: The id of the user. Only supported when author `type` is `user`.\n          example: 5963c0d619a30a2e00de36b8\n        user:\n          allOf:\n            - $ref: '#/components/schemas/user'\n          description: \u003e-\n            The user that authored the message or activity. `profile` is\n            included in the payload if the `includeFullUser` option is enabled.\n      required:\n        - type\n    messageWebhook:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique ID of the message.\n          example: 5e552ef595e5206375bb835d\n        received:\n          type: string\n          description: \u003e-\n            A datetime string with the format `YYYY-MM-DDThh:mm:ss.SSSZ`\n            representing when Sunshine Conversations received the message.\n          example: '2019-03-21T18:48:52.760Z'\n        author:\n          $ref: '#/components/schemas/authorWebhook'\n        content:\n          allOf:\n            - $ref: '#/components/schemas/content'\n          description: The content of the message.\n        source:\n          $ref: '#/components/schemas/source'\n        quotedMessage:\n          allOf:\n            - $ref: '#/components/schemas/quotedMessage'\n          description: \u003e-\n            The quoted message is currently only available for WhatsApp and Web\n            Messenger `formResponse` messages.\n          nullable: true\n        metadata:\n          allOf:\n            - $ref: '#/components/schemas/metadata'\n          nullable: true\n        deleted:\n          type: boolean\n          description: \u003e-\n            true if the message serves as a placeholder for one that has been\n            deleted.\n          nullable: true\n    conversationMessageEvent:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              type: object\n              description: \u003e-\n                The payload of the event. The contents of this object depend on\n                the type of event.\n              properties:\n                conversation:\n                  allOf:\n                    - $ref: '#/components/schemas/conversationTruncated'\n                  description: The conversation in which the message was sent.\n                message:\n                  allOf:\n                    - $ref: '#/components/schemas/messageWebhook'\n                  description: The message that was sent.\n                recentNotifications:\n                  type: array\n                  description: \u003e-\n                    Messages sent with the Notification API since the last user\n                    message.\n                  items:\n                    $ref: '#/components/schemas/messageWebhook'\n      title: conversation:message\n    postbackWebhook:\n      type: object\n      properties:\n        payload:\n          type: string\n          description: The payload associated with the postback.\n        metadata:\n          $ref: '#/components/schemas/metadata'\n    conversationPostbackEvent:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              type: object\n              description: \u003e-\n                The payload of the event. The contents of this object depend on\n                the type of event.\n              properties:\n                postback:\n                  allOf:\n                    - $ref: '#/components/schemas/postbackWebhook'\n                  description: The postback associated with the event.\n                conversation:\n                  allOf:\n                    - $ref: '#/components/schemas/conversationTruncated'\n                  description: The conversation linked to the postback.\n                user:\n                  allOf:\n                    - $ref: '#/components/schemas/user'\n                  description: The user that triggered the postback.\n                source:\n                  allOf:\n                    - $ref: '#/components/schemas/sourceWebhook'\n                  description: The source of the postback.\n      title: conversation:postback\n    activity:\n      allOf:\n        - $ref: '#/components/schemas/activityTypes'\n        - type: object\n          properties:\n            source:\n              allOf:\n                - $ref: '#/components/schemas/sourceWebhook'\n              description: The source of the activity.\n            author:\n              $ref: '#/components/schemas/authorWebhook'\n    conversationReadEvent:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              type: object\n              description: \u003e-\n                The payload of the event. The contents of this object depend on\n                the type of event.\n              properties:\n                conversation:\n                  allOf:\n                    - $ref: '#/components/schemas/conversationTruncated'\n                  description: The conversation in which the message was read.\n                activity:\n                  allOf:\n                    - $ref: '#/components/schemas/activity'\n                    - type: object\n                      properties:\n                        type:\n                          type: string\n                          description: The type of activity.\n                          default: conversation:read\n                  description: The activity that was sent.\n      title: conversation:read\n    conversationTypingEvent:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              type: object\n              description: \u003e-\n                The payload of the event. The contents of this object depend on\n                the type of event.\n              properties:\n                conversation:\n                  allOf:\n                    - $ref: '#/components/schemas/conversationTruncated'\n                  description: The conversation in which the activity was sent.\n                activity:\n                  allOf:\n                    - $ref: '#/components/schemas/activity'\n                    - type: object\n                      properties:\n                        type:\n                          type: string\n                          description: The type of activity.\n                  description: The activity that was sent.\n      title: conversation:typing\n    switchboardAcceptControl:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              type: object\n              description: \u003e-\n                The payload of the event. The contents of this object depend on\n                the type of event.\n              properties:\n                conversation:\n                  allOf:\n                    - $ref: '#/components/schemas/conversationTruncated'\n                  description: \u003e-\n                    The conversation from which the switchboard event was fired.\n                    Will include an `activeSwitchboardIntegration` representing\n                    the integration that has just accepted control.\n                metadata:\n                  $ref: '#/components/schemas/metadata'\n      title: switchboard:acceptControl\n    switchboardAcceptControlFailure:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              type: object\n              description: \u003e-\n                The payload of the event. The contents of this object depend on\n                the type of event.\n              properties:\n                error:\n                  type: object\n                  description: Object containing details of what went wrong.\n                conversation:\n                  allOf:\n                    - $ref: '#/components/schemas/conversationTruncated'\n                  description: The conversation from which the switchboard event was fired.\n                metadata:\n                  $ref: '#/components/schemas/metadata'\n      title: switchboard:acceptControl:failure\n    switchboardOfferControl:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              type: object\n              description: \u003e-\n                The payload of the event. The contents of this object depend on\n                the type of event.\n              properties:\n                conversation:\n                  allOf:\n                    - $ref: '#/components/schemas/conversationTruncated'\n                  description: \u003e-\n                    The conversation from which the switchboard event was fired.\n                    On success, the payload will include an\n                    `activeSwitchboardIntegration`, representing the integration\n                    from which control is being offered, and a\n                    `pendingSwitchboardIntegration`, representing the\n                    integration being offered control.\n                metadata:\n                  $ref: '#/components/schemas/metadata'\n      title: switchboard:offerControl\n    switchboardOfferControlFailure:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              type: object\n              description: \u003e-\n                The payload of the event. The contents of this object depend on\n                the type of event.\n              properties:\n                error:\n                  type: object\n                  description: Object containing details of what went wrong.\n                conversation:\n                  allOf:\n                    - $ref: '#/components/schemas/conversationTruncated'\n                  description: The conversation from which the switchboard event was fired.\n                metadata:\n                  $ref: '#/components/schemas/metadata'\n      title: switchboard:offerControl:failure\n    switchboardPassControl:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              type: object\n              description: \u003e-\n                The payload of the event. The contents of this object depend on\n                the type of event.\n              properties:\n                conversation:\n                  allOf:\n                    - $ref: '#/components/schemas/conversationTruncated'\n                  description: \u003e-\n                    The conversation from which the switchboard event was fired.\n                    On success, the payload will include an\n                    `activeSwitchboardIntegration`, representing the switchboard\n                    integration that is now in control of the conversation.\n                metadata:\n                  $ref: '#/components/schemas/metadata'\n      title: switchboard:passControl\n    switchboardPassControlFailure:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              type: object\n              description: \u003e-\n                The payload of the event. The contents of this object depend on\n                the type of event.\n              properties:\n                error:\n                  type: object\n                  description: Object containing details of what went wrong.\n                conversation:\n                  allOf:\n                    - $ref: '#/components/schemas/conversationTruncated'\n                  description: The conversation from which the switchboard event was fired.\n                metadata:\n                  $ref: '#/components/schemas/metadata'\n      title: switchboard:passControl:failure\n    userMergeEvent:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              type: object\n              description: \u003e-\n                The payload of the event. The contents of this object depend on\n                the type of event.\n              properties:\n                mergedUsers:\n                  type: object\n                  description: \u003e-\n                    Contains information about the users that were merged\n                    together.\n                  properties:\n                    surviving:\n                      allOf:\n                        - $ref: '#/components/schemas/user'\n                      description: The user that now represents the merged user object.\n                    discarded:\n                      allOf:\n                        - $ref: '#/components/schemas/user'\n                      description: \u003e-\n                        The user that was unified into the surviving user\n                        object.\n                mergedConversations:\n                  type: object\n                  description: \u003e-\n                    Contains information about the conversations that were\n                    merged together as a result of the operation, if applicable.\n                    If no conversations were merged, this property is omitted.\n                  properties:\n                    surviving:\n                      allOf:\n                        - $ref: '#/components/schemas/conversationTruncated'\n                      description: \u003e-\n                        The conversation that now represents the merged\n                        conversation object.\n                    discarded:\n                      allOf:\n                        - $ref: '#/components/schemas/conversationTruncated'\n                      description: \u003e-\n                        The conversation that was unified into the surviving\n                        conversation object.\n                  nullable: true\n                mergedClients:\n                  type: object\n                  description: \u003e-\n                    Contains information about the clients that were merged\n                    together as a result of the operation, if applicable. If no\n                    clients were merged, this property is omitted.\n                  properties:\n                    surviving:\n                      allOf:\n                        - $ref: '#/components/schemas/client'\n                      description: \u003e-\n                        The client that already existed before the merge\n                        started.\n                    discarded:\n                      allOf:\n                        - $ref: '#/components/schemas/client'\n                      description: \u003e-\n                        The pending client that was discarded during the merge\n                        event.\n                  nullable: true\n                discardedMetadata:\n                  allOf:\n                    - $ref: '#/components/schemas/metadata'\n                  description: \u003e-\n                    A flat object with the set of metadata properties that were\n                    discarded when merging the two users. This should contain\n                    values only if the combined metadata fields exceed the 4KB\n                    limit.\n                  nullable: true\n                reason:\n                  type: string\n                  description: \u003e\n                    The reason for which the users merged.\n\n                    * `api` - The users were merged using the API.\n\n                    * `channelLinking` - The users were merged as a result of\n                    initiating a channel link.\n\n                    * `sdkLogin` - The users were merged as a result of logging\n                    into an SDK device.\n                  enum:\n                    - api\n                    - channelLinking\n                    - sdkLogin\n      title: user:merge\n    userUpdateEvent:\n      allOf:\n        - $ref: '#/components/schemas/eventSubSchema'\n        - type: object\n          properties:\n            payload:\n              type: object\n              description: \u003e-\n                The payload of the event. The contents of this object depend on\n                the type of event.\n              properties:\n                user:\n                  allOf:\n                    - $ref: '#/components/schemas/user'\n                  description: The updated user.\n                reason:\n                  type: string\n                  description: \u003e\n                    The reason why the user was updated, if applicable.\n\n                    * `authentication` - An anonymous user became an\n                    [identified](https://docs.smooch.io/guide/intro-to-users/)\n                    user.\n\n                    * `localeDetection` - A user was updated as a result of\n                    automated locale detection on messages sent.\n                  enum:\n                    - authentication\n                    - localeDetection\n                source:\n                  allOf:\n                    - $ref: '#/components/schemas/sourceWebhook'\n                  description: The source of the creation.\n      title: user:update\n  parameters:\n    pageQuery:\n      name: page\n      in: query\n      description: Contains parameters for applying cursor pagination.\n      schema:\n        $ref: '#/components/schemas/page'\n      style: deepObject\n      explode: true\n    appFilterQuery:\n      name: filter\n      in: query\n      description: Contains parameters for filtering the results.\n      schema:\n        type: object\n        title: appListFilter\n        properties:\n          serviceAccountId:\n            type: string\n            description: \u003e-\n              When specified, lists only the apps that the service account has\n              access to.\n      style: deepObject\n      explode: true\n    appId:\n      name: appId\n      in: path\n      description: Identifies the app.\n      schema:\n        type: string\n        example: 5d8cff3cd55b040010928b5b\n      required: true\n    keyId:\n      name: keyId\n      in: path\n      description: The id of the key.\n      required: true\n      schema:\n        type: string\n        example: int_5d8cff3cd55b040010928b5b\n    accessQuery:\n      name: access\n      in: query\n      description: \u003e-\n        The access level for the attachment. Currently the available access\n        levels are public and private.\n      schema:\n        type: string\n        example: public\n        default: public\n      required: true\n    forQuery:\n      name: for\n      in: query\n      description: \u003e-\n        Specifies the intended container for the attachment, to enable automatic\n        attachment deletion (on deletion of associated message, conversation or\n        user). For now, only message is supported. See [Attachments for\n        Messages](#section/Attachments-for-Messages) for details.\n      schema:\n        type: string\n        example: message\n    conversationIdQuery:\n      name: conversationId\n      in: query\n      description: Links the attachment getting uploaded to the conversation ID.\n      schema:\n        type: string\n        example: c616a583e4c240a871818541\n    conversationFilterQuery:\n      name: filter\n      in: query\n      description: Contains parameters for filtering the results.\n      schema:\n        type: object\n        title: conversationListFilter\n        properties:\n          userId:\n            type: string\n            description: \u003e-\n              The user's id. One of `userId` or `userExternalId` is required,\n              but not both.\n          userExternalId:\n            type: string\n            description: \u003e-\n              The external Id of the user. One of `userId` or `userExternalId`\n              is required, but not both.\n      style: deepObject\n      explode: true\n      required: true\n    conversationId:\n      name: conversationId\n      in: path\n      description: Identifies the conversation.\n      schema:\n        type: string\n        example: 029c31f25a21b47effd7be90\n      required: true\n    messageId:\n      name: messageId\n      in: path\n      description: The id of the message.\n      schema:\n        type: string\n        example: 029c31f25a21b47effd7be90\n      required: true\n    integrationFilterQuery:\n      name: filter\n      in: query\n      description: Contains parameters for filtering the results.\n      schema:\n        type: object\n        title: integrationListFilter\n        properties:\n          types:\n            type: string\n            description: \u003e-\n              Comma-separated list of types to return. If omitted, all types are\n              returned.\n            example: android,ios\n      style: deepObject\n      explode: true\n    integrationId:\n      name: integrationId\n      in: path\n      description: The id of the integration.\n      schema:\n        type: string\n        example: 029c31f25a21b47effd7be90\n      required: true\n    webhookId:\n      name: webhookId\n      in: path\n      description: The id of the webhook.\n      schema:\n        type: string\n        example: 029c31f25a21b47effd7be90\n      required: true\n    switchboardId:\n      name: switchboardId\n      in: path\n      description: Identifies the switchboard.\n      schema:\n        type: string\n        example: 5d8cff3cd55b040010928b5b\n      required: true\n    switchboardIntegrationId:\n      name: switchboardIntegrationId\n      in: path\n      description: Identifies the switchboard integration.\n      schema:\n        type: string\n        example: 5d8cff3cd55b040010928b5b\n      required: true\n    userIdOrExternalId:\n      in: path\n      name: userIdOrExternalId\n      description: The user's id or externalId.\n      required: true\n      schema:\n        type: string\n        example: 42589ad070d43be9b00ff7e5\n    clientId:\n      name: clientId\n      in: path\n      description: The client's id.\n      required: true\n      schema:\n        type: string\n        example: 5d8cff3cd55b040010928b5b\n    clientIdQuery:\n      name: client_id\n      in: query\n      description: Your integration’s unique identifier\n      schema:\n        type: string\n        example: 5e4af71a81966cfff3ef6550\n      required: true\n    responseTypeQuery:\n      name: response_type\n      in: query\n      description: For now the only acceptable value is code.\n      schema:\n        type: string\n        example: code\n      required: true\n    stateQuery:\n      name: state\n      in: query\n      description: \u003e-\n        You may pass in any arbitrary string value here which will be returned\n        to you along with the code via browser redirect.\n      schema:\n        type: string\n        example: Pending\n    redirectUriQuery:\n      name: redirect_uri\n      in: query\n      description: \u003e-\n        You may pass in a redirect_uri to determine which URI the response is\n        redirected to. This URI must be contained in the list configured by your\n        integration. If this option is not passed, the first URI present in the\n        list will be used.\n      schema:\n        type: string\n        example: https://example.org\n  examples:\n    text:\n      value:\n        author:\n          type: business\n        content:\n          type: text\n          text: Hello!\n    carousel:\n      value:\n        author:\n          type: business\n        content:\n          type: carousel\n          items:\n            - title: Tacos\n              description: Get your tacos today!\n              mediaUrl: https://example.org/image.jpg\n              altText: A giant taco\n              size: compact\n              actions:\n                - text: Select\n                  type: postback\n                  payload: TACOS\n                - text: More info\n                  type: link\n                  uri: https://example.org\n            - title: Ramen\n              description: Get your ramen today!\n              mediaUrl: https://example.org/image.jpg\n              altText: A chicken vegetable ramen bowl\n              size: compact\n              actions:\n                - text: Select\n                  type: postback\n                  payload: RAMEN\n                - text: More info\n                  type: link\n                  uri: https://example.org\n    file:\n      value:\n        author:\n          type: business\n        content:\n          type: file\n          text: Here's our FAQ!\n          mediaUrl: https://example.org/FAQ.pdf\n          altText: FAQ.pdf\n    form:\n      value:\n        author:\n          type: business\n        content:\n          type: form\n          blockChatInput: true\n          fields:\n            - type: text\n              name: full_name\n              label: Your name?\n              placeholder: Type your name...\n              minSize: 1\n              maxSize: 30\n            - type: email\n              name: email_address\n              label: Your email?\n              placeholder: email@example.com\n        destination:\n          integrationType: web\n    image:\n      value:\n        author:\n          type: business\n        content:\n          type: image\n          text: Hello!\n          mediaUrl: https://example.org/image.jpg\n          altText: A wonderful image\n    list:\n      value:\n        author:\n          type: business\n        content:\n          type: list\n          items:\n            - title: Tacos\n              description: Get your tacos today!\n              mediaUrl: https://example.org/image.jpg\n              size: compact\n              actions:\n                - text: Select\n                  type: postback\n                  payload: TACOS\n                - text: More info\n                  type: link\n                  uri: https://example.org\n            - title: Ramen\n              description: Get your ramen today!\n              mediaUrl: https://example.org/image.jpg\n              size: compact\n              actions:\n                - text: Select\n                  type: postback\n                  payload: RAMEN\n                - text: More info\n                  type: link\n                  uri: https://example.org\n    location:\n      value:\n        author:\n          type: business\n        content:\n          type: location\n          coordinates:\n            lat: 45.5261583\n            long: -73.595346\n          location:\n            address: 5333 avenue Casgrain\n            name: Zendesk Montréal\n    whatsappTemplate:\n      value:\n        author:\n          type: business\n        schema: whatsapp\n        content:\n          type: template\n          template:\n            namespace: XXXXXXXX_XXXX_XXXX_XXXX_XXXXXXXXXXXX\n            name: hello_world\n            language:\n              policy: deterministic\n              code: en_US\n            component:\n              - type: header\n                parameters:\n                  - type: image\n                    image:\n                      link: https://image.jpg\n              - type: body\n                parameters:\n                  - type: text\n                    text: My User Name\n                  - type: text\n                    text: My Agent Name\n        destination:\n          integrationType: whatsapp\n    text-2:\n      value:\n        messages:\n          - id: 5f748c1a2b5315fc007e7977\n            received: '2020-09-30T13:46:02.733Z'\n            author:\n              type: business\n              avatarUrl: https://www.gravatar.com/image.jpg\n            content:\n              type: text\n              text: Hello!\n            source:\n              type: api:conversations\n    carousel-2:\n      value:\n        messages:\n          - id: 5f748c1a2b5315fc007e7977\n            received: '2020-09-30T13:46:02.733Z'\n            author:\n              type: business\n              avatarUrl: https://www.gravatar.com/image.jpg\n            content:\n              type: carousel\n              text: |-\n                1. Tacos\n                Get your tacos today!\n                More info: https://example.org\n\n                2. Ramen\n                Get your ramen today!\n                More info: https://example.org\n              items:\n                - title: Tacos\n                  description: Get your tacos today!\n                  mediaUrl: https://example.org/image.jpg\n                  altText: A giant taco\n                  mediaType: text/html; charset=UTF-8\n                  size: compact\n                  actions:\n                    - text: Select\n                      type: postback\n                      payload: TACOS\n                      uri: ''\n                    - text: More info\n                      type: link\n                      uri: https://example.org\n                - title: Ramen\n                  description: Get your ramen today!\n                  mediaUrl: https://example.org/image.jpg\n                  altText: A chicken vegetable ramen bowl\n                  mediaType: text/html; charset=UTF-8\n                  size: compact\n                  actions:\n                    - text: Select\n                      type: postback\n                      payload: RAMEN\n                      uri: ''\n                    - text: More info\n                      type: link\n                      uri: https://example.org\n            source:\n              type: api:conversations\n    file-2:\n      value:\n        messages:\n          - id: 5f748c1a2b5315fc007e7977\n            received: '2020-09-30T13:46:02.733Z'\n            author:\n              type: business\n              avatarUrl: https://www.gravatar.com/image.jpg\n            content:\n              type: file\n              text: Here's our FAQ!\n              mediaUrl: https://example.org/FAQ.pdf\n              altText: FAQ.pdf\n              mediaType: application/pdf\n              mediaSize: 627328\n            source:\n              type: api:conversations\n    form-2:\n      value:\n        messages:\n          - id: 5f748c1a2b5315fc007e7977\n            received: '2020-09-30T13:46:02.733Z'\n            author:\n              type: business\n              avatarUrl: https://www.gravatar.com/image.jpg\n            content:\n              type: form\n              submitted: false\n              blockChatInput: true\n              fields:\n                - type: text\n                  name: full_name\n                  label: Your name?\n                  placeholder: Type your name...\n                  minSize: 1\n                  maxSize: 30\n                - type: email\n                  name: email_address\n                  label: Your email?\n                  placeholder: email@example.com\n            source:\n              type: api:conversations\n    image-2:\n      value:\n        messages:\n          - id: 5f748c1a2b5315fc007e7977\n            received: '2020-09-30T13:46:02.733Z'\n            author:\n              type: business\n              avatarUrl: https://www.gravatar.com/image.jpg\n            content:\n              type: image\n              text: Hello!\n              mediaUrl: https://example.org/image.jpg\n              altText: A wonderful image\n              mediaType: image/jpg\n              mediaSize: 627328\n            source:\n              type: api:conversations\n    list-2:\n      value:\n        messages:\n          - id: 5f748c1a2b5315fc007e7977\n            received: '2020-09-30T13:46:02.733Z'\n            author:\n              type: business\n              avatarUrl: https://www.gravatar.com/image.jpg\n            content:\n              type: list\n              text\": |-\n                1. Tacos\n                Get your tacos today!\n                More info: https://example.org\n\n                2. Ramen\n                Get your ramen today!\n                More info: https://example.org\n              items:\n                - title: Tacos\n                  description: Get your tacos today!\n                  mediaUrl: https://example.org/image.jpg\n                  mediaType: text/html; charset=UTF-8\n                  size: compact\n                  actions:\n                    - text: Select\n                      type: postback\n                      payload: TACOS\n                      uri: ''\n                    - text: More info\n                      type: link\n                      uri: https://example.org\n                - title: Ramen\n                  description: Get your ramen today!\n                  mediaUrl: https://example.org/image.jpg\n                  mediaType: text/html; charset=UTF-8\n                  size: compact\n                  actions:\n                    - text: Select\n                      type: postback\n                      payload: RAMEN\n                      uri: ''\n                    - text: More info\n                      type: link\n                      uri: https://example.org\n            source:\n              type: api:conversations\n    location-2:\n      value:\n        messages:\n          - id: 5f748c1a2b5315fc007e7977\n            received: '2020-09-30T13:46:02.733Z'\n            author:\n              type: business\n              avatarUrl: https://www.gravatar.com/image.jpg\n            content:\n              type: location\n              text: |-\n                Location shared:\n                https://maps.google.com/maps?q=45.5261583,-73.595346\n              coordinates:\n                lat: 45.5261583\n                long: -73.595346\n              location:\n                address: 5333 avenue Casgrain\n                name: Zendesk Montréal\n            source:\n              type: api:conversations\n    integrationListResponse:\n      value:\n        integrations:\n          - id: 5e4af71a81966cfff3ef6550\n            type: android\n            status: active\n            displayName: Android\n            serverId: \u003csender-id\u003e\n            canUserCreateMoreConversations: true\n        meta:\n          hasMore: true\n          afterCursor: 5e4af71a81966cfff3ef6550\n          beforeCursor: 5e4af71a81966cfff3ef6550\n        links:\n          prev: \u003e-\n            https://api.smooch.io/v2/apps/5e4af71a81966cfff3ef6551/integrations?page[before]=5e4af71a81966cfff3ef6550\n          after: \u003e-\n            https://api.smooch.io/v2/apps/5e4af71a81966cfff3ef6551/integrations?page[after]=5e4af71a81966cfff3ef6550\n    integrationResponse:\n      value:\n        integration:\n          id: 5e4af71a81966cfff3ef6550\n          type: android\n          status: active\n          displayName: Android\n          serverId: \u003csender-id\u003e\n          canUserCreateMoreConversations: true\n    userDeletePersonalInformationResponse:\n      value:\n        user:\n          id: 6e416caac6a5e9544e3fb6d7\n          externalId: your-own-id\n          profile: {}\n          signedUpAt: '2020-05-21T15:53:30.197Z'\n          metadata: {}\n    clientAddEvent:\n      value:\n        app:\n          id: 60bf823452c2a718162f986a\n        webhook:\n          id: 612905a67821c3f206d6909f\n          version: v2\n        events:\n          - id: 61290a62c64b3af1ff868714\n            createdAt: '2021-08-27T15:53:06.744Z'\n            type: client:add\n            payload:\n              conversation:\n                id: c2c8710dedf8f26ee6e9a68f\n                type: personal\n              user:\n                id: 6a2343df57be6fe0f98efc33\n              client:\n                integrationId: 60bfc8fa67951336472cc57a\n                type: twilio\n                id: 61290a4f7821c3f206d690a3\n                status: pending\n              reason: channelLinking\n              source:\n                type: web\n                integrationId: 60bf824952c2a718162f989c\n    clientRemoveEvent:\n      value:\n        app:\n          id: 60bf823452c2a718162f986a\n        webhook:\n          id: 612905a67821c3f206d6909f\n          version: v2\n        events:\n          - id: 61290a6cc64b3af1ff868715\n            createdAt: '2021-08-27T15:53:16.591Z'\n            type: client:remove\n            payload:\n              user:\n                id: 6a2343df57be6fe0f98efc33\n              client:\n                integrationId: 60bfc8fa67951336472cc57a\n                type: twilio\n                externalId: '+15140000000'\n                id: 61290a4f7821c3f206d690a3\n                displayName: +1 514-000-0000\n                status: active\n                info:\n                  phoneNumber: '+15140000000'\n                  city: MONTREAL\n                  country: CA\n                  state: QC\n                raw:\n                  FromZip: ''\n                  FromState: QC\n                  FromCity: MONTREAL\n                  FromCountry: CA\n                  From: '+15140000000'\n                lastSeen: '2021-08-27T15:53:06.721Z'\n                linkedAt: '2021-08-27T15:52:47.998Z'\n              reason: sdk\n              source:\n                type: web\n                integrationId: 60bf824952c2a718162f989c\n    clientUpdateEvent:\n      value:\n        app:\n          id: 60bf823452c2a718162f986a\n        webhook:\n          id: 612905a67821c3f206d6909f\n          version: v2\n        events:\n          - id: 61290a62c64b3af1ff868714\n            createdAt: '2021-08-27T15:53:06.744Z'\n            type: client:update\n            payload:\n              conversation:\n                id: c2c8710dedf8f26ee6e9a68f\n                type: personal\n              user:\n                id: 6a2343df57be6fe0f98efc33\n              client:\n                integrationId: 60bfc8fa67951336472cc57a\n                type: twilio\n                externalId: '+15140000000'\n                id: 61290a4f7821c3f206d690a3\n                displayName: +1 514-000-0000\n                status: active\n                info:\n                  phoneNumber: '+15140000000'\n                  city: MONTREAL\n                  country: CA\n                  state: QC\n                raw:\n                  FromZip: ''\n                  FromState: QC\n                  FromCity: MONTREAL\n                  FromCountry: CA\n                  From: '+15140000000'\n                lastSeen: '2021-08-27T15:53:06.721Z'\n                linkedAt: '2021-08-27T15:52:47.998Z'\n              reason: confirmed\n    conversationCreateEvent:\n      value:\n        app:\n          id: 5ebee0975ac5304b664a12fa\n        webhook:\n          id: 5f4eaef81e3dcc117c7ba48a\n          version: v2\n        events:\n          - id: 5f74a0d52b5315fc007e798a\n            createdAt: '2020-09-30T15:14:29.834Z'\n            type: conversation:create\n            payload:\n              conversation:\n                id: f52b01137aa6c250bc7251fa\n                type: personal\n                metadata:\n                  lang: en-ca\n                activeSwitchboardIntegration:\n                  id: 5eecde2dcdbffb08f5c3ed37\n                  name: bot\n                  integrationId: 5f11a650e4e987667c2051d1\n                  integrationType: custom\n              user:\n                id: 26508c10541a4b0ff472e5e2\n                externalId: '912382197'\n              creationReason: prechatCapture\n              source:\n                type: web\n                integrationId: 5ecff63ffc3ab25f4561c8a0\n    conversationJoinEvent:\n      value:\n        app:\n          id: 5ebee0975ac5304b664a12fa\n        webhook:\n          id: 5f4eaef81e3dcc117c7ba48a\n          version: v2\n        events:\n          - id: 5f74a0d52b5315fc007e798a\n            createdAt: '2020-09-30T15:14:29.834Z'\n            type: conversation:join\n            payload:\n              conversation:\n                id: f52b01137aa6c250bc7251fa\n                type: sdkGroup\n                activeSwitchboardIntegration:\n                  id: 5eecde2dcdbffb08f5c3ed37\n                  name: bot\n                  integrationId: 5f11a650e4e987667c2051d1\n                  integrationType: custom\n              user:\n                id: 26508c10541a4b0ff472e5e2\n                externalId: '912382197'\n    conversationLeaveEvent:\n      value:\n        app:\n          id: 5ebee0975ac5304b664a12fa\n        webhook:\n          id: 5f4eaef81e3dcc117c7ba48a\n          version: v2\n        events:\n          - id: 5f74a0d52b5315fc007e798a\n            createdAt: '2020-09-30T15:14:29.834Z'\n            type: conversation:leave\n            payload:\n              conversation:\n                id: f52b01137aa6c250bc7251fa\n                type: sdkGroup\n                activeSwitchboardIntegration:\n                  id: 5eecde2dcdbffb08f5c3ed37\n                  name: bot\n                  integrationId: 5f11a650e4e987667c2051d1\n                  integrationType: custom\n              user:\n                id: 26508c10541a4b0ff472e5e2\n                externalId: '912382197'\n    conversationRemoveEvent:\n      value:\n        app:\n          id: 5ebee0975ac5304b664a12fa\n        webhook:\n          id: 5f4eaef81e3dcc117c7ba48a\n          version: v2\n        events:\n          - id: 5f74a0d52b5315fc007e798a\n            createdAt: '2020-09-30T15:14:29.834Z'\n            type: conversation:remove\n            payload:\n              conversation:\n                id: f52b01137aa6c250bc7251fa\n                type: sdkGroup\n                activeSwitchboardIntegration:\n                  id: 5eecde2dcdbffb08f5c3ed37\n                  name: bot\n                  integrationId: 5f11a650e4e987667c2051d1\n                  integrationType: custom\n    conversationMessageDeliveryChannelEvent:\n      value:\n        app:\n          id: 5ebee0975ac5304b664a12fa\n        webhook:\n          id: 5f4eaef81e3dcc117c7ba48a\n          version: v2\n        events:\n          - id: 5f74a0d52b5315fc007e798a\n            createdAt: '2020-09-30T15:14:29.834Z'\n            type: conversation:message:delivery:channel\n            payload:\n              conversation:\n                id: f52b01137aa6c250bc7251fa\n                type: personal\n                activeSwitchboardIntegration:\n                  id: 5eecde2dcdbffb08f5c3ed37\n                  name: bot\n                  integrationId: 5f11a650e4e987667c2051d1\n                  integrationType: custom\n              user:\n                id: 26508c10541a4b0ff472e5e2\n                externalId: '912382197'\n              destination:\n                type: telegram\n                integrationId: 5ec69c6e12dda33be985cb1a\n              externalMessages:\n                - id: '371'\n              message:\n                id: 5f74a31c2b5315fc007e7997\n              isFinalEvent: true\n    conversationMessageDeliveryFailureEvent:\n      value:\n        app:\n          id: 5ebee0975ac5304b664a12fa\n        webhook:\n          id: 5f4eaef81e3dcc117c7ba48a\n          version: v2\n        events:\n          - id: 5f74a0d52b5315fc007e798a\n            createdAt: '2020-09-30T15:14:29.834Z'\n            type: conversation:message:delivery:failure\n            payload:\n              conversation:\n                id: f52b01137aa6c250bc7251fa\n                type: personal\n                activeSwitchboardIntegration:\n                  id: 5eecde2dcdbffb08f5c3ed37\n                  name: bot\n                  integrationId: 5f11a650e4e987667c2051d1\n                  integrationType: custom\n              user:\n                id: 26508c10541a4b0ff472e5e2\n                externalId: '912382197'\n              destination:\n                type: twilio\n                integrationId: 5ecc061987d4d413774a8131\n              message:\n                id: 5f74be6256be263abf0ffd5f\n              isFinalEvent: true\n              error:\n                code: uncategorized_error\n                message: Unsupported message type `form`\n    conversationMessageDeliveryUserEvent:\n      value:\n        app:\n          id: 5ebee0975ac5304b664a12fa\n        webhook:\n          id: 5f4eaef81e3dcc117c7ba48a\n          version: v2\n        events:\n          - id: 5f74a0d52b5315fc007e798a\n            createdAt: '2020-09-30T15:14:29.834Z'\n            type: conversation:message:delivery:user\n            payload:\n              conversation:\n                id: f52b01137aa6c250bc7251fa\n                type: personal\n                activeSwitchboardIntegration:\n                  id: 5eecde2dcdbffb08f5c3ed37\n                  name: bot\n                  integrationId: 5f11a650e4e987667c2051d1\n                  integrationType: custom\n              user:\n                id: 26508c10541a4b0ff472e5e2\n                externalId: '912382197'\n              destination:\n                type: twilio\n                integrationId: 5ecc061987d4d413774a8131\n              externalMessages:\n                - id: SM900c83b124b6467eb6db835a969d7374\n              message:\n                id: 5f74b82c56be263abf0ffd50\n              isFinalEvent: true\n    conversationMessageEvent:\n      value:\n        app:\n          id: 5ebee0975ac5304b664a12fa\n        webhook:\n          id: 5f4eaef81e3dcc117c7ba48a\n          version: v2\n        events:\n          - id: 5f74a0d52b5315fc007e798a\n            createdAt: '2020-09-30T15:14:29.834Z'\n            type: conversation:message\n            payload:\n              conversation:\n                id: f52b01137aa6c250bc7251fa\n                type: personal\n                activeSwitchboardIntegration:\n                  id: 5eecde2dcdbffb08f5c3ed37\n                  name: bot\n                  integrationId: 5f11a650e4e987667c2051d1\n                  integrationType: custom\n              message:\n                id: 5f74c7d84a146f3abd72af1d\n                received: '2020-09-30T18:00:56.820Z'\n                author:\n                  userId: 26508c10541a4b0ff472e5e2\n                  avatarUrl: https://s3.amazonaws.com/avatar.jpg\n                  displayName: Steve Rogers\n                  type: user\n                  user:\n                    id: 26508c10541a4b0ff472e5e2\n                    externalId: '912382197'\n                content:\n                  type: text\n                  text: hello\n                source:\n                  integrationId: 5ec69c6e12dda33be985cb1a\n                  originalMessageId: '374'\n                  originalMessageTimestamp: '2020-09-30T18:00:56.000Z'\n                  type: telegram\n    conversationPostbackEvent:\n      value:\n        app:\n          id: 5ebee0975ac5304b664a12fa\n        webhook:\n          id: 5f4eaef81e3dcc117c7ba48a\n          version: v2\n        events:\n          - id: 5f74a0d52b5315fc007e798a\n            createdAt: '2020-09-30T15:14:29.834Z'\n            type: conversation:postback\n            payload:\n              conversation:\n                id: f52b01137aa6c250bc7251fa\n                type: personal\n                activeSwitchboardIntegration:\n                  id: 5eecde2dcdbffb08f5c3ed37\n                  name: bot\n                  integrationId: 5f11a650e4e987667c2051d1\n                  integrationType: custom\n              postback:\n                payload: Greet\n              user:\n                id: 26508c10541a4b0ff472e5e2\n                externalId: '912382197'\n              source:\n                type: telegram\n                integrationId: 5ec69c6e12dda33be985cb1a\n    conversationReadEvent:\n      value:\n        app:\n          id: 5ebee0975ac5304b664a12fa\n        webhook:\n          id: 5f4eaef81e3dcc117c7ba48a\n          version: v2\n        events:\n          - id: 5f74a0d52b5315fc007e798a\n            createdAt: '2020-09-30T15:14:29.834Z'\n            type: conversation:read\n            payload:\n              conversation:\n                id: f52b01137aa6c250bc7251fa\n                type: personal\n                activeSwitchboardIntegration:\n                  id: 5eecde2dcdbffb08f5c3ed37\n                  name: bot\n                  integrationId: 5f11a650e4e987667c2051d1\n                  integrationType: custom\n              activity:\n                type: conversation:read\n                author:\n                  type: user\n                  userId: b5a0f8de1fd4198a96faa0af\n                  user:\n                    id: b5a0f8de1fd4198a96faa0af\n                source:\n                  type: web\n                  integrationId: 5ecff63ffc3ab25f4561c8a0\n    conversationTypingEvent:\n      value:\n        app:\n          id: 5ebee0975ac5304b664a12fa\n        webhook:\n          id: 5f4eaef81e3dcc117c7ba48a\n          version: v2\n        events:\n          - id: 5f74a0d52b5315fc007e798a\n            createdAt: '2020-09-30T15:14:29.834Z'\n            type: conversation:typing\n            payload:\n              conversation:\n                id: f52b01137aa6c250bc7251fa\n                type: personal\n                activeSwitchboardIntegration:\n                  id: 5eecde2dcdbffb08f5c3ed37\n                  name: bot\n                  integrationId: 5f11a650e4e987667c2051d1\n                  integrationType: custom\n              activity:\n                type: typing:start\n                author:\n                  type: user\n                  userId: 7283cdd6f586679a5fc43cfb\n                  user:\n                    id: 7283cdd6f586679a5fc43cfb\n                source:\n                  type: web\n                  integrationId: 5ecff63ffc3ab25f4561c8a0\n    switchboardAcceptControlEvent:\n      value:\n        app:\n          id: 5ebee0975ac5304b664a12fa\n        webhook:\n          id: 5f4eaef81e3dcc117c7ba48a\n          version: v2\n        events:\n          - id: 5f74a0d52b5315fc007e798a\n            createdAt: '2020-09-30T15:14:29.834Z'\n            type: switchboard:acceptControl\n            payload:\n              conversation:\n                id: f52b01137aa6c250bc7251fa\n                type: personal\n                activeSwitchboardIntegration:\n                  id: 5eecde2dcdbffb08f5c3ed37\n                  name: bot\n                  integrationId: 5f11a650e4e987667c2051d1\n                  integrationType: custom\n    switchboardAcceptControlFailureEvent:\n      value:\n        app:\n          id: 5ebee0975ac5304b664a12fa\n        webhook:\n          id: 5f4eaef81e3dcc117c7ba48a\n          version: v2\n        events:\n          - id: 5f74a0d52b5315fc007e798a\n            createdAt: '2020-09-30T15:14:29.834Z'\n            type: switchboard:acceptControl:failure\n            payload:\n              conversation:\n                id: f52b01137aa6c250bc7251fa\n                type: personal\n                activeSwitchboardIntegration:\n                  id: 5eecde2dcdbffb08f5c3ed37\n                  name: bot\n                  integrationId: 5f11a650e4e987667c2051d1\n                  integrationType: custom\n              error:\n                code: switchboard_invalid_action\n                message: There is no pendingSwitchboardIntegration\n    switchboardOfferControlEvent:\n      value:\n        app:\n          id: 5ebee0975ac5304b664a12fa\n        webhook:\n          id: 5f4eaef81e3dcc117c7ba48a\n          version: v2\n        events:\n          - id: 5f74a0d52b5315fc007e798a\n            createdAt: '2020-09-30T15:14:29.834Z'\n            type: switchboard:offerControl\n            payload:\n              conversation:\n                id: f52b01137aa6c250bc7251fa\n                type: personal\n                activeSwitchboardIntegration:\n                  id: 5eecde2dcdbffb08f5c3ed37\n                  name: bot\n                  integrationId: 5f11a650e4e987667c2051d1\n                  integrationType: custom\n                pendingSwitchboardIntegration:\n                  id: 5eece1cacdbffb08f5c3ed43\n                  name: human\n                  integrationId: 5f11a65ae4e987667c2051d2\n                  integrationType: custom\n    switchboardOfferControlFailureEvent:\n      value:\n        app:\n          id: 5ebee0975ac5304b664a12fa\n        webhook:\n          id: 5f4eaef81e3dcc117c7ba48a\n          version: v2\n        events:\n          - id: 5f74a0d52b5315fc007e798a\n            createdAt: '2020-09-30T15:14:29.834Z'\n            type: switchboard:offerControl:failure\n            payload:\n              conversation:\n                id: f52b01137aa6c250bc7251fa\n                type: personal\n                activeSwitchboardIntegration:\n                  id: 5eecde2dcdbffb08f5c3ed37\n                  name: bot\n                  integrationId: 5f11a650e4e987667c2051d1\n                  integrationType: custom\n              error:\n                code: switchboard_invalid_target\n                message: Cannot offer control to the active switchboard integration.\n    switchboardPassControlEvent:\n      value:\n        app:\n          id: 5ebee0975ac5304b664a12fa\n        webhook:\n          id: 5f4eaef81e3dcc117c7ba48a\n          version: v2\n        events:\n          - id: 5f74a0d52b5315fc007e798a\n            createdAt: '2020-09-30T15:14:29.834Z'\n            type: switchboard:passControl\n            payload:\n              conversation:\n                id: f52b01137aa6c250bc7251fa\n                type: personal\n                activeSwitchboardIntegration:\n                  id: 5eecde2dcdbffb08f5c3ed37\n                  name: bot\n                  integrationId: 5f11a650e4e987667c2051d1\n                  integrationType: custom\n    switchboardPassControlFailureEvent:\n      value:\n        app:\n          id: 5ebee0975ac5304b664a12fa\n        webhook:\n          id: 5f4eaef81e3dcc117c7ba48a\n          version: v2\n        events:\n          - id: 5f74a0d52b5315fc007e798a\n            createdAt: '2020-09-30T15:14:29.834Z'\n            type: switchboard:passControl:failure\n            payload:\n              conversation:\n                id: f52b01137aa6c250bc7251fa\n                type: personal\n                activeSwitchboardIntegration:\n                  id: 5eecde2dcdbffb08f5c3ed37\n                  name: bot\n                  integrationId: 5f11a650e4e987667c2051d1\n                  integrationType: custom\n              error:\n                code: switchboard_invalid_target\n                message: Switchboard invalid target\n    userMergeEvent:\n      value:\n        app:\n          id: 5ebee0975ac5304b664a12fa\n        webhook:\n          id: 5f4eaef81e3dcc117c7ba48a\n          version: v2\n        events:\n          - id: 5f74a0d52b5315fc007e798a\n            createdAt: '2020-09-30T15:14:29.834Z'\n            type: user:merge\n            payload:\n              mergedUsers:\n                surviving:\n                  id: 26508c10541a4b0ff472e5e2\n                  externalId: '912382197'\n                discarded:\n                  id: 1a64f7f75028fef55f815007\n                  externalId: '912382198'\n              reason: api\n    userUpdateEvent:\n      value:\n        app:\n          id: 5ebee0975ac5304b664a12fa\n        webhook:\n          id: 5f4eaef81e3dcc117c7ba48a\n          version: v2\n        events:\n          - id: 5f74a0d52b5315fc007e798a\n            createdAt: '2020-09-30T15:14:29.834Z'\n            type: user:update\n            payload:\n              user:\n                id: 26508c10541a4b0ff472e5e2\n                externalId: 9128asd219s7\n              reason: authentication\n              source:\n                type: web\n                integrationId: 5ecff63ffc3ab25f4561c8a0\nsecurity:\n  - bearerAuth:\n      - app\n      - account\n  - basicAuth:\n      - app\n      - account\n",
			"canonicalURL": "/github.com/zendesk/sunshine-conversations-api-spec@da7a223bc37c15f1b0d85d6f1ba5d273c9cd8884/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/zendesk/sunshine-conversations-api-spec/blob/da7a223bc37c15f1b0d85d6f1ba5d273c9cd8884/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"switchboardIntegrationCreateBody\": parse schema: property \"deliverStandbyEvents\": at 1:121952: parse default: unexpected type: \"\""
}