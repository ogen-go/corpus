{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/GetJenny/starchat"
		},
		"file": {
			"name": "starchat-swagger.yaml",
			"size": 0,
			"path": "doc/starchat-swagger.yaml",
			"byteSize": 202926,
			"content": "openapi: 3.0.3\nservers:\n  - url: 'https://virtserver.swaggerhub.com/angleto/StarChat/v5.3'\ninfo:\n  description: An Open Source, scalable conversational engine for B2B applications. You can find\n    out more about StarChat at [starchat.ai](http://starchat.ai) or on\n    [github GetJenny/starchat](https://github.com/GetJenny/starchat).\n  version: \"v5.3\"\n  title: StarChat APIs\n  contact:\n    email: angelo@getjenny.com\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: default\n    description: non secured endpoints\n  - name: admin\n    description: Secured Admin-only endpoints\n  - name: customer\n    description: \"Operations available to customer: the permissions are assigned to the user by the system administrator and some operation could not be available if only a specific subset of permissions is granted.\"\npaths:\n  /:\n    get:\n      summary: health check\n      operationId: health_check\n      description: respond if is healty\n      responses:\n        '200':\n          description: the system is up and running\n    post:\n      tags:\n        - admin\n      summary: health check with versioning\n      operationId: health_check_versions\n      description: respond with the versions informations\n      responses:\n        '200':\n          description: the system is up and running\n  '/{index_name}/analyzer/playground':\n    post:\n      tags:\n        - customer\n      summary: test endpoint for analyzers\n      operationId: post_analyzers_playground\n      description: \u003e-\n        compile and evaluate an analyzers on the fly\n        The index must exists.\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: analyzer successfully evaluated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnalyzerEvaluateResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n        '409':\n          description: the document already exists\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnalyzerEvaluateRequest'\n        description: Item to add\n  '/{index_name}/index_management/create':\n    post:\n      tags:\n        - admin\n      summary: enable an instance to access to the specific language index\n      operationId: post_index_management_create\n      description: \"add instance to the instance registry for the specific indexName\"\n      parameters:\n        - in: path\n          name: index_name\n          description: \"the name of the index: it must have the following format index_\u003corganization\u003e_\u003clanguage\u003e_\u003carbitrary suffix\u003e e.g. index_getjenny_italian_usecase0\"\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: instance successfully created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexManagementResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/index_management/enable':\n    post:\n      tags:\n        - admin\n      summary: enable an instance\n      operationId: post_index_management_enable\n      description: \"set the enabled flag to true in the instance registry\"\n      parameters:\n        - in: path\n          name: index_name\n          description: \"the name of the index: it must have the following format index_\u003corganization\u003e_\u003clanguage\u003e_\u003carbitrary suffix\u003e e.g. index_getjenny_italian_usecase0\"\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: instance successfully enabled\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexManagementResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/index_management/disable':\n    post:\n      tags:\n        - admin\n      summary: disable an instance\n      operationId: post_index_management_disable\n      description: \"set the enabled flag to false in the instance registry\"\n      parameters:\n        - in: path\n          name: index_name\n          description: \"the name of the index: it must have the following format index_\u003corganization\u003e_\u003clanguage\u003e_\u003carbitrary suffix\u003e e.g. index_getjenny_italian_usecase0\"\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: instance successfully disabled\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexManagementResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/index_management':\n    delete:\n      tags:\n        - admin\n      summary: mark for delete an instance\n      operationId: delete_index_management\n      description: \"set the delete flag to true in the instance registry\"\n      parameters:\n        - in: path\n          name: index_name\n          description: \"the name of the index: it must have the following format index_\u003corganization\u003e_\u003clanguage\u003e_\u003carbitrary suffix\u003e e.g. index_getjenny_italian_usecase0\"\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: instance successfully mark for deletion\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexManagementResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n    get:\n      tags:\n        - admin\n      summary: get status informations about instance\n      operationId: get_index_management\n      description: \"get status informations about the instance\"\n      parameters:\n        - in: path\n          name: index_name\n          description: \"the name of the index: it must have the following format index_\u003corganization\u003e_\u003clanguage\u003e_\u003carbitrary suffix\u003e e.g. index_getjenny_italian_usecase0\"\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: instance read succes\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexManagementStatusResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/language_index_management':\n    post:\n      tags:\n        - admin\n      summary: create new language specific starchat index set\n      operationId: post_language_index_management\n      description: \"create the language specific starchat indexes, these indexes must be crested after the system\n                    indexes and are required to create the instance indexes.\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateLanguageIndexRequest'\n        description: \"Index list to create, every index must have the following format index_\u003clanguage\u003e e.g. index_italian,\n               if not evaluated, it will create all language indexes in configuration\"\n      responses:\n        '201':\n          description: index successfully created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexManagementResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n    get:\n      tags:\n        - admin\n      summary: get the status of the starchat language specific indices\n      operationId: get_language_index_management\n      description: query and return the status of the starchat indices\n      parameters:\n        - in: query\n          name: index_name\n          description: \"the name of the index: it must have the following format index_\u003clanguage\u003e e.g. index_italian\"\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: indexSuffix\n          description: \u003e-\n            the index suffix, if not specified the status for all the instance related tables will be retrieved. The suffixes can be specified in the configuration file, by default they can be -\u003e logs_data, prior_data, question_answer, state, term\n          example: state\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: information containing status of indicies\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexManagementResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n    delete:\n      tags:\n        - admin\n      summary: delete a starchat language specific index\n      operationId: delete_language_index_management\n      description: \u003e-\n        delete all the starchat tables and all the data, the operation must be\n        explicitly allowed from the configuration file\n      parameters:\n        - in: query\n          name: index_name\n          description: \"the name of the index: it must have the following format index_\u003clanguage\u003e e.g. index_italian\"\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: indexSuffix\n          description: \u003e-\n            the index suffix, if not specified the status all the instance related tables will be deleted. The suffixes can be specified in the configuration file, by default they can be -\u003e logs_data, prior_data, question_answer, state, term\n          example: state\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: request successfully processed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexManagementResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/language_index_management/open':\n    post:\n      tags:\n        - admin\n      summary: open a starchat index\n      operationId: post_language_index_management_open\n      description: open a index, write operations on schemas and data are permitted\n      parameters:\n        - in: query\n          name: index_name\n          description: \"the name of the index: it must have the following format index_\u003clanguage\u003e e.g. index_italian\"\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: indexSuffix\n          description: the index suffix, if not specified all the instance related tables will be open\n          example: action\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: index successfully open\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexManagementResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/language_index_management/close':\n    post:\n      tags:\n        - admin\n      summary: close an index\n      operationId: post_language_index_management_close\n      description: open a starchat system index, write operations on schemas and data are permitted\n      parameters:\n        - in: query\n          name: index_name\n          description: \"the name of the index: it must have the following format index_\u003clanguage\u003e e.g. index_italian\"\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: indexSuffix\n          description: the index suffix, if not specified all the instance related tables will be closed\n          example: action\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: index successfully closed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexManagementResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/language_index_management/refresh':\n    post:\n      tags:\n        - admin\n      summary: refresh the starchat indices\n      operationId: post_language_index_management_refresh\n      description: refresh starchat indices\n      parameters:\n        - in: query\n          name: index_name\n          description: \"the name of the index: it must have the following format index_\u003clanguage\u003e e.g. index_italian\"\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: indexSuffix\n          description: the index suffix, if not specified all the instance related tables will be refreshed\n          example: action\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: index successfully refreshed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RefreshIndexResults'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/language_index_management/mappings':\n    put:\n      tags:\n        - admin\n      summary: update starchat indices mappings\n      operationId: put_language_index_management_mappings\n      description: update the mappings for the starchat indices\n      parameters:\n        - in: query\n          name: index_name\n          description: \"the name of the index: it must have the following format index_\u003clanguage\u003e e.g. index_italian\"\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: indexSuffix\n          description: the index suffix, if not specified all the instance related tables will be updated\n          example: action\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: request successfully processed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexManagementResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/language_index_management/settings':\n    put:\n      tags:\n        - admin\n      summary: update the settings for the starchat indices\n      operationId: put_language_index_management_settings\n      description: update the starchat indices settings\n      parameters:\n        - in: query\n          name: index_name\n          description: \"the name of the index: it must have the following format index_\u003clanguage\u003e e.g. index_italian\"\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: indexSuffix\n          description: the index suffix, if not specified all the instance related tables will be updated\n          example: action\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: request successfully processed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexManagementResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  /system_index_management:\n    get:\n      tags:\n        - admin\n      summary: get the status of the system indices\n      operationId: get_status_system_indices\n      description: query and return the status of the system indices\n      responses:\n        '200':\n          description: list of indices\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexManagementResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n    delete:\n      tags:\n        - admin\n      summary: delete the system indices\n      operationId: delete_system_indices\n      description: \u003e-\n        delete all the system indices and all the data, the operation must be\n        explicitly allowed from the configuration file\n      parameters:\n        - in: query\n          name: indexSuffix\n          description: \u003e-\n            the index suffix, if not specified the system indices will be deleted.\n            The suffixes can be specified in the configuration file,\n            by default they can be: user, refresh_decisiontable, cluster_nodes, decision_table_node_status\n          example: user\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: request successfully processed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexManagementResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/system_index_management/mappings':\n    put:\n      tags:\n        - admin\n      summary: update the mappings for the system indices\n      operationId: put_system_index_management_mappings\n      description: update the ES mapping for the system indices\n      parameters:\n        - in: query\n          name: indexSuffix\n          description: \u003e-\n            the index suffix, if not specified the system indices will be deleted.\n            The suffixes can be specified in the configuration file,\n            by default they can be: user, refresh_decisiontable, cluster_nodes, decision_table_node_status\n          example: user\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: request successfully processed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexManagementResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/system_index_management/settings':\n    put:\n      tags:\n        - admin\n      summary: update the settings for the system indices\n      operationId: put_system_index_management_settings\n      description: update the ES settings for the system indices\n      parameters:\n        - in: query\n          name: indexSuffix\n          description: \u003e-\n            the index suffix, if not specified the system indices will be deleted.\n            The suffixes can be specified in the configuration file,\n            by default they can be: user, refresh_decisiontable, cluster_nodes, decision_table_node_status\n          example: user\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: request successfully processed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexManagementResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/system_index_management/create':\n    post:\n      tags:\n        - admin\n      summary: create the system indices\n      operationId: post_system_index_management_create\n      description: create all the system tables\n      parameters:\n        - in: query\n          name: indexSuffix\n          description: \u003e-\n            the index suffix, if not specified the system indices will be deleted.\n            The suffixes can be specified in the configuration file,\n            by default they can be: user, refresh_decisiontable, cluster_nodes, decision_table_node_status\n          example: user\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '201':\n          description: index successfully created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexManagementResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/system_index_management/refresh':\n    post:\n      tags:\n        - admin\n      summary: refresh the system indices\n      operationId: post_system_index_management_refresh\n      description: refresh all the system tables\n      parameters:\n        - in: query\n          name: indexSuffix\n          description: \u003e-\n            the index suffix, if not specified the system indices will be deleted.\n            The suffixes can be specified in the configuration file,\n            by default they can be: user, refresh_decisiontable, cluster_nodes, decision_table_node_status\n          example: user\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: index successfully refreshed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RefreshIndexResults'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/system_index_management/open':\n    post:\n      tags:\n        - admin\n      summary: open a starchat system index\n      operationId: post_system_index_management_open\n      description: open a starchat index, write operations on schemas and data are permitted\n      parameters:\n        - in: query\n          name: indexSuffix\n          description: \u003e-\n            the index suffix, if not specified the system indices will be deleted.\n            The suffixes can be specified in the configuration file,\n            by default they can be: user, refresh_decisiontable, cluster_nodes, decision_table_node_status\n          example: user\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: index successfully open\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexManagementResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/system_index_management/close':\n    post:\n      tags:\n        - admin\n      summary: close a starchat system index\n      operationId: post_system_index_management_close\n      description: close a starchat system index, write operations on schemas and data are not permitted\n      parameters:\n        - in: query\n          name: indexSuffix\n          description: \u003e-\n            the index suffix, if not specified the system indices will be deleted.\n            The suffixes can be specified in the configuration file,\n            by default they can be: user, refresh_decisiontable, cluster_nodes, decision_table_node_status\n          example: user\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: index successfully open\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexManagementResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/system_indices':\n    get:\n      tags:\n        - admin\n      summary: get the list of indices\n      operationId: get_all_indices\n      description: get the complete list of indices\n      responses:\n        '200':\n          description: list of indices\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListOfIndices'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/user':\n    post:\n      tags:\n        - admin\n      summary: add a new system user\n      operationId: add_system_user\n      description: Adds a system user\n      responses:\n        '201':\n          description: document created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexDocumentResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n        '409':\n          description: the document already exists\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: User to add\n  '/user/{id}':\n    put:\n      tags:\n        - admin\n      summary: update a system user\n      operationId: update_system_user\n      description: update an existing system user\n      parameters:\n        - in: path\n          name: id\n          description: id of the user to update\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: the document was updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateDocumentResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserUpdate'\n        description: Item to be updated\n  '/user/get':\n    post:\n      tags:\n        - admin\n      summary: retrieve system users\n      operationId: get_system_user\n      description: |\n        retrieve a system user\n      responses:\n        '200':\n          description: request succesfully processed\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserId'\n        description: user id\n  '/user/delete':\n    post:\n      tags:\n        - admin\n      summary: delete system user\n      operationId: delete_system_user\n      description: |\n        delete a system user\n      responses:\n        '200':\n          description: the document was deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteDocumentResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserId'\n        description: user id\n  '/user/generate':\n    post:\n      tags:\n        - admin\n      summary: generate a user record\n      operationId: gen_system_user\n      description: \u003e-\n        generate a system user from username, password and permissions, it\n        return a user data structure with salted hashed password and which can be added to the users.\n      responses:\n        '200':\n          description: request succesfully processed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserUpdate'\n        description: \u003e-\n          User data, at least the id and a clear text password and permissions should be\n          specified\n  '/cluster_node':\n    get:\n      tags:\n        - admin\n      summary: retrieve informations about cluster nodes\n      operationId: get_alive_nodes\n      description: \u003e-\n        retrieve all the alive nodes of the cluster\n      responses:\n        '200':\n          description: request succesfully processed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClusterNodes'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n    post:\n      tags:\n        - admin\n      summary: set information about cluster nodes\n      operationId: post_cluster_node\n      description: set the alive timestamp for the node (automatically done by a starchat cron job)\n      responses:\n        '200':\n          description: request succesfully processed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClusterNode'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n    delete:\n      tags:\n        - admin\n      summary: remove dead nodes from the list of available nodes (automatically done by a starchat cron job)\n      operationId: delete_cluster_node\n      description: remove from the alive nodes list those nodes with a too old timestamp\n      responses:\n        '200':\n          description: request succesfully processed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClusterNode'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/cluster_node/{uuid}':\n    get:\n      tags:\n        - admin\n      summary: retrieve informations about a cluster node\n      operationId: get_cluster_node_uuid\n      description: retrieve informations about a cluster node\n      parameters:\n        - in: path\n          name: uuid\n          description: \"cluster node id\"\n          required: true\n          schema:\n            type: string\n          example: \"bcd19c7c-cd0e-4210-b705-84d2d6483caa\"\n      responses:\n        '200':\n          description: request succesfully processed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClusterNode'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/node_dt_update':\n    get:\n      tags:\n        - admin\n      summary: retrieve the dt loading status of a node\n      operationId: get_node_dt_update\n      description: \u003e-\n        calculate if all the decision tables of the cluster were loaded by the node,\n        can be used as an Health Check on start-up before the registration of a new node on the load balancer\n      parameters:\n        - in: query\n          name: verbose\n          description: when set to true the list of indices is returned\n          required: false\n          schema:\n            type: boolean\n        - in: query\n          name: strict\n          description: if true return 400 if the test fail\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: request succesfully processed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodeLoadingAllDtStatus'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: \u003e-\n            authorization denied or authentication failed\n    post:\n      tags:\n        - admin\n      summary: set informations about the decision table update operations performed by a cluster node\n      operationId: post_node_dt_update\n      description: set the alive timestamp for the node (automatically done when triggering a decision table reloading)\n      responses:\n        '200':\n          description: request succesfully processed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClusterNode'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NodeDtLoadingStatus'\n        description: informations to be registered for the given decision table, and cluster node\n    delete:\n      tags:\n        - admin\n      summary: delete decision table loading records for dead nodex (automatically done by a starchat cron job)\n      operationId: delete_node_dt_update\n      description: remove from the alive nodes list those nodes with a too old timestamp\n      responses:\n        '200':\n          description: request succesfully processed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteDocumentsSummaryResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/node_dt_update':\n    get:\n      tags:\n        - customer\n      summary: test if an index is up to date on all the cluster nodes\n      operationId: get_idx_node_dt_update\n      description: \u003e-\n        retrieve the status of the loading process of a decision table on all the starchat's cluster nodes.\n        The index must exists and the customer has write permissions on it.\n      parameters:\n        - in: path\n          name: index_name\n          description: \"index name\"\n          required: true\n          schema:\n            type: string\n          example: \"index_getjenny_english_usecase0\"\n        - in: query\n          name: strict\n          description: if true return 400 if the test fail\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: request succesfully processed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClusterLoadingDtStatusIndex'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/get_next_response':\n    post:\n      tags:\n        - customer\n      summary: conversation endpoint\n      operationId: post_get_next_response\n      description: ask to starchat for a response . The index must exists and the customer has write permissions on it.\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseRequestOutOperationResult'\n        '204':\n          description: 'no content: not response could be provided'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n        '202':\n          description: an explicitly rewuested state was not found\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ResponseRequestIn'\n        description: DecisionTable entry to create\n  '/{index_name}/decisiontable':\n    post:\n      tags:\n        - customer\n      summary: insert a document in the DecisionTable\n      operationId: post_decisiontable\n      description: insert a document in the DecisionTable. The index must exists and the customer has write permissions on it.\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: refresh\n          description: \u003e-\n            if `true` StarChat trigger an index refresh and return without waiting,\n            if `false` doesn't trigger a refresh,\n            if `wait_for` trigger a refresh and wait for the completion of the refresh operation\n            (default is `false`)\n          required: false\n          schema:\n            type: string\n      responses:\n        '201':\n          description: item created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexDocumentResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DTDocument'\n        description: DecisionTable entry to create\n    put:\n      tags:\n        - customer\n      summary: update a document in the DecisionTable\n      operationId: put_decisiontable\n      description: update a document in the DecisionTable. The index must exists and the customer has write permissions on it.\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: refresh\n          description: \u003e-\n            if `true` StarChat trigger an index refresh and return without waiting,\n            if `false` doesn't trigger a refresh,\n            if `wait_for` trigger a refresh and wait for the completion of the refresh operation\n            (default is `false`)\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: item updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateDocumentResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DTDocumentUpdate'\n        description: DecisionTable entry to create\n    get:\n      tags:\n        - customer\n      summary: get one or more entries from the DecisionTable\n      operationId: get_decisiontable\n      description: get documents from the DecisionTable. The index must exists and the customer has read permissions on it.\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: query\n          description: IDs of the items to fetch, required if dump is not specified\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n        - name: dump\n          in: query\n          description: dump the whole decision table, required if id is not specified\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchDTDocumentsResults'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n    delete:\n      tags:\n        - customer\n      deprecated: true\n      summary: delete one or more entries from the DecisionTable\n      operationId: delete_decisiontable_ids\n      description: delete documents from the DecisionTable. The index must exists and the customer has write permissions on it.\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: query\n          description: \u003e-\n            IDs of the items to delete\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: refresh\n          description: \u003e-\n            if `true` StarChat trigger an index refresh and return without waiting,\n            if `false` doesn't trigger a refresh,\n            if `wait_for` trigger a refresh and wait for the completion of the refresh operation\n            (default is `false`)\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteDocumentsResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/decisiontable/delete':\n    post:\n      tags:\n        - customer\n      operationId: post_decisiontable_bulk_delete\n      summary: delete one or more entries from the DecisionTable\n      description: delete documents from the DecisionTable. The index must exists and the customer has write permissions on it.\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: refresh\n          description: \u003e-\n            if `true` StarChat trigger an index refresh and return without waiting,\n            if `false` doesn't trigger a refresh,\n            if `wait_for` trigger a refresh and wait for the completion of the refresh operation\n            (default is `wait_for`)\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocsIds'\n            example: {'ids': ['id1', 'id2']}\n        description: Documents to delete\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteDocumentsResult'\n              example: {\n                \"data\": [\n                {\n                  \"index\": \"index_getjenny_english_usecase0\",\n                  \"id\": \"id1\",\n                  \"version\": 1,\n                  \"found\": true\n                },\n                {\n                  \"index\": \"index_getjenny_english_usecase0\",\n                  \"id\": \"id2\",\n                  \"version\": 1,\n                  \"found\": true\n                }\n                ]\n              }\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/decisiontable/all':\n    delete:\n      tags:\n        - customer\n      summary: delete all entries from the DecisionTable\n      operationId: delete_decisiontable_all\n      description: delete all documents from the DecisionTable. The index must exists and the customer has write permissions on it.\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: refresh\n          description: \u003e-\n            if `true` StarChat trigger an index refresh and return without waiting,\n            if `false` doesn't trigger a refresh,\n            if `wait_for` trigger a refresh and wait for the completion of the refresh operation\n            (default is `wait_for`)\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteDocumentsSummaryResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/decisiontable/search':\n    post:\n      tags:\n        - customer\n      summary: search items on DecisionTable\n      operationId: post_decisiontable_search\n      description: search documents from the DecisionTable. The index must exists and the customer has read permissions on it.\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchDTDocumentsResults'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DTDocumentSearch'\n        description: DecisionTable document with the query parameters\n  '/{src_index_name}/decisiontable/clone/{dst_index_name}':\n    post:\n      tags:\n        - customer\n      operationId: post_decisiontable_clone_index\n      summary: Clone a index\n      description: \u003e-\n        Clone a index content into another index, the destination index is cleaned\n      parameters:\n        - in: path\n          name: src_index_name\n          description: name of the index to be cloned\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: dst_index_name\n          description: name of the destination index\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: reset\n          description: reset the destination index before cloning the data\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - in: query\n          name: propagate\n          description: trigger the update propagation by setting the update timestamp\n          required: false\n          schema:\n            type: boolean\n            default: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReindexResult'\n        '400':\n          description: 'invalid input, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/decisiontable/bulk':\n    post:\n      tags:\n        - customer\n      operationId: post_decisiontable_bulk_upload_multi_create\n      summary: Bulk creation\n      deprecated: true\n      description: \u003e-\n        bulk create operation, this is deprecated, use `/{index_name}/decisiontable/bulk/create`\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: refresh\n          description: \u003e-\n            if `true` StarChat trigger an index refresh and return without waiting,\n            if `false` doesn't trigger a refresh,\n            if `wait_for` trigger a refresh and wait for the completion of the refresh operation\n            (default is `wait_for`)\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/DTDocument'\n        description: The array of states to create.\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexDocumentListResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/decisiontable/bulk/create':\n    post:\n      tags:\n        - customer\n      operationId: post_decisiontable_bulk_create\n      summary: Bulk creation\n      description: \u003e-\n        bulk create operation\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: refresh\n          description: \u003e-\n            if `true` StarChat trigger an index refresh and return without waiting,\n            if `false` doesn't trigger a refresh,\n            if `wait_for` trigger a refresh and wait for the completion of the refresh operation\n            (default is `wait_for`)\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/DTDocument'\n        description: The array of states to create.\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexDocumentListResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/decisiontable/upload/{format}':\n    post:\n      tags:\n        - customer\n      operationId: post_decisiontable_upload\n      summary: Uploads a file on the decision table\n      description: \u003e-\n        Uploads a file on the decision table, the file must have an header\n        with the name of the DTDocument entries\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: format\n          description: 'the file format, supported only: csv or json (json dump format)'\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                csv:\n                  type: string\n                  format: binary\n        description: The file to upload.\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexDocumentListResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/decisiontable/analyzer/async':\n    post:\n      tags:\n        - customer\n      summary: trigger an asyncronous update of the DecisionTable\n      operationId: post_decisiontable_analyzer_async\n      description: trigger an asyncronous update of the in-memory runtime DecisionTable\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      responses:\n        '202':\n          description: request accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DtReloadTimestamp'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/decisiontable/analyzer':\n    post:\n      tags:\n        - customer\n      summary: trigger an update of the DecisionTable\n      operationId: post_decisiontable_analyzer\n      description: trigger an update of the in-memory runtime DecisionTable\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: propagate\n          description: trigger the update propagation by setting the update timestamp\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - in: query\n          name: incremental\n          description: execute an incremental update insteand of compiling all the analyzers, default is true\n          schema:\n            type: boolean\n          required: false\n      responses:\n        '200':\n          description: request successfully executed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DTAnalyzerLoad'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n    get:\n      tags:\n        - customer\n      summary: return the runtime list of analyzers\n      operationId: get_decisiontable_analyzer\n      description: \"collect and return the list of in memory, compiled analyzers for a given index\"\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: request accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DTAnalyzerMap'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/decisiontable/bayescache/async':\n    post:\n      tags:\n        - customer\n      summary: trigger an async update of the bayes operator cache\n      operationId: post_decisiontable_bayescache_async\n      description: trigger an async update of the bayes operator cache\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: request successfully executed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BayesOperatorCacheServiceResponse'\n        '400':\n          description: 'bad request - error during loading execution'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BayesOperatorCacheServiceResponse'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/decisiontable/bayescache':\n    post:\n      tags:\n        - customer\n      summary: trigger update of the bayes operator cache\n      operationId: post_decisiontable_bayescache\n      description: trigger an update of the bayes operator cache\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: request successfully executed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BayesOperatorCacheServiceResponse'\n        '400':\n          description: 'bad request - error during loading execution'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BayesOperatorCacheServiceResponse'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/spellcheck/terms':\n    post:\n      tags:\n        - customer\n      summary: spellchecker a sentence\n      operationId: post_spellcheck\n      description: execute the spellchecker on a sentence and returns the suggestion for each token\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: request successfully executed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SpellcheckTermsResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SpellcheckTermsRequest'\n        description: Spellcheck request\n  '/{index_name}/spellcheck2/terms':\n    post:\n      tags:\n        - customer\n      summary: spellchecker a sentence taking ngram frequencies into account\n      operationId: post_spellcheck2\n      description: execute the spellchecker on a sentence and returns the suggestion for each token\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: request successfully executed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SpellcheckTermsResponse2'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SpellcheckTermsRequest2'\n        description: Spellcheck request\n  '/{index_name}/language_guesser':\n    post:\n      tags:\n        - customer\n      summary: guess the language of a sentence\n      operationId: post_language_guesser\n      description: guess the language out from a sentence\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: request successfully executed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LanguageGuesserRequestOut'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LanguageGuesserRequestIn'\n        description: Language guesser request\n  '/{index_name}/language_guesser/{language}':\n    get:\n      tags:\n        - customer\n      summary: check if a language is supported by the guesser\n      operationId: get_language_guesser_language\n      description: ask StarChat if a language is supported or not by the guesser\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: language\n          description: language to be checked (an ISO 639-1 code)\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: request successfully executed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LanguageGuesserInformations'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/tokenizers':\n    post:\n      tags:\n        - customer\n      summary: tokenize a text\n      operationId: post_tokenizers\n      description: transform a text into an array of tokeks, allow to choose between different tokenizers\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: request successfully executed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenizerResponse'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TokenizerQueryRequest'\n        description: Tokenizer request\n    get:\n      tags:\n        - customer\n      summary: retrieve the supported tokenizers\n      operationId: get_tokenizers\n      description: retrieve the list of tokenizers supported by StarChat\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: request successfully executed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenizersSet'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/stream/term':\n    get:\n      tags:\n        - customer\n      summary: get all terms as http stream\n      operationId: get_stream_term\n      description: get all the terms from a terms table\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: request successfully executed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Term'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/term/index':\n    post:\n      tags:\n        - customer\n      summary: index terms\n      operationId: post_term_index\n      description: index terms\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: request successfully executed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexDocumentListResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Terms'\n        description: Terms to index\n  '/{index_name}/term/distance':\n    post:\n      tags:\n        - customer\n      summary: distance betwen terms\n      operationId: post_term_distance\n      description: calculate the distance between terms\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: request successfully executed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListTermsDistanceRes'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocsIds'\n            example: {'ids': ['hello', 'hi']}\n        description: Documents to compare\n  '/{index_name}/term/index_default_synonyms':\n    post:\n      tags:\n        - customer\n      summary: index default synonyms set\n      operationId: post_term_index_default_synonyms\n      description: index the default synonyms set\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: request successfully executed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateDocumentsResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/term/index_synonyms':\n    post:\n      tags:\n        - customer\n      operationId: post_term_index_synonyms_csv\n      summary: \"Uploads a set of synonyms on a term table\"\n      description: \"Uploads a set of synonyms on a term table: (a csv with columns type,term,associatedTerms)\"\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                csv:\n                  type: string\n                  format: binary\n        description: The file to upload.\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateDocumentsResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/term/get':\n    post:\n      tags:\n        - customer\n      operationId: post_term_get\n      summary: \"retrieve terms\"\n      description: \"retrieve a list of terms from the terms table\"\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocsIds'\n            example: {'ids': ['hello']}\n        description: Documents to get\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Terms'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/term/delete':\n    post:\n      tags:\n        - customer\n      operationId: post_term_delete\n      summary: \"delete terms\"\n      description: \"delete a list of terms from the terms table, if the ids list is empty will delete all terms\"\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocsIds'\n            example: {'ids': ['hello']}\n        description: Documents to get\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteDocumentsResult'\n              example: {\n                \"data\": [\n                {\n                  \"index\": \"index_getjenny_english_usecase0\",\n                  \"id\": \"hello\",\n                  \"version\": 1,\n                  \"found\": true\n                }\n                ]\n              }\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/term':\n    put:\n      tags:\n        - customer\n      operationId: put_term\n      summary: \"update terms\"\n      description: \"update term documents\"\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Terms'\n        description: Documents to update\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateDocumentsResult'\n              example: {\n                \"data\": [\n                {\n                  \"index\": \"index_getjenny_english_usecase0\",\n                  \"id\": \"hello\",\n                  \"version\": 3,\n                  \"found\": true\n                }\n                ]\n              }\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/term/term':\n    post:\n      tags:\n        - customer\n      operationId: post_term_term\n      summary: \"search terms\"\n      description: \"search terms using single token query\"\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchTerm'\n        description: term query\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TermsResults'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/term/text':\n    post:\n      tags:\n        - customer\n      operationId: post_term_text\n      summary: \"search terms\"\n      description: \"search all terms of a text\"\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: analyzer\n          description: \"the tokenizer to use (see TokenizersSet data structure for the available tokenizers)\"\n          required: false\n          example: \"space_punctuation\"\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n              example: hello, this is my query\n        description: term query\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TermsResults'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/extraction/frequencies':\n    post:\n      tags:\n        - customer\n      operationId: post_extraction_frequencies\n      summary: \"frequency stats extraction from text\"\n      description: \"extract terms frequencies stats from a text\"\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TermsExtractionRequest'\n        description: Terms extraction request with text\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenFrequency'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/extraction/keywords':\n    post:\n      tags:\n        - customer\n      operationId: post_extraction_keywords\n      summary: \"extract keywords\"\n      description: \"extract keywords from a text\"\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TermsExtractionRequest'\n        description: Terms extraction request\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: number\n                  format: double\n                  description: the keyword extraction score, index is the term\n                example: {\"morning\": 0.3, \"question\": 0.6}\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/extraction/synonyms':\n    post:\n      tags:\n        - customer\n      operationId: post_extraction_synonyms\n      summary: \"extract synonyms\"\n      description: \"extract synonyms from a text\"\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SynExtractionRequest'\n        description: synonyms extraction request\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SynonymExtractionItem'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/conv/annotations/{qa_route}/convIdxCounter':\n    post:\n      tags:\n        - customer\n      operationId: post_conv_annotations_qa_route_convIdxCounter\n      summary: \"update aggregated annotations: convIdxCounter\"\n      description: \"update aggregated annotation convIdxCounter for a conversation\"\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: qa_route\n          description: question anser route\n          required: true\n          schema:\n            type: string\n            enum:\n              - conversation_logs\n              - knowledgebase\n              - prior_data\n      requestBody:\n        description: conversation id\n        content:\n          application/json:\n            schema:\n              type: string\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateByQueryResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/analytics/{qa_route}':\n    post:\n      tags:\n        - customer\n      operationId: post_analytics_qa_route\n      summary: \"aggregated analytics on QA\"\n      description: \"calculates analytics for the question/answers table\"\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: qa_route\n          description: question anser route\n          required: true\n          schema:\n            type: string\n            enum:\n              - conversation_logs\n              - knowledgebase\n              - prior_data\n      requestBody:\n        description: analytics request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QAAggregatedAnalyticsRequest'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/QAAggregatedAnalytics'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/term_count/{qa_route}':\n    get:\n      tags:\n        - customer\n      operationId: get_term_count_qa_route\n      summary: \"term count\"\n      description: \"count the occurrence of a term in documents and corpus\"\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: qa_route\n          description: question anser route\n          required: true\n          schema:\n            type: string\n            enum:\n              - conversation_logs\n              - knowledgebase\n              - prior_data\n        - in: query\n          name: field\n          description: the fields to consider in counting, default is 'all'\n          example: 'question'\n          schema:\n            $ref: '#/components/schemas/TermCountFields'\n        - in: query\n          name: term\n          required: true\n          description: the term to count\n          example: 'hello'\n          schema:\n            type: string\n        - in: query\n          name: stale\n          description: set a cache time limit (interval in millis), if the value is older it is recalculated, default is 0\n          example: 10\n          schema:\n            type: number\n            format:  long\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TermCount'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/dict_size/{qa_route}':\n    get:\n      tags:\n        - customer\n      operationId: get_dict_size_qa_route\n      summary: \"terms count dictionary size\"\n      description: \"calculate the dictionary size (total number of unique terms)\"\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: qa_route\n          description: question anser route\n          required: true\n          schema:\n            type: string\n            enum:\n              - conversation_logs\n              - knowledgebase\n              - prior_data\n        - in: query\n          name: stale\n          description: set a cache time limit (interval in millis), if the value is older it is recalculated, default is 0\n          example: 10\n          schema:\n            type: number\n            format:  long\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DictSize'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/total_terms/{qa_route}':\n    get:\n      tags:\n        - customer\n      operationId: get_total_terms_qa_route\n      summary: \"total terms count\"\n      description: \"total terms count\"\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: qa_route\n          description: question anser route\n          required: true\n          schema:\n            type: string\n            enum:\n              - conversation_logs\n              - knowledgebase\n              - prior_data\n        - in: query\n          name: stale\n          description: set a cache time limit (interval in millis), if the value is older it is recalculated\n          example: 10\n          schema:\n            type: number\n            format:  long\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TotalTerms'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/stream/{qa_route}':\n    get:\n      tags:\n        - customer\n      summary: get all QA documents\n      operationId: get_stream_qa_route\n      description: get all QuestionAnswer entries as http stream\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: qa_route\n          description: question anser route\n          required: true\n          schema:\n            type: string\n            enum:\n              - conversation_logs\n              - knowledgebase\n              - prior_data\n      responses:\n        '200':\n          description: request successfully executed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/QADocument'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/{qa_route}':\n    post:\n      tags:\n        - customer\n      summary: insert QA documents\n      operationId: post_qa_route\n      description: insert a QA document\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: qa_route\n          description: question anser route\n          required: true\n          schema:\n            type: string\n            enum:\n              - conversation_logs\n              - knowledgebase\n              - prior_data\n        - in: query\n          name: refresh\n          description: when set to 1 StarChat force an index refresh\n          required: false\n          schema:\n            type: number\n            format: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QADocument'\n        description: QA document request\n      responses:\n        '200':\n          description: request successfully executed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexDocumentResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n    get:\n      tags:\n        - customer\n      summary: get QA documents\n      operationId: get_qa_route\n      description: retrieve QA documents\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: qa_route\n          description: question anser route\n          required: true\n          schema:\n            type: string\n            enum:\n              - conversation_logs\n              - knowledgebase\n              - prior_data\n        - name: id\n          in: query\n          description: IDs of the items to fetch\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: request successfully executed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchQADocumentsResults'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n    delete:\n      tags:\n        - customer\n      summary: delete one or more entries from the QA table\n      operationId: delete_qa_route\n      description: \u003e-\n        delete documents from the QA table. The index must exists and the customer has write permissions on it.\n        If no ids are specified all documents will be deleted.\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: qa_route\n          description: question anser route\n          required: true\n          schema:\n            type: string\n            enum:\n              - conversation_logs\n              - knowledgebase\n              - prior_data\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocsIds'\n        description: list of documents id to delete\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteDocumentsResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n    put:\n      tags:\n        - customer\n      summary: bulk update documents in the QA table\n      operationId: put_qa_route\n      description: bulk update of document in the QA table. The index must exists and the customer has write permissions on it.\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: qa_route\n          description: question anser route\n          required: true\n          schema:\n            type: string\n            enum:\n              - conversation_logs\n              - knowledgebase\n              - prior_data\n      responses:\n        '200':\n          description: item updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateDocumentsResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QADocumentUpdate'\n        description: QA entry with new fields\n  '/{index_name}/{qa_route}/delete_by_query':\n    post:\n      tags:\n        - customer\n      summary: delete QA documents by query\n      operationId: post_delete_by_query_qa_route\n      description: delete by query QA documents\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: qa_route\n          description: question anser route\n          required: true\n          schema:\n            type: string\n            enum:\n              - conversation_logs\n              - knowledgebase\n              - prior_data\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QADocumentSearch'\n        description: QA document search request\n      responses:\n        '200':\n          description: request successfully executed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteDocumentsSummaryResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n  '/{index_name}/{qa_route}/search':\n    post:\n      tags:\n        - customer\n      summary: search (or count) documents on the QA table\n      operationId: post_qa_route_search\n      description: \u003e-\n        Search documents in the QA table. The index must exists and the customer has read permissions on it.\n        To just count the matching documents set the size parameter to 0, no documents will be returned.\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: qa_route\n          description: question anser route\n          required: true\n          schema:\n            type: string\n            enum:\n              - conversation_logs\n              - knowledgebase\n              - prior_data\n      responses:\n        '200':\n          description: item updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchQADocumentsResults'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QADocumentSearch'\n        description: QA document search entity\n  '/{index_name}/{qa_route}/conversations':\n    post:\n      tags:\n        - customer\n      summary: retrieve conversations on the QA table\n      operationId: post_qa_route_conversations\n      description: \u003e-\n        given a list of conversation IDs retrieve the conversations from a QA table\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: qa_route\n          description: question anser route\n          required: true\n          schema:\n            type: string\n            enum:\n              - conversation_logs\n              - knowledgebase\n              - prior_data\n      responses:\n        '200':\n          description: item updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Conversations'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocsIds'\n        description: The list of conversation IDs\n    put:\n      tags:\n        - customer\n      summary: update by query documents in the QA table\n      operationId: put_qa_byquery_route\n      description: update by query documents in the QA table. The index must exists and the customer has write permissions on it.\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: qa_route\n          description: question anser route\n          required: true\n          schema:\n            type: string\n            enum:\n              - conversation_logs\n              - knowledgebase\n              - prior_data\n      responses:\n        '200':\n          description: item updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateDocumentsResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateQAByQueryReq'\n        description: QA entry with new fields, the id field must be an empty list\n  '/{index_name}/updateTerms/{qa_route}':\n    put:\n      tags:\n        - customer\n      summary: update the manaus terms for a document\n      operationId: put_updateTerms_qa_route\n      description: update the manaus term (relevant terms) for a document in the QA table. The index must exists and the customer has write permissions on it.\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: qa_route\n          description: question anser route\n          required: true\n          schema:\n            type: string\n            enum:\n              - conversation_logs\n              - knowledgebase\n              - prior_data\n      responses:\n        '200':\n          description: item updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateDocumentsResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateQATermsRequest'\n        description: manaus terms update request\n    post:\n      tags:\n        - customer\n      summary: update the manaus terms for the whole QA table\n      operationId: post_updateTerms_qa_route\n      description: update the manaus term (relevant terms) for all documents in the QA table. The index must exists and the customer has write permissions on it. Returns a stream of update results.\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: qa_route\n          description: question anser route\n          required: true\n          schema:\n            type: string\n            enum:\n              - conversation_logs\n              - knowledgebase\n              - prior_data\n      responses:\n        '200':\n          description: item updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateDocumentResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateQATermsRequest'\n        description: manaus terms update request\n  '/{index_name}/cache/{qa_route}':\n    delete:\n      tags:\n        - admin\n      summary: reset the terms count cache\n      operationId: delete_cache_qa_route\n      description: delete the terms counters cache and returns the cache configuration parameters\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: qa_route\n          description: question anser route\n          required: true\n          schema:\n            type: string\n            enum:\n              - conversation_logs\n              - knowledgebase\n              - prior_data\n      responses:\n        '200':\n          description: item updated\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                    - $ref: '#/components/schemas/CountersCacheParameters'\n                    - $ref: '#/components/schemas/CountersCacheSize'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n    get:\n      tags:\n        - admin\n      summary: get the terms count cache parameters\n      operationId: get_cache_qa_route\n      description: get the terms counters cache parameters\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: qa_route\n          description: question anser route\n          required: true\n          schema:\n            type: string\n            enum:\n              - conversation_logs\n              - knowledgebase\n              - prior_data\n      responses:\n        '200':\n          description: item updated\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CountersCacheParameters'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n    post:\n      tags:\n        - admin\n      summary: set terms stats cache parameters\n      operationId: post_cache_qa_route\n      description: set parameters for terms stats\n      parameters:\n        - in: path\n          name: index_name\n          description: name of the index\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: qa_route\n          description: question anser route\n          required: true\n          schema:\n            type: string\n            enum:\n              - conversation_logs\n              - knowledgebase\n              - prior_data\n      responses:\n        '200':\n          description: item updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateDocumentResult'\n        '400':\n          description: 'invalid input, object invalid, bad request'\n        '401':\n          description: authorization denied or authentication failed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CountersCacheParameters'\n        description: cache parameters\ncomponents:\n  schemas:\n    CreateLanguageIndexRequest:\n      type: object\n      required:\n        - languageList\n      properties:\n        languageList:\n          type: array\n          description: a list containing all language indexes that user want to create\n          items:\n            type: string\n    AnalyzerEvaluateRequest:\n      type: object\n      required:\n        - analyzer\n        - query\n      properties:\n        stateName:\n          type: string\n          description: a state name used by some analyzers, if unset playground will be used as default\n          example: \"statename\"\n        analyzer:\n          type: string\n          description: the analyzer expression\n          example: 'keyword(\"test\")'\n        query:\n          type: string\n          description: the query for the evaluation\n          example: 'test of the analyzers'\n        data:\n          $ref: '#/components/schemas/AnalyzersData'\n        evaluationClass:\n          type: string\n          description: an avaluation class, used to filter analyzers during evaluation\n          example: \"default\"\n          default: \"default\"\n        searchAlgorithm:\n          $ref: '#/components/schemas/SearchAlgorithm'\n    AnalyzerEvaluateResponse:\n      type: object\n      required:\n        - build\n        - value\n        - buildMessage\n      properties:\n        build:\n          type: boolean\n          description: the analyzer is well formed and was compiled\n          example: true\n        value:\n          type: number\n          format: double\n          description: the evaluation score\n          example: 0.75\n        data:\n          $ref: '#/components/schemas/AnalyzersData'\n        buildMessage:\n          type: string\n          description: a message with information about the analyzer building process\n          example: \"success\"\n          default: \"default\"\n    AnalyzersData:\n      required:\n        - traversedStates\n        - extractedVariables\n      properties:\n        traversedStates:\n          type: array\n          description: the history of traversed states\n          default: empty list\n          items:\n            type: string\n          example:\n            - start\n            - welcome\n            - get_name\n        extractedVariables:\n          type: object\n          description: the variables extracted by StarChat or generated by the analyzers\n            to used for the analyzer evaluation the name is an arbitrary ascii string\n          additionalProperties:\n            type: string\n          example: {\"name\": \"Donald Duck\", \"job\": \"idle\"}\n    IndexManagementResponse:\n      type: object\n      properties:\n        message:\n          type: string\n          description: a response message for the index management operations\n          example: message from the index\n        check:\n          type: boolean\n          description: check value\n          example: true\n    IndexManagementStatusResponse:\n      type: object\n      properties:\n        message:\n          type: string\n          description: a response message for the index management operations\n          example: Index check for instance X\n        status:\n          type: string\n          description: describe instance's status\n          enum:\n            - Missing\n            - MarkedForDeletion\n            - Enabled\n            - Disabled\n          example: Enabled\n    FailedShards:\n      type: object\n      properties:\n        index_name:\n          type: string\n          description: name of the index\n          example: index_getjenny_italian_usecase0.user\n        shard_id:\n          type: number\n          format: integer\n          description: id of the shard\n          example: 1\n        status:\n          type: number\n          format: integer\n          description: status of the shard\n          example: 0\n    RefreshIndexResult:\n      type: object\n      properties:\n        index_name:\n          type: string\n          description: name of the index\n          example: index_getjenny_italian_usecase0.state\n        failed_shards_n:\n          type: number\n          format: integer\n          description: number of failed shards\n          example: 0\n        successful_shards_n:\n          type: number\n          format: integer\n          description: number of successful shards\n          example: 5\n        total_shards_n:\n          type: number\n          format: integer\n          description: total number of shards\n          example: 5\n        failed_shards:\n          type: array\n          items:\n            $ref: '#/components/schemas/FailedShards'\n    RefreshIndexResults:\n      type: object\n      properties:\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/RefreshIndexResult'\n    ListOfIndices:\n      type: array\n      items:\n        type: string\n      example:\n        - \"index_getjenny_english_0.prior_data\"\n        - \"index_getjenny_english_common_0.question_answer\"\n        - \"index_getjenny_english_common_0.term\"\n        - \"index_getjenny_english_common_0.logs_data\"\n        - \"index_getjenny_english_0.state\"\n        - \"index_getjenny_english_common_0.prior_data\"\n        - \"index_getjenny_english_common_0.state\"\n        - \"index_getjenny_english_0.term\"\n        - \"index_getjenny_english_0.question_answer\"\n        - \"index_getjenny_english_0.logs_data\"\n    IndexDocumentResult:\n      type: object\n      required:\n        - index\n        - id\n        - version\n        - created\n      properties:\n        index:\n          type: string\n          description: name of the index\n          example: index_getjenny_italian_usecase0.state\n        id:\n          type: string\n          description: document id\n          example: index_getjenny_italian_usecase0.state\n        version:\n          type: number\n          format: integer\n          description: document version\n          example: 10\n        created:\n          type: boolean\n          description: whether the document was created or not\n          example: true\n    IndexDocumentListResult:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/IndexDocumentResult'\n    DTDocument:\n      type: object\n      required:\n        - state\n        - executionOrder\n        - maxStateCount\n        - analyzer\n        - queries\n        - bubble\n        - action\n        - actionInput\n        - stateData\n        - successValue\n        - failureValue\n      properties:\n        state:\n          type: string\n          description: a unique name of the state\n          example: forgot_password\n        executionOrder:\n          type: number\n          format: integer\n          description: specify an order of evaluation for analyzers the lower is the number earlier is the evaluation of the state\n          example: 0\n        maxStateCount:\n          type: number\n          format: integer\n          description: defines how many times StarChat can repropose the state during a conversation. 0 means no limits\n          example: 0\n        analyzer:\n          type: string\n          description: an analyzer expression evaluated to trigger the state\n          example: 'keyword(\"password\")'\n        queries:\n          type: array\n          items:\n            type: string\n          example:\n            - I forgot my password\n            - my password is wrong\n            - don't remember the password\n        bubble:\n          type: string\n          description: content, if any, to be shown to the user. It may contain variables like %email% or %link%.\n          example: Hello %name%, how can I help you?\n        action:\n          type: string\n          description: a function to be called on the client side. StarChat developer must provide types of input and output (like an abstract method), and the GUI developer is responsible for the actual implementation (e.g. show_button)\n          example: \"show_button\"\n        actionInput:\n          $ref: '#/components/schemas/actionInput'\n        stateData:\n          type: object\n          description: a dictionary of strings with arbitrary data to pass along\n          additionalProperties:\n            type: string\n          example: {\"url\": \"www.getjenny.com\"}\n        successValue:\n          type: string\n          description: a state name for the client to set the next state in case the evaluated function succeed\n          example: \"ask_feedback\"\n        failureValue:\n          type: string\n          description: a state name for the client to set the next state in case the evaluated function fail\n          example: \"dont_understand\"\n        evaluationClass:\n          type: string\n          description: the evaluation class for the state, used to apply filters during evaluation\n          example: default\n        version:\n          type: number\n          format: integer\n          description: the version of the document, this field is automatically calculated and should not be used for indexing requests.\n          example: 12\n    DTDocumentUpdate:\n      type: object\n      required:\n        - state\n      properties:\n        state:\n          type: string\n          description: a unique name of the state\n          example: forgot_password\n        executionOrder:\n          type: number\n          format: integer\n          description: specify an order of evaluation for analyzers the lower is the number earlier is the evaluation of the state\n          example: 0\n        maxStateCount:\n          type: number\n          format: integer\n          description: defines how many times StarChat can repropose the state during a conversation. 0 means no limits\n          example: 0\n        analyzer:\n          type: string\n          description: an analyzer expression evaluated to trigger the state\n          example: 'keyword(\"password\")'\n        queries:\n          type: array\n          items:\n            type: string\n          example:\n            - I forgot my password\n            - my password is wrong\n            - don't remember the password\n        bubble:\n          type: string\n          description: content, if any, to be shown to the user. It may contain variables like %email% or %link%.\n          example: Hello %name%, how can I help you?\n        action:\n          type: string\n          description: a function to be called on the client side. StarChat developer must provide types of input and output (like an abstract method), and the GUI developer is responsible for the actual implementation (e.g. show_button)\n          example: \"show_button\"\n        actionInput:\n          $ref: '#/components/schemas/actionInput'\n        stateData:\n          type: object\n          description: a dictionary of strings with arbitrary data to pass along\n          additionalProperties:\n            type: string\n          example: {\"url\": \"www.getjenny.com\"}\n        successValue:\n          type: string\n          description: a state name for the client to set the next state in case the evaluated function succeed\n          example: \"show_buttons\"\n        failureValue:\n          type: string\n          description: a state name for the client to set the next state in case the evaluated function fail\n          example: \"dont_understand\"\n        evaluationClass:\n          type: string\n          description: the evaluation class for the state, used to apply filters during evaluation\n          example: default\n    DTAnalyzerLoad:\n      type: object\n      properties:\n        numOfEntries:\n          type: number\n          format: integer\n          description: number of analyzers in memory\n          example: 134\n    DtReloadTimestamp:\n      type: object\n      required:\n        - indexName\n        - timestamp\n      properties:\n        indexName:\n          type: string\n          example: index_getjenny_english_0\n        timestamp:\n          type: number\n          format: long\n          example: 1549283768918\n    DTAnalyzerItem:\n      type: object\n      properties:\n        analyzer:\n          type: string\n          description: the analyzer expression\n          example: 'keyword(\"password\")'\n        build:\n          type: boolean\n          description: whether the analyzer was well formed and successfully compiled\n          example: true\n        executionOrder:\n          type: number\n          format: integer\n          description: entry execution  order\n          example: 0\n        evaluationClass:\n          type: string\n          description: the evaluation class for the state, used to apply filters during evaluation\n          example: default\n    DTAnalyzerMap:\n      type: object\n      properties:\n        analyzerMap:\n          type: object\n          description: dictionary with analyzers, the key is the state name\n          additionalProperties:\n            $ref: '#/components/schemas/DTAnalyzerItem'\n      example: {\"analyzerMap\": {\"state_name_0\": '$ref: \"#/components/schemas/DTAnalyzerItem\"' }}\n    SearchDTDocument:\n      type: object\n      properties:\n        score:\n          type: number\n          format: double\n          description: the search relevance score\n          example: 0.1\n        document:\n          $ref: '#/components/schemas/DTDocument'\n    SearchDTDocumentsResults:\n      type: object\n      properties:\n        total:\n          type: number\n          format: integer\n          description: the number of entries\n          example: 10\n        maxScore:\n          type: number\n          format: double\n          description: the max document relevance score\n          example: 0.7\n        hits:\n          type: array\n          description: the list of retrieved documents\n          items:\n            $ref: '#/components/schemas/SearchDTDocument'\n    UpdateDocumentResult:\n      type: object\n      properties:\n        index:\n          type: string\n          description: the index name\n          example: index_getjenny_english_usecase0\n        id:\n          type: string\n          description: the document id\n          example: state_1234\n        version:\n          type: number\n          format: integer\n          description: the document version after the update\n          example: 13\n        created:\n          type: boolean\n          description: whether the document was created or just updated\n          example: false\n    UpdateDocumentsResult:\n      type: object\n      properties:\n        data:\n          type: array\n          description: a list of update document results\n          items:\n            $ref: '#/components/schemas/UpdateDocumentResult'\n    ResponseRequestInUserInput:\n      type: object\n      properties:\n        text:\n          type: string\n          description: the user query\n          example: \"Hello, I would like to reset my password, is it possible?\"\n        img:\n          type: string\n          description: a base64 picture, currently not supported by the analyzers\n          example: \"aGVsbG8K=\"\n    ResponseRequestIn:\n      type: object\n      required:\n        - conversationId\n      properties:\n        conversationId:\n          type: string\n          description: the id of the conversation\n          example: \"conv_12131\"\n        traversedStates:\n          type: array\n          description: the history of traversed states\n          items:\n            type: string\n          example:\n            - \"state_0\"\n            - \"state_1\"\n            - \"state_3\"\n        userInput:\n          $ref: '#/components/schemas/ResponseRequestInUserInput'\n        state:\n          type: array\n          description: request a specific state\n          items:\n            type: string\n          example:\n            - \"welcome_state1\"\n            - \"welcome_state2\"\n            - \"welcome_state3\"\n        data:\n          type:  object\n          description: the variables passed to StarChat, they may be used by the analyzers and to complete the templates.\n          additionalProperties:\n            type: string\n          example: {\"name\": \"Donald Duck\", \"job\": \"idle\"}\n        threshold:\n          type: number\n          format: double\n          description: the minimum match threshold\n          default: 0.0\n        evaluationClass:\n          type: string\n          description: the evaluation class, enable the evaluation only on the analyzer with a specific class\n          example: \"default\"\n          default: \"default\"\n        maxResults:\n          type: number\n          format: integer\n          description: the max number of results to return, ordered by score\n          default: 2\n        searchAlgorithm:\n          $ref: '#/components/schemas/SearchAlgorithm'\n    ReturnMessageData:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: number\n          format: integer\n          description: an operation code, 200 if there are no errors\n          example: 200\n        message:\n          type: string\n          description: a message in case of errors\n          example: \"\"\n    ResponseRequestOut:\n      type: object\n      required:\n        - conversationId\n        - state\n        - traversedStates\n        - maxStateCount\n        - analyzer\n        - bubble\n        - action\n        - data\n        - actionInput\n        - stateData\n        - successValue\n        - failureValue\n        - score\n      properties:\n        conversationId:\n          type: string\n          description: the id of the conversation\n          example: \"conv_12131\"\n        state:\n          type: string\n          description: state name\n          example: \"state_4\"\n        traversedStates:\n          type: array\n          description: the history of traversed states\n          items:\n            type: string\n          example:\n            - \"state_0\"\n            - \"state_1\"\n            - \"state_3\"\n            - \"state_4\"\n        maxStateCount:\n          type: number\n          format: integer\n          description: the max number of times the state can be evaluated\n          default: 0\n        analyzer:\n          type: string\n          description: the analyzer expression\n          example: 'keyword(\"password\")'\n        data:\n          type:  object\n          description: the variables passed to StarChat plus the variable eventually extracted by the analyzers\n          additionalProperties:\n            type: string\n          example: {\"name\": \"Donald Duck\", \"job\": \"idle\"}\n        bubble:\n          type: string\n          description: the message to display\n          example: \"Hello Donald Duck, I just sent you an email with a link to reset the password\"\n        action:\n          type: string\n          description: a function to be called on the client side. StarChat developer must provide types of input and output (like an abstract method), and the GUI developer is responsible for the actual implementation (e.g. show_button)\n          example: \"show_button\"\n        actionInput:\n          $ref: '#/components/schemas/actionInput'\n        stateData:\n          type: object\n          description: a dictionary of strings with arbitrary data to pass along\n          additionalProperties:\n            type: string\n          example: {\"url\": \"www.getjenny.com\"}\n        successValue:\n          type: string\n          description: a state name for the client to set the next state in case the evaluated function succeed\n          example: \"ask_feedback\"\n        failureValue:\n          type: string\n          description: a state name for the client to set the next state in case the evaluated function fail\n          example: \"dont_understand\"\n        score:\n          type: number\n          format: double\n          description: the score for the state\n          example: 0.83\n    ResponseRequestOutOperationResult:\n      type: object\n      required:\n        - status\n      properties:\n        status:\n          $ref: '#/components/schemas/ReturnMessageData'\n        responseRequestOut:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResponseRequestOut'\n    DeleteDocumentResult:\n      type: object\n      properties:\n        index:\n          type: string\n          description: index name\n          example: index_getjenny_english_usecase0\n        id:\n          type: string\n          description: the document id\n          example: id0001\n        version:\n          type: number\n          format: integer\n          description: document version\n          example: 2\n        found:\n          type: boolean\n          description: whether the document was found or not\n          example: true\n    DeleteDocumentsResult:\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/DeleteDocumentResult'\n    DeleteDocumentsSummaryResult:\n      type: object\n      properties:\n        message:\n          type: string\n          description: a message from the delete functions\n          example: delete\n        deleted:\n          type: number\n          format: integer\n          description: the number of documents deleted\n          example: 561\n    DTDocumentSearch:\n      type: object\n      properties:\n        from:\n          type: number\n          format: integer\n          description: first result from a paginated list\n          example: 0\n        size:\n          type: number\n          format: integer\n          description: how many results to be returned\n          example: 10\n        executionOrder:\n          type: number\n          format: integer\n          description: search items with a specific execution order\n          example: 1\n        minScore:\n          type: number\n          format: double\n          description: min score threshold for the results\n          example: 0.7\n        boostExactMatchFactor:\n          type: number\n          format: double\n          description: apply a score boost for exact matching items (only for queries field)\n          example: 1000.0\n        state:\n          type: string\n          description: \"a state name\"\n          example: \"renew_insurance\"\n        evaluationClass:\n          type: string\n          description: \"the evaluation class\"\n          example: \"default\"\n        queries:\n          type: string\n          description: \"a query\"\n          example: \"hello, when should I renew my insurance?\"\n        searchAlgorithm:\n          $ref: '#/components/schemas/SearchAlgorithm'\n    permission:\n      type: string\n      description: permissions for the endpoints\n      enum:\n        - admin\n        - read\n        - write\n        - stream\n      example: admin\n    User:\n      required:\n        - id\n        - password\n        - salt\n        - permissions\n      properties:\n        id:\n          type: string\n          description: an id of the system user\n          example: test_user\n        password:\n          type: string\n          description: a salted sha512 password\n          example: \u003e-\n            374f6caba1c8e8980a63752ac01a079cfb6a29bbdcce67bb2a78a66dbd5fe02b67422b5badbeddac34750be610f1852770a8457293f94657a5cd1c6d118b25ef\n        salt:\n          type: string\n          description: the salt used to verify the password\n          example: '120837371'\n        permissions:\n          type: object\n          description: association (index_name, list of permissions)\n          additionalProperties:\n            type: array\n            description: the list of permissions for the user on a specific index, the key is the index\n            items:\n              $ref: '#/components/schemas/permission'\n            example:\n              - read\n              - write\n    UserUpdate:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          description: user id\n          example: user123\n        password:\n          type: string\n          description: a salted sha512 password\n          example: \u003e-\n            374f6caba1c8e8980a63752ac01a079cfb6a29bbdcce67bb2a78a66dbd5fe02b67422b5badbeddac34750be610f1852770a8457293f94657a5cd1c6d118b25ef\n        salt:\n          type: string\n          description: the salt used to verify the password\n          example: '120837371'\n        permissions:\n          type: object\n          description: association (index_name, list of permissions)\n          additionalProperties:\n            type: array\n            description: the list of permissions for the user on a specific index, the key is the index\n            items:\n              $ref: '#/components/schemas/permission'\n            example:\n              - stream\n              - read\n    UserId:\n      type: object\n      properties:\n        id:\n          type: string\n          description: user id\n          example: user123\n    ClusterNode:\n      type: object\n      required:\n        - uuid\n        - alive\n        - timestamp\n      properties:\n        uuid:\n          type: string\n          description: unique identifier of the cluster node\n          example: \"535096c7-5e8c-4570-8861-979d03f28774\"\n        alive:\n          type: boolean\n          description: whether or not the node is alive (registered a periodic alive timestamp)\n          example: true\n        timestamp:\n          type: number\n          format: long\n          description: last registered alive timestamp\n          example: 1549283768918\n    ClusterNodes:\n      type: object\n      required:\n        - uuid\n        - nodes\n      properties:\n        uuid:\n          type: string\n          description: unique identifier of the node responding to the request\n          example: \"4cbefc2b-689d-424d-8e05-f0abc1a3a0b9\"\n        nodes:\n          type: array\n          description: the list of alive nodes\n          items:\n            $ref: '#/components/schemas/ClusterNode'\n          example:\n            - { 'uuid': '4cbefc2b-689d-424d-8e05-f0abc1a3a0b9', 'alive': true, 'timestamp': 1549283761912 }\n            - { 'uuid': 'ec87c7bc-aa5d-4028-91a4-7856fcdec25b', 'alive': true, 'timestamp': 1549283763934 }\n            - { 'uuid': '291956da-6f1e-4222-a9c9-c3b5c588622a', 'alive': true, 'timestamp': 1549283764956 }\n    NodeDtLoadingStatus:\n      type: object\n      required:\n        - index\n      properties:\n        uuid:\n          type: string\n          description: unique identifier of the cluster node\n          example: \"535096c7-5e8c-4570-8861-979d03f28774\"\n        index:\n          type: string\n          description: name of the decision table index\n          example: index_getjenny_english_usecase0\n        timestamp:\n          type: number\n          format: long\n          description: update decisiontable timestamp\n          example: 1549283768918\n    NodeLoadingAllDtStatus:\n      type: object\n      required:\n        - totalIndexes\n        - updatedIndexes\n        - indexes\n      properties:\n        totalIndexes:\n          type: number\n          format: long\n          description: total number of decision tables\n          example: 102\n        updatedIndexes:\n          type: number\n          format: long\n          description: total number of up to date decision tables on the node\n          example: 101\n        indexes:\n          type: object\n          description: map of nodes with the update status, true means up to date\n          example: {\"index_getjenny_english_0\": true, \"index_getjenny_english_1\": true, \"index_getjenny_english_2\": false}\n    ClusterLoadingDtStatusIndex:\n      type: object\n      required:\n        - index\n        - totalAliveNodes\n        - upToDateNodes\n        - updateCompleted\n        - timestamp\n      properties:\n        index:\n          type: string\n          description: index name\n          example: index_getjenny_english_usecase9\n        totalAliveNodes:\n          type: number\n          format: long\n          description: total number of alive nodes of the starchat cluster\n          example: 3\n        upToDateNodes:\n          type: number\n          format: long\n          description: total number of starchat's cluster nodes with the latest version of the index\n          example: 3\n        updateCompleted:\n          type: boolean\n          description: true if all the alive nodes have the latest version of the decisiontable\n          example: true\n        timestamp:\n          type: number\n          format: long\n          description: update decisiontable timestamp\n          example: 1549283768918\n    SpellcheckTermsRequest:\n      required:\n        - text\n      type: object\n      properties:\n        text:\n          type: string\n          description: the text to be spellchecked\n          example: \"is this text misplelled?\"\n        prefixLength:\n          type: number\n          format: integer\n          default: 3\n          description: \u003e-\n            the number of minimal prefix characters that must match in order be a candidate suggestion\n        minDocFreq:\n          type: number\n          format: integer\n          default: 1\n          description: \u003e-\n            the minimal occurrence in knowledgebase corpus of each suggested token\n        maxEdit:\n          type: number\n          format: integer\n          default: 2\n          description: \u003e-\n            the max edit distance between the suggested token and the original token\n    SpellcheckTermsRequest2:\n      required:\n        - text\n      type: object\n      properties:\n        text:\n          type: string\n          description: the text to be spellchecked\n          example: \"is this text misplelled?\"\n        prefixLength:\n          type: number\n          format: integer\n          default: 3\n          description: \u003e-\n            the number of minimal prefix characters that must match in order be a candidate suggestion\n        minDocFreq:\n          type: number\n          format: integer\n          default: 1\n          description: \u003e-\n            the minimal occurrence in knowledgebase corpus of each suggested token\n        minWordLength:\n          type: number\n          format: integer\n          default: 2\n          description: \u003e-\n            the minimal length of words that are to be checked\n        maxEdit:\n          type: number\n          format: integer\n          default: 2\n          description: \u003e-\n            the max edit distance between the suggested token and the original token\n    SpellcheckTokenSuggestions:\n      type: object\n      required:\n        - score\n        - freq\n        - text\n      properties:\n        score:\n          type: number\n          format: double\n          description: the candidate term score\n          example: 0.800000011920929\n        freq:\n          type: number\n          format: integer\n          description: the occurrence of candidate term\n          example: 1284,\n        text:\n          type: string\n          description: the candidate term\n          example: hello\n    SpellcheckTokenSuggestions2:\n      type: object\n      required:\n        - score\n        - scoreUnigram\n        - scoreBigram\n        - scoreTrigram\n        - freq\n        - text\n      properties:\n        score:\n          type: number\n          format: double\n          description: the candidate term score\n          example: 0.6748971343040466\n        scoreUnigram:\n          type: number\n          format: double\n          description: the candidate term score based on term frequency only\n          example: 0.000006860922439955175\n        scoreBigram:\n          type: number\n          format: double\n          description: the candidate term score based on bigram frequencies (considers up to one word preceding and up to one word following the candidate term)\n          example: 0.0000019773945041379193\n        scoreTrigram:\n          type: number\n          format: double\n          description: the candidate term score based on trigram frequencies (considers up to two words preceding and up to two words following the candidate term)\n          example: 0.000002265780494781211\n        freq:\n          type: number\n          format: integer\n          description: the occurrence of candidate term\n          example: 1284,\n        text:\n          type: string\n          description: the candidate term\n          example: hello\n    SpellcheckToken:\n      type: object\n      required:\n        - text\n        - offset\n        - length\n        - options\n      properties:\n        text:\n          type: string\n          description: the original token in text\n          example: hellp\n        offset:\n          type: number\n          format: integer\n          description: the token offset\n          example: 0\n        length:\n          type: number\n          format: integer\n          description: the potentially mispelled word\n          example: 5\n        options:\n          type: array\n          items:\n            $ref: '#/components/schemas/SpellcheckTokenSuggestions'\n    SpellcheckToken2:\n      type: object\n      required:\n        - text\n        - offset\n        - length\n        - options\n      properties:\n        text:\n          type: string\n          description: the original token in text\n          example: hellp\n        offset:\n          type: number\n          format: integer\n          description: the token offset\n          example: 0\n        length:\n          type: number\n          format: integer\n          description: the potentially mispelled word\n          example: 5\n        options:\n          type: array\n          items:\n            $ref: '#/components/schemas/SpellcheckTokenSuggestions2'\n    SpellcheckTermsResponse:\n      type: object\n      required:\n        - tokens\n      properties:\n        tokens:\n          type: array\n          items:\n            $ref: '#/components/schemas/SpellcheckToken'\n    SpellcheckTermsResponse2:\n      type: object\n      required:\n        - tokens\n      properties:\n        tokens:\n          type: array\n          items:\n            $ref: '#/components/schemas/SpellcheckToken2'\n    LanguageGuesserRequestIn:\n      type: object\n      required:\n        - inputText\n      properties:\n        inputText:\n          type: string\n          description: the text to for which we need to guess the language\n          example: guess the language of this sentence\n    LanguageGuesserInformations:\n      type: object\n      description: a map with the language\n      required:\n        - supportedLanguages\n      properties:\n        supportedLanguages:\n          type: object\n          required:\n            - supported_languages\n          properties:\n            supported_languages:\n              type: object\n              required:\n                - languages\n              properties:\n                languages:\n                  type: object\n                  description: the result dictionary, the key is language ISO 639-1 code\n                  additionalProperties:\n                    type: boolean\n                    description: whether the language is supported or not\n                  example: {'en': true}\n    LanguageGuesserRequestOut:\n      type: object\n      required:\n        - language\n        - score\n        - confidence\n        - enoughText\n      properties:\n        language:\n          type: string\n          description: the language guessed\n          example: en\n        score:\n          type: number\n          format: double\n          description: a score for the guess confidence\n          example: 0.571426689624786\n        confidence:\n          type: string\n          description: the confidence about guess -\u003e LOW, MEDIUM, HIGH\n          example: MEDIUM\n        enoughText:\n          type: boolean\n          description: whether the model had enough text for the guess\n          example: false\n    TokenizerQueryRequest:\n      type: object\n      required:\n        - tokenizer\n        - text\n      properties:\n        tokenizer:\n          type: string\n          description: the tokenizer name\n          example: base\n        text:\n          type: string\n          description: the text to tokenize\n          example: good morning, please tokenize this text\n    TokenizerResponseItem:\n      type: object\n      required:\n        - startOffset\n        - position\n        - endOffset\n        - token\n        - tokenType\n      properties:\n        startOffset:\n          type: number\n          format: int\n          description: the token start position in the original text\n          example: 0\n        position:\n          type: number\n          format: int\n          description: the token index in the original text\n          example: 0\n        endOffset:\n          type: number\n          format: int\n          description: the token end position in the original text\n          example: 4\n        token:\n          type: string\n          description: the token\n          example: good\n        tokenType:\n          type: string\n          description: type of token, it can be word, num\n          example: word\n    TokenizerResponse:\n      type: object\n      required:\n        - tokens\n      properties:\n        tokens:\n          type: array\n          description: a list of tokenizaion items\n          items:\n            $ref: '#/components/schemas/TokenizerResponseItem'\n    TokenizersSet:\n      type: object\n      additionalProperties:\n        type: string\n        description: tokenizer description, the key is the tokenizer name\n        example: \"2 words shingles\"\n      example: {\n        \"shingles2\": \"2-grams\",\n        \"space_punctuation\": \"lowercase\",\n        \"shingles2_10\": \"from 2 to 10 n-grams\",\n        \"base\": \"lowercase\",\n        \"base_stem\": \"lowercase + stemming\",\n        \"shingles3\": \"3-grams\",\n        \"raw\": \"lowercase\",\n        \"stop\": \"lowercase + stopwords elimination\",\n        \"shingles4\": \"4-grams\",\n        \"stop_stem\": \"lowercase + stopwords elimination + stemming\"\n      }\n    Term:\n      type: object\n      required:\n        - term\n      properties:\n        term:\n          type: string\n          description: term textual form\n          example: \"hello\"\n        synonyms:\n          type: object\n          description: \"a set of synonyms with score\"\n          additionalProperies:\n            type: number\n            format: double\n            description: \"similar term, the key is the synonym\"\n          example: {'hi': 0.6}\n        antonyms:\n          type: object\n          description: a set of antonynonyms with score\n          additionalProperies:\n            type: number\n            format: double\n            description: \"countrary term, the key is the antonynonym\"\n          example: {'goodbye': 0.3}\n        tags:\n          type: string\n          description: a set of tags associated to the term\n          example: \"tag1 tag2\"\n        features:\n          type: object\n          description: a set of features associated to the term\n          additionalProperies:\n            type: string\n            description: feature value\n            example: 'name'\n          example: {'POS': 'name'}\n        frequencyBase:\n          type: number\n          format: double\n          description: occurrence of the term on a corpus\n          example: 410301.0\n        frequencyStem:\n          type: number\n          format: double\n          description: \"occurrence of the term's stemmed form on a corpus\"\n          example: 601301.0\n        vector:\n          type: array\n          description: the vectorial representation of the term e.g. word2vec\n          items:\n            type: number\n            format: double\n          example: [0.0, -1.0,  2.0, 1.2, 3.0]\n        score:\n          type: number\n          description: the term score (used to rank terms in search results)\n          format: double\n          example: 0.9\n    SearchTerm:\n      type: object\n      properties:\n        term:\n          type: string\n          description: term textual form\n          example: \"hello\"\n        synonyms:\n          type: object\n          description: a set of synonyms with score\n          additionalProperies:\n            type: number\n            format: double\n            description: \"similar term, the key is the synonym\"\n          example: {'hi': 0.6}\n        antonyms:\n          type: object\n          description: a set of antonynonyms with score\n          additionalProperies:\n            type: number\n            format: double\n            description: \"countrary term, the key is the antonynonym\"\n          example: {'goodbye': 0.3}\n        tags:\n          type: string\n          description: a set of tags associated to the term\n          example: \"tag1 tag2\"\n        features:\n          type: object\n          description: a set of features associated to the term\n          additionalProperies:\n            type: string\n            description: feature value\n            example: 'name'\n          example: {'POS': 'name'}\n        frequencyBase:\n          type: number\n          format: double\n          description: occurrence of the term on a corpus\n          example: 410301.0\n        frequencyStem:\n          type: number\n          format: double\n          description: \"occurrence of the term's stemmed form on a corpus\"\n          example: 601301.0\n        vector:\n          type: array\n          description: the vectorial representation of the term e.g. word2vec\n          items:\n            type: number\n            format: double\n          example: [0.0, -1.0,  2.0, 1.2, 3.0]\n        score:\n          type: number\n          description: the term score (used to rank terms in search results)\n          format: double\n          example: 0.9\n    Terms:\n      type: object\n      properties:\n        terms:\n          type: array\n          items:\n            $ref: '#/components/schemas/Term'\n    TermsResults:\n      type: object\n      required:\n        - total\n        - maxScore\n        - hits\n      properties:\n        total:\n          type: number\n          format: integer\n          description: the number of terms returned\n          example: 1\n        maxScore:\n          type: number\n          format: float\n          description: the max score of the returned terms\n          example: 0.88\n        hits:\n          $ref: '#/components/schemas/Terms'\n    TextTerms:\n      type: object\n      required:\n        - text\n        - textTermsN\n        - termsFoundN\n        - terms\n      properties:\n        text:\n          type: string\n          description: the original text\n          example: \"this is a sample sentence\"\n        textTermsN:\n          type: number\n          format: integer\n          description: the number of terms in the sentence\n          example:  5\n        termsFoundN:\n          type: number\n          format: integer\n          description: number of terms found in the terms table\n          example: 5\n        terms:\n          $ref: '#/components/schemas/Terms'\n    TermsDistanceRes:\n      type: object\n      required:\n        - term1\n        - term2\n        - vector1\n        - vector2\n        - cosDistance\n        - eucDistance\n      properties:\n        term1:\n          type: string\n          description:  the first term\n          example: 'hello'\n        term2:\n          type: string\n          description:  the second term\n          example: 'hi'\n        vector1:\n          type: array\n          description: vectorial representation of the first term\n          items:\n            type: number\n            format: double\n          example: [0.0, -1.0,  2.0, 1.2, 3.0]\n        vector2:\n          type: array\n          description: vectorial representation of the second term\n          items:\n            type: number\n            format: double\n          example: [-1.0, -2.0,  -0.3, 1.2, 3.0]\n        cosDistance:\n          type: number\n          format: double\n          description: cosine distance between terms\n          example: 0.8\n        eucDistance:\n          type: number\n          format: double\n          description: euclidean distance between terms\n          example: 3.1\n    ListTermsDistanceRes:\n      type: array\n      description: list of terms distance\n      items:\n        $ref: '#/components/schemas/TermsDistanceRes'\n    DocsIds:\n      required:\n        - ids\n      type: object\n      properties:\n        ids:\n          type: array\n          items:\n            type: string\n          example: ['id1', 'id2']\n    TermsExtractionRequest:\n      required:\n        - text\n      properties:\n        text:\n          type: string\n          description: a text from which extract keywords\n          example: \"good morning, may I ask you a question?\"\n        tokenizer:\n          type: string\n          description: \"the tokenizer to use (see TokenizersSet data structure for the available tokenizers)\"\n          example: space_punctuation\n          default: space_punctuation\n        commonOrSpecificSearchPrior:\n          type: string\n          description: extract prior statistics from the common tables or index specific tables\n          enum:\n            - COMMON\n            - IDXSPECIFIC\n          example: IDXSPECIFIC\n          default: COMMON\n        commonOrSpecificSearchObserved:\n          type: string\n          description: extract observed statistics from the common tables or index specific tables\n          enum:\n            - COMMON\n            - IDXSPECIFIC\n          example: IDXSPECIFIC\n          default: COMMON\n        observedDataSource:\n          type: string\n          description: extract observed statistics from knowledge base or the conversation log table\n          enum:\n            - KNOWLEDGEBASE\n            - CONV_LOGS\n          example: CONV_LOGS\n          default: KNOWLEDGEBASE\n        fieldsPrior:\n          type: string\n          description: fields to be used for the prior statistics\n          enum:\n            - question\n            - answer\n            - all\n          example: question\n          default: all\n        fieldsObserved:\n          type: string\n          description: fields to be used for the observed statistics\n          enum:\n            - question\n            - answer\n            - all\n          example: question\n          default: all\n        minWordsPerSentence:\n          type: number\n          format: integer\n          description: the minimum amount of words on the sentence\n          example: 10\n          default: 10\n        pruneTermsThreshold:\n          type: number\n          format: integer\n          description: a threshold on the number of terms for trigger pruning\n          example: 100000\n          default: 100000\n        misspellMaxOccurrence:\n          type: number\n          format: integer\n          description: given a big enough sample, min freq beyond what we consider the token a misspell\n          example: 5\n          default: 5\n        activePotentialDecay:\n          type: number\n          format: integer\n          description: decay value for the active potential\n          example: 10\n          default: 10\n        activePotential:\n          type: boolean\n          description: enable/disable the calculation of active potential\n          example: true\n          default: true\n        minSentenceInfoBit:\n          type: number\n          format: integer\n          description: the minimum amount of information for the sentence in bits\n          example: 16\n          default: 16\n        minKeywordInfo:\n          type: number\n          format: integer\n          description: the minimum amount of information per keywords in bits\n          example: 8\n          default: 8\n        totalInfo:\n          type: boolean\n          description: use the total information\n          example: false\n          default: false\n    SynExtractionRequest:\n      type: object\n      required:\n        - text\n      properties:\n        text:\n          type: string\n          description: a text from which extract keywords\n          example: \"good morning, may I ask you a question?\"\n        tokenizer:\n          type: string\n          description: \"the tokenizer to use (see TokenizersSet data structure for the available tokenizers)\"\n          example: \"space_punctuation\"\n          default: \"base\"\n        sentencesThreshold:\n          type: number\n          format: double\n          description: discard candidates if the sentence distance is below the threshold\n          default: 0.0\n          example: 0.3\n        synonymsThreshold:\n          type: number\n          format: double\n          description: discard candidates if the terms distance is below the threshold\n          default: 0.0\n          example: 0.3\n        distanceFunction:\n          type: string\n          enum:\n            - EMDCOSINE\n            - SUMCOSINE\n            - MEANCOSINE\n          default: EMDCOSINE\n          example: SUMCOSINE\n          description: the function to measure distance between sentences\n        commonOrSpecificSearchPrior:\n          type: string\n          description: extract prior statistics from the common tables or index specific tables\n          enum:\n            - COMMON\n            - IDXSPECIFIC\n          example: IDXSPECIFIC\n          default: COMMON\n        commonOrSpecificSearchObserved:\n          type: string\n          description: extract observed statistics from the common tables or index specific tables\n          enum:\n            - COMMON\n            - IDXSPECIFIC\n          example: IDXSPECIFIC\n          default: COMMON\n        commonOrSpecificSearchTerms:\n          type: string\n          description: extract terms from the common tables or index specific tables\n          enum:\n            - COMMON\n            - IDXSPECIFIC\n          example: IDXSPECIFIC\n          default: COMMON\n        observedDataSource:\n          type: string\n          description: extract observed statistics from knowledge base or the conversation log table\n          enum:\n            - KNOWLEDGEBASE\n            - CONV_LOGS\n          example: CONV_LOGS\n          default: KNOWLEDGEBASE\n        fieldsPrior:\n          type: string\n          description: fields to be used for the prior statistics\n          enum:\n            - question\n            - answer\n            - all\n          example: question\n          default: all\n        fieldsObserved:\n          type: string\n          description: fields to be used for the observed statistics\n          enum:\n            - question\n            - answer\n            - all\n          example: question\n          default: all\n        minWordsPerSentence:\n          type: number\n          format: integer\n          description: the minimum amount of words on the sentence\n          example: 10\n          default: 10\n        pruneTermsThreshold:\n          type: number\n          format: integer\n          description: a threshold on the number of terms for trigger pruning\n          example: 100000\n          default: 100000\n        misspellMaxOccurrence:\n          type: number\n          format: integer\n          description: given a big enough sample, min freq beyond what we consider the token a misspell\n          example: 5\n          default: 5\n        activePotentialDecay:\n          type: number\n          format: integer\n          description: decay value for the active potential\n          example: 10\n          default: 10\n        activePotential:\n          type: boolean\n          description: enable/disable the calculation of active potential\n          example: true\n          default: true\n        minSentenceInfoBit:\n          type: number\n          format: integer\n          description: the minimum amount of information for the sentence in bits\n          example: 16\n          default: 16\n        minKeywordInfo:\n          type: number\n          format: integer\n          description: the minimum amount of information per keywords in bits\n          example: 8\n          default: 8\n        totalInfo:\n          type: boolean\n          description: use the total information\n          example: false\n          default: false\n    TokenFrequencyItem:\n      type: object\n      properties:\n        token:\n          type: string\n          description: term\n          example: hello\n        priorFrequency:\n          type: number\n          format: double\n          description: occurrence in the prior table\n          example: 1999291\n        observedFrequency:\n          type: number\n          format: double\n          description: occurrence in the observed table\n          example: 3391293\n    TokenFrequency:\n      type: object\n      required:\n        - tokensFreq\n        - priorTotalTerms\n        - observedTotalTerms\n      properties:\n        tokensFreq:\n          type: array\n          items:\n            $ref: '#/components/schemas/TokenFrequencyItem'\n        priorTotalTerms:\n          type: number\n          format: long\n          description: total terms in prior table\n          example: 193942850\n        observedTotalTerms:\n          type: number\n          format: long\n          description: total terms in prior table\n          example: 1234566731\n    SynonymItem:\n      type: object\n      required:\n        - synonym\n        - synonymScore\n        - termSimilarityScore\n        - textDistanceWithSynonym\n      properties:\n        synonym:\n          type:  string\n          example: hello\n          description: String the synonym text\n        synonymScore:\n          type: number\n          format: double\n          example: 0.8\n          description: \u003e-\n            the similarity score between this token and the original, it can be different from the other score this field should be used to select the most similar term\n        termSimilarityScore:\n          type: number\n          format: double\n          example: 0.985895039899644\n          description: cosine distance between the synonym and the original term\n        textDistanceWithSynonym:\n          type: number\n          format: double\n          example: 0.985895039899644\n          description: the cosine distance between the vectorial sentence representation with and without the synonym\n    SynonymExtractionItem:\n      type: object\n      required:\n        - token\n        - isKeywordToken\n        - keywordExtractionScore\n        - synonymItem\n      properties:\n        token:\n          description: a token element with position and offset annotation\n          $ref: '#/components/schemas/TokenizerResponseItem'\n        isKeywordToken:\n          type: boolean\n          description: if the term was selected as relevant by Manaus or keyword extraction algorithm\n          example: true\n          default: false\n        keywordExtractionScore:\n          type: number\n          format: double\n          description: Manaus or keyword extraction algorithm score, only relevant if manausToken is true\n          example: 0.6\n          default: 0.0\n        synonymItem:\n          description: list of suggested synonyms\n          $ref: '#/components/schemas/SynonymItem'\n    TermCountFields:\n      type: string\n      description: fields to be used for the prior statistics\n      enum:\n        - question\n        - answer\n        - all\n      example: question\n      default: all\n    TermCount:\n      type: object\n      required:\n        - numDocs\n        - count\n      properties:\n        numDocs:\n          type: number\n          format: long\n          description: number of documents containing the term\n          example: 10983\n        count:\n          type: number\n          format: long\n          description: total term occurrence\n          example: 100911\n    DictSize:\n      type: object\n      properties:\n        numDocs:\n          type: number\n          format: long\n          description: total number of documents\n          example: 100331\n        answer:\n          type: number\n          format: long\n          description: total terms in answer field\n          example: 313103311\n        question:\n          type: number\n          format: long\n          description: total terms in question field\n          example: 12313311\n        total:\n          type: number\n          format: long\n          description: total terms in all field\n          example: 325416622\n    TotalTerms:\n      properties:\n        numDocs:\n          type: number\n          format: long\n          description: total number of documents\n          example: 200331\n        answer:\n          type: number\n          format: long\n          description: total terms in answer field\n          example: 420213311\n        question:\n          type: number\n          format: long\n          description: total terms in question field\n          example: 25313311\n    Doctypes:\n      type: string\n      description: \u003e-\n        document type:\n          * `NORMAL` -\u003e can be returned to the user as response\n          * `CANNED` -\u003e canned document, indexed but retrieved only under particular circumstances\n          * `HIDDEN` -\u003e hidden document, these are indexed but must not be retrieved, use this type for data used just to improve statistic for data retrieval\n          * `DECISIONTABLE` -\u003e does not contains conversation data, used to redirect the conversation to any state of the decision tree\n      example: NORMAL\n      enum:\n        - NORMAL\n        - CANNED\n        - HIDDEN\n        - DECISIONTABLE\n    Escalated:\n      type: string\n      description: \u003e-\n        an enumerated value which indicates whether the conversation was escalated to a human, those conversations\n        without a document containing the transferred value are assumed completed entirely by StarChat.\n        Values:\n          * `TRANSFERRED` -\u003e can be returned to the user as response\n          * `UNSPECIFIED` -\u003e usually in the middle of a conversation this value is not set, it is known at the end of the conversation or when the user requests to escalate\n      example: TRANSFERRED\n      enum:\n        - TRANSFERRED\n        - UNSPECIFIED\n    Answered:\n      type: string\n      description: \u003e-\n        an enumerated value which indicates whether or not StarChat provided an answer for the question.\n        Values:\n          * `ANSWERED` -\u003e the answer was provided\n          * `ANSWERED_FALSE_POSITIVE` -\u003e the answer was provided but the answer was marked as false positive\n          * `UNANSWERED` -\u003e Question for which no answer was provided ii.e. StarChat returns empty list or 404 or the agent didn’t answer\n          * `UNSPECIFIED` -\u003e when the information is not applicable\n      example: ANSWERED\n      enum:\n        - ANSWERED\n        - UNANSWERED\n        - UNSPECIFIED\n    Triggered:\n      type: string\n      description: \u003e-\n        an enumerated value which indicates whether the state was triggered via actions (e.g. via buttons, or input validation).\n        Values:\n          * `BUTTON` -\u003e the answer was triggered by a button\n          * `ACTION` -\u003e the answer was triggered by an action\n          * `UNSPECIFIED` -\u003e usually this information is not applicable except in the other two cases mentioned before.\n      example: button\n      enum:\n        - BUTTON\n        - ACTION\n        - UNSPECIFIED\n    Followup:\n      type: string\n      description: \u003e-\n        an enumerated value which depends on the time of day and status of customer service during which happened a followup\n        values:\n          * `FOLLOWUP` -\u003e follow up\n          * `FOLLOWUP_BY_TIME` -\u003e follow up dependant on the time of the day\n          * `UNSPECIFIED` -\u003e not applicable\n      example: followupByTime\n      enum:\n        - FOLLOWUP\n        - FOLLOWUP_BY_TIME\n        - UNSPECIFIED\n    Agent:\n      type: string\n      description: \u003e-\n        tell if the answer was provided by a human agent or by chatbot (StarChat), this is an enumerated field with the following values\n        Values:\n          * `HUMAN_REPLY` -\u003e Answer provided by an agent, must be used when the conversation has been escalated\n                  and the platform (a human is carrying on the conversation) and is not possible to discriminate\n                  between HUMAN_PICKED and HUMAN_REPLY\n          * `HUMAN_PICKED` -\u003e When an agent chooses and answer suggestion provided by smartLayer\n          * `STARCHAT` -\u003e the answer was provided by StarChat\n          * `CONNECTOR` -\u003e the answer was provided by the connector, usually because starchat doesn't responds\n          * `UNSPECIFIED` -\u003e when the information is unset/not applicable\n      example: HUMAN_REPLY\n      enum:\n        - HUMAN_REPLY\n        - HUMAN_PICKED\n        - STARCHAT\n        - UNSPECIFIED\n    QAAggregationsTypes:\n      type: string\n      description: \u003e-\n        type of statistical aggregated data generated from a QA data type. Values:\n          * `avgFeedbackConvScore` -\u003e the average score for the conversations (transferred and non-transferred)\n          * `avgFeedbackAnswerScore` -\u003e the average score for all the Answers (transferred and non-transferred)\n          * `avgAlgorithmConvScore` -\u003e the average score for the conversations (transferred and non-transferred), the scores are provided by an algorithm\n          * `avgAlgorithmAnswerScore` -\u003e the average score for all the Answers (transferred and non-transferred), the scores are provided by an algorithm\n          * `scoreHistogram` -\u003e the distribution of scores, an histogram (transferred and non-transferred)\n          * `scoreHistogramNotTransferred` -\u003e the distribution of scores for the non-transferred conversations, an histogram\n          * `scoreHistogramTransferred` -\u003e the distribution of scores for the transferred conversations, an histogram\n          * `conversationsHistogram` -\u003e time range histogram of the number of conversations on a time range (transferred and non-transferred)\n          * `conversationsNotTransferredHistogram` -\u003e time range histogram of the number of conversations on a time range (non-transferred only)\n          * `conversationsTransferredHistogram` -\u003e time range histogram of the number of conversations on a time range (transferred only)\n          * `qaPairHistogram` -\u003e time range histogram of the Q/A documents (only starchat agent, answered + unanswered)\n          * `qaPairTriggeredHistogram` -\u003e  time range histogram of the triggered Q/A documents (only starchat agent, answered + unanswered)\n          * `qaPairAnsweredHistogram` -\u003e time range histogram of the number of answered Q/A documents (only starchat agent)\n          * `qaPairAnsweredFalsePositiveTriggeredHistogram` -\u003e time range histogram of the number of answered and triggered Q/A documents marked as false positive (only starchat agent)\n          * `qaPairAnsweredTriggeredHistogram` -\u003e time range histogram of the number of answered and triggered Q/A documents (only starchat agent)\n          * `qaPairAnsweredFalsePositiveHistogram` -\u003e time range histogram of the number of answered Q/A documents marked as false positive (only starchat agent)\n          * `qaPairUnansweredHistogram` -\u003e time range histogram of the number of unanswered Q/A documents (only starchat agent)\n          * `qaMatchedStatesHistogram` -\u003e histogram of matched states\n          * `qaMatchedStatesWithScoreHistogram` -\u003e histogram of matched states with score\n          * `avgFeedbackNotTransferredConvScoreOverTime` -\u003e average score for the conversations (non-transferred only) on each time interval\n          * `avgFeedbackTransferredConvScoreOverTime` -\u003e average score for the conversations (transferred only) on each time interval\n          * `avgAlgorithmNotTransferredConvScoreOverTime` -\u003e average score for the conversations (non-transferred only) on each time interval, the scores are provided by an algorithm\n          * `avgAlgorithmTransferredConvScoreOverTime` -\u003e average score for the conversations (transferred only) on each time interval, the scores are provided by an algorithm\n          * `avgFeedbackConvScoreOverTime` -\u003e average score for the conversations (transferred and non-transferred) on each time interval\n          * `avgAlgorithmAnswerScoreOverTime` -\u003e average score for the answers (transferred and transferred) on each time interval\n          * `avgFeedbackAnswerScoreOverTime` -\u003e average score for the answers (transferred and non-transferred) on each time interval, the scores are provided by an algorithm\n          * `avgAlgorithmConvScoreOverTime` -\u003e average score for the answers (transferred and transferred) on each time interval, the scores are provided by an algorithm\n      example: avgFeedbackConvScore\n      enum:\n        - avgAlgorithmAnswerScore\n        - avgAlgorithmAnswerScoreOverTime\n        - avgAlgorithmConvScore\n        - avgAlgorithmConvScoreOverTime\n        - avgAlgorithmNotTransferredAnswerScoreOverTime\n        - avgAlgorithmNotTransferredConvScoreOverTime\n        - avgAlgorithmTransferredAnswerScoreOverTime\n        - avgAlgorithmTransferredConvScoreOverTime\n        - avgFeedbackAnswerScore\n        - avgFeedbackAnswerScoreOverTime\n        - avgFeedbackConvScore\n        - avgFeedbackConvScoreOverTime\n        - avgFeedbackNotTransferredAnswerScoreOverTime\n        - avgFeedbackNotTransferredConvScoreOverTime\n        - avgFeedbackTransferredAnswerScoreOverTime\n        - avgFeedbackTransferredConvScoreOverTime\n        - conversationsHistogram\n        - conversationsNotTransferredHistogram\n        - conversationsTransferredHistogram\n        - qaMatchedStatesHistogram\n        - qaPairAnsweredFalsePositiveHistogram\n        - qaPairAnsweredFalsePositiveTriggeredHistogram\n        - qaPairAnsweredHistogram\n        - qaPairAnsweredTriggeredHistogram\n        - qaPairHistogram\n        - qaPairTriggeredHistogram\n        - qaPairUnansweredHistogram\n        - scoreHistogram\n        - scoreHistogramNotTransferred\n        - scoreHistogramTransferred\n    TimeInterval:\n      type: string\n      description: \u003e-\n        a time interval description. It can be specified using a number followed by a time unit description \u003cn\u003e\u003cunit\u003e\n        for instance : 1m, 1h, 5d, 50s\n        Valid time units are:\n          * `ms`-\u003e milliseconds\n          * `m` -\u003e minutes\n          * `h` -\u003e hours\n          * `d` -\u003e days\n      example: 30d\n    CountOverTimeHistogramItem:\n      type: object\n      required:\n        - key\n        - keyAsString\n        - docCount\n      properties:\n        key:\n          type: number\n          format: long\n          description: a timestamp in milliseconds (bucket)\n          example: 1550534500000\n        keyAsString:\n          type: string\n          description: \u003e-\n            string representation of the bucket, format is 'YYYY-MM-dd : HH:mm:ss'\n          example: \"2019-02-19 : 01:00:00\"\n        docCount:\n          type: number\n          format: long\n          description: how many conversations falls in the bucket\n          example: 113\n    AvgScoresHistogramItem:\n      type: object\n      required:\n        - key\n        - keyAsString\n        - docCount\n        - avgScore\n      properties:\n        key:\n          type: number\n          format: long\n          description: a timestamp in milliseconds (bucket)\n          example: 1550584800000\n        keyAsString:\n          type: string\n          description: \u003e-\n            string representation of the bucket, format is 'YYYY-MM-dd : HH:mm:ss'\n          example: \"2019-02-19 : 14:00:00\"\n        docCount:\n          type: number\n          format: long\n          description: how many conversations falls in the bucket\n          example: 7\n        avgScore:\n          type: number\n          format: double\n          description: the average score in bucket\n          example: 12.0\n    ScoreHistogramItem:\n      type: object\n      required:\n        - key\n        - docCount\n      properties:\n        key:\n          type: number\n          format: double\n          description: a score value (bucket)\n          example: 0.0\n        docCount:\n          type: number\n          format: long\n          description: how many score falls in the bucket\n          example: 13214\n    LabelCountHistogramItem:\n      type: object\n      required:\n        - key\n        - docCount\n      properties:\n        key:\n          type: string\n          description: a label (bucket)\n          example: \"keyword1\"\n        docCount:\n          type: number\n          format: long\n          description: how many score falls in the bucket\n          example: 13214\n    QAAggregatedAnalytics:\n      type: object\n      required:\n        - totalDocuments\n        - totalConversations\n      properties:\n        totalDocuments:\n          type: number\n          format: long\n          description: the number of document selected by the query\n          example: 135884\n        totalConversations:\n          type: number\n          format: long\n          description: the number of conversations selected by the query\n          example: 19716\n        avgFeedbackConvScore:\n          type: number\n          description: the average conversations score\n          format: double\n          example: 3.0\n        avgAlgorithmConvScore:\n          type: number\n          description: the average conversations score (algorithms score)\n          format: double\n          example: 4.0\n        avgAlgorithmAnswerScore:\n          type: number\n          description: the average answers score\n          format: double\n          example: 3.4\n        avgFeedbackAnswerScore:\n          type: number\n          description: the average answers score (algorithms score)\n          format: double\n          example: 3.7\n        scoreHistograms:\n          type: object\n          description: histogram of scores\n          additionalProperies:\n            type: array\n            items:\n              $ref: '#/components/schemas/ScoreHistogramItem'\n          example: {\"scoreHistogram\": [{\"key\": 0.0, \"docCount\": 13213}, {\"key\": 1.0, \"docCount\": 213}, {\"key\": 4.0, \"docCount\": 1013}]}\n        labelCountHistograms:\n          type: object\n          description: count of labels\n          additionalProperies:\n            type: array\n            items:\n              $ref: '#/components/schemas/LabelCountHistogramItem'\n          example: {\"scoreHistogram\": [{\"key\": \"keyword1\", \"docCount\": 13213}, {\"key\": \"keyword2\", \"docCount\": 213}, {\"key\": \"keyword3\", \"docCount\": 1013}]}\n        countOverTimeHistograms:\n          type: object\n          description: histogram of conversations (conversation counts)\n          additionalProperies:\n            type: array\n            items:\n              $ref: '#/components/schemas/CountOverTimeHistogramItem'\n          example: {\"conversationsHistogram\": [{\"key\": 1550534400000, \"keyAsString\": \"2019-02-19 : 00:00:00\", \"docCount\": 1213},\n                                               {\"key\": 1550534500000, \"keyAsString\": \"2019-02-19 : 01:00:00\", \"docCount\": 113},\n                                               {\"key\": 1550534600000, \"keyAsString\": \"2019-02-19 : 02:00:00\", \"docCount\": 1},\n                                               {\"key\": 1550534700000, \"keyAsString\": \"2019-02-19 : 03:00:00\", \"docCount\": 5331}]}\n        scoresOverTime:\n          type: object\n          description: distribution of scores over time\n          additionalProperies:\n            type: array\n            items:\n              $ref: '#/components/schemas/AvgScoresHistogramItem'\n          example: {\"avgFeedbackConvScoreOverTime\": [{\"keyAsString\": \"2019-02-19 : 08:00:00\", \"key\": 1550563200000, \"docCount\": 1, \"avgScore\": 0.0},\n                                                     {\"keyAsString\": \"2019-02-19 : 12:00:00\", \"key\": 1550577600000, \"docCount\": 110168, \"avgScore\": 1.0},\n                                                     {\"keyAsString\": \"2019-02-19 : 13:00:00\", \"key\": 1550581200000, \"docCount\": 25705, \"avgScore\": 5.83544057576347E-4},\n                                                     {\"keyAsString\": \"2019-02-19 : 14:00:00\", \"key\": 1550584800000, \"docCount\": 7, \"avgScore\": 12.0}]}\n    QAAggregatedAnalyticsRequest:\n      type: object\n      properties:\n        interval:\n          $ref: '#/components/schemas/TimeInterval'\n        minDocInBuckets:\n          type: number\n          format: long\n          description: \u003e-\n            the min number of documents in a bucket, when greater than zero the empty buckets will not be returned.\n            When zero, the empty buckets will be returned but only those between the first non empty bucket and the last.\n          example: 0\n          default: 1\n        timestampGte:\n          type: number\n          format: long\n          description: filter by records insertion timestamp, if not specified no lower bound\n          example: 1549283700000\n        timestampLte:\n          type: number\n          format: long\n          description: filter by records insertion timestamp, if not specified no upper bound\n          example: 1549283900000\n        aggregations:\n          type: array\n          description: list of aggregation which are to be returned, the returned object will use the aggregation type as a key in the returned object\n          items:\n            $ref: '#/components/schemas/QAAggregationsTypes'\n          example: ['totalConversations', 'avgFeedbackConvScore', 'scoreHistogram', 'avgAlgorithmConvScoreOverTime']\n          default: []\n        timezone:\n          type: string\n          description: an ISO 8601 UTC offset, used for the time based histograms in addition to the EPOC timestamp in millis.\n          example: \"-08:00\"\n          default: \"+00:00\"\n    QADocumentCore:\n      type: object\n      properties:\n        question:\n          type: string\n          description: usually what the user of the chat says\n          example: I forgot my password\n        questionNegative:\n          type: array\n          description: list of sentences different to the main question\n          items:\n            type: string\n          example: I remember my password\n        questionScoredTerms:\n          type: array\n          description: question's terms list with score (tuples)\n          items:\n            type: array\n            example: [\"password\", 0.2121]\n        answer:\n          type: string\n          description: usually what the operator of the chat says\n          example: I can reset the password for you\n        answerScoredTerms:\n          type: array\n          description: answer's terms list with score (tuples)\n          items:\n            type: array\n            example: [\"reset\", 0.2121]\n        verified:\n          type: boolean\n          description: whether the conversation was verified by an operator or not\n          default: false\n          example: true\n        topics:\n          type: string\n          description: list of topics\n          example: \"password reset\"\n        done:\n          type: boolean\n          description: the conversation has marked as done, this field is expected to set for each item of the conversation\n          example: true\n          default: false\n    AggAnnotations:\n      type: object\n      properties:\n        convIdxCounter:\n          type: number\n          format: long\n          description: the number of items in the conversation\n    AggAnnotationsSearch:\n      type: object\n      properties:\n        convIdxCounterGte:\n          type: number\n          format: long\n          description: the minimum number of items in the conversation, default no limit\n          example: 1\n        convIdxCounterLte:\n          type: number\n          format: long\n          description: the maximum number of items in the conversation, default no limit\n          example: 1\n    QADocumentAnnotations:\n      type: object\n      properties:\n        dclass:\n          type: string\n          description: document classes\n          example: \"group0 group1\"\n        doctype:\n          type: string\n          default: NORMAL\n          example: HIDDEN\n          $ref: '#/components/schemas/Doctypes'\n        state:\n          type: string\n          description: eventual link to any of the state machine states\n          example: \"forgot_password\"\n        agent:\n          type: string\n          default: STARCHAT\n          example: HUMAN_PICKED\n          $ref: '#/components/schemas/Agent'\n        escalated:\n          type: string\n          default: UNSPECIFIED\n          example: TRANSFERRED\n          $ref: '#/components/schemas/Escalated'\n        answered:\n          type: string\n          default: ANSWERED\n          example: UNANSWERED\n          $ref: '#/components/schemas/Answered'\n        triggered:\n          type: string\n          default: UNSPECIFIED\n          example: BUTTON\n          $ref: '#/components/schemas/Triggered'\n        followup:\n          type: string\n          default: UNSPECIFIED\n          example: FOLLOWUP\n          $ref: '#/components/schemas/Followup'\n        feedbackConv:\n          type: string\n          description: A feedback provided by the user to the conversation\n          example: Thanks I solved my problem,  you were very helpful\n        feedbackConvScore:\n          type: number\n          format: double\n          description: \u003e-\n            a field to store the score provided by the user to the conversation.\n            Since the default value is 0.0 (no feedback, to indicate extremely negative feedback a value greater then\n             0.0 must be chosen)\n          example: 4.0\n          default: 0.0\n        algorithmConvScore:\n          type: number\n          format: double\n          description: \u003e-\n            a field to store the score calculated by an algorithm related to the conversation i.e. a sentiment\n            analysis tool (for future use).\n            Since the default value is 0.0 (no feedback, to indicate extremely negative feedback a value greater then\n              0.0 must be chosen)\n          example: 2.0\n          default: 0.0\n        feedbackAnswerScore:\n          type: number\n          format: double\n          description: \u003e-\n            a field to store the score provided by the user for the answer.\n            Since the default value is 0.0 (no feedback, to indicate extremely negative feedback a value greater then\n              0.0 must be chosen)\n          example: 4.0\n          default: 0.0\n        algorithmAnswerScore:\n          type: number\n          format: double\n          description: \u003e-\n            a field to store the score calculated by an algorithm related to the answer i.e. a sentiment\n            analysis tool (for future use).\n            Since the default value is 0.0 (no feedback, to indicate extremely negative feedback a value greater then\n              0.0 must be chosen)\n          example: 2.0\n          default: 0.0\n        responseScore:\n          type: number\n          format: double\n          description: score of the response e.g. Starchat response score\n          example: 0.3\n        start:\n          type: boolean\n          description: event determined when a start state is loaded\n          example: true\n          default: false\n    QADocumentAnnotationsSearch:\n      type: object\n      properties:\n        doctype:\n          type: array\n          description: search for a specific doctypes\n          items:\n            $ref: '#/components/schemas/Doctypes'\n          example: [ \"NORMAL\" ]\n        dclass:\n          type: string\n          description: search for a document class\n          example: \"group0\"\n        state:\n          type: string\n          description: search for documents associated to a state\n          example: \"check_policy_expiration\"\n        agent:\n          type: array\n          descripton: values to match (search documents with at least one value)\n          items:\n            $ref: '#/components/schemas/Agent'\n          example: [\"HUMAN_PICKED\"]\n        escalated:\n          type: array\n          description: values to match (search documents with at least one value)\n          items:\n            $ref: '#/components/schemas/Escalated'\n          example: [ \"TRANSFERRED\" ]\n        answered:\n          type: array\n          description: values to match (search documents with at least one value)\n          items:\n            $ref: '#/components/schemas/Answered'\n          example: [ \"ANSWERED\" ]\n        triggered:\n          type: array\n          description: values to match (search documents with at least one value)\n          items:\n            $ref: '#/components/schemas/Triggered'\n          example: [ \"BUTTON\" ]\n        followup:\n          type: array\n          description: values to match (search documents with at least one value)\n          items:\n          $ref: '#/components/schemas/Followup'\n          example: [ \"FOLLOWUP\" ]\n        feedbackConv:\n          type: string\n          description: A feedback provided by the user to the conversation\n          example: Thanks I solved my problem, you were very helpful\n        feedbackScoreConvGte:\n          type: number\n          format: double\n          description: \u003e-\n            min score value, if not specified -\u003e no lower bound (conversation).\n          example: 1.0\n        feedbackScoreConvLte:\n          type: number\n          format: double\n          description: max score value, if not specified -\u003e no upper bound (conversation)\n          example: 5.0\n        algorithmScoreConvGte:\n          type: number\n          format: double\n          description: \u003e-\n            min score value, if not specified -\u003e no lower bound (conversation)\n          example: 4.0\n        algorithmScoreConvLte:\n          type: number\n          format: double\n          description: max score value, if not specified -\u003e no upper bound (conversation)\n          example: 5.0\n        feedbackScoreAnswerGte:\n          type: number\n          format: double\n          description: \u003e-\n            min score value, if not specified -\u003e no lower bound (answer)\n          example: 1.0\n        feedbackScoreAnswerLte:\n          type: number\n          format: double\n          description: \u003e-\n            max score value, if not specified -\u003e no upper bound (answer)\n          example: 5.0\n        algorithmScoreAnswerGte:\n          type: number\n          format: double\n          description: min score value, if not specified -\u003e no lower bound (answer)\n          example: 4.0\n        algorithmScoreAnswerLte:\n          type: number\n          format: double\n          description: \u003e-\n            max score value, if not specified -\u003e no upper bound (answer)\n          example: 5.0\n        responseScoreGte:\n          type: number\n          format: double\n          description: min StarChat score value, if not specified -\u003e no lower bound (answer)\n          example: 0.8\n        responseScoreLte:\n          type: number\n          format: double\n          description: \u003e-\n            max StarChat score value, if not specified -\u003e no upper bound (answer)\n          example: 0.9\n        start:\n          type: boolean\n          description: event determined when a start state is loaded\n          example: true\n    QADocumentCoreSearch:\n      type: object\n      properties:\n        question:\n          type: string\n          description: a text to be matched with the question field\n          example: \u003e-\n            when should I renew my insurance?\n        questionScoredTerms:\n          type: string\n          description: a string of terms matched with the question scored terms field\n          example: \"when renew insurance\"\n        answer:\n          type: string\n          description: a text to be matched with the answer field\n          example: \u003e-\n            please give me your policy number, I will check when your policy expires.\n        answerScoredTerms:\n          type: string\n          description: a string of terms matched with the answr scored terms field\n          example: \"policy number expires\"\n        verified:\n          type: boolean\n          description: search for verified/unverified documents\n          example: true\n        topics:\n          type: string\n          description: search for specific topics\n          example: \"policy renew\"\n        done:\n          type: boolean\n          description: the conversation has marked as done, this field is expected to set for each item of the conversation\n          example: true\n    QADocument:\n      type: object\n      required:\n        - id\n        - conversation\n        - indexInConversation\n      properties:\n        id:\n          type: string\n          description: unique id of the document\n          example: id123\n        conversation:\n          type: string\n          description: ID of the conversation (multiple q\u0026a may be inside a conversation)\n          example: conv_id_1234\n        indexInConversation:\n          type: number\n          format: integer\n          description: the index of the document in the conversation flow (Start from 1, 0 is reserved)\n          example: 10\n        coreData:\n          type: object\n          $ref: '#/components/schemas/QADocumentCore'\n        aggAnnotations:\n          type: object\n          $ref: '#/components/schemas/AggAnnotations'\n        annotations:\n          type: object\n          $ref: '#/components/schemas/QADocumentAnnotations'\n        status:\n          type: number\n          format: integer\n          description: \u003e-\n            tell whether the document is locked for editing or not, useful for a GUI to avoid concurrent modifications, 0 means no operations pending\n          example: 0\n        timestamp:\n          type: number\n          format: long\n          description: record insertion timestamp (if not provided on document creation is automatically calculated)\n          example: 1549283768918\n    QADocumentUpdate:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n          example: ['id1', 'id2']\n        conversation:\n          type: string\n          description: ID of the conversation (multiple q\u0026a may be inside a conversation)\n          example: conv_id_1234\n        indexInConversation:\n          type: number\n          format: integer\n          description: the index of the document in the conversation flow (Start from 1, 0 is reserved)\n          example: 10\n        coreData:\n          type: object\n          $ref: '#/components/schemas/QADocumentCore'\n        annotations:\n          type: object\n          $ref: '#/components/schemas/QADocumentAnnotations'\n        status:\n          type: number\n          format: integer\n          description: \u003e-\n            tell whether the document is locked for editing or not, useful for a GUI to avoid concurrent modifications, 0 means no operations pending\n          example: 0\n        timestamp:\n          type: number\n          format: long\n          description: record insertion timestamp\n          example: 1549283768918\n    UpdateByQueryResult:\n      type: object\n      properties:\n        timedOut:\n          type: boolean\n          description: whether the operation returned after a timeout\n          default: false\n          example: false\n        totalDocs:\n          type: number\n          format: long\n          description: the total number of documents\n          example: 10\n        updatedDocs:\n          type: number\n          format: long\n          description: the number of documents updated\n          example: 10\n        versionConflicts:\n          type: number\n          format: long\n          description: the number of update conflicts\n          example: 0\n    QADocumentUpdateByQuery:\n      type: object\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n          example: ['id1', 'id2']\n        conversation:\n          type: string\n          description: ID of the conversation (multiple q\u0026a may be inside a conversation)\n          example: conv_id_1234\n        indexInConversation:\n          type: number\n          format: integer\n          description: the index of the document in the conversation flow (Start from 1, 0 is reserved)\n          example: 10\n        coreData:\n          type: object\n          $ref: '#/components/schemas/QADocumentCore'\n        annotations:\n          type: object\n          $ref: '#/components/schemas/QADocumentAnnotations'\n        status:\n          type: number\n          format: integer\n          description: \u003e-\n            tell whether the document is locked for editing or not, useful for a GUI to avoid concurrent modifications, 0 means no operations pending\n          example: 0\n        timestamp:\n          type: number\n          format: long\n          description: record insertion timestamp\n          example: 1549283768918\n    UpdateQAByQueryReq:\n      type: object\n      required:\n        - documentSearch\n        - document\n      properties:\n        documentSearch:\n          $ref: '#/components/schemas/QADocumentSearch'\n        document:\n          $ref: '#/components/schemas/QADocumentUpdateByQuery'\n    SearchQADocument:\n      type: object\n      required:\n        - score\n        - document\n      properties:\n        score:\n          type: number\n          format: float\n          description: search score\n          example: 0.0\n        document:\n          $ref: '#/components/schemas/QADocument'\n    Conversation:\n      type: object\n      required:\n        - count\n        - docs\n      properties:\n        count:\n          type: number\n          format: integer\n          description: number of documents in the conversation\n          default: 0\n          example: 1\n        docs:\n          type: array\n          items:\n            $ref: '#/components/schemas/QADocument'\n    Conversations:\n      type: object\n      required:\n        - total\n        - conversations\n      properties:\n        total:\n          type: number\n          format: integer\n          description: number of conversations returned\n          default: 0\n          example: 1\n        conversations:\n          type: array\n          items:\n            $ref: '#/components/schemas/Conversation'\n    SearchQADocumentsResults:\n      type: object\n      required:\n        - totalHits\n        - hitsCount\n        - maxScore\n        - hits\n      properties:\n        totalHits:\n          type: number\n          format: long\n          description: the number of documents matching the query\n          example: 101121\n        hitsCount:\n          type: number\n          format: integer\n          description: number of documents returned\n          default: 0\n          example: 10\n        maxScore:\n          type: number\n          format: float\n          example: 0.9\n          default: 0.0\n        hits:\n          type: array\n          items:\n            $ref: '#/components/schemas/SearchQADocument'\n    QADocumentSearch:\n      type: object\n      properties:\n        from:\n          type: number\n          format: integer\n          description: return results starting from the n-th entry\n          example: 0\n          default: 0\n        size:\n          type: number\n          format: integer\n          description: how many result are to be returned\n          example: 10000\n          default: 10\n        minScore:\n          type: number\n          format: float\n          description: a threshold which exclude the results with a too low score\n          default: 0\n        sortBy:\n          type: array\n          description: list of fields used to sort the search result. If empty, SCORE will be used by default\n          items:\n            $ref: '#/components/schemas/QASearchSortBy'\n          example:\n            - TIMESTAMP\n            - IDX_IN_CONVERSATION\n        sortByConvIdIdx:\n          type: boolean\n          deprecated: true\n          description: \u003e-\n            Deprecated since version 5.3, will be removed in StarChat 6: use sortBy instead\n            whether to sort the documents by ConversationID and index in conversation or if sort by score.\n            Note that the score is greater than 0 only for text queries, fields matching will have no\n            contribution to scoring i.e. fields matching only queries will return 0 score for all the documents.\n          example: true\n          default: false\n        conversation:\n          type: array\n          description: search for a specific conversation ids (or query)\n          items:\n            type: string\n          example: [\"conv123\"]\n        indexInConversation:\n          type: number\n          format: integer\n          description: query by index of the sentence in conversation\n          example: 10\n        coreData:\n          $ref: '#/components/schemas/QADocumentCoreSearch'\n        aggAnnotations:\n          $ref: '#/components/schemas/AggAnnotationsSearch'\n        annotations:\n          $ref: '#/components/schemas/QADocumentAnnotationsSearch'\n        status:\n          type: number\n          format: integer\n          description: search documents with a specific state\n          example: 0\n        timestampGte:\n          type: number\n          format: long\n          description: record insertion timestamp, if not specified no lower bound\n          example: 1549283700000\n        timestampLte:\n          type: number\n          format: long\n          description: record insertion timestamp, if not specified no upper bound\n          example: 1549283900000\n        random:\n          type: boolean\n          description: add some random sampled document in the returned document list\n          example: true\n          default: false\n    ReindexResult:\n      type: object\n      required:\n        - created\n        - deleted\n        - updated\n        - total\n        - versionConflicts\n      properties:\n        created:\n          type: number\n          format: long\n          description: 'number of items created'\n          example: 100\n        deleted:\n          type: number\n          format: long\n          description: 'number of items deleted'\n          example: 0\n        updated:\n          type: number\n          format: long\n          description: 'number of items updated'\n          example: 0\n        total:\n          type: number\n          format: long\n          description: 'total number of items'\n          example: 100\n        versionConflicts:\n          type: number\n          format: long\n          description: 'number of version conflicts'\n          example: 0\n    UpdateQATermsRequest:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          description: \"document id\"\n        tokenizer:\n          type: string\n          description: \u003e-\n            \"the tokenizer to use (see TokenizersSet data structure for the available tokenizers)\"\n          example: \"space_punctuation\"\n          default: \"space_punctuation\"\n        commonOrSpecificSearchPrior:\n          type: string\n          description: extract prior statistics from the common tables or index specific tables\n          enum:\n            - COMMON\n            - IDXSPECIFIC\n          example: \"IDXSPECIFIC\"\n          default: \"COMMON\"\n        commonOrSpecificSearchObserved:\n          type: string\n          description: extract observed statistics from the common tables or index specific tables\n          enum:\n            - COMMON\n            - IDXSPECIFIC\n          example: \"IDXSPECIFIC\"\n          default: \"COMMON\"\n        observedDataSource:\n          type: string\n          description: extract observed statistics from knowledge base or the conversation log table\n          enum:\n            - KNOWLEDGEBASE\n            - CONV_LOGS\n          example: \"KNOWLEDGEBASE\"\n          default: \"KNOWLEDGEBASE\"\n        fieldsPrior:\n          type: string\n          description: fields to be used for the prior statistics\n          enum:\n            - question\n            - answer\n            - all\n          example: \"all\"\n          default: \"all\"\n        fieldsObserved:\n          type: string\n          description: fields to be used for the observed statistics\n          enum:\n            - question\n            - answer\n            - all\n          example: \"all\"\n          default: \"all\"\n        minWordsPerSentence:\n          type: number\n          format: integer\n          description: the minimum amount of words on the sentence\n          example: 10\n          default: 10\n        pruneTermsThreshold:\n          type: number\n          format: integer\n          description: a threshold on the number of terms for trigger pruning\n          example: 100000\n          default: 100000\n        misspellMaxOccurrence:\n          type: number\n          format: integer\n          description: given a big enough sample, min freq beyond what we consider the token a misspell\n          example: 10\n          default: 5\n        activePotentialDecay:\n          type: number\n          format: integer\n          description: decay value for the active potential\n          example: 15\n          default: 10\n        activePotential:\n          type: boolean\n          description: enable/disable the calculation of active potential\n          example: false\n          default: true\n        totalInfo:\n          type: boolean\n          description: use the total information\n          example: true\n          default: false\n    CountersCacheParameters:\n      type: object\n      properties:\n        dictSizeCacheMaxSize:\n          type: number\n          format: integer\n          description: max cache entries for dictionary size\n          example: 500\n          default: 1000\n        totalTermsCacheMaxSize:\n          type: number\n          format: integer\n          description: max cache entries for total terms counting\n          example: 500\n          default: 1000\n        countTermCacheMaxSize:\n          type: number\n          format: integer\n          description: max cache entries for index terms counting\n          example: 200000\n          default: 100000\n        cacheStealTimeMillis:\n          type: number\n          format: integer\n          description: max validity time for a cache entry\n          example: 10000000\n          default: 43200000\n    CountersCacheSize:\n      type: object\n      required:\n        - dictSizeCacheSize\n        - totalTermsCacheSize\n        - countTermCacheSize\n      properties:\n        dictSizeCacheSize:\n          type: number\n          format: integer\n          description: cache size for index dictionary\n          example: 1000\n        totalTermsCacheSize:\n          type: number\n          format: integer\n          description: cache size for index total terms count\n          example: 1000\n        countTermCacheSize:\n          type: number\n          format: integer\n          description: cache size for index terms count\n          example: 100000\n    QASearchSortBy:\n      type: string\n      enum:\n        - CONVERSATION\n        - IDX_IN_CONVERSATION\n        - TIMESTAMP\n        - SCORE\n      example: SCORE\n      description: \u003e-\n        Sorting field for the QA documents:\n          * `CONVERSATION` - sort by conversationId\n          * `IDX_IN_CONVERSATION` - sort by indexInCoversation\n          * `TIMESTAMP` - sort by insert timestamp\n          * `SCORE` - sort by score\n    SearchAlgorithm:\n      type: string\n      enum:\n        - SHINGLES2\n        - SHINGLES3\n        - SHINGLES4\n        - STEM_SHINGLES2\n        - STEM_SHINGLES3\n        - STEM_SHINGLES4\n        - STEM_BOOST_EXACT\n        - NGRAM2\n        - STEM_NGRAM2\n        - NGRAM3\n        - STEM_NGRAM3\n        - NGRAM4\n        - STEM_NGRAM4\n        - AUTO\n        - DEFAULT\n      example: NGRAM3\n      description: \u003e-\n        Algorithm used for search:\n          * `SHINGLES2` - word shingle with size 2 (unnormalized)\n          * `SHINGLES3` - word shingle with size 3 (unnormalized)\n          * `SHINGLES4` - word shingle with size 4 (unnormalized)\n          * `STEM_SHINGLES2` - word shingle with stem and size 2 (unnormalized)\n          * `STEM_SHINGLES3` - word shingle with stem and size 3 (unnormalized)\n          * `STEM_SHINGLES4` - word shingle with stem and size 4 (unnormalized)\n          * `STEM_BOOST_EXACT` - stemmed search with boost for exact match (unnormalized)\n          * `NGRAM2` - character ngram search with size 2 (normalized 0-1)\n          * `STEM_NGRAM2` - character stemmed ngram search with size 2 (normalized 0-1)\n          * `NGRAM3` - character ngram search with size 3 (normalized 0-1)\n          * `STEM_NGRAM3` - character stemmed ngram search with size 3 (normalized 0-1)\n          * `NGRAM4` - character ngram search with size 4 (normalized 0-1)\n          * `STEM_NGRAM4` - character stemmed ngram search with size 4 (normalized 0-1)\n          * `AUTO` - StarChat choose which algorithm is better considering the query length\n          * `DEFAULT` - AUTO\n    BayesOperatorCacheServiceResponse:\n      type: object\n      properties:\n        indexName:\n          type: string\n          description: indexName cache has been loaded\n          example: index\n        status:\n          type: boolean\n          description: if loading has been successful\n          example: true\n        message:\n          type: string\n          description: description containing error or number of elements loaded\n    actionInput:\n      type: array\n      description: \u003e-\n        a list of JSON objects, the input passed to action's function (e.g., for show_buttons is button's description)\n      items:\n        type: object\n        additionalProperties:\n          type: string\n      example: [\n      {\n        \"state\": \"talktohuman\",\n        \"label\": \"Talk to human\",\n        \"type\": \"button\",\n        \"url\": \"https://www.getjenny.com\",\n        \"tag\": \"#human\",\n        \"target\": \"_blank\"\n      },\n      {\n        \"state\": \"feedback\",\n        \"label\": \"insert a feedback\",\n        \"type\": \"button\",\n        \"url\": \"https://www.getjenny.com\",\n        \"tag\": \"#feedback\",\n        \"target\": \"_blank\"\n      }\n      ]"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"AnalyzerEvaluateResponse\": parse schema: property \"data\": parse schema: resolve \"#/components/schemas/AnalyzersData\": parse schema: property \"traversedStates\": parse default: expected type \"array\", got \"string\""
}