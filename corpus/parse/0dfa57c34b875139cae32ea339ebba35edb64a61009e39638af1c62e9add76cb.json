{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/swarmee/swagger-4-es"
		},
		"file": {
			"name": "openapi.json",
			"size": 0,
			"path": "swagger-4-es development/images/swagger/source/openapi/openapi.json",
			"byteSize": 160172,
			"content": "{\n  \"openapi\": \"3.0.2\",\n  \"info\": {\n    \"title\": \"swagger-4-es (elasticsearch)\",\n    \"description\": \"This Swagger UI page runs through the basic [Elasticsearch](https://www.elastic.co/) API end points (it also works for [Opensearch](https://opensearch.org/) end points). It is intended to be used as a first introduction for anybody looking to pick upsome elasticsearch knowledge. \\n\\nThe page runs through the basics of index management and the key `CRUD` operations. It then goes on to document a number of the more complex features. Sample payloads and responses have been provided for each endpoint to assist in the learning process. Every CRUD end point requires that you specify an index name as a path parameter. For instructions on how to setup a elasticsearch cluster and connect up this Swagger UI page - head over to the [swagger-4-es](https://www.swarmee.net/swagger%204%20es/) page.\",\n    \"version\": \"1.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"https://localhost/\"\n    }\n  ],\n  \"paths\": {\n    \"/_cluster/health\": {\n      \"get\": {\n        \"tags\": [\n          \"\\ud83c\\udf8a Cluster Basics\"\n        ],\n        \"summary\": \"Retrieve Cluster Health\",\n        \"description\": \"Retrieve Cluster Health \\n\\nIdeally your cluster is green (which means no unreplicated shards) \\n\\nYellow means you have some unreplicated shards - if you create an index it may by default have mulitple shards.\",\n        \"operationId\": \"retrieve_cluster_health__cluster_health_get\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"cluster_name\": \"swarmee\",\n                      \"status\": \"yellow\",\n                      \"timed_out\": false,\n                      \"number_of_nodes\": 1,\n                      \"number_of_data_nodes\": 1,\n                      \"discovered_master\": true,\n                      \"active_primary_shards\": 1,\n                      \"active_shards\": 1,\n                      \"relocating_shards\": 0,\n                      \"initializing_shards\": 0,\n                      \"unassigned_shards\": 2,\n                      \"delayed_unassigned_shards\": 0,\n                      \"number_of_pending_tasks\": 0,\n                      \"number_of_in_flight_fetch\": 0,\n                      \"task_max_waiting_in_queue_millis\": 0,\n                      \"active_shards_percent_as_number\": 33.33333333333333\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/_cat/indices\": {\n      \"get\": {\n        \"tags\": [\n          \"\\u2728 Index Operations\"\n        ],\n        \"summary\": \"List Indices\",\n        \"description\": \"`cat` stands for Compact and Aligned Text - there are many elasticserch endpoints under `_cat` \\n\\nThese endpoints are meant for humans to read as the text is neatly aligned in columns. \\n\\nHowever they have evolved to have a format parameter so you can get `json` back from them also.\\n\\nThis `cat` endpoint list indices and provides their state \\n\\nThe **v** parameter toggles the column headings on and off in the column view.  \",\n        \"operationId\": \"list_indices__cat_indices_get\",\n        \"parameters\": [\n          {\n            \"required\": false,\n            \"schema\": {\n              \"title\": \"V\",\n              \"type\": \"boolean\"\n            },\n            \"name\": \"v\",\n            \"in\": \"query\"\n          },\n          {\n            \"required\": false,\n            \"schema\": {\n              \"allOf\": [\n                {\n                  \"$ref\": \"#/components/schemas/format_types\"\n                }\n              ],\n              \"default\": \"column\"\n            },\n            \"name\": \"format\",\n            \"in\": \"query\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": [\n                      {\n                        \"health\": \"green\",\n                        \"status\": \"open\",\n                        \"index\": \"country\",\n                        \"uuid\": \"jNi87tzhRgyDCnyqSeaWDQ\",\n                        \"pri\": \"1\",\n                        \"rep\": \"0\",\n                        \"docs.count\": \"0\",\n                        \"docs.deleted\": \"0\",\n                        \"store.size\": \"208b\",\n                        \"pri.store.size\": \"208b\"\n                      },\n                      {\n                        \"health\": \"green\",\n                        \"status\": \"open\",\n                        \"index\": \"test\",\n                        \"uuid\": \"Xk6o3Nv6QnqG2POSufHJaA\",\n                        \"pri\": \"1\",\n                        \"rep\": \"0\",\n                        \"docs.count\": \"0\",\n                        \"docs.deleted\": \"0\",\n                        \"store.size\": \"208b\",\n                        \"pri.store.size\": \"208b\"\n                      }\n                    ]\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/{index}/\": {\n      \"get\": {\n        \"tags\": [\n          \"\\u2728 Index Operations\"\n        ],\n        \"summary\": \"View Index Details\",\n        \"description\": \"View the aliases, mappings and settings for an index.\\n\\n_**Aliases**_ are similar to table views from sql land - i.e. they don't hold data - they just point to one or more indexes. \\n\\n_**Mappings**_ defines the type of each field and how it is indexes \\n\\n_**Settings**_ defines the index level configuration.   \",\n        \"operationId\": \"view_index_details__index___get\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Index\",\n              \"type\": \"string\"\n            },\n            \"example\": \"country\",\n            \"name\": \"index\",\n            \"in\": \"path\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"country\": {\n                        \"aliases\": {},\n                        \"mappings\": {},\n                        \"settings\": {\n                          \"index\": {\n                            \"creation_date\": \"1631913972854\",\n                            \"number_of_shards\": \"1\",\n                            \"number_of_replicas\": \"0\",\n                            \"uuid\": \"yQ8dF5otQ5SKHyWQYlr9Jw\",\n                            \"version\": {\n                              \"created\": \"135217827\"\n                            },\n                            \"provided_name\": \"country\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      },\n      \"put\": {\n        \"tags\": [\n          \"\\u2728 Index Operations\"\n        ],\n        \"summary\": \"Create Index\",\n        \"description\": \"Create an empty index in elasticsearch with a predefined configuration. \\n\\nOver time you will probably want to look at index templates - however you need to understand the fundamentals of index settings. \\n\\nBelow are a number of index configurations. \",\n        \"operationId\": \"create_index__index___put\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Index\",\n              \"type\": \"string\"\n            },\n            \"example\": \"country\",\n            \"name\": \"index\",\n            \"in\": \"path\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"title\": \"Request\",\n                \"type\": \"object\"\n              },\n              \"examples\": {\n                \"simple_index_creation\": {\n                  \"summary\": \"A simple index setting configuration\",\n                  \"description\": \"A **simple** index configuration. In this example we are just setting the number of shards and replicas\",\n                  \"value\": {\n                    \"settings\": {\n                      \"index\": {\n                        \"number_of_replicas\": 0\n                      }\n                    }\n                  }\n                },\n                \"complex_index_creation\": {\n                  \"summary\": \"A more complex index settings configuration\",\n                  \"description\": \"A more **complex** index settings example\",\n                  \"value\": {\n                    \"settings\": {\n                      \"index\": {\n                        \"codec\": \"best_compression\",\n                        \"number_of_replicas\": 0,\n                        \"number_of_shards\": 1,\n                        \"refresh_interval\": \"30s\"\n                      }\n                    }\n                  }\n                },\n                \"custom_analyzer_index_creation\": {\n                  \"summary\": \"A custom analyzer index configuration\",\n                  \"description\": \"This example highlights how to apply a custom analyzer to a specific field.\",\n                  \"value\": {\n                    \"mappings\": {\n                      \"properties\": {\n                        \"name\": {\n                          \"type\": \"text\",\n                          \"analyzer\": \"custom_analyzer\",\n                          \"fields\": {\n                            \"keyword\": {\n                              \"type\": \"keyword\",\n                              \"ignore_above\": 256\n                            }\n                          }\n                        }\n                      }\n                    },\n                    \"settings\": {\n                      \"analysis\": {\n                        \"analyzer\": {\n                          \"custom_analyzer\": {\n                            \"tokenizer\": \"standard\",\n                            \"filter\": [\n                              \"lowercase\",\n                              \"stopword_filter\",\n                              \"snowball_filter\"\n                            ]\n                          }\n                        },\n                        \"filter\": {\n                          \"snowball_filter\": {\n                            \"type\": \"snowball\"\n                          },\n                          \"stopword_filter\": {\n                            \"type\": \"stop\",\n                            \"stopwords\": [\n                              \"a\",\n                              \"the\",\n                              \"republic\"\n                            ]\n                          }\n                        }\n                      }\n                    }\n                  }\n                },\n                \"nested_index_creation\": {\n                  \"summary\": \"A nested index configuration\",\n                  \"description\": \"Illustration on how to basically create subdocuments in elasticsearch\",\n                  \"value\": {\n                    \"mappings\": {\n                      \"properties\": {\n                        \"gdp\": {\n                          \"type\": \"nested\",\n                          \"properties\": {\n                            \"amount\": {\n                              \"type\": \"long\"\n                            },\n                            \"year\": {\n                              \"type\": \"long\"\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"acknowledged\": true,\n                      \"shards_acknowledged\": true,\n                      \"index\": \"country\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      },\n      \"delete\": {\n        \"tags\": [\n          \"\\u2728 Index Operations\"\n        ],\n        \"summary\": \"Delete Index\",\n        \"description\": \"Delete an index (and all documents contained within the index)\\n\\nThese types of endpoints support asterisk (`*`) as a wild. \\n\\nThis is really helpful when you need to delete indices which have the date in the index name. E.g.; \\n\\n``` bash\\ncurl -X 'DELETE' 'https://localhost/2020-01-*-applogs/' \\n```\\nBut be careful.\",\n        \"operationId\": \"delete_index__index___delete\",\n        \"parameters\": [\n          {\n            \"description\": \"Index to be deleted\",\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"The index name\",\n              \"type\": \"string\",\n              \"description\": \"Index to be deleted\"\n            },\n            \"example\": \"country\",\n            \"name\": \"index\",\n            \"in\": \"path\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"acknowledged\": true\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/{index}/_settings\": {\n      \"put\": {\n        \"tags\": [\n          \"\\u2728 Index Operations\"\n        ],\n        \"summary\": \"Update Index Settings\",\n        \"description\": \"Update an existing indexes settings. \\n\\nFor example you might want to build an index with settings optimised for speed, however once its built you might want to optimise for redundancy (e.g. increasing the number of replicates), \\n\\n**Not** all index settings can be changed once an index is created.  \",\n        \"operationId\": \"update_index_settings__index___settings_put\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Index\",\n              \"type\": \"string\"\n            },\n            \"example\": \"country\",\n            \"name\": \"index\",\n            \"in\": \"path\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"title\": \"Request\",\n                \"type\": \"object\"\n              },\n              \"examples\": {\n                \"update_index_setting\": {\n                  \"summary\": \"A update to an index setting\",\n                  \"description\": \"A **simple** update index setting example\",\n                  \"value\": {\n                    \"index\": {\n                      \"number_of_replicas\": 2\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"acknowledged\": true\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/{index}/_update/{_id}\": {\n      \"post\": {\n        \"tags\": [\n          \"\\ud83e\\udd73 Update Documents\"\n        ],\n        \"summary\": \"Update Document\",\n        \"description\": \"Inserting a document with an existing document _id will replace the existing document - So\\nif you need to replace a whole document with a existing document just use the create document \\nwith `_id` end point.\\nThere are two types of updates `doc` and `script`:\\n\\n- doc is used to add or update specific fields\\n- script is used to perform more complex updates (e.g. adding an item to an existing list)\",\n        \"operationId\": \"update_document__index___update___id__post\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Index\",\n              \"type\": \"string\"\n            },\n            \"name\": \"index\",\n            \"in\": \"path\"\n          },\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Documemt _id\",\n              \"type\": \"string\"\n            },\n            \"name\": \"_id\",\n            \"in\": \"path\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"title\": \"Request\",\n                \"type\": \"object\"\n              },\n              \"examples\": {\n                \"update_document_new_field\": {\n                  \"summary\": \"Add a field to a document\",\n                  \"description\": \"Add one additional field to a elasticsearch document\",\n                  \"value\": {\n                    \"doc\": {\n                      \"newField\": \"newFieldValue\"\n                    }\n                  }\n                },\n                \"update_document_script_remove_field\": {\n                  \"summary\": \"Remove a field from a document\",\n                  \"description\": \"Remove a field from one elasticsearch document\",\n                  \"value\": {\n                    \"script\": \"ctx._source.remove('newField')\"\n                  }\n                },\n                \"update_document_add_list\": {\n                  \"summary\": \"Add a list to a document\",\n                  \"description\": \"Add a list to an existing document\",\n                  \"value\": {\n                    \"doc\": {\n                      \"newList\": [\n                        1,\n                        3,\n                        45,\n                        777\n                      ]\n                    }\n                  }\n                },\n                \"update_document_add_item_to_list_if_not_present\": {\n                  \"summary\": \"Add an item to a list if not already present\",\n                  \"description\": \"Add an item to a list if not already present, note how the version number is not incremented and the result is `noop` when the value already exists in the list\",\n                  \"value\": {\n                    \"script\": {\n                      \"source\": \"/* first check to see if value is in the list */  if  (ctx._source.newList.contains(params.tag) != true) /* add it if not present */ {ctx._source.newList.add(params.tag)} else { ctx.op = 'none' }\",\n                      \"lang\": \"painless\",\n                      \"params\": {\n                        \"tag\": 10000000000\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"_index\": \"country\",\n                      \"_type\": \"_doc\",\n                      \"_id\": \"UYIP9nsBc-WDXl5o2rS7\",\n                      \"_version\": 4,\n                      \"result\": \"updated\",\n                      \"_shards\": {\n                        \"total\": 1,\n                        \"successful\": 1,\n                        \"failed\": 0\n                      },\n                      \"_seq_no\": 32,\n                      \"_primary_term\": 1\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/{index}/_update_by_query\": {\n      \"post\": {\n        \"tags\": [\n          \"\\ud83e\\udd73 Update Documents\"\n        ],\n        \"summary\": \"Update By Query\",\n        \"description\": \"Delete all documents that match a query. All of the powerful search language can be used here\\nto identify what needs to be deleted. Depdending on the number of documents to be deleted you \\nmay choose to submit this request synchronously or asynchronously based on the `wait_for_completion`\\nflag. \\n\\nIf you choose asynchronously you are provided a `task_id` that you can use to manage the request\\nat a later point.  \",\n        \"operationId\": \"update_by_query__index___update_by_query_post\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Index\",\n              \"type\": \"string\"\n            },\n            \"name\": \"index\",\n            \"in\": \"path\"\n          },\n          {\n            \"required\": false,\n            \"schema\": {\n              \"title\": \"Wait For Completion\",\n              \"type\": \"boolean\",\n              \"default\": false,\n              \"desription\": \"submit asynchronously flag\"\n            },\n            \"name\": \"wait_for_completion\",\n            \"in\": \"query\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/update_operations__schema__search_model\"\n              },\n              \"examples\": {\n                \"update_document_by_query_add_new_field\": {\n                  \"summary\": \"Add a field to documents that meet query\",\n                  \"description\": \"Add one additional field to all documents that meet the query\",\n                  \"value\": {\n                    \"script\": {\n                      \"source\": \"ctx._source.bulkAddedField = 'updateByQuery'\",\n                      \"lang\": \"painless\"\n                    },\n                    \"query\": {\n                      \"match\": {\n                        \"subregion\": \"Asia\"\n                      }\n                    }\n                  }\n                },\n                \"update_document_by_query_remove_new_field\": {\n                  \"summary\": \"Remove a field from a document based on a query\",\n                  \"description\": \"Remove one  field to all documents that meet the query\",\n                  \"value\": {\n                    \"script\": {\n                      \"source\": \"ctx._source.remove('bulkAddedField')\",\n                      \"lang\": \"painless\"\n                    },\n                    \"query\": {\n                      \"match\": {\n                        \"subregion\": \"Asia\"\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response(sync)\": {\n                    \"summary\": \"JSON Response(sync)\",\n                    \"value\": {\n                      \"took\": 139,\n                      \"timed_out\": false,\n                      \"total\": 3,\n                      \"updated\": 3,\n                      \"deleted\": 0,\n                      \"batches\": 1,\n                      \"version_conflicts\": 0,\n                      \"noops\": 0,\n                      \"retries\": {\n                        \"bulk\": 0,\n                        \"search\": 0\n                      },\n                      \"throttled_millis\": 0,\n                      \"requests_per_second\": -1,\n                      \"throttled_until_millis\": 0,\n                      \"failures\": []\n                    }\n                  },\n                  \"JSON Response(async)\": {\n                    \"summary\": \"JSON Response(async)\",\n                    \"value\": {\n                      \"task\": \"houRpFPvSzSZe_TwFBhyFg:4125\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/{index}/_doc/{_id}\": {\n      \"get\": {\n        \"tags\": [\n          \"\\ud83c\\udf89 Retrieve Documents\"\n        ],\n        \"summary\": \"Retrieve Document By Id\",\n        \"description\": \"This end point simply retrieves a document based on the provided `_id`. \\n\\nNote the structure of the document returned:\\n- At the top level we have various meta data about the document (e.g. `index` and `version`). \\n\\n- The original document is nested in a field called `_source`. \",\n        \"operationId\": \"retrieve_document_by_id__index___doc___id__get\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Index\",\n              \"type\": \"string\"\n            },\n            \"example\": \"country\",\n            \"name\": \"index\",\n            \"in\": \"path\"\n          },\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \" Id\",\n              \"type\": \"string\"\n            },\n            \"example\": \"1\",\n            \"name\": \"_id\",\n            \"in\": \"path\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"_index\": \"country\",\n                      \"_type\": \"_doc\",\n                      \"_id\": \"1\",\n                      \"_version\": 4,\n                      \"_seq_no\": 3,\n                      \"_primary_term\": 1,\n                      \"found\": true,\n                      \"_source\": {\n                        \"name\": \"Afghanistan\",\n                        \"alpha2Code\": \"AF\",\n                        \"capital\": \"Kabul\",\n                        \"region\": \"Asia\",\n                        \"subregion\": \"Southern Asia\",\n                        \"area\": 652230\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      },\n      \"post\": {\n        \"tags\": [\n          \"\\ud83d\\ude80 Create Documents\"\n        ],\n        \"summary\": \"Create Document With Id\",\n        \"description\": \"Store a document into elasticsearch while specifying an `_id` for the record.\\n\\nIf the index to store the document does not already exist it will be created \\nwith the default settings and mapping parameters applied. \\n\\nIf the index and `_id` already exist then the document will be replaced. \\n\\nPlease see how the sample response differs (i.e. the `result` and `_version` fields)\",\n        \"operationId\": \"create_document_with_id__index___doc___id__post\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Index\",\n              \"type\": \"string\"\n            },\n            \"example\": \"country\",\n            \"name\": \"index\",\n            \"in\": \"path\"\n          },\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \" Id\",\n              \"type\": \"string\"\n            },\n            \"example\": \"123456\",\n            \"name\": \"_id\",\n            \"in\": \"path\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/country_model\"\n              },\n              \"examples\": {\n                \"simple_single_country1\": {\n                  \"summary\": \"A simple country document (1)\",\n                  \"description\": \"A **simple** Afghanistan document with only a few fields\",\n                  \"value\": {\n                    \"name\": \"Afghanistan\",\n                    \"countryCode\": \"AF\",\n                    \"capital\": \"Kabul\",\n                    \"region\": \"Asia\",\n                    \"subregion\": \"Southern Asia\",\n                    \"area\": 652230\n                  }\n                },\n                \"simple_single_country2\": {\n                  \"summary\": \"A simple country document (2)\",\n                  \"description\": \"A **simple** Bahamas document with only a few fields\",\n                  \"value\": {\n                    \"name\": \"Commonwealth of the Bahamas\",\n                    \"countryCode\": \"BS\",\n                    \"capital\": \"Nassau\",\n                    \"area\": 630,\n                    \"region\": \"Americas\"\n                  }\n                },\n                \"simple_single_country3\": {\n                  \"summary\": \"A simple country document (3)\",\n                  \"description\": \"A **simple** Uganda document with only a few fields\",\n                  \"value\": {\n                    \"name\": \"Republic of Uganda\",\n                    \"countryCode\": \"UG\",\n                    \"capital\": \"Kampala\",\n                    \"region\": \"Africa\"\n                  }\n                },\n                \"simple_single_country4\": {\n                  \"summary\": \"A simple country document (4)\",\n                  \"description\": \"A **simple** Bermuda document with only a few fields\",\n                  \"value\": {\n                    \"name\": \"The Bermudas\",\n                    \"countryCode\": \"BM\",\n                    \"capital\": \"Hamilton\",\n                    \"region\": \"Americas\",\n                    \"gdp\": [\n                      {\n                        \"year\": 2020,\n                        \"amount\": 8000000000\n                      },\n                      {\n                        \"year\": 2010,\n                        \"amount\": 6000000000\n                      }\n                    ]\n                  }\n                },\n                \"simple_single_country5\": {\n                  \"summary\": \"A simple country document (5)\",\n                  \"description\": \"A **simple** Angola document with many fields of different types\",\n                  \"value\": {\n                    \"name\": \"Angola\",\n                    \"countryCode\": \"AO\",\n                    \"capital\": \"Luanda\",\n                    \"region\": \"Africa\",\n                    \"subregion\": \"Middle Africa\",\n                    \"latlng\": [\n                      -12.5,\n                      18.5\n                    ],\n                    \"area\": 1246000,\n                    \"gdp\": [\n                      {\n                        \"year\": 2020,\n                        \"amount\": 62000000000\n                      },\n                      {\n                        \"year\": 2010,\n                        \"amount\": 83000000000\n                      }\n                    ]\n                  }\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response(Created)\": {\n                    \"summary\": \"JSON Response(Created)\",\n                    \"value\": {\n                      \"_index\": \"country\",\n                      \"_type\": \"_doc\",\n                      \"_id\": \"1\",\n                      \"_version\": 1,\n                      \"result\": \"created\",\n                      \"_shards\": {\n                        \"total\": 1,\n                        \"successful\": 1,\n                        \"failed\": 0\n                      },\n                      \"_seq_no\": 0,\n                      \"_primary_term\": 1\n                    }\n                  },\n                  \"JSON Response(Updated)\": {\n                    \"summary\": \"JSON Response(Updated)\",\n                    \"value\": {\n                      \"_index\": \"country\",\n                      \"_type\": \"_doc\",\n                      \"_id\": \"1\",\n                      \"_version\": 2,\n                      \"result\": \"updated\",\n                      \"_shards\": {\n                        \"total\": 1,\n                        \"successful\": 1,\n                        \"failed\": 0\n                      },\n                      \"_seq_no\": 5,\n                      \"_primary_term\": 1\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      },\n      \"delete\": {\n        \"tags\": [\n          \"\\ud83e\\udd84 Delete Documents\"\n        ],\n        \"summary\": \"Delete Document\",\n        \"description\": \"Delete an individual document based on the document `_id`.\",\n        \"operationId\": \"delete_document__index___doc___id__delete\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Index\",\n              \"type\": \"string\"\n            },\n            \"name\": \"index\",\n            \"in\": \"path\"\n          },\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \" Id\",\n              \"type\": \"string\"\n            },\n            \"name\": \"_id\",\n            \"in\": \"path\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"_index\": \"country\",\n                      \"_type\": \"_doc\",\n                      \"_id\": \"1\",\n                      \"_version\": 5,\n                      \"result\": \"deleted\",\n                      \"_shards\": {\n                        \"total\": 1,\n                        \"successful\": 1,\n                        \"failed\": 0\n                      },\n                      \"_seq_no\": 13,\n                      \"_primary_term\": 1\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/{index}/_doc\": {\n      \"post\": {\n        \"tags\": [\n          \"\\ud83d\\ude80 Create Documents\"\n        ],\n        \"summary\": \"Create Document Without Id\",\n        \"description\": \"Store a document into elasticsearch, the `_id` for the record will be \\ngenerated by elasticsearch. \\n\\nIf the index to store the document does not already exist it will be created \\nwith the default settings and mappings. \\n\\nThe pipeline query string parameter identifies a series of `processesors` that should be applied to the document before indexing. For example appending in the index datetime to the source document. Pipelines are created using the `_ingest/pipeline` endpoints. \\n\\n\\nThe HTTP response code is 201 for this request. \",\n        \"operationId\": \"create_document_without_id__index___doc_post\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Index\",\n              \"type\": \"string\"\n            },\n            \"example\": \"country\",\n            \"name\": \"index\",\n            \"in\": \"path\"\n          },\n          {\n            \"required\": false,\n            \"schema\": {\n              \"title\": \"Pipeline\",\n              \"type\": \"string\"\n            },\n            \"name\": \"pipeline\",\n            \"in\": \"query\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/country_model\"\n              },\n              \"examples\": {\n                \"simple_single_country1\": {\n                  \"summary\": \"A simple country document (1)\",\n                  \"description\": \"A **simple** Afghanistan document with only a few fields\",\n                  \"value\": {\n                    \"name\": \"Afghanistan\",\n                    \"countryCode\": \"AF\",\n                    \"capital\": \"Kabul\",\n                    \"region\": \"Asia\",\n                    \"subregion\": \"Southern Asia\",\n                    \"area\": 652230\n                  }\n                },\n                \"simple_single_country2\": {\n                  \"summary\": \"A simple country document (2)\",\n                  \"description\": \"A **simple** Bahamas document with only a few fields\",\n                  \"value\": {\n                    \"name\": \"Commonwealth of the Bahamas\",\n                    \"countryCode\": \"BS\",\n                    \"capital\": \"Nassau\",\n                    \"area\": 630,\n                    \"region\": \"Americas\"\n                  }\n                },\n                \"simple_single_country3\": {\n                  \"summary\": \"A simple country document (3)\",\n                  \"description\": \"A **simple** Uganda document with only a few fields\",\n                  \"value\": {\n                    \"name\": \"Republic of Uganda\",\n                    \"countryCode\": \"UG\",\n                    \"capital\": \"Kampala\",\n                    \"region\": \"Africa\"\n                  }\n                },\n                \"simple_single_country4\": {\n                  \"summary\": \"A simple country document (4)\",\n                  \"description\": \"A **simple** Bermuda document with only a few fields\",\n                  \"value\": {\n                    \"name\": \"The Bermudas\",\n                    \"countryCode\": \"BM\",\n                    \"capital\": \"Hamilton\",\n                    \"region\": \"Americas\",\n                    \"gdp\": [\n                      {\n                        \"year\": 2020,\n                        \"amount\": 8000000000\n                      },\n                      {\n                        \"year\": 2010,\n                        \"amount\": 6000000000\n                      }\n                    ]\n                  }\n                },\n                \"simple_single_country5\": {\n                  \"summary\": \"A simple country document (5)\",\n                  \"description\": \"A **simple** Angola document with many fields of different types\",\n                  \"value\": {\n                    \"name\": \"Angola\",\n                    \"countryCode\": \"AO\",\n                    \"capital\": \"Luanda\",\n                    \"region\": \"Africa\",\n                    \"subregion\": \"Middle Africa\",\n                    \"latlng\": [\n                      -12.5,\n                      18.5\n                    ],\n                    \"area\": 1246000,\n                    \"gdp\": [\n                      {\n                        \"year\": 2020,\n                        \"amount\": 62000000000\n                      },\n                      {\n                        \"year\": 2010,\n                        \"amount\": 83000000000\n                      }\n                    ]\n                  }\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"_index\": \"country\",\n                      \"_type\": \"_doc\",\n                      \"_id\": \"SoK49XsBc-WDXl5oTbQG\",\n                      \"_version\": 1,\n                      \"result\": \"created\",\n                      \"_shards\": {\n                        \"total\": 1,\n                        \"successful\": 1,\n                        \"failed\": 0\n                      },\n                      \"_seq_no\": 6,\n                      \"_primary_term\": 1\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/_bulk\": {\n      \"post\": {\n        \"tags\": [\n          \"\\ud83d\\ude80 Create Documents\"\n        ],\n        \"summary\": \"Create Documents In Bulk\",\n        \"description\": \"Bulk load documents into elasticsearch, this endpoint is the most efficient method of push large volumes of data into elasticsearch.\\nThe required input format is new line delimited json documents (```ndjson```). A sample new line delimited json file\\ncan found [here](https://swagger-4-es.swarmee.net/bulk-country-data.ndjson). Please download it, then select it to submit it to\\nthe _bulk endpoint. \\n\\nEach indexing request is made up of a pair of lines in the ```ndjson``` file - the first line describes the bulk action to be performed,\\nindex target, _id and other associated metadata. The second line contains the source document.\",\n        \"operationId\": \"create_documents_in_bulk__bulk_post\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"title\": \"File\",\n                \"type\": \"string\",\n                \"format\": \"binary\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"took\": 50,\n                      \"errors\": false,\n                      \"items\": [\n                        {\n                          \"index\": {\n                            \"_index\": \"country\",\n                            \"_type\": \"_doc\",\n                            \"_id\": \"1\",\n                            \"_version\": 4,\n                            \"result\": \"updated\",\n                            \"_shards\": {\n                              \"total\": 1,\n                              \"successful\": 1,\n                              \"failed\": 0\n                            },\n                            \"_seq_no\": 14,\n                            \"_primary_term\": 1,\n                            \"status\": 200\n                          }\n                        },\n                        {\n                          \"index\": {\n                            \"_index\": \"country\",\n                            \"_type\": \"_doc\",\n                            \"_id\": \"2\",\n                            \"_version\": 4,\n                            \"result\": \"updated\",\n                            \"_shards\": {\n                              \"total\": 1,\n                              \"successful\": 1,\n                              \"failed\": 0\n                            },\n                            \"_seq_no\": 15,\n                            \"_primary_term\": 1,\n                            \"status\": 200\n                          }\n                        },\n                        {\n                          \"index\": {\n                            \"_index\": \"country\",\n                            \"_type\": \"_doc\",\n                            \"_id\": \"3\",\n                            \"_version\": 4,\n                            \"result\": \"updated\",\n                            \"_shards\": {\n                              \"total\": 1,\n                              \"successful\": 1,\n                              \"failed\": 0\n                            },\n                            \"_seq_no\": 16,\n                            \"_primary_term\": 1,\n                            \"status\": 200\n                          }\n                        },\n                        {\n                          \"index\": {\n                            \"_index\": \"country\",\n                            \"_type\": \"_doc\",\n                            \"_id\": \"4\",\n                            \"_version\": 4,\n                            \"result\": \"updated\",\n                            \"_shards\": {\n                              \"total\": 1,\n                              \"successful\": 1,\n                              \"failed\": 0\n                            },\n                            \"_seq_no\": 17,\n                            \"_primary_term\": 1,\n                            \"status\": 200\n                          }\n                        },\n                        {\n                          \"index\": {\n                            \"_index\": \"country\",\n                            \"_type\": \"_doc\",\n                            \"_id\": \"5\",\n                            \"_version\": 3,\n                            \"result\": \"updated\",\n                            \"_shards\": {\n                              \"total\": 1,\n                              \"successful\": 1,\n                              \"failed\": 0\n                            },\n                            \"_seq_no\": 18,\n                            \"_primary_term\": 1,\n                            \"status\": 200\n                          }\n                        }\n                      ]\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/{index}/_search\": {\n      \"post\": {\n        \"tags\": [\n          \"\\ud83c\\udf89 Retrieve Documents\"\n        ],\n        \"summary\": \"Retrieve Documents By Search\",\n        \"description\": \"This is the most feature rich endpoint in elasticsearch - coming from sql the searches that you can\\nperform will **blown your mind**. \\n\\nWe will just cover the basics here now - but lots more to come on this. \\nA number of example query types have been provided. \\n\\nThis end point can also been used to sample some documents when submitted without a request body \\n(i.e. with no search parameters). By default only ten documents will be returned. \\n\\nThe sample response shows illustrates the structure that will be returned. \\nAt the top level we have details about the search execution (e.g. `took`, `timed_out` and shard details)\\nThen we have a `hits` key which has summary details on the search (e.g. `max_score` and `total` hits)\\nas well as sub `hits` key which lists the search results in score order.  \",\n        \"operationId\": \"retrieve_documents_by_search__index___search_post\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Index\",\n              \"type\": \"string\"\n            },\n            \"example\": \"country\",\n            \"name\": \"index\",\n            \"in\": \"path\"\n          },\n          {\n            \"required\": false,\n            \"schema\": {\n              \"title\": \"Size\",\n              \"type\": \"integer\",\n              \"default\": 10\n            },\n            \"name\": \"size\",\n            \"in\": \"query\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/retrieve_operations__schema__search_model\"\n              },\n              \"examples\": {\n                \"match_all_query\": {\n                  \"summary\": \"A match all example\",\n                  \"value\": {\n                    \"query\": {\n                      \"match_all\": {}\n                    }\n                  }\n                },\n                \"query_string_query\": {\n                  \"summary\": \"A query string example\",\n                  \"value\": {\n                    \"query\": {\n                      \"query_string\": {\n                        \"query\": \"af\"\n                      }\n                    }\n                  }\n                },\n                \"match_query\": {\n                  \"summary\": \"A match query example\",\n                  \"description\": \"With the default mapping `Bermuda Republic` is not found and the name in the source document is `The Bermudas`. however when the index is created with the supplied mapping (which leverages a custom analyzer) then `Bermuda Republic` is a match for `The Bermudas`. The reason being is that the source document and the search terms are processed to both become `Bermuda`\",\n                  \"value\": {\n                    \"query\": {\n                      \"match\": {\n                        \"name\": \"Bermuda Republic\"\n                      }\n                    }\n                  }\n                },\n                \"range_query\": {\n                  \"summary\": \"A range query example\",\n                  \"description\": \"Basically return all country documents with an area of greater than or equal to `1`\",\n                  \"value\": {\n                    \"query\": {\n                      \"range\": {\n                        \"area\": {\n                          \"gte\": 1\n                        }\n                      }\n                    }\n                  }\n                },\n                \"sub_document_query_without_nesting\": {\n                  \"summary\": \"Subdocument querying without index nesting\",\n                  \"description\": \"Subdocument querying without index nesting. This incorrectly returns `The Bermudas` document. \\nBasically what is saved without index nesting is gdp.year = [`2010`, `2020`] and gdp.amount = [`6000000000`, `8000000000`].There is no correlation between the sub documents. \",\n                  \"value\": {\n                    \"query\": {\n                      \"bool\": {\n                        \"must\": [\n                          {\n                            \"range\": {\n                              \"gdp.year\": {\n                                \"lte\": 2015\n                              }\n                            }\n                          },\n                          {\n                            \"range\": {\n                              \"gdp.amount\": {\n                                \"gte\": 7000000000\n                              }\n                            }\n                          }\n                        ]\n                      }\n                    }\n                  }\n                },\n                \"sub_document_query_with_nesting\": {\n                  \"summary\": \"Subdocument querying with index nesting configured\",\n                  \"description\": \"Subdocument querying with index nesting. This correctly does not return the `The Bermudas` document\",\n                  \"value\": {\n                    \"query\": {\n                      \"nested\": {\n                        \"path\": \"gdp\",\n                        \"query\": {\n                          \"bool\": {\n                            \"must\": [\n                              {\n                                \"range\": {\n                                  \"gdp.year\": {\n                                    \"lte\": 2015\n                                  }\n                                }\n                              },\n                              {\n                                \"range\": {\n                                  \"gdp.amount\": {\n                                    \"gte\": 7000000000\n                                  }\n                                }\n                              }\n                            ]\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"took\": 26,\n                      \"timed_out\": false,\n                      \"_shards\": {\n                        \"total\": 1,\n                        \"successful\": 1,\n                        \"skipped\": 0,\n                        \"failed\": 0\n                      },\n                      \"hits\": {\n                        \"total\": {\n                          \"value\": 3,\n                          \"relation\": \"eq\"\n                        },\n                        \"max_score\": 0.036367644,\n                        \"hits\": [\n                          {\n                            \"_index\": \"country\",\n                            \"_type\": \"_doc\",\n                            \"_id\": \"1\",\n                            \"_score\": 0.036367644,\n                            \"_source\": {\n                              \"name\": \"Afghanistan\",\n                              \"alpha2Code\": \"AF\",\n                              \"capital\": \"Kabul\",\n                              \"region\": \"Asia\",\n                              \"subregion\": \"Southern Asia\",\n                              \"area\": 652230\n                            }\n                          },\n                          {\n                            \"_index\": \"country\",\n                            \"_type\": \"_doc\",\n                            \"_id\": \"5\",\n                            \"_score\": 0.036367644,\n                            \"_source\": {\n                              \"name\": \"Afghanistan\",\n                              \"alpha2Code\": \"AF\",\n                              \"capital\": \"Kabul\",\n                              \"region\": \"Asia\",\n                              \"subregion\": \"Southern Asia\",\n                              \"area\": 652230\n                            }\n                          },\n                          {\n                            \"_index\": \"country\",\n                            \"_type\": \"_doc\",\n                            \"_id\": \"UIK69XsBc-WDXl5oS7Q1\",\n                            \"_score\": 0.036367644,\n                            \"_source\": {\n                              \"name\": \"Afghanistan\",\n                              \"alpha2Code\": \"AF\",\n                              \"capital\": \"Kabul\",\n                              \"region\": \"Asia\",\n                              \"subregion\": \"Southern Asia\",\n                              \"area\": 652230\n                            }\n                          }\n                        ]\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/{index}/_delete_by_query\": {\n      \"post\": {\n        \"tags\": [\n          \"\\ud83e\\udd84 Delete Documents\"\n        ],\n        \"summary\": \"Delete By Query\",\n        \"description\": \"Delete all documents that match a query. All of the powerful search language can be used here\\nto identify what needs to be deleted. Depdending on the number of documents to be deleted you \\nmay choose to submit this request synchronously or asynchronously based on the `wait_for_completion`\\nflag. \\n\\nIf you choose asynchronously you are provided a `task_id` that you can use to manage the request\\nat a later point.  \",\n        \"operationId\": \"delete_by_query__index___delete_by_query_post\",\n        \"parameters\": [\n          {\n            \"description\": \"Index Name\",\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Index\",\n              \"type\": \"string\",\n              \"description\": \"Index Name\"\n            },\n            \"example\": \"country\",\n            \"name\": \"index\",\n            \"in\": \"path\"\n          },\n          {\n            \"required\": false,\n            \"schema\": {\n              \"title\": \"Wait For Completion\",\n              \"type\": \"boolean\",\n              \"default\": false,\n              \"desription\": \"submit asynchronously flag\"\n            },\n            \"name\": \"wait_for_completion\",\n            \"in\": \"query\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/retrieve_operations__schema__search_model\"\n              },\n              \"examples\": {\n                \"query_string_query\": {\n                  \"summary\": \"A query string example\",\n                  \"value\": {\n                    \"query\": {\n                      \"query_string\": {\n                        \"query\": \"af\"\n                      }\n                    }\n                  }\n                },\n                \"match_all\": {\n                  \"summary\": \"A match all query example\",\n                  \"description\": \"A match all query.\",\n                  \"value\": {\n                    \"query\": {\n                      \"match_all\": {}\n                    }\n                  }\n                },\n                \"match_query\": {\n                  \"summary\": \"A match query example\",\n                  \"description\": \"A **normal** item works correctly.\",\n                  \"value\": {\n                    \"query\": {\n                      \"match\": {\n                        \"region\": \"asia\"\n                      }\n                    }\n                  }\n                },\n                \"range_query\": {\n                  \"summary\": \"A range query example\",\n                  \"description\": \"Basically return all country documents with an area of greater than or equal to `1`\",\n                  \"value\": {\n                    \"query\": {\n                      \"range\": {\n                        \"area\": {\n                          \"gte\": 1\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response(sync)\": {\n                    \"summary\": \"JSON Response(sync)\",\n                    \"value\": {\n                      \"took\": 67,\n                      \"timed_out\": false,\n                      \"total\": 8,\n                      \"deleted\": 8,\n                      \"batches\": 1,\n                      \"version_conflicts\": 0,\n                      \"noops\": 0,\n                      \"retries\": {\n                        \"bulk\": 0,\n                        \"search\": 0\n                      },\n                      \"throttled_millis\": 0,\n                      \"requests_per_second\": -1,\n                      \"throttled_until_millis\": 0,\n                      \"failures\": []\n                    }\n                  },\n                  \"JSON Response(async)\": {\n                    \"summary\": \"JSON Response(async)\",\n                    \"value\": {\n                      \"task\": \"houRpFPvSzSZe_TwFBhyFg:4125\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/_analyze\": {\n      \"post\": {\n        \"tags\": [\n          \"\\ud83d\\udd25 Text Analysis\"\n        ],\n        \"summary\": \"Text Analysis\",\n        \"description\": \"The *analyze* endpoint allows you test out how your data will be analyzed and indexed.\\nThe default behaviour is for your search terms to be analyzed using the same analysis chain.\\nE.g. if you split terms on dashes and lowercase the characters\\nthe same processing will be applied at index time to the documents as well as at search time to\\nthe searched terms. \\n\\n\\nOut of the box elastic comes with 8 \\\"built-in\\\" analyzers, which are a pre configured combination of:\\n- Character Filters, \\n- Tokenizers, and\\n- Token Filters  \\n\\nPopular analyzers include:\\n- Standard - which tokenizes based on unicode text logic, removes punctuation and lowercases terms. \\n- Keyword - which basically preforms no analysis, including no tokenization (e.g. a phase comes in and comes out a phase).\\n- Simple - which tokenizes whenever it hits a character that is not a letter.\\n- Stop - which removes stop words (based off the simple analyzer). \\n\\nIf the out of the box analyzers don't meet your requirements, you can create your own analysis chain (i.e. analyzer).\\nWhich basically just involves stringing together the avaliable `Character Filters`, `Tokenizers` and `Token Filters`. \\nExamples of each are provided below:\\n\u003cdetails\u003e\u003csummary\u003eCharacter Filters - preprocess characters before passed to tokenizer\u003c/summary\u003e\\nCharacter filters include: \\n\\n- **Mapping** - maps text (e.g. `:)` = good/happy). \\n\\n- **HTML Strip** - basically tries to remove HTML garbage from text before indexing. \\n\\n- **Pattern Replace** - firstly I've never had a need to use this character filter. It allows you to use regex to fiddle with the text. \\n\\n\u003c/p\u003e\\n\u003c/details\u003e\\n\u003cdetails\u003e\u003csummary\u003eTokenization - how the text is broken down into tokens\u003c/summary\u003e\\nAvaliable tokenizers include: \\n\\n- **Letter** (breaks on non leters) \\n\\n- **Standard** (grammer based tokenisation) - note however the apostrophe `s` is kept with the preceding word   \\n\\n- **Classic** (pretty good for english however `standard` is preferred now with most general language support) \\n\\n- **Ngram** (ngrams for all tokens) - default is min_gram 1 and max_gram 2 \\n\\n- **Edge_ngram** (ngrams from the edges) - default is min_gram 1 and max_gram 2  \\n\\n- **Keyword** (no tokenization) \\n\\n\\n\u003c/p\u003e\\n\u003c/details\u003e\\n\u003cdetails\u003e\u003csummary\u003eToken Filters - processing of tokens (add, modify, delete) from tokenizer\u003c/summary\u003e\\nAvaliable Token Filters include: \\n\\n- **Apostrophe** - removes apostrophe and text following the apostrophe (e.g. john's becomes john) \\n\\n- **Stopwords** - removes configured stopwords so they are not indexed. \\n\\n- **stemmer** - which supports a number of stemming algorithms. \\n\\n- **Snowball** - snowball stemming of terms. \\n \\n\u003c/p\u003e\\n\u003c/details\u003e\\n\\n\\n\\nNote: including `\\\"explain\\\" : true` in the request payload will allow you to review the full analysis chain. \",\n        \"operationId\": \"text_analysis__analyze_post\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"title\": \"Request\",\n                \"type\": \"object\"\n              },\n              \"examples\": {\n                \"Standard_Analyzer\": {\n                  \"summary\": \"Standard Analyzer\",\n                  \"description\": \"Standard analyzer, note the lowercasing and removal of non leters an numbers.\",\n                  \"value\": {\n                    \"analyzer\": \"standard\",\n                    \"text\": \"Johnny #5 is Alive!!\"\n                  }\n                },\n                \"Keyword_Analyzer\": {\n                  \"summary\": \"Keyword Analyzer\",\n                  \"description\": \"Basically no analysis, no lowercasing, no tokenization, no removing punctuation - (just phrase in phrase out). \",\n                  \"value\": {\n                    \"analyzer\": \"keyword\",\n                    \"text\": \"Johnny #5 is Alive!!\"\n                  }\n                },\n                \"Stop_Analyzer\": {\n                  \"summary\": \"Stop Analyzer\",\n                  \"description\": \"Stop analyzer example. Note the removal of the term `The`.\",\n                  \"value\": {\n                    \"analyzer\": \"stop\",\n                    \"text\": \"Johnny #5 is Alive!!\"\n                  }\n                },\n                \"Mapping_Character_Filter\": {\n                  \"summary\": \"Mapping Character Filter\",\n                  \"description\": \"Map one or multiple characters to different text. In this example we are mapping emojis.\",\n                  \"value\": {\n                    \"char_filter\": [\n                      {\n                        \"type\": \"mapping\",\n                        \"mappings\": [\n                          \":) =\u003e good\",\n                          \":( =\u003e bad\"\n                        ]\n                      }\n                    ],\n                    \"tokenizer\": \"standard\",\n                    \"text\": \"I feel :)\"\n                  }\n                },\n                \"HTML_Strip_Character_Filter\": {\n                  \"summary\": \"HTML Strip Character Filter\",\n                  \"description\": \"Remove HTML from text. Really helpful if you are scrapping and indexing the extracted html. You can see in the example that all the HTML tags are removed. \",\n                  \"value\": {\n                    \"char_filter\": [\n                      {\n                        \"type\": \"html_strip\"\n                      }\n                    ],\n                    \"tokenizer\": \"standard\",\n                    \"text\": \"\u003cdetails\u003e\u003csummary\u003eBackground\u003c/summary\u003e\\n        \u003cb\u003einteresting text\u003c/b\u003e\\n        \u003c/p\u003e\"\n                  }\n                },\n                \"Pattern_Replace_Character_Filter\": {\n                  \"summary\": \"Pattern(regex) Replace Character Filter\",\n                  \"description\": \"Identify text to be replaced with a regex pattern. The example takes an account number string and creates a number from all the numbers contained in the string. \",\n                  \"value\": {\n                    \"tokenizer\": \"standard\",\n                    \"char_filter\": [\n                      {\n                        \"pattern\": \"[^0-9]\",\n                        \"type\": \"pattern_replace\",\n                        \"replacement\": \"\"\n                      }\n                    ],\n                    \"text\": \"#128-523-832-1 AUD\"\n                  }\n                },\n                \"Standard_Tokenizing\": {\n                  \"summary\": \"Standard Tokenizer\",\n                  \"description\": \"Grammer based tokenisation - note however the apostrophe `s` is kept with the preceding word in the example. This is the default configured tokenizer - really good value - you can get a long way with this tokenizerNote in the example we have also provided a lowercase filter to the analysis chain.\",\n                  \"value\": {\n                    \"tokenizer\": \"standard\",\n                    \"filter\": [\n                      \"lowercase\"\n                    ],\n                    \"text\": \"#1 A Driving Instructor's rule.\"\n                  }\n                },\n                \"Simple_Tokenizing\": {\n                  \"summary\": \"Simple Tokenizer\",\n                  \"description\": \"If you don't want to use one of the default tokenisers you can make your own. Here we specify a few different tokenize on characters. \\n \\nThe example is intended to highlight this is actually harder than you think and users never type in what you expect.\",\n                  \"value\": {\n                    \"tokenizer\": {\n                      \"type\": \"char_group\",\n                      \"tokenize_on_chars\": [\n                        \"whitespace\",\n                        \"-\",\n                        \"\\n\",\n                        \".\"\n                      ]\n                    },\n                    \"text\": \"... it was delicious,today  ...\"\n                  }\n                },\n                \"Classic_Tokenizier\": {\n                  \"summary\": \"Classic Tokenizer\",\n                  \"description\": \"Pretty good for english toeknization however `standard` is preferred now with more general language support). \\nEach tokenizer comes with some configuration parameters. For example `max token length` for the classic tokenizer. \",\n                  \"value\": {\n                    \"tokenizer\": {\n                      \"type\": \"classic\",\n                      \"max_token_length\": 5\n                    },\n                    \"text\": \"... it was delicious,Today  ...\"\n                  }\n                },\n                \"Ngram_Tokenizier\": {\n                  \"summary\": \"Ngram Tokenizer\",\n                  \"description\": \"Standard Ngram tokenization of each word. Noting for ngram matching you probably need to use a diffrent search time analyzer. \\nCause the default behaviour will be to tokenize the search term through this analysis chain. \",\n                  \"value\": {\n                    \"tokenizer\": {\n                      \"type\": \"ngram\",\n                      \"min_gram\": 5,\n                      \"max_gram\": 6,\n                      \"token_chars\": [\n                        \"letter\",\n                        \"digit\"\n                      ]\n                    },\n                    \"filter\": [\n                      \"lowercase\"\n                    ],\n                    \"text\": [\n                      \"... it was delicious,Today  ...\"\n                    ]\n                  }\n                },\n                \"Edge_Ngram_Tokenizier\": {\n                  \"summary\": \"Edge Ngram Tokenizer\",\n                  \"description\": \"Standard Edge Ngram tokenization of each word. Noting for ngram matching you probably need to use a diffrent search time analyzer. \\nCause the default behaviour will be to tokenize the search term through this analysis chain. \",\n                  \"value\": {\n                    \"tokenizer\": {\n                      \"type\": \"edge_ngram\",\n                      \"min_gram\": 5,\n                      \"max_gram\": 12,\n                      \"token_chars\": [\n                        \"letter\",\n                        \"digit\"\n                      ]\n                    },\n                    \"text\": \"... it was delicious,Today  ...\"\n                  }\n                },\n                \"Keyword_Tokenizier\": {\n                  \"summary\": \"Keyword Tokenizier\",\n                  \"description\": \"Keyword tokenizing is basically no tokenisation. However you may wish to pairkeyword tokenisation with a lower case filter, so whey you perform a term aggregation on the textvalues with mixed case will be merged together. Of note in the example is that the analyze endpoint does support a list of terms to analyze.\",\n                  \"value\": {\n                    \"tokenizer\": {\n                      \"type\": \"keyword\"\n                    },\n                    \"filter\": [\n                      \"lowercase\"\n                    ],\n                    \"text\": [\n                      \"John Smith\",\n                      \"john smith\"\n                    ]\n                  }\n                },\n                \"Simple_Pattern_Tokenizier\": {\n                  \"summary\": \"Simple Pattern Tokenizier\",\n                  \"description\": \"Tokenizing based on supplied simple patten. In this example we have some medicine and we want to strip the volumes out of the names\",\n                  \"value\": {\n                    \"tokenizer\": {\n                      \"type\": \"simple_pattern\",\n                      \"pattern\": \"[0123456789]{3,7}\"\n                    },\n                    \"filter\": [\n                      \"lowercase\"\n                    ],\n                    \"text\": [\n                      \"Ventolin 110mg\",\n                      \"Becloforte-1000-mg\"\n                    ]\n                  }\n                },\n                \"Character_Group_Tokenizer\": {\n                  \"summary\": \"Chracter Group Tokenizier\",\n                  \"description\": \"Super simple example of CSV tokenizing using the character group tokenizer\",\n                  \"value\": {\n                    \"tokenizer\": {\n                      \"type\": \"char_group\",\n                      \"tokenize_on_chars\": [\n                        \",\"\n                      ]\n                    },\n                    \"text\": \"James,Brown,Rules\"\n                  }\n                },\n                \"Apostrophe_Filter\": {\n                  \"summary\": \"Apostrophe Filter\",\n                  \"description\": \"Remove apostrophes and following text\",\n                  \"value\": {\n                    \"tokenizer\": \"standard\",\n                    \"filter\": [\n                      {\n                        \"type\": \"apostrophe\"\n                      }\n                    ],\n                    \"text\": [\n                      \"John's runners\",\n                      \"the company's accounts\"\n                    ]\n                  }\n                },\n                \"Stopword_Filter\": {\n                  \"summary\": \"Stopword Filter\",\n                  \"description\": \"Remove configured stopwords\",\n                  \"value\": {\n                    \"tokenizer\": \"standard\",\n                    \"filter\": [\n                      {\n                        \"type\": \"stop\",\n                        \"ignore_case\": true\n                      }\n                    ],\n                    \"text\": \"to be or not to be, that is the question\"\n                  }\n                },\n                \"Stemming_Snowball_Filter\": {\n                  \"summary\": \"Stemming Snowball Filter\",\n                  \"description\": \"Stemming of tokens using the snowball algorithm\",\n                  \"value\": {\n                    \"tokenizer\": \"standard\",\n                    \"filter\": [\n                      {\n                        \"type\": \"lowercase\"\n                      },\n                      {\n                        \"type\": \"snowball\",\n                        \"language\": \"english\"\n                      }\n                    ],\n                    \"text\": \"Tennis player's racquets\"\n                  }\n                },\n                \"Stemming_Kstem_Filter\": {\n                  \"summary\": \"Stemming Kstem Filter\",\n                  \"description\": \"Stemming of tokens using the Kstem algorithm. Equivalent to the `light_english` stemmer. . Most of these stemming algorithms assume that the text has already been lower cased. Hence why we have the lowercasign filter as the first filter.\",\n                  \"value\": {\n                    \"tokenizer\": \"standard\",\n                    \"filter\": [\n                      {\n                        \"type\": \"lowercase\"\n                      },\n                      {\n                        \"type\": \"kstem\"\n                      }\n                    ],\n                    \"text\": \"Tennis player's racquets\"\n                  }\n                },\n                \"Stemming_English_Filter\": {\n                  \"summary\": \"Stemming English Filter\",\n                  \"description\": \"Standard english stemming. Noting the additional filters applied. \",\n                  \"value\": {\n                    \"tokenizer\": \"standard\",\n                    \"filter\": [\n                      {\n                        \"type\": \"lowercase\"\n                      },\n                      {\n                        \"type\": \"apostrophe\"\n                      },\n                      {\n                        \"type\": \"stemmer\"\n                      }\n                    ],\n                    \"text\": \"Tennis player's racquets\"\n                  }\n                },\n                \"Full_Custom_Analysis_Chain\": {\n                  \"summary\": \"Fully Custom Analysis Example\",\n                  \"description\": \"Example full custom analysis Chain. \",\n                  \"value\": {\n                    \"char_filter\": [\n                      {\n                        \"type\": \"mapping\",\n                        \"mappings\": [\n                          \":) =\u003e good\",\n                          \":( =\u003e bad\"\n                        ]\n                      }\n                    ],\n                    \"tokenizer\": \"standard\",\n                    \"filter\": [\n                      {\n                        \"type\": \"lowercase\"\n                      },\n                      {\n                        \"type\": \"stemmer\",\n                        \"language\": \"english\"\n                      },\n                      {\n                        \"type\": \"stop\",\n                        \"stopwords\": [\n                          \"i'm\"\n                        ]\n                      }\n                    ],\n                    \"text\": \"I'm feeling :)\"\n                  }\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"tokens\": [\n                        {\n                          \"token\": \"johnny\",\n                          \"start_offset\": 0,\n                          \"end_offset\": 6,\n                          \"type\": \"\u003cALPHANUM\u003e\",\n                          \"position\": 0\n                        },\n                        {\n                          \"token\": \"5\",\n                          \"start_offset\": 8,\n                          \"end_offset\": 9,\n                          \"type\": \"\u003cNUM\u003e\",\n                          \"position\": 1\n                        },\n                        {\n                          \"token\": \"is\",\n                          \"start_offset\": 10,\n                          \"end_offset\": 12,\n                          \"type\": \"\u003cALPHANUM\u003e\",\n                          \"position\": 2\n                        },\n                        {\n                          \"token\": \"alive\",\n                          \"start_offset\": 13,\n                          \"end_offset\": 18,\n                          \"type\": \"\u003cALPHANUM\u003e\",\n                          \"position\": 3\n                        }\n                      ]\n                    }\n                  },\n                  \"JSON Response(with explain equals True)\": {\n                    \"summary\": \"JSON Response(with explain equals True)\",\n                    \"value\": {\n                      \"detail\": {\n                        \"custom_analyzer\": false,\n                        \"analyzer\": {\n                          \"name\": \"standard\",\n                          \"tokens\": [\n                            {\n                              \"token\": \"johnny\",\n                              \"start_offset\": 0,\n                              \"end_offset\": 6,\n                              \"type\": \"\u003cALPHANUM\u003e\",\n                              \"position\": 0,\n                              \"bytes\": \"[6a 6f 68 6e 6e 79]\",\n                              \"positionLength\": 1,\n                              \"termFrequency\": 1\n                            },\n                            {\n                              \"token\": \"5\",\n                              \"start_offset\": 8,\n                              \"end_offset\": 9,\n                              \"type\": \"\u003cNUM\u003e\",\n                              \"position\": 1,\n                              \"bytes\": \"[35]\",\n                              \"positionLength\": 1,\n                              \"termFrequency\": 1\n                            },\n                            {\n                              \"token\": \"is\",\n                              \"start_offset\": 10,\n                              \"end_offset\": 12,\n                              \"type\": \"\u003cALPHANUM\u003e\",\n                              \"position\": 2,\n                              \"bytes\": \"[69 73]\",\n                              \"positionLength\": 1,\n                              \"termFrequency\": 1\n                            },\n                            {\n                              \"token\": \"alive\",\n                              \"start_offset\": 13,\n                              \"end_offset\": 18,\n                              \"type\": \"\u003cALPHANUM\u003e\",\n                              \"position\": 3,\n                              \"bytes\": \"[61 6c 69 76 65]\",\n                              \"positionLength\": 1,\n                              \"termFrequency\": 1\n                            }\n                          ]\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/{index}/_analyze\": {\n      \"post\": {\n        \"tags\": [\n          \"\\ud83d\\udd25 Text Analysis\"\n        ],\n        \"summary\": \"Text Analysis For Specific Index\",\n        \"description\": \"Analyze how text would be analyzed for a specific index. \\n\\nIncluding `\\\"explain\\\" : true` in the request will allow you to review the full analysis chain. \\n \",\n        \"operationId\": \"text_analysis_for_specific_index__index___analyze_post\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Index\",\n              \"type\": \"string\"\n            },\n            \"name\": \"index\",\n            \"in\": \"path\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"title\": \"Request\",\n                \"type\": \"object\"\n              },\n              \"examples\": {\n                \"Standard_Analyzer - The Bermudas\": {\n                  \"summary\": \"Standard (Default) Anayzer - The Bermudas.\",\n                  \"description\": \"Standard analyzer - `The Bermudas` is present in the source document.\",\n                  \"value\": {\n                    \"analyzer\": \"standard\",\n                    \"text\": \"The Bermudas\"\n                  }\n                },\n                \"Custom_Analyzer - The Bermudas\": {\n                  \"summary\": \"Custom Analyzer - The Bermudas.\",\n                  \"description\": \"Custom analyzer - `The Bermudas` is present in the source document.\",\n                  \"value\": {\n                    \"field\": \"name\",\n                    \"text\": \"The Bermudas\"\n                  }\n                },\n                \"Standard_Analyzer - Bermuda Republic\": {\n                  \"summary\": \"Standard (Default) Anayzer - Bermuda Republic\",\n                  \"description\": \"Standard analyzer - `Bermuda Republic` is present in the source document.\",\n                  \"value\": {\n                    \"analyzer\": \"standard\",\n                    \"text\": \"Bermuda Republic\"\n                  }\n                },\n                \"Custom_Analyzer - Bermuda Republic\": {\n                  \"summary\": \"Custom Analyzer - Bermuda Republic\",\n                  \"description\": \"Custom analyzer - `Bermuda Republic` is present in the source document.\",\n                  \"value\": {\n                    \"field\": \"name\",\n                    \"text\": \"Bermuda Republic\"\n                  }\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"tokens\": [\n                        {\n                          \"token\": \"jumping\",\n                          \"start_offset\": 0,\n                          \"end_offset\": 7,\n                          \"type\": \"\u003cALPHANUM\u003e\",\n                          \"position\": 0\n                        },\n                        {\n                          \"token\": \"jack's\",\n                          \"start_offset\": 8,\n                          \"end_offset\": 14,\n                          \"type\": \"\u003cALPHANUM\u003e\",\n                          \"position\": 1\n                        },\n                        {\n                          \"token\": \"jumpers\",\n                          \"start_offset\": 15,\n                          \"end_offset\": 22,\n                          \"type\": \"\u003cALPHANUM\u003e\",\n                          \"position\": 2\n                        }\n                      ]\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/_index_template/{indexTemplateName}\": {\n      \"get\": {\n        \"tags\": [\n          \"\\ud83d\\udd06 Index Templates\"\n        ],\n        \"summary\": \"Retrieve Index Template\",\n        \"description\": \"Retrieve a previously saved index template - based on the \\nspecified index template name\",\n        \"operationId\": \"retrieve_index_template__index_template__indexTemplateName__get\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Indextemplatename\",\n              \"type\": \"string\"\n            },\n            \"example\": \"country-index-template\",\n            \"name\": \"indexTemplateName\",\n            \"in\": \"path\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"index_templates\": [\n                        {\n                          \"name\": \"country-index-template\",\n                          \"index_template\": {\n                            \"index_patterns\": [\n                              \"country\",\n                              \"country*\"\n                            ],\n                            \"template\": {\n                              \"settings\": {\n                                \"index\": {\n                                  \"number_of_shards\": \"1\",\n                                  \"codec\": \"best_compression\",\n                                  \"number_of_replicas\": \"0\"\n                                }\n                              },\n                              \"mappings\": {\n                                \"properties\": {\n                                  \"countryCode\": {\n                                    \"type\": \"keyword\"\n                                  }\n                                }\n                              }\n                            },\n                            \"composed_of\": [],\n                            \"priority\": 1\n                          }\n                        }\n                      ]\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      },\n      \"put\": {\n        \"tags\": [\n          \"\\ud83d\\udd06 Index Templates\"\n        ],\n        \"summary\": \"Save Index Template\",\n        \"description\": \"This endpoint is used to save an index template into the cluster.\\nOnce a template has been saved into the cluster all indexes created after that match the index pattern will have this template applied. \",\n        \"operationId\": \"save_index_template__index_template__indexTemplateName__put\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Indextemplatename\",\n              \"type\": \"string\"\n            },\n            \"example\": \"country-index-template\",\n            \"name\": \"indexTemplateName\",\n            \"in\": \"path\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"title\": \"Request\",\n                \"type\": \"object\"\n              },\n              \"examples\": {\n                \"simple_index_template_creation\": {\n                  \"summary\": \"A simple index template configuration\",\n                  \"description\": \"A **simple** index template configuration. In this example we set a few index settings and then proivde the mapping for one field.\",\n                  \"value\": {\n                    \"index_patterns\": [\n                      \"country\",\n                      \"country*\"\n                    ],\n                    \"priority\": 1,\n                    \"template\": {\n                      \"settings\": {\n                        \"number_of_shards\": 1,\n                        \"number_of_replicas\": 0,\n                        \"codec\": \"best_compression\"\n                      },\n                      \"mappings\": {\n                        \"properties\": {\n                          \"countryCode\": {\n                            \"type\": \"keyword\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                },\n                \"complex_index_template_creation\": {\n                  \"summary\": \"A index template with 'nested field' and a 'text analysis' analyzer\",\n                  \"description\": \"In this configuration we configure some text analysis of the name field, nesting for the gdp list, as well as provide some meta data around the template and allocate a priority to the application of the template\",\n                  \"value\": {\n                    \"index_patterns\": [\n                      \"country\",\n                      \"country*\"\n                    ],\n                    \"template\": {\n                      \"settings\": {\n                        \"number_of_shards\": 1,\n                        \"number_of_replicas\": 0,\n                        \"codec\": \"best_compression\",\n                        \"analysis\": {\n                          \"analyzer\": {\n                            \"custom_analyzer\": {\n                              \"tokenizer\": \"standard\",\n                              \"filter\": [\n                                \"lowercase\",\n                                \"stopword_filter\",\n                                \"snowball_filter\"\n                              ]\n                            }\n                          },\n                          \"filter\": {\n                            \"snowball_filter\": {\n                              \"type\": \"snowball\"\n                            },\n                            \"stopword_filter\": {\n                              \"type\": \"stop\",\n                              \"stopwords\": [\n                                \"a\",\n                                \"the\",\n                                \"republic\"\n                              ]\n                            }\n                          }\n                        }\n                      },\n                      \"mappings\": {\n                        \"properties\": {\n                          \"name\": {\n                            \"type\": \"text\",\n                            \"analyzer\": \"custom_analyzer\",\n                            \"fields\": {\n                              \"keyword\": {\n                                \"type\": \"keyword\",\n                                \"ignore_above\": 256\n                              }\n                            }\n                          },\n                          \"countryCode\": {\n                            \"type\": \"keyword\"\n                          },\n                          \"gdp\": {\n                            \"type\": \"nested\",\n                            \"properties\": {\n                              \"amount\": {\n                                \"type\": \"long\"\n                              },\n                              \"year\": {\n                                \"type\": \"long\"\n                              }\n                            }\n                          }\n                        }\n                      },\n                      \"aliases\": {\n                        \"countries\": {}\n                      }\n                    },\n                    \"priority\": 10,\n                    \"version\": 3,\n                    \"_meta\": {\n                      \"description\": \"my complex template\",\n                      \"createdDate\": \"2020-01-01\",\n                      \"notes\": \"added priortiy as 10\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"acknowledged\": true\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      },\n      \"delete\": {\n        \"tags\": [\n          \"\\ud83d\\udd06 Index Templates\"\n        ],\n        \"summary\": \"Delete Index Template\",\n        \"description\": \"Delete a previously saved index template - based on the index template name.       \",\n        \"operationId\": \"delete_index_template__index_template__indexTemplateName__delete\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Indextemplatename\",\n              \"type\": \"string\"\n            },\n            \"example\": \"country-index-template\",\n            \"name\": \"indexTemplateName\",\n            \"in\": \"path\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"acknowledged\": true\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/_index_template/\": {\n      \"get\": {\n        \"tags\": [\n          \"\\ud83d\\udd06 Index Templates\"\n        ],\n        \"summary\": \"Retrieve All Index Templates\",\n        \"description\": \"Retrieve a list of all index templates.\",\n        \"operationId\": \"retrieve_all_index_templates__index_template__get\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"index_templates\": [\n                        {\n                          \"name\": \"country-index-template\",\n                          \"index_template\": {\n                            \"index_patterns\": [\n                              \"country\"\n                            ],\n                            \"template\": {\n                              \"settings\": {\n                                \"index\": {\n                                  \"number_of_shards\": \"1\"\n                                }\n                              },\n                              \"mappings\": {\n                                \"properties\": {\n                                  \"host_name\": {\n                                    \"type\": \"keyword\"\n                                  }\n                                }\n                              }\n                            },\n                            \"version\": 3,\n                            \"_meta\": {\n                              \"description\": \"my first index template\"\n                            }\n                          }\n                        },\n                        {\n                          \"name\": \"transaction-report\",\n                          \"index_template\": {\n                            \"index_patterns\": [\n                              \"transaction-report\"\n                            ],\n                            \"template\": {\n                              \"settings\": {\n                                \"index\": {\n                                  \"max_result_window\": \"20000\",\n                                  \"codec\": \"best_compression\",\n                                  \"refresh_interval\": \"30s\",\n                                  \"analysis\": {\n                                    \"analyzer\": {\n                                      \"account_number_analyzer\": {\n                                        \"char_filter\": [\n                                          \"account_number_filter\"\n                                        ],\n                                        \"tokenizer\": \"standard\"\n                                      }\n                                    },\n                                    \"char_filter\": {\n                                      \"account_number_filter\": {\n                                        \"pattern\": \"[^0-9]\",\n                                        \"type\": \"pattern_replace\",\n                                        \"replacement\": \"\"\n                                      }\n                                    }\n                                  },\n                                  \"number_of_shards\": \"3\",\n                                  \"number_of_replicas\": \"0\"\n                                }\n                              },\n                              \"mappings\": {\n                                \"properties\": {\n                                  \"all\": {\n                                    \"type\": \"text\"\n                                  },\n                                  \"role\": {\n                                    \"type\": \"nested\",\n                                    \"properties\": {\n                                      \"roleType\": {\n                                        \"copy_to\": \"all\",\n                                        \"type\": \"text\",\n                                        \"fields\": {\n                                          \"keyword\": {\n                                            \"ignore_above\": 256,\n                                            \"type\": \"keyword\"\n                                          }\n                                        }\n                                      },\n                                      \"party\": {\n                                        \"type\": \"nested\",\n                                        \"properties\": {\n                                          \"address\": {\n                                            \"type\": \"nested\",\n                                            \"properties\": {\n                                              \"country\": {\n                                                \"copy_to\": \"all\",\n                                                \"type\": \"text\",\n                                                \"fields\": {\n                                                  \"keyword\": {\n                                                    \"ignore_above\": 256,\n                                                    \"type\": \"keyword\"\n                                                  }\n                                                }\n                                              },\n                                              \"streetAddress\": {\n                                                \"copy_to\": \"all\",\n                                                \"type\": \"text\",\n                                                \"fields\": {\n                                                  \"keyword\": {\n                                                    \"ignore_above\": 256,\n                                                    \"type\": \"keyword\"\n                                                  }\n                                                }\n                                              },\n                                              \"postcode\": {\n                                                \"copy_to\": \"all\",\n                                                \"type\": \"text\",\n                                                \"fields\": {\n                                                  \"keyword\": {\n                                                    \"ignore_above\": 256,\n                                                    \"type\": \"keyword\"\n                                                  }\n                                                }\n                                              },\n                                              \"suburb\": {\n                                                \"copy_to\": \"all\",\n                                                \"type\": \"text\",\n                                                \"fields\": {\n                                                  \"keyword\": {\n                                                    \"ignore_above\": 256,\n                                                    \"type\": \"keyword\"\n                                                  }\n                                                }\n                                              },\n                                              \"state\": {\n                                                \"copy_to\": \"all\",\n                                                \"type\": \"text\",\n                                                \"fields\": {\n                                                  \"keyword\": {\n                                                    \"ignore_above\": 256,\n                                                    \"type\": \"keyword\"\n                                                  }\n                                                }\n                                              },\n                                              \"geolocation\": {\n                                                \"type\": \"geo_point\"\n                                              }\n                                            }\n                                          },\n                                          \"identification\": {\n                                            \"type\": \"nested\",\n                                            \"properties\": {\n                                              \"identifier\": {\n                                                \"copy_to\": \"all\",\n                                                \"type\": \"text\",\n                                                \"fields\": {\n                                                  \"keyword\": {\n                                                    \"ignore_above\": 256,\n                                                    \"type\": \"keyword\"\n                                                  }\n                                                }\n                                              },\n                                              \"identificationSubType\": {\n                                                \"type\": \"text\",\n                                                \"fields\": {\n                                                  \"keyword\": {\n                                                    \"ignore_above\": 256,\n                                                    \"type\": \"keyword\"\n                                                  }\n                                                }\n                                              },\n                                              \"identificationType\": {\n                                                \"copy_to\": \"all\",\n                                                \"type\": \"text\",\n                                                \"fields\": {\n                                                  \"keyword\": {\n                                                    \"ignore_above\": 256,\n                                                    \"type\": \"keyword\"\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          },\n                                          \"gender\": {\n                                            \"copy_to\": \"all\",\n                                            \"type\": \"text\",\n                                            \"fields\": {\n                                              \"keyword\": {\n                                                \"ignore_above\": 256,\n                                                \"type\": \"keyword\"\n                                              }\n                                            }\n                                          },\n                                          \"jobTitle\": {\n                                            \"copy_to\": \"all\",\n                                            \"type\": \"text\",\n                                            \"fields\": {\n                                              \"keyword\": {\n                                                \"ignore_above\": 256,\n                                                \"type\": \"keyword\"\n                                              }\n                                            }\n                                          },\n                                          \"name\": {\n                                            \"type\": \"nested\",\n                                            \"properties\": {\n                                              \"fullName\": {\n                                                \"copy_to\": \"all\",\n                                                \"type\": \"text\",\n                                                \"fields\": {\n                                                  \"keyword\": {\n                                                    \"ignore_above\": 256,\n                                                    \"type\": \"keyword\"\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          },\n                                          \"partyId\": {\n                                            \"copy_to\": \"all\",\n                                            \"type\": \"text\",\n                                            \"fields\": {\n                                              \"keyword\": {\n                                                \"ignore_above\": 256,\n                                                \"type\": \"keyword\"\n                                              }\n                                            }\n                                          },\n                                          \"partyType\": {\n                                            \"copy_to\": \"all\",\n                                            \"type\": \"text\",\n                                            \"fields\": {\n                                              \"keyword\": {\n                                                \"ignore_above\": 256,\n                                                \"type\": \"keyword\"\n                                              }\n                                            }\n                                          },\n                                          \"account\": {\n                                            \"type\": \"nested\",\n                                            \"properties\": {\n                                              \"branchId\": {\n                                                \"type\": \"text\",\n                                                \"fields\": {\n                                                  \"keyword\": {\n                                                    \"ignore_above\": 256,\n                                                    \"type\": \"keyword\"\n                                                  }\n                                                }\n                                              },\n                                              \"country\": {\n                                                \"type\": \"text\",\n                                                \"fields\": {\n                                                  \"keyword\": {\n                                                    \"ignore_above\": 256,\n                                                    \"type\": \"keyword\"\n                                                  }\n                                                }\n                                              },\n                                              \"number\": {\n                                                \"copy_to\": \"all\",\n                                                \"analyzer\": \"account_number_analyzer\",\n                                                \"type\": \"text\",\n                                                \"fields\": {\n                                                  \"keyword\": {\n                                                    \"ignore_above\": 256,\n                                                    \"type\": \"keyword\"\n                                                  }\n                                                }\n                                              },\n                                              \"streetAddress\": {\n                                                \"copy_to\": \"all\",\n                                                \"type\": \"text\",\n                                                \"fields\": {\n                                                  \"keyword\": {\n                                                    \"ignore_above\": 256,\n                                                    \"type\": \"keyword\"\n                                                  }\n                                                }\n                                              },\n                                              \"postcode\": {\n                                                \"copy_to\": \"all\",\n                                                \"type\": \"text\",\n                                                \"fields\": {\n                                                  \"keyword\": {\n                                                    \"ignore_above\": 256,\n                                                    \"type\": \"keyword\"\n                                                  }\n                                                }\n                                              },\n                                              \"branchName\": {\n                                                \"type\": \"text\",\n                                                \"fields\": {\n                                                  \"keyword\": {\n                                                    \"ignore_above\": 256,\n                                                    \"type\": \"keyword\"\n                                                  }\n                                                }\n                                              },\n                                              \"suburb\": {\n                                                \"copy_to\": \"all\",\n                                                \"type\": \"text\",\n                                                \"fields\": {\n                                                  \"keyword\": {\n                                                    \"ignore_above\": 256,\n                                                    \"type\": \"keyword\"\n                                                  }\n                                                }\n                                              },\n                                              \"state\": {\n                                                \"copy_to\": \"all\",\n                                                \"type\": \"text\",\n                                                \"fields\": {\n                                                  \"keyword\": {\n                                                    \"ignore_above\": 256,\n                                                    \"type\": \"keyword\"\n                                                  }\n                                                }\n                                              },\n                                              \"network\": {\n                                                \"copy_to\": \"all\",\n                                                \"type\": \"text\",\n                                                \"fields\": {\n                                                  \"keyword\": {\n                                                    \"ignore_above\": 256,\n                                                    \"type\": \"keyword\"\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  },\n                                  \"report\": {\n                                    \"properties\": {\n                                      \"reportType\": {\n                                        \"type\": \"text\",\n                                        \"fields\": {\n                                          \"keyword\": {\n                                            \"ignore_above\": 256,\n                                            \"type\": \"keyword\"\n                                          }\n                                        }\n                                      },\n                                      \"submissionId\": {\n                                        \"type\": \"keyword\"\n                                      },\n                                      \"reportNumber\": {\n                                        \"type\": \"long\"\n                                      },\n                                      \"reporter\": {\n                                        \"type\": \"text\",\n                                        \"fields\": {\n                                          \"keyword\": {\n                                            \"ignore_above\": 256,\n                                            \"type\": \"keyword\"\n                                          }\n                                        }\n                                      },\n                                      \"reporterId\": {\n                                        \"type\": \"integer\"\n                                      },\n                                      \"processedDatetime\": {\n                                        \"format\": \"yyyy-MM-dd'T'HH:mm:ssZ||yyyy-MM-dd||strict_date_optional_time\",\n                                        \"type\": \"date\"\n                                      }\n                                    }\n                                  },\n                                  \"transaction\": {\n                                    \"properties\": {\n                                      \"amount\": {\n                                        \"type\": \"double\"\n                                      },\n                                      \"transactionDatetime\": {\n                                        \"format\": \"yyyy-MM-dd'T'HH:mm:ssZ||yyyy-MM-dd||strict_date_optional_time\",\n                                        \"type\": \"date\"\n                                      },\n                                      \"direction\": {\n                                        \"type\": \"text\",\n                                        \"fields\": {\n                                          \"keyword\": {\n                                            \"ignore_above\": 256,\n                                            \"type\": \"keyword\"\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      ]\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/_ingest/pipeline/{ingestPipelineName}\": {\n      \"get\": {\n        \"tags\": [\n          \"\\ud83c\\udf83 Ingest Pipelines\"\n        ],\n        \"summary\": \"Retrieve Ingest Pipeline\",\n        \"description\": \"Retrieve a previously saved ingest pipeline - based on the \\nspecified ingest pipeline name\",\n        \"operationId\": \"retrieve_ingest_pipeline__ingest_pipeline__ingestPipelineName__get\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Ingestpipelinename\",\n              \"type\": \"string\"\n            },\n            \"example\": \"test-pipeline\",\n            \"name\": \"ingestPipelineName\",\n            \"in\": \"path\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"acknowledged\": true\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      },\n      \"put\": {\n        \"tags\": [\n          \"\\ud83c\\udf83 Ingest Pipelines\"\n        ],\n        \"summary\": \"Save Ingest Pipeline\",\n        \"description\": \"This endpoint is used to save an ingest pipelines into the cluster state. \",\n        \"operationId\": \"save_ingest_pipeline__ingest_pipeline__ingestPipelineName__put\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Ingestpipelinename\",\n              \"type\": \"string\"\n            },\n            \"example\": \"test-pipeline\",\n            \"name\": \"ingestPipelineName\",\n            \"in\": \"path\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"title\": \"Request\",\n                \"type\": \"object\"\n              },\n              \"examples\": {\n                \"simple_pipeline\": {\n                  \"summary\": \"A simple pipeline configuration\",\n                  \"description\": \"Just adds a field to all documents.\",\n                  \"value\": {\n                    \"description\": \"Add field example\",\n                    \"processors\": [\n                      {\n                        \"set\": {\n                          \"description\": \"Add field processor\",\n                          \"field\": \"important-field\",\n                          \"value\": \"added-field\"\n                        }\n                      }\n                    ]\n                  }\n                },\n                \"add_timestamp_pipeline\": {\n                  \"summary\": \"A timestamp pipeline configuration\",\n                  \"description\": \"Adds timestamp to documents. We also add a date processor to remove the nanos and milliseconds\",\n                  \"value\": {\n                    \"description\": \"Add timestamp to documents\",\n                    \"processors\": [\n                      {\n                        \"set\": {\n                          \"field\": \"@timestamp\",\n                          \"value\": \"{{_ingest.timestamp}}\"\n                        }\n                      },\n                      {\n                        \"date\": {\n                          \"field\": \"@timestamp\",\n                          \"target_field\": \"@timestamp\",\n                          \"formats\": [\n                            \"strict_date_optional_time_nanos\"\n                          ],\n                          \"output_format\": \"yyyy-MM-dd'T'HH:mm:ssZ\"\n                        }\n                      }\n                    ]\n                  }\n                },\n                \"allocate_document_to_datetime_index_pipeline\": {\n                  \"summary\": \"Allocate the document to a datetime index\",\n                  \"description\": \"Allocate the documentment to an index based on the indexing date time.\",\n                  \"value\": {\n                    \"description\": \"Add timestamp to documents\",\n                    \"processors\": [\n                      {\n                        \"set\": {\n                          \"field\": \"@timestamp\",\n                          \"value\": \"{{_ingest.timestamp}}\"\n                        }\n                      },\n                      {\n                        \"date_index_name\": {\n                          \"field\": \"@timestamp\",\n                          \"index_name_prefix\": \"country-\",\n                          \"date_formats\": [\n                            \"strict_date_optional_time_nanos\"\n                          ],\n                          \"date_rounding\": \"M\",\n                          \"timezone\": \"Australia/Sydney\"\n                        }\n                      }\n                    ]\n                  }\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"acknowledged\": true\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      },\n      \"delete\": {\n        \"tags\": [\n          \"\\ud83c\\udf83 Ingest Pipelines\"\n        ],\n        \"summary\": \"Delete Ingest Pipeline\",\n        \"description\": \"Delete a previously saved ingest pipeline - based on the ingest pipeline name.       \",\n        \"operationId\": \"delete_ingest_pipeline__ingest_pipeline__ingestPipelineName__delete\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Ingestpipelinename\",\n              \"type\": \"string\"\n            },\n            \"example\": \"test-pipeline\",\n            \"name\": \"ingestPipelineName\",\n            \"in\": \"path\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"acknowledged\": true\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/_ingest/pipeline/{ingestPipelineName}/_simulate\": {\n      \"post\": {\n        \"tags\": [\n          \"\\ud83c\\udf83 Ingest Pipelines\"\n        ],\n        \"summary\": \"Simulate Ingest Pipeline\",\n        \"description\": \"Process a series of documents against a specified ingest pipeline. \",\n        \"operationId\": \"simulate_ingest_pipeline__ingest_pipeline__ingestPipelineName___simulate_post\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Ingestpipelinename\",\n              \"type\": \"string\"\n            },\n            \"example\": \"test-pipeline\",\n            \"name\": \"ingestPipelineName\",\n            \"in\": \"path\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"title\": \"Request\",\n                \"type\": \"object\"\n              },\n              \"examples\": {\n                \"simulation_of_ingest_pipeline\": {\n                  \"summary\": \"A simple ingest pipeline simulation.\",\n                  \"description\": \"Simulation of ingest pipeline.\",\n                  \"value\": {\n                    \"docs\": [\n                      {\n                        \"_index\": \"index\",\n                        \"_id\": \"id\",\n                        \"_source\": {\n                          \"country\": \"Australia\"\n                        }\n                      },\n                      {\n                        \"_index\": \"index\",\n                        \"_id\": \"id\",\n                        \"_source\": {\n                          \"country\": \"New Zealand\"\n                        }\n                      }\n                    ]\n                  }\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"template_output\": {\n                    \"size\": \"10\",\n                    \"query\": {\n                      \"match\": {\n                        \"name\": \"France\"\n                      }\n                    },\n                    \"from\": \"20\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/_aliases\": {\n      \"post\": {\n        \"tags\": [\n          \"\\ud83d\\udc9c Alias Operations\"\n        ],\n        \"summary\": \"Management Of Index Aliases\",\n        \"description\": \"Create, update and delete index aliases\",\n        \"operationId\": \"management_of_index_aliases__aliases_post\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"title\": \"Request\",\n                \"type\": \"object\"\n              },\n              \"examples\": {\n                \"create_alias\": {\n                  \"summary\": \"A simple alias creation request\",\n                  \"description\": \"A **simple** alias creation request.\",\n                  \"value\": {\n                    \"actions\": [\n                      {\n                        \"add\": {\n                          \"index\": \"country-2021-*\",\n                          \"alias\": \"country\"\n                        }\n                      }\n                    ]\n                  }\n                },\n                \"remove_alias\": {\n                  \"summary\": \"A index alias removal request\",\n                  \"description\": \"A **simple** alias removal request.\",\n                  \"value\": {\n                    \"actions\": [\n                      {\n                        \"remove\": {\n                          \"index\": \"country-2021-*\",\n                          \"alias\": \"country\"\n                        }\n                      }\n                    ]\n                  }\n                },\n                \"replace_alias\": {\n                  \"summary\": \"Replace a index alias request\",\n                  \"description\": \"The aliases API allows you can perform multiple actions in a **single atomic** operation.\",\n                  \"value\": {\n                    \"actions\": [\n                      {\n                        \"remove\": {\n                          \"index\": \"country-2021-*\",\n                          \"alias\": \"country\"\n                        }\n                      },\n                      {\n                        \"add\": {\n                          \"index\": \"country-2022-*\",\n                          \"alias\": \"country\"\n                        }\n                      }\n                    ]\n                  }\n                },\n                \"filter_alias\": {\n                  \"summary\": \"Create a filter alias request\",\n                  \"description\": \"Create an filtered alias of an index.\",\n                  \"value\": {\n                    \"actions\": [\n                      {\n                        \"add\": {\n                          \"index\": \"country-2021-*\",\n                          \"alias\": \"country\",\n                          \"filter\": {\n                            \"bool\": {\n                              \"filter\": [\n                                {\n                                  \"range\": {\n                                    \"@timestamp\": {\n                                      \"gte\": \"now-1d/d\"\n                                    }\n                                  }\n                                }\n                              ]\n                            }\n                          }\n                        }\n                      }\n                    ]\n                  }\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response(Success)\": {\n                    \"summary\": \"JSON Response(Success)\",\n                    \"value\": {\n                      \"acknowledged\": true\n                    }\n                  },\n                  \"JSON Response(Failure)\": {\n                    \"summary\": \"JSON Response(Failure)\",\n                    \"value\": {\n                      \"error\": {\n                        \"root_cause\": [\n                          {\n                            \"type\": \"index_not_found_exception\",\n                            \"reason\": \"no such index [party]\",\n                            \"index\": \"party\",\n                            \"resource.id\": \"party\",\n                            \"resource.type\": \"index_or_alias\",\n                            \"index_uuid\": \"_na_\"\n                          }\n                        ],\n                        \"type\": \"index_not_found_exception\",\n                        \"reason\": \"no such index [party]\",\n                        \"index\": \"party\",\n                        \"resource.id\": \"party\",\n                        \"resource.type\": \"index_or_alias\",\n                        \"index_uuid\": \"_na_\"\n                      },\n                      \"status\": 404\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/_alias\": {\n      \"get\": {\n        \"tags\": [\n          \"\\ud83d\\udc9c Alias Operations\"\n        ],\n        \"summary\": \"Retrieve All Index Aliases\",\n        \"description\": \"Retrieve all index aliases\",\n        \"operationId\": \"retrieve_all_index_aliases__alias_get\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response(Created)\": {\n                    \"summary\": \"JSON Response(Created)\",\n                    \"value\": {\n                      \"_index\": \"country\",\n                      \"_type\": \"_doc\",\n                      \"_id\": \"1\",\n                      \"_version\": 1,\n                      \"result\": \"created\",\n                      \"_shards\": {\n                        \"total\": 1,\n                        \"successful\": 1,\n                        \"failed\": 0\n                      },\n                      \"_seq_no\": 0,\n                      \"_primary_term\": 1\n                    }\n                  },\n                  \"JSON Response(Updated)\": {\n                    \"summary\": \"JSON Response(Updated)\",\n                    \"value\": {\n                      \"_index\": \"country\",\n                      \"_type\": \"_doc\",\n                      \"_id\": \"1\",\n                      \"_version\": 2,\n                      \"result\": \"updated\",\n                      \"_shards\": {\n                        \"total\": 1,\n                        \"successful\": 1,\n                        \"failed\": 0\n                      },\n                      \"_seq_no\": 5,\n                      \"_primary_term\": 1\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/_alias/{aliasName}\": {\n      \"get\": {\n        \"tags\": [\n          \"\\ud83d\\udc9c Alias Operations\"\n        ],\n        \"summary\": \"Retrieve A Specific Alias\",\n        \"description\": \"Retrieve a specific index alias by name\",\n        \"operationId\": \"retrieve_a_specific_alias__alias__aliasName__get\",\n        \"parameters\": [\n          {\n            \"description\": \"Index alias name\",\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Aliasname\",\n              \"type\": \"string\",\n              \"description\": \"Index alias name\"\n            },\n            \"name\": \"aliasName\",\n            \"in\": \"path\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"country-2021\": {\n                        \"aliases\": {\n                          \"country\": {\n                            \"filter\": {\n                              \"bool\": {\n                                \"filter\": [\n                                  {\n                                    \"range\": {\n                                      \"@timestamp\": {\n                                        \"gte\": \"now-1d/d\"\n                                      }\n                                    }\n                                  }\n                                ]\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/_scripts/{searchTemplateName}\": {\n      \"get\": {\n        \"tags\": [\n          \"\\ud83d\\udc88 Search Templates\"\n        ],\n        \"summary\": \"Retrieve Search Template\",\n        \"description\": \"Retrieve a previously saved search template - based on the \\nsearch template name\",\n        \"operationId\": \"retrieve_search_template__scripts__searchTemplateName__get\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Searchtemplatename\",\n              \"type\": \"string\"\n            },\n            \"example\": \"country-search-template\",\n            \"name\": \"searchTemplateName\",\n            \"in\": \"path\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"_id\": \"country-search-template\",\n                      \"found\": true,\n                      \"script\": {\n                        \"lang\": \"mustache\",\n                        \"source\": \"\\n    {\\\"query\\\":{\\\"match\\\":{\\\"name\\\":\\\"{{searchTerms}}\\\"}},\\n    \\\"from\\\":{{from}}{{^from}}0{{/from}},\\n    \\\"size\\\":{{size}}{{^size}}10{{/size}}}\\n    \",\n                        \"options\": {\n                          \"content_type\": \"application/json; charset=UTF-8\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      },\n      \"put\": {\n        \"tags\": [\n          \"\\ud83d\\udc88 Search Templates\"\n        ],\n        \"summary\": \"Save Search Template\",\n        \"description\": \"This endpoint is used to save a search template into the cluster. Templates are written in the [Mustache](https://mustache.github.io/) templating language. \\nOnce a template has been saved into the cluster it can be used to perform queries. Search templates are really handy when you want to be able to\\nsimplify the queries submited from your frontend application. Basically you can hide all of the complexity of the query. It also allows you to continue to \\nmake tweaks to the queries without breaking the interface to the frontend.  \",\n        \"operationId\": \"save_search_template__scripts__searchTemplateName__put\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Searchtemplatename\",\n              \"type\": \"string\"\n            },\n            \"example\": \"country-search-template\",\n            \"name\": \"searchTemplateName\",\n            \"in\": \"path\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"title\": \"Request\",\n                \"type\": \"object\"\n              },\n              \"examples\": {\n                \"simple_search_template\": {\n                  \"summary\": \"A simple Search Template\",\n                  \"description\": \"A **simple** search template.\",\n                  \"value\": {\n                    \"script\": {\n                      \"lang\": \"mustache\",\n                      \"source\": {\n                        \"query\": {\n                          \"match\": {\n                            \"name\": \"{{name}}\"\n                          }\n                        },\n                        \"from\": \"{{from}}{{^from}}0{{/from}}\",\n                        \"size\": \"{{size}}{{^size}}10{{/size}}\"\n                      }\n                    }\n                  }\n                },\n                \"search_template_with_mulitple_criteria\": {\n                  \"summary\": \"A Search Template with multiple crtiera\",\n                  \"description\": \"A search template with multiple criteria. \",\n                  \"value\": {\n                    \"script\": {\n                      \"lang\": \"mustache\",\n                      \"source\": {\n                        \"query\": {\n                          \"bool\": {\n                            \"should\": [\n                              {\n                                \"match\": {\n                                  \"name.keyword\": {\n                                    \"query\": \"{{name}}\",\n                                    \"boost\": 5\n                                  }\n                                }\n                              },\n                              {\n                                \"match_phrase\": {\n                                  \"name\": {\n                                    \"query\": \"{{name}}\",\n                                    \"slop\": 1,\n                                    \"boost\": 3\n                                  }\n                                }\n                              },\n                              {\n                                \"match\": {\n                                  \"name\": {\n                                    \"query\": \"{{name}}\",\n                                    \"boost\": 3\n                                  }\n                                }\n                              }\n                            ]\n                          }\n                        },\n                        \"size\": \"{{size}}{{^size}}10{{/size}}\"\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"acknowledged\": true\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      },\n      \"delete\": {\n        \"tags\": [\n          \"\\ud83d\\udc88 Search Templates\"\n        ],\n        \"summary\": \"Delete Search Template\",\n        \"description\": \"Delete a previously saved search template - based on the search template name.\",\n        \"operationId\": \"delete_search_template__scripts__searchTemplateName__delete\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Searchtemplatename\",\n              \"type\": \"string\"\n            },\n            \"example\": \"country-search-template\",\n            \"name\": \"searchTemplateName\",\n            \"in\": \"path\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"acknowledged\": true\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/_render/template\": {\n      \"post\": {\n        \"tags\": [\n          \"\\ud83d\\udc88 Search Templates\"\n        ],\n        \"summary\": \"Render Search Template\",\n        \"description\": \"This end point can be used in two ways:\\n- To render a query based on a supplied query template - render inline query with supplied parameter). \\n\\n- To render a query based on a previously saved search template - render saved query with supplied parameters).\",\n        \"operationId\": \"render_search_template__render_template_post\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"title\": \"Request\",\n                \"type\": \"object\"\n              },\n              \"examples\": {\n                \"render_supplied_template_basic\": {\n                  \"summary\": \"Render simple supplied template\",\n                  \"description\": \"A search template with two input parameters size and country name. The size parameter has a default value of 10.\",\n                  \"value\": {\n                    \"source\": {\n                      \"size\": \"{{size}}{{^size}}10{{/size}}\",\n                      \"query\": {\n                        \"match\": {\n                          \"name\": \"{{name}}\"\n                        }\n                      }\n                    },\n                    \"params\": {\n                      \"name\": \"Afghanistan\",\n                      \"size\": \"4\"\n                    }\n                  }\n                },\n                \"render_supplied_template_multiple_search_types\": {\n                  \"summary\": \"Render supplied template into multiple search types\",\n                  \"description\": \"A search template with two input parameters size and country name. The size parameter has a default value of 10.\",\n                  \"value\": {\n                    \"source\": {\n                      \"query\": {\n                        \"bool\": {\n                          \"should\": [\n                            {\n                              \"match\": {\n                                \"name.keyword\": {\n                                  \"query\": \"{{name}}\",\n                                  \"boost\": 5\n                                }\n                              }\n                            },\n                            {\n                              \"match_phrase\": {\n                                \"name\": {\n                                  \"query\": \"{{name}}\",\n                                  \"slop\": 1,\n                                  \"boost\": 3\n                                }\n                              }\n                            },\n                            {\n                              \"match\": {\n                                \"name\": {\n                                  \"query\": \"{{name}}\",\n                                  \"boost\": 3\n                                }\n                              }\n                            }\n                          ]\n                        }\n                      },\n                      \"size\": \"{{size}}{{^size}}10{{/size}}\"\n                    },\n                    \"params\": {\n                      \"name\": \"Afghanistan\",\n                      \"size\": \"1\"\n                    }\n                  }\n                },\n                \"render_saved_template\": {\n                  \"summary\": \"Render saved template\",\n                  \"description\": \"Render a saved template.\",\n                  \"value\": {\n                    \"id\": \"country-search-template\",\n                    \"params\": {\n                      \"name\": \"Afghanistan\",\n                      \"size\": 5\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"template_output\": {\n                    \"size\": \"10\",\n                    \"query\": {\n                      \"match\": {\n                        \"name\": \"France\"\n                      }\n                    },\n                    \"from\": \"20\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    },\n    \"/{index}/_search/template\": {\n      \"post\": {\n        \"tags\": [\n          \"\\ud83d\\udc88 Search Templates\"\n        ],\n        \"summary\": \"Run Search Template\",\n        \"description\": \"Similar to the ```_render/template``` endpoint this end point can be used in two ways:\\n- To run a templated query with the supplied parameters where the template is provided inline. \\n\\n- To run a templated query with the supplied query where the template was previously saved in the cluster state.\",\n        \"operationId\": \"run_search_template__index___search_template_post\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Index\",\n              \"type\": \"string\"\n            },\n            \"example\": \"country\",\n            \"name\": \"index\",\n            \"in\": \"path\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"title\": \"Request\",\n                \"type\": \"object\"\n              },\n              \"examples\": {\n                \"run_simple_inline_search_template\": {\n                  \"summary\": \"Run simple inline Search Template\",\n                  \"description\": \"A **simple** example of running a search template provided inline. The search template is populated and the query executed. \",\n                  \"value\": {\n                    \"source\": {\n                      \"size\": \"{{size}}{{^size}}10{{/size}}\",\n                      \"query\": {\n                        \"match\": {\n                          \"name\": \"{{countryName}}\"\n                        }\n                      }\n                    },\n                    \"params\": {\n                      \"countryName\": \"Afghanistan\",\n                      \"size\": 4\n                    }\n                  }\n                },\n                \"run_complex_inline_search_template\": {\n                  \"summary\": \"Run complex inline Search Template\",\n                  \"description\": \"A ***complex** search template with two input parameters size and country name. The search template is populated and the query executed. \",\n                  \"value\": {\n                    \"source\": {\n                      \"query\": {\n                        \"bool\": {\n                          \"should\": [\n                            {\n                              \"match\": {\n                                \"name.keyword\": {\n                                  \"query\": \"{{name}}\",\n                                  \"boost\": 5\n                                }\n                              }\n                            },\n                            {\n                              \"match_phrase\": {\n                                \"name\": {\n                                  \"query\": \"{{name}}\",\n                                  \"slop\": 1,\n                                  \"boost\": 3\n                                }\n                              }\n                            },\n                            {\n                              \"match\": {\n                                \"name\": {\n                                  \"query\": \"{{name}}\",\n                                  \"boost\": 3\n                                }\n                              }\n                            }\n                          ]\n                        }\n                      },\n                      \"size\": \"{{size}}{{^size}}10{{/size}}\"\n                    },\n                    \"params\": {\n                      \"name\": \"Afghanistan\",\n                      \"size\": \"1\"\n                    }\n                  }\n                },\n                \"run_simple_saved_search_template\": {\n                  \"summary\": \"Run saved Search Template\",\n                  \"description\": \"A **simple** example of running a previously saved search template. The requests identifies the saved search template and the parameters that should be used to generate the query.\",\n                  \"value\": {\n                    \"id\": \"country-search-template\",\n                    \"params\": {\n                      \"name\": \"Afghanistan\",\n                      \"size\": 5\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {},\n                \"examples\": {\n                  \"JSON Response\": {\n                    \"summary\": \"JSON Response\",\n                    \"value\": {\n                      \"took\": 2,\n                      \"timed_out\": false,\n                      \"_shards\": {\n                        \"total\": 1,\n                        \"successful\": 1,\n                        \"skipped\": 0,\n                        \"failed\": 0\n                      },\n                      \"hits\": {\n                        \"total\": {\n                          \"value\": 1,\n                          \"relation\": \"eq\"\n                        },\n                        \"max_score\": 0.2876821,\n                        \"hits\": [\n                          {\n                            \"_index\": \"country\",\n                            \"_type\": \"_doc\",\n                            \"_id\": \"123456\",\n                            \"_score\": 0.2876821,\n                            \"_source\": {\n                              \"name\": \"Afghanistan\",\n                              \"countryCode\": \"AF\",\n                              \"capital\": \"Kabul\",\n                              \"region\": \"Asia\",\n                              \"subregion\": \"Southern Asia\",\n                              \"area\": 652230\n                            }\n                          }\n                        ]\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"HTTPBasic\": []\n          }\n        ]\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"HTTPValidationError\": {\n        \"title\": \"HTTPValidationError\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"detail\": {\n            \"title\": \"Detail\",\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ValidationError\"\n            }\n          }\n        }\n      },\n      \"ValidationError\": {\n        \"title\": \"ValidationError\",\n        \"required\": [\n          \"loc\",\n          \"msg\",\n          \"type\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"loc\": {\n            \"title\": \"Location\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"msg\": {\n            \"title\": \"Message\",\n            \"type\": \"string\"\n          },\n          \"type\": {\n            \"title\": \"Error Type\",\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"country_model\": {\n        \"title\": \"country_model\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"cioc\": {\n            \"title\": \"Cioc\",\n            \"type\": \"string\"\n          },\n          \"regionalBlocs\": {\n            \"title\": \"Regionalblocs\",\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/regionalBlocs\"\n            }\n          },\n          \"flag\": {\n            \"title\": \"Flag\",\n            \"maxLength\": 65536,\n            \"minLength\": 1,\n            \"type\": \"string\",\n            \"format\": \"uri\"\n          },\n          \"translations\": {\n            \"title\": \"Translations\",\n            \"type\": \"object\"\n          },\n          \"languages\": {\n            \"title\": \"Languages\",\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/languages\"\n            }\n          },\n          \"currencies\": {\n            \"title\": \"Currencies\",\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/currencies\"\n            }\n          },\n          \"numericCode\": {\n            \"title\": \"Numericcode\",\n            \"type\": \"string\"\n          },\n          \"nativeName\": {\n            \"title\": \"Nativename\",\n            \"type\": \"string\"\n          },\n          \"borders\": {\n            \"title\": \"Borders\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"timezones\": {\n            \"title\": \"Timezones\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"gini\": {\n            \"title\": \"Gini\",\n            \"type\": \"number\"\n          },\n          \"area\": {\n            \"title\": \"Area\",\n            \"type\": \"integer\"\n          },\n          \"demonym\": {\n            \"title\": \"Demonym\",\n            \"type\": \"string\"\n          },\n          \"latlng\": {\n            \"title\": \"Latlng\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"number\"\n            }\n          },\n          \"population\": {\n            \"title\": \"Population\",\n            \"type\": \"integer\"\n          },\n          \"subregion\": {\n            \"title\": \"Subregion\",\n            \"type\": \"string\"\n          },\n          \"region\": {\n            \"title\": \"Region\",\n            \"type\": \"string\"\n          },\n          \"altSpellings\": {\n            \"title\": \"Altspellings\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"capital\": {\n            \"title\": \"Capital\",\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"title\": \"Name\",\n            \"type\": \"string\"\n          },\n          \"topLevelDomain\": {\n            \"title\": \"Topleveldomain\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"alpha2Code\": {\n            \"title\": \"Alpha2Code\",\n            \"type\": \"string\"\n          },\n          \"alpha3Code\": {\n            \"title\": \"Alpha3Code\",\n            \"type\": \"string\"\n          },\n          \"callingCodes\": {\n            \"title\": \"Callingcodes\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"integer\"\n            }\n          }\n        }\n      },\n      \"currencies\": {\n        \"title\": \"currencies\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"code\": {\n            \"title\": \"Code\",\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"title\": \"Name\",\n            \"type\": \"string\"\n          },\n          \"symbol\": {\n            \"title\": \"Symbol\",\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"format_types\": {\n        \"title\": \"format_types\",\n        \"enum\": [\n          \"json\",\n          \"column\"\n        ],\n        \"type\": \"string\",\n        \"description\": \"An enumeration.\"\n      },\n      \"languages\": {\n        \"title\": \"languages\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"iso639_1\": {\n            \"title\": \"Iso639 1\",\n            \"type\": \"string\"\n          },\n          \"iso639_2\": {\n            \"title\": \"Iso639 2\",\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"title\": \"Name\",\n            \"type\": \"string\"\n          },\n          \"nativeName\": {\n            \"title\": \"Nativename\",\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"regionalBlocs\": {\n        \"title\": \"regionalBlocs\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"acronym\": {\n            \"title\": \"Acronym\",\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"title\": \"Name\",\n            \"type\": \"string\"\n          },\n          \"otherAcronyms\": {\n            \"title\": \"Otheracronyms\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"otherNames\": {\n            \"title\": \"Othernames\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"retrieve_operations__schema__search_model\": {\n        \"title\": \"search_model\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"query\": {\n            \"$ref\": \"#/components/schemas/retrieve_operations__schema__search_query\"\n          },\n          \"size\": {\n            \"title\": \"Size\",\n            \"type\": \"integer\"\n          },\n          \"track_total_hits\": {\n            \"title\": \"Track Total Hits\",\n            \"type\": \"boolean\"\n          }\n        }\n      },\n      \"retrieve_operations__schema__search_query\": {\n        \"title\": \"search_query\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"match\": {\n            \"title\": \"Match\",\n            \"type\": \"object\"\n          },\n          \"range\": {\n            \"title\": \"Range\",\n            \"type\": \"object\"\n          }\n        }\n      },\n      \"update_operations__schema__search_model\": {\n        \"title\": \"search_model\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"query\": {\n            \"$ref\": \"#/components/schemas/update_operations__schema__search_query\"\n          },\n          \"size\": {\n            \"title\": \"Size\",\n            \"type\": \"integer\"\n          },\n          \"track_total_hits\": {\n            \"title\": \"Track Total Hits\",\n            \"type\": \"boolean\"\n          }\n        }\n      },\n      \"update_operations__schema__search_query\": {\n        \"title\": \"search_query\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"match\": {\n            \"title\": \"Match\",\n            \"type\": \"object\"\n          },\n          \"range\": {\n            \"title\": \"Range\",\n            \"type\": \"object\"\n          }\n        }\n      }\n    },\n    \"securitySchemes\": {\n      \"HTTPBasic\": {\n        \"type\": \"http\",\n        \"scheme\": \"basic\"\n      }\n    }\n  },\n  \"tags\": [\n    {\n      \"name\": \"\\ud83c\\udf8a Cluster Basics\"\n    },\n    {\n      \"name\": \"\\u2728 Index Operations\"\n    },\n    {\n      \"name\": \"\\ud83d\\ude80 Create Documents\"\n    },\n    {\n      \"name\": \"\\ud83c\\udf89 Retrieve Documents\"\n    },\n    {\n      \"name\": \"\\ud83e\\udd73 Update Documents\"\n    },\n    {\n      \"name\": \"\\ud83e\\udd84 Delete Documents\"\n    },\n    {\n      \"name\": \"\\ud83d\\udd25 Text Analysis\"\n    }\n  ]\n}",
			"canonicalURL": "/github.com/swarmee/swagger-4-es@8ee367267c9a4afd9abba5964570d32c44c7ce34/-/blob/swagger-4-es%20development/images/swagger/source/openapi/openapi.json",
			"externalURLs": [
				{
					"url": "https://github.com/swarmee/swagger-4-es/blob/8ee367267c9a4afd9abba5964570d32c44c7ce34/swagger-4-es development/images/swagger/source/openapi/openapi.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/_cat/indices\": get: operation \"list_indices__cat_indices_get\": parameters: parse parameter \"format\": parse schema: at swagger-4-es development/images/swagger/source/openapi/openapi.json:88:26: parse default: unexpected type: \"\""
}