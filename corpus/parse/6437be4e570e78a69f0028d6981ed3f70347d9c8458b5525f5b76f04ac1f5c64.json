{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/vmware/versatile-data-kit"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "projects/control-service/projects/model/apidefs/datajob-api/api.yaml",
			"byteSize": 55922,
			"content": "# Copyright 2021 VMware, Inc.\n# SPDX-License-Identifier: Apache-2.0\n\nopenapi: 3.0.0\ninfo:\n  title: Versatile Data Kit Control Service API\n  version: '1.0'\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  description: |\n    The Data Jobs API of Versatile Data Kit Control Service.\n    Data Jobs allows Data Engineers to implement automated pull ingestion (E in ELT)\n    and batch data transformation into a database (T in ELT).\n    See also https://github.com/vmware/versatile-data-kit/wiki/Introduction\n\n    The API has resource-oriented URLs, JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.\n    The API enables creating, deploying, managing and executing Data Jobs in the runtime environment.\u003cbr\u003e\n    \u003cbr\u003e\n    ![](https://github.com/vmware/versatile-data-kit/wiki/vdk-data-job-lifecycle-state-diagram.png)\n    \u003cbr\u003e\n    The API reflects the usual Data Job Development lifecycle:\u003cbr\u003e\n    \u003cli\u003e Create a new data job (webhook to further configure the job, e.g authorize its creation, setup permissions, etc).\n    \u003cli\u003e Download keytab. Develop and run the data job locally.\n    \u003cli\u003e Deploy the data job in cloud runtime environment to run on a scheduled basis.\n    \u003cbr\u003e\u003cbr\u003e\n    If Authentication is enabled, pass OAuth2 access token in HTTP header 'Authorization: Bearer [access-token-here]' (https://datatracker.ietf.org/doc/html/rfc6750).\n    \u003cbr\n\n    The API promotes some best practices (inspired by https://12factor.net):\n    \u003cli\u003e Explicitly declare and isolate dependencies.\n    \u003cli\u003e Strict separation of configurations from code. Configurations vary substantially across deploys, code does not.\n    \u003cli\u003e Separation between the build, release/deploy, and run stages.\n    \u003cli\u003e Data Jobs are stateless and share-nothing processes. Any data that needs to be persisted must be stored in a stateful backing service (e.g IProperties).\n    \u003cli\u003e Implementation is assumed to be atomic and idempotent - should be OK for a job to fail somewhere in the middle; subsequent restart should not cause data corruption.\n    \u003cli\u003e Keep development, staging, and production as similar as possible.\n    \u003cbr\u003e\u003cbr\u003e\n    \u003cb\u003eAPI Evolution\u003c/b\u003e\u003cbr\u003e\n    In the following sections, there are some terms that have a special meaning in the context of the APIs.\n    \u003cbr\u003e\u003cbr\u003e\n    \u003cli\u003e \u003ci\u003eStable\u003c/i\u003e - The implementation of the API has been battle-tested (has been in production for some time).\n                         The API is a subject to semantic versioning model and will follow deprecation policy.\n    \u003cli\u003e \u003ci\u003eExperimental\u003c/i\u003e - May disappear without notice and is not a subject to semantic versioning.\n                               Implementation of the API is not considered stable nor well tested.\n                               Generally this is given to clients to experiment within testing environment. Must not be used in production.\n    \u003cli\u003e \u003ci\u003eDeprecated\u003c/i\u003e - API is expected to be removed within next one or two major version upgrade.\n                             The deprecation notice/comment will say when the API will be removed and what alternatives should be used instead.\n\npaths:\n\n  '/data-jobs/for-team/{team_name}/info':\n    get:\n      tags:\n        - Data Jobs Service\n      responses:\n        '200':\n          $ref: '#/components/responses/Info'\n      operationId: info\n      summary: Get API and Data Jobs Service info\n      description: \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e | Get API and Data Jobs service information\n      parameters:\n        -  name: team_name\n           description: Team Name\n           schema:\n             type: string\n           in: path\n           required: true\n\n  '/data-jobs/for-team/{team_name}':\n    get:\n      deprecated: true\n      tags:\n        - Data Jobs\n      parameters:\n        - name: team_name\n          description: Team Name\n          schema:\n            type: string\n          in: path\n          required: true\n        - name: show_all\n          description: |\n            If set to 'true' will list the jobs for all the teams, otherwise will list only the jobs that belong to this team.\n          schema:\n            type: boolean\n            default: False\n          in: query\n          # This API supports pagination, because there can be thousands of data jobs.\n          # Page parameters are based on the offset and limit example at\n          # https://swagger.io/docs/specification/describing-parameters/#default adjusted for easier Spring use.\n          # We intentionally don't support consistent paging via cursors because it is quite resource-intensive -\n          # until explicitly requested.\n        - name: page_number\n          description: The number of pages of items to skip before starting to collect the result set.\n          schema:\n            type: integer\n            minimum: 0\n            default: 0\n            example: 0\n          required: false\n          in: query\n        - name: page_size\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100 # Over 100 items will make the resulting JSON too large to serialize safely.\n            default: 20\n            example: 0\n          required: false\n          description: The number of items per page\n          in: query\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DataJobSummary'\n          description: List of jobs\n        '400':\n          $ref: '#/components/responses/Error'\n      operationId: jobsList\n      summary: List all or Team's Data Jobs | (Stable)\n      description: \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e\n\n  '/data-jobs/for-team/{team_name}/jobs':\n    get:\n      operationId: jobsQuery\n      summary: List Data Jobs  | (Experimental)\n      tags:\n        - Data Jobs\n      description: |\n        List data Jobs with GraphQL like query. By choosing which field to be returned you can control the output.\n        You can learn more about the GraphQL queries by visiting [GraphQL official website](https://graphql.org/learn/queries/)\n        Query should be provided as GET parameter, not by POST body. Don't worry about the spaces and tabs\n        Keep in mind that each aditional field \u003cb\u003ecould make query response time slower, for instance deployments\u003c/b\u003e,\n        it's best if you request only what you need \u003cbr/\u003e\u003cbr/\u003e\n\n        The \u003cb\u003epageNumber\u003c/b\u003e and \u003cb\u003epageSize\u003c/b\u003e arguments are required! Page number should be a \u003cb\u003enumber greater than 1\u003c/b\u003e,\n        and pageSize \u003cb\u003eshould be greater than 1\u003c/b\u003e (per page)\n        Check the latest example for the full list of supported query fields.\u003cbr/\u003e\u003cbr/\u003e\n\n        Simplest query that you could make is to fetch the job names\n        ```\n        {\n          jobs(pageNumber: 1, pageSize: 25) {\n            content {\n              jobName\n            }\n          }\n        }\n        ```\n\n        You could also use filtering and sorting function. Filter object has \u003cb\u003eproperty, pattern and sort\u003c/b\u003e fields.\u003cbr/\u003e\n        * \u003cb\u003eproperty\u003c/b\u003e points out which field you want to filter, if you point out some other field that is not supported,\n        an invalid response will be return.\u003cbr/\u003e\n        * \u003cb\u003epattern\u003c/b\u003e should be a non-empty string which the provided property should contains [ignoring cases], for instance: `starshot` pattern will match\n        \u003cb\u003eimport-starshot-sql, StarShot-servers and notify-starshot\u003c/b\u003e job names, but it won't match \u003cb\u003estars-shot-daily-prune`\u003c/b\u003e\n        If a pattern string is not provided, then you must atleast provide the property field\u003cbr/\u003e\n        * \u003cb\u003esort\u003c/b\u003e should be an enum value - ASC (ascending) or DESC (descending) option [not required, default is ASC]\n        Multiple filters could be applied, but \u003cb\u003emaximum one should contain sorting\u003c/b\u003e!\n        ```\n        {\n          jobs(\n            pageNumber: 1,\n            pageSize: 25,\n            filter: [{\n              property: \"jobName\",\n              pattern: \"starshot\",\n              sort: DESC\n            }],\n          ) {\n            content {\n              jobName\n            }\n          }\n        }\n        ```\n\n        You could also search for a string into the properties that you are requesting, for instance:\n        This query will search for job names, team names and descriptions which contains the provided \"starshot\" string\n        ```\n        {\n          jobs(\n            pageNumber: 1,\n            pageSize: 25,\n            search: \"starshot\"\n          ) {\n            content {\n              jobName,\n              config {\n                team\n                description\n              }\n            }\n          }\n        }\n        ```\n\n        Data jobs execution could also be searched by providing arguments to the \u003cb\u003eexecution\u003c/b\u003e field.\n        Same as parent query arguments, the \u003cb\u003epageNumber\u003c/b\u003e and \u003cb\u003epageSize\u003c/b\u003e arguments are required! Page number should be a \u003cb\u003enumber greater than 1\u003c/b\u003e,\n        and pageSize \u003cb\u003eshould be between 1 and 100 results\u003c/b\u003e (per page). You can also \u003cb\u003efilter\u003c/b\u003e using the similar object structure as the parent query,\n        but currently \u003cb\u003efiltering is not supported\u003c/b\u003e, you can only provide field for sorting.\n        This query will search\n        ```\n        {\n          jobs(\n            pageNumber: 1,\n            pageSize: 25,\n          ) {\n            content {\n              jobName,\n              deployments {\n                id\n                executions(\n                  pageNumber: 1,\n                  pageSize: 5,\n                  filter: [{\n                    teamNameIn: [\"starshot\"]\n                  }],\n                  order: {\n                    property: \"startTime\",\n                      direction: DESC\n                  }\n                ) {\n                  id\n                  status\n                  startTime\n                  endTime\n                {\n              }\n            }\n          }\n        }\n        ```\n\n        Full example of currently available for fetching fields. Note that if you combine searching and filtering, first\n        it will apply filters and then within filtered jobs it will apply the search, vice versa is currently not supported:\n        ```\n        {\n          jobs(\n            pageNumber: 1,\n            pageSize: 25,\n            search: \"daily\",\n            filter: [{\n              property: \"jobName\",\n              pattern: \"import-sql\",\n            },{\n              property: \"team\",\n              pattern: \"starshot\",\n              sort: DESC\n            },{\n              property: \"deployments.enabled\",\n              pattern: \"enabled\",\n            }],\n          ) {\n            content {\n              jobName\n              config {\n                team\n                description\n                sourceUrl\n                schedule {\n                  scheduleCron\n                  nextRunEpochSeconds\n                }\n                contacts {\n                  notifiedOnJobFailureUserError\n                  notifiedOnJobFailurePlatformError\n                  notifiedOnJobSuccess\n                  notifiedOnJobDeploy\n                }\n              }\n              deployments {\n                id\n                enabled\n                jobVersion\n                mode\n                executions(\n                  pageNumber: 1,\n                  pageSize: 25,\n                  filter: [{\n                    teamNameIn: [\"starshot\"]\n                  }],\n                  order: {\n                    property: \"startTime\",\n                      direction: DESC\n                  }\n                ) {\n                  id\n                  type\n                  status\n                  message\n                  startTime\n                  endTime\n                  opId\n                  vkdVersion\n                  jobVersion\n                  jobSchedule\n                  resourcesCpuRequest\n                  resourcesCpuLimit\n                  resourcesMemoryRequest\n                  resourcesMemoryLimit\n                  deployedDate\n                  deployedBy\n                  startedBy\n                  logsUrl\n                }\n              }\n            }\n            totalPages\n            totalItems\n            }\n          }\n        }\n        ```\n\n      parameters:\n        - name: team_name\n          description: The Team which owns the Data Job\n          schema:\n            type: string\n          in: path\n          required: true\n        - name: query\n          description: Request a GraphQL-like query.\n          schema:\n            type: string\n            example: |\n              {\n                jobs(pageNumber: 1, pageSize: 20, filter: []) {\n                  content {\n                    jobName\n                    config {\n                      team\n                      description\n                      schedule {\n                        scheduleCron\n                        nextRunEpochSeconds\n                      }\n                      sourceUrl\n                      contacts {\n                        notifiedOnJobFailureUserError\n                        notifiedOnJobFailurePlatformError\n                        notifiedOnJobSuccess\n                        notifiedOnJobDeploy\n                      }\n                    }\n                  }\n                  totalPages\n                  totalItems\n                }\n              }\n            default: |\n              {\n                jobs(pageNumber: 1, pageSize: 20, filter: []) {\n                  content {\n                    jobName\n                    config {\n                      team\n                      description\n                      schedule {\n                        scheduleCron\n                      }\n                    }\n                  }\n                  totalPages\n                  totalItems\n                }\n              }\n          required: false\n          in: query\n        - name: operation_name\n          description: If the query is specified and contains several named operations, an operation_name query parameter can be used to control which one should be executed\n          schema:\n            type: string\n            example: jobs\n          required: false\n          in: query\n        - name: variables\n          description: If query is specified then variables can be sent as a JSON-encoded string in an additional query parameter called variables\n          schema:\n            type: string\n            example: |\n              {\n                \"pageSize\": \"10\",\n                \"pageNumber\": \"1\"\n              }\n          required: false\n          in: query\n      responses:\n        '200':\n          $ref: '#/components/responses/DataJobQueryResponse'\n        '400':\n          $ref: '#/components/responses/DataJobQueryResponseWithError'\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataJob'\n        required: true\n      parameters:\n        - name: team_name\n          description: The Team which owns the Data Job\n          schema:\n            type: string\n          in: path\n          required: true\n        - in: query\n          name: name\n          schema:\n            type: string\n          required: false\n          description: The Name of the Data Job\n      tags:\n        - Data Jobs\n      responses:\n        '201':\n          description: Created successfully.\n        '400':\n          $ref: '#/components/responses/Error'\n        '409':\n          $ref: '#/components/responses/Error'\n      operationId: dataJobCreate\n      summary: Creates a new Data Job | (Stable)\n      description: |\n        \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e | Creates a new Data Job.\u003cbr\u003e\n        The name of the Data job should comply to the following naming convention:\u003cbr\u003e\n        \u003cli\u003eshould start with a letter\n        \u003cli\u003e50 characters at most\n        \u003cli\u003e5 characters at least\n        \u003cli\u003eshould contain only lowercase alphanumeric symbols and dash [a-z0-9\\-]\n        \u003cbr\u003e\u003cbr\u003e\n        When succesfully created clients can download the keytab associated with the Data Job to run it locally.\u003cbr\u003e\n        To deploy so that it can be executed reguarly in the runtime environment use /data-jobs/for-team/{team_name}/jobs/{job_name}/deployments API.\n\n  '/data-jobs/for-team/{team_name}/jobs/{job_name}':\n    summary: |\n      A Data Job is a sequence of Python and/or SQL scripts and configurations, executed by Versatile Data Kit SDK.\u003cbr\u003e\n      See more in https://github.com/vmware/versatile-data-kit/wiki/Getting-Started\n    get:\n      tags:\n        - Data Jobs\n      responses:\n        '200':\n          $ref: '#/components/responses/DataJob'\n        '404':\n          $ref: '#/components/responses/Error'\n      operationId: dataJobRead\n      summary: Retrieves details of an existing Data Job by specifying the name of the Data Job. | (Stable)\n      description: \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataJob'\n        required: true\n      tags:\n        - Data Jobs\n      responses:\n        '201':\n          description: Created successfully.\n        '204':\n          description: Updated successfully.\n        '400':\n          $ref: '#/components/responses/Error'\n        '404':\n          $ref: '#/components/responses/Error'\n      operationId: dataJobUpdate\n      summary: Update Data Job. | (Stable)\n      description: \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e\n    delete:\n      tags:\n        - Data Jobs\n      responses:\n        '200':\n          description: Deleted successfully.\n        '404':\n          $ref: '#/components/responses/Error'\n      operationId: dataJobDelete\n      summary: Delete Data Job | (Stable)\n      description: |\n        \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e | Delete Data Job including its state (properties) and deployments.\n        Currently executing Data Jobs will be left to finish.\n    parameters:\n      - name: team_name\n        description: Team Name\n        schema:\n          type: string\n        in: path\n        required: true\n      - name: job_name\n        description: Data Job Name\n        schema:\n          type: string\n        in: path\n        required: true\n\n  '/data-jobs/for-team/{team_name}/jobs/{job_name}/keytab':\n    summary: |\n      List of credentials to be used by a data job - for example kerberos key to authenticate to the database.\n      Note: will be renamed to /credentials as it seems more clear/generic\n    get:\n      tags:\n        - Data Jobs\n      responses:\n        '200':\n          description: Success\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        '400':\n          $ref: '#/components/responses/Error'\n        '404':\n          $ref: '#/components/responses/Error'\n      operationId: dataJobKeytabDownload\n      summary: Get data job keytab. | (Stable)\n      description: \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e\n    parameters:\n      - name: team_name\n        description: Team Name\n        schema:\n          type: string\n        in: path\n        required: true\n      - name: job_name\n        description: Data Job Name.\n        schema:\n          type: string\n        in: path\n        required: true\n\n  '/data-jobs/for-team/{team_name}/jobs/{job_name}/team/{new_team}':\n    put:\n      tags:\n        - Data Jobs\n      responses:\n        '200':\n          description: Team changed successfully.\n        '400':\n          $ref: '#/components/responses/Error'\n        '404':\n          $ref: '#/components/responses/Error'\n      operationId: dataJobTeamUpdate\n      summary: Update API for Data Jobs team | (Stable)\n      description: \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e | Update API for Data Jobs team\n      parameters:\n        -  name: team_name\n           description: Current Team Name.\n           schema:\n             type: string\n           in: path\n           required: true\n        -  name: new_team\n           description: New Team Name.\n           schema:\n             type: string\n           in: path\n           required: true\n        - name: job_name\n          description: Data Job Name.\n          schema:\n            type: string\n          in: path\n          required: true\n\n  '/data-jobs/for-team/{team_name}/jobs/{job_name}/deployments':\n    summary: |\n      Deployments are requests to deploy a specific (code version of a Data Job to be executed in the runtime environment (Kubernetes).\n      Users can deploy the same (code) version of a Data Job with different properties.\u003cbr\u003e\n      Note: Currently deployment_id and mode are not implemented. Only a single active deployment of a job is possible.\n    get:\n      tags:\n        - Data Jobs Deployment\n      parameters:\n        - name: deployment_id   # Ignored. Only one deployment currently supported\n          description: Get the Deployment with this id (e.g production, staging, dev)\n          schema:\n            type: string\n          in: query\n        - name: mode     # Ignored. Only one mode currently supported\n          description: Get Deployments only for this mode.\n          schema:\n            $ref: '#/components/schemas/DataJobMode'\n          in: query\n      responses:\n        '200':\n          $ref: '#/components/responses/DeploymentArray'\n        '404':\n          $ref: '#/components/responses/Error'\n      operationId: deploymentList\n      summary: Get Data Job deployments. | (Stable)\n      description: \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataJobDeployment'\n      parameters:\n        - name: send_notification\n          description: |\n            Allows administrators to disable sending notification during maintance window for platfrom errors -\n            e.g if all jobs are being re-deployed due to migration or after recovering from an outage.\n            Monitoring data will still be popoulated so deployment status can be monitored by admins.\n          schema:\n            type: boolean\n            default: True\n          required: false\n          in: query\n      tags:\n        - Data Jobs Deployment\n      responses:\n        '202':\n          description: Update accepted successfully.\n        '400':\n          $ref: '#/components/responses/Error'\n        '404':\n          $ref: '#/components/responses/Error'\n      operationId: deploymentUpdate\n      summary: Creates or updates a deployment of a Data Job. | (Stable)\n      description: |\n        \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e | Creates or updates a deployment of a Data Job.\n        The API returns before the actual Job is deployed (the operation is asynchrounous).\n        Depending on settings specified during Data Job creation, clients will get an e-mail in case of success or failure of the deployment.\n        If you need to change only deployment settings without changing the job version, use PATCH deployments request which is synchronous.\n    parameters:\n      -  name: team_name\n         description: Team Name\n         schema:\n           type: string\n         in: path\n         required: true\n      - name: job_name\n        description: Data Job Name.\n        schema:\n          type: string\n        in: path\n        required: true\n\n  '/data-jobs/for-team/{team_name}/jobs/{job_name}/deployments/{deployment_id}':\n    summary: Manage single deployment\n    get:\n      tags:\n        - Data Jobs Deployment\n      responses:\n        '200':\n          $ref: '#/components/responses/Deployment'\n        '404':\n          $ref: '#/components/responses/Error'\n      operationId: deploymentRead\n      summary: Get Data Job deployments. | (Stable)\n      description: \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e\n    delete:\n      tags:\n        - Data Jobs Deployment\n      responses:\n        '202':\n          description: Deletion accepted successfully.\n        '404':\n          $ref: '#/components/responses/Error'\n      operationId: deploymentDelete\n      summary: |\n        Delete Deployment of a Data Job.\n        Currently executing Data Job will be left to finish.  | (Stable)\n      description: \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e\n    patch:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataJobDeployment'\n        required: true\n      tags:\n        - Data Jobs Deployment\n      responses:\n        '202':\n          description: Update accepted successfully.\n        '400':\n          $ref: '#/components/responses/Error'\n        '404':\n          $ref: '#/components/responses/Error'\n      operationId: deploymentPatch\n      summary: |\n          Patch a deployment of a Data Job. Use it to change the configuration of a data job.\n          For example: to enable or disable deployment, to change the vdk version.\n          The operation is guranteed to be synchrounous so it cannot be used to deploy new version of a data job -\n          job_version cannot be changed using PATCH. Use POST .../deployments for this. | (Stable)\n      description: \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e\n    parameters:\n      -  name: team_name\n         description: Team Name\n         schema:\n           type: string\n         in: path\n         required: true\n      - name: job_name\n        description: Data job Name.\n        schema:\n          type: string\n        in: path\n        required: true\n      - name: deployment_id     # Only a single deployment. Can pass 'dummy' for now.\n        description: Data job deployment id.\n        schema:\n          $ref: '#/components/schemas/DataJobDeploymentId'\n        in: path\n        required: true\n\n  '/data-jobs/for-team/{team_name}/jobs/{job_name}/executions':\n    summary: Execution API is used to query recent executions of Data Jobs and to trigger new executions.\n    get:\n      tags:\n        - Data Jobs Execution\n      responses:\n        '200':\n          $ref: '#/components/responses/ExecutionArray'\n        '404':\n          $ref: '#/components/responses/Error'\n      operationId: dataJobExecutionList\n      summary: Get Data Jobs (recent) executions. (Execution API is still experimental and must not be used in production) | (Experimental)\n      description: \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e\n    parameters:\n      -  name: team_name\n         description: Team Name\n         schema:\n           type: string\n         in: path\n         required: true\n      - name: job_name\n        description: Data Job Name.\n        schema:\n          type: string\n        in: path\n        required: true\n      - name: execution_status\n        description: Execution status\n        schema:\n          type: array\n          items:\n            type: string\n        example: submitted\n        in: query\n\n  '/data-jobs/for-team/{team_name}/jobs/{job_name}/deployments/{deployment_id}/executions':\n    summary: Execution API is used to query recent executions of Data Jobs and to trigger new executions.\n    get:\n      tags:\n        - Data Jobs Execution\n      responses:\n        '200':\n          $ref: '#/components/responses/ExecutionArray'\n        '404':\n          $ref: '#/components/responses/Error'\n      operationId: dataJobDeploymentExecutionList\n      summary: Get Data Jobs (recent) executions. | (Experimental)\n      description: \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e\n      parameters:\n        - name: execution_status\n          description: Execution status\n          schema:\n            type: array\n            items:\n              type: string\n          example: submitted\n          in: query\n    post:\n      tags:\n        - Data Jobs Execution\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataJobExecutionRequest'\n      responses:\n        '202':\n          description: Execution triggered successfully.\n          headers:\n            Location:\n              description: URI of the execution\n              schema:\n                type: string\n        '400':\n          $ref: '#/components/responses/Error'\n        '409':\n          $ref: '#/components/responses/Error'\n      operationId: dataJobExecutionStart\n      summary: Trigger Data Job Execution. | (Experimental)\n      description: |\n        \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e | Trigger new execution of a Data Job.\n        If Data Job deployment is currently being executed it will return an error (409 Conflict).\n        Only deployed Data Jobs can be executed. Currently the Data Job arguments ('args') are ignored.\n        Note: in the future it will be possible to trigger different deployments.\n    parameters:\n      -  name: team_name\n         description: Team Name\n         schema:\n           type: string\n         in: path\n         required: true\n      - name: job_name\n        description: Data Job Name.\n        schema:\n          type: string\n        in: path\n        required: true\n      - name: deployment_id\n        description: Data job deployment ID. Currently it is being ignored as multiple deployments are not implemented.\n        schema:\n          $ref: '#/components/schemas/DataJobDeploymentId'\n        in: path\n        required: true\n\n  '/data-jobs/for-team/{team_name}/jobs/{job_name}/executions/{execution_id}':\n    summary: Data Job Execution details.\n    get:\n      tags:\n        - Data Jobs Execution\n      responses:\n        '200':\n          $ref: '#/components/responses/Execution'\n        '404':\n          $ref: '#/components/responses/Error'\n      operationId: dataJobExecutionRead\n      summary: Get Data Job Execution details. | (Experimental)\n      description: \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e\n    delete:\n      tags:\n        - Data Jobs Execution\n      responses:\n        '200':\n          description: Canceled execution successfully.\n        '404':\n          $ref: '#/components/responses/Error'\n      operationId: dataJobExecutionCancel\n      summary: Cancel (if running) Data Job Execution | (Experimental)\n      description: \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e | Cancel the execution of a Data Job with a given execution ID.\n    parameters:\n      -  name: team_name\n         description: Team Name\n         schema:\n           type: string\n         in: path\n         required: true\n      - name: job_name\n        description: Data Job Name.\n        schema:\n          type: string\n        in: path\n        required: true\n      - name: execution_id\n        description: Execution ID.\n        schema:\n          type: string\n        in: path\n        required: true\n\n  '/data-jobs/for-team/{team_name}/jobs/{job_name}/executions/{execution_id}/logs':\n    summary: Data Job Execution Logs.\n    get:\n      tags:\n        - Data Jobs Execution\n      responses:\n        '200':\n          $ref: '#/components/responses/ExecutionLogs'\n        '400':\n          $ref: '#/components/responses/Error'\n        '404':\n          $ref: '#/components/responses/Error'\n      operationId: dataJobLogsDownload\n      summary: |\n          Download data job logs.\n          This API is guranteed to provide logs only if the jobs is currently running.\n          For logs from older job executions - use logsUrl field passed by GET execution API or jobsQuery API. | (Experimental)\n      description: \u003ci\u003e(Introduced in v1.2.9)\u003c/i\u003e\n      parameters:\n        -  name: team_name\n           description: Team Name\n           schema:\n             type: string\n           in: path\n           required: true\n        - name: job_name\n          description: Data Job Name.\n          schema:\n            type: string\n          in: path\n          required: true\n        - name: execution_id\n          description: Execution ID.\n          schema:\n            type: string\n          in: path\n          required: true\n        - name: tail_lines\n          description: tail_lines when set to positive value, the number of lines from the end of the logs to return.\n          schema:\n            type: integer\n            default: 0\n            example: 10\n          required: false\n          in: query\n\n  '/data-jobs/for-team/{team_name}/jobs/{job_name}/deployments/{deployment_id}/properties':\n    summary: |\n      Data Job properties API.\n      See https://github.com/vmware/versatile-data-kit/blob/6726aa6771b8a47edc81168afcd13030127a7c4b/projects/vdk-core/src/taurus/api/job_input.py#L11 \u003cbr\u003e\n      Currently they are not implemented in Versatile Data Kit.\n    get:\n      tags:\n        - Data Jobs Properties\n      responses:\n        '200':\n          $ref: '#/components/responses/Properties'\n      operationId: dataJobPropertiesRead\n      summary: Get Data Job properties.\n      description: \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataJobProperties'\n        required: true\n      tags:\n        - Data Jobs Properties\n      responses:\n        '201':\n          description: Created successfully.\n        '204':\n          description: Updated successfully.\n      operationId: dataJobPropertiesUpdate\n      summary: Update Data Job properties.\n      description: \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e\n    parameters:\n      -  name: team_name\n         description: Team Name\n         schema:\n           type: string\n         in: path\n         required: true\n      - name: job_name\n        description: Data Job Name.\n        schema:\n          type: string\n        in: path\n        required: true\n      - name: deployment_id\n        description: Data job deployment id.\n        schema:\n          $ref: '#/components/schemas/DataJobDeploymentId'\n        in: path\n        required: true\n\n  '/data-jobs/for-team/{team_name}/jobs/{job_name}/sources':\n    get:\n      tags:\n        - Data Jobs Sources\n      responses:\n        '200':\n          description: Success\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        '400':\n          $ref: '#/components/responses/Error'\n        '404':\n          $ref: '#/components/responses/Error'\n      operationId: dataJobSourcesDownload\n      summary: Download data job source code. | (Not Implemented)\n      description: \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e\n    post:\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n        required: true\n      tags:\n        - Data Jobs Sources\n      responses:\n        '200':\n          $ref: '#/components/responses/Source'\n        '400':\n          $ref: '#/components/responses/Error'\n      operationId: sourcesUpload\n      summary: Upload Data Job source code. | (Stable)\n      description: |\n        \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e | Uploads the Data Job source code and returns its version.\n        Upload is persisted in source (Git) repository, so that all code deployed is versioned.\n        The format of the payload is expected to be a ZIP archive, where the directory content can be found.\n        \u003cbr\u003eExample:\u003cbr\u003e\n        \u003cbr\u003e\n        If zip is \u003cbr\u003e\n        foo/file.txt\u003cbr\u003e\n        foo/nested_dir/file2.txt\u003cbr\u003e\n        \u003cbr\u003ethen data job dir uploaded will look like \u003cbr\u003e\n        job-name/file.txt\u003cbr\u003e\n        job-name/nested_dir/file2.txt\u003cbr\u003e\n      parameters:\n        - in: query\n          name: reason\n          description: The reason for executing the request\n          schema:\n            type: string\n          required: false\n    delete:\n      tags:\n        - Data Jobs Sources\n      responses:\n        '200':\n          description: Data Job Source deleted successfully.\n        '400':\n          $ref: '#/components/responses/Error'\n      operationId: sourcesDelete\n      summary: Delete Data Job source.\n      description: |\n        \u003ci\u003e(Introduced in v1.0)\u003c/i\u003e | Data Job Source is persisted in version control.\u003cbr\u003e\n        Delete removes the Data Job Source code.\n      parameters:\n        - in: query\n          name: reason\n          description: The reason for executing the request\n          schema:\n            type: string\n          required: false\n    parameters:\n      -  name: team_name\n         description: Team Name\n         schema:\n           type: string\n         in: path\n         required: true\n      - name: job_name\n        description: Data Job Name.\n        schema:\n          type: string\n        in: path\n        required: true\n\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n\n  schemas:\n    DataJobApiInfo:\n      description: API and Data Job service information\n      required:\n        - api_version\n      type: object\n      properties:\n        api_version:\n          description: ''\n          type: string\n      example:\n        api_version: 1.0.0\n\n    DataJobSummary:\n      description: Data Job summary\n      required:\n        - job_name\n        - team\n        - description\n      type: object\n      properties:\n        job_name:\n          description: Data Job name\n          type: string\n          example: starshot-processing-vmc-fact-daily\n        team:\n          description: Team name\n          type: string\n          example: starshot\n        description:\n          description: Description\n          type: string\n          example: Data Job responsible for transforming vmc related fact tables on daily basis.\n        source_url:\n          description: Link to source code.\n          type: string\n\n    DataJob:\n      description: Data Job Details\n      required:\n        - job_name\n        - description\n        - config\n      type: object\n      properties:\n        job_name:\n          description: Data Job name\n          type: string\n          example: starshot-processing-vmc-fact-daily\n        description:\n          description: Short Data Job description\n          type: string\n          example: Data Job responsible for transforming vmc-related fact tables on a daily basis.\n        config:\n          $ref: '#/components/schemas/DataJobConfig'\n        team:\n          description: (Optional) Team name\n          type: string\n          example: starshot (Optional property)\n\n    Error:\n      description: Contains description for one or more errors detected.\n      required:\n        - messages\n      type: object\n      properties:\n        messages:\n          description: Error messages\n          type: array\n          items:\n            type: string\n          example:\n            - Data Job starshot-processing-vmc-fact-daily not found\n\n    DataJobDeployment:\n      description: A deployment of the Data Job\n      type: object\n      properties:\n        vdk_version:\n          description: A specific VDK version to use\n          type: string\n          example: 2.1\n        job_version:\n          description: Job version (can be Git commit)\n          type: string\n          example: 11a403ba\n        mode:\n          $ref: '#/components/schemas/DataJobMode'\n        id:\n          $ref: '#/components/schemas/DataJobDeploymentId'\n        enabled:\n          description: Enable/disable flag\n          type: boolean\n          example: false\n        deployed_by:\n          description: User or service that deployed the Data Job\n          type: string\n          example: auserov@example.mail.com\n        deployed_date:\n          description: The Data Job deployment date\n          type: string\n          format: date-time\n        schedule:\n          $ref: '#/components/schemas/DataJobSchedule'\n        resources:\n          $ref: '#/components/schemas/DataJobResources'\n\n    DataJobDeploymentStatus:\n      description: A deployment status of the Data Job, which includes information such as last deployment date, and who deployed the Data Job.\n      type: object\n      properties:\n        vdk_version:\n          description: A specific VDK version to use\n          type: string\n          example: 2.1\n        job_version:\n          description: Job version (can be Git commit)\n          type: string\n          example: 11a403ba\n        mode:\n          $ref: '#/components/schemas/DataJobMode'\n        id:\n          $ref: '#/components/schemas/DataJobDeploymentId'\n        enabled:\n          description: Enable/disable flag\n          type: boolean\n          example: false\n        contacts:\n          $ref: '#/components/schemas/DataJobContacts'\n        schedule:\n          $ref: '#/components/schemas/DataJobSchedule'\n        resources:\n          $ref: '#/components/schemas/DataJobResources'\n        last_deployed_date:\n          description: The date and time in UTC of the last deployment of the data job\n          type: string\n          example: 2021-02-02T10:50:40.034Z\n          default: null\n        last_deployed_by:\n          description: The username of the user who modified the data job last\n          type: string\n          example: jdoe\n          default: null\n\n\n    DataJobExecutionRequest:\n      description: Request to start execution of Data Job. The job must have been deployed before that (see Deployment API) and will run its latest version.\n      type: object\n      properties:\n        started_by:\n          description: User or service that started the execution (e.g manual/auserov@example.mail.com or scheduled/runtime)\n          type: string\n          example: schedule/runtime\n        args:\n          description: Data Job arguments\n          type: object\n          additionalProperties: true\n          example:\n            key: value\n\n    DataJobExecution:\n      description: Executions of a Data Job\n      type: object\n      properties:\n        id:\n          description: Data Job Execution ID\n          type: string\n          example: starshot-processing-vmc-fact-daily-2018623174356\n        job_name:\n          description: Data Job name\n          type: string\n          example: starshot-processing-vmc-fact-daily\n        status:\n          description: The current status\n          enum:\n            - submitted\n            - running\n            - succeeded\n            - cancelled\n            - skipped\n            - user_error\n            - platform_error\n          type: string\n          example: submitted\n        type:\n          description: Execution type - manual or scheduled\n          enum:\n            - manual\n            - scheduled\n          type: string\n          example: scheduled\n        start_time:\n          description: Start of execution\n          type: string\n          format: date-time\n        end_time:\n          description: Start of execution\n          type: string\n          format: date-time\n        started_by:\n          description: User or service that started the execution (e.g manual/auserov@example.mail.com or scheduled/runtime)\n          type: string\n          example: schedule/runtime\n        logs_url:\n          description: |\n            URL link to persisted logs in central location. Logs generally should be available for longer time.\n            The link is available only if operators have configured it during installation of Control Service.\n            During install operators can conifgure logs to be presisted to log aggregator service whose link can be exposed here.\n          type: string\n          example: http://logs/jobs?filter=job-name\n        message:\n          description: Message (usually error) during execution\n          type: string\n          example:\n        op_id:\n          description: Operation id used for tracing calls between different services\n          type: string\n        deployment:\n          $ref: '#/components/schemas/DataJobDeployment'\n\n    DataJobExecutionLogs:\n      description: Executions of a Data Job\n      type: object\n      properties:\n        logs:\n          description: The logs of the data job execution.\n          type: string\n\n    DataJobProperties:\n      description: Properties of a Data Job\n      type: object\n      additionalProperties:\n        type: object\n      example:\n        redshift-user: foo\n        redshift-password: bar\n        last-execution-time: 1585303338\n\n    DataJobMode:\n      description: The execution mode that the data job is deployed in. Data Jobs used for development or testing purposes are marked as testing.\n        This is used by Operations team on platform rollout and infrastructure changes adoption. For example, rollout and validation of testing jobs first, then proceeding with release data jobs. Also, testing and release jobs may have different limits and SLA targets.\n      enum:\n        - testing\n        - release\n      type: string\n      example: release\n\n    DataJobDeploymentId:\n      description: |\n        String that identifies a single deployment of a Data Job.\n        Currently only one single deployment per Data Job is possible.\u003cbr\u003e\n        In the future:\u003cbr\u003e\n        It's recommended to use following ids - development, testing, production.\n        However users are free to come up with their own.\n        For example, this enables the creation of 3 different deployments, using the same Data Job code:\u003cbr\u003e\n        `development  deployment  --deployment-id development`\u003cbr\u003e\n        `testing deployment  --deployment-id testing`\u003cbr\u003e\n        `production deployment  --deployment-id prod`\n      type: string\n      example: release\n\n    DataJobResources:\n      description: Resource cofiguration of a data Data Job Deployment.\n      type: object\n      properties:\n        cpu_request:\n          format: float\n          description: Initial CPU shares in deciCores (1 dCore = 0.1 Core = 100 mCores)\n          type: number\n          example: 10\n        cpu_limit:\n          format: float\n          description: Max CPU shares in deciCores (1 dCore = 0.1 Core = 100 mCores)\n          type: number\n          example: 20\n        memory_request:\n          format: int32\n          description: Initial Memory in MiB.\n          type: integer\n          example: 1024\n        memory_limit:\n          format: int32\n          description: Max Memory in MiB.\n          type: integer\n          example: 2048\n\n    DataJobConfig:\n      description: Data Job configuration properties.\n      type: object\n      properties:\n        db_default_type:\n          example: TRINO\n          description: |\n            Default DB connection provided for the job, e.g. 'TRINO', 'IMPALA', 'REDSHIFT'.\u003cbr\u003e\n          type: string\n        contacts:\n          $ref: '#/components/schemas/DataJobContacts'\n        schedule:\n          $ref: '#/components/schemas/DataJobSchedule'\n          deprecated: true\n        generate_keytab:\n          example: false\n          description: Enable Disable flag for generating secret with keytab\n          type: boolean\n          default: true\n        enable_execution_notifications:\n          example: false\n          description: (Optional) Specifies whether to dispatch email notifications per data job execution.\n          type: boolean\n          default: true\n        notification_delay_period_minutes:\n          format: int32\n          description: |\n            (Optional) Specifies the time (in minutes) a job execution is allowed to be delayed from\n            its schedule before an alert is triggered.\n            The value of this property for each data job is exposed as a Prometheus metric by the service\n            at the /data-jobs/debug/prometheus endpoint. These metrics (taurus_datajob_notification_delay)\n            are subsequently used in JobDelay Prometheus rules to generate the alerts.\n          type: integer\n          example: 60\n          default: 240\n\n\n    DataJobSchedule:\n      description: Schedule configuration\n      type: object\n      properties:\n        schedule_cron:\n          example: 0 0 13 * 5\n          description: |\n            For format see https://en.wikipedia.org/wiki/Cron\u003cbr\u003e\n            The cron expression is evaluated in UTC time.\n            If it is time for a new job run and the previous job run hasn't finished yet, the cron job kills and replaces the currently running job run with a new job run.\n            Jobs configured to run more often than once per hour are not supported and their schedule may be overridden by the platform.\n            To distribute load evenly, Administrators may override the minute you specified.\n            Use https://crontab.guru for help.\n          type: string\n\n    DataJobContacts:\n      description: Data Job contacts\n      type: object\n      properties:\n        notified_on_job_failure_user_error:\n          description: |\n            List of email addresses to be notified on job execution failure caused by user code or user configuration problem.\n            E.g. if the job contains a SQL script with a syntax error.\n          type: array\n          items:\n            type: string\n          example:\n            - auserov@example.mail.com\n        notified_on_job_failure_platform_error:\n          description: List of email addresses to be notified on job execution failure caused by a platform problem\n          type: array\n          items:\n            type: string\n          example:\n            - auserov@example.mail.com\n        notified_on_job_success:\n          description: List of email addresses to be notified on job execution success\n          type: array\n          items:\n            type: string\n          example:\n            - auserov@example.mail.com\n        notified_on_job_deploy:\n          description: List of email addresses to be notified of job deployment outcome\n          type: array\n          items:\n            type: string\n          example:\n            - auserov@example.mail.com\n\n    DataJobVersion:\n      description: Data Job version\n      required:\n        - version_sha\n      type: object\n      properties:\n        version_sha:\n          description: SHA hash which specifies the latest deployed version of the data job\n          type: string\n      example:\n        version_sha: 17012900f60461778c01ab24728807e70a5f2c87\n    DataJobQueryResponseWithError:\n      description: Query response containing Data Jobs\n      type: object\n      properties:\n        errors:\n          type: array\n          items:\n            type: object\n          description: Errors while making query (validation errors, exceptions, etc)\n          example:\n            application/json: [\n               {\n                 \"message\": \"Validation error of type FieldUndefined\",\n                 \"locations\": [],\n                 \"description\": \"Field 'someField' in type 'DataJob' is undefined\",\n                 \"validationErrorType\": \"FieldUndefined\",\n                 \"queryPath\": [\n                   \"jobs\",\n                   \"content\",\n                   \"someField\"\n                 ],\n                 \"extensions\": null,\n                 \"errorType\": \"ValidationError\",\n                 \"path\": null\n               }\n             ]\n        data:\n          $ref: '#/components/schemas/DataJobPage'\n    DataJobQueryResponse:\n      description: Query response containing Data Jobs\n      type: object\n      properties:\n        errors:\n          type: array\n          items:\n            type: object\n          description: Errors while making query (validation errors, exceptions, etc)\n        data:\n          $ref: '#/components/schemas/DataJobPage'\n    DataJobPage:\n      description: Page object containing Data Jobs list with information for total elements and pages\n      type: object\n      properties:\n        content:\n          type: array\n          items:\n            type: object\n          example:\n            application/json: [\n              {\n                \"jobName\": \"starshot-processing-vmc-fact-daily\",\n                \"config\": {\n                  \"team\": \"starshot\",\n                  \"description\": \"Data Job responsible for transforming vmc related fact tables on daily basis\",\n                  \"schedule\": {\n                    \"scheduleCron\": \"5 0 * 8 *\",\n                    \"nextRun\": 1618914371\n                  },\n                  \"sourceUrl\": \"https://github.com/product-analytics/data-jobs/tree/master/starshot-processing-vmc-fact-daily\",\n                  \"contacts\": {\n                    \"notifiedOnJobFailureUserError\": \"[auser@example.mail.com]\",\n                    \"notifiedOnJobFailurePlatformError\": \"[auser2@example.mail.com, auser@example.mail.com]\",\n                    \"notifiedOnJobSuccess\": \"[auser@example.mail.com]\",\n                    \"notifiedOnJobDeploy\": \"[auser2@example.mail.com, auser@example.mail.com]\"\n                  }\n                }\n              },\n              ...\n            ]\n        totalItems:\n          description: Number of elements which meet the given query requirement\n          type: integer\n          example: 100\n        totalPages:\n          description: Number of pages with elements which meet the given query requirement\n          type: integer\n          example: 5\n\n  responses:\n    Info:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/DataJobApiInfo'\n      description: API and Data Jobs service information\n    DataJob:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/DataJob'\n      description: Data Job details\n    Error:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: A response for any errors detected\n    DeploymentArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/DataJobDeploymentStatus'\n      description: A list of data job deployments\n    Deployment:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/DataJobDeploymentStatus'\n      description: Deployment properties\n    DataJobConfig:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/DataJobConfig'\n      description: Data Job custom configuration\n    ExecutionArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/DataJobExecution'\n      description: Data Job executions\n    Execution:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/DataJobExecution'\n      description: Execution details\n    ExecutionLogs:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/DataJobExecutionLogs'\n      description: Deployment properties\n    Properties:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/DataJobProperties'\n      description: Data Job properties\n    Source:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/DataJobVersion'\n      description: Data Job version\n    DataJobQueryResponse:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/DataJobQueryResponse'\n      description: Data Job query response\n    DataJobQueryResponseWithError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/DataJobQueryResponseWithError'\n      description: Data Job query response with error\n\nsecurity:\n  - bearerAuth: []\n\ntags:\n  - name: Data Jobs\n  - name: Data Jobs Deployment\n    description: |\n      Data Job Deployment takes the code/build and deploy-specific properties of the data job, then it is ready for immediate run in the execution environment. \u003cbr\u003e\n      Data job code/build - all python, SQL files, and requirements.txt of the data job.\n      NOTE: deploymentID and mode are not implemented, so they are ignored.\n  - name: Data Jobs Execution\n    description: API for managing Data Job Execution. An instance of a running data job deployment is called an execution.\n  - name: Data Jobs Properties\n    description: |\n      Any saved state, configuration, and secrets of a Data Job. Those are tracked per deployment.\n      NOTE: Versioned properties, so all changes are tracked (when, who - opid or user), is not implemented yet.\n  - name: Data Jobs Service\n  - name: Data Jobs Sources\n",
			"canonicalURL": "/github.com/vmware/versatile-data-kit@306c8051887002cd9871781bc7cdc8b6d80fe96a/-/blob/projects/control-service/projects/model/apidefs/datajob-api/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/vmware/versatile-data-kit/blob/306c8051887002cd9871781bc7cdc8b6d80fe96a/projects/control-service/projects/model/apidefs/datajob-api/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"DataJobDeploymentStatus\": parse schema: property \"last_deployed_by\": at 1:7051: parse default: unexpected default \"null\" value"
}