{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/regulaforensics/DocumentReader-web-openapi"
		},
		"file": {
			"name": "p-process.yml",
			"size": 0,
			"path": "p-process.yml",
			"byteSize": 22419,
			"content": "openapi: 3.0.1\n\npaths:\n  /process:\n    post:\n      summary: Process list of documents images and return extracted data\n      operationId: api-process\n      tags:\n        - process\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ProcessRequest\"\n        required: true\n      responses:\n        \"200\":\n          description: \"Document reading result\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProcessResponse'\n        \"400\":\n          description: \"Bad request. Check your input data.\"\n        \"403\":\n          description: \"Bad license. Either server or request does not contain valid license.\"\n      x-codeSamples:\n        - lang: 'JavaScript'\n          source: |\n            import {DocumentReaderApi, FieldType, GraphicFieldType} from '@regulaforensics/document-reader-webclient/esm'\n            const {DOCUMENT_NUMBER, SURNAME_AND_GIVEN_NAMES, DATE_OF_BIRTH} = FieldType;\n            const {PORTRAIT, SIGNATURE} = GraphicFieldType;\n\n            const imageAsBase64String = getDocImageAsBase64String()\n            const api = new DocumentReaderApi({basePath: \"http://localhost:8080\"});\n            const result = await api.process(imageAsBase64String)\n\n            // text fields\n            const docNumber = result.getTextField(DOCUMENT_NUMBER)\n            const fullName = result.getTextField(SURNAME_AND_GIVEN_NAMES)\n            const dateOfBirth = result.getTextField(DATE_OF_BIRTH)\n\n            // graphics fields\n            const portraitAsBase64 = result.getGraphicsField(PORTRAIT)\n            const signatureAsBase64 = result.getGraphicsField(SIGNATURE)\n        - lang: 'Java'\n          source: |\n            byte[] imageBytes = readFile(\"australia_passport.jpg\");\n            var image = new ProcessRequestImage(imageBytes, Light.WHITE);\n\n            var requestParams = new RecognitionParams()\n                    .withScenario(Scenario.FULL_PROCESS)\n                    .withResultTypeOutput(Result.STATUS, Result.TEXT, Result.IMAGES);\n\n            RecognitionRequest request = new RecognitionRequest(requestParams, List.of(image));\n\n            var api = new DocumentReaderApi();\n            RecognitionResponse response = api.process(request);\n\n            var status = response.status();\n            var docOverallStatus = status.getComplete() == CheckResult.OK ? \"valid\" : \"not valid\";\n            var docOpticalTextStatus = status.getDetailsOptical().getText();\n\n            var docNumberField = response.text().getField(DOCUMENT_NUMBER);\n            var docNumberMrz = docNumberField.getValue(Source.MRZ);\n            var docNumberMrzValidity = docNumberField.sourceValidity(Source.MRZ);\n            var docNumberMrzVisualMatching = docNumberField.crossSourceComparison(Source.MRZ, Source.VISUAL);\n        - lang: 'Python'\n          source: |\n            from regula.documentreader.webclient import *\n\n            with open(\"australia_passport.jpg\", \"rb\") as f:\n              input_image = f.read()\n\n            with DocumentReaderApi(host='http://localhost:8080') as api:\n              params = ProcessParams(\n              scenario=Scenario.FULL_PROCESS,\n              result_type_output=[Result.DOCUMENT_IMAGE, Result.STATUS, Result.TEXT, Result.IMAGES]\n              )\n              request = RecognitionRequest(process_params=params, images=[input_image])\n              response = api.process(request)\n\n            # status examples\n            response_status = response.status\n            doc_overall_status = \"valid\" if response_status.overall_status == CheckResult.OK else \"not valid\"\n\n            # text fields example\n            doc_number_field = response.text.get_field(TextFieldType.DOCUMENT_NUMBER)\n            doc_number_mrz = doc_number_field.get_value()\n            doc_number_visual = doc_number_field.get_value(Source.VISUAL)\n            doc_number_visual_validity = doc_number_field.source_validity(Source.VISUAL)\n            doc_number_mrz_validity = doc_number_field.source_validity(Source.MRZ)\n            doc_number_mrz_visual_matching = doc_number_field.cross_source_comparison(Source.MRZ, Source.VISUAL)\n\n            # images fields example\n            normalized_input_image = response.images.document_image()\n            portrait_field = response.images.get_field(GraphicFieldType.PORTRAIT)\n            portrait_from_visual = portrait_field.get_value(Source.VISUAL)\n            portrait_from_rfid = portrait_field.get_value(Source.RFID, original=True)\n        - lang: 'C#'\n          source: |\n            var imageBytes = File.ReadAllBytes(\"australia_passport.jpg\");\n            var image = new ProcessRequestImage(new ImageData(imageBytes), Light.WHITE);\n\n            var requestParams = new RecognitionParams()\n            .WithScenario(Scenario.FULL_PROCESS)\n            .WithResultTypeOutput(new List\u003cint\u003e { Result.STATUS, Result.TEXT, Result.IMAGES, Result.DOCUMENT_TYPE });\n            var request = new RecognitionRequest(requestParams, image);\n\n            var api = licenseFromEnv != null\n               ? new DocumentReaderApi(apiBaseUrl).WithLicense(licenseFromEnv)\n               : new DocumentReaderApi(apiBaseUrl).WithLicense(licenseFromFile);\n            var response = api.Process(request);\n\n            // status examples\n            var status = response.Status();\n            string docOverallStatus = status.OverallStatus == CheckResult.OK ? \"valid\" : \"not valid\";\n            string docOpticalTextStatus = status.DetailsOptical.Text == CheckResult.OK ? \"valid\" : \"not valid\";\n\n            // text fields examples\n            var docNumberField = response.Text().GetField(TextFieldType.DOCUMENT_NUMBER);\n            string docNumberVisual = docNumberField.GetValue(Source.VISUAL);\n            string docNumberMrz = docNumberField.GetValue(Source.MRZ);\n            int docNumberVisualValidity = docNumberField.SourceValidity(Source.VISUAL);\n            int docNumberMrzValidity = docNumberField.SourceValidity(Source.MRZ);\n            int docNumberMrzVisualMatching = docNumberField.CrossSourceComparison(Source.MRZ, Source.VISUAL);\n\n            // images fields examples\n            var documentImage = response.Images().GetField(GraphicFieldType.DOCUMENT_FRONT).GetValue();\n            var portraitField = response.Images().GetField(GraphicFieldType.PORTRAIT);\n            var portraitFromVisual = portraitField.GetValue(Source.VISUAL);\n\n\ncomponents:\n  schemas:\n\n    #############################\n    ############################# Requests objects\n\n    # todo different image input types\n    ProcessRequest:\n      type: object\n      properties:\n        tag:\n          type: string\n          description: \"session id\"\n        processParam:\n          $ref: '#/components/schemas/ProcessParams'\n        List:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProcessRequestImage'\n        ContainerList:\n          $ref: './rt.yml#/components/schemas/ContainerList'\n        systemInfo:\n          $ref: '#/components/schemas/ProcessSystemInfo'\n        passBackObject:\n          type: object\n          description: \"Free-form object to be included in response. Must be object, not list or simple value.\n          Do not affect document processing. Use it freely to pass your app params. Stored in process logs.\"\n          additionalProperties: true\n      required:\n        - processParam\n\n    ProcessParams:\n      type: object\n      properties:\n        scenario:\n          $ref: './common.yml#/components/schemas/Scenario'\n        resultTypeOutput:\n          description: \"Types of results to return in response. See 'Result' enum for available options\"\n          type: array\n          items:\n            $ref: './rt.yml#/components/schemas/Result'\n        doublePageSpread:\n          description: \"Enable this option if the image you provide contains double page spread\n          of the passport and you want to process both pages in one go. It makes sense to use it for documents\n          that have meaningful information on both pages, like Russian domestic passport, or some others.\n          Disabled by default.\"\n          type: boolean\n          # default false\n        generateDoublePageSpreadImage:\n          description: 'When enabled together with \"doublePageSpread\" and there is a passport with two pages\n          spread in the image, pages will be cropped, straightened and aligned together, as if the document was captured\n          on a flatbed scanner. Disabled by default.'\n          type: boolean\n          # default false\n        fieldTypesFilter:\n          description: \"List of text field types to extract. If empty, all text fields from template will be extracted.\n          Narrowing the list can shorten processing time. Empty by default.\"\n          type: array\n          items:\n            $ref: './e-text-field-type.yml#/components/schemas/TextFieldType'\n        dateFormat:\n          description: \"This option allows you to set dates format so that solution will return dates in this format.\n          For example, if you supply 'MM/dd/yyyy', and document have printed date '09 JUL 2020' for the date os issue,\n          you will get '07/09/2020' as a result.\n          By default it is set to system locale default (where the service is running).\"\n          type: string\n          example: \"MM/dd/yyyy\"\n        measureSystem:\n          description: \"This option allows you to set the system of measurement used for converting original values \n          in document to output result values. Metric by default.\"\n          $ref: '#/components/schemas/MeasureSystem'\n        imageDpiOutMax:\n          description: \"This option controls maximum resolution in dpi of output images. Resolution will remain original\n          in case 0 is supplied. By default is set to return images in response with resolution not greater than 300 dpi.\"\n          type: integer\n        alreadyCropped:\n          description: \"This option can be enabled if you know for sure that the image you provide contains\n          already cropped document by its edges. This was designed to process on the\n          server side images captured and cropped on mobile. Disabled by default.\"\n          type: boolean\n          # default false\n        customParams:\n          description: \"This option allows passing custom processing parameters that can be implemented in future without\n          changing API.\"\n          type: object\n          additionalProperties: true\n        config:\n          description: \"This option allows setting additional custom configuration per document type.\n           If recognized document has ID specified in config, processing adjusts according to designated configuration.\"\n          type: array\n          items:\n            $ref: '#/components/schemas/PerDocumentConfig'\n        log:\n          description: \"When enabled, results will contain transaction processing log. Disabled by default\"\n          type: boolean\n          # default false\n        logLevel:\n          description: \"When used together with 'log' parameter enabled, sets the level of logs detalization. 'INFO' by default.\"\n          $ref: \"#/components/schemas/LogLevel\"\n          # default: \"INFO\"\n        forceDocID:\n          description: \"Force use of specific template ID and skip document type identification step.\"\n          type: integer\n        matchTextFieldMask:\n          description: \"When disabled, text field OCR will be done as is and then the recognized value will be\n          matched to the field mask for validity. If enabled, we are trying to read a field value with maximum efforts\n          to match the mask and provide a correctly formatted value, making assumptions based on the provided field mask\n          in the template. Enabled by default.\"\n          type: boolean\n          # default: true\n        fastDocDetect:\n          description: \"When enabled, shorten the list of candidates to process during document detection in a\n          single image process mode. Reduces processing time for specific backgrounds. Enabled by default.\"\n          type: boolean\n          # default: true\n        updateOCRValidityByGlare:\n          description: \"When enabled, fail OCR field validity, if there is a glare over the text field on the image. Disabled by default.\"\n          type: boolean\n          # default: false\n        checkRequiredTextFields:\n          description: \"When enabled, each field in template will be checked for value presence and if the field\n          is marked as required, but has no value, it will have 'error' in validity status. Disabled by default.\"\n          type: boolean\n          # default: false\n        returnCroppedBarcode:\n          description: \"When enabled, returns cropped barcode images for unknown documents. Disabled by default.\"\n          type: boolean\n          # default: false\n        imageQa:\n          $ref: '#/components/schemas/ImageQA'\n        respectImageQuality:\n          description: \"When enabled, image quality checks status affects document optical and overall status. Disabled by default.\"\n          type: boolean\n          # default: false\n        forceDocFormat:\n          description: \"Force use of specified document format when locating and recognizing document to reduce the number of candidates.\"\n          $ref: \"./rt-doc-type-old.yml#/components/schemas/DocumentFormat\"\n        noGraphics:\n          description: \"When enabled, no graphic fields will be cropped from document image. Disabled by default.\"\n          type: boolean\n          # default: false\n        documentAreaMin:\n          description: \"Specifies minimal area of the image that document should cover to be treated as candidate when locating.\n          Value should be in range from 0 to 1, where 1 is when document should fully cover the image.\"\n          type: number\n          format: float\n          # default: 0\n        depersonalizeLog:\n          description: \"When enabled, all personal data will be forcibly removed from the logs. Disabled by default.\"\n          type: boolean\n          # default: false\n        multiDocOnImage:\n          description: \"This option allows locating and cropping multiple documents from one image if enabled. Disabled by default.\"\n          type: boolean\n          # default false\n        shiftExpiryDate:\n          description: \"This option allows shifting the date of expiry into the future or past for number of months specified.\n          This is useful, for example, in some cases when document might be still valid for some period\n          after original expiration date to prevent negative validity status for such documents.\n          Or by shifting the date to the past will set negative validity for the documents\n          that is about to expire in a specified number of months. 0 by default\"\n          type: integer\n          #default 0\n        minimalHolderAge:\n          description: \"This options allows specifying the minimal age in years of the document holder\n          for the document to be considered valid.\"\n          type: integer\n        returnUncroppedImage:\n          description: \"When enabled, returns input images in output. Disabled by default.\"\n          type: boolean\n          # default false\n        mrzFormatsFilter:\n          description: \"This option allows limiting MRZ formats to be recognized by specifying them in array.\"\n          type: array\n          items:\n            $ref: '#/components/schemas/MRZFormat'\n        forceReadMrzBeforeLocate:\n          description: \"When enabled, make sure that in series processing MRZ is located fully inside the result document image, \n          if present on the document. Enabling this option may add extra processing time, by disabling optimizations,\n          but allows more stability in output image quality. Disabled by default.\"\n          type: boolean\n          # default false\n        parseBarcodes:\n          description: \"This option can be disabled to stop parsing after barcode is read. Enabled by default.\"\n          type: boolean\n          # default true\n        convertCase:\n          description: \"This option allows output text case transformation. No changes applied by default to original values.\"\n          $ref: \"#/components/schemas/TextPostProcessing\"\n        splitNames:\n          description: \"When enabled, the Surname and GivenNames field will be divided into\n          ft_First_Name, ft_Second_Name, ft_Third_Name, ft_Fourth_Name, ft_Last_Name fields. Disabled by default.\"\n          type: boolean\n          # default false\n        disablePerforationOCR:\n          description: \"When enabled, OCR of perforated fields in the document template will not be performed. Disabled by default.\"\n          type: boolean\n          # default false\n        documentGroupFilter:\n          description: \"List of specific eligible document types from DocumentType enum to recognize from. \n          You may, for example, specify only passports to be recognized by setting this property. Empty by default.\"\n          type: array\n          items:\n            $ref: \"./e-document-type.yml#/components/schemas/DocumentType\"\n      required:\n        - scenario\n\n    MRZFormat:\n      type: string\n      enum:\n        - '1x30'\n        - '3x30'\n        - '2x36'\n        - '2x44'\n        - '1x6'\n        - '2x30'\n      x-enum-varnames:\n        - 'IDL'\n        - 'ID1'\n        - 'ID2'\n        - 'ID3'\n        - 'CAN'\n        - 'ID1_2_30'\n\n    TextPostProcessing:\n      type: integer\n      enum:\n        - 0\n        - 1\n        - 2\n        - 3\n      x-enum-varnames:\n        - 'NO_CHANGE'\n        - 'UPPERCASE'\n        - 'LOWERCASE'\n        - 'CAPITAL'\n\n    MeasureSystem:\n      type: integer\n      example: 0\n      enum:\n        - 0\n        - 1\n      x-enum-descriptions:\n        - 'Metric system of measurement, where things are measured in meters and grams'\n        - 'Imperial System of Measurement, where things are measured in feet, inches and pounds'\n      x-enum-varnames:\n        - 'METRIC'\n        - 'IMPERIAL'\n\n    LogLevel:\n      type: string\n      enum:\n        - FatalError\n        - Error\n        - Warning\n        - Info\n        - Debug\n      x-enum-varnames:\n        - 'FATAL_ERROR'\n        - 'ERROR'\n        - 'WARNING'\n        - 'INFO'\n        - 'DEBUG'\n\n\n    PerDocumentConfig:\n      type: object\n      properties:\n        docID:\n          description: \"Specific template IDs, for which apply current custom configuration\"\n          type: array\n          items:\n            type: integer\n        excludeAuthChecks:\n          description: \"Contains items from AuthenticityResultType as sum via OR operation\"\n          type: integer\n          example: 2\n\n\n    ImageQA:\n      type: object\n      properties:\n        dpiThreshold:\n          description: \"This parameter sets threshold for Image QA check of the presented document physical dpi. If\n          actual document dpi is below this threshold, check will fail.\"\n          type: integer\n          # default: 150\n        angleThreshold:\n          description: \"This parameter sets threshold for Image QA check of the presented document perspective angle in\n          degrees. If actual document perspective angle is above this threshold, check will fail.\"\n          type: integer\n          # default: 5\n        focusCheck:\n          description: \"This option enables focus check while performing image quality validation.\"\n          type: boolean\n          # default: false\n        glaresCheck:\n          description: \"This option enables glares check while performing image quality validation.\"\n          type: boolean\n          # default: true\n        colornessCheck:\n          description: \"This option enables colorness check while performing image quality validation.\"\n          type: boolean\n          # default: false\n        moireCheck:\n          description: \"This option enables screen capture (moire patterns) check while performing image quality validation.\"\n          type: boolean\n          # default: false\n\n    ProcessRequestImage:\n      type: object\n      required:\n        - ImageData\n      properties:\n        ImageData:\n          $ref: './common.yml#/components/schemas/ImageData'\n        light:\n          $ref: './common.yml#/components/schemas/Light'\n        page_idx:\n          description: \"page/image number\"\n          type: integer\n          # default: 0\n      example:\n        light: 6\n        page_idx: 0\n        ImageData:\n          image: \"\u003cbase64 image\u003e\"\n\n    ProcessSystemInfo:\n      type: object\n      properties:\n        license:\n          description: \"Base64 encoded license file\"\n          type: string\n        recaptcha_token:\n          description: \"For internal use. Demo-sites recaptcha token.\"\n          type: string\n\n    #############################\n    ############################# Response objects\n    ProcessResponse:\n      type: object\n      required:\n        - ProcessingFinished\n        - ContainerList\n        - TransactionInfo\n      properties:\n        ChipPage:\n          $ref: \"./common.yml#/components/schemas/RfidLocation\"\n        ProcessingFinished:\n          $ref: \"#/components/schemas/ProcessingStatus\"\n        ContainerList:\n          $ref: \"./rt.yml#/components/schemas/ContainerList\"\n        TransactionInfo:\n          $ref: \"#/components/schemas/TransactionInfo\"\n        log:\n          description: \"Base64 encoded transaction processing log\"\n          type: string\n        passBackObject:\n          type: object\n          description: \"Free-form object provided in request. See passBackObject property of ProcessRequest.\"\n          additionalProperties: true\n        morePagesAvailable:\n          type: integer\n\n    ProcessingStatus:\n      type: integer\n      enum:\n        - 0\n        - 1\n        - 2\n      x-enum-descriptions:\n        - 'Processing was not finished'\n        - 'Processing finished'\n        - 'Processing finished by timeout'\n      x-enum-varnames:\n        - 'NOT_FINISHED'\n        - 'FINISHED'\n        - 'TIMEOUT'\n\n    TransactionInfo:\n      type: object\n      properties:\n        ComputerName:\n          type: string\n        DateTime:\n          type: string\n        TransactionID:\n          type: string\n        UserName:\n          type: string\n      example:\n        \"ComputerName\": \"7cded6852d20\"\n        \"DateTime\": \"2020-05-27T08:17:03.247Z\"\n        \"TransactionID\": \"dc5eb444-ad6e-4ebc-8102-d62d5bb56a4e\"\n        \"UserName\": \"user\"\n\n",
			"canonicalURL": "/github.com/regulaforensics/DocumentReader-web-openapi@daaa50378df68dd1fd2ad8c0441ffc9738e3ede5/-/blob/p-process.yml",
			"externalURLs": [
				{
					"url": "https://github.com/regulaforensics/DocumentReader-web-openapi/blob/daaa50378df68dd1fd2ad8c0441ffc9738e3ede5/p-process.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: at 1:15: schemas: \"ProcessParams\": parse schema: property \"documentGroupFilter\": at 1:4161: parse schema: item: at 1:4375: parse schema: resolve \"./e-document-type.yml#/components/schemas/DocumentType\": external \"./e-document-type.yml\": get: file: local file reference is not allowed"
}