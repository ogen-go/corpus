{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/seniorGolang/tg"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "example/swagger.yaml",
			"byteSize": 8534,
			"content": "openapi: 3.0.0\ninfo:\n    title: Example API\n    description: A service which provide Example API\n    version: 0.0.0\nservers:\n    - url: http://example.test\npaths:\n    /api/v2/user/custom:\n        delete:\n            tags:\n                - User\n            summary: Метод полностью обрабатываемый кастомным хендлером\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/requestUserCustomHandler'\n            responses:\n                \"200\":\n                    description: Successful operation\n                \"400\":\n                    description: Bad Request\n    /api/v2/user/custom/response:\n        patch:\n            tags:\n                - User\n            summary: Метод со сторонним обработчиком ответа\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/requestUserCustomResponse'\n            responses:\n                \"200\":\n                    description: Successful operation\n                \"400\":\n                    description: Bad Request\n    /api/v2/user/file:\n        post:\n            tags:\n                - User\n            summary: Загрузка аватара пользователя\n            description: Загрузка файла\n            requestBody:\n                content:\n                    multipart/form-data:\n                        schema:\n                            $ref: '#/components/schemas/requestUserUploadFile'\n            responses:\n                \"200\":\n                    description: Successful operation\n                \"400\":\n                    description: Bad Request\n    /api/v2/user/info:\n        get:\n            tags:\n                - User\n            summary: Данные пользователя\n            description: Возвращает данные пользователя код успеха 204\n            parameters:\n                - in: header\n                  name: User-Agent\n                  required: true\n                  schema:\n                    type: string\n                - in: cookie\n                  name: sessionCookie\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"204\":\n                    description: No Content\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/responseUserGetUser'\n                \"400\":\n                    description: Bad Request\n                \"401\":\n                    description: Unauthorized\n    /jsonRPC/test:\n        post:\n            tags:\n                - JsonRPC\n            summary: json RPC метод\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            type: object\n                            properties:\n                                id:\n                                    example: 1\n                                    oneOf:\n                                        - type: number\n                                        - type: string\n                                          format: uuid\n                                jsonrpc:\n                                    type: string\n                                    example: \"2.0\"\n                                params:\n                                    $ref: '#/components/schemas/requestJsonRPCTest'\n            responses:\n                \"200\":\n                    description: Successful operation\n                    content:\n                        application/json:\n                            schema:\n                                oneOf:\n                                    - type: object\n                                      properties:\n                                        id:\n                                            example: 1\n                                            oneOf:\n                                                - type: number\n                                                - type: string\n                                                  format: uuid\n                                        jsonrpc:\n                                            type: string\n                                            example: \"2.0\"\n                                        result:\n                                            $ref: '#/components/schemas/responseJsonRPCTest'\n                                    - type: object\n                                      properties:\n                                        error:\n                                            type: object\n                                            properties:\n                                                code:\n                                                    type: number\n                                                    format: int32\n                                                    example: -32603\n                                                data:\n                                                    type: object\n                                                    nullable: true\n                                                message:\n                                                    type: string\n                                                    example: not found\n                                            nullable: true\n                                        id:\n                                            example: 1\n                                            oneOf:\n                                                - type: number\n                                                - type: string\n                                                  format: uuid\n                                        jsonrpc:\n                                            type: string\n                                            example: \"2.0\"\ncomponents:\n    schemas:\n        User:\n            type: object\n            properties:\n                name:\n                    type: string\n                userID:\n                    type: number\n                    format: uint64\n        requestJsonRPCTest:\n            type: object\n            properties:\n                arg0:\n                    type: number\n                    format: int\n                arg1:\n                    type: string\n                    format: uuid\n                opts:\n                    type: array\n                    items:\n                        type: object\n                        nullable: true\n        requestUserCustomHandler:\n            type: object\n            properties:\n                arg0:\n                    type: number\n                    format: int\n                arg1:\n                    type: string\n                opts:\n                    type: array\n                    items:\n                        type: object\n                        nullable: true\n        requestUserCustomResponse:\n            type: object\n            properties:\n                arg0:\n                    type: number\n                    format: int\n                arg1:\n                    type: string\n                opts:\n                    type: array\n                    items:\n                        type: object\n                        nullable: true\n        requestUserGetUser:\n            type: object\n        requestUserUploadFile:\n            type: object\n            properties:\n                fileBytes:\n                    type: file\n                    format: byte\n            description: Загрузка файла\n        responseJsonRPCTest:\n            type: object\n            properties:\n                ret1:\n                    type: number\n                    format: int\n                ret2:\n                    type: string\n        responseUserCustomHandler:\n            type: object\n        responseUserCustomResponse:\n            type: object\n        responseUserGetUser:\n            type: object\n            properties:\n                user:\n                    $ref: '#/components/schemas/User'\n            description: Возвращает данные пользователя код успеха 204\n        responseUserUploadFile:\n            type: object\n",
			"canonicalURL": "/github.com/seniorGolang/tg@a4e88c7b6f9e39b16f488c05327170a5ea04f229/-/blob/example/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/seniorGolang/tg/blob/a4e88c7b6f9e39b16f488c05327170a5ea04f229/example/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: at 1:15: schemas: \"requestUserUploadFile\": parse schema: property \"fileBytes\": at 1:855: parse schema: unexpected schema type: \"file\""
}