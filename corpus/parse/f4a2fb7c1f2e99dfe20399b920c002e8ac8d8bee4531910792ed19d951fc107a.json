{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/commercetools/rmf-codegen"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "languages/oas/src/test/resources/fixtures/openapi.yaml",
			"byteSize": 6108,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: Commercetools OAuth API\n  version: \"1\"\n\nservers:\n  - url: https://auth.europe-west1.gcp.commercetools.com\n\npaths:\n  /oauth/introspect:\n    post:\n      operationId: OauthIntrospectPost\n      parameters:\n        - name: token\n          in: query\n          required: true\n          style: form\n          schema:\n            type: \"string\"\n          explode: true\n      responses:\n        \"200\":\n          description: |-\n            200\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IntrospectResponse'\n\n  /oauth/token:\n    post:\n      operationId: OauthTokenPost\n      parameters:\n        - name: grant_type\n          in: query\n          required: true\n          style: form\n          schema:\n            {}\n          explode: true\n        - name: refresh_token\n          in: query\n          required: false\n          style: form\n          schema:\n            type: \"string\"\n          explode: true\n        - name: scope\n          in: query\n          required: false\n          style: form\n          schema:\n            type: \"string\"\n          explode: true\n      responses:\n        \"200\":\n          description: |-\n            200\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenResponse'\n\n        \"401\":\n          description: |-\n            Unauthorized\n          content: {}\n  /oauth/{projectKey}/anonymous/token:\n    parameters:\n      - name: projectKey\n        in: path\n        required: true\n        schema:\n          type: string\n    post:\n      operationId: OauthByProjectKeyAnonymousTokenPost\n      description: |-\n        To obtain an access token for an Anonymous Session, the OAuth client needs the create_anonymous_token scope.\n        The regular Client Credentials Flow is used.\n\n        These access tokens are similar to those issued with the Password Flow, but they are not associated with a\n        customer but with an anonymousId. In addition to the access token, a refresh token is issued. The refresh\n        token is the only way to get a new access token for this particular anonymousId.\n\n        The anonymousId is either generated by the API or an unused id may be supplied with the optional parameter\n        anonymous_id.\n      parameters:\n        - name: grant_type\n          in: query\n          required: true\n          style: form\n          schema:\n            $ref: '#/components/schemas/ClientCredentialsType'\n          explode: true\n        - name: anonymous_id\n          in: query\n          required: false\n          style: form\n          schema:\n            type: \"string\"\n          explode: true\n        - name: scope\n          in: query\n          required: false\n          style: form\n          schema:\n            type: \"string\"\n          explode: true\n      responses:\n        \"200\":\n          description: |-\n            200\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RefreshTokenResponse'\n\n        \"401\":\n          description: |-\n            Unauthorized\n          content: {}\n  /oauth/{projectKey}/customers/token:\n    parameters:\n      - name: projectKey\n        in: path\n        required: true\n        schema:\n          type: string\n    post:\n      operationId: OauthByProjectKeyCustomersTokenPost\n      description: |-\n        To obtain an access token through the password flow, you need to provide the email and unencrypted\n        password of the customer in addition to your OAuth client credentials.\n\n        In addition to the access token, a refresh token is issued. The refresh token may be used to get a\n        new access token without supplying email and password if the access token has expired.\n      parameters:\n        - name: grant_type\n          in: query\n          required: true\n          style: form\n          schema:\n            $ref: '#/components/schemas/PasswordType'\n          explode: true\n        - name: username\n          in: query\n          required: true\n          style: form\n          schema:\n            type: \"string\"\n          explode: true\n        - name: password\n          in: query\n          required: true\n          style: form\n          schema:\n            type: \"string\"\n          explode: true\n        - name: scope\n          in: query\n          required: false\n          style: form\n          schema:\n            type: \"string\"\n          explode: true\n      responses:\n        \"200\":\n          description: |-\n            200\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RefreshTokenResponse'\n\n        \"401\":\n          description: |-\n            Unauthorized\n          content: {}\n\ncomponents:\n\n  schemas:\n    IntrospectResponse:\n      type: \"object\"\n      properties:\n        active:\n          type: \"boolean\"\n        scope:\n          type: \"string\"\n        exp:\n          type: \"integer\"\n          format: \"int64\"\n    TokenResponse:\n      type: \"object\"\n      properties:\n        access_token:\n          type: \"string\"\n        expires_in:\n          type: \"integer\"\n          format: \"int64\"\n        scope:\n          type: \"string\"\n        token_type:\n          $ref: '#/components/schemas/TokenType'\n    RefreshTokenResponse:\n      allOf:\n        - $ref: '#/components/schemas/TokenResponse'\n        - type: \"object\"\n          properties:\n            access_token:\n              type: \"string\"\n            expires_in:\n              type: \"integer\"\n              format: \"int64\"\n            scope:\n              type: \"string\"\n            token_type:\n              $ref: '#/components/schemas/TokenType'\n            refresh_token:\n              type: \"string\"\n    TokenType:\n      type: \"string\"\n      enum:\n        - Bearer\n    ClientCredentialsType:\n      type: \"string\"\n      enum:\n        - client_credentials\n    PasswordType:\n      type: \"string\"\n      enum:\n        - password\n    RefreshTokenType:\n      type: \"string\"\n      enum:\n        - refresh_token\n    GrantType:\n      type: \"string\"\n",
			"canonicalURL": "/github.com/commercetools/rmf-codegen@e83378f7ef5d926a4e4749fa14f5efd36fbb590c/-/blob/languages/oas/src/test/resources/fixtures/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/commercetools/rmf-codegen/blob/e83378f7ef5d926a4e4749fa14f5efd36fbb590c/languages/oas/src/test/resources/fixtures/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/oauth/token\": post: operation \"OauthTokenPost\": parameters: parse parameter \"grant_type\": at 1:1440: invalid schema:style:explode combination: (\"\":\"form\":true)"
}