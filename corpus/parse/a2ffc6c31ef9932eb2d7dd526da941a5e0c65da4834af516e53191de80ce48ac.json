{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wzslr321/artiver"
		},
		"file": {
			"name": "swagger-api-docs.yaml",
			"size": 0,
			"path": "docs/swagger-api-docs/swagger-api-docs.yaml",
			"byteSize": 11284,
			"content": "openapi: 3.0.0\ninfo:\n  title: ArTiver\n  version: \"1.0.0\"\n  description: ArTiver Server Api Documentation\n  contact:\n    name: Contact\n    url: https://github.com/wzslr321/artiver\nservers:\n  - description: \"ArTiver Local Development Server\" \n    url: 'https://localhost:8000'\nsecurity:\n  - AuthApiKey: []\npaths:\n  '/users/{uid}':\n    get:\n      tags:\n        - Users\n      summary: Get One User\n      description: 'Get user profile information'\n      operationId: GetOneUser\n      responses:\n        '200':\n          description: 'Successfully found a user with specified uid'\n          headers: {} # \u003c!\u003e TODO \u003c!\u003e\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user_meta'\n              example:\n                name: 'Steve'\n                photoURL: 'some_url.jpg'\n        '404':\n          description: 'Could not find a user with specified uid'\n          content:\n            application/json:\n              example:\n                message: 'Could not find a user with specified uid'\n      deprecated: false\n  /users:\n    get:\n      tags:\n        - Users\n      summary: Get All Users\n      description: 'Get an array of all users'\n      operationId: GetAllUsers\n      responses:\n        '200':\n          description: return all users\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/all_users_meta'\n              example:\n                users: [\n                  {\n                    name: 'Steve',\n                    photoURL: 'some_url.jpg'\n                  },\n                  {\n                    name: 'Mark',\n                    photoURL: 'some_different_url.jpg'\n                  }\n                ]\n        '400':\n          description: 'Bad request - client-side input fails validation'\n          content:\n            application/json:\n              example:\n                message: 'Could not fetch users'\n      deprecated: false\n    post:\n      tags:\n        - Users\n      summary: Create User\n      description: Register a new user.\n      operationId: CreateUser\n      parameters: []\n      requestBody:\n        description: ''\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateUserRequest'\n            example:\n              name: John User\n              email: super.email@host.com\n              password: OnePass1\n        required: true\n      responses:\n        '200':\n          description: 'Successfully created new user'\n          headers: {}\n        '400':\n          description: 'Bad request - client-side input fails validation'\n          content:\n            application/json:\n              example:\n                message: 'Could not create a user due to incorrect input'\n      deprecated: false\n    parameters: []\n  /auth/email:\n    post:\n      tags:\n        - Auth\n      summary: Sign in with Email\n      description: Login and get a JWT Token Authorization Bearer to use this api.\n      operationId: Login\n      parameters: []\n      requestBody:\n        description: ''\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LoginRequest'\n            example:\n              email: super.email@host.com\n              password: OnePass1\n        required: true\n      responses:\n        '200':\n          description: ''\n          headers:\n            Host:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: 'localhost:8000'\n            Date:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: 'Wed, 22 May 2019 19:24:12 +0000'\n            Connection:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: close\n            Access-Control-Allow-Origin:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: '*'\n            Content-Length:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: 291\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/server_message'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LoginFailed'\n              example:\n                message: 'Login failed: Email or password incorrect.'\n                class: UserException\n                status: error\n                code: 400\n      deprecated: false\n  /auth/google:\n    post:\n      tags:\n        - Auth\n      summary: Google Sign In\n      description: Test\n      parameters: []\n      requestBody:\n        description: 'Auth token provided by frontend'\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/token'\n            example:\n              token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEyMzQ1Njc4OTAsImlzcyI6Imh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbSIsImF1ZCI6IjEyMy1hYmMuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJpYXQiOjIzMzM2NjQwMCwiZXhwIjoyMzMzNzAwMDAsIm5hbWUiOiJKb2huIERvZSIsImdpdmVuX25hbWUiOiJKb2huIiwiZmFtaWx5X25hbWUiOiJEb2UiLCJlbWFpbCI6Impkb2VAZ21haWwuY29tIiwibG9jYWxlIjoiZW5fVVMifQ.mFhIakeMiuA6Bz-IHUi6-IFa9fr58DmbHMzOCz4t9dI\n        required: true\n      responses:\n        '200':\n          description: 'Successfully authorized user and accessed profile information'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/token'\n              example:\n                code: 200\n                status: success\n                message:\n                  Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMSIsImVtYWlsIjoibUBiLmNvbS5hciIsIm5hbWUiOiJNTkIiLCJpYXQiOjE1NTg1NTMwNTIsImV4cCI6MTU1OTE1Nzg1Mn0.OQyICWlGW0oSUB-ANrYL2OJTdC2v0OQQO3RQQ3W_KLo\n        '400':\n          description: Bad request - client-side input fails validation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LoginFailed'\n              example:\n                message: 'Login failed - Google authorization did not finish successfully.'\n                class: UserException\n                status: error\n                code: 400\n  /auth/facebook:\n    post:\n      tags:\n        - Auth\n      summary: Facebook Sign In\n      description: 'Endpoint that uses Facebook SDK, to sign in a user and access his Facebook account information.'\n      parameters: []\n      requestBody:\n        description: 'Auth token provided by frontend'\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/token'\n            example:\n              token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEyMzQ1Njc4OTAsImlzcyI6Imh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbSIsImF1ZCI6IjEyMy1hYmMuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJpYXQiOjIzMzM2NjQwMCwiZXhwIjoyMzMzNzAwMDAsIm5hbWUiOiJKb2huIERvZSIsImdpdmVuX25hbWUiOiJKb2huIiwiZmFtaWx5X25hbWUiOiJEb2UiLCJlbWFpbCI6Impkb2VAZ21haWwuY29tIiwibG9jYWxlIjoiZW5fVVMifQ.mFhIakeMiuA6Bz-IHUi6-IFa9fr58DmbHMzOCz4t9dI\n        required: true\n      responses:\n        '200':\n          description: 'Successfully authorized user and accessed profile information'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/token'\n              example:\n                code: 200\n                status: success\n                message:\n                  Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMSIsImVtYWlsIjoibUBiLmNvbS5hciIsIm5hbWUiOiJNTkIiLCJpYXQiOjE1NTg1NTMwNTIsImV4cCI6MTU1OTE1Nzg1Mn0.OQyICWlGW0oSUB-ANrYL2OJTdC2v0OQQO3RQQ3W_KLo\n        '400':\n          description: Bad request - client-side input fails validation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LoginFailed'\n              example:\n                message: 'Login failed - Facebook authorization did not finish successfully.'\n                class: UserException\n                status: error\n                code: 400\n  /:\n    get:\n      tags:\n        - Info\n      summary: Root Endpoint\n      description: Get help about this api.\n      parameters: []\n      responses:\n        '200':\n          description: 'May return api documentation url'\n          \n          content:\n            application/json:\n              schema:\n                type: string\n              example:\n                \"http://localhost:8090\"\n      deprecated: false\ncomponents:\n  schemas:\n    server_message:\n      title: Server Status Message\n      type: object\n      properties:\n        code:\n          type: string\n        message:\n          type: string\n    user_meta:\n      title: User Meta Data\n      type: object\n      properties:\n        name: \n          type: string\n        photoURL: \n          type: string\n    tags:\n      title: Article Tag\n      type: string\n    token:\n      title: token\n      type: object\n      properties:\n        token:\n          type: string\n    all_users_meta:\n      title: All Users Meta Data\n      type: array\n      properties:\n        schema:\n          $ref: '#/components/schemas/user_meta'\n    UpdateUserRequest:\n      title: UpdateUserRequest\n      required:\n        - name\n        - email\n      type: object\n      properties:\n        name:\n          type: string\n        email:\n          type: string\n      example:\n        name: Jhon R\n        email: ram@hotmail.com\n    CreateUserRequest:\n      title: CreateUserRequest\n      required:\n        - name\n        - email\n        - password\n      type: object\n      properties:\n        name:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n      example:\n        name: John User\n        email: super.email@host.com\n        password: OnePass1\n    LoginFailed:\n      title: LoginFailed\n      required:\n        - message\n        - class\n        - status\n        - code\n      type: object\n      properties:\n        message:\n          type: string\n        class:\n          type: string\n        status:\n          type: string\n        code:\n          type: integer\n          format: int32\n      example:\n        message: 'Login failed: Email or password incorrect.'\n        class: UserException\n        status: error\n        code: 400\n    LoginRequest:\n      title: LoginRequest\n      required:\n        - email\n        - password\n      type: object\n      properties:\n        email:\n          type: string\n        password:\n          type: string\n      example:\n        email: super.email@host.com\n        password: OnePass1\n  securitySchemes:\n    AuthApiKey:\n      name: Authorization\n      type: apiKey\n      in: header\n      description: JWT for Authentication and Authorization\ntags:\n  - name: Auth\n    description: Authorization.\n  - name: Users\n    description: Manage Users.\n  - name: Articles\n    description: Manage Articles.\n",
			"canonicalURL": "/github.com/wzslr321/artiver@a256e9048b207e59eb31e2410ebd58ca8ed2bd39/-/blob/docs/swagger-api-docs/swagger-api-docs.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/wzslr321/artiver/blob/a256e9048b207e59eb31e2410ebd58ca8ed2bd39/docs/swagger-api-docs/swagger-api-docs.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/users/{uid}\": get: operation \"GetOneUser\": at 1:7707: parse path \"/users/{uid}\": path parameter not specified: \"uid\""
}