{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/NCATS-Tangerine/translator-api-registry"
		},
		"file": {
			"name": "smartapi.yaml",
			"size": 0,
			"path": "idisk/smartapi.yaml",
			"byteSize": 22332,
			"content": "openapi: 3.0.3\ninfo:\n  contact:\n    email: help@biothings.io\n    name: BioThings Team\n    x-id: https://github.com/biothings\n    x-role: responsible developers\n  description: Documentation of the BioThings iDISK (integrated Dietary Supplement Knowledge Base) query web services.\n  termsOfService: https://biothings.io/about\n  title: BioThings iDISK API\n  version: '2020-02-14'\n  x-translator:\n    infores: \"infores:biothings-idisk\"\n    component: KP\n    team:\n      - Service Provider\n    biolink-version: \"2.2.13\"\nservers:\n- description: Encrypted Production server\n  url: https://biothings.ncats.io/idisk\n  x-maturity: production\n- description: Production server\n  url: http://biothings.ncats.io/idisk\n  x-maturity: production\ntags:\n- name: chemical\n- name: disease\n- name: umls\n- name: phenotype\n- name: query\n- name: translator\n- name: biothings\npaths:\n  \"/umls/{id}\":\n    get:\n      parameters:\n      - name: id\n        in: path\n        required: true\n        example: \"UMLS:C4101693\"\n        ## has prefix, UMLS ID for the supplement\n        schema:\n          type: string\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/rawquery\"\n      - \"$ref\": \"#/components/parameters/_source\"\n      - \"$ref\": \"#/components/parameters/size\"\n      - \"$ref\": \"#/components/parameters/dotfield\"\n      - \"$ref\": \"#/components/parameters/_sorted\"\n      - \"$ref\": \"#/components/parameters/always_list\"\n      - \"$ref\": \"#/components/parameters/allow_null\"\n      - \"$ref\": \"#/components/parameters/format\"\n      responses:\n        '200':\n          description: \"Success\"\n      #     content:\n      #       application/json:\n      #         schema:\n      #           $ref: '#/components/schemas/umls'\n      #   '404':\n      #     description: A response indicating an unknown umls ID\n      # summary: Retrieve umls objects based on ID\n      tags:\n      - umls\n  \"/umls\":\n    post:\n      parameters:\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/rawquery\"\n      - \"$ref\": \"#/components/parameters/_source\"\n      - \"$ref\": \"#/components/parameters/size\"\n      - \"$ref\": \"#/components/parameters/dotfield\"\n      - \"$ref\": \"#/components/parameters/_sorted\"\n      - \"$ref\": \"#/components/parameters/always_list\"\n      - \"$ref\": \"#/components/parameters/allow_null\"\n      - \"$ref\": \"#/components/parameters/format\"\n      requestBody:\n        content:\n          application/json:\n            example:\n            ## has prefix, UMLS ID for the supplement\n              ids:\n              - \"UMLS:C4101693\"\n              - \"UMLS:C2648396\"\n            schema:\n              type: object\n              properties:\n                ids:\n                  description: 'multiple UMLS IDs for supplements separated by comma. Note that\n                    currently we only take the input ids up to 1000 maximum, the rest\n                    will be omitted. Type: string (list). Max: 1000.'\n                  type: array\n                  items:\n                    type: string\n      responses:\n        '200':\n          description: \"Success\"\n      tags:\n      - umls\n  \"/metadata\":\n    get:\n      parameters:\n      - \"$ref\": \"#/components/parameters/format\"\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/dev\"\n      responses:\n        '200':\n          description: Success\n      summary: Get metadata about the data available from the API\n      tags:\n      - metadata\n  \"/metadata/fields\":\n    get:\n      parameters:\n      - \"$ref\": \"#/components/parameters/format\"\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/search\"\n      - \"$ref\": \"#/components/parameters/prefix\"\n      responses:\n        '200':\n          description: Success\n      summary: Get metadata about the data fields available from a record\n      tags:\n      - metadata\n  \"/query\":\n    get:\n      parameters:\n      - name: q\n        description: Query string.\n        in: query\n        required: true\n        example: is_effective_for.umls:\"C0747771\"\n        schema:\n          type: string\n      - \"$ref\": \"#/components/parameters/aggs\"\n      - \"$ref\": \"#/components/parameters/facet_size\"\n      - \"$ref\": \"#/components/parameters/from\"\n      - \"$ref\": \"#/components/parameters/userquery\"\n      - \"$ref\": \"#/components/parameters/sort\"\n      - \"$ref\": \"#/components/parameters/explain\"\n      - \"$ref\": \"#/components/parameters/fetch_all\"\n      - \"$ref\": \"#/components/parameters/scroll_id\"\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/rawquery\"\n      - \"$ref\": \"#/components/parameters/_source\"\n      - \"$ref\": \"#/components/parameters/size\"\n      - \"$ref\": \"#/components/parameters/dotfield\"\n      - \"$ref\": \"#/components/parameters/_sorted\"\n      - \"$ref\": \"#/components/parameters/always_list\"\n      - \"$ref\": \"#/components/parameters/allow_null\"\n      - \"$ref\": \"#/components/parameters/format\"\n      responses:\n        '200':\n          description: Success\n      #     content:\n      #       application/json:\n      #         schema:\n      #           \"$ref\": \"#/components/schemas/QueryResult\"\n      #   '400':\n      #     content:\n      #       application/json:\n      #         schema:\n      #           \"$ref\": \"#/components/schemas/ErrorResult\"\n      #     description: A response indicating an improperly formatted query\n      # summary: Make queries and return matching gene hits. Supports JSONP and CORS\n      #   as well.\n      tags:\n      - query\n    post:\n      parameters:\n      - name: q\n        in: query\n        required: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: scopes\n        in: query\n        required: false\n        schema:\n          type: array\n          items:\n            type: string\n            default:\n            - _id\n      - \"$ref\": \"#/components/parameters/from\"\n      - \"$ref\": \"#/components/parameters/sort\"\n      - \"$ref\": \"#/components/parameters/raw\"\n      - \"$ref\": \"#/components/parameters/rawquery\"\n      - \"$ref\": \"#/components/parameters/_source\"\n      - \"$ref\": \"#/components/parameters/size\"\n      - \"$ref\": \"#/components/parameters/dotfield\"\n      - \"$ref\": \"#/components/parameters/_sorted\"\n      - \"$ref\": \"#/components/parameters/always_list\"\n      - \"$ref\": \"#/components/parameters/allow_null\"\n      - \"$ref\": \"#/components/parameters/format\"\n      requestBody:\n        content:\n          application/json:\n            example:\n              q:\n              - \"C0747771\"\n              - \"C0009324\"\n              scopes:\n              - \"is_effective_for.umls\"\n            schema:\n              type: object\n              properties:\n                q:\n                  type: array\n                  items:\n                    type: string\n                scopes:\n                  type: array\n                  items:\n                    type: string\n                from:\n                  type: integer\n                sort:\n                  type: array\n                  items:\n                    type: string\n      responses:\n        '200':\n          description: Success\n      #     content:\n      #       application/json:\n      #         schema:\n      #           \"$ref\": \"#/components/schemas/QueryPOSTResult\"\n      #   '400':\n      #     content:\n      #       application/json:\n      #         schema:\n      #           \"$ref\": \"#/components/schemas/ErrorResult\"\n      #     description: A response indicating an improperly formatted query\n      summary: Make batch umls queries and return matching umls hits\n      x-bte-kgs-operations:\n      - $ref: '#/components/x-bte-kgs-operations/has_adverse_effect_on'\n      - $ref: '#/components/x-bte-kgs-operations/has_adverse_effect_on-rev'\n      - $ref: '#/components/x-bte-kgs-operations/has_adverse_reaction'\n      - $ref: '#/components/x-bte-kgs-operations/has_adverse_reaction-rev'\n      - $ref: '#/components/x-bte-kgs-operations/interacts_with'\n      - $ref: '#/components/x-bte-kgs-operations/interacts_with-rev'\n      - $ref: '#/components/x-bte-kgs-operations/is_effective_for'\n      - $ref: '#/components/x-bte-kgs-operations/is_effective_for-rev'\n      tags:\n      - query\ncomponents:\n  parameters:\n    _sorted:\n      name: _sorted\n      in: query\n      required: false\n      schema:\n        type: boolean\n        default: true\n    _source:\n      name: _source\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    aggs:\n      name: aggs\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    allow_null:\n      name: allow_null\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    always_list:\n      name: always_list\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    dev:\n      name: dev\n      in: query\n      required: false\n      schema:\n        type: boolean\n    dotfield:\n      name: dotfield\n      in: query\n      required: false\n      schema:\n        type: boolean\n    explain:\n      name: explain\n      in: query\n      required: false\n      schema:\n        type: boolean\n    facet_size:\n      name: facet_size\n      in: query\n      required: false\n      schema:\n        type: integer\n        default: 10\n    fetch_all:\n      name: fetch_all\n      in: query\n      required: false\n      schema:\n        type: boolean\n    format:\n      name: format\n      description: 'controls output format of server response, currently supports:\n        \"json\", \"jsonld\", \"html\". Type: string. Default: json.'\n      in: query\n      required: false\n      schema:\n        type: string\n        default: json\n    from:\n      name: from\n      in: query\n      required: false\n      schema:\n        type: integer\n    prefix:\n      name: prefix\n      in: query\n      required: false\n      schema:\n        type: string\n    raw:\n      name: raw\n      in: query\n      required: false\n      schema:\n        type: boolean\n    rawquery:\n      name: rawquery\n      in: query\n      required: false\n      schema:\n        type: boolean\n    scroll_id:\n      name: scroll_id\n      in: query\n      required: false\n      schema:\n        type: string\n    search:\n      name: search\n      in: query\n      required: false\n      schema:\n        type: string\n    size:\n      name: size\n      description: \"default: 10 objects/records in response\"\n      in: query\n      required: false\n      schema:\n        type: integer\n    sort:\n      name: sort\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    userquery:\n      name: userquery\n      in: query\n      required: false\n      schema:\n        type: string\n  # schemas:\n  #   umls:\n  #     properties:\n  #       _id:\n  #         type: string\n  #     required:\n  #     - _id\n  #     type: object\n  #   ErrorResult:\n  #     properties:\n  #       message:\n  #         type: string\n  #       success:\n  #         type: boolean\n  #     type: object\n  #   QueryPOSTResult:\n  #     items:\n  #       allOf:\n  #       - $ref: '#/components/schemas/umls'\n  #       - properties:\n  #           _score:\n  #             format: float\n  #             type: number\n  #           query:\n  #             type: string\n  #         type: object\n  #     type: array\n  #   QueryResult:\n  #     properties:\n  #       hits:\n  #         items:\n  #           $ref: '#/components/schemas/umls'\n  #         type: array\n  #       max_score:\n  #         format: float\n  #         type: number\n  #       took:\n  #         type: integer\n  #       total:\n  #         type: integer\n  #     type: object\n  #   int64_or_array:\n  #     oneOf:\n  #     - items:\n  #         format: int64\n  #         type: integer\n  #       type: array\n  #     - format: int64\n  #       type: integer\n  #   string_or_array:\n  #     oneOf:\n  #     - items:\n  #         type: string\n  #       type: array\n  #     - type: string\n  x-bte-kgs-operations:\n  ## SRI-ID-Resolver has issues with the UMLS chemical IDs.\n  ##   some are thought to be Protein/Polypeptides...\n  ##   many aren't resolved at all...\n  ## reference for data: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7075538/\n    has_adverse_effect_on:\n    ## there are 626 records with the has_adverse_effect_on field\n    ## the dietary supplement has an adverse effect (that can be categorized into this class of diseases)\n    - supportBatch: true\n      useTemplating: true ## flag to say templating is being used below\n      inputs:\n      - id: UMLS\n        semantic: SmallMolecule\n      requestBody:\n        body:\n          ## API data has no prefix\n          ## joinSafe is only needed if the delimiter isn't a comma\n          q: \"{{ queryInputs }}\"\n          scopes: umls\n        header: application/x-www-form-urlencoded\n      outputs:\n      - id: MEDDRA\n        semantic: Disease\n      parameters:\n        ## no prefix on output id\n        fields: has_adverse_effect_on.meddra,has_adverse_effect_on.source.name\n        size: 1000  ## size limit; just in case\n      predicate: causes_adverse_event  ## closest biolink predicate?\n      ## iDISK got all these relations from NMCD: Natural Medicines Comprehensive Database \n      ## ref:  Table 3 of the linked publication, or by comparing number of records total with \n      ##   the number of records from https://biothings.ncats.io/idisk/query?q=has_adverse_effect_on.source.name:%22NMCD%22\n      source: \"infores:idisk\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/has_adverse_effect_on'\n      # testExamples:\n      #   - qInput: \"UMLS:C0000392\"       ## beta-Alanine\n      #     oneOutput: \"MEDDRA:10017947\"  ## gastrointestinal disorders\n    has_adverse_effect_on-rev:\n    - supportBatch: true\n      useTemplating: true ## flag to say templating is being used below\n      inputs:\n      - id: MEDDRA\n        semantic: Disease\n      requestBody:\n        body:\n          ## API data has no prefix\n          ## joinSafe is only needed if the delimiter isn't a comma\n          q: \"{{ queryInputs }}\"\n          scopes: has_adverse_effect_on.meddra\n        header: application/x-www-form-urlencoded\n      outputs:\n      - id: UMLS\n        semantic: SmallMolecule\n      parameters:\n        fields: umls  ## no prefix\n        size: 1000    ## note size limit\n      predicate: adverse_event_caused_by\n      source: \"infores:idisk\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/rev'\n      # testExamples:\n      #   - qInput: \"MEDDRA:10017947\"     ## gastrointestinal disorders \n      #     oneOutput: \"UMLS:C0000392\"    ## beta-Alanine\n    has_adverse_reaction:\n    ## there are 204 records with the has_adverse_reaction field\n    ## the dietary supplement has an adverse effect/reaction (specific sign/symptom)\n    - supportBatch: true\n      useTemplating: true ## flag to say templating is being used below\n      inputs:\n      - id: UMLS\n        semantic: SmallMolecule\n      requestBody:\n        body:\n          ## API data has no prefix\n          ## joinSafe is only needed if the delimiter isn't a comma\n          q: \"{{ queryInputs }}\"\n          scopes: umls\n        header: application/x-www-form-urlencoded\n      outputs:\n      - id: UMLS\n        semantic: PhenotypicFeature  ## use this or Disease?\n        ## SRI-ID-resolver is resolving these to PhenotypicFeature\n        ##   example: https://nodenormalization-sri.renci.org/1.2/get_normalized_nodes?curie=UMLS%3AC0027497&conflate=true\n        ## don't create two operations or records will duplicate for DiseaseOrPhenotypicFeature query\n      parameters:\n        ## no prefix on output id\n        fields: has_adverse_reaction.umls,has_adverse_reaction.source.name\n        size: 1000  ## size limit; just in case\n      predicate: causes_adverse_event  ## closest biolink predicate?\n      ## iDISK got all these relations from MSKCC: “About Herbs” page on the Memorial Sloan Kettering Cancer Center (MSKCC) website \n      ## ref:  Table 3 of the linked publication, or by comparing number of records total with \n      ##   the number of records from https://biothings.ncats.io/idisk/query?q=has_adverse_reaction.source.name:%22MSKCC%22\n      source: \"infores:idisk\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/has_adverse_reaction'\n      # testExamples:\n      #   - qInput: \"UMLS:C0000578\"     ## 5-Hydroxytryptophan\n      #     oneOutput: \"UMLS:C0027497\"  ## nausea\n    has_adverse_reaction-rev:\n    - supportBatch: true\n      useTemplating: true ## flag to say templating is being used below\n      inputs:\n      - id: UMLS\n        semantic: PhenotypicFeature\n      requestBody:\n        body:\n          ## API data has no prefix\n          ## joinSafe is only needed if the delimiter isn't a comma\n          q: \"{{ queryInputs }}\"\n          scopes: has_adverse_reaction.umls\n        header: application/x-www-form-urlencoded\n      outputs:\n      - id: UMLS\n        semantic: SmallMolecule\n      parameters:\n        fields: umls  ## no prefix\n        size: 1000    ## note size limit\n      predicate: adverse_event_caused_by\n      source: \"infores:idisk\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/rev'\n      # testExamples:\n      #   - qInput: \"UMLS:C0027497\"       ## nausea \n      #     oneOutput: \"UMLS:C0000578\"    ## 5-Hydroxytryptophan\n    interacts_with:\n    ## there are 673 records with the interacts_with field \n    ##   most use NMCD (604), but some use MSKCC (178). Some records must have both?\n    ## the dietary supplement interacts with a pharmaceutical drug\n    - supportBatch: true\n      useTemplating: true ## flag to say templating is being used below\n      inputs:\n      - id: UMLS\n        semantic: SmallMolecule\n      requestBody:\n        body:\n          ## API data has no prefix\n          ## joinSafe is only needed if the delimiter isn't a comma\n          q: \"{{ queryInputs }}\"\n          scopes: umls\n        header: application/x-www-form-urlencoded\n      outputs:\n      - id: UMLS\n        semantic: SmallMolecule  \n      parameters:\n        ## no prefix on output id\n        fields: interacts_with.umls,interacts_with.source.name\n        size: 1000  ## size limit; just in case\n      predicate: interacts_with  ## closest biolink predicate?\n      source: \"infores:idisk\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/interacts_with'\n      # testExamples:\n      #   - qInput: \"UMLS:C0000473\"     ## 4-Aminobenzoic Acid\n      #     oneOutput: \"UMLS:C0010137\"  ## Cortisone\n    interacts_with-rev:\n    - supportBatch: true\n      useTemplating: true ## flag to say templating is being used below\n      inputs:\n      - id: UMLS\n        semantic: SmallMolecule\n      requestBody:\n        body:\n          ## API data has no prefix\n          ## joinSafe is only needed if the delimiter isn't a comma\n          q: \"{{ queryInputs }}\"\n          scopes: interacts_with.umls\n        header: application/x-www-form-urlencoded\n      outputs:\n      - id: UMLS\n        semantic: SmallMolecule\n      parameters:\n        fields: umls\n        size: 1000  ## note size limit\n      predicate: interacts_with\n      source: \"infores:idisk\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/rev'\n      # testExamples:\n      #   - qInput: \"UMLS:C0010137\"      ## Cortisone \n      #     oneOutput: \"UMLS:C0000473\"   ## 4-Aminobenzoic Acid\n    is_effective_for:\n    ## there are 654 records with the is_effective_for field \n    ##   most use NMCD (552), but some use MSKCC (238). Some records must have both?\n    ## the dietary supplement is said to treat disease/condition or may be used for it...\n    - supportBatch: true\n      useTemplating: true ## flag to say templating is being used below\n      inputs:\n      - id: UMLS\n        semantic: SmallMolecule\n      requestBody:\n        body:\n          ## API data has no prefix\n          ## joinSafe is only needed if the delimiter isn't a comma\n          q: \"{{ queryInputs }}\"\n          scopes: umls\n        header: application/x-www-form-urlencoded\n      outputs:\n      - id: UMLS\n        semantic: Disease    ## use this or PhenotypicFeature?\n        ## this example is a Disease: https://nodenormalization-sri.renci.org/1.2/get_normalized_nodes?curie=UMLS%3AC0016053&conflate=true\n        ## don't create two operations or records will duplicate for DiseaseOrPhenotypicFeature query\n      parameters:\n        fields: is_effective_for.umls,is_effective_for.source.name\n        size: 1000  ## size limit; just in case\n      predicate: treats  ## closest biolink predicate?\n      source: \"infores:idisk\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/is_effective_for'\n      # testExamples:\n      #   - qInput: \"UMLS:C0000503\"      ## gamma hydroxybutyrate \n      #     oneOutput: \"UMLS:C0016053\"   ## Fibromyalgias\n    is_effective_for-rev:\n    - supportBatch: true\n      useTemplating: true ## flag to say templating is being used below\n      inputs:\n      - id: UMLS\n        semantic: Disease\n      requestBody:\n        body:\n          ## API data has no prefix\n          ## joinSafe is only needed if the delimiter isn't a comma\n          q: \"{{ queryInputs }}\"\n          scopes: is_effective_for.umls\n        header: application/x-www-form-urlencoded\n      outputs:\n      - id: UMLS\n        semantic: SmallMolecule\n      parameters:\n        fields: umls\n        size: 1000  ## note size limit\n      predicate: treated_by\n      source: \"infores:idisk\"\n      response_mapping:\n        $ref: '#/components/x-bte-response-mapping/rev'\n      # testExamples:\n      #   - qInput: \"UMLS:C0016053\"   ## Fibromyalgias \n      #     oneOutput: \"UMLS:C0000503\"      ## gamma hydroxybutyrate \n  x-bte-response-mapping:\n  ## name not included since BTE doesn't ingest it right now...\n    has_adverse_effect_on:\n      MEDDRA: has_adverse_effect_on.meddra\n      source: has_adverse_effect_on.source.name\n    rev:\n      UMLS: umls\n    has_adverse_reaction:\n      UMLS: has_adverse_reaction.umls\n      source: has_adverse_reaction.source.name\n    interacts_with:\n      UMLS: interacts_with.umls\n      source: interacts_with.source.name\n    is_effective_for:\n      UMLS: is_effective_for.umls\n      source: is_effective_for.source.name\n",
			"canonicalURL": "/github.com/NCATS-Tangerine/translator-api-registry@5925bba6420fb77fa3e54d9258970431e340e092/-/blob/idisk/smartapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/NCATS-Tangerine/translator-api-registry/blob/5925bba6420fb77fa3e54d9258970431e340e092/idisk/smartapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/query\": at 1:7682: post: at 1:8654: parameters: parse parameter \"scopes\": at 1:8764: schema: at 1:8820: parse schema: item: at 1:8829: parse default: expected type \"string\", got \"array\""
}