{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ga4gh/tool-registry-service-schemas"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/openapi.yaml",
			"byteSize": 28101,
			"content": "openapi: 3.0.0\ninfo:\n  title: GA4GH Tool Discovery API\n  description: Proposed API for GA4GH (Global Alliance for Genomics \u0026 Health) tool\n    repositories. A tool consists of a set of container images that are paired\n    with a set of documents. Examples of documents include CWL (Common Workflow\n    Language), WDL (Workflow Description Language), NFL (Nextflow), or GXFORMAT2\n    (Galaxy) that describe how to use those images and a set of specifications\n    for those images (examples are Dockerfiles or Singularity recipes) that\n    describe how to reproduce those images in the future. We use the following\n    terminology, a \"container image\" describes a container as stored at rest on\n    a filesystem, a \"tool\" describes one of the triples as described above. In\n    practice, examples of \"tools\" include CWL CommandLineTools, CWL Workflows,\n    WDL workflows, and Nextflow workflows that reference containers in formats\n    such as Docker or Singularity.\n  version: 2.0.1\ntags:\n  - name: GA4GH\n    description: A group of web resources proposed as a common standard for tool\n      repositories\n    externalDocs:\n      url: https://ga4gh.github.io/tool-registry-service-schemas/Introduction/\npaths:\n  /service-info:\n    $ref: https://raw.githubusercontent.com/ga4gh-discovery/ga4gh-service-info/v1.0.0/service-info.yaml#/paths/~1service-info\n  \"/tools/{id}\":\n    get:\n      summary: List one specific tool, acts as an anchor for self references\n      operationId: toolsIdGet\n      description: This endpoint returns one specific tool (which has ToolVersions\n        nested inside it).\n      tags:\n        - GA4GH\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        \"200\":\n          description: A tool.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Tool\"\n            text/plain:\n              schema:\n                type: string\n        \"404\":\n          description: The tool can not be found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - BEARER: []\n  \"/tools/{id}/versions\":\n    get:\n      summary: List versions of a tool\n      operationId: toolsIdVersionsGet\n      description: Returns all versions of the specified tool.\n      tags:\n        - GA4GH\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        \"200\":\n          description: An array of tool versions.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ToolVersion\"\n      security:\n        - BEARER: []\n  \"/tools/{id}/versions/{version_id}\":\n    get:\n      summary: List one specific tool version, acts as an anchor for self references\n      operationId: toolsIdVersionsVersionIdGet\n      description: This endpoint returns one specific tool version.\n      tags:\n        - GA4GH\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/version_id\"\n      responses:\n        \"200\":\n          description: A tool version.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ToolVersion\"\n        \"404\":\n          description: The tool can not be found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - BEARER: []\n  /tools:\n    get:\n      summary: List all tools\n      operationId: toolsGet\n      description: \u003e\n        This endpoint returns all tools available or a filtered subset using\n        metadata query parameters.\n      tags:\n        - GA4GH\n      parameters:\n        - name: id\n          in: query\n          description: A unique identifier of the tool, scoped to this registry, for\n            example `123456`.\n          schema:\n            type: string\n        - name: alias\n          in: query\n          description: \u003e-\n            Support for this parameter is optional for tool registries that\n            support aliases.\n\n            If provided will only return entries with the given alias.\n          schema:\n            type: string\n        - name: toolClass\n          in: query\n          description: Filter tools by the name of the subclass (#/definitions/ToolClass)\n          schema:\n            type: string\n        - name: descriptorType\n          in: query\n          description: Filter tools by the name of the descriptor type\n          schema:\n            $ref: '#/components/schemas/DescriptorType' \n        - name: registry\n          in: query\n          description: The image registry that contains the image.\n          schema:\n            type: string\n        - name: organization\n          in: query\n          description: The organization in the registry that published the image.\n          schema:\n            type: string\n        - name: name\n          in: query\n          description: The name of the image.\n          schema:\n            type: string\n        - name: toolname\n          in: query\n          description: The name of the tool.\n          schema:\n            type: string\n        - name: description\n          in: query\n          description: The description of the tool.\n          schema:\n            type: string\n        - name: author\n          in: query\n          description: The author of the tool (TODO a thought occurs, are we assuming that\n            the author of the CWL and the image are the same?).\n          schema:\n            type: string\n        - name: checker\n          in: query\n          description: Return only checker workflows.\n          schema:\n            type: boolean\n        - $ref: \"#/components/parameters/offset\"\n        - $ref: \"#/components/parameters/limit\"\n      responses:\n        \"200\":\n          description: An array of Tools that match the filter.\n          headers:\n            next_page:\n              description: A URL that can be used to reach the next page based on the current\n                offset and page record limit.\n              schema:\n                type: string\n            last_page:\n              description: A URL that can be used to reach the last page based on the current\n                page record limit.\n              schema:\n                type: string\n            self_link:\n              description: A URL that can be used to return to the current page later.\n              schema:\n                type: string\n            current_offset:\n              description: The current start index of the paging used for this result.\n              schema:\n                type: string\n            current_limit:\n              description: The current page record limit used for this result.\n              schema:\n                type: integer\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Tool\"\n      security:\n        - BEARER: []\n  \"/tools/{id}/versions/{version_id}/{type}/descriptor\":\n    get:\n      summary: Get the tool descriptor for the specified tool\n      operationId: toolsIdVersionsVersionIdTypeDescriptorGet\n      description: Returns the descriptor for the specified tool (examples include\n        CWL, WDL, Nextflow, or Galaxy documents).\n      tags:\n        - GA4GH\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/type\"\n        - $ref: \"#/components/parameters/version_id\"\n      responses:\n        \"200\":\n          description: The tool descriptor.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileWrapper\"\n            text/plain:\n              schema:\n                type: string\n        \"404\":\n          description: The tool descriptor can not be found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - BEARER: []\n  \"/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}\":\n    get:\n      summary: Get additional tool descriptor files relative to the main file\n      operationId: toolsIdVersionsVersionIdTypeDescriptorRelativePathGet\n      description: Descriptors can often include imports that refer to additional\n        descriptors. This returns additional descriptors for the specified tool\n        in the same or other directories that can be reached as a relative path.\n        This endpoint can be useful for workflow engine implementations like\n        cwltool to programmatically download all the descriptors for a tool and\n        run it. This can optionally include other files described with\n        FileWrappers such as test parameters and containerfiles.\n      tags:\n        - GA4GH\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/type\"\n        - $ref: \"#/components/parameters/version_id\"\n        - name: relative_path\n          in: path\n          required: true\n          description: A relative path to the additional file (same directory or\n            subdirectories), for example 'foo.cwl' would return a 'foo.cwl' from\n            the same directory as the main descriptor. 'nestedDirectory/foo.cwl'\n            would return the file  from a nested subdirectory.  Unencoded paths\n            such 'sampleDirectory/foo.cwl' should also be allowed.\n          schema:\n            type: string\n            pattern: .+\n      responses:\n        \"200\":\n          description: The tool descriptor.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileWrapper\"\n            text/plain:\n              schema:\n                type: string\n        \"404\":\n          description: The tool can not be output in the specified type.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - BEARER: []\n  \"/tools/{id}/versions/{version_id}/{type}/tests\":\n    get:\n      summary: Get a list of test JSONs\n      operationId: toolsIdVersionsVersionIdTypeTestsGet\n      description: Get a list of test JSONs (these allow you to execute the tool\n        successfully) suitable for use with this descriptor type.\n      tags:\n        - GA4GH\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/type\"\n        - $ref: \"#/components/parameters/version_id\"\n      responses:\n        \"200\":\n          description: The tool test JSON response.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/FileWrapper\"\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/FileWrapper\"\n        \"404\":\n          description: The tool can not be output in the specified type.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - BEARER: []\n  \"/tools/{id}/versions/{version_id}/{type}/files\":\n    get:\n      summary: Get a list of objects that contain the relative path and file type\n      description: Get a list of objects that contain the relative path and file type.\n        The descriptors are intended for use with the\n        /tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}\n        endpoint. Returns a zip file of all files when format=zip is specified.\n      operationId: toolsIdVersionsVersionIdTypeFilesGet\n      tags:\n        - GA4GH\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - name: type\n          required: true\n          in: path\n          description: The output type of the descriptor.\n          schema:\n            $ref: '#/components/schemas/DescriptorType'\n        - $ref: \"#/components/parameters/version_id\"\n        - name: format\n          in: query\n          required: false\n          description: Returns a zip file of all files when format=zip is specified.\n          schema:\n            type: string\n            enum:\n              - zip\n      responses:\n        \"200\":\n          description: The array of File JSON responses.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ToolFile\"\n            application/zip:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ToolFile\"\n        \"404\":\n          description: The tool can not be output in the specified type.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - BEARER: []\n  \"/tools/{id}/versions/{version_id}/containerfile\":\n    get:\n      summary: Get the container specification(s) for the specified image.\n      operationId: toolsIdVersionsVersionIdContainerfileGet\n      description: Returns the container specifications(s) for the specified image.\n        For example, a CWL CommandlineTool can be associated with one\n        specification for a container, a CWL Workflow can be associated with\n        multiple specifications for containers.\n      tags:\n        - GA4GH\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/version_id\"\n      responses:\n        \"200\":\n          description: The tool payload.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/FileWrapper\"\n        \"404\":\n          description: There are no container specifications for this tool.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - BEARER: []\n  /toolClasses:\n    get:\n      summary: List all tool types\n      operationId: toolClassesGet\n      description: |\n        This endpoint returns all tool-classes available.\n      tags:\n        - GA4GH\n      responses:\n        \"200\":\n          description: A list of potential tool classes.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ToolClass\"\n      security:\n        - BEARER: []\nexternalDocs:\n  description: Description of GA4GH Tool Registry (Exchange) Schema\n  url: https://github.com/ga4gh/tool-registry-schemas\nservers:\n  - url: /ga4gh/trs/v2\ncomponents:\n  parameters:\n    version_id:\n      name: version_id\n      in: path\n      required: true\n      description: An identifier of the tool version, scoped to this registry, for\t\n            example `v1`. We recommend that versions use semantic versioning\t\n            https://semver.org/spec/v2.0.0.html  (For example, `1.0.0` instead\t\n            of `develop`)\n      schema:\n        type: string\n    type:\n      name: type\n      required: true\n      in: path\n      description: The output type of the descriptor. Plain types return the bare\n        descriptor while the \"non-plain\" types return a descriptor wrapped\n        with metadata.\n      schema:\n        $ref: '#/components/schemas/DescriptorTypeWithPlain'\n    id:\n      name: id\n      in: path\n      required: true\n      description: A unique identifier of the tool, scoped to this registry, for\n        example `123456`.\n      schema:\n        type: string\n    limit:\n      name: limit\n      in: query\n      description: Amount of records to return in a given page.\n      schema:\n        type: integer\n        format: int32\n        default: 1000\n    offset:\n      name: offset\n      in: query\n      description: Start index of paging. Pagination results can be based on numbers\n        or other values chosen by the registry implementor (for example, SHA\n        values). If this exceeds the current result set return an empty set.  If\n        not specified in the request, this will start at the beginning of the\n        results.\n      schema:\n        type: string\n  securitySchemes:\n    BEARER:\n      type: apiKey\n      name: Authorization\n      in: header\n  schemas:\n    Checksum:\n      type: object\n      required:\n        - checksum\n        - type\n      properties:\n        checksum:\n          type: string\n          description: \"The hex-string encoded checksum for the data. \"\n        type:\n          type: string\n          description: \u003e-\n            The digest method used to create the checksum.\n\n            The value (e.g. `sha-256`) SHOULD be listed as `Hash Name String` in the https://github.com/ga4gh-discovery/ga4gh-checksum/blob/master/hash-alg.csv[GA4GH Checksum Hash Algorithm Registry].\n\n            Other values MAY be used, as long as implementors are aware of the issues discussed in https://tools.ietf.org/html/rfc6920#section-9.4[RFC6920].\n\n            GA4GH may provide more explicit guidance for use of non-IANA-registered algorithms in the future.\n    ToolFile:\n      type: object\n      properties:\n        path:\n          type: string\n          description: Relative path of the file.  A descriptor's path can be used with\n            the GA4GH .../{type}/descriptor/{relative_path} endpoint.\n        file_type:\n          type: string\n          enum:\n            - TEST_FILE\n            - PRIMARY_DESCRIPTOR\n            - SECONDARY_DESCRIPTOR\n            - CONTAINERFILE\n            - OTHER\n        checksum:\n          $ref: \"#/components/schemas/Checksum\"\n    ToolClass:\n      type: object\n      description: Describes a class (type) of tool allowing us to categorize\n        workflows, tasks, and maybe even other entities (such as services)\n        separately.\n      properties:\n        id:\n          type: string\n          description: The unique identifier for the class.\n        name:\n          type: string\n          description: A short friendly name for the class.\n        description:\n          type: string\n          description: A longer explanation of what this class is and what it can\n            accomplish.\n    Tool:\n      type: object\n      description: A tool (or described tool) is defined as a tuple of a descriptor\n        file (which potentially consists of multiple files), a set of container\n        images, and a set of instructions for creating those images.\n      required:\n        - url\n        - id\n        - organization\n        - toolclass\n        - versions\n      properties:\n        url:\n          type: string\n          example: http://agora.broadinstitute.org/tools/123456\n          description: The URL for this tool in this registry.\n        id:\n          type: string\n          example: 123456\n          description: A unique identifier of the tool, scoped to this registry.\n        aliases:\n          type: array\n          items:\n            type: string\n            example:\n              - 630d31c3-381e-488d-b639-ce5d047a0142\n              - dockstore.org:630d31c3-381e-488d-b639-ce5d047a0142\n              - bio.tools:630d31c3-381e-488d-b639-ce5d047a0142\n          description: \u003e-\n            Support for this parameter is optional for tool registries that\n            support aliases.\n\n            A list of strings that can be used to identify this tool which could be  straight up URLs. \n\n            This can be used to expose alternative ids (such as GUIDs) for a tool\n\n            for registries. Can be used to match tools across registries.\n        organization:\n          type: string\n          description: The organization that published the image.\n        name:\n          type: string\n          description: The name of the tool.\n        toolclass:\n          $ref: \"#/components/schemas/ToolClass\"\n        description:\n          type: string\n          description: The description of the tool.\n        meta_version:\n          type: string\n          description: The version of this tool in the registry. Iterates when fields like\n            the description, author, etc. are updated.\n        has_checker:\n          type: boolean\n          description: Whether this tool has a checker tool associated with it.\n        checker_url:\n          type: string\n          description: Optional url to the checker tool that will exit successfully if\n            this tool produced the expected result given test data.\n        versions:\n          description: A list of versions for this tool.\n          type: array\n          items:\n            $ref: \"#/components/schemas/ToolVersion\"\n    ToolVersion:\n      type: object\n      description: A tool version describes a particular iteration of a tool as\n        described by a reference to a specific image and/or documents.\n      required:\n        - url\n        - id\n      properties:\n        author:\n          type: array\n          items:\n            type: string\n          description: Contact information for the author of this version of the tool in\n            the registry. (More complex authorship information is handled by the\n            descriptor).\n        name:\n          type: string\n          description: The name of the version.\n        url:\n          type: string\n          description: The URL for this tool version in this registry.\n          example: http://agora.broadinstitute.org/tools/123456/versions/1\n        id:\n          type: string\n          description: An identifier of the version of this tool for this particular tool\n            registry.\n          example: v1\n        is_production:\n          type: boolean\n          description: This version of a tool is guaranteed to not change over time (for\n            example, a  tool built from a tag in git as opposed to a branch). A\n            production quality tool  is required to have a checksum\n        images:\n          description: All known docker images (and versions/hashes) used by this tool. If\n            the tool has to evaluate any of the docker images strings at\n            runtime, those ones cannot be reported here.\n          type: array\n          items:\n            $ref: \"#/components/schemas/ImageData\"\n        descriptor_type:\n          type: array\n          description: The type (or types) of descriptors available.\n          items:\n            $ref: \"#/components/schemas/DescriptorType\"\n        containerfile:\n          type: boolean\n          description: Reports if this tool has a containerfile available. (For\n            Docker-based tools, this would indicate the presence of a\n            Dockerfile)\n        meta_version:\n          type: string\n          description: The version of this tool version in the registry. Iterates when\n            fields like the description, author, etc. are updated.\n        verified:\n          type: boolean\n          description: Reports whether this tool has been verified by a specific\n            organization or individual.\n        verified_source:\n          type: array\n          items:\n            type: string\n          description: Source of metadata that can support a verified tool, such as an\n            email or URL.\n        signed:\n          type: boolean\n          description: Reports whether this version of the tool has been signed.\n        included_apps:\n          description: An array of IDs for the applications that are stored inside this\n            tool.\n          example:\n            - https://bio.tools/tool/mytum.de/SNAP2/1\n            - https://bio.tools/bioexcel_seqqc\n          type: array\n          items:\n            type: string\n    ImageData:\n      type: object\n      description: Describes one container image.\n      properties:\n        registry_host:\n          type: string\n          description: A docker registry or a URL to a Singularity registry. Used along\n            with image_name to locate a specific image.\n          example:\n            - registry.hub.docker.com\n        image_name:\n          type: string\n          description: Used in conjunction with a registry_url if provided to locate images.\n          example:\n            - quay.io/seqware/seqware_full/1.1\n            - ubuntu:latest\n        size:\n          type: integer\n          description: Size of the container in bytes.\n        updated:\n          type: string\n          description: Last time the container was updated.\n        checksum:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Checksum\"\n          description: A production (immutable) tool version is required to have a\n            hashcode. Not required otherwise, but might be useful to detect\n            changes.  This exposes the hashcode for specific image versions to\n            verify that the container version pulled is actually the version\n            that was indexed by the registry.\n          example:\n            - checksum: 77af4d6b9913e693e8d0b4b294fa62ade6054e6b2f1ffb617ac955dd63fb0182\n              type: sha256\n        image_type:\n          $ref: \"#/components/schemas/ImageType\"\n    ImageType:\n      type: string\n      description: Indicates what kind of container is this image is.\n      enum:\n        - Docker\n        - Singularity\n        - Conda\n    DescriptorType:\n      type: string\n      description: The type of descriptor that represents this version of the tool. Note that these files can also include\n        associated Docker/container files  and test parameters that further\n        describe a version of a tool.\n      enum:\n        - CWL\n        - WDL\n        - NFL\n        - GALAXY\n    DescriptorTypeWithPlain:\n      type: string\n      description: The output type of the descriptor. Plain types return the raw text while the \"non-plain\" types return the application/json\n      enum:\n        - CWL\n        - WDL\n        - NFL\n        - GALAXY\n        - PLAIN_CWL\n        - PLAIN_WDL\n        - PLAIN_NFL\n        - PLAIN_GALAXY\n    FileWrapper:\n      type: object\n      description: \u003e\n        A file provides content for one of\n\n        - A tool descriptor is a metadata document that describes one or more tools.\n\n        - A tool document that describes how to test with one or more sample test\n\n        JSON.\n\n        - A containerfile is a document that describes how to build a particular\n\n        container image. Examples include Dockerfiles for creating Docker images\n\n        and Singularity recipes for Singularity images\n      properties:\n        content:\n          type: string\n          description: The content of the file itself. One of url or content is required.\n        checksum:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Checksum\"\n          description: \"A production (immutable) tool version is required to have a\n            hashcode. Not required otherwise, but might be useful to detect\n            changes. \"\n          example:\n            - checksum: ea2a5db69bd20a42976838790bc29294df3af02b\n              type: sha1\n        url:\n          type: string\n          description: Optional url to the underlying content, should include version\n            information, and can include a git hash.  Note that this URL should\n            resolve to the raw unwrapped content that would otherwise be\n            available in content. One of url or content is required.\n          example:\n            descriptorfile:\n              url: https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/ea2a5db69bd20a42976838790bc29294df3af02b/delly_docker/Delly.cwl\n            containerfile:\n              url: https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/c83478829802b4d36374870843821abe1b625a71/delly_docker/Dockerfile\n    Error:\n      type: object\n      required:\n        - code\n      properties:\n        code:\n          type: integer\n          format: int32\n          default: 500\n        message:\n          type: string\n          default: Internal Server Error\n\n",
			"canonicalURL": "/github.com/ga4gh/tool-registry-service-schemas@2ecf30ebd877256d521c5d82db577c69decf0b1b/-/blob/openapi/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ga4gh/tool-registry-service-schemas/blob/2ecf30ebd877256d521c5d82db577c69decf0b1b/openapi/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/service-info\": at 1:11999: referenced pathItem not supported"
}