{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/arana-db/arana"
		},
		"file": {
			"name": "admin.api.yaml",
			"size": 0,
			"path": "pkg/admin/admin.api.yaml",
			"byteSize": 8305,
			"content": "# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nopenapi: 3.0.3\ninfo:\n  title: Arana\n  description: Arana\n  version: 1.0.0\nservers:\n  - url: 'http://127.0.0.1:8080/'\npaths:\n  /tenants:\n    get:\n      operationId: listTenants\n      summary: List all tenants\n      responses:\n        '200':\n          description: All Tenants\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tenants'\n\n    post:\n      operationId: createTenant\n      summary: Create a tenant\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Tenant'\n      responses:\n        '201':\n          description: OK\n\n  /tenants/{tenantName}:\n    get:\n      operationId: getTenant\n      summary: Get a tenant\n      responses:\n        '200':\n          description: Single Tenant\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tenant'\n    delete:\n      operationId: deleteTenant\n      summary: Delete a tenant\n      responses:\n        '204':\n          description: NONE\n    put:\n      operationId: putTenant\n      summary: Update a tenant\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Tenant'\n      responses:\n        '200':\n          description: OK\n\n  /tenants/{tenantName}/nodes:\n    get:\n      operationId: listNodes\n      summary: List mysql nodes\n      responses:\n        '200':\n          description: All MySQL Nodes\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Nodes'\n\n    post:\n      operationId: createNode\n      summary: Create mysql node\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Node'\n      responses:\n        '200':\n          description: OK\n\n  /tenants/{tenantName}/nodes/{nodeName}:\n    get:\n      operationId: getNode\n      summary: Get a mysql node\n      responses:\n        '200':\n          description: Single MySQL Node\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Node'\n    delete:\n      operationId: deleteNode\n      summary: Delete a mysql node\n      responses:\n        '204':\n          description: NONE\n\n    put:\n      operationId: putNode\n      summary: Update a mysql node\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Node'\n      responses:\n        '200':\n          description: OK\n\n  /tenants/{tenantName}/groups:\n    post:\n      operationId: createGroup\n      summary: Create a DB group\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Group'\n      responses:\n        '201':\n          description: OK\n\n    get:\n      operationId: listGroups\n      summary: List all DB groups\n      responses:\n        '200':\n          description: All groups\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Groups'\n\n  /tenants/{tenantName}/groups/{groupName}:\n    get:\n      operationId: getGroup\n      summary: Get a DB group\n      responses:\n        '200':\n          description: Single DB group\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n    put:\n      operationId: putGroup\n      summary: Update a DB group\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Group'\n      responses:\n        '200':\n          description: OK\n\n    delete:\n      operationId: deleteGroup\n      summary: Delete a DB group\n      responses:\n        '204':\n          description: NONE\n\n  /tenants/{tenantName}/clusters:\n    post:\n      operationId: createCluster\n      summary: Create a cluster\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Cluster'\n      responses:\n        '200':\n          description: OK\n\n    get:\n      operationId: listClusters\n      summary: List all clusters\n      responses:\n        '200':\n          description: All Clusters\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Clusters'\n\n  /tenants/{tenantName}/clusters/{clusterName}:\n    get:\n      operationId: getCluster\n      summary: Get a cluster\n      responses:\n        '200':\n          description: Single Cluster\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Cluster'\n\n    put:\n      operationId: putCluster\n      summary: Update a cluster\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Cluster'\n      responses:\n        '200':\n          description: OK\n\n    delete:\n      operationId: deleteCluster\n      summary: Delete a cluster\n      responses:\n        '204':\n          description: NONE\n\ncomponents:\n  schemas:\n    Tenant:\n      type: object\n      properties:\n        name:\n          type: string\n        users:\n          type: array\n          items:\n            type: object\n            properties:\n              username:\n                type: string\n              password:\n                type: string\n      example:\n        name: \"foobar\"\n        users:\n          - username: \"tom\"\n            password: \"12345678\"\n          - username: \"john\"\n            password: \"12345678\"\n    Tenants:\n      type: array\n      items:\n        $ref: '#/components/schemas/Tenant'\n\n    Node:\n      type: object\n      required:\n        - name\n        - host\n        - username\n        - password\n        - database\n        - weight\n      properties:\n        name:\n          type: string\n        host:\n          type: string\n        port:\n          type: integer\n        username:\n          type: string\n        password:\n          type: string\n        database:\n          type: string\n        weight:\n          type: string\n        parameters:\n          type: object\n      example:\n        name: mysql-axfwq87\n        host: 1.2.3.4\n        port: 3306\n        username: root\n        password: 12345678\n        database: employees_0000\n        weight: r10w10\n\n    Nodes:\n      type: array\n      items:\n        $ref: '#/components/schemas/Node'\n\n    Group:\n      type: object\n      required:\n        - name\n        - nodes\n      properties:\n        name:\n          type: string\n        nodes:\n          type: array\n          items:\n            type: string\n      example:\n        name: employees_0000\n        nodes:\n          - mysql-fwijfo8\n          - mysql-we7nvil\n          - mysql-vjm24if\n\n    Groups:\n      type: array\n      items:\n        $ref: '#/components/schemas/Group'\n\n    Cluster:\n      type: object\n      properties:\n        name:\n          type: string\n        type:\n          type: string\n        groups:\n          type: array\n          items:\n            type: string\n      example:\n        name: employees\n        type: mysql\n        groups:\n          - employees_0000\n          - employees_0001\n          - employees_0002\n          - employees_0003\n          - employees_0004\n          - employees_0005\n          - employees_0006\n          - employees_0007\n\n    Clusters:\n      type: array\n      items:\n        $ref: '#/components/schemas/Cluster'\n",
			"canonicalURL": "/github.com/arana-db/arana@c63e6de8cce9ccd0ea3c7943c34fd0f19d04cd04/-/blob/pkg/admin/admin.api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/arana-db/arana/blob/c63e6de8cce9ccd0ea3c7943c34fd0f19d04cd04/pkg/admin/admin.api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/tenants/{tenantName}\": get: operation \"getTenant\": at 1:2336: parse path \"/tenants/{tenantName}\": path parameter not specified: \"tenantName\""
}