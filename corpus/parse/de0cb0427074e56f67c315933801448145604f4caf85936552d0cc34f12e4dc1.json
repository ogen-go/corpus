{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "vimeo.com-3.4-openapi.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/vimeo.com-3.4-openapi.yaml",
			"byteSize": 745871,
			"content": "openapi: 3.0.2\nservers:\n  - description: Vimeo.com\n    url: https://api.vimeo.com\ninfo:\n  contact:\n    url: https://developer.vimeo.com/help\n    x-twitter: vimeo\n  title: Vimeo\n  version: \"3.4\"\n  x-apisguru-categories:\n    - entertainment\n  x-logo:\n    url: https://twitter.com/vimeo/profile_image?size=original\n  x-origin:\n    - converter:\n        url: https://github.com/lucybot/api-spec-converter\n        version: 2.7.31\n      format: openapi\n      url: https://raw.githubusercontent.com/vimeo/openapi/master/api.yaml\n      version: \"3.0\"\n  x-providerName: vimeo.com\nsecurity:\n  - oauth2:\n      - create\n      - delete\n      - edit\n      - email\n      - interact\n      - private\n      - promo_codes\n      - public\n      - purchase\n      - purchased\n      - stats\n      - upload\n      - video_files\ntags:\n  - name: API Information\n  - name: Albums\\Album videos\n  - name: Albums\\Custom album logos\n  - name: Albums\\Custom album thumbnails\n  - name: Albums\\Essentials\n  - name: Authentication Extras\\Essentials\n  - name: Categories\\Channels\n  - name: Categories\\Essentials\n  - name: Categories\\Groups\n  - name: Categories\\Subscriptions\n  - name: Categories\\Videos\n  - name: Channels\\Categories\n  - name: Channels\\Essentials\n  - name: Channels\\Moderators\n  - name: Channels\\Private channel members\n  - name: Channels\\Subscriptions and subscribers\n  - name: Channels\\Tags\n  - name: Channels\\Videos\n  - name: Embed Presets\\Custom Logos\n  - name: Embed Presets\\Essentials\n  - name: Embed Presets\\Videos\n  - name: Groups\\Essentials\n  - name: Groups\\Subscription\n  - name: Groups\\Users\n  - name: Groups\\Videos\n  - name: Likes\\Essentials\n  - name: On Demand\\Backgrounds\n  - name: On Demand\\Essentials\n  - name: On Demand\\Genres\n  - name: On Demand\\Posters\n  - name: On Demand\\Promotions\n  - name: On Demand\\Purchases and Rentals\n  - name: On Demand\\Regions\n  - name: On Demand\\Seasons\n  - name: On Demand\\Videos\n  - name: Portfolios\\Essentials\n  - name: Portfolios\\Videos\n  - name: Projects\\Essentials\n  - name: Projects\\Videos\n  - name: Tags\\Essentials\n  - name: Users\\Essentials\n  - name: Users\\Feed\n  - name: Users\\Follows\n  - name: Users\\Internal\n  - name: Users\\Pictures\n  - name: Users\\Watch History\n  - name: Videos\\Comments\n  - name: Videos\\Content Ratings\n  - name: Videos\\Creative Commons\n  - name: Videos\\Credits\n  - name: Videos\\Embed Privacy\n  - name: Videos\\Essentials\n  - name: Videos\\Languages\n  - name: Videos\\Recommendations\n  - name: Videos\\Tags\n  - name: Videos\\Text Tracks\n  - name: Videos\\Thumbnails\n  - name: Videos\\Upload\n  - name: Videos\\Versions\n  - name: Videos\\Viewing Privacy\n  - name: Watch Later Queue\\Essentials\npaths:\n  /:\n    get:\n      operationId: get_endpoints\n      parameters:\n        - description: Return an OpenAPI specification.\n          in: query\n          name: openapi\n          required: false\n          schema:\n            example: \"true\"\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.endpoint+json:\n              schema:\n                $ref: \"#/components/schemas/endpoint\"\n          description: Standard request.\n      summary: Get an API specification\n      tags:\n        - API Information\n  /categories:\n    get:\n      description: This method gets all existing categories.\n      operationId: get_categories\n      parameters:\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - last_video_featured_time\n              - name\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/category\"\n                type: array\n          description: The categories were returned.\n      summary: Get all categories\n      tags:\n        - Categories\\Essentials\n  \"/categories/{category}\":\n    get:\n      operationId: get_category\n      parameters:\n        - description: The name of the category.\n          in: path\n          name: category\n          required: true\n          schema:\n            example: animation\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: \"#/components/schemas/category\"\n          description: The category was returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such category exists.\n      summary: Get a specific category\n      tags:\n        - Categories\\Essentials\n  \"/categories/{category}/channels\":\n    get:\n      operationId: get_category_channels\n      parameters:\n        - description: The name of the category.\n          in: path\n          name: category\n          required: true\n          schema:\n            example: animation\n            type: string\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n              - followers\n              - videos\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/channel\"\n                type: array\n          description: The channels were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such category exists.\n      summary: Get all the channels in a category\n      tags:\n        - Categories\\Channels\n  \"/categories/{category}/groups\":\n    get:\n      operationId: get_category_groups\n      parameters:\n        - description: The name of the category.\n          in: path\n          name: category\n          required: true\n          schema:\n            example: animation\n            type: string\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n              - members\n              - videos\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.group+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/group\"\n                type: array\n          description: The groups were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.group+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such category exists.\n      summary: Get all the groups in a category\n      tags:\n        - Categories\\Groups\n  \"/categories/{category}/videos\":\n    get:\n      operationId: get_category_videos\n      parameters:\n        - description: The name of the category.\n          in: path\n          name: category\n          required: true\n          schema:\n            example: animation\n            type: string\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: |\n            The attribute by which to filter the results.\n\n            Option descriptions:\n             * `conditional_featured` - Featured (promoted) videos\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - conditional_featured\n              - embeddable\n            type: string\n        - description: Whether to filter the results by embeddable videos (`true`) or\n            non-embeddable videos (`false`). Required only if **filter** is\n            `embeddable`.\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            example: \"true\"\n            type: boolean\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - duration\n              - featured\n              - likes\n              - plays\n              - relevant\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such category exists.\n      summary: Get all the videos in a category\n      tags:\n        - Categories\\Videos\n  \"/categories/{category}/videos/{video_id}\":\n    get:\n      operationId: check_category_for_video\n      parameters:\n        - description: The name of the category.\n          in: path\n          name: category\n          required: true\n          schema:\n            example: animation\n            type: string\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 273576296\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: The video belongs to the category.\n        \"404\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such category exists, or the video doesn't belong to it.\n      summary: Check for a video in a category\n      tags:\n        - Categories\\Videos\n  /channels:\n    get:\n      operationId: get_channels\n      parameters:\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - featured\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: \u003e\n            The way to sort the results.\n\n\n            Option descriptions:\n             * `relevant` - Relevant sorting is available only for search queries.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n              - followers\n              - relevant\n              - videos\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/channel\"\n                type: array\n          description: The channels were returned.\n        \"400\":\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The relevant sort has no search query.\n      summary: Get all channels\n      tags:\n        - Channels\\Essentials\n    post:\n      description: This method creates a new channel.\n      operationId: create_channel\n      requestBody:\n        content:\n          application/vnd.vimeo.channel+json:\n            schema:\n              properties:\n                description:\n                  description: The description of the channel.\n                  example: We really love videos, and these are the videos we really,\n                    really love.\n                  type: string\n                link:\n                  description: The link to access the channel. You can use a custom name in\n                    the URL in place of a numeric channel ID, as in\n                    `/channels/{url_custom}`.\n                  example: staffpicks\n                  type: string\n                name:\n                  description: The name of the channel.\n                  example: Vimeo Staff Picks\n                  type: string\n                privacy:\n                  description: The privacy level of the channel.\n                  enum:\n                    - anybody\n                    - moderators\n                    - user\n                  type: string\n              required:\n                - name\n                - privacy\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                $ref: \"#/components/schemas/channel\"\n          description: The channel was created.\n        \"400\":\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: A parameter is invalid.\n        \"403\":\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't create a channel.\n      security:\n        - oauth2:\n            - create\n      summary: Create a channel\n      tags:\n        - Channels\\Essentials\n  \"/channels/{channel_id}\":\n    delete:\n      operationId: delete_channel\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n      responses:\n        \"204\":\n          description: The channel was deleted.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user doesn't own this channel.\n      security:\n        - oauth2:\n            - delete\n      summary: Delete a channel\n      tags:\n        - Channels\\Essentials\n    get:\n      operationId: get_channel\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                $ref: \"#/components/schemas/channel\"\n          description: The channel was returned.\n      summary: Get a specific channel\n      tags:\n        - Channels\\Essentials\n    patch:\n      description: This method edits the specified channel.\n      operationId: edit_channel\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.channel+json:\n            schema:\n              properties:\n                description:\n                  description: The description of the channel.\n                  example: We really love videos, and these are the videos we really,\n                    really love.\n                  type: string\n                link:\n                  description: The link to access the channel. You can use a custom name in\n                    the URL in place of a numeric channel ID, as in\n                    `/channels/{url_custom}`. Submitting `\"\"` for this field\n                    removes the link alias.\n                  example: staffpicks\n                  type: string\n                name:\n                  description: The name of the channel.\n                  example: Vimeo Staff Picks\n                  type: string\n                privacy:\n                  description: The privacy level of the channel.\n                  enum:\n                    - anybody\n                    - moderators\n                    - users\n                  type: string\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                $ref: \"#/components/schemas/channel\"\n          description: The channel was edited.\n        \"400\":\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: A parameter is invalid.\n      security:\n        - oauth2:\n            - edit\n      summary: Edit a channel\n      tags:\n        - Channels\\Essentials\n  \"/channels/{channel_id}/categories\":\n    get:\n      description: This method gets all the categories in the specified channel.\n      operationId: get_channel_categories\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/category\"\n                type: array\n          description: The categories were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists.\n      summary: Get all the categories in a channel\n      tags:\n        - Channels\\Categories\n    put:\n      description: This method adds multiple categories to the specified channel.\n      operationId: add_channel_categories\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                channels:\n                  description: The array of category URIs to add.\n                  items:\n                    type: string\n                  type: array\n              required:\n                - channels\n              type: object\n        required: true\n      responses:\n        \"204\":\n          description: The categories were added.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \u003e-\n            * Error code 2205: There was no request body, or the request body is\n            malformed.\n\n            * Error code 2204: You exceeded the maximum number of channel categories.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8003: The user credentials are invalid.\"\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3200: The authenticated user can't add categories to the\n            channel.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists.\n      summary: Add a list of categories to a channel\n      tags:\n        - Channels\\Categories\n  \"/channels/{channel_id}/categories/{category}\":\n    delete:\n      description: This method removes a single category from the specified channel.\n      operationId: delete_channel_category\n      parameters:\n        - description: The name of the category.\n          in: path\n          name: category\n          required: true\n          schema:\n            example: animation\n            type: string\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n      responses:\n        \"204\":\n          description: The channel was removed.\n        \"401\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8003: The user credentials are invalid.\"\n        \"403\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3200: The authenticated user doesn't own the channel or\n            isn't a channel moderator.\"\n        \"404\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel or category exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Remove a category from a channel\n      tags:\n        - Channels\\Categories\n    put:\n      description: This method adds a channel to a category.\n      operationId: categorize_channel\n      parameters:\n        - description: The name of the category.\n          in: path\n          name: category\n          required: true\n          schema:\n            example: animation\n            type: string\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n      responses:\n        \"204\":\n          description: The channel was categorized.\n        \"400\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 2204: You exceeded the maximum number of channel\n            categories.\"\n        \"401\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8003: The user credentials are invalid.\"\n        \"403\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3200: The authenticated user doesn't own the channel or\n            isn't a channel moderator.\"\n        \"404\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel or category exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Categorize a channel\n      tags:\n        - Channels\\Categories\n  \"/channels/{channel_id}/moderators\":\n    delete:\n      operationId: remove_channel_moderators\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.user+json:\n            schema:\n              properties:\n                user_uri:\n                  description: The URI of a user to remove as a moderator.\n                  example: /users/152184\n                  type: string\n              required:\n                - user_uri\n              type: object\n        required: true\n      responses:\n        \"204\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/user\"\n          description: The moderators were removed.\n        \"403\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user doesn't own the channel, the user isn't a\n            moderator of the channel, or you tried to remove the owner of the\n            channel.\n        \"404\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists, or no such user exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Remove a list of channel moderators\n      tags:\n        - Channels\\Moderators\n    get:\n      operationId: get_channel_moderators\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/user\"\n                type: array\n          description: The moderators were returned.\n      summary: Get all the moderators in a channel\n      tags:\n        - Channels\\Moderators\n    patch:\n      operationId: replace_channel_moderators\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                user_uri:\n                  description: The URI of the user to add as a moderator.\n                  example: /users/152184\n                  type: string\n              required:\n                - user_uri\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/user\"\n                type: array\n          description: The moderators were replaced.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 2908: The list contains more than 100 users.\"\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user owns this channel.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Replace the moderators of a channel\n      tags:\n        - Channels\\Moderators\n    put:\n      operationId: add_channel_moderators\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                user_uri:\n                  description: The URI of a user to add as a moderator.\n                  example: /users/152184\n                  type: string\n              required:\n                - user_uri\n              type: object\n        required: true\n      responses:\n        \"200\":\n          description: The moderators were added.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 2908: The list contains more than 100 users.\"\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user doesn't own the channel, a user is already a\n            moderator of the channel, or you tried to add a user that the\n            authenticated user doesn't follow.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists, or no such user exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Add a list of channel moderators\n      tags:\n        - Channels\\Moderators\n  \"/channels/{channel_id}/moderators/{user_id}\":\n    delete:\n      operationId: remove_channel_moderator\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"204\":\n          description: The moderator was removed.\n        \"403\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user doesn't own the channel, the user isn't a\n            moderator of the channel, or you tried to remove the owner of the\n            channel.\n        \"404\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists, or no such user exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Remove a specific channel moderator\n      tags:\n        - Channels\\Moderators\n    get:\n      operationId: get_channel_moderator\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/user\"\n          description: The moderator was returned.\n      summary: Get a specific channel moderator\n      tags:\n        - Channels\\Moderators\n    put:\n      operationId: add_channel_moderator\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"403\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user doesn't own the channel, a user is already a\n            moderator of the channel, or you tried to add a user that the\n            authenticated user doesn't follow.\n        \"404\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists, or no such user exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Add a specific channel moderator\n      tags:\n        - Channels\\Moderators\n  \"/channels/{channel_id}/privacy/users\":\n    get:\n      description: This method gets all the users who have access to the specified private\n        channel.\n      operationId: get_channel_privacy_users\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/user\"\n                type: array\n          description: The users were returned.\n        \"401\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8003: The user credentials are invalid.\"\n        \"403\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3200: The authenticated user doesn't own this channel.\"\n        \"404\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 2204: You can't add this user to a channel of this type.\"\n      summary: Get all the users who can view a private channel\n      tags:\n        - Channels\\Private channel members\n    put:\n      description: This method gives multiple users access to the specified private channel.\n      operationId: set_channel_privacy_users\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.user+json:\n            schema:\n              properties:\n                users:\n                  description: The array of either the user URIs or the user IDs to permit\n                    to view the private channel.\n                  items:\n                    type: string\n                  type: array\n              required:\n                - users\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/user\"\n                type: array\n          description: The users can now view the private channel.\n        \"400\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \u003e-\n            * Error code 2205: There was no request body, or the request body is\n            malformed.\n\n            * Error code 2900: At least one of the specified user accounts doesn't exist.\n        \"401\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8003: The user credentials are invalid.\"\n        \"403\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3200: The authenticated user doesn't own this channel.\"\n        \"404\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 2204: You can't add one or more of these users to a\n            channel of this type.\"\n      security:\n        - oauth2:\n            - edit\n      summary: Permit a list of users to view a private channel\n      tags:\n        - Channels\\Private channel members\n  \"/channels/{channel_id}/privacy/users/{user_id}\":\n    delete:\n      description: This method prevents a single user from being able to access the\n        specified private channel.\n      operationId: delete_channel_privacy_user\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"204\":\n          description: The user can no longer view the private channel.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8003: The user credentials are invalid.\"\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3200: The authenticated user doesn't own this channel.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 2204: You can't add this user to a channel of this type.\"\n      security:\n        - oauth2:\n            - edit\n      summary: Restrict a user from viewing a private channel\n      tags:\n        - Channels\\Private channel members\n    put:\n      description: This method gives a single user access to the specified private channel.\n      operationId: set_channel_privacy_user\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"200\":\n          description: The user can now view the private channel.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8003: The user credentials are invalid.\"\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3200: The authenticated user doesn't own this channel.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 2204: You can't add this user to a channel of this type.\"\n      security:\n        - oauth2:\n            - edit\n      summary: Permit a specific user to view a private channel\n      tags:\n        - Channels\\Private channel members\n  \"/channels/{channel_id}/tags\":\n    get:\n      description: This method gets all the tags that have been added to the specified\n        channel.\n      operationId: get_channel_tags\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/tag\"\n                type: array\n          description: The tags were returned.\n        \"400\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists.\n      summary: Get all the tags that have been added to a channel\n      tags:\n        - Channels\\Tags\n    put:\n      description: This method adds multiple tags to the specified channel.\n      operationId: add_tags_to_channel\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.tag+json:\n            schema:\n              properties:\n                tag:\n                  description: An array of tags to assign.\n                  items:\n                    type: string\n                  type: array\n              required:\n                - tag\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/tag\"\n                type: array\n          description: The tags were added.\n        \"400\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: \u003e-\n            * No such channel exists, or a parameter is invalid.\n\n            * Error code 2501: You tried to add more than 20 tags to the channel.\n\n            * Error code 2205: There was no request body, or the request body is malformed.\n        \"401\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8003: The user credentials are invalid.\"\n        \"403\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3200: The authenticated user can't add tags to this\n            channel.\"\n      security:\n        - oauth2:\n            - edit\n      summary: Add a list of tags to a channel\n      tags:\n        - Channels\\Tags\n  \"/channels/{channel_id}/tags/{word}\":\n    delete:\n      description: This method removes a single tag from the specified channel.\n      operationId: delete_tag_from_channel\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The word to use as the tag.\n          in: path\n          name: word\n          required: true\n          schema:\n            example: awesome\n            type: string\n      responses:\n        \"204\":\n          description: The tag was removed.\n        \"400\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The tag is invalid, or a parameter is invalid.\n        \"401\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8003: The user credentials are invalid.\"\n        \"403\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3200: The authenticated user can't remove tags from this\n            channel.\"\n      security:\n        - oauth2:\n            - edit\n      summary: Remove a tag from a channel\n      tags:\n        - Channels\\Tags\n    get:\n      description: This method determines whether a specific tag has been added to the\n        channel in question.\n      operationId: check_if_channel_has_tag\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The word to use as the tag.\n          in: path\n          name: word\n          required: true\n          schema:\n            example: awesome\n            type: string\n      responses:\n        \"204\":\n          description: The tag has been added to the channel.\n        \"400\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such tag exists.\n        \"404\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 5000: The tag exists, but the channel isn't tagged by\n            it.\"\n      summary: Check if a tag has been added to a channel\n      tags:\n        - Channels\\Tags\n    put:\n      description: This method adds a single tag to the specified channel.\n      operationId: add_channel_tag\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The word to use as the tag.\n          in: path\n          name: word\n          required: true\n          schema:\n            example: awesome\n            type: string\n      responses:\n        \"204\":\n          description: The tag was added.\n        \"400\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: \u003e-\n            * The tag is invalid, or a parameter is invalid.\n\n            * Error code 2501: The channel has already reached its maximum number of 20 tags.\n        \"401\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8003: The user credentials are invalid.\"\n        \"403\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3200: The authenticated user can't add tags to this\n            channel.\"\n      security:\n        - oauth2:\n            - edit\n      summary: Add a specific tag to a channel\n      tags:\n        - Channels\\Tags\n  \"/channels/{channel_id}/users\":\n    get:\n      operationId: get_channel_subscribers\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: true\n          schema:\n            enum:\n              - moderators\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/user\"\n                type: array\n          description: The followers were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists.\n      summary: Get all the followers of a channel\n      tags:\n        - Channels\\Subscriptions and subscribers\n  \"/channels/{channel_id}/videos\":\n    delete:\n      operationId: remove_videos_from_channel\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                video_uri:\n                  description: The URI of a video to remove.\n                  example: /videos/258684937\n                  type: string\n              required:\n                - video_uri\n              type: object\n        required: true\n      responses:\n        \"204\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: The videos were removed.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user isn't a moderator of this channel, or you\n            can't remove this video from the channel.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists, or no such user exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Remove a list of videos from a channel\n      tags:\n        - Channels\\Videos\n    get:\n      operationId: get_channel_videos\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The page that contains the video URI.\n          in: query\n          name: containing_uri\n          required: false\n          schema:\n            example: /videos/258684937\n            type: string\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - embeddable\n            type: string\n        - description: Whether to filter the results by embeddable videos (`true`) or\n            non-embeddable videos (`false`). Required only if **filter** is\n            `embeddable`.\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            example: \"true\"\n            type: boolean\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - added\n              - alphabetical\n              - comments\n              - date\n              - default\n              - duration\n              - likes\n              - manual\n              - modified_time\n              - plays\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n        \"304\":\n          description: No videos have been added to this channel since the given\n            `If-Modified-Since` header.\n        \"400\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The **sort** field is `default`, but the **direction** field has a\n            value.\n        \"404\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists.\n      summary: Get all the videos in a channel\n      tags:\n        - Channels\\Videos\n    put:\n      operationId: add_videos_to_channel\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                video_uri:\n                  description: The URI of a video to add.\n                  example: /videos/258684937\n                  type: string\n              required:\n                - video_uri\n              type: object\n        required: true\n      responses:\n        \"200\":\n          description: The videos were added.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user isn't a moderator of the channel, or the\n            video can't be added to the channel.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists, or no such user exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Add a list of videos to a channel\n      tags:\n        - Channels\\Videos\n  \"/channels/{channel_id}/videos/{video_id}\":\n    delete:\n      operationId: delete_video_from_channel\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was removed.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user isn't a moderator of this channel.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists, or no such video exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Remove a specific video from a channel\n      tags:\n        - Channels\\Videos\n    get:\n      description: This method returns a specific video in a channel. You can use it to\n        determine whether the video is in the channel.\n      operationId: get_channel_video\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: The video was returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists.\n      summary: Get a specific video in a channel\n      tags:\n        - Channels\\Videos\n    put:\n      operationId: add_video_to_channel\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was added.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The video can't be added to channels, or the authenticated user\n            isn't the moderator of this channel.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists, or no such video exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Add a specific video to a channel\n      tags:\n        - Channels\\Videos\n  \"/channels/{channel_id}/videos/{video_id}/comments\":\n    get:\n      operationId: get_comments_alt1\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/comment\"\n                type: array\n          description: The comments were returned.\n      summary: Get all the comments on a video\n      tags:\n        - Videos\\Comments\n    post:\n      operationId: create_comment_alt1\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.comment+json:\n            schema:\n              properties:\n                text:\n                  description: The text of the comment.\n                  example: I love this!\n                  type: string\n              required:\n                - text\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: \"#/components/schemas/comment\"\n          description: The comment was added.\n        \"400\":\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 2207: The comment text is missing.\"\n        \"401\":\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8003: The user credentials are invalid.\"\n        \"403\":\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: |-\n            * Error code 3413: Comments are disabled for this video.\n            * Error code 3411: The authenticated user is unverified.\n            * Error code 3412: The authenticated user can't comment.\n            * Error code 3301: The comment was flagged as spam.\n      security:\n        - oauth2:\n            - interact\n      summary: Add a comment to a video\n      tags:\n        - Videos\\Comments\n  \"/channels/{channel_id}/videos/{video_id}/credits\":\n    get:\n      operationId: get_video_credits_alt1\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/credit\"\n                type: array\n          description: The users were returned.\n      summary: Get all the credited users in a video\n      tags:\n        - Videos\\Credits\n    post:\n      operationId: add_video_credit_alt1\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.credit+json:\n            schema:\n              properties:\n                email:\n                  description: The email address of the credited person.\n                  example: user@example.com\n                  type: string\n                name:\n                  description: The name of the credited person.\n                  example: Sam Doe\n                  type: string\n                role:\n                  description: The role of the credited person.\n                  example: Producer\n                  type: string\n                user_uri:\n                  description: The URI of the Vimeo user who should be given credit in this\n                    video.\n                  example: /users/152184\n                  type: string\n              required:\n                - email\n                - name\n                - role\n                - user_uri\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: \"#/components/schemas/credit\"\n          description: The credit was added.\n        \"400\":\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: \u003e-\n            * The credit was added.\n\n            * A parameter is invalid.\n\n            * The authenticated user has an unverified email address.\n\n            * There is a user block between the video owner and the person receiving credit.\n        \"403\":\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user doesn't own the video.\n      summary: Credit a user in a video\n      tags:\n        - Videos\\Credits\n  \"/channels/{channel_id}/videos/{video_id}/likes\":\n    get:\n      operationId: get_video_likes_alt1\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/user\"\n                type: array\n          description: The users were returned.\n      summary: Get all the users who have liked a video\n      tags:\n        - Likes\\Essentials\n  \"/channels/{channel_id}/videos/{video_id}/pictures\":\n    get:\n      operationId: get_video_thumbnails_alt1\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/picture\"\n                type: array\n          description: The thumbnails were returned.\n      summary: Get all the thumbnails of a video\n      tags:\n        - Videos\\Thumbnails\n    post:\n      operationId: create_video_thumbnail_alt1\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.picture+json:\n            schema:\n              properties:\n                active:\n                  description: Whether the image created by the `time` field should be the\n                    default thumbnail for the video.\n                  example: \"true\"\n                  type: boolean\n                time:\n                  description: Creates an image of the video from the given time offset.\n                  example: 300\n                  type: number\n              type: object\n        required: false\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The thumbnail was created.\n      security:\n        - oauth2:\n            - upload\n      summary: Add a video thumbnail\n      tags:\n        - Videos\\Thumbnails\n  \"/channels/{channel_id}/videos/{video_id}/privacy/users\":\n    get:\n      operationId: get_video_privacy_users_alt1\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/user\"\n                type: array\n          description: The users were returned.\n        \"400\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No users can view the private video.\n      summary: Get all the users who can view a user's private videos by default\n      tags:\n        - Videos\\Viewing Privacy\n    put:\n      description: \u003e-\n        The body of this request should follow our\n\n        [batch request format](https://developer.vimeo.com/api/common-formats#batch-requests). Each object must contain\n\n        a single `URI` field, and the value of this field must be the URI of the user who can view this video.\n      operationId: add_video_privacy_users_alt1\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/user\"\n                type: array\n          description: The users can now view the private video.\n      security:\n        - oauth2:\n            - edit\n      summary: Permit a list of users to view a private video\n      tags:\n        - Videos\\Viewing Privacy\n  \"/channels/{channel_id}/videos/{video_id}/texttracks\":\n    get:\n      operationId: get_text_tracks_alt1\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/text-track\"\n                type: array\n          description: The text tracks were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such video exists.\n      summary: Get all the text tracks of a video\n      tags:\n        - Videos\\Text Tracks\n    post:\n      description: For additional information, see our [text track upload\n        guide](https://developer.vimeo.com/api/upload/texttracks).\n      operationId: create_text_track_alt1\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.video.texttrack+json:\n            schema:\n              properties:\n                active:\n                  description: Active text tracks appear in the player and are visible to\n                    other users. Only one text track per language can be active.\n                  example: \"true\"\n                  type: boolean\n                language:\n                  description: The language of the text track. For a complete list of valid\n                    languages, use the\n                    [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages)\n                    endpoint.\n                  example: en-US\n                  type: string\n                name:\n                  description: The name of the text track.\n                  example: Commentary\n                  type: string\n                type:\n                  description: The type of the text track.\n                  enum:\n                    - captions\n                    - chapters\n                    - descriptions\n                    - metadata\n                    - subtitles\n                  type: string\n              required:\n                - language\n                - name\n                - type\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: \"#/components/schemas/text-track\"\n          description: The text track was added.\n        \"403\":\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: |-\n            * The authenticated user can't edit the text track.\n            * Error code 2204: The request contains errors.\n      security:\n        - oauth2:\n            - upload\n      summary: Add a text track to a video\n      tags:\n        - Videos\\Text Tracks\n  /contentratings:\n    get:\n      operationId: get_content_ratings\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.contentrating+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/content-rating\"\n                type: array\n          description: The content ratings were returned.\n      summary: Get all content ratings\n      tags:\n        - Videos\\Content Ratings\n  /creativecommons:\n    get:\n      operationId: get_cc_licenses\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.creativecommons+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/creative-commons\"\n                type: array\n          description: The Creative Commons licenses were returned.\n      summary: Get all Creative Commons licenses\n      tags:\n        - Videos\\Creative Commons\n  /groups:\n    get:\n      operationId: get_groups\n      parameters:\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - featured\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: \u003e\n            The way to sort the results.\n\n\n            Option descriptions:\n             * `relevant` - Relevant sorting is available only for search queries.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n              - followers\n              - relevant\n              - videos\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.group+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/group\"\n                type: array\n          description: The groups were returned.\n      summary: Get all groups\n      tags:\n        - Groups\\Essentials\n    post:\n      operationId: create_group\n      requestBody:\n        content:\n          application/vnd.vimeo.group+json:\n            schema:\n              properties:\n                description:\n                  description: The description of the new group.\n                  example: Want to participate in our weekly Challenges? Join the Group\n                    to receive messages and new Challenges!\n                  type: string\n                name:\n                  description: The name of the new group.\n                  example: Vimeo Weekend Challenge\n                  type: string\n              required:\n                - name\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.group+json:\n              schema:\n                $ref: \"#/components/schemas/group\"\n          description: The group was created.\n        \"400\":\n          content:\n            application/vnd.vimeo.group+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: A parameter is invalid.\n        \"403\":\n          content:\n            application/vnd.vimeo.group+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't create groups.\n      security:\n        - oauth2:\n            - create\n      summary: Create a group\n      tags:\n        - Groups\\Essentials\n  \"/groups/{group_id}\":\n    delete:\n      operationId: delete_group\n      parameters:\n        - description: The ID of the group.\n          in: path\n          name: group_id\n          required: true\n          schema:\n            example: 1108\n            type: number\n      responses:\n        \"204\":\n          description: The group was deleted.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user isn't the group owner.\n      security:\n        - oauth2:\n            - delete\n      summary: Delete a group\n      tags:\n        - Groups\\Essentials\n    get:\n      operationId: get_group\n      parameters:\n        - description: The ID of the group.\n          in: path\n          name: group_id\n          required: true\n          schema:\n            example: 1108\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.group+json:\n              schema:\n                $ref: \"#/components/schemas/group\"\n          description: The group was returned.\n      summary: Get a specific group\n      tags:\n        - Groups\\Essentials\n  \"/groups/{group_id}/users\":\n    get:\n      operationId: get_group_members\n      parameters:\n        - description: The ID of the group.\n          in: path\n          name: group_id\n          required: true\n          schema:\n            example: 1108\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - moderators\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/user\"\n                type: array\n          description: The members were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such group exists.\n      summary: Get all the members of a group\n      tags:\n        - Groups\\Users\n  \"/groups/{group_id}/videos\":\n    get:\n      operationId: get_group_videos\n      parameters:\n        - description: The ID of the group.\n          in: path\n          name: group_id\n          required: true\n          schema:\n            example: 1108\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - embeddable\n            type: string\n        - description: Whether to filter the results by embeddable videos (`true`) or\n            non-embeddable videos (`false`). Required only if **filter** is\n            `embeddable`.\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            example: \"true\"\n            type: boolean\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - duration\n              - likes\n              - plays\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n        \"304\":\n          description: No videos have been added to this group since the given\n            `If-Modified-Since` header.\n        \"404\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such group exists.\n      summary: Get all the videos in a group\n      tags:\n        - Groups\\Videos\n  \"/groups/{group_id}/videos/{video_id}\":\n    delete:\n      operationId: delete_video_from_group\n      parameters:\n        - description: The ID of the group.\n          in: path\n          name: group_id\n          required: true\n          schema:\n            example: 1108\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was deleted.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't modify this group's videos.\n      security:\n        - oauth2:\n            - edit\n      summary: Remove a video from a group\n      tags:\n        - Groups\\Videos\n    get:\n      description: Check if a group has a video.\n      operationId: get_group_video\n      parameters:\n        - description: The ID of the group.\n          in: path\n          name: group_id\n          required: true\n          schema:\n            example: 1108\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: The video was returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such video or group exists.\n      summary: Get a specific video in a group\n      tags:\n        - Groups\\Videos\n    put:\n      operationId: add_video_to_group\n      parameters:\n        - description: The ID of the group.\n          in: path\n          name: group_id\n          required: true\n          schema:\n            example: 1108\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: The video was added.\n        \"202\":\n          description: The video is in pending status.\n        \"403\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: |-\n            * The video is already in the group.\n            * The user can't add videos to the group.\n      security:\n        - oauth2:\n            - edit\n      summary: Add a video to a group\n      tags:\n        - Groups\\Videos\n  /languages:\n    get:\n      operationId: get_languages\n      parameters:\n        - description: |\n            The attribute by which to filter the results.\n\n            Option descriptions:\n             * `texttracks` - Only return text track supported languages\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - texttracks\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.language+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/language\"\n                type: array\n          description: The languages were returned.\n      summary: Get all languages\n      tags:\n        - Videos\\Languages\n  /me:\n    get:\n      operationId: get_user_alt1\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/user\"\n          description: The user was returned.\n      summary: Get a user\n      tags:\n        - Users\\Essentials\n    patch:\n      operationId: edit_user_alt1\n      requestBody:\n        content:\n          application/vnd.vimeo.user+json:\n            schema:\n              properties:\n                bio:\n                  description: The user's bio.\n                  example: This is where you will find videos and news updates from the\n                    staff\n                  type: string\n                content_filter:\n                  description: A list of values describing the content in this video. Find\n                    the full list in the\n                    [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings)\n                    endpoint. You must provide a comma-separated list if you are\n                    using a query string or an array if you are using JSON.\n                  items:\n                    type: string\n                  type: array\n                link:\n                  description: The user's custom Vimeo URL slug.\n                  example: staff\n                  type: string\n                location:\n                  description: The user's location.\n                  example: New York City\n                  type: string\n                name:\n                  description: The user's display name.\n                  example: Vimeo Staff\n                  type: string\n                password:\n                  description: The default password for all future videos that this user\n                    uploads. To use this field, the `videos.privacy.view` field\n                    must be `password`.\n                  example: hunter1\n                  type: string\n                videos:\n                  properties:\n                    privacy:\n                      properties:\n                        add:\n                          description: Whether a user can add the video to an album,\n                            channel, or group. This value becomes the default\n                            add setting for all future videos uploaded by the\n                            user.\n                          example: \"true\"\n                          type: boolean\n                        comments:\n                          description: Who can comment on the video. This value becomes the\n                            default comment setting for all future videos that\n                            this user uploads.\n                          enum:\n                            - anybody\n                            - contacts\n                            - nobody\n                          type: string\n                        download:\n                          description: Whether a user can download the video. This value\n                            becomes the default download setting for all future\n                            videos that this user uploads.\n                          example: \"true\"\n                          type: boolean\n                        embed:\n                          description: The privacy for embed videos. The `whitelist` value\n                            enables you to define all valid embed domains. See\n                            our\n                            [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains)\n                            for adding and removing domains.\n                          enum:\n                            - private\n                            - public\n                            - whitelist\n                          type: string\n                        view:\n                          description: Who can view the video. This value becomes the\n                            default view setting for all future videos that this\n                            user uploads.\n                          enum:\n                            - anybody\n                            - contacts\n                            - disable\n                            - nobody\n                            - password\n                            - unlisted\n                            - users\n                          type: string\n                      type: object\n                  type: object\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/user\"\n          description: The user was edited.\n      summary: Edit a user\n      tags:\n        - Users\\Essentials\n  /me/albums:\n    get:\n      operationId: get_albums_alt1\n      parameters:\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n              - duration\n              - videos\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/album\"\n                type: array\n          description: The albums were returned.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: A parameter is invalid.\n      summary: Get all the albums that belong to a user\n      tags:\n        - Albums\\Essentials\n    post:\n      operationId: create_album_alt1\n      requestBody:\n        content:\n          application/vnd.vimeo.album+json:\n            schema:\n              properties:\n                brand_color:\n                  description: The hexadecimal code for the color of the player buttons.\n                  example: ff66ee\n                  type: string\n                description:\n                  description: The description of the album.\n                  example: Vimeo holiday videos!\n                  type: string\n                hide_nav:\n                  description: Whether to hide Vimeo navigation when displaying the album.\n                  example: \"true\"\n                  type: boolean\n                layout:\n                  description: The type of layout for presenting the album.\n                  enum:\n                    - grid\n                    - player\n                  type: string\n                name:\n                  description: The name of the album.\n                  example: Vimeo Holiday Videos!\n                  type: string\n                password:\n                  description: The album's password. Required only if **privacy** is\n                    `password`.\n                  example: hunter1\n                  type: string\n                privacy:\n                  description: The privacy level of the album.\n                  enum:\n                    - anybody\n                    - embed_only\n                    - password\n                  type: string\n                review_mode:\n                  description: Whether album videos should use the review mode URL.\n                  example: \"true\"\n                  type: boolean\n                sort:\n                  description: The default sort order of the album's videos.\n                  enum:\n                    - added_first\n                    - added_last\n                    - alphabetical\n                    - arranged\n                    - comments\n                    - likes\n                    - newest\n                    - oldest\n                    - plays\n                  type: string\n                theme:\n                  description: The color theme of the album.\n                  enum:\n                    - dark\n                    - standard\n                  type: string\n              required:\n                - name\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: \"#/components/schemas/album\"\n          description: The album was created.\n        \"400\":\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: A parameter is invalid.\n        \"403\":\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The supplied token doesn't have the proper scopes, or the\n            authenticated user can't create an album.\n      security:\n        - oauth2:\n            - create\n      summary: Create an album\n      tags:\n        - Albums\\Essentials\n  \"/me/albums/{album_id}\":\n    delete:\n      operationId: delete_album_alt1\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n      responses:\n        \"204\":\n          description: The album was deleted.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The supplied token doesn't have the proper scopes, or the\n            authenticated user can't delete the album.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists.\n      security:\n        - oauth2:\n            - delete\n      summary: Delete an album\n      tags:\n        - Albums\\Essentials\n    get:\n      operationId: get_album_alt1\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: \"#/components/schemas/album\"\n          description: The album was returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists.\n      summary: Get a specific album\n      tags:\n        - Albums\\Essentials\n    patch:\n      operationId: edit_album_alt1\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.album+json:\n            schema:\n              properties:\n                brand_color:\n                  description: The hexadecimal code for the color of the player buttons.\n                  example: ff66ee\n                  type: string\n                description:\n                  description: The description of the album.\n                  example: Vimeo holiday videos!\n                  type: string\n                domain:\n                  description: The custom domain a user has selected for their album.\n                  example: mycustomdomain.com\n                  nullable: true\n                  type: string\n                hide_nav:\n                  description: Whether to hide Vimeo navigation when displaying the album.\n                  example: \"true\"\n                  type: boolean\n                layout:\n                  description: The type of layout for presenting the album.\n                  enum:\n                    - grid\n                    - player\n                  type: string\n                name:\n                  description: The name of the album.\n                  example: Vimeo Holiday Videos!\n                  type: string\n                password:\n                  description: The album's password. Required only if **privacy** is\n                    `password`.\n                  example: hunter1\n                  type: string\n                privacy:\n                  description: The privacy level of the album.\n                  enum:\n                    - anybody\n                    - embed_only\n                    - password\n                  type: string\n                review_mode:\n                  description: Whether album videos should use the review mode URL.\n                  example: \"true\"\n                  type: boolean\n                sort:\n                  description: The default sort order of the album's videos.\n                  enum:\n                    - added_first\n                    - added_last\n                    - alphabetical\n                    - arranged\n                    - comments\n                    - likes\n                    - newest\n                    - oldest\n                    - plays\n                  type: string\n                theme:\n                  description: The color theme of the album.\n                  enum:\n                    - dark\n                    - standard\n                  type: string\n                url:\n                  description: The custom Vimeo URL a user has selected for their album.\n                  example: my-custom-url\n                  nullable: true\n                  type: string\n                use_custom_domain:\n                  description: Whether the user has opted in to use a custom domain for\n                    their album.\n                  example: \"true\"\n                  type: boolean\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: \"#/components/schemas/album\"\n          description: The album was edited.\n        \"400\":\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: A parameter is invalid.\n        \"403\":\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user doesn't own the album, the supplied token\n            doesn't have the proper scopes, or the authenticated user can't edit\n            the album.\n        \"404\":\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Edit an album\n      tags:\n        - Albums\\Essentials\n  \"/me/albums/{album_id}/videos\":\n    get:\n      operationId: get_album_videos_alt1\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n        - description: The page containing the video URI.\n          in: query\n          name: containing_uri\n          required: false\n          schema:\n            example: /videos/258684937\n            type: string\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - embeddable\n            type: string\n        - description: Whether to filter the results by embeddable videos (`true`) or\n            non-embeddable videos (`false`). Required only if **filter** is\n            `embeddable`.\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            example: \"true\"\n            type: boolean\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The password of the album.\n          in: query\n          name: password\n          required: false\n          schema:\n            example: hunter1\n            type: string\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - default\n              - duration\n              - likes\n              - manual\n              - modified_time\n              - plays\n            type: string\n        - description: Whether to include private videos in the search. Please note that a\n            separate search service provides this functionality. The service\n            performs a partial text search on the video's name.\n          in: query\n          name: weak_search\n          required: false\n          schema:\n            example: \"false\"\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists.\n      summary: Get all the videos in an album\n      tags:\n        - Albums\\Album videos\n    put:\n      description: This method replaces all the existing videos in an album with one or\n        more videos.\n      operationId: replace_videos_in_album_alt1\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                videos:\n                  description: A comma-separated list of video URIs.\n                  example: /videos/258684937,/videos/273576296\n                  type: string\n              required:\n                - videos\n              type: object\n        required: true\n      responses:\n        \"201\":\n          description: The videos were added.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't add videos to albums.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Replace all the videos in an album\n      tags:\n        - Albums\\Album videos\n  \"/me/albums/{album_id}/videos/{video_id}\":\n    delete:\n      operationId: remove_video_from_album_alt1\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 196367152\n            type: number\n      responses:\n        \"204\":\n          description: The video was removed.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The supplied token doesn't have the proper scopes, or the\n            authenticated user can't edit the album.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Remove a video from an album\n      tags:\n        - Albums\\Album videos\n    get:\n      description: This method gets a single video from an album. You can use this method\n        to determine whether the album contains the specified video.\n      operationId: get_album_video_alt1\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 196367152\n            type: number\n        - description: The password of the album.\n          in: query\n          name: password\n          required: false\n          schema:\n            example: hunter1\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: The video was returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists, or the video wasn't found in it.\n      summary: Get a specific video in an album\n      tags:\n        - Albums\\Album videos\n    put:\n      operationId: add_video_to_album_alt1\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 196367152\n            type: number\n      responses:\n        \"204\":\n          description: The video was added.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The supplied token doesn't have the proper scopes, or the\n            authenticated user can't edit the album.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Add a specific video to an album\n      tags:\n        - Albums\\Album videos\n  \"/me/albums/{album_id}/videos/{video_id}/set_album_thumbnail\":\n    post:\n      operationId: set_video_as_album_thumbnail_alt1\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 196367152\n            type: number\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                time_code:\n                  description: The video frame time in seconds to use as the album\n                    thumbnail.\n                  example: 300\n                  type: number\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/album\"\n          description: The album was updated with a new thumbnail.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3429: The authenticated user can't edit the album.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 5000: No such album, or user, or video exists.\"\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 4016: Unexpected error while setting thumbnail.\"\n      security:\n        - oauth2:\n            - edit\n      summary: Set a video as the album thumbnail\n      tags:\n        - Albums\\Album videos\n  /me/appearances:\n    get:\n      operationId: get_appearances_alt1\n      parameters:\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - embeddable\n            type: string\n        - description: Whether to filter the results by embeddable videos (`true`) or\n            non-embeddable videos (`false`). Required only if **filter** is\n            `embeddable`.\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            example: \"true\"\n            type: boolean\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - duration\n              - likes\n              - plays\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n      summary: Get all the videos in which a user appears\n      tags:\n        - Videos\\Essentials\n  /me/categories:\n    get:\n      operationId: get_category_subscriptions_alt1\n      parameters:\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n              - name\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/category\"\n                type: array\n          description: The categories were returned.\n        \"403\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3200: You can't view another user.\"\n      security:\n        - oauth2:\n            - private\n      summary: Get all the categories that a user follows\n      tags:\n        - Categories\\Subscriptions\n  \"/me/categories/{category}\":\n    delete:\n      operationId: unsubscribe_from_category_alt1\n      parameters:\n        - description: The name of the category.\n          in: path\n          name: category\n          required: true\n          schema:\n            example: animation\n            type: string\n      responses:\n        \"204\":\n          description: The user was unsubscribed.\n      security:\n        - oauth2:\n            - interact\n      summary: Unsubscribe a user from a category\n      tags:\n        - Categories\\Subscriptions\n    get:\n      operationId: check_if_user_subscribed_to_category_alt1\n      parameters:\n        - description: The name of the category.\n          in: path\n          name: category\n          required: true\n          schema:\n            example: animation\n            type: string\n      responses:\n        \"204\":\n          description: The user is following the category.\n      security:\n        - oauth2:\n            - private\n      summary: Check if a user follows a category\n      tags:\n        - Categories\\Subscriptions\n    put:\n      operationId: subscribe_to_category_alt1\n      parameters:\n        - description: The name of the category.\n          in: path\n          name: category\n          required: true\n          schema:\n            example: 0\n            type: number\n      responses:\n        \"204\":\n          description: The user was subscribed.\n      security:\n        - oauth2:\n            - interact\n      summary: Subscribe a user to a single category\n      tags:\n        - Categories\\Subscriptions\n  /me/channels:\n    get:\n      operationId: get_channel_subscriptions_alt1\n      parameters:\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - moderated\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n              - followers\n              - videos\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/channel\"\n                type: array\n          description: The channels were returned.\n        \"304\":\n          description: No channel has been followed since the given `If-Modified-Since`\n            header.\n      summary: Get all the channels to which a user subscribes\n      tags:\n        - Channels\\Essentials\n  \"/me/channels/{channel_id}\":\n    delete:\n      operationId: unsubscribe_from_channel_alt1\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n      responses:\n        \"204\":\n          description: The user is no longer a follower of the channel.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists.\n      security:\n        - oauth2:\n            - interact\n      summary: Unsubscribe a user from a specific channel\n      tags:\n        - Channels\\Subscriptions and subscribers\n    get:\n      operationId: check_if_user_subscribed_to_channel_alt1\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n      responses:\n        \"204\":\n          description: The user follows the channel.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists.\n      summary: Check if a user follows a channel\n      tags:\n        - Channels\\Subscriptions and subscribers\n    put:\n      operationId: subscribe_to_channel_alt1\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n      responses:\n        \"204\":\n          description: The user is now a follower of the channel.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists.\n      security:\n        - oauth2:\n            - interact\n      summary: Subscribe a user to a specific channel\n      tags:\n        - Channels\\Subscriptions and subscribers\n  /me/customlogos:\n    get:\n      operationId: get_custom_logos_alt1\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/picture\"\n                type: array\n          description: The custom logos were returned.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: |-\n            * The user can't view this custom logo.\n            * The user can't view custom logos.\n      summary: Get all the custom logos that belong to a user\n      tags:\n        - Embed Presets\\Custom Logos\n    post:\n      operationId: create_custom_logo_alt1\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The custom logo was created.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: |-\n            * You can't upload pictures for another user's videos.\n            * The user can't add a custom logo.\n      security:\n        - oauth2:\n            - upload\n      summary: Add a custom logo\n      tags:\n        - Embed Presets\\Custom Logos\n  \"/me/customlogos/{logo_id}\":\n    get:\n      operationId: get_custom_logo_alt1\n      parameters:\n        - description: The ID of the custom logo.\n          in: path\n          name: logo_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The custom logo was returned.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The user can't view custom logos.\n      summary: Get a specific custom logo\n      tags:\n        - Embed Presets\\Custom Logos\n  /me/feed:\n    get:\n      operationId: get_feed_alt1\n      parameters:\n        - description: Necessary for proper pagination. You shouldn't provide this value\n            yourself, and instead use the pagination links in the feed response.\n            Please see our [pagination\n            documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter)\n            for more information.\n          in: query\n          name: offset\n          required: false\n          schema:\n            example: \"280\"\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The feed type.\n          in: query\n          name: type\n          required: false\n          schema:\n            enum:\n              - appears\n              - category_featured\n              - channel\n              - facebook_feed\n              - following\n              - group\n              - likes\n              - ondemand_publish\n              - share\n              - tagged_with\n              - twitter_timeline\n              - uploads\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.activity+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/activity-3-1\"\n                type: array\n          description: The videos were returned.\n      security:\n        - oauth2:\n            - private\n      summary: Get all videos in a user's feed\n      tags:\n        - Users\\Feed\n  /me/followers:\n    get:\n      operationId: get_followers_alt1\n      parameters:\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/user\"\n                type: array\n          description: The user's followers were returned.\n      summary: Get all the followers of a user\n      tags:\n        - Users\\Follows\n  /me/following:\n    get:\n      operationId: get_user_following_alt1\n      parameters:\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - online\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/user\"\n                type: array\n          description: The followed users were returned.\n      summary: Get all the users that a user is following\n      tags:\n        - Users\\Follows\n    post:\n      operationId: follow_users_alt1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                users:\n                  description: An array of user URIs for the list of users to follow.\n                  items:\n                    type: string\n                  type: array\n              required:\n                - users\n              type: object\n        required: true\n      responses:\n        \"204\":\n          description: The users were followed.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: |-\n            * Error code 2205: The request body is empty.\n            * Error code 2205: The `users` array is invalid.\n            * Error code 2205: The list of users doesn't contain URIs.\n            * Error code 2900: A user in the list doesn't exist.\n            * Error code 2901: The list contains more than 100 users.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8000: The user access token is invalid.\"\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3417: The current user can't follow other users.\"\n        \"429\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 9006: The current user is rate-limited from following\n            other users.\"\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 4005: An unexpected error occurred.\"\n      security:\n        - oauth2:\n            - interact\n      summary: Follow a list of users\n      tags:\n        - Users\\Follows\n  \"/me/following/{follow_user_id}\":\n    delete:\n      operationId: unfollow_user_alt1\n      parameters:\n        - description: The ID of the following user.\n          in: path\n          name: follow_user_id\n          required: true\n          schema:\n            example: 3766357\n            type: number\n      responses:\n        \"204\":\n          description: The user was unfollowed.\n      security:\n        - oauth2:\n            - interact\n      summary: Unfollow a user\n      tags:\n        - Users\\Follows\n    get:\n      operationId: check_if_user_is_following_alt1\n      parameters:\n        - description: The ID of the following user.\n          in: path\n          name: follow_user_id\n          required: true\n          schema:\n            example: 3766357\n            type: number\n      responses:\n        \"204\":\n          description: The authenticated user follows the user in question.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The user in question doesn't follow the authenticated user.\n      summary: Check if a user is following another user\n      tags:\n        - Users\\Follows\n    put:\n      operationId: follow_user_alt1\n      parameters:\n        - description: The ID of the following user.\n          in: path\n          name: follow_user_id\n          required: true\n          schema:\n            example: 3766357\n            type: number\n      responses:\n        \"204\":\n          description: The user was followed.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't add followers.\n      security:\n        - oauth2:\n            - interact\n      summary: Follow a specific user\n      tags:\n        - Users\\Follows\n  /me/groups:\n    get:\n      operationId: get_user_groups_alt1\n      parameters:\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - moderated\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n              - members\n              - videos\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.group+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/group\"\n                type: array\n          description: The groups were returned.\n      summary: Get all the groups that a user has joined\n      tags:\n        - Groups\\Users\n  \"/me/groups/{group_id}\":\n    delete:\n      operationId: leave_group_alt1\n      parameters:\n        - description: The ID of the group.\n          in: path\n          name: group_id\n          required: true\n          schema:\n            example: 1108\n            type: number\n      responses:\n        \"204\":\n          description: The user left the group.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user owns the group. To remove this user, first\n            apply a new group owner through PATCH.\n      security:\n        - oauth2:\n            - interact\n      summary: Remove a user from a group\n      tags:\n        - Groups\\Subscription\n    get:\n      operationId: check_if_user_joined_group_alt1\n      parameters:\n        - description: The ID of the group.\n          in: path\n          name: group_id\n          required: true\n          schema:\n            example: 1108\n            type: number\n      responses:\n        \"204\":\n          description: The user has joined the group.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: |-\n            * No such group exists.\n            * The authenticated user isn't a member of this group.\n      summary: Check if a user has joined a group\n      tags:\n        - Groups\\Users\n    put:\n      operationId: join_group_alt1\n      parameters:\n        - description: The ID of the group.\n          in: path\n          name: group_id\n          required: true\n          schema:\n            example: 1108\n            type: number\n      responses:\n        \"204\":\n          description: The user joined the group.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: \u003e-\n            * The authenticated user can't join groups.\n\n            * The group prohibits the authenticated user from joining, either because the group is not public or because the group's privacy setting is `members`.\n      security:\n        - oauth2:\n            - interact\n      summary: Add a user to a group\n      tags:\n        - Groups\\Subscription\n  /me/likes:\n    get:\n      operationId: get_likes_alt1\n      parameters:\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - embeddable\n            type: string\n        - description: Whether to filter the results by embeddable videos (`true`) or\n            non-embeddable videos (`false`). Required only if **filter** is\n            `embeddable`.\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            example: \"true\"\n            type: boolean\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - duration\n              - likes\n              - plays\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n      summary: Get all the videos that a user has liked\n      tags:\n        - Likes\\Essentials\n  \"/me/likes/{video_id}\":\n    delete:\n      operationId: unlike_video_alt1\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was unliked.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't like videos.\n      security:\n        - oauth2:\n            - interact\n      summary: Cause a user to unlike a video\n      tags:\n        - Likes\\Essentials\n    get:\n      operationId: check_if_user_liked_video_alt1\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The user has liked the video.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The user hasn't liked the video.\n      summary: Check if a user has liked a video\n      tags:\n        - Likes\\Essentials\n    put:\n      operationId: like_video_alt1\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was liked.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user owns the video.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't like videos.\n      security:\n        - oauth2:\n            - interact\n      summary: Cause a user to like a video\n      tags:\n        - Likes\\Essentials\n  /me/ondemand/pages:\n    get:\n      operationId: get_user_vods_alt1\n      parameters:\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The type of On Demand pages to return.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - film\n              - series\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - added\n              - alphabetical\n              - date\n              - modified_time\n              - name\n              - publish.time\n              - rating\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/on-demand-page\"\n                type: array\n          description: The On Demand pages were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such user exists.\n      summary: Get all the On Demand pages of a user\n      tags:\n        - On Demand\\Essentials\n    post:\n      operationId: create_vod_alt1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                accepted_currencies:\n                  description: |\n                    An array of accepted currencies.\n\n                    Option descriptions:\n                     * `AUD` - Australian Dollar\n                     * `CAD` - Canadian Dollar\n                     * `CHF` - Swiss Franc\n                     * `DKK` - Danish Krone\n                     * `EUR` - Euro\n                     * `GBP` - British Pound\n                     * `JPY` - Japanese Yen\n                     * `KRW` - South Korean Won\n                     * `NOK` - Norwegian Krone\n                     * `PLN` - Polish Zloty\n                     * `SEK` - Swedish Krona\n                     * `USD` - US Dollar\n                  enum:\n                    - AUD\n                    - CAD\n                    - CHF\n                    - DKK\n                    - EUR\n                    - GBP\n                    - JPY\n                    - KRW\n                    - NOK\n                    - PLN\n                    - SEK\n                    - USD\n                  type: string\n                buy:\n                  properties:\n                    active:\n                      description: Whether the Buy action is active. *Required if\n                        `rent.active` is false.\n                      example: \"true\"\n                      type: boolean\n                    download:\n                      description: Whether people who buy the video can download it. To use\n                        this field, `type` must be `film`.\n                      example: \"true\"\n                      type: boolean\n                    price:\n                      properties:\n                        AUD:\n                          description: The purchase price of this video in AUD.\n                          example: 2.99\n                          type: number\n                        CAD:\n                          description: The purchase price of this video in CAD.\n                          example: 2.99\n                          type: number\n                        CHF:\n                          description: The purchase price of this video in CHF.\n                          example: 2.99\n                          type: number\n                        DKK:\n                          description: The purchase price of this video in DKK.\n                          example: 2.99\n                          type: number\n                        EUR:\n                          description: The purchase price of this video in EUR.\n                          example: 2.99\n                          type: number\n                        GBP:\n                          description: The purchase price of this video in GBP.\n                          example: 2.99\n                          type: number\n                        JPY:\n                          description: The purchase price of this video in JPY.\n                          example: 2.99\n                          type: number\n                        KRW:\n                          description: The purchase price of this video in KRW.\n                          example: 2.99\n                          type: number\n                        NOK:\n                          description: The purchase price of this video in NOK.\n                          example: 2.99\n                          type: number\n                        PLN:\n                          description: The purchase price of this video in PLN.\n                          example: 2.99\n                          type: number\n                        SEK:\n                          description: The purchase price of this video in SEK.\n                          example: 2.99\n                          type: number\n                        USD:\n                          description: The purchase price of this video in USD when `type`\n                            is `film`, or the purchase price of the entire\n                            collection in USD when `type` is `series`.\n                          example: 2.99\n                          type: number\n                      type: object\n                  type: object\n                content_rating:\n                  description: One or more ratings, either as a comma-separated list or as\n                    a JSON array depending on the request format.\n                  enum:\n                    - drugs\n                    - language\n                    - nudity\n                    - safe\n                    - unrated\n                    - violence\n                  type: string\n                description:\n                  description: The description of the On Demand page.\n                  example: DARBY FOREVER follows the fantasies of Darby, a shopgirl at\n                    \"Bobbins \u0026 Notions\".\n                  type: string\n                domain_link:\n                  description: The custom domain of the On Demand page.\n                  example: https://example.com\n                  type: string\n                episodes:\n                  properties:\n                    buy:\n                      properties:\n                        active:\n                          description: Whether episodes can be bought.\n                          example: \"true\"\n                          type: boolean\n                        download:\n                          description: Whether people who buy the episode can download it.\n                            To use this field, `type` must be `series`.\n                          example: \"true\"\n                          type: boolean\n                        price:\n                          properties:\n                            USD:\n                              description: The purchase price per episode. *Required if\n                                `episodes.buy.active` is true.\n                              example: 1.99\n                              type: number\n                          type: object\n                      type: object\n                    rent:\n                      properties:\n                        active:\n                          description: Whether episodes can be rented\n                          example: \"true\"\n                          type: boolean\n                        period:\n                          description: The period in which this episode can be rented for.\n                          enum:\n                            - 1 week\n                            - 1 year\n                            - 24 hour\n                            - 3 month\n                            - 30 day\n                            - 48 hour\n                            - 6 month\n                            - 72 hour\n                          type: string\n                        price:\n                          properties:\n                            USD:\n                              description: The default price to rent an episode. This field\n                                is applicable only when `type` is `series`.\n                                *Required if `episodes.rent.active` is true.\n                              example: 0.99\n                              type: number\n                          type: object\n                      type: object\n                  type: object\n                link:\n                  description: The custom string to use in this On Demand page's Vimeo URL.\n                  example: darbyforever\n                  type: string\n                name:\n                  description: The name of the On Demand page.\n                  example: Darby Forever\n                  type: string\n                rent:\n                  properties:\n                    active:\n                      description: Whether the video can be rented. *Required if\n                        `buy.active` is false.\n                      example: \"true\"\n                      type: boolean\n                    period:\n                      description: The period in which this can be rented for.\n                      enum:\n                        - 1 week\n                        - 1 year\n                        - 24 hour\n                        - 3 month\n                        - 30 day\n                        - 48 hour\n                        - 6 month\n                        - 72 hour\n                      type: string\n                    price:\n                      properties:\n                        AUD:\n                          description: The rental price of this video in AUD.\n                          example: 0.99\n                          type: number\n                        CAD:\n                          description: The rental price of this video in CAD.\n                          example: 0.99\n                          type: number\n                        CHF:\n                          description: The rental price of this video in CHF.\n                          example: 0.99\n                          type: number\n                        DKK:\n                          description: The rental price of this video in DKK.\n                          example: 0.99\n                          type: number\n                        EUR:\n                          description: The rental price of this video in EUR.\n                          example: 0.99\n                          type: number\n                        GBP:\n                          description: The rental price of this video in GBP.\n                          example: 0.99\n                          type: number\n                        JPY:\n                          description: The rental price of this video in JPY.\n                          example: 0.99\n                          type: number\n                        KRW:\n                          description: The rental price of this video in KRW.\n                          example: 0.99\n                          type: number\n                        NOK:\n                          description: The rental price of this video in NOK.\n                          example: 0.99\n                          type: number\n                        PLN:\n                          description: The rental price of this video in PLN.\n                          example: 0.99\n                          type: number\n                        SEK:\n                          description: The rental price of this video in SEK.\n                          example: 0.99\n                          type: number\n                        USD:\n                          description: The rental price of this video in USD when `type` is\n                            `film`, or the rental price of the entire collection\n                            in USD when `type` is `series`.\n                          example: 0.99\n                          type: number\n                      type: object\n                  type: object\n                subscription:\n                  properties:\n                    monthly:\n                      properties:\n                        active:\n                          description: Whether monthly subscription is active. *Required if\n                            `rent.active` and `buy.active` are false.\n                          example: \"true\"\n                          type: boolean\n                        price:\n                          properties:\n                            USD:\n                              description: The monthly subscription price in USD. *Required\n                                if `subscription.active` is true.\n                              example: 9.99\n                              type: number\n                          type: object\n                      type: object\n                  type: object\n                type:\n                  description: The type of On Demand page.\n                  enum:\n                    - film\n                    - series\n                  type: string\n              required:\n                - content_rating\n                - description\n                - name\n                - type\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/on-demand-page\"\n          description: The On Demand page was created.\n      summary: Create an On Demand page\n      tags:\n        - On Demand\\Essentials\n  /me/ondemand/purchases:\n    get:\n      operationId: get_vod_purchases\n      parameters:\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: |\n            The type of On Demand videos to show.\n\n            Option descriptions:\n             * `important` - Will show all pages which are about to expire.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - all\n              - expiring_soon\n              - film\n              - important\n              - purchased\n              - rented\n              - series\n              - subscription\n              - unwatched\n              - watched\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - added\n              - alphabetical\n              - date\n              - name\n              - purchase_time\n              - rating\n              - release_date\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/on-demand-page\"\n                type: array\n          description: The purchases and rentals were returned.\n        \"403\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't view the purchases and rentals for\n            another user's account.\n      security:\n        - oauth2:\n            - purchased\n      summary: Get all the On Demand purchases and rentals that a user has made\n      tags:\n        - On Demand\\Purchases and Rentals\n  \"/me/ondemand/purchases/{ondemand_id}\":\n    get:\n      operationId: check_if_vod_was_purchased_alt1\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: \"#/components/schemas/on-demand-page\"\n          description: You have purchased the On Demand page.\n        \"403\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The requested user isn't the same as the authenticated user.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such user or On Demand page exists.\n      security:\n        - oauth2:\n            - purchased\n      summary: Check if a user has made a purchase or rental from an On Demand page\n      tags:\n        - On Demand\\Purchases and Rentals\n  /me/pictures:\n    get:\n      operationId: get_pictures_alt1\n      parameters:\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/picture\"\n                type: array\n          description: The pictures were returned.\n      summary: Get all the pictures that belong to a user\n      tags:\n        - Users\\Pictures\n    post:\n      operationId: create_picture_alt1\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The user picture was created.\n      security:\n        - oauth2:\n            - upload\n      summary: Add a user picture\n      tags:\n        - Users\\Pictures\n  \"/me/pictures/{portraitset_id}\":\n    delete:\n      operationId: delete_picture_alt1\n      parameters:\n        - description: The ID of the picture.\n          in: path\n          name: portraitset_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n      responses:\n        \"204\":\n          description: The picture was deleted.\n      security:\n        - oauth2:\n            - delete\n      summary: Delete a user picture\n      tags:\n        - Users\\Pictures\n    get:\n      operationId: get_picture_alt1\n      parameters:\n        - description: The ID of the picture.\n          in: path\n          name: portraitset_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The picture was returned.\n      summary: Get a specific user picture\n      tags:\n        - Users\\Pictures\n    patch:\n      operationId: edit_picture_alt1\n      parameters:\n        - description: The ID of the picture.\n          in: path\n          name: portraitset_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.picture+json:\n            schema:\n              properties:\n                active:\n                  description: Whether the picture is the user's active portrait.\n                  example: \"true\"\n                  type: boolean\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The picture was edited.\n      security:\n        - oauth2:\n            - edit\n      summary: Edit a user picture\n      tags:\n        - Users\\Pictures\n  /me/portfolios:\n    get:\n      operationId: get_portfolios_alt1\n      parameters:\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.portfolio+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/portfolio\"\n                type: array\n          description: The portfolios were returned.\n      summary: Get all the portfolios that belong to a user\n      tags:\n        - Portfolios\\Essentials\n  \"/me/portfolios/{portfolio_id}\":\n    get:\n      operationId: get_portfolio_alt1\n      parameters:\n        - description: The ID of the portfolio.\n          in: path\n          name: portfolio_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.portfolio+json:\n              schema:\n                $ref: \"#/components/schemas/portfolio\"\n          description: The portfolio was returned.\n      summary: Get a specific portfolio\n      tags:\n        - Portfolios\\Essentials\n  \"/me/portfolios/{portfolio_id}/videos\":\n    get:\n      operationId: get_portfolio_videos_alt1\n      parameters:\n        - description: The ID of the portfolio.\n          in: path\n          name: portfolio_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The page that contains the video URI.\n          in: query\n          name: containing_uri\n          required: false\n          schema:\n            example: /videos/258684937\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - embeddable\n            type: string\n        - description: Whether to filter the results by embeddable videos (`true`) or\n            non-embeddable videos (`false`). Required only if **filter** is\n            `embeddable`.\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            example: \"true\"\n            type: boolean\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: \u003e\n            The way to sort the results.\n\n\n            Option descriptions:\n             * `default` - This will sort to the default sort set on the portfolio.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - default\n              - likes\n              - manual\n              - plays\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n      summary: Get all the videos in a portfolio\n      tags:\n        - Portfolios\\Videos\n  \"/me/portfolios/{portfolio_id}/videos/{video_id}\":\n    delete:\n      operationId: delete_video_from_portfolio_alt1\n      parameters:\n        - description: The ID of the portfolio.\n          in: path\n          name: portfolio_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was deleted.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The portfolio wasn't found, or the video wasn't found.\n      security:\n        - oauth2:\n            - edit\n      summary: Remove a video from a portfolio\n      tags:\n        - Portfolios\\Videos\n    get:\n      operationId: get_portfolio_video_alt1\n      parameters:\n        - description: The ID of the portfolio.\n          in: path\n          name: portfolio_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: The video was returned.\n      summary: Get a specific video in a portfolio\n      tags:\n        - Portfolios\\Videos\n    put:\n      operationId: add_video_to_portfolio_alt1\n      parameters:\n        - description: The ID of the portfolio.\n          in: path\n          name: portfolio_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was added.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The portfolio wasn't found, or the video wasn't found.\n      security:\n        - oauth2:\n            - edit\n      summary: Add a video to a portfolio\n      tags:\n        - Portfolios\\Videos\n  /me/presets:\n    get:\n      operationId: get_embed_presets_alt1\n      parameters:\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.preset+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/presets\"\n                type: array\n          description: The embed presets were returned.\n      summary: Get all the embed presets that a user has created\n      tags:\n        - Embed Presets\\Essentials\n  \"/me/presets/{preset_id}\":\n    get:\n      operationId: get_embed_preset_alt1\n      parameters:\n        - description: The ID of the preset.\n          in: path\n          name: preset_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.preset+json:\n              schema:\n                $ref: \"#/components/schemas/presets\"\n          description: The embed preset was returned.\n      summary: Get a specific embed preset\n      tags:\n        - Embed Presets\\Essentials\n    patch:\n      operationId: edit_embed_preset_alt1\n      parameters:\n        - description: The ID of the preset.\n          in: path\n          name: preset_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.preset+json:\n            schema:\n              properties:\n                outro:\n                  description: Disable the outro.\n                  enum:\n                    - nothing\n                  type: string\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.preset+json:\n              schema:\n                $ref: \"#/components/schemas/presets\"\n          description: The embed preset was edited.\n        \"400\":\n          content:\n            application/vnd.vimeo.preset+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The outro type is invalid.\n        \"404\":\n          content:\n            application/vnd.vimeo.preset+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: |-\n            * The preset doesn't exist.\n            * The authenticated user doesn't own the preset.\n      summary: Edit an embed preset\n      tags:\n        - Embed Presets\\Essentials\n  \"/me/presets/{preset_id}/videos\":\n    get:\n      operationId: get_embed_preset_videos_alt1\n      parameters:\n        - description: The ID of the preset.\n          in: path\n          name: preset_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n      summary: Get all the videos that have been added to an embed preset\n      tags:\n        - Embed Presets\\Videos\n  /me/projects:\n    get:\n      description: This method gets all the projects that belong to the specified user.\n      operationId: get_projects_alt1\n      parameters:\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - date\n              - default\n              - modified_time\n              - name\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/project\"\n                type: array\n          description: The projects were returned.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8000: The user credentials are invalid.\"\n      security:\n        - oauth2:\n            - private\n      summary: Get all the projects that belong to a user\n      tags:\n        - Projects\\Essentials\n    post:\n      description: This method creates a new project for the specified user.\n      operationId: create_project_alt1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  description: The name of the project.\n                  example: Rough cuts\n                  type: string\n              required:\n                - name\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/project\"\n          description: The project was created.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: |-\n            * Error code 2205: The input is empty.\n            * Error code 2204: The input is invalid.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8000: The user credentials are invalid.\"\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3200: The authenticated user can't create projects.\"\n      security:\n        - oauth2:\n            - create\n      summary: Create a project\n      tags:\n        - Projects\\Essentials\n  \"/me/projects/{project_id}\":\n    delete:\n      description: This method deletes a project and optionally also the videos that it\n        contains.\n      operationId: delete_project_alt1\n      parameters:\n        - description: The ID of the project.\n          in: path\n          name: project_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: Whether to delete all the videos in the project along with the\n            project itself.\n          in: query\n          name: should_delete_clips\n          required: false\n          schema:\n            example: \"true\"\n            type: boolean\n      responses:\n        \"204\":\n          description: The project was deleted.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8000: The user credentials are invalid.\"\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3200: The authenticated user can't delete the project.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 5000: No such project exists.\"\n      security:\n        - oauth2:\n            - delete\n      summary: Delete a project\n      tags:\n        - Projects\\Essentials\n    get:\n      description: This method gets a single project that belongs to the specified user.\n      operationId: get_project_alt1\n      parameters:\n        - description: The ID of the project.\n          in: path\n          name: project_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/project\"\n          description: The project was returned.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8000: The user credentials are invalid.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 5000: No such project exists.\"\n      security:\n        - oauth2:\n            - private\n      summary: Get a specific project\n      tags:\n        - Projects\\Essentials\n    patch:\n      description: This method edits an existing project.\n      operationId: edit_project_alt1\n      parameters:\n        - description: The ID of the project.\n          in: path\n          name: project_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  description: The name of the project.\n                  example: Rough cuts\n                  type: string\n              required:\n                - name\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/project\"\n          description: The project was edited.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: |-\n            * Error code 2204: The input is invalid.\n            * Error code 2205: The input is empty.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8000: The user credentials are invalid.\"\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3200: The authenticated user can't edit the project.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 5000: No such project exists.\"\n      security:\n        - oauth2:\n            - edit\n      summary: Edit a project\n      tags:\n        - Projects\\Essentials\n  \"/me/projects/{project_id}/videos\":\n    delete:\n      description: This method removed multiple videos from the specified project.\n      operationId: remove_videos_from_project_alt1\n      parameters:\n        - description: The ID of the project.\n          in: path\n          name: project_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: Whether to delete the videos when removing them from the project.\n          in: query\n          name: should_delete_clips\n          required: false\n          schema:\n            example: \"false\"\n            type: boolean\n        - description: A comma-separated list of the video URIs to remove.\n          in: query\n          name: uris\n          required: true\n          schema:\n            example: /videos/258684937,/videos/273576296\n            type: string\n      responses:\n        \"204\":\n          description: The videos were removed.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 2204: The input is invalid.\"\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8000: The user credentials are invalid.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 5000: No such project exists.\"\n      security:\n        - oauth2:\n            - interact\n      summary: Remove a list of videos from a project\n      tags:\n        - Projects\\Videos\n    get:\n      description: This method gets all the videos that belong to the specified project.\n      operationId: get_project_videos_alt1\n      parameters:\n        - description: The ID of the project.\n          in: path\n          name: project_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n              - default\n              - duration\n              - last_user_action_event_date\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8000: The user credentials are invalid.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 5000: No such project exists.\"\n      security:\n        - oauth2:\n            - private\n      summary: Get all the videos in a project\n      tags:\n        - Projects\\Videos\n    put:\n      description: This method adds multiple videos to the specified project.\n      operationId: add_videos_to_project_alt1\n      parameters:\n        - description: The ID of the project.\n          in: path\n          name: project_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: A comma-separated list of video URIs to add.\n          in: query\n          name: uris\n          required: true\n          schema:\n            example: /videos/258684937,/videos/273576296\n            type: string\n      responses:\n        \"204\":\n          description: The videos were added.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 2204: The input is invalid.\"\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8000: The user credentials are invalid.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 5000: No such project or video exists.\"\n      security:\n        - oauth2:\n            - interact\n      summary: Add a list of videos to a project\n      tags:\n        - Projects\\Videos\n  \"/me/projects/{project_id}/videos/{video_id}\":\n    delete:\n      description: This method removes a single video from the specified project.\n      operationId: remove_video_from_project_alt1\n      parameters:\n        - description: The ID of the project.\n          in: path\n          name: project_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was removed.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 2204: The input is invalid.\"\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8000: The user credentials are invalid.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 5000: No such video exists in the project.\"\n      security:\n        - oauth2:\n            - delete\n      summary: Remove a specific video from a project\n      tags:\n        - Projects\\Videos\n    put:\n      description: This method adds a single video to the specified project.\n      operationId: add_video_to_project_alt1\n      parameters:\n        - description: The ID of the project.\n          in: path\n          name: project_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was added.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 5000: No such user, project, or video exists.\"\n      security:\n        - oauth2:\n            - interact\n      summary: Add a specific video to a project\n      tags:\n        - Projects\\Videos\n  /me/videos:\n    get:\n      operationId: get_videos_alt1\n      parameters:\n        - description: The page that contains the video URI. Only available when not paired\n            with `query`.\n          in: query\n          name: containing_uri\n          required: false\n          schema:\n            example: /videos/258684937\n            type: string\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - app_only\n              - embeddable\n              - featured\n              - playable\n            type: string\n        - description: Whether to filter the results by embeddable videos (`true`) or\n            non-embeddable videos (`false`). Required only if **filter** is\n            `embeddable`.\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            example: \"true\"\n            type: boolean\n        - description: Whether to filter by all playable videos or by all videos that are\n            not  playable.\n          in: query\n          name: filter_playable\n          required: false\n          schema:\n            example: \"true\"\n            type: boolean\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - default\n              - duration\n              - last_user_action_event_date\n              - likes\n              - modified_time\n              - plays\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n        \"304\":\n          description: This user hasn't created any videos since the given\n            `If-Modified-Since` header.\n      summary: Get all the videos that a user has uploaded\n      tags:\n        - Videos\\Essentials\n    post:\n      description: Begin the video upload process. For more information, see our [upload\n        documentation](https://developer.vimeo.com/api/upload/videos).\n      operationId: upload_video_alt1\n      requestBody:\n        content:\n          application/vnd.vimeo.video+json:\n            schema:\n              properties:\n                content_rating:\n                  description: A list of values describing the content in this video. Find\n                    the full list in the\n                    [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings)\n                    endpoint.\n                  items:\n                    type: string\n                  type: array\n                description:\n                  description: The description of the video.\n                  example: A celebration of 10 years of Staff Picks.\n                  type: string\n                embed:\n                  properties:\n                    buttons:\n                      properties:\n                        embed:\n                          description: Show or hide the Embed button.\n                          example: \"true\"\n                          type: boolean\n                        fullscreen:\n                          description: Show or hide the Fullscreen button.\n                          example: \"true\"\n                          type: boolean\n                        hd:\n                          description: Show or hide the HD button.\n                          example: \"true\"\n                          type: boolean\n                        like:\n                          description: Show or hide the Like button.\n                          example: \"true\"\n                          type: boolean\n                        scaling:\n                          description: Show or hide the Scaling button (shown only in\n                            Fullscreen mode).\n                          example: \"true\"\n                          type: boolean\n                        share:\n                          description: Show or hide the Share button.\n                          example: \"true\"\n                          type: boolean\n                        watchlater:\n                          description: Show or hide the Watch Later button.\n                          example: \"true\"\n                          type: boolean\n                      type: object\n                    color:\n                      description: The main color of the embed player.\n                      example: \"#1ab7ea\"\n                      type: string\n                    logos:\n                      properties:\n                        custom:\n                          properties:\n                            active:\n                              description: Show or hide your custom logo.\n                              example: \"true\"\n                              type: boolean\n                            link:\n                              description: The URL that loads when the user clicks your\n                                custom logo.\n                              example: https://example.com\n                              type: string\n                            sticky:\n                              description: Whether always to show the custom logo or to\n                                hide it after time with the rest of the UI.\n                              example: \"true\"\n                              type: boolean\n                          type: object\n                        vimeo:\n                          description: Show or hide the Vimeo logo.\n                          example: \"true\"\n                          type: boolean\n                      type: object\n                    playbar:\n                      description: Show or hide the playbar.\n                      example: \"true\"\n                      type: boolean\n                    title:\n                      properties:\n                        name:\n                          description: Show or hide the video title, or enable the user to\n                            determine whether the video title appears.\n                          enum:\n                            - hide\n                            - show\n                            - user\n                          type: string\n                        owner:\n                          description: Show or hide the owner information, or enable the\n                            user to determine whether the owner information\n                            appears.\n                          enum:\n                            - hide\n                            - show\n                            - user\n                          type: string\n                        portrait:\n                          description: Show or hide the owner portrait, or enable the user\n                            to determine whether the owner portrait appears.\n                          enum:\n                            - hide\n                            - show\n                            - user\n                          type: string\n                      type: object\n                    volume:\n                      description: Show or hide the volume selector.\n                      example: \"true\"\n                      type: boolean\n                  type: object\n                license:\n                  description: The Creative Commons license.\n                  enum:\n                    - by\n                    - by-nc\n                    - by-nc-nd\n                    - by-nc-sa\n                    - by-nd\n                    - by-sa\n                    - cc0\n                  type: string\n                locale:\n                  description: The video's default language. For a full list of valid\n                    languages, use the\n                    [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages)\n                    endpoint.\n                  example: en_US\n                  type: string\n                name:\n                  description: The title of the video.\n                  example: Celebrating 10 Years of Staff Picks\n                  type: string\n                password:\n                  description: The password. When you set `privacy.view` to `password`, you\n                    must provide the password as an additional parameter.\n                  example: hunter1\n                  type: string\n                privacy:\n                  properties:\n                    add:\n                      description: Whether a user can add the video to an album, channel,\n                        or group.\n                      example: \"true\"\n                      type: boolean\n                    comments:\n                      description: The privacy level required to comment on the video.\n                      enum:\n                        - anybody\n                        - contacts\n                        - nobody\n                      type: string\n                    download:\n                      description: Whether a user can download the video. Not available to\n                        users with a Basic membership\n                      example: \"true\"\n                      type: boolean\n                    embed:\n                      description: The video's embed settings. The `whitelist` value\n                        enables you to define all valid embed domains. See our\n                        [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains)\n                        for details on adding and removing domains.\n                      enum:\n                        - private\n                        - public\n                        - whitelist\n                      type: string\n                    view:\n                      description: The video's privacy setting. When privacy is `users`,\n                        `application/json` is the only valid content type. Basic\n                        users can't set privacy to `unlisted`.\n                      enum:\n                        - anybody\n                        - contacts\n                        - disable\n                        - nobody\n                        - password\n                        - unlisted\n                        - users\n                      type: string\n                  type: object\n                ratings:\n                  properties:\n                    mpaa:\n                      properties:\n                        reason:\n                          description: |\n                            The reason for the video's MPAA rating.\n\n                            Option descriptions:\n                             * `at` - Adult themes\n                             * `bn` - Brief nudity\n                             * `n` - Nudity\n                             * `sl` - Strong language\n                             * `ss` - Sexual situations\n                             * `v` - Violence\n                          enum:\n                            - at\n                            - bn\n                            - n\n                            - sl\n                            - ss\n                            - v\n                          type: string\n                      type: object\n                    tv:\n                      properties:\n                        reason:\n                          description: |\n                            The reason for the video's TV rating.\n\n                            Option descriptions:\n                             * `d` - Suggestive dialogue\n                             * `fv` - Fantasy violence\n                             * `l` - Language\n                             * `ss` - Sexual situations\n                             * `v` - Violence\n                          enum:\n                            - d\n                            - fv\n                            - l\n                            - ss\n                            - v\n                          type: string\n                      type: object\n                  type: object\n                review_page:\n                  properties:\n                    active:\n                      description: Enable or disable video review.\n                      example: \"true\"\n                      type: boolean\n                  type: object\n                spatial:\n                  properties:\n                    director_timeline:\n                      description: The 360 director timeline.\n                      items:\n                        properties:\n                          pitch:\n                            description: The timeline pitch. This value must be between -90\n                              and 90.\n                            example: 70\n                            type: number\n                          roll:\n                            description: The timeline roll.\n                            type: number\n                          time_code:\n                            description: The 360 director timeline time code.\n                            example: 5\n                            type: number\n                          yaw:\n                            description: The timeline yaw. This value must be between 0 and\n                              360.\n                            example: 125\n                            type: number\n                        required:\n                          - pitch\n                          - time_code\n                          - yaw\n                        type: object\n                      type: array\n                    field_of_view:\n                      description: \"The 360 field of view: default 50, minimum 30, maximum\n                        90.\"\n                      example: 50\n                      type: number\n                    projection:\n                      description: The 360 spatial projection.\n                      enum:\n                        - cubical\n                        - cylindrical\n                        - dome\n                        - equirectangular\n                        - pyramid\n                      type: string\n                    stereo_format:\n                      description: The 360 spatial stereo format.\n                      enum:\n                        - left-right\n                        - mono\n                        - top-bottom\n                      type: string\n                  type: object\n                upload:\n                  properties:\n                    approach:\n                      description: The upload approach.\n                      enum:\n                        - post\n                        - pull\n                        - streaming\n                        - tus\n                      type: string\n                    link:\n                      description: The public URL at which the video is hosted. The URL\n                        must be valid for at least 24 hours. Use this parameter\n                        when `approach` is `pull`.\n                      example: https://example.com/video.mp4\n                      type: string\n                    redirect_url:\n                      description: The app's redirect URL. Use this parameter when\n                        `approach` is `post`.\n                      example: https://example.com\n                      type: string\n                    size:\n                      description: The size in bytes of the video to upload.\n                      example: \"13623861\"\n                      type: string\n                  required:\n                    - approach\n                  type: object\n              required:\n                - upload\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: The upload procedure has begun.\n        \"400\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \u003e-\n            * Error code 2205: The body of the request isn't formatted properly.\n\n            * Error code 2204: The request contains invalid parameters.\n\n            * Error code 2204: The request contains invalid body parameters.\n\n            * Error code 2230: The upload type is invalid.\n\n            * Error code 3116: If a `type` payload parameter was supplied instead of `upload.approach`.\n        \"401\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8002: No user is associated with the authentication\n            token.\"\n        \"403\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: |-\n            * Error code 4102: The user's allotted quota has been reached.\n            * Error code 4101: The user's maximum disk space has been reached.\n        \"500\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 4003: There is a problem initiating the upload.\"\n      summary: Upload a video\n      tags:\n        - Videos\\Upload\n  \"/me/videos/{video_id}\":\n    get:\n      operationId: check_if_user_owns_video_alt1\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: The user owns the video.\n        \"404\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user doesn't own the video.\n      summary: Check if a user owns a video\n      tags:\n        - Videos\\Essentials\n  /me/watched/videos:\n    delete:\n      operationId: delete_watch_history\n      responses:\n        \"204\":\n          description: The watch history was deleted.\n      security:\n        - oauth2:\n            - delete\n      summary: Delete a user's watch history\n      tags:\n        - Users\\Watch History\n    get:\n      operationId: get_watch_history\n      parameters:\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n        \"403\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The user can't view another user's watch history.\n      security:\n        - oauth2:\n            - private\n      summary: Get all the videos that a user has watched\n      tags:\n        - Users\\Watch History\n  \"/me/watched/videos/{video_id}\":\n    delete:\n      operationId: delete_from_watch_history\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was deleted from your watch history.\n      security:\n        - oauth2:\n            - delete\n      summary: Delete a specific video from a user's watch history\n      tags:\n        - Users\\Watch History\n  /me/watchlater:\n    get:\n      operationId: get_watch_later_queue_alt1\n      parameters:\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - embeddable\n            type: string\n        - description: Whether to filter the results by embeddable videos (`true`) or\n            non-embeddable videos (`false`). Required only if **filter** is\n            `embeddable`.\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            example: \"true\"\n            type: boolean\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - duration\n              - likes\n              - plays\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n        \"304\":\n          description: The user hasn't added any videos to their Watch Later queue since\n            the given `If-Modified-Since` header.\n      security:\n        - oauth2:\n            - private\n      summary: Get all the videos in a user's Watch Later queue\n      tags:\n        - Watch Later Queue\\Essentials\n  \"/me/watchlater/{video_id}\":\n    delete:\n      operationId: delete_video_from_watch_later_alt1\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was deleted.\n      security:\n        - oauth2:\n            - interact\n      summary: Remove a video from a user's Watch Later queue\n      tags:\n        - Watch Later Queue\\Essentials\n    get:\n      operationId: check_watch_later_queue_alt1\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: The video appears in the user's Watch Later queue.\n        \"404\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The video doesn't appear in the user's Watch Later queue.\n      security:\n        - oauth2:\n            - private\n      summary: Check if a user has added a specific video to their Watch Later queue\n      tags:\n        - Watch Later Queue\\Essentials\n    put:\n      operationId: add_video_to_watch_later_alt1\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was added.\n      security:\n        - oauth2:\n            - interact\n      summary: Add a video to a user's Watch Later queue\n      tags:\n        - Watch Later Queue\\Essentials\n  /oauth/access_token:\n    post:\n      operationId: exchange_auth_code\n      requestBody:\n        content:\n          application/vnd.vimeo.auth+json:\n            schema:\n              properties:\n                code:\n                  description: The authorization code received from the authorization\n                    server.\n                  example: 1234abcd\n                  type: string\n                grant_type:\n                  description: The grant type. Must be set to `authorization_code`.\n                  enum:\n                    - authorization_code\n                  type: string\n                redirect_uri:\n                  description: The redirect URI. Must match the URI from `/oauth/authorize`.\n                  example: https://example.com\n                  type: string\n              required:\n                - code\n                - grant_type\n                - redirect_uri\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.auth+json:\n              schema:\n                $ref: \"#/components/schemas/auth\"\n          description: The authorization code was exchanged.\n        \"400\":\n          content:\n            application/vnd.vimeo.auth+json:\n              schema:\n                $ref: \"#/components/schemas/auth-error\"\n          description: \u003e-\n            * The grant type is invalid.\n\n            * The authorization code is invalid.\n\n            * The redirect URI doesn't match the URI to create the authorization code.\n      summary: Exchange an authorization code for an access token\n      tags:\n        - Authentication Extras\\Essentials\n  /oauth/authorize/client:\n    post:\n      description: \u003e-\n        For information on utilizing OAuth client authorization, see our\n\n        [authentication](/api/authentication#generate-unauthenticated-tokens) documentation or the\n\n        [Client Credentials Grant](https://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-4.4) section of the\n\n        [OAuth spec](https://tools.ietf.org/html/draft-ietf-oauth-v2-31.\n      operationId: client_auth\n      requestBody:\n        content:\n          application/vnd.vimeo.auth+json:\n            schema:\n              properties:\n                grant_type:\n                  description: The grant type. Must be set to `client_credentials`.\n                  enum:\n                    - client_credentials\n                  type: string\n                scope:\n                  description: A space-separated list of the authentication\n                    [scopes](https://developer.vimeo.com/api/authentication#supported-scopes)\n                    that you want to access. The default is `public`.\n                  example: public\n                  type: string\n              required:\n                - grant_type\n                - scope\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.auth+json:\n              schema:\n                $ref: \"#/components/schemas/auth\"\n          description: The authorization was successful.\n        \"401\":\n          content:\n            application/vnd.vimeo.auth+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8001: No such client secret exists.\"\n      summary: Authorize a client with OAuth\n      tags:\n        - Authentication Extras\\Essentials\n  /oauth/authorize/vimeo_oauth1:\n    post:\n      operationId: convert_access_token\n      requestBody:\n        content:\n          application/vnd.vimeo.auth+json:\n            schema:\n              properties:\n                grant_type:\n                  description: The grant type. Must be set to `vimeo_oauth1`.\n                  enum:\n                    - vimeo_oauth1\n                  type: string\n                token:\n                  description: The OAuth 1 token.\n                  example: 58037c0078d5f54e15e638cc0dd882a570b13c50\n                  type: string\n                token_secret:\n                  description: The OAuth 1 token secret.\n                  example: NTgwMzdjMDA3OGQ1ZjU0ZTE1ZTYzOGNjMGRkODgyYTU3MGIxM2M1MA==\n                  type: string\n              required:\n                - grant_type\n                - token\n                - token_secret\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.auth+json:\n              schema:\n                $ref: \"#/components/schemas/auth\"\n          description: The tokens were converted.\n        \"400\":\n          content:\n            application/vnd.vimeo.auth+json:\n              schema:\n                $ref: \"#/components/schemas/auth-error\"\n          description: |-\n            * The token is invalid.\n            * The token has unauthorized scopes.\n      summary: Convert OAuth 1 access tokens to OAuth 2 access tokens\n      tags:\n        - Authentication Extras\\Essentials\n  /oauth/verify:\n    get:\n      operationId: verify_token\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.auth+json:\n              schema:\n                $ref: \"#/components/schemas/auth\"\n          description: The token was verified.\n        \"401\":\n          content:\n            application/vnd.vimeo.auth+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The token isn't a valid OAuth 2 token.\n      summary: Verify an OAuth 2 token\n      tags:\n        - Authentication Extras\\Essentials\n  /ondemand/genres:\n    get:\n      operationId: get_vod_genres\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/on-demand-genre\"\n                type: array\n          description: The On Demand genres were returned.\n      summary: Get all On Demand genres\n      tags:\n        - On Demand\\Genres\n  \"/ondemand/genres/{genre_id}\":\n    get:\n      operationId: get_vod_genre\n      parameters:\n        - description: The ID of the genre.\n          in: path\n          name: genre_id\n          required: true\n          schema:\n            example: animation\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: \"#/components/schemas/on-demand-genre\"\n          description: The On Demand genre was returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand genre exists.\n      summary: Get a specific On Demand genre\n      tags:\n        - On Demand\\Genres\n  \"/ondemand/genres/{genre_id}/pages\":\n    get:\n      operationId: get_genre_vods\n      parameters:\n        - description: The ID of the genre.\n          in: path\n          name: genre_id\n          required: true\n          schema:\n            example: animation\n            type: string\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - country\n              - my_region\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n              - name\n              - publish.time\n              - videos\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/on-demand-page\"\n                type: array\n          description: The On Demand pages were returned.\n      summary: Get all the On Demand pages in a genre\n      tags:\n        - On Demand\\Genres\n  \"/ondemand/genres/{genre_id}/pages/{ondemand_id}\":\n    get:\n      description: Check whether a genre contains an On Demand page.\n      operationId: get_genre_vod\n      parameters:\n        - description: The ID of the genre.\n          in: path\n          name: genre_id\n          required: true\n          schema:\n            example: animation\n            type: string\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: \"#/components/schemas/on-demand-page\"\n          description: The On Demand page belongs to the genre.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page or genre exists.\n      summary: Get a specific On Demand page in a genre\n      tags:\n        - On Demand\\Genres\n  \"/ondemand/pages/{ondemand_id}\":\n    delete:\n      operationId: delete_vod_draft\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      responses:\n        \"204\":\n          description: The page draft was deleted.\n        \"403\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't modify an On Demand page that you don't own.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page exists.\n      security:\n        - oauth2:\n            - delete\n      summary: Delete a draft of an On Demand page\n      tags:\n        - On Demand\\Essentials\n    get:\n      operationId: get_vod\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: \"#/components/schemas/on-demand-page\"\n          description: The On Demand page was returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page exists.\n      summary: Get a specific On Demand page\n      tags:\n        - On Demand\\Essentials\n    patch:\n      description: Enable preorders or publish the page.\n      operationId: edit_vod\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.ondemand.page+json:\n            schema:\n              properties:\n                link:\n                  description: The custom string to use in this On Demand page's Vimeo URL.\n                  example: darbyforever\n                  type: string\n                preorder:\n                  properties:\n                    active:\n                      description: If set to true, you will enable pre-orders on the On\n                        Demand page.\n                      example: \"true\"\n                      type: boolean\n                    publish_time:\n                      description: The time that the On Demand page will be published.\n                        *Required if `preorder.active` is `true`.\n                      example: 2017-05-16T15:05:43+00:00\n                      type: string\n                  type: object\n                publish:\n                  properties:\n                    active:\n                      description: Whether to publish the On Demand page.\n                      example: \"true\"\n                      type: boolean\n                  type: object\n                publish_when_ready:\n                  description: Whether to publish the On Demand page automatically after\n                    all videos are finished transcoding.\n                  example: \"true\"\n                  type: boolean\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: \"#/components/schemas/on-demand-page\"\n          description: The On Demand page was edited.\n        \"403\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't edit the On Demand page.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Edit an On Demand page\n      tags:\n        - On Demand\\Essentials\n  \"/ondemand/pages/{ondemand_id}/backgrounds\":\n    get:\n      operationId: get_vod_backgrounds\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/picture\"\n                type: array\n          description: The background images were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page exists.\n      summary: Get all the backgrounds of an On Demand page\n      tags:\n        - On Demand\\Backgrounds\n    post:\n      operationId: create_vod_background\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The background was created.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't modify an On Demand page that you don't own.\n        \"404\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page exists.\n      security:\n        - oauth2:\n            - upload\n      summary: Add a background to an On Demand page\n      tags:\n        - On Demand\\Backgrounds\n  \"/ondemand/pages/{ondemand_id}/backgrounds/{background_id}\":\n    delete:\n      operationId: delete_vod_background\n      parameters:\n        - description: The ID of the background.\n          in: path\n          name: background_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      responses:\n        \"204\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The background image was deleted.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: If you are attempting to modify an On Demand page you don't own.\n        \"404\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page or background image exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Remove a background from an On Demand page\n      tags:\n        - On Demand\\Backgrounds\n    get:\n      operationId: get_vod_background\n      parameters:\n        - description: The ID of the background.\n          in: path\n          name: background_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The background image was returned.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't view another user's On Demand page background.\n        \"404\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page or background image exists.\n      summary: Get a specific background of an On Demand page\n      tags:\n        - On Demand\\Backgrounds\n    patch:\n      operationId: edit_vod_background\n      parameters:\n        - description: The ID of the background.\n          in: path\n          name: background_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.picture+json:\n            schema:\n              properties:\n                active:\n                  description: Whether to make this background the active background.\n                  example: \"true\"\n                  type: boolean\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The background was edited.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't modify an On Demand page that you don't own.\n        \"404\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page or background image exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Edit a background of an On Demand page\n      tags:\n        - On Demand\\Backgrounds\n  \"/ondemand/pages/{ondemand_id}/genres\":\n    get:\n      operationId: get_vod_genres_by_ondemand_id\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/on-demand-genre\"\n                type: array\n          description: The genres were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page exists.\n      summary: Get all the genres of an On Demand page\n      tags:\n        - On Demand\\Genres\n  \"/ondemand/pages/{ondemand_id}/genres/{genre_id}\":\n    delete:\n      operationId: delete_vod_genre\n      parameters:\n        - description: The ID of the genre.\n          in: path\n          name: genre_id\n          required: true\n          schema:\n            example: animation\n            type: string\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      responses:\n        \"204\":\n          description: The On Demand genre was deleted.\n        \"400\":\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The On Demand page must belong to at least one genre.\n        \"403\":\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't modify an On Demand page that you don't own.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page or genre exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Remove a genre from an On Demand page\n      tags:\n        - On Demand\\Genres\n    get:\n      operationId: get_vod_genre_by_ondemand_id\n      parameters:\n        - description: The ID of the genre.\n          in: path\n          name: genre_id\n          required: true\n          schema:\n            example: animation\n            type: string\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: \"#/components/schemas/on-demand-genre\"\n          description: The On Demand page's genre was returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page or genre exists.\n      summary: Check whether an On Demand page belongs to a genre\n      tags:\n        - On Demand\\Genres\n    put:\n      operationId: add_vod_genre\n      parameters:\n        - description: The ID of the genre.\n          in: path\n          name: genre_id\n          required: true\n          schema:\n            example: animation\n            type: string\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: \"#/components/schemas/on-demand-genre\"\n          description: The genre was added.\n        \"400\":\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't add more than two genres to an On Demand page.\n        \"403\":\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't modify an On Demand page that you don't own.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page or genre exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Add a genre to an On Demand page\n      tags:\n        - On Demand\\Genres\n  \"/ondemand/pages/{ondemand_id}/likes\":\n    get:\n      description: This method gets all the users who have liked a particular video on an\n        On Demand page.\n      operationId: get_vod_likes\n      parameters:\n        - description: The ID of the On Demand page.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - extra\n              - main\n              - trailer\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/user\"\n                type: array\n          description: The users were returned.\n      summary: Get all the users who have liked a video on an On Demand page\n      tags:\n        - Likes\\Essentials\n  \"/ondemand/pages/{ondemand_id}/pictures\":\n    get:\n      operationId: get_vod_posters\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/picture\"\n                type: array\n          description: The posters were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page exists.\n      summary: Get all the posters of an On Demand page\n      tags:\n        - On Demand\\Posters\n    post:\n      operationId: add_vod_poster\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The poster was added.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't modify another user's On Demand page.\n      security:\n        - oauth2:\n            - upload\n      summary: Add a poster to an On Demand page\n      tags:\n        - On Demand\\Posters\n  \"/ondemand/pages/{ondemand_id}/pictures/{poster_id}\":\n    get:\n      operationId: get_vod_poster\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n        - description: The ID of the picture.\n          in: path\n          name: poster_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The poster was returned.\n      summary: Get a specific poster of an On Demand page\n      tags:\n        - On Demand\\Posters\n    patch:\n      operationId: edit_vod_poster\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n        - description: The ID of the picture.\n          in: path\n          name: poster_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.picture+json:\n            schema:\n              properties:\n                active:\n                  description: Whether to make this picture the active picture.\n                  example: \"true\"\n                  type: boolean\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The poster was edited.\n      security:\n        - oauth2:\n            - edit\n      summary: Edit a poster of an On Demand page\n      tags:\n        - On Demand\\Posters\n  \"/ondemand/pages/{ondemand_id}/promotions\":\n    get:\n      operationId: get_vod_promotions\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n        - description: The filter to apply to the results.\n          in: query\n          name: filter\n          required: true\n          schema:\n            enum:\n              - batch\n              - default\n              - single\n              - vip\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: \"#/components/schemas/on-demand-promotion\"\n          description: The promotions were returned.\n        \"400\":\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The filter is invalid.\n        \"403\":\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't view promotions for an On Demand page that you don't own.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page exists.\n      security:\n        - oauth2:\n            - promo_codes\n      summary: Get all the promotions on an On Demand page\n      tags:\n        - On Demand\\Promotions\n    post:\n      operationId: create_vod_promotion\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.ondemand.promotion+json:\n            schema:\n              properties:\n                access_type:\n                  description: \u003e\n                    The promotion access type, which is a purchase option that\n                    isn't available on the container. VIP promotions always make\n                    the content free of charge. If you use this type, you must\n                    further define the promotion with the `download` or\n                    `stream_period` fields.\n\n\n                    Option descriptions:\n                     * `default` - Promotions grant discount on the existing purchase options for an On Demand Container.\n                     * `vip` - Promotions can be used to grant free access to VOD content before it is released, or to offer a purchase option that isn't available on the container. \"vip\" promotions will always make the content free, and must be further defined with the `download` or `stream_period` fields.\n                  enum:\n                    - default\n                    - vip\n                  type: string\n                code:\n                  description: The promotion code. This field is ignored for batch\n                    promotions.\n                  example: sxsw2018\n                  type: string\n                discount_type:\n                  description: \u003e\n                    The type of discount offered by the promo code. When\n                    `access_type` is `vip`, the value of this field must be\n                    `free`.\n\n\n                    Option descriptions:\n                     * `free` - Reduces the price to zero.\n                     * `percent` - Reduces the price by an amount defined in the \"percent_off\" field.\n                  enum:\n                    - free\n                    - percent\n                  type: string\n                download:\n                  description: Whether the promotion grants download access to VOD content.\n                    This is necessary only when not previously defined in the On\n                    Demand container or when `access_type` is `vip` or\n                    `product_type` is `buy`.\n                  example: \"true\"\n                  type: boolean\n                end_time:\n                  description: The end of the promotion period. If you don't specify a\n                    value, the promotion will never expire.\n                  example: \"1526089920\"\n                  type: string\n                label:\n                  description: The description of a batch promotion. This field is ignored\n                    for single promotions.\n                  example: sxsw\n                  type: string\n                percent_off:\n                  description: The percentage of the discount by using this promo code.\n                    This field is applicable only when `discount_type` is\n                    `percent`.\n                  example: 50\n                  type: number\n                product_type:\n                  description: The type of transaction to which the promotion applies. When\n                    `access_type` is `default`, the default value is `any`, but\n                    the default value is `rent` when `access_type` is `vip`.\n                    Also, when `access_type` is `vip`, the only valid product\n                    types are `buy` and `rent`.\n                  enum:\n                    - any\n                    - buy\n                    - buy_episode\n                    - rent\n                    - rent_episode\n                    - subscribe\n                  type: string\n                start_time:\n                  description: The start of the promotion period. If you don't specify a\n                    value, the start time defaults to the time that the\n                    promotion was created.\n                  example: \"1526089920\"\n                  type: string\n                stream_period:\n                  description: The amount of time that a user has access to the VOD content\n                    upon redeeming a promo code. This field is necessary only\n                    when not defined in the On Demand container or when creating\n                    promotions when `access_type` is `vip` or `product_type` is\n                    `rent`.\n                  enum:\n                    - 1_week\n                    - 1_year\n                    - 24_hour\n                    - 30_day\n                    - 3_month\n                    - 48_hour\n                    - 6_month\n                    - 72_hour\n                  type: string\n                total:\n                  description: The number of promotions to generate when `type` is `batch`,\n                    or the number of uses of the promotion when `type` is\n                    `single`.\n                  example: 9\n                  type: number\n                type:\n                  description: \u003e\n                    The type of promotion. When `access_type` is `vip`, the\n                    value for this field must be `batch`.\n\n\n                    Option descriptions:\n                     * `batch` - Generates many random promo codes with one use each.\n                     * `single` - Generates one promo code that can be used many times.\n                  enum:\n                    - batch\n                    - single\n                  type: string\n              required:\n                - download\n                - stream_period\n                - total\n                - type\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: \"#/components/schemas/on-demand-promotion\"\n          description: The promotion was added.\n        \"400\":\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: |-\n            * There are errors in the request.\n            * The promo code already exists.\n        \"403\":\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't create promotions for an On Demand page that you don't own.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page exists.\n      security:\n        - oauth2:\n            - promo_codes\n            - create\n      summary: Add a promotion to an On Demand page\n      tags:\n        - On Demand\\Promotions\n  \"/ondemand/pages/{ondemand_id}/promotions/{promotion_id}\":\n    delete:\n      operationId: delete_vod_promotion\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n        - description: The ID of the promotion.\n          in: path\n          name: promotion_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n      responses:\n        \"204\":\n          description: The promotion was deleted.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't delete a promotion for an On Demand page that you not own.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page or promotion exists.\n      security:\n        - oauth2:\n            - promo_codes\n            - delete\n      summary: Remove a promotion from an On Demand page\n      tags:\n        - On Demand\\Promotions\n    get:\n      operationId: get_vod_promotion\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n        - description: The ID of the promotion.\n          in: path\n          name: promotion_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: \"#/components/schemas/on-demand-promotion\"\n          description: The promotion was returned.\n        \"403\":\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't view a promotion for an On Demand page that you don't own.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page or promotion exists.\n      security:\n        - oauth2:\n            - promo_codes\n      summary: Get a specific promotion on an On Demand page\n      tags:\n        - On Demand\\Promotions\n  \"/ondemand/pages/{ondemand_id}/promotions/{promotion_id}/codes\":\n    get:\n      operationId: get_vod_promotion_codes\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n        - description: The ID of the promotion.\n          in: path\n          name: promotion_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.promocode+json:\n              schema:\n                $ref: \"#/components/schemas/on-demand-promotion-code\"\n          description: The codes were returned.\n        \"403\":\n          content:\n            application/vnd.vimeo.ondemand.promocode+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't create promotions for an On Demand page that you don't own.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.promocode+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page exists.\n      security:\n        - oauth2:\n            - promo_codes\n      summary: Get all the codes of a promotion on an On Demand page\n      tags:\n        - On Demand\\Promotions\n  \"/ondemand/pages/{ondemand_id}/regions\":\n    delete:\n      operationId: delete_vod_regions\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.ondemand.region+json:\n            schema:\n              properties:\n                countries:\n                  description: An array of country codes.\n                  items:\n                    type: string\n                  type: array\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/on-demand-region\"\n                type: array\n          description: The On Demand regions were deleted.\n        \"403\":\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't modify an On Demand page that you don't own.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page or region exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Remove a list of regions from an On Demand page\n      tags:\n        - On Demand\\Regions\n    get:\n      operationId: get_vod_regions\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/on-demand-region\"\n                type: array\n          description: The regions were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page exists.\n      summary: Get all the regions of an On Demand page\n      tags:\n        - On Demand\\Regions\n    put:\n      operationId: set_vod_regions\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.ondemand.region+json:\n            schema:\n              properties:\n                countries:\n                  description: An array of country codes.\n                  items:\n                    type: string\n                  type: array\n              required:\n                - countries\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: \"#/components/schemas/on-demand-region\"\n          description: The list of regions was set.\n        \"403\":\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't modify an On Demand page that you don't own.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page or region exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Add a list of regions to an On Demand page\n      tags:\n        - On Demand\\Regions\n  \"/ondemand/pages/{ondemand_id}/regions/{country}\":\n    delete:\n      operationId: delete_vod_region\n      parameters:\n        - description: The country code.\n          in: path\n          name: country\n          required: true\n          schema:\n            example: US\n            type: string\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      responses:\n        \"204\":\n          description: The On Demand region was deleted.\n        \"403\":\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't modify an On Demand page that you don't own.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page or region exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Remove a specific region from an On Demand page\n      tags:\n        - On Demand\\Regions\n    get:\n      description: Checks whether an On Demand page belongs to a region.\n      operationId: get_vod_region\n      parameters:\n        - description: The country code.\n          in: path\n          name: country\n          required: true\n          schema:\n            example: US\n            type: string\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: \"#/components/schemas/on-demand-region\"\n          description: The On Demand page's region was returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page or region exists.\n      summary: Get a specific region of an On Demand page\n      tags:\n        - On Demand\\Regions\n    put:\n      operationId: add_vod_region\n      parameters:\n        - description: The country code.\n          in: path\n          name: country\n          required: true\n          schema:\n            example: US\n            type: string\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: \"#/components/schemas/on-demand-region\"\n          description: The region was added.\n        \"403\":\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't modify an On Demand page that you don't own.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page or region exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Add a specific region to an On Demand page\n      tags:\n        - On Demand\\Regions\n  \"/ondemand/pages/{ondemand_id}/seasons\":\n    get:\n      operationId: get_vod_seasons\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - viewable\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - date\n              - manual\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.season+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/on-demand-season\"\n                type: array\n          description: The seasons were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.season+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page exists.\n      summary: Get all the seasons on an On Demand page\n      tags:\n        - On Demand\\Seasons\n  \"/ondemand/pages/{ondemand_id}/seasons/{season_id}\":\n    get:\n      operationId: get_vod_season\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n        - description: The ID of the season.\n          in: path\n          name: season_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.season+json:\n              schema:\n                $ref: \"#/components/schemas/on-demand-season\"\n          description: The season was returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.season+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand page or season exists.\n      summary: Get a specific season on an On Demand page\n      tags:\n        - On Demand\\Seasons\n  \"/ondemand/pages/{ondemand_id}/seasons/{season_id}/videos\":\n    get:\n      operationId: get_vod_season_videos\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n        - description: The ID of the season.\n          in: path\n          name: season_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - viewable\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - date\n              - default\n              - manual\n              - name\n              - purchase_time\n              - release_date\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n      summary: Get all the videos in a season on an On Demand page\n      tags:\n        - On Demand\\Seasons\n  \"/ondemand/pages/{ondemand_id}/videos\":\n    get:\n      operationId: get_vod_videos\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - all\n              - buy\n              - expiring_soon\n              - extra\n              - main\n              - main.viewable\n              - rent\n              - trailer\n              - unwatched\n              - viewable\n              - watched\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - date\n              - default\n              - episode\n              - manual\n              - name\n              - purchase_time\n              - release_date\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: |-\n            * The videos were returned.\n            * The videos were returned.\n      summary: Get all the videos on an On Demand page\n      tags:\n        - On Demand\\Videos\n  \"/ondemand/pages/{ondemand_id}/videos/{video_id}\":\n    delete:\n      operationId: delete_video_from_vod\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n      responses:\n        \"204\":\n          description: The video was deleted.\n        \"403\":\n          content:\n            application/vnd.vimeo.ondemand.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't modify an On Demand page that you don't own.\n      security:\n        - oauth2:\n            - edit\n      summary: Remove a video from an On Demand page\n      tags:\n        - On Demand\\Videos\n    get:\n      operationId: get_vod_video\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.video+json:\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: The video is on the On Demand page.\n      summary: Get a specific video on an On Demand page\n      tags:\n        - On Demand\\Videos\n    put:\n      operationId: add_video_to_vod\n      parameters:\n        - description: The ID of the On Demand.\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            example: 61326\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.ondemand.video+json:\n            schema:\n              properties:\n                buy:\n                  properties:\n                    price:\n                      properties:\n                        AUD:\n                          description: The purchase price of this video in AUD.\n                          example: 1.99\n                          type: number\n                        CAD:\n                          description: The purchase price of this video in CAD.\n                          example: 1.99\n                          type: number\n                        CHF:\n                          description: The purchase price of this video in CHF.\n                          example: 1.99\n                          type: number\n                        DKK:\n                          description: The purchase price of this video in DKK.\n                          example: 1.99\n                          type: number\n                        EUR:\n                          description: The purchase price of this video in EUR.\n                          example: 1.99\n                          type: number\n                        GBP:\n                          description: The purchase price of this video in GBP.\n                          example: 1.99\n                          type: number\n                        JPY:\n                          description: The purchase price of this video in JPY.\n                          example: 1.99\n                          type: number\n                        KRW:\n                          description: The purchase price of this video in KRW.\n                          example: 1.99\n                          type: number\n                        NOK:\n                          description: The purchase price of this video in NOK.\n                          example: 1.99\n                          type: number\n                        PLN:\n                          description: The purchase price of this video in PLN.\n                          example: 1.99\n                          type: number\n                        SEK:\n                          description: The purchase price of this video in SEK.\n                          example: 1.99\n                          type: number\n                        USD:\n                          description: The purchase price of this video in USD. *Required\n                            if `buy.active` is true.\n                          example: 1.99\n                          type: number\n                      type: object\n                  type: object\n                position:\n                  description: The position of this video in the On Demand collection.\n                  example: 10\n                  type: number\n                release_year:\n                  description: The video release year.\n                  example: 2018\n                  type: number\n                rent:\n                  properties:\n                    price:\n                      properties:\n                        AUD:\n                          description: The rental price of this video in AUD.\n                          example: 0.99\n                          type: number\n                        CAD:\n                          description: The rental price of this video in CAD.\n                          example: 0.99\n                          type: number\n                        CHF:\n                          description: The rental price of this video in CHF.\n                          example: 0.99\n                          type: number\n                        DKK:\n                          description: The rental price of this video in DKK.\n                          example: 0.99\n                          type: number\n                        EUR:\n                          description: The rental price of this video in EUR.\n                          example: 0.99\n                          type: number\n                        GBP:\n                          description: The rental price of this video in GBP.\n                          example: 0.99\n                          type: number\n                        JPY:\n                          description: The rental price of this video in JPY.\n                          example: 0.99\n                          type: number\n                        KRW:\n                          description: The rental price of this video in KRW.\n                          example: 0.99\n                          type: number\n                        NOK:\n                          description: The rental price of this video in NOK.\n                          example: 0.99\n                          type: number\n                        PLN:\n                          description: The rental price of this video in PLN.\n                          example: 0.99\n                          type: number\n                        SEK:\n                          description: The rental price of this video in SEK.\n                          example: 0.99\n                          type: number\n                        USD:\n                          description: The rental price of this video in USD. *Required if\n                            `rent.active` is true.\n                          example: 0.99\n                          type: number\n                      type: object\n                  type: object\n                type:\n                  description: The type of video that you are adding to the On Demand page.\n                  enum:\n                    - extra\n                    - main\n                    - trailer\n                  type: string\n              required:\n                - type\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.video+json:\n              schema:\n                $ref: \"#/components/schemas/on-demand-video\"\n          description: The video was added.\n        \"400\":\n          content:\n            application/vnd.vimeo.ondemand.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't add the video to this On Demand page.\n        \"403\":\n          content:\n            application/vnd.vimeo.ondemand.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't modify an On Demand page that you don't own.\n      security:\n        - oauth2:\n            - edit\n      summary: Add a video to an On Demand page\n      tags:\n        - On Demand\\Videos\n  /ondemand/regions:\n    get:\n      operationId: get_regions\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/on-demand-region\"\n                type: array\n          description: The On Demand regions were returned.\n      summary: Get all the On Demand regions\n      tags:\n        - On Demand\\Regions\n  \"/ondemand/regions/{country}\":\n    get:\n      operationId: get_region\n      parameters:\n        - description: The country code.\n          in: path\n          name: country\n          required: true\n          schema:\n            example: US\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: \"#/components/schemas/on-demand-region\"\n          description: The On Demand region was returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such On Demand region exists.\n      summary: Get a specific On Demand region\n      tags:\n        - On Demand\\Regions\n  \"/tags/{word}\":\n    get:\n      operationId: get_tag\n      parameters:\n        - description: The tag to return.\n          in: path\n          name: word\n          required: true\n          schema:\n            example: awesome\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/tag\"\n          description: The tag was returned.\n      summary: Get a specific tag\n      tags:\n        - Tags\\Essentials\n  \"/tags/{word}/videos\":\n    get:\n      operationId: get_videos_with_tag\n      parameters:\n        - description: The tag word.\n          in: path\n          name: word\n          required: true\n          schema:\n            example: awesome\n            type: string\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - created_time\n              - duration\n              - name\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such tag exists.\n      summary: Get all the videos with a specific tag\n      tags:\n        - Videos\\Tags\n  /tokens:\n    delete:\n      description: This method enables an app to notify the API that it is done with a\n        token and that the token can be discarded.\n      operationId: delete_token\n      responses:\n        \"204\":\n          content:\n            application/vnd.vimeo.auth+json:\n              schema:\n                $ref: \"#/components/schemas/auth\"\n          description: The token was revoked.\n        \"400\":\n          content:\n            application/vnd.vimeo.auth+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You can't revoke access for an OAuth 1 token.\n      summary: Revoke the current access token\n      tags:\n        - Authentication Extras\\Essentials\n  /users:\n    get:\n      operationId: search_users\n      parameters:\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n              - followers\n              - relevant\n              - videos\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/user\"\n                type: array\n          description: The search results were returned.\n        \"500\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: There was an internal search error.\n        \"503\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: Search is disabled.\n      summary: Search for users\n      tags:\n        - Users\\Internal\n  \"/users/{user_id}\":\n    get:\n      operationId: get_user\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/user\"\n          description: The user was returned.\n      summary: Get a user\n      tags:\n        - Users\\Essentials\n    patch:\n      operationId: edit_user\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.user+json:\n            schema:\n              properties:\n                bio:\n                  description: The user's bio.\n                  example: This is where you will find videos and news updates from the\n                    staff\n                  type: string\n                content_filter:\n                  description: A list of values describing the content in this video. Find\n                    the full list in the\n                    [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings)\n                    endpoint. You must provide a comma-separated list if you are\n                    using a query string or an array if you are using JSON.\n                  items:\n                    type: string\n                  type: array\n                link:\n                  description: The user's custom Vimeo URL slug.\n                  example: staff\n                  type: string\n                location:\n                  description: The user's location.\n                  example: New York City\n                  type: string\n                name:\n                  description: The user's display name.\n                  example: Vimeo Staff\n                  type: string\n                password:\n                  description: The default password for all future videos that this user\n                    uploads. To use this field, the `videos.privacy.view` field\n                    must be `password`.\n                  example: hunter1\n                  type: string\n                videos:\n                  properties:\n                    privacy:\n                      properties:\n                        add:\n                          description: Whether a user can add the video to an album,\n                            channel, or group. This value becomes the default\n                            add setting for all future videos uploaded by the\n                            user.\n                          example: \"true\"\n                          type: boolean\n                        comments:\n                          description: Who can comment on the video. This value becomes the\n                            default comment setting for all future videos that\n                            this user uploads.\n                          enum:\n                            - anybody\n                            - contacts\n                            - nobody\n                          type: string\n                        download:\n                          description: Whether a user can download the video. This value\n                            becomes the default download setting for all future\n                            videos that this user uploads.\n                          example: \"true\"\n                          type: boolean\n                        embed:\n                          description: The privacy for embed videos. The `whitelist` value\n                            enables you to define all valid embed domains. See\n                            our\n                            [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains)\n                            for adding and removing domains.\n                          enum:\n                            - private\n                            - public\n                            - whitelist\n                          type: string\n                        view:\n                          description: Who can view the video. This value becomes the\n                            default view setting for all future videos that this\n                            user uploads.\n                          enum:\n                            - anybody\n                            - contacts\n                            - disable\n                            - nobody\n                            - password\n                            - unlisted\n                            - users\n                          type: string\n                      type: object\n                  type: object\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/user\"\n          description: The user was edited.\n      summary: Edit a user\n      tags:\n        - Users\\Essentials\n  \"/users/{user_id}/albums\":\n    get:\n      operationId: get_albums\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n              - duration\n              - videos\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/album\"\n                type: array\n          description: The albums were returned.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: A parameter is invalid.\n      summary: Get all the albums that belong to a user\n      tags:\n        - Albums\\Essentials\n    post:\n      operationId: create_album\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.album+json:\n            schema:\n              properties:\n                brand_color:\n                  description: The hexadecimal code for the color of the player buttons.\n                  example: ff66ee\n                  type: string\n                description:\n                  description: The description of the album.\n                  example: Vimeo holiday videos!\n                  type: string\n                hide_nav:\n                  description: Whether to hide Vimeo navigation when displaying the album.\n                  example: \"true\"\n                  type: boolean\n                layout:\n                  description: The type of layout for presenting the album.\n                  enum:\n                    - grid\n                    - player\n                  type: string\n                name:\n                  description: The name of the album.\n                  example: Vimeo Holiday Videos!\n                  type: string\n                password:\n                  description: The album's password. Required only if **privacy** is\n                    `password`.\n                  example: hunter1\n                  type: string\n                privacy:\n                  description: The privacy level of the album.\n                  enum:\n                    - anybody\n                    - embed_only\n                    - password\n                  type: string\n                review_mode:\n                  description: Whether album videos should use the review mode URL.\n                  example: \"true\"\n                  type: boolean\n                sort:\n                  description: The default sort order of the album's videos.\n                  enum:\n                    - added_first\n                    - added_last\n                    - alphabetical\n                    - arranged\n                    - comments\n                    - likes\n                    - newest\n                    - oldest\n                    - plays\n                  type: string\n                theme:\n                  description: The color theme of the album.\n                  enum:\n                    - dark\n                    - standard\n                  type: string\n              required:\n                - name\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: \"#/components/schemas/album\"\n          description: The album was created.\n        \"400\":\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: A parameter is invalid.\n        \"403\":\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The supplied token doesn't have the proper scopes, or the\n            authenticated user can't create an album.\n      security:\n        - oauth2:\n            - create\n      summary: Create an album\n      tags:\n        - Albums\\Essentials\n  \"/users/{user_id}/albums/{album_id}\":\n    delete:\n      operationId: delete_album\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"204\":\n          description: The album was deleted.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The supplied token doesn't have the proper scopes, or the\n            authenticated user can't delete the album.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists.\n      security:\n        - oauth2:\n            - delete\n      summary: Delete an album\n      tags:\n        - Albums\\Essentials\n    get:\n      operationId: get_album\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: \"#/components/schemas/album\"\n          description: The album was returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists.\n      summary: Get a specific album\n      tags:\n        - Albums\\Essentials\n    patch:\n      operationId: edit_album\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.album+json:\n            schema:\n              properties:\n                brand_color:\n                  description: The hexadecimal code for the color of the player buttons.\n                  example: ff66ee\n                  type: string\n                description:\n                  description: The description of the album.\n                  example: Vimeo holiday videos!\n                  type: string\n                domain:\n                  description: The custom domain a user has selected for their album.\n                  example: mycustomdomain.com\n                  nullable: true\n                  type: string\n                hide_nav:\n                  description: Whether to hide Vimeo navigation when displaying the album.\n                  example: \"true\"\n                  type: boolean\n                layout:\n                  description: The type of layout for presenting the album.\n                  enum:\n                    - grid\n                    - player\n                  type: string\n                name:\n                  description: The name of the album.\n                  example: Vimeo Holiday Videos!\n                  type: string\n                password:\n                  description: The album's password. Required only if **privacy** is\n                    `password`.\n                  example: hunter1\n                  type: string\n                privacy:\n                  description: The privacy level of the album.\n                  enum:\n                    - anybody\n                    - embed_only\n                    - password\n                  type: string\n                review_mode:\n                  description: Whether album videos should use the review mode URL.\n                  example: \"true\"\n                  type: boolean\n                sort:\n                  description: The default sort order of the album's videos.\n                  enum:\n                    - added_first\n                    - added_last\n                    - alphabetical\n                    - arranged\n                    - comments\n                    - likes\n                    - newest\n                    - oldest\n                    - plays\n                  type: string\n                theme:\n                  description: The color theme of the album.\n                  enum:\n                    - dark\n                    - standard\n                  type: string\n                url:\n                  description: The custom Vimeo URL a user has selected for their album.\n                  example: my-custom-url\n                  nullable: true\n                  type: string\n                use_custom_domain:\n                  description: Whether the user has opted in to use a custom domain for\n                    their album.\n                  example: \"true\"\n                  type: boolean\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: \"#/components/schemas/album\"\n          description: The album was edited.\n        \"400\":\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: A parameter is invalid.\n        \"403\":\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user doesn't own the album, the supplied token\n            doesn't have the proper scopes, or the authenticated user can't edit\n            the album.\n        \"404\":\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Edit an album\n      tags:\n        - Albums\\Essentials\n  \"/users/{user_id}/albums/{album_id}/custom_thumbnails\":\n    get:\n      operationId: get_album_custom_thumbs\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/picture\"\n                type: array\n          description: The custom uploaded thumbnails were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists.\n      summary: Get all the custom upload thumbnails of an album\n      tags:\n        - Albums\\Custom album thumbnails\n    post:\n      operationId: create_album_custom_thumb\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The custom thumbnail was added to the album.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't modify this album.\n        \"404\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists.\n      security:\n        - oauth2:\n            - upload\n      summary: Add a custom uploaded thumbnail\n      tags:\n        - Albums\\Custom album thumbnails\n  \"/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}\":\n    delete:\n      description: This method removes a custom uploaded thumbnail from the specified album.\n      operationId: delete_album_custom_thumbnail\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n        - description: The ID of the custom thumbnail.\n          in: path\n          name: thumbnail_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"204\":\n          description: The custom thumbnail was removed.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't modify this album.\n        \"404\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists, or it doesn't contain the specified custom\n            thumbnail.\n      security:\n        - oauth2:\n            - edit\n      summary: Remove a custom uploaded album thumbnail\n      tags:\n        - Albums\\Custom album thumbnails\n    get:\n      operationId: get_album_custom_thumbnail\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n        - description: The ID of the custom thumbnail.\n          in: path\n          name: thumbnail_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The custom thumbnail was returned.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't view this custom thumbnail.\n        \"404\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists, or it doesn't contain the specified custom\n            thumbnail.\n      summary: Get a specific custom uploaded album thumbnail\n      tags:\n        - Albums\\Custom album thumbnails\n    patch:\n      operationId: replace_album_custom_thumb\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n        - description: The ID of the custom thumbnail.\n          in: path\n          name: thumbnail_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.picture+json:\n            schema:\n              properties:\n                active:\n                  description: Whether to make this the active album thumbnail.\n                  example: \"true\"\n                  type: boolean\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The custom thumbnail was replaced.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't modify this album.\n        \"404\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists, or it doesn't contain the specified custom\n            thumbnail.\n      security:\n        - oauth2:\n            - edit\n      summary: Replace a custom uploaded album thumbnail\n      tags:\n        - Albums\\Custom album thumbnails\n  \"/users/{user_id}/albums/{album_id}/logos\":\n    get:\n      operationId: get_album_logos\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/picture\"\n                type: array\n          description: The custom logos were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists.\n      summary: Get all the custom logos of an album\n      tags:\n        - Albums\\Custom album logos\n    post:\n      operationId: create_album_logo\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The logo was added to the album.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't modify this album.\n        \"404\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists.\n      security:\n        - oauth2:\n            - upload\n      summary: Add a custom album logo\n      tags:\n        - Albums\\Custom album logos\n  \"/users/{user_id}/albums/{album_id}/logos/{logo_id}\":\n    delete:\n      description: This method removes a custom logo from the specified album.\n      operationId: delete_album_logo\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n        - description: The ID of the custom logo.\n          in: path\n          name: logo_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"204\":\n          description: The custom logo was removed.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't modify this album.\n        \"404\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists, or it doesn't contain the specified custom\n            logo.\n      security:\n        - oauth2:\n            - edit\n      summary: Remove a custom album logo\n      tags:\n        - Albums\\Custom album logos\n    get:\n      operationId: get_album_logo\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n        - description: The ID of the custom logo.\n          in: path\n          name: logo_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The custom logo was returned.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't view this custom logo.\n        \"404\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists, or it doesn't contain the specified custom\n            logo.\n      summary: Get a specific custom album logo\n      tags:\n        - Albums\\Custom album logos\n    patch:\n      operationId: replace_album_logo\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n        - description: The ID of the custom logo.\n          in: path\n          name: logo_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.picture+json:\n            schema:\n              properties:\n                active:\n                  description: Whether to make this the active album logo.\n                  example: \"true\"\n                  type: boolean\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The custom logo was replaced.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't modify this album.\n        \"404\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists, or it doesn't contain the specified custom\n            logo.\n      security:\n        - oauth2:\n            - edit\n      summary: Replace a custom album logo\n      tags:\n        - Albums\\Custom album logos\n  \"/users/{user_id}/albums/{album_id}/videos\":\n    get:\n      operationId: get_album_videos\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The page containing the video URI.\n          in: query\n          name: containing_uri\n          required: false\n          schema:\n            example: /videos/258684937\n            type: string\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - embeddable\n            type: string\n        - description: Whether to filter the results by embeddable videos (`true`) or\n            non-embeddable videos (`false`). Required only if **filter** is\n            `embeddable`.\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            example: \"true\"\n            type: boolean\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The password of the album.\n          in: query\n          name: password\n          required: false\n          schema:\n            example: hunter1\n            type: string\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - default\n              - duration\n              - likes\n              - manual\n              - modified_time\n              - plays\n            type: string\n        - description: Whether to include private videos in the search. Please note that a\n            separate search service provides this functionality. The service\n            performs a partial text search on the video's name.\n          in: query\n          name: weak_search\n          required: false\n          schema:\n            example: \"false\"\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists.\n      summary: Get all the videos in an album\n      tags:\n        - Albums\\Album videos\n    put:\n      description: This method replaces all the existing videos in an album with one or\n        more videos.\n      operationId: replace_videos_in_album\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                videos:\n                  description: A comma-separated list of video URIs.\n                  example: /videos/258684937,/videos/273576296\n                  type: string\n              required:\n                - videos\n              type: object\n        required: true\n      responses:\n        \"201\":\n          description: The videos were added.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't add videos to albums.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Replace all the videos in an album\n      tags:\n        - Albums\\Album videos\n  \"/users/{user_id}/albums/{album_id}/videos/{video_id}\":\n    delete:\n      operationId: remove_video_from_album\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 196367152\n            type: number\n      responses:\n        \"204\":\n          description: The video was removed.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The supplied token doesn't have the proper scopes, or the\n            authenticated user can't edit the album.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Remove a video from an album\n      tags:\n        - Albums\\Album videos\n    get:\n      description: This method gets a single video from an album. You can use this method\n        to determine whether the album contains the specified video.\n      operationId: get_album_video\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 3706071\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 196367152\n            type: number\n        - description: The password of the album.\n          in: query\n          name: password\n          required: false\n          schema:\n            example: hunter1\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: The video was returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists, or the video wasn't found in it.\n      summary: Get a specific video in an album\n      tags:\n        - Albums\\Album videos\n    put:\n      operationId: add_video_to_album\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 196367152\n            type: number\n      responses:\n        \"204\":\n          description: The video was added.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The supplied token doesn't have the proper scopes, or the\n            authenticated user can't edit the album.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such album exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Add a specific video to an album\n      tags:\n        - Albums\\Album videos\n  \"/users/{user_id}/albums/{album_id}/videos/{video_id}/set_album_thumbnail\":\n    post:\n      operationId: set_video_as_album_thumbnail\n      parameters:\n        - description: The ID of the album.\n          in: path\n          name: album_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 196367152\n            type: number\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                time_code:\n                  description: The video frame time in seconds to use as the album\n                    thumbnail.\n                  example: 300\n                  type: number\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/album\"\n          description: The album was updated with a new thumbnail.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3429: The authenticated user can't edit the album.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 5000: No such album, or user, or video exists.\"\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 4016: Unexpected error while setting thumbnail.\"\n      security:\n        - oauth2:\n            - edit\n      summary: Set a video as the album thumbnail\n      tags:\n        - Albums\\Album videos\n  \"/users/{user_id}/appearances\":\n    get:\n      operationId: get_appearances\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - embeddable\n            type: string\n        - description: Whether to filter the results by embeddable videos (`true`) or\n            non-embeddable videos (`false`). Required only if **filter** is\n            `embeddable`.\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            example: \"true\"\n            type: boolean\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - duration\n              - likes\n              - plays\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n      summary: Get all the videos in which a user appears\n      tags:\n        - Videos\\Essentials\n  \"/users/{user_id}/categories\":\n    get:\n      operationId: get_category_subscriptions\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n              - name\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/category\"\n                type: array\n          description: The categories were returned.\n        \"403\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3200: You can't view another user.\"\n      security:\n        - oauth2:\n            - private\n      summary: Get all the categories that a user follows\n      tags:\n        - Categories\\Subscriptions\n  \"/users/{user_id}/categories/{category}\":\n    delete:\n      operationId: unsubscribe_from_category\n      parameters:\n        - description: The name of the category.\n          in: path\n          name: category\n          required: true\n          schema:\n            example: animation\n            type: string\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"204\":\n          description: The user was unsubscribed.\n      security:\n        - oauth2:\n            - interact\n      summary: Unsubscribe a user from a category\n      tags:\n        - Categories\\Subscriptions\n    get:\n      operationId: check_if_user_subscribed_to_category\n      parameters:\n        - description: The name of the category.\n          in: path\n          name: category\n          required: true\n          schema:\n            example: animation\n            type: string\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"204\":\n          description: The user is following the category.\n      security:\n        - oauth2:\n            - private\n      summary: Check if a user follows a category\n      tags:\n        - Categories\\Subscriptions\n    put:\n      operationId: subscribe_to_category\n      parameters:\n        - description: The name of the category.\n          in: path\n          name: category\n          required: true\n          schema:\n            example: 0\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"204\":\n          description: The user was subscribed.\n      security:\n        - oauth2:\n            - interact\n      summary: Subscribe a user to a single category\n      tags:\n        - Categories\\Subscriptions\n  \"/users/{user_id}/channels\":\n    get:\n      operationId: get_channel_subscriptions\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - moderated\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n              - followers\n              - videos\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/channel\"\n                type: array\n          description: The channels were returned.\n        \"304\":\n          description: No channel has been followed since the given `If-Modified-Since`\n            header.\n      summary: Get all the channels to which a user subscribes\n      tags:\n        - Channels\\Essentials\n  \"/users/{user_id}/channels/{channel_id}\":\n    delete:\n      operationId: unsubscribe_from_channel\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"204\":\n          description: The user is no longer a follower of the channel.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists.\n      security:\n        - oauth2:\n            - interact\n      summary: Unsubscribe a user from a specific channel\n      tags:\n        - Channels\\Subscriptions and subscribers\n    get:\n      operationId: check_if_user_subscribed_to_channel\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"204\":\n          description: The user follows the channel.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists.\n      summary: Check if a user follows a channel\n      tags:\n        - Channels\\Subscriptions and subscribers\n    put:\n      operationId: subscribe_to_channel\n      parameters:\n        - description: The ID of the channel.\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            example: 927\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"204\":\n          description: The user is now a follower of the channel.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such channel exists.\n      security:\n        - oauth2:\n            - interact\n      summary: Subscribe a user to a specific channel\n      tags:\n        - Channels\\Subscriptions and subscribers\n  \"/users/{user_id}/customlogos\":\n    get:\n      operationId: get_custom_logos\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/picture\"\n                type: array\n          description: The custom logos were returned.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: |-\n            * The user can't view this custom logo.\n            * The user can't view custom logos.\n      summary: Get all the custom logos that belong to a user\n      tags:\n        - Embed Presets\\Custom Logos\n    post:\n      operationId: create_custom_logo\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The custom logo was created.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: |-\n            * You can't upload pictures for another user's videos.\n            * The user can't add a custom logo.\n      security:\n        - oauth2:\n            - upload\n      summary: Add a custom logo\n      tags:\n        - Embed Presets\\Custom Logos\n  \"/users/{user_id}/customlogos/{logo_id}\":\n    get:\n      operationId: get_custom_logo\n      parameters:\n        - description: The ID of the custom logo.\n          in: path\n          name: logo_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The custom logo was returned.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The user can't view custom logos.\n      summary: Get a specific custom logo\n      tags:\n        - Embed Presets\\Custom Logos\n  \"/users/{user_id}/feed\":\n    get:\n      operationId: get_feed\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: Necessary for proper pagination. You shouldn't provide this value\n            yourself, and instead use the pagination links in the feed response.\n            Please see our [pagination\n            documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter)\n            for more information.\n          in: query\n          name: offset\n          required: false\n          schema:\n            example: \"280\"\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The feed type.\n          in: query\n          name: type\n          required: false\n          schema:\n            enum:\n              - appears\n              - category_featured\n              - channel\n              - facebook_feed\n              - following\n              - group\n              - likes\n              - ondemand_publish\n              - share\n              - tagged_with\n              - twitter_timeline\n              - uploads\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.activity+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/activity-3-1\"\n                type: array\n          description: The videos were returned.\n      security:\n        - oauth2:\n            - private\n      summary: Get all videos in a user's feed\n      tags:\n        - Users\\Feed\n  \"/users/{user_id}/followers\":\n    get:\n      operationId: get_followers\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/user\"\n                type: array\n          description: The user's followers were returned.\n      summary: Get all the followers of a user\n      tags:\n        - Users\\Follows\n  \"/users/{user_id}/following\":\n    get:\n      operationId: get_user_following\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - online\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/user\"\n                type: array\n          description: The followed users were returned.\n      summary: Get all the users that a user is following\n      tags:\n        - Users\\Follows\n    post:\n      operationId: follow_users\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                users:\n                  description: An array of user URIs for the list of users to follow.\n                  items:\n                    type: string\n                  type: array\n              required:\n                - users\n              type: object\n        required: true\n      responses:\n        \"204\":\n          description: The users were followed.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: |-\n            * Error code 2205: The request body is empty.\n            * Error code 2205: The `users` array is invalid.\n            * Error code 2205: The list of users doesn't contain URIs.\n            * Error code 2900: A user in the list doesn't exist.\n            * Error code 2901: The list contains more than 100 users.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8000: The user access token is invalid.\"\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3417: The current user can't follow other users.\"\n        \"429\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 9006: The current user is rate-limited from following\n            other users.\"\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 4005: An unexpected error occurred.\"\n      security:\n        - oauth2:\n            - interact\n      summary: Follow a list of users\n      tags:\n        - Users\\Follows\n  \"/users/{user_id}/following/{follow_user_id}\":\n    delete:\n      operationId: unfollow_user\n      parameters:\n        - description: The ID of the following user.\n          in: path\n          name: follow_user_id\n          required: true\n          schema:\n            example: 3766357\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"204\":\n          description: The user was unfollowed.\n      security:\n        - oauth2:\n            - interact\n      summary: Unfollow a user\n      tags:\n        - Users\\Follows\n    get:\n      operationId: check_if_user_is_following\n      parameters:\n        - description: The ID of the following user.\n          in: path\n          name: follow_user_id\n          required: true\n          schema:\n            example: 3766357\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"204\":\n          description: The authenticated user follows the user in question.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The user in question doesn't follow the authenticated user.\n      summary: Check if a user is following another user\n      tags:\n        - Users\\Follows\n    put:\n      operationId: follow_user\n      parameters:\n        - description: The ID of the following user.\n          in: path\n          name: follow_user_id\n          required: true\n          schema:\n            example: 3766357\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"204\":\n          description: The user was followed.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't add followers.\n      security:\n        - oauth2:\n            - interact\n      summary: Follow a specific user\n      tags:\n        - Users\\Follows\n  \"/users/{user_id}/groups\":\n    get:\n      operationId: get_user_groups\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - moderated\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n              - members\n              - videos\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.group+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/group\"\n                type: array\n          description: The groups were returned.\n      summary: Get all the groups that a user has joined\n      tags:\n        - Groups\\Users\n  \"/users/{user_id}/groups/{group_id}\":\n    delete:\n      operationId: leave_group\n      parameters:\n        - description: The ID of the group.\n          in: path\n          name: group_id\n          required: true\n          schema:\n            example: 1108\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"204\":\n          description: The user left the group.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user owns the group. To remove this user, first\n            apply a new group owner through PATCH.\n      security:\n        - oauth2:\n            - interact\n      summary: Remove a user from a group\n      tags:\n        - Groups\\Subscription\n    get:\n      operationId: check_if_user_joined_group\n      parameters:\n        - description: The ID of the group.\n          in: path\n          name: group_id\n          required: true\n          schema:\n            example: 1108\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"204\":\n          description: The user has joined the group.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: |-\n            * No such group exists.\n            * The authenticated user isn't a member of this group.\n      summary: Check if a user has joined a group\n      tags:\n        - Groups\\Users\n    put:\n      operationId: join_group\n      parameters:\n        - description: The ID of the group.\n          in: path\n          name: group_id\n          required: true\n          schema:\n            example: 1108\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"204\":\n          description: The user joined the group.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: \u003e-\n            * The authenticated user can't join groups.\n\n            * The group prohibits the authenticated user from joining, either because the group is not public or because the group's privacy setting is `members`.\n      security:\n        - oauth2:\n            - interact\n      summary: Add a user to a group\n      tags:\n        - Groups\\Subscription\n  \"/users/{user_id}/likes\":\n    get:\n      operationId: get_likes\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - embeddable\n            type: string\n        - description: Whether to filter the results by embeddable videos (`true`) or\n            non-embeddable videos (`false`). Required only if **filter** is\n            `embeddable`.\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            example: \"true\"\n            type: boolean\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - duration\n              - likes\n              - plays\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n      summary: Get all the videos that a user has liked\n      tags:\n        - Likes\\Essentials\n  \"/users/{user_id}/likes/{video_id}\":\n    delete:\n      operationId: unlike_video\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was unliked.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't like videos.\n      security:\n        - oauth2:\n            - interact\n      summary: Cause a user to unlike a video\n      tags:\n        - Likes\\Essentials\n    get:\n      operationId: check_if_user_liked_video\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The user has liked the video.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The user hasn't liked the video.\n      summary: Check if a user has liked a video\n      tags:\n        - Likes\\Essentials\n    put:\n      operationId: like_video\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was liked.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user owns the video.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't like videos.\n      security:\n        - oauth2:\n            - interact\n      summary: Cause a user to like a video\n      tags:\n        - Likes\\Essentials\n  \"/users/{user_id}/ondemand/pages\":\n    get:\n      operationId: get_user_vods\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The type of On Demand pages to return.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - film\n              - series\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - added\n              - alphabetical\n              - date\n              - modified_time\n              - name\n              - publish.time\n              - rating\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/on-demand-page\"\n                type: array\n          description: The On Demand pages were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such user exists.\n      summary: Get all the On Demand pages of a user\n      tags:\n        - On Demand\\Essentials\n    post:\n      operationId: create_vod\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                accepted_currencies:\n                  description: |\n                    An array of accepted currencies.\n\n                    Option descriptions:\n                     * `AUD` - Australian Dollar\n                     * `CAD` - Canadian Dollar\n                     * `CHF` - Swiss Franc\n                     * `DKK` - Danish Krone\n                     * `EUR` - Euro\n                     * `GBP` - British Pound\n                     * `JPY` - Japanese Yen\n                     * `KRW` - South Korean Won\n                     * `NOK` - Norwegian Krone\n                     * `PLN` - Polish Zloty\n                     * `SEK` - Swedish Krona\n                     * `USD` - US Dollar\n                  enum:\n                    - AUD\n                    - CAD\n                    - CHF\n                    - DKK\n                    - EUR\n                    - GBP\n                    - JPY\n                    - KRW\n                    - NOK\n                    - PLN\n                    - SEK\n                    - USD\n                  type: string\n                buy:\n                  properties:\n                    active:\n                      description: Whether the Buy action is active. *Required if\n                        `rent.active` is false.\n                      example: \"true\"\n                      type: boolean\n                    download:\n                      description: Whether people who buy the video can download it. To use\n                        this field, `type` must be `film`.\n                      example: \"true\"\n                      type: boolean\n                    price:\n                      properties:\n                        AUD:\n                          description: The purchase price of this video in AUD.\n                          example: 2.99\n                          type: number\n                        CAD:\n                          description: The purchase price of this video in CAD.\n                          example: 2.99\n                          type: number\n                        CHF:\n                          description: The purchase price of this video in CHF.\n                          example: 2.99\n                          type: number\n                        DKK:\n                          description: The purchase price of this video in DKK.\n                          example: 2.99\n                          type: number\n                        EUR:\n                          description: The purchase price of this video in EUR.\n                          example: 2.99\n                          type: number\n                        GBP:\n                          description: The purchase price of this video in GBP.\n                          example: 2.99\n                          type: number\n                        JPY:\n                          description: The purchase price of this video in JPY.\n                          example: 2.99\n                          type: number\n                        KRW:\n                          description: The purchase price of this video in KRW.\n                          example: 2.99\n                          type: number\n                        NOK:\n                          description: The purchase price of this video in NOK.\n                          example: 2.99\n                          type: number\n                        PLN:\n                          description: The purchase price of this video in PLN.\n                          example: 2.99\n                          type: number\n                        SEK:\n                          description: The purchase price of this video in SEK.\n                          example: 2.99\n                          type: number\n                        USD:\n                          description: The purchase price of this video in USD when `type`\n                            is `film`, or the purchase price of the entire\n                            collection in USD when `type` is `series`.\n                          example: 2.99\n                          type: number\n                      type: object\n                  type: object\n                content_rating:\n                  description: One or more ratings, either as a comma-separated list or as\n                    a JSON array depending on the request format.\n                  enum:\n                    - drugs\n                    - language\n                    - nudity\n                    - safe\n                    - unrated\n                    - violence\n                  type: string\n                description:\n                  description: The description of the On Demand page.\n                  example: DARBY FOREVER follows the fantasies of Darby, a shopgirl at\n                    \"Bobbins \u0026 Notions\".\n                  type: string\n                domain_link:\n                  description: The custom domain of the On Demand page.\n                  example: https://example.com\n                  type: string\n                episodes:\n                  properties:\n                    buy:\n                      properties:\n                        active:\n                          description: Whether episodes can be bought.\n                          example: \"true\"\n                          type: boolean\n                        download:\n                          description: Whether people who buy the episode can download it.\n                            To use this field, `type` must be `series`.\n                          example: \"true\"\n                          type: boolean\n                        price:\n                          properties:\n                            USD:\n                              description: The purchase price per episode. *Required if\n                                `episodes.buy.active` is true.\n                              example: 1.99\n                              type: number\n                          type: object\n                      type: object\n                    rent:\n                      properties:\n                        active:\n                          description: Whether episodes can be rented\n                          example: \"true\"\n                          type: boolean\n                        period:\n                          description: The period in which this episode can be rented for.\n                          enum:\n                            - 1 week\n                            - 1 year\n                            - 24 hour\n                            - 3 month\n                            - 30 day\n                            - 48 hour\n                            - 6 month\n                            - 72 hour\n                          type: string\n                        price:\n                          properties:\n                            USD:\n                              description: The default price to rent an episode. This field\n                                is applicable only when `type` is `series`.\n                                *Required if `episodes.rent.active` is true.\n                              example: 0.99\n                              type: number\n                          type: object\n                      type: object\n                  type: object\n                link:\n                  description: The custom string to use in this On Demand page's Vimeo URL.\n                  example: darbyforever\n                  type: string\n                name:\n                  description: The name of the On Demand page.\n                  example: Darby Forever\n                  type: string\n                rent:\n                  properties:\n                    active:\n                      description: Whether the video can be rented. *Required if\n                        `buy.active` is false.\n                      example: \"true\"\n                      type: boolean\n                    period:\n                      description: The period in which this can be rented for.\n                      enum:\n                        - 1 week\n                        - 1 year\n                        - 24 hour\n                        - 3 month\n                        - 30 day\n                        - 48 hour\n                        - 6 month\n                        - 72 hour\n                      type: string\n                    price:\n                      properties:\n                        AUD:\n                          description: The rental price of this video in AUD.\n                          example: 0.99\n                          type: number\n                        CAD:\n                          description: The rental price of this video in CAD.\n                          example: 0.99\n                          type: number\n                        CHF:\n                          description: The rental price of this video in CHF.\n                          example: 0.99\n                          type: number\n                        DKK:\n                          description: The rental price of this video in DKK.\n                          example: 0.99\n                          type: number\n                        EUR:\n                          description: The rental price of this video in EUR.\n                          example: 0.99\n                          type: number\n                        GBP:\n                          description: The rental price of this video in GBP.\n                          example: 0.99\n                          type: number\n                        JPY:\n                          description: The rental price of this video in JPY.\n                          example: 0.99\n                          type: number\n                        KRW:\n                          description: The rental price of this video in KRW.\n                          example: 0.99\n                          type: number\n                        NOK:\n                          description: The rental price of this video in NOK.\n                          example: 0.99\n                          type: number\n                        PLN:\n                          description: The rental price of this video in PLN.\n                          example: 0.99\n                          type: number\n                        SEK:\n                          description: The rental price of this video in SEK.\n                          example: 0.99\n                          type: number\n                        USD:\n                          description: The rental price of this video in USD when `type` is\n                            `film`, or the rental price of the entire collection\n                            in USD when `type` is `series`.\n                          example: 0.99\n                          type: number\n                      type: object\n                  type: object\n                subscription:\n                  properties:\n                    monthly:\n                      properties:\n                        active:\n                          description: Whether monthly subscription is active. *Required if\n                            `rent.active` and `buy.active` are false.\n                          example: \"true\"\n                          type: boolean\n                        price:\n                          properties:\n                            USD:\n                              description: The monthly subscription price in USD. *Required\n                                if `subscription.active` is true.\n                              example: 9.99\n                              type: number\n                          type: object\n                      type: object\n                  type: object\n                type:\n                  description: The type of On Demand page.\n                  enum:\n                    - film\n                    - series\n                  type: string\n              required:\n                - content_rating\n                - description\n                - name\n                - type\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/on-demand-page\"\n          description: The On Demand page was created.\n      summary: Create an On Demand page\n      tags:\n        - On Demand\\Essentials\n  \"/users/{user_id}/ondemand/purchases\":\n    get:\n      operationId: check_if_vod_was_purchased\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: \"#/components/schemas/on-demand-page\"\n          description: You have purchased the On Demand page.\n        \"403\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The requested user isn't the same as the authenticated user.\n        \"404\":\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such user or On Demand page exists.\n      security:\n        - oauth2:\n            - purchased\n      summary: Check if a user has made a purchase or rental from an On Demand page\n      tags:\n        - On Demand\\Purchases and Rentals\n  \"/users/{user_id}/pictures\":\n    get:\n      operationId: get_pictures\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/picture\"\n                type: array\n          description: The pictures were returned.\n      summary: Get all the pictures that belong to a user\n      tags:\n        - Users\\Pictures\n    post:\n      operationId: create_picture\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The user picture was created.\n      security:\n        - oauth2:\n            - upload\n      summary: Add a user picture\n      tags:\n        - Users\\Pictures\n  \"/users/{user_id}/pictures/{portraitset_id}\":\n    delete:\n      operationId: delete_picture\n      parameters:\n        - description: The ID of the picture.\n          in: path\n          name: portraitset_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"204\":\n          description: The picture was deleted.\n      security:\n        - oauth2:\n            - delete\n      summary: Delete a user picture\n      tags:\n        - Users\\Pictures\n    get:\n      operationId: get_picture\n      parameters:\n        - description: The ID of the picture.\n          in: path\n          name: portraitset_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The picture was returned.\n      summary: Get a specific user picture\n      tags:\n        - Users\\Pictures\n    patch:\n      operationId: edit_picture\n      parameters:\n        - description: The ID of the picture.\n          in: path\n          name: portraitset_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.picture+json:\n            schema:\n              properties:\n                active:\n                  description: Whether the picture is the user's active portrait.\n                  example: \"true\"\n                  type: boolean\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The picture was edited.\n      security:\n        - oauth2:\n            - edit\n      summary: Edit a user picture\n      tags:\n        - Users\\Pictures\n  \"/users/{user_id}/portfolios\":\n    get:\n      operationId: get_portfolios\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.portfolio+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/portfolio\"\n                type: array\n          description: The portfolios were returned.\n      summary: Get all the portfolios that belong to a user\n      tags:\n        - Portfolios\\Essentials\n  \"/users/{user_id}/portfolios/{portfolio_id}\":\n    get:\n      operationId: get_portfolio\n      parameters:\n        - description: The ID of the portfolio.\n          in: path\n          name: portfolio_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.portfolio+json:\n              schema:\n                $ref: \"#/components/schemas/portfolio\"\n          description: The portfolio was returned.\n      summary: Get a specific portfolio\n      tags:\n        - Portfolios\\Essentials\n  \"/users/{user_id}/portfolios/{portfolio_id}/videos\":\n    get:\n      operationId: get_portfolio_videos\n      parameters:\n        - description: The ID of the portfolio.\n          in: path\n          name: portfolio_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The page that contains the video URI.\n          in: query\n          name: containing_uri\n          required: false\n          schema:\n            example: /videos/258684937\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - embeddable\n            type: string\n        - description: Whether to filter the results by embeddable videos (`true`) or\n            non-embeddable videos (`false`). Required only if **filter** is\n            `embeddable`.\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            example: \"true\"\n            type: boolean\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: \u003e\n            The way to sort the results.\n\n\n            Option descriptions:\n             * `default` - This will sort to the default sort set on the portfolio.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - default\n              - likes\n              - manual\n              - plays\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n      summary: Get all the videos in a portfolio\n      tags:\n        - Portfolios\\Videos\n  \"/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}\":\n    delete:\n      operationId: delete_video_from_portfolio\n      parameters:\n        - description: The ID of the portfolio.\n          in: path\n          name: portfolio_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was deleted.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The portfolio wasn't found, or the video wasn't found.\n      security:\n        - oauth2:\n            - edit\n      summary: Remove a video from a portfolio\n      tags:\n        - Portfolios\\Videos\n    get:\n      operationId: get_portfolio_video\n      parameters:\n        - description: The ID of the portfolio.\n          in: path\n          name: portfolio_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: The video was returned.\n      summary: Get a specific video in a portfolio\n      tags:\n        - Portfolios\\Videos\n    put:\n      operationId: add_video_to_portfolio\n      parameters:\n        - description: The ID of the portfolio.\n          in: path\n          name: portfolio_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was added.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The portfolio wasn't found, or the video wasn't found.\n      security:\n        - oauth2:\n            - edit\n      summary: Add a video to a portfolio\n      tags:\n        - Portfolios\\Videos\n  \"/users/{user_id}/presets\":\n    get:\n      operationId: get_embed_presets\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.preset+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/presets\"\n                type: array\n          description: The embed presets were returned.\n      summary: Get all the embed presets that a user has created\n      tags:\n        - Embed Presets\\Essentials\n  \"/users/{user_id}/presets/{preset_id}\":\n    get:\n      operationId: get_embed_preset\n      parameters:\n        - description: The ID of the preset.\n          in: path\n          name: preset_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.preset+json:\n              schema:\n                $ref: \"#/components/schemas/presets\"\n          description: The embed preset was returned.\n      summary: Get a specific embed preset\n      tags:\n        - Embed Presets\\Essentials\n    patch:\n      operationId: edit_embed_preset\n      parameters:\n        - description: The ID of the preset.\n          in: path\n          name: preset_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.preset+json:\n            schema:\n              properties:\n                outro:\n                  description: Disable the outro.\n                  enum:\n                    - nothing\n                  type: string\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.preset+json:\n              schema:\n                $ref: \"#/components/schemas/presets\"\n          description: The embed preset was edited.\n        \"400\":\n          content:\n            application/vnd.vimeo.preset+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The outro type is invalid.\n        \"404\":\n          content:\n            application/vnd.vimeo.preset+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: |-\n            * The preset doesn't exist.\n            * The authenticated user doesn't own the preset.\n      summary: Edit an embed preset\n      tags:\n        - Embed Presets\\Essentials\n  \"/users/{user_id}/presets/{preset_id}/videos\":\n    get:\n      operationId: get_embed_preset_videos\n      parameters:\n        - description: The ID of the preset.\n          in: path\n          name: preset_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n      summary: Get all the videos that have been added to an embed preset\n      tags:\n        - Embed Presets\\Videos\n  \"/users/{user_id}/projects\":\n    get:\n      description: This method gets all the projects that belong to the specified user.\n      operationId: get_projects\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - date\n              - default\n              - modified_time\n              - name\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/project\"\n                type: array\n          description: The projects were returned.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8000: The user credentials are invalid.\"\n      security:\n        - oauth2:\n            - private\n      summary: Get all the projects that belong to a user\n      tags:\n        - Projects\\Essentials\n    post:\n      description: This method creates a new project for the specified user.\n      operationId: create_project\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  description: The name of the project.\n                  example: Rough cuts\n                  type: string\n              required:\n                - name\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/project\"\n          description: The project was created.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: |-\n            * Error code 2205: The input is empty.\n            * Error code 2204: The input is invalid.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8000: The user credentials are invalid.\"\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3200: The authenticated user can't create projects.\"\n      security:\n        - oauth2:\n            - create\n      summary: Create a project\n      tags:\n        - Projects\\Essentials\n  \"/users/{user_id}/projects/{project_id}\":\n    delete:\n      description: This method deletes a project and optionally also the videos that it\n        contains.\n      operationId: delete_project\n      parameters:\n        - description: The ID of the project.\n          in: path\n          name: project_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: Whether to delete all the videos in the project along with the\n            project itself.\n          in: query\n          name: should_delete_clips\n          required: false\n          schema:\n            example: \"true\"\n            type: boolean\n      responses:\n        \"204\":\n          description: The project was deleted.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8000: The user credentials are invalid.\"\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3200: The authenticated user can't delete the project.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 5000: No such project exists.\"\n      security:\n        - oauth2:\n            - delete\n      summary: Delete a project\n      tags:\n        - Projects\\Essentials\n    get:\n      description: This method gets a single project that belongs to the specified user.\n      operationId: get_project\n      parameters:\n        - description: The ID of the project.\n          in: path\n          name: project_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/project\"\n          description: The project was returned.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8000: The user credentials are invalid.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 5000: No such project exists.\"\n      security:\n        - oauth2:\n            - private\n      summary: Get a specific project\n      tags:\n        - Projects\\Essentials\n    patch:\n      description: This method edits an existing project.\n      operationId: edit_project\n      parameters:\n        - description: The ID of the project.\n          in: path\n          name: project_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  description: The name of the project.\n                  example: Rough cuts\n                  type: string\n              required:\n                - name\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/project\"\n          description: The project was edited.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: |-\n            * Error code 2204: The input is invalid.\n            * Error code 2205: The input is empty.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8000: The user credentials are invalid.\"\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3200: The authenticated user can't edit the project.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 5000: No such project exists.\"\n      security:\n        - oauth2:\n            - edit\n      summary: Edit a project\n      tags:\n        - Projects\\Essentials\n  \"/users/{user_id}/projects/{project_id}/videos\":\n    delete:\n      description: This method removed multiple videos from the specified project.\n      operationId: remove_videos_from_project\n      parameters:\n        - description: The ID of the project.\n          in: path\n          name: project_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: Whether to delete the videos when removing them from the project.\n          in: query\n          name: should_delete_clips\n          required: false\n          schema:\n            example: \"false\"\n            type: boolean\n        - description: A comma-separated list of the video URIs to remove.\n          in: query\n          name: uris\n          required: true\n          schema:\n            example: /videos/258684937,/videos/273576296\n            type: string\n      responses:\n        \"204\":\n          description: The videos were removed.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 2204: The input is invalid.\"\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8000: The user credentials are invalid.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 5000: No such project exists.\"\n      security:\n        - oauth2:\n            - interact\n      summary: Remove a list of videos from a project\n      tags:\n        - Projects\\Videos\n    get:\n      description: This method gets all the videos that belong to the specified project.\n      operationId: get_project_videos\n      parameters:\n        - description: The ID of the project.\n          in: path\n          name: project_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n              - default\n              - duration\n              - last_user_action_event_date\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8000: The user credentials are invalid.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 5000: No such project exists.\"\n      security:\n        - oauth2:\n            - private\n      summary: Get all the videos in a project\n      tags:\n        - Projects\\Videos\n    put:\n      description: This method adds multiple videos to the specified project.\n      operationId: add_videos_to_project\n      parameters:\n        - description: The ID of the project.\n          in: path\n          name: project_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: A comma-separated list of video URIs to add.\n          in: query\n          name: uris\n          required: true\n          schema:\n            example: /videos/258684937,/videos/273576296\n            type: string\n      responses:\n        \"204\":\n          description: The videos were added.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 2204: The input is invalid.\"\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8000: The user credentials are invalid.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 5000: No such project or video exists.\"\n      security:\n        - oauth2:\n            - interact\n      summary: Add a list of videos to a project\n      tags:\n        - Projects\\Videos\n  \"/users/{user_id}/projects/{project_id}/videos/{video_id}\":\n    delete:\n      description: This method removes a single video from the specified project.\n      operationId: remove_video_from_project\n      parameters:\n        - description: The ID of the project.\n          in: path\n          name: project_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was removed.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 2204: The input is invalid.\"\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8000: The user credentials are invalid.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 5000: No such video exists in the project.\"\n      security:\n        - oauth2:\n            - delete\n      summary: Remove a specific video from a project\n      tags:\n        - Projects\\Videos\n    put:\n      description: This method adds a single video to the specified project.\n      operationId: add_video_to_project\n      parameters:\n        - description: The ID of the project.\n          in: path\n          name: project_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was added.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 5000: No such user, project, or video exists.\"\n      security:\n        - oauth2:\n            - interact\n      summary: Add a specific video to a project\n      tags:\n        - Projects\\Videos\n  \"/users/{user_id}/uploads/{upload}\":\n    delete:\n      operationId: complete_streaming_upload\n      parameters:\n        - description: The ID of the upload attempt.\n          in: path\n          name: upload\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The crypto signature of the completed upload.\n          in: query\n          name: signature\n          required: true\n          schema:\n            example: cd89a20adde7a608f3331e71c37bdfa087bacbf3\n            type: string\n        - description: The ID of the uploaded file.\n          in: query\n          name: video_file_id\n          required: true\n          schema:\n            example: 1234\n            type: number\n      responses:\n        \"201\":\n          description: The streaming upload is complete.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 2502: The format of the video file is invalid.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: |-\n            * Error code 5006: The video file doesn't exist.\n            * Error code 5007: The signature doesn't exist.\n            * Error code 8400: The signature is invalid.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 4011: The upload server returns an HTTP status code\n            other than 200.\"\n      security:\n        - oauth2:\n            - upload\n      summary: Complete a user's streaming upload\n      tags:\n        - Videos\\Upload\n    get:\n      operationId: get_upload_attempt\n      parameters:\n        - description: The ID of the upload attempt.\n          in: path\n          name: upload\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.uploadattempt+json:\n              schema:\n                $ref: \"#/components/schemas/upload-attempt\"\n          description: The upload attempt was returned.\n      security:\n        - oauth2:\n            - upload\n      summary: Get a user's upload attempt\n      tags:\n        - Videos\\Upload\n  \"/users/{user_id}/videos\":\n    get:\n      operationId: get_videos\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The page that contains the video URI. Only available when not paired\n            with `query`.\n          in: query\n          name: containing_uri\n          required: false\n          schema:\n            example: /videos/258684937\n            type: string\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - app_only\n              - embeddable\n              - featured\n              - playable\n            type: string\n        - description: Whether to filter the results by embeddable videos (`true`) or\n            non-embeddable videos (`false`). Required only if **filter** is\n            `embeddable`.\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            example: \"true\"\n            type: boolean\n        - description: Whether to filter by all playable videos or by all videos that are\n            not  playable.\n          in: query\n          name: filter_playable\n          required: false\n          schema:\n            example: \"true\"\n            type: boolean\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - default\n              - duration\n              - last_user_action_event_date\n              - likes\n              - modified_time\n              - plays\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n        \"304\":\n          description: This user hasn't created any videos since the given\n            `If-Modified-Since` header.\n      summary: Get all the videos that a user has uploaded\n      tags:\n        - Videos\\Essentials\n    post:\n      description: Begin the video upload process. For more information, see our [upload\n        documentation](https://developer.vimeo.com/api/upload/videos).\n      operationId: upload_video\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.video+json:\n            schema:\n              properties:\n                content_rating:\n                  description: A list of values describing the content in this video. Find\n                    the full list in the\n                    [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings)\n                    endpoint.\n                  items:\n                    type: string\n                  type: array\n                description:\n                  description: The description of the video.\n                  example: A celebration of 10 years of Staff Picks.\n                  type: string\n                embed:\n                  properties:\n                    buttons:\n                      properties:\n                        embed:\n                          description: Show or hide the Embed button.\n                          example: \"true\"\n                          type: boolean\n                        fullscreen:\n                          description: Show or hide the Fullscreen button.\n                          example: \"true\"\n                          type: boolean\n                        hd:\n                          description: Show or hide the HD button.\n                          example: \"true\"\n                          type: boolean\n                        like:\n                          description: Show or hide the Like button.\n                          example: \"true\"\n                          type: boolean\n                        scaling:\n                          description: Show or hide the Scaling button (shown only in\n                            Fullscreen mode).\n                          example: \"true\"\n                          type: boolean\n                        share:\n                          description: Show or hide the Share button.\n                          example: \"true\"\n                          type: boolean\n                        watchlater:\n                          description: Show or hide the Watch Later button.\n                          example: \"true\"\n                          type: boolean\n                      type: object\n                    color:\n                      description: The main color of the embed player.\n                      example: \"#1ab7ea\"\n                      type: string\n                    logos:\n                      properties:\n                        custom:\n                          properties:\n                            active:\n                              description: Show or hide your custom logo.\n                              example: \"true\"\n                              type: boolean\n                            link:\n                              description: The URL that loads when the user clicks your\n                                custom logo.\n                              example: https://example.com\n                              type: string\n                            sticky:\n                              description: Whether always to show the custom logo or to\n                                hide it after time with the rest of the UI.\n                              example: \"true\"\n                              type: boolean\n                          type: object\n                        vimeo:\n                          description: Show or hide the Vimeo logo.\n                          example: \"true\"\n                          type: boolean\n                      type: object\n                    playbar:\n                      description: Show or hide the playbar.\n                      example: \"true\"\n                      type: boolean\n                    title:\n                      properties:\n                        name:\n                          description: Show or hide the video title, or enable the user to\n                            determine whether the video title appears.\n                          enum:\n                            - hide\n                            - show\n                            - user\n                          type: string\n                        owner:\n                          description: Show or hide the owner information, or enable the\n                            user to determine whether the owner information\n                            appears.\n                          enum:\n                            - hide\n                            - show\n                            - user\n                          type: string\n                        portrait:\n                          description: Show or hide the owner portrait, or enable the user\n                            to determine whether the owner portrait appears.\n                          enum:\n                            - hide\n                            - show\n                            - user\n                          type: string\n                      type: object\n                    volume:\n                      description: Show or hide the volume selector.\n                      example: \"true\"\n                      type: boolean\n                  type: object\n                license:\n                  description: The Creative Commons license.\n                  enum:\n                    - by\n                    - by-nc\n                    - by-nc-nd\n                    - by-nc-sa\n                    - by-nd\n                    - by-sa\n                    - cc0\n                  type: string\n                locale:\n                  description: The video's default language. For a full list of valid\n                    languages, use the\n                    [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages)\n                    endpoint.\n                  example: en_US\n                  type: string\n                name:\n                  description: The title of the video.\n                  example: Celebrating 10 Years of Staff Picks\n                  type: string\n                password:\n                  description: The password. When you set `privacy.view` to `password`, you\n                    must provide the password as an additional parameter.\n                  example: hunter1\n                  type: string\n                privacy:\n                  properties:\n                    add:\n                      description: Whether a user can add the video to an album, channel,\n                        or group.\n                      example: \"true\"\n                      type: boolean\n                    comments:\n                      description: The privacy level required to comment on the video.\n                      enum:\n                        - anybody\n                        - contacts\n                        - nobody\n                      type: string\n                    download:\n                      description: Whether a user can download the video. Not available to\n                        users with a Basic membership\n                      example: \"true\"\n                      type: boolean\n                    embed:\n                      description: The video's embed settings. The `whitelist` value\n                        enables you to define all valid embed domains. See our\n                        [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains)\n                        for details on adding and removing domains.\n                      enum:\n                        - private\n                        - public\n                        - whitelist\n                      type: string\n                    view:\n                      description: The video's privacy setting. When privacy is `users`,\n                        `application/json` is the only valid content type. Basic\n                        users can't set privacy to `unlisted`.\n                      enum:\n                        - anybody\n                        - contacts\n                        - disable\n                        - nobody\n                        - password\n                        - unlisted\n                        - users\n                      type: string\n                  type: object\n                ratings:\n                  properties:\n                    mpaa:\n                      properties:\n                        reason:\n                          description: |\n                            The reason for the video's MPAA rating.\n\n                            Option descriptions:\n                             * `at` - Adult themes\n                             * `bn` - Brief nudity\n                             * `n` - Nudity\n                             * `sl` - Strong language\n                             * `ss` - Sexual situations\n                             * `v` - Violence\n                          enum:\n                            - at\n                            - bn\n                            - n\n                            - sl\n                            - ss\n                            - v\n                          type: string\n                      type: object\n                    tv:\n                      properties:\n                        reason:\n                          description: |\n                            The reason for the video's TV rating.\n\n                            Option descriptions:\n                             * `d` - Suggestive dialogue\n                             * `fv` - Fantasy violence\n                             * `l` - Language\n                             * `ss` - Sexual situations\n                             * `v` - Violence\n                          enum:\n                            - d\n                            - fv\n                            - l\n                            - ss\n                            - v\n                          type: string\n                      type: object\n                  type: object\n                review_page:\n                  properties:\n                    active:\n                      description: Enable or disable video review.\n                      example: \"true\"\n                      type: boolean\n                  type: object\n                spatial:\n                  properties:\n                    director_timeline:\n                      description: The 360 director timeline.\n                      items:\n                        properties:\n                          pitch:\n                            description: The timeline pitch. This value must be between -90\n                              and 90.\n                            example: 70\n                            type: number\n                          roll:\n                            description: The timeline roll.\n                            type: number\n                          time_code:\n                            description: The 360 director timeline time code.\n                            example: 5\n                            type: number\n                          yaw:\n                            description: The timeline yaw. This value must be between 0 and\n                              360.\n                            example: 125\n                            type: number\n                        required:\n                          - pitch\n                          - time_code\n                          - yaw\n                        type: object\n                      type: array\n                    field_of_view:\n                      description: \"The 360 field of view: default 50, minimum 30, maximum\n                        90.\"\n                      example: 50\n                      type: number\n                    projection:\n                      description: The 360 spatial projection.\n                      enum:\n                        - cubical\n                        - cylindrical\n                        - dome\n                        - equirectangular\n                        - pyramid\n                      type: string\n                    stereo_format:\n                      description: The 360 spatial stereo format.\n                      enum:\n                        - left-right\n                        - mono\n                        - top-bottom\n                      type: string\n                  type: object\n                upload:\n                  properties:\n                    approach:\n                      description: The upload approach.\n                      enum:\n                        - post\n                        - pull\n                        - streaming\n                        - tus\n                      type: string\n                    link:\n                      description: The public URL at which the video is hosted. The URL\n                        must be valid for at least 24 hours. Use this parameter\n                        when `approach` is `pull`.\n                      example: https://example.com/video.mp4\n                      type: string\n                    redirect_url:\n                      description: The app's redirect URL. Use this parameter when\n                        `approach` is `post`.\n                      example: https://example.com\n                      type: string\n                    size:\n                      description: The size in bytes of the video to upload.\n                      example: \"13623861\"\n                      type: string\n                  required:\n                    - approach\n                  type: object\n              required:\n                - upload\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: The upload procedure has begun.\n        \"400\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \u003e-\n            * Error code 2205: The body of the request isn't formatted properly.\n\n            * Error code 2204: The request contains invalid parameters.\n\n            * Error code 2204: The request contains invalid body parameters.\n\n            * Error code 2230: The upload type is invalid.\n\n            * Error code 3116: If a `type` payload parameter was supplied instead of `upload.approach`.\n        \"401\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8002: No user is associated with the authentication\n            token.\"\n        \"403\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: |-\n            * Error code 4102: The user's allotted quota has been reached.\n            * Error code 4101: The user's maximum disk space has been reached.\n        \"500\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 4003: There is a problem initiating the upload.\"\n      summary: Upload a video\n      tags:\n        - Videos\\Upload\n  \"/users/{user_id}/videos/{video_id}\":\n    get:\n      operationId: check_if_user_owns_video\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: The user owns the video.\n        \"404\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user doesn't own the video.\n      summary: Check if a user owns a video\n      tags:\n        - Videos\\Essentials\n  \"/users/{user_id}/watchlater\":\n    get:\n      operationId: get_watch_later_queue\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - embeddable\n            type: string\n        - description: Whether to filter the results by embeddable videos (`true`) or\n            non-embeddable videos (`false`). Required only if **filter** is\n            `embeddable`.\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            example: \"true\"\n            type: boolean\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - duration\n              - likes\n              - plays\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The videos were returned.\n        \"304\":\n          description: The user hasn't added any videos to their Watch Later queue since\n            the given `If-Modified-Since` header.\n      security:\n        - oauth2:\n            - private\n      summary: Get all the videos in a user's Watch Later queue\n      tags:\n        - Watch Later Queue\\Essentials\n  \"/users/{user_id}/watchlater/{video_id}\":\n    delete:\n      operationId: delete_video_from_watch_later\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was deleted.\n      security:\n        - oauth2:\n            - interact\n      summary: Remove a video from a user's Watch Later queue\n      tags:\n        - Watch Later Queue\\Essentials\n    get:\n      operationId: check_watch_later_queue\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: The video appears in the user's Watch Later queue.\n        \"404\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The video doesn't appear in the user's Watch Later queue.\n      security:\n        - oauth2:\n            - private\n      summary: Check if a user has added a specific video to their Watch Later queue\n      tags:\n        - Watch Later Queue\\Essentials\n    put:\n      operationId: add_video_to_watch_later\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was added.\n      security:\n        - oauth2:\n            - interact\n      summary: Add a video to a user's Watch Later queue\n      tags:\n        - Watch Later Queue\\Essentials\n  /videos:\n    get:\n      operationId: search_videos\n      parameters:\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The attribute by which to filter the results. `CC` and related\n            filters target videos with the corresponding Creative Commons\n            licenses. For more information, see our [Creative\n            Commons](https://vimeo.com/creativecommons) page.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - CC\n              - CC-BY\n              - CC-BY-NC\n              - CC-BY-NC-ND\n              - CC-BY-NC-SA\n              - CC-BY-ND\n              - CC-BY-SA\n              - CC0\n              - categories\n              - duration\n              - in-progress\n              - minimum_likes\n              - trending\n              - upload_date\n            type: string\n        - description: A comma-separated list of video URLs to find.\n          in: query\n          name: links\n          required: false\n          schema:\n            example: https://vimeo.com/122375452,https://vimeo.com/273576296\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: Search query.\n          in: query\n          name: query\n          required: true\n          schema:\n            example: staff picks\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - duration\n              - likes\n              - plays\n              - relevant\n            type: string\n        - description: The comma-separated list of videos to find.\n          in: query\n          name: uris\n          required: false\n          schema:\n            example: /videos/122375452,/videos/273576296\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The search results were returned.\n        \"400\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \u003e-\n            * Error code 2101: Either the `uris` or `links` parameter has\n            filtering or sorting arguments.\n\n            * Error code 2204: There is a problem with the batch request.\n        \"503\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: |-\n            * Search is disabled.\n            * Error code 7300: There was an internal search error.\n      summary: Search for videos\n      tags:\n        - Videos\\Essentials\n  \"/videos/{video_id}\":\n    delete:\n      operationId: delete_video\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was deleted.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user doesn't own the video and can't delete it.\n      security:\n        - oauth2:\n            - delete\n      summary: Delete a video\n      tags:\n        - Videos\\Essentials\n    get:\n      operationId: get_video\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: The video was returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such video exists.\n      summary: Get a specific video\n      tags:\n        - Videos\\Essentials\n    patch:\n      operationId: edit_video\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.video+json:\n            schema:\n              properties:\n                content_rating:\n                  description: A list of values describing the content in this video. You\n                    can find the full list in the\n                    [`/contentratings`](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings)\n                    endpoint.\n                  items:\n                    type: string\n                  type: array\n                description:\n                  description: The new description of the video.\n                  example: A celebration of 10 years of Staff Picks.\n                  type: string\n                embed:\n                  properties:\n                    buttons:\n                      properties:\n                        embed:\n                          description: Show or hide the Embed button.\n                          example: \"true\"\n                          type: boolean\n                        fullscreen:\n                          description: Show or hide the Fullscreen button.\n                          example: \"true\"\n                          type: boolean\n                        hd:\n                          description: Show or hide the HD button.\n                          example: \"true\"\n                          type: boolean\n                        like:\n                          description: Show or hide the Like button.\n                          example: \"true\"\n                          type: boolean\n                        scaling:\n                          description: Show or hide the Scaling button (shown only in\n                            Fullscreen mode).\n                          example: \"true\"\n                          type: boolean\n                        share:\n                          description: Show or hide the Share button.\n                          example: \"true\"\n                          type: boolean\n                        watchlater:\n                          description: Show or hide the Watch Later button.\n                          example: \"true\"\n                          type: boolean\n                      type: object\n                    color:\n                      description: The main color of the embed player.\n                      example: \"#1ab7ea\"\n                      type: string\n                    logos:\n                      properties:\n                        custom:\n                          properties:\n                            active:\n                              description: Show or hide your custom logo.\n                              example: \"true\"\n                              type: boolean\n                            link:\n                              description: The URL that loads when the user clicks your\n                                custom logo.\n                              example: https://example.com\n                              type: string\n                            sticky:\n                              description: Whether always to show the custom logo or to\n                                hide it after time with the rest of the UI.\n                              example: \"true\"\n                              type: boolean\n                          type: object\n                        vimeo:\n                          description: Show or hide the Vimeo logo.\n                          example: \"true\"\n                          type: boolean\n                      type: object\n                    playbar:\n                      description: Show or hide the playbar.\n                      example: \"true\"\n                      type: boolean\n                    title:\n                      properties:\n                        name:\n                          description: Show or hide the video title, or enable the user to\n                            determine whether the video title appears.\n                          enum:\n                            - hide\n                            - show\n                            - user\n                          type: string\n                        owner:\n                          description: Show or hide the owner information, or enable the\n                            user to determine whether the owner information\n                            appears.\n                          enum:\n                            - hide\n                            - show\n                            - user\n                          type: string\n                        portrait:\n                          description: Show or hide the owner portrait, or enable the user\n                            to determine whether the owner portrait appears.\n                          enum:\n                            - hide\n                            - show\n                            - user\n                          type: string\n                      type: object\n                    volume:\n                      description: Show or hide the volume selector.\n                      example: \"true\"\n                      type: boolean\n                  type: object\n                license:\n                  description: The Creative Commons license.\n                  enum:\n                    - by\n                    - by-nc\n                    - by-nc-nd\n                    - by-nc-sa\n                    - by-nd\n                    - by-sa\n                    - cc0\n                  type: string\n                locale:\n                  description: The video's default language. For a full list of valid\n                    languages, use the\n                    [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages)\n                    endpoint.\n                  example: en-US\n                  type: string\n                name:\n                  description: The new title for the video.\n                  example: Celebrating 10 Years of Staff Picks\n                  type: string\n                password:\n                  description: The password. When you set `privacy.view` to `password`, you\n                    must provide the password as an additional parameter.\n                  example: hunter1\n                  type: string\n                privacy:\n                  properties:\n                    add:\n                      description: Whether a user can add the video to an album, channel,\n                        or group.\n                      example: \"true\"\n                      type: boolean\n                    comments:\n                      description: The privacy level required to comment on the video.\n                      enum:\n                        - anybody\n                        - contacts\n                        - nobody\n                      type: string\n                    download:\n                      description: Whether a user can download the video. Not available to\n                        users with a Basic membership.\n                      example: \"true\"\n                      type: boolean\n                    embed:\n                      description: The video's new embed settings. The `whitelist` value\n                        enables you to define all valid embed domains. See our\n                        [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains)\n                        for details on adding and removing domains.\n                      enum:\n                        - private\n                        - public\n                        - whitelist\n                      type: string\n                    view:\n                      description: The video's new privacy setting. When privacy is\n                        `users`, `application/json` is the only valid content\n                        type. Basic users can't set privacy to `unlisted`.\n                      enum:\n                        - anybody\n                        - contacts\n                        - disable\n                        - nobody\n                        - password\n                        - unlisted\n                        - users\n                      type: string\n                  type: object\n                ratings:\n                  properties:\n                    mpaa:\n                      properties:\n                        reason:\n                          description: |\n                            The reason for the video's MPAA rating.\n\n                            Option descriptions:\n                             * `at` - Adult themes\n                             * `bn` - Brief nudity\n                             * `n` - Nudity\n                             * `sl` - Strong language\n                             * `ss` - Sexual situations\n                             * `v` - Violence\n                          enum:\n                            - at\n                            - bn\n                            - n\n                            - sl\n                            - ss\n                            - v\n                          type: string\n                      type: object\n                    tv:\n                      properties:\n                        reason:\n                          description: |\n                            The reason for the video's TV rating.\n\n                            Option descriptions:\n                             * `d` - Suggestive dialogue\n                             * `fv` - Fantasy violence\n                             * `l` - Language\n                             * `ss` - Sexual situations\n                             * `v` - Violence\n                          enum:\n                            - d\n                            - fv\n                            - l\n                            - ss\n                            - v\n                          type: string\n                      type: object\n                  type: object\n                review_page:\n                  properties:\n                    active:\n                      description: Enable or disable video review.\n                      example: \"true\"\n                      type: boolean\n                  type: object\n                spatial:\n                  properties:\n                    director_timeline:\n                      description: The 360 director timeline.\n                      items:\n                        properties:\n                          pitch:\n                            description: The timeline pitch. This value must be between -90\n                              and 90.\n                            example: 70\n                            type: number\n                          roll:\n                            description: The timeline roll.\n                            type: number\n                          time_code:\n                            description: The 360 director timeline time code.\n                            example: 5\n                            type: number\n                          yaw:\n                            description: The timeline yaw. This value must be between 0 and\n                              360.\n                            example: 125\n                            type: number\n                        required:\n                          - pitch\n                          - time_code\n                          - yaw\n                        type: object\n                      type: array\n                    field_of_view:\n                      description: \"The 360 field of view: default 50, minimum 30, maximum\n                        90.\"\n                      example: 50\n                      type: number\n                    projection:\n                      description: The 360 spatial projection.\n                      enum:\n                        - cubical\n                        - cylindrical\n                        - dome\n                        - equirectangular\n                        - pyramid\n                      type: string\n                    stereo_format:\n                      description: The 360 spatial stereo format.\n                      enum:\n                        - left-right\n                        - mono\n                        - top-bottom\n                      type: string\n                  type: object\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: The video was edited.\n        \"400\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: A parameter is invalid.\n        \"403\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: \u003e-\n            * The authenticated user doesn't own the video.\n\n            * The `privacy` field is `disable` and the authenticated user can't set extra embed options.\n\n            * The `privacy` field is `contacts` and the authenticated user can't follow creators.\n\n            * The authenticated user has an opted-out PRO account and `privacy.view` is `users`, `password`, `nobody`, or `public`.\n      security:\n        - oauth2:\n            - edit\n      summary: Edit a video\n      tags:\n        - Videos\\Essentials\n  \"/videos/{video_id}/available_channels\":\n    get:\n      operationId: get_available_video_channels\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/channel\"\n                type: array\n          description: The channels were returned.\n        \"403\":\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't add or remove this video from any\n            channel.\n        \"404\":\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user can't moderate channels.\n      summary: Get all the channels to which a user can add or remove a specific video\n      tags:\n        - Channels\\Videos\n  \"/videos/{video_id}/categories\":\n    get:\n      operationId: get_video_categories\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/category\"\n                type: array\n          description: The categories were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such video exists.\n      summary: Get all the categories to which a video belongs\n      tags:\n        - Categories\\Videos\n    put:\n      description: \u003e-\n        With this method, you can suggest up to two categories and one\n        subcategory for a video. Vimeo makes the final determination about\n        whether the video\n\n        belongs in these categories.\n      operationId: suggest_video_category\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.category+json:\n            schema:\n              properties:\n                category:\n                  description: The array of the names of the categories that you're\n                    suggesting.\n                  items:\n                    type: string\n                  type: array\n              required:\n                - category\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: \"#/components/schemas/category\"\n          description: The categories were suggested.\n        \"403\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: You don't own this video.\n        \"404\":\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such video exists, or no such category exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Suggest categories for a video\n      tags:\n        - Categories\\Videos\n  \"/videos/{video_id}/comments\":\n    get:\n      operationId: get_comments\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/comment\"\n                type: array\n          description: The comments were returned.\n      summary: Get all the comments on a video\n      tags:\n        - Videos\\Comments\n    post:\n      operationId: create_comment\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.comment+json:\n            schema:\n              properties:\n                text:\n                  description: The text of the comment.\n                  example: I love this!\n                  type: string\n              required:\n                - text\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: \"#/components/schemas/comment\"\n          description: The comment was added.\n        \"400\":\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 2207: The comment text is missing.\"\n        \"401\":\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 8003: The user credentials are invalid.\"\n        \"403\":\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: |-\n            * Error code 3413: Comments are disabled for this video.\n            * Error code 3411: The authenticated user is unverified.\n            * Error code 3412: The authenticated user can't comment.\n            * Error code 3301: The comment was flagged as spam.\n      security:\n        - oauth2:\n            - interact\n      summary: Add a comment to a video\n      tags:\n        - Videos\\Comments\n  \"/videos/{video_id}/comments/{comment_id}\":\n    delete:\n      operationId: delete_comment\n      parameters:\n        - description: The ID of the comment.\n          in: path\n          name: comment_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The comment was deleted.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3415: The authenticated user didn't write this comment\n            and can't delete it.\"\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: |-\n            * No such video or comment exists.\n            * Error code 5000: The deleted comment still exists.\n      security:\n        - oauth2:\n            - delete\n      summary: Delete a video comment\n      tags:\n        - Videos\\Comments\n    get:\n      operationId: get_comment\n      parameters:\n        - description: The ID of the comment.\n          in: path\n          name: comment_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: \"#/components/schemas/comment\"\n          description: The comment was returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such video or comment exists.\n      summary: Get a specific video comment\n      tags:\n        - Videos\\Comments\n    patch:\n      operationId: edit_comment\n      parameters:\n        - description: The ID of the comment.\n          in: path\n          name: comment_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.comment+json:\n            schema:\n              properties:\n                text:\n                  description: The next text of the comment.\n                  example: I love this!\n                  type: string\n              required:\n                - text\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: \"#/components/schemas/comment\"\n          description: The comment was edited.\n        \"400\":\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 2207: The comment text is missing.\"\n        \"403\":\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \u003e-\n            * Error code 3411: The authenticated user is unverified.\n\n            * Error code 3412: The authenticated user can't post comments.\n\n            * Error code 3414: The authenticated user didn't write the comment and can't edit it.\n\n            * Error code 3301: The supplied comment was flagged as spam.\n      security:\n        - oauth2:\n            - edit\n      summary: Edit a video comment\n      tags:\n        - Videos\\Comments\n  \"/videos/{video_id}/comments/{comment_id}/replies\":\n    get:\n      operationId: get_comment_replies\n      parameters:\n        - description: The ID of the comment.\n          in: path\n          name: comment_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/comment\"\n                type: array\n          description: The replies were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such video or comment exists.\n      summary: Get all the replies to a video comment\n      tags:\n        - Videos\\Comments\n    post:\n      operationId: create_comment_reply\n      parameters:\n        - description: The ID of the comment.\n          in: path\n          name: comment_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.comment+json:\n            schema:\n              properties:\n                text:\n                  description: The reply to the comment.\n                  example: I love this!\n                  type: string\n              required:\n                - text\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: \"#/components/schemas/comment\"\n          description: The reply was added.\n        \"400\":\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 2207: The comment text is missing.\"\n        \"403\":\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: |-\n            * Error code 3413: Comments are disabled on this video.\n            * Error code 3411: The authenticated user is unverified.\n            * Error code 3412: The authenticated user can't comment.\n            * Error code 3301: The comment was flagged as spam.\n      security:\n        - oauth2:\n            - interact\n      summary: Add a reply to a video comment\n      tags:\n        - Videos\\Comments\n  \"/videos/{video_id}/credits\":\n    get:\n      operationId: get_video_credits\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The search query to use to filter the results.\n          in: query\n          name: query\n          required: false\n          schema:\n            example: Stop motion\n            type: string\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/credit\"\n                type: array\n          description: The users were returned.\n      summary: Get all the credited users in a video\n      tags:\n        - Videos\\Credits\n    post:\n      operationId: add_video_credit\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.credit+json:\n            schema:\n              properties:\n                email:\n                  description: The email address of the credited person.\n                  example: user@example.com\n                  type: string\n                name:\n                  description: The name of the credited person.\n                  example: Sam Doe\n                  type: string\n                role:\n                  description: The role of the credited person.\n                  example: Producer\n                  type: string\n                user_uri:\n                  description: The URI of the Vimeo user who should be given credit in this\n                    video.\n                  example: /users/152184\n                  type: string\n              required:\n                - email\n                - name\n                - role\n                - user_uri\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: \"#/components/schemas/credit\"\n          description: The credit was added.\n        \"400\":\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: \u003e-\n            * The credit was added.\n\n            * A parameter is invalid.\n\n            * The authenticated user has an unverified email address.\n\n            * There is a user block between the video owner and the person receiving credit.\n        \"403\":\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user doesn't own the video.\n      summary: Credit a user in a video\n      tags:\n        - Videos\\Credits\n  \"/videos/{video_id}/credits/{credit_id}\":\n    delete:\n      operationId: delete_video_credit\n      parameters:\n        - description: The ID of the credit.\n          in: path\n          name: credit_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The credit was deleted.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The authenticated user is neither the creator of the credit nor the\n            credited user.\n      security:\n        - oauth2:\n            - edit\n      summary: Delete a credit for a user in a video\n      tags:\n        - Videos\\Credits\n    get:\n      operationId: get_video_credit\n      parameters:\n        - description: The ID of the credit.\n          in: path\n          name: credit_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: \"#/components/schemas/credit\"\n          description: The credit was returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such video or credit exists.\n      summary: Get a specific credited user in a video\n      tags:\n        - Videos\\Credits\n    patch:\n      operationId: edit_video_credit\n      parameters:\n        - description: The ID of the credit.\n          in: path\n          name: credit_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.credit+json:\n            schema:\n              properties:\n                name:\n                  description: The name of the person being credited.\n                  example: Sam Doe\n                  type: string\n                role:\n                  description: The role of the person being credited.\n                  example: Producer\n                  type: string\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: \"#/components/schemas/credit\"\n          description: The credit was edited.\n        \"400\":\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: A parameter is invalid.\n        \"404\":\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such video or credit exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Edit a credit for a user in a video\n      tags:\n        - Videos\\Credits\n  \"/videos/{video_id}/likes\":\n    get:\n      operationId: get_video_likes\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n        - description: The sort direction of the results.\n          in: query\n          name: direction\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            example: asc\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n        - description: The way to sort the results.\n          in: query\n          name: sort\n          required: false\n          schema:\n            enum:\n              - alphabetical\n              - date\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/user\"\n                type: array\n          description: The users were returned.\n      summary: Get all the users who have liked a video\n      tags:\n        - Likes\\Essentials\n  \"/videos/{video_id}/pictures\":\n    get:\n      operationId: get_video_thumbnails\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/picture\"\n                type: array\n          description: The thumbnails were returned.\n      summary: Get all the thumbnails of a video\n      tags:\n        - Videos\\Thumbnails\n    post:\n      operationId: create_video_thumbnail\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.picture+json:\n            schema:\n              properties:\n                active:\n                  description: Whether the image created by the `time` field should be the\n                    default thumbnail for the video.\n                  example: \"true\"\n                  type: boolean\n                time:\n                  description: Creates an image of the video from the given time offset.\n                  example: 300\n                  type: number\n              type: object\n        required: false\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The thumbnail was created.\n      security:\n        - oauth2:\n            - upload\n      summary: Add a video thumbnail\n      tags:\n        - Videos\\Thumbnails\n  \"/videos/{video_id}/pictures/{picture_id}\":\n    delete:\n      operationId: delete_video_thumbnail\n      parameters:\n        - description: The ID of the picture.\n          in: path\n          name: picture_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The thumbnail was deleted.\n      security:\n        - oauth2:\n            - edit\n      summary: Delete a video thumbnail\n      tags:\n        - Videos\\Thumbnails\n    get:\n      operationId: get_video_thumbnail\n      parameters:\n        - description: The ID of the picture.\n          in: path\n          name: picture_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The thumbnail was returned.\n      summary: Get a video thumbnail\n      tags:\n        - Videos\\Thumbnails\n    patch:\n      operationId: edit_video_thumbnail\n      parameters:\n        - description: The ID of the picture.\n          in: path\n          name: picture_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.picture+json:\n            schema:\n              properties:\n                active:\n                  description: Whether this thumbnail is the default.\n                  example: \"true\"\n                  type: boolean\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The thumbnail was edited.\n      security:\n        - oauth2:\n            - edit\n      summary: Edit a video thumbnail\n      tags:\n        - Videos\\Thumbnails\n  \"/videos/{video_id}/presets/{preset_id}\":\n    delete:\n      operationId: delete_video_embed_preset\n      parameters:\n        - description: The ID of the preset.\n          in: path\n          name: preset_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The embed preset was unassigned.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such video or embed preset exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Remove an embed preset from a video\n      tags:\n        - Embed Presets\\Videos\n    get:\n      operationId: get_video_embed_preset\n      parameters:\n        - description: The ID of the preset.\n          in: path\n          name: preset_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The embed presets exists.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such video or embed preset exists.\n      summary: Check if an embed preset has been added to a video\n      tags:\n        - Embed Presets\\Videos\n    put:\n      operationId: add_video_embed_preset\n      parameters:\n        - description: The ID of the preset.\n          in: path\n          name: preset_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The embed preset was assigned.\n      security:\n        - oauth2:\n            - edit\n      summary: Add an embed preset to a video\n      tags:\n        - Embed Presets\\Videos\n  \"/videos/{video_id}/privacy/domains\":\n    get:\n      operationId: get_video_privacy_domains\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.domain+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/domain\"\n                type: array\n          description: The domains were returned.\n        \"403\":\n          content:\n            application/vnd.vimeo.domain+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: There are no domains on which the video can be embedded.\n      summary: Get all the domains on which a video can be embedded\n      tags:\n        - Videos\\Embed Privacy\n  \"/videos/{video_id}/privacy/domains/{domain}\":\n    delete:\n      operationId: delete_video_privacy_domain\n      parameters:\n        - description: The domain name.\n          in: path\n          name: domain\n          required: true\n          schema:\n            example: example.com\n            type: string\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video was disallowed from being embedded on the domain.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The video isn't set to a user-defined access list.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such domain exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Restrict a video from being embedded on a domain\n      tags:\n        - Videos\\Embed Privacy\n    put:\n      description: If domain privacy is enabled for this video, this method permits the\n        video to be embedded on the specified domain.\n      operationId: add_video_privacy_domain\n      parameters:\n        - description: The domain name.\n          in: path\n          name: domain\n          required: true\n          schema:\n            example: example.com\n            type: string\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The video is now embeddable on the domain.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The video doesn't have a user-defined access list.\n      security:\n        - oauth2:\n            - edit\n      summary: Permit a video to be embedded on a domain\n      tags:\n        - Videos\\Embed Privacy\n  \"/videos/{video_id}/privacy/users\":\n    get:\n      operationId: get_video_privacy_users\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/user\"\n                type: array\n          description: The users were returned.\n        \"400\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No users can view the private video.\n      summary: Get all the users who can view a user's private videos by default\n      tags:\n        - Videos\\Viewing Privacy\n    put:\n      description: \u003e-\n        The body of this request should follow our\n\n        [batch request format](https://developer.vimeo.com/api/common-formats#batch-requests). Each object must contain\n\n        a single `URI` field, and the value of this field must be the URI of the user who can view this video.\n      operationId: add_video_privacy_users\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/user\"\n                type: array\n          description: The users can now view the private video.\n      security:\n        - oauth2:\n            - edit\n      summary: Permit a list of users to view a private video\n      tags:\n        - Videos\\Viewing Privacy\n  \"/videos/{video_id}/privacy/users/{user_id}\":\n    delete:\n      operationId: delete_video_privacy_user\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The user was disallowed from viewing the private video.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The video isn't set to a user-defined access list.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such user exists.\n      security:\n        - oauth2:\n            - edit\n      summary: Restrict a user from viewing a private video\n      tags:\n        - Videos\\Viewing Privacy\n    put:\n      operationId: add_video_privacy_user\n      parameters:\n        - description: The ID of the user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            example: 152184\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/user\"\n          description: The user can now view the private video.\n        \"204\":\n          description: The user can already view this private video.\n        \"403\":\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The video doesn't have a user-defined access list.\n      security:\n        - oauth2:\n            - edit\n      summary: Permit a specific user to view a private video\n      tags:\n        - Videos\\Viewing Privacy\n  \"/videos/{video_id}/tags\":\n    get:\n      operationId: get_video_tags\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/tag\"\n                type: array\n          description: The tags were returned.\n      summary: Get all the tags of a video\n      tags:\n        - Videos\\Tags\n    put:\n      operationId: add_video_tags\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.tag+json:\n            schema:\n              properties:\n                name:\n                  description: The name of the tag to apply. See our documentation on\n                    [batch\n                    requests](https://developer.vimeo.com/api/common-formats#batch-requests)\n                    for more information.\n                  example: awesome\n                  type: string\n                page:\n                  description: The page number of the results to show.\n                  example: 1\n                  type: number\n                per_page:\n                  description: The number of items to show on each page of results, up to a\n                    maximum of 100.\n                  example: 10\n                  type: number\n              required:\n                - name\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/tag\"\n                type: array\n          description: The tags that were added.\n        \"400\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: |-\n            * The request body wasn't supplied.\n            * A parameter is invalid.\n            * The request body isn't a JSON-encoded list of tags.\n        \"403\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: |-\n            * The authenticated user can't add tags to a video.\n            * The number of tags would exceed 20.\n      security:\n        - oauth2:\n            - edit\n      summary: Add a list of tags to a video\n      tags:\n        - Videos\\Tags\n  \"/videos/{video_id}/tags/{word}\":\n    delete:\n      operationId: delete_video_tag\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n        - description: The tag word.\n          in: path\n          name: word\n          required: true\n          schema:\n            example: awesome\n            type: string\n      responses:\n        \"204\":\n          description: The tag was deleted.\n        \"400\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: |-\n            * A parameter is invalid.\n            * The tag is invalid.\n      security:\n        - oauth2:\n            - edit\n      summary: Remove a tag from a video\n      tags:\n        - Videos\\Tags\n    get:\n      operationId: check_video_for_tag\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n        - description: The tag word.\n          in: path\n          name: word\n          required: true\n          schema:\n            example: awesome\n            type: string\n      responses:\n        \"204\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/tag\"\n          description: The tag has been added.\n        \"400\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: |-\n            * A parameter is invalid.\n            * The tag is invalid.\n        \"404\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such tag exists within the video.\n      summary: Check if a tag has been added to a video\n      tags:\n        - Videos\\Tags\n    put:\n      operationId: add_video_tag\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n        - description: The tag word.\n          in: path\n          name: word\n          required: true\n          schema:\n            example: awesome\n            type: string\n      responses:\n        \"204\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/tag\"\n          description: The tag was added.\n        \"400\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: |-\n            * The tag is invalid.\n            * An unsupported parameter was supplied.\n        \"403\":\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The number of tags on the video would exceed 20.\n      security:\n        - oauth2:\n            - edit\n      summary: Add a specific tag to a video\n      tags:\n        - Videos\\Tags\n  \"/videos/{video_id}/texttracks\":\n    get:\n      operationId: get_text_tracks\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/text-track\"\n                type: array\n          description: The text tracks were returned.\n        \"404\":\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such video exists.\n      summary: Get all the text tracks of a video\n      tags:\n        - Videos\\Text Tracks\n    post:\n      description: For additional information, see our [text track upload\n        guide](https://developer.vimeo.com/api/upload/texttracks).\n      operationId: create_text_track\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.video.texttrack+json:\n            schema:\n              properties:\n                active:\n                  description: Active text tracks appear in the player and are visible to\n                    other users. Only one text track per language can be active.\n                  example: \"true\"\n                  type: boolean\n                language:\n                  description: The language of the text track. For a complete list of valid\n                    languages, use the\n                    [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages)\n                    endpoint.\n                  example: en-US\n                  type: string\n                name:\n                  description: The name of the text track.\n                  example: Commentary\n                  type: string\n                type:\n                  description: The type of the text track.\n                  enum:\n                    - captions\n                    - chapters\n                    - descriptions\n                    - metadata\n                    - subtitles\n                  type: string\n              required:\n                - language\n                - name\n                - type\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: \"#/components/schemas/text-track\"\n          description: The text track was added.\n        \"403\":\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: |-\n            * The authenticated user can't edit the text track.\n            * Error code 2204: The request contains errors.\n      security:\n        - oauth2:\n            - upload\n      summary: Add a text track to a video\n      tags:\n        - Videos\\Text Tracks\n  \"/videos/{video_id}/texttracks/{texttrack_id}\":\n    delete:\n      operationId: delete_text_track\n      parameters:\n        - description: The ID of the text track.\n          in: path\n          name: texttrack_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"204\":\n          description: The text track was deleted.\n        \"403\":\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \u003e-\n            * Error code 3430: You don't have permission to access this text\n            track.\n\n            * Error code 3431: This text track is disabled.\n        \"404\":\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: \u003e-\n            * No such video or text track exists.\n\n            * The authenticated user can't delete the text track.\n\n            * Error code 5014: The text track that you specified doesn't exist.\n\n            * Error code 5015: The text track that you specified belongs to a different video.\n      security:\n        - oauth2:\n            - delete\n      summary: Delete a text track\n      tags:\n        - Videos\\Text Tracks\n    get:\n      operationId: get_text_track\n      parameters:\n        - description: The ID of the text track.\n          in: path\n          name: texttrack_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: \"#/components/schemas/text-track\"\n          description: The text track was returned.\n        \"403\":\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \u003e-\n            * Error code 3430: You don't have permission to access this text\n            track.\n\n            * Error code 3431: This text track is disabled.\n        \"404\":\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: \u003e-\n            * No such video or text track exists.\n\n            * Error code 5014: The text track that you specified doesn't exist.\n\n            * Error code 5015: The text track that you specified belongs to a different video.\n      summary: Get a specific text track\n      tags:\n        - Videos\\Text Tracks\n    patch:\n      operationId: edit_text_track\n      parameters:\n        - description: The ID of the text track.\n          in: path\n          name: texttrack_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.video.texttrack+json:\n            schema:\n              properties:\n                active:\n                  description: Whether the text track is active, meaning that it appears in\n                    the player. Only one text track per language, and type, can\n                    be active.\n                  example: \"true\"\n                  type: boolean\n                language:\n                  description: The language of the text track. For a full list of valid\n                    languages, use the\n                    [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages)\n                    endpoint.\n                  example: en-US\n                  type: string\n                name:\n                  description: The name of the text track.\n                  example: Commentary\n                  type: string\n                type:\n                  description: The text track type.\n                  enum:\n                    - captions\n                    - chapters\n                    - descriptions\n                    - metadata\n                    - subtitles\n                  type: string\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: \"#/components/schemas/text-track\"\n          description: The text track was edited.\n        \"403\":\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: \u003e-\n            * The authenticated user can't edit the text track.\n\n            * Error code 2204: There are errors in the request.\n\n            * Error code 3430: You don't have permission to access this text track.\n\n            * Error code 3431: This text track is disabled.\n        \"404\":\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: \u003e-\n            * No such video or text track exists.\n\n            * Error code 5014: The text track that you specified doesn't exist.\n\n            * Error code 5015: The text track that you specified belongs to a different video.\n      security:\n        - oauth2:\n            - edit\n      summary: Edit a text track\n      tags:\n        - Videos\\Text Tracks\n  \"/videos/{video_id}/timelinethumbnails\":\n    post:\n      operationId: create_video_custom_logo\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: Standard request.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: If the user is attempting to upload pictures for another user's\n            videos.\n        \"404\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: No such video exists.\n      security:\n        - oauth2:\n            - upload\n      summary: Add a new custom logo to a video\n      tags:\n        - Embed Presets\\Videos\n  \"/videos/{video_id}/timelinethumbnails/{thumbnail_id}\":\n    get:\n      operationId: get_video_custom_logo\n      parameters:\n        - description: The ID of the picture.\n          in: path\n          name: thumbnail_id\n          required: true\n          schema:\n            example: 12345\n            type: number\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/picture\"\n          description: The custom logo was returned.\n        \"403\":\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: If the user isn't permitted to view this custom logo.\n      summary: Get a custom video logo\n      tags:\n        - Embed Presets\\Videos\n  \"/videos/{video_id}/versions\":\n    post:\n      operationId: create_video_version\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n      requestBody:\n        content:\n          application/vnd.vimeo.video.version+json:\n            schema:\n              properties:\n                file_name:\n                  description: The name of the version\n                  example: untitled.mp4\n                  type: string\n                upload:\n                  properties:\n                    approach:\n                      description: Upload approach\n                      enum:\n                        - post\n                        - pull\n                        - streaming\n                        - tus\n                      type: string\n                    link:\n                      description: If your upload approach is pull, Vimeo will download the\n                        video hosted at this public URL. This URL must be valid\n                        for at least 24 hours.\n                      example: https://example.com\n                      type: string\n                    redirect_url:\n                      description: The app's redirect URL. Use this parameter when\n                        `approach` is `post`.\n                      example: https://example.com\n                      type: string\n                    size:\n                      description: Upload size\n                      example: \"13623861\"\n                      type: string\n                  required:\n                    - approach\n                  type: object\n              required:\n                - file_name\n                - upload\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/vnd.vimeo.video.version+json:\n              schema:\n                $ref: \"#/components/schemas/video-versions\"\n          description: Standard request.\n        \"400\":\n          content:\n            application/vnd.vimeo.video.version+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \u003e-\n            * Error code 2204: If the request input contains invalid upload\n            data.\n\n            * Error code 2204: If the request input contains invalid versions data.\n        \"403\":\n          content:\n            application/vnd.vimeo.video.version+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \"Error code 3427: If a user isn't permitted to edit the video\"\n        \"404\":\n          content:\n            application/vnd.vimeo.video.version+json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: \u003e-\n            * Error code 5011: If an upload associated with the version isn't\n            found.\n\n            * Error code 5012: If a video associated with the upload isn't found.\n\n            * Error code 5013: If the version of the API used is less than 3.4 and isn't of approach `tus`, the endpoint isn't available.\n      summary: Add a version to a video\n      tags:\n        - Videos\\Versions\n  \"/videos/{video_id}/videos\":\n    get:\n      operationId: get_related_videos\n      parameters:\n        - description: The ID of the video.\n          in: path\n          name: video_id\n          required: true\n          schema:\n            example: 258684937\n            type: number\n        - description: The attribute by which to filter the results.\n          in: query\n          name: filter\n          required: false\n          schema:\n            enum:\n              - related\n            type: string\n        - description: The page number of the results to show.\n          in: query\n          name: page\n          required: false\n          schema:\n            example: 1\n            type: number\n        - description: The number of items to show on each page of results, up to a maximum\n            of 100.\n          in: query\n          name: per_page\n          required: false\n          schema:\n            example: 10\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/video\"\n                type: array\n          description: The related videos were returned.\n        \"400\":\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: \"#/components/schemas/legacy-error\"\n          description: The value of `filter` isn' `related`.\n      summary: Get all the related videos of a video\n      tags:\n        - Videos\\Recommendations\ncomponents:\n  schemas:\n    activity-3-1:\n      properties:\n        category:\n          allOf:\n            - $ref: \"#/components/schemas/category\"\n          description: The category that this event occurred for. This will be preset for\n            only \"category\" activity types.\n        channel:\n          allOf:\n            - $ref: \"#/components/schemas/channel\"\n          description: The channel that this event occurred for. This will be present for\n            only \"channel\" activity types.\n        clip:\n          allOf:\n            - $ref: \"#/components/schemas/video\"\n          description: Video associated with ths activity.\n        group:\n          allOf:\n            - $ref: \"#/components/schemas/group\"\n          description: The group that this event occurred for. This will be present for\n            only \"group\" activity types.\n        metadata:\n          description: The activity's metadata.\n          properties:\n            connections:\n              description: A list of resource URIs related to the activity.\n              properties:\n                related:\n                  description: Related content for this activity.\n                  nullable: true\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /users/152184/activities?offset=20\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n              required:\n                - related\n              type: object\n          required:\n            - connections\n          type: object\n        tag:\n          allOf:\n            - $ref: \"#/components/schemas/tag\"\n          description: The tag that this event occurred for. This will be present for only\n            \"tag\" activity types.\n        time:\n          description: Time that the event occurred.\n          example: 2017-05-17T17:46:09+00:00\n          type: string\n        type:\n          description: Activity type\n          enum:\n            - appearance\n            - category\n            - channel\n            - facebook_feed\n            - group\n            - like\n            - ondemand\n            - share\n            - tag\n            - twitter_timeline\n            - upload\n          example: appearance\n          type: string\n        user:\n          allOf:\n            - $ref: \"#/components/schemas/user\"\n          description: The user that this event occurred for. This will be present for\n            \"like\", \"appearance\", and \"share\" activity types.\n      required:\n        - clip\n        - metadata\n        - time\n        - type\n      title: Activity 3.1\n      type: object\n    album:\n      properties:\n        allow_continuous_play:\n          description: Whether an album should allow continuous play.\n          example: \"true\"\n          type: boolean\n        allow_downloads:\n          description: Whether an album should allow downloads.\n          example: \"true\"\n          type: boolean\n        allow_share:\n          description: Whether an album should allow sharing.\n          example: \"true\"\n          type: boolean\n        brand_color:\n          description: Hexadecimal color code for the decorative color. For example, album\n            videos use this color for player buttons.\n          example: ff66ee\n          nullable: true\n          type: string\n        created_time:\n          description: The time in ISO 8601 format that the album was created.\n          example: 2015-12-17T21:32:44+00:00\n          type: string\n        custom_logo:\n          allOf:\n            - $ref: \"#/components/schemas/picture\"\n          description: The custom logo for this album.\n          nullable: true\n        description:\n          description: A brief description of the album's content.\n          example: Vimeo holiday videos!\n          nullable: true\n          type: string\n        domain:\n          description: The custom domain a user has selected for their album.\n          example: mycustomdomain.com\n          nullable: true\n          type: string\n        duration:\n          description: The total duration in seconds of all the videos in the album.\n          example: 1163\n          type: number\n        embed:\n          description: Embed data for the album.\n          properties:\n            html:\n              description: The responsive HTML code to embed the playlist on a website.\n                This is present only when `privacy.view` isn't password and when\n                the album has embeddable videos.\n              nullable: true\n              type: string\n          required:\n            - html\n          type: object\n        embed_brand_color:\n          description: Whether to show the album's custom brand color in the player of the\n            album's embedded playlist.\n          example: \"true\"\n          nullable: true\n          type: boolean\n        embed_custom_logo:\n          description: Whether to show the album's custom logo in the player of the album's\n            embedded playlist.\n          example: \"true\"\n          nullable: true\n          type: boolean\n        hide_nav:\n          description: Whether to hide the Vimeo navigation when viewing the album.\n          example: \"true\"\n          type: boolean\n        hide_vimeo_logo:\n          description: Whether to hide the Vimeo logo in the player of the album's embedded\n            playlist.\n          example: \"true\"\n          nullable: true\n          type: boolean\n        layout:\n          description: The album's layout preference\n          enum:\n            - grid\n            - player\n          example: grid\n          type: string\n        link:\n          description: The URL to access the album.\n          example: https://vimeo.com/album/Vimeo Holiday Videos!\n          type: string\n        metadata:\n          description: Metadata about the album.\n          properties:\n            connections:\n              description: A collection of information that is connected to this resource.\n              properties:\n                videos:\n                  description: Information about the videos that belong to this album.\n                  properties:\n                    options:\n                      description: An array of the HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of videos on this connection.\n                      example: 6\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /albums/3706071/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - videos\n              type: object\n            interactions:\n              description: A list of resource URIs related to the album.\n              nullable: true\n              properties:\n                add_custom_thumbnails:\n                  description: An action indicating that the authenticated user is an admin\n                    of the album and may therefore add custom thumbnails. This\n                    data requires a bearer token with the `private` scope.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI. This\n                        data requires a bearer token with the `private` scope.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data. This\n                        data requires a bearer token with the `private` scope.\n                      example: /users/123456/albums/654321/custom_thumbnails\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n                add_logos:\n                  description: An action indicating that the authenticated user is an admin\n                    of the album and may therefore add custom logos. This data\n                    requires a bearer token with the `private` scope.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI. This\n                        data requires a bearer token with the `private` scope.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data. This\n                        data requires a bearer token with the `private` scope.\n                      example: /users/123456/albums/654321/logos\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n                add_videos:\n                  description: An action indicating that the authenticated user is an admin\n                    of the album and may therefore add videos. This data\n                    requires a bearer token with the `private` scope.\n                  properties:\n                    options:\n                      description: An array of HTTP methods allowed on this URI. This data\n                        requires a bearer token with the `private` scope.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data. This\n                        data requires a bearer token with the `private` scope.\n                      example: /users/123456/albums/654321/videos\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n              required:\n                - add_custom_thumbnails\n                - add_logos\n                - add_videos\n              type: object\n          required:\n            - connections\n            - interactions\n          type: object\n        modified_time:\n          description: The time in ISO 8601 format when the album was last modified.\n          example: 2018-02-06T21:24:17+00:00\n          type: string\n        name:\n          description: The album's display name.\n          example: Vimeo Holiday Videos!\n          type: string\n        pictures:\n          allOf:\n            - $ref: \"#/components/schemas/picture\"\n          description: The active image for the album; defaults to the thumbnail of the\n            last video added to the album.\n        privacy:\n          description: The privacy settings of the album.\n          properties:\n            password:\n              description: The privacy-enabled password to see this album. Present only\n                when `privacy.view` is `password`.\n              example: hunter1\n              type: string\n            view:\n              description: \u003e\n                Who can view the album:\n\n\n                Option descriptions:\n                 * `anybody` - Anyone can view the album.\n                 * `embed_only` - Only owner can see album, can be embedded off-site\n                 * `password` - Only those with the password can view the album.\n              enum:\n                - anybody\n                - embed_only\n                - password\n              example: anybody\n              type: string\n          required:\n            - view\n          type: object\n        resource_key:\n          description: The album resource key.\n          example: e5595241643259c658ed6c85ca82985a6341edc7\n          type: string\n        review_mode:\n          description: Whether album videos should use the review mode URL.\n          example: \"true\"\n          type: boolean\n        sort:\n          description: Sort type of the album.\n          enum:\n            - added_first\n            - added_last\n            - alphabetical\n            - arranged\n            - comments\n            - likes\n            - newest\n            - oldest\n            - plays\n          example: added_first\n          type: string\n        theme:\n          description: The album's color theme preference\n          enum:\n            - dark\n            - standard\n          example: dark\n          type: string\n        uri:\n          description: The album's URI.\n          example: /albums/3706071\n          type: string\n        url:\n          description: The custom Vimeo URL a user has selected for their album.\n          example: my-custom-url\n          nullable: true\n          type: string\n        use_custom_domain:\n          description: Whether the user has opted in to use a custom domain for their album.\n          example: \"false\"\n          type: boolean\n        user:\n          allOf:\n            - $ref: \"#/components/schemas/user\"\n          description: The owner of the album.\n        web_brand_color:\n          description: Whether an album should show the brand color in the web layout.\n          example: \"true\"\n          type: boolean\n        web_custom_logo:\n          description: Whether an album's custom logo should be shown in the web layout.\n          example: \"true\"\n          type: boolean\n      required:\n        - allow_continuous_play\n        - allow_downloads\n        - allow_share\n        - brand_color\n        - created_time\n        - custom_logo\n        - description\n        - domain\n        - duration\n        - embed\n        - embed_brand_color\n        - embed_custom_logo\n        - hide_nav\n        - hide_vimeo_logo\n        - layout\n        - link\n        - metadata\n        - modified_time\n        - name\n        - pictures\n        - privacy\n        - resource_key\n        - review_mode\n        - sort\n        - theme\n        - uri\n        - url\n        - use_custom_domain\n        - user\n        - web_brand_color\n        - web_custom_logo\n      title: Album\n      type: object\n    api-app:\n      properties:\n        name:\n          description: The name of the API app.\n          example: Vimeo Android\n          type: string\n        uri:\n          description: The canonical URI of the API app.\n          example: /apps/12345\n          type: string\n      required:\n        - name\n        - uri\n      title: API App\n      type: object\n    auth:\n      properties:\n        access_token:\n          description: The access token string.\n          example: 01019a4a62aec63db077317ab7bb429db75652401e\n          type: string\n        app:\n          allOf:\n            - $ref: \"#/components/schemas/api-app\"\n          description: The API application associated with the token.\n        expires_on:\n          description: The date and time that the token expires.\n          example: \"1495048954\"\n          type: string\n        refresh_token:\n          description: The refresh token string.\n          example: 3d3bc8a9cb7debfd01b270e419b2d265983362f9\n          type: string\n        scope:\n          description: The scope or scopes that the token supports.\n          example: private create edit upload public\n          type: string\n        token_type:\n          description: |\n            The token type:\n\n            Option descriptions:\n             * `bearer` - The token is of the `bearer` type.\n          enum:\n            - bearer\n          example: bearer\n          type: string\n        user:\n          allOf:\n            - $ref: \"#/components/schemas/user\"\n          description: The user associated with the token.\n      required:\n        - access_token\n        - app\n        - scope\n        - token_type\n      title: Auth\n      type: object\n    auth-error:\n      properties:\n        error:\n          description: The name of the error.\n          example: server_error\n          type: string\n        error_description:\n          description: The description of the error.\n          example: An error has occurred on Vimeo's servers. Please try again.\n          type: string\n      required:\n        - error\n        - error_description\n      title: Auth Error\n      type: object\n    category:\n      properties:\n        icon:\n          allOf:\n            - $ref: \"#/components/schemas/picture\"\n          description: The active icon for the category.\n        last_video_featured_time:\n          description: The last time, in ISO 8601 format, that a video was featured.\n          example: 2017-05-17T17:46:09+00:00\n          type: string\n        link:\n          description: The URL to access the category in a browser.\n          example: https://vimeo.com/categories/animation\n          type: string\n        metadata:\n          description: Metadata about the category.\n          properties:\n            connections:\n              description: A collection of information that is connected to this resource.\n              properties:\n                channels:\n                  description: Information about the channels related to this category.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of channels on this connection.\n                      example: 90\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /categories/animation/channels\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                groups:\n                  description: Information about the groups related to this category.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of groups on this connection.\n                      example: 15\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /categories/animation/groups\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                users:\n                  description: Information about the users related to this category.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of users on this connection.\n                      example: 140\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /categories/animation/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                videos:\n                  description: Information about the videos related to this category.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of videos on this connection.\n                      example: 960\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /categories/animation/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - channels\n                - groups\n                - users\n                - videos\n              type: object\n            interactions:\n              description: The permissible actions related to the category.\n              properties:\n                follow:\n                  description: An action indicating if the authenticated user has followed\n                    this category.\n                  properties:\n                    added:\n                      description: Whether the authenticated user has followed this\n                        category.\n                      example: \"true\"\n                      type: boolean\n                    added_time:\n                      description: The time in ISO 8601 format that the user followed this\n                        category, or the null value if the user hasn't followed\n                        this category.\n                      example: 2017-05-17T17:46:09+00:00\n                      nullable: true\n                      type: string\n                    uri:\n                      description: \"The URI for following or unfollowing this category: PUT\n                        to this URI to follow the category, or DELETE to this\n                        URI to unfollow the category.\"\n                      example: /users/152184/categories/animation\n                      type: string\n                  required:\n                    - added\n                    - added_time\n                    - uri\n                  type: object\n              required:\n                - follow\n              type: object\n          required:\n            - connections\n            - interactions\n          type: object\n        name:\n          description: The display name that identifies the category.\n          example: Animation\n          type: string\n        parent:\n          description: The container of this category's parent category, if the current\n            category is a subcategory.\n          nullable: true\n          properties:\n            link:\n              description: The URL to access the parent category in a browser.\n              example: https://vimeo.com/categories/animation\n              type: string\n            name:\n              description: The display name that identifies the parent category.\n              example: Animation\n              type: string\n            uri:\n              description: The unique identifier to access the parent of this category\n                resource.\n              example: /categories/animation\n              type: string\n          required:\n            - link\n            - name\n            - uri\n          type: object\n        pictures:\n          allOf:\n            - $ref: \"#/components/schemas/picture\"\n          description: The active picture for this category; defaults to vertical color\n            bars.\n        resource_key:\n          description: The resource key of the category.\n          example: e5595241643259c658ed6c85ca82985a6341edc7\n          type: string\n        subcategories:\n          description: All the subcategories that belong to this category, if the current\n            category is a top-level parent.\n          items:\n            properties:\n              link:\n                description: The URL to access the subcategory in a browser.\n                example: https://vimeo.com/categories/animation/2d/videos\n                type: string\n              name:\n                description: The display name that identifies the subcategory.\n                example: 2D\n                type: string\n              uri:\n                description: The unique identifier to access the subcategory resource.\n                example: /categories/animation/subcategories/2d\n                type: string\n            required:\n              - link\n              - name\n              - uri\n            type: object\n          type: array\n        top_level:\n          description: Whether the category isn't a subcategory of another category.\n          example: \"true\"\n          type: boolean\n        uri:\n          description: The unique identifier to access the category resource.\n          example: /categories/animation\n          type: string\n      required:\n        - last_video_featured_time\n        - link\n        - metadata\n        - name\n        - parent\n        - pictures\n        - resource_key\n        - top_level\n        - uri\n      title: Category\n      type: object\n    channel:\n      properties:\n        categories:\n          description: The categories to which this channel belongs as specified by the\n            channel moderators.\n          items:\n            $ref: \"#/components/schemas/category\"\n          type: array\n        created_time:\n          description: The time in ISO 8601 format when the channel was created.\n          example: 2007-10-23T17:00:43+00:00\n          type: string\n        description:\n          description: A brief explanation of the channel's content.\n          example: We really love videos, and these are the videos we really, really\n            love.\n          nullable: true\n          type: string\n        header:\n          allOf:\n            - $ref: \"#/components/schemas/picture\"\n          description: The banner that appears by default at the top of the channel page.\n        link:\n          description: The URL to access the channel in a browser.\n          example: https://vimeo.com/channels/staffpicks\n          type: string\n        metadata:\n          description: Metadata about the channel.\n          properties:\n            connections:\n              description: A collection of information that is connected to this resource.\n              properties:\n                privacy_users:\n                  description: Information provided to channel moderators about which users\n                    they have specifically permitted to access a private\n                    channel. This data requires a bearer token with the\n                    `private` scope.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI. This\n                        data requires a bearer token with the `private` scope.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of users on this connection. This data\n                        requires a bearer token with the `private` scope.\n                      example: 36\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data. This\n                        data requires a bearer token with the `private` scope.\n                      example: /channels/927/privacy/users\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                users:\n                  description: Information about the users following or moderating this\n                    channel.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of users on this connection.\n                      example: 794634\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /channels/927/users\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                videos:\n                  description: Information about the videos that belong to this channel.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of videos on this connection.\n                      example: 12448\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /channels/927/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - privacy_users\n                - users\n                - videos\n              type: object\n            interactions:\n              description: A list of resource URIs related to the channel.\n              nullable: true\n              properties:\n                add_moderators:\n                  description: An action indicating that the authenticated user is the\n                    owner of the channel and may therefore add other users as\n                    channel moderators. This data requires a bearer token with\n                    the `private` scope.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI. This\n                        data requires a bearer token with the `private` scope.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data. This\n                        data requires a bearer token with the `private` scope.\n                      example: /channels/1234/moderators\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n                add_to:\n                  description: When a channel appears in the context of adding or removing\n                    a video from it (`/videos/{video_id}/available_channels`),\n                    include information about adding or removing the video. This\n                    data requires a bearer token with the `private` scope.\n                  nullable: true\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI. This\n                        data requires a bearer token with the `private` scope.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data. This\n                        data requires a bearer token with the `private` scope.\n                      example: /channels/1234/videos/5678\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n                follow:\n                  description: An action indicating if the authenticated user has followed\n                    this channel. This data requires a bearer token with the\n                    `private` scope.\n                  properties:\n                    added:\n                      description: Whether the authenticated user has followed this\n                        channel. This data requires a bearer token with the\n                        `private` scope.\n                      example: \"true\"\n                      type: boolean\n                    added_time:\n                      description: The time in ISO 8601 format that the user followed this\n                        channel, or the null value if the user hasn't followed\n                        the channel. This data requires a bearer token with the\n                        `private` scope.\n                      example: 2017-05-22T17:50:11+00:00\n                      nullable: true\n                      type: string\n                    type:\n                      description: \u003e\n                        Whether the authenticated user is a moderator or\n                        subscriber. This data requires a bearer token with the\n                        `private` scope.\n\n\n                        Option descriptions:\n                         * `moderator` - The authenticated user is a moderator.\n                         * `subscriber` - The authenticated user is a subscriber.\n                      enum:\n                        - moderator\n                        - subscriber\n                      example: moderator\n                      nullable: true\n                      type: string\n                    uri:\n                      description: The URI for following or unfollowing this channel. PUT\n                        to this URI to follow the channel, or DELETE to this URI\n                        to unfollow the channel. This data requires a bearer\n                        token with the `private` scope.\n                      example: /users/1234/channels/927\n                      type: string\n                  required:\n                    - added\n                    - added_time\n                    - type\n                    - uri\n                  type: object\n                moderate_videos:\n                  description: An action indicating that the authenticated user is a\n                    moderator of the channel and may therefore add or remove\n                    videos from the channel. This data requires a bearer token\n                    with the `private` scope.\n                  properties:\n                    options:\n                      description: An array of HTTP methods allowed on this URI. This data\n                        requires a bearer token with the `private` scope.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data. This\n                        data requires a bearer token with the `private` scope.\n                      example: /channels/1234/videos\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n              required:\n                - add_moderators\n                - add_to\n                - follow\n                - moderate_videos\n              type: object\n          required:\n            - connections\n            - interactions\n          type: object\n        modified_time:\n          description: The time in ISO 8601 format when the album was last modified.\n          example: 2018-03-21T22:52:29+00:00\n          type: string\n        name:\n          description: The display name that identifies the channel.\n          example: Vimeo Staff Picks\n          type: string\n        pictures:\n          allOf:\n            - $ref: \"#/components/schemas/picture\"\n          description: The active image for the channel; defaults to the thumbnail of the\n            last video added to the channel.\n        privacy:\n          description: The privacy settings of the channel.\n          properties:\n            view:\n              description: |\n                Who can view the channel:\n\n                Option descriptions:\n                 * `anybody` - Anyone can view the channel.\n                 * `moderators` - Only moderators can view the channel.\n                 * `users` - Only registered users can view the channel.\n              enum:\n                - anybody\n                - moderators\n                - users\n              example: anybody\n              type: string\n          required:\n            - view\n          type: object\n        resource_key:\n          description: The channel resource key.\n          example: e5595241643259c658ed6c85ca82985a6341edc7\n          type: string\n        tags:\n          description: An array of all tags assigned to this channel.\n          items:\n            $ref: \"#/components/schemas/tag\"\n          type: array\n        uri:\n          description: The unique identifier to access the channel resource.\n          example: /channels/927\n          type: string\n        user:\n          allOf:\n            - $ref: \"#/components/schemas/user\"\n          description: The Vimeo user who owns the channel.\n      required:\n        - categories\n        - created_time\n        - description\n        - header\n        - link\n        - metadata\n        - modified_time\n        - name\n        - pictures\n        - privacy\n        - resource_key\n        - tags\n        - uri\n        - user\n      title: Channel\n      type: object\n    comment:\n      properties:\n        created_on:\n          description: The time in ISO 8601 format when the comment was posted.\n          example: 2018-03-05T21:04:47+00:00\n          type: string\n        metadata:\n          properties:\n            connections:\n              properties:\n                replies:\n                  description: Information about this comment's replies.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of replies on this connection.\n                      example: 42\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /videos/258684937/comments/12345/replies\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - replies\n              type: object\n          required:\n            - connections\n          type: object\n        resource_key:\n          description: The resource key string for the comment.\n          example: bac1033deba2310ebba2caec33c23e4beea67aba\n          type: string\n        text:\n          description: The content of the comment.\n          example: I love this!\n          type: string\n        type:\n          description: |\n            The Vimeo content to which the comment relates:\n\n            Option descriptions:\n             * `video` - The comment is about a video.\n          enum:\n            - video\n          example: video\n          type: string\n        uri:\n          description: The unique identifier to access the comment resource.\n          example: /videos/258684937/comments/12345\n          type: string\n        user:\n          allOf:\n            - $ref: \"#/components/schemas/user\"\n          description: The user who posted the comment.\n          nullable: true\n      required:\n        - created_on\n        - metadata\n        - resource_key\n        - text\n        - type\n        - uri\n        - user\n      title: Comment\n      type: object\n    content-rating:\n      properties:\n        code:\n          description: |\n            The code that uniquely identifies this content rating:\n\n            Option descriptions:\n             * `drugs` - Drug or alcohol use.\n             * `language` - Profanity or sexually suggestive content.\n             * `nudity` - Nudity.\n             * `safe` - Suitable for all audiences.\n             * `unrated` - No rating.\n             * `violence` - Violent or graphic content.\n          enum:\n            - drugs\n            - language\n            - nudity\n            - safe\n            - unrated\n            - violence\n          example: violence\n          type: string\n        name:\n          description: The description of this content rating.\n          example: Violence\n          type: string\n        uri:\n          description: The canonical relative URI of the content rating.\n          example: /contentrating/violence\n          nullable: true\n          type: string\n      required:\n        - code\n        - name\n        - uri\n      title: Content Rating\n      type: object\n    creative-commons:\n      properties:\n        code:\n          description: |\n            The code that uniquely identifies this Creative Commons license:\n\n            Option descriptions:\n             * `by` - Attribution\n             * `by-nc` - Attribution Non-Commercial\n             * `by-nc-nd` - Attribution Non-Commercial No Derivatives\n             * `by-nc-sa` - Attribution Non-Commercial Share Alike\n             * `by-nd` - Attribution No Derivatives\n             * `by-sa` - Attribution Share Alike\n             * `cc0` - Public Domain Dedication\n          enum:\n            - by\n            - by-nc\n            - by-nc-nd\n            - by-nc-sa\n            - by-nd\n            - by-sa\n            - cc0\n          example: by-sa\n          type: string\n        name:\n          description: The description of this Creative Commons license.\n          example: Attribution Share Alike\n          type: string\n        uri:\n          description: The canonical relative URI of the Creative Commons license.\n          example: /creativecommons/by-sa\n          nullable: true\n          type: string\n      required:\n        - code\n        - name\n        - uri\n      title: Creative Commons\n      type: object\n    credit:\n      properties:\n        name:\n          description: The name of the person credited.\n          example: Sam Doe\n          type: string\n        role:\n          description: The character that this person portrayed, or the job that this\n            person performed.\n          example: Themselves\n          type: string\n        uri:\n          description: The unique identifier to access the credits resource.\n          example: /videos/258684937/credits/1234\n          type: string\n        user:\n          allOf:\n            - $ref: \"#/components/schemas/user\"\n          description: The Vimeo user associated with this credit.\n        video:\n          allOf:\n            - $ref: \"#/components/schemas/video\"\n          description: The video associated with this credit.\n      required:\n        - name\n        - role\n        - uri\n      title: Credit\n      type: object\n    domain:\n      properties:\n        allow_hd:\n          description: Whether to permit HD embeds on this domain.\n          example: \"true\"\n          type: boolean\n        domain:\n          description: The domain name.\n          example: example.com\n          type: string\n        uri:\n          description: The URI of the domain.\n          example: /videos/258684937/privacy/domains/example.com\n          type: string\n      required:\n        - allow_hd\n        - domain\n        - uri\n      title: Domain\n      type: object\n    embed-settings:\n      properties:\n        buttons:\n          description: A collection of information about the buttons that appear on the\n            interface of the embeddable player.\n          properties:\n            embed:\n              description: Whether the Embed button appears in the embeddable player for\n                this video.\n              example: \"true\"\n              type: boolean\n            fullscreen:\n              description: Whether the Fullscreen button appears in the embeddable player\n                for this video.\n              example: \"true\"\n              type: boolean\n            hd:\n              description: Whether the HD button appears in the embeddable player for this\n                video.\n              example: \"true\"\n              type: boolean\n            like:\n              description: Whether the Like button appears in the embeddable player for\n                this video.\n              example: \"true\"\n              type: boolean\n            scaling:\n              description: Whether the Scaling button appears in the embeddable player for\n                this video.\n              example: \"true\"\n              type: boolean\n            share:\n              description: Whether the Share button appears in the embeddable player for\n                this video.\n              example: \"true\"\n              type: boolean\n            watchlater:\n              description: Whether the Watch Later button appears in the embeddable player\n                for this video.\n              example: \"true\"\n              type: boolean\n          required:\n            - embed\n            - fullscreen\n            - hd\n            - like\n            - scaling\n            - share\n            - watchlater\n          type: object\n        color:\n          description: The primary player color, which controls the color of the progress\n            bar, buttons, and more.\n          example: \"#0a0808\"\n          type: string\n        logos:\n          description: A collection of information about the logo in the corner of the\n            embeddable player.\n          properties:\n            custom:\n              description: A collection of information relating to custom logos in the\n                embeddable player.\n              properties:\n                active:\n                  description: Whether the custom logo appears in the embeddable player.\n                  example: \"true\"\n                  type: boolean\n                link:\n                  description: The URL that loads upon clicking the custom logo.\n                  example: http://example.com\n                  type: string\n                sticky:\n                  description: Whether the custom logo appears even when the player\n                    interface is hidden.\n                  example: \"true\"\n                  type: boolean\n              required:\n                - active\n                - link\n                - sticky\n              type: object\n            vimeo:\n              description: Whether the Vimeo logo appears in the embeddable player for this\n                video.\n              example: \"true\"\n              type: boolean\n          required:\n            - custom\n            - vimeo\n          type: object\n        playbar:\n          description: Whether the playbar appears in the embeddable player for this video.\n          example: \"true\"\n          type: boolean\n        speed:\n          description: Whether the speed controls appear in the embeddable player for this\n            video.\n          example: \"true\"\n          type: boolean\n        title:\n          description: A collection of information relating to the embeddable player's\n            title bar.\n          properties:\n            name:\n              description: |\n                How the embeddable player handles the video title:\n\n                Option descriptions:\n                 * `hide` - The title is hidden.\n                 * `show` - The title is shown.\n              enum:\n                - hide\n                - show\n                - user\n              example: hide\n              type: string\n            owner:\n              description: |\n                How the embeddable player handles the video owner's information:\n\n                Option descriptions:\n                 * `hide` - The owner's information is hidden.\n                 * `show` - The owner's information is shown.\n              enum:\n                - hide\n                - show\n                - user\n              example: hide\n              type: string\n            portrait:\n              description: |\n                How the embeddable player handles the video owner's portrait:\n\n                Option descriptions:\n                 * `hide` - The owner's portrait is hidden\n                 * `show` - The owner's portrait is shown.\n              enum:\n                - hide\n                - show\n                - user\n              example: hide\n              type: string\n          required:\n            - name\n            - owner\n            - portrait\n          type: object\n        uri:\n          description: The URI of the embed preset.\n          example: /videos/258684937/presets/12345\n          type: string\n        volume:\n          description: Whether the volume controls appear in the embeddable player for this\n            video.\n          example: \"true\"\n          type: boolean\n      required:\n        - buttons\n        - color\n        - logos\n        - playbar\n        - speed\n        - title\n        - volume\n      title: Embed Settings\n      type: object\n    endpoint:\n      properties:\n        methods:\n          description: All HTTP methods permitted on this endpoint.\n          items:\n            type: string\n          type: array\n        path:\n          description: The path section of the URL, which, when appended to the API host\n            `https:///api.vimeo.com`, builds a full API endpoint.\n          example: /me\n          type: string\n      required:\n        - methods\n        - path\n      title: Endpoint\n      type: object\n    error:\n      properties:\n        developer_message:\n          description: The error message that developers receive.\n          example: The specified resource does not exist.\n          type: string\n        error:\n          description: The error message that non-developer users receive.\n          example: Something strange occurred. Please try again.\n          type: string\n        error_code:\n          description: The error code.\n          example: 5000\n          type: number\n        link:\n          description: A link to more information about the error.\n          type: string\n      required:\n        - developer_message\n        - error\n        - error_code\n        - link\n      title: Error\n      type: object\n    group:\n      properties:\n        created_time:\n          description: The time in ISO 8601 format when the group was created.\n          example: 2008-07-05T14:52:43+00:00\n          type: string\n        description:\n          description: The group's description.\n          example: Want to participate in our weekly Challenges? Join the Group to\n            receive messages and new Challenges!\n          nullable: true\n          type: string\n        link:\n          description: The link to the group.\n          example: https://vimeo.com/groups/weekendchallenge\n          type: string\n        metadata:\n          description: Metadata about the group.\n          properties:\n            connections:\n              description: A collection of information that is connected to this resource.\n              properties:\n                users:\n                  description: Information about the members or moderators of this group.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of users on this connection.\n                      example: 25798\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /groups/1108/users\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                videos:\n                  description: Information about the videos contained within this group.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of videos on this connection.\n                      example: 7252\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /groups/1108/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - users\n                - videos\n              type: object\n            interactions:\n              description: User actions that have involved the group. This data requires a\n                bearer token with the `private` scope.\n              properties:\n                join:\n                  description: An action indicating that someone has joined the group. This\n                    data requires a bearer token with the `private` scope.\n                  properties:\n                    added:\n                      description: Whether the authenticated user has followed this group.\n                        This data requires a bearer token with the `private`\n                        scope.\n                      example: \"true\"\n                      type: boolean\n                    added_time:\n                      description: The time in ISO 8601 format when the user joined this\n                        group. This data requires a bearer token with the\n                        `private` scope.\n                      nullable: true\n                      type: string\n                    title:\n                      description: The user's title, or the null value if not applicable.\n                        This data requires a bearer token with the `private`\n                        scope.\n                      example: Vimeo Staff\n                      nullable: true\n                      type: string\n                    type:\n                      description: \u003e\n                        Whether the authenticated user is a moderator or\n                        subscriber. This data requires a bearer token with the\n                        `private` scope.\n\n\n                        Option descriptions:\n                         * `member` - The authenticated user is a member.\n                         * `moderator` - The authenticated user is a moderator.\n                      enum:\n                        - member\n                        - moderator\n                      example: member\n                      nullable: true\n                      type: string\n                    uri:\n                      description: The URI for following. PUT to this URI to follow, or\n                        DELETE to this URI to unfollow. This data requires a\n                        bearer token with the `private` scope.\n                      example: /users/152184/groups/1108\n                      type: string\n                  required:\n                    - added\n                    - added_time\n                    - title\n                    - type\n                    - uri\n                  type: object\n              required:\n                - join\n              type: object\n          required:\n            - connections\n            - interactions\n          type: object\n        modified_time:\n          description: The time in ISO 8601 format when the group was last modified.\n          example: 2018-09-16T15:41:45+00:00\n          type: string\n        name:\n          description: The group's display name.\n          example: Vimeo Weekend Challenge\n          type: string\n        pictures:\n          allOf:\n            - $ref: \"#/components/schemas/picture\"\n          description: The active picture for this group.\n        privacy:\n          description: The group's privacy settings.\n          properties:\n            comment:\n              description: |\n                Who can comment on the group:\n\n                Option descriptions:\n                 * `all` - Anyone can comment on the group.\n                 * `members` - Only members can comment on the group.\n              enum:\n                - all\n                - members\n              example: all\n              type: string\n            invite:\n              description: \u003e\n                Who can invite new members to the group:\n\n\n                Option descriptions:\n                 * `all` - Anyone can invite new members to join.\n                 * `members` - Only group members can invite new members to join.\n              enum:\n                - all\n                - members\n              example: all\n              type: string\n            join:\n              description: \u003e\n                Who can join the group:\n\n\n                Option descriptions:\n                 * `anybody` - Anyone can join the group.\n                 * `members` - Only people with a Vimeo account can join the group.\n              enum:\n                - anybody\n                - members\n              example: anybody\n              type: string\n            videos:\n              description: |\n                Who can add videos to the group:\n\n                Option descriptions:\n                 * `all` - Anyone can add videos to the group.\n                 * `members` - Only group members can add videos to the group.\n              enum:\n                - all\n                - members\n              example: all\n              type: string\n            view:\n              description: |\n                Who can view the group:\n\n                Option descriptions:\n                 * `anybody` - Anyone can view the group.\n                 * `members` - Only group members can view the group.\n              enum:\n                - anybody\n                - members\n              example: anybody\n              type: string\n          required:\n            - comment\n            - invite\n            - join\n            - videos\n            - view\n          type: object\n        resource_key:\n          description: The resource key of the group.\n          example: dc724af18fbdd4e59189f5fe768a5f8311527050\n          type: string\n        uri:\n          description: The canonical relative URI of this group.\n          example: /groups/1108\n          type: string\n        user:\n          allOf:\n            - $ref: \"#/components/schemas/user\"\n          description: The owner of the group.\n          nullable: true\n      required:\n        - created_time\n        - description\n        - link\n        - metadata\n        - modified_time\n        - name\n        - pictures\n        - privacy\n        - resource_key\n        - uri\n      title: Group\n      type: object\n    language:\n      properties:\n        code:\n          description: The code that represents this language.\n          example: en-US\n          type: string\n        name:\n          description: The name of the language.\n          example: English (United States)\n          type: string\n      required:\n        - code\n        - name\n      title: Language\n      type: object\n    legacy-error:\n      properties:\n        error:\n          description: User-friendly error message\n          example: Something strange occurred. Please try again.\n          type: string\n      required:\n        - error\n      title: Legacy Error\n      type: object\n    on-demand-genre:\n      properties:\n        canonical:\n          description: The canonical name or URL slug of the genre.\n          example: horror\n          type: string\n        interactions:\n          properties:\n            page:\n              description: Interactions for On Demand pages that are in this genre.\n              properties:\n                added:\n                  description: Whether this On Demand genre was added.\n                  example: \"true\"\n                  type: boolean\n                options:\n                  description: An array of HTTP methods permitted on this URI.\n                  items:\n                    type: string\n                  type: array\n                uri:\n                  description: The URI to access the On Demand page.\n                  example: /ondemand/genres/horror/pages/12345\n                  type: string\n              required:\n                - added\n                - options\n                - uri\n              type: object\n          required:\n            - page\n          type: object\n        link:\n          description: The Vimeo URL for this genre.\n          example: http://vimeo.com/ondemand/browse/horror\n          type: string\n        metadata:\n          properties:\n            connections:\n              description: A collection of information connected to this resource.\n              properties:\n                pages:\n                  description: Information about the On Demand pages related to this group.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /ondemand/genres/horror/pages\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n              required:\n                - pages\n              type: object\n          required:\n            - connections\n          type: object\n        name:\n          description: The descriptive name of the genre.\n          example: Horror\n          type: string\n        uri:\n          description: The relative URI of the On Demand genre.\n          example: /ondemand/genres/horror\n          type: string\n      required:\n        - canonical\n        - interactions\n        - link\n        - metadata\n        - name\n        - uri\n      title: On Demand Genre\n      type: object\n    on-demand-page:\n      properties:\n        background:\n          allOf:\n            - $ref: \"#/components/schemas/picture\"\n          description: The background image for the On Demand page on Vimeo.\n          nullable: true\n        colors:\n          description: The primary and secondary colors used for rendering this On Demand\n            page.\n          properties:\n            primary:\n              description: The hexadecimal color code for the page's primary color.\n              example: \"#0a0808\"\n              type: string\n            secondary:\n              description: The hexadecimal color code for the page's secondary color.\n              example: \"#ba4a17\"\n              type: string\n          required:\n            - primary\n            - secondary\n          type: object\n        content_rating:\n          description: An array of the page's content ratings.\n          items:\n            type: string\n          type: array\n        created_time:\n          description: The time in ISO 8601 format when the page was created.\n          example: 2017-05-15T13:42:25+00:00\n          type: string\n        description:\n          description: The description of this On Demand page.\n          example: DARBY FOREVER follows the fantasies of Darby, a shopgirl at \"Bobbins\n            \u0026 Notions\"\n          nullable: true\n          type: string\n        domain_link:\n          description: The link to this page on its own domain.\n          example: https://example.com\n          nullable: true\n          type: string\n        episodes:\n          description: Information about this On Demand page's episodes, if the page is for\n            a series.\n          properties:\n            buy:\n              properties:\n                active:\n                  description: Whether all the videos on this On Demand page can be\n                    purchased as a whole.\n                  example: \"true\"\n                  type: boolean\n                price:\n                  description: The default price to buy an episode.\n                  example: 9.99\n                  nullable: true\n                  type: number\n              required:\n                - active\n                - price\n              type: object\n            rent:\n              properties:\n                active:\n                  description: Whether all the videos on this On Demand page can be rented\n                    as a whole.\n                  example: \"true\"\n                  type: boolean\n                period:\n                  description: |\n                    The rental period for the video:\n\n                    Option descriptions:\n                     * `1 day` - The rental period is one day.\n                     * `1 month` - The rental period is one month.\n                     * `1 week` - The rental period is one week.\n                     * `1 year` - The rental period is one year.\n                     * `2 day` - The rental period is two days.\n                     * `24 hour` - The rental period is 24 hours.\n                     * `3 day` - The rental period is three days.\n                     * `3 month` - The rental period is three months.\n                     * `30 day` - The rental period is 30 days.\n                     * `48 hour` - The rental period is 48 hours.\n                     * `6 month` - The rental period is six months.\n                     * `60 day` - The rental period is 60 days.\n                     * `7 day` - The rental period is 7 days.\n                     * `72 hour` - The rental period is 72 hours.\n                  enum:\n                    - 1 day\n                    - 1 month\n                    - 1 week\n                    - 1 year\n                    - 2 day\n                    - 24 hour\n                    - 3 day\n                    - 3 month\n                    - 30 day\n                    - 48 hour\n                    - 6 month\n                    - 60 day\n                    - 7 day\n                    - 72 hour\n                  example: 1 day\n                  nullable: true\n                  type: string\n                price:\n                  description: The default price to rent an episode.\n                  example: 2.99\n                  nullable: true\n                  type: number\n              required:\n                - active\n                - period\n                - price\n              type: object\n          required:\n            - buy\n            - rent\n          type: object\n        film:\n          allOf:\n            - $ref: \"#/components/schemas/video\"\n          description: This On Demand page's film, if it is a film.\n        genres:\n          description: All the genres assigned to this page.\n          items:\n            $ref: \"#/components/schemas/on-demand-genre\"\n          type: array\n        link:\n          description: The link to the page on Vimeo.\n          example: https://vimeo.com/ondemand/darbyforever\n          type: string\n        metadata:\n          description: Metadata about the On Demand page.\n          properties:\n            connections:\n              description: A collection of information that is connected to this resource,\n                including videos, genres, and pictures connections.\n              properties:\n                metadata:\n                  properties:\n                    connections:\n                      properties:\n                        comments:\n                          description: Information about the comments associated with this\n                            page.\n                          properties:\n                            options:\n                              description: An array of HTTP methods permitted on this URI.\n                              items:\n                                type: string\n                              type: array\n                            total:\n                              description: The total number of comments on this connection.\n                              example: 4\n                              type: number\n                            uri:\n                              description: The API URI that resolves to the connection data.\n                              example: /ondemand/pages/61326/comments\n                              type: string\n                          required:\n                            - options\n                            - total\n                            - uri\n                          type: object\n                        genres:\n                          description: Information about the genres associated with this\n                            page.\n                          properties:\n                            options:\n                              description: An array of HTTP methods permitted on this URI.\n                              items:\n                                type: string\n                              type: array\n                            total:\n                              description: The total number of genres on this connection.\n                              example: 9\n                              type: number\n                            uri:\n                              description: The API URI that resolves to the connection data.\n                              example: /ondemand/pages/61326/genres\n                              type: string\n                          required:\n                            - options\n                            - total\n                            - uri\n                          type: object\n                        likes:\n                          description: Information about the likes associated with this\n                            page.\n                          properties:\n                            options:\n                              description: An array of HTTP methods permitted on this URI.\n                              items:\n                                type: string\n                              type: array\n                            total:\n                              description: The total number of likes on this connection.\n                              example: 15\n                              type: number\n                            uri:\n                              description: The API URI that resolves to the connection data.\n                              example: /ondemand/pages/61326/likes\n                              type: string\n                          required:\n                            - options\n                            - total\n                            - uri\n                          type: object\n                        pictures:\n                          description: Information about the pictures associated with this\n                            page.\n                          properties:\n                            options:\n                              description: An array of HTTP methods permitted on this URI.\n                              items:\n                                type: string\n                              type: array\n                            total:\n                              description: The total number of pictures on this connection.\n                              example: 3\n                              type: number\n                            uri:\n                              description: The API URI that resolves to the connection data.\n                              example: /ondemand/pages/61326/pictures\n                              type: string\n                          required:\n                            - options\n                            - total\n                            - uri\n                          type: object\n                        seasons:\n                          description: Information about the seasons associated with this\n                            page.\n                          properties:\n                            options:\n                              description: An array of HTTP methods permitted on this URI.\n                              items:\n                                type: string\n                              type: array\n                            total:\n                              description: The total number of seasons on this connection.\n                              example: 3\n                              type: number\n                            uri:\n                              description: The API URI that resolves to the connection data.\n                              example: /ondemand/pages/61326/seasons\n                              type: string\n                          required:\n                            - options\n                            - total\n                            - uri\n                          type: object\n                        videos:\n                          description: Information about the videos associated with this\n                            page.\n                          properties:\n                            extra_total:\n                              description: The total number of extra videos.\n                              example: 14\n                              type: number\n                            main_total:\n                              description: The total number of main videos.\n                              example: 36\n                              type: number\n                            options:\n                              description: An array of HTTP methods permitted on this URI.\n                              items:\n                                type: string\n                              type: array\n                            total:\n                              description: The total number of videos on this connection.\n                              example: 50\n                              type: number\n                            uri:\n                              description: The API URI that resolves to the connection data.\n                              example: /ondemand/pages/61326/videos\n                              type: string\n                            viewable_total:\n                              description: The total number of viewable videos.\n                              example: 50\n                              type: number\n                          required:\n                            - extra_total\n                            - main_total\n                            - options\n                            - total\n                            - uri\n                            - viewable_total\n                          type: object\n                      required:\n                        - comments\n                        - genres\n                        - likes\n                        - pictures\n                        - seasons\n                        - videos\n                      type: object\n                  required:\n                    - connections\n                  type: object\n              required:\n                - metadata\n              type: object\n            interactions:\n              allOf:\n                - $ref: \"#/components/schemas/purchase-interaction\"\n              description: The user's available purchase interactions.\n          required:\n            - connections\n            - interactions\n          type: object\n        modified_time:\n          description: he time in ISO 8601 format when the page was last modified.\n          example: 2017-05-15T13:42:25+00:00\n          type: string\n        name:\n          description: A descriptive title of this On Demand page.\n          example: Darby Forever\n          type: string\n        pictures:\n          allOf:\n            - $ref: \"#/components/schemas/picture\"\n          description: The active poster for this On Demand page.\n          nullable: true\n        preorder:\n          properties:\n            active:\n              description: Whether this page is available for preorder.\n              example: \"true\"\n              type: boolean\n            cancel_time:\n              description: The time in ISO 8601 format when the preorder was cancelled.\n              example: 2017-05-16T13:13:46+00:00\n              type: string\n            publish_time:\n              description: The time in ISO 8601 format when the preorder was released to\n                the public.\n              example: 2017-05-15T13:12:52+00:00\n              type: string\n            time:\n              description: The time in ISO 8601 format when the preorder started.\n              example: 2017-05-15T13:13:31+00:00\n              type: string\n          required:\n            - active\n            - cancel_time\n            - publish_time\n            - time\n          type: object\n        published:\n          properties:\n            enabled:\n              description: Whether this On Demand page has been published.\n              example: \"true\"\n              type: boolean\n            time:\n              description: The time in IS 8601 format when this page was published.\n              example: 2017-05-15T13:12:52+00:00\n              type: string\n          required:\n            - enabled\n            - time\n          type: object\n        rating:\n          description: The rating of this page.\n          example: 7\n          nullable: true\n          type: number\n        resource_key:\n          description: The VOD resource key.\n          example: bac1033deba2310ebba2caec33c23e4beea67aba\n          type: string\n        sku:\n          description: The creator-designated SKU for this On Demand page.\n          example: VIME0001\n          nullable: true\n          type: string\n        subscription:\n          description: Information about subscribing to this On Demand page, if enabled.\n          nullable: true\n          properties:\n            active:\n              description: Whether this product is active.\n              example: \"true\"\n              type: boolean\n            link:\n              description: The link to this product on Vimeo.\n              example: https://vimeo.com/ondemand/darbyforever\n              nullable: true\n              type: string\n            period:\n              description: The product's rental period.\n              type: string\n            price:\n              description: The accepted currencies and respective pricing for this product.\n              type: object\n          required:\n            - active\n            - link\n            - price\n          type: object\n        theme:\n          description: The graphical theme for this On Demand page.\n          example: vader\n          type: string\n        thumbnail:\n          allOf:\n            - $ref: \"#/components/schemas/picture\"\n          description: The thumbnail image for the On Demand page on Vimeo.\n          nullable: true\n        trailer:\n          allOf:\n            - $ref: \"#/components/schemas/video\"\n          description: The trailer for this On Demand page.\n          nullable: true\n        type:\n          description: |\n            Whether this On Demand page is for a film or a series.\n\n            Option descriptions:\n             * `film` - The On Demand page is for a film.\n             * `series` - The On Demand page is for a series.\n          enum:\n            - film\n            - series\n          example: film\n          type: string\n        uri:\n          description: The relative URI of the On Demand page.\n          example: /ondemand/pages/61326\n          type: string\n        user:\n          allOf:\n            - $ref: \"#/components/schemas/user\"\n          description: The user who created this On Demand page.\n          nullable: true\n      required:\n        - background\n        - colors\n        - content_rating\n        - description\n        - domain_link\n        - episodes\n        - genres\n        - link\n        - metadata\n        - name\n        - pictures\n        - preorder\n        - published\n        - rating\n        - resource_key\n        - subscription\n        - theme\n        - thumbnail\n        - trailer\n        - type\n        - uri\n        - user\n      title: On Demand Page\n      type: object\n    on-demand-promotion:\n      properties:\n        access_type:\n          description: \u003e\n            The type of access that this promotion grants:\n\n\n            Option descriptions:\n             * `default` - Grants discounts on existing product offerings.\n             * `vip` - Grants free access either to VOD content before it is released or to access types that aren't part of the existing product offerings.\n          enum:\n            - default\n            - vip\n          example: default\n          type: string\n        discount_type:\n          description: \u003e\n            The type of discount for which this promotion can be used.\n\n\n            Option descriptions:\n             * `dollars` - The discount is a certain fixed amount.\n             * `free` - The discount is the full purchase price. VIP access promotions always use this discount type.\n             * `percent` - The discount is a certain percentage of the full price.\n          enum:\n            - dollars\n            - free\n            - percent\n          example: free\n          type: string\n        download:\n          description: Whether this promotion grants download access to On Demand content.\n          example: \"true\"\n          type: boolean\n        label:\n          description: The prefix string for batch codes, or the null value for single\n            codes.\n          example: 8jgaieumbzstujhn8k304iwwezawkvwm\n          nullable: true\n          type: string\n        metadata:\n          description: The video's metadata.\n          properties:\n            connections:\n              description: A list of resource URIs related to the On Demand promotion.\n              properties:\n                codes:\n                  description: Information about the codes associated with this promotion.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of uses on this connection.\n                      example: 1\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /ondemand/pages/61326/promotion/12345/codes\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - codes\n              type: object\n          required:\n            - connections\n          type: object\n        percent_off:\n          description: The percentage amount that is deducted from the product price.\n          example: 100\n          type: number\n        product_type:\n          description: \u003e\n            The type of product to which this promotion can be applied. Only\n            `buy` and `rent` are available for the VIP access type:\n\n\n            Option descriptions:\n             * `any` - The promotion can be applied to any product.\n             * `buy` - The promotion can be applied to a buyable single video.\n             * `buy_episode` - The promotion can be applied to a buyable single episode.\n             * `rent` - The promotion can be applied to a rentable single video.\n             * `rent_episode` - The promotion can be applied to a rentable single episode.\n             * `subscribe` - The promotion can be applied to a subscription.\n          enum:\n            - any\n            - buy\n            - buy_episode\n            - rent\n            - rent_episode\n            - subscribe\n          example: any\n          type: string\n        stream_period:\n          description: \u003e\n            The amount of time that the user has access to the VOD content after\n            redeeming a promo code.\n\n\n            Option descriptions:\n             * `1_week` - Access lasts for one week.\n             * `1_year` - Access lasts for one year.\n             * `24_hour` - Access lasts for 24 hours.\n             * `30_days` - Access lasts for 30 days.\n             * `3_month` - Access lasts for 3 months.\n             * `48_hour` - Access lasts for 48 hours.\n             * `6_month` - Access lasts for 6 months.\n             * `72_hour` - Access lasts for 72 hours.\n          enum:\n            - 1_week\n            - 1_year\n            - 24_hour\n            - 30_days\n            - 3_month\n            - 48_hour\n            - 6_month\n            - 72_hour\n          example: 1_week\n          nullable: true\n          type: string\n        total:\n          description: The total amount of times that this promotion can be used.\n          example: 1\n          type: number\n        type:\n          description: \u003e\n            The way in which this promotion can generate promo codes:\n\n\n            Option descriptions:\n             * `batch` - Provides many unique promo codes that can only be used once each.\n             * `batch_prefix` - Similar to `batch`, except that all codes have a similar prefix string. This mode is deprecated, yet it may still appear for some users.\n             * `single` - Provides a single promo code with many uses.\n          enum:\n            - batch\n            - batch_prefix\n            - single\n          example: batch\n          type: string\n        uri:\n          description: The promotion's canonical relative URI.\n          example: /ondemand/pages/61326/promotions/12345\n          type: string\n      required:\n        - access_type\n        - discount_type\n        - download\n        - label\n        - metadata\n        - percent_off\n        - product_type\n        - stream_period\n        - total\n        - type\n        - uri\n      title: On Demand Promotion\n      type: object\n    on-demand-promotion-code:\n      properties:\n        code:\n          description: A promotion code that can be redeemed on Vimeo.\n          example: 8jgaieumbzstujhn8k304iwwezawkvwm\n          type: string\n        link:\n          description: A link to redeem the promotion code instantly.\n          example: https://vimeo.com/r/0trBLg/OGpnYWlldW\n          type: string\n        max_uses:\n          description: The total amount of times this code can be used.\n          example: 1\n          type: number\n        uses:\n          description: The number of times that this code has been used.\n          example: 0\n          type: number\n      required:\n        - code\n        - link\n        - max_uses\n        - uses\n      title: On Demand Promotion Code\n      type: object\n    on-demand-region:\n      properties:\n        country_code:\n          description: The ISO 3166-1 alpha-2 code for this country.\n          example: US\n          type: string\n        country_name:\n          description: The descriptive name of this country.\n          example: United States\n          type: string\n        uri:\n          description: The region container's relative URI.\n          example: /ondemand/pages/61326/regions/US\n          type: string\n      required:\n        - country_code\n        - country_name\n        - uri\n      title: On Demand Region\n      type: object\n    on-demand-season:\n      properties:\n        description:\n          description: The description for this season.\n          example: Season 1\n          type: string\n        metadata:\n          properties:\n            connections:\n              properties:\n                videos:\n                  description: The Videos connection.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of videos on this connection.\n                      example: 13\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection ∂data.\n                      example: /ondemand/pages/61326/season/12345/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - videos\n              type: object\n          required:\n            - connections\n          type: object\n        name:\n          description: The descriptive name of the season.\n          example: Season 1\n          type: string\n        position:\n          description: The position of the season relative to other seasons in the series.\n          example: 1\n          type: number\n        resource_key:\n          description: The unique identifier for this On Demand season.\n          example: bac1033deba2310ebba2caec33c23e4beea67aba\n          type: string\n        type:\n          description: The type of season.\n          example: main\n          type: string\n        uri:\n          description: The season container's relative URI.\n          example: /ondemand/pages/61326/seasons/12345\n          type: string\n        user:\n          allOf:\n            - $ref: \"#/components/schemas/user\"\n          description: The creator of this On Demand page.\n          nullable: true\n      required:\n        - description\n        - metadata\n        - name\n        - position\n        - resource_key\n        - type\n        - uri\n        - user\n      title: On Demand Season\n      type: object\n    on-demand-video:\n      properties:\n        buy:\n          description: Information about purchasing this video.\n          nullable: true\n          properties:\n            active:\n              description: Whether this On Demand video can be purchased.\n              example: \"true\"\n              type: boolean\n            price:\n              description: A map of currency type to price.\n              type: object\n            purchased:\n              description: Whether this On Demand video has been purchased.\n              example: \"true\"\n              type: boolean\n          required:\n            - active\n            - price\n          type: object\n        description:\n          description: Description of the On Demand video.\n          example: DARBY FOREVER follows the fantasies of Darby, a shopgirl at \"Bobbins\n            \u0026 Notions\".\n          type: string\n        duration:\n          description: The duration of the On Demand video.\n          example: \"1197\"\n          type: string\n        episode:\n          description: The episode number of the On Demand video.\n          example: 1\n          type: number\n        interactions:\n          description: An object containing information about how the authenticated user\n            can interact with this On Demand page.\n          properties:\n            page:\n              description: Information about how the authenticated user can interact with\n                the connection to the video's On Demand page.\n              properties:\n                added:\n                  description: Whether this On Demand page was added.\n                  example: \"true\"\n                  type: boolean\n                options:\n                  description: An array of HTTP methods permitted on this URI.\n                  items:\n                    type: string\n                  type: array\n                uri:\n                  description: The URI to access the On Demand page.\n                  example: /ondemand/pages/61326\n                  type: string\n              required:\n                - added\n                - options\n                - uri\n              type: object\n          required:\n            - page\n          type: object\n        link:\n          description: The link to this video on Vimeo.\n          example: https://vimeo.com/ondemand/darbyforever/12345\n          type: string\n        metadata:\n          description: Metadata information about this video.\n          properties:\n            connections:\n              properties:\n                season:\n                  description: Information about this season.\n                  properties:\n                    name:\n                      description: The name of the season on this connection.\n                      example: Season 1\n                      type: string\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /ondemand/pages/61326/seasons/12345\n                      type: string\n                  required:\n                    - name\n                    - options\n                    - uri\n                  type: object\n              required:\n                - season\n              type: object\n            interactions:\n              properties:\n                likes:\n                  description: Information about the user's Like interactions with this\n                    video.\n                  properties:\n                    added:\n                      description: Whether the user has liked this video.\n                      example: \"true\"\n                      type: boolean\n                    added_time:\n                      description: The time in ISO 8601 format when the user liked this\n                        video.\n                      example: 2017-05-12T21:42:42+00:00\n                      type: string\n                    uri:\n                      description: The URI for the user to like this video.\n                      example: /users/152184/likes/12345\n                      type: string\n                  required:\n                    - added\n                    - added_time\n                    - uri\n                  type: object\n                watchlater:\n                  description: Information about the user's Watch Later interactions with\n                    this video.\n                  properties:\n                    added:\n                      description: Whether the user has added this video to their Watch\n                        Later queue.\n                      example: \"true\"\n                      type: boolean\n                    added_time:\n                      description: The time in ISO 8601 format when the user added this\n                        video to their Watch Later queue.\n                      example: 2017-05-12T21:42:42+00:00\n                      type: string\n                    uri:\n                      description: The URI for the user to add this video to their Watch\n                        Later queue.\n                      example: /users/152184/watchlater/12345\n                      type: string\n                  required:\n                    - added\n                    - added_time\n                    - uri\n                  type: object\n              required:\n                - likes\n                - watchlater\n              type: object\n          required:\n            - connections\n            - interactions\n          type: object\n        name:\n          description: The title of the On Demand video.\n          example: Darby Forever\n          type: string\n        options:\n          description: An array of HTTP methods permitted on this URI.\n          items:\n            type: string\n          type: array\n        pictures:\n          allOf:\n            - $ref: \"#/components/schemas/picture\"\n          description: The active picture for this video.\n        play_progress:\n          description: The user's most recent play position in seconds for this video.\n          example: 30\n          type: number\n        position:\n          description: Describes the manual position of this video relative to the other\n            videos owned by this On Demand page.\n          example: 1\n          type: number\n        release_date:\n          description: The time in ISO 8601 format when the On Demand video was created or\n            published.\n          example: 2017-05-12T21:06:42+00:00\n          type: string\n        release_year:\n          description: The year that this On Demand video was released.\n          example: 2016\n          nullable: true\n          type: number\n        rent:\n          description: Information about renting this video.\n          nullable: true\n          properties:\n            active:\n              description: Whether this On Demand video can be rented.\n              example: \"true\"\n              type: boolean\n            price:\n              description: A map of currency type to price.\n              type: object\n            purchased:\n              description: Whether this On Demand video has been rented.\n              example: \"true\"\n              type: boolean\n          required:\n            - active\n            - price\n          type: object\n        type:\n          description: |\n            The type of the On Demand video:\n\n            Option descriptions:\n             * `extra` - The On Demand video is an extra feature.\n             * `main` - The On Demand video is a main feature.\n             * `trailer` - The On Demand video is a trailer.\n          enum:\n            - extra\n            - main\n            - trailer\n          example: main\n          type: string\n        uri:\n          description: The video container's relative URI.\n          example: /ondemand/pages/61326/videos/12345\n          type: string\n        user:\n          allOf:\n            - $ref: \"#/components/schemas/user\"\n          description: The owner of the video.\n      required:\n        - buy\n        - interactions\n        - link\n        - metadata\n        - play_progress\n        - release_year\n        - rent\n        - type\n        - uri\n      title: On Demand Video\n      type: object\n    picture:\n      properties:\n        active:\n          description: Whether this picture is the active picture for its parent resource.\n          example: \"true\"\n          type: boolean\n        link:\n          description: The upload URL for the picture. This field appears when you create\n            the picture resource for the first time.\n          type: string\n        resource_key:\n          description: The picture's resource key string.\n          example: dc724af18fbdd4e59189f5fe768a5f8311527050\n          type: string\n        sizes:\n          description: An array containing reference information about all available image\n            files.\n          items:\n            properties:\n              height:\n                description: The height of the image.\n                example: 720\n                nullable: true\n                type: number\n              link:\n                description: The direct link to the image.\n                example: https://i.vimeocdn.com/video/581495283_1280x720.jpg?r=pad\n                type: string\n              link_with_play_button:\n                description: The direct link to the image with a play button overlay.\n                example: https://i.vimeocdn.com/filter/overlay?src0=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F581495283_1280x720.jpg\u0026src1=http%3A%2F%2Ff.vimeocdn.com%2Fp%2Fimages%2Fcrawler_play.png\n                type: string\n              width:\n                description: The width of the image.\n                example: 1280\n                type: number\n            required:\n              - height\n              - link\n              - width\n            type: object\n          type: array\n        type:\n          description: |\n            The type of the picture:\n\n            Option descriptions:\n             * `caution` - An image that is appropriate for all ages.\n             * `custom` - A custom image for the video.\n             * `default` - The default image for the video.\n          enum:\n            - caution\n            - custom\n            - default\n          example: caution\n          type: string\n        uri:\n          description: The picture's URI.\n          example: /users/152184/pictures/12345\n          type: string\n      required:\n        - active\n        - resource_key\n        - sizes\n        - type\n        - uri\n      title: Picture\n      type: object\n    play:\n      properties:\n        progressive:\n          description: Progressive files.\n          items:\n            properties:\n              created_time:\n                description: The time in ISO 8601 format when this video file was created.\n                example: 2017-05-16T17:21:51+00:00\n                type: string\n              fps:\n                description: The FPS of the video file.\n                example: 30\n                type: number\n              height:\n                description: The height in pixels of the video.\n                example: 720\n                nullable: true\n                type: number\n              link:\n                description: The direct link to this video file.\n                type: string\n              link_expiration_time:\n                description: The time in ISO 8601 format when the link to this video file\n                  expires.\n                example: 2017-05-16T17:21:51+00:00\n                type: string\n              log:\n                description: The URLs for logging events.\n                type: object\n              md5:\n                description: The MD5 hash of the video file.\n                example: 1bc29b36f623ba82aaf6724fd3b16718\n                type: string\n              size:\n                description: The file size in bytes of this video.\n                example: 5000000\n                nullable: true\n                type: number\n              type:\n                description: |\n                  The type of the video file:\n\n                  Option descriptions:\n                   * `source` - The video is a source file.\n                   * `video/mp4` - The video is in MP4 format.\n                   * `video/webm` - The video is in WebM format.\n                   * `vp6/x-video` - The video is in VP6 format.\n                enum:\n                  - source\n                  - video/mp4\n                  - video/webm\n                  - vp6/x-video\n                example: source\n                nullable: true\n                type: string\n              width:\n                description: The width in pixels of the video.\n                example: 1280\n                nullable: true\n                type: number\n            required:\n              - created_time\n              - fps\n              - height\n              - link\n              - link_expiration_time\n              - md5\n              - size\n              - type\n              - width\n            type: object\n          type: array\n        status:\n          description: |\n            The play status of the video:\n\n            Option descriptions:\n             * `playable` - The video is playable.\n             * `purchase_required` - The video must be purchased.\n             * `restricted` - Playback for the video is restricted.\n             * `unavailable` - The video is unavailable.\n          enum:\n            - playable\n            - purchase_required\n            - restricted\n            - unavailable\n          example: playable\n          type: string\n      required:\n        - status\n      title: Play\n      type: object\n    portfolio:\n      properties:\n        created_time:\n          description: The time in ISO 8601 format when the portfolio was created.\n          example: 2017-05-16T19:56:07+00:00\n          type: string\n        description:\n          description: The portfolio's description.\n          example: The Vimeo Staff original productions.\n          nullable: true\n          type: string\n        link:\n          description: The link to the portfolio.\n          example: https://vimeopro.com/staff/originals\n          type: string\n        metadata:\n          description: Metadata about the album.\n          properties:\n            connections:\n              description: A list of resource URIs related to the album.\n              properties:\n                videos:\n                  description: Information about the videos contained within this portfolio.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of videos on this connection.\n                      example: 18\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /users/152184/portfolios/12345/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - videos\n              type: object\n          required:\n            - connections\n          type: object\n        modified_time:\n          description: The time in ISO 8601 format when the portfolio's data was last\n            modified.\n          example: 2017-05-17T19:56:07+00:00\n          type: string\n        name:\n          description: The display name of the portfolio.\n          example: Vimeo Originals!\n          type: string\n        sort:\n          description: \u003e\n            The default video sort order for the portfolio:\n\n\n            Option descriptions:\n             * `alphabetical` - The default sort order is alphabetical by name.\n             * `clips` - The default sort order is video creation date.\n             * `modified` - The default sort order is the order in which the videos were modified.\n             * `recent` - The default sort order is the order in which the videos were added.\n          enum:\n            - alphabetical\n            - clips\n            - modified\n            - recent\n          example: alphabetical\n          type: string\n        uri:\n          description: The canonical relative URI of the portfolio.\n          example: /users/152184/portfolios/12345\n          type: string\n      required:\n        - created_time\n        - description\n        - link\n        - metadata\n        - modified_time\n        - name\n        - sort\n        - uri\n      title: Portfolio\n      type: object\n    presets:\n      properties:\n        metadata:\n          description: Metadata about the album.\n          properties:\n            connections:\n              description: A list of resource URIs related to the album.\n              properties:\n                videos:\n                  description: Information about the videos in this preset.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of videos on this connection.\n                      example: 13\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /users/152184/presets/12345/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - videos\n              type: object\n          required:\n            - connections\n          type: object\n        name:\n          description: The display name of the presets group.\n          example: Minimalism\n          type: string\n        settings:\n          description: The contents of the presets group.\n          properties:\n            buttons:\n              properties:\n                embed:\n                  description: Whether the preset includes Embed button settings.\n                  example: \"true\"\n                  type: boolean\n                hd:\n                  description: Whether the preset includes HD button settings.\n                  example: \"true\"\n                  type: boolean\n                like:\n                  description: Whether the preset includes Like button settings.\n                  example: \"true\"\n                  type: boolean\n                share:\n                  description: Whether the present includes Share button settings.\n                  example: \"true\"\n                  type: boolean\n                vote:\n                  description: Whether the preset includes Vote button settings.\n                  example: \"true\"\n                  type: boolean\n                watchlater:\n                  description: Whether the preset includes Watch Later button settings.\n                  example: \"true\"\n                  type: boolean\n              required:\n                - embed\n                - hd\n                - like\n                - share\n                - vote\n                - watchlater\n              type: object\n            logos:\n              properties:\n                custom:\n                  description: Whether the preset includes custom logo settings.\n                  example: \"true\"\n                  type: boolean\n                sticky_custom:\n                  description: Whether the present includes sticky custom logo settings.\n                  example: \"true\"\n                  type: boolean\n                vimeo:\n                  description: Whether the preset includes Vimeo logo settings.\n                  example: \"true\"\n                  type: boolean\n              required:\n                - custom\n                - sticky_custom\n                - vimeo\n              type: object\n            outro:\n              properties:\n                clips:\n                  description: A comma-separated list of video URIs. Present only if the\n                    type is `uploaded_clips`.\n                  example: /videos/258684937,/videos/273576296\n                  nullable: true\n                  type: string\n                link:\n                  description: The outro link settings. Present only if the type is `link`.\n                  nullable: true\n                  properties:\n                    name:\n                      description: The name of the outro link.\n                      example: Example Outro\n                      type: string\n                    url:\n                      description: The URL of the outro link.\n                      example: https://example.com\n                      type: string\n                  type: object\n                text:\n                  description: The outro text. Present only if the type is `text`.\n                  example: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                  nullable: true\n                  type: string\n                type:\n                  description: \"The preset outro type:\"\n                  enum:\n                    - link\n                    - no idea\n                    - text\n                    - uploaded_clips\n                    - uploaded_videos\n                  example: link\n                  type: string\n                videos:\n                  description: A comma-separated list of video URIs. Present only if type\n                    is `no idea`.\n                  example: /videos/258684937,/videos/273576296\n                  nullable: true\n                  type: string\n              required:\n                - type\n              type: object\n          required:\n            - buttons\n            - logos\n            - outro\n          type: object\n        uri:\n          description: The canonical relative URI of the presets object.\n          example: /users/152184/presets/12345\n          type: string\n        user:\n          allOf:\n            - $ref: \"#/components/schemas/user\"\n          description: The owner of the preset.\n          nullable: true\n      required:\n        - metadata\n        - name\n        - settings\n        - uri\n        - user\n      title: Presets\n      type: object\n    project:\n      properties:\n        created_time:\n          description: The time in ISO 8601 format when the project was created.\n          example: 2017-05-23T14:36:22+00:00\n          type: string\n        metadata:\n          description: The project's metadata.\n          properties:\n            connections:\n              description: A list of resource URIs related to the project.\n              properties:\n                videos:\n                  description: A standard connection object indicating how to get all the\n                    videos in this project.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of videos on this connection.\n                      example: 12\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /users/152184/projects/12345/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - videos\n              type: object\n          required:\n            - connections\n          type: object\n        modified_time:\n          description: The time in ISO 8601 format when the project was last modified.\n          example: 2017-05-23T14:36:22+00:00\n          type: string\n        name:\n          description: The name of the folder.\n          example: Rough cuts\n          type: string\n        resource_key:\n          description: The resource key string of the project.\n          example: dc724af18fbdd4e59189f5fe768a5f8311527050\n          type: string\n        uri:\n          description: The URI of the project.\n          example: /me/projects/12345\n          type: string\n        user:\n          allOf:\n            - $ref: \"#/components/schemas/user\"\n          description: The owner of the project.\n      required:\n        - created_time\n        - metadata\n        - modified_time\n        - name\n        - resource_key\n        - uri\n        - user\n      title: Project\n      type: object\n    purchase-interaction:\n      properties:\n        buy:\n          description: Information on purchasing this video.\n          nullable: true\n          properties:\n            drm:\n              description: Whether the On Demand video for purchase has DRM.\n              example: \"true\"\n              type: boolean\n          type: object\n        rent:\n          description: Information on renting this video.\n          nullable: true\n          type: object\n        subscribe:\n          description: Information on subscribing to this video.\n          nullable: true\n          properties:\n            drm:\n              description: Whether the On Demand subscription has DRM.\n              example: \"true\"\n              type: boolean\n            expires_time:\n              description: The time in ISO 8601 format when the On Demand video will expire.\n              example: 2018-03-05T21:04:47+00:00\n              nullable: true\n              type: string\n            link:\n              description: The URL to purchase this On Demand subscription on Vimeo.\n              example: https://vimeo.com/ondemand/darbyforever\n              nullable: true\n              type: string\n            purchase_time:\n              description: The time in ISO 8601 format when the On Demand was purchased.\n              example: 2018-03-05T21:04:47+00:00\n              nullable: true\n              type: string\n            stream:\n              description: \u003e\n                The user's streaming access to this On Demand subscription:\n\n\n                Option descriptions:\n                 * `available` - The On Demand subscription is available for streaming.\n                 * `purchased` - The On Demand subscription has been purchased.\n                 * `restricted` - Streaming for the On Demand subscription is restricted.\n                 * `unavailable` - The On Demand subscription is unavailable.\n              enum:\n                - available\n                - purchased\n                - restricted\n                - unavailable\n              example: available\n              type: string\n            uri:\n              description: The On Demand subscription's product URI.\n              example: /ondemand/pages/61326/products/12345\n              nullable: true\n              type: string\n          type: object\n      title: Purchase Interaction\n      type: object\n    tag:\n      properties:\n        canonical:\n          description: The normalized canonical tag name.\n          example: awesome\n          type: string\n        metadata:\n          description: Metadata about the group.\n          properties:\n            connections:\n              description: A collection of information that is connected to this resource.\n              properties:\n                videos:\n                  description: Information about the videos related to this tag.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of videos on this connection.\n                      example: 34371\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /tags/awesome/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - videos\n              type: object\n          required:\n            - connections\n          type: object\n        name:\n          description: The tag value.\n          example: awesome\n          type: string\n        resource_key:\n          description: The tag's resource key string.\n          example: bac1033deba2310ebba2caec33c23e4beea67aba\n          type: string\n        uri:\n          description: The canonical relative URI of the tag.\n          example: /videos/258684937/tags/awesome\n          type: string\n      required:\n        - canonical\n        - metadata\n        - name\n        - resource_key\n        - uri\n      title: Tag\n      type: object\n    text-track:\n      properties:\n        active:\n          description: Whether this text track is active.\n          example: \"true\"\n          type: boolean\n        hls_link:\n          description: The read-only URL of the text track file, intended for use with HLS\n            playback.\n          type: string\n        hls_link_expires_time:\n          description: The time in ISO 8601 format when the read-only HLS playback text\n            track file expires.\n          example: \"1494888499\"\n          type: string\n        language:\n          description: |-\n            The language code for this text track. To see a full list, request\n            `/languages?filter=texttrack`.\n          example: en-US\n          nullable: true\n          type: string\n        link:\n          description: The read-only URL of the text track file. You can upload to this\n            link when you create it for the first time.\n          type: string\n        link_expires_time:\n          description: The time in ISO 8601 format when the text track link expires.\n          example: \"1494888499\"\n          type: string\n        name:\n          description: The descriptive name of this text track.\n          example: English Subtitles\n          nullable: true\n          type: string\n        type:\n          description: |\n            The type of the text track:\n\n            Option descriptions:\n             * `captions` - The text track is for captions.\n             * `subtitles` - The text track is for subtitles.\n          enum:\n            - captions\n            - subtitles\n          example: captions\n          nullable: true\n          type: string\n        uri:\n          description: The relative URI of the text track.\n          example: /videos/258684937/texttracks/12345\n          type: string\n      required:\n        - active\n        - hls_link\n        - hls_link_expires_time\n        - language\n        - link\n        - link_expires_time\n        - name\n        - type\n        - uri\n      title: Text Track\n      type: object\n    upload-attempt:\n      properties:\n        clip:\n          allOf:\n            - $ref: \"#/components/schemas/video\"\n          description: The video to upload.\n        complete_uri:\n          description: The completion URI of the upload.\n          example: /users/152184/uploads/12345?video_file_id=5678\u0026upgrade=true\u0026signature=r394y347ffefeff434\n          type: string\n        form:\n          description: The HTML upload form.\n          type: string\n        ticket_id:\n          description: The ticket identifier string for the upload.\n          example: 3da5dac09\n          type: string\n        upload_link:\n          description: The upload URL.\n          example: https://123456.cloud.vimeo.com/upload?ticket_id=1234asdf\n          type: string\n        uri:\n          description: The upload URI.\n          example: /users/152184/uploads/12345\n          type: string\n        user:\n          allOf:\n            - $ref: \"#/components/schemas/user\"\n          description: The owner of the uploaded video.\n      required:\n        - ticket_id\n        - upload_link\n        - uri\n        - user\n      title: Upload Attempt\n      type: object\n    user:\n      properties:\n        account:\n          description: \u003e\n            The user's account type:\n\n\n            Option descriptions:\n             * `basic` - The user has a Vimeo Basic subscription.\n             * `business` - The user has a Vimeo Business subscription.\n             * `live_business` - The user has a Vimeo Business Live subscription.\n             * `live_premium` - The user has a Vimeo Premium subscription.\n             * `live_pro` - The user has a Vimeo PRO Live subscription.\n             * `plus` - The user has a Vimeo Plus subscription.\n             * `pro` - The user has a Vimeo Pro subscription.\n             * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.\n             * `producer` - The user has a Vimeo Producer subscription.\n          enum:\n            - basic\n            - business\n            - live_business\n            - live_premium\n            - live_pro\n            - plus\n            - pro\n            - pro_unlimited\n            - producer\n          example: basic\n          type: string\n        bio:\n          description: The user's bio.\n          example: This is where you will find videos and news updates from the staff.\n          nullable: true\n          type: string\n        content_filter:\n          description: |\n            The user's content filters:\n\n            Option descriptions:\n             * `drugs` - Drugs or alcohol use.\n             * `language` - Profanity or sexually suggestive content.\n             * `nudity` - Nudity.\n             * `safe` - Suitable for all audiences.\n             * `unrated` - No rating.\n             * `violence` - Violent or graphic content.\n          enum:\n            - drugs\n            - language\n            - nudity\n            - safe\n            - unrated\n            - violence\n          example: drugs\n          items:\n            type: string\n          type: array\n        created_time:\n          description: The time in ISO 8601 format when the user account was created.\n          example: 2007-01-18T16:40:11+00:00\n          type: string\n        email:\n          description: The user's email address. This data requires a bearer token with the\n            `email` scope.\n          example: user@example.com\n          type: string\n        link:\n          description: The absolute URL of this user's profile page.\n          example: https://vimeo.com/staff\n          type: string\n        location:\n          description: The user's location.\n          example: New York City\n          nullable: true\n          type: string\n        metadata:\n          description: The user's metadata.\n          properties:\n            connections:\n              description: The list of resource URIs related to the user.\n              properties:\n                albums:\n                  description: Information about the albums created by this user.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of albums on this connection.\n                      example: 3\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /users/152184/albums\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                appearances:\n                  description: Information about the appearances of this user in other\n                    videos.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of appearances on this connection.\n                      example: 6\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /users/152184/appearances\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                block:\n                  description: Information on the users that the current user has blocked.\n                    This data requires a bearer token with the `private` scope.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI. This\n                        data requires a bearer token with the `private` scope.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of blocked users on this connection.\n                        This data requires a bearer token with the `private`\n                        scope.\n                      example: 73\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data. This\n                        data requires a bearer token with the `private` scope.\n                      example: /me/block\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                categories:\n                  description: Information about this user's followed categories.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of categories on this connection.\n                      example: 5\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /users/152184/categories\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                channels:\n                  description: Information about this user's subscribed channels.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of channels on this connection.\n                      example: 4\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /users/152184/channels\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                feed:\n                  description: Information about this user's feed.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /users/152184/feed\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n                folders:\n                  description: Information about this user's folders.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of folders on this connection.\n                      example: 9\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /me/folders\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                followers:\n                  description: Information about the user's followers.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of followers on this connection.\n                      example: 12\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /users/152184/followers\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                following:\n                  description: Information about the users that the current user is\n                    following.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of users on this connection.\n                      example: 47\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /users/152184/following\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                groups:\n                  description: Information about the groups created by this user.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of groups on this connection.\n                      example: 2\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /users/152184/groups\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                likes:\n                  description: Information about the videos that this user has liked.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of likes on this connection.\n                      example: 300\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /users/152184/likes\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                moderated_channels:\n                  description: Information about the channels that this user moderates.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of channels on this connection.\n                      example: 1\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /users/152184/channels?filter=moderated\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                pictures:\n                  description: Information about this user's portraits.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of pictures on this connection.\n                      example: 3\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /users/152184/pictures\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                portfolios:\n                  description: Information about this user's portfolios.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of portfolios on this connection.\n                      example: 5\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /users/152184/portfolios\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                recommended_channels:\n                  description: A collection of recommended channels for the current user to\n                    follow. This data requires a bearer token with the `private`\n                    scope.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI. This\n                        data requires a bearer token with the `private` scope.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of channels on this connection. This\n                        data requires a bearer token with the `private` scope.\n                      example: 4\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data. This\n                        data requires a bearer token with the `private` scope.\n                      example: /me/recommendations/channels\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                recommended_users:\n                  description: A Collection of recommended users for the current user to\n                    follow. This data requires a bearer token with the `private`\n                    scope.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI. This\n                        data requires a bearer token with the `private` scope.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of users on this connection. This data\n                        requires a bearer token with the `private` scope.\n                      example: 6\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data. This\n                        data requires a bearer token with the `private` scope.\n                      example: /me/recommendations/users\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                shared:\n                  description: Information about the videos that have been shared with this\n                    user.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of videos on this connection.\n                      example: 15\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /users/152184/shared/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                videos:\n                  description: Information about the videos uploaded by this user.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of videos on this connection.\n                      example: 36\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /users/152184/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                watched_videos:\n                  description: Information about the videos that this user has watched.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of videos on this connection.\n                      example: 322\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /me/watched/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                watchlater:\n                  description: Information about the videos that this user wants to watch\n                    later.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of videos on this connection.\n                      example: 14\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /users/152184/watchlater\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - albums\n                - appearances\n                - block\n                - categories\n                - channels\n                - feed\n                - folders\n                - followers\n                - following\n                - groups\n                - likes\n                - moderated_channels\n                - pictures\n                - portfolios\n                - recommended_channels\n                - recommended_users\n                - shared\n                - videos\n                - watched_videos\n                - watchlater\n              type: object\n            interactions:\n              properties:\n                add_privacy_user:\n                  properties:\n                    options:\n                      description: An array of the HTTP methods permitted on this URI. This\n                        data requires a bearer token with the `private` scope.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data. This\n                        data requires a bearer token with the `private` scope.\n                      example: /channels/152184/privacy/users\n                      type: string\n                  type: object\n                block:\n                  description: Information related to the block status of this user.\n                  properties:\n                    added:\n                      description: Whether a user is blocking the current user.\n                      example: \"true\"\n                      type: boolean\n                    added_time:\n                      description: The time in ISO 8601 format when the block occurred, or\n                        the null value if no block exists.\n                      example: 2017-05-16T15:05:43+00:00\n                      nullable: true\n                      type: string\n                    options:\n                      description: An array of the HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The URI to block or unblock the user.\n                      example: /me/block/3766357\n                      type: string\n                  required:\n                    - added\n                    - added_time\n                    - options\n                    - uri\n                  type: object\n                follow:\n                  description: Information related to the followed status of this user.\n                  properties:\n                    added:\n                      description: Whether a user is following the current user.\n                      example: \"true\"\n                      type: boolean\n                    options:\n                      description: An array of the HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The URI to follow the user.\n                      example: /users/152184/following/3766357\n                      type: string\n                  required:\n                    - added\n                    - options\n                    - uri\n                  type: object\n                report:\n                  description: Information regarding where and how to report a user.\n                  properties:\n                    options:\n                      description: An array of the HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    reason:\n                      description: List of valid reasons for reporting a video.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /users/152184/report\n                      type: string\n                  required:\n                    - options\n                    - reason\n                    - uri\n                  type: object\n              required:\n                - block\n                - follow\n                - report\n              type: object\n          required:\n            - connections\n            - interactions\n          type: object\n        name:\n          description: The user's display name.\n          example: Vimeo Staff\n          type: string\n        pictures:\n          allOf:\n            - $ref: \"#/components/schemas/picture\"\n          description: The active portrait of this user.\n        preferences:\n          properties:\n            videos:\n              properties:\n                privacy:\n                  properties:\n                    add:\n                      description: Whether other users can add the user's videos.\n                      example: \"true\"\n                      type: boolean\n                    comments:\n                      description: \u003e\n                        The user's privacy preference for comments:\n\n\n                        Option descriptions:\n                         * `anybody` - Anyone can comment on the user's videos.\n                         * `contacts` - Only contacts can comment on the user's videos.\n                         * `nobody` - No one can comment on the user's videos.\n                      enum:\n                        - anybody\n                        - contacts\n                        - nobody\n                      example: anybody\n                      type: string\n                    download:\n                      description: Whether other users can download the user's videos.\n                      example: \"true\"\n                      type: boolean\n                    embed:\n                      description: \u003e\n                        The user's privacy preference for embeds:\n\n\n                        Option descriptions:\n                         * `private` - Only the user can embed their own videos.\n                         * `public` - Anyone can embed the user's videos.\n                         * `whitelist` - Only those on the whitelist can embed the user's videos.\n                      enum:\n                        - private\n                        - public\n                        - whitelist\n                      example: private\n                      type: string\n                    view:\n                      description: \u003e\n                        The user's privacy preference for views:\n\n\n                        Option descriptions:\n                         * `anybody` - Anyone can view the user's videos.\n                         * `contacts` - Only contacts can view the user's videos.\n                         * `disable` - Views are disabled for the user's videos.\n                         * `nobody` - No one except the user can view the user's videos.\n                         * `password` - Only those with the password can view the user's videos.\n                         * `unlisted` - Anybody can view the user's videos if they have a link.\n                         * `users` - Only other Vimeo members can view the user's videos.\n                      enum:\n                        - anybody\n                        - contacts\n                        - disable\n                        - nobody\n                        - password\n                        - unlisted\n                        - users\n                      example: anybody\n                      type: string\n                  type: object\n              type: object\n          type: object\n        resource_key:\n          description: The user's resource key string.\n          example: bac1033deba2310ebba2caec33c23e4beea67aba\n          type: string\n        upload_quota:\n          description: Appears only when the user has upload access and is looking at their\n            own user record.\n          properties:\n            lifetime:\n              description: Information about the user's lifetime upload usage.\n              properties:\n                free:\n                  description: The number of bytes remaining in your lifetime maximum.\n                  example: 5000000\n                  nullable: true\n                  type: number\n                max:\n                  description: The total number of bytes that you can upload across the\n                    lifetime of your account.\n                  example: 5368709120\n                  nullable: true\n                  type: number\n                used:\n                  description: The number of bytes that you've already uploaded against\n                    your lifetime limit.\n                  example: 5368704120\n                  nullable: true\n                  type: number\n              required:\n                - free\n                - max\n                - used\n              type: object\n            periodic:\n              description: Information about the user's usage for the current period.\n              properties:\n                free:\n                  description: The number of bytes remaining in your upload quota for the\n                    current period.\n                  example: 5000000\n                  nullable: true\n                  type: number\n                max:\n                  description: The total number of bytes that you can upload per period.\n                  example: 5368709120\n                  nullable: true\n                  type: number\n                reset_date:\n                  description: The time in ISO 8601 format when your upload quota resets.\n                  example: 2029-03-13T02:35:13-04:00\n                  nullable: true\n                  type: string\n                used:\n                  description: The number of bytes that you've already uploaded against\n                    your quota in the current period.\n                  example: 5368704120\n                  nullable: true\n                  type: number\n              required:\n                - free\n                - max\n                - reset_date\n                - used\n              type: object\n            space:\n              description: Information about the user's upload space remaining for the\n                current period.\n              properties:\n                free:\n                  description: The number of bytes remaining in your upload quota.\n                  example: 5000000\n                  type: number\n                max:\n                  description: The maximum number of bytes allotted to your upload quota.\n                  example: 5368709120\n                  nullable: true\n                  type: number\n                showing:\n                  description: Whether the values of the upload_quota.space fields are for\n                    the lifetime quota or the periodic quota.\n                  enum:\n                    - lifetime\n                    - periodic\n                  example: lifetime\n                  type: string\n                used:\n                  description: The number of bytes that you've already uploaded against\n                    your quota.\n                  example: 5368704120\n                  type: number\n              required:\n                - free\n                - max\n                - showing\n                - used\n              type: object\n          required:\n            - lifetime\n            - periodic\n            - space\n          type: object\n        uri:\n          description: The user's canonical relative URI.\n          example: /users/152184\n          type: string\n        websites:\n          description: The user's websites.\n          items:\n            properties:\n              description:\n                description: The website's description.\n                example: Follow us on Twitter!\n                nullable: true\n                type: string\n              link:\n                description: The URL of the website.\n                example: https://twitter.com/vimeo\n                type: string\n              name:\n                description: The name of the website.\n                example: Twitter\n                nullable: true\n                type: string\n            required:\n              - description\n              - link\n              - name\n            type: object\n          type: array\n      required:\n        - account\n        - bio\n        - created_time\n        - link\n        - location\n        - metadata\n        - name\n        - pictures\n        - resource_key\n        - upload_quota\n        - uri\n        - websites\n      title: User\n      type: object\n    video:\n      properties:\n        categories:\n          description: The categories to which this video belongs.\n          items:\n            $ref: \"#/components/schemas/category\"\n          type: array\n        content_rating:\n          description: The content ratings of this video.\n          items:\n            type: string\n          type: array\n        context:\n          description: The context of the video's subscription, if this video is part of a\n            subscription.\n          properties:\n            action:\n              description: |\n                The contextual action:\n\n                Option descriptions:\n                 * `Added to` - An Added To action.\n                 * `Appearance by` - An Appearance By action.\n                 * `Liked by` - A Liked By action.\n                 * `Uploaded by` - An Unloaded By action.\n              enum:\n                - Added to\n                - Appearance by\n                - Liked by\n                - Uploaded by\n              example: Added to\n              type: string\n            resource:\n              description: \"The contextual resource: a user, group, or channel\n                representation, or an object of a tag.\"\n              nullable: true\n              type: object\n            resource_type:\n              description: The contextual resource type.\n              example: clip\n              type: string\n          required:\n            - action\n            - resource\n            - resource_type\n          type: object\n        created_time:\n          description: The time in ISO 8601 format when the video was created.\n          example: 2018-03-05T21:04:47+00:00\n          type: string\n        description:\n          description: A brief explanation of the video's content.\n          example: A celebration of 10 years of Staff Picks.\n          nullable: true\n          type: string\n        duration:\n          description: The video's duration in seconds.\n          example: 81\n          type: number\n        embed:\n          allOf:\n            - $ref: \"#/components/schemas/embed-settings\"\n          description: Information about embedding this video.\n        height:\n          description: The video's height in pixels.\n          example: 1080\n          type: number\n        language:\n          description: The video's primary language.\n          example: en-US\n          nullable: true\n          type: string\n        last_user_action_event_date:\n          description: The time in ISO 8601 format when the user last modified the video.\n          example: 2018-03-21T23:08:22+00:00\n          nullable: true\n          type: string\n        license:\n          description: \u003e\n            The [Creative Commons](http://creativecommons.org/licenses/) license\n            used for the video:\n\n\n            Option descriptions:\n             * `by` - Attribution\n             * `by-nc` - Attribution Non-Commercial\n             * `by-nc-nd` - Attribution Non-Commercial No Derivatives\n             * `by-nc-sa` - Attribution Non-Commercial Share Alike\n             * `by-nd` - Attribution No Derivatives\n             * `by-sa` - Attribution Share Alike\n             * `cc0` - Public Domain Dedication\n          enum:\n            - by\n            - by-nc\n            - by-nc-nd\n            - by-nc-sa\n            - by-nd\n            - by-sa\n            - cc0\n          example: by\n          type: string\n        link:\n          description: The link to the video.\n          example: https://vimeo.com/258684937\n          type: string\n        metadata:\n          description: The video's metadata.\n          properties:\n            connections:\n              description: A list of resource URIs related to the video.\n              properties:\n                comments:\n                  description: Information about the comments on this video.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of comments on this connection.\n                      example: 14\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /videos/258684937/comments\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                credits:\n                  description: Information about the users credited in this video.\n                  nullable: true\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of users on this connection.\n                      example: 4\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /videos/258684937/credits\n                      type: string\n                  type: object\n                likes:\n                  description: Information about the users who have liked this video.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of likes on this connection.\n                      example: 230\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /videos/258684937/likes\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                ondemand:\n                  description: Information about this video's ondemand data.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    resource_key:\n                      description: The On Demand connection resource key.\n                      example: bac1033deba2310ebba2caec33c23e4beea67aba\n                      type: string\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /ondemand/pages/61326\n                      type: string\n                  required:\n                    - options\n                    - resource_key\n                    - uri\n                  type: object\n                pictures:\n                  description: Information about this video's thumbnails.\n                  properties:\n                    options:\n                      description: An array of HTTP methods allowed on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: Total number of thumbnails on this connection.\n                      example: 1\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /videos/258684937/pictures\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                playback:\n                  description: The DRM playback status connection for this video.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /videos/258684937/playback\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n                recommendations:\n                  description: The recommendations for this video.\n                  nullable: true\n                  properties:\n                    options:\n                      description: An array of HTTP methods allowed on this URI.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /videos/258684937/recommendations\n                      type: string\n                  type: object\n                related:\n                  description: Related content for this video.\n                  nullable: true\n                  properties:\n                    options:\n                      description: An array of HTTP methods allowed on this URI.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /videos/258684937?offset=10\n                      type: string\n                  type: object\n                season:\n                  description: Information about the video's season.\n                  properties:\n                    name:\n                      description: The name of this season.\n                      example: Season 1\n                      type: string\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /ondemand/pages/61326/season/12345\n                      type: string\n                  required:\n                    - name\n                    - options\n                    - uri\n                  type: object\n                texttracks:\n                  description: Information about this video's text tracks.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of text tracks on this connection.\n                      example: 2\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /videos/258684937/texttracks\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                trailer:\n                  description: Information about this video's VOD trailer.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    resource_key:\n                      description: The trailer connection resource key.\n                      example: bac1033deba2310ebba2caec33c23e4beea67aba\n                      type: string\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /ondemand/pages/61326/videos/12345\n                      type: string\n                  required:\n                    - options\n                    - resource_key\n                    - uri\n                  type: object\n                users_with_access:\n                  description: Information about the user privacy of this video, if the\n                    video privacy is `users`.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of users on this connection.\n                      example: 8\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /videos/258684937/privacy/users\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                versions:\n                  description: Information about the versions of this video.\n                  properties:\n                    current_uri:\n                      description: The URI of the current version of the video.\n                      example: /videos/258684937/versions/12345\n                      type: string\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of versions on this connection.\n                      example: 3\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /videos/258684937/versions\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - comments\n                - credits\n                - likes\n                - ondemand\n                - pictures\n                - playback\n                - recommendations\n                - related\n                - season\n                - texttracks\n                - trailer\n                - users_with_access\n                - versions\n              type: object\n            interactions:\n              description: A list of resource URIs related to the video.\n              properties:\n                buy:\n                  description: The Buy interaction for a On Demand video.\n                  nullable: true\n                  properties:\n                    currency:\n                      description: The currency code for the current user's region.\n                      example: USD\n                      nullable: true\n                      type: string\n                    display_price:\n                      description: Formatted price to display to buy an On Demand video.\n                      example: \"5.99\"\n                      nullable: true\n                      type: string\n                    download:\n                      description: \u003e\n                        The user's download access to this On Demand video:\n\n\n                        Option descriptions:\n                         * `available` - The video is available for download.\n                         * `purchased` - The user has purchased the video.\n                         * `restricted` - The user isn't permitted to download the video.\n                         * `unavailable` - The video isn't available for download.\n                      enum:\n                        - available\n                        - purchased\n                        - restricted\n                        - unavailable\n                      example: available\n                      type: string\n                    drm:\n                      description: Whether the video has DRM.\n                      example: \"true\"\n                      type: boolean\n                    link:\n                      description: The URL to buy the On Demand video on Vimeo.\n                      example: https://vimeo.com/ondemand/darbyforever\n                      nullable: true\n                      type: string\n                    price:\n                      description: The numeric value of the price for buying the On Demand\n                        video.\n                      example: 5.99\n                      nullable: true\n                      type: number\n                    purchase_time:\n                      description: The time in ISO 8601 format when the On Demand video was\n                        purchased.\n                      example: 2018-03-05T21:04:47+00:00\n                      nullable: true\n                      type: string\n                    stream:\n                      description: \u003e\n                        The user's streaming access to this On Demand video:\n\n\n                        Option descriptions:\n                         * `available` - The video is available for streaming.\n                         * `purchased` - The user has purchased the video.\n                         * `restricted` - The user isn't permitted to stream the video.\n                         * `unavailable` - The video isn't available for streaming\n                      enum:\n                        - available\n                        - purchased\n                        - restricted\n                        - unavailable\n                      example: available\n                      type: string\n                    uri:\n                      description: The product URI to purchase the On Demand video.\n                      example: /ondemand/pages/61326/products/12345\n                      nullable: true\n                      type: string\n                  required:\n                    - currency\n                    - display_price\n                    - download\n                    - drm\n                    - link\n                    - price\n                    - purchase_time\n                    - stream\n                    - uri\n                  type: object\n                channel:\n                  description: When a video is referenced by a channel URI, if the user is\n                    a moderator of the channel, include information about\n                    removing the video from the channel.\n                  nullable: true\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n                like:\n                  description: Information about whether the authenticated user has liked\n                    this video.\n                  properties:\n                    added:\n                      description: Whether the user has liked the video.\n                      example: \"true\"\n                      type: boolean\n                    added_time:\n                      description: The time in ISO 8601 format when the user liked the\n                        video.\n                      type: string\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      type: string\n                  required:\n                    - added\n                    - added_time\n                    - options\n                    - uri\n                  type: object\n                rent:\n                  description: The Rent interaction for an On Demand video.\n                  nullable: true\n                  properties:\n                    currency:\n                      description: The currency code for the current user's region.\n                      example: USD\n                      nullable: true\n                      type: string\n                    display_price:\n                      description: Formatted price to display to rent an On Demand video.\n                      example: \"5.99\"\n                      nullable: true\n                      type: string\n                    drm:\n                      description: Whether the video has DRM.\n                      example: \"true\"\n                      type: boolean\n                    expires_time:\n                      description: The time in ISO 8601 format when the rental period for\n                        the video expires.\n                      example: 2018-03-05T21:04:47+00:00\n                      nullable: true\n                      type: string\n                    link:\n                      description: The URL to rent the On Demand video on Vimeo.\n                      example: https://vimeo.com/ondemand/darbyforever\n                      nullable: true\n                      type: string\n                    price:\n                      description: The numeric value of the price for buying the On Demand\n                        video.\n                      example: 5.99\n                      nullable: true\n                      type: number\n                    purchase_time:\n                      description: The time in ISO 8601 format when the On Demand video was\n                        rented.\n                      example: 2018-09-16T09:02:40+00:00\n                      nullable: true\n                      type: string\n                    stream:\n                      description: \u003e\n                        The user's streaming access to this On Demand video:\n\n\n                        Option descriptions:\n                         * `available` - The video is available for streaming.\n                         * `purchased` - The user has purchased the video.\n                         * `restricted` - The user isn't permitted to stream the video.\n                         * `unavailable` - The video isn't available for streaming.\n                      enum:\n                        - available\n                        - purchased\n                        - restricted\n                        - unavailable\n                      example: available\n                      type: string\n                    uri:\n                      description: The product URI to rent the On Demand video.\n                      example: /ondemand/pages/61326/products/12345\n                      nullable: true\n                      type: string\n                  required:\n                    - currency\n                    - display_price\n                    - drm\n                    - expires_time\n                    - link\n                    - price\n                    - purchase_time\n                    - stream\n                    - uri\n                  type: object\n                report:\n                  description: Information about where and how to report a video.\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    reason:\n                      description: A list of valid reasons for reporting a video.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      type: string\n                  required:\n                    - options\n                    - reason\n                    - uri\n                  type: object\n                subscribe:\n                  description: Subscription information for an On Demand video.\n                  nullable: true\n                  properties:\n                    drm:\n                      description: Whether the video has DRM.\n                      example: \"true\"\n                      type: boolean\n                    expires_time:\n                      description: The time in ISO 8601 format when the subscription\n                        expires.\n                      example: 2018-03-05T21:04:47+00:00\n                      type: string\n                    purchase_time:\n                      description: The tine in ISO 8601 format when the subscription was\n                        purchased.\n                      example: 2018-03-02T21:04:47+00:00\n                      type: string\n                    stream:\n                      description: The stream type.\n                      example: purchased\n                      type: string\n                  type: object\n                watched:\n                  description: Information about removing this video from the user's list\n                    of watched videos.\n                  properties:\n                    added:\n                      description: Whether the user has watched the video.\n                      example: \"true\"\n                      type: boolean\n                    added_time:\n                      description: The time in ISO 8601 format when the user watched the\n                        video.\n                      type: string\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      type: string\n                  required:\n                    - added\n                    - added_time\n                    - options\n                    - uri\n                  type: object\n                watchlater:\n                  description: Information about whether this video appears on the\n                    authenticated user's Watch Later list.\n                  properties:\n                    added:\n                      description: Whether the user has added the video to their Watch\n                        later list.\n                      example: \"true\"\n                      type: boolean\n                    added_time:\n                      description: The time in ISO 8601 format when the user added the\n                        video to their Watch Later list.\n                      type: string\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      type: string\n                  required:\n                    - added\n                    - added_time\n                    - options\n                    - uri\n                  type: object\n              required:\n                - buy\n                - channel\n                - like\n                - rent\n                - report\n                - watched\n                - watchlater\n              type: object\n          required:\n            - connections\n            - interactions\n          type: object\n        modified_time:\n          description: The time in ISO 8601 format when the video metadata was last\n            modified.\n          example: 2018-09-16T09:02:40+00:00\n          type: string\n        name:\n          description: The video's title.\n          example: Celebrating 10 Years of Staff Picks\n          type: string\n        parent_folder:\n          allOf:\n            - $ref: \"#/components/schemas/project\"\n          description: Information about the folder that contains this video.\n          nullable: true\n        password:\n          description: The privacy-enabled password to watch this video. Only users can see\n            their own video passwords. This data requires a bearer token with\n            the `private` scope.\n          example: hunter1\n          type: string\n        pictures:\n          allOf:\n            - $ref: \"#/components/schemas/picture\"\n          description: The active picture for this video.\n        privacy:\n          description: The video's privacy setting.\n          properties:\n            add:\n              description: Whether the video can be added to collections.\n              example: \"true\"\n              type: boolean\n            comments:\n              description: |\n                Who can comment on the video:\n\n                Option descriptions:\n                 * `anybody` - Anyone can comment on the video.\n                 * `contacts` - Only contacts can comment on the video.\n                 * `nobody` - No one can comment on the video.\n              enum:\n                - anybody\n                - contacts\n                - nobody\n              example: anybody\n              type: string\n            download:\n              description: The video's download permission setting.\n              example: \"true\"\n              type: boolean\n            embed:\n              description: |\n                The video's embed permission setting:\n\n                Option descriptions:\n                 * `private` - The video is private.\n                 * `public` - Anyone can embed the video.\n              enum:\n                - private\n                - public\n              example: private\n              type: string\n            view:\n              description: \u003e\n                The general privacy setting for the video:\n\n\n                Option descriptions:\n                 * `anybody` - Anyone can view the video.\n                 * `contacts` - Only contacts can view the video.\n                 * `disable` - Hide from vimeo\n                 * `nobody` - No one besides the owner can view the video.\n                 * `password` - Anyone with the video's password can view the video.\n                 * `unlisted` - Not searchable from vimeo.com\n                 * `users` - Only people with a Vimeo account can view the video.\n              enum:\n                - anybody\n                - contacts\n                - disable\n                - nobody\n                - password\n                - unlisted\n                - users\n              example: anybody\n              type: string\n          required:\n            - add\n            - comments\n            - download\n            - embed\n            - view\n          type: object\n        release_time:\n          description: The time in ISO 8601 format when the video was released.\n          example: 2018-03-05T21:04:47+00:00\n          type: string\n        resource_key:\n          description: The resource key string of the video.\n          example: bac1033deba2310ebba2caec33c23e4beea67aba\n          type: string\n        spatial:\n          description: 360 spatial data.\n          properties:\n            director_timeline:\n              description: 360 director timeline.\n              items:\n                properties:\n                  pitch:\n                    description: The director timeline pitch, from -90 (minimum) to 90\n                      (maximum).\n                    example: 70\n                    type: number\n                  roll:\n                    description: The director timeline roll.\n                    example: 0\n                    type: number\n                  time_code:\n                    description: The director timeline time code.\n                    example: 300\n                    type: number\n                  yaw:\n                    description: The director timeline yaw, from 0 (minimum) to 360\n                      (maximum).\n                    example: 125\n                    type: number\n                type: object\n              type: array\n            field_of_view:\n              description: The 360 field of view, from 30 (minimum) to 90 (maximum). The\n                default is 50.\n              example: 50\n              nullable: true\n              type: number\n            projection:\n              description: \u003e\n                The 360 spatial projection:\n\n\n                Option descriptions:\n                 * `cubical` - The spatial projection is cubical.\n                 * `cylindrical` - The spatial projection is cylindrical.\n                 * `dome` - The spatial projection is dome-shaped.\n                 * `equirectangular` - The spatial projection is equirectangular.\n                 * `pyramid` - The spatial projection is pyramid-shaped.\n              enum:\n                - cubical\n                - cylindrical\n                - dome\n                - equirectangular\n                - pyramid\n              example: cubical\n              nullable: true\n              type: string\n            stereo_format:\n              description: |\n                The 360 stereo format:\n\n                Option descriptions:\n                 * `left-right` - The stereo format is left-right.\n                 * `mono` - The audio is monaural.\n                 * `top-bottom` - The stereo format is top-bottom.\n              enum:\n                - left-right\n                - mono\n                - top-bottom\n              example: left-right\n              nullable: true\n              type: string\n          required:\n            - director_timeline\n            - field_of_view\n            - projection\n            - stereo_format\n          type: object\n        stats:\n          description: A collection of stats associated with this video.\n          properties:\n            plays:\n              description: The current total number of times that the video has been played.\n              example: 20\n              nullable: true\n              type: number\n          required:\n            - plays\n          type: object\n        status:\n          description: \u003e\n            The status code for the availability of the video. This field is\n            deprecated in favor of `upload` and `transcode`.\n\n\n            Option descriptions:\n             * `available` - The video is available.\n             * `quota_exceeded` - The user's quota is exceeded with this video.\n             * `total_cap_exceeded` - The user has exceeded their total cap with this video.\n             * `transcode_starting` - Transcoding is beginning for the video.\n             * `transcoding` - Transcoding is underway for the video.\n             * `transcoding_error` - There was an error in transcoding the video.\n             * `unavailable` - The video is unavailable.\n             * `uploading` - The video is being uploaded.\n             * `uploading_error` - There was an error in uploading the video.\n          enum:\n            - available\n            - quota_exceeded\n            - total_cap_exceeded\n            - transcode_starting\n            - transcoding\n            - transcoding_error\n            - unavailable\n            - uploading\n            - uploading_error\n          example: available\n          nullable: true\n          type: string\n        tags:\n          description: An array of all tags assigned to this video.\n          items:\n            $ref: \"#/components/schemas/tag\"\n          type: array\n        transcode:\n          description: The transcode information for a video upload.\n          nullable: true\n          properties:\n            status:\n              description: Status code for this video's availability.\n              enum:\n                - complete\n                - error\n                - in_progress\n              example: complete\n              type: string\n          type: object\n        upload:\n          description: The upload information for this video.\n          nullable: true\n          properties:\n            approach:\n              description: The approach for uploading the video.\n              enum:\n                - post\n                - pull\n                - streaming\n                - tus\n              example: post\n              type: string\n            complete_uri:\n              description: The URI for completing the upload.\n              type: string\n            form:\n              description: The HTML form for uploading a video through the post approach.\n              type: string\n            link:\n              description: The link of the video to capture through the pull approach.\n              type: string\n            redirect_url:\n              description: The redirect URL for the upload app.\n              type: string\n            size:\n              description: The file size in bytes of the uploaded video.\n              example: 60000\n              type: number\n            status:\n              description: |\n                The status code for the availability of the uploaded video:\n\n                Option descriptions:\n                 * `complete` - The upload is complete.\n                 * `error` - The upload ended with an error.\n                 * `in_progress` - The upload is underway.\n              enum:\n                - complete\n                - error\n                - in_progress\n              example: complete\n              type: string\n            upload_link:\n              description: The link for sending video file data.\n              type: string\n          required:\n            - status\n          type: object\n        uri:\n          description: The video's canonical relative URI.\n          example: /videos/258684937\n          type: string\n        user:\n          allOf:\n            - $ref: \"#/components/schemas/user\"\n          description: The video owner.\n          nullable: true\n        width:\n          description: The video's width in pixels.\n          example: 1920\n          type: number\n      required:\n        - categories\n        - content_rating\n        - context\n        - created_time\n        - description\n        - duration\n        - embed\n        - height\n        - language\n        - license\n        - link\n        - metadata\n        - modified_time\n        - name\n        - pictures\n        - privacy\n        - release_time\n        - resource_key\n        - spatial\n        - stats\n        - status\n        - tags\n        - transcode\n        - upload\n        - uri\n        - user\n        - width\n      title: Video\n      type: object\n    video-versions:\n      properties:\n        active:\n          description: Whether this video version is the currently active one.\n          example: \"true\"\n          type: boolean\n        app:\n          allOf:\n            - $ref: \"#/components/schemas/api-app\"\n          description: The API app associated with the video version.\n        created_time:\n          description: The time in ISO 8601 for when the video version was created.\n          example: 2018-03-05T21:04:47+00:00\n          type: string\n        duration:\n          description: The duration of the video version in seconds.\n          example: 81\n          nullable: true\n          type: number\n        filename:\n          description: The file name of the video version.\n          example: rev2.mp4\n          type: string\n        filesize:\n          description: The size in byes of the video version file.\n          example: 4025322521\n          nullable: true\n          type: number\n        metadata:\n          description: The video version's metadata.\n          properties:\n            connections:\n              properties:\n                video:\n                  description: Data from video associated with version\n                  properties:\n                    options:\n                      description: An array of HTTP methods permitted on this URI.\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: The total number of videos on this connection.\n                      example: 5\n                      type: number\n                    uri:\n                      description: The API URI that resolves to the connection data.\n                      example: /videos/258684937\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - video\n              type: object\n          required:\n            - connections\n          type: object\n        modified_time:\n          description: The time in ISO 8601 format when the video version was last modified.\n          example: 2018-09-16T09:02:40+00:00\n          type: string\n        play:\n          allOf:\n            - $ref: \"#/components/schemas/play\"\n          description: The Play representation.\n        upload:\n          description: The upload information for this version.\n          nullable: true\n          properties:\n            approach:\n              description: The approach for uploading the video.\n              enum:\n                - post\n                - pull\n                - streaming\n                - tus\n              example: post\n              type: string\n            complete_uri:\n              description: The URI for completing the upload.\n              type: string\n            form:\n              description: The HTML form for uploading a video through the post approach.\n              type: string\n            link:\n              description: The link of the video to capture through the pull approach.\n              type: string\n            redirect_url:\n              description: The redirect URL for the upload app.\n              type: string\n            size:\n              description: The file size in bytes of the uploaded video.\n              example: 60000\n              type: number\n            status:\n              description: |\n                The status code for the availability of the uploaded video:\n\n                Option descriptions:\n                 * `complete` - The upload is complete.\n                 * `error` - The upload ended with an error.\n                 * `in_progress` - The upload is underway.\n              enum:\n                - complete\n                - error\n                - in_progress\n              example: complete\n              type: string\n            upload_link:\n              description: The link for sending video file data.\n              type: string\n          required:\n            - status\n          type: object\n        upload_date:\n          description: The time in ISO 8601 format when the video version was uploaded.\n          example: 2018-09-16T09:02:40+00:00\n          nullable: true\n          type: string\n        uri:\n          description: The version's canonical relative URI.\n          example: /videos/258684937/versions/12345\n          type: string\n        user:\n          allOf:\n            - $ref: \"#/components/schemas/user\"\n          description: The owner of the video version.\n          nullable: true\n      required:\n        - active\n        - app\n        - created_time\n        - duration\n        - filename\n        - filesize\n        - metadata\n        - modified_time\n        - play\n        - upload\n        - upload_date\n        - uri\n        - user\n      title: Video Versions\n      type: object\n  securitySchemes:\n    bearer:\n      bearerFormat: bearer\n      scheme: bearer\n      type: http\n    oauth2:\n      flows:\n        authorizationCode:\n          authorizationUrl: /oauth/authorize\n          scopes:\n            create: Create new albums, channels, and so on\n            delete: Delete videos, albums, channels, and so on\n            edit: Edit existing videos, albums, channels, and so on\n            email: Access to email addresses\n            interact: Interact with Vimeo resources on a member's behalf, such as liking\n              a video or following another member\n            private: Access private member data\n            promo_codes: Add, remove, and review Vimeo On Demand promotions\n            public: Access public member data\n            purchase: Purchase content\n            purchased: Access a member's Vimeo On Demand purchase history\n            stats: Access video stats\n            upload: Upload videos\n            video_files: Access video files belonging to members with a PRO subscription or\n              higher\n          tokenUrl: /oauth/access_token\n        clientCredentials:\n          scopes:\n            create: Create new albums, channels, and so on\n            delete: Delete videos, albums, channels, and so on\n            edit: Edit existing videos, albums, channels, and so on\n            email: Access to email addresses\n            interact: Interact with Vimeo resources on a member's behalf, such as liking\n              a video or following another member\n            private: Access private member data\n            promo_codes: Add, remove, and review Vimeo On Demand promotions\n            public: Access public member data\n            purchase: Purchase content\n            purchased: Access a member's Vimeo On Demand purchase history\n            stats: Access video stats\n            upload: Upload videos\n            video_files: Access video files belonging to members with a PRO subscription or\n              higher\n          tokenUrl: /oauth/authorize/client\n      type: oauth2\n"
		}
	},
	"Error": "parse: parse spec: paths: /oauth/verify: get: operation \"verify_token\": responses: 200: content: \"application/vnd.vimeo.auth+json\": schema: parse schema: resolve \"#/components/schemas/auth\": parse schema: property \"user\": parse schema: allOf: [0]: parse schema: resolve \"#/components/schemas/user\": parse schema: property \"content_filter\": parse enum values: parse value \"\\\"drugs\\\"\": expected type \"array\", got \"string\""
}