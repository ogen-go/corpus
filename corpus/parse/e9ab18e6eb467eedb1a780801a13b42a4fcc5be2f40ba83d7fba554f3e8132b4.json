{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/a0x8o/flink"
		},
		"file": {
			"name": "rest_v1_dispatcher.yml",
			"size": 0,
			"path": "docs/static/generated/rest_v1_dispatcher.yml",
			"byteSize": 89730,
			"content": "openapi: 3.0.1\ninfo:\n  title: Flink JobManager REST API\n  contact:\n    email: user@flink.apache.org\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  version: v1/1.16-SNAPSHOT\npaths:\n  /cluster:\n    delete:\n      description: Shuts down the cluster\n      operationId: shutdownCluster\n      responses:\n        \"200\":\n          description: The request was successful.\n  /config:\n    get:\n      description: Returns the configuration of the WebUI.\n      operationId: getDashboardConfiguration\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DashboardConfiguration'\n  /datasets:\n    get:\n      description: Returns all cluster data sets.\n      operationId: getClusterDataSetList\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClusterDataSetListResponseBody'\n  /datasets/delete/{triggerid}:\n    get:\n      description: Returns the status for the delete operation of a cluster data set.\n      operationId: getClusterDataSetDeleteStatus\n      parameters:\n      - name: triggerid\n        in: path\n        description: 32-character hexadecimal string that identifies an asynchronous\n          operation trigger ID. The ID was returned then the operation was triggered.\n        required: true\n        schema:\n          $ref: '#/components/schemas/TriggerId'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsynchronousOperationResult'\n  /datasets/{datasetid}:\n    delete:\n      description: Triggers the deletion of a cluster data set. This async operation\n        would return a 'triggerid' for further query identifier.\n      operationId: deleteClusterDataSet\n      parameters:\n      - name: datasetid\n        in: path\n        description: 32-character hexadecimal string value that identifies a cluster\n          data set.\n        required: true\n        schema:\n          $ref: '#/components/schemas/IntermediateDataSetID'\n      responses:\n        \"202\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TriggerResponse'\n  /jars:\n    get:\n      description: Returns a list of all jars previously uploaded via '/jars/upload'.\n      operationId: getJarList\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JarListInfo'\n  /jars/upload:\n    post:\n      description: \"Uploads a jar to the cluster. The jar must be sent as multi-part\\\n        \\ data. Make sure that the \\\"Content-Type\\\" header is set to \\\"application/x-java-archive\\\"\\\n        , as some http libraries do not add the header by default.\\nUsing 'curl' you\\\n        \\ can upload a jar via 'curl -X POST -H \\\"Expect:\\\" -F \\\"jarfile=@path/to/flink-job.jar\\\"\\\n        \\ http://hostname:port/jars/upload'.\"\n      operationId: uploadJar\n      requestBody:\n        content:\n          application/x-java-archive: {}\n        required: true\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JarUploadResponseBody'\n  /jars/{jarid}:\n    delete:\n      description: Deletes a jar previously uploaded via '/jars/upload'.\n      operationId: deleteJar\n      parameters:\n      - name: jarid\n        in: path\n        description: \"String value that identifies a jar. When uploading the jar a\\\n          \\ path is returned, where the filename is the ID. This value is equivalent\\\n          \\ to the `id` field in the list of uploaded jars (/jars).\"\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: The request was successful.\n  /jars/{jarid}/plan:\n    post:\n      description: Returns the dataflow plan of a job contained in a jar previously\n        uploaded via '/jars/upload'. Program arguments can be passed both via the\n        JSON request (recommended) or query parameters.\n      operationId: generatePlanFromJar\n      parameters:\n      - name: jarid\n        in: path\n        description: \"String value that identifies a jar. When uploading the jar a\\\n          \\ path is returned, where the filename is the ID. This value is equivalent\\\n          \\ to the `id` field in the list of uploaded jars (/jars).\"\n        required: true\n        schema:\n          type: string\n      - name: program-args\n        in: query\n        description: \"Deprecated, please use 'programArg' instead. String value that\\\n          \\ specifies the arguments for the program or plan\"\n        required: false\n        style: form\n        schema:\n          type: string\n      - name: programArg\n        in: query\n        description: Comma-separated list of program arguments.\n        required: false\n        style: form\n        schema:\n          type: string\n      - name: entry-class\n        in: query\n        description: String value that specifies the fully qualified name of the entry\n          point class. Overrides the class defined in the jar file manifest.\n        required: false\n        style: form\n        schema:\n          type: string\n      - name: parallelism\n        in: query\n        description: Positive integer value that specifies the desired parallelism\n          for the job.\n        required: false\n        style: form\n        schema:\n          type: integer\n          format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JarPlanRequestBody'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobPlanInfo'\n  /jars/{jarid}/run:\n    post:\n      description: Submits a job by running a jar previously uploaded via '/jars/upload'.\n        Program arguments can be passed both via the JSON request (recommended) or\n        query parameters.\n      operationId: submitJobFromJar\n      parameters:\n      - name: jarid\n        in: path\n        description: \"String value that identifies a jar. When uploading the jar a\\\n          \\ path is returned, where the filename is the ID. This value is equivalent\\\n          \\ to the `id` field in the list of uploaded jars (/jars).\"\n        required: true\n        schema:\n          type: string\n      - name: allowNonRestoredState\n        in: query\n        description: Boolean value that specifies whether the job submission should\n          be rejected if the savepoint contains state that cannot be mapped back to\n          the job.\n        required: false\n        style: form\n        schema:\n          type: boolean\n      - name: savepointPath\n        in: query\n        description: String value that specifies the path of the savepoint to restore\n          the job from.\n        required: false\n        style: form\n        schema:\n          type: string\n      - name: program-args\n        in: query\n        description: \"Deprecated, please use 'programArg' instead. String value that\\\n          \\ specifies the arguments for the program or plan\"\n        required: false\n        style: form\n        schema:\n          type: string\n      - name: programArg\n        in: query\n        description: Comma-separated list of program arguments.\n        required: false\n        style: form\n        schema:\n          type: string\n      - name: entry-class\n        in: query\n        description: String value that specifies the fully qualified name of the entry\n          point class. Overrides the class defined in the jar file manifest.\n        required: false\n        style: form\n        schema:\n          type: string\n      - name: parallelism\n        in: query\n        description: Positive integer value that specifies the desired parallelism\n          for the job.\n        required: false\n        style: form\n        schema:\n          type: integer\n          format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JarRunRequestBody'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JarRunResponseBody'\n  /jobmanager/config:\n    get:\n      description: Returns the cluster configuration.\n      operationId: getClusterConfigurationInfo\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                type: array\n                properties:\n                  empty:\n                    type: boolean\n                items:\n                  $ref: '#/components/schemas/ConfigurationInfoEntry'\n  /jobmanager/environment:\n    get:\n      description: Returns the jobmanager environment.\n      operationId: getJobManagerEnvironment\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EnvironmentInfo'\n  /jobmanager/logs:\n    get:\n      description: Returns the list of log files on the JobManager.\n      operationId: getJobManagerLogList\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogListInfo'\n  /jobmanager/metrics:\n    get:\n      description: Provides access to job manager metrics.\n      operationId: getJobManagerMetrics\n      parameters:\n      - name: get\n        in: query\n        description: Comma-separated list of string values to select specific metrics.\n        required: false\n        style: form\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetricCollectionResponseBody'\n  /jobmanager/thread-dump:\n    get:\n      description: Returns the thread dump of the JobManager.\n      operationId: getJobManagerThreadDump\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThreadDumpInfo'\n  /jobs:\n    get:\n      description: Returns an overview over all jobs and their current state.\n      operationId: getJobIdsWithStatusesOverview\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobIdsWithStatusOverview'\n    post:\n      description: \"Submits a job. This call is primarily intended to be used by the\\\n        \\ Flink client. This call expects a multipart/form-data request that consists\\\n        \\ of file uploads for the serialized JobGraph, jars and distributed cache\\\n        \\ artifacts and an attribute named \\\"request\\\" for the JSON payload.\"\n      operationId: submitJob\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                request:\n                  $ref: '#/components/schemas/JobSubmitRequestBody'\n                filename:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n        required: true\n      responses:\n        \"202\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobSubmitResponseBody'\n  /jobs/metrics:\n    get:\n      description: Provides access to aggregated job metrics.\n      operationId: getAggregatedJobMetrics\n      parameters:\n      - name: get\n        in: query\n        description: Comma-separated list of string values to select specific metrics.\n        required: false\n        style: form\n        schema:\n          type: string\n      - name: agg\n        in: query\n        description: \"Comma-separated list of aggregation modes which should be calculated.\\\n          \\ Available aggregations are: \\\"min, max, sum, avg\\\".\"\n        required: false\n        style: form\n        schema:\n          $ref: '#/components/schemas/AggregationMode'\n      - name: jobs\n        in: query\n        description: Comma-separated list of 32-character hexadecimal strings to select\n          specific jobs.\n        required: false\n        style: form\n        schema:\n          $ref: '#/components/schemas/JobID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AggregatedMetricsResponseBody'\n  /jobs/overview:\n    get:\n      description: Returns an overview over all jobs.\n      operationId: getJobsOverview\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MultipleJobsDetails'\n  /jobs/{jobid}:\n    get:\n      description: Returns details of a job.\n      operationId: getJobDetails\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobDetailsInfo'\n    patch:\n      description: Terminates a job.\n      operationId: cancelJob\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: mode\n        in: query\n        description: \"String value that specifies the termination mode. The only supported\\\n          \\ value is: \\\"cancel\\\".\"\n        required: false\n        style: form\n        schema:\n          $ref: '#/components/schemas/TerminationMode'\n      responses:\n        \"202\":\n          description: The request was successful.\n  /jobs/{jobid}/accumulators:\n    get:\n      description: \"Returns the accumulators for all tasks of a job, aggregated across\\\n        \\ the respective subtasks.\"\n      operationId: getJobAccumulators\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: includeSerializedValue\n        in: query\n        description: Boolean value that specifies whether serialized user task accumulators\n          should be included in the response.\n        required: false\n        style: form\n        schema:\n          type: boolean\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobAccumulatorsInfo'\n  /jobs/{jobid}/checkpoints:\n    get:\n      description: Returns checkpointing statistics for a job.\n      operationId: getCheckpointingStatistics\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CheckpointingStatistics'\n  /jobs/{jobid}/checkpoints/config:\n    get:\n      description: Returns the checkpointing configuration.\n      operationId: getCheckpointConfig\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CheckpointConfigInfo'\n  /jobs/{jobid}/checkpoints/details/{checkpointid}:\n    get:\n      description: Returns details for a checkpoint.\n      operationId: getCheckpointStatisticDetails\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: checkpointid\n        in: path\n        description: Long value that identifies a checkpoint.\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CheckpointStatistics'\n  /jobs/{jobid}/checkpoints/details/{checkpointid}/subtasks/{vertexid}:\n    get:\n      description: Returns checkpoint statistics for a task and its subtasks.\n      operationId: getTaskCheckpointStatistics\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: checkpointid\n        in: path\n        description: Long value that identifies a checkpoint.\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - name: vertexid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job vertex.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobVertexID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskCheckpointStatisticsWithSubtaskDetails'\n  /jobs/{jobid}/config:\n    get:\n      description: Returns the configuration of a job.\n      operationId: getJobConfig\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobConfigInfo'\n  /jobs/{jobid}/exceptions:\n    get:\n      description: \"Returns the most recent exceptions that have been handled by Flink\\\n        \\ for this job. The 'exceptionHistory.truncated' flag defines whether exceptions\\\n        \\ were filtered out through the GET parameter. The backend collects only a\\\n        \\ specific amount of most recent exceptions per job. This can be configured\\\n        \\ through web.exception-history-size in the Flink configuration. The following\\\n        \\ first-level members are deprecated: 'root-exception', 'timestamp', 'all-exceptions',\\\n        \\ and 'truncated'. Use the data provided through 'exceptionHistory', instead.\"\n      operationId: getJobExceptions\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: maxExceptions\n        in: query\n        description: Comma-separated list of integer values that specifies the upper\n          limit of exceptions to return.\n        required: false\n        style: form\n        schema:\n          type: integer\n          format: int32\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobExceptionsInfoWithHistory'\n  /jobs/{jobid}/execution-result:\n    get:\n      description: Returns the result of a job execution. Gives access to the execution\n        time of the job and to all accumulators created by this job.\n      operationId: getJobExecutionResult\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobExecutionResultResponseBody'\n  /jobs/{jobid}/jobmanager/config:\n    get:\n      description: Returns the jobmanager's configuration of a specific job.\n      operationId: getJobManagerJobConfiguration\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                type: array\n                properties:\n                  empty:\n                    type: boolean\n                items:\n                  $ref: '#/components/schemas/ConfigurationInfoEntry'\n  /jobs/{jobid}/jobmanager/environment:\n    get:\n      description: Returns the jobmanager's environment variables of a specific job.\n      operationId: getJobManagerJobEnvironment\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EnvironmentInfo'\n  /jobs/{jobid}/jobmanager/log-url:\n    get:\n      description: Returns the log url of jobmanager of a specific job.\n      operationId: getJobManagerLogUrl\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogUrlResponse'\n  /jobs/{jobid}/metrics:\n    get:\n      description: Provides access to job metrics.\n      operationId: getJobMetrics\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: get\n        in: query\n        description: Comma-separated list of string values to select specific metrics.\n        required: false\n        style: form\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetricCollectionResponseBody'\n  /jobs/{jobid}/plan:\n    get:\n      description: Returns the dataflow plan of a job.\n      operationId: getJobPlan\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobPlanInfo'\n  /jobs/{jobid}/rescaling:\n    patch:\n      description: Triggers the rescaling of a job. This async operation would return\n        a 'triggerid' for further query identifier.\n      operationId: rescaleJob\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: parallelism\n        in: query\n        description: Positive integer value that specifies the desired parallelism.\n        required: true\n        style: form\n        schema:\n          type: integer\n          format: int32\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TriggerResponse'\n  /jobs/{jobid}/rescaling/{triggerid}:\n    get:\n      description: Returns the status of a rescaling operation.\n      operationId: getRescalingStatus\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: triggerid\n        in: path\n        description: 32-character hexadecimal string that identifies an asynchronous\n          operation trigger ID. The ID was returned then the operation was triggered.\n        required: true\n        schema:\n          $ref: '#/components/schemas/TriggerId'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsynchronousOperationResult'\n  /jobs/{jobid}/savepoints:\n    post:\n      description: \"Triggers a savepoint, and optionally cancels the job afterwards.\\\n        \\ This async operation would return a 'triggerid' for further query identifier.\"\n      operationId: triggerSavepoint\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SavepointTriggerRequestBody'\n      responses:\n        \"202\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TriggerResponse'\n  /jobs/{jobid}/savepoints/{triggerid}:\n    get:\n      description: Returns the status of a savepoint operation.\n      operationId: getSavepointStatus\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: triggerid\n        in: path\n        description: 32-character hexadecimal string that identifies an asynchronous\n          operation trigger ID. The ID was returned then the operation was triggered.\n        required: true\n        schema:\n          $ref: '#/components/schemas/TriggerId'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsynchronousOperationResult'\n  /jobs/{jobid}/status:\n    get:\n      description: Returns the current status of a job execution.\n      operationId: getJobStatusInfo\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobStatusInfo'\n  /jobs/{jobid}/stop:\n    post:\n      description: \"Stops a job with a savepoint. Optionally, it can also emit a MAX_WATERMARK\\\n        \\ before taking the savepoint to flush out any state waiting for timers to\\\n        \\ fire. This async operation would return a 'triggerid' for further query\\\n        \\ identifier.\"\n      operationId: triggerStopWithSavepoint\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StopWithSavepointRequestBody'\n      responses:\n        \"202\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TriggerResponse'\n  /jobs/{jobid}/taskmanagers/{taskmanagerid}/log-url:\n    get:\n      description: Returns the log url of jobmanager of a specific job.\n      operationId: getTaskManagerLogUrl\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: taskmanagerid\n        in: path\n        description: 32-character hexadecimal string that identifies a task manager.\n        required: true\n        schema:\n          $ref: '#/components/schemas/ResourceID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogUrlResponse'\n  /jobs/{jobid}/vertices/{vertexid}:\n    get:\n      description: \"Returns details for a task, with a summary for each of its subtasks.\"\n      operationId: getJobVertexDetails\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: vertexid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job vertex.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobVertexID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobVertexDetailsInfo'\n  /jobs/{jobid}/vertices/{vertexid}/accumulators:\n    get:\n      description: \"Returns user-defined accumulators of a task, aggregated across\\\n        \\ all subtasks.\"\n      operationId: getJobVertexAccumulators\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: vertexid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job vertex.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobVertexID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobVertexAccumulatorsInfo'\n  /jobs/{jobid}/vertices/{vertexid}/backpressure:\n    get:\n      description: \"Returns back-pressure information for a job, and may initiate\\\n        \\ back-pressure sampling if necessary.\"\n      operationId: getJobVertexBackPressure\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: vertexid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job vertex.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobVertexID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobVertexBackPressureInfo'\n  /jobs/{jobid}/vertices/{vertexid}/flamegraph:\n    get:\n      description: \"Returns flame graph information for a vertex, and may initiate\\\n        \\ flame graph sampling if necessary.\"\n      operationId: getJobVertexFlameGraph\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: vertexid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job vertex.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobVertexID'\n      - name: type\n        in: query\n        description: \"String value that specifies the Flame Graph type. Supported\\\n          \\ options are: \\\"[FULL, ON_CPU, OFF_CPU]\\\".\"\n        required: false\n        style: form\n        schema:\n          $ref: '#/components/schemas/Type'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobVertexFlameGraph'\n  /jobs/{jobid}/vertices/{vertexid}/metrics:\n    get:\n      description: Provides access to task metrics.\n      operationId: getJobVertexMetrics\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: vertexid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job vertex.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobVertexID'\n      - name: get\n        in: query\n        description: Comma-separated list of string values to select specific metrics.\n        required: false\n        style: form\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetricCollectionResponseBody'\n  /jobs/{jobid}/vertices/{vertexid}/subtasks/accumulators:\n    get:\n      description: Returns all user-defined accumulators for all subtasks of a task.\n      operationId: getSubtasksAllAccumulators\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: vertexid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job vertex.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobVertexID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubtasksAllAccumulatorsInfo'\n  /jobs/{jobid}/vertices/{vertexid}/subtasks/metrics:\n    get:\n      description: Provides access to aggregated subtask metrics.\n      operationId: getAggregatedSubtaskMetrics\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: vertexid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job vertex.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobVertexID'\n      - name: get\n        in: query\n        description: Comma-separated list of string values to select specific metrics.\n        required: false\n        style: form\n        schema:\n          type: string\n      - name: agg\n        in: query\n        description: \"Comma-separated list of aggregation modes which should be calculated.\\\n          \\ Available aggregations are: \\\"min, max, sum, avg\\\".\"\n        required: false\n        style: form\n        schema:\n          $ref: '#/components/schemas/AggregationMode'\n      - name: subtasks\n        in: query\n        description: \"Comma-separated list of integer ranges (e.g. \\\"1,3,5-9\\\") to\\\n          \\ select specific subtasks.\"\n        required: false\n        style: form\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AggregatedMetricsResponseBody'\n  /jobs/{jobid}/vertices/{vertexid}/subtasks/{subtaskindex}:\n    get:\n      description: Returns details of the current or latest execution attempt of a\n        subtask.\n      operationId: getSubtaskCurrentAttemptDetails\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: vertexid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job vertex.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobVertexID'\n      - name: subtaskindex\n        in: path\n        description: Positive integer value that identifies a subtask.\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubtaskExecutionAttemptDetailsInfo'\n  /jobs/{jobid}/vertices/{vertexid}/subtasks/{subtaskindex}/attempts/{attempt}:\n    get:\n      description: Returns details of an execution attempt of a subtask. Multiple\n        execution attempts happen in case of failure/recovery.\n      operationId: getSubtaskExecutionAttemptDetails\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: vertexid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job vertex.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobVertexID'\n      - name: subtaskindex\n        in: path\n        description: Positive integer value that identifies a subtask.\n        required: true\n        schema:\n          type: integer\n          format: int32\n      - name: attempt\n        in: path\n        description: Positive integer value that identifies an execution attempt.\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubtaskExecutionAttemptDetailsInfo'\n  /jobs/{jobid}/vertices/{vertexid}/subtasks/{subtaskindex}/attempts/{attempt}/accumulators:\n    get:\n      description: Returns the accumulators of an execution attempt of a subtask.\n        Multiple execution attempts happen in case of failure/recovery.\n      operationId: getSubtaskExecutionAttemptAccumulators\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: vertexid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job vertex.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobVertexID'\n      - name: subtaskindex\n        in: path\n        description: Positive integer value that identifies a subtask.\n        required: true\n        schema:\n          type: integer\n          format: int32\n      - name: attempt\n        in: path\n        description: Positive integer value that identifies an execution attempt.\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubtaskExecutionAttemptAccumulatorsInfo'\n  /jobs/{jobid}/vertices/{vertexid}/subtasks/{subtaskindex}/metrics:\n    get:\n      description: Provides access to subtask metrics.\n      operationId: getSubtaskMetrics\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: vertexid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job vertex.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobVertexID'\n      - name: subtaskindex\n        in: path\n        description: Positive integer value that identifies a subtask.\n        required: true\n        schema:\n          type: integer\n          format: int32\n      - name: get\n        in: query\n        description: Comma-separated list of string values to select specific metrics.\n        required: false\n        style: form\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetricCollectionResponseBody'\n  /jobs/{jobid}/vertices/{vertexid}/subtasktimes:\n    get:\n      description: Returns time-related information for all subtasks of a task.\n      operationId: getSubtasksTimes\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: vertexid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job vertex.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobVertexID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubtasksTimesInfo'\n  /jobs/{jobid}/vertices/{vertexid}/taskmanagers:\n    get:\n      description: Returns task information aggregated by task manager.\n      operationId: getJobVertexTaskManagers\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: vertexid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job vertex.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobVertexID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobVertexTaskManagersInfo'\n  /jobs/{jobid}/vertices/{vertexid}/watermarks:\n    get:\n      description: Returns the watermarks for all subtasks of a task.\n      operationId: getJobVertexWatermarks\n      parameters:\n      - name: jobid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobID'\n      - name: vertexid\n        in: path\n        description: 32-character hexadecimal string value that identifies a job vertex.\n        required: true\n        schema:\n          $ref: '#/components/schemas/JobVertexID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetricCollectionResponseBody'\n  /overview:\n    get:\n      description: Returns an overview over the Flink cluster.\n      operationId: getClusterOverview\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClusterOverviewWithVersion'\n  /savepoint-disposal:\n    post:\n      description: Triggers the desposal of a savepoint. This async operation would\n        return a 'triggerid' for further query identifier.\n      operationId: triggerSavepointDisposal\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SavepointDisposalRequest'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TriggerResponse'\n  /savepoint-disposal/{triggerid}:\n    get:\n      description: Returns the status of a savepoint disposal operation.\n      operationId: getSavepointDisposalStatus\n      parameters:\n      - name: triggerid\n        in: path\n        description: 32-character hexadecimal string that identifies an asynchronous\n          operation trigger ID. The ID was returned then the operation was triggered.\n        required: true\n        schema:\n          $ref: '#/components/schemas/TriggerId'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsynchronousOperationResult'\n  /taskmanagers:\n    get:\n      description: Returns an overview over all task managers.\n      operationId: getTaskManagers\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskManagersInfo'\n  /taskmanagers/metrics:\n    get:\n      description: Provides access to aggregated task manager metrics.\n      operationId: getAggregatedTaskManagerMetrics\n      parameters:\n      - name: get\n        in: query\n        description: Comma-separated list of string values to select specific metrics.\n        required: false\n        style: form\n        schema:\n          type: string\n      - name: agg\n        in: query\n        description: \"Comma-separated list of aggregation modes which should be calculated.\\\n          \\ Available aggregations are: \\\"min, max, sum, avg\\\".\"\n        required: false\n        style: form\n        schema:\n          $ref: '#/components/schemas/AggregationMode'\n      - name: taskmanagers\n        in: query\n        description: Comma-separated list of 32-character hexadecimal strings to select\n          specific task managers.\n        required: false\n        style: form\n        schema:\n          $ref: '#/components/schemas/ResourceID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AggregatedMetricsResponseBody'\n  /taskmanagers/{taskmanagerid}:\n    get:\n      description: Returns details for a task manager. \"metrics.memorySegmentsAvailable\"\n        and \"metrics.memorySegmentsTotal\" are deprecated. Please use \"metrics.nettyShuffleMemorySegmentsAvailable\"\n        and \"metrics.nettyShuffleMemorySegmentsTotal\" instead.\n      operationId: getTaskManagerDetails\n      parameters:\n      - name: taskmanagerid\n        in: path\n        description: 32-character hexadecimal string that identifies a task manager.\n        required: true\n        schema:\n          $ref: '#/components/schemas/ResourceID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskManagerDetailsInfo'\n  /taskmanagers/{taskmanagerid}/logs:\n    get:\n      description: Returns the list of log files on a TaskManager.\n      operationId: getTaskManagerLogs\n      parameters:\n      - name: taskmanagerid\n        in: path\n        description: 32-character hexadecimal string that identifies a task manager.\n        required: true\n        schema:\n          $ref: '#/components/schemas/ResourceID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogListInfo'\n  /taskmanagers/{taskmanagerid}/metrics:\n    get:\n      description: Provides access to task manager metrics.\n      operationId: getTaskManagerMetrics\n      parameters:\n      - name: taskmanagerid\n        in: path\n        description: 32-character hexadecimal string that identifies a task manager.\n        required: true\n        schema:\n          $ref: '#/components/schemas/ResourceID'\n      - name: get\n        in: query\n        description: Comma-separated list of string values to select specific metrics.\n        required: false\n        style: form\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetricCollectionResponseBody'\n  /taskmanagers/{taskmanagerid}/thread-dump:\n    get:\n      description: Returns the thread dump of the requested TaskManager.\n      operationId: getTaskManagerThreadDump\n      parameters:\n      - name: taskmanagerid\n        in: path\n        description: 32-character hexadecimal string that identifies a task manager.\n        required: true\n        schema:\n          $ref: '#/components/schemas/ResourceID'\n      responses:\n        \"200\":\n          description: The request was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThreadDumpInfo'\ncomponents:\n  schemas:\n    AggregatedTaskDetailsInfo:\n      type: object\n      properties:\n        metrics:\n          type: object\n          additionalProperties:\n            type: object\n            additionalProperties:\n              type: integer\n              format: int64\n        status-duration:\n          type: object\n          additionalProperties:\n            type: object\n            additionalProperties:\n              type: integer\n              format: int64\n    JarFileInfo:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        uploaded:\n          type: integer\n          format: int64\n        entry:\n          type: array\n          items:\n            $ref: '#/components/schemas/JarEntryInfo'\n    Node:\n      type: object\n      properties:\n        name:\n          type: string\n        value:\n          type: integer\n          format: int32\n        children:\n          type: array\n          items:\n            $ref: '#/components/schemas/Node'\n    AggregationMode:\n      type: string\n      enum:\n      - MIN\n      - MAX\n      - SUM\n      - AVG\n    CheckpointAlignment:\n      type: object\n      properties:\n        buffered:\n          type: integer\n          format: int64\n        processed:\n          type: integer\n          format: int64\n        persisted:\n          type: integer\n          format: int64\n        duration:\n          type: integer\n          format: int64\n    SavepointInfo:\n      type: object\n      properties:\n        location:\n          type: string\n        failure-cause:\n          $ref: '#/components/schemas/SerializedThrowable'\n    AsynchronousOperationInfo:\n      type: object\n      properties:\n        failure-cause:\n          $ref: '#/components/schemas/SerializedThrowable'\n    TaskManagerMetricsInfo:\n      type: object\n      properties:\n        heapUsed:\n          type: integer\n          format: int64\n        heapCommitted:\n          type: integer\n          format: int64\n        heapMax:\n          type: integer\n          format: int64\n        nonHeapUsed:\n          type: integer\n          format: int64\n        nonHeapCommitted:\n          type: integer\n          format: int64\n        nonHeapMax:\n          type: integer\n          format: int64\n        directCount:\n          type: integer\n          format: int64\n        directUsed:\n          type: integer\n          format: int64\n        directMax:\n          type: integer\n          format: int64\n        mappedCount:\n          type: integer\n          format: int64\n        mappedUsed:\n          type: integer\n          format: int64\n        mappedMax:\n          type: integer\n          format: int64\n        memorySegmentsAvailable:\n          type: integer\n          format: int64\n        memorySegmentsTotal:\n          type: integer\n          format: int64\n        nettyShuffleMemorySegmentsAvailable:\n          type: integer\n          format: int64\n        nettyShuffleMemorySegmentsUsed:\n          type: integer\n          format: int64\n        nettyShuffleMemorySegmentsTotal:\n          type: integer\n          format: int64\n        nettyShuffleMemoryAvailable:\n          type: integer\n          format: int64\n        nettyShuffleMemoryUsed:\n          type: integer\n          format: int64\n        nettyShuffleMemoryTotal:\n          type: integer\n          format: int64\n        garbageCollectors:\n          type: array\n          items:\n            $ref: '#/components/schemas/GarbageCollectorInfo'\n    JarEntryInfo:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n    TriggerId:\n      pattern: \"[0-9a-f]{32}\"\n      type: string\n    JobVertexFlameGraph:\n      type: object\n      properties:\n        endTimestamp:\n          type: integer\n          format: int64\n        data:\n          $ref: '#/components/schemas/Node'\n    JobDetailsInfo:\n      type: object\n      properties:\n        jid:\n          $ref: '#/components/schemas/JobID'\n        name:\n          type: string\n        isStoppable:\n          type: boolean\n        state:\n          $ref: '#/components/schemas/JobStatus'\n        start-time:\n          type: integer\n          format: int64\n        end-time:\n          type: integer\n          format: int64\n        duration:\n          type: integer\n          format: int64\n        maxParallelism:\n          type: integer\n          format: int64\n        now:\n          type: integer\n          format: int64\n        timestamps:\n          type: object\n          additionalProperties:\n            type: integer\n            format: int64\n        vertices:\n          type: array\n          items:\n            $ref: '#/components/schemas/JobVertexDetailsInfo'\n        status-counts:\n          type: object\n          additionalProperties:\n            type: integer\n            format: int32\n        plan:\n          type: string\n    IOMetricsInfo:\n      type: object\n      properties:\n        read-bytes:\n          type: integer\n          format: int64\n        read-bytes-complete:\n          type: boolean\n        write-bytes:\n          type: integer\n          format: int64\n        write-bytes-complete:\n          type: boolean\n        read-records:\n          type: integer\n          format: int64\n        read-records-complete:\n          type: boolean\n        write-records:\n          type: integer\n          format: int64\n        write-records-complete:\n          type: boolean\n        accumulated-backpressured-time:\n          type: integer\n          format: int64\n        accumulated-idle-time:\n          type: integer\n          format: int64\n        accumulated-busy-time:\n          type: number\n          format: double\n    SavepointFormatType:\n      type: string\n      enum:\n      - CANONICAL\n      - NATIVE\n    SerializedThrowable:\n      type: object\n      properties:\n        serialized-throwable:\n          type: string\n          format: binary\n    TaskManagersInfo:\n      type: object\n      properties:\n        taskmanagers:\n          type: array\n          items:\n            $ref: '#/components/schemas/TaskManagerInfo'\n    RestoreMode:\n      type: string\n      enum:\n      - CLAIM\n      - NO_CLAIM\n      - LEGACY\n    SubtaskExecutionAttemptDetailsInfo:\n      type: object\n      properties:\n        subtask:\n          type: integer\n          format: int32\n        status:\n          $ref: '#/components/schemas/ExecutionState'\n        attempt:\n          type: integer\n          format: int32\n        host:\n          type: string\n        start-time:\n          type: integer\n          format: int64\n        end-time:\n          type: integer\n          format: int64\n        duration:\n          type: integer\n          format: int64\n        metrics:\n          $ref: '#/components/schemas/IOMetricsInfo'\n        taskmanager-id:\n          type: string\n        status-duration:\n          type: object\n          additionalProperties:\n            type: integer\n            format: int64\n    JobResult:\n      type: object\n      properties:\n        jobId:\n          $ref: '#/components/schemas/JobID'\n        applicationStatus:\n          $ref: '#/components/schemas/ApplicationStatus'\n        accumulatorResults:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/SerializedValueOptionalFailureObject'\n        netRuntime:\n          type: integer\n          format: int64\n        serializedThrowable:\n          $ref: '#/components/schemas/SerializedThrowable'\n        success:\n          type: boolean\n    JobVertexDetailsInfo:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/JobVertexID'\n        name:\n          type: string\n        parallelism:\n          type: integer\n          format: int32\n        maxParallelism:\n          type: integer\n          format: int32\n        now:\n          type: integer\n          format: int64\n        subtasks:\n          type: array\n          items:\n            $ref: '#/components/schemas/SubtaskExecutionAttemptDetailsInfo'\n        aggregated:\n          $ref: '#/components/schemas/AggregatedTaskDetailsInfo'\n    DistributedCacheFile:\n      type: object\n      properties:\n        entryName:\n          type: string\n        fileName:\n          type: string\n    RestoredCheckpointStatistics:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        restore_timestamp:\n          type: integer\n          format: int64\n        is_savepoint:\n          type: boolean\n        external_path:\n          type: string\n    SavepointTriggerRequestBody:\n      type: object\n      properties:\n        target-directory:\n          type: string\n        cancel-job:\n          type: boolean\n        formatType:\n          $ref: '#/components/schemas/SavepointFormatType'\n        triggerId:\n          $ref: '#/components/schemas/TriggerId'\n    ThreadDumpInfo:\n      type: object\n      properties:\n        threadInfos:\n          type: array\n          items:\n            $ref: '#/components/schemas/ThreadInfo'\n    AsynchronousOperationResult:\n      type: object\n      properties:\n        status:\n          $ref: '#/components/schemas/QueueStatus'\n        operation:\n          oneOf:\n          - $ref: '#/components/schemas/AsynchronousOperationInfo'\n          - $ref: '#/components/schemas/SavepointInfo'\n    CheckpointingStatistics:\n      type: object\n      properties:\n        counts:\n          $ref: '#/components/schemas/Counts'\n        summary:\n          $ref: '#/components/schemas/Summary'\n        latest:\n          $ref: '#/components/schemas/LatestCheckpoints'\n        history:\n          type: array\n          items:\n            $ref: '#/components/schemas/CheckpointStatistics'\n    HardwareDescription:\n      type: object\n      properties:\n        cpuCores:\n          type: integer\n          format: int32\n        physicalMemory:\n          type: integer\n          format: int64\n        freeMemory:\n          type: integer\n          format: int64\n        managedMemory:\n          type: integer\n          format: int64\n    TaskCheckpointStatistics:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        status:\n          $ref: '#/components/schemas/CheckpointStatsStatus'\n        latest_ack_timestamp:\n          type: integer\n          format: int64\n        checkpointed_size:\n          type: integer\n          format: int64\n        state_size:\n          type: integer\n          format: int64\n        end_to_end_duration:\n          type: integer\n          format: int64\n        alignment_buffered:\n          type: integer\n          format: int64\n        processed_data:\n          type: integer\n          format: int64\n        persisted_data:\n          type: integer\n          format: int64\n        num_subtasks:\n          type: integer\n          format: int32\n        num_acknowledged_subtasks:\n          type: integer\n          format: int32\n    JobStatusInfo:\n      type: object\n      properties:\n        status:\n          $ref: '#/components/schemas/JobStatus'\n    LogUrlResponse:\n      type: object\n      properties:\n        url:\n          type: string\n    JobAccumulator:\n      type: object\n    Id:\n      type: string\n      enum:\n      - IN_PROGRESS\n      - COMPLETED\n    JobID:\n      pattern: \"[0-9a-f]{32}\"\n      type: string\n    CheckpointStatistics:\n      required:\n      - className\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        status:\n          $ref: '#/components/schemas/CheckpointStatsStatus'\n        is_savepoint:\n          type: boolean\n        trigger_timestamp:\n          type: integer\n          format: int64\n        latest_ack_timestamp:\n          type: integer\n          format: int64\n        checkpointed_size:\n          type: integer\n          format: int64\n        state_size:\n          type: integer\n          format: int64\n        end_to_end_duration:\n          type: integer\n          format: int64\n        alignment_buffered:\n          type: integer\n          format: int64\n        processed_data:\n          type: integer\n          format: int64\n        persisted_data:\n          type: integer\n          format: int64\n        num_subtasks:\n          type: integer\n          format: int32\n        num_acknowledged_subtasks:\n          type: integer\n          format: int32\n        checkpoint_type:\n          $ref: '#/components/schemas/RestAPICheckpointType'\n        tasks:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/TaskCheckpointStatistics'\n        className:\n          type: string\n      discriminator:\n        propertyName: className\n    JobConfigInfo:\n      type: object\n      properties:\n        jobId:\n          $ref: '#/components/schemas/JobID'\n        jobName:\n          type: string\n        executionConfigInfo:\n          $ref: '#/components/schemas/ExecutionConfigInfo'\n    MetricCollectionResponseBody:\n      type: object\n      properties:\n        metrics:\n          type: array\n          items:\n            $ref: '#/components/schemas/Metric'\n    ClusterOverviewWithVersion:\n      type: object\n      properties:\n        taskmanagers:\n          type: integer\n          format: int32\n        slots-total:\n          type: integer\n          format: int32\n        slots-available:\n          type: integer\n          format: int32\n        jobs-running:\n          type: integer\n          format: int32\n        jobs-finished:\n          type: integer\n          format: int32\n        jobs-cancelled:\n          type: integer\n          format: int32\n        jobs-failed:\n          type: integer\n          format: int32\n        flink-version:\n          type: string\n        flink-commit:\n          type: string\n    AggregatedMetricsResponseBody:\n      type: object\n    JobStatus:\n      type: string\n      enum:\n      - INITIALIZING\n      - CREATED\n      - RUNNING\n      - FAILING\n      - FAILED\n      - CANCELLING\n      - CANCELED\n      - FINISHED\n      - RESTARTING\n      - SUSPENDED\n      - RECONCILING\n    SubtasksAllAccumulatorsInfo:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/JobVertexID'\n        parallelism:\n          type: integer\n          format: int32\n        subtasks:\n          type: array\n          items:\n            $ref: '#/components/schemas/SubtaskAccumulatorsInfo'\n    ResourceID:\n      pattern: \"[0-9a-f]{32}\"\n      type: string\n    ClusterDataSetListResponseBody:\n      type: object\n      properties:\n        dataSets:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClusterDataSetEntry'\n    UploadStatus:\n      type: string\n      enum:\n      - success\n    SavepointDisposalRequest:\n      type: object\n      properties:\n        savepoint-path:\n          type: string\n    PendingSubtaskCheckpointStatistics:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/SubtaskCheckpointStatistics'\n    JVMInfo:\n      type: object\n      properties:\n        version:\n          type: string\n        arch:\n          type: string\n        options:\n          type: array\n          items:\n            type: string\n    LogInfo:\n      type: object\n      properties:\n        name:\n          type: string\n        size:\n          type: integer\n          format: int64\n        mtime:\n          type: integer\n          format: int64\n    CompletedCheckpointStatistics:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/CheckpointStatistics'\n      - type: object\n        properties:\n          external_path:\n            type: string\n          discarded:\n            type: boolean\n    JarRunRequestBody:\n      type: object\n      properties:\n        entryClass:\n          type: string\n        programArgs:\n          type: string\n        programArgsList:\n          type: array\n          items:\n            type: string\n        parallelism:\n          type: integer\n          format: int32\n        jobId:\n          $ref: '#/components/schemas/JobID'\n        allowNonRestoredState:\n          type: boolean\n        savepointPath:\n          type: string\n        restoreMode:\n          $ref: '#/components/schemas/RestoreMode'\n    SubtaskAccumulatorsInfo:\n      type: object\n      properties:\n        subtask:\n          type: integer\n          format: int32\n        attempt:\n          type: integer\n          format: int32\n        host:\n          type: string\n        user-accumulators:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserAccumulator'\n    JobPlanInfo:\n      type: object\n      properties:\n        plan:\n          $ref: '#/components/schemas/RawJson'\n    TaskExecutorMemoryConfiguration:\n      type: object\n      properties:\n        frameworkHeap:\n          type: integer\n          format: int64\n        taskHeap:\n          type: integer\n          format: int64\n        frameworkOffHeap:\n          type: integer\n          format: int64\n        taskOffHeap:\n          type: integer\n          format: int64\n        networkMemory:\n          type: integer\n          format: int64\n        managedMemory:\n          type: integer\n          format: int64\n        jvmMetaspace:\n          type: integer\n          format: int64\n        jvmOverhead:\n          type: integer\n          format: int64\n        totalFlinkMemory:\n          type: integer\n          format: int64\n        totalProcessMemory:\n          type: integer\n          format: int64\n    FailedCheckpointStatistics:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/CheckpointStatistics'\n      - type: object\n        properties:\n          failure_timestamp:\n            type: integer\n            format: int64\n          failure_message:\n            type: string\n    JobVertexAccumulatorsInfo:\n      type: object\n      properties:\n        id:\n          type: string\n        user-accumulators:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserAccumulator'\n    ConfigurationInfo:\n      type: array\n      properties:\n        empty:\n          type: boolean\n      items:\n        $ref: '#/components/schemas/ConfigurationInfoEntry'\n    Type:\n      type: string\n      enum:\n      - FULL\n      - ON_CPU\n      - OFF_CPU\n    UserAccumulator:\n      type: object\n      properties:\n        name:\n          type: string\n        type:\n          type: string\n        value:\n          type: string\n    VertexBackPressureLevel:\n      type: string\n      enum:\n      - ok\n      - low\n      - high\n    CheckpointDuration:\n      type: object\n      properties:\n        sync:\n          type: integer\n          format: int64\n        async:\n          type: integer\n          format: int64\n    ExceptionInfo:\n      type: object\n      properties:\n        exceptionName:\n          type: string\n        stacktrace:\n          type: string\n        timestamp:\n          type: integer\n          format: int64\n        taskName:\n          type: string\n        location:\n          type: string\n    SubtaskCheckpointStatistics:\n      required:\n      - className\n      type: object\n      properties:\n        index:\n          type: integer\n          format: int32\n        status:\n          type: string\n        className:\n          type: string\n      discriminator:\n        propertyName: className\n    TerminationMode:\n      type: string\n      enum:\n      - CANCEL\n      - STOP\n    CompletedSubtaskCheckpointStatistics:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/SubtaskCheckpointStatistics'\n      - type: object\n        properties:\n          ack_timestamp:\n            type: integer\n            format: int64\n          end_to_end_duration:\n            type: integer\n            format: int64\n          checkpointed_size:\n            type: integer\n            format: int64\n          state_size:\n            type: integer\n            format: int64\n          checkpoint:\n            $ref: '#/components/schemas/CheckpointDuration'\n          alignment:\n            $ref: '#/components/schemas/CheckpointAlignment'\n          start_delay:\n            type: integer\n            format: int64\n          unaligned_checkpoint:\n            type: boolean\n          aborted:\n            type: boolean\n    PendingCheckpointStatistics:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/CheckpointStatistics'\n    ExecutionState:\n      type: string\n      enum:\n      - CREATED\n      - SCHEDULED\n      - DEPLOYING\n      - RUNNING\n      - FINISHED\n      - CANCELING\n      - CANCELED\n      - FAILED\n      - RECONCILING\n      - INITIALIZING\n    ProcessingMode:\n      type: string\n      enum:\n      - AT_LEAST_ONCE\n      - EXACTLY_ONCE\n    JobSubmitResponseBody:\n      type: object\n      properties:\n        jobUrl:\n          type: string\n    UserTaskAccumulator:\n      type: object\n      properties:\n        name:\n          type: string\n        type:\n          type: string\n        value:\n          type: string\n    JobExceptionHistory:\n      type: object\n      properties:\n        entries:\n          type: array\n          items:\n            $ref: '#/components/schemas/RootExceptionInfo'\n        truncated:\n          type: boolean\n    SubtaskTimeInfo:\n      type: object\n      properties:\n        subtask:\n          type: integer\n          format: int32\n        host:\n          type: string\n        duration:\n          type: integer\n          format: int64\n        timestamps:\n          type: object\n          additionalProperties:\n            type: integer\n            format: int64\n    CheckpointStatsStatus:\n      type: string\n      enum:\n      - IN_PROGRESS\n      - COMPLETED\n      - FAILED\n    RestAPICheckpointType:\n      type: string\n      enum:\n      - CHECKPOINT\n      - SAVEPOINT\n      - SYNC_SAVEPOINT\n    VertexBackPressureStatus:\n      type: string\n      enum:\n      - deprecated\n      - ok\n    ExternalizedCheckpointInfo:\n      type: object\n      properties:\n        enabled:\n          type: boolean\n        delete_on_cancellation:\n          type: boolean\n    ResourceProfileInfo:\n      type: object\n      properties:\n        cpuCores:\n          type: number\n          format: double\n        taskHeapMemory:\n          type: integer\n          format: int32\n        taskOffHeapMemory:\n          type: integer\n          format: int32\n        managedMemory:\n          type: integer\n          format: int32\n        networkMemory:\n          type: integer\n          format: int32\n        extendedResources:\n          type: object\n          additionalProperties:\n            type: number\n            format: double\n    ClusterDataSetEntry:\n      type: object\n      properties:\n        id:\n          type: string\n        isComplete:\n          type: boolean\n    JobVertexBackPressureInfo:\n      type: object\n      properties:\n        status:\n          $ref: '#/components/schemas/VertexBackPressureStatus'\n        backpressure-level:\n          $ref: '#/components/schemas/VertexBackPressureLevel'\n        end-timestamp:\n          type: integer\n          format: int64\n        subtasks:\n          type: array\n          items:\n            $ref: '#/components/schemas/SubtaskBackPressureInfo'\n    JobIdWithStatus:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/JobID'\n        status:\n          $ref: '#/components/schemas/JobStatus'\n    ConfigurationInfoEntry:\n      type: object\n      properties:\n        key:\n          type: string\n        value:\n          type: string\n    QueueStatus:\n      required:\n      - id\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/Id'\n    LatestCheckpoints:\n      type: object\n      properties:\n        completed:\n          $ref: '#/components/schemas/CompletedCheckpointStatistics'\n        savepoint:\n          $ref: '#/components/schemas/CompletedCheckpointStatistics'\n        failed:\n          $ref: '#/components/schemas/FailedCheckpointStatistics'\n        restored:\n          $ref: '#/components/schemas/RestoredCheckpointStatistics'\n    JobSubmitRequestBody:\n      type: object\n      properties:\n        jobGraphFileName:\n          type: string\n        jobJarFileNames:\n          type: array\n          items:\n            type: string\n        jobArtifactFileNames:\n          type: array\n          items:\n            $ref: '#/components/schemas/DistributedCacheFile'\n    SubtaskExecutionAttemptAccumulatorsInfo:\n      type: object\n      properties:\n        subtask:\n          type: integer\n          format: int32\n        attempt:\n          type: integer\n          format: int32\n        id:\n          type: string\n        user-accumulators:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserAccumulator'\n    SubtasksTimesInfo:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        now:\n          type: integer\n          format: int64\n        subtasks:\n          type: array\n          items:\n            $ref: '#/components/schemas/SubtaskTimeInfo'\n    StopWithSavepointRequestBody:\n      type: object\n      properties:\n        targetDirectory:\n          type: string\n        drain:\n          type: boolean\n        formatType:\n          $ref: '#/components/schemas/SavepointFormatType'\n        triggerId:\n          $ref: '#/components/schemas/TriggerId'\n    DashboardConfiguration:\n      type: object\n      properties:\n        refresh-interval:\n          type: integer\n          format: int64\n        timezone-name:\n          type: string\n        timezone-offset:\n          type: integer\n          format: int32\n        flink-version:\n          type: string\n        flink-revision:\n          type: string\n        features:\n          $ref: '#/components/schemas/Features'\n    GarbageCollectorInfo:\n      type: object\n      properties:\n        name:\n          type: string\n        count:\n          type: integer\n          format: int64\n        time:\n          type: integer\n          format: int64\n    JobAccumulatorsInfo:\n      type: object\n      properties:\n        job-accumulators:\n          type: array\n          items:\n            $ref: '#/components/schemas/JobAccumulator'\n        user-task-accumulators:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserTaskAccumulator'\n        serialized-user-task-accumulators:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/SerializedValueOptionalFailureObject'\n    StatsSummaryDto:\n      type: object\n      properties:\n        min:\n          type: integer\n          format: int64\n        max:\n          type: integer\n          format: int64\n        avg:\n          type: integer\n          format: int64\n        p50:\n          type: number\n          format: double\n        p90:\n          type: number\n          format: double\n        p95:\n          type: number\n          format: double\n        p99:\n          type: number\n          format: double\n        p999:\n          type: number\n          format: double\n    TaskManagerDetailsInfo:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/ResourceID'\n        path:\n          type: string\n        dataPort:\n          type: integer\n          format: int32\n        jmxPort:\n          type: integer\n          format: int32\n        timeSinceLastHeartbeat:\n          type: integer\n          format: int64\n        slotsNumber:\n          type: integer\n          format: int32\n        freeSlots:\n          type: integer\n          format: int32\n        totalResource:\n          $ref: '#/components/schemas/ResourceProfileInfo'\n        freeResource:\n          $ref: '#/components/schemas/ResourceProfileInfo'\n        hardware:\n          $ref: '#/components/schemas/HardwareDescription'\n        memoryConfiguration:\n          $ref: '#/components/schemas/TaskExecutorMemoryConfiguration'\n        allocatedSlots:\n          type: array\n          items:\n            $ref: '#/components/schemas/SlotInfo'\n        metrics:\n          $ref: '#/components/schemas/TaskManagerMetricsInfo'\n    ExecutionConfigInfo:\n      type: object\n      properties:\n        execution-mode:\n          type: string\n        restart-strategy:\n          type: string\n        job-parallelism:\n          type: integer\n          format: int32\n        object-reuse-mode:\n          type: boolean\n        user-config:\n          type: object\n          additionalProperties:\n            type: string\n    Counts:\n      type: object\n      properties:\n        restored:\n          type: integer\n          format: int64\n        total:\n          type: integer\n          format: int64\n        in_progress:\n          type: integer\n          format: int32\n        completed:\n          type: integer\n          format: int64\n        failed:\n          type: integer\n          format: int64\n    JobExecutionResultResponseBody:\n      required:\n      - status\n      type: object\n      properties:\n        status:\n          $ref: '#/components/schemas/QueueStatus'\n        job-execution-result:\n          $ref: '#/components/schemas/JobResult'\n    JobVertexID:\n      pattern: \"[0-9a-f]{32}\"\n      type: string\n    JarRunResponseBody:\n      type: object\n      properties:\n        jobid:\n          $ref: '#/components/schemas/JobID'\n    MultipleJobsDetails:\n      type: object\n      properties:\n        jobs:\n          type: array\n          items:\n            $ref: '#/components/schemas/JobDetails'\n    JobDetails:\n      type: object\n      properties:\n        jobId:\n          $ref: '#/components/schemas/JobID'\n        jobName:\n          type: string\n        startTime:\n          type: integer\n          format: int64\n        endTime:\n          type: integer\n          format: int64\n        duration:\n          type: integer\n          format: int64\n        status:\n          $ref: '#/components/schemas/JobStatus'\n        lastUpdateTime:\n          type: integer\n          format: int64\n        tasksPerState:\n          type: array\n          items:\n            type: integer\n            format: int32\n        numTasks:\n          type: integer\n          format: int32\n    ThreadInfo:\n      type: object\n      properties:\n        threadName:\n          type: string\n        stringifiedThreadInfo:\n          type: string\n    JobIdsWithStatusOverview:\n      type: object\n      properties:\n        jobs:\n          type: array\n          items:\n            $ref: '#/components/schemas/JobIdWithStatus'\n    TaskCheckpointStatisticsWithSubtaskDetails:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        status:\n          $ref: '#/components/schemas/CheckpointStatsStatus'\n        latest_ack_timestamp:\n          type: integer\n          format: int64\n        checkpointed_size:\n          type: integer\n          format: int64\n        state_size:\n          type: integer\n          format: int64\n        end_to_end_duration:\n          type: integer\n          format: int64\n        alignment_buffered:\n          type: integer\n          format: int64\n        processed_data:\n          type: integer\n          format: int64\n        persisted_data:\n          type: integer\n          format: int64\n        num_subtasks:\n          type: integer\n          format: int32\n        num_acknowledged_subtasks:\n          type: integer\n          format: int32\n        summary:\n          $ref: '#/components/schemas/Summary'\n        subtasks:\n          type: array\n          items:\n            $ref: '#/components/schemas/SubtaskCheckpointStatistics'\n    Features:\n      type: object\n      properties:\n        web-submit:\n          type: boolean\n        web-cancel:\n          type: boolean\n        web-history:\n          type: boolean\n    JobVertexTaskManagersInfo:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/JobVertexID'\n        name:\n          type: string\n        now:\n          type: integer\n          format: int64\n        taskmanagers:\n          type: array\n          items:\n            $ref: '#/components/schemas/TaskManagersInfo'\n    CheckpointConfigInfo:\n      type: object\n      properties:\n        mode:\n          $ref: '#/components/schemas/ProcessingMode'\n        interval:\n          type: integer\n          format: int64\n        timeout:\n          type: integer\n          format: int64\n        min_pause:\n          type: integer\n          format: int64\n        max_concurrent:\n          type: integer\n          format: int64\n        externalization:\n          $ref: '#/components/schemas/ExternalizedCheckpointInfo'\n        state_backend:\n          type: string\n        checkpoint_storage:\n          type: string\n        unaligned_checkpoints:\n          type: boolean\n        tolerable_failed_checkpoints:\n          type: integer\n          format: int32\n        aligned_checkpoint_timeout:\n          type: integer\n          format: int64\n        checkpoints_after_tasks_finish:\n          type: boolean\n        changelog_periodic_materialization_interval:\n          type: integer\n          format: int64\n        changelog_storage:\n          type: string\n    JobExceptionsInfoWithHistory:\n      type: object\n      properties:\n        root-exception:\n          type: string\n        timestamp:\n          type: integer\n          format: int64\n        all-exceptions:\n          type: array\n          items:\n            $ref: '#/components/schemas/ExecutionExceptionInfo'\n        truncated:\n          type: boolean\n        exceptionHistory:\n          $ref: '#/components/schemas/JobExceptionHistory'\n    LogListInfo:\n      type: object\n      properties:\n        logs:\n          type: array\n          items:\n            $ref: '#/components/schemas/LogInfo'\n    ExecutionExceptionInfo:\n      type: object\n      properties:\n        exception:\n          type: string\n        task:\n          type: string\n        location:\n          type: string\n        timestamp:\n          type: integer\n          format: int64\n    JarPlanRequestBody:\n      type: object\n      properties:\n        entryClass:\n          type: string\n        programArgs:\n          type: string\n        programArgsList:\n          type: array\n          items:\n            type: string\n        parallelism:\n          type: integer\n          format: int32\n        jobId:\n          $ref: '#/components/schemas/JobID'\n    JarUploadResponseBody:\n      type: object\n      properties:\n        filename:\n          type: string\n        status:\n          $ref: '#/components/schemas/UploadStatus'\n    RawJson:\n      type: object\n    SerializedValueOptionalFailureObject:\n      type: object\n      properties:\n        byteArray:\n          type: array\n          items:\n            type: string\n            format: byte\n    JarListInfo:\n      type: object\n      properties:\n        address:\n          type: string\n        files:\n          type: array\n          items:\n            $ref: '#/components/schemas/JarFileInfo'\n    RootExceptionInfo:\n      type: object\n      properties:\n        exceptionName:\n          type: string\n        stacktrace:\n          type: string\n        timestamp:\n          type: integer\n          format: int64\n        taskName:\n          type: string\n        location:\n          type: string\n        concurrentExceptions:\n          type: array\n          items:\n            $ref: '#/components/schemas/ExceptionInfo'\n    TaskManagerInfo:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/ResourceID'\n        path:\n          type: string\n        dataPort:\n          type: integer\n          format: int32\n        jmxPort:\n          type: integer\n          format: int32\n        timeSinceLastHeartbeat:\n          type: integer\n          format: int64\n        slotsNumber:\n          type: integer\n          format: int32\n        freeSlots:\n          type: integer\n          format: int32\n        totalResource:\n          $ref: '#/components/schemas/ResourceProfileInfo'\n        freeResource:\n          $ref: '#/components/schemas/ResourceProfileInfo'\n        hardware:\n          $ref: '#/components/schemas/HardwareDescription'\n        memoryConfiguration:\n          $ref: '#/components/schemas/TaskExecutorMemoryConfiguration'\n    ApplicationStatus:\n      type: string\n      enum:\n      - SUCCEEDED\n      - FAILED\n      - CANCELED\n      - UNKNOWN\n    EnvironmentInfo:\n      type: object\n      properties:\n        environment:\n          type: array\n          items:\n            $ref: '#/components/schemas/EnvironmentVariableItem'\n        jvm:\n          $ref: '#/components/schemas/JVMInfo'\n        classpath:\n          type: array\n          items:\n            type: string\n    Summary:\n      type: object\n      properties:\n        checkpointed_size:\n          $ref: '#/components/schemas/StatsSummaryDto'\n        state_size:\n          $ref: '#/components/schemas/StatsSummaryDto'\n        end_to_end_duration:\n          $ref: '#/components/schemas/StatsSummaryDto'\n        checkpoint_duration:\n          $ref: '#/components/schemas/CheckpointDuration'\n        alignment:\n          $ref: '#/components/schemas/CheckpointAlignment'\n        start_delay:\n          $ref: '#/components/schemas/StatsSummaryDto'\n    IntermediateDataSetID:\n      pattern: \"[0-9a-f]{32}\"\n      type: string\n    Metric:\n      required:\n      - id\n      type: object\n      properties:\n        id:\n          type: string\n        value:\n          type: string\n    EnvironmentVariableItem:\n      type: object\n      properties:\n        key:\n          type: string\n        value:\n          type: string\n    TriggerResponse:\n      type: object\n      properties:\n        request-id:\n          $ref: '#/components/schemas/TriggerId'\n    SlotInfo:\n      type: object\n      properties:\n        jobId:\n          $ref: '#/components/schemas/JobID'\n        resource:\n          $ref: '#/components/schemas/ResourceProfileInfo'\n    SubtaskBackPressureInfo:\n      type: object\n      properties:\n        subtask:\n          type: integer\n          format: int32\n        backpressure-level:\n          $ref: '#/components/schemas/VertexBackPressureLevel'\n        ratio:\n          type: number\n          format: double\n        idleRatio:\n          type: number\n          format: double\n        busyRatio:\n          type: number\n          format: double\n",
			"canonicalURL": "/github.com/a0x8o/flink@4bbbaca65142dbbc3a7d70324f1e73876316811a/-/blob/docs/static/generated/rest_v1_dispatcher.yml",
			"externalURLs": [
				{
					"url": "https://github.com/a0x8o/flink/blob/4bbbaca65142dbbc3a7d70324f1e73876316811a/docs/static/generated/rest_v1_dispatcher.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"ConfigurationInfo\": parse schema: at 1:5224: array cannot contain properties"
}