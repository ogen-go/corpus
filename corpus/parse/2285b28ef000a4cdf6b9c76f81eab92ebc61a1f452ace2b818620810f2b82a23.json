{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dcsaorg/DCSA-OpenAPI"
		},
		"file": {
			"name": "event_domain_v1.1.1.yaml",
			"size": 0,
			"path": "domain/event/event_domain_v1.1.1.yaml",
			"byteSize": 57938,
			"content": "# OpenAPI version identifier - required for OpenAPI 3.0 domains\r\nopenapi: 3.0.3\r\n\r\n#######################\r\n# Optional info section\r\n#######################\r\ninfo:\r\n  title: DCSA Event Components\r\n  description: |\r\n    Common components for DCSA Events. This domain is central for all Event Hubs and is used by\r\n    - T&T v2.1 and later. Event hub for:\r\n      - <a href=\"#/components/schemas/transportEvent\">TransportEvent</a>\r\n      - <a href=\"#/components/schemas/equipmentEvent\">EquipmentEvent</a>\r\n      - <a href=\"#/components/schemas/shipmentEvent\">ShipmentEvent</a>\r\n    - Documentation Hub used by eBL (electronic Bill of Lading) and BKG (Booking). Event hub for:\r\n      - <a href=\"#/components/schemas/shipmentEvent\">ShipmentEvent</a>\r\n    - OVS Hub used by OVS. Event hub for:\r\n      - <a href=\"#/components/schemas/transportEvent\">TransportEvent</a>\r\n      - <a href=\"#/components/schemas/operationsEvent\">OperationsEvent</a>\r\n  # - Event Hub (General event hub for <a href=\"#/components/schemas/transportEvent\">TransportEvent</a>, <a href=\"#/components/schemas/equipmentEvent\">EquipmentEvent</a>, <a href=\"#/components/schemas/shipmentEvent\">ShipmentEvents</a> and <a href=\"#/components/schemas/operationsEvent\">OperationsEvent</a>)\r\n  version: 1.1.1\r\n\r\ncomponents:\r\n  parameters:\r\n\r\n    ####################\r\n    ## Header parameters\r\n    ####################\r\n\r\n    apiVersion:\r\n      in: header\r\n      name: API-Version\r\n      required: true\r\n      schema:\r\n        type: string\r\n        example: 1.0.0\r\n      description: |\r\n        SemVer used to indicate the version of the contract (API version) returned.\r\n    notificationSignature:\r\n      in: header\r\n      name: Notification-Signature\r\n      required: true\r\n      description: |\r\n        the Notification-Signature is used to sign the notification. The header has the following format: \r\n\r\n        <i>Notification-Signature&#58; &lt;signature-type&gt;=&lt;signature&gt;</i>\r\n\r\n        The <i>&lt;signature-type&gt;</i> part is a keyword that determines which algorithm was used to compute the signature.\r\n\r\n        The signature <b>MUST</b> cover the entire request body of the request including whitespace and newlines. The content <b>MUST</b> decoded into bytes using the UTF-8 encoding before computing the signature. None of the HTTP headers nor the request URL is covered by the signature.\r\n        \r\n        Supported signature typies are&#58;\r\n        - sha256\r\n        \r\n        Example&#58; sha256=ae688919f5e31f4c210ca6af362ce4d9ed87acfb51c1721a8507ee395de5e2de\r\n      schema:\r\n        type: string\r\n        pattern: '\\s*([a-zA-Z0-9-_+]+=[0-9a-fA-F]+)\\s*'\r\n        example: 'sha256=ae688919f5e31f4c210ca6af362ce4d9ed87acfb51c1721a8507ee395de5e2de'\r\n    signatureHeader:\r\n      in: header\r\n      name: Signature\r\n      required: true\r\n      description: |\r\n        The signature certifying the request originates from the carrier.\r\n      deprecated: true\r\n      schema:\r\n        properties:\r\n          keyId:\r\n            type: string\r\n            format: uuid\r\n            example: 4fb682bc-3cd1-43a9-a23a-618a61bd87ca\r\n          created:\r\n            type: integer\r\n            example: 1591960384 \r\n          headers:\r\n            type: string\r\n            example: '(request-target) (created) date host'\r\n          signature:\r\n            type: string\r\n            example: aGkgZnJvbSBkZW5tYXJr\r\n    subscriptionIDHeader:\r\n      in: header\r\n      name: Subscription-ID\r\n      required: true\r\n      description: 'The ID of the subscription triggering the event being sent.'\r\n      schema:\r\n        type: string\r\n        format: uuid\r\n        example: b80d923d-e8ac-4c34-9506-55d3de347034\r\n\r\n    #################\r\n    # Path parameters\r\n    #################\r\n\r\n    eventID:\r\n      in: path\r\n      name: eventID\r\n      schema:\r\n        $ref: '#/components/schemas/eventID'\r\n      required: true\r\n      deprecated: true\r\n      description: 'The ID of the event to receive'\r\n      example: 123e4567-e89b-12d3-a456-426614174000\r\n    subscriptionID:\r\n      in: path\r\n      name: subscriptionID\r\n      schema:\r\n        $ref: '#/components/schemas/subscriptionID'\r\n      required: true\r\n      description: 'The universal unique ID of the subscription.'\r\n      example: 123e4567-e89b-12d3-a456-426614174000\r\n\r\n    ##################\r\n    # Query parameters\r\n    ##################\r\n    \r\n    bookingReference:\r\n      in: query\r\n      name: bookingReference\r\n      deprecated: true\r\n      description: Deprecated - use carrierBookingReference instead.\r\n      required: false\r\n      schema:\r\n        type: string\r\n    carrierBookingReference:\r\n      in: query\r\n      name: carrierBookingReference\r\n      description: |\r\n        A set of unique characters provided by carrier to identify a booking.\r\n        \r\n        Specifying this filter will only return events related to this particular carrierBookingReference.\r\n      schema:\r\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/carrierBookingReference'\r\n    carrierVoyageNumber:\r\n      in: query\r\n      name: carrierVoyageNumber\r\n      description: |\r\n        Filter on the vessel operator-specific identifier of the Voyage.\r\n        \r\n        Specifying this filter will only return events related to this particular carrierVoyageNumber.\r\n        \r\n        <b>Deprecated:</b> Use exportVoyageNumber instead\r\n      required: false\r\n      deprecated: true\r\n      schema:\r\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/carrierVoyageNumber'\r\n    exportVoyageNumber:\r\n      in: query\r\n      name: exportVoyageNumber\r\n      description: |\r\n        Filter on the vessel operator-specific identifier of the export Voyage.\r\n        \r\n        Specifying this filter will only return events related to this particular exportVoyageNumber.\r\n      required: false\r\n      schema:\r\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/exportVoyageNumber'\r\n    carrierServiceCode:\r\n      in: query\r\n      name: carrierServiceCode\r\n      description: |\r\n        Filter on the carrier specific identifier of the service.\r\n        \r\n        Specifying this filter will only return events related to this particular carrierServiceCode.\r\n      required: false\r\n      schema:\r\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/carrierServiceCode'\r\n    documentTypeCode:\r\n      in: query\r\n      name: documentTypeCode\r\n      explode: false\r\n      style: form\r\n      description: |\r\n        The documentTypeCode to filter by. Possible values are\r\n        - CBR (Carrier Booking Request Reference)\r\n        - BKG (Booking)\r\n        - SHI (Shipping Instruction)\r\n        - SRM (Shipment Release Message)\r\n        - TRD (Transport Document)\r\n        - ARN (Arrival Notice)\r\n        - VGM (Verified Gross Mass)\r\n        - CAS (Cargo Survey)\r\n        - CUS (Customs Inspection)\r\n        - DGD (Dangerous Goods Declaration)\r\n        - OOG (Out of Gauge)\r\n\r\n        It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example <i>documentTypeCode=SHI,TRD</i> Matches <b>both</b> ShippingInstruction (SHI) and TransportDocument (TRD) shipment events.\r\n        \r\n        Default is all documentTypeCodes.\r\n        \r\n        This filter is only relevant when filtering on ShipmentEvents\r\n      example: SHI,TRD\r\n      schema:\r\n        default: CBR,BKG,SHI,SRM,TRD,ARN,VGM,CAS,CUS,DGD,OOG\r\n        type: array\r\n        items:\r\n          $ref: '#/components/schemas/documentTypeCode'\r\n    equipmentEventTypeCode:\r\n      in: query\r\n      name: equipmentEventTypeCode\r\n      explode: false\r\n      style: form\r\n      description: |\r\n        Unique identifier for equipmentEventTypeCode.\r\n        - LOAD (Loaded)\r\n        - DISC (Discharged)\r\n        - GTIN (Gated in)\r\n        - GTOT (Gated out)\r\n        - STUF (Stuffed)\r\n        - STRP (Stripped)\r\n        - PICK (Pick-up)\r\n        - DROP (Drop-off)\r\n        - INSP (Inspected)\r\n        - RSEA (Resealed)\r\n        - RMVD (Removed)\r\n\r\n        It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example <i>equipmentEventTypeCode=GTIN,GTOT</i> matches <b>both</b> Gated in (GTIN) and Gated out (GTOT) equipment events.\r\n        \r\n        Default is all equipmentEventTypeCodes.\r\n        \r\n        This filter is only relevant when filtering on EquipmentEvents\r\n      example: GTIN,GTOT\r\n      schema:\r\n        default: LOAD,DISC,GTIN,GTOT,STUF,STRP,PICK,DROP,INSP,RSEA,RMVD\r\n        type: array\r\n        items:\r\n          $ref: '#/components/schemas/equipmentEventTypeCode'\r\n    equipmentReference:\r\n      in: query\r\n      name: equipmentReference\r\n      description: |\r\n        Will filter by the unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\r\n        \r\n        Specifying this filter will only return events related to this particular equipmentReference\r\n      required: false\r\n      schema:\r\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/equipmentReference'\r\n    eventClassifierCode:\r\n      in: query\r\n      name: eventClassifierCode\r\n      description: |\r\n        Unique identifier for eventClassifierCode.\r\n      #   - ACT (Actual)\r\n      #   - PLN (Planned)\r\n      #   - EST (Estimated)\r\n      #   - REQ (Requested)\r\n\r\n      #   It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example <i>eventClassifierCode=EST,ACT</i> matches <b>both</b> Estimated (EST) and Actual (ACT) events.\r\n        \r\n      #   Default is all eventClassifierCodes.\r\n        \r\n      #   Be aware that not all events support REQ (Requested).\r\n      # example: EST,ACT\r\n      schema:\r\n      #   default: ACT,PLN,EST,REQ\r\n      #   type: array\r\n        items:\r\n          $ref: '#/components/schemas/eventClassifierCode'\r\n    eventCreatedDateTime:\r\n      in: query\r\n      name: eventCreatedDateTime\r\n      description: |\r\n        Limit the result based on the creating date of the event. It is possible to use operators on this query parameter. This is done by adding a colon followed by an operator at the end of the queryParameterName (before the =)\r\n        \r\n        <i>eventCreatedDateTime<b>&#58;gte</b>=2021-04-01T14&#58;12&#58;56+01&#58;00</i>\r\n        \r\n        would result in all events created &#8805; 2021-04-01T14&#58;12&#58;56+01&#58;00\r\n        \r\n        The following operators are supported\r\n        - &#58;gte (&#8805; Greater than or equal)\r\n        - &#58;gt (&#62; Greater than)\r\n        - &#58;lte (&#8804; Less than or equal)\r\n        - &#58;lt (&#60; Less than)\r\n        - &#58;eq (&#61; Equal to)\r\n        \r\n        If no operator is provided, a <b>strictly equal</b> is used (this is equivalent to <b>&#58;eq</b> operator).\r\n      required: false\r\n      example: 2021-04-01T14:12:56+01:00\r\n      schema:\r\n        $ref: '#/components/schemas/eventCreatedDateTime'\r\n    operationsEventTypeCode:\r\n      in: query\r\n      name: operationsEventTypeCode\r\n      description: |\r\n        The code to identify the type of event that is related to the operation\r\n        - STRT (Started)\r\n        - CMPL (Completed)\r\n        - ARRI (Arrived)\r\n        - DEPA (Departed)\r\n\r\n        It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example <i>operationsEventTypeCode=ARRI,CMPL</i> matches <b>both</b> Arrived (ARRI) and Completed (CMPL) operations events.\r\n        \r\n        Default is all operationsEventTypeCodes.\r\n      example: ARRI,CMPL\r\n      schema:\r\n        default: STRT,CMPL,ARRI,DEPA\r\n        type: array\r\n        items:\r\n          $ref: '#/components/schemas/operationsEventTypeCode'\r\n    scheduleID:\r\n      in: query\r\n      name: scheduleID\r\n      description: |\r\n        ID uniquely identifying a schedule, to filter events by.\r\n        \r\n        This filter was added by mistake and is thus deprecated.\r\n      required: false\r\n      schema:\r\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/scheduleID'\r\n      deprecated: true\r\n    shipmentEventTypeCode:\r\n      in: query\r\n      name: shipmentEventTypeCode\r\n      explode: false\r\n      style: form\r\n      description: |\r\n        The status of the document in the process to filter by. Possible values are\r\n        - RECE (Received)\r\n        - DRFT (Drafted)\r\n        - PENA (Pending Approval)\r\n        - PENU (Pending Update)\r\n        - REJE (Rejected)\r\n        - APPR (Approved)\r\n        - ISSU (Issued)\r\n        - SURR (Surrendered)\r\n        - SUBM (Submitted)\r\n        - VOID (Void)\r\n        - CONF (Confirmed)\r\n        - REQS (Requested)\r\n        - CMPL (Completed)\r\n        - HOLD (On Hold)\r\n        - RELS (Released)\r\n        \r\n        It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example <i>shipmentEventTypeCode=RECE,DRFT</i>  Matches <b>both</b> Received (RECE) and Drafted (DRFT) shipment events.\r\n        \r\n        Default is all shipmentEventTypeCodes.\r\n        \r\n        This filter is only relevant when filtering on ShipmentEvents\r\n      example: RECE,DRFT\r\n      schema:\r\n        default: RECE,DRFT,PENA,PENU,REJE,APPR,ISSU,SURR,SUBM,VOID,CONF,REQS,CMPL,HOLD,RELS\r\n        type: array\r\n        items:\r\n          $ref: '#/components/schemas/shipmentEventTypeCode'\r\n    shippingInstructionID:\r\n      in: query\r\n      name: shippingInstructionID\r\n      description: |\r\n        The Shipping Instruction ID identifier is an identifier that links to a shipping instruction\r\n      required: false\r\n      schema:\r\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/shippingInstructionID'\r\n    transportCallID:\r\n      in: query\r\n      name: transportCallID\r\n      description: |\r\n        ID uniquely identifying a transport call, to filter events by.\r\n        \r\n        Specifying this filter will only return events related to this particular transportCallID\r\n      required: false\r\n      schema:\r\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/transportCallID'\r\n    transportDocumentID:\r\n      in: query\r\n      name: transportDocumentID\r\n      description: |\r\n        A unique id to identify a transport document.\r\n        \r\n        Deprecated - use transportDocumentReference instead transportDocumentReference\r\n      deprecated: true\r\n      schema:\r\n        type: string\r\n        format: uuid\r\n    transportDocumentReference:\r\n      in: query\r\n      name: transportDocumentReference\r\n      description: |\r\n        A unique number reference allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\r\n        \r\n        Specifying this filter will only return events related to this particular transportDocumentReference\r\n      required: false\r\n      schema:\r\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/transportDocumentReference'\r\n    transportEventTypeCode:\r\n      in: query\r\n      name: transportEventTypeCode\r\n      explode: false\r\n      style: form\r\n      description: |\r\n        Identifier for type of Transport event to filter by\r\n        - ARRI (Arrived)\r\n        - DEPA (Departed)\r\n\r\n        It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example <i>transportEventTypeCode=ARRI,DEPA</i> matches <b>both</b> Arrived (ARRI) and Departed (DEPA) transport events.\r\n        \r\n        Default is all transportEventTypeCodes.\r\n        \r\n        This filter is only relevant when filtering on TransportEvents\r\n      example: ARRI,DEPA\r\n      schema:\r\n        default: ARRI,DEPA\r\n        type: array\r\n        items:\r\n          $ref: '#/components/schemas/transportEventTypeCode'\r\n    UNLocationCode:\r\n      in: query\r\n      name: UNLocationCode\r\n      description: |\r\n        The UN Location code specifying where the place is located.\r\n        \r\n        Specifying this filter will only return events related to this particular UN Location code.\r\n      required: false\r\n      schema:\r\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/UNLocationCode'\r\n    vesselIMONumber:\r\n      in: query\r\n      name: vesselIMONumber\r\n      description: |\r\n        The identifier of vessel for which schedule details are published. Depending on schedule type, this may not be available yet.\r\n        \r\n        Specifying this filter will only return events related to this particular vesselIMONumber.\r\n      required: false\r\n      schema:\r\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/vesselIMONumber'\r\n\r\n  ####################\r\n  # Common data models\r\n  ####################\r\n  \r\n  schemas:\r\n  \r\n    ###################\r\n    # Base Event object\r\n    ###################\r\n\r\n    baseEventBody:\r\n      type: object\r\n      description: |\r\n        The Event entity is described as a generalization of all the specific event categories. An event always takes place in relation to a shipment and can additionally be linked to a transport or an equipment\r\n      allOf:\r\n        - type: object\r\n          properties:\r\n            eventType:\r\n              $ref: '#/components/schemas/eventType'\r\n        - type: object\r\n          properties:\r\n            eventClassifierCode:\r\n              $ref: '#/components/schemas/eventClassifierCode'\r\n        - type: object\r\n          properties:\r\n            eventDateTime:\r\n              $ref: '#/components/schemas/eventDateTime'\r\n      required:\r\n        - eventType\r\n        - eventClassifierCode\r\n        - eventDateTime\r\n    \r\n    baseEvent:\r\n      type: object\r\n      allOf:\r\n        - type: object\r\n          properties:\r\n            eventID:\r\n              $ref: '#/components/schemas/eventID'\r\n        - type: object\r\n          properties:\r\n            eventCreatedDateTime:\r\n              $ref: '#/components/schemas/eventCreatedDateTime'\r\n        - $ref: '#/components/schemas/baseEventBody'\r\n      required:\r\n        - eventCreatedDateTime\r\n\r\n\r\n    ##########################\r\n    # Shipment Event object\r\n    ##########################\r\n\r\n\r\n    baseShipmentEvent:\r\n      type: object\r\n      description: |\r\n        The shipment event entity is a specialization of the event entity to support specification of data that only applies to a shipment event.\r\n      allOf:\r\n        #Overriding this property to have correct payload response examples\r\n        - type: object\r\n          properties:\r\n            eventType:\r\n              example: SHIPMENT\r\n              enum:\r\n                - SHIPMENT\r\n        #Overriding this property to have correct payload response examples\r\n        - type: object\r\n          properties:\r\n            eventDateTime:\r\n              description: |\r\n                Value for eventDateTime must be the same value as eventCreatedDateTime\r\n        #Overriding this property to have correct payload response examples\r\n        - type: object\r\n          properties:\r\n            eventClassifierCode:\r\n              description: |\r\n                Code for the event classifier can be\r\n                - ACT (Actual)\r\n                - PLN (Planned)\r\n                - EST (Estimated)\r\n              enum:\r\n                - ACT\r\n                - PLN\r\n                - EST\r\n              example: ACT\r\n        - type: object\r\n          properties:\r\n            shipmentEventTypeCode:\r\n              $ref: '#/components/schemas/shipmentEventTypeCode'\r\n        - type: object\r\n          properties:\r\n            documentID:\r\n              $ref: '#/components/schemas/documentID'\r\n        - type: object\r\n          properties:\r\n            documentTypeCode:\r\n              $ref: '#/components/schemas/documentTypeCode'\r\n        - type: object\r\n          properties:\r\n            shipmentInformationTypeCode:\r\n              $ref: '#/components/schemas/shipmentInformationType'\r\n        - type: object\r\n          properties:\r\n            reason:\r\n              $ref: '#/components/schemas/reason'\r\n        \r\n        #####################################\r\n        # Deprecated ShipmentEvent attributes\r\n        #####################################\r\n        \r\n        - type: object\r\n          properties:\r\n            eventTypeCode:\r\n              $ref: '#/components/schemas/eventTypeCode'\r\n        - type: object\r\n          properties:\r\n            eventTypeCode:\r\n              description: |\r\n                Unique identifier for Event Type Code. For shipment events this can be\r\n                - RECE (Received)\r\n                - CONF (Confirmed)\r\n                - ISSU (Issued)\r\n                - APPR (Approved)\r\n                - SUBM (Submitted)\r\n                - SURR (Surrendered)\r\n                - REJE (Rejected)\r\n                - PENA (Pending approval)\r\n                \r\n                Deprecated - use shipmentEventTypeCode instead\r\n              deprecated: true\r\n              example: RECE\r\n              enum:\r\n                - RECE\r\n                - CONF\r\n                - ISSU\r\n                - APPR\r\n                - SUBM\r\n                - SURR\r\n                - REJE\r\n                - PENA\r\n        - type: object\r\n          properties:\r\n            shipmentID:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/shipmentID'\r\n        - type: object\r\n          properties:\r\n            shipmentID:\r\n              description: |\r\n                ID uniquely identifying a shipment.\r\n                \r\n                Deprecated - this is replaced by documentID which can contain different values depending on the value of the documentTypeCode field\r\n              deprecated: true\r\n        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/1.0.4#/components/schemas/references'\r\n      required:\r\n        - documentID\r\n        - shipmentEventTypeCode\r\n        - documentTypeCode\r\n\r\n    shipmentEvent:\r\n      type: object\r\n      allOf:\r\n        - $ref: '#/components/schemas/baseEvent'\r\n        - $ref: '#/components/schemas/baseShipmentEvent'\r\n\r\n\r\n    ###############################\r\n    # Transport Event object\r\n    ###############################\r\n\r\n\r\n    baseTransportEvent:\r\n      type: object\r\n      description: |\r\n        The transport event entity is a specialization of the event entity to support specification of data that only applies to a transport event.\r\n      allOf:\r\n        #Overriding this property to have correct payload response examples\r\n        - type: object\r\n          properties:\r\n            eventType:\r\n              example: TRANSPORT\r\n              enum:\r\n                - TRANSPORT\r\n        #Overriding this property to have correct payload response examples\r\n        - type: object\r\n          properties:\r\n            eventClassifierCode:\r\n              description: |\r\n                Code for the event classifier can be\r\n                - ACT (Actual)\r\n                - PLN (Planned)\r\n                - EST (Estimated)\r\n              enum:\r\n                - ACT\r\n                - PLN\r\n                - EST\r\n              example: ACT\r\n        - type: object\r\n          properties:\r\n            transportEventTypeCode:\r\n              $ref: '#/components/schemas/transportEventTypeCode'\r\n        - type: object\r\n          properties:\r\n            delayReasonCode:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/delayReasonCode'\r\n        - type: object\r\n          properties:\r\n            changeRemark:\r\n              $ref: '#/components/schemas/changeRemark'\r\n        - type: object\r\n          properties:\r\n            transportCall:\r\n              $ref: '#/components/schemas/transportCall'\r\n\r\n      required:\r\n        - transportCall\r\n        - transportEventTypeCode\r\n\r\n    operationsTransportEvent:\r\n      type: object\r\n      allOf:\r\n        - $ref: '#/components/schemas/baseEvent'\r\n        - $ref: '#/components/schemas/baseTransportEvent'\r\n\r\n    transportEvent:\r\n      type: object\r\n      allOf:\r\n        - $ref: '#/components/schemas/operationsTransportEvent'\r\n        - type: object\r\n          properties:\r\n            vesselScheduleChangeRemark:\r\n              $ref: '#/components/schemas/vesselScheduleChangeRemark'\r\n        - type: object\r\n          properties:\r\n            transportCallID:\r\n              allOf:\r\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/transportCallID'\r\n                - deprecated: true\r\n                - description: 'The unique identifier for a transport call<br><br>Deprecated - not needed as the TransportCall object is included'\r\n        - type: object\r\n          properties:\r\n            eventTypeCode:\r\n              $ref: '#/components/schemas/eventTypeCode'\r\n        - type: object\r\n          properties:\r\n            eventTypeCode:\r\n              description: |\r\n                Unique identifier for Event Type Code, for transport events this is either\r\n                - ARRI (Arrival)\r\n                - DEPA (Departure)\r\n                \r\n                Deprecated - use transportEventTypeCode instead\r\n              deprecated: true\r\n              enum:\r\n                - ARRI\r\n                - DEPA\r\n        - type: object\r\n          properties:\r\n            documentReferences:\r\n              $ref: '#/components/schemas/documentReferences'\r\n        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/1.0.4#/components/schemas/references'\r\n\r\n\r\n    ########################\r\n    # Equipment Event object\r\n    ########################\r\n\r\n\r\n    baseEquipmentEvent:\r\n      type: object\r\n      description: |\r\n        The equipment event entity is a specialization of the event entity to support specification of data that only applies to an equipment event.\r\n      allOf:\r\n        #Overriding this property to have correct payload response examples\r\n        - type: object\r\n          properties:\r\n            eventType:\r\n              example: EQUIPMENT\r\n              enum:\r\n                - EQUIPMENT\r\n        #Overriding this property to have correct payload response examples\r\n        - type: object\r\n          properties:\r\n            eventClassifierCode:\r\n              description: |\r\n                Code for the event classifier can be\r\n                - PLN (Planned)\r\n                - ACT (Actual)\r\n                - EST (Estimated)\r\n              enum:\r\n                - PLN\r\n                - ACT\r\n                - EST\r\n              example: EST\r\n        - type: object\r\n          properties:\r\n            equipmentEventTypeCode:\r\n              $ref: '#/components/schemas/equipmentEventTypeCode'\r\n        - type: object\r\n          properties:\r\n            equipmentReference:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/equipmentReference'\r\n        - type: object\r\n          properties:\r\n            ISOEquipmentCode:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/ISOEquipmentCode'\r\n        - type: object\r\n          properties:\r\n            emptyIndicatorCode:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/emptyIndicatorCode'\r\n        - type: object\r\n          properties:\r\n            eventLocation:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/1.0.3#/components/schemas/location'\r\n        - type: object\r\n          properties:\r\n            transportCallID:\r\n              allOf:\r\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/transportCallID'\r\n                - deprecated: true\r\n                - description: 'The unique identifier for a transport call<br><br>Deprecated - not needed as the TransportCall object is included'\r\n        - type: object\r\n          properties:\r\n            transportCall:\r\n              $ref: '#/components/schemas/transportCall'\r\n        - type: object\r\n          properties:\r\n            documentReferences:\r\n              $ref: '#/components/schemas/documentReferences'\r\n        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/1.0.4#/components/schemas/references'\r\n        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/1.0.4#/components/schemas/seals'\r\n\r\n        ######################################\r\n        # Deprecated EquipmentEvent attributes\r\n        ######################################\r\n\r\n        - type: object\r\n          properties:\r\n            eventTypeCode:\r\n              $ref: '#/components/schemas/eventTypeCode'\r\n        - type: object\r\n          properties:\r\n            eventTypeCode:\r\n              description: |\r\n                Unique identifier for Event Type Code, for transport events this is either\r\n                - LOAD (Loaded)\r\n                - DISC (Discharged)\r\n                - GTIN (Gated in)\r\n                - GTOT (Gated out)\r\n                - STUF (Stuffed)\r\n                - STRP (Stripped)\r\n                \r\n                Deprecated - use equipmentEventTypeCode instead\r\n              deprecated: true\r\n              enum: \r\n                - LOAD\r\n                - DISC\r\n                - GTIN\r\n                - GTOT\r\n                - STUF\r\n                - STRP\r\n      required:\r\n        - emptyIndicatorCode\r\n        - equipmentEventTypeCode\r\n\r\n    equipmentEvent:\r\n      type: object\r\n      allOf:\r\n        - $ref: '#/components/schemas/baseEvent'\r\n        - $ref: '#/components/schemas/baseEquipmentEvent'\r\n\r\n\r\n    #########################\r\n    # Operations Event object\r\n    #########################\r\n\r\n\r\n    baseOperationsEvent:\r\n      type: object\r\n      description: |\r\n        The operations event entity is a specialization of the event entity to support specification of data that only applies to an operations event.\r\n      allOf:\r\n        #Overriding this property to have correct payload response examples\r\n        - type: object\r\n          properties:\r\n            eventType:\r\n              example: OPERATIONS\r\n              enum:\r\n                - OPERATIONS\r\n        #Overriding this property to have correct payload response examples\r\n        - type: object\r\n          properties:\r\n            eventClassifierCode:\r\n              description: |\r\n                Code for the event classifier can be\r\n                - ACT (Actual)\r\n                - PLN (Planned)\r\n                - EST (Estimated)\r\n                - REQ (Requested)\r\n              enum:\r\n                - ACT\r\n                - PLN\r\n                - EST\r\n                - REQ\r\n              example: ACT\r\n        - type: object\r\n          properties:\r\n            operationsEventTypeCode:\r\n              $ref: '#/components/schemas/operationsEventTypeCode'\r\n        - type: object\r\n          properties:\r\n            publisher:\r\n              allOf:\r\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/1.0.4#/components/schemas/partyNoID'\r\n        - type: object\r\n          properties:\r\n            publisherRole:\r\n              $ref: '#/components/schemas/publisherRole'\r\n        - type: object\r\n          properties:\r\n            eventLocation:\r\n              allOf:\r\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/1.0.3#/components/schemas/location'\r\n                - description: The location where the event takes place.\r\n              # type: string\r\n              # format: uuid\r\n              # description: |\r\n              #   The location where the event takes place.\r\n        - type: object\r\n          properties:\r\n            portCallServiceTypeCode:\r\n              $ref: '#/components/schemas/portCallServiceTypeCode'\r\n        - type: object\r\n          properties:\r\n            portCallPhaseTypeCode:\r\n              $ref: '#/components/schemas/portCallPhaseTypeCode'\r\n        - type: object\r\n          properties:\r\n            facilityTypeCode:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/facilityTypeCodeOPR'\r\n        - type: object\r\n          properties:\r\n            delayReasonCode:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/delayReasonCode'\r\n        - type: object\r\n          properties:\r\n            remark:\r\n              $ref: '#/components/schemas/remark'\r\n        - type: object\r\n          properties:\r\n            transportCall:\r\n              $ref: '#/components/schemas/transportCall'\r\n        - type: object\r\n          properties:\r\n            vesselPosition:\r\n              allOf:\r\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/1.0.3#/components/schemas/geoLocation'\r\n                - description: The position of the vessel at the time when the message was sent\r\n              # type: string\r\n              # format: uuid\r\n              # description: |\r\n      required:\r\n        - operationsEventTypeCode\r\n        - publisher\r\n        - publisherRole\r\n\r\n    operationsEvent:\r\n      type: object\r\n      allOf:\r\n        - $ref: '#/components/schemas/baseEvent'\r\n        - $ref: '#/components/schemas/baseOperationsEvent'\r\n\r\n\r\n    ##############################\r\n    # Shipment Subscription object\r\n    ##############################\r\n\r\n\r\n    shipmentSubscriptionBody:\r\n      type: object\r\n      allOf:\r\n        - type: object\r\n          properties:\r\n            shipmentEventTypeCode:\r\n              $ref: '#/components/schemas/shipmentEventTypeCodes'\r\n        - type: object\r\n          properties:\r\n            documentTypeCode:\r\n              $ref: '#/components/schemas/documentTypeCodes'\r\n        - type: object\r\n          properties:\r\n            carrierBookingReference:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/carrierBookingReference'\r\n        - type: object\r\n          properties:\r\n            bookingReference:\r\n              type: string\r\n              maxLength: 35\r\n              example: ABC709951\r\n              description: |\r\n                The identifier for a shipment, which is issued by and unique within each of the carriers.\r\n                \r\n                Deprecated - use carrierBookingReference instead\r\n              deprecated: true\r\n        - type: object\r\n          properties:\r\n            transportDocumentID:\r\n              type: string\r\n              format: uuid\r\n              deprecated: true\r\n              description: |\r\n                Uniquely identify a transport document.\r\n                \r\n                Deprecated - use transportDocumentReference instead\r\n        - type: object\r\n          properties:\r\n            transportDocumentReference:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/transportDocumentReference'\r\n        - type: object\r\n          properties:\r\n            transportDocumentTypeCode:\r\n              allOf:\r\n                - $ref: '#/components/schemas/transportDocumentTypeCodes'\r\n                - deprecated: true\r\n                - description: |\r\n                    List of transportDocumentType to filter by. If multiple values are selected - the OR-operator will be used.\r\n\r\n                    Default is none as it will not filter on transportDocumentType if not specified.\r\n                    \r\n                    <b>Deprecated:</b> Not to be used any more\r\n\r\n\r\n    ###############################\r\n    # Equipment Subscription object\r\n    ###############################\r\n\r\n\r\n    equipmentSubscriptionBody:\r\n      type: object\r\n      allOf:\r\n        - type: object\r\n          properties:\r\n            equipmentEventTypeCode:\r\n              $ref: '#/components/schemas/equipmentEventTypeCodes'\r\n        - type: object\r\n          properties:\r\n            equipmentReference:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/equipmentReference'\r\n        - type: object\r\n          properties:\r\n            UNLocationCode:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/UNLocationCode'\r\n\r\n\r\n    ###############################\r\n    # Transport Subscription object\r\n    ###############################\r\n\r\n\r\n    transportSubscriptionBody:\r\n      type: object\r\n      allOf:\r\n        - type: object\r\n          properties:\r\n            transportEventTypeCode:\r\n              $ref: '#/components/schemas/transportEventTypeCodes'\r\n        - type: object\r\n          properties:\r\n            transportCallID:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/transportCallID'\r\n        - type: object\r\n          properties:\r\n            vesselIMONumber:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/vesselIMONumber'\r\n        - type: object\r\n          properties:\r\n            carrierVoyageNumber:\r\n              allOf:\r\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/carrierVoyageNumber'\r\n                - deprecated: true\r\n        - type: object\r\n          properties:\r\n            exportVoyageNumber:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/exportVoyageNumber'\r\n        - type: object\r\n          properties:\r\n            carrierServiceCode:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/carrierServiceCode'\r\n        - type: object\r\n          properties:\r\n            UNLocationCode:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/UNLocationCode'\r\n\r\n\r\n    transportSubscriptionBodyWithScheduleID:\r\n      type: object\r\n      allOf:\r\n        - $ref: '#/components/schemas/transportSubscriptionBody'\r\n        - type: object\r\n          properties:\r\n            scheduleID:\r\n              allOf:\r\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/scheduleID'\r\n                - deprecated: true\r\n                - description: 'ID uniquely identifying a schedul.<br>Deprecated as this was added by mistake'\r\n\r\n\r\n    ################################\r\n    # Operations Subscription object\r\n    ################################\r\n\r\n\r\n    operationsSubscriptionBody:\r\n      type: object\r\n      allOf:\r\n        - type: object\r\n          properties:\r\n            transportCallID:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/transportCallID'\r\n        - type: object\r\n          properties:\r\n            vesselIMONumber:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/vesselIMONumber'\r\n        - type: object\r\n          properties:\r\n            carrierVoyageNumber:\r\n              allOf:\r\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/carrierVoyageNumber'\r\n                - deprecated: true\r\n        - type: object\r\n          properties:\r\n            exportVoyageNumber:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/exportVoyageNumber'\r\n        - type: object\r\n          properties:\r\n            carrierServiceCode:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/carrierServiceCode'\r\n        - type: object\r\n          properties:\r\n            UNLocationCode:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/UNLocationCode'\r\n        - type: object\r\n          properties:\r\n            operationsEventTypeCode:\r\n              $ref: '#/components/schemas/operationsEventTypeCodes'\r\n\r\n    documentReferences:\r\n      type: array\r\n      description:\r\n        An optional list of key-value (documentReferenceType-documentReferenceValue) pairs representing links to objects relevant to the event. The <b>documentReferenceType</b>-field is used to describe where the <b>documentReferenceValue</b>-field is pointing to.\r\n      example:\r\n        - documentReferenceType: BKG\r\n          documentReferenceValue: ABC123123123\r\n        - documentReferenceType: TRD\r\n          documentReferenceValue: 85943567-eedb-98d3-f4ed-aed697474ed4\r\n      items:\r\n        type: object\r\n        properties:\r\n          documentReferenceType:\r\n            type: string\r\n            description:\r\n              Describes where the documentReferenceValue is pointing to\r\n            example: BKG\r\n            enum:\r\n              - BKG (Booking)\r\n              - TRD (Transport Document)\r\n          documentReferenceValue:\r\n            type: string\r\n            description:\r\n              The value of the identifier the documentReferenceType is describing\r\n            example: 123e4567-e89b-12d3-a456-426614174000\r\n\r\n    transportCall:\r\n      type: object\r\n      allOf:\r\n        - type: object\r\n          properties:\r\n            transportCallID:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/transportCallID'\r\n        - type: object\r\n          properties:\r\n            carrierServiceCode:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/carrierServiceCode'\r\n        - type: object\r\n          properties:\r\n            carrierVoyageNumber:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/carrierVoyageNumber'\r\n        # Extending carrierVoyageNumber description!\r\n        - type: object\r\n          properties:\r\n            carrierVoyageNumber:\r\n              description: |\r\n                The vessel operator-specific identifier of the Voyage.\r\n                \r\n                In case there are multiple voyages the export voyage is chosen.\r\n              deprecated: true\r\n        - type: object\r\n          properties:\r\n            exportVoyageNumber:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/exportVoyageNumber'\r\n        - type: object\r\n          properties:\r\n            importVoyageNumber:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/importVoyageNumber'\r\n        - type: object\r\n          properties:\r\n            transportCallSequenceNumber:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/transportCallSequenceNumber'\r\n        - type: object\r\n          properties:\r\n            UNLocationCode:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/UNLocationCode'\r\n        - type: object\r\n          properties:\r\n            facilityCode:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/facilityCode'\r\n        - type: object\r\n          properties:\r\n            facilityCodeListProvider:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/facilityCodeListProvider'\r\n        - type: object\r\n          properties:\r\n            facilityTypeCode:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/facilityTypeCodeTRN'\r\n        - type: object\r\n          properties:\r\n            otherFacility:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/otherFacility'\r\n        - type: object\r\n          properties:\r\n            modeOfTransport:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/modeOfTransport'\r\n        - type: object\r\n          properties:\r\n            location:\r\n              allOf:\r\n               -  $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/1.0.3#/components/schemas/location'\r\n               - type: object\r\n                 description: Location of the facility. Can often be omitted\r\n                   when it is just repeating the contents of the UNLocationCode field.\r\n                 example: null\r\n        - type: object\r\n          properties:\r\n            vessel:\r\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/1.0.4#/components/schemas/vessel'\r\n      required:\r\n        - transportCallID\r\n        - modeOfTransport\r\n\r\n\r\n    ##########################\r\n    # Simple types\r\n    ##########################\r\n\r\n\r\n    callbackUrl:\r\n      type: string\r\n      format: uri\r\n      description: |\r\n        The endPoint where a Carrier whould send back events to the Shipper. The callback can contain query parameters uniquely identifying the originator of the events.\r\n      example: https://myserver.com/send/callback/here?shipperRef=<shipper defined unique id>\r\n    changeRemark:\r\n      description: 'Free text information provided by the vessel operator regarding the reasons for the change in schedule and/or plans to mitigate schedule slippage.'\r\n      type: string\r\n      example: Bad weather\r\n      maxLength: 250\r\n    documentID:\r\n      type: string\r\n      description: |\r\n        The id of the object defined by the documentTypeCode.\r\n      example: the-id-of-the-documentTypeCode\r\n    documentTypeCode:\r\n      type: string\r\n      maxLength: 3\r\n      description: |\r\n        The code to identify the type of information documentID points to. Can be one of the following values\r\n        - CBR (Carrier Booking Request Reference)\r\n        - BKG (Booking)\r\n        - SHI (Shipping Instruction)\r\n        - SRM (Shipment Release Message)\r\n        - TRD (Transport Document)\r\n        - ARN (Arrival Notice)\r\n        - VGM (Verified Gross Mass)\r\n        - CAS (Cargo Survey)\r\n        - CUS (Customs Inspection)\r\n        - DGD (Dangerous Goods Declaration)\r\n        - OOG (Out of Gauge)\r\n        \r\n        More details can be found on <a href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/documenttypecodes.csv\">GitHub</a>\r\n      example: SHI\r\n      enum:\r\n        - CBR\r\n        - BKG\r\n        - SHI\r\n        - SRM\r\n        - TRD\r\n        - ARN\r\n        - VGM\r\n        - CAS\r\n        - CUS\r\n        - DGD\r\n        - OOG \r\n    documentTypeCodes:\r\n      type: array\r\n      description: |\r\n        List of documentTypeCode to filter by. If multiple values are selected - the OR-operator will be used.\r\n\r\n        Default is none as it will not filter on documentTypeCode if not specified.\r\n      example: [SHI,TRD]\r\n      items:\r\n        $ref: '#/components/schemas/documentTypeCode'\r\n    equipmentEventTypeCode:\r\n      type: string\r\n      description: |\r\n        Unique identifier for equipmentEventTypeCode.\r\n        - LOAD (Loaded)\r\n        - DISC (Discharged)\r\n        - GTIN (Gated in)\r\n        - GTOT (Gated out)\r\n        - STUF (Stuffed)\r\n        - STRP (Stripped)\r\n        - PICK (Pick-up)\r\n        - DROP (Drop-off)\r\n        - INSP (Inspected)\r\n        - RSEA (Resealed)\r\n        - RMVD (Removed)\r\n        \r\n        More details can be found on <a href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/equipmenteventtypecodes.csv\">GitHub</a>\r\n      enum: \r\n        - LOAD\r\n        - DISC\r\n        - GTIN\r\n        - GTOT\r\n        - STUF\r\n        - STRP\r\n        - PICK\r\n        - DROP\r\n        - INSP\r\n        - RSEA\r\n        - RMVD\r\n      example: LOAD\r\n    equipmentEventTypeCodes:\r\n      type: array\r\n      description: |\r\n        List of equipmentEventTypeCode to filter by. If multiple values are selected - the OR-operator will be used.\r\n\r\n        Default is none as it will not filter on equipmentEventTypeCode if not specified.\r\n      example: [GTIN,GTOT]\r\n      items:\r\n        $ref: '#/components/schemas/equipmentEventTypeCode'\r\n    eventClassifierCode:\r\n      type: string\r\n      description: |\r\n        Code for the event classifier. Values can vary depending on eventType\r\n      #   - PLN (Planned)\r\n      #   - ACT (Actual)\r\n      #   - REQ (Requested)\r\n      #   - EST (Estimated)\r\n      # enum:\r\n      #   - PLN\r\n      #   - ACT\r\n      #   - REQ\r\n      #   - EST\r\n      # example: ACT\r\n    eventID:\r\n      type: string\r\n      format: uuid\r\n      description: |\r\n        The unique identifier for the event (the message - not the source).\r\n        \r\n        <b>NB</b>&#58; This field should be considered Metadata\r\n      example: 3cecb101-7a1a-43a4-9d62-e88a131651e2\r\n    eventCreatedDateTime:\r\n      type: string\r\n      format: date-time\r\n      description: |\r\n        The timestamp of when the event was created.\r\n        \r\n        <b>NB</b>&#58; This field should be considered Metadata\r\n      example: '2021-01-09T14:12:56+01:00'\r\n    eventDateTime:\r\n      type: string\r\n      format: date-time\r\n      example: '2019-11-12T07:41:00+08:30'\r\n      description: The local date and time, where the event took place or when the event will take place, in ISO 8601 format.\r\n    eventType:\r\n      type: string\r\n      description: |\r\n        The Event Type of the object - to be used as a discriminator.\r\n\r\n        <b>NB</b>&#58; This field should be considered Metadata\r\n      # enum:\r\n      #   - EQUIPMENT\r\n      #   - SHIPMENT\r\n      #   - TRANSPORT\r\n      #   - OPERATIONS\r\n    eventTypeCode:\r\n      type: string\r\n      example: ARRI\r\n      maxLength: 4\r\n      description: |\r\n        Deprecated - Unique identifier for Event Type Code. This has been replaced by Specialized eventTypeCodes: shipmentEventTypeCode, transportEventTypeCode, equipmentEventTypeCode and opertaionsEventType\r\n      deprecated: true\r\n    operationsEventTypeCode:\r\n      type: string\r\n      description: |\r\n        The code to identify the type of event that is related to the operation\r\n        - STRT (Started)\r\n        - CMPL (Completed)\r\n        - ARRI (Arrived)\r\n        - DEPA (Departed)\r\n        \r\n        More details can be found on <a href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/operationseventtypecodes.csv\">GitHub</a>\r\n      enum:\r\n        - STRT\r\n        - CMPL\r\n        - ARRI\r\n        - DEPA\r\n      example: STRT\r\n    operationsEventTypeCodes:\r\n      type: array\r\n      description: |\r\n        List of operationsEventTypeCode to filter by. If multiple values are selected - the OR-operator will be used.\r\n\r\n        Default is none as it will not filter on operationsEventTypeCode if not specified.\r\n      example: [ARRI,CMPL]\r\n      items:\r\n        $ref: '#/components/schemas/operationsEventTypeCode'\r\n    portCallPhaseTypeCode:\r\n      type: string\r\n      description: |\r\n        The general direction of the vessel for which information applies\r\n        - INBD (Inbound)\r\n        - ALGS (Alongside)\r\n        - SHIF (Shifting)\r\n        - OUTB (Outbound)\r\n\r\n        More details can be found on <a href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/portcallphasetypecodes.csv\">GitHub</a>\r\n      enum:\r\n        - INBD\r\n        - ALGS\r\n        - SHIF\r\n        - OUTB\r\n      example: ALGS\r\n    portCallServiceTypeCode:\r\n      type: string\r\n      description: |\r\n        The type of the service provided in the port call\r\n        - PILO (Pilotage)\r\n        - MOOR (Mooring)\r\n        - CRGO (Cargo operations)\r\n        - TOWG (Towage)\r\n        - BUNK (Bunkering)\r\n        - WSDP (Waste disposal)\r\n        - LASH (Lashing)\r\n        - SAFE (Safety)\r\n        - FAST (All Fast)\r\n        - GWAY (Gangway down and secure)\r\n        \r\n        More details can be found on <a href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/portcallservicetypecodes.csv\">GitHub</a>\r\n      enum:\r\n        - PILO\r\n        - MOOR\r\n        - CRGO\r\n        - TOWG\r\n        - BUNK\r\n        - WSDP\r\n        - LASH\r\n        - SAFE\r\n        - FAST\r\n        - GWAY\r\n      example: BUNK\r\n    publisherRole:\r\n      type: string\r\n      description: |\r\n        The party function code of the publisher:\r\n        - CA (Carrier)\r\n        - AG (Carrier local agent)\r\n        - VSL (Experimental: Vessel)\r\n        - ATH (Experimental: Port Authorities)\r\n        - PLT (Experimental: Port Pilot)\r\n        - TR (Terminal)\r\n        - TWG (Experimental: Towage serice provider)\r\n        - LSH (Experimental: Lashing serice provider)\r\n        - BUK (Experimental: Bunker serice provider)\r\n        \r\n        More details can be found on <a href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/publisherrole.csv\">GitHub</a>\r\n      enum:\r\n        - CA\r\n        - AG\r\n        - VSL\r\n        - ATH\r\n        - PLT\r\n        - TR\r\n        - TWG\r\n        - LSH\r\n        - BUK\r\n      example: TR\r\n    reason:\r\n      type: string\r\n      description: 'Reason field in a Shipment event. This field can be used to explain why a specific event has been sent.'\r\n      example: 'The following attributes are missing...'\r\n    remark:\r\n      description: |\r\n        Free text to provide additional information on the context.\r\n      type: string\r\n      example: Port closed due to strike\r\n      maxLength: 500\r\n    secret:\r\n      type: string\r\n      format: byte\r\n      description: |\r\n        A Base64 encoded secret shared between the Publisher and the Subscriber.\r\n        It is used to compute the contents of the Notification-Signature header.\r\n      example: 'MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDM2NTc4NjIzODk3NDY5MDgyNzM0OTg3MTIzNzg2NA=='\r\n    shipmentEventTypeCode:\r\n      type: string\r\n      description: |\r\n        The status of the document in the process. Possible values are\r\n        - RECE (Received)\r\n        - DRFT (Drafted)\r\n        - PENA (Pending Approval)\r\n        - PENU (Pending Update)\r\n        - REJE (Rejected)\r\n        - APPR (Approved)\r\n        - ISSU (Issued)\r\n        - SURR (Surrendered)\r\n        - SUBM (Submitted)\r\n        - VOID (Void)\r\n        - CONF (Confirmed)\r\n        - REQS (Requested)\r\n        - CMPL (Completed)\r\n        - HOLD (On Hold)\r\n        - RELS (Released)\r\n        \r\n        More details can be found on <a href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv\">GitHub</a>\r\n      enum:\r\n        - RECE\r\n        - DRFT\r\n        - PENA\r\n        - PENU\r\n        - REJE\r\n        - APPR\r\n        - ISSU\r\n        - SURR\r\n        - SUBM\r\n        - VOID\r\n        - CONF\r\n        - REQS\r\n        - CMPL\r\n        - HOLD\r\n        - RELS\r\n      example: DRFT\r\n    shipmentEventTypeCodes:\r\n      type: array\r\n      description: |\r\n        List of shipmentEventTypeCode to filter by. If multiple values are selected - the OR-operator will be used.\r\n\r\n        Default is none as it will not filter on shipmentEventTypeCode if not specified.\r\n      example: [RECE,DRFT]\r\n      items:\r\n        $ref: '#/components/schemas/shipmentEventTypeCode'\r\n    shipmentInformationType:\r\n      type: string\r\n      maxLength: 3\r\n      deprecated: true\r\n      description: |\r\n        The code to identify the type of information documentID points to. Can be one of the following values\r\n        - BOK (Booking - deprecated use BKG instead)\r\n        - BKG (Booking)\r\n        - SHI (Shipping Instruction)\r\n        - VGM (Verified Gross Mass)\r\n        - SRM (Shipment Release Message)\r\n        - TRD (Transport Document)\r\n        - ARN (Arrival Notice)\r\n        \r\n        <b>Deprecated</b> - use documentTypeCode instead\r\n      example: SHI\r\n      enum:\r\n        - BOK\r\n        - BKG\r\n        - SHI\r\n        - VGM\r\n        - SRM\r\n        - TRD\r\n        - ARN\r\n    subscriptionID:\r\n      type: string\r\n      format: uuid\r\n      example: 8fbdc2d8-57c8-48b9-a04b-18fd8ec1d809\r\n      description: 'The carrier issues a unique ID to the shipper or consignee for that subscription'\r\n    transportDocumentTypeCodes:\r\n      type: array\r\n      description: |\r\n        List of transportDocumentType to filter by. If multiple values are selected - the OR-operator will be used.\r\n        \r\n        Default is none as it will not filter on transportDocumentType if not specified.\r\n      example: [BOL]\r\n      items:\r\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/transportDocumentType'\r\n    transportEventTypeCode:\r\n      type: string\r\n      description: |\r\n        Identifier for type of Transport event\r\n        - ARRI (Arrived)\r\n        - DEPA (Departed)\r\n        \r\n        More details can be found on <a href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/transporteventtypecodes.csv\">GitHub</a>\r\n      enum:\r\n        - ARRI\r\n        - DEPA\r\n        # - OMIT\r\n      example: ARRI\r\n    transportEventTypeCodes:\r\n      type: array\r\n      description: |\r\n        List of transportEventTypeCode to filter by. If multiple values are selected - the OR-operator will be used.\r\n\r\n        Default is none as it will not filter on transportEventTypeCode if not specified.\r\n      example: [ARRI,DEPA]\r\n      items:\r\n        $ref: '#/components/schemas/transportEventTypeCode'\r\n    vesselScheduleChangeRemark:\r\n      description: |\r\n        Free text information provided by the vessel operator regarding the reasons for the change in schedule and/or plans to mitigate schedule slippage.\r\n        \r\n        Deprecated - use changeRemark instead\r\n      type: string\r\n      example: Bad weather\r\n      maxLength: 250\r\n      deprecated: true",
			"canonicalURL": "/github.com/dcsaorg/DCSA-OpenAPI@18caeb803330d26b2c25aba119a677d79647af54/-/blob/domain/event/event_domain_v1.1.1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/dcsaorg/DCSA-OpenAPI/blob/18caeb803330d26b2c25aba119a677d79647af54/domain/event/event_domain_v1.1.1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: at 1:15: schemas: \"transportCall\": parse schema: allOf: [0]: at 1:36008: parse schema: property \"transportCallID\": at 1:36041: parse schema: resolve \"https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3#/components/schemas/transportCallID\": external \"https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3\": https: do: Get \"https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.3\": host \"api.swaggerhub.com\" is not allowed"
}