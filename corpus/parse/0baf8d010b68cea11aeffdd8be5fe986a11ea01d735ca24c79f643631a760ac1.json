{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dcsaorg/DCSA-OpenAPI"
		},
		"file": {
			"name": "tnt_v2.2.0.yaml",
			"size": 0,
			"path": "tnt/v2/test/tnt_v2.2.0.yaml",
			"byteSize": 77950,
			"content": "---\nopenapi: 3.0.3\ninfo:\n  title: DCSA OpenAPI specification for Track \u0026 Trace\n  description: |\n    Managing and sending Shipment-, Transport- and Equipment-events and subscriptions for Track \u0026amp; Trace (T\u0026amp;T). API specification issued by DCSA.org.\n\n    For explanation to specific values or objects please refer to the \u003ca href='https://dcsa.org/wp-content/uploads/2021/10/202108_DCSA_P1_Information-Model-v3.3_TNT22_Final.pdf'\u003eInformation Model v3.3\u003c/a\u003e\n\n    Polling can be done on the \u003cb\u003eGET /v2/events\u003c/b\u003e endPoint. It is also possible to setup a subscription on the \u003cb\u003e/v2/event-subscriptions\u003c/b\u003e endPoints in order to use the push model. Here events are pushed as they occur.\n\n    For a changelog please click \u003ca href=\"https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/tnt/v2#v220\"\u003ehere\u003c/a\u003e\n  contact:\n    name: Digital Container Shipping Association (DCSA)\n    url: https://dcsa.org\n    email: info@dcsa.org\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 2.2.0\nservers:\n- url: /\ntags:\n- name: Events\n  description: Event operations\n- name: Subscriptions\n  description: Subscription operations\n- name: Secret\n  description: Update secret\npaths:\n  /v2/events:\n    get:\n      tags:\n      - Events\n      summary: Find events.\n      description: |\n        Returns all events filtered by the queryParameters.\n\n        \u003cb\u003eNB\u003c/b\u003e\u0026#58; It is possible to combine queryParameters. When combining queryParameters be aware that it is also possible to make combinations that are mutual contradicting.\n\n        Example\u0026#58; \u003ci\u003eshipmentEventTypeCode=DRFT and equipmentEventTypeCode=GTIN\u003c/i\u003e\n\n        Since there is no event that can be a ShipmentEvent \u003cu\u003eand\u003c/u\u003e an EquipmentEvent at the same time \u003cb\u003ethis will return an empty list\u003cb\u003e!\n      parameters:\n      - name: eventType\n        in: query\n        description: |\n          The type of event(s) to filter by. Possible values are\n\n          - SHIPMENT (Shipment events)\n          - TRANSPORT (Transport events)\n          - EQUIPMENT (Equipment events)\n\n          It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example eventType=SHIPMENT,EQUIPMENT matches both Shipment- and Equipment-events.\n\n          Default value is all event types.\n        required: false\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n            enum:\n            - SHIPMENT\n            - TRANSPORT\n            - EQUIPMENT\n      - name: shipmentEventTypeCode\n        in: query\n        description: |\n          The status of the document in the process to filter by. Possible values are\n          - RECE (Received)\n          - DRFT (Drafted)\n          - PENA (Pending Approval)\n          - PENU (Pending Update)\n          - REJE (Rejected)\n          - APPR (Approved)\n          - ISSU (Issued)\n          - SURR (Surrendered)\n          - SUBM (Submitted)\n          - VOID (Void)\n          - CONF (Confirmed)\n          - REQS (Requested)\n          - CMPL (Completed)\n          - HOLD (On Hold)\n          - RELS (Released)\n\n          It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example \u003ci\u003eshipmentEventTypeCode=RECE,DRFT\u003c/i\u003e  Matches \u003cb\u003eboth\u003c/b\u003e Received (RECE) and Drafted (DRFT) shipment events.\n\n          Default is all shipmentEventTypeCodes.\n\n          This filter is only relevant when filtering on ShipmentEvents\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            $ref: '#/components/schemas/shipmentEventTypeCode'\n          default: RECE,DRFT,PENA,PENU,REJE,APPR,ISSU,SURR,SUBM,VOID,CONF,REQS,CMPL,HOLD,RELS\n        example: RECE,DRFT\n      - name: documentTypeCode\n        in: query\n        description: |\n          The documentTypeCode to filter by. Possible values are\n          - CBR (Carrier Booking Request Reference)\n          - BKG (Booking)\n          - SHI (Shipping Instruction)\n          - SRM (Shipment Release Message)\n          - TRD (Transport Document)\n          - ARN (Arrival Notice)\n          - VGM (Verified Gross Mass)\n          - CAS (Cargo Survey)\n          - CUS (Customs Inspection)\n          - DGD (Dangerous Goods Declaration)\n          - OOG (Out of Gauge)\n\n          It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example \u003ci\u003edocumentTypeCode=SHI,TRD\u003c/i\u003e Matches \u003cb\u003eboth\u003c/b\u003e ShippingInstruction (SHI) and TransportDocument (TRD) shipment events.\n\n          Default is all documentTypeCodes.\n\n          This filter is only relevant when filtering on ShipmentEvents\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            $ref: '#/components/schemas/documentTypeCode'\n          default: CBR,BKG,SHI,SRM,TRD,ARN,VGM,CAS,CUS,DGD,OOG\n        example: SHI,TRD\n      - name: carrierBookingReference\n        in: query\n        description: |\n          A set of unique characters provided by carrier to identify a booking.\n\n          Specifying this filter will only return events related to this particular carrierBookingReference.\n        schema:\n          $ref: '#/components/schemas/carrierBookingReference'\n      - name: bookingReference\n        in: query\n        description: Deprecated - use carrierBookingReference instead.\n        required: false\n        deprecated: true\n        schema:\n          type: string\n      - name: transportDocumentID\n        in: query\n        description: |\n          A unique id to identify a transport document.\n\n          Deprecated - use transportDocumentReference instead transportDocumentReference\n        deprecated: true\n        schema:\n          type: string\n          format: uuid\n      - name: transportDocumentReference\n        in: query\n        description: |\n          A unique number reference allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n\n          Specifying this filter will only return events related to this particular transportDocumentReference\n        required: false\n        schema:\n          $ref: '#/components/schemas/transportDocumentReference'\n      - name: transportEventTypeCode\n        in: query\n        description: |\n          Identifier for type of Transport event to filter by\n          - ARRI (Arrived)\n          - DEPA (Departed)\n\n          It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example \u003ci\u003etransportEventTypeCode=ARRI,DEPA\u003c/i\u003e matches \u003cb\u003eboth\u003c/b\u003e Arrived (ARRI) and Departed (DEPA) transport events.\n\n          Default is all transportEventTypeCodes.\n\n          This filter is only relevant when filtering on TransportEvents\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            $ref: '#/components/schemas/transportEventTypeCode'\n          default: ARRI,DEPA\n        example: ARRI,DEPA\n      - name: scheduleID\n        in: query\n        description: |\n          ID uniquely identifying a schedule, to filter events by.\n\n          This filter was added by mistake and is thus deprecated.\n        required: false\n        deprecated: true\n        schema:\n          $ref: '#/components/schemas/scheduleID'\n      - name: transportCallID\n        in: query\n        description: |\n          ID uniquely identifying a transport call, to filter events by.\n\n          Specifying this filter will only return events related to this particular transportCallID\n        required: false\n        schema:\n          $ref: '#/components/schemas/transportCallID'\n      - name: vesselIMONumber\n        in: query\n        description: |\n          The identifier of vessel for which schedule details are published. Depending on schedule type, this may not be available yet.\n\n          Specifying this filter will only return events related to this particular vesselIMONumber.\n        required: false\n        schema:\n          $ref: '#/components/schemas/vesselIMONumber'\n      - name: carrierVoyageNumber\n        in: query\n        description: |\n          Filter on the vessel operator-specific identifier of the Voyage.\n\n          Specifying this filter will only return events related to this particular carrierVoyageNumber.\n\n          \u003cb\u003eDeprecated:\u003c/b\u003e Use exportVoyageNumber instead\n        required: false\n        deprecated: true\n        schema:\n          $ref: '#/components/schemas/carrierVoyageNumber'\n      - name: exportVoyageNumber\n        in: query\n        description: |\n          Filter on the vessel operator-specific identifier of the export Voyage.\n\n          Specifying this filter will only return events related to this particular exportVoyageNumber.\n        required: false\n        schema:\n          $ref: '#/components/schemas/exportVoyageNumber'\n      - name: carrierServiceCode\n        in: query\n        description: |\n          Filter on the carrier specific identifier of the service.\n\n          Specifying this filter will only return events related to this particular carrierServiceCode.\n        required: false\n        schema:\n          $ref: '#/components/schemas/carrierServiceCode'\n      - name: UNLocationCode\n        in: query\n        description: |\n          The UN Location code specifying where the place is located.\n\n          Specifying this filter will only return events related to this particular UN Location code.\n        required: false\n        schema:\n          $ref: '#/components/schemas/UNLocationCode'\n      - name: equipmentEventTypeCode\n        in: query\n        description: |\n          Unique identifier for equipmentEventTypeCode.\n          - LOAD (Loaded)\n          - DISC (Discharged)\n          - GTIN (Gated in)\n          - GTOT (Gated out)\n          - STUF (Stuffed)\n          - STRP (Stripped)\n          - PICK (Pick-up)\n          - DROP (Drop-off)\n          - INSP (Inspected)\n          - RSEA (Resealed)\n          - RMVD (Removed)\n\n          It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example \u003ci\u003eequipmentEventTypeCode=GTIN,GTOT\u003c/i\u003e matches \u003cb\u003eboth\u003c/b\u003e Gated in (GTIN) and Gated out (GTOT) equipment events.\n\n          Default is all equipmentEventTypeCodes.\n\n          This filter is only relevant when filtering on EquipmentEvents\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            $ref: '#/components/schemas/equipmentEventTypeCode'\n          default: LOAD,DISC,GTIN,GTOT,STUF,STRP,PICK,DROP,INSP,RSEA,RMVD\n        example: GTIN,GTOT\n      - name: equipmentReference\n        in: query\n        description: |\n          Will filter by the unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\n\n          Specifying this filter will only return events related to this particular equipmentReference\n        required: false\n        schema:\n          $ref: '#/components/schemas/equipmentReference'\n      - name: eventCreatedDateTime\n        in: query\n        description: |\n          Limit the result based on the creating date of the event. It is possible to use operators on this query parameter. This is done by adding a colon followed by an operator at the end of the queryParameterName (before the =)\n\n          \u003ci\u003eeventCreatedDateTime\u003cb\u003e\u0026#58;gte\u003c/b\u003e=2021-04-01T14\u0026#58;12\u0026#58;56+01\u0026#58;00\u003c/i\u003e\n\n          would result in all events created \u0026#8805; 2021-04-01T14\u0026#58;12\u0026#58;56+01\u0026#58;00\n\n          The following operators are supported\n          - \u0026#58;gte (\u0026#8805; Greater than or equal)\n          - \u0026#58;gt (\u0026#62; Greater than)\n          - \u0026#58;lte (\u0026#8804; Less than or equal)\n          - \u0026#58;lt (\u0026#60; Less than)\n          - \u0026#58;eq (\u0026#61; Equal to)\n\n          If no operator is provided, a \u003cb\u003estrictly equal\u003c/b\u003e is used (this is equivalent to \u003cb\u003e\u0026#58;eq\u003c/b\u003e operator).\n        required: false\n        schema:\n          $ref: '#/components/schemas/eventCreatedDateTime'\n        example: 2021-04-01T14:12:56+01:00\n      - name: limit\n        in: query\n        description: Maximum number of items to return.\n        required: false\n        schema:\n          minimum: 1\n          type: integer\n          format: int32\n          default: 100\n        example: 100\n      - name: cursor\n        in: query\n        description: A server generated value to specify a specific point in a collection result, used for pagination.\n        required: false\n        schema:\n          type: string\n        example: fE9mZnNldHw9MTAmbGltaXQ9MTA=\n      - name: sort\n        in: query\n        description: |\n          A comma-separated list of field names to define the sort order. Field names should be suffixed by a (:) followed by either the keyword ASC (for ascending order) or DESC (for descening order) to specify direction. \u003cb\u003e:ASC\u003c/b\u003e may be omitted, in which case ascending order will be used.\n        required: false\n        schema:\n          type: string\n        example: carrierBookingReference:DESC\n      - name: API-Version\n        in: header\n        description: |\n          An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.\n        required: false\n        schema:\n          type: string\n          example: \"1\"\n      responses:\n        \"200\":\n          description: Successful operation\n          headers:\n            API-Version:\n              $ref: '#/components/headers/API-Version'\n            Current-Page:\n              $ref: '#/components/headers/Current-Page'\n            Next-Page:\n              $ref: '#/components/headers/Next-Page'\n            Prev-Page:\n              $ref: '#/components/headers/Prev-Page'\n            Last-Page:\n              $ref: '#/components/headers/Last-Page'\n            First-Page:\n              $ref: '#/components/headers/First-Page'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  anyOf:\n                  - $ref: '#/components/schemas/transportEvent'\n                  - $ref: '#/components/schemas/shipmentEvent'\n                  - $ref: '#/components/schemas/equipmentEvent'\n        default:\n          description: Unexpected error\n          headers:\n            API-Version:\n              $ref: '#/components/headers/API-Version'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_default'\n  /v2/events/{eventID}:\n    get:\n      tags:\n      - Events\n      summary: Find events by eventID.\n      description: Returns event with the specified eventID.\n      parameters:\n      - name: eventID\n        in: path\n        description: The ID of the event to receive\n        required: true\n        deprecated: true\n        schema:\n          $ref: '#/components/schemas/eventID'\n        example: 123e4567-e89b-12d3-a456-426614174000\n      responses:\n        \"200\":\n          description: Successful operation\n          headers:\n            API-Version:\n              $ref: '#/components/headers/API-Version'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200'\n        default:\n          description: Unexpected error\n          headers:\n            API-Version:\n              $ref: '#/components/headers/API-Version'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_default_1'\n      deprecated: true\n  /v2/event-subscriptions:\n    get:\n      tags:\n      - Subscriptions\n      summary: Receive a list of your active subscriptions\n      parameters:\n      - name: limit\n        in: query\n        description: Maximum number of items to return.\n        required: false\n        schema:\n          minimum: 1\n          type: integer\n          format: int32\n          default: 100\n        example: 100\n      - name: cursor\n        in: query\n        description: A server generated value to specify a specific point in a collection result, used for pagination.\n        required: false\n        schema:\n          type: string\n        example: fE9mZnNldHw9MTAmbGltaXQ9MTA=\n      - name: sort\n        in: query\n        description: |\n          A comma-separated list of field names to define the sort order. Field names should be suffixed by a (:) followed by either the keyword ASC (for ascending order) or DESC (for descening order) to specify direction. \u003cb\u003e:ASC\u003c/b\u003e may be omitted, in which case ascending order will be used.\n        required: false\n        schema:\n          type: string\n        example: carrierBookingReference:DESC\n      - name: API-Version\n        in: header\n        description: |\n          An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.\n        required: false\n        schema:\n          type: string\n          example: \"1\"\n      responses:\n        \"200\":\n          description: Returns a list of subscriptions\n          headers:\n            API-Version:\n              $ref: '#/components/headers/API-Version'\n            Current-Page:\n              $ref: '#/components/headers/Current-Page'\n            Next-Page:\n              $ref: '#/components/headers/Next-Page'\n            Prev-Page:\n              $ref: '#/components/headers/Prev-Page'\n            Last-Page:\n              $ref: '#/components/headers/Last-Page'\n            First-Page:\n              $ref: '#/components/headers/First-Page'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/subscription'\n        default:\n          description: Unexpected error\n          headers:\n            API-Version:\n              $ref: '#/components/headers/API-Version'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_default_2'\n    post:\n      tags:\n      - Subscriptions\n      summary: Create a subscription\n      parameters:\n      - name: API-Version\n        in: header\n        description: |\n          An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.\n        required: false\n        schema:\n          type: string\n          example: \"1\"\n      requestBody:\n        description: |\n          Parameters used to configure the subscription. It is possible to only receive cirtain types of events by adding filter values to the subscription.\n\n          All values in the subscription body except\u0026#58; \u003ci\u003ecallback, secret and subscriptionID\u003c/i\u003e will be used as filters. All filters specified must be filfilled in order to match an Event. A logical \u003cb\u003eAND\u003c/b\u003e is used between filters. So\n\n          \u003ci\u003eshipmentEventTypeCode=DRFT\u003cb\u003e\u0026\u003c/b\u003ecarrierBookingReference=ABC123123\u003c/i\u003e\n\n          means that the events matched must both be Draft (shipmentEventTypeCode=DRFT) \u003cb\u003eand\u003c/b\u003e be connected to carrierBookingReference ABC123123 (carrierBookingReference=ABC123123)\n\n          Filters that are specified as (comma separated) lists use logical \u003cb\u003eOR\u003c/b\u003e between list values. So\n\n          \u003ci\u003eeventType=SHIPMENT,TRANSPORT\u003c/i\u003e\n\n          means that \u003cb\u003eboth\u003c/b\u003e Shipment- \u003cb\u003eand\u003c/b\u003e Transport-events will be matched by this subscription.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/subscriptionBodyWithSecret'\n        required: true\n      responses:\n        \"201\":\n          description: Subscription created\n          headers:\n            API-Version:\n              $ref: '#/components/headers/API-Version'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/subscription'\n        default:\n          description: Unexpected error\n          headers:\n            API-Version:\n              $ref: '#/components/headers/API-Version'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_default_3'\n      callbacks:\n        event:\n          '{$request.body.callbackUrl}':\n            post:\n              parameters:\n              - name: Signature\n                in: header\n                description: |\n                  The signature certifying the request originates from the carrier.\n                required: true\n                deprecated: true\n                schema:\n                  type: object\n                  properties:\n                    keyId:\n                      type: string\n                      format: uuid\n                      example: 4fb682bc-3cd1-43a9-a23a-618a61bd87ca\n                    created:\n                      type: integer\n                      example: 1591960384\n                    headers:\n                      type: string\n                      example: (request-target) (created) date host\n                    signature:\n                      type: string\n                      example: aGkgZnJvbSBkZW5tYXJr\n              - name: Subscription-ID\n                in: header\n                description: The ID of the subscription triggering the event being sent.\n                required: true\n                schema:\n                  type: string\n                  format: uuid\n                  example: b80d923d-e8ac-4c34-9506-55d3de347034\n              - name: Notification-Signature\n                in: header\n                description: \"the Notification-Signature is used to sign the notification. The header has the following format: \\n\\n\u003ci\u003eNotification-Signature\u0026#58; \u0026lt;signature-type\u0026gt;=\u0026lt;signature\u0026gt;\u003c/i\u003e\\n\\nThe \u003ci\u003e\u0026lt;signature-type\u0026gt;\u003c/i\u003e part is a keyword that determines which algorithm was used to compute the signature.\\n\\nThe signature \u003cb\u003eMUST\u003c/b\u003e cover the entire request body of the request including whitespace and newlines. The content \u003cb\u003eMUST\u003c/b\u003e decoded into bytes using the UTF-8 encoding before computing the signature. None of the HTTP headers nor the request URL is covered by the signature.\\n\\nSupported signature typies are\u0026#58;\\n- sha256\\n\\nExample\u0026#58; sha256=ae688919f5e31f4c210ca6af362ce4d9ed87acfb51c1721a8507ee395de5e2de\\n\"\n                required: true\n                schema:\n                  pattern: \\s*([a-zA-Z0-9-_+]+=[0-9a-fA-F]+)\\s*\n                  type: string\n                  example: sha256=ae688919f5e31f4c210ca6af362ce4d9ed87acfb51c1721a8507ee395de5e2de\n              - name: API-Version\n                in: header\n                description: |\n                  SemVer used to indicate the version of the contract (API version) returned.\n                required: true\n                schema:\n                  type: string\n                  example: 1.0.0\n              requestBody:\n                content:\n                  application/json:\n                    schema:\n                      type: array\n                      items:\n                        anyOf:\n                        - $ref: '#/components/schemas/transportEvent'\n                        - $ref: '#/components/schemas/shipmentEvent'\n                        - $ref: '#/components/schemas/equipmentEvent'\n                required: true\n              responses:\n                \"204\":\n                  description: Your server returns this code if it accepts the callback\n  /v2/event-subscriptions/{subscriptionID}:\n    get:\n      tags:\n      - Subscriptions\n      summary: Find a subscription by subscription ID\n      parameters:\n      - name: subscriptionID\n        in: path\n        description: The universal unique ID of the subscription.\n        required: true\n        schema:\n          $ref: '#/components/schemas/subscriptionID'\n        example: 123e4567-e89b-12d3-a456-426614174000\n      - name: API-Version\n        in: header\n        description: |\n          An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.\n        required: false\n        schema:\n          type: string\n          example: \"1\"\n      responses:\n        \"200\":\n          description: Subscription returned\n          headers:\n            API-Version:\n              $ref: '#/components/headers/API-Version'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/subscription'\n        default:\n          description: Unexpected error\n          headers:\n            API-Version:\n              $ref: '#/components/headers/API-Version'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_default_4'\n    put:\n      tags:\n      - Subscriptions\n      summary: Alter a subscription\n      parameters:\n      - name: subscriptionID\n        in: path\n        description: The universal unique ID of the subscription.\n        required: true\n        schema:\n          $ref: '#/components/schemas/subscriptionID'\n        example: 123e4567-e89b-12d3-a456-426614174000\n      - name: API-Version\n        in: header\n        description: |\n          An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.\n        required: false\n        schema:\n          type: string\n          example: \"1\"\n      requestBody:\n        description: Parameters used to configure the subscription\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/subscription'\n        required: true\n      responses:\n        \"200\":\n          description: Subscription updated\n          headers:\n            API-Version:\n              $ref: '#/components/headers/API-Version'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/subscription'\n        default:\n          description: Unexpected error\n          headers:\n            API-Version:\n              $ref: '#/components/headers/API-Version'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_default_5'\n    delete:\n      tags:\n      - Subscriptions\n      summary: Stop a subscription, using the subscription ID\n      parameters:\n      - name: subscriptionID\n        in: path\n        description: The universal unique ID of the subscription.\n        required: true\n        schema:\n          $ref: '#/components/schemas/subscriptionID'\n        example: 123e4567-e89b-12d3-a456-426614174000\n      - name: API-Version\n        in: header\n        description: |\n          An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.\n        required: false\n        schema:\n          type: string\n          example: \"1\"\n      responses:\n        \"204\":\n          description: Subscription stopped\n          headers:\n            API-Version:\n              $ref: '#/components/headers/API-Version'\n        default:\n          description: Unexpected error\n          headers:\n            API-Version:\n              $ref: '#/components/headers/API-Version'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_default_6'\n  /v2/event-subscriptions/{subscriptionID}/secret:\n    put:\n      tags:\n      - Secret\n      summary: Resets the Secret on an existing subscription.\n      parameters:\n      - name: subscriptionID\n        in: path\n        description: The universal unique ID of the subscription.\n        required: true\n        schema:\n          $ref: '#/components/schemas/subscriptionID'\n        example: 123e4567-e89b-12d3-a456-426614174000\n      - name: API-Version\n        in: header\n        description: |\n          An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.\n        required: false\n        schema:\n          type: string\n          example: \"1\"\n      requestBody:\n        description: Parameters used to configure the subscription\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/subscriptionID_secret_body'\n        required: true\n      responses:\n        \"204\":\n          description: Secret updated\n          headers:\n            API-Version:\n              $ref: '#/components/headers/API-Version'\n        default:\n          description: Unexpected error\n          headers:\n            API-Version:\n              $ref: '#/components/headers/API-Version'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_default_7'\ncomponents:\n  schemas:\n    eventTypes:\n      type: array\n      description: |\n        List of eventType to filter by. If multiple values are selected - the OR-operator will be used.\n\n        Possible values are\n        - SHIPMENT (Shipment events)\n        - TRANSPORT (Transport events)\n        - EQUIPMENT (Equipment events)\n\n        Default is none as it will not filter on eventType if not specified.\n      example:\n      - TRANSPORT\n      - EQUIPMENT\n      items:\n        type: string\n        enum:\n        - SHIPMENT\n        - TRANSPORT\n        - EQUIPMENT\n    subscriptionBody:\n      required:\n      - callbackUrl\n      type: object\n      allOf:\n      - type: object\n        properties:\n          callbackUrl:\n            $ref: '#/components/schemas/callbackUrl'\n      - type: object\n        properties:\n          eventType:\n            $ref: '#/components/schemas/eventTypes'\n      - $ref: '#/components/schemas/shipmentSubscriptionBody'\n      - $ref: '#/components/schemas/transportSubscriptionBody'\n      - $ref: '#/components/schemas/equipmentSubscriptionBody'\n    subscriptionBodyWithSecret:\n      required:\n      - secret\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/subscriptionBody'\n      - type: object\n        properties:\n          secret:\n            allOf:\n            - $ref: '#/components/schemas/secret'\n            - description: A shared secret shared between the Publisher and the Subscriber. It is used to compute the contents of the Notification-Signature header. \u003cb\u003eOnly\u003c/b\u003e valid in POST calls - anywhere else must be omitted!\n    subscription:\n      type: object\n      allOf:\n      - type: object\n        properties:\n          subscriptionID:\n            $ref: '#/components/schemas/subscriptionID'\n      - $ref: '#/components/schemas/subscriptionBody'\n    carrierBookingReference:\n      maxLength: 35\n      type: string\n      description: A set of unique characters provided by carrier to identify a booking.\n      example: ABC709951\n    transportDocumentReference:\n      maxLength: 20\n      type: string\n      description: |\n        A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n    scheduleID:\n      type: string\n      description: ID uniquely identifying a schedule\n      format: uuid\n      example: 9679a405-3316-42a5-8533-aba000f5689c\n    transportCallID:\n      maxLength: 100\n      type: string\n      description: The unique identifier for a transport call\n      example: 123e4567-e89b-12d3-a456-426614174000\n    vesselIMONumber:\n      maxLength: 7\n      type: string\n      description: |\n        The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd\u0026apos;s register code, which does not change during the lifetime of the vessel\n      example: \"9321483\"\n    carrierVoyageNumber:\n      maxLength: 50\n      type: string\n      description: The vessel operator-specific identifier of the Voyage.\n      example: 2103S\n    exportVoyageNumber:\n      maxLength: 50\n      type: string\n      description: The vessel operator-specific identifier of the export Voyage.\n      example: 2103S\n    carrierServiceCode:\n      maxLength: 5\n      type: string\n      description: |\n        The code of the service for which the schedule details are published.\n      example: FE1\n    UNLocationCode:\n      maxLength: 5\n      type: string\n      description: The UN Location code specifying where the place is located.\n      example: FRPAR\n    equipmentReference:\n      maxLength: 15\n      type: string\n      description: |\n        The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\n        According to ISO 6346, a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit). If a container does not comply with ISO 6346, it is suggested to follow Recommendation #2 “Container with non-ISO identification” from SMDG.\n      example: APZU4812090\n    eventCreatedDateTime:\n      type: string\n      description: |\n        The timestamp of when the event was created.\n\n        \u003cb\u003eNB\u003c/b\u003e\u0026#58; This field should be considered Metadata\n      format: date-time\n      example: 2021-01-09T14:12:56+01:00\n    transportEvent:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/operationsTransportEvent'\n      - type: object\n        properties:\n          documentReferences:\n            $ref: '#/components/schemas/documentReferences'\n      - $ref: '#/components/schemas/references'\n    operationsTransportEvent:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/baseEvent'\n      - $ref: '#/components/schemas/baseTransportEvent'\n    baseEvent:\n      required:\n      - eventCreatedDateTime\n      type: object\n      allOf:\n      - type: object\n        properties:\n          eventID:\n            $ref: '#/components/schemas/eventID'\n      - type: object\n        properties:\n          eventCreatedDateTime:\n            $ref: '#/components/schemas/eventCreatedDateTime'\n      - $ref: '#/components/schemas/baseEventBody'\n    eventID:\n      type: string\n      description: |\n        The unique identifier for the event (the message - not the source).\n\n        \u003cb\u003eNB\u003c/b\u003e\u0026#58; This field should be considered Metadata\n      format: uuid\n      example: 3cecb101-7a1a-43a4-9d62-e88a131651e2\n    baseEventBody:\n      required:\n      - eventClassifierCode\n      - eventDateTime\n      - eventType\n      type: object\n      description: |\n        The Event entity is described as a generalization of all the specific event categories. An event always takes place in relation to a shipment and can additionally be linked to a transport or an equipment\n      allOf:\n      - type: object\n        properties:\n          eventType:\n            $ref: '#/components/schemas/eventType'\n      - type: object\n        properties:\n          eventClassifierCode:\n            $ref: '#/components/schemas/eventClassifierCode'\n      - type: object\n        properties:\n          eventDateTime:\n            $ref: '#/components/schemas/eventDateTime'\n    eventType:\n      type: string\n      description: |\n        The Event Type of the object - to be used as a discriminator.\n\n        \u003cb\u003eNB\u003c/b\u003e\u0026#58; This field should be considered Metadata\n    eventClassifierCode:\n      type: string\n      description: |\n        Code for the event classifier. Values can vary depending on eventType\n    eventDateTime:\n      type: string\n      description: The local date and time, where the event took place or when the event will take place, in ISO 8601 format.\n      format: date-time\n      example: 2019-11-12T07:41:00+08:30\n    baseTransportEvent:\n      required:\n      - transportCall\n      - transportEventTypeCode\n      type: object\n      description: |\n        The transport event entity is a specialization of the event entity to support specification of data that only applies to a transport event.\n      allOf:\n      - type: object\n        properties:\n          eventType:\n            type: string\n            example: TRANSPORT\n            enum:\n            - TRANSPORT\n      - type: object\n        properties:\n          eventClassifierCode:\n            type: string\n            description: |\n              Code for the event classifier can be\n              - ACT (Actual)\n              - PLN (Planned)\n              - EST (Estimated)\n            example: ACT\n            enum:\n            - ACT\n            - PLN\n            - EST\n      - type: object\n        properties:\n          transportEventTypeCode:\n            $ref: '#/components/schemas/transportEventTypeCode'\n      - type: object\n        properties:\n          delayReasonCode:\n            $ref: '#/components/schemas/delayReasonCode'\n      - type: object\n        properties:\n          vesselScheduleChangeRemark:\n            $ref: '#/components/schemas/vesselScheduleChangeRemark'\n      - type: object\n        properties:\n          changeRemark:\n            $ref: '#/components/schemas/changeRemark'\n      - type: object\n        properties:\n          transportCallID:\n            allOf:\n            - $ref: '#/components/schemas/transportCallID'\n            - deprecated: true\n            - description: The unique identifier for a transport call\u003cbr\u003e\u003cbr\u003eDeprecated - not needed as the TransportCall object is included\n      - type: object\n        properties:\n          transportCall:\n            $ref: '#/components/schemas/transportCall'\n      - type: object\n        properties:\n          eventTypeCode:\n            $ref: '#/components/schemas/eventTypeCode'\n      - type: object\n        properties:\n          eventTypeCode:\n            type: string\n            description: |\n              Unique identifier for Event Type Code, for transport events this is either\n              - ARRI (Arrival)\n              - DEPA (Departure)\n\n              Deprecated - use transportEventTypeCode instead\n            deprecated: true\n            enum:\n            - ARRI\n            - DEPA\n    transportEventTypeCode:\n      type: string\n      description: |\n        Identifier for type of Transport event\n        - ARRI (Arrived)\n        - DEPA (Departed)\n\n        More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/transporteventtypecodes.csv\"\u003eGitHub\u003c/a\u003e\n      example: ARRI\n      enum:\n      - ARRI\n      - DEPA\n    delayReasonCode:\n      maxLength: 3\n      type: string\n      description: Reason code for the delay. The SMDG-Delay-Reason-Codes are used for this attribute. The code list can be found at http://www.smdg.org/smdg-code-lists/\n      example: WEA\n    vesselScheduleChangeRemark:\n      maxLength: 250\n      type: string\n      description: |\n        Free text information provided by the vessel operator regarding the reasons for the change in schedule and/or plans to mitigate schedule slippage.\n\n        Deprecated - use changeRemark instead\n      example: Bad weather\n      deprecated: true\n    changeRemark:\n      maxLength: 250\n      type: string\n      description: Free text information provided by the vessel operator regarding the reasons for the change in schedule and/or plans to mitigate schedule slippage.\n      example: Bad weather\n    transportCall:\n      required:\n      - modeOfTransport\n      - transportCallID\n      type: object\n      allOf:\n      - type: object\n        properties:\n          transportCallID:\n            $ref: '#/components/schemas/transportCallID'\n      - type: object\n        properties:\n          carrierServiceCode:\n            $ref: '#/components/schemas/carrierServiceCode'\n      - type: object\n        properties:\n          carrierVoyageNumber:\n            $ref: '#/components/schemas/carrierVoyageNumber'\n      - type: object\n        properties:\n          carrierVoyageNumber:\n            description: |\n              The vessel operator-specific identifier of the Voyage.\n\n              In case there are multiple voyages the export voyage is chosen.\n            deprecated: true\n      - type: object\n        properties:\n          exportVoyageNumber:\n            $ref: '#/components/schemas/exportVoyageNumber'\n      - type: object\n        properties:\n          importVoyageNumber:\n            $ref: '#/components/schemas/importVoyageNumber'\n      - type: object\n        properties:\n          transportCallSequenceNumber:\n            $ref: '#/components/schemas/transportCallSequenceNumber'\n      - type: object\n        properties:\n          UNLocationCode:\n            $ref: '#/components/schemas/UNLocationCode'\n      - type: object\n        properties:\n          facilityCode:\n            $ref: '#/components/schemas/facilityCode'\n      - type: object\n        properties:\n          facilityCodeListProvider:\n            $ref: '#/components/schemas/facilityCodeListProvider'\n      - type: object\n        properties:\n          facilityTypeCode:\n            $ref: '#/components/schemas/facilityTypeCodeTRN'\n      - type: object\n        properties:\n          otherFacility:\n            $ref: '#/components/schemas/otherFacility'\n      - type: object\n        properties:\n          modeOfTransport:\n            $ref: '#/components/schemas/modeOfTransport'\n      - type: object\n        properties:\n          location:\n            allOf:\n            - $ref: '#/components/schemas/location'\n            - type: object\n              description: Location of the facility. Can often be omitted when it is just repeating the contents of the UNLocationCode field.\n              example: null\n      - type: object\n        properties:\n          vessel:\n            $ref: '#/components/schemas/vessel'\n    importVoyageNumber:\n      maxLength: 50\n      type: string\n      description: The vessel operator-specific identifier of the import Voyage.\n      example: 2103N\n    transportCallSequenceNumber:\n      type: integer\n      description: Transport operator\u0026apos;s key that uniquely identifies each individual call. This key is essential to distinguish between two separate calls at the same location within one voyage.\n      example: 2\n    facilityCode:\n      maxLength: 6\n      type: string\n      description: |\n        The code used for identifying the specific facility. This code does \u003cb\u003enot\u003c/b\u003e include the UN Location Code.\n      nullable: false\n      example: ADT\n    facilityCodeListProvider:\n      type: string\n      description: |\n        The provider used for identifying the facility Code\n      example: SMDG\n      enum:\n      - BIC\n      - SMDG\n    facilityTypeCodeTRN:\n      type: string\n      description: |\n        A specialized version of the facilityCode to be used in TransportCalls. The code to identify the specific type of facility.\n        - BOCR (Border crossing)\n        - CLOC (Customer location)\n        - COFS (Container freight station)\n        - COYA (Deprecated - use OFFD intead)\n        - OFFD (Off dock storage)\n        - DEPO (Depot)\n        - INTE (Inland terminal)\n        - POTE (Port terminal)\n        - RAMP (Ramp)\n      example: POTE\n      enum:\n      - BOCR\n      - CLOC\n      - COFS\n      - COYA\n      - OFFD\n      - DEPO\n      - INTE\n      - POTE\n      - RAMP\n    otherFacility:\n      maxLength: 50\n      type: string\n      description: An alternative way to capture the facility when no standardized DCSA facility code can be found.\n      example: Depot location or address\n    modeOfTransport:\n      type: string\n      description: |\n        The mode of transport as defined by DCSA.\n      enum:\n      - VESSEL\n      - RAIL\n      - TRUCK\n      - BARGE\n    location:\n      type: object\n      description: |\n        generally used to capture location-related data, also for locations without UN Location Codes.\n      allOf:\n      - type: object\n        properties:\n          locationName:\n            $ref: '#/components/schemas/locationName'\n      - type: object\n        properties:\n          latitude:\n            $ref: '#/components/schemas/latitude'\n      - type: object\n        properties:\n          longitude:\n            $ref: '#/components/schemas/longitude'\n      - type: object\n        properties:\n          UNLocationCode:\n            $ref: '#/components/schemas/UNLocationCode'\n      - type: object\n        properties:\n          facilityCode:\n            $ref: '#/components/schemas/facilityCode'\n      - type: object\n        properties:\n          facilityCodeListProvider:\n            $ref: '#/components/schemas/facilityCodeListProvider'\n      - type: object\n        properties:\n          address:\n            description: Address related information\n            allOf:\n            - $ref: '#/components/schemas/address'\n    locationName:\n      maxLength: 100\n      type: string\n      description: The name of the location.\n      example: Eiffel Tower\n    latitude:\n      maxLength: 10\n      type: string\n      description: Geographic coordinate that specifies the north–south position of a point on the Earth\u0026apos;s surface.\n      example: \"48.8585500\"\n    longitude:\n      maxLength: 11\n      type: string\n      description: Geographic coordinate that specifies the east–west position of a point on the Earth\u0026apos;s surface.\n      example: \"2.294492036\"\n    address:\n      type: object\n      description: An object for storing address related information\n      allOf:\n      - type: object\n        properties:\n          name:\n            $ref: '#/components/schemas/addressName'\n      - type: object\n        properties:\n          street:\n            $ref: '#/components/schemas/streetName'\n      - type: object\n        properties:\n          streetNumber:\n            $ref: '#/components/schemas/streetNumber'\n      - type: object\n        properties:\n          floor:\n            $ref: '#/components/schemas/floor'\n      - type: object\n        properties:\n          postCode:\n            $ref: '#/components/schemas/postCode'\n      - type: object\n        properties:\n          city:\n            $ref: '#/components/schemas/cityName'\n      - type: object\n        properties:\n          stateRegion:\n            $ref: '#/components/schemas/stateRegion'\n      - type: object\n        properties:\n          country:\n            $ref: '#/components/schemas/country'\n    addressName:\n      maxLength: 100\n      type: string\n      description: Name of the address\n      example: Henrik\n    streetName:\n      maxLength: 100\n      type: string\n      description: The name of the street of the party’s address.\n      example: Kronprincessegade\n    streetNumber:\n      maxLength: 50\n      type: string\n      description: The number of the street of the party’s address.\n      example: \"54\"\n    floor:\n      maxLength: 50\n      type: string\n      description: The floor of the party’s street number.\n      example: 5. sal\n    postCode:\n      maxLength: 10\n      type: string\n      description: The post code of the party’s address.\n      example: \"1306\"\n    cityName:\n      maxLength: 65\n      type: string\n      description: The city name of the party’s address.\n      example: København\n    stateRegion:\n      maxLength: 65\n      type: string\n      description: The state/region of the party’s address.\n      example: N/A\n    country:\n      maxLength: 75\n      type: string\n      description: The country of the party’s address.\n      example: Denmark\n    vessel:\n      required:\n      - vesselIMONumber\n      type: object\n      description: \"describes a floating, sea going structure (mother vessels and feeder vessels) with either an internal or external mode of propulsion designed for the transport of cargo and/or passengers. Ocean vessels are uniquely identified by an IMO number consisting of 7 digits, or alternatively by their AIS signal with an MMSI number. \\n\"\n      allOf:\n      - type: object\n        properties:\n          vesselIMONumber:\n            $ref: '#/components/schemas/vesselIMONumber'\n      - type: object\n        properties:\n          vesselName:\n            $ref: '#/components/schemas/vesselName'\n      - type: object\n        properties:\n          vesselFlag:\n            $ref: '#/components/schemas/vesselFlag'\n      - type: object\n        properties:\n          vesselCallSignNumber:\n            $ref: '#/components/schemas/vesselCallSignNumber'\n      - type: object\n        properties:\n          vesselOperatorCarrierCode:\n            $ref: '#/components/schemas/vesselOperatorCarrierCode'\n      - type: object\n        properties:\n          vesselOperatorCarrierCodeListProvider:\n            $ref: '#/components/schemas/vesselOperatorCarrierCodeListProvider'\n    vesselName:\n      maxLength: 35\n      type: string\n      description: |\n        The name of the Vessel given by the Vessel Operator and registered with IMO.\n      example: King of the Seas\n    vesselFlag:\n      maxLength: 2\n      type: string\n      description: |\n        The flag of the nation whose laws the vessel is registered under. This is the ISO 3166 two-letter country code\n      example: DE\n    vesselCallSignNumber:\n      maxLength: 10\n      type: string\n      description: |\n        A unique alphanumeric identity that belongs to the vessel and is assigned by the International Telecommunication Union (ITU). It consists of a threeletter alphanumeric prefix that indicates nationality, followed by one to four characters to identify the individual vessel. For instance, vessels registered under Denmark are assigned the prefix ranges 5PA-5QZ, OUAOZZ, and XPA-XPZ. The Call Sign changes whenever a vessel changes its flag.\n      example: NCVV\n    vesselOperatorCarrierCode:\n      maxLength: 10\n      type: string\n      description: |\n        The carrier who is in charge of the vessel operation based on either the SMDG or SCAC code lists\n      nullable: false\n      example: MAEU\n    vesselOperatorCarrierCodeListProvider:\n      type: string\n      description: Identifies the code list provider used for the operator and partner carriercodes.\n      nullable: false\n      example: NMFTA\n      enum:\n      - SMDG\n      - NMFTA\n    eventTypeCode:\n      maxLength: 4\n      type: string\n      description: |\n        Deprecated - Unique identifier for Event Type Code. This has been replaced by Specialized eventTypeCodes: shipmentEventTypeCode, transportEventTypeCode, equipmentEventTypeCode and opertaionsEventType\n      example: ARRI\n      deprecated: true\n    documentReferences:\n      type: array\n      description: An optional list of key-value (documentReferenceType-documentReferenceValue) pairs representing links to objects relevant to the event. The \u003cb\u003edocumentReferenceType\u003c/b\u003e-field is used to describe where the \u003cb\u003edocumentReferenceValue\u003c/b\u003e-field is pointing to.\n      example:\n      - documentReferenceType: BKG\n        documentReferenceValue: ABC123123123\n      - documentReferenceType: TRD\n        documentReferenceValue: 85943567-eedb-98d3-f4ed-aed697474ed4\n      items:\n        $ref: '#/components/schemas/documentReferences_inner'\n    references:\n      type: object\n      properties:\n        references:\n          type: array\n          items:\n            $ref: '#/components/schemas/reference'\n    reference:\n      required:\n      - referenceType\n      - referenceValue\n      type: object\n      description: |\n        references provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\n      allOf:\n      - type: object\n        properties:\n          referenceType:\n            $ref: '#/components/schemas/referenceType'\n      - type: object\n        properties:\n          referenceValue:\n            $ref: '#/components/schemas/referenceValue'\n    referenceType:\n      type: string\n      description: |\n        The reference type codes defined by DCSA.\n        - FF (Freight Forwarder’s Reference)\n        - SI (Shipper’s Reference)\n        - PO (Purchase Order Reference)\n        - CR (Customer’s Reference)\n        - AAO (Consignee’s Reference)\n        - EQ (Equipment Reference)\n      example: FF\n      enum:\n      - FF\n      - SI\n      - PO\n      - CR\n      - AAO\n      - EQ\n    referenceValue:\n      maxLength: 100\n      type: string\n      description: The actual value of the reference.\n    shipmentEvent:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/baseEvent'\n      - $ref: '#/components/schemas/baseShipmentEvent'\n    baseShipmentEvent:\n      required:\n      - documentID\n      - documentTypeCode\n      - shipmentEventTypeCode\n      type: object\n      description: |\n        The shipment event entity is a specialization of the event entity to support specification of data that only applies to a shipment event.\n      allOf:\n      - type: object\n        properties:\n          eventType:\n            type: string\n            example: SHIPMENT\n            enum:\n            - SHIPMENT\n      - type: object\n        properties:\n          eventDateTime:\n            description: |\n              Value for eventDateTime must be the same value as eventCreatedDateTime\n      - type: object\n        properties:\n          eventClassifierCode:\n            type: string\n            description: |\n              Code for the event classifier can be\n              - ACT (Actual)\n              - PLN (Planned)\n              - EST (Estimated)\n            example: ACT\n            enum:\n            - ACT\n            - PLN\n            - EST\n      - type: object\n        properties:\n          shipmentEventTypeCode:\n            $ref: '#/components/schemas/shipmentEventTypeCode'\n      - type: object\n        properties:\n          documentID:\n            $ref: '#/components/schemas/documentID'\n      - type: object\n        properties:\n          documentTypeCode:\n            $ref: '#/components/schemas/documentTypeCode'\n      - type: object\n        properties:\n          shipmentInformationTypeCode:\n            $ref: '#/components/schemas/shipmentInformationType'\n      - type: object\n        properties:\n          reason:\n            $ref: '#/components/schemas/reason'\n      - type: object\n        properties:\n          eventTypeCode:\n            $ref: '#/components/schemas/eventTypeCode'\n      - type: object\n        properties:\n          eventTypeCode:\n            type: string\n            description: |\n              Unique identifier for Event Type Code. For shipment events this can be\n              - RECE (Received)\n              - CONF (Confirmed)\n              - ISSU (Issued)\n              - APPR (Approved)\n              - SUBM (Submitted)\n              - SURR (Surrendered)\n              - REJE (Rejected)\n              - PENA (Pending approval)\n\n              Deprecated - use shipmentEventTypeCode instead\n            example: RECE\n            deprecated: true\n            enum:\n            - RECE\n            - CONF\n            - ISSU\n            - APPR\n            - SUBM\n            - SURR\n            - REJE\n            - PENA\n      - type: object\n        properties:\n          shipmentID:\n            $ref: '#/components/schemas/shipmentID'\n      - type: object\n        properties:\n          shipmentID:\n            description: |\n              ID uniquely identifying a shipment.\n\n              Deprecated - this is replaced by documentID which can contain different values depending on the value of the documentTypeCode field\n            deprecated: true\n      - $ref: '#/components/schemas/references'\n    shipmentEventTypeCode:\n      type: string\n      description: |\n        The status of the document in the process. Possible values are\n        - RECE (Received)\n        - DRFT (Drafted)\n        - PENA (Pending Approval)\n        - PENU (Pending Update)\n        - REJE (Rejected)\n        - APPR (Approved)\n        - ISSU (Issued)\n        - SURR (Surrendered)\n        - SUBM (Submitted)\n        - VOID (Void)\n        - CONF (Confirmed)\n        - REQS (Requested)\n        - CMPL (Completed)\n        - HOLD (On Hold)\n        - RELS (Released)\n\n        More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv\"\u003eGitHub\u003c/a\u003e\n      example: DRFT\n      enum:\n      - RECE\n      - DRFT\n      - PENA\n      - PENU\n      - REJE\n      - APPR\n      - ISSU\n      - SURR\n      - SUBM\n      - VOID\n      - CONF\n      - REQS\n      - CMPL\n      - HOLD\n      - RELS\n    documentID:\n      type: string\n      description: |\n        The id of the object defined by the documentTypeCode.\n      example: the-id-of-the-documentTypeCode\n    documentTypeCode:\n      maxLength: 3\n      type: string\n      description: |\n        The code to identify the type of information documentID points to. Can be one of the following values\n        - CBR (Carrier Booking Request Reference)\n        - BKG (Booking)\n        - SHI (Shipping Instruction)\n        - SRM (Shipment Release Message)\n        - TRD (Transport Document)\n        - ARN (Arrival Notice)\n        - VGM (Verified Gross Mass)\n        - CAS (Cargo Survey)\n        - CUS (Customs Inspection)\n        - DGD (Dangerous Goods Declaration)\n        - OOG (Out of Gauge)\n\n        More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/documenttypecodes.csv\"\u003eGitHub\u003c/a\u003e\n      example: SHI\n      enum:\n      - CBR\n      - BKG\n      - SHI\n      - SRM\n      - TRD\n      - ARN\n      - VGM\n      - CAS\n      - CUS\n      - DGD\n      - OOG\n    shipmentInformationType:\n      maxLength: 3\n      type: string\n      description: |\n        The code to identify the type of information documentID points to. Can be one of the following values\n        - BOK (Booking - deprecated use BKG instead)\n        - BKG (Booking)\n        - SHI (Shipping Instruction)\n        - VGM (Verified Gross Mass)\n        - SRM (Shipment Release Message)\n        - TRD (Transport Document)\n        - ARN (Arrival Notice)\n\n        \u003cb\u003eDeprecated\u003c/b\u003e - use documentTypeCode instead\n      example: SHI\n      deprecated: true\n      enum:\n      - BOK\n      - BKG\n      - SHI\n      - VGM\n      - SRM\n      - TRD\n      - ARN\n    reason:\n      type: string\n      description: Reason field in a Shipment event. This field can be used to explain why a specific event has been sent.\n      example: The following attributes are missing...\n    shipmentID:\n      type: string\n      description: The identifier for a shipment\n      format: uuid\n      example: c32d56f3-a4a5-4964-bb49-abd168b06160\n    equipmentEvent:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/baseEvent'\n      - $ref: '#/components/schemas/baseEquipmentEvent'\n    baseEquipmentEvent:\n      required:\n      - emptyIndicatorCode\n      - equipmentEventTypeCode\n      type: object\n      description: |\n        The equipment event entity is a specialization of the event entity to support specification of data that only applies to an equipment event.\n      allOf:\n      - type: object\n        properties:\n          eventType:\n            type: string\n            example: EQUIPMENT\n            enum:\n            - EQUIPMENT\n      - type: object\n        properties:\n          eventClassifierCode:\n            type: string\n            description: |\n              Code for the event classifier can be\n              - PLN (Planned)\n              - ACT (Actual)\n              - EST (Estimated)\n            example: EST\n            enum:\n            - PLN\n            - ACT\n            - EST\n      - type: object\n        properties:\n          equipmentEventTypeCode:\n            $ref: '#/components/schemas/equipmentEventTypeCode'\n      - type: object\n        properties:\n          equipmentReference:\n            $ref: '#/components/schemas/equipmentReference'\n      - type: object\n        properties:\n          ISOEquipmentCode:\n            $ref: '#/components/schemas/ISOEquipmentCode'\n      - type: object\n        properties:\n          emptyIndicatorCode:\n            $ref: '#/components/schemas/emptyIndicatorCode'\n      - type: object\n        properties:\n          eventLocation:\n            $ref: '#/components/schemas/location'\n      - type: object\n        properties:\n          transportCallID:\n            allOf:\n            - $ref: '#/components/schemas/transportCallID'\n            - deprecated: true\n            - description: The unique identifier for a transport call\u003cbr\u003e\u003cbr\u003eDeprecated - not needed as the TransportCall object is included\n      - type: object\n        properties:\n          transportCall:\n            $ref: '#/components/schemas/transportCall'\n      - type: object\n        properties:\n          documentReferences:\n            $ref: '#/components/schemas/documentReferences'\n      - $ref: '#/components/schemas/references'\n      - $ref: '#/components/schemas/seals'\n      - type: object\n        properties:\n          eventTypeCode:\n            $ref: '#/components/schemas/eventTypeCode'\n      - type: object\n        properties:\n          eventTypeCode:\n            type: string\n            description: |\n              Unique identifier for Event Type Code, for transport events this is either\n              - LOAD (Loaded)\n              - DISC (Discharged)\n              - GTIN (Gated in)\n              - GTOT (Gated out)\n              - STUF (Stuffed)\n              - STRP (Stripped)\n\n              Deprecated - use equipmentEventTypeCode instead\n            deprecated: true\n            enum:\n            - LOAD\n            - DISC\n            - GTIN\n            - GTOT\n            - STUF\n            - STRP\n    equipmentEventTypeCode:\n      type: string\n      description: |\n        Unique identifier for equipmentEventTypeCode.\n        - LOAD (Loaded)\n        - DISC (Discharged)\n        - GTIN (Gated in)\n        - GTOT (Gated out)\n        - STUF (Stuffed)\n        - STRP (Stripped)\n        - PICK (Pick-up)\n        - DROP (Drop-off)\n        - INSP (Inspected)\n        - RSEA (Resealed)\n        - RMVD (Removed)\n\n        More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/equipmenteventtypecodes.csv\"\u003eGitHub\u003c/a\u003e\n      example: LOAD\n      enum:\n      - LOAD\n      - DISC\n      - GTIN\n      - GTOT\n      - STUF\n      - STRP\n      - PICK\n      - DROP\n      - INSP\n      - RSEA\n      - RMVD\n    ISOEquipmentCode:\n      maxLength: 4\n      type: string\n      description: Unique code for the different equipment size/type used for transporting commodities. The code is a concatenation of ISO Equipment Size Code and ISO Equipment Type Code A and follows the ISO 6346 standard.\n      example: 22GP\n    emptyIndicatorCode:\n      type: string\n      description: Code to denote whether the equipment is empty or laden.\n      example: EMPTY\n      enum:\n      - EMPTY\n      - LADEN\n    seals:\n      type: object\n      properties:\n        seals:\n          type: array\n          items:\n            $ref: '#/components/schemas/seal'\n    seal:\n      required:\n      - sealNumber\n      - sealType\n      type: object\n      description: addresses the seal-related information associated with the shipment equipment. A seal is put on a shipment equipment once it is loaded. This seal is meant to stay on until the shipment equipment reaches its final destination.\n      allOf:\n      - type: object\n        properties:\n          sealNumber:\n            $ref: '#/components/schemas/sealNumber'\n      - type: object\n        properties:\n          sealSource:\n            $ref: '#/components/schemas/sealSource'\n      - type: object\n        properties:\n          sealType:\n            $ref: '#/components/schemas/sealType'\n    sealNumber:\n      maxLength: 15\n      type: string\n      description: Identifies a seal affixed to the container.\n    sealSource:\n      type: string\n      description: |\n        The source of the seal, namely who has affixed the seal. This attribute links to the Seal Source ID defined in the Seal Source reference data entity.\n        - CAR (Carrier)\n        - SHI (Shipper)\n        - PHY (Phytosanitary)\n        - VET (Veterinary)\n        - CUS (Customs)\n      example: CUS\n      enum:\n      - CAR\n      - SHI\n      - PHY\n      - VET\n      - CUS\n    sealType:\n      type: string\n      description: |\n        The type of seal. This attribute links to the Seal Type ID defined in the Seal Type reference data entity.\n        - KLP (Keyless padlock)\n        - BLT (Bolt)\n        - WIR (Wire)\n      example: WIR\n      enum:\n      - KLP\n      - BLT\n      - WIR\n    error:\n      required:\n      - errorDateTime\n      - errors\n      - httpMethod\n      - requestUri\n      - statusCode\n      - statusCodeText\n      type: object\n      properties:\n        httpMethod:\n          type: string\n          description: The HTTP request method type\n          example: POST\n        requestUri:\n          type: string\n          description: The request URI.\n          example: https://dcsa.org/dcsa/tnt/v1/events\n        errors:\n          $ref: '#/components/schemas/subErrors'\n        statusCode:\n          type: integer\n          description: The HTTP status code\n          example: 400\n        statusCodeText:\n          type: string\n          description: The textual representation of the response status.\n          example: Bad Request\n        errorDateTime:\n          type: string\n          description: The date and time (in ISO 8601 format) the error occurred.\n          format: $date-time\n          example: 2019-11-12T07:41:00+08:30\n    subErrors:\n      type: array\n      items:\n        $ref: '#/components/schemas/subErrors_inner'\n    subscriptionID:\n      type: string\n      description: The carrier issues a unique ID to the shipper or consignee for that subscription\n      format: uuid\n      example: 8fbdc2d8-57c8-48b9-a04b-18fd8ec1d809\n    secret:\n      type: string\n      description: |\n        A Base64 encoded secret shared between the Publisher and the Subscriber.\n        It is used to compute the contents of the Notification-Signature header.\n      format: byte\n      example: !!binary |-\n        TVRJek5EVTJOemc1TURFeU16UTFOamM0T1RBeE1qTTBOVFkzT0Rrd01USXpORE0yTlRjNE5qSXpP\n        RGszTkRZNU1EZ3lOek0wT1RnM01USXpOemcyTkE9PQ==\n    callbackUrl:\n      type: string\n      description: |\n        The endPoint where a Carrier whould send back events to the Shipper. The callback can contain query parameters uniquely identifying the originator of the events.\n      format: uri\n      example: https://myserver.com/send/callback/here?shipperRef=\u003cshipper defined unique id\u003e\n    shipmentSubscriptionBody:\n      type: object\n      allOf:\n      - type: object\n        properties:\n          shipmentEventTypeCode:\n            $ref: '#/components/schemas/shipmentEventTypeCodes'\n      - type: object\n        properties:\n          documentTypeCode:\n            $ref: '#/components/schemas/documentTypeCodes'\n      - type: object\n        properties:\n          carrierBookingReference:\n            $ref: '#/components/schemas/carrierBookingReference'\n      - type: object\n        properties:\n          bookingReference:\n            maxLength: 35\n            type: string\n            description: |\n              The identifier for a shipment, which is issued by and unique within each of the carriers.\n\n              Deprecated - use carrierBookingReference instead\n            example: ABC709951\n            deprecated: true\n      - type: object\n        properties:\n          transportDocumentID:\n            type: string\n            description: |\n              Uniquely identify a transport document.\n\n              Deprecated - use transportDocumentReference instead\n            format: uuid\n            deprecated: true\n      - type: object\n        properties:\n          transportDocumentReference:\n            $ref: '#/components/schemas/transportDocumentReference'\n      - type: object\n        properties:\n          transportDocumentTypeCode:\n            allOf:\n            - $ref: '#/components/schemas/transportDocumentTypeCodes'\n            - deprecated: true\n            - description: |\n                List of transportDocumentType to filter by. If multiple values are selected - the OR-operator will be used.\n\n                Default is none as it will not filter on transportDocumentType if not specified.\n\n                \u003cb\u003eDeprecated:\u003c/b\u003e Not to be used any more\n    shipmentEventTypeCodes:\n      type: array\n      description: |\n        List of shipmentEventTypeCode to filter by. If multiple values are selected - the OR-operator will be used.\n\n        Default is none as it will not filter on shipmentEventTypeCode if not specified.\n      example:\n      - RECE\n      - DRFT\n      items:\n        $ref: '#/components/schemas/shipmentEventTypeCode'\n    documentTypeCodes:\n      type: array\n      description: |\n        List of documentTypeCode to filter by. If multiple values are selected - the OR-operator will be used.\n\n        Default is none as it will not filter on documentTypeCode if not specified.\n      example:\n      - SHI\n      - TRD\n      items:\n        $ref: '#/components/schemas/documentTypeCode'\n    transportDocumentTypeCodes:\n      type: array\n      description: |\n        List of transportDocumentType to filter by. If multiple values are selected - the OR-operator will be used.\n\n        Default is none as it will not filter on transportDocumentType if not specified.\n      example:\n      - BOL\n      items:\n        $ref: '#/components/schemas/transportDocumentType'\n    transportDocumentType:\n      type: string\n      description: Specifies the type of the transport document (a Bill of Lading (BOL) or a Sea Waybill (SWB)).\n      example: SWB\n      enum:\n      - BOL\n      - SWB\n    transportSubscriptionBody:\n      type: object\n      allOf:\n      - type: object\n        properties:\n          transportEventTypeCode:\n            $ref: '#/components/schemas/transportEventTypeCodes'\n      - type: object\n        properties:\n          scheduleID:\n            allOf:\n            - $ref: '#/components/schemas/scheduleID'\n            - deprecated: true\n            - description: ID uniquely identifying a schedul.\u003cbr\u003eDeprecated as this was added by mistake\n      - type: object\n        properties:\n          transportCallID:\n            $ref: '#/components/schemas/transportCallID'\n      - type: object\n        properties:\n          vesselIMONumber:\n            $ref: '#/components/schemas/vesselIMONumber'\n      - type: object\n        properties:\n          carrierVoyageNumber:\n            allOf:\n            - $ref: '#/components/schemas/carrierVoyageNumber'\n            - deprecated: true\n      - type: object\n        properties:\n          exportVoyageNumber:\n            $ref: '#/components/schemas/exportVoyageNumber'\n      - type: object\n        properties:\n          carrierServiceCode:\n            $ref: '#/components/schemas/carrierServiceCode'\n      - type: object\n        properties:\n          UNLocationCode:\n            $ref: '#/components/schemas/UNLocationCode'\n    transportEventTypeCodes:\n      type: array\n      description: |\n        List of transportEventTypeCode to filter by. If multiple values are selected - the OR-operator will be used.\n\n        Default is none as it will not filter on transportEventTypeCode if not specified.\n      example:\n      - ARRI\n      - DEPA\n      items:\n        $ref: '#/components/schemas/transportEventTypeCode'\n    equipmentSubscriptionBody:\n      type: object\n      allOf:\n      - type: object\n        properties:\n          equipmentEventTypeCode:\n            $ref: '#/components/schemas/equipmentEventTypeCodes'\n      - type: object\n        properties:\n          equipmentReference:\n            $ref: '#/components/schemas/equipmentReference'\n      - type: object\n        properties:\n          UNLocationCode:\n            $ref: '#/components/schemas/UNLocationCode'\n    equipmentEventTypeCodes:\n      type: array\n      description: |\n        List of equipmentEventTypeCode to filter by. If multiple values are selected - the OR-operator will be used.\n\n        Default is none as it will not filter on equipmentEventTypeCode if not specified.\n      example:\n      - GTIN\n      - GTOT\n      items:\n        $ref: '#/components/schemas/equipmentEventTypeCode'\n    inline_response_default:\n      allOf:\n      - $ref: '#/components/schemas/error'\n      - type: object\n        properties:\n          httpMethod:\n            example: GET\n      - type: object\n        properties:\n          requestUri:\n            example: https://dcsa.org/dcsa/tnt/v2/events\n    inline_response_200:\n      example:\n        eventID: 84db923d-2a19-4eb0-beb5-446c1ec57d34\n        eventType: SHIPMENT\n        eventCreatedDateTime: 2019-11-12T07:41:00+08:30\n        eventSubtype: ISSU\n        documentID: 84db923d-2a19-4eb0-beb5-446c1ec57d34\n        documentTypeCode: TRD\n        reason: All good\n      discriminator:\n        propertyName: eventType\n      oneOf:\n      - $ref: '#/components/schemas/shipmentEvent'\n      - $ref: '#/components/schemas/transportEvent'\n      - $ref: '#/components/schemas/equipmentEvent'\n    inline_response_default_1:\n      allOf:\n      - $ref: '#/components/schemas/error'\n      - type: object\n        properties:\n          httpMethod:\n            example: GET\n      - type: object\n        properties:\n          requestUri:\n            example: https://dcsa.org/dcsa/tnt/v2/events/123e4567-e89b-12d3-a456-426614174000\n    inline_response_default_2:\n      allOf:\n      - $ref: '#/components/schemas/error'\n      - type: object\n        properties:\n          httpMethod:\n            example: GET\n      - type: object\n        properties:\n          requestUri:\n            example: https://dcsa.org/dcsa/tnt/v2/event-subscriptions\n    inline_response_default_3:\n      allOf:\n      - $ref: '#/components/schemas/error'\n      - type: object\n        properties:\n          httpMethod:\n            example: POST\n      - type: object\n        properties:\n          requestUri:\n            example: https://dcsa.org/dcsa/tnt/v2/event-subscriptions\n    inline_response_default_4:\n      allOf:\n      - $ref: '#/components/schemas/error'\n      - type: object\n        properties:\n          httpMethod:\n            example: GET\n      - type: object\n        properties:\n          requestUri:\n            example: https://dcsa.org/dcsa/tnt/v2/event-subscriptions/8fbdc2d8-57c8-48b9-a04b-18fd8ec1d809\n    inline_response_default_5:\n      allOf:\n      - $ref: '#/components/schemas/error'\n      - type: object\n        properties:\n          httpMethod:\n            example: PUT\n      - type: object\n        properties:\n          requestUri:\n            example: https://dcsa.org/dcsa/tnt/v2/event-subscriptions/8fbdc2d8-57c8-48b9-a04b-18fd8ec1d809\n    inline_response_default_6:\n      allOf:\n      - $ref: '#/components/schemas/error'\n      - type: object\n        properties:\n          httpMethod:\n            example: DELETE\n      - type: object\n        properties:\n          requestUri:\n            example: https://dcsa.org/dcsa/tnt/v2/event-subscriptions/8fbdc2d8-57c8-48b9-a04b-18fd8ec1d809\n    subscriptionID_secret_body:\n      allOf:\n      - type: object\n        properties:\n          secret:\n            $ref: '#/components/schemas/secret'\n    inline_response_default_7:\n      allOf:\n      - $ref: '#/components/schemas/error'\n      - type: object\n        properties:\n          httpMethod:\n            example: PUT\n      - type: object\n        properties:\n          requestUri:\n            example: https://dcsa.org/dcsa/tnt/v2/event-subscriptions/8fbdc2d8-57c8-48b9-a04b-18fd8ec1d809/secret\n    documentReferences_inner:\n      type: object\n      properties:\n        documentReferenceType:\n          type: string\n          description: Describes where the documentReferenceValue is pointing to\n          example: BKG\n          enum:\n          - BKG (Booking)\n          - TRD (Transport Document)\n        documentReferenceValue:\n          type: string\n          description: The value of the identifier the documentReferenceType is describing\n          example: 123e4567-e89b-12d3-a456-426614174000\n    subErrors_inner:\n      required:\n      - message\n      - reason\n      type: object\n      properties:\n        reason:\n          type: string\n          description: High level error message.\n          example: invalidQuery\n        message:\n          type: string\n          description: Detailed error message.\n          example: The request did not contain one of the three required query parameters.\n  headers:\n    API-Version:\n      description: SemVer used to indicate the version of the contract (API version) returned.\n      schema:\n        type: string\n        example: 1.0.0\n    Current-Page:\n      description: A link to the current page.\n      required: true\n      schema:\n        type: string\n        example: fE9mZnNldHw9MCZsaW1pdD01\n    Next-Page:\n      description: A link to the next page. Next-Page header link MAY be omitted if the current page is the last page.\n      required: false\n      schema:\n        type: string\n        example: fE9mZnNldHw9NSZsaW1pdD01\n    Prev-Page:\n      description: A link to the previous page. Previous-Page header link MAY be omitted if the current page is the first page.\n      required: false\n      schema:\n        type: string\n        example: fE9mZnNldHw9MCZsaW1pdD01\n    Last-Page:\n      description: A link to the last page. Last-Page header link MAY be omitted if the current page is the last page.\n      required: false\n      schema:\n        type: string\n        example: fE9mZnNldHw9NTkmbGltaXQ9NQ==\n    First-Page:\n      description: A link to thefirst page. First-Page header link MAY be omitted if current page is the first page.\n      required: false\n      schema:\n        type: string\n        example: fE9mZnNldHw9NjAmbGltaXQ9NQ==\n",
			"canonicalURL": "/github.com/dcsaorg/DCSA-OpenAPI@18caeb803330d26b2c25aba119a677d79647af54/-/blob/tnt/v2/test/tnt_v2.2.0.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/dcsaorg/DCSA-OpenAPI/blob/18caeb803330d26b2c25aba119a677d79647af54/tnt/v2/test/tnt_v2.2.0.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /v2/events: get: parameters: parse parameter \"shipmentEventTypeCode\": schema: parse default: expected type \"array\", got \"string\""
}