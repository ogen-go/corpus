{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/plantbreeding/BrAPI"
		},
		"file": {
			"name": "ReadAlignment.yaml",
			"size": 0,
			"path": "Specification/GA4GH_BrAPI/Reads/Schemas/ReadAlignment.yaml",
			"byteSize": 5298,
			"content": "components:\n  schemas:\n    ReadAlignment:\n      description: |-\n        Each read alignment describes an alignment with additional information\n        about the fragment and the read. A read alignment object is equivalent to a\n        line in a SAM file.\n      properties:\n        aligned_quality:\n          description: |-\n            The quality of the read sequence contained in this alignment message\n            (equivalent to QUAL in SAM).\n\n            `alignedSequence` and `alignedQuality` may be shorter than the full read\n            sequence and quality. This will occur if the alignment is part of a\n            chimeric alignment, or if the read was trimmed. When this occurs, the CIGAR\n            for this read will begin/end with a hard clip operator that will indicate\n            the length of the excised sequence.\n          items:\n            format: int32\n            type: integer\n          type: array\n        aligned_sequence:\n          description: |-\n            The bases of the read sequence contained in this alignment record\n            (equivalent to SEQ in SAM).\n\n            `alignedSequence` and `alignedQuality` may be shorter than the full read\n            sequence and quality. This will occur if the alignment is part of a\n            chimeric alignment, or if the read was trimmed. When this occurs, the CIGAR\n            for this read will begin/end with a hard clip operator that will indicate\n            the length of the excised sequence.\n          type: string\n        alignment:\n          $ref: '#/components/schemas/LinearAlignment'\n        attributes:\n          $ref: '#/components/schemas/Attributes'\n        duplicate_fragment:\n          description: The fragment is a PCR or optical duplicate (SAM flag 0x400).\n          format: boolean\n          type: boolean\n        failed_vendor_quality_checks:\n          description: The read fails platform or vendor quality checks (SAM flag 0x200).\n          format: boolean\n          type: boolean\n        fragment_length:\n          description: The observed length of the fragment, equivalent to TLEN in SAM.\n          format: int32\n          type: integer\n        fragment_name:\n          description: The fragment name. Equivalent to QNAME (query template name) in SAM.\n          type: string\n        id:\n          description: |-\n            The read alignment ID. This ID is unique within the read group this\n            alignment belongs to.\n\n            For performance reasons, this field may be omitted by a backend.\n            If provided, its intended use is to make caching and UI display easier for\n            genome browsers and other lightweight clients.\n          type: string\n        improper_placement:\n          description: |-\n            The orientation and the distance between reads from the fragment are\n            inconsistent with the sequencing protocol (inverse of SAM flag 0x2).\n          format: boolean\n          type: boolean\n        next_mate_position:\n          $ref: '#/components/schemas/Position'\n        number_reads:\n          description: The number of reads in the fragment (extension to SAM flag 0x1).\n          format: int32\n          type: integer\n        read_group_id:\n          title: |-\n            The ID of the read group this read belongs to.\n            (Every read must belong to exactly one read group.)\n          type: string\n        read_number:\n          description: |-\n            The read ordinal in the fragment, 0-based and less than numberReads. This\n            field replaces SAM flag 0x40 and 0x80 and is intended to more cleanly\n            represent multiple reads per fragment.\n          format: int32\n          type: integer\n        secondary_alignment:\n          description: |-\n            Whether this alignment is secondary. Equivalent to SAM flag 0x100.\n            A secondary alignment represents an alternative to the primary alignment\n            for this read. Aligners may return secondary alignments if a read can map\n            ambiguously to multiple coordinates in the genome.\n\n            By convention, each read has one and only one alignment where both\n            secondaryAlignment and supplementaryAlignment are false.\n          format: boolean\n          type: boolean\n        supplementary_alignment:\n          description: |-\n            Whether this alignment is supplementary. Equivalent to SAM flag 0x800.\n            Supplementary alignments are used in the representation of a chimeric\n            alignment. In a chimeric alignment, a read is split into multiple\n            linear alignments that map to different reference contigs. The first\n            linear alignment in the read will be designated as the representative\n            alignment; the remaining linear alignments will be designated as\n            supplementary alignments. These alignments may have different mapping\n            quality scores.\n\n            In each linear alignment in a chimeric alignment, the read will be hard\n            clipped. The `alignedSequence` and `alignedQuality` fields in the alignment\n            message will only represent the bases for its respective linear alignment.\n          format: boolean\n          type: boolean\n      type: object\ninfo:\n  title: BrAPI\n  version: ''\nopenapi: 3.0.0\npaths: {}\n",
			"canonicalURL": "/github.com/plantbreeding/BrAPI@5252d84f331840650fffbca6cb8cece10a65cea6/-/blob/Specification/GA4GH_BrAPI/Reads/Schemas/ReadAlignment.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/plantbreeding/BrAPI/blob/5252d84f331840650fffbca6cb8cece10a65cea6/Specification/GA4GH_BrAPI/Reads/Schemas/ReadAlignment.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"ReadAlignment\": parse schema: property \"alignment\": parse schema: resolve \"#/components/schemas/LinearAlignment\": find schema: resolve \"#/components/schemas/LinearAlignment\": can't find value for \"components/schemas/LinearAlignment\""
}