{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/rapi-doc/RapiDoc"
		},
		"file": {
			"name": "data-types.yaml",
			"size": 0,
			"path": "docs/specs/data-types.yaml",
			"byteSize": 9901,
			"content": "openapi: 3.0.0\ninfo:\n  description: Contains all data types\n  version: 1.0.0\n  title: Testing different data-types\npaths:\n  /nested-object-in-request-body:\n    post:\n      tags:\n        - Test with various data types\n      summary: Request Body accepting a JSON\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/person\"\n  /nested-object:\n    get:\n      tags:\n        - Test with various data types\n      summary: Nested object\n      description: Response schema is made up of multiple nested object, For simple schema check out [simple object](#get-/simple-object)\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Description of **Person** object (Person must be bold)\n                properties:\n                  age:\n                    description: Person's **Age** (age must be bold)\n                    type: integer\n                  fullName:\n                    description: Person's Full name\n                    type: object\n                    properties:\n                      firstName:\n                        description: _First name_ (First name should be italics)\n                        type: string\n                      lastName:\n                        description: |\n                          `Last name` (last name must be monospaced)\n                        type: string\n                  dependentIds:\n                    type: array\n                    description: IDs of Dependents .\n                    items:\n                      type: integer\n                  dependentNames:\n                    type: array\n                    description: Full Name of **Dependents** (Dependents must be bold).\n                    items:\n                      type: object\n                      properties:\n                        firstNameParts:\n                          description: Parts of **First Name** (First Name must be bold)\n                          type: object\n                          properties:\n                            firstName:\n                              description: This is a very very long description to test how will it show up on a API spec renderer tool such as RapiDoc. This lable must be big enough to wrap into next line \n                              type: string\n                            aLongFieldForTestingHowItShowsUpInSchemaModelWhenItEncountersLongField:\n                              description: Dependent Last Name\n                              type: string\n                        dependentLastName:\n                          description: Dependent Last Name\n                          type: string\n                  hobbies:\n                    type: array\n                    description: array of objects\n                    items:\n                      type: object\n\n  /simple-object:\n    get:\n      tags:\n        - Test with various data types\n      summary: Simple object\n      description: Response schema is a simple object, which contains only primitive properties. For complex schema check out [nested object](#get-/nested-object)\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  name:\n                    description: Person Name\n                    type: string\n                  age:\n                    description: Person Age\n                    type: integer\n                    minimum: 1\n                    maximum: 100\n\n\n  /person:\n    post:\n      tags:\n        - Test with various data types\n      summary: Data Types with constraints\n      description: Request-Parameters and Response-Schema contains various data types and constrains. Check out how is it desplayed below\n      parameters:\n        - name: height\n          in: query\n          description: height (in inches)\n          required: true\n          example: 70\n          schema:\n            type: integer\n            format: int32\n            minimum: 12\n            maximum: 120\n        - name: full-name\n          in: query\n          description: Name of a person\n          required: true\n          schema:\n            type: string\n            minimum: 3\n          examples:\n            empty:\n              value:\n              summary: No Name\n            male-name:\n              value: James\n              summary: Male name\n            female-name:\n              value: Ria\n              summary: Female Name\n            gender-nutral-name:\n              value: Charlie\n              summary: Gender Neutral Name\n\n        - name: social-connection\n          in: query\n          description: facebook, linkedin, github, instagram, twitter etc \n          schema:\n            type: string\n            format: url\n        - name: email\n          in: query\n          required: true\n          schema:\n            type: string\n            format: email\n        - name: email-password\n          in: query\n          required: true\n          schema:\n            type: string\n            format: password\n        - name: date-of-birth\n          in: query\n          required: true\n          schema:\n            type: string\n            format: date\n        - name: phone-deprecated\n          in: query\n          x-fill-example: no\n          example: 12345\n          deprecated: true\n          schema:\n            type: string\n            pattern: '/^\\+(?:[0-9]-?){6,14}[0-9]$/'\n        - name: marital-status\n          in: query\n          required: true\n          example: married\n          schema:\n            type: string\n            enum:\n              - married\n              - unmarried\n              - widowed\n              - unknown\n            default: unknown\n        - name: interests\n          in: query\n          required: true\n          description: __Exploded Array__ will send separate querystring parameter for each items eg - `interests=computers\u0026interests=movies`\n          schema:\n            type: array\n            example: \n              - computers\n              - reading\n              - ['music', 'movies']\n            minItems: 1\n            maxItems: 3\n            items:\n              type: string\n              enum:\n                - computers\n                - hiking\n                - swiming\n                - movies\n                - music\n                - dancing\n                - reading\n                - painting\n              default: hiking   \n        - name: tags\n          in: query\n          description: __Not Exploded Array__ will send a single querystring parameter with comma separated string eg - `tags=tall,dark,handsome`\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/person'\ncomponents:\n  schemas:\n    category:\n      type: object\n      properties:\n        catId:\n          description: Category ID\n          allOf:\n            - $ref: '#/components/schemas/id'\n        name:\n          description: Category name\n          type: string\n          deprecated: true\n    id:\n      type: string\n      format: uuid\n    person:\n      type: object\n      required:\n        - name\n        - photoUrls\n      properties:\n        dob:\n          description: Date of Birth\n          type: string\n          format: date\n        id:\n          description: Pet ID\n          allOf:\n            - $ref: '#/components/schemas/id'\n        category:\n          description: Categories this person belongs to\n          allOf:\n            - $ref: '#/components/schemas/category'\n        country:\n          type: object\n          deprecated: true\n          properties:\n            countryCode:\n              type: string\n            countryName:\n              type: string\n        dependentIds:\n          type: array\n          deprecated: true\n          description: IDs of Dependents .\n          items:\n            type: integer\n          example:\n            - 278\n            - 279\n            - 280\n            - 281\n        name:\n          description: Name of the person\n          type: string\n          minLength: 4\n          examples:\n            empty:\n              value:\n              summary: No Name\n            male-name:\n              value: James\n              summary: Male name\n            female-name:\n              value: Ria\n              summary: Female Name\n            gender-nutral-name:\n              value: Charlie\n              summary: Gender Neutral Name\n        photoUrls:\n          description: The list of URL to a cute photos featuring pet\n          type: array\n          maxItems: 20\n          items:\n            type: string\n            format: url\n        tags:\n          description: Tags attached to the pet\n          type: array\n          minItems: 1\n          items:\n            $ref: '#/components/schemas/tag'\n        maritalStatus:\n          type: string\n          description: Marital status in case of adult\n          enum:\n            - married\n            - unmarried\n            - widowed\n        phone:\n          description: phone number in international format\n          type: string\n          pattern: '/^\\+(?:[0-9]-?){6,14}[0-9]$/'\n          example: +1-202-555-0192\n          nullable: true\n    tag:\n      type: object\n      properties:\n        id:\n          description: Tag ID\n          allOf:\n            - $ref: '#/components/schemas/id'\n        name:\n          description: Tag name\n          type: string\n          minLength: 1\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /nested-object-in-request-body: post: responses: no responses"
}