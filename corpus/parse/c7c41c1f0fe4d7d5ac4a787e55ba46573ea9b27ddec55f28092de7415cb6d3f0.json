{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/sargun/tradier"
		},
		"file": {
			"name": "tradier.yaml",
			"size": 0,
			"path": "specs/tradier.yaml",
			"byteSize": 16661,
			"content": "openapi: 3.0.1\ninfo:\n  version: 'v1'\n  title: Tradier API\n# Added by API Auto Mocking Plugin\nservers:\n  - description: Tradier Sandbox\n    url: https://sandbox.tradier.com/v1\ncomponents:\n  schemas:\n    symbol:\n      type: string\n    option:\n      type: object\n      properties:\n        symbol:\n          type: string\n        description:\n          type: string\n        exch:\n          type: string\n        last:\n          type: number\n        change:\n          type: number\n        volume:\n          type: number\n        open:\n          type: number\n        high:\n          type: number\n        low:\n          type: number\n        close:\n          type: number\n        bid:\n          type: number\n        ask:\n          type: number\n        underlying:\n          $ref: \"#/components/schemas/symbol\"\n        strike:\n          type: number\n        change_percentage:\n          type: number\n        average_volume:\n          type: number\n        last_volume:\n          type: number\n        trade_date:\n          type: number\n        prevclose:\n          type: number\n        week_52_high:\n          type: number\n        week_52_low:\n          type: number\n        bidsize:\n          type: number\n        bidexch:\n          type: string\n        bid_date:\n          type: number\n          description: unix time\n        asksize:\n          type: number\n        ask_date:\n          type: number\n        open_interest:\n          type: number\n        contract_size:\n          type: number\n        expiration_date:\n          type: string\n          format: date\n        expiration_type:\n          type: string\n          enum: [standard, weeklys, eom]\n        option_type:\n          type: string\n          enum: [call, put]\n        root_symbol:\n          $ref: \"#/components/schemas/symbol\"\n        greeks:\n          type: object\n          properties:\n            delta:\n              type: number\n              format: double\n              description: Delta (Δ) represents the rate of change between the option's price and a $1 change in the underlying asset's price.\n            gamma:\n              type: number\n              format: double\n              description: Gamma (Γ) represents the rate of change between an option's delta and the underlying asset's price.\n            thetha:\n              type: number\n              format: double\n              description: Theta (Θ) represents the rate of change between the option price and time, or time sensitivity - sometimes known as an option's time decay.\n            vega:\n              type: number\n              format: double\n              description: Vega (v) represents the rate of change between an option's value and the underlying asset's implied volatility.\n            rho:\n              type: number\n              format: double\n              description: Rho (p) represents the rate of change between an option's value and a 1% change in the interest rate.\n            phi:\n              type: number\n              format: double\n              description: Phi indicates the expected change in the option premium due to a small change in the foreign currency interest rate.\n            bid_iv:\n              type: number\n              format: float\n              description: Bid implied volatility\n            mid_iv:\n              type: number\n              format: float\n              description: Mid implied volatility\n            ask_iv:\n              type: number\n              format: float\n              description: Ask implied volatility\n            smv_vol:\n              type: number\n              format: float\n              description: ORATS final implied volatility\n            updated_at:\n              type: string\n              format: date-time\n    streamingSummary:\n      type: object\n      properties:\n        high:\n          type: number\n        low:\n          type: number\n        open:\n          type: number\n        prevClose:\n          type: number\n        symbol:\n          $ref: '#/components/schemas/symbol'\n        type:\n          type: string\n    streamingQuote:\n      type: object\n      properties:\n        ask:\n          type: number\n        askdate:\n          type: string\n          pattern: '^[0-9]+$'\n        askexch:\n          type: string\n        asksz:\n          type: number\n        bid:\n          type: number\n        biddate:\n          type: string\n          pattern: '^[0-9]+$'\n        bidexch:\n          type: string\n        symbol:\n          $ref: '#/components/schemas/symbol'\n        type:\n          type: string\n    streamingTrade:\n      type: object\n      properties:\n        cvol:\n          type: string\n          pattern: '^[0-9]+$'\n        date:\n          type: string\n          pattern: '^[0-9]+$'\n        last:\n          type: string\n        price:\n          type: string\n        size:\n          type: string\n        symbol:\n          $ref: '#/components/schemas/symbol'\n        exch:\n          type: string\n        type:\n          type: string\n    streamingTimesale:\n      type: object\n      properties:\n        symbol:\n          $ref: '#/components/schemas/symbol'\n        exch:\n          type: string\n        bid:\n          type: string\n          format: number\n        ask:\n          type: string\n          format: number\n        last:\n          type: string\n          format: number\n        size:\n          type: string\n          format: number\n        date:\n          type: string\n          pattern: '^[0-9]+$'\n        seq:\n          type: number\n        flag:\n          type: string\n        cancel:\n          type: boolean\n        correction:\n          type: boolean\n        session:\n          type: string\n    streamingTradex:\n      type: object\n      properties:\n        cvol:\n          type: string\n          pattern: '^[0-9]+$'\n        date:\n          type: string\n          pattern: '^[0-9]+$'\n        last:\n          type: string\n        price:\n          type: string\n        size:\n          type: string\n        exch:\n          type: string\n        symbol:\n          $ref: '#/components/schemas/symbol'\n        type:\n          type: string\n    profile:\n      '$ref': './profile.yaml'\n    quote:\n      '$ref': './quote.yaml'\n    quotes:\n      type: object\n      properties:\n        quotes:\n          type: object\n          properties:\n            quote:\n              type: array\n              items:\n                '$ref': '#/components/schemas/quote'\n  securitySchemes:\n    BearerAuth:\n      scheme: bearer\n      type: http\npaths:\n  /markets/quotes:\n    post:\n      description: |\n        Get a list of symbols using a keyword lookup on the symbols description. Results are in descending order by average volume of the security. This can be used for simple search functions.\n      security:\n        - BearerAuth: []\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              required: [symbols]\n              properties:\n                symbols:\n                  type: array\n                  items:\n                    $ref: \"#/components/schemas/symbol\"\n                greeks:\n                  default: false\n                  type: boolean\n      responses:\n        '2XX':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/quotes\"\n    get:\n      description: |\n        Get a list of symbols using a keyword lookup on the symbols description. Results are in descending order by average volume of the security. This can be used for simple search functions.\n      security:\n        - BearerAuth: []\n      parameters:\n        - in: query\n          name: symbols\n          required: true\n          schema:\n            type: array\n            items:\n              $ref: \"#/components/schemas/symbol\"\n          style: simple\n          explode: false\n        - in: query\n          name: greeks\n          schema:\n            type: boolean\n      responses:\n        '2XX':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/quotes\"\n  /markets/options/chains:\n    get:\n      description: |\n        Get all quotes in an option chain. Greek and IV data is included courtesy of ORATS. Please check out their APIs for more in-depth options data.\n      security:\n        - BearerAuth: []\n      parameters:\n        - in: query\n          name: symbol\n          schema:\n            $ref: \"#/components/schemas/symbol\"\n          required: true\n        - in: query\n          name: expiration\n          required: true\n          schema:\n            type: string\n            format: date\n        - in: query\n          name: greeks\n          schema:\n            type: boolean\n      responses:\n        '2XX':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  options:\n                    type: object\n                    properties:\n                      option:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/option'\n\n  /markets/options/expirations:\n    get:\n      description: |\n        Get expiration dates for a particular underlying.\n\n        Note that some underlying securities use a different symbol for their weekly options (RUT/RUTW, SPX/SPXW). To make sure you see all expirations, make sure to send the includeAllRoots parameter. This will also ensure any unique options due to corporate actions (AAPL1) are returned.\n      security:\n        - BearerAuth: []\n      parameters:\n        - in: query\n          name: symbol\n          schema:\n            $ref: \"#/components/schemas/symbol\"\n          required: true\n          description: Underlying symbol of the chain\n        - in: query\n          name: includeAllRoots\n          schema:\n            type: boolean\n            default: false\n          required: false\n          description: Send expirations related to all option roots\n        - in: query\n          name: strikes\n          schema:\n            type: boolean\n            default: false\n          required: false\n\n      responses:\n        '2XX':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                required: [expirations]\n                properties:\n                  expirations:\n                    type: object\n                    properties:\n                      date:\n                        type: array\n                        items:\n                          type: string\n                          format: date\n                      expiration:\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            date:\n                              type: string\n                              format: date\n                            strikes:\n                              type: object\n                              properties:\n                                strike:\n                                  type: array\n                                  items:\n                                    type: number\n\n  /markets/options/strikes:\n    get:\n      description: |\n        Get an options strike prices for a specified expiration date.\n      security:\n        - BearerAuth: []\n      parameters:\n        - in: query\n          name: symbol\n          schema:\n            type: string\n          required: true\n          description: Underlying symbol of the chain\n          # TODO: Determine format\n        - in: query\n          name: expiration\n          schema:\n            type: string\n            format: date\n      responses:\n        '2XX':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  strikes:\n                    type: object\n                    properties:\n                      strike:\n                        type: array\n                        items:\n                          type: number\n                          format: float\n  /markets/options/lookup:\n    get:\n      description: |\n        Get all options symbols for the given underlying. This will include additional option roots (ex. SPXW, RUTW) if applicable.\n      security:\n        - BearerAuth: []\n      parameters:\n        - in: query\n          name: underlying\n          schema:\n            type: string\n          required: true\n          description: Underlying symbol of the chain\n          # TODO: Determine format\n      responses:\n        '2XX':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  symbols:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        rootSymbol:\n                          $ref: \"#/components/schemas/symbol\"\n                        options:\n                          type: array\n                          items:\n                            type: string\n  /user/profile:\n    get:\n      description: |\n        The user’s profile contains information pertaining to the user and his/her accounts. In addition to listing all the accounts a user has, this call should be used to create a personalized experience for your customers (i.e. displaying their name when they log in).\n      security:\n        - BearerAuth: []\n      responses:\n        '2XX':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/profile'\n  /markets/events/session:\n    post:\n      description: |\n        Create a streaming session for use with the Tradier Streaming API. This session can be used with the streaming endpoints to obtain updates to the market as they happen.\n      security:\n        - BearerAuth: []\n      responses:\n        '2XX':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  stream:\n                    type: object\n                    properties:\n                      url:\n                        type: string\n                        format: uri\n                      sessionid:\n                        type: string\n                        format: uuid\n\n  /markets/history:\n    get:\n      description: |\n        Get historical pricing for a security. This data will usually cover the entire lifetime of the company if sending reasonable start/end times. You can fetch historical pricing for options by passing the OCC option symbol (ex. AAPL220617C00270000) as the symbol.\n      security:\n        - BearerAuth: []\n      parameters:\n        - in: query\n          name: symbol\n          schema:\n            $ref: '#/components/schemas/symbol'\n          required: true\n        - in: query\n          name: interval\n          schema:\n            type: string\n            enum: [daily, weekly, monthly]\n        - in: query\n          name: start\n          schema:\n            type: string\n            format: date\n        - in: query\n          name: end\n          schema:\n            type: string\n            format: date\n      responses:\n        '2XX':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  history:\n                    type: object\n                    properties:\n                      day:\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            date:\n                              type: string\n                              format: date\n                            open:\n                              type: number\n                              format: float\n                            high:\n                              type: number\n                              format: float\n                            low:\n                              type: number\n                              format: float\n                            close:\n                              type: number\n                              format: float\n                            volume:\n                              type: number\n                              format: int64\n\nsecurity:\n  - BearerAuth: []",
			"canonicalURL": "/github.com/sargun/tradier@04b6bbaea668485f36c658888e2f85da92fca70b/-/blob/specs/tradier.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/sargun/tradier/blob/04b6bbaea668485f36c658888e2f85da92fca70b/specs/tradier.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: at 1:15: schemas: \"profile\": parse schema: resolve \"./profile.yaml\": external \"./profile.yaml\": file: local file reference is not allowed"
}