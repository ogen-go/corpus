{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mappls-api/mapmyindia-rest-api"
		},
		"file": {
			"name": "routing.yml",
			"size": 0,
			"path": "docs/custom/routing.yml",
			"byteSize": 30239,
			"content": "openapi: 3.0.3\ninfo:\n  title: Routing API\n  description: >-\n    Unlock the power of location intelligence for complex routing problems.  <br><br>We at MapmyIndia engineer rigorously tested routing algorithms for safe and efficient journeys that incorporate anticipated real time traffic updates for the most optimal and energy efficient routes. <br><br> Routing and displaying driving directions on map, including instructions for navigation, distance to destination, traffic etc. are few of the most important parts of developing a map based application. This REST API calculates driving routes between specified locations including via points based on route calculation type(optimal or shortest). <br><br> <strong>Global Coverage</strong> Now Available ! <br>Routing API is **Now Available**  for [238 countries](https://github.com/MapmyIndia/mapmyindia-rest-api/blob/master/docs/countryISO.md) across the world.<br><br> **Note**: <ol> <li> The response listed in the below documentation is ONLY indicative of the overall capabilities of MapmyIndia's Search APIs. </li><li> Not all response parameters mentioned in the below documentation is assured to be present in all the use-cases. The response of any of the below search API is thus, dependent on the use-case agreed upon between MapmyIndia & it's API consumer. </i><li> For any further clarifications on what all of the response structure is available for your use case, please contact your business relationship manager or contact MapmyIndia API support.</li><li> <strong>PREMIUM APIs</strong> are not available for evalulation on signup. To get access, please contact API Support.</li></ol>\n  termsOfService: 'https://www.mapmyindia.com/api/terms-&-conditions'\n  version: 1.0.0\n  license:\n    name: MapmyIndia License Key Signup\n    url: https://www.mapmyindia.com/api/\n  contact:\n    name: MapmyIndia API Support\n    email: apisupport@mapmyindia.com\n    url: https://www.mapmyindia.com/api/\nservers:\n  - url: https://apis.mapmyindia.com/advancedmaps/v1\n    description: 'Live Prod server for Routing APIs'\npaths:\n  /{REST_KEY}/{resources}/{profile}/{geopositions}:\n    get: \n      tags: \n        - Routing API\n      description: >-\n        Routing and displaying driving directions on map, including instructions for navigation, distance to destination, traffic etc. are few of the most important parts of developing a map based application. This REST API calculates driving routes between specified locations including via points based on route calculation type(optimal or shortest).<br>Please note that maximum number of points are limited to 100 only including source and secondary positions.\n        <p style=text-align:right><strong><a href=\"https://www.mapmyindia.com/api/advanced-maps/doc/sample/mapmyindia-maps-route-adv-api-example\">Live Demo</a> | <a href=\"https://github.com/MapmyIndia/mapmyindia-rest-api/tree/master/mapmyindia-routing-api\">Download Sample Code</a> </p>\n      summary: Routing API\n      operationId: routingAPI\n      parameters: \n        - name: REST_KEY\n          in: path\n          description: 'The REST API licence key allocated to you by signing into our services and registering yourself as a developer.'\n          allowEmptyValue: false\n          required: true\n          example: \"threstapikeywillcomeheretoaccess\"\n          schema:\n            type: string\n        - name: resources\n          in: path\n          description: >-\n            The different resources available within MapmyIndia Routing API. These resources have their own individual allocations and not all are allocated for evalulations be default. <br>For allocating particular resource on your API credentials, please contact <code>apisupport@mapmyindia.com</code>\n                <div class=\"tablenoborder\">\n                <table cellpadding=\"4\" cellspacing=\"0\" summary=\"\" id=\"request-constructing__table-basic-request-elements\" frame=\"hsides\" border=\"1\" rules=\"all\">\n                  <caption>\n                    <span class=\"tablecap\">\n                      <span class=\"table--title-label\">Table 1. </span>Resources\n                    </span>\n                  </caption>\n                  <colgroup>\n                    <col style=\"width:28.57142857142857%\">\n                      <col style=\"width:28.57142857142857%\">\n                        <col style=\"width:42.857142857142854%\">\n                        </colgroup>\n                        <thead>\n                          <tr class=\"&#39;&#39;\">\n                            <th class=\"cellrowborder\" id=\"d156249e37\">Element</th>\n                            <th class=\"cellrowborder\" id=\"d156249e40\">Value</th>\n                            <th class=\"row-nocellborder\" id=\"d156249e43\">Description</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          <tr class=\"&#39;&#39; override_background\">\n                            <td class=\"cellrowborder\" rowspan=\"3\" headers=\"d156249e37 \">Resources</td>\n                            <td class=\"cellrowborder\" headers=\"d156249e40 \">\n                              <code>route_adv</code>\n                            </td>\n                            <td class=\"row-nocellborder\" headers=\"d156249e43 \">to calculate a route & its duration without considering traffic conditions.</td>\n                          </tr>\n                          <tr class=\"&#39;&#39;\">\n                            <td class=\"cellrowborder\" headers=\"d156249e40 \">\n                              <code>route_eta</code>  \n                            </td>\n                            <td class=\"row-nocellborder\" headers=\"d156249e43 \">to get the updated duration of a route considering live traffic; Applicable for India only “region=ind” and “rtype=1” is not supported. This is different from <code>route_traffic</code>; this resource balances between a preferred path and aggressive traffic congestion avoidance. \n                            </td>\n                          </tr>\n                          <tr class=\"&#39;&#39; override_background\">\n                                        <td class=\"cellrowborder\" headers=\"d156249e40 \">\n                              <code>route_traffic</code>  \n                            </td>\n                            <td class=\"row-nocellborder\" headers=\"d156249e43 \">to search for routes considering live traffic; Applicable for India only “region=ind” and “rtype=1” is not supported. Largely biased towards aggressive traffic congestion avoidance, will basic path preference only. \n                            </td>\n                            </tr>\n                        </tbody>\n                      </table>\n                    </div>\n          allowEmptyValue: false\n          required: true\n          example: \"route_eta\"\n          schema:\n            type: string\n            enum: [route_adv, route_eta, route_traffic]\n        - name: profile\n          in: path\n          description: >-\n            The different profiles available within MapmyIndia Routing API. These profiles have their own individual transport modes and not all are allocated for evalulations be default. <br>For allocating particular profiles on your API credentials, please contact <code>apisupport@mapmyindia.com</code>\n                <div class=\"tablenoborder\">\n                <table cellpadding=\"4\" cellspacing=\"0\" summary=\"\" id=\"request-constructing__table-basic-request-elements\" frame=\"hsides\" border=\"1\" rules=\"all\">\n                  <caption>\n                    <span class=\"tablecap\">\n                      <span class=\"table--title-label\">Table 2. </span>Profiles\n                    </span>\n                  </caption>\n                  <colgroup>\n                    <col style=\"width:28.57142857142857%\">\n                      <col style=\"width:28.57142857142857%\">\n                        <col style=\"width:42.857142857142854%\">\n                        </colgroup>\n                        <thead>\n                          <tr class=\"&#39;&#39;\">\n                            <th class=\"cellrowborder\" id=\"d156249e37\">Element</th>\n                            <th class=\"cellrowborder\" id=\"d156249e40\">Value</th>\n                            <th class=\"row-nocellborder\" id=\"d156249e43\">Description</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          <tr class=\"&#39;&#39; override_background\">\n                            <td class=\"cellrowborder\" rowspan=\"4\" headers=\"d156249e37 \">Profiles</td>\n                            <td class=\"cellrowborder\" headers=\"d156249e40 \">\n                              <code>driving</code>\n                            </td>\n                            <td class=\"row-nocellborder\" headers=\"d156249e43 \">Meant for 4-wheeler/passenger car routing.</td>\n                          </tr>\n                          <tr class=\"&#39;&#39;\">\n                            <td class=\"cellrowborder\" headers=\"d156249e40 \">\n                              <code>biking</code>  \n                            </td>\n                            <td class=\"row-nocellborder\" headers=\"d156249e43 \">Meant for two-wheeler routing. Routing with this profile is restricted to <code>route_adv</code> only. <code>region</code> & <code>rtype</code> request parameters are not supported in two-wheeler routing. \n                            </td>\n                          </tr>\n                          <tr class=\"&#39;&#39; override_background\">\n                                        <td class=\"cellrowborder\" headers=\"d156249e40 \">\n                              <code>walking</code>  \n                            </td>\n                            <td class=\"row-nocellborder\" headers=\"d156249e43 \">Meant for pedestrian routing. Routing with this profile is restricted to <code>route_adv</code> only. <code>region</code> & <code>rtype</code> request parameters are not supported in pedestrian routing. \n                            </td>\n                            </tr>\n                            <tr class=\"&#39;&#39; override_background\">\n                                        <td class=\"cellrowborder\" headers=\"d156249e40 \">\n                              <code>trucking</code>  \n                            </td>\n                            <td class=\"row-nocellborder\" headers=\"d156249e43 \">Meant for Truck routing. Routing with this profile is restricted to <code>route_adv</code> only. <code>region</code> & <code>rtype</code> request parameters are not supported in truck routing. \n                            </td>\n                            </tr>\n                        </tbody>\n                      </table>\n                    </div>\n          allowEmptyValue: false\n          required: true\n          example: \"driving\"\n          schema:\n            type: string\n            enum: [driving, biking, walking, trucking]\n        - name: geopositions\n          in: path\n          description: >-\n            geopositions(part of URL) are either: <ul><li>pair of comma separated longitude & latitude values OR</li><li>eLoc(s).</li></ul> First geoposition will be consider as start point (mandatory); a last geoposition will be considered as end point (mandatory) and those in between are via points (optional). <br>{longitude1},{latitude1};{longitude2},{latitude2};eLoc1;eLoc2; ... (part of URL).\n          allowEmptyValue: false\n          required: true\n          example: \"KIC4FK;77.131123,28.552413;77.113091,28.544649\"\n          schema:\n            type: string\n        - name: geometries\n          in: query\n          description: >-\n            This parameter used to change the route geometry format/density (influences overview and per step).\n          allowEmptyValue: false\n          schema:\n            type: string\n            enum: [polyline, polyline6, geojson]\n            default: polyline\n          required: false\n        - name: rtype\n          in: query\n          description: >-\n            type of route (integer) required for navigation, where values mean:<br>           <code>0</code> optimal (default)<br> <code>1</code> shortest (it will calculate route by excluding access penalties like private roads, etc.)\n          allowEmptyValue: false\n          schema:\n            type: integer\n            enum: [0, 1]\n            default: 0\n          required: false\n        - name: steps\n          in: query\n          description: >-\n            Return route steps for each route leg. Possible values are true/false. By default it will be used as false. <Recommended=false; unless otherwise recommended by MapmyIndia>\n          allowEmptyValue: false\n          schema:\n            type: boolean\n            default: false\n            enum: [true, false]\n          required: false\n        - name: exclude\n          in: query\n          description: >-\n            Additive list of road classes to avoid, order does not matter. <br>Possible values are toll, motorway & ferry. <br>Multiple values can be sent separated by comma.\n          allowEmptyValue: false\n          schema:\n            type: string\n          required: false\n          example: \"ferry\"\n        - name: region\n          in: query\n          description: >-\n            This parameter is optional for India; for other countries (such as Sri Lanka, Nepal, Bangladesh, Bhutan + many more) this parameter is mandatory. Possible values are listed in a table [here](https://github.com/MapmyIndia/mapmyindia-rest-api/blob/master/docs/countryISO.md).\n          allowEmptyValue: false\n          schema:\n            type: string\n            default: IND\n          required: false\n          example: \"IND\"\n        - name: bearings\n          in: query\n          description: >-\n            Limits the search to segments with given bearing in degrees. The referencing will be to the true north and in clockwise direction. (Part of premium offering)\n          allowEmptyValue: false\n          schema:\n            type: integer\n          required: false\n          example: 180\n        - name: alternatives\n          in: query\n          description: >-\n            Search for alternative routes. Passing a number: e.g. <code>alternatives=n</code> searches for up to <strong>n</strong> alternative routes. <br>Please note that even if alternative routes are requested, a result cannot be guaranteed.\n          allowEmptyValue: false\n          schema:\n            type: integer\n          required: false\n          example: 2\n        - name: radiuses\n          in: query\n          description: >-\n            Limits the search to given radius in meters. For all way-points including start and end points. {radius};{radius}[;{radius} ...]. (Part of premium offering)\n          allowEmptyValue: false\n          schema:\n            type: string\n          required: false\n          example: \"100;100\"\n        - name: overview\n          in: query\n          description: >-\n            Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. <br>Possible values are <code>simplified</code> (default), <code>full</code>, <code>false</code>. (Part of premium offering)\n          allowEmptyValue: false\n          schema:\n            type: string\n            default: simplified\n            enum: [simplified, full, false]\n          required: false\n          example: \"simplified\"\n      responses:\n          '200':\n            description: OK\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/routing'\n          '204':\n            description: Not found\n          '400':\n            description: Bad request\n          '401':\n            description: API access denied\n          '403':\n            description: Forbidden\n          '500':\n            description: Something went wrong\n          '503':\n            description: Internal server error\n      deprecated: false\ncomponents: \n  schemas: \n    routing: \n      title: Routing results object\n      description: 'Routing results object'\n      type: object\n      required: \n        - routes\n        - code\n        - Server\n        - waypoints\n      properties: \n        routes: \n          type: array\n          items:\n              $ref: '#/components/schemas/routes'\n        waypoints: \n            type: array\n            items:\n              $ref: '#/components/schemas/waypoints'\n        code: \n          type: string\n          title: 'code'\n          description: >-\n             if request is successful, response is ‘ok’. Else, see the service dependent and general status codes as available in the enum. <br>In case of error, “NoRoute” code is supported (in addition to the general ones) which means “no route found”. <br> <ul><li><code>Ok</code>: Request could be processed as expected.</li><li><code>InvalidUrl</code>: URL string is invalid.</li><li>InvalidService: Service name is invalid.</li><li><code>InvalidVersion</code>: Version is not found.</li><li><code>InvalidOptions</code>: Options are invalid.</li><li><code>InvalidQuery</code>: The query string is synctactically malformed.</li><li><code>InvalidValue</code>: The successfully parsed query parameters are invalid.</li><li><code>NoSegment</code>: One of the supplied input coordinates could not snap to street segment.</li><li><code>TooBig</code>: The request size violates one of the service specific request size restrictions.</li><li><code>NoRoute</code>: Means No Route Found.</li></ul>\n          format: string\n          default: \"Ok\"\n          enum: [Ok, InvalidUrl, InvalidService, InvalidVersion, InvalidOptions, InvalidQuery, InvalidValue, NoSegment, TooBig, NoRoute]\n        Server: \n          type: string\n          title: 'Server'\n          description: >-\n             Gives Information on active service's server.\n          format: string\n          example: \"ETA-5100\"\n    waypoints: \n      title: waypoints object\n      description: 'waypoints object'\n      type: object\n      required: \n        - hint\n        - name\n        - location\n        - distance\n      properties:\n        hint: \n          type: string\n          title: 'hint'\n          description: >-\n             Unique internal identifier of the segment (ephemeral, not constant over data updates) This can be used on subsequent request to significantly speed up the query and to connect multiple services. E.g. you can use the hint value obtained by the nearest query as hint values for route inputs.\n          format: string\n          example: \"bEADgP___39tAAAA6QAAAChAAAB4CAAASdEuQaohRUHInMxEeg6MQwYAAAANAAAArAMAAHwAAADoAAAAiu2YBNCsswFz7ZgE3ayzAQ8AXw3Mm4K5\"\n        name: \n          type: string\n          title: 'name'\n          description: >-\n             Name of the street the coordinate snapped to.\n          format: string\n          example: \"Delhi Gurgaon Expressway\"\n        distance: \n          type: number\n          title: 'snappingDistance'\n          description: >-\n             distance to snapped location from actual location.\n          format: string\n          example: 4.033839\n        location: \n          type: array\n          items: \n            type: string  \n          title: 'rawInputCoordinates'\n          description: >-\n             longitude, latitude pair describing the snapped location of the waypoint.\n          example: [77.113089,28.544643]\n    routes: \n      title: routes object\n      description: 'routes object'\n      type: object\n      required: \n        - legs\n        - weight_name\n        - geometry\n        - weight\n        - distance\n        - duration\n      properties:\n        legs: \n          type: array\n          items:\n              $ref: '#/components/schemas/legs'\n        weight_name: \n          type: number\n          title: 'routesWeightName'\n          description: >-\n             Parameter for internal purpose only.\n          format: string\n          example: \"routability\"\n        geometry: \n          type: number\n          title: 'routesGeometry'\n          description: >-\n             Returns the whole geometry of the route as per given geometries request parameter. Default is encoded polyline with 5 digit accuracy (1e5) for positional coordinates. Geometry information is NOT available in most use-case driven response; and is RESTRICTED.\n          format: string\n          example: \"osgmDutwuMjA~@vEfGx@X~RlXLnAhGbJfHjQzBxDb@jEpAj@nAFt@`A?fAQn@aDbBcAhBmChQ\"\n        weight: \n          type: number\n          title: 'routesWeight'\n          description: >-\n             Parameter for internal purpose only.\n          format: number\n          example: 2282.2\n        distance: \n          type: number\n          title: 'routesDistance'\n          description: >-\n             The distance of travel, in float meters.\n          format: number\n          example: 2282.2\n        duration: \n          type: number\n          title: 'routesDuration'\n          description: >-\n             The estimated travel time, in float number of seconds.\n          format: number\n          example: 252.4\n    legs: \n      title: legs object\n      description: 'legs object'\n      type: object\n      required: \n        - steps\n        - summary\n        - weight\n        - distance\n        - duration\n      properties:\n        steps: \n          type: array\n          items:\n              $ref: '#/components/schemas/steps'\n        summary: \n          type: number\n          title: 'legsSummary'\n          description: >-\n             Parameter for internal purpose only.\n          format: string\n          example: \"Patel Road, Bhagwan Mahavir Marg\"\n        weight: \n          type: number\n          title: 'legsWeight'\n          description: >-\n             Parameter for internal purpose only.\n          format: number\n          example: 2282.2\n        distance: \n          type: number\n          title: 'legsDistance'\n          description: >-\n             The distance of travel in the leg, in float meters.\n          format: number\n          example: 2282.2\n        duration: \n          type: number\n          title: 'legsDuration'\n          description: >-\n             The estimated travel time in the leg, in float number of seconds.\n          format: number\n          example: 252.4\n    steps: \n      title: steps object\n      description: 'steps object'\n      type: object\n      required: \n        - intersections\n        - driving_side\n        - weight\n        - distance\n        - duration\n        - name\n        - geometry\n        - mode\n        - maneuver\n      properties:\n        weight: \n          type: number\n          title: 'stepsWeight'\n          description: >-\n             Parameter for internal purpose only.\n          format: number\n          example: 2282.2\n        distance: \n          type: number\n          title: 'stepsDistance'\n          description: >-\n             The distance of travel in the leg, in float meters.\n          format: number\n          example: 2282.2\n        duration: \n          type: number\n          title: 'stepsDuration'\n          description: >-\n             The estimated travel time in the leg, in float number of seconds.\n          format: number\n          example: 252.4\n        geometry: \n          type: number\n          title: 'stepsGeometry'\n          description: >-\n             The un-simplified geometry of the step segment, depends on the given geometries request parameter. Geometry information is NOT available in most use-case driven response; and is RESTRICTED.\n          format: string\n          example: \"qfvmDcalvMWCWHEBE@K@kA@\"\n        intersections: \n          description: >-\n            A list of Intersection objects(1) that are passed along the segment, the very first belonging to the StepManeuver(2). <br>Note: <ol><li>An intersection gives a full representation of any cross-way the path passes bay. For every step, the very first intersection (intersections[0]) corresponds to the location of the StepManeuver. Further intersections are listed for every cross-way until the next turn instruction. </li><li>An object type representing maneuver.</li></ol>\n          type: array\n          items:\n              $ref: '#/components/schemas/intersections'\n        driving_side: \n          type: number\n          title: 'driving side'\n          description: >-\n             “Left” (default) for India, Sri Lanka, Nepal, Bangladesh & Bhutan.\n          format: string\n          example: \"left\"\n        name: \n          type: string\n          title: 'stepName'\n          description: >-\n             The name of the way along which travel proceeds.\n          format: string\n          example: \"Safdar Hashmi Marg\"\n        mode: \n          type: string\n          title: 'mode'\n          description: >-\n             signifies the mode of transportation; driving as default.\n          format: string\n          example: \"driving\"\n        maneuver: \n          $ref: '#/components/schemas/maneuver'\n    maneuver: \n      title: maneuver object\n      description: 'maneuver object'\n      type: object\n      required: \n        - location\n        - bearing_before\n        - bearing_after\n        - modifier\n        - type\n      properties:\n        location: \n          type: array\n          items: \n            type: string  \n          title: 'maneuverLocation'\n          description: >-\n             A [longitude, latitude] pair describing the location of the turn.\n          example: [77.113089,28.544643]\n        bearing_before: \n          type: integer\n          title: 'bearing before'\n          description: >-\n             The clockwise angle from true north to the direction of travel immediately before the maneuver.\n          example: 357\n        bearing_after: \n          type: integer\n          title: 'bearing after'\n          description: >-\n             The clockwise angle from true north to the direction of travel immediately after the maneuver.\n          example: 254\n        modifier: \n          type: string\n          title: 'modifier'\n          description: >-\n             An optional string indicating the direction change of the maneuver. To see the complete list of modifiers, please see <a href=\"https://github.com/MapmyIndia/mapmyindia-rest-api/wiki/modifiers\">article</a> in wiki.\n          example: \"left\"\n        type: \n          type: string\n          title: 'type'\n          description: >-\n             A string indicating the type of maneuver. New identifiers might be introduced without API change. Types unknown to the client should be handled like the ‘turn’ type, the existence of correct modifier values is guaranteed. To see the complete list of types, please see <a href=\"https://github.com/MapmyIndia/mapmyindia-rest-api/wiki/types\">article</a> in wiki.\n          example: \"turn\"\n    intersections: \n      title: intersections object\n      description: 'intersections object'\n      type: object\n      required: \n        - classes\n        - location\n        - bearings\n        - entry\n        - in\n        - out\n        - lanes\n      properties:\n        location: \n          type: array\n          items: \n            type: string  \n          title: 'intersectionLocation'\n          description: >-\n             longitude, latitude pair describing the location of the intersection.\n          example: [77.113089,28.544643]\n        classes:\n          type: array\n          items: \n            type: string  \n          title: 'classes'\n          description: >-\n             Categorised types of road segments e.g. Motorway\n          example: [\"motorway\"]\n        bearings:\n          type: array\n          items: \n            type: integer  \n          title: 'bearings'\n          description: >-\n             A list of bearing values (e.g. [0,90,180,270]) that are available at the intersection. The bearings describe all available roads at the intersection.\n          example: [60, 210, 240]\n        entry:\n          type: array\n          items: \n            type: boolean  \n          title: 'entry'\n          description: >-\n             A list of entry flags, corresponding in a 1:1 relationship to the bearings. A value of true indicates that the respective road could be entered on a valid route. false indicates that the turn onto the respective road would violate a restriction.\n          example: [false, true, true]\n        in:\n          type: integer\n          title: 'in'\n          description: >-\n             index into bearings/entry array. Used to calculate the bearing just before the turn. Namely, the clockwise angle from true north to the direction of travel immediately before the maneuver/passing the intersection. Bearings are given relative to the intersection. To get the bearing in the direction of driving, the bearing has to be rotated by a value of 180. The value is not supplied for depart maneuvers.\n          example: 0\n        out:\n          type: integer\n          title: 'out'\n          description: >-\n             index into the bearings/entry array. Used to extract the bearing just after the turn. Namely, The clockwise angle from true north to the direction of travel immediately after the maneuver/passing the intersection. The value is not supplied for arrive maneuvers.\n          example: 2\n        lanes:\n          description: >-\n            Array of Lane objects that denote the available turn lanes at the intersection. If no lane information is available for an intersection, the lanes property will not be present.\n          type: array\n          items:\n              $ref: '#/components/schemas/lanes'\n    lanes: \n      title: lanes object\n      description: 'lanes object'\n      type: object\n      required: \n        - valid\n        - indications\n      properties:\n        valid:\n          type: boolean\n          title: 'valid'\n          description: >-\n             verifying lane info.\n          example: false\n        indications: \n          type: array\n          items: \n            type: string  \n          title: 'indications'\n          description: >-\n             Indicating a sign of directions like Straight, Slight Left, Right, etc. To see the complete list of indications, please see <a href=\"https://github.com/MapmyIndia/mapmyindia-rest-api/wiki/indications\">article</a> in wiki.\n          example: [\"straight\", \"slight left\"]",
			"canonicalURL": "/github.com/mappls-api/mapmyindia-rest-api@87d8f9380ea23d137db2aa50df5a395507530f5a/-/blob/docs/custom/routing.yml",
			"externalURLs": [
				{
					"url": "https://github.com/mappls-api/mapmyindia-rest-api/blob/87d8f9380ea23d137db2aa50df5a395507530f5a/docs/custom/routing.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/{REST_KEY}/{resources}/{profile}/{geopositions}\": at 1:14191: get: operation \"routingAPI\": at 1:14198: parameters: parse parameter \"overview\": at 1:26795: schema: at 1:27228: parse enum values: parse value \"false\": expected type \"string\", got \"bool\""
}