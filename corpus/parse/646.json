{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dod-ccpo/atat-web-api"
		},
		"file": {
			"name": "atat_provisioning_wizard_api.yaml",
			"path": "atat_provisioning_wizard_api.yaml",
			"content": "openapi: 3.0.2\ninfo:\n  description: \u003e-\n    This is a DRAFT version of the ATAT Portfolio Draft API\n  version: 1.0.0\n  title: ATAT Internal API - Portfolio Drafts\n  contact:\n    email: replaceme@ccpo.mil\ntags:\n  - name: portfolioDraft\n    description: \u003e-\n      Portfolio Drafts represent instances of portfolio provisioning workloads which have not yet been submitted to\n      the CSP\npaths:\n  /portfolioDrafts:\n    get:\n      tags:\n        - portfolioDraft\n      description: Gets all Portfolio Drafts to which the caller has read access\n      operationId: getPortfolioDrafts\n      parameters:\n        - $ref: '#/components/parameters/offsetParam'\n        - $ref: '#/components/parameters/limitParam'\n      responses:\n        '200':\n          description: Should return up to {limitParam} items\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PortfolioDraftSummary'\n              examples:\n                PortfolioDraftSummaryArrayEx:\n                  $ref: '#/components/examples/PortfolioDraftSummaryArrayEx'\n        '400':\n          description: Invalid request parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPortfolioDraftsFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          - \n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    post:\n      tags:\n        - portfolioDraft\n      description: Creates a new Portfolio Draft\n      operationId: createPortfolioDraft\n      responses:\n        '201':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PortfolioDraftSummary'\n              examples:\n                PortfolioDraftEx:\n                  $ref: '#/components/examples/PortfolioDraftEx'\n      requestBody:\n        description: An empty String or JSON body\n        content:\n          application/json:\n            schema:\n              type: string\n              example: '{}'\n          text/plain:\n            schema:\n              type: string\n              example: ''\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePortfolioDraftFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          - \n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /portfolioDrafts/{portfolioDraftId}:\n    get:\n      tags:\n        - portfolioDraft\n      description: Gets a Portfolio Draft\n      operationId: getPortfolioDraft\n      parameters:\n        - name: portfolioDraftId\n          in: path\n          description: ID of the Portfolio Draft\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PortfolioDraft'\n              examples:\n                PortfolioDraftEx:\n                  $ref: '#/components/examples/PortfolioDraftEx'\n        '404':\n          description: Portfolio Draft with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPortfolioDraftFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          - \n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    delete:\n      tags:\n        - portfolioDraft\n      description: Deletes a Portfolio Draft\n      operationId: deletePortfolioDraft\n      parameters:\n        - name: portfolioDraftId\n          in: path\n          description: ID of the Portfolio Draft\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Successful operation\n        '404':\n          description: Portfolio Draft with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeletePortfolioDraftFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          - \n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /portfolioDrafts/{portfolioDraftId}/portfolio:\n    get:\n      tags:\n        - portfolioDraft\n      description: Gets the Portfolio Step of the Portfolio Draft Wizard\n      operationId: getPortfolioStep\n      parameters:\n        - name: portfolioDraftId\n          in: path\n          description: ID of the Portfolio Draft\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation with empty response body\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PortfolioStep'\n              examples:\n                PortfolioStepEx:\n                  $ref: '#/components/examples/PortfolioStepEx'\n        '400':\n          description: The given Portfolio Draft does not exist\n        '404':\n          description: Portfolio Step not found for this Portfolio Draft\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPortfolioStepFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          - \n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    post:\n      tags:\n        - portfolioDraft\n      description: Submits the Portfolio Step of the Portfolio Draft Wizard\n      operationId: createPortfolioStep\n      parameters:\n        - name: portfolioDraftId\n          in: path\n          description: ID of the Portfolio Draft\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: Successful operation with empty response body\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PortfolioStep'\n              examples:\n                PortfolioStepEx:\n                  $ref: '#/components/examples/PortfolioStepEx'\n        '400':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n      requestBody:\n        description: Input data from the Portfolio Step of the Portfolio Draft Wizard\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PortfolioStep'\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePortfolioStepFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          - \n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS support\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /portfolioDrafts/{portfolioDraftId}/funding:\n    get:\n      tags:\n        - portfolioDraft\n      description: Gets the Funding Step of the Portfolio Draft Wizard\n      operationId: getFundingStep\n      parameters:\n        - name: portfolioDraftId\n          in: path\n          description: ID of the Portfolio Draft\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FundingStep'\n              examples:\n                FundingStepEx:\n                  $ref: '#/components/examples/FundingStepEx'\n        '400':\n          description: The given Portfolio Draft does not exist\n        '404':\n          description: Funding Step not found for this Portfolio Draft\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetFundingStepFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          - \n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    post:\n      tags:\n        - portfolioDraft\n      description: Submits the Funding Step of the Portfolio Draft Wizard.\n      operationId: createFundingStep\n      parameters:\n        - name: portfolioDraftId\n          in: path\n          description: ID of the Portfolio Draft\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FundingStep'\n              examples:\n                  FundingStepEx:\n                    $ref: '#/components/examples/FundingStepEx'\n        '400':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        '404':\n          description: Portfolio Draft with the given ID does not exist\n      requestBody:\n        description: Input data from the Funding Step of the Portfolio Draft Wizard.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FundingStep'\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateFundingStepFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          - \n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /portfolioDrafts/{portfolioDraftId}/application:\n    get:\n      tags:\n        - portfolioDraft\n      description: Gets the Application Step of the Portfolio Draft Wizard\n      operationId: getApplicationStep\n      parameters:\n        - name: portfolioDraftId\n          in: path\n          description: ID of the Portfolio Draft\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApplicationStep'\n              examples:\n                  ApplicationStepEx:\n                    $ref: '#/components/examples/ApplicationStepEx'\n              \n        '404':\n          description: Application Step not found for this Portfolio Draft\n        '400':\n          description: The given Portfolio Draft does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetApplicationStepFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          - \n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    post:\n      tags:\n        - portfolioDraft\n      description: Submits the Application Step of the Portfolio Draft Wizard\n      operationId: createApplicationStep\n      parameters:\n        - name: portfolioDraftId\n          in: path\n          description: ID of the Portfolio Draft\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApplicationStep'\n              examples:\n                  ApplicationStepEx:\n                    $ref: '#/components/examples/ApplicationStepEx'\n        '400':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        '404':\n          description: Portfolio Draft with the given ID does not exist\n      requestBody:\n        description: Input data from the Application Step of the Portfolio Draft Wizard.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ApplicationStep'\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri: \n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateApplicationStepFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          - \n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /portfolioDrafts/{portfolioDraftId}/submit:\n    post:\n      tags:\n        - portfolioDraft\n      description: Submits the given Portfolio Draft for provisioning with a CSP\n      operationId: submitPortfolioDraft\n      parameters:\n        - name: portfolioDraftId\n          in: path\n          description: ID of the Portfolio Draft\n          required: true\n          schema:\n            type: string\n      responses:\n        '202':\n          description: Accepted\n        '400':\n          description: Validation failed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        '403':\n          description: User is not authorized to submit this Portfolio Draft\n        '404':\n          description: Portfolio Draft with the given ID does not exist\n      requestBody:\n        description: An empty String or JSON body\n        content:\n          application/json:\n            example: '{}'\n          text/plain:\n            example: ''\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri: \n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SubmitPortfolioDraftFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          - \n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /taskOrderFiles:\n    post:\n      tags:\n        - taskOrder\n      description: Uploads a Task Order PDF\n      operationId: uploadTaskOrder\n      responses:\n        '201':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileMetadata'\n        '404':\n          description: Task Order with the given number does not exist\n      requestBody:\n        required: true\n        content:\n          application/pdf:\n            schema:\n              type: string\n              format: binary\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadTaskOrderFileFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          - \n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /taskOrderFiles/{taskOrderId}:\n    get:\n      tags:\n        - taskOrder\n      description: Gets File Metadata for a Task Order\n      operationId: getTaskOrderMetadata\n      parameters:\n        - name: taskOrderId\n          in: path\n          description: Task Order ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileMetadata'\n        '404':\n          description: Task Order with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          - \n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    delete:\n      tags:\n        - taskOrder\n      description: Deletes a Task Order PDF\n      operationId: deleteTaskOrder\n      parameters:\n        - name: taskOrderId\n          in: path\n          description: Task Order ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Successful operation\n        '404':\n          description: Task Order with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTaskOrderFileFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          - \n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /taskOrderFiles/{taskOrderId}/file:\n    get:\n      tags:\n        - taskOrder\n      description: Downloads a Task Order PDF\n      operationId: downloadTaskOrder\n      parameters:\n        - name: taskOrderId\n          in: path\n          description: Task Order ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/pdf:\n              schema:\n                type: string\n                format: binary\n        '404':\n          description: Task Order with the given ID does not exist or is pending processing\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri: \n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          - \n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /portfolios/{portfolioId}/burndown:\n    get:\n      tags:\n        - reporting\n      description: Returns combined actual and forecast expenditure data for the given Portfolio\n      operationId: getPortfolioBurndownData\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n        - name: start_date\n          in: query\n          description: Start date for the query. Defaults to the earliest pop_start date of all active CLINs funding this Portfolio.\n          required: false\n          schema:\n            type: string\n            format: date\n        - name: end_date\n          in: query\n          description: End date for the query. Defaults to the latest pop_end date of all active CLINs funding this Portfolio.\n          required: false\n          schema:\n            type: string\n            format: date\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MonthlyBurndownData'\n              examples:\n                ApplicationMonthlyBurndownDataEx:\n                  $ref: '#/components/examples/MonthlyBurndownDataEx'\n        '400':\n          description: Invalid request parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Portfolio with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"GET\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n  /portfolios/{portfolioId}/taskorders/{taskOrderNumber}/burndown:\n    get:\n      tags:\n        - reporting\n      description: Returns combined actual and forecast expenditure data for the given Task Order\n      operationId: getTaskOrderBurndownData\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n        - name: taskOrderNumber\n          in: path\n          description: Task Order Number (not assigned by ATAT)\n          required: true\n          schema:\n            type: string\n        - name: start_date\n          in: query\n          description: Start date for the query. Defaults to the earliest pop_start date of all active CLINs which are part of the given Task Order.\n          required: false\n          schema:\n            type: string\n            format: date\n        - name: end_date\n          in: query\n          description: End date for the query. Defaults to the latest pop_end date of all active CLINs which are part of the given Task Order.\n          required: false\n          schema:\n            type: string\n            format: date\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MonthlyBurndownData'\n              examples:\n                ApplicationMonthlyBurndownDataEx:\n                  $ref: '#/components/examples/MonthlyBurndownDataEx'\n        '400':\n          description: Invalid request parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Portfolio with the given ID does not exist or Task Order with the given number does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"GET\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n  /portfolios/{portfolioId}/taskorders/{taskOrderNumber}/clins/{clin}/burndown:\n    get:\n      tags:\n        - reporting\n      description: Returns combined actual and forecast expenditure data for the given CLIN\n      operationId: getClinBurndownData\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n        - name: taskOrderNumber\n          in: path\n          description: Task Order Number - (not assigned by ATAT)\n          required: true\n          schema:\n            type: string\n        - name: clin\n          in: path\n          description: Contract Line Item Number (CLIN) - (not assigned by ATAT)\n          required: true\n          schema:\n            type: string\n        - name: start_date\n          in: query\n          description: Start date for the query. Defaults to the pop_start date of the given CLIN.\n          required: false\n          schema:\n            type: string\n            format: date\n        - name: end_date\n          in: query\n          description: End date for the query. Defaults to the pop_end date of the given CLIN.\n          required: false\n          schema:\n            type: string\n            format: date\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MonthlyBurndownData'\n              examples:\n                ApplicationMonthlyBurndownDataEx:\n                  $ref: '#/components/examples/MonthlyBurndownDataEx'\n        '400':\n          description: Invalid request parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Portfolio with the given ID does not exist, Task Order with the given number does not exist or CLIN with the given number does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"GET\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\ncomponents:\n  parameters:\n    offsetParam:\n      in: query\n      name: offset\n      required: false\n      schema:\n        type: integer\n        minimum: 0\n      description: The number of items to skip before starting to collect the result set.\n    limitParam:\n      in: query\n      name: limit\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 50\n        default: 20\n      description: The numbers of items to return.\n  responses:\n    CorsHeaders:\n      description: Default response for CORS method\n      headers:\n        Access-Control-Allow-Origin:\n          schema:\n            type: string\n        Access-Control-Allow-Methods:\n          schema:\n            type: string\n        Access-Control-Allow-Headers:\n          schema:\n            type: string\n      content: {}\n  schemas:\n    BaseObject:\n      type: object\n      additionalProperties: false\n      description: Base model common to all first-class objects (those with IDs)\n      properties:\n        id:\n          type: string\n        created_at:\n          type: string\n          format: \"date-time\"\n        updated_at:\n          type: string\n          format: \"date-time\"\n    PortfolioDraftSummary:\n      type: object\n      additionalProperties: false\n      description: Portfolio Draft parent object\n      allOf:\n        - $ref: '#/components/schemas/BaseObject'\n        - type: object\n          properties:\n            name:\n              type: string\n            description:\n              type: string\n            num_portfolio_managers:\n              type: integer\n              minimum: 0\n            num_applications:\n              type: integer\n              minimum: 0\n            num_environments:\n              type: integer\n              minimum: 0\n            num_task_orders:\n              type: integer\n              minimum: 0\n            status:\n              type: string\n              description: CSP Provisioning Status\n              enum:\n                - \"not_started\"\n                - \"in_progress\"\n                - \"complete\"\n                - \"failed\"\n    Error:\n      type: object\n      additionalProperties: false\n      description: Generic error model\n      properties:\n        code:\n          type: string\n          enum: [INVALID_INPUT, OTHER]\n        message:\n          type: string\n      required:\n        - code\n        - message\n    ValidationError:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - type: object\n          additionalProperties: false\n          required:\n            - error_map\n          properties:\n            error_map:\n              type: object\n              description: 'Maps form input IDs to validation error messages so that clients can display in-line errors'\n    FileMetadataSummary:\n      type: object\n      additionalProperties: false\n      description: Metadata describing an uploaded file\n      properties:\n        id:\n          type: string\n          description: Should be a UUID. Will be the S3 Object Key.\n        name:\n          type: string\n          description: name of file when uploaded\n      required:\n        - \"id\"\n        - \"name\"\n    FileMetadata:\n      type: object\n      description: Metadata describing an uploaded file\n      additionalProperties: false\n      allOf:\n        - $ref: '#/components/schemas/BaseObject'\n        - $ref: '#/components/schemas/FileMetadataSummary'\n        - type: object\n          properties:\n            size:\n              type: number\n              description: file size in bytes\n            status:\n              type: string\n              description: status of uploaded file scans and review\n              enum:\n                - \"pending\"\n                - \"accepted\"\n                - \"rejected\"\n    PortfolioStep:\n      description: Represents step 1 of the Portfolio Draft Wizard\n      type: object\n      additionalProperties: false\n      required:\n        - name\n        - dod_components\n        - portfolio_managers\n        - csp\n      properties:\n        name:\n          type: string\n          pattern: '^[a-zA-Z\\d -]{4,100}$'\n        csp:\n          type: string\n          enum:\n            - \"CSP A\"\n            - \"CSP B\"\n        description:\n          type: string\n        dod_components:\n          type: array\n          items:\n            type: string\n            enum:\n              - \"air_force\"\n              - \"army\"\n              - \"marine_corps\"\n              - \"navy\"\n              - \"space_force\"\n              - \"combatant_command\"\n              - \"joint_staff\"\n              - \"dafa\"\n              - \"osd_psas\"\n              - \"nsa\"\n        portfolio_managers:\n          type: array\n          items:\n            type: string\n            format: \"email\"\n    FundingStep:\n      description: Represents step 2 of the Portfolio Draft Wizard\n      type: object\n      additionalProperties: false\n      properties:\n        task_orders:\n          type: array\n          minItems: 1\n          items:\n            $ref: '#/components/schemas/TaskOrder'    \n      required:\n        - \"task_orders\"\n    TaskOrder:\n      description: Represents a Task Order in the Funding Step\n      type: object\n      additionalProperties: false\n      properties:\n        task_order_number:\n          description: TO numbers are 13 characters. TO modifications are 17 characters.\n          type: string\n          pattern: '^[\\d]{13,17}$'\n        task_order_file:\n          description: Metadata associated with file which was previously uploaded by POST /taskOrderFiles\n          allOf:\n            - $ref: '#/components/schemas/FileMetadataSummary'\n        clins:\n          type: array\n          minItems: 1\n          items:\n            $ref: '#/components/schemas/Clin'\n      required:\n        - task_order_number\n        - task_order_file\n        - clins\n    Clin:\n      description: Represents a Clin in a Task Order\n      type: object\n      additionalProperties: false\n      properties:\n        clin_number:\n          description: Contract Line Item Number (CLIN), 0001 through 9999\n          type: string\n          pattern: '(?!^0{4}$)^\\d{4}$'\n        idiq_clin:\n          type: string\n        total_clin_value:\n          type: number\n          exclusiveMinimum: 0\n        obligated_funds:\n          type: number\n          exclusiveMinimum: 0\n        pop_start_date:\n          description: Start of period of performance\n          type: string\n          format: date\n        pop_end_date:\n          description: End of period of performance\n          type: string\n          format: date\n      required:\n        - clin_number\n        - idiq_clin\n        - total_clin_value\n        - obligated_funds\n        - pop_start_date\n        - pop_end_date\n    ApplicationStep:\n      description: Represents step 3 of the Portfolio Draft Wizard\n      additionalProperties: false\n      type: object\n      properties:\n        applications:\n          type: array\n          minItems: 1\n          items:\n            $ref: '#/components/schemas/Application'\n        operators:\n          type: array\n          items:\n            $ref: '#/components/schemas/PortfolioOperator'\n      required:\n        - applications\n        - operators\n    Application:\n      description: Represents an Application in a Portfolio\n      type: object\n      additionalProperties: false\n      properties:\n        name:\n          type: string\n          pattern: '^[a-zA-Z\\d _-]{4,100}$'\n        description:\n          type: string\n          pattern: ^[\\w\\d !@#$%^\u0026*_|:;,'.-]{0,300}$\n        environments:\n          type: array\n          minItems: 1\n          items:\n            $ref: '#/components/schemas/Environment'\n        operators:\n          type: array\n          items:\n            $ref: '#/components/schemas/AppEnvOperator'\n      required:\n        - name\n        - environments\n        - operators\n    Environment:\n      description: Represents an Environment for a specific Application\n      type: object\n      additionalProperties: false\n      properties:\n        name:\n          type: string\n          pattern: '^[a-zA-Z\\d _-]{1,100}$'\n        operators:\n          type: array\n          items:\n            $ref: '#/components/schemas/AppEnvOperator'\n      required:\n        - name\n        - operators\n    PortfolioOperator:\n      description: Represents an operator of a Portfolio\n      additionalProperties: false\n      type: object\n      properties:\n        display_name:\n          type: string\n          pattern: '^[a-zA-Z\\d ,.-]{1,100}$'\n        email:\n          type: string\n          format: \"email\"\n        access:\n          $ref: '#/components/schemas/PortfolioAccess'\n      required:\n        - display_name\n        - email\n        - access\n    AppEnvOperator:\n      description: Represents an operator of an Application or Environment\n      additionalProperties: false\n      type: object\n      properties:\n        display_name:\n          type: string\n          pattern: '^[a-zA-Z\\d ,.-]{1,100}$'\n        email:\n          type: string\n          format: \"email\"\n        access:\n          $ref: '#/components/schemas/AppEnvAccess'\n      required:\n        - display_name\n        - email\n        - access\n    PortfolioAccess:\n      description: Represents a set of Operators who should be granted access to a Portfolio at a specific access level. Uses an enum construct for forward compatibility should other access levels be specified.\n      type: string\n      enum:\n        - portfolio_administrator\n    AppEnvAccess:\n      description: Represents a set of Operators who should be granted access to an Application or Environment at a specific access level. The same access levels are available for both Applications \u0026 Environments.\n      type: string\n      enum:\n        - administrator\n        - contributor\n        - read_only\n    PortfolioDraft:\n      allOf:\n        - $ref: '#/components/schemas/PortfolioDraftSummary'\n      type: object\n      additionalProperties: false\n      properties:\n        portfolio_step:\n          $ref: '#/components/schemas/PortfolioStep'\n        funding_step:\n          $ref: '#/components/schemas/FundingStep'\n        application_step:\n          $ref: '#/components/schemas/ApplicationStep'\n    MonthlyAvailableFunds:\n      description: Represents the amount of available funds for a given month\n      type: object\n      additionalProperties: false\n      properties:\n        month:\n          type: string\n          example: \"2019-09\"\n        funds:\n          type: number\n          example: 200000\n    MonthlyBurndownData:\n      description: Combines actual and forecast available funds data by month.  Input for burndown chart.\n      type: object\n      additionalProperties: false\n      properties:\n        actual:\n          type: array\n          items:\n            $ref: '#/components/schemas/MonthlyAvailableFunds'\n        forecast:\n          type: array\n          items:\n            $ref: '#/components/schemas/MonthlyAvailableFunds'\n  examples:\n    PortfolioDraftSummaryArrayEx:\n      value:\n        - id: \"dc2bbee6-8cdb-477e-a363-f9f1593a0a9b\"\n          created_at: \"2021-08-03T16:19:51.686Z\"\n          updated_at: \"2021-08-03T16:19:51.686Z\"\n          status: \"not_started\"\n          name: \"Mock Portfolio\"\n          description: \"Mock portfolio description\"\n          num_portfolio_managers: 2\n          num_task_orders: 2\n          num_applications: 2\n          num_environments: 2\n    PortfolioDraftEx:\n      value:\n        id: \"dc2bbee6-8cdb-477e-a363-f9f1593a0a9b\"\n        status: \"not_started\"\n        created_at: \"2021-08-03T16:19:51.686Z\"\n        updated_at: \"2021-08-03T16:19:51.686Z\"\n    PortfolioStepEx:\n      value:\n        name: \"Mock Portfolio\"\n        csp:\n          - \"CSP A\"\n        description: \"Mock portfolio description\"\n        dod_components: \n          - \"air_force\"\n          - \"army\"\n          - \"marine_corps\"\n          - \"navy\"\n          - \"space_force\"\n        portfolio_managers:\n          - \"joe.manager@example.mil\"\n          - \"jane.manager@example.mil\"\n    FundingStepEx:\n      value:\n        task_orders:\n          - task_order_number: \"1234567891012\"\n            task_order_file:\n              id: \"b91db32f-40fa-4225-9885-b032f0d229fe\"\n              created_at: \"2021-08-03T16:21:07.978Z\"\n              updated_at: \"2021-08-03T16:21:07.978Z\"\n              size: 694331\n              name: \"TO_1234567891012.pdf\"\n              status: \"accepted\"\n            clins:\n              - clin_number: \"0001\"\n                idiq_clin: \"1234\"\n                total_clin_value: 200000\n                obligated_funds: 10000\n                pop_start_date: \"2021-09-01\"\n                pop_end_date: \"2022-09-01\"\n          - task_order_number: \"9876543210123\"\n            task_order_file:\n              id: \"824f7489-cabe-4c16-b41f-2eb196526995\"\n              created_at: \"2021-09-07T12:48:11.387Z\"\n              updated_at: \"2021-09-07T12:48:11.387Z\"\n              size: 2945459\n              name: \"TaskOrder_9876543210123.pdf\"\n              status: \"pending\"\n            clins:\n              - clin_number: \"0002\"\n                idiq_clin: \"1234\"\n                total_clin_value: 500000\n                obligated_funds: 20000\n                pop_start_date: \"2022-09-01\"\n                pop_end_date: \"2023-09-01\"\n    ApplicationStepEx:\n      value:\n        operators:\n          - display_name: \"Yoda\"\n            email: \"yoda@iam.mil\"\n            access: \"portfolio_administrator\"\n        applications:\n          - name: \"Cloud City Evac Planner\"\n            description: \"Application for planning an emergency evacuation\"\n            operators:\n              - display_name: \"Luke Skywalker\"\n                email: \"lostmy@hand.mil\"\n                access: \"administrator\"\n            environments:\n              - name: \"production\"\n                operators:\n                  - display_name: \"Darth Vader\"\n                    email: \"iam@yourfather.mil\"\n                    access: \"administrator\"\n                  - display_name: \"Landonis Calrissian\"\n                    email: \"thegambler@cloudcity.mil\"\n                    access: \"read_only\"\n                  - display_name: \"Luke Skywalker\"\n                    email: \"lostmy@hand.mil\"\n                    access: \"read_only\"\n          - name: \"Jabba's Palace Expansion App\"\n            description: \"Planning application for palace expansion\"\n            operators:\n              - display_name: \"Han Solo\"\n                email: \"frozen@carbonite.mil\"\n                access: \"administrator\"\n            environments:\n              - name: \"development\"\n                operators:\n                  - display_name: \"Salacious B. Crumb\"\n                    email: \"monkey@lizard.mil\"\n                    access: \"administrator\"\n                  - display_name: \"Han Solo\"\n                    email: \"frozen@carbonite.mil\"\n                    access: \"read_only\"\n                  - display_name: \"Boba Fett\"\n                    email: \"original@mandalorian.mil\"\n                    access: \"read_only\"\n    MonthlyBurndownDataEx:\n      value:\n        actual:\n          - month: \"2019-09\"\n            funds: 200000\n          - month: \"2019-10\"\n            funds: 190000\n          - month: \"2019-11\"\n            funds: 175000\n          - month: \"2019-12\"\n            funds: 170000\n          - month: \"2020-01\"\n            funds: 150000\n          - month: \"2020-02\"\n            funds: 115000\n          - month: \"2020-03\"\n            funds: 95000\n          - month: \"2020-04\"\n            funds: 90000\n          - month: \"2020-05\"\n            funds: 75000\n          - month: \"2020-06\"\n            funds: 70000\n          - month: \"2020-07\"\n            funds: 50000\n          - month: \"2020-08\"\n            funds: 35000\n        forecast:\n          - month: \"2020-09\"\n            funds: 30000\n  securitySchemes:\n    Fn::If:\n      - IsAuthorizationRequired\n      - cognitoAuthorizer:\n          description: \u003e-\n            Authorizes API access by token. Token obtained from custom IdP and provided in subsequent API requests.\n          type: apiKey\n          name: Authorization\n          in: header\n          x-amazon-apigateway-authtype: cognito_user_pools\n          x-amazon-apigateway-authorizer:\n            type: cognito_user_pools\n            providerARNs:\n              - Fn::GetAtt: AtatUserPool.Arn\n      - Ref: AWS::NoValue\n\nx-amazon-apigateway-request-validators:\n  full-request-validator:\n    validateRequestParameters: true\n    validateRequestBody: true\n  request-body-validator:\n    validateRequestParameters: false\n    validateRequestBody: true\n  request-params-validator:\n    validateRequestParameters: true\n    validateRequestBody: false        \n\nx-amazon-apigateway-gateway-responses:\n  # Gateway response types are documented at\n  # https://docs.aws.amazon.com/apigateway/latest/developerguide/supported-gateway-response-types.html\n  # The ordering is preserved here as well as comments highlighting which\n  # response handler will be used for responses we are not explicitly customizing.\n  ACCESS_DENIED:\n    statusCode: 403\n    responseParameters:\n      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n    responseTemplates:\n      application/json: |\n        {\n          \"code\": \"OTHER\",\n          \"message\": \"The requested resource could not be accessed\"\n        }\n  # API_CONFIGURATION_ERROR is handled by DEFAULT_5XX\n  # AUTHORIZER_CONFIGURATION_ERROR is handled by DEFAULT_5XX\n  # AUTHORIZER_FAILURE is handled by DEFAULT_5XX\n  BAD_REQUEST_PARAMETERS:\n    statusCode: 400\n    responseParameters:\n      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n    responseTemplates:\n      application/json: |\n        {\n          \"code\": \"OTHER\",\n          \"message\": \"Required path parameter is missing\"\n        }\n  BAD_REQUEST_BODY:\n    statusCode: 400\n    responseParameters:\n      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n    responseTemplates:\n      application/json: |\n        {\n          \"code\": \"OTHER\"\n          \"message\": \"A valid request body must be provided\"\n        }\n  DEFAULT_4XX:\n    # Use the original status code for 4XX errors\n    responseParameters:\n      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n    responseTemplates:\n      application/json: |\n        {\n          \"code\": \"OTHER\",\n          \"message\": \"The request is not valid\"\n        }\n  DEFAULT_5XX:\n    # Rewrite all 5XX errors as a 500\n    statusCode: 500\n    responseParameters:\n      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n    responseTemplates:\n      application/json: |\n        {\n          \"code\": \"OTHER\",\n          \"message\": \"There was an error processing the request\"\n        }\n  # EXPIRED_TOKEN is handled by DEFAULT_4XX\n  # INTEGRATION_FAILURE is handled by DEFAULT_5XX\n  # INTEGRATION_TIMEOUT is handled by DEFAULT_5XX\n  # INVALID_API_KEY is handled by DEFAULT_4XX\n  # INVALID_SIGNATURE is handled by DEFAULT_4XX\n  MISSING_AUTHENTICATION_TOKEN:\n    # Treat this the same way as a 404/403 would be treated\n    statusCode: 403\n    responseParameters:\n      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n    responseTemplates:\n      application/json: |\n        {\n          \"code\": \"OTHER\",\n          \"message\": \"The requested resource could not be accessed\"\n        }\n  # QUOTA_EXCEEDED is handled by DEFAULT_4XX\n  # REQUEST_TOO_LARGE is handled by DEFAULT_4XX\n  RESOURCE_NOT_FOUND:\n    # Mask gateway-level 404s as a 403 to prevent \"guessing\" whether\n    # a particular endpoint exists or not.\n    statusCode: 403\n    responseParameters:\n      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n    responseTemplates:\n      application/json: |\n        {\n          \"code\": \"OTHER\",\n          \"message\": \"The requested resource could not be accessed\"\n        }\n  # THROTTLED is handled by DEFAULT_4XX\n  UNAUTHORIZED:\n    statusCode: 401\n    responseParameters:\n      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n    responseTemplates:\n      application/json: |\n        {\n          \"code\": \"OTHER\",\n          \"message\": \"Authentication is required for this endpoint\"\n        }\n  # UNSUPPORTED_MEDIA_TYPE is handled by DEFAULT_4XX\n  # WAF_FILTERED is handled by DEFAULT_4XX"
		}
	},
	"Error": "callback: json: cannot unmarshal number into Go struct field Schema.exclusiveMinimum of type bool"
}