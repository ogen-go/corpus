{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/TykTechnologies/tyk-docs"
		},
		"file": {
			"name": "gateway-swagger.yml",
			"size": 0,
			"path": "tyk-docs/static/others/gateway-swagger.yml",
			"byteSize": 120344,
			"content": "openapi: 3.0.0\ninfo:\n  title: Tyk Gateway API\n  version: 3.2.0\n  description: |-\n    The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.\n\n    **Warning: Under no circumstances should outside parties be granted access to this API.**\n\n    The Tyk Gateway API is capable of:\n\n    * Managing session objects (key generation)\n    * Managing and listing policies\n    * Managing and listing API Definitions (only when not using the Dashboard)\n    * Hot reloads / reloading a cluster configuration\n    * OAuth client creation (only when not using the Dashboard)\n\n\n    In order to use the Gateway API, you'll need to set the `secret` parameter in your tyk.conf file.\n\n    The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:\n\n    ```\n    x-tyk-authorization: \u003cyour-secret\u003e\n    ```\n    \u003cbr/\u003e\n    \u003cb\u003eThe Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.\u003c/b\u003e\nservers:\n  - url: 'http://localhost/'\n  - url: 'https://localhost/'\ntags:\n  - name: Keys\n    description: |-\n      All keys that are used to access services via Tyk correspond to a session object that informs Tyk about the context of this particular token, like access rules and rate/quota allowance.\n  - name: Policies\n    description: |-\n      A Tyk security policy incorporates several security options that can be applied to an API key. It acts as a template that can override individual sections of an API key (or identity) in Tyk.\n  - name: OAuth\n    description: |-\n      Manage OAuth clients, and manage their tokens\n  - name: Cache Invalidation\n    description: |-\n      Sometimes a cache might contain stale data, or it may just need to be cleared because of an invalid configuration. This call will purge all keys associated with a cache on an API-by-API basis.\n  - name: Hot Reload\n    description:\n      Force restart of the Gateway or whole cluster\n  - name: Health Checking\n    description: Check health check of the Gateway and loaded APIs\n  - name: Organisation Quotas\n    description: |-\n      It is possible to force API quota and rate limit across all keys that belong to a specific organisation ID. Rate limiting at an organisation level is useful for creating tiered access levels and trial accounts.\n      The Organisation rate limiting middleware works with both Quotas and Rate Limiters. In order to manage this functionality, a simple API has been put in place to manage these sessions.\n      Although the Organisation session-limiter uses the same session object, all other security keys are optional as they are not used.\n\n      \u003ch3\u003eManaging active status\u003c/h3\u003e\n      To disallow access to an entire group of keys without rate limiting the organisation, create a session object with the \"is_inactive\" key set to true. This will block access before any other middleware is executed. It is useful when managing subscriptions for an organisation group and access needs to be blocked because of non-payment.\n  - name: Batch requests\n    description: |-\n      Tyk supports batch requests, so a client makes a single request to the API but gets a compound response object back.\n\n      This is especially handy if clients have complex requests that have multiple synchronous dependencies and do not wish to have the entire request / response cycle running for each event.\n\n      To enable batch request support, set the `enable_batch_request_support` value to `true`\n\n      This is especially handy if clients have complex requests that have multiple synchronous dependencies and do not wish to have the entire request / response cycle running for each event.\n\n      Batch requests that come into Tyk are *run through the whole Tyk machinery* and *use a relative path to prevent spamming*. This means that a batch request to Tyk for three resources with the same API key will have three requests applied to their session quota and request limiting could become active if they are being throttled.\n\n      Tyk reconstructs the API request based on the data in the batch request. This is to ensure that Tyk is not being used to proxy requests to other hosts outside of the upstream API being accessed.\n\n      Batch requests are created by POSTing to the `/{listen_path}/tyk/batch/` endpoint. These requests **do not require a valid key**, but their request list does.\n\n      \u003ch3\u003eSample Request\u003c/h3\u003e\n\n        ```{json}\n        {\n          \"requests\": [\n            {\n              \"method\": \"GET\",\n              \"headers\": {\n                \"x-tyk-test\": \"1\",\n                \"x-tyk-version\": \"1.2\",\n                \"authorization\": \"1dbc83b9c431649d7698faa9797e2900f\"\n              },\n              \"body\": \"\",\n              \"relative_url\": \"get\"\n          },\n          {\n            \"method\": \"GET\",\n            \"headers\": {\n              \"x-tyk-test\": \"2\",\n              \"x-tyk-version\": \"1.2\",\n              \"authorization\": \"1dbc83b9c431649d7698faa9797e2900f\"\n            },\n            \"body\": \"\",\n            \"relative_url\": \"get\"\n            }\n          ],\n          \"suppress_parallel_execution\": false\n        }\n        ```\n\n      The response will will be a structured reply that encapsulates the responses for each of the outbound requests. If `suppress_parallel_execution` is set to `true`, requests will be made synchronously. If set to `false` then they will run in parallel and the response order is not guaranteed.\n\n      \u003ch3\u003eSample Response\u003c/h3\u003e\n\n      ```\n      [\n        {\n          \"relative_url\": \"get\",\n          \"code\": 200,\n          \"headers\": {\n            \"Access-Control-Allow-Credentials\": [\n              \"true\"\n            ],\n            \"Access-Control-Allow-Origin\": [\n              \"*\"\n            ],\n            \"Content-Length\": [\n              \"497\"\n            ],\n            \"Content-Type\": [\n              \"application/json\"\n            ],\n            \"Date\": [\n              \"Wed, 12 Nov 2014 15:32:43 GMT\"\n            ],\n            \"Server\": [\n              \"gunicorn/18.0\"\n            ],\n            \"Via\": [\n              \"1.1 vegur\"\n            ]\n          },\n          \"body\": \"{\n        \"args\": {},\n        \"headers\": {\n          \"Accept-Encoding\": \"gzip\",\n          \"Authorization\": \"1dbc83b9c431649d7698faa9797e2900f\",\n          \"Connect-Time\": \"2\",\n          \"Connection\": \"close\",\n          \"Host\": \"httpbin.org\",\n          \"Total-Route-Time\": \"0\",\n          \"User-Agent\": \"Go 1.1 package http\",\n          \"Via\": \"1.1 vegur\",\n          \"X-Request-Id\": \"6a22499a-2776-4aa1-80c0-686581a8be4d\",\n          \"X-Tyk-Test\": \"2\",\n          \"X-Tyk-Version\": \"1.2\"\n        },\n        \"origin\": \"127.0.0.1, 62.232.114.250\",\n        \"url\": \"http://httpbin.org/get\"\n      }\"\n          },\n          {\n            \"relative_url\": \"get\",\n            \"code\": 200,\n            \"headers\": {\n              \"Access-Control-Allow-Credentials\": [\n                \"true\"\n              ],\n              \"Access-Control-Allow-Origin\": [\n                \"*\"\n              ],\n              \"Content-Length\": [\n                \"497\"\n              ],\n              \"Content-Type\": [\n                \"application/json\"\n              ],\n              \"Date\": [\n                \"Wed, 12 Nov 2014 15:32:43 GMT\"\n              ],\n              \"Server\": [\n                \"gunicorn/18.0\"\n              ],\n              \"Via\": [\n                \"1.1 vegur\"\n              ]\n            },\n            \"body\": \"{\n        \"args\": {},\n        \"headers\": {\n          \"Accept-Encoding\": \"gzip\",\n          \"Authorization\": \"1dbc83b9c431649d7698faa9797e2900f\",\n          \"Connect-Time\": \"7\",\n          \"Connection\": \"close\",\n          \"Host\": \"httpbin.org\",\n          \"Total-Route-Time\": \"0\",\n          \"User-Agent\": \"Go 1.1 package http\",\n          \"Via\": \"1.1 vegur\",\n          \"X-Request-Id\": \"1ab61f50-51ff-4828-a7e2-17240385a6d2\",\n          \"X-Tyk-Test\": \"1\",\n          \"X-Tyk-Version\": \"1.2\"\n        },\n        \"origin\": \"127.0.0.1, 62.232.114.250\",\n        \"url\": \"http://httpbin.org/get\"\n      }\"\n          }\n      ]\n      ```\n      With the body for each request string encoded in the `body` field.\n\n      * `expire_analytics_after`: If you are running a busy API, you may want to ensure that your MongoDB database does not overflow with old data. Set the `expire_analytics_after` value to the number of seconds you would like the data to last for. Setting this flag to anything above `0` will set an `expireAt` field for each record that is written to the database.\n\n      **Important:** Tyk will not create the expiry index for you. In order to implement data expiry for your analytics data, ensure that the index is created This is easily achieved using the [MongoDB command line interface](https://docs.mongodb.com/getting-started/shell/client/).\n\n      * `dont_set_quota_on_create`: This setting defaults to `false`, but if set to `true`, when the API is used to edit, create or add keys, the quota cache in Redis will not be re-set. By default, all updates or creates to Keys that have Quotas set will re-set the quota (This has been the default behaviour since 1.0).\n\n        This behaviour can be bypassed on a case-by-case basis by using the `suppress_reset` parameter when making a REST API request. This is the advised mode of operation as it allows for manual, granular control over key quotas and reset timings.\n\n      * `cache_options`: This section enables you to configure the caching behaviour of Tyk and to enable or disable the caching middleware for your API.\n\n      * `cache_options.enable_cache`: Set this value to `true` if the cache should be enabled for this endpoint, setting it to false will stop all caching behaviour.\n\n      * `cache_options.cache_timeout`: The amount of time, in seconds, to keep cached objects, defaults to `60` seconds.\n\n      * `cache_options.cache_all_safe_requests`: Set this to `true` if you want all *safe* requests (GET, HEAD, OPTIONS) to be cached. This is a blanket setting for APIs where caching is required but you don't want to set individual paths up in the definition.\n      \n      * `cache_options.enable_upstream_cache_control`: Set this to `true` if you want your application to control the cache options for Tyk (TTL and whether to cache or not). See [Caching](/docs/basic-config-and-security/reduce-latency/caching/) for more details.\n      \n      * `response_processors`: Response processors need to be specifically defined so they are loaded on API creation, otherwise the middleware will not fire. In order to have the two main response middleware components fire, the following configuration object should be supplied.\n\n      ```{json}\n      \"response_processors\": [\n        {\n            \"name\": \"header_injector\",\n            \"options\": {\n                \"add_headers\": {\"name\": \"value\"},\n                \"remove_headers\": [\"name\"]\n            }\n        },\n        {\n          \"name\": \"response_body_transform\",\n          \"options\": {}\n        }\n      ]\n      ```\n      The options for the `header_injector` are global, and will apply to all outbound requests.\n\n\n  - name: APIs\n    description: |-\n      **Note: Applies only to Tyk Gateway Community Edition**\n\n      API Management is very simple using the Tyk REST API: each update only affects the underlying file, and this endpoint will only work with disk based installations, not Database-backed ones.\n\n      APIs that are added this way are flushed to to disk into the app_path folder using the format: `{api-id}.json`. Updating existing APIs that use a different naming convention will cause those APIs to be added, which could subsequently lead to a loading error and crash if they use the same listen_path.\n\n      These methods only work on a single API node. If updating a cluster, it is important to ensure that all nodes are updated before initiating a reload.\npaths:\n  '/tyk/apis':\n    get:\n      description: |-\n        List APIs\n         Only if used without the Tyk Dashboard\n      tags:\n        - APIs\n      operationId: listApis\n      responses:\n        '200':\n          description: List of API definitions\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/APIDefinition'\n              example:\n                - name: \"TestAPI\"\n                  use_keyless: true\n                  active: true\n                  proxy:\n                    listen_path: \"/test\"\n    post:\n      description: |-\n        Create API\n         A single Tyk node can have its API Definitions queried, deleted and updated remotely. This functionality enables you to remotely update your Tyk definitions without having to manage the files manually.\n      tags:\n        - APIs\n      operationId: createApi\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/APIDefinition\"\n            example:\n              name: \"TestAPI\"\n              use_keyless: true\n              active: true\n              proxy:\n                listen_path: \"/test\"\n      responses:\n        '200':\n          description: API created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/apiModifyKeySuccess\"\n              example:\n                status: \"ok\"\n                action: \"created\"\n                key: \"{...API JSON definition...}\"\n        '400':\n          description: Malformed data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/apiStatusMessage\"\n              example:\n                status: \"error\"\n                message: \"Malformed API data\"\n  /tyk/apis/oas:\n    get:\n      description: |-\n         List all OAS format APIs, when used without the Tyk Dashboard.\n      tags:\n        - OASAPIs\n      operationId: listApisOAS\n      parameters:\n        - description: |- \n            Mode of OAS get, by default mode could be empty which means to get OAS spec including OAS Tyk extension. \n            When mode=public, OAS spec excluding Tyk extension will be returned in the response\n          name: mode\n          in: query\n          schema:\n            type: string\n          example: public\n      responses:\n        '200':\n          description: List of API definitions in OAS format\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OASSchemaResponse'\n    post:\n      description: |-\n        Create API with OAS format\n         A single Tyk node can have its API Definitions queried, deleted and updated remotely. This functionality enables you to remotely update your Tyk definitions without having to manage the files manually.\n      tags:\n        - OASAPIs\n      operationId: createApiOAS\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.0/schema.json\"\n      responses:\n        '200':\n          description: API created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/apiModifyKeySuccess\"\n              example:\n                status: \"ok\"\n                action: \"created\"\n                key: \"{...API JSON definition...}\"\n        '400':\n          description: Malformed data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/apiStatusMessage\"\n              example:\n                status: \"error\"\n                message: \"Malformed API data\"\n\n  '/tyk/apis/{apiID}':\n    parameters:\n      - description: The API ID\n        name: apiID\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      description: |-\n        Get API definition\n        Only if used without the Tyk Dashboard\n      tags:\n        - APIs\n      operationId: getApi\n      responses:\n        '200':\n          description: API definition\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIDefinition\"\n              example:\n                name: \"TestAPI\"\n                use_keyless: true\n                active: true\n                proxy:\n                  listen_path: \"/test\"\n    put:\n      description: |\n        Updating an API definition uses the same signature an object as a `POST`, however it will first ensure that the API ID that is being updated is the same as the one in the object being `PUT`.\n\n\n        Updating will completely replace the file descriptor and will not change an API Definition that has already been loaded, the hot-reload endpoint will need to be called to push the new definition to live.\n      tags:\n        - APIs\n      operationId: updateApi\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/APIDefinition\"\n            example:\n              name: \"TestAPI\"\n              use_keyless: true\n              active: true\n              proxy:\n                listen_path: \"/test\"\n      responses:\n        '200':\n          description: API updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/apiModifyKeySuccess\"\n              example:\n                status: \"ok\"\n                action: \"updated\"\n                key: \"{...API JSON definition...}\"\n        '400':\n          description: Malformed data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/apiStatusMessage\"\n              example:\n                status: \"error\"\n                message: \"Malformed API data\"\n\n    delete:\n      description: |-\n        Deleting an API definition will remove the file from the file store, the API definition will NOT be unloaded, a separate reload request will need to be made to disable the API endpoint.\n      tags:\n        - APIs\n      operationId: deleteApi\n      responses:\n        '200':\n          description: API deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiStatusMessage'\n              example:\n                message: API deleted\n                status: ok\n        '400':\n          description: No API ID specified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiStatusMessage'\n              example:\n                message: API ID not specified\n                status: error\n\n  '/tyk/apis/oas/{apiID}':\n    parameters:\n      - description: The API ID\n        name: apiID\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      description: |-\n        Get API definition in OAS format\n        Only if used without the Tyk Dashboard\n      tags:\n        - OASAPIs\n      parameters:\n        - description: |-\n            Mode of OAS get, by default mode could be empty which means to get OAS spec including OAS Tyk extension. \n            When mode=public, OAS spec excluding Tyk extension will be returned in the response\n          name: mode\n          in: query\n          schema:\n            type: string\n          example: public\n      operationId: listApiOAS\n      responses:\n        '200':\n          description: API definition\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OASSchemaResponse\"\n    put:\n      description: |\n        Updating an API definition uses the same signature an object as a `POST`, however it will first ensure that the API ID that is being updated is the same as the one in the object being `PUT`.\n\n\n        Updating will completely replace the file descriptor and will not change an API Definition that has already been loaded, the hot-reload endpoint will need to be called to push the new definition to live.\n      tags:\n        - OASAPIs\n      operationId: updateApiOAS\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.0/schema.json\"\n      responses:\n        '200':\n          description: API updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/apiModifyKeySuccess\"\n              example:\n                status: \"ok\"\n                action: \"updated\"\n                key: \"{...API JSON definition...}\"\n        '400':\n          description: Malformed data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/apiStatusMessage\"\n              example:\n                status: \"error\"\n                message: \"Malformed API data\"\n    patch:\n      summary: Patch a single OAS API by ID\n      description: |-\n        Update API with OAS format. You can use this endpoint to update OAS part of the tyk API definition.\n        This endpoint allows you to configure tyk OAS extension based on query params provided(similar to import)\n      tags:\n        - OASAPIs\n      operationId: patchApiOAS\n      parameters:\n        - $ref: '#/components/parameters/UpstreamURL'\n        - $ref: '#/components/parameters/ListenPath'\n        - $ref: '#/components/parameters/CustomDomain'\n        - $ref: '#/components/parameters/ValidateRequest'\n        - $ref: '#/components/parameters/AllowList'\n        - $ref: '#/components/parameters/Authentication'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.0/schema.json\"\n      responses:\n        '200':\n          description: API patched\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/apiModifyKeySuccess\"\n              example:\n                status: \"ok\"\n                action: \"modified\"\n                key: \"{updated APIID}\"\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/apiStatusMessage\"\n              examples:\n                malformedBody:\n                  summary: When the request body is malformed\n                  value:\n                    message: \"Request malformed\"\n                    status: \"error\"\n                missingAPIID:\n                  summary: When the request is missing APIID in query Param\n                  value:\n                    message: \"Must specify an apiID to patch\"\n                    status: \"error\"\n                nonExistingAPIID:\n                  summary: When the client sends and APIID which doesn't exists in tyk gw\n                  value:\n                    message: \"No API found for APIID {APIID}\"\n                    status: \"error\"\n                invalidUpstreamURL:\n                  summary: When the client sends query param upstreamURL which isn't valid\n                  value:\n                    message: \"invalid upstream URL\"\n                    status: \"error\"\n        500:\n          description: When patch request is send while using dashboard app configs\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/apiStatusMessage\"\n              example:\n                summary: dashboard app configs is used for tyk api definitions\n                value:\n                  message: \"Due to enabled use_db_app_configs, please use the Dashboard API\"\n                  status: \"error\"\n    delete:\n      description: |-\n        Deleting an API definition will remove the file from the file store, the API definition will NOT be unloaded, a separate reload request will need to be made to disable the API endpoint.\n      tags:\n        - OASAPIs\n      operationId: deleteOASApi\n      responses:\n        '200':\n          description: API deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiStatusMessage'\n              example:\n                message: API deleted\n                status: ok\n        '400':\n          description: No API ID specified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiStatusMessage'\n              example:\n                message: API ID not specified\n                status: error\n\n  '/tyk/apis/oas/{apiID}/export':\n    parameters:\n      - description: The API ID\n        name: apiID\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      description: |-\n        Download all OAS format APIs, when used without the Tyk Dashboard.\n      tags:\n        - OASAPIs\n      operationId: downloadApiOASPublic\n      parameters:\n        - description: |-\n            Mode of OAS export, by default mode could be empty which means to export OAS spec including OAS Tyk extension. \n            When mode=public, OAS spec excluding Tyk extension is exported\n          name: mode\n          in: query\n          schema:\n            type: string\n          example: public\n      responses:\n        '200':\n          description: API definition\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OASSchemaResponse\"\n  /tyk/apis/oas/export:\n    get:\n      description: |-\n        Download all OAS format APIs, when used without the Tyk Dashboard.\n      tags:\n        - OASAPIs\n      operationId: downloadApisOASPublic\n      parameters:\n        - description: |-\n            The mode of OAS export. By default the mode is not set which means the OAS spec is exported including the OAS Tyk extension.  \n            If the mode is set to public, the OAS spec excluding the Tyk extension is exported.\n          name: mode\n          in: query\n          schema:\n            type: string\n          example: public\n      responses:\n        '200':\n          description: API definition\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OASSchemaResponse'\n  /tyk/apis/oas/import:\n    post:\n      description: |-\n        Create a new OAS format API, without x-tyk-gateway.\n        For use with an existing OAS API that you want to expose via your Tyk Gateway. (New)\n      tags:\n        - OASAPIs\n      operationId: importOAS\n      parameters:\n        - $ref: '#/components/parameters/UpstreamURL'\n        - $ref: '#/components/parameters/ListenPath'\n        - $ref: '#/components/parameters/CustomDomain'\n        - $ref: '#/components/parameters/ApiID'\n        - $ref: '#/components/parameters/AllowList'\n        - $ref: '#/components/parameters/ValidateRequest'\n        - $ref: '#/components/parameters/Authentication'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.0/schema.json\"\n      responses:\n        '200':\n          description: API definition created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/apiModifyKeySuccess\"\n              example:\n                status: \"ok\"\n                action: \"added\"\n                key: \"{created APIID}\"\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/apiStatusMessage\"\n              examples:\n                malformedBody:\n                  summary: When the request body is malformed\n                  value:\n                    message: \"Request malformed\"\n                    status: \"error\"\n                invalidUpstreamURL:\n                  summary: When the client sends a query param upstreamURL which isn't valid\n                  value:\n                    message: \"invalid upstream URL\"\n                    status: \"error\"\n        500:\n         description: When an import request is sent using your Tyk Dashboard app configs\n         content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/apiStatusMessage\"\n              example:\n                summary: Tyk Dashboard app configs are being used for Tyk API definitions\n                value:\n                  message: \"Due to enabled use_db_app_configs, please use the Dashboard API\"\n                  status: \"error\"\n  '/tyk/cache/{apiID}':\n    parameters:\n      - description: The API ID\n        name: apiID\n        in: path\n        required: true\n        schema:\n          type: string\n    delete:\n      summary: Invalidate cache\n      description: Invalidate cache for the given API\n      tags:\n        - Cache Invalidation\n      operationId: invalidateCache\n      responses:\n        '200':\n          description: Invalidate cache\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiStatusMessage'\n              example:\n                message: cache invalidated\n                status: ok\n  '/tyk/reload/':\n    get:\n      summary: Hot-reload a single node\n      description: Tyk is capable of reloading configurations without having to stop serving requests. This means that API configurations can be added at runtime, or even modified at runtime and those rules applied immediately without any downtime.\n      parameters:\n        - description: Block a response until the reload is performed. This can be useful in scripting environments like CI/CD workflows.\n          name: block\n          in: query\n          required: false\n          schema:\n            type: boolean\n            enum: [true]\n      tags:\n        - Hot Reload\n      operationId: hotReload\n      responses:\n        '200':\n          description: Reload gateway\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiStatusMessage'\n              example:\n                status: ok\n  '/tyk/reload/group':\n    get:\n      summary: Hot-reload a Tyk group\n      description: To reload a whole group of Tyk nodes (without using the Dashboard or host manager). You can send an API request to a single node, this node will then send a notification through the pub/sub infrastructure to all other listening nodes (including the host manager if it is being used to manage NginX) which will then trigger a global reload.\n      tags:\n        - Hot Reload\n      operationId: hotReloadGroup\n      responses:\n        '200':\n          description: Reload the Tyk Gateway\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiStatusMessage'\n              example:\n                status: ok\n  '/tyk/hello':\n    get:\n      summary: Check the Health of the Tyk Gateway\n      description: |\n        From v2.7.5 you can now rename the `/hello`  endpoint by using the `health_check_endpoint_name` option\n        \n        Returns 200 response in case of success\n      tags:\n        - Health Checking\n      operationId: hello\n      responses:\n        '200':\n          description: Success\n          content:\n            text/html:\n              schema:\n                type: string\n              example: \"Hello Tiki\"\n  '/tyk/{listenPath}/hello':\n    parameters:\n      - in: path\n        name: listenPath\n        required: true\n        description: \"Listen path of loaded API\"\n        schema:\n          type: string\n    get:\n      summary: Check the Health of the API\n      description: Should point to API domain if it has its own\n      tags:\n        - Health Checking\n      operationId: helloAPI\n      responses:\n        '200':\n          description: Success\n          content:\n            text/html:\n              schema:\n                type: string\n              example: \"Hello Tiki\"\n  '/tyk/certs':\n    get:\n      parameters:\n        - description: Organisation ID to list the certificates\n          in: query\n          name: org_id\n          required: true\n          schema:\n            type: string\n        - description: Mode to list the certificate details\n          name: mode\n          in: query\n          required: false\n          schema:\n            type: string\n          example: 'detailed'\n        - description: Comma separated list of certificates to list\n          name: certID\n          in: query\n          required: false\n          schema:\n            type: string\n          example: 'e6ce2b49-3e31-44de-95a7-12f054724283,234a37ac-28d1-4f12-b936-ffb4211b79f1'\n      summary: List Certificates\n      description: List All Certificates in the Tyk Gateway\n      tags:\n        - Certs\n      operationId: listCerts\n      responses:\n        '200':\n          description: List of all Certificates\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/APIAllCertificates'\n                  - $ref: '#/components/schemas/APIAllCertificateBasics'\n                  - type: array\n                    items:\n                      $ref: '#/components/schemas/CertificateMeta'\n    post:\n      summary: Add a certificate\n      description: Add a certificate to the Tyk Gateway\n      tags:\n        - Certs\n      operationId: addCert\n      parameters:\n        - description: Organisation ID to list the certificates\n          in: query\n          name: org_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n      responses:\n        '200':\n          description: New Key added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/APICertificateStatusMessage'\n              example:\n                id: 'e6ce2b49-3e31-44de-95a7-12f054724283'\n                message: 'Certificate added'\n                status: ok\n        '403':\n          description: Malformed data\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiStatusMessage'\n              example:\n                message: Malformed cert data\n                status: error\n    delete:\n      parameters:\n        - description: Certifiicate ID to be deleted\n          in: query\n          name: certID\n          required: true\n          schema:\n            type: string\n        - description: Organisation ID to list the certificates\n          in: query\n          name: org_id\n          required: true\n          schema:\n            type: string\n      summary: Delete Certificate\n      description: Delete certificate by id\n      tags:\n        - Certs\n      operationId: deleteCerts\n      responses:\n        '200':\n          description: Deleted certificate\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiStatusMessage'\n              example:\n                message: removed\n                status: ok\n\n  '/tyk/keys':\n    get:\n      summary: List Keys\n      description: You can retrieve all the keys in your Tyk instance. Returns an array of Key IDs.\n      tags:\n        - Keys\n      operationId: listKeys\n      responses:\n        '200':\n          description: List of all API keys\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/apiAllKeys\"\n    post:\n      summary: Create a key\n      description: |-\n        Tyk will generate the access token based on the OrgID specified in the API Definition and a random UUID. This ensures that keys can be \"owned\" by different API Owners should segmentation be needed at an organisational level.\n        \u003cbr/\u003e\u003cbr/\u003e\n        API keys without access_rights data will be written to all APIs on the system (this also means that they will be created across all SessionHandlers and StorageHandlers, it is recommended to always embed access_rights data in a key to ensure that only targeted APIs and their back-ends are written to.\n      tags:\n        - Keys\n      operationId: addKey\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SessionState\"\n            example:\n              quota_max: 60\n              quota_renews: 1406121006\n              quota_renewal_rate: 60\n              allowance: 100\n              rate: 100\n              per: 5\n              org_id: 53ac07777cbb8c2d53000002\n      responses:\n        '200':\n          description: New Key added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiModifyKeySuccess'\n              example:\n                action: created\n                key: '{...KEY JSON definition...}'\n                status: ok\n        '400':\n          description: Malformed data\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiStatusMessage'\n              example:\n                message: Malformed Key data\n                status: error\n  '/tyk/keys/{keyID}':\n    parameters:\n      - description: The Key ID\n        name: keyID\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Get a Key\n      description: Get session info about the specified key. Should return up to date rate limit and quota usage numbers.\n      tags:\n        - Keys\n      operationId: getKey\n      responses:\n        '200':\n          description: Key object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SessionState'\n              example:\n                quota_max: 60\n                quota_renews: 1406121006\n                quota_renewal_rate: 60\n                allowance: 100\n                rate: 100\n                per: 5\n                org_id: 53ac07777cbb8c2d53000002\n    put:\n      summary: Update Key\n      description: |-\n        You can also manually add keys to Tyk using your own key-generation algorithm. It is recommended if using this approach to ensure that the OrgID being used in the API Definition and the key data is blank so that Tyk does not try to prepend or manage the key in any way.\n      tags:\n        - Keys\n      operationId: updateKey\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SessionState\"\n            example:\n              quota_max: 60\n              quota_renews: 1406121006\n              quota_renewal_rate: 60\n              allowance: 100\n              rate: 100\n              per: 5\n              org_id: 53ac07777cbb8c2d53000002\n      parameters:\n        - description: |-\n            Adding the suppress_reset parameter and setting it to 1, will cause Tyk not to reset the quota limit that is in the current live quota manager. By default Tyk will reset the quota in the live quota manager (initialising it) when adding a key. Adding the `suppress_reset` flag to the URL parameters will avoid this behaviour.\n          name: suppress_reset\n          in: query\n          required: false\n          schema:\n            type: string\n            enum: [\"1\"]\n      responses:\n        '200':\n          description: Key updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiModifyKeySuccess'\n              example:\n                action: updated\n                status: ok\n        '400':\n          description: No or incorrect Key ID specified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiStatusMessage'\n              example:\n                message: Key ID not specified\n                status: error\n    post:\n      summary: Create Custom Key / Import Key\n      description: |-\n        You can use the `POST /tyk/keys/{KEY_ID}` endpoint as defined below to import existing keys into Tyk.\n\n        This example uses standard `authorization` header authentication, and assumes that the Gateway is located at `127.0.0.1:8080` and the Tyk secret is `352d20ee67be67f6340b4c0605b044b7` - update these as necessary to match your environment.\n\n        To import a key called `mycustomkey`, save the JSON contents as `token.json` (see example below), then run the following Curl command.\n\n        ```\n        curl http://127.0.0.1:8080/tyk/keys/mycustomkey -H 'x-tyk-authorization: 352d20ee67be67f6340b4c0605b044b7' -H 'Content-Type: application/json'  -d @token.json\n        ```\n\n        The following request will fail as the key doesn't exist.\n\n        ```\n        curl http://127.0.0.1:8080/quickstart/headers -H 'Authorization. invalid123'\n        ```\n\n        But this request will now work, using the imported key.\n\n        ```\n        curl http://127.0.0.1:8080/quickstart/headers -H 'Authorization: mycustomkey'\n        ```\n\n        \u003ch4\u003eExample token.json file\u003ch4\u003e\n\n        ```\n        {\n          \"allowance\": 1000,\n          \"rate\": 1000,\n          \"per\": 60,\n          \"expires\": -1,\n          \"quota_max\": -1,\n          \"quota_renews\": 1406121006,\n          \"quota_remaining\": 0,\n          \"quota_renewal_rate\": 60,\n          \"access_rights\": {\n            \"3\": {\n              \"api_name\": \"Tyk Test API\",\n              \"api_id\": \"3\"\n            }\n          },\n          \"org_id\": \"53ac07777cbb8c2d53000002\",\n          \"basic_auth_data\": {\n            \"password\": \"\",\n            \"hash_type\": \"\"\n          },\n          \"hmac_enabled\": false,\n          \"hmac_string\": \"\",\n          \"is_inactive\": false,\n          \"apply_policy_id\": \"\",\n          \"apply_policies\": [\n            \"59672779fa4387000129507d\",\n            \"53222349fa4387004324324e\",\n            \"543534s9fa4387004324324d\"\n            ],\n          \"monitor\": {\n            \"trigger_limits\": []\n          }\n        }\n        ```\n      tags:\n        - Keys\n      operationId: createCustomKey\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SessionState\"\n            example:\n              quota_max: 60\n              quota_renews: 1406121006\n              quota_renewal_rate: 60\n              allowance: 100\n              rate: 100\n              per: 5\n              org_id: 53ac07777cbb8c2d53000002\n      parameters:\n        - description: |-\n            Adding the suppress_reset parameter and setting it to 1, will cause Tyk not to reset the quota limit that is in the current live quota manager. By default Tyk will reset the quota in the live quota manager (initialising it) when adding a key. Adding the `suppress_reset` flag to the URL parameters will avoid this behaviour.\n          name: suppress_reset\n          in: query\n          required: false\n          schema:\n            type: string\n            enum: [\"1\"]\n      responses:\n        '200':\n          description: Key updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiModifyKeySuccess'\n              example:\n                action: updated\n                status: ok\n        '400':\n          description: No or incorrect Key ID specified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiStatusMessage'\n              example:\n                message: Key ID not specified\n                status: error\n    delete:\n      summary: Delete Key\n      description: Deleting a key will remove it permanently from the system, however analytics relating to that key will still be available.\n      tags:\n        - Keys\n      operationId: deleteKey\n      responses:\n        '200':\n          description: Key deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiStatusMessage'\n              example:\n                action: Key deleted\n                status: ok\n  '/tyk/policies':\n    get:\n      summary: List Policies\n      description: You can retrieve all the policies in your Tyk instance. Returns an array policies.\n      tags:\n        - Policies\n      operationId: listPolicies\n      responses:\n        '200':\n          description: List of all policies\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Policy\"\n    post:\n      summary: Create a Policy\n      description: You can create a Policy in your Tyk Instance\n      tags:\n        - Policies\n      operationId: addPolicy\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Policy\"\n            example:\n              name: new policy\n              quota_max: 60\n              quota_renewal_rate: 60\n              allowance: 100\n              rate: 100\n              per: 5\n              org_id: 53ac07777cbb8c2d53000002\n      responses:\n        '200':\n          description: Policy created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiModifyKeySuccess'\n              example:\n                action: created\n                status: ok\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiStatusMessage'\n              example:\n                message: Request malformed\n                status: error\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiStatusMessage'\n              example:\n                message: Failed to create file!\n                status: error\n  '/tyk/policies/{polID}':\n    parameters:\n      - description: The policy ID\n        name: polID\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Get a Policy\n      description: You can retrieve details of a single policy by ID in your Tyk instance. Returns an array policies.\n      tags:\n        - Policies\n      operationId: getPolicy\n      responses:\n        '200':\n          description: Get details of a single Policy\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Policy\"\n        '404':\n          description: Policy not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiStatusMessage'\n              example:\n                message: Policy not found\n                status: error\n    put:\n      summary: Update a Policy\n      description: You can update a Policy in your Tyk Instance by ID\n      tags:\n        - Policies\n      operationId: updatePolicy\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Policy\"\n            example:\n              name: new policy\n              quota_max: 60\n              quota_renewal_rate: 60\n              allowance: 100\n              rate: 100\n              per: 5\n              org_id: 53ac07777cbb8c2d53000002\n      responses:\n        '200':\n          description: Policy updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiModifyKeySuccess'\n              example:\n                action: updated\n                status: ok\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiStatusMessage'\n              example:\n                message: PUT operation on different IDs\n                status: error\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiStatusMessage'\n              example:\n                message: Failed to create file!\n                status: error\n    delete:\n      summary: Delete a Policy\n      description: Delete a policy by ID in your Tyk instance.\n      tags:\n        - Policies\n      operationId: deletePolicy\n      responses:\n        '200':\n          description: Delete policy by ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiModifyKeySuccess'\n              example:\n                action: deleted\n                status: ok\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiStatusMessage'\n              example:\n                message: Delete failed\n                status: error\n  '/tyk/oauth/clients/create':\n    post:\n      summary: Create new OAuth client\n      description: Any OAuth keys must be generated with the help of a client ID. These need to be pre-registered with Tyk before they can be used (in a similar vein to how you would register your app with Twitter before attempting to ask user permissions using their API).\n        \u003cbr/\u003e\u003cbr/\u003e\n        \u003ch3\u003eCreating OAuth clients with Access to Multiple APIs\u003c/h3\u003e\n        New from Tyk Gateway 2.6.0 is the ability to create OAuth clients with access to more than one API. If you provide the api_id it works the same as in previous releases. If you don't provide the api_id the request uses policy access rights and enumerates APIs from their setting in the newly created OAuth-client.\n\n\n      tags:\n        - OAuth\n      operationId: createOAuthClient\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NewClientRequest\"\n            example:\n              client_id: test\n              api_id: id\n              policy_id: policy\n      responses:\n        '200':\n          description: Client created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NewClientRequest'\n              example:\n                client_id: test\n                api_id: id\n                policy_id: policy\n  '/tyk/oauth/clients/{apiID}':\n    put:\n      summary: Update OAuth metadata and Policy ID\n      description: Allows you to update the metadata and Policy ID for an OAuth client.\n      tags:\n        - OAuth\n      operationId: updateoAuthClient\n      parameters:\n        - description: The API ID\n          name: apiID\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OAuth client metadata updated\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NewClientRequest'\n    get:\n      summary: List oAuth clients\n      description: OAuth Clients are organised by API ID, and therefore are queried as such.\n      tags:\n        - OAuth\n      operationId: listOAuthClients\n      parameters:\n        - description: The API ID\n          name: apiID\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Get OAuth client details or a list of OAuth clients\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NewClientRequest'\n  '/tyk/oauth/clients/{apiID}/{keyName}':\n    get:\n      summary: Get OAuth client\n      tags:\n        - OAuth\n      operationId: getOAuthClient\n      parameters:\n        - description: The API ID\n          name: apiID\n          in: path\n          required: true\n          schema:\n            type: string\n            minimum: 1\n        - description: The Client ID\n          name: keyName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Get OAuth client details or a list of OAuth clients\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NewClientRequest'\n              example:\n                client_id: test\n                api_id: id\n                policy_id: policy\n    delete:\n      summary: Delete OAuth client\n      description: Please note that tokens issued with the client ID will still be valid until they expire.\n      tags:\n        - OAuth\n      operationId: deleteOAuthClient\n      parameters:\n        - description: The API ID\n          name: apiID\n          in: path\n          required: true\n          schema:\n            type: string\n            minimum: 1\n        - description: The Client ID\n          name: keyName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OAuth client deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiModifyKeySuccess'\n              example:\n                action: deleted\n                status: ok\n  '/tyk/oauth/clients/{apiID}/{keyName}/tokens':\n    get:\n      summary: List tokens\n      description: This endpoint allows you to retrieve a list of all current tokens and their expiry date for a provided API ID and OAuth-client ID in the following format. This endpoint will work only for newly created tokens.\n        \u003cbr/\u003e\n        \u003cbr/\u003e\n        You can control how long you want to store expired tokens in this list using `oauth_token_expired_retain_period` gateway option, which specifies retain period for expired tokens stored in Redis. By default expired token not get removed. See \u003ca href=\"https://tyk.io/docs/configure/tyk-gateway-configuration-options/#a-name-oauth-token-expired-retain-period-a-oauth-token-expired-retain-period\" target=\"_blank\"\u003ehere\u003c/a\u003e for more details.\n      tags:\n        - OAuth\n      operationId: getOAuthClientTokens\n      parameters:\n        - description: The API ID\n          name: apiID\n          in: path\n          required: true\n          schema:\n            type: string\n            minimum: 1\n        - description: The Client ID\n          name: keyName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Get a list of tokens\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n              example:\n                - \"tok1\"\n                - \"tok2\"\n  '/tyk/oauth/revoke':\n    post:\n      description: revoke a single token\n      summary: revoke token\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                token:\n                  description: token to be revoked\n                  type: string\n                client_id:\n                  description: id of oauth client\n                  type: string\n                token_type_hint:\n                  description: type of token to be revoked, if sent then the accepted values are access_token and refresh_token. String value and optional, of not provided then it will attempt to remove access and refresh tokens that matchs\n                  type: string\n            example:\n              token: eyJvcmciOiI1ZTIwOTFjNGQ0YWVmY2U2MGMwNGZiOTIiLCJpZCI6ImJlMjlhYjVkODc1OTRhZDJhYTBhNjAwNzFlNzE1ZmQxIiwiaCI6Im11cm11cjY0In0=\n              client_id: 411f0800957c4a3e81fe181141dbc22a\n      tags:\n        - OAuth\n      operationId: revokeSingleToken\n      responses:\n        '200':\n          description: Succesful response\n  '/tyk/oauth/revoke_all':\n    post:\n      description: revoke all the tokens for a given oauth client\n      summary: revoke all client's tokens\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                client_id:\n                  description: id of oauth client\n                  type: string\n                client_secret:\n                  description: OAuth client secret to ensure that its a valid operation\n                  type: string\n            example:\n              client_id: 411f0800957c4a3e81fe181141dbc22a\n              client_secret: N2Y0YjgzMjctMTEwNi00YWExLWJjM2MtYjg1NWZhM2M1NmNj\n      tags:\n        - OAuth\n      operationId: revokeAllTokens\n      responses:\n        '200':\n          description: Succesful response\n        '400':\n          description: Bad request, form malformed or client secret and client id doesn't match\n        '404':\n          description: oauth client doesn't have any api related\n\n  '/tyk/oauth/refresh/{keyName}':\n    delete:\n      summary: Invalidate OAuth refresh token\n      description: It is possible to invalidate refresh tokens in order to manage OAuth client access more robustly.\n      tags:\n        - OAuth\n      operationId: invalidateOAuthRefresh\n      parameters:\n        - description: The API id\n          name: api_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - description: Refresh token\n          name: keyName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiModifyKeySuccess'\n  '/tyk/oauth/authorize-client/':\n    post:\n      description: With the OAuth flow you will need to create authorisation or access tokens for your clients, in order to do this, Tyk provides a private API endpoint for your application to generate these codes and redirect the end-user back to the API Client.\n      summary: Authorize client\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                response_type:\n                  description: Should be provided by requesting client as part of authorisation request, this should be either `code` or `token` depending on the methods you have specified for the API.\n                  type: string\n                client_id:\n                  description: Should be provided by requesting client as part of authorisation request. The Client ID that is making the request.\n                  type: string\n                redirect_uri:\n                  description: Should be provided by requesting client as part of authorisation request. Must match with the record stored with Tyk.\n                  type: string\n                key_rules:\n                  description: A string representation of a Session Object (form-encoded). This should be provided by your application in order to apply any quotas or rules to the key.\n                  type: string\n            example:\n              response_type: code\n              client_id: 21e2baf424674f6461faca6d45285bbb\n              redirect_uri: http%3A%2F%2Foauth.com%2Fredirect\n              key_rules: '%7B+++++%22allowance%22%3A+999%2C+++++%22rate%22%3A+1000%2C+++++%22per%22%3A+60%2C+++++%22expires%22%3A+0%2C+++++%22quota_max%22%3A+-1%2C+++++%22quota_renews%22%3A+1406121006%2C+++++%22quota_remaining%22%3A+0%2C+++++%22quota_renewal_rate%22%3A+60%2C+++++%22access_rights%22%3A+%7B+++++++++%22528a67c1ac9940964f9a41ae79235fcc%22%3A+%7B+++++++++++++%22api_name%22%3A+%22OAuth+Test+API%22%2C+++++++++++++%22api_id%22%3A+%22528a67c1ac9940964f9a41ae79235fcc%22%2C+++++++++++++%22versions%22%3A+%5B+++++++++++++++++%22Default%22+++++++++++++%5D+++++++++%7D+++++%7D%2C+++++%22org_id%22%3A+%2253ac07777cbb8c2d53000002%22+%7D'\n      tags:\n        - OAuth\n      operationId: authorizeClient\n      responses:\n        '200':\n          description: Succesful response\n          content:\n            application/json:\n              schema:\n                type: object\n              example:\n                code: MWY0ZDRkMzktOTYwNi00NDRiLTk2YmQtOWQxOGQ3Mjc5Yzdk\n                redirect_to: 'http://client-app.com/oauth-redirect/?code=MWY0ZDRkMzktOTYwNi00NDRiLTk2YmQtOWQxOGQ3Mjc5Yzdk'\n  '/tyk/org/keys':\n    get:\n      summary: List Organisation Keys\n      description: |-\n        You can now set rate limits at the organisation level by using the following fields - allowance and rate. These are the number of allowed requests for the specified per value, and need to be set to the same value. If you don't want to have organisation level rate limiting, set 'rate' or 'per' to zero, or don't add them to your request.\n      tags:\n        - Organisation Quotas\n      operationId: listOrgKeys\n      responses:\n        '200':\n          description: List of all API keys\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  keys:\n                    type: array\n                    items:\n                      type: string\n              example:\n                keys:\n                  - \"key1\"\n                  - \"key2\"\n  '/tyk/org/keys/{keyID}':\n    parameters:\n      - description: The Key ID\n        name: keyID\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Get an Organisation Key\n      description: Get session info about specified orgnanisation key. Should return up to date rate limit and quota usage numbers.\n      tags:\n        - Organisation Quotas\n      operationId: getOrgKey\n      responses:\n        '200':\n          description: Key object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SessionState'\n    post:\n      summary: Create an organisation key\n      description: |-\n        This work similar to Keys API except that Key ID is always equals Organisation ID\n      tags:\n        - Organisation Quotas\n      operationId: addOrgKey\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SessionState\"\n            example:\n              quota_max: 60\n              quota_renews: 1406121006\n              quota_renewal_rate: 60\n              allowance: 100\n              rate: 100\n              per: 5\n              org_id: 53ac07777cbb8c2d53000002\n      responses:\n        '200':\n          description: New Key added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiModifyKeySuccess'\n              example:\n                action: created\n                key: '{...KEY JSON definition...}'\n                status: ok\n    put:\n      summary: Update Organisation Key\n      description: |-\n        This work similar to Keys API except that Key ID is always equals Organisation ID\n\n        For Gateway v2.6.0 onwards, you can now set rate limits at the organisation level by using the following fields - allowance and rate. These are the number of allowed requests for the specified per value, and need to be set to the same value. If you don't want to have organisation level rate limiting, set `rate` or `per` to zero, or don't add them to your request.\n      tags:\n        - Organisation Quotas\n      operationId: updateOrgKey\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SessionState\"\n            example:\n              quota_max: 60\n              quota_renews: 1406121006\n              quota_renewal_rate: 60\n              allowance: 100\n              rate: 100\n              per: 5\n              org_id: 53ac07777cbb8c2d53000002\n      parameters:\n        - description: |-\n            Adding the `reset_quota` parameter and setting it to 1, will cause Tyk reset the organisations quota in the live quota manager, it is recommended to use this mechanism to reset organisation-level access if a monthly subscription is in place.\n          name: reset_quota\n          in: query\n          required: false\n          schema:\n            type: string\n            enum: [\"1\"]\n      responses:\n        '200':\n          description: Key updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiModifyKeySuccess'\n              example:\n                action: updated\n                status: ok\n    delete:\n      summary: Delete Organisation Key\n      description: Deleting a key will remove all limits from organisation. It does not affects regualar keys created within organisation.\n      tags:\n        - Organisation Quotas\n      operationId: deleteOrgKey\n      responses:\n        '200':\n          description: Key deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/apiStatusMessage'\n              example:\n                action: Key deleted\n                status: ok\n  '/{listen_path}/tyk/batch':\n    parameters:\n      - name: listen_path\n        in: path\n        required: true\n        description: \"API listen path\"\n        schema:\n          type: string\n    post:\n      summary: Run batch request\n      tags:\n        - Batch requests\n      operationId: batch\n      responses:\n        '200':\n          $ref: '#/components/schemas/apiStatusMessage'\n  '/tyk/schema':\n    get:\n      description: |-\n        Get OAS schema\n      tags:\n        - Schema\n      operationId: getSchema\n      parameters:\n        - description: The OAS version\n          name: oasVersion\n          in: query\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OAS schema response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OASSchemaResponse'\n              example:\n                status: Success\n                schema: \u003copen api 3.0.3 schema\u003e\n        '400':\n          description: The response when the parameter oasVersion is missing\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OASSchemaResponse'\n              example:\n                message: 'Should provide a value for parameter oasVersion'\n                status: 'Failed'\n        '404':\n          description: The response when the requested OAS schema is not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OASSchemaResponse'\n              example:\n                message: 'Schema not found for version 5.0.0'\n                status: 'Failed'\n\ncomponents:\n  responses:\n    parameterBodies:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/OAuthClientToken'\n      description: parameterBodies\n  schemas:\n    APIDefinition:\n      properties:\n        tags:\n          items:\n            type: string\n          type: array\n          x-go-name: Tags\n        CORS:\n          properties:\n            allow_credentials:\n              type: boolean\n              x-go-name: AllowCredentials\n            allowed_headers:\n              items:\n                type: string\n              type: array\n              x-go-name: AllowedHeaders\n            allowed_methods:\n              items:\n                type: string\n              type: array\n              x-go-name: AllowedMethods\n            allowed_origins:\n              items:\n                type: string\n              type: array\n              x-go-name: AllowedOrigins\n            debug:\n              type: boolean\n              x-go-name: Debug\n            enable:\n              type: boolean\n              x-go-name: Enable\n            exposed_headers:\n              items:\n                type: string\n              type: array\n              x-go-name: ExposedHeaders\n            max_age:\n              format: int64\n              type: integer\n              x-go-name: MaxAge\n            options_passthrough:\n              type: boolean\n              x-go-name: OptionsPassthrough\n          type: object\n        active:\n          type: boolean\n          x-go-name: Active\n        allowed_ips:\n          items:\n            type: string\n          type: array\n          x-go-name: AllowedIPs\n        api_id:\n          type: string\n          x-go-name: APIID\n        auth:\n          $ref: '#/components/schemas/Auth'\n        auth_provider:\n          $ref: '#/components/schemas/AuthProviderMeta'\n        base_identity_provided_by:\n          $ref: '#/components/schemas/AuthTypeEnum'\n        basic_auth:\n          properties:\n            body_password_regexp:\n              type: string\n              x-go-name: BodyPasswordRegexp\n            body_user_regexp:\n              type: string\n              x-go-name: BodyUserRegexp\n            cache_ttl:\n              format: int64\n              type: integer\n              x-go-name: CacheTTL\n            disable_caching:\n              type: boolean\n              x-go-name: DisableCaching\n            extract_from_body:\n              type: boolean\n              x-go-name: ExtractFromBody\n          type: object\n          x-go-name: BasicAuth\n        blacklisted_ips:\n          items:\n            type: string\n          type: array\n          x-go-name: BlacklistedIPs\n        cache_options:\n          $ref: '#/components/schemas/CacheOptions'\n        certificates:\n          items:\n            type: string\n          type: array\n          x-go-name: Certificates\n        client_certificates:\n          items:\n            type: string\n          type: array\n          x-go-name: ClientCertificates\n        config_data:\n          additionalProperties:\n            type: object\n          type: object\n          x-go-name: ConfigData\n        custom_middleware:\n          $ref: '#/components/schemas/MiddlewareSection'\n        custom_middleware_bundle:\n          type: string\n          x-go-name: CustomMiddlewareBundle\n        definition:\n          properties:\n            key:\n              type: string\n              x-go-name: Key\n            location:\n              type: string\n              x-go-name: Location\n            strip_path:\n              type: boolean\n              x-go-name: StripPath\n          type: object\n          x-go-name: VersionDefinition\n        disable_quota:\n          type: boolean\n          x-go-name: DisableQuota\n        disable_rate_limit:\n          type: boolean\n          x-go-name: DisableRateLimit\n        do_not_track:\n          type: boolean\n          x-go-name: DoNotTrack\n        domain:\n          type: string\n          x-go-name: Domain\n        dont_set_quota_on_create:\n          type: boolean\n          x-go-name: DontSetQuotasOnCreate\n        enable_batch_request_support:\n          type: boolean\n          x-go-name: EnableBatchRequestSupport\n        enable_context_vars:\n          type: boolean\n          x-go-name: EnableContextVars\n        enable_coprocess_auth:\n          type: boolean\n          x-go-name: EnableCoProcessAuth\n        enable_ip_blacklisting:\n          type: boolean\n          x-go-name: EnableIpBlacklisting\n        enable_ip_whitelisting:\n          type: boolean\n          x-go-name: EnableIpWhiteListing\n        enable_jwt:\n          type: boolean\n          x-go-name: EnableJWT\n        enable_signature_checking:\n          type: boolean\n          x-go-name: EnableSignatureChecking\n        event_handlers:\n          $ref: '#/components/schemas/EventHandlerMetaConfig'\n        expire_analytics_after:\n          format: int64\n          type: integer\n          x-go-name: ExpireAnalyticsAfter\n        global_rate_limit:\n          $ref: '#/components/schemas/GlobalRateLimit'\n        hmac_allowed_algorithms:\n          items:\n            type: string\n          type: array\n          x-go-name: HmacAllowedAlgorithms\n        hmac_allowed_clock_skew:\n          format: double\n          type: number\n          x-go-name: HmacAllowedClockSkew\n        id:\n          $ref: '#/components/schemas/ObjectId'\n        internal:\n          type: boolean\n          x-go-name: Internal\n        jwt_client_base_field:\n          type: string\n          x-go-name: JWTClientIDBaseField\n        jwt_expires_at_validation_skew:\n          format: uint64\n          type: integer\n          x-go-name: JWTExpiresAtValidationSkew\n        jwt_identity_base_field:\n          type: string\n          x-go-name: JWTIdentityBaseField\n        jwt_issued_at_validation_skew:\n          format: uint64\n          type: integer\n          x-go-name: JWTIssuedAtValidationSkew\n        jwt_not_before_validation_skew:\n          format: uint64\n          type: integer\n          x-go-name: JWTNotBeforeValidationSkew\n        jwt_policy_field_name:\n          type: string\n          x-go-name: JWTPolicyFieldName\n        jwt_scope_claim_name:\n          type: string\n          x-go-name: JWTScopeClaimName\n        jwt_scope_to_policy_mapping:\n          additionalProperties:\n            type: string\n          type: object\n          x-go-name: JWTScopeToPolicyMapping\n        jwt_signing_method:\n          type: string\n          x-go-name: JWTSigningMethod\n        jwt_skip_kid:\n          type: boolean\n          x-go-name: JWTSkipKid\n        jwt_source:\n          type: string\n          x-go-name: JWTSource\n        name:\n          type: string\n          x-go-name: Name\n        notifications:\n          $ref: '#/components/schemas/NotificationsManager'\n        oauth_meta:\n          properties:\n            allowed_access_types:\n              items:\n                $ref: '#/components/schemas/AccessRequestType'\n              type: array\n              x-go-name: AllowedAccessTypes\n            allowed_authorize_types:\n              items:\n                $ref: '#/components/schemas/AuthorizeRequestType'\n              type: array\n              x-go-name: AllowedAuthorizeTypes\n            auth_login_redirect:\n              type: string\n              x-go-name: AuthorizeLoginRedirect\n          type: object\n          x-go-name: Oauth2Meta\n        openid_options:\n          $ref: '#/components/schemas/OpenIDOptions'\n        org_id:\n          type: string\n          x-go-name: OrgID\n        pinned_public_keys:\n          additionalProperties:\n            type: string\n          type: object\n          x-go-name: PinnedPublicKeys\n        proxy:\n          properties:\n            check_host_against_uptime_tests:\n              type: boolean\n              x-go-name: CheckHostAgainstUptimeTests\n            disable_strip_slash:\n              type: boolean\n              x-go-name: DisableStripSlash\n            enable_load_balancing:\n              type: boolean\n              x-go-name: EnableLoadBalancing\n            listen_path:\n              type: string\n              x-go-name: ListenPath\n            preserve_host_header:\n              type: boolean\n              x-go-name: PreserveHostHeader\n            service_discovery:\n              $ref: '#/components/schemas/ServiceDiscoveryConfiguration'\n            strip_listen_path:\n              type: boolean\n              x-go-name: StripListenPath\n            target_list:\n              items:\n                type: string\n              type: array\n              x-go-name: Targets\n            target_url:\n              type: string\n              x-go-name: TargetURL\n            transport:\n              properties:\n                proxy_url:\n                  type: string\n                  x-go-name: ProxyURL\n                ssl_ciphers:\n                  items:\n                    type: string\n                  type: array\n                  x-go-name: SSLCipherSuites\n                ssl_insecure_skip_verify:\n                  type: boolean\n                  x-go-name: SSLInsecureSkipVerify\n                ssl_min_version:\n                  format: uint16\n                  type: integer\n                  x-go-name: SSLMinVersion\n              type: object\n              x-go-name: Transport\n          type: object\n          x-go-name: Proxy\n        response_processors:\n          items:\n            $ref: '#/components/schemas/ResponseProcessor'\n          type: array\n          x-go-name: ResponseProcessors\n        session_lifetime:\n          format: int64\n          type: integer\n          x-go-name: SessionLifetime\n        session_provider:\n          $ref: '#/components/schemas/SessionProviderMeta'\n        slug:\n          type: string\n          x-go-name: Slug\n        strip_auth_data:\n          type: boolean\n          x-go-name: StripAuthData\n        tag_headers:\n          items:\n            type: string\n          type: array\n          x-go-name: TagHeaders\n        upstream_certificates:\n          additionalProperties:\n            type: string\n          type: object\n          x-go-name: UpstreamCertificates\n        uptime_tests:\n          properties:\n            check_list:\n              items:\n                $ref: '#/components/schemas/HostCheckObject'\n              type: array\n              x-go-name: CheckList\n            config:\n              properties:\n                expire_utime_after:\n                  format: int64\n                  type: integer\n                  x-go-name: ExpireUptimeAnalyticsAfter\n                recheck_wait:\n                  format: int64\n                  type: integer\n                  x-go-name: RecheckWait\n                service_discovery:\n                  $ref: '#/components/schemas/ServiceDiscoveryConfiguration'\n              type: object\n              x-go-name: Config\n          type: object\n          x-go-name: UptimeTests\n        use_basic_auth:\n          type: boolean\n          x-go-name: UseBasicAuth\n        use_keyless:\n          type: boolean\n          x-go-name: UseKeylessAccess\n        use_mutual_tls_auth:\n          type: boolean\n          x-go-name: UseMutualTLSAuth\n        use_oauth2:\n          type: boolean\n          x-go-name: UseOauth2\n        use_openid:\n          type: boolean\n          x-go-name: UseOpenID\n        use_standard_auth:\n          type: boolean\n          x-go-name: UseStandardAuth\n        version_data:\n          properties:\n            default_version:\n              type: string\n              x-go-name: DefaultVersion\n            not_versioned:\n              type: boolean\n              x-go-name: NotVersioned\n            versions:\n              additionalProperties:\n                $ref: '#/components/schemas/VersionInfo'\n              type: object\n              x-go-name: Versions\n          type: object\n          x-go-name: VersionData\n      title: \u003e-\n        APIDefinition represents the configuration for a single proxied API and\n        it's versions.\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    APILimit:\n      description: APILimit stores quota and rate limit on ACL level (per API)\n      properties:\n        per:\n          format: double\n          type: number\n          x-go-name: Per\n        quota_max:\n          format: int64\n          type: integer\n          x-go-name: QuotaMax\n        quota_remaining:\n          format: int64\n          type: integer\n          x-go-name: QuotaRemaining\n        quota_renewal_rate:\n          format: int64\n          type: integer\n          x-go-name: QuotaRenewalRate\n        quota_renews:\n          format: int64\n          type: integer\n          x-go-name: QuotaRenews\n        rate:\n          format: double\n          type: number\n          x-go-name: Rate\n        set_by_policy:\n          type: boolean\n          x-go-name: SetByPolicy\n        throttle_interval:\n          format: double\n          type: number\n          x-go-name: ThrottleInterval\n        throttle_retry_limit:\n          format: int64\n          type: integer\n          x-go-name: ThrottleRetryLimit\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/user\n    AccessDefinition:\n      description: AccessDefinition defines which versions of an API a key has access to\n      properties:\n        allowed_urls:\n          items:\n            $ref: '#/components/schemas/AccessSpec'\n          type: array\n          x-go-name: AllowedURLs\n        api_id:\n          type: string\n          x-go-name: APIID\n        api_name:\n          type: string\n          x-go-name: APIName\n        limit:\n          $ref: '#/components/schemas/APILimit'\n        versions:\n          items:\n            type: string\n          type: array\n          x-go-name: Versions\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/user\n    AccessRequestType:\n      description: AccessRequestType is the type for OAuth param `grant_type`\n      type: string\n      x-go-package: github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/osin\n    AccessSpec:\n      description: \u003e-\n        AccessSpecs define what URLS a user has access to an what methods are\n        enabled\n      properties:\n        methods:\n          items:\n            type: string\n          type: array\n          x-go-name: Methods\n        url:\n          type: string\n          x-go-name: URL\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/user\n    Auth:\n      properties:\n        auth_header_name:\n          type: string\n          x-go-name: AuthHeaderName\n        cookie_name:\n          type: string\n          x-go-name: CookieName\n        param_name:\n          type: string\n          x-go-name: ParamName\n        signature:\n          $ref: '#/components/schemas/SignatureConfig'\n        use_certificate:\n          type: boolean\n          x-go-name: UseCertificate\n        use_cookie:\n          type: boolean\n          x-go-name: UseCookie\n        use_param:\n          type: boolean\n          x-go-name: UseParam\n        validate_signature:\n          type: boolean\n          x-go-name: ValidateSignature\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    AuthProviderCode:\n      type: string\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    AuthProviderMeta:\n      properties:\n        meta:\n          additionalProperties:\n            type: object\n          type: object\n          x-go-name: Meta\n        name:\n          $ref: '#/components/schemas/AuthProviderCode'\n        storage_engine:\n          $ref: '#/components/schemas/StorageEngineCode'\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    AuthTypeEnum:\n      type: string\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    AuthorizeRequestType:\n      description: AuthorizeRequestType is the type for OAuth param `response_type`\n      type: string\n      x-go-package: github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/osin\n    CacheMeta:\n      properties:\n        cache_response_codes:\n          items:\n            format: int64\n            type: integer\n          type: array\n          x-go-name: CacheOnlyResponseCodes\n        cache_key_regex:\n          type: string\n          x-go-name: CacheKeyRegex\n        method:\n          type: string\n          x-go-name: Method\n        path:\n          type: string\n          x-go-name: Path\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    CacheOptions:\n      properties:\n        cache_all_safe_requests:\n          type: boolean\n          x-go-name: CacheAllSafeRequests\n        cache_control_ttl_header:\n          type: string\n          x-go-name: CacheControlTTLHeader\n        cache_response_codes:\n          items:\n            format: int64\n            type: integer\n          type: array\n          x-go-name: CacheOnlyResponseCodes\n        cache_timeout:\n          format: int64\n          type: integer\n          x-go-name: CacheTimeout\n        enable_cache:\n          type: boolean\n          x-go-name: EnableCache\n        enable_upstream_cache_control:\n          type: boolean\n          x-go-name: EnableUpstreamCacheControl\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    CircuitBreakerMeta:\n      properties:\n        method:\n          type: string\n          x-go-name: Method\n        path:\n          type: string\n          x-go-name: Path\n        return_to_service_after:\n          format: int64\n          type: integer\n          x-go-name: ReturnToServiceAfter\n        samples:\n          format: int64\n          type: integer\n          x-go-name: Samples\n        threshold_percent:\n          format: double\n          type: number\n          x-go-name: ThresholdPercent\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    EndPointMeta:\n      properties:\n        method_actions:\n          additionalProperties:\n            $ref: '#/components/schemas/EndpointMethodMeta'\n          type: object\n          x-go-name: MethodActions\n        path:\n          type: string\n          x-go-name: Path\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    EndpointMethodAction:\n      type: string\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    EndpointMethodMeta:\n      properties:\n        action:\n          $ref: '#/components/schemas/EndpointMethodAction'\n        code:\n          format: int64\n          type: integer\n          x-go-name: Code\n        data:\n          type: string\n          x-go-name: Data\n        headers:\n          additionalProperties:\n            type: string\n          type: object\n          x-go-name: Headers\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    EventHandlerMetaConfig:\n      properties:\n        events:\n          x-go-name: Events\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    ExtendedPathsSet:\n      properties:\n        advance_cache_config:\n          items:\n            $ref: '#/components/schemas/CacheMeta'\n          type: array\n          x-go-name: AdvanceCacheConfig\n        black_list:\n          items:\n            $ref: '#/components/schemas/EndPointMeta'\n          type: array\n          x-go-name: BlackList\n        cache:\n          items:\n            type: string\n          type: array\n          x-go-name: Cached\n        circuit_breakers:\n          items:\n            $ref: '#/components/schemas/CircuitBreakerMeta'\n          type: array\n          x-go-name: CircuitBreaker\n        do_not_track_endpoints:\n          items:\n            $ref: '#/components/schemas/TrackEndpointMeta'\n          type: array\n          x-go-name: DoNotTrackEndpoints\n        hard_timeouts:\n          items:\n            $ref: '#/components/schemas/HardTimeoutMeta'\n          type: array\n          x-go-name: HardTimeouts\n        ignored:\n          items:\n            $ref: '#/components/schemas/EndPointMeta'\n          type: array\n          x-go-name: Ignored\n        internal:\n          items:\n            $ref: '#/components/schemas/InternalMeta'\n          type: array\n          x-go-name: Internal\n        method_transforms:\n          items:\n            $ref: '#/components/schemas/MethodTransformMeta'\n          type: array\n          x-go-name: MethodTransforms\n        size_limits:\n          items:\n            $ref: '#/components/schemas/RequestSizeMeta'\n          type: array\n          x-go-name: SizeLimit\n        track_endpoints:\n          items:\n            $ref: '#/components/schemas/TrackEndpointMeta'\n          type: array\n          x-go-name: TrackEndpoints\n        transform:\n          items:\n            $ref: '#/components/schemas/TemplateMeta'\n          type: array\n          x-go-name: Transform\n        transform_headers:\n          items:\n            $ref: '#/components/schemas/HeaderInjectionMeta'\n          type: array\n          x-go-name: TransformHeader\n        transform_jq:\n          items:\n            $ref: '#/components/schemas/TransformJQMeta'\n          type: array\n          x-go-name: TransformJQ\n        transform_jq_response:\n          items:\n            $ref: '#/components/schemas/TransformJQMeta'\n          type: array\n          x-go-name: TransformJQResponse\n        transform_response:\n          items:\n            $ref: '#/components/schemas/TemplateMeta'\n          type: array\n          x-go-name: TransformResponse\n        transform_response_headers:\n          items:\n            $ref: '#/components/schemas/HeaderInjectionMeta'\n          type: array\n          x-go-name: TransformResponseHeader\n        url_rewrites:\n          items:\n            $ref: '#/components/schemas/URLRewriteMeta'\n          type: array\n          x-go-name: URLRewrite\n        validate_json:\n          items:\n            $ref: '#/components/schemas/ValidatePathMeta'\n          type: array\n          x-go-name: ValidateJSON\n        virtual:\n          items:\n            $ref: '#/components/schemas/VirtualMeta'\n          type: array\n          x-go-name: Virtual\n        white_list:\n          items:\n            $ref: '#/components/schemas/EndPointMeta'\n          type: array\n          x-go-name: WhiteList\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    GlobalRateLimit:\n      properties:\n        per:\n          format: double\n          type: number\n          x-go-name: Per\n        rate:\n          format: double\n          type: number\n          x-go-name: Rate\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    GraphAccessDefinition:\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/user\n    HardTimeoutMeta:\n      properties:\n        method:\n          type: string\n          x-go-name: Method\n        path:\n          type: string\n          x-go-name: Path\n        timeout:\n          format: int64\n          type: integer\n          x-go-name: TimeOut\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    HashType:\n      type: string\n      x-go-package: github.com/TykTechnologies/tyk/user\n    HeaderInjectionMeta:\n      properties:\n        act_on:\n          type: boolean\n          x-go-name: ActOnResponse\n        add_headers:\n          additionalProperties:\n            type: string\n          type: object\n          x-go-name: AddHeaders\n        delete_headers:\n          items:\n            type: string\n          type: array\n          x-go-name: DeleteHeaders\n        method:\n          type: string\n          x-go-name: Method\n        path:\n          type: string\n          x-go-name: Path\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    HostCheckObject:\n      properties:\n        body:\n          type: string\n          x-go-name: Body\n        headers:\n          additionalProperties:\n            type: string\n          type: object\n          x-go-name: Headers\n        method:\n          type: string\n          x-go-name: Method\n        url:\n          type: string\n          x-go-name: CheckURL\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    IdExtractorSource:\n      type: string\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    IdExtractorType:\n      type: string\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    InternalMeta:\n      properties:\n        method:\n          type: string\n          x-go-name: Method\n        path:\n          type: string\n          x-go-name: Path\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    MethodTransformMeta:\n      properties:\n        method:\n          type: string\n          x-go-name: Method\n        path:\n          type: string\n          x-go-name: Path\n        to_method:\n          type: string\n          x-go-name: ToMethod\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    MiddlewareDefinition:\n      properties:\n        name:\n          type: string\n          x-go-name: Name\n        path:\n          type: string\n          x-go-name: Path\n        require_session:\n          type: boolean\n          x-go-name: RequireSession\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    MiddlewareDriver:\n      type: string\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    MiddlewareIdExtractor:\n      properties:\n        extract_from:\n          $ref: '#/components/schemas/IdExtractorSource'\n        extract_with:\n          $ref: '#/components/schemas/IdExtractorType'\n        extractor_config:\n          additionalProperties:\n            type: object\n          type: object\n          x-go-name: ExtractorConfig\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    MiddlewareSection:\n      properties:\n        auth_check:\n          $ref: '#/components/schemas/MiddlewareDefinition'\n        driver:\n          $ref: '#/components/schemas/MiddlewareDriver'\n        id_extractor:\n          $ref: '#/components/schemas/MiddlewareIdExtractor'\n        post:\n          items:\n            $ref: '#/components/schemas/MiddlewareDefinition'\n          type: array\n          x-go-name: Post\n        post_key_auth:\n          items:\n            $ref: '#/components/schemas/MiddlewareDefinition'\n          type: array\n          x-go-name: PostKeyAuth\n        pre:\n          items:\n            $ref: '#/components/schemas/MiddlewareDefinition'\n          type: array\n          x-go-name: Pre\n        response:\n          items:\n            $ref: '#/components/schemas/MiddlewareDefinition'\n          type: array\n          x-go-name: Response\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    NewClientRequest:\n      description: \u003e-\n        NewClientRequest is an outward facing JSON object translated from osin\n        OAuthClients\n      properties:\n        api_id:\n          type: string\n          x-go-name: APIID\n        client_id:\n          type: string\n          x-go-name: ClientID\n        description:\n          type: string\n          x-go-name: Description\n        meta_data:\n          type: object\n          x-go-name: MetaData\n        policy_id:\n          type: string\n          x-go-name: PolicyID\n        redirect_uri:\n          type: string\n          x-go-name: ClientRedirectURI\n        secret:\n          type: string\n          x-go-name: ClientSecret\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk\n    NotificationsManager:\n      description: 'TODO: Make this more generic'\n      properties:\n        oauth_on_keychange_url:\n          type: string\n          x-go-name: OAuthKeyChangeURL\n        shared_secret:\n          type: string\n          x-go-name: SharedSecret\n      title: \u003e-\n        NotificationsManager handles sending notifications to OAuth endpoints to\n        notify the provider of key changes.\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    OAuthClientToken:\n      properties:\n        code:\n          type: string\n          x-go-name: Token\n        expires:\n          format: int64\n          type: integer\n          x-go-name: Expires\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk\n    OIDProviderConfig:\n      properties:\n        client_ids:\n          additionalProperties:\n            type: string\n          type: object\n          x-go-name: ClientIDs\n        issuer:\n          type: string\n          x-go-name: Issuer\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    ObjectId:\n      description: 'http://www.mongodb.org/display/DOCS/Object+IDs'\n      title: \u003e-\n        ObjectId is a unique ID identifying a BSON value. It must be exactly 12\n        bytes\n\n        long. MongoDB objects by default have such a property set in their \"_id\"\n\n        property.\n      type: string\n      x-go-package: github.com/TykTechnologies/tyk/vendor/gopkg.in/mgo.v2/bson\n    OpenIDOptions:\n      properties:\n        providers:\n          items:\n            $ref: '#/components/schemas/OIDProviderConfig'\n          type: array\n          x-go-name: Providers\n        segregate_by_client:\n          type: boolean\n          x-go-name: SegregateByClient\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    Policy:\n      properties:\n        _id:\n          $ref: '#/components/schemas/ObjectId'\n          type: object\n          x-go-name: ID\n        id:\n          type: string\n          x-go-name: ID\n        name:\n          type: string\n          x-go-name: Name\n        org_id:\n          type: string\n          x-go-name: OrgID\n        rate:\n          format: double\n          type: number\n          x-go-name: Rate\n        per:\n          format: double\n          type: number\n          x-go-name: Per\n        quota_max:\n          format: int64\n          type: integer\n          x-go-name: QuotaMax\n        quota_renewal_rate:\n          format: int64\n          type: integer\n          x-go-name: QuotaRenewalRate\n        throttle_interval:\n          format: double\n          type: number\n          x-go-name: ThrottleInterval\n        throttle_retry_limit:\n          type: number\n          x-go-name: ThrottleRetryLimit\n        max_query_depth:\n          type: number\n          x-go-name: MaxQueryDepth\n        access_rights:\n          $ref: '#/components/schemas/AccessDefinition'\n          type: object\n          x-go-name: AccessRights\n        hmac_enabled:\n          type: boolean\n          x-go-name: HMACEnabled\n        enable_http_signature_validation:\n          type: boolean\n          x-go-name: EnableHTTPSignatureValidation\n        active:\n          type: boolean\n          x-go-name: Active\n        is_inactive:\n          type: boolean\n          x-go-name: IsInactive\n        tags:\n          type: array\n          items:\n            type: string\n          x-go-name: Tags\n        key_expires_in:\n          format: int64\n          type: number\n          x-go-name: KeyExpiresIn\n        partitions:\n          $ref: '#/components/schemas/PolicyPartitions'\n          type: object\n          x-go-name: Partitions\n        last_updated:\n          type: string\n          x-go-name: LastUpdates\n        meta_data:\n          type: object\n          x-go-name: MetaData\n        graphql_access_rights:\n          $ref: '#/components/schemas/GraphAccessDefinition'\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/user\n    PolicyPartitions:\n      properties:\n        quota:\n          type: boolean\n          x-go-name: Quota\n        rate_limit:\n          type: boolean\n          x-go-name: RateLimit\n        complexity:\n          type: boolean\n          x-go-name: Complexity\n        acl:\n          type: boolean\n          x-go-name: Acl\n        per_api:\n          type: boolean\n          x-go-name: PerAPI\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/user\n    Regexp:\n      description: Regexp is a wrapper around regexp.Regexp but with caching\n      properties:\n        FromCache:\n          type: boolean\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/regexp\n    RequestInputType:\n      type: string\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    RequestSizeMeta:\n      properties:\n        method:\n          type: string\n          x-go-name: Method\n        path:\n          type: string\n          x-go-name: Path\n        size_limit:\n          format: int64\n          type: integer\n          x-go-name: SizeLimit\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    ResponseProcessor:\n      properties:\n        name:\n          type: string\n          x-go-name: Name\n        options:\n          type: object\n          x-go-name: Options\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    RoutingTrigger:\n      properties:\n        'on':\n          $ref: '#/components/schemas/RoutingTriggerOnType'\n        options:\n          $ref: '#/components/schemas/RoutingTriggerOptions'\n        rewrite_to:\n          type: string\n          x-go-name: RewriteTo\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    RoutingTriggerOnType:\n      type: string\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    RoutingTriggerOptions:\n      properties:\n        header_matches:\n          additionalProperties:\n            $ref: '#/components/schemas/StringRegexMap'\n          type: object\n          x-go-name: HeaderMatches\n        path_part_matches:\n          additionalProperties:\n            $ref: '#/components/schemas/StringRegexMap'\n          type: object\n          x-go-name: PathPartMatches\n        payload_matches:\n          $ref: '#/components/schemas/StringRegexMap'\n        query_val_matches:\n          additionalProperties:\n            $ref: '#/components/schemas/StringRegexMap'\n          type: object\n          x-go-name: QueryValMatches\n        request_context_matches:\n          additionalProperties:\n            $ref: '#/components/schemas/StringRegexMap'\n          type: object\n          x-go-name: RequestContextMatches\n        session_meta_matches:\n          additionalProperties:\n            $ref: '#/components/schemas/StringRegexMap'\n          type: object\n          x-go-name: SessionMetaMatches\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    ServiceDiscoveryConfiguration:\n      properties:\n        cache_timeout:\n          format: int64\n          type: integer\n          x-go-name: CacheTimeout\n        data_path:\n          type: string\n          x-go-name: DataPath\n        endpoint_returns_list:\n          type: boolean\n          x-go-name: EndpointReturnsList\n        parent_data_path:\n          type: string\n          x-go-name: ParentDataPath\n        port_data_path:\n          type: string\n          x-go-name: PortDataPath\n        query_endpoint:\n          type: string\n          x-go-name: QueryEndpoint\n        target_path:\n          type: string\n          x-go-name: TargetPath\n        use_discovery_service:\n          type: boolean\n          x-go-name: UseDiscoveryService\n        use_nested_query:\n          type: boolean\n          x-go-name: UseNestedQuery\n        use_target_list:\n          type: boolean\n          x-go-name: UseTargetList\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    SessionProviderCode:\n      type: string\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    SessionProviderMeta:\n      properties:\n        meta:\n          additionalProperties:\n            type: object\n          type: object\n          x-go-name: Meta\n        name:\n          $ref: '#/components/schemas/SessionProviderCode'\n        storage_engine:\n          $ref: '#/components/schemas/StorageEngineCode'\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    SessionState:\n      description: \u003e-\n        There's a data structure that's based on this and it's used for Protocol\n        Buffer support, make sure to update\n        \"coprocess/proto/coprocess_session_state.proto\" and generate the\n        bindings using: cd coprocess/proto \u0026\u0026 ./update_bindings.sh\n      properties:\n        tags:\n          items:\n            type: string\n          type: array\n          x-go-name: Tags\n        access_rights:\n          additionalProperties:\n            $ref: '#/components/schemas/AccessDefinition'\n          type: object\n          x-go-name: AccessRights\n        alias:\n          type: string\n          x-go-name: Alias\n        allowance:\n          format: double\n          type: number\n          x-go-name: Allowance\n        apply_policies:\n          items:\n            type: string\n          type: array\n          x-go-name: ApplyPolicies\n        apply_policy_id:\n          type: string\n          x-go-name: ApplyPolicyID\n        basic_auth_data:\n          properties:\n            hash_type:\n              $ref: '#/components/schemas/HashType'\n            password:\n              type: string\n              x-go-name: Password\n          type: object\n          x-go-name: BasicAuthData\n        certificate:\n          type: string\n          x-go-name: Certificate\n        data_expires:\n          format: int64\n          type: integer\n          x-go-name: DataExpires\n        enable_detail_recording:\n          type: boolean\n          x-go-name: EnableDetailedRecording\n        expires:\n          format: int64\n          type: integer\n          x-go-name: Expires\n        hmac_enabled:\n          type: boolean\n          x-go-name: HMACEnabled\n        hmac_string:\n          type: string\n          x-go-name: HmacSecret\n        id_extractor_deadline:\n          format: int64\n          type: integer\n          x-go-name: IdExtractorDeadline\n        is_inactive:\n          type: boolean\n          x-go-name: IsInactive\n        jwt_data:\n          properties:\n            secret:\n              type: string\n              x-go-name: Secret\n          type: object\n          x-go-name: JWTData\n        last_check:\n          format: int64\n          type: integer\n          x-go-name: LastCheck\n        last_updated:\n          type: string\n          x-go-name: LastUpdated\n        meta_data:\n          additionalProperties:\n            type: object\n          type: object\n          x-go-name: MetaData\n        monitor:\n          properties:\n            trigger_limits:\n              items:\n                format: double\n                type: number\n              type: array\n              x-go-name: TriggerLimits\n          type: object\n          x-go-name: Monitor\n        oauth_client_id:\n          type: string\n          x-go-name: OauthClientID\n        oauth_keys:\n          additionalProperties:\n            type: string\n          type: object\n          x-go-name: OauthKeys\n        org_id:\n          type: string\n          x-go-name: OrgID\n        per:\n          format: double\n          type: number\n          x-go-name: Per\n        quota_max:\n          format: int64\n          type: integer\n          x-go-name: QuotaMax\n        quota_remaining:\n          format: int64\n          type: integer\n          x-go-name: QuotaRemaining\n        quota_renewal_rate:\n          format: int64\n          type: integer\n          x-go-name: QuotaRenewalRate\n        quota_renews:\n          format: int64\n          type: integer\n          x-go-name: QuotaRenews\n        rate:\n          format: double\n          type: number\n          x-go-name: Rate\n        session_lifetime:\n          format: int64\n          type: integer\n          x-go-name: SessionLifetime\n        throttle_interval:\n          format: double\n          type: number\n          x-go-name: ThrottleInterval\n        throttle_retry_limit:\n          format: int64\n          type: integer\n          x-go-name: ThrottleRetryLimit\n      title: \u003e-\n        SessionState objects represent a current API session, mainly used for\n        rate limiting.\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/user\n    SignatureConfig:\n      properties:\n        algorithm:\n          type: string\n          x-go-name: Algorithm\n        allowed_clock_skew:\n          format: int64\n          type: integer\n          x-go-name: AllowedClockSkew\n        error_code:\n          format: int64\n          type: integer\n          x-go-name: ErrorCode\n        error_message:\n          type: string\n          x-go-name: ErrorMessage\n        header:\n          type: string\n          x-go-name: Header\n        secret:\n          type: string\n          x-go-name: Secret\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    StorageEngineCode:\n      type: string\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    StringRegexMap:\n      properties:\n        match_rx:\n          type: string\n          x-go-name: MatchPattern\n        reverse:\n          type: boolean\n          x-go-name: Reverse\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    TemplateData:\n      properties:\n        enable_session:\n          type: boolean\n          x-go-name: EnableSession\n        input_type:\n          $ref: '#/components/schemas/RequestInputType'\n        template_mode:\n          $ref: '#/components/schemas/TemplateMode'\n        template_source:\n          type: string\n          x-go-name: TemplateSource\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    TemplateMeta:\n      properties:\n        method:\n          type: string\n          x-go-name: Method\n        path:\n          type: string\n          x-go-name: Path\n        template_data:\n          $ref: '#/components/schemas/TemplateData'\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    TemplateMode:\n      type: string\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    TrackEndpointMeta:\n      properties:\n        method:\n          type: string\n          x-go-name: Method\n        path:\n          type: string\n          x-go-name: Path\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    TransformJQMeta:\n      properties:\n        filter:\n          type: string\n          x-go-name: Filter\n        method:\n          type: string\n          x-go-name: Method\n        path:\n          type: string\n          x-go-name: Path\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    URLRewriteMeta:\n      properties:\n        MatchRegexp:\n          $ref: '#/components/schemas/Regexp'\n        match_pattern:\n          type: string\n          x-go-name: MatchPattern\n        method:\n          type: string\n          x-go-name: Method\n        path:\n          type: string\n          x-go-name: Path\n        rewrite_to:\n          type: string\n          x-go-name: RewriteTo\n        triggers:\n          items:\n            $ref: '#/components/schemas/RoutingTrigger'\n          type: array\n          x-go-name: Triggers\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    ValidatePathMeta:\n      properties:\n        error_response_code:\n          description: \u003e-\n            Allows override of default 422 Unprocessible Entity response code\n            for validation errors.\n          format: int64\n          type: integer\n          x-go-name: ErrorResponseCode\n        method:\n          type: string\n          x-go-name: Method\n        path:\n          type: string\n          x-go-name: Path\n        schema:\n          additionalProperties:\n            type: object\n          type: object\n          x-go-name: Schema\n        schema_b64:\n          type: string\n          x-go-name: SchemaB64\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    VersionInfo:\n      properties:\n        paths:\n          properties:\n            black_list:\n              items:\n                type: string\n              type: array\n              x-go-name: BlackList\n            ignored:\n              items:\n                type: string\n              type: array\n              x-go-name: Ignored\n            white_list:\n              items:\n                type: string\n              type: array\n              x-go-name: WhiteList\n          type: object\n          x-go-name: Paths\n        expires:\n          type: string\n          x-go-name: Expires\n        extended_paths:\n          $ref: '#/components/schemas/ExtendedPathsSet'\n        global_headers:\n          additionalProperties:\n            type: string\n          type: object\n          x-go-name: GlobalHeaders\n        global_headers_remove:\n          items:\n            type: string\n          type: array\n          x-go-name: GlobalHeadersRemove\n        global_size_limit:\n          format: int64\n          type: integer\n          x-go-name: GlobalSizeLimit\n        name:\n          type: string\n          x-go-name: Name\n        override_target:\n          type: string\n          x-go-name: OverrideTarget\n        use_extended_paths:\n          type: boolean\n          x-go-name: UseExtendedPaths\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    VirtualMeta:\n      properties:\n        function_source_type:\n          type: string\n          x-go-name: FunctionSourceType\n        function_source_uri:\n          type: string\n          x-go-name: FunctionSourceURI\n        method:\n          type: string\n          x-go-name: Method\n        path:\n          type: string\n          x-go-name: Path\n        proxy_on_error:\n          type: boolean\n          x-go-name: ProxyOnError\n        response_function_name:\n          type: string\n          x-go-name: ResponseFunctionName\n        use_session:\n          type: boolean\n          x-go-name: UseSession\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk/apidef\n    apiAllKeys:\n      description: apiAllKeys represents a list of keys in the memory store\n      properties:\n        keys:\n          items:\n            type: string\n          type: array\n          x-go-name: APIKeys\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk\n    apiModifyKeySuccess:\n      description: apiModifyKeySuccess represents when a Key modification was successful\n      properties:\n        action:\n          type: string\n          x-go-name: Action\n        key:\n          description: 'in:body'\n          type: string\n          x-go-name: Key\n        key_hash:\n          type: string\n          x-go-name: KeyHash\n        status:\n          type: string\n          x-go-name: Status\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk\n    apiStatusMessage:\n      description: apiStatusMessage represents an API status message\n      properties:\n        message:\n          description: Response details\n          type: string\n          x-go-name: Message\n        status:\n          type: string\n          x-go-name: Status\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk\n    APIAllCertificates:\n      description:  APIAllCertificates represents a list of certificates\n      properties:\n        certs:\n          items:\n            type: string\n          type: array\n          x-go-name: Certs\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk\n    APIAllCertificateBasics:\n      description: APIAllCertificates represents a list of certificate basics\n      properties:\n        certs:\n          items:\n            $ref: '#/components/schemas/CertificateBasics'\n          type: array\n          x-go-name: Certs\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk\n    CertificateBasics:\n      description: CertificateBasics represents basic details of a certificate\n      properties:\n        id:\n          type: string\n          x-go-name: ID\n        issuer_cn:\n          type: string\n          x-go-name: IssuerCN\n        subject_cn:\n          type: string\n          x-go-name: SubjectCN\n        dns_names:\n          type: array\n          items:\n            type: string\n          x-go-name: DNSNames\n        has_private:\n          type: string\n          x-go-name: HasPrivateKey\n        not_before:\n          type: string\n          x-go-name: NotBefore\n        not_after:\n          type: string\n          x-go-name: NotAfter\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk\n    CertificateMeta:\n      description: CertificateBasics represents basic details of a certificate\n      properties:\n        id:\n          type: string\n          x-go-name: ID\n        fingerprint:\n          type: string\n          x-go-name: Fingerprint\n        has_private:\n          type: string\n          x-go-name: HasPrivateKey\n        issuer:\n          $ref: '#/components/schemas/pkixName'\n        subject:\n          $ref: '#/components/schemas/pkixName'\n        not_before:\n          type: string\n          x-go-name: NotBefore\n        not_after:\n          type: string\n          x-go-name: NotAfter\n        dns_names:\n          type: array\n          items:\n            type: string\n          x-go-name: DNSNames\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk\n    pkixName:\n      description: Name represents an X.509 distinguished name\n      properties:\n        Country:\n          type: array\n          items:\n            type: string\n        Organization:\n          type: array\n          items:\n            type: string\n        OrganizationalUnit:\n          type: array\n          items:\n            type: string\n        Locality:\n          type: array\n          items:\n            type: string\n        Province:\n          type: array\n          items:\n            type: string\n        StreetAddress:\n          type: array\n          items:\n            type: string\n        PostalCode:\n          type: array\n          items:\n            type: string\n        SerialNumber:\n          type: string\n        CommonName:\n          type: string\n        Names:\n          type: array\n          items:\n            $ref: '#/components/schemas/pkixAttributeTypeAndValue'\n        ExtraNames:\n          type: array\n          items:\n            $ref: '#/components/schemas/pkixAttributeTypeAndValueSET'\n    pkixAttributeTypeAndValue:\n      description: AttributeTypeAndValue mirrors the ASN.1 structure of the same name in RFC 5280, Section 4.1.2.4.\n      properties:\n        Type:\n          type: array\n          items:\n            type: integer\n        Value:\n          type: object\n    pkixAttributeTypeAndValueSET:\n      description: AttributeTypeAndValueSET represents a set of ASN.1 sequences of AttributeTypeAndValue sequences from RFC 2986 (PKCS #10).\n      properties:\n        Type:\n          type: array\n          items:\n            type: integer\n        Value:\n          type: array\n          items:\n            type: array\n            items:\n              $ref: '#/components/schemas/pkixAttributeTypeAndValue'\n    APICertificateStatusMessage:\n      description: Status message when certificate is added\n      properties:\n        id:\n          type: string\n          x-go-name: CertID\n        status:\n          type: string\n          x-go-name: Status\n        message:\n          type: string\n          x-go-name: Message\n      type: object\n      x-go-package: github.com/TykTechnologies/tyk\n    OASSchemaResponse:\n      description: OAS schema endpoint response\n      type: object\n      properties:\n        status:\n          type: string\n          x-go-name: Status\n        message:\n          type: string\n          x-go-name: Message\n        schema:\n          type: string\n          description: \u003cOAS schema definition\u003e\n    BooleanQueryParam:\n      type: string\n      enum: [ true, false ]\n      example: true\n  parameters:\n    UpstreamURL:\n      name: upstreamURL\n      in: query\n      description: Upstream URL for the API\n      required: false\n      schema:\n        type: string\n    ListenPath:\n      name: listenPath\n      in: query\n      description: Listen path for the API\n      schema:\n        type: string\n      required: false\n    CustomDomain:\n      name: customDomain\n      schema:\n        type: string\n      description: Custom domain for the API\n      in: query\n      required: false\n    ApiID:\n      name: apiID\n      schema:\n        type: string\n      description: ID of the API\n      in: query\n      required: false\n    ValidateRequest:\n      name: validateRequest\n      in: query\n      description: Enable validateRequest middleware for all endpoints having a request body with media type application/json\n      required: false\n      schema:\n        $ref: '#/components/schemas/BooleanQueryParam'\n    AllowList:\n      name: allowList\n      in: query\n      description: Enable allowList middleware for all endpoints\n      required: false\n      schema:\n        $ref: '#/components/schemas/BooleanQueryParam'\n    Authentication:\n      name: authentication\n      in: query\n      description: Enable or disable authentication in your Tyk Gateway as per your OAS document.\n      schema:\n        $ref: '#/components/schemas/BooleanQueryParam'\n  securitySchemes:\n    api_key:\n      in: header\n      name: X-Tyk-Authorization\n      type: apiKey\nsecurity:\n  - api_key: []\n",
			"canonicalURL": "/github.com/TykTechnologies/tyk-docs@a4c0a5bef27fc8a23f08ca2f13e79ec8ce3a5d7c/-/blob/tyk-docs/static/others/gateway-swagger.yml",
			"externalURLs": [
				{
					"url": "https://github.com/TykTechnologies/tyk-docs/blob/a4c0a5bef27fc8a23f08ca2f13e79ec8ce3a5d7c/tyk-docs/static/others/gateway-swagger.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"BooleanQueryParam\": at 1:13953: parse enum values: parse value \"true\": expected type \"string\", got \"bool\""
}