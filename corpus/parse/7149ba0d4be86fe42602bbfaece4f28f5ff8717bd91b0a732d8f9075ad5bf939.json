{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Digitaler-Impfnachweis/certification-apis"
		},
		"file": {
			"name": "dcc-certify-api.yaml",
			"size": 0,
			"path": "dcc-certify-api.yaml",
			"byteSize": 20256,
			"content": "openapi: 3.0.1\nservers:\n  - url: https://api.certify.demo.ubirch.com/\n    description: Endpoint for vaccination centers only - STAGING api server\n  - url: https://api.certify.ubirch.com/\n    description: Endpoint for vaccination centers only - PRODUCTION api server\n  - url: https://api.ru.impfnachweis.info\n    description: Endpoint for medical practitioners with TI access only - STAGING api server\n  - url: https://api-pvs.certify.demo.ubirch.com\n    description: Endpoint for medical practitioners with Gematik Kops simulator access only - requires no client-cert required - STAGING api server\n  - url: https://api.impfnachweis.info\n    description: Endpoint for medical practitioners with TI access only -  PRODUCTION api server   \ninfo:\n  title: Issuer Service API\n  description: |\n    The issuer service API generates signed\n    [Digital Green Certificate (DGC)](https://github.com/ehn-digital-green-development/ehn-dgc-schema/releases/tag/1.0.0)\n    conforming certificates.\n\n    ```\n    Copyright (C) 2021 IBM Deutschland GmbH\n    Copyright (C) 2021 ubirch GmbH\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n    ```\n\n  version: 2.2.0\n  license:\n    name: 'Apache License, Version 2.0'\n    url: 'https://www.apache.org/licenses/LICENSE-2.0'\n  contact:\n    name: UBIRCH GmbH\n    url: https://ubirch.com\n    email: support@ubirch.com\npaths:\n  # ===========================================================\n  # Available API endpoints\n  # ===========================================================\n  /api/certify/v2/issue:\n    post:\n      tags:\n        - Certification\n      summary: Issue a vaccination certificate.\n      description: |\n        # Description\n\n        Issue a health certificate based on the provided input according to spec 1.0.0 of the\n        [Digital Green Certificate (DGC)](https://github.com/ehn-digital-green-development/ehn-dgc-schema/releases/tag/1.0.0).\n\n        **Authentication:** clients connecting via Internet (not [SNK](https://www.kbv.de/html/sicheres_netz.php)/[TI](https://www.gematik.de/telematikinfrastruktur/))\n        need an X.509 client certificate and must provide a list of authorized vaccination center `id`'s.\n\n        **Applications:** vaccination center software, patient information systems, integrators\n      parameters:\n        - in: header\n          name: X-Transaction-Id\n          description: |\n            The transaction id that identifies this request. Needs to be\n            a SHA256 of the actual transaction id encoded as hex string.\n          schema:\n            type: string\n            format: hex\n            pattern: \"^[A-Za-z0-9]{64}$\"\n          example: 56e9926cd68bf5818e176196b324aeca05a2fe7ea10b486876d194898e9ccc22\n#          required: true\n        - in: header\n          name: X-UBIRCH-DCCType\n          description: |\n            The type of signature to be acquired. V - for vaccination certificates, T - for\n            test certificates, and R - for recovery certificates\n          schema:\n            type: string\n            pattern: \"^[VTR]$\"\n          examples:\n            vaccination:\n              value: V\n              summary: Request a vaccination certificate signature.\n            test:\n              value: T\n              summary: Request a test certificate signature.\n            recovery:\n              value: R\n              summary: Request a recovery certificate signature.\n          required: true\n      requestBody:\n        description: \u003e-\n          Digital Green Certificate request information. The value-sets are defined in the\n          [EU eHealthNetwork: Value Sets for Digital Green Certificates. version 1.0](https://ec.europa.eu/health/sites/default/files/ehealth/docs/digital-green-certificates_dt-specifications_en.pdf).\n        content:\n          application/json: #deprecated and required for backwards compatability\n            schema:\n              '$ref': '#/components/schemas/VaccinationCertificateRequest'\n          application/vnd.dgc.v1+json:\n            schema:\n              oneOf:\n                - '$ref': '#/components/schemas/VaccinationCertificateRequest'\n                - '$ref': '#/components/schemas/RecoveryCertificateRequest'\n                - '$ref': '#/components/schemas/TestCertificateRequest'\n          application/vnd.dgc.v1.3+json:\n            schema:\n              oneOf:\n                - '$ref': '#/components/schemas/VaccinationCertificateRequest'\n                - '$ref': '#/components/schemas/RecoveryCertificateRequest'\n                - '$ref': '#/components/schemas/TestCertificateRequest'\n            examples:\n              Vaccination Certification Request:\n                description: |\n                  This is an example for a vaccination certification request.\n                value:\n                  nam:\n                    fn: \"Musterfrau-Dießner\"\n                    gn: \"Erika Dörte\"\n                  dob: \"1979-04-14\"\n                  v:\n                    - id: \"IZ28215B\"\n                      tg: \"840539006\"\n                      vp: \"1119305005\"\n                      mp: \"EU/1/20/1528\"\n                      ma: \"ORG-100001699\"\n                      dn: 1\n                      sd: 2\n                      dt: \"2021-04-14\"\n              Recovery Certification Request:\n                description:  |\n                  This is an example for a vaccination certification request.\n                value:\n                  nam:\n                    fn: \"Musterfrau-Dießner\"\n                    gn: \"Erika Dörte\"\n                  dob: \"1979-04-14\"\n                  r:\n                    - id: \"BSNR12345\"\n                      tg: \"840539006\"\n                      fr: \"2021-04-21\"\n                      df: \"2021-05-01\"\n                      du: \"2021-10-21\"\n              Test Certification Request:\n                description: |\n                  This is an example for a test certification request.\n                value:\n                  nam:\n                    fn: \"Musterfrau-Dießner\"\n                    gn: \"Erika Dörte\"\n                  dob: \"1979-04-14\"\n                  t:\n                    - id: \"TC12345\"\n                      tg: \"840539006\"\n                      tt: \"LP6464-4\"\n                      nm: \"Roche LightCycler qPCR\"\n                      tr: \"260415000\"\n                      sc: \"2021-04-13T14:20:00+00:00\"\n                      tc: \"Hauptbahnhof Köln\"\n\n      responses:\n        '200':\n          description: Certificate response as PDF, encoded or binary token.\n          headers:\n            X-DGC-Id:\n              schema:\n                '$ref': 'DCC.combined-schema.json#/$defs/certificate_id'\n              description: The generated certificate identifier contained in the certificate.\n              example: \"01DE/IZ999999X/3B05FC5T96C6HY3YS4FS6H8DD#Z\"\n          content:\n            application/cbor+base45:\n              schema:\n                '$ref': '#/components/schemas/CertificateEncoded'\n            application/cbor:\n              schema:\n                '$ref': '#/components/schemas/CertificateBinary'\n            application/pdf:\n              schema:\n                '$ref': '#/components/schemas/CertificationPDF'\n        '400':\n          description: Invalid Request\n          # WIP: define extended error messages if input is wrong\n        '401':\n          description: Authentication Failure (Credential missing)\n        '403':\n          description: Forbidden (Invalid Credentials)\n        '406':\n          description: Incorrect data model\n        '500':\n          description: Internal Server Error\n      security:\n        - AppBearerToken: [ ]\n\n  /api/certify/v2/issue/hash:\n    post:\n      tags:\n        - Certification\n      summary: Sign a CBOR Web Token hash.\n      description: |\n        # Description\n        Verifies and signs the hash of a [CBOR Web Token](https://tools.ietf.org/html/rfc8392) (CWT). This is the\n        actual signature operation of the [ECDSA](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm)\n        algorithm applied to the pre-hashed data of the CWT. It returns the skeleton of the signed CWT which needs to\n        be filled with the actual payload that was used in the process of creating the signature hash. This endpoint\n        is used for a privacy friendly way to remotely sign certificates.\n\n        **Applications:** secure backend integrators, vaccination web frontend\n      parameters:\n        - in: header\n          name: X-Location-Id\n          description: |\n            The location id for which this certificate signature is acquired. Needs to be\n            a SHA256 of the actual location id encoded as hex string.\n          schema:\n            type: string\n            format: hex\n            pattern: \"^[A-Za-z0-9]{64}$\"\n          example: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n          required: true\n        - in: header\n          name: X-Transaction-Id\n          description: |\n            The transaction id that identifies this request. Needs to be\n            a SHA256 of the actual transaction id encoded as hex string.\n          schema:\n            type: string\n            format: hex\n            pattern: \"^[A-Za-z0-9]{64}$\"\n          example: 56e9926cd68bf5818e176196b324aeca05a2fe7ea10b486876d194898e9ccc22\n          required: true\n        - in: header\n          name: X-UBIRCH-DCCType\n          description: |\n            The type of signature to be acquired. V - for vaccination certificates, T - for\n            test certificates, and R - for recovery certificates\n          schema:\n            type: string\n            pattern: \"^[VTR]$\"\n          examples:\n            vaccination:\n              value: V\n              summary: Request a vaccination certificate signature.\n            test:\n              value: T\n              summary: Request a test certificate signature.\n            recovery:\n              value: R\n              summary: Request a recovery certificate signature.\n          required: true\n      requestBody:\n        description: |\n          Base64 encoded SHA256 message digest of the CBOR Web Token prior to the application\n          of the signature algorithm.\n        content:\n          text/plain:\n            schema:\n              type: string\n              format: base64\n            example: \"TvQb78AX/5r+5ZkVYYeUW0Rn/4FB8ICt6sSdrwOq0EI=\"\n      responses:\n        '200':\n          description: A signed incomplete CBOR Web Token.\n          content:\n            application/cbor:\n              schema:\n                type: string\n                format: binary\n              example: \"\u003cSigned Incomplete CBOR Web Token\u003e\"\n        '400':\n          description: Invalid Request\n        '401':\n          description: Authentication Failure (Credential missing)\n        '403':\n          description: Forbidden (Invalid Credentials)\n        '406':\n          description: Incorrect CBOR Data\n        '500':\n          description: Internal Server Error\n      security:\n        - AppBearerToken: [ ]\n\ncomponents:\n  # ===========================================================\n  # Request and response schema definitions\n  # ===========================================================\n  schemas:\n    CertificateRequestBase:\n      description: \u003e-\n        Common Digital Green Certificate (DGC) request data containing the name and date of birth of the person\n        receiving the certificate.\n      type: object\n      required:\n        - nam\n        - dob\n      properties:\n        nam:\n          title: Person name\n          description: Name of the person which receives the certificate.\n          type: object\n          required:\n            - fn\n          properties:\n            fn:\n              title: Family name\n              description: The family or primary name(s) of the person addressed in the certificate\n              type: string\n              maxLength: 80\n              example: \"Musterfrau-Dießner\"\n            gn:\n              title: Given name\n              description: The given name(s) of the person addressed in the certificate\n              type: string\n              maxLength: 80\n              example: \"Erika Dörte\"\n        dob:\n          title: Date of birth\n          description: Date of Birth of the person addressed in the DGC. ISO 8601 date format restricted to range 1900-2099\n          type: string\n          format: date\n          pattern: '(19|20)\\d{2}-\\d{2}-\\d{2}'\n          example: '1979-04-14'\n\n    VaccinationCertificateRequest:\n      allOf:\n        - '$ref': '#/components/schemas/CertificateRequestBase'\n        - type: object\n          description: \u003e-\n            Vaccination certificate request object. The value-sets are defined in the\n            [EU eHealthNetwork: Value Sets for Digital Green Certificates. version 1.0](https://ec.europa.eu/health/sites/default/files/ehealth/docs/digital-green-certificates_dt-specifications_en.pdf).\n          required:\n            - v\n          properties:\n            v:\n              description: Vaccination Certificate Entry\n              type: array\n              items:\n                '$ref': '#/components/schemas/VaccinationEntry'\n              minItems: 1\n              maxItems: 1\n\n    RecoveryCertificateRequest:\n      allOf:\n        - '$ref': '#/components/schemas/CertificateRequestBase'\n        - type: object\n          description: \u003e-\n            Recovery certificate request object. The value-sets are defined in the\n            [EU eHealthNetwork: Value Sets for Digital Green Certificates. version 1.0](https://ec.europa.eu/health/sites/default/files/ehealth/docs/digital-green-certificates_dt-specifications_en.pdf).\n          required:\n            - r\n          properties:\n            r:\n              description: Recovery Certificate Entry\n              type: array\n              items:\n                '$ref': '#/components/schemas/RecoveryEntry'\n              minItems: 1\n              maxItems: 1\n\n    TestCertificateRequest:\n      allOf:\n        - '$ref': '#/components/schemas/CertificateRequestBase'\n        - type: object\n          description: \u003e-\n            Test certificate request object. The value-sets are defined in the\n            [EU eHealthNetwork: Value Sets for Digital Green Certificates. version 1.0](https://ec.europa.eu/health/sites/default/files/ehealth/docs/digital-green-certificates_dt-specifications_en.pdf).\n          required:\n            - t\n          properties:\n            t:\n              description: Test Group\n              type: array\n              items:\n                '$ref': '#/components/schemas/TestEntry'\n              minItems: 1\n              maxItems: 1\n\n    VaccinationEntry:\n      description: Single vaccination data entry.\n      type: object\n      required:\n        - id\n        - tg\n        - vp\n        - mp\n        - ma\n        - dn\n        - sd\n        - dt\n      properties:\n        id:\n          description: \u003e-\n            Identifier of the administering location (i.e. vaccination center ID, BSNR or similar identifer).\n            It will be used in the construction of the DGCI (digitial green certificate identifier).\n            Due to the specification of the DGCI only the use of uppercase letters and numbers 0-9 are allowed.\n          type: string\n          pattern: \"^[0-9A-Z]+$\"\n        tg:\n          '$ref': 'DCC.combined-schema.json#/$defs/disease-agent-targeted'\n        vp:\n          '$ref': 'DCC.combined-schema.json#/$defs/vaccine-prophylaxis'\n        mp:\n          '$ref': 'DCC.combined-schema.json#/$defs/vaccine-medicinal-product'\n        ma:\n          '$ref': 'DCC.combined-schema.json#/$defs/vaccine-mah-manf'\n        dn:\n          '$ref': 'DCC.combined-schema.json#/$defs/dose_posint'\n        sd:\n          '$ref': 'DCC.combined-schema.json#/$defs/dose_posint'\n        dt:\n          description: ISO 8601 date of the vaccination\n          type: string\n          format: date\n\n    RecoveryEntry:\n      description: Single recovery data entry.\n      type: object\n      required:\n        - id\n        - tg\n        - fr\n        - df\n        - du\n      properties:\n        id:\n          description: \u003e-\n            Identifier of the health professional location (i.e. BSNR or similar identifer).\n            It will be used in the construction of the DGCI (digitial green certificate identifier).\n            Due to the specification of the DGCI only the use of uppercase letters and numbers 0-9 are allowed.\n          type: string\n          pattern: \"^[0-9A-Z]+$\"\n        tg:\n          '$ref': 'DCC.combined-schema.json#/$defs/disease-agent-targeted'\n        fr:\n          description: First positive test result date as ISO 8601.\n          type: string\n          format: date\n        df:\n          description: Certificate valid from date as ISO 8601.\n          type: string\n          format: date\n        du:\n          description: Certificate valid until date as ISO 8601.\n          type: string\n          format: date\n\n    TestEntry:\n      description: Test Entry\n      required:\n        - id\n        - tg\n        - tt\n        - sc\n        - tr\n        - tc\n      type: object\n      properties:\n        id:\n          description: \u003e-\n            Identifier of the test center location (i.e. postal code or similar identifer).\n            It will be used in the construction of the DGCI (digitial green certificate identifier).\n            Due to the specification of the DGCI only the use of uppercase letters and numbers 0-9 are allowed.\n          type: string\n          pattern: \"^[0-9A-Z]+$\"\n        tg:\n          '$ref': 'DCC.combined-schema.json#/$defs/disease-agent-targeted'\n        tt:\n          '$ref': 'DCC.combined-schema.json#/$defs/test-type'\n        nm:\n          description: NAA Test Name\n          type: string\n        ma:\n          '$ref': 'DCC.combined-schema.json#/$defs/test-manf'\n        sc:\n          description: Date/Time of Sample Collection\n          type: string\n          format: date-time\n        tr:\n          '$ref': 'DCC.combined-schema.json#/$defs/test-result'\n        tc:\n          description: Test center or laboratory\n          type: string\n          maxLength: 50\n\n    CertificateEncoded:\n      description: \u003e-\n        Base45 encoded and compressed Digital Green Certificate (DGC) according to EU specification. An encoded\n        certificate can be directly rendered as a QR code according to the EU specification.\n      type: string\n      format: base45\n      example: \"HC1:6BFOXN*TS0BI$ZD4N9:9S6RCVN5+O30K3/XIV0W23NTDEMWK4MI6UOS03CR83KLBKAVN74.CL91/8K6%KEG3983NS9SVBHABVCNN95SWMPHQUHQN%A400H%UBT16Y51Y9AT1:+P6YBKD0:XB7NGJQOIS7I$H%T5+XO8YJMVHBZJF 9NSG:PICIG%*47%S%*48YIZ73423ZQT-EJDG3XW44$22CLY.IE.KD+2H0D3ZCU7JI$2K3JQH5-Y3$PA$HSCHBI I7995R5ZFQETU 9R*PP:+P*.1D9RYO05QD/8D3FC:XIBEIVG395EP1E+WEDJL8FF3DE0OA0D9E2LBHHNHL$EQ+-CVYCMBB:AV5AL5:4A93MOJLWT.C3FDA.-B97U: KMZNKASADIMKN2GFLF9$HF.3O.X21FDLW4L4OVIOE1M24OR:FTNP8EFVMP9/HWKP/HLIJL8JF8JF172OTTHO9YW2E6LS7WGYNDDSHRSFXT*LMK8P*G8QWD8%P%5GPPMEVMTHDBESW2L.TN8BBBDR9+JLDR/1JGIF8BS0IKT8LB1T7WLA:FI%JI50H:EK1\"\n\n    CertificateBinary:\n      description: \u003e-\n        Binary representation of the Digital Green Certificate (DGC) according to EU specification.\n        This is a pure CBOR Web Token (CWT) without compression and encoding and HC1: prefix.\n      type: string\n      format: binary\n      example: \"\u003cCBOR Web Token\u003e\"\n\n    CertificationPDF:\n      description: \u003e-\n        A rendered PDF document containing the certificate information including a\n        Digital Green Certificate (DGC) QR Code according to EU specification.\n      type: string\n      format: binary\n      example: \"\u003cPDF\u003e\"\n\n  securitySchemes:\n    AppBearerToken:\n      type: http\n      description: \u003e-\n        Authentication is based on a bearer token\n      scheme: bearer\n      bearerFormat: JWT\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"TestCertificateRequest\": parse schema: allOf: [1]: parse schema: property \"t\": parse schema: item: parse schema: resolve \"#/components/schemas/TestEntry\": parse schema: property \"ma\": parse schema: resolve \"DCC.combined-schema.json#/$defs/test-manf\": external \"DCC.combined-schema.json\": file: local file reference is not allowed"
}