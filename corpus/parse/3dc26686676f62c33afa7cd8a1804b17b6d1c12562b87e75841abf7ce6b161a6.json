{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/LUMASERV/api-docs"
		},
		"file": {
			"name": "auth-api.v1.0.yaml",
			"size": 0,
			"path": "spec/auth-api.v1.0.yaml",
			"byteSize": 43413,
			"content": "openapi: 3.0.0\ninfo:\n  title: LUMASERV Auth API\n  version: '1.0'\n  contact:\n    name: LUMASERV Support Team\n    email: support@lumaserv.com\n    url: 'https://lumaserv.com'\n  description: LUMASERV Auth API\nservers:\n  - url: 'https://auth.lumaserv.com'\n    description: Live\ntags:\n  - name: audit\n    description: Auditing\n  - name: auth\n    description: Authentification\n  - name: countries\n    description: Countries\n  - name: projects\n    description: Project Management\n  - name: tokens\n    description: API-Token and Session Management\n  - name: users\n    description: User Management\npaths:\n  /projects:\n    get:\n      summary: getProjects\n      tags:\n        - projects\n      responses:\n        '200':\n          $ref: '#/components/responses/ProjectListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getProjects\n      description: Returns all projects\n      parameters:\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n        - schema:\n            type: boolean\n          in: query\n          name: detail\n          description: Detail Flag\n        - schema:\n            type: string\n          in: query\n          name: 'filter[title]'\n          description: Title Filter\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n        - $ref: '#/components/parameters/Order'\n        - $ref: '#/components/parameters/OrderBy'\n    post:\n      summary: createProject\n      operationId: createProject\n      responses:\n        '201':\n          $ref: '#/components/responses/ProjectSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - projects\n      description: Create a new project\n      requestBody:\n        $ref: '#/components/requestBodies/ProjectCreateRequest'\n  '/projects/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: ID of the project\n    get:\n      summary: getProject\n      tags:\n        - projects\n      responses:\n        '200':\n          $ref: '#/components/responses/ProjectSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getProject\n      description: Returns a single project\n      parameters:\n        - schema:\n            type: boolean\n          in: query\n          name: detail\n          description: Detail Flag\n    put:\n      summary: updateProject\n      operationId: updateProject\n      responses:\n        '200':\n          $ref: '#/components/responses/ProjectSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - projects\n      description: Updates the project\n      requestBody:\n        $ref: '#/components/requestBodies/ProjectUpdateRequest'\n    delete:\n      summary: deleteProject\n      operationId: deleteProject\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - projects\n      description: Deletes the project\n  /login:\n    post:\n      summary: login\n      operationId: login\n      responses:\n        '200':\n          $ref: '#/components/responses/LoginResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - auth\n      description: Exchanges user credentials for an auth token\n      requestBody:\n        $ref: '#/components/requestBodies/LoginRequest'\n      security: []\n    parameters: []\n  /users:\n    get:\n      summary: getUsers\n      tags:\n        - users\n      responses:\n        '200':\n          $ref: '#/components/responses/UserListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getUsers\n      description: Returns all users\n      parameters:\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n        - schema:\n            type: string\n          in: query\n          name: 'filter[customer_id]'\n          description: Customer ID Filter\n        - schema:\n            type: string\n            format: email\n          in: query\n          name: 'filter[email]'\n          description: E-Mail Filter\n        - schema:\n            type: string\n            enum:\n              - ADMIN\n              - CUSTOMER\n          in: query\n          name: 'filter[type]'\n          description: Type Filter\n        - schema:\n            type: string\n            enum:\n              - PENDING\n              - ACTIVATED\n              - LOCKED\n          in: query\n          name: 'filter[state]'\n          description: State Filter\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n        - $ref: '#/components/parameters/Order'\n        - $ref: ./core-api.v1.0.yaml#/components/parameters/OrderBy\n    post:\n      summary: createUser\n      operationId: createUser\n      responses:\n        '200':\n          $ref: '#/components/responses/UserSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - users\n      description: Creates a new user\n      requestBody:\n        $ref: '#/components/requestBodies/UserCreateRequest'\n  '/users/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: User ID\n    get:\n      summary: getUser\n      tags:\n        - users\n      responses:\n        '200':\n          $ref: '#/components/responses/UserSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getUser\n      description: Returns a single user\n    put:\n      summary: updateUser\n      operationId: updateUser\n      responses:\n        '200':\n          $ref: '#/components/responses/UserSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Updates the user\n      tags:\n        - users\n      requestBody:\n        $ref: '#/components/requestBodies/UserUpdateRequest'\n  '/projects/{id}/members':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Project ID\n    get:\n      summary: getProjectMembers\n      tags:\n        - projects\n      responses:\n        '200':\n          $ref: '#/components/responses/ProjectMemberListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getProjectMembers\n      description: Returns all members of the project\n      parameters:\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n        - schema:\n            type: string\n          in: query\n          name: 'filter[role]'\n          description: Role Filter\n        - $ref: '#/components/parameters/Order'\n        - $ref: '#/components/parameters/OrderBy'\n    post:\n      summary: addProjectMember\n      operationId: addProjectMember\n      responses:\n        '200':\n          $ref: '#/components/responses/ProjectMemberSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - projects\n      requestBody:\n        $ref: '#/components/requestBodies/ProjectMemberCreateRequest'\n      description: Adds a member to project (admin only)\n  '/projects/{id}/members/{user_id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Project ID\n      - schema:\n          type: string\n          format: uuid\n        name: user_id\n        in: path\n        required: true\n        description: User ID\n    delete:\n      summary: removeProjectMember\n      tags:\n        - projects\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: removeProjectMember\n      description: Removes a member from the project\n  /validate/self:\n    get:\n      summary: validateSelf\n      tags:\n        - auth\n      responses:\n        '200':\n          $ref: '#/components/responses/TokenValidationResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: validateSelf\n      description: Validates the current token\n    parameters: []\n  /password-reset:\n    put:\n      summary: executePasswordReset\n      operationId: executePasswordReset\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - auth\n      description: Executes the password reset with the token from the email\n      requestBody:\n        $ref: '#/components/requestBodies/ExecutePasswordResetRequest'\n    post:\n      summary: requestPasswordReset\n      operationId: requestPasswordReset\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Requests a password reset email for the given username\n      tags:\n        - auth\n      requestBody:\n        $ref: '#/components/requestBodies/RequestPasswordResetRequest'\n    parameters: []\n  '/validate/{token}':\n    parameters:\n      - schema:\n          type: string\n        description: Token\n        name: token\n        in: path\n        required: true\n    get:\n      summary: validateToken\n      tags:\n        - auth\n      responses:\n        '200':\n          $ref: '#/components/responses/TokenValidationResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: validateToken\n      description: Validates the token\n  '/users/{id}/project_memberships':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: User ID\n    get:\n      summary: getUserProjectMemberships\n      tags:\n        - users\n      responses:\n        '200':\n          $ref: '#/components/responses/ProjectMemberListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getUserProjectMemberships\n      description: Returns all project memberships of the user\n      parameters:\n        - $ref: ./core-api.v1.0.yaml#/components/parameters/PaginationPage\n        - $ref: ./core-api.v1.0.yaml#/components/parameters/PaginationPageSize\n        - $ref: ./core-api.v1.0.yaml#/components/parameters/Search\n        - $ref: ./core-api.v1.0.yaml#/components/parameters/Order\n        - $ref: ./core-api.v1.0.yaml#/components/parameters/OrderBy\n  /tokens:\n    get:\n      summary: getTokens\n      tags:\n        - tokens\n      responses:\n        '200':\n          $ref: '#/components/responses/TokenListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getTokens\n      description: Returns all tokens\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: 'filter[user_id]'\n          description: User ID Filter\n        - schema:\n            type: string\n            enum:\n              - SESSION\n              - API\n          in: query\n          name: 'filter[type]'\n          description: Type Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[title]'\n          description: Title Filter\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n        - $ref: ./core-api.v1.0.yaml#/components/parameters/Order\n        - $ref: ./core-api.v1.0.yaml#/components/parameters/OrderBy\n    post:\n      summary: createToken\n      operationId: createToken\n      responses:\n        '200':\n          $ref: '#/components/responses/TokenSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - tokens\n      description: Creates a new api token\n      requestBody:\n        $ref: '#/components/requestBodies/TokenCreateRequest'\n  '/tokens/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Token ID\n    get:\n      summary: getToken\n      tags:\n        - tokens\n      responses:\n        '200':\n          $ref: '#/components/responses/TokenSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getToken\n      description: Returns a single token\n    delete:\n      summary: deleteToken\n      operationId: deleteToken\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - tokens\n      description: Deletes a token\n  /countries:\n    get:\n      summary: getCountries\n      tags:\n        - countries\n      responses:\n        '200':\n          $ref: '#/components/responses/CountryListResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getCountries\n      description: Returns all countries\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Order'\n        - $ref: '#/components/parameters/OrderBy'\n  '/countries/{code}':\n    parameters:\n      - schema:\n          type: string\n        description: Country Code\n        name: code\n        in: path\n        required: true\n    get:\n      summary: getCountry\n      tags:\n        - countries\n      responses:\n        '200':\n          $ref: '#/components/responses/CountrySingleResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getCountry\n      description: Returns a single country\n  /transaction-log:\n    post:\n      summary: searchTransactionLog\n      operationId: searchTransactionLog\n      responses:\n        '200':\n          $ref: '#/components/responses/TransactionLogResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - audit\n      description: Searches the transaction log for records\n      requestBody:\n        $ref: '#/components/requestBodies/TransactionLogRequest'\n    parameters: []\n  /audit-log:\n    get:\n      summary: searchAuditLog\n      tags:\n        - audit\n      responses:\n        '200':\n          $ref: '#/components/responses/AuditLogEntryListResponse'\n        '400':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: searchAuditLog\n      description: Searches the audit log for entries matching the filter\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: user_id\n          description: User ID\n        - schema:\n            type: string\n          in: query\n          name: project_id\n          description: Project ID\n        - schema:\n            type: string\n          in: query\n          name: object_type\n          description: Object Type\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: object_id\n          description: Object ID\n    post:\n      summary: insertAuditLogEntry\n      operationId: insertAuditLogEntry\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Inserts a new entry in the audit log\n      tags:\n        - audit\n      requestBody:\n        $ref: '#/components/requestBodies/AuditLogRequest'\ncomponents:\n  schemas:\n    ResponseMessages:\n      title: ResponseMessages\n      type: object\n      x-examples:\n        example:\n          warnings: []\n          errors: []\n          success:\n            - code: 10000\n              message: Action successfully executed.\n      properties:\n        warnings:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResponseMessage'\n        errors:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResponseMessage'\n        infos:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResponseMessage'\n      required:\n        - warnings\n        - errors\n        - infos\n    ResponseMessage:\n      title: ResponseMessage\n      type: object\n      properties:\n        key:\n          type: string\n          example: general.serverError\n        message:\n          type: string\n          example: Action successfully executed.\n      required:\n        - key\n        - message\n    ResponseMetadata:\n      title: ResponseMetadata\n      type: object\n      properties:\n        transaction_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        build_commit:\n          type: string\n          example: master-a0b1c2d3\n        build_timestamp:\n          type: string\n          example: '2021-09-01 13:37:00'\n      required:\n        - transaction_id\n        - build_commit\n        - build_timestamp\n    ResponsePagination:\n      title: ResponsePagination\n      type: object\n      properties:\n        page:\n          type: integer\n          example: 1\n        page_size:\n          type: integer\n          example: 25\n        total:\n          type: integer\n          example: 1500\n      required:\n        - page\n        - page_size\n        - total\n    Project:\n      title: Project\n      type: object\n      x-tags:\n        - projects\n      x-examples:\n        example:\n          uuid: 095be615-a8ad-4c33-8e9c-c7612fbf6c9f\n          title: Nice App\n          description: A really nice app\n          created_at: '2020-01-30 00:00:00'\n          updated_at: '2020-01-30 00:00:00'\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        title:\n          type: string\n          example: Example Project\n        created_at:\n          type: string\n      required:\n        - id\n        - title\n    Token:\n      title: Token\n      type: object\n      x-tags:\n        - users\n      description: API / Session Token\n      properties:\n        token:\n          type: string\n        user_id:\n          type: string\n        type:\n          type: string\n          enum:\n            - SESSION\n            - API\n        scope:\n          $ref: '#/components/schemas/TokenScope'\n        validUntil:\n          type: string\n        created_at:\n          type: string\n      required:\n        - user_id\n        - type\n        - scope\n        - created_at\n    User:\n      title: User\n      type: object\n      x-tags:\n        - users\n      description: ''\n      properties:\n        id:\n          type: string\n          format: uuid\n        customer_id:\n          type: string\n          format: uuid\n        email:\n          type: string\n          format: email\n        first_name:\n          type: string\n        last_name:\n          type: string\n        gender:\n          $ref: '#/components/schemas/Gender'\n        type:\n          $ref: '#/components/schemas/UserType'\n        state:\n          $ref: '#/components/schemas/UserState'\n      required:\n        - id\n        - email\n        - first_name\n        - last_name\n    ProjectMember:\n      title: ProjectMember\n      type: object\n      x-tags:\n        - project\n      description: Member of a Project\n      properties:\n        user_id:\n          type: string\n          format: uuid\n        role:\n          type: string\n          enum:\n            - OWNER\n            - USER\n        project_id:\n          type: string\n          format: uuid\n      required:\n        - role\n    TokenValidationInfo:\n      title: TokenValidationInfo\n      type: object\n      x-tags:\n        - auth\n      properties:\n        user:\n          $ref: '#/components/schemas/User'\n        token:\n          $ref: '#/components/schemas/Token'\n        project_memberships:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProjectMember'\n      required:\n        - user\n        - token\n        - project_memberships\n    TokenScope:\n      title: TokenScope\n      type: object\n      properties:\n        project_id:\n          type: string\n          format: uuid\n    UserType:\n      type: string\n      title: UserType\n      enum:\n        - CUSTOMER\n        - ADMIN\n    Gender:\n      type: string\n      title: Gender\n      enum:\n        - MALE\n        - FEMALE\n        - OTHER\n    UserState:\n      type: string\n      title: UserState\n      enum:\n        - PENDING\n        - ACTIVATED\n        - LOCKED\n    Country:\n      title: Country\n      type: object\n      properties:\n        code:\n          type: string\n        title:\n          type: string\n      required:\n        - code\n        - title\n    AuditLogEntry:\n      title: AuditLogEntry\n      type: object\n      x-tags:\n        - audit\n      properties:\n        id:\n          type: string\n        token_id:\n          type: string\n          format: uuid\n        ip_address:\n          type: string\n        user_id:\n          type: string\n          format: uuid\n        project_id:\n          type: string\n          format: uuid\n        action:\n          type: string\n        object_type:\n          $ref: '#/components/schemas/ObjectType'\n        object_id:\n          type: string\n          format: uuid\n        date:\n          type: string\n        context:\n          type: object\n      required:\n        - id\n        - token_id\n        - user_id\n        - action\n        - date\n    ObjectType:\n      type: string\n      title: ObjectType\n      x-stoplight:\n        id: u03v2g5ppbo7r\n      enum:\n        - DOMAIN\n        - DOMAIN_HANDLE\n        - SSH_KEY\n        - PLESK_LICENSE\n        - SSL_CERTIFICATE\n        - SSL_ORGANISATION\n        - SSL_CONTACT\n        - S3_BUCKET\n        - S3_ACCESS_KEY\n        - S3_ACCESS_GRANT\n        - DNS_ZONE\n        - SERVER\n        - SERVER_VOLUME\n        - SERVER_MEDIA\n        - NETWORK\n  securitySchemes:\n    AuthToken:\n      type: http\n      scheme: bearer\n      description: ''\n  responses:\n    InvalidRequestResponse:\n      description: Response for validation errors\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: object\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - messages\n              - metadata\n        application/xml:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: object\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - success\n              - messages\n    EmptyResponse:\n      description: Empty Response\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - messages\n              - metadata\n    ProjectListResponse:\n      description: Project List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Project'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    ProjectSingleResponse:\n      description: Single Project\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/Project'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    LoginResponse:\n      description: Login Response\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/Token'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    UserListResponse:\n      description: User List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    UserSingleResponse:\n      description: Single User\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/User'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    ProjectMemberListResponse:\n      description: ProjectMember List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProjectMember'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    TokenValidationResponse:\n      description: Token Validation\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/TokenValidationInfo'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    TokenListResponse:\n      description: Token List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Token'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    TokenSingleResponse:\n      description: Single Token\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/Token'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    CountryListResponse:\n      description: Country List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Country'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    CountrySingleResponse:\n      description: Single Country\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/Country'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    TransactionLogResponse:\n      description: Audit Log\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  type: object\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    AuditLogEntryListResponse:\n      description: AuditLogEntry List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AuditLogEntry'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ProjectMemberSingleResponse:\n      description: ProjectMember Single\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/ProjectMember'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n  requestBodies:\n    ProjectCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              title:\n                type: string\n            required:\n              - title\n    ProjectUpdateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              title:\n                type: string\n    LoginRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              username:\n                type: string\n              password:\n                type: string\n            required:\n              - username\n              - password\n      description: Login Request\n    RequestPasswordResetRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              username:\n                type: string\n            required:\n              - username\n    ExecutePasswordResetRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              token:\n                type: string\n              password:\n                type: string\n            required:\n              - token\n              - password\n    TokenCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              user_id:\n                type: string\n                format: uuid\n              title:\n                type: string\n              scope:\n                $ref: '#/components/schemas/TokenScope'\n            required:\n              - title\n    UserCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              gender:\n                $ref: '#/components/schemas/Gender'\n              first_name:\n                type: string\n              last_name:\n                type: string\n              company:\n                type: string\n              email:\n                type: string\n                format: email\n              password:\n                type: string\n              type:\n                $ref: '#/components/schemas/UserType'\n            required:\n              - gender\n              - first_name\n              - last_name\n              - email\n              - password\n    UserUpdateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              gender:\n                $ref: '#/components/schemas/Gender'\n              first_name:\n                type: string\n              last_name:\n                type: string\n              company:\n                type: string\n              type:\n                $ref: '#/components/schemas/UserType'\n              state:\n                $ref: '#/components/schemas/UserState'\n              email:\n                type: string\n                format: email\n              password:\n                type: string\n              customer_id:\n                type: string\n                format: uuid\n    TransactionLogRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              query:\n                type: object\n              sort:\n                type: object\n              limit:\n                type: integer\n            required:\n              - query\n    AuditLogRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              token_id:\n                type: string\n                format: uuid\n              action:\n                type: string\n              ip_address:\n                type: string\n              project_id:\n                type: string\n                format: uuid\n              object_type:\n                $ref: '#/components/schemas/ObjectType'\n              object_id:\n                type: string\n                format: uuid\n              context:\n                type: object\n            required:\n              - token_id\n              - action\n    ProjectMemberCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              user_id:\n                type: string\n                format: uuid\n              role:\n                type: string\n                enum:\n                  - USER\n                  - OWNER\n                default: USER\n            required:\n              - user_id\n  parameters:\n    PaginationPage:\n      name: page\n      in: query\n      schema:\n        type: integer\n        minimum: 1\n      description: Page\n    PaginationPageSize:\n      name: page_size\n      in: query\n      required: false\n      schema:\n        type: integer\n        default: 10\n      description: Page Size\n    Search:\n      name: search\n      in: query\n      required: false\n      schema:\n        type: string\n      description: Search\n    Order:\n      name: order\n      in: query\n      required: false\n      schema:\n        type: string\n        enum:\n          - ASC\n          - DESC\n      description: 'Order of the results, ascending by default'\n    OrderBy:\n      name: order_by\n      in: query\n      required: false\n      schema:\n        type: string\n      description: Field or array of fields to order by\nsecurity:\n  - AuthToken: []\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /users/{id}/project_memberships: get: operation \"getUserProjectMemberships\": parameters: parse parameter \"\": resolve \"./core-api.v1.0.yaml#/components/parameters/PaginationPage\" reference: invalid parameter reference"
}