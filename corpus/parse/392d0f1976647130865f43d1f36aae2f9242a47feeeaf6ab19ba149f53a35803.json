{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/rancher-sandbox/rancher-desktop"
		},
		"file": {
			"name": "command-api.yaml",
			"size": 0,
			"path": "src/assets/specs/command-api.yaml",
			"byteSize": 7854,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: \"Rancher Desktop API\"\n  version: 0.0.1\npaths:\n  /v0/factory_reset:\n    put:\n      operationId: factoryReset\n      summary: Factory reset Rancher Desktop, losing user data\n      requestBody:\n        description: \u003e-\n          JSON block giving factory reset options.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                keepSystemImages:\n                  type: boolean\n        required: true\n\n  /v0/propose_settings:\n    put:\n      operationId: proposeSettings\n      summary: \u003e-\n        Propose some settings and determine if the backend needs to be restarted\n        or reset (losing user data).\n      requestBody:\n        description: \u003e-\n          JSON block consisting of some or all of the current preferences,\n          with changes applied to any number of settings the backend supports changing this way.\n        content:\n          application/json:\n            schema:\n              \"$ref\" : \"#/components/schemas/preferences\"\n        required: true\n      responses:\n        '202':\n          description: \u003e-\n            A description of the effects of the proposed settings on the\n            backend.\n          content:\n            \"application/json\":\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n                  properties:\n                    current: {}\n                    desired: {}\n                    severity:\n                      type: string\n                      enum: [ restart, reset ]\n        '400':\n          description: \u003e-\n            The proposed settings were not valid.\n          content:\n            \"text/plain\":\n              schema:\n                type: string\n\n\n  /v0/settings:\n    get:\n      operationId: listSettings\n      summary:  List the current preference settings\n      responses:\n        '200':\n          description: \u003e-\n            The current preferences in JSON format\n          content:\n            application/json:\n              schema:\n                \"$ref\" : \"#/components/schemas/preferences\"\n    put:\n      operationId: updateSettings\n      summary:  Updates the specified preference settings\n      requestBody:\n        description: \u003e-\n          JSON block consisting of some or all of the current preferences,\n          with changes applied to any number of settings the backend supports changing this way.\n        content:\n          application/json:\n            schema:\n              \"$ref\" : \"#/components/schemas/preferences\"\n        required: true\n      responses:\n        '202':\n          description: \u003e-\n            The settings were accepted.\n          content:\n            \"text/plain\":\n              schema:\n                type: string\n        '400':\n          description: \u003e-\n            The proposed settings were not valid.\n          content:\n            \"text/plain\":\n              schema:\n                type: string\n\n  /v0/shutdown:\n    put:\n      operationId: shutdownApp\n      summary:  Shuts down Rancher Desktop\n      responses:\n        '202':\n          description: \u003e-\n            The application is in the process of shutting down.\n          content:\n            \"text/plain\":\n              schema:\n                type: string\n\n  /v0/diagnostic_categories:\n    get:\n      operationId: diagnosticCategories\n      summary: \u003e-\n        Return a list of the category names for the Diagnostics component. Takes no parameters.\n      responses:\n        '200':\n          description: \u003e-\n            A list of the category names.\n          content:\n            \"application/json\":\n              schema:\n                type: array\n                items:\n                  type: string\n\n  /v0/diagnostic_ids:\n    get:\n      operationId: diagnosticIDsForCategory\n      summary: \u003e-\n        Return a list of the check IDs for the Diagnostics category,\n        or 404 if there is no such `category`.\n        Specifying an exiting category with no checks\n        will return status code 200 and an empty array.\n      parameters:\n        - in: query\n          name: category\n      responses:\n        '200':\n          description: \u003e-\n            A list of the check IDs for the specified category.\n          content:\n            \"application/json\":\n              schema:\n                type: array\n                items:\n                  type: string\n        '404':\n          description: The category is not recognized.\n\n\n  /v0/diagnostic_checks:\n    get:\n      operationId: diagnosticChecks\n      summary: \u003e-\n        Return all the checks, optionally filtered by specified category and/or checkID.\n      parameters:\n        - in: query\n          name: category\n        - in: query\n          name: checkID\n      responses:\n        '200':\n          description: \u003e-\n            A list of check objects. An invalid or unrecognized query parameter returns (200, empty array)\n          content:\n            application/json:\n              schema:\n                \"$ref\" : \"#/components/schemas/diagnostics\"\n    post:\n      operationId: dianosticRunChecks\n      summay: Run all diagnostic checks, and return any results.\n      responses:\n        '200':\n          description: \u003e-\n            A list of check results.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/diagnostics\"\n\ncomponents:\n  schemas:\n    preferences:\n      type: object\n      properties:\n        kubernetes:\n          type: object\n          properties:\n            version:\n              type: string\n            memoryInGB:\n              type: integer\n              minimum: 1\n            numberCPUs:\n              type: integer\n              minimum: 1\n            port:\n              type: integer\n            containerEngine:\n              type: string\n              enum: ['containerd', 'moby', 'docker']\n            enabled:\n              type: boolean\n            WSLIntegrations:\n              type: object\n              additionalProperties: true\n            options:\n              type: object\n              properties:\n                traefik:\n                  type: boolean\n                flannel:\n                  type: boolean\n            suppressSudo:\n              type: boolean\n            hostResolver:\n              type: boolean\n        portForwarding:\n          type: object\n          properties:\n            includeKubernetesServices:\n              type: boolean\n        images:\n          type: object\n          properties:\n            showAll:\n              type: boolean\n            namespace:\n              type: string\n        telemetry:\n          type: boolean\n        updater:\n          type: boolean\n        debug:\n          type: boolean\n        pathManagementStrategy:\n          type: string\n          enum: ['manual', 'rcfiles']\n        diagnostics:\n          type: object\n          properties:\n            showMuted:\n              type: boolean\n            mutedChecks:\n              type: object\n              additionalProperties: true\n    diagnostics:\n      type: object\n      properties:\n        last_update:\n          type: string\n          format: date-time\n          example: \"1970-01-01T00:00:00.000Z\"\n        checks:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n              category:\n                type: string\n              documentation:\n                type: string\n              description:\n                type: string\n              passed:\n                type: boolean\n              mute:\n                type: boolean\n              fixes:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    description:\n                      type: string\n",
			"canonicalURL": "/github.com/rancher-sandbox/rancher-desktop@d69aa4567c1cae71bc604bf678d781991d8762a2/-/blob/src/assets/specs/command-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/rancher-sandbox/rancher-desktop/blob/d69aa4567c1cae71bc604bf678d781991d8762a2/src/assets/specs/command-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/v0/diagnostic_checks\": get: operation \"diagnosticChecks\": parameters: parse parameter \"category\": at 1:2059: parameter MUST contain either a schema property, or a content property"
}