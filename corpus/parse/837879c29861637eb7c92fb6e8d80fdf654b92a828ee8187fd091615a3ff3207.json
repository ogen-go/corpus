{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/quarkus-qe/quarkus-test-suite"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "security/vertx-jwt/src/main/resources/META-INF/openapi.yaml",
			"byteSize": 6767,
			"content": "openapi: 3.0.1\ninfo:\n  title: BladeRunner / Replicant API\n  description: This API allow us to register blade runners and replicants in our database. Most API method are secured, but is possible to get replicant details from his barcode ID (used by indoor scanners)\n  termsOfService: 'https://swagger.io/tools/swaggerhub/'\n  contact:\n    email: pablo.gonzalez.granados@gmail.com\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n  version: 2.0.0\nexternalDocs:\n  description: Find out more about Swagger\n  url: 'http://swagger.io'\nservers:\n  - url: 'http://localhost:8080'\n    description: local enviroment\ntags:\n  - name: Replicant\n    description: CRUD Replicant API\n  - name: BladeRunner\n    description: CRUD BladeRunner API\npaths:\n  /replicant/{id}:\n    get:\n      tags:\n        - Replicant\n      summary: retrieve replicant by ID\n      description: retrive replicant\n      operationId: replicantById\n      parameters:\n        - name: id\n          in: path\n          description: replicant ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successfull\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/replicant'\n    delete:\n      tags:\n        - Replicant\n      security:\n        - bearerAuth: [ ]\n      summary: delete replicant by ID\n      description: delete replicant\n      operationId: deleteReplicantById\n      parameters:\n        - name: id\n          in: path\n          description: replicant ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: successfull\n  /replicant:\n    get:\n      tags:\n        - Replicant\n      security:\n        - bearerAuth: [ ]\n      summary: retrieve all replicants\n      description: retrive all replicants\n      operationId: allReplicants\n      responses:\n        '200':\n          description: successfull\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/replicant'\n    post:\n      tags:\n        - Replicant\n      security:\n        - bearerAuth: [ ]\n      summary: create or update replicant record\n      description: create replicant record (updated if already exist)\n      operationId: upsertReplicant\n      requestBody:\n        description: new replicant\n        required: true\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: '#/components/schemas/replicant'\n      responses:\n        '200':\n          description: successfull\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/id'\n\n  /bladeRunner/{id}:\n    get:\n      tags:\n        - bladeRunner\n      security:\n        - bearerAuth: [ ]\n      summary: retrieve bladeRunner by ID\n      description: retrive bladeRunner\n      operationId: bladeRunnerById\n      parameters:\n        - name: id\n          in: path\n          description: bladeRunner ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successfull\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/bladeRunner'\n    delete:\n      tags:\n        - bladeRunner\n      security:\n        - bearerAuth: [ ]\n      summary: delete bladeRunner by ID\n      description: delete bladeRunner\n      operationId: deletebladeRunnerById\n      parameters:\n        - name: id\n          in: path\n          description: bladeRunner ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: successfull\n  /bladeRunner:\n      get:\n        tags:\n          - bladeRunner\n        security:\n          - bearerAuth: [ ]\n        summary: retrieve all bladeRunner\n        description: retrive all bladeRunner\n        operationId: allbladeRunner\n        responses:\n          '200':\n            description: successfull\n            content:\n              application/json:\n                schema:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/bladeRunner'\n      post:\n        tags:\n          - bladeRunner\n        security:\n          - bearerAuth: [ ]\n        summary: create or update bladeRunner record\n        description: create bladeRunner record (updated if already exist)\n        operationId: upsertbladeRunner\n        requestBody:\n          description: new bladeRunner\n          required: true\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/bladeRunner'\n        responses:\n          '200':\n            description: successfull\n            content:\n              application/json:\n                schema:\n                  items:\n                    $ref: '#/components/schemas/id'\n\ncomponents:\n  schemas:\n    replicant:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        lastName:\n          type: string\n        createdAt:\n          type: integer\n        updatedAt:\n          type: integer\n        born:\n          type: integer\n        died:\n          type: integer\n        iq:\n          type: integer\n        lat:\n          type: number\n        lon:\n          type: number\n        geneticsModifications:\n          type: array\n          items:\n            type: string\n        specialAbilities:\n          type: array\n          items:\n            type: string\n        model:\n          type: string\n        liveSpanYears:\n          type: integer\n        telepathy:\n          type: boolean\n        fugitive:\n          type: boolean\n    bladeRunner:\n      type: object\n      required: [ \"id\", \"name\", \"lastName\" ]\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        lastName:\n          type: string\n        createdAt:\n          type: integer\n        updatedAt:\n          type: integer\n        born:\n          type: integer\n        died:\n          type: integer\n        iq:\n          type: integer\n        lat:\n          type: string\n        lon:\n          type: string\n        geneticsModifications:\n          type: array\n          items:\n            type: string\n    id:\n      type: object\n      properties:\n        ID:\n          type: string\n\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT",
			"canonicalURL": "/github.com/quarkus-qe/quarkus-test-suite@15247bfc1394cd9bfe532559a211f6004e92418d/-/blob/security/vertx-jwt/src/main/resources/META-INF/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/quarkus-qe/quarkus-test-suite/blob/15247bfc1394cd9bfe532559a211f6004e92418d/security/vertx-jwt/src/main/resources/META-INF/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/bladeRunner/{id}\": get: operation \"bladeRunnerById\": responses: 200: content: application/json: schema: parse schema: at security/vertx-jwt/src/main/resources/META-INF/openapi.yaml:132:19: items: object cannot contain 'items' field"
}