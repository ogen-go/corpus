{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/insolar/insolar"
		},
		"file": {
			"name": "api-exported.yaml",
			"size": 0,
			"path": "application/api/spec/api-exported.yaml",
			"byteSize": 42295,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.6\n  title: Insolar API\n  contact:\n    name: Insolar dev team\n    url: 'https://insolar.io/about#team'\n    email: dev-support@insolar.io\n  description: \u003e\n    [Insolar](https://github.com/insolar/insolar) Platform JSON RPC 2.0 API\n    documentation.\n\n\n    # Definitions Overview\n\n\n    Insolar is being developed to provide interoperation between enterprises.\n\n\n    From a business perspective:\n\n      * Any enterprise is regarded as an *entity* with a corresponding *identity* — a **member** object stored in the blockchain.\n      * Any member has its own *account* to/from which the member can transfer funds.\n\n    From a technical perspective:\n\n      * Every member object is identified by a **reference** in the blockchain.\n      * The reference is effectively the member's *address*.\n\n    Therefore, an entity wishing to transfer funds to/from its account from/to a\n    particular address, in Insolar's terms, is a member object identified by its\n    reference wishing to transfer funds to some other member identified by the\n    corresponding reference.\n\n\n    Insolar uses these terms in method and parameter names.\n\n\n    # Request Specification\n\n\n    Insolar has two types of requests that have the same *base* structure in\n    accordance with the [JSON RPC 2.0](https://www.jsonrpc.org/specification)\n    specification:\n\n\n    * [Information](#tag/Information) requests that do not require a seed.\n\n    * Contract requests that do. These requests are described in\n    [Member](/#tag/Member) and [Migration](/#tag/Migration) sections.\n\n\n    Seed is a unique piece of information generated by a node that:\n\n\n    * has a short lifespan — 10 minutes;\n\n    * expires upon first use;\n\n    * protects from request fakes, i.e., duplicate requests sent by a malicious\n    party sniffing the traffic. This ensures that a single funds transfer\n    request can only be sent once by the owner of the funds.\n\n\n    Since the seed is generated by a node, it must be validated by the same\n    node. Therefore, each subsequent contract request containing the seed must\n    be sent to the node that generated it.\n\n\n    To call a smart contract's method, go through the following steps:\n\n\n    1. Send a [getSeed](/#operation/get-seed) information request and receive\n    the seed.\n\n       For example, the `getSeed` request is as follows:\n\n       ```json\n       {\n           \"jsonprc\": \"2.0\",\n           \"id\": 1,\n           \"method\": \"node.getSeed\"\n       }\n       ```\n\n       And the response is:\n\n       ```json\n       {\n         \"jsonrpc\": \"2.0\",\n         \"id\": 1,\n         \"result\": {\n         \"seed\": \"\u003cseed\u003e\"\n         }\n       }\n       ```\n\n    2. Form and sign a contract request (e.g.,\n    [member.create](/#operation/member-create)) with the acquired seed.\n\n       Every contract request is to contain the Digest and Signature HTTP headers. For example:\n\n       ```\n       POST /\u003cendpoint\u003e HTTP/1.1\n       Host: \u003cHost\u003e\n       Date: Tue, 07 Jun 2019 20:51:35 GMT\n       Content-Type: application/json\n       Digest: SHA-256=\u003chashString\u003e\n       Signature: keyId=\"public-key\", algorithm=\"ecdsa\", headers=\"digest\", signature=\u003csignatureString\u003e\n\n       { \u003cpayload\u003e }\n       ```\n\n       And the contract request's `\u003cpayload\u003e` with the seed may be as follows:\n\n       ```json\n       {\n         \"jsonprc\": \"2.0\",\n         \"id\": 2,\n         \"method\": \"contract.call\",\n         \"params\": {\n           \"seed\": \"\u003cseed\u003e\",\n           \"callSite\": \"member.create\",\n           \"callParams\": {},\n           \"publicKey\": \"\u003cpubicKey\u003e\"\n         }\n       }\n       ```\n\n       In this example:\n\n       * [Digest HTTP header](https://tools.ietf.org/html/rfc3230#section-4.3.2) contains the Base64 `\u003chashString\u003e` with the SHA-256 hash of the payload's bytes.\n\n       * [Signature HTTP header](https://tools.ietf.org/id/draft-cavage-http-signatures-11.html#sig-header) contains the Base64 `\u003csignatureString\u003e` with the ECDSA (Elliptic Curve Digital Signature Algorithm) signature in the [ASN.1 DER format](https://www.itu.int/rec/dologin_pub.asp?lang=e\u0026id=T-REC-X.690-201508-I!!PDF-E\u0026type=items). Signed are the bytes of the hash from the Digest header.\n\n       * `\u003cpubicKey\u003e` contains a Base64 string with the ECDSA public key in [PEM format](https://tools.ietf.org/html/rfc1421).\n\n       * `\u003cseed\u003e` contains the seed acquired in the previous `getSeed` request.\n\n       * `\"method\": \"contract.call\"` designates a call to a contract's method.\n\n       * `callSite` is the contract method's call point, in this case, `member.create`.\n\n       * `callParams` are the contract method's parameters.\n\n    3. Send the formed and signed contract request to the node that generated\n    the seed.\n\n       Insolar responds to contract requests with:\n\n       ```json\n       {\n         \"jsonrpc\": \"2.0\",\n         \"id\": 2,\n         \"result\": {\n         \"callResult\": {\n            \"reference\": \u003creferenceString\u003e\n            },\n         \"requestReference\": \u003crequestReferenceString\u003e,\n         \"traceID\": \u003ctraceIDString\u003e\n         }\n       }\n       ```\n       Where `\"callResult\"` contains the result of the contract's method execution. In this case, it is a reference to a newly created member object since the `\"callSite\"` of the request is `\"member.create\"`.\n\n    # Errors\n\n\n    Insolar follows the JSON RPC API conventions on [error\n    codes](https://www.jsonrpc.org/specification#error_object), with values:\n\n    * `-31000`-`-31999` reserved for the Insolar network;\n\n    * `-200`-`-299` reserved for the wallet application;\n\n    * the rest available for other contracts.\n\n\n    Below is the list of Insolar Platform errors.\n\n\n    | **Code** | **Message**                                                 |\n\n    |----------|-------------------------------------------------------------|\n\n    | -31700   | Parsing error on the server side: received an invalid JSON. |\n\n    | -31600   | The JSON received is not a valid request payload.           |\n\n    | -31601   | Method does not exist / is not available.                   |\n\n    | -31602   | Invalid method parameter(s).                                |\n\n    | -31603   | Internal Platform error.                                    |\n\n    | -31106   | Request's timeout has expired.                              |\n\n    | -31401   | Action is not authorized.                                   |\n\n    | -31429   | Service unavailable, try again later.                       |\n\n    | -31103   | Execution error.                                            |\n\n\n    # Versioning\n\n\n    The API is usually changed in each release of Insolar, so API calls are\n    versioned to ensure that clients do not break.\n\n\n    To lock to an API version, prefix the URL with the version number. For\n    example, calling `/api/rpc` is the same as calling `/v0.0.1/api/rpc`.\n\n\n    Insolar releases in the near future will support this version of the API, so\n    your client will continue to work even if it is talking to a newer API.\n\n\n    API versions do not have correlations to Insolar Platform versions.\nservers:\n  - url: 'https://wallet-api.insolar.io'\n    description: Production server\npaths:\n  '/api/rpc#first.New':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.Panic':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.NewPanic':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#panicAsLogicalError.New':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#panicAsLogicalError.Panic':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#panicAsLogicalError.NewPanic':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.Recursive':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.Test':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#third.New':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.NewZero':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#second.NewWithOne':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.Get':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.Inc':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.Dec':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.Hello':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.Again':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.GetFriend':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#second.Hello':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.TestPayload':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.ManyTimes':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.NewSaga':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.Transfer':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.GetBalance':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.TransferWithRollback':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.TransferTwice':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.TransferToAnotherContract':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#second.GetBalance':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#third.GetSagaCallsNum':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#third.Transfer':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.SelfRef':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.AnError':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.NoError':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.ReturnNil':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.ConstructorReturnNil':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.ConstructorReturnError':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.GetChildPrototype':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.ExternalImmutableCall':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.ExternalImmutableCallMakesExternalCall':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#second.ExternalCallDoNothing':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#third.DoNothing':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.NewWithNumber':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.TransferTo':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.AddChildAndReturnMyselfAsParent':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#second.GetParent':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#first.Kill':\n    post:\n      responses:\n        '200':\n          description: OK\n  '/api/rpc#node.getSeed':\n    post:\n      summary: node.getSeed\n      description: \u003e\n\n        Gets a new seed (random byte range).\n\n\n        Each signed contract request has to contain a new seed in its body. Seed\n        is a unique piece of information generated by a node that:\n\n         * has a short lifespan — 10 minutes;\n         * expires upon first use;\n         * protects from request fakes, i.e., duplicate requests sent by a malicious party sniffing the traffic. This ensures that a single funds transfer request can only be sent once by the owner of the funds.\n\n        Since the seed is generated by a node, it must be validated by the same\n        node. Therefore, each subsequent contract request containing the seed\n        must be sent to the node that generated it.\n      operationId: get-seed\n      tags:\n        - Information\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/request-RPCRequest'\n                - type: object\n                  properties:\n                    method:\n                      type: string\n                      enum:\n                        - node.getSeed\n                    params:\n                      description: May be omitted as the method does not require any.\n            example:\n              jsonrpc: '2.0'\n              method: node.getSeed\n              id: 1\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/definitions-responses-Seed-yaml'\n                  - $ref: '#/components/schemas/response-unsignedRequestError'\n              examples:\n                success:\n                  x-mock-call-count: -100\n                  value:\n                    jsonrpc: '2.0'\n                    id: 1\n                    result:\n                      seed: U1wGm8xl+WUFIPFLdFupTXKMXbLoJbv0nA/ImZAtHZk=\n                error:\n                  $ref: '#/components/examples/executionError'\n  '/api/rpc#member.create':\n    post:\n      summary: member.create\n      description: \u003e\n        Creates a new member object with a corresponding account and wallet.\n\n\n        To invoke this method, specify a `publicKey` to associate with the new\n        member.\n\n\n        Returns a `reference` to the new member object.\n      operationId: member-create\n      tags:\n        - Member\n      parameters:\n        - $ref: '#/components/parameters/digestHeader'\n        - $ref: '#/components/parameters/signatureHeader'\n      x-dredd-http-signed: true\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/request-contractCall'\n                - type: object\n                  required:\n                    - params\n                  properties:\n                    params:\n                      required:\n                        - publicKey\n                      properties:\n                        callSite:\n                          enum:\n                            - member.create\n                        callParams:\n                          description: \u003e-\n                            Parameters of the contract's internal method. May be\n                            omitted as the method does not require any.\n                        publicKey:\n                          type: string\n                          pattern: \u003e-\n                            ^\\s*(-+BEGIN[^-]+-+\\s+[a-zA-Z0-9+\\/=\n                            \\n]+-+END[^-]+-+|[a-zA-Z0-9+\\/= \\n]+)\\s*$\n                          description: \u003e\n                            Public key to associate with the new `member`\n                            object. Used to check the `\u003csignatureString\u003e`\n                            created by the paired private key. Format: a [PEM\n                            key](https://tools.ietf.org/html/rfc1421) in a\n                            Base64 string.\n                          x-dredd-source:\n                            hookMethod: newMemberKey\n            example:\n              jsonrpc: '2.0'\n              method: contract.call\n              id: 1\n              params:\n                seed: fhDEwRRbSnYnbMnALKMh8gXdzaSvRv/nfsGC9S7kqik=\n                callSite: member.create\n                publicKey: \u003e-\n                  -----BEGIN PUBLIC\n                  KEY-----\\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEMSbA4KvO/jlwY+8WFDEdwhCLlsEC\\nF3/GYvu9iTWHwCctx1wTbGGjNLY03EjXyYxaf8coNbSbZeu+jXcWeMHG0A==\\n-----END\n                  PUBLIC KEY-----\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/response-member'\n                  - $ref: '#/components/schemas/response-signedRequestError'\n              examples:\n                success:\n                  value:\n                    jsonrpc: '2.0'\n                    id: 1\n                    result:\n                      callResult:\n                        reference: 'insolar:1GlDeBOnc7Ar5N34ShBdkx_SAVOfnZJKUCoQMi0_OcvE'\n                      requestReference\": \u003e-\n                        insolar:1FUpUFSfNpmyX05nustQ7B8al0xj-_j3_ndqXfgLRra4.record\n                      traceID: 0b9ac245-2522-4364-9059-efc17907ce54\n                error:\n                  $ref: '#/components/examples/executionError'\n  '/admin-api/rpc#node.getSeed':\n    post:\n      summary: node.getSeed\n      description: \u003e\n        Gets a new seed (random byte range).\n\n\n        Each signed contract request has to contain a new seed in its body. Seed\n        is a unique piece of information generated by a node that:\n\n         * has a short lifespan — 10 minutes;\n         * expires upon first use;\n         * protects from request fakes, i.e., duplicate requests sent by a malicious party sniffing the traffic. This ensures that a single funds transfer request can only be sent once by the owner of the funds.\n\n        Since the seed is generated by a node, it must be validated by the same\n        node. Therefore, each subsequent contract request containing the seed\n        must be sent to the node that generated it.\n      operationId: internal-get-seed\n      tags:\n        - Internal\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/request-RPCRequest'\n                - type: object\n                  properties:\n                    method:\n                      type: string\n                      enum:\n                        - node.getSeed\n                    params:\n                      description: May be omitted as the method does not require any.\n            example:\n              jsonrpc: '2.0'\n              method: node.getSeed\n              id: 1\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/definitions-responses-Seed-yaml'\n                  - $ref: '#/components/schemas/response-unsignedRequestError'\n              examples:\n                success:\n                  x-mock-call-count: -100\n                  value:\n                    jsonrpc: '2.0'\n                    id: 1\n                    result:\n                      seed: U1wGm8xl+WUFIPFLdFupTXKMXbLoJbv0nA/ImZAtHZk=\n                error:\n                  $ref: '#/components/examples/executionError'\n  '/admin-api/rpc#node.getStatus':\n    post:\n      summary: node.getStatus\n      description: |\n        Gets blockchain network statistics.\n      operationId: get-status\n      tags:\n        - Internal\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/request-RPCRequest'\n                - type: object\n                  properties:\n                    method:\n                      type: string\n                      enum:\n                        - node.getStatus\n                    params:\n                      description: May be omitted as the method does not require any.\n            example:\n              jsonrpc: '2.0'\n              method: node.getStatus\n              id: 1\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/definitions-responses-Status-yaml'\n                  - $ref: '#/components/schemas/response-unsignedRequestError'\n  '/admin-api/rpc#spec.get':\n    post:\n      summary: spec.get\n      description: \u003e\n        returns this spec\n      operationId: get\n      tags:\n        - Internal\n      responses:\n        '200':\n          description: OK\n\n  '/admin-api/rpc#network.getInfo':\n    post:\n      summary: network.getInfo\n      description: \u003e\n        Gets references to base objects: `rootMember`, `rootDomain`,\n        `nodeDomain`, `migrationAdminMember`, and an array of\n        `migrationDaemonMembers`.\n      operationId: get-info\n      tags:\n        - Internal\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/request-RPCRequest'\n                - type: object\n                  properties:\n                    method:\n                      type: string\n                      enum:\n                        - network.getInfo\n                    params:\n                      description: May be omitted as the method does not require any.\n            example:\n              jsonrpc: '2.0'\n              method: network.getInfo\n              id: 1\n              params: {}\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                anyOf:\n                  - $ref: '#/components/schemas/definitions-responses-Info-yaml'\n                  - $ref: '#/components/schemas/response-unsignedRequestError'\ntags:\n  - name: Information\n  - name: Member\n  - name: Internal\ncomponents:\n  schemas:\n    request-RPCRequest:\n      description: Base definition for HTTP JSON RPC 2.0 requests.\n      type: object\n      required:\n        - jsonrpc\n        - method\n        - id\n      properties:\n        jsonrpc:\n          type: string\n          enum:\n            - '2.0'\n          example: '2.0'\n        id:\n          oneOf:\n            - type: string\n            - type: number\n              nullable: true\n          description: Request's ID to link it with the corresponding result.\n          example: 1\n        method:\n          type: string\n          example: getSeed\n        params:\n          type: object\n      x-json-schema-id: request/RPCRequest\n    definitions-responses-Seed-yaml:\n      title: Success\n      allOf:\n        - $ref: '#/components/schemas/response-RPCResponse'\n        - properties:\n            result:\n              type: object\n              required:\n                - seed\n              properties:\n                seed:\n                  type: string\n                  description: Base64 string with a random range of bytes.\n                  example: U1wGm8xl+WUFIPFLdFupTXKMXbLoJbv0nA/ImZAtHZk=\n      x-json-schema-id: definitions/responses/Seed.yaml\n    response-unsignedRequestError:\n      title: Errors\n      description: \u003e-\n        Error response to a un-signed request. Can contain multiple errors with\n        different codes.\n      oneOf:\n        - $ref: '#/components/schemas/schemas-response-executionError-yaml'\n        - $ref: '#/components/schemas/schemas-response-timeoutError-yaml'\n        - $ref: '#/components/schemas/schemas-response-internalError-yaml'\n        - $ref: '#/components/schemas/schemas-response-methodNotFoundError-yaml'\n        - $ref: '#/components/schemas/schemas-response-serviceUnavailable-yaml'\n      properties:\n        error:\n          required:\n            - data\n          properties:\n            data:\n              type: object\n              description: Additional error information.\n              required:\n                - traceID\n              properties:\n                traceID:\n                  $ref: '#/components/schemas/traceID'\n      x-json-schema-id: response/unsignedRequestError\n    request-contractCall:\n      description: |\n        Call to a contract's `callSite`, it's internal 'method'.\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/request-RPCRequest'\n        - type: object\n          properties:\n            method:\n              enum:\n                - contract.call\n            params:\n              required:\n                - callSite\n                - seed\n                - publicKey\n              properties:\n                seed:\n                  type: string\n                  description: 'Seed returned by [getSeed](/#operation/get-seed).'\n                  example: U1wGm8xl+WUFIPFLdFupTXKMXbLoJbv0nA/ImZAtHZk=\n                callSite:\n                  type: string\n                  description: Call point for the contract's method.\n                callParams:\n                  type: object\n                publicKey:\n                  type: string\n                  pattern: \u003e-\n                    ^\\s*(-+BEGIN[^-]+-+\\s+[a-zA-Z0-9+\\/=\n                    \\n]+-+END[^-]+-+|[a-zA-Z0-9+\\/= \\n]+)\\s*$\n      x-json-schema-id: request/contractCall\n    response-member:\n      title: Success\n      allOf:\n        - $ref: '#/components/schemas/response-success'\n        - properties:\n            result:\n              properties:\n                callResult:\n                  required:\n                    - reference\n                  properties:\n                    reference:\n                      type: string\n                      pattern: '^insolar:(0[a-zA-Z0-9_-]{2,43}|1[a-zA-Z0-9_-]{42,43})$'\n                      example: 'insolar:1GlDeBOnc7Ar5N34ShBdkx_SAVOfnZJKUCoQMi0_OcvE'\n                      x-json-schema-id: reference\n                      description: Reference to the `member` object.\n      x-json-schema-id: response/member\n    response-signedRequestError:\n      title: Errors\n      description: \u003e-\n        Error response to a signed request. Can contain multiple errors with\n        different codes.\n      oneOf:\n        - $ref: '#/components/schemas/schemas-response-executionError-yaml'\n        - $ref: '#/components/schemas/schemas-response-timeoutError-yaml'\n        - $ref: '#/components/schemas/schemas-response-internalError-yaml'\n        - $ref: '#/components/schemas/schemas-response-invalidParamsError-yaml'\n        - $ref: '#/components/schemas/schemas-response-invalidRequestError-yaml'\n        - $ref: '#/components/schemas/schemas-response-methodNotFoundError-yaml'\n        - $ref: '#/components/schemas/schemas-response-parseError-yaml'\n        - $ref: '#/components/schemas/schemas-response-unauthorizedError-yaml'\n        - $ref: '#/components/schemas/schemas-response-serviceUnavailable-yaml'\n      properties:\n        error:\n          required:\n            - data\n          properties:\n            data:\n              type: object\n              description: Additional error information.\n              required:\n                - requestReference\n                - traceID\n              properties:\n                requestReference:\n                  $ref: '#/components/schemas/requestReference'\n                traceID:\n                  $ref: '#/components/schemas/traceID'\n      x-json-schema-id: response/signedRequestError\n    reference:\n      type: string\n      pattern: '^insolar:(0[a-zA-Z0-9_-]{2,43}|1[a-zA-Z0-9_-]{42,43})$'\n      example: 'insolar:1GlDeBOnc7Ar5N34ShBdkx_SAVOfnZJKUCoQMi0_OcvE'\n      x-json-schema-id: reference\n    definitions-responses-Status-yaml:\n      title: Success\n      allOf:\n        - $ref: '#/components/schemas/response-RPCResponse'\n        - properties:\n            result:\n              type: object\n              required:\n                - networkState\n                - nodeState\n                - additionalNodeState\n                - origin\n                - activeListSize\n                - workingListSize\n                - nodes\n                - pulseNumber\n                - entropy\n                - version\n              properties:\n                networkState:\n                  type: string\n                  enum:\n                    - completeNetworkState\n                nodeState:\n                  type: string\n                  example: ''\n                additionalNodeState:\n                  type: string\n                  example: ''\n                origin:\n                  $ref: '#/components/schemas/definitions-nodeShort-yaml'\n                activeListSize:\n                  type: integer\n                  example: 1\n                  description: Size of the list of active nodes.\n                workingListSize:\n                  type: integer\n                  example: 1\n                  description: Size of the list of working nodes.\n                nodes:\n                  type: array\n                  description: Array of nodes in the network.\n                  minItems: 1\n                  items:\n                    $ref: '#/components/schemas/definitions-nodeShort-yaml'\n                pulseNumber:\n                  type: integer\n                  format: int64\n                  example: 19424511\n                  description: Current pulse number.\n                entropy:\n                  type: string\n                  example: \u003e-\n                    j88wsuBEZjZHBkg9ci4yJqfb5jXcgeUZZfxQI1tEm4+PzzCy4ERmNkcGSD1yLjImp9vmNdyB5Rll/FAjW0Sbjw==\n                  description: Current entropy.\n                version:\n                  type: string\n                  example: v0.8.5\n                  description: Insolar Platform version.\n      x-json-schema-id: definitions/responses/Status.yaml\n    definitions-responses-Info-yaml:\n      title: Success\n      allOf:\n        - $ref: '#/components/schemas/response-RPCResponse'\n        - properties:\n            result:\n              type: object\n              required:\n                - rootDomain\n                - rootMember\n                - nodeDomain\n                - traceID\n              properties:\n                rootDomain:\n                  allOf:\n                    - $ref: '#/components/schemas/reference'\n                  description: Reference to a root domain.\n                  example: 'insolar:1GlDeBOnc7Ar5N34ShBdkx_SAVOfnZJKUCoQMi0_OcvE'\n                rootMember:\n                  allOf:\n                    - $ref: '#/components/schemas/reference'\n                  description: Reference to a root member.\n                  example: 'insolar:1AfNjPWh7Ut-P7Ky7Mj7HLCte3gjGXi4RpXNxTvrhlww'\n                nodeDomain:\n                  allOf:\n                    - $ref: '#/components/schemas/reference'\n                  description: Reference to a node domain.\n                  example: 'insolar:1Fc0nrPGFVHiqrCEGrxUT6YS-LbDqHN-wTaZfdyqC0OI'\n                traceID:\n                  $ref: '#/components/schemas/traceID'\n      x-json-schema-id: definitions/responses/Info.yaml\n    response-success:\n      title: Success\n      description: A successful response.\n      allOf:\n        - $ref: '#/components/schemas/response-RPCResponse'\n        - properties:\n            result:\n              required:\n                - callResult\n                - requestReference\n                - traceID\n              properties:\n                callResult:\n                  type: object\n                  description: Method's call result.\n                requestReference:\n                  $ref: '#/components/schemas/requestReference'\n                traceID:\n                  $ref: '#/components/schemas/traceID'\n      x-json-schema-id: response/success\n    response-RPCResponse:\n      description: Base definition for HTTP JSON RPC 2.0 responses.\n      type: object\n      required:\n        - jsonrpc\n        - id\n        - result\n      properties:\n        jsonrpc:\n          type: string\n          enum:\n            - '2.0'\n        id:\n          type: integer\n          description: ID passed by the request.\n          example: 1\n        result:\n          type: object\n      x-json-schema-id: response/RPCResponse\n    schemas-response-executionError-yaml:\n      description: Error during execution.\n      title: executionError\n      allOf:\n        - $ref: '#/components/schemas/response-RPCError-yaml'\n        - properties:\n            error:\n              properties:\n                code:\n                  enum:\n                    - -31103\n                message:\n                  enum:\n                    - Execution error.\n                data:\n                  required:\n                    - trace\n                  properties:\n                    trace:\n                      type: array\n                      description: An array of error message(s).\n                      minItems: 1\n                      items:\n                        type: string\n                      example:\n                        - '[ makeCall ] Can''t send request'\n                        - \u003e-\n                          [ ContractRequester::SendRequest ] Can't route call:\n                          couldn't dispatch event\n                        - \u003e-\n                          RPC call returned error: [ HandleCall.handleActual ]\n                          can't create request: failed to fetch index from heavy\n                        - \u003e-\n                          failed to fetch object index for\n                          1tJCbWvMpRjVGSMe2ApfLFKFP42pYRX7PvHrs1VCAA: index not\n                          found\n                    traceID:\n                      example: 0b9ac245-2522-4364-9059-efc17907ce54\n      x-json-schema-id: schemas/response/executionError.yaml\n    schemas-response-timeoutError-yaml:\n      description: Request's timeout has expired.\n      title: timeoutError\n      allOf:\n        - $ref: '#/components/schemas/response-RPCError-yaml'\n        - properties:\n            error:\n              properties:\n                code:\n                  enum:\n                    - -31106\n                message:\n                  enum:\n                    - Request's timeout has expired.\n      x-json-schema-id: schemas/response/timeoutError.yaml\n    schemas-response-internalError-yaml:\n      description: Internal JSON RPC error.\n      title: internalError\n      allOf:\n        - $ref: '#/components/schemas/response-RPCError-yaml'\n        - properties:\n            error:\n              properties:\n                code:\n                  enum:\n                    - -31603\n                message:\n                  enum:\n                    - Internal Platform error.\n                data:\n                  required:\n                    - trace\n                  properties:\n                    trace:\n                      type: array\n                      description: An array of error message(s).\n                      minItems: 1\n                      items:\n                        type: string\n                      example:\n                        - failed to get next seed\n                    traceID:\n                      example: 0b9ac245-2522-4364-9059-efc17907ce54\n      x-json-schema-id: schemas/response/internalError.yaml\n    schemas-response-methodNotFoundError-yaml:\n      description: Method does not exist / is not available.\n      title: methodNotFoundError\n      allOf:\n        - $ref: '#/components/schemas/response-RPCError-yaml'\n        - properties:\n            error:\n              properties:\n                code:\n                  enum:\n                    - -31601\n                message:\n                  enum:\n                    - Method does not exist / is not available.\n      x-json-schema-id: schemas/response/methodNotFoundError.yaml\n    schemas-response-serviceUnavailable-yaml:\n      description: Service is unavailable and cannot process API requests right now.\n      title: unavailableError\n      allOf:\n        - $ref: '#/components/schemas/response-RPCError-yaml'\n        - properties:\n            error:\n              properties:\n                code:\n                  enum:\n                    - -31429\n                message:\n                  enum:\n                    - 'Service unavailable, try again later.'\n      x-json-schema-id: schemas/response/serviceUnavailable.yaml\n    traceID:\n      type: string\n      description: Internal debugging information. May be an empty string.\n      example: 0b9ac245-2522-4364-9059-efc17907ce54\n      x-json-schema-id: traceID\n    schemas-response-invalidParamsError-yaml:\n      description: Invalid method parameter(s).\n      title: invalidParamsError\n      allOf:\n        - $ref: '#/components/schemas/response-RPCError-yaml'\n        - properties:\n            error:\n              properties:\n                code:\n                  enum:\n                    - -31602\n                message:\n                  enum:\n                    - Invalid method parameter(s).\n      x-json-schema-id: schemas/response/invalidParamsError.yaml\n    schemas-response-invalidRequestError-yaml:\n      description: The JSON received is not a valid request payload.\n      title: invalidRequestError\n      allOf:\n        - $ref: '#/components/schemas/response-RPCError-yaml'\n        - properties:\n            error:\n              properties:\n                code:\n                  enum:\n                    - -31600\n                message:\n                  enum:\n                    - The JSON received is not a valid request payload.\n      x-json-schema-id: schemas/response/invalidRequestError.yaml\n    schemas-response-parseError-yaml:\n      description: Received an invalid JSON.\n      title: parseError\n      allOf:\n        - $ref: '#/components/schemas/response-RPCError-yaml'\n        - properties:\n            error:\n              properties:\n                code:\n                  enum:\n                    - -31700\n                message:\n                  enum:\n                    - \u003e-\n                      Parsing error on the server side: received an invalid\n                      JSON.\n      x-json-schema-id: schemas/response/parseError.yaml\n    schemas-response-unauthorizedError-yaml:\n      description: Action is not authorized.\n      title: unauthorizedError\n      allOf:\n        - $ref: '#/components/schemas/response-RPCError-yaml'\n        - properties:\n            error:\n              properties:\n                code:\n                  enum:\n                    - -31401\n                message:\n                  enum:\n                    - Action is not authorized.\n      x-json-schema-id: schemas/response/unauthorizedError.yaml\n    requestReference:\n      type: string\n      description: \u003e-\n        Reference to a request record initialized by the method's call. May be\n        an empty string.\n      example: 'insolar:1FUpUFSfNpmyX05nustQ7B8al0xj-_j3_ndqXfgLRra4.record'\n      pattern: '^insolar:1[a-zA-Z0-9_-]{42,43}\\.record$'\n      x-json-schema-id: requestReference\n    definitions-nodeShort-yaml:\n      title: Node\n      description: Node's information.\n      type: object\n      required:\n        - reference\n        - role\n        - isWorking\n      properties:\n        reference:\n          allOf:\n            - $ref: '#/components/schemas/reference'\n            - example: 'insolar:1GhYBmUixzQlaw5tK4WRM8jdKY89QnS-0WgbhoI8y3cQ'\n              description: Node's reference.\n        role:\n          $ref: '#/components/schemas/schemas-nodeType-yaml'\n        isWorking:\n          type: boolean\n      x-json-schema-id: definitions/nodeShort.yaml\n    response-RPCError-yaml:\n      description: Base definition for HTTP JSON RPC 2.0 error responses.\n      type: object\n      required:\n        - jsonrpc\n        - id\n        - error\n      properties:\n        jsonrpc:\n          type: string\n          enum:\n            - '2.0'\n        id:\n          type: integer\n          description: ID passed by the request.\n          example: 1\n        error:\n          type: object\n          required:\n            - code\n            - message\n          properties:\n            code:\n              type: integer\n            message:\n              type: string\n      x-json-schema-id: response/RPCError.yaml\n    schemas-nodeType-yaml:\n      title: node Type\n      type: string\n      description: Node types\n      enum:\n        - heavy_material\n        - light_material\n        - virtual\n      x-json-schema-id: schemas/nodeType.yaml\n  examples:\n    executionError:\n      x-mock-call-factor: -1\n      value:\n        jsonrpc: '2.0'\n        id: 1\n        error:\n          code: -31103\n          message: Execution error.\n          data:\n            trace:\n              - '[ makeCall ] Can''t send request'\n              - \u003e-\n                [ ContractRequester::SendRequest ] Can't route call: couldn't\n                dispatch event\n              - \u003e-\n                RPC call returned error: [ HandleCall.handleActual ] can't\n                create request: failed to fetch index from heavy\n              - \u003e-\n                failed to fetch object index for\n                1tJCbWvMpRjVGSMe2ApfLFKFP42pYRX7PvHrs1VCAA: index not found\n            traceID: 0b9ac245-2522-4364-9059-efc17907ce54\n  parameters:\n    digestHeader:\n      name: Digest\n      in: header\n      description: \u003e\n        [Digest HTTP header](https://tools.ietf.org/html/rfc3230#section-4.3.2)\n        with an SHA-256 hash of the request's payload bytes in a Base64\n        `\u003chashString\u003e`.\n      example: SHA-256=\u003chashString\u003e\n      required: true\n      schema:\n        type: string\n        pattern: ^SHA-256=.+$\n    signatureHeader:\n      name: Signature\n      in: header\n      description: \u003e\n        [Signature HTTP\n        header](https://tools.ietf.org/id/draft-cavage-http-signatures-11.html#sig-header)\n        with the signed hash bytes in a Base64 `\u003csignatureString\u003e`.\n\n\n        The signature is:\n\n\n        * in [ASN.1 DER\n        format](https://www.itu.int/rec/dologin_pub.asp?lang=e\u0026id=T-REC-X.690-201508-I!!PDF-E\u0026type=items);\n\n        * generated by an ECDSA private key;\n\n        * checked by the paired public key (`publicKey`).\n      example: \u003e-\n        keyId=\"member-pub-key\", algorithm=\"ecdsa\", headers=\"digest\",\n        signature=\u003csignatureString\u003e\n      required: true\n      schema:\n        type: string\n",
			"canonicalURL": "/github.com/insolar/insolar@e00667b6b1b7fcd311b82b86e459026a77e361d8/-/blob/application/api/spec/api-exported.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/insolar/insolar/blob/e00667b6b1b7fcd311b82b86e459026a77e361d8/application/api/spec/api-exported.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: at 1:24567: duplicate path: \"/admin-api/rpc#spec.get\""
}