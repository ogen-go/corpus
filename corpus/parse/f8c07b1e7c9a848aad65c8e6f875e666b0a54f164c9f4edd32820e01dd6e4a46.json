{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/FraunhoferISST/diva"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "core/services/review-management/apiDoc/openapi.yml",
			"byteSize": 13014,
			"content": "openapi: 3.0.0\ninfo:\n  description: \"Review Management Service is responsible for all CRUD operations on reviews\"\n  version: 1.0.0\n  title: Review Management API\nservers:\n  - url: http://localhost:3003\ntags:\n  - name: reviews\n    description: Operations about reviews\n\npaths:\n  /reviews:\n    post:\n      tags:\n        - reviews\n      summary: Create Review\n      description: Create new review with the provided data.\n      operationId: createReview\n      parameters:\n        - $ref: \"#/components/parameters/actorIdParam\"\n      requestBody:\n        $ref: \"#/components/requestBodies/ReviewCreate\"\n      responses:\n        201:\n          $ref: \"#/components/responses/ReviewCreateSuccess\"\n        406:\n          $ref: \"#/components/responses/InvalidDataError\"\n        5XX:\n          $ref: \"#/components/responses/UnexpectedError\"\n\n    get:\n      tags:\n        - reviews\n      summary: Get list of reviews\n      description: To get the collection of reviews you can set the page size with `pageSize`. \n        Default page size is **30**. The next page can be fatched by using the `cursor`\n        parameter. The cursor to the next page will be included in the response body.\n        You can set `belongsTo` to filter reviews for a certain entity. You can also set\n        `creatorId` to get reviews from a specific actor.\n      operationId: getReviews\n      parameters:\n        - $ref: \"#/components/parameters/actorIdParam\"\n        - name: cursor\n          in: query\n          description: Pagination cursor\n          required: false\n          explode: true\n          example: \"aHVpXzYwMTkzZmJlZTM0NmZhODVkNTE4YzJlYg==\"\n          schema:\n            type: string\n        - name: fields\n          in: query\n          description: Projection fields\n          required: false\n          explode: true\n          example: \"reviewText,rating\"\n          allowReserved: true\n          schema:\n            type: string\n        - name: pageSize\n          in: query\n          description: Page size\n          required: false\n          explode: true\n          example: 10\n          schema:\n            type: integer\n            format: int32\n        - name: belongsTo\n          in: query\n          description: Coma separated projection fields\n          example: \"resource:uuid:d420062a-881f-424a-871e-475aea5a2b64\"\n          required: false\n          explode: false\n          allowReserved: true\n          schema:\n            $ref: \"#/components/schemas/EntityId\"\n        - name: creatorId\n          in: query\n          description: Coma separated projection fields\n          example: \"user:uuid:e410062a-881f-424a-571e-377aea5b2b5f\"\n          required: false\n          explode: false\n          allowReserved: true\n          schema:\n            $ref: \"#/components/schemas/ActorId\"\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  collectionSize:\n                    type: integer\n                  collection:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Review\"\n                  cursor:\n                    type: string\n                  total:\n                    type: number\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n\n  \"/reviews/{id}\":\n    get:\n      tags:\n        - reviews\n      summary: Get review by id\n      description: Returns a specific Review\n      operationId: getReviewById\n      parameters:\n        - $ref: \"#/components/parameters/actorIdParam\"\n        - name: id\n          in: path\n          description: The id of the asset to fetch\n          required: true\n          schema:\n            type: string\n        - name: fields\n          in: query\n          description: Projection fields\n          required: false\n          explode: true\n          example: \"reviewText,rating\"\n          allowReserved: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ReviewResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n\n    patch:\n      tags:\n        - reviews\n      summary: Patch review\n      description: Use this method to do a partial update of the review. In the request provided fields\n        will be merged with the existing review object.\n      operationId: patchReview\n      parameters:\n        - $ref: \"#/components/parameters/actorIdParam\"\n        - name: id\n          in: path\n          description: id of the asset\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/ReviewPatch\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmpty\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"5XX\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    post:\n      tags:\n        - reviews\n      summary: Post review (alias for patch)\n      description: Use this method to do a partial update of the review. In the request provided fields\n        will be merged with the existing review object.\n      operationId: patchReview\n      parameters:\n        - $ref: \"#/components/parameters/actorIdParam\"\n        - name: id\n          in: path\n          description: id of the asset\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/ReviewPatch\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmpty\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"5XX\":\n          $ref: \"#/components/responses/UnexpectedError\"\n\n    delete:\n      tags:\n        - reviews\n      summary: Delete review\n      description: Delete existing review by id\n      operationId: deleteReview\n      parameters:\n        - $ref: \"#/components/parameters/actorIdParam\"\n        - name: id\n          in: path\n          description: id of the asset\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmpty\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"5XX\":\n          $ref: \"#/components/responses/UnexpectedError\"\n\ncomponents:\n  \n  requestBodies:\n\n    ReviewCreate:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ReviewCreate\"\n\n    ReviewPatch:\n      required: true\n      content:\n        application/json:\n          schema:\n            title: Patch body\n            description: The body can be any attribute defined in the review schema. The supplied attributes\n              overwrite the existing. Some special fields (like the id) will be ignored by the service.\n            type: object\n            minProperties: 1\n\n  schemas:\n\n    ActorId:\n      title: Actor ID\n      description: Unique identifier of an actor that create a review\n      type: string\n      example: \"user:uuid:ef2sad4d1fcb08-b894-4bdf-b662-0f105d597189\"\n      pattern: \"^(user|service):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n\n    ReviewId:\n      title: Review ID\n      description: Unique identifier of an review\n      type: string\n      example: \"review:uuid:ef2sad4d1fcb08-b894-4bdf-b662-0f105d597189\"\n      pattern: \"^review:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n\n    EntityId:\n      title: Entity ID\n      description: Unique identifier of an entity\n      type: string\n      example: \"resource:uuid:asdsad4d1fcb08-b894-4bdf-b662-0f105d597189\"\n      pattern: \"^.+:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n\n    Entity:\n      title: General Entity Data\n      type: object\n      required:\n        - id\n        - creatorId\n        - created\n        - modified\n        - entityType\n      additionalProperties: true\n      properties:\n        id:\n          $ref:  \"#/components/schemas/ReviewId\"\n        created:\n          type: string\n          title: Creation date\n          description: Creation date of the entity\n          example: '2018-11-08T13:55:45Z'\n          format: date-time\n        modified:\n          type: string\n          title: Modification date\n          description: Timestamp of the last change of the data\n          example: '2018-11-08T13:55:45Z'\n          format: date-time\n        creatorId:\n          $ref: \"#/components/schemas/ActorId\" \n        entityType:\n          type: string\n          title: Entity Type\n          description: The general type of the entity\n          enum:\n            - review\n\n    ReviewCreate:\n      description: Minimal required attributes for review creation\n      type: object\n      required:\n        - reviewText\n        - belongsTo\n        - rating\n      properties:\n        reviewText:\n          type: string\n          title: Review Text\n          description: the review text written by a user\n          minLength: 1\n          pattern: \"^(.*)$\"\n        rating:\n          type: number\n          title: Rating\n          description: Rating given by a user (value between 1-5)\n          minimum: 1\n          maximum: 5\n        belongsTo:\n          $ref:  \"#/components/schemas/EntityId\"\n\n    Review:\n      title: Review Data\n      type: object\n      additionalProperties: false\n      properties:\n        reviewText:\n          type: string\n          title: Review Text\n          description: the review text written by a user\n          minLength: 1\n          pattern: \"^(.*)$\"\n        rating:\n          type: number\n          title: Rating\n          description: Rating given by a user (value between 1-5)\n          minimum: 1\n          maximum: 5\n        belongsTo:\n          $ref:  \"#/components/schemas/EntityId\"\n        id:\n          $ref:  \"#/components/schemas/ReviewId\"\n        created:\n          type: string\n          title: Creation date\n          description: Creation date of the entity\n          example: '2018-11-08T13:55:45Z'\n          format: date-time\n        modified:\n          type: string\n          title: Modification date\n          description: Timestamp of the last change of the data\n          example: '2018-11-08T13:55:45Z'\n          format: date-time\n        creatorId:\n          $ref: \"#/components/schemas/ActorId\"\n        entityType:\n          type: string\n          title: Entity Type\n          description: The general type of the entity\n          enum:\n            - review\n\n    Error:\n      type: object\n      title: Operation Error\n      description: Error that can occure on request processing\n      required:\n        - type\n        - message\n        - code\n      properties:\n        type:\n          title: Error type\n          description: Futher error type information\n          type: string\n        message:\n          title: Error message\n          description: Details about error\n          type: string\n        code:\n          title: Error code\n          description: HTTP error code\n          type: number\n          format: int32\n          example: 409\n        errors:\n          title: Errors\n          description: More error details that are reference in most case specification or schema validation errors\n          type: array\n          items:\n            type: object\n  \n  responses:\n\n    Success:\n      description: Succesful\n      content:\n        text/plain:\n          schema:\n            type: string\n    SuccessEmpty:\n      description: Succesful operation\n\n    ReviewCreateSuccess:\n      description: Succesful review creation retruns created review id\n      content:\n        text/plain:\n          schema:\n            $ref: \"#/components/schemas/ReviewId\"\n\n    ReviewResponse:\n      description: Review data response\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Review\"\n\n    UnexpectedError:\n      description: Internal error\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n\n    NotFoundError:\n      description: Entity not found\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n\n    InvalidDataError:\n      description: Invalid data supplied\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n\n  parameters:\n    actorIdParam:\n      in: header\n      description: The id of the origin that produces action/message. Can be a user or service\n      name: x-actorid\n      schema:\n        type: string\n        minLength: 1\n        pattern: \"^(user|service):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n      required: true\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /reviews/{id}: patch: duplicate operationId: \"patchReview\""
}