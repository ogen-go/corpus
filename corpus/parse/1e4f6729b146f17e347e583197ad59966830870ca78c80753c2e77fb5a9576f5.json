{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mmontone/cl-rest-server"
		},
		"file": {
			"name": "petstore.v3.yaml",
			"size": 0,
			"path": "demo/openapi/petstore.v3.yaml",
			"byteSize": 23306,
			"content": "---\nopenapi: 3.0.0\ninfo:\n  title: Swagger Petstore\n  description: 'This is a sample server Petstore server.  You can find out more about\n    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For\n    this sample, you can use the api key `special-key` to test the authorization filters.'\n  license:\n    name: MIT\n    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT\n  version: 1.0.0\nservers:\n- url: http://petstore.swagger.io/v2\n  variables: {}\npaths:\n  \"/pet\":\n    put:\n      tags:\n      - pet\n      summary: updatePet\n      description: Update an existing pet\n      operationId: updatePet\n      parameters: []\n      requestBody:\n        description: Pet object that needs to be added to the store\n        content:\n          application/json:\n            schema:\n              description: Pet object that needs to be added to the store\n              \"$ref\": \"#/components/schemas/Pet\"\n        required: true\n      responses:\n        '200':\n          content:\n            text/plain:\n              schema:\n                type: 'null'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n      deprecated: false\n      x-operation-settings:\n        CollectParameters: false\n        AllowDynamicQueryParameters: false\n        AllowDynamicFormParameters: false\n        IsMultiContentStreaming: false\n    post:\n      tags:\n      - pet\n      summary: addPet\n      description: Add a new pet to the store\n      operationId: addPet\n      parameters: []\n      requestBody:\n        description: Pet object that needs to be added to the store\n        content:\n          application/json:\n            schema:\n              description: Pet object that needs to be added to the store\n              \"$ref\": \"#/components/schemas/Pet\"\n        required: true\n      responses:\n        '200':\n          content:\n            text/plain:\n              schema:\n                type: 'null'\n        '405':\n          description: Invalid input\n      deprecated: false\n      x-operation-settings:\n        CollectParameters: false\n        AllowDynamicQueryParameters: false\n        AllowDynamicFormParameters: false\n        IsMultiContentStreaming: false\n  \"/pet/findByStatus\":\n    get:\n      tags:\n      - pet\n      summary: findPetsByStatus\n      description: Finds Pets by status\n      operationId: findPetsByStatus\n      parameters:\n      - name: status\n        in: query\n        description: Status values that need to be considered for filter\n        required: true\n        deprecated: false\n        allowEmptyValue: false\n        style: matrix\n        explode: false\n        allowReserved: false\n        schema:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/Status6\"\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  \"$ref\": \"#/components/schemas/Pet\"\n                description: successful operation\n        '400':\n          description: Invalid status value\n      deprecated: false\n      x-operation-settings:\n        CollectParameters: false\n        AllowDynamicQueryParameters: false\n        AllowDynamicFormParameters: false\n        IsMultiContentStreaming: false\n  \"/pet/findByTags\":\n    get:\n      tags:\n      - pet\n      summary: findPetsByTags\n      description: Finds Pets by tags\n      operationId: findPetsByTags\n      parameters:\n      - name: tags\n        in: query\n        description: Tags to filter by\n        required: true\n        deprecated: false\n        allowEmptyValue: false\n        style: matrix\n        explode: false\n        allowReserved: false\n        schema:\n          type: array\n          items:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  \"$ref\": \"#/components/schemas/Pet\"\n                description: successful operation\n        '400':\n          description: Invalid tag value\n      deprecated: false\n      x-operation-settings:\n        CollectParameters: false\n        AllowDynamicQueryParameters: false\n        AllowDynamicFormParameters: false\n        IsMultiContentStreaming: false\n  \"/pet/{petId}\":\n    get:\n      tags:\n      - pet\n      summary: getPetById\n      description: Find pet by ID\n      operationId: getPetById\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet to return\n        required: true\n        deprecated: false\n        allowEmptyValue: false\n        style: matrix\n        explode: false\n        allowReserved: false\n        schema:\n          type: integer\n          format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                description: successful operation\n                \"$ref\": \"#/components/schemas/Pet\"\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n      deprecated: false\n      x-operation-settings:\n        CollectParameters: false\n        AllowDynamicQueryParameters: false\n        AllowDynamicFormParameters: false\n        IsMultiContentStreaming: false\n    post:\n      tags:\n      - pet\n      summary: updatePetWithForm\n      description: Updates a pet in the store with form data\n      operationId: updatePetWithForm\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet that needs to be updated\n        required: true\n        deprecated: false\n        allowEmptyValue: false\n        style: matrix\n        explode: false\n        allowReserved: false\n        schema:\n          type: integer\n          format: int64\n      - name: name\n        in: query\n        description: Updated name of the pet\n        required: false\n        deprecated: false\n        allowEmptyValue: false\n        style: matrix\n        explode: false\n        allowReserved: false\n        schema:\n          type: string\n      - name: status\n        in: query\n        description: Updated status of the pet\n        required: false\n        deprecated: false\n        allowEmptyValue: false\n        style: matrix\n        explode: false\n        allowReserved: false\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            text/plain:\n              schema:\n                type: 'null'\n        '405':\n          description: Invalid input\n      deprecated: false\n      x-operation-settings:\n        CollectParameters: false\n        AllowDynamicQueryParameters: false\n        AllowDynamicFormParameters: false\n        IsMultiContentStreaming: false\n    delete:\n      tags:\n      - pet\n      summary: deletePet\n      description: Deletes a pet\n      operationId: deletePet\n      parameters:\n      - name: petId\n        in: path\n        description: Pet id to delete\n        required: true\n        deprecated: false\n        allowEmptyValue: false\n        style: matrix\n        explode: false\n        allowReserved: false\n        schema:\n          type: integer\n          format: int64\n      - name: api_key\n        in: header\n        description: ''\n        required: false\n        deprecated: false\n        allowEmptyValue: false\n        style: matrix\n        explode: false\n        allowReserved: false\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            text/plain:\n              schema:\n                type: 'null'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n      deprecated: false\n      x-operation-settings:\n        CollectParameters: false\n        AllowDynamicQueryParameters: false\n        AllowDynamicFormParameters: false\n        IsMultiContentStreaming: false\n  \"/pet/{petId}/uploadImage\":\n    post:\n      tags:\n      - pet\n      summary: uploadFile\n      description: uploads an image\n      operationId: uploadFile\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet to update\n        required: true\n        deprecated: false\n        allowEmptyValue: false\n        style: matrix\n        explode: false\n        allowReserved: false\n        schema:\n          type: integer\n          format: int64\n      - name: additionalMetadata\n        in: query\n        description: Additional data to pass to server\n        required: false\n        deprecated: false\n        allowEmptyValue: false\n        style: matrix\n        explode: false\n        allowReserved: false\n        schema:\n          type: string\n      - name: file\n        in: query\n        description: file to upload\n        required: false\n        deprecated: false\n        allowEmptyValue: false\n        style: matrix\n        explode: false\n        allowReserved: false\n        schema:\n          type: object\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                description: successful operation\n                \"$ref\": \"#/components/schemas/ApiResponse\"\n      deprecated: false\n      x-operation-settings:\n        CollectParameters: false\n        AllowDynamicQueryParameters: false\n        AllowDynamicFormParameters: false\n        IsMultiContentStreaming: false\n  \"/store/inventory\":\n    get:\n      tags:\n      - store\n      summary: getInventory\n      description: Returns pet inventories by status\n      operationId: getInventory\n      parameters: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                type: integer\n                description: successful operation\n                format: int32\n      deprecated: false\n      x-operation-settings:\n        CollectParameters: false\n        AllowDynamicQueryParameters: false\n        AllowDynamicFormParameters: false\n        IsMultiContentStreaming: false\n  \"/store/order\":\n    post:\n      tags:\n      - store\n      summary: placeOrder\n      description: Place an order for a pet\n      operationId: placeOrder\n      parameters: []\n      requestBody:\n        description: order placed for purchasing the pet\n        content:\n          application/json:\n            schema:\n              description: order placed for purchasing the pet\n              \"$ref\": \"#/components/schemas/Order\"\n        required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                description: successful operation\n                \"$ref\": \"#/components/schemas/Order\"\n        '400':\n          description: Invalid Order\n      deprecated: false\n      security: []\n      x-operation-settings:\n        CollectParameters: false\n        AllowDynamicQueryParameters: false\n        AllowDynamicFormParameters: false\n        IsMultiContentStreaming: false\n  \"/store/order/{orderId}\":\n    get:\n      tags:\n      - store\n      summary: getOrderById\n      description: Find purchase order by ID\n      operationId: getOrderById\n      parameters:\n      - name: orderId\n        in: path\n        description: ID of pet that needs to be fetched\n        required: true\n        deprecated: false\n        allowEmptyValue: false\n        style: matrix\n        explode: false\n        allowReserved: false\n        schema:\n          type: integer\n          format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                description: successful operation\n                \"$ref\": \"#/components/schemas/Order\"\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n      deprecated: false\n      security: []\n      x-operation-settings:\n        CollectParameters: false\n        AllowDynamicQueryParameters: false\n        AllowDynamicFormParameters: false\n        IsMultiContentStreaming: false\n    delete:\n      tags:\n      - store\n      summary: deleteOrder\n      description: Delete purchase order by ID\n      operationId: deleteOrder\n      parameters:\n      - name: orderId\n        in: path\n        description: ID of the order that needs to be deleted\n        required: true\n        deprecated: false\n        allowEmptyValue: false\n        style: matrix\n        explode: false\n        allowReserved: false\n        schema:\n          type: integer\n          format: int64\n      responses:\n        '200':\n          content:\n            text/plain:\n              schema:\n                type: 'null'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n      deprecated: false\n      security: []\n      x-operation-settings:\n        CollectParameters: false\n        AllowDynamicQueryParameters: false\n        AllowDynamicFormParameters: false\n        IsMultiContentStreaming: false\n  \"/user\":\n    post:\n      tags:\n      - user\n      summary: createUser\n      description: Create user\n      operationId: createUser\n      parameters: []\n      requestBody:\n        description: Created user object\n        content:\n          application/json:\n            schema:\n              description: Created user object\n              \"$ref\": \"#/components/schemas/User\"\n        required: true\n      responses:\n        '200':\n          content:\n            text/plain:\n              schema:\n                type: 'null'\n        default:\n          description: successful operation\n      deprecated: false\n      security: []\n      x-operation-settings:\n        CollectParameters: false\n        AllowDynamicQueryParameters: false\n        AllowDynamicFormParameters: false\n        IsMultiContentStreaming: false\n  \"/user/createWithArray\":\n    post:\n      tags:\n      - user\n      summary: createUsersWithArrayInput\n      description: Creates list of users with given input array\n      operationId: createUsersWithArrayInput\n      parameters: []\n      requestBody:\n        description: List of user object\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                \"$ref\": \"#/components/schemas/User\"\n              description: List of user object\n        required: true\n      responses:\n        '200':\n          content:\n            text/plain:\n              schema:\n                type: 'null'\n        default:\n          description: successful operation\n      deprecated: false\n      security: []\n      x-operation-settings:\n        CollectParameters: false\n        AllowDynamicQueryParameters: false\n        AllowDynamicFormParameters: false\n        IsMultiContentStreaming: false\n  \"/user/createWithList\":\n    post:\n      tags:\n      - user\n      summary: createUsersWithListInput\n      description: Creates list of users with given input array\n      operationId: createUsersWithListInput\n      parameters: []\n      requestBody:\n        description: List of user object\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                \"$ref\": \"#/components/schemas/User\"\n              description: List of user object\n        required: true\n      responses:\n        '200':\n          content:\n            text/plain:\n              schema:\n                type: 'null'\n        default:\n          description: successful operation\n      deprecated: false\n      security: []\n      x-operation-settings:\n        CollectParameters: false\n        AllowDynamicQueryParameters: false\n        AllowDynamicFormParameters: false\n        IsMultiContentStreaming: false\n  \"/user/login\":\n    get:\n      tags:\n      - user\n      summary: loginUser\n      description: Logs user into the system\n      operationId: loginUser\n      parameters:\n      - name: username\n        in: query\n        description: The user name for login\n        required: true\n        deprecated: false\n        allowEmptyValue: false\n        style: matrix\n        explode: false\n        allowReserved: false\n        schema:\n          type: string\n      - name: password\n        in: query\n        description: The password for login in clear text\n        required: true\n        deprecated: false\n        allowEmptyValue: false\n        style: matrix\n        explode: false\n        allowReserved: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n                description: successful operation\n        '400':\n          description: Invalid username/password supplied\n      deprecated: false\n      security: []\n      x-operation-settings:\n        CollectParameters: false\n        AllowDynamicQueryParameters: false\n        AllowDynamicFormParameters: false\n        IsMultiContentStreaming: false\n  \"/user/logout\":\n    get:\n      tags:\n      - user\n      summary: logoutUser\n      description: Logs out current logged in user session\n      operationId: logoutUser\n      parameters: []\n      responses:\n        '200':\n          content:\n            text/plain:\n              schema:\n                type: 'null'\n        default:\n          description: successful operation\n      deprecated: false\n      security: []\n      x-operation-settings:\n        CollectParameters: false\n        AllowDynamicQueryParameters: false\n        AllowDynamicFormParameters: false\n        IsMultiContentStreaming: false\n  \"/user/{username}\":\n    get:\n      tags:\n      - user\n      summary: getUserByName\n      description: Get user by user name\n      operationId: getUserByName\n      parameters:\n      - name: username\n        in: path\n        description: The name that needs to be fetched. Use user1 for testing.\n        required: true\n        deprecated: false\n        allowEmptyValue: false\n        style: matrix\n        explode: false\n        allowReserved: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                description: successful operation\n                \"$ref\": \"#/components/schemas/User\"\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n      deprecated: false\n      security: []\n      x-operation-settings:\n        CollectParameters: false\n        AllowDynamicQueryParameters: false\n        AllowDynamicFormParameters: false\n        IsMultiContentStreaming: false\n    put:\n      tags:\n      - user\n      summary: updateUser\n      description: Updated user\n      operationId: updateUser\n      parameters:\n      - name: username\n        in: path\n        description: name that need to be updated\n        required: true\n        deprecated: false\n        allowEmptyValue: false\n        style: matrix\n        explode: false\n        allowReserved: false\n        schema:\n          type: string\n      requestBody:\n        description: Updated user object\n        content:\n          application/json:\n            schema:\n              description: Updated user object\n              \"$ref\": \"#/components/schemas/User\"\n        required: true\n      responses:\n        '200':\n          content:\n            text/plain:\n              schema:\n                type: 'null'\n        '400':\n          description: Invalid user supplied\n        '404':\n          description: User not found\n      deprecated: false\n      security: []\n      x-operation-settings:\n        CollectParameters: false\n        AllowDynamicQueryParameters: false\n        AllowDynamicFormParameters: false\n        IsMultiContentStreaming: false\n    delete:\n      tags:\n      - user\n      summary: deleteUser\n      description: Delete user\n      operationId: deleteUser\n      parameters:\n      - name: username\n        in: path\n        description: The name that needs to be deleted\n        required: true\n        deprecated: false\n        allowEmptyValue: false\n        style: matrix\n        explode: false\n        allowReserved: false\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            text/plain:\n              schema:\n                type: 'null'\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n      deprecated: false\n      security: []\n      x-operation-settings:\n        CollectParameters: false\n        AllowDynamicQueryParameters: false\n        AllowDynamicFormParameters: false\n        IsMultiContentStreaming: false\ncomponents:\n  schemas:\n    Order:\n      title: Order\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          description: Order Status\n          \"$ref\": \"#/components/schemas/Status\"\n        complete:\n          type: boolean\n    Status:\n      title: Status\n      enum:\n      - placed\n      - approved\n      - delivered\n      type: string\n    Category:\n      title: Category\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    User:\n      title: User\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          description: User Status\n          format: int32\n    Tag:\n      title: Tag\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    Pet:\n      title: Pet\n      required:\n      - name\n      - photoUrls\n      type: object\n      properties:\n        name:\n          type: string\n        photoUrls:\n          type: array\n          items:\n            type: string\n          description: ''\n        id:\n          type: integer\n          format: int64\n        category:\n          \"$ref\": \"#/components/schemas/Category\"\n        tags:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/Tag\"\n          description: ''\n        status:\n          description: pet status in the store\n          \"$ref\": \"#/components/schemas/Status6\"\n    Status6:\n      title: Status6\n      enum:\n      - available\n      - pending\n      - sold\n      type: string\n    ApiResponse:\n      title: ApiResponse\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\nsecurity:\n- {}\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /pet/findByStatus: get: operation \"findPetsByStatus\": parameters: parse parameter \"status\": style: unexpected style: \"matrix\""
}