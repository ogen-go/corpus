{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/oas-tools/oas-tools"
		},
		"file": {
			"name": "oai-spec.yaml",
			"size": 0,
			"path": "tests/testServer/api/oai-spec.yaml",
			"byteSize": 24427,
			"content": "openapi: \"3.0.0\"\nservers:\n  - url: 'http://testingserver/api/v1'\ninfo:\n  version: 1.0.0\n  title: Valid specification file\n  license:\n    name: MIT\npaths:\n  /multipartFormdata:\n    post:\n      summary: testing a multipart form with upload file and regular parameters\n      operationId: createPetsViaMultipartFormdata\n      x-router-controller: \"petsController\"\n      tags:\n        - pets\n      requestBody:\n        required: true\n        description: Pet to add to the store via an uploaded file and regular parameters\n        x-name: petViaForm\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              required:\n                - file\n                - id\n                - name\n              properties:\n                file:\n                  type: string\n                  format: binary\n                  description: a binary file uploaded via openAPI spec\n                id:\n                  type: string #it's a form field, so will always be a string\n                name:\n                  type: string\n      responses:\n        '201':\n          description: Update status\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n\n  /paramTestsQuery:\n    get:\n      summary: This path is only for tests\n      operationId: paramTestsQuery\n      tags:\n        - pets\n      parameters:\n        - name: integerParam\n          in: query\n          description: Integer parameter to test validation\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: booleanParam\n          in: query\n          description: Boolean parameter to test validation\n          required: true\n          schema:\n            type: boolean\n        - name: stringParam\n          in: query\n          description: string parameter to test validation\n          required: true\n          schema:\n            type: string\n        - name: doubleParam\n          in: query\n          description: string parameter to test validation\n          required: true\n          schema:\n            type: number\n      responses:\n        '200':\n          description: An paged array of pets\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      x-router-controller: \"petsController\"\n      #x-router-controller: \"Default\"\n  /paramTestsPath/{integerParam}/{booleanParam}/{stringParam}/{doubleParam}:\n    get:\n      summary: This path is only for tests\n      operationId: paramTestsPath\n      tags:\n        - pets\n      parameters:\n        - name: integerParam\n          in: path\n          description: Integer parameter to test validation\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: booleanParam\n          in: path\n          description: Boolean parameter to test validation\n          required: true\n          schema:\n            type: boolean\n        - name: stringParam\n          in: path\n          description: string parameter to test validation\n          required: true\n          schema:\n            type: string\n        - name: doubleParam\n          in: path\n          description: string parameter to test validation\n          required: true\n          schema:\n            type: number\n      responses:\n        '200':\n          description: An paged array of pets\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      x-router-controller: \"petsController\"\n      #x-router-controller: \"Default\"\n  /operationTests:\n    get:\n      summary: This path is only for tests\n      operationId: operationTests\n      tags:\n        - pets\n      security: [\n        FourthBearer: []\n      ]\n      responses:\n        '200':\n          description: The operation\n          content:\n            application/json:\n              schema:\n                type: object\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      x-router-controller: \"petsController\"\n      #x-router-controller: \"Default\"\n  /ownershipTest/{idParam}:\n    get:\n      summary: This path is for testing ownership control\n      operationId: ownershipTest\n      tags:\n        - pets\n      parameters:\n        - name: idParam\n          in: path\n          description: ID to check ownership\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A sample response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      x-router-controller: \"petsController\"\n  /ownershipBindingTest/{sampleParam}:\n    get:\n      summary: This path is for testing ownership control with acl binding\n      operationId: ownershipBindingTest\n      tags:\n        - pets\n      parameters:\n        - name: sampleParam\n          in: path\n          description: ID to check ownership\n          required: true\n          schema:\n            type: string\n          x-acl-binding: idParam\n      responses:\n        '200':\n          description: A sample response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      x-router-controller: \"petsController\"\n  /responseBodyTest:\n    get:\n      summary: should return an object with both right and wrong properties\n      operationId: responseBodyTest\n      tags:\n        - pets\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResponseTest\"\n      x-router-controller: \"petsController\"\n  /requestBodyTest:\n    post:\n      summary: Test for optional requestBody\n      operationId: testRequestBody\n      requestBody:\n        description: Optional requestBody\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n      responses:\n        '201':\n          description: Success\n  /petsCorrupt:\n    get:\n      summary: Create a pet\n      operationId: listCorruptPets\n      tags:\n        - pets\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: An paged array of pets\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      x-router-controller: \"petsController\"\n  /pets:\n    get:\n      summary: List all pets\n      operationId: listPets\n      tags:\n        - pets\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: An paged array of pets\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      #x-router-controller: \"petsController\"\n      #x-router-controller: \"Default\"\n    post:\n      summary: Create a pet\n      operationId: createPets\n      tags:\n        - pets\n      parameters:\n        - name: Authorization\n          schema:\n            type: string\n          in: header\n          description: \"Authorization header parameter must be set using the form Bearer [token].\"\n          required: True\n      requestBody:\n        description: Pet to add to the store\n        x-name: pet\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n      responses:\n        '201':\n          description: Update status\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      #x-router-controller: \"petsController\"\n      #x-router-controller: \"Default\"\n    delete:\n        description: deletes all the pets\n        operationId: deletePets\n        responses:\n          '204':\n            description: pets deleted\n          default:\n            description: unexpected error\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/Error'\n        #x-router-controller: \"petsController\"\n        #x-router-controller: \"Default\"\n  /pets/{petId}:\n    get:\n      summary: Info for a specific pet\n      operationId: showPetById\n      tags:\n        - pets\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          description: The id of the pet to retrieve\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        '404':\n          description: pet not found\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      #x-router-controller: \"petsController\"\n      #x-router-controller: \"Default\"\n    head:\n      summary: Get only headers\n      operationId: getPetHeaders\n      x-router-controller: \"petsController\"\n      tags:\n        - pets\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          description: The id of the pet to retrieve\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n    put:\n      description: updates a pet based on its petId\n      operationId: updatePet\n      parameters:\n          - name: petId\n            in: path\n            description: ID of pet to update\n            required: true\n            schema:\n              type: integer\n              format: int64\n      requestBody:\n        description: Pet to update\n        x-name: pet\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n      responses:\n          '200':\n            description: pet updated\n          '404':\n            description: pet not found\n          default:\n            description: unexpected error\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/Error'\n      #x-router-controller: \"petsController\"\n      #x-router-controller: \"Default\"\n    delete:\n      description: deletes a single pet based on the ID supplied\n      operationId: deletePet\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          description: The id of the pet to delete\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: pet deleted\n        '404':\n          description: pet not found\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      #x-router-controller: \"petsController\"\n      #x-router-controller: \"Default\"\n  /pets/{petId}/tag:\n    patch:\n      description: Updates a tag of a pet\n      operationId: updateTag\n      x-router-controller: \"petsController\"\n      parameters:\n          - name: petId\n            in: path\n            description: ID of pet to update\n            required: true\n            schema:\n              type: integer\n              format: int64\n      requestBody:\n        description: Updated tag\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Tag'\n      responses:\n          '200':\n            description: Tag updated\n          '404':\n            description: Pet not found\n          default:\n            description: unexpected error\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/Error'\n  /securityFile:\n    get:\n      summary: Security config file\n      operationId: securityFile\n      security: []\n      tags:\n        - pets\n      responses:\n        '200':\n          description: A security config file\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  issuer:\n                    type: string\n                  key:\n                    type: string\n      x-router-controller: \"petsController\"\n  /grantsFile:\n    get:\n      summary: Auth config file\n      operationId: grantsFile\n      security: []\n      tags:\n        - pets\n      responses:\n        '200':\n          description: An auth config file\n          content:\n            application/json:\n              schema:\n                type: object\n      x-router-controller: \"petsController\"\n  /tokenVerificationTest:\n    get:\n      summary: Token test\n      operationId: tokenVerificationTest\n      security: [\n        FourthBearer: []\n      ]\n      tags:\n        - pets\n      responses:\n        '200':\n          description: A sample response\n          content:\n            application/json:\n              schema:\n                type: object\n      x-router-controller: \"petsController\"\n  /contentTypeTest:\n    get:\n      summary: Auth config file\n      operationId: contentTypeTest\n      security: []\n      tags:\n        - pets\n      responses:\n        '200':\n          description: An auth config file\n          content:\n            application/json:\n              schema:\n                type: object\n            text/csv:\n              schema:\n                type: object\n      x-router-controller: \"petsController\"\n  /wrongResponseCode:\n    get:\n      summary: Returns a wrong response code\n      operationId: wrongResponseCode\n      security: []\n      tags:\n        - pets\n      responses:\n        '200':\n          description: A sample object\n          content:\n            application/json:\n              schema:\n                type: object\n      x-router-controller: \"petsController\"\n  /commonParamTest:\n    parameters:\n        - name: testParam\n          in: query\n          description: Test parameter\n          required: true\n          schema:\n            type: integer\n            format: int64\n    get:\n      summary: Common parameters test\n      operationId: commonParamTest\n      tags:\n        - pets\n      responses:\n        '200':\n          description: A sample response\n          content:\n            application/json:\n              schema:\n                type: object\n      x-router-controller: \"petsController\"\n  /overrideCommonParamTest:\n    parameters:\n        - name: testParam\n          in: query\n          description: Test parameter\n          required: true\n          schema:\n            type: string\n    get:\n      summary: Override common parameters test\n      operationId: commonParamTest\n      tags:\n        - pets\n      parameters:\n        - name: testParam\n          in: query\n          description: Test parameter\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: A sample response\n          content:\n            application/json:\n              schema:\n                type: object\n      x-router-controller: \"petsController\"\n  /nullableResponseTest:\n    post:\n      summary: Nullable test\n      operationId: nullableResponse\n      security: []\n      tags:\n        - pets\n      requestBody:\n        description: Pet to add to the store\n        x-name: pet\n        required: true\n        content:\n          application/json:\n            schema:\n              required:\n                - id\n              properties:\n                id:\n                  type: integer\n                lol:\n                  type: integer\n                  example: 444\n                  default: 444\n                aStringNullParam:\n                  description: a nullable string parameter\n                  type: string\n                  nullable: true\n                  default: null\n                  example: null\n                aBooleanNullParam:\n                  description: a nullable boolean parameter\n                  type: boolean\n                  nullable: true\n                  default: null\n                  example: null\n                anIntegerNullParam:\n                  description: a nullable integer parameter\n                  type: integer\n                  nullable: true\n                  default: null\n                  example: null\n                anArrayNullParam:\n                  description: a nullable array parameter\n                  type: array\n                  items:\n                    type: string\n                  nullable: true\n                  default: null\n                  example: null\n                anObjectNullParam:\n                  description: a nullable object parameter\n                  type: object\n                  nullable: true\n                  default: null\n                  example: null\n                anEnumNullParam:\n                  description: a nullable enum parameter\n                  type: string\n                  nullable: true\n                  default: null\n                  example: null\n                  enum:\n                    - open\n                    - closed\n                    - null\n      responses:\n        '200':\n          description: A sample response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                  text:\n                    type: string\n                    nullable: true\n                    example: null\n                  active:\n                    type: boolean\n                    nullable: true\n                  previousId:\n                    type: integer\n                    nullable: true\n                    default: null\n                  colors:\n                    type: array\n                    items:\n                      type: string\n                    nullable: true\n                  contacts:\n                    type: object\n                    nullable: true\n                    example: null\n                  salary:\n                    type: number\n                    nullable: true\n                  status:\n                    type: string\n                    nullable: true\n                    enum:\n                      - open\n                      - closed\n                      - null\n      x-router-controller: \"petsController\"\n  /defaultResponseCode:\n    get:\n      summary: Returns a default response code\n      operationId: defaultResponseCode\n      security: []\n      tags:\n        - pets\n      responses:\n        default:\n          description: A sample object\n          content:\n            application/json:\n              schema:\n                type: object\n      x-router-controller: \"petsController\"\n  /arrayWithStringsTest:\n    get:\n      summary: Test that we don't convert strings to integers if they are specified as an array\n      operationId: arrayWithStringsTest\n      security: []\n      tags:\n        - pets\n      parameters:\n        - name: listTestParam\n          in: query\n          description: Test parameter\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: A sample response\n          content:\n            application/json:\n              schema:\n                type: object\n      x-router-controller: \"petsController\"\n  /noAdditionalPropertiesTest:\n    post:\n      summary: Test that in case of additionalProperties false, an error is returned if the request contains additional properties\n      operationId: anyResponse\n      security: []\n      tags:\n        - pets\n      requestBody:\n        description: Pet where no additional properties are allowed\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n              additionalProperties: false\n      responses:\n        \"201\":\n          description: Any sample response\n          content:\n            application/json:\n              schema:\n                type: object\n      x-router-controller: \"petsController\"\nsecurity:\n  - Bearer: []\ncomponents:\n  securitySchemes:\n    Bearer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      x-bearer-config: http://localhost:8080/api/v1/securityFile\n      x-acl-config: http://localhost:8080/api/v1/grantsFile\n    SecondBearer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    ThirdBearer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    FourthBearer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    ResponseTest:\n      type: array\n      items:\n        $ref: \"#/components/schemas/TestObject\"\n    TestObject:\n      required:\n        - integerProperty\n        - booleanProperty\n        - stringProperty\n        - doubleProperty\n      properties:\n        integerProperty:\n          type: integer\n        booleanProperty:\n          type: boolean\n        stringProperty:\n          type: string\n        doubleProperty:\n          type: number\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n    Pets:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Pet\"\n    Error:\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    Tag:\n      required:\n        - tag\n      properties:\n        tag:\n          type: string\n"
		}
	},
	"Error": "parse: parse spec: paths: /overrideCommonParamTest: get: duplicate operationId: \"commonParamTest\""
}