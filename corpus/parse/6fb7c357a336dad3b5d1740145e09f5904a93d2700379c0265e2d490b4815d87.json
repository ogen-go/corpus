{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/sartography/cr-connect-workflow"
		},
		"file": {
			"name": "api.yml",
			"size": 0,
			"path": "crc/api.yml",
			"byteSize": 69700,
			"content": "openapi: \"3.0.2\"\ninfo:\n  version: 1.0.0\n  title: Workflow Microservice\n  license:\n    name: MIT\nservers:\n  - url: http://localhost:5000/v1.0\nsecurity:\n  - jwt: ['secret']\npaths:\n  /login:\n    get:\n      operationId: crc.api.user.login\n      summary: In production, logs the user in via SSO. If not in production, logs in as a specific user for testing.\n      security: []  # Disable security for this endpoint only.\n      parameters:\n        - name: uid\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: redirect_url\n          in: query\n          required: false\n          schema:\n            type: string\n      tags:\n        - Users\n      responses:\n        '304':\n          description: Redirection to the hosted frontend with an auth_token header.\n\n  /user:\n    parameters:\n      - name: admin_impersonate_uid\n        in: query\n        required: false\n        description: For admins, the unique uid of an existing user to impersonate.\n        schema:\n          type: string\n    get:\n      operationId: crc.api.user.get_current_user\n      summary: Returns the current user.\n      tags:\n        - Users\n      responses:\n        '200':\n          description: The currently-authenticated user, or, if the current user is an admin and admin_impersonate_uid is provided, this will be the user with the given uid.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n\n  /list_users:\n    get:\n      operationId: crc.api.user.get_all_users\n      security:\n        - auth_admin: ['secret']\n      summary: Returns a list of all users in the database.\n      tags:\n        - Users\n      responses:\n        '200':\n          description: All users in the database.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/User\"\n  # /v1.0/document_directory/{study_id}\n  /document_directory/{study_id}:\n    parameters :\n      - name : study_id\n        required : true\n        in : path\n        description : The unique id of a study.\n        schema :\n          type : integer\n      - name : workflow_id\n        in : query\n        required : false\n        schema :\n          type : integer\n      - name : include_archived\n        in : query\n        required : false\n        schema :\n          type : boolean\n    get:\n      operationId: crc.api.document.get_document_directory\n      summary: Returns a directory of all files for study in a nested structure\n      tags:\n        - Document Categories\n      responses:\n        '200':\n          description: All IRB Categories defined in the file document.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/DocumentDirectory\"\n\n  # Context-less LDAP Lookup\n  /ldap:\n    parameters:\n      - name: query\n        in: query\n        required: false\n        description: The string to search for in the Value column of the lookup table.\n        schema:\n          type: string\n      - name: limit\n        in: query\n        required: false\n        description: The total number of records to return, defaults to 10.\n        schema:\n          type: integer\n\n    get:\n      operationId: crc.api.workflow.lookup_ldap\n      summary: Returns a list of LDAP users, with a given query.\n      tags:\n        - Users\n      responses:\n        '200':\n          description: An array of all LDAP users.\n          content:\n            application/json:\n              schema:\n                type: array\n\n  # /v1.0/study\n  /study:\n    get:\n      operationId: crc.api.study.user_studies\n      summary: Provides a list of studies related to the current user.\n      tags:\n        - Studies\n      responses:\n        '200':\n          description: An array of studies, ordered by the last modified date.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Study\"\n    post:\n      operationId: crc.api.study.add_study\n      summary: Creates a new study with the given parameters.\n      tags:\n        - Studies\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Study'\n      responses:\n        '200':\n          description: Study created successfully.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Study\"\n  /study/all:\n    get:\n      operationId: crc.api.study.all_studies\n      summary: Provides a list of studies\n      tags:\n        - Studies\n      responses:\n        '200':\n          description: An array of studies, with submitted files, ordered by the last modified date.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Study\"\n  /study/{study_id}:\n    parameters:\n      - name: study_id\n        in: path\n        required: true\n        description: The id of the study for which workflows should be returned.\n        schema:\n          type: integer\n          format: int32\n      - name: update_status\n        in: query\n        required: false\n        description: If set to true, will synch the study with protocol builder and assure the status of all workflows is up to date (expensive).\n        schema:\n          type: boolean\n    get:\n      operationId: crc.api.study.get_study\n      summary: Provides a single study\n      tags:\n        - Studies\n      responses:\n        '200':\n          description: An Study Object\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Study\"\n    delete:\n      operationId: crc.api.study.delete_study\n      security:\n        - auth_admin: ['secret']\n      summary: Removes the given study completely.\n      tags:\n        - Studies\n      responses:\n        '204':\n          description: The study has been removed.\n    put:\n      operationId: crc.api.study.update_study\n      summary: Updates an existing study with the given parameters.\n      tags:\n        - Studies\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Study'\n      responses:\n        '200':\n          description: Study updated successfully.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Study\"\n  /study/{study_id}/associates:\n    parameters:\n      - name: study_id\n        in: path\n        required: true\n        description: The id of the study for which associates should be returned.\n        schema:\n          type: integer\n          format: int32\n    get:\n      operationId: crc.api.study.get_study_associates\n      summary: Provides a list of associates for a particular study\n      tags:\n        - Studies\n      responses:\n        '200':\n          description: list of Study Associate Objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/StudyAssociate\"\n  /study/{study_id}/log:\n    parameters:\n      - name: study_id\n        in: path\n        required: true\n        description: The id of the study for which logs should be returned.\n        schema:\n          type: integer\n          format: int32\n    put:\n      operationId: crc.api.study.get_logs_for_study\n      summary: Provides a list of logged events that occured within a study\n      tags:\n        - Studies\n      requestBody:\n        description: Log Pagination Request\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PaginatedTaskLog\"\n      responses:\n        '200':\n          description: list of Study logs - events that have occured within a study.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TaskLog\"\n  /study/{study_id}/log/download:\n    parameters:\n      - name: study_id\n        in: path\n        required: true\n        description: The id of the study for which logs should be returned.\n        schema:\n          type: integer\n          format: int32\n      - name : auth_token\n        in : query\n        required : true\n        description : User Auth Toeken\n        schema:\n          type: string\n    get:\n      operationId: crc.api.study.download_logs_for_study\n      summary: Returns a csv file of logged events that occured within a study\n      security: [] # Will verify manually with provided Auth Token.\n      tags:\n        - Studies\n      responses:\n        '200':\n          description: Returns the spreadsheet file of logged events\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n\n  /workflow-specification:\n    get:\n      operationId: crc.api.workflow.all_specifications\n      summary: Provides a list of workflows specifications that can be added to a study manually. Please note that Protocol Builder will handle this most of the time.\n      tags:\n        - Workflow Specifications\n      parameters :\n        - name : libraries\n          in : query\n          required : false\n          description : True if we should return just library schemas\n          schema :\n            type : boolean\n        - name : standalone\n          in : query\n          required : false\n          description : True if we should return just standalone schemas\n          schema :\n            type : boolean\n      responses:\n        '200':\n          description: An array of workflow specifications\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/WorkflowSpec\"\n    post:\n      operationId: crc.api.workflow.add_workflow_specification\n      summary: Creates a new workflow specification with the given parameters.\n      tags:\n        - Workflow Specifications\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WorkflowSpec'\n      responses:\n        '200':\n          description: Workflow specification created successfully.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WorkflowSpec\"\n\n  /workflow-specification/{spec_id}/library/{library_id}:\n    parameters:\n      - name: spec_id\n        in: path\n        required: true\n        description: The unique id of an existing workflow specification.\n        schema:\n          type: string\n      - name: library_id\n        in: path\n        required: true\n        description: The unique id of an existing library specification.\n        schema:\n          type: string\n\n\n    post:\n      operationId: crc.api.workflow.add_workflow_spec_library\n      summary: Adds a library to a workflow spec\n      tags:\n        - Workflow Specifications\n      responses:\n        '200':\n          description: Workflow specification.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WorkflowSpec\"\n    delete:\n      operationId: crc.api.workflow.drop_workflow_spec_library\n      summary: Delete a library from a workflow\n      tags:\n        - Workflow Specifications\n      responses:\n        '200':\n          description: Workflow specification.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WorkflowSpec\"\n\n  /workflow-specification/{spec_id}:\n    parameters:\n      - name: spec_id\n        in: path\n        required: true\n        description: The unique id of an existing workflow specification.\n        schema:\n          type: string\n    get:\n      operationId: crc.api.workflow.get_workflow_specification\n      summary: Returns a single workflow specification\n      tags:\n        - Workflow Specifications\n      responses:\n        '200':\n          description: Workflow specification.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WorkflowSpec\"\n    post:\n      operationId: crc.api.workflow.get_workflow_from_spec\n      summary: Creates a workflow from a workflow spec and returns the workflow\n      tags:\n        - Workflow Specifications\n      responses:\n        '200':\n          description: Workflow generated successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Workflow\"\n    put:\n      operationId: crc.api.workflow.update_workflow_specification\n      security:\n        - auth_admin: ['secret']\n      summary: Modifies an existing workflow specification with the given parameters.\n      tags:\n        - Workflow Specifications\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WorkflowSpec'\n      responses:\n        '200':\n          description: Workflow specification created successfully.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WorkflowSpec\"\n    delete:\n      operationId: crc.api.workflow.delete_workflow_specification\n      security:\n        - auth_admin: ['secret']\n      summary: Removes an existing workflow specification\n      tags:\n        - Workflow Specifications\n      responses:\n        '204':\n          description: The workflow specification has been removed.\n  /workflow-specification/{spec_id}/reorder:\n    parameters:\n      - name: spec_id\n        in: path\n        required: true\n        description: The unique id of an existing workflow specification to validate.\n        schema:\n          type: string\n      - name: direction\n        in: query\n        required: true\n        description: The direction we want to move the spec - `up` or `down`\n        schema:\n          type: string\n          example: up\n    put:\n      operationId: crc.api.workflow.reorder_workflow_specification\n      summary: Move the workflow spec up or down in the display order\n      tags:\n        - Workflow Specifications\n      responses:\n        '200':\n          description: An array of workflow specifications\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/WorkflowSpec\"\n\n  /workflow-specification/{spec_id}/validate:\n    parameters:\n      - name: spec_id\n        in: path\n        required: true\n        description: The unique id of an existing workflow specification to validate.\n        schema:\n          type: string\n      - name: study_id\n        in: query\n        required: false\n        description: Optional id of study to test under different scenarios\n        schema:\n          type: string\n      - name: test_until\n        in: query\n        required: false\n        description: Optional name of task to stop validating at\n        schema:\n          type: string\n    get:\n      operationId: crc.api.workflow.validate_workflow_specification\n      summary: Loads and attempts to execute a Workflow Specification, returning a list of errors encountered\n      tags:\n        - Workflow Specifications\n      responses:\n        '200':\n          description: Workflow specification.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Error\"\n  /workflow-specification/{spec_id}/file:\n    parameters:\n      - name: spec_id\n        in: path\n        required: true\n        description: The unique id of an existing workflow specification to validate.\n        schema:\n          type: string\n    get:\n      operationId: crc.api.spec_file.get_files\n      summary: Provide a list of workflow spec files for the given workflow_spec_id. IMPORTANT, only includes metadata, not the file content.\n      tags:\n        - Spec Files\n      responses:\n        '200':\n          description: An array of file descriptions (not the file content)\n          content:\n            application/json:\n             schema:\n               type: array\n               items:\n                 $ref: \"#/components/schemas/File\"\n    post:\n      operationId: crc.api.spec_file.add_file\n      summary: Add a new workflow spec file\n      tags:\n        - Spec Files\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n      responses:\n        '200':\n          description: Metadata about the uploaded file, but not the file content.\n          content:\n            application/json:\n              schema:\n                $ref: \"#components/schemas/File\"\n  /workflow-specification/{spec_id}/file/{file_name}:\n    parameters:\n      - name: spec_id\n        in: path\n        required: true\n        description: The unique id of an existing workflow specification to validate.\n        schema:\n          type: string\n      - name: file_name\n        in: path\n        required: true\n        description: The id of the spec file\n        schema:\n          type: string\n    get:\n      operationId: crc.api.spec_file.get_file\n      summary: Returns metadata about the file\n      tags:\n        - Spec Files\n      responses:\n        '200':\n          description: Returns the file information requested.\n          content:\n            application/json:\n              schema:\n                $ref: \"#components/schemas/File\"\n    put:\n      operationId: crc.api.spec_file.update\n      summary: updates the given file to be the primary file and process, if so specified.\n      tags:\n        - Spec Files\n      parameters:\n        - name: is_primary\n          in: query\n          required: true\n          description: Whether to make this the primary file for the workflow.\n          schema:\n            type: boolean\n      requestBody:\n        description: Log Pagination Request\n        required: false\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/File'\n      responses:\n        '200':\n          description: Returns the file information.\n          content:\n            application/json:\n              schema:\n                $ref: \"#components/schemas/File\"\n    delete:\n      operationId: crc.api.spec_file.delete\n      summary: Removes an existing workflow spec file.\n      tags:\n        - Spec Files\n      responses:\n        '204':\n          description: The file was removed.\n  /workflow-specification/{spec_id}/file/{file_name}/filename:\n    parameters:\n      - name: spec_id\n        in: path\n        required: true\n        description: The unique id of an existing workflow specification to validate.\n        schema:\n          type: string\n      - name: file_name\n        in: path\n        required: true\n        description: The id of the requested file\n        schema:\n          type: string\n      - name: new_filename\n        in: query\n        required: true\n        description: The new name for this file\n        schema:\n          type: string\n    put:\n      operationId: crc.api.spec_file.update_filename\n      summary: Update the filename of a spec file\n      tags:\n        - Spec Files\n      responses:\n        '200':\n          description: Returns the updated file model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/File\"\n\n  /workflow-specification/{spec_id}/file/{file_name}/data:\n    parameters:\n      - name: spec_id\n        in: path\n        required: true\n        description: The unique id of an existing workflow specification to validate.\n        schema:\n          type: string\n      - name: file_name\n        in: path\n        required: true\n        description: The id of the requested file\n        schema:\n          type: string\n    get:\n      operationId: crc.api.spec_file.get_data\n      summary: Returns only the spec file content\n      tags:\n        - Spec Files\n      responses:\n        '200':\n          description: Returns the actual spec file\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n    put:\n      operationId: crc.api.spec_file.update_data\n      summary: Update the contents of a spec file\n      tags:\n        - Spec Files\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              x-body-name: file\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n              required:\n                - file\n      responses:\n        '200':\n          description: Returns the updated file model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/File\"\n  /workflow-specification-category:\n    get:\n      operationId: crc.api.workflow.list_workflow_spec_categories\n      summary: Provides a list of categories that can be added to a workflow spec.\n      tags:\n        - Workflow Specification Category\n      responses:\n        '200':\n          description: An array of workflow specification categories\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/WorkflowSpecCategory\"\n    post:\n      operationId: crc.api.workflow.add_workflow_spec_category\n      security:\n        - auth_admin: ['secret']\n      summary: Creates a new workflow spec category with the given parameters.\n      tags:\n        - Workflow Specification Category\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WorkflowSpecCategory'\n      responses:\n        '200':\n          description: Workflow spec category created successfully.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WorkflowSpecCategory\"\n  /workflow-specification-category/{cat_id}:\n    parameters:\n      - name: cat_id\n        in: path\n        required: true\n        description: The unique id of an existing workflow spec category to modify.\n        schema:\n          type: string\n    get:\n      operationId: crc.api.workflow.get_workflow_spec_category\n      summary: Returns a single workflow spec category\n      tags:\n        - Workflow Specification Category\n      responses:\n        '200':\n          description: Workflow spec category.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WorkflowSpecCategory\"\n    put:\n      operationId: crc.api.workflow.update_workflow_spec_category\n      security:\n        - auth_admin: ['secret']\n      summary: Modifies an existing workflow spec category with the given parameters.\n      tags:\n        - Workflow Specification Category\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WorkflowSpecCategory'\n      responses:\n        '200':\n          description: Workflow spec category created successfully.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WorkflowSpecCategory\"\n    delete:\n      operationId: crc.api.workflow.delete_workflow_spec_category\n      security:\n        - auth_admin: ['secret']\n      summary: Removes an existing workflow spec category\n      tags:\n        - Workflow Specification Category\n      responses:\n        '204':\n          description: The workflow spec category has been removed.\n  /workflow-specification-category/{cat_id}/reorder:\n    parameters:\n      - name: cat_id\n        in: path\n        required: true\n        description: The unique id of an existing workflow spec category to modify.\n        schema:\n          type: string\n      - name: direction\n        in: query\n        required: true\n        description: The direction you want to move the category - `up` or `down`\n        schema:\n          type: string\n          example: up\n    put:\n      operationId: crc.api.workflow.reorder_workflow_spec_category\n      summary: Move the workflow spec category up or down in the display order\n      tags:\n        - Workflow Specification Category\n      responses:\n        '200':\n          description: An array of workflow spec categories\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/WorkflowSpecCategory\"\n\n  /file:\n    parameters:\n      - name: workflow_id\n        in: query\n        required: false\n        description: The unique id of a workflow instance\n        schema:\n          type: integer\n      - name: task_spec_name\n        in: query\n        required: false\n        description: The name of the task spec\n        schema:\n          type: string\n      - name: irb_doc_code\n        in: query\n        required: false\n        description: The unique key of a workflow task form field.  Make sure this matches a document in the irb_documents.xslx reference sheet.\n        schema:\n          type: string\n      - name: study_id\n        in: query\n        required: false\n        description: The study that the files are related to\n        schema:\n          type: integer\n    get:\n      operationId: crc.api.file.get_files\n      summary: Provides a list of files that match the given parameters (such as a spec id) IMPORTANT, only includes metadata, not the file content.\n      tags:\n        - Files\n      responses:\n        '200':\n          description: An array of file descriptions (not the file content)\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/File\"\n\n    post:\n      operationId: crc.api.file.add_file\n      summary: Add a new file\n      tags:\n        - Files\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n      responses:\n        '200':\n          description: Metadata about the uploaded file, but not the file content.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/File\"\n  /file/{file_id}:\n    parameters:\n      - name: file_id\n        in: path\n        required: true\n        description: The id of the File\n        schema:\n          type: integer\n    get:\n      operationId: crc.api.file.get_file_info\n      summary: Returns metadata about a file.\n      tags:\n        - Files\n      responses:\n        '200':\n          description: Returns the file information requested.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/File\"\n    put:\n      operationId: crc.api.file.update_file_info\n      summary: Updates existing file info with the given parameters.\n      tags:\n        - Files\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/File'\n      responses:\n        '200':\n          description: File info updated successfully.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/File\"\n    delete:\n      operationId: crc.api.file.delete_file\n      summary: Removes an existing file.\n      tags:\n        - Files\n      responses:\n        '204':\n          description: The file has been removed.\n  /file/{file_id}/download :\n    parameters :\n      - name : file_id\n        in : path\n        required : true\n        description : The id of the File requested\n        schema :\n          type : integer\n      - name : auth_token\n        in : query\n        required : true\n        description : User Auth Toeken\n        schema :\n          type : string\n      - name : version\n        in : query\n        required : false\n        description : The version of the file, or none for latest version\n        schema :\n          type : integer\n    get :\n      operationId : crc.api.file.get_file_data_link\n      summary : Returns only the file contents\n      security: []\n      tags :\n        - Files\n      responses :\n        '200' :\n          description : Returns the actual file\n          content :\n            application/octet-stream :\n              schema :\n                type : string\n                format : binary\n                example : '\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003cbpmn:definitions\u003e\u003c/bpmn:definitions\u003e'\n  /file/{file_id}/data:\n    parameters:\n      - name: file_id\n        in: path\n        required: true\n        description: The id of the File requested\n        schema:\n          type: integer\n      - name: version\n        in: query\n        required: false\n        description: The version of the file, or none for latest version\n        schema:\n          type: integer\n    get:\n      operationId: crc.api.file.get_file_data\n      summary: Returns only the file contents\n      tags:\n        - Files\n      responses:\n        '200':\n          description: Returns the actual file\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n                example: '\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003cbpmn:definitions\u003e\u003c/bpmn:definitions\u003e'\n    put:\n      operationId: crc.api.file.update_file_data\n      summary: Update only the file contents for a given file\n      tags:\n        - Files\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              x-body-name: file\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n              required:\n                - file\n      responses:\n        '200':\n          description: Returns the updated file model with the new version information.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/File\"\n\n  /reference_file:\n    get:\n      operationId: crc.api.reference_file.get_reference_files\n      summary: Provides a list of existing reference files that are available in the system.\n      tags:\n        - Reference Files\n      responses:\n        '200':\n          description: An array of file descriptions (not the file content)\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/File\"\n    post:\n      operationId: crc.api.reference_file.add_reference_file\n      security:\n        - auth_admin: [ 'secret' ]\n      summary: Add a new reference file.\n      tags:\n        - Reference Files\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n      responses:\n        '200':\n          description: Metadata about the new reference file, but not the file content.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/File\"\n  /reference_file/{name}:\n    parameters:\n      - name: name\n        in: path\n        required: true\n        description: The special name of the reference file.\n        schema:\n          type: string\n    get:\n      operationId: crc.api.reference_file.get_reference_file_info\n      summary: Returns the file info for a reference file\n      tags:\n        - Reference Files\n      responses:\n        '200':\n          description: Returns the info for a reference file\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n                example: '\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003cbpmn:definitions\u003e\u003c/bpmn:definitions\u003e'\n    delete:\n      operationId: crc.api.reference_file.delete_reference_file\n      summary: Remove an existing reference file.\n      tags:\n        - Reference Files\n      responses:\n        '204':\n          description: The reference file was removed.\n  /reference_file/{name}/data:\n    parameters:\n      - name: name\n        in: path\n        required: true\n        description: The special name of the reference file.\n        schema:\n          type: string\n    get:\n      operationId: crc.api.reference_file.get_reference_file_data\n      summary: Returns only the reference file content\n      tags:\n        - Reference Files\n      responses:\n        '200':\n          description: Returns the actual reference file\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n    put:\n      operationId: crc.api.reference_file.update_reference_file_data\n      security:\n        - auth_admin: ['secret']\n      summary: Update the contents of a reference file\n      tags:\n        - Reference Files\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              x-body-name: file\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n              required:\n                - file\n      responses:\n        '200':\n          description: Returns the updated file model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/File\"\n  /dmn_from_ss:\n    post:\n      operationId: crc.api.file.dmn_from_ss\n      summary: Create a DMN table from a spreadsheet\n      tags:\n        - Files\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n      responses:\n        '200':\n          description: DMN file for workflow spec\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n                example: '\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003cbpmn:definitions\u003e\u003c/bpmn:definitions\u003e'\n  /task_events:\n    parameters:\n      - name: action\n        in: query\n        required: false\n        description: The type of action the event documents, options include \"ASSIGNMENT\" for tasks that are waiting on you, \"COMPLETE\" for things have completed.\n        schema:\n          type: string\n      - name: workflow\n        in: query\n        required: false\n        description: Restrict results to the given workflow.\n        schema:\n          type: number\n      - name: study\n        in: query\n        required: false\n        description: Restrict results to the given study.\n        schema:\n          type: number\n    get:\n      operationId: crc.api.workflow.get_task_events\n      summary: Returns a list of task events related to the current user.  Can be filtered by type.\n      tags:\n        - Workflows and Tasks\n      responses:\n        '200':\n          description: Returns details about tasks that are waiting on the current user.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TaskEvent\"\n  # /v1.0/workflow/0\n  /workflow/{workflow_id}:\n    parameters:\n        - name: workflow_id\n          in: path\n          required: true\n          description: The id of the workflow\n          schema:\n            type: integer\n            format: int32\n    get:\n      operationId: crc.api.workflow.get_workflow\n      summary: Returns a workflow.\n      parameters:\n        - name: do_engine_steps\n          in: query\n          required: false\n          description: Defaults to true, can be set to false if you are just looking at the workflow not completeing it.\n          schema:\n            type: boolean\n      tags:\n        - Workflows and Tasks\n      responses:\n        '200':\n          description: Returns details about the workflows state and current task\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Workflow\"\n    delete:\n      operationId: crc.api.workflow.delete_workflow\n      security:\n        - auth_admin: ['secret']\n      summary: Removes an existing workflow\n      tags:\n        - Workflows and Tasks\n      responses:\n        '204':\n          description: The workflow was removed\n  /workflow/{workflow_id}/restart:\n    parameters:\n      - name: workflow_id\n        in: path\n        required: true\n        description: The id of the workflow\n        schema:\n          type: integer\n          format: int32\n    get:\n      operationId: crc.api.workflow.restart_workflow\n      summary: Restarts a workflow with the latest spec. Can also clear data.\n      parameters:\n        - name: clear_data\n          in: query\n          required: false\n          description: Set this to true to clear data when starting workflow.\n          schema:\n            type: boolean\n        - name: delete_files\n          in: query\n          required: false\n          description: Set this to true to delete associated files when starting workflow.\n          schema:\n            type: boolean\n      tags:\n        - Workflows and Tasks\n      responses:\n        '200':\n          description: Returns updated workflow, possibly without data.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Workflow\"\n  /workflow/{workflow_id}/task/{task_id}/data:\n    parameters:\n      - name: workflow_id\n        in: path\n        required: true\n        description: The id of the workflow\n        schema:\n          type: integer\n          format: int32\n      - name: task_id\n        in: path\n        required: true\n        description: The id of the task\n        schema:\n          type: string\n          format: uuid\n      - name: terminate_loop\n        in: query\n        required: false\n        description: Terminate the loop on a looping task\n        schema:\n          type: boolean\n      - name: update_all\n        in: query\n        required: false\n        description: In the case of a multi-instance user task, update all tasks with the submitted values.\n        schema:\n          type: boolean\n    put:\n      operationId: crc.api.workflow.update_task\n      summary: Exclusively for User Tasks, submits form data as a flat set of key/values.\n      tags:\n        - Workflows and Tasks\n      requestBody:\n        description: Key / Value pairs in JSON format.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                favorite_color: blue\n                capital_assyria: Assur\n      responses:\n        '201':\n          description: Returns the updated workflow with this task as the current task.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Workflow\"\n  /workflow/{workflow_id}/task/{task_id}/set_token:\n    parameters:\n      - name: workflow_id\n        in: path\n        required: true\n        description: The id of the workflow\n        schema:\n          type: integer\n          format: int32\n      - name: task_id\n        in: path\n        required: true\n        description: The id of the task\n        schema:\n          type: string\n          format: uuid\n    put:\n      operationId: crc.api.workflow.set_current_task\n      summary: Attempts to make the given task the Current Active Task\n      tags:\n        - Workflows and Tasks\n      responses:\n        '201':\n          description: Returns the updated workflow with this task as the current task.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Workflow\"\n  /workflow/{workflow_id}/lookup/{task_spec_name}/{field_id}:\n    parameters:\n      - name: workflow_id\n        in: path\n        required: true\n        description: The id of the workflow\n        schema:\n          type: integer\n          format: int32\n      - name: task_spec_name\n        in: path\n        required: true\n        description: The name of the current task\n        schema:\n          type: string\n      - name: field_id\n        in: path\n        required: true\n        description: The id of the field (as set in the bpmn editor) on which to do a lookup.\n        schema:\n          type: string\n      - name: query\n        in: query\n        required: false\n        description: The string to search for in the Value column of the lookup table.\n        schema:\n          type: string\n      - name: value\n        in: query\n        required: false\n        description: An alternative to query, this accepts the specific value or id selected in a dropdown list or auto-complete, and will return the one matching record. Useful for getting additional details about an item selected in a dropdown.\n        schema:\n          type: string\n      - name: limit\n        in: query\n        required: false\n        description: The total number of records to return, defaults to 10.\n        schema:\n          type: integer\n\n    get:\n      operationId: crc.api.workflow.lookup\n      summary: Provides type-ahead search against a lookup table associted with a form field.\n      tags:\n        - Workflows and Tasks\n      responses:\n        '201':\n          description: Returns the a list of values and labels for a lookup form.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LookupItem\"\n  /render_markdown:\n    parameters:\n      - name: data\n        in: query\n        required: true\n        description: The json data to use in populating the template\n        schema:\n          type: string\n      - name: template\n        in: query\n        required: true\n        description: The markdown template to process.\n        schema:\n          type: string\n    get:\n      operationId: crc.api.tools.render_markdown\n      security: []  # Disable security for this endpoint only.\n      summary: Processes the markdown template using the data provided.\n      tags:\n        - Configurator Tools\n      responses:\n        '201':\n          description: Returns the updated workflow with the task completed.\n          content:\n            text/plain:\n              schema:\n                type: string\n  /send_email:\n    parameters:\n      - in: query\n        name: subject\n        required: true\n        description: The subject of the email.\n        schema:\n          type: string\n      - in: query\n        name: address\n        required: true\n        description: The address to send a test email to.\n        schema:\n          type: string\n      - in: query\n        name: data\n        required: false\n        description:\n          The data to use in populating the message.\n        schema:\n          type: string\n        example: {\"id_1\": \"value_1\", \"id_2\": \"value_2\"}\n    put:\n      operationId: crc.api.tools.send_email\n      summary: Sends an email so we can see what the message will look like.\n      tags:\n        - Configurator Tools\n      requestBody:\n        required: true\n        content:\n          text/plain:\n            schema:\n              type: string\n      responses:\n        '201':\n          description: Returns any error messages that might come back from sending the email.\n          content:\n            text/plain:\n              schema:\n                type: string\n  /render_docx:\n    put:\n      operationId: crc.api.tools.render_docx\n      security: []  # Disable security for this endpoint only.\n      summary: Renders a docx template with embedded jinja2 markup.\n      tags:\n        - Configurator Tools\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n                data:\n                  type: string\n                  format: json\n      responses:\n        '200':\n          description: Returns the generated document.\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n                example: '\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003cbpmn:definitions\u003e\u003c/bpmn:definitions\u003e'\n  /list_scripts:\n    get:\n      operationId: crc.api.tools.list_scripts\n      security: []  # Disable security for this endpoint only.\n      summary: Returns an list of scripts, along with their descriptions\n      tags:\n        - Configurator Tools\n      responses:\n        '201':\n          description: The list of scripts\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Script\"\n  /eval:\n    put:\n      operationId: crc.api.tools.evaluate_python_expression\n      summary: Execute the given python expression, with the given json data structure used as local variables, returns the result of the evaluation.\n      tags:\n        - Configurator Tools\n      requestBody:\n        description: The expression and the json data to use as local variables when evaluating the expresson.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n      responses:\n        '200':\n          description: Returns the result of executing the given python script.\n          content:\n            text/plain:\n              schema:\n                type: string\n\n  /datastore:\n    post:\n      operationId: crc.api.data_store.add_datastore\n      summary: Add datastore item with the given parameters.\n      tags:\n        - DataStore\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataStore'\n      responses:\n        '200':\n          description: Datastore updated successfully.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DataStore\"\n  /datastore/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: The key to lookup.\n        schema:\n          type: string\n          format: string\n\n    get:\n      operationId: crc.api.data_store.datastore_get\n      summary: Get a datastore item by id\n      tags:\n        - DataStore\n      responses:\n        '200':\n          description: A value from the data store, or a default if provided, or None if not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DataStore\"\n    put:\n      operationId: crc.api.data_store.update_datastore\n      summary: Updates an existing datastore item with the given parameters.\n      tags:\n        - DataStore\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataStore'\n      responses:\n        '200':\n          description: Datastore updated successfully.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DataStore\"\n\n\n    delete:\n      operationId: crc.api.data_store.datastore_del\n      summary: Deletes a value from the data store by id\n      tags:\n        - DataStore\n      responses:\n        '200':\n          description: Deletes a value from a data store.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DataStore\"\n  /datastore/study/{study_id}:\n    parameters:\n      - name: study_id\n        in: path\n        required: true\n        description: The study id we are concerned with .\n        schema:\n          type: integer\n          format: int32\n    get:\n      operationId: crc.api.data_store.study_multi_get\n      summary: Gets all datastore items for a study_id\n      tags:\n        - DataStore\n      responses:\n        '200':\n          description: Get all values from the data store for a study_id\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DataStore\"\n  /datastore/user/{user_id}:\n    parameters:\n      - name: user_id\n        in: path\n        required: true\n        description: The user id we are concerned with .\n        schema:\n          type: string\n          format: string\n    get:\n      operationId: crc.api.data_store.user_multi_get\n      summary: Gets all datastore items by user_id\n      tags:\n        - DataStore\n      responses:\n        '200':\n          description: Get all values from the data store for a user_id.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DataStore\"\n  /datastore/file/{file_id}:\n    parameters:\n      - name: file_id\n        in: path\n        required: true\n        description: The file id we are concerned with\n        schema:\n          type: string\n          format: string\n    get:\n      operationId: crc.api.data_store.file_multi_get\n      summary: Gets all datastore items by file_id\n      tags:\n        - DataStore\n      responses:\n        '200':\n          description: Get all values from the data store for a file_id\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DataStore\"\n\n  /git_repo:\n    get:\n      operationId: crc.api.git_repo.get_repo\n      summary: get current state of the git repo\n      tags:\n        - Git Repo\n      responses:\n        '200':\n          description: Current state of the git repo\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GitRepo\"\n  /git_repo/merge:\n    parameters:\n      - name: branch\n        in: query\n        required: true\n        description: The branch to merge with\n        schema:\n          type: string\n          example: staging\n    get:\n      operationId: crc.api.git_repo.merge_with_branch\n      summary: merge with given branch\n      tags:\n        - Git Repo\n      responses:\n        '200':\n          description: Current state of the git repo\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GitRepo\"\n  /git_repo/push:\n    parameters:\n      - name: comment\n        in: query\n        required: false\n        description: The comment we want to pass along with the push commit\n        schema:\n          type: string\n    get:\n      operationId: crc.api.git_repo.push_to_remote\n      summary: Push local changes to remote\n      tags:\n        - Git Repo\n      responses:\n        '200':\n          description: Local changes were pushed successfully\n  /git_repo/pull:\n    get:\n      operationId: crc.api.git_repo.pull_from_remote\n      summary: Pull current code from remote\n      tags:\n        - Git Repo\n      responses:\n        '200':\n          description: Remote code was pulled successfully\n\ncomponents:\n  securitySchemes:\n    jwt:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      x-bearerInfoFunc: crc.api.user.verify_token\n    auth_admin:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      x-bearerInfoFunc: crc.api.user.verify_token_admin\n\n  schemas:\n    User:\n      properties:\n        uid:\n          type: string\n        email_address:\n          type: string\n        display_name:\n          type: string\n        affiliation:\n          type: string\n        eppn:\n          type: string\n        first_name:\n          type: string\n        last_name:\n          type: string\n        title:\n          type: string\n    DataModel:\n      properties:\n        id:\n          type: string\n    WorkflowSpecDiffList:\n      properties:\n        workflow_spec_id:\n          type: string\n          example : top_level_workflow\n        date_created :\n          type: string\n          example : 2020-12-09 16:55:12.951500+00:00\n        location :\n          type : string\n          example : remote\n        new :\n          type : boolean\n          example : false\n    WorkflowSpecFilesList:\n      properties:\n        file_model_id:\n          type : integer\n          example : 171\n        workflow_spec_id :\n          type: string\n          example : top_level_workflow\n        filename :\n          type: string\n          example : data_security_plan.dmn\n        date_created :\n          type: string\n          example : 2020-12-01 13:58:12.420333+00:00\n        type:\n          type : string\n          example : dmn\n        primary :\n          type : boolean\n          example : false\n        content_type:\n          type: string\n          example : text/xml\n        primary_process_id:\n          type : string\n          example : null\n        md5_hash:\n          type: string\n          example: f12e2bbd-a20c-673b-ccb8-a8a1ea9c5b7b\n\n\n    WorkflowSpecFilesDiff:\n      properties:\n        filename :\n          type: string\n          example : data_security_plan.dmn\n        date_created :\n          type: string\n          example : 2020-12-01 13:58:12.420333+00:00\n        type:\n          type : string\n          example : dmn\n        primary :\n          type : boolean\n          example : false\n        content_type:\n          type: string\n          example : text/xml\n        primary_process_id:\n          type : string\n          example : null\n        md5_hash:\n          type: string\n          example: f12e2bbd-a20c-673b-ccb8-a8a1ea9c5b7b\n        location:\n          type : string\n          example : remote\n        new:\n          type: boolean\n          example : false\n    WorkflowSpecAll:\n      properties:\n        workflow_spec_id :\n          type: string\n          example : acaf1258-43b4-437e-8846-f612afa66811\n        date_created :\n          type: string\n          example : 2020-12-01 13:58:12.420333+00:00\n        md5_hash:\n          type: string\n          example: c30fd597f21715018eab12f97f9d4956\n    Study:\n      properties:\n        id:\n          type: integer\n          example: 1234\n        title:\n          type: string\n          example: The impact of fried pickles on beer consumption in bipedal software developers.\n        last_updated:\n          type: string\n          format: date_time\n          example: \"2019-12-25T09:12:33.001Z\"\n        user_uid:\n          type: string\n          example: dhf8r\n        status:\n          type: string\n          enum: ['in_progress', 'hold', 'open_for_enrollment', 'abandoned']\n          example: done\n        sponsor:\n          type: string\n          x-nullable: true\n          example: \"Sartography Pharmaceuticals\"\n        ind_number:\n          type: string\n          x-nullable: true\n          example: \"27b-6-42\"\n    StudyAssociate:\n      properties:\n        uid:\n          type: string\n          example: \"dhf8r\"\n        access:\n          type: boolean\n          example: False\n        role:\n          type: string\n          example: \"TODO\"\n    DocumentDirectory:\n      properties:\n        level:\n          type: string\n          x-nullable: true\n          example: \"Ancillary Document\"\n        description:\n          type: string\n          x-nullable: true\n          example: \"Documents that are ancillary to the study\"\n        file:\n          $ref: \"#/components/schemas/File\"\n          x-nullable: true\n        expanded:\n          type: boolean\n          example: False\n        filecount:\n          type: integer\n          example: 1\n        children:\n          type: array\n          items:\n            $ref: \"#/components/schemas/File\"\n    DataStore:\n      properties:\n        id:\n          type: integer\n          example: 1234\n        key:\n          type: string\n          example: MyKey\n        workflow_id:\n          type: integer\n          x-nullable: true\n          example: 12\n        study_id:\n          type: integer\n          x-nullable: true\n          example: 42\n        user_id:\n          type: string\n          x-nullable: true\n          example: dhf8r\n        task_id:\n          type: string\n          x-nullable: true\n          example: MyTask\n        spec_id:\n          type: string\n          x-nullable: true\n          example: My Spec Name\n        value:\n          type: string\n          x-nullable: true\n          example: Some Value\n\n    WorkflowSpec:\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        display_name:\n          type: string\n        description:\n          type: string\n        primary_process_id:\n          type: string\n          nullable: true\n        category_id:\n          type: string\n          nullable: true\n        standalone:\n          type: boolean\n          example: false\n          default: false\n        workflow_spec_category:\n          $ref: \"#/components/schemas/WorkflowSpecCategory\"\n        is_status:\n          type: boolean\n          nullable: true\n    WorkflowSpecCategory:\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        display_name:\n          type: string\n        display_order:\n          type: integer\n        workflows:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Workflow\"\n    File:\n      properties:\n        id:\n          type: number\n        name:\n          type: string\n          example: \"random_fact.bpmn\"\n        version:\n          type: integer\n        last_updated:\n          type: string\n          format: date_time\n          example: \"2019-12-25T09:12:33.001Z\"\n        type:\n          type: string\n        primary:\n          type: boolean\n        content_type:\n          type: string\n          example: \"application/xml\"\n        workflow_spec_id:\n          type: string\n          example: \"random_fact\"\n          x-nullable: true\n        file:\n          type: string\n    Workflow:\n      properties:\n        id:\n          readOnly: true\n          type: integer\n          format: int64\n        status:\n          type: string\n          enum: ['new','user_input_required','waiting','complete']\n        navigation:\n          type: array\n          items:\n            $ref: \"#/components/schemas/NavigationItem\"\n        next_task:\n          $ref: \"#/components/schemas/Task\"\n        workflow_spec_id:\n          type: string\n        spec_version:\n          type: string\n        is_latest_spec:\n          type: boolean\n        num_tasks_total:\n          type: integer\n        num_tasks_complete:\n          type: integer\n        num_tasks_incomplete:\n          type: integer\n        study_id:\n          type: integer\n\n      example:\n        id: 291234\n        status: 'user_input_required'\n        workflow_spec_id: 'random_fact'\n        spec_version: 'v1.1 [22,23]'\n        is_latest_spec: True\n        next_task:\n          id: study_identification\n          name: Study Identification\n          title: IRB Review\n          documentation: \"# Heading 1\\n\\nMarkdown documentation text goes here\"\n          type: form\n          state: ready\n    Task:\n      properties:\n        id:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        title:\n          type: string\n        type:\n          type: string\n        state:\n          type: string\n        form:\n          $ref: \"#/components/schemas/Form\"\n        documentation:\n          type: string\n        data:\n          type: object\n        multi_instance_type:\n          type: string\n          enum: ['none', 'looping', 'parallel', 'sequential']\n        multi_instance_count:\n          type: number\n        multi_instance_index:\n          type: number\n        process_name:\n          type: string\n        properties:\n          type: object\n      example:\n        id: study_identification\n        name: Study Identification\n        title: IRB Review\n        documentation: \"# Heading 1\\n\\nMarkdown documentation text goes here\"\n        type: form\n        state: ready\n        form:\n          \"key\": \"irb_review_form\"\n          \"fields\":\n            - \"id\": \"irb_review_type\"\n              \"type\": \"enum\"\n              \"label\": \"Select IRB Review Type\"\n              \"options\":\n                - id: \"emergency_use\"\n                  name: \"Emergency Use\"\n                - id: \"humanitarian_device\"\n                  name: \"Humanitarian Device\"\n                - id: \"non_human\"\n                  name: \"Non-Human\"\n                - id: \"non_uva_agent\"\n                  name: \"Non-UVA Agent\"\n                - id: \"exempt\"\n                  name: \"Exempt\"\n                - id: \"non_engaged\"\n                  name: \"Non-Engaged\"\n                - id: \"expedited\"\n                  name: \"Expedited\"\n                - id: \"full_board\"\n                  name: \"Full Board\"\n              \"default_value\": \"Full Board\"\n              \"validation\":\n                - name: \"required\"\n                  config: \"true\"\n              \"properties\":\n                - id: \"description\"\n                  value: \"Description text goes here\"\n                - id: \"help\"\n                  value: \"# Heading 1\\n\\nMarkdown help text goes here\"\n                - id: \"required_expression\"\n                  value: \"model.my_boolean_field_id \u0026\u0026 model.my_enum_field_value !== 'something'\"\n                - id: \"hide_expression\"\n                  value: \"model.my_enum_field_value === 'something'\"\n    PaginatedTaskLog:\n      properties:\n          code:\n            example: \"email_sent\"\n            type: string\n          level:\n            example: \"warning\"\n            type: string\n          user:\n            example: \"email_sent\"\n            type: string\n          page:\n            type: integer\n            example: 0\n          per_page:\n            type: integer\n            example: 10\n          sort_column:\n            type: string\n            example: \"timestamp\"\n          sort_reverse:\n            type: boolean\n            example: false\n          items:\n            type: array\n            items:\n              $ref: \"#/components/schemas/TaskLog\"\n          has_next:\n            type: boolean\n            example: true\n          has_prev:\n            type: boolean\n            example: false\n    TaskLog:\n      properties:\n          level:\n            type: string\n            example: \"info\"\n          code:\n            example: \"email_sent\"\n            type: string\n          message:\n            example: \"Approval email set to Jake in Accounting\"\n            type: string\n          workflow_id:\n            example: 42\n            type: integer\n          study_id:\n            example: 187\n            type: integer\n          user_uid:\n            example: \"dhf8r\"\n            type: string\n          timestamp:\n            type: string\n            format: date_time\n            example: \"2021-01-07T11:36:40.001Z\"\n    TaskEvent:\n      properties:\n          workflow:\n            $ref: \"#/components/schemas/Workflow\"\n          study:\n            $ref: \"#/components/schemas/Study\"\n          workflow_sec:\n            $ref: \"#/components/schemas/WorkflowSpec\"\n          spec_version:\n            type: string\n          action:\n            type: string\n          task_id:\n            type: string\n          task_type:\n            type: string\n          task_lane:\n            type: string\n          form_data:\n            type: object\n          mi_type:\n            type: string\n          mi_count:\n            type: integer\n          mi_index:\n            type: integer\n          process_name:\n            type: string\n          date:\n            type: string\n    Form:\n      properties:\n        key:\n          type: string\n        fields:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Field\"\n      example:\n        \"key\": \"irb_review_form\"\n        \"fields\":\n          - \"id\": \"irb_review_type\"\n            \"type\": \"enum\"\n            \"label\": \"Select IRB Review Type\"\n            \"options\":\n              - id: \"emergency_use\"\n                name: \"Emergency Use\"\n              - id: \"humanitarian_device\"\n                name: \"Humanitarian Device\"\n              - id: \"non_human\"\n                name: \"Non-Human\"\n              - id: \"non_uva_agent\"\n                name: \"Non-UVA Agent\"\n              - id: \"exempt\"\n                name: \"Exempt\"\n              - id: \"non_engaged\"\n                name: \"Non-Engaged\"\n              - id: \"expedited\"\n                name: \"Expedited\"\n              - id: \"full_board\"\n                name: \"Full Board\"\n            \"default_value\": \"Full Board\"\n            \"validation\":\n              - name: \"required\"\n                config: \"true\"\n            \"properties\":\n              - id: \"description\"\n                value: \"Description text goes here\"\n              - id: \"help\"\n                value: \"# Heading 1\\n\\nMarkdown help text goes here\"\n              - id: \"required_expression\"\n                value: \"model.my_boolean_field_id \u0026\u0026 model.my_enum_field_value !== 'something'\"\n              - id: \"hide_expression\"\n                value: \"model.my_enum_field_value === 'something'\"\n    Field:\n      properties:\n        id:\n          type: string\n          readOnly: true\n        type:\n          type: string\n          enum: ['string', 'long', 'boolean', 'date', 'enum']\n          readOnly: true\n        label:\n          type: string\n          readOnly: true\n        options:\n          type: array\n          items:\n            $ref: \"#/components/schemas/EnumFieldOption\"\n          readOnly: true\n        default_value:\n          type: string\n          readOnly: true\n        validation:\n          type: array\n          items:\n            $ref: \"#/components/schemas/FieldValidation\"\n          readOnly: true\n        \"properties\":\n          type: array\n          items:\n            $ref: \"#/components/schemas/FieldProperty\"\n          readOnly: true\n    EnumFieldOption:\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n    FieldValidation:\n      properties:\n        name:\n          type: string\n        config:\n          type: string\n    FieldProperty:\n      properties:\n        id:\n          type: string\n        value:\n          type: string\n      example:\n        id: \"required_expression\"\n        value: \"model.should_require\"\n    Error:\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: string\n          format: string\n          example: \"access_denied\"\n        message:\n          type: string\n          example: \"You do not have permission to view the requested study.\"\n    Script:\n      properties:\n        name:\n          type: string\n          format: string\n          example: \"random_fact\"\n        description:\n          type: string\n          example: \"Returns a random fact about a topic.  Provide an argument of either 'cat', 'norris', or 'buzzword'\"\n    LookupItem:\n      properties:\n        value:\n          type: string\n          format: string\n          example: \"1000\"\n        label:\n          type: string\n          example: \"Chuck Norris\"\n        data:\n          type: string\n    NavigationItem:\n      properties:\n        id:\n          type: number\n          format: integer\n          example: 5\n        task_id:\n          type: string\n          format: uuid\n          example: \"1234123uuid1234\"\n        name:\n          type: string\n          example: \"Task_Has_bananas\"\n        description:\n          type: string\n          example: \"Has Bananas?\"\n        backtracks:\n          type: boolean\n          example: false\n        level:\n          type: integer\n          example: 1\n        indent:\n          type: integer\n          example: 2\n        child_count:\n          type: integer\n          example: 4\n        state:\n          type: string\n          enum: ['FUTURE', 'WAITING', 'READY', 'CANCELLED', 'COMPLETED','LIKELY','MAYBE']\n          readOnly: true\n        is_decision:\n          type: boolean\n          example: False\n          readOnly: true\n        task:\n          $ref: \"#/components/schemas/Task\"\n    Approval:\n      properties:\n        id:\n          type: number\n          format: integer\n          example: 5\n    ApprovalCounts:\n      properties:\n        PENDING:\n          type: number\n          format: integer\n          example: 5\n        APPROVED:\n          type: number\n          format: integer\n          example: 5\n        DECLINED:\n          type: number\n          format: integer\n          example: 5\n        CANCELED:\n          type: number\n          format: integer\n          example: 5\n        AWAITING:\n          type: number\n          format: integer\n          example: 5\n    GitRepo:\n      properties:\n#        remote:\n#          type: string\n#          example: sartography/crconnect-workflow-specs\n        directory:\n          type: string\n          example: /home/cr-connect/sync_files\n        branch:\n          type: string\n          example: dev\n        merge_branch:\n          type: string\n          example: staging\n        changes:\n          type: array\n          example: ['file_1.txt', 'file_2.txt']\n        untracked:\n          type: array\n          example: ['a_file.txt', 'b_file.txt']\n",
			"canonicalURL": "/github.com/sartography/cr-connect-workflow@949651ec5e8153fc828435464a5dad8b9f7268e5/-/blob/crc/api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/sartography/cr-connect-workflow/blob/949651ec5e8153fc828435464a5dad8b9f7268e5/crc/api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/datastore\": post: operation \"crc.api.data_store.add_datastore\": security: at crc/api.yml:10:11: list of scopes MUST be empty for \"type\" \"http\""
}