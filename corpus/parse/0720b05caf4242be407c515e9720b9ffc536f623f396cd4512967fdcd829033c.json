{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/UCNZ-SENG302-2018-Donaco/OrgaNZ"
		},
		"file": {
			"name": "API_Specification_OAS3.yaml",
			"size": 0,
			"path": "doc/API_Specification_OAS3.yaml",
			"byteSize": 79340,
			"content": "openapi: \"3.0.1\"\ninfo:\n  version: 1.0.10\n  title: \"Organz API\"\n  description: |\n    An API used to access the OrgaNZ server.\n    Versioning: Adding new endpoints, adding parameters or key value pairs are all minor changes, as they are still valid with a past client.\n      Major changes include: Modifying the data types of any parameters or values, removing key value pairs, removing endpoints. These CANNOT be pushed without maintaining a legacy version and upgrading the system to a new version.\n\ntags:\n- name: Client\n  description: All base client paths\n- name: Client Donation Status\n  description: All client donation status paths\n- name: Client Medications\n  description: All client medication paths\n- name: Client Illnesses\n  description: All client illness AKA medical history paths\n- name: Client Procedures\n  description: All client procedure paths\n- name: Client Profile Picture\n  description: All client profile picture paths\n- name: Client Transplant Requests\n  description: All client transplant request paths\n- name: Clinician\n  description: All base clinician paths\n- name: Administrator\n  description: All base administrator paths\n- name: Configuration\n  description: All configuration paths\n- name: Algorithms\n  description: All algorithm paths\n\npaths:\n  ### Clients\n  '/clients':\n    get:\n      tags:\n      - Client\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: \"Returns all clients from the system\"\n      parameters:\n      - $ref: '#/components/parameters/q'\n      - $ref: '#/components/parameters/offset'\n      - $ref: '#/components/parameters/count'\n      - $ref: '#/components/parameters/minimumAge'\n      - $ref: '#/components/parameters/maximumAge'\n      - $ref: '#/components/parameters/region'\n      - $ref: '#/components/parameters/birthGender'\n      - $ref: '#/components/parameters/clientType'\n      - $ref: '#/components/parameters/donating'\n      - $ref: '#/components/parameters/requesting'\n      - $ref: '#/components/parameters/sortOption'\n      - $ref: '#/components/parameters/isReversed'\n      responses:\n        200:\n          description: A list of clients\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/paginatedClientList'\n\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    post:\n      tags:\n      - Client\n      summary: Create a new client\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/clientCreateDetails'\n        required: true\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/clientOverview'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/{uid}':\n    parameters:\n    - in: path\n      name: uid\n      description: Client User ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    get:\n      tags:\n      - Client\n      security:\n      - ClientAccess: []\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Get detailed client information\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/clientDetails'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    patch:\n      tags:\n      - Client\n      security:\n      - ClientAccess: []\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Change some information about a client\n      description: Only those properties included in the request body will be changed.\n\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/clientModifiableDetails'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/clientDetails'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    delete:\n      tags:\n      - Client\n      security:\n      - ClientAccess: []\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Delete a client\n\n      responses:\n        200:\n          description: Deleted\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/{uid}/dead':\n    parameters:\n    - in: path\n      name: uid\n      description: Client User ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    post:\n      tags:\n      - Client\n      summary: Mark a client as dead\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                date:\n                  $ref: '#/components/schemas/date'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/clientDetails'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/{uid}/history':\n    parameters:\n    - in: path\n      name: uid\n      description: Client User ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    get:\n      tags:\n      - Client\n      security:\n      - ClientAccess: []\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Get client history\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/historyItem'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/{uid}/image':\n    parameters:\n    - in: path\n      name: uid\n      description: Client User ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    get:\n      tags:\n      - Client Profile Picture\n      security:\n      - ClientAccess: []\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Get client profile picture\n      responses:\n        200:\n          description: OK\n          content:\n            image/png:\n              schema:\n                type: string\n                format: binary\n                example: Raw content of PNG image file\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n    post:\n      tags:\n      - Client Profile Picture\n      security:\n      - ClientAccess: []\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Post client profile picture\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n              format: binary\n              example: Raw content of PNG image file\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/historyItem'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n    delete:\n      tags:\n      - Client Profile Picture\n      security:\n      - ClientAccess: []\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Delete client profile picture\n      responses:\n        201:\n          description: Deleted\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/file':\n    get:\n      tags:\n      - Client\n      security:\n      - AdministratorAccess: []\n      summary: Get a file of all clients\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n                format: binary\n                example: Raw content of JSON clients file\n            text/csv:\n              schema:\n                type: string\n                format: binary\n                example: Raw content of CSV clients file\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    post:\n      tags:\n      - Client\n      security:\n      - AdministratorAccess: []\n      summary: Load a file of clients\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n              format: binary\n              example: Raw content of JSON clients file\n          text/csv:\n            schema:\n              type: string\n              format: binary\n              example: Raw content of CSV clients file\n        description: 'Clients file in either JSON or CSV file format.'\n        required: true\n      responses:\n        201:\n          description: File loaded successfully\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/{uid}/donationStatus':\n    parameters:\n    - in: path\n      name: uid\n      description: Client User ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    get:\n      tags:\n      - Client Donation Status\n      security:\n      - ClientAccess: []\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Get the list of a given clients donation status\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/organBooleanArray'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    patch:\n      tags:\n      - Client Donation Status\n      security:\n      - ClientAccess: []\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Change a clients organ donation status\n      description: Only those organs included in the request body will be changed.\n\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/organBooleanArray'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/organBooleanArray'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/organs':\n    get:\n      tags:\n      - Client Organs\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Get the list of all currently available organs\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/donatedOrganList'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/{uid}/donatedOrgans':\n    parameters:\n    - in: path\n      name: uid\n      description: Client User ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    get:\n      tags:\n      - Client Organs\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Get the list of organs this client has donated\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/donatedOrganList'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/{uid}/donatedOrgans/{id}/override':\n    parameters:\n    - in: path\n      name: uid\n      description: Client User ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    - in: path\n      name: id\n      description: Donated Organ ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    post:\n      summary: Manually override a given donated organ so it cannot be donated\n      tags:\n      - Client Organs\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/singleStringView'\n      responses:\n        201:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/donatedOrgan'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    patch:\n      summary: Edit the manual override on a given donated organ\n      tags:\n      - Client Organs\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/singleStringView'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/donatedOrgan'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    delete:\n      summary: Cancel the manual override on a given donated organ so it can be donated again\n      tags:\n      - Client Organs\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/donatedOrgan'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/{uid}/medications':\n    parameters:\n    - in: path\n      name: uid\n      description: Client User ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    get:\n      tags:\n      - Client Medications\n      security:\n      - ClientAccess: []\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Get the list of a given clients medications\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/medicationRecord'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    post:\n      tags:\n      - Client Medications\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Create a new medication record\n      description: Returns the full list of medication records in response upon success.\n\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/medicationRecordCreate'\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/medicationRecord'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/{uid}/medications/{id}':\n    parameters:\n    - in: path\n      name: uid\n      description: Client User ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    - in: path\n      name: id\n      description: Medication record ID\n      required: true\n      schema:\n        type: integer\n    delete:\n      tags:\n      - Client Medications\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Delete a medication record\n      responses:\n        201:\n          description: Deleted\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/{uid}/medications/{id}/start':\n    parameters:\n    - in: path\n      name: uid\n      description: Client User ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    - in: path\n      name: id\n      description: Medication record ID\n      required: true\n      schema:\n        type: integer\n    post:\n      tags:\n      - Client Medications\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Move a medication to current medications\n      description: Returns the medication record in response upon success.\n\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/medicationRecord'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/{uid}/medications/{id}/stop':\n    parameters:\n    - in: path\n      name: uid\n      description: Client User ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    - in: path\n      name: id\n      description: Medication record ID\n      required: true\n      schema:\n        type: integer\n    post:\n      tags:\n      - Client Medications\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Move a medication to past medications\n      description: Returns the medication record in response upon success.\n\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/medicationRecord'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/{uid}/illnesses':\n    parameters:\n    - in: path\n      name: uid\n      description: Client User ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    get:\n      tags:\n      - Client Illnesses\n      security:\n      - ClientAccess: []\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Get the list of a given clients illnesses\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/illnessRecord'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    post:\n      tags:\n      - Client Illnesses\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Create a new illness record\n      description: Returns the full list of illness records in response upon success. The chronic flag cannot be set to true and have the cured date set. Cured date is nullable\n\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/illnessRecordCreate'\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/illnessRecord'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/{uid}/illnesses/{id}':\n    parameters:\n    - in: path\n      name: uid\n      description: Client User ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    - in: path\n      name: id\n      description: Medication record ID\n      required: true\n      schema:\n        type: integer\n    patch:\n      tags:\n      - Client Illnesses\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Update an illness record\n      description: Only those properties included in the request body will be changed. An illness cannot have it's curedDate set if the chronic flag is currently true.\n\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/illnessRecordModify'\n\n      responses:\n        201:\n          description: Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/illnessRecord'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n    delete:\n      tags:\n      - Client Illnesses\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Delete an illness\n      description: Returns the illness record after success\n\n      responses:\n        201:\n          description: Deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/illnessRecord'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/{uid}/procedures':\n    parameters:\n    - in: path\n      name: uid\n      description: Client User ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    get:\n      tags:\n      - Client Procedures\n      security:\n      - ClientAccess: []\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Get the list of a given clients medical procedures\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/procedureRecord'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    post:\n      tags:\n      - Client Procedures\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Create a new procedure record\n      description: Returns the full list of procedure records in response upon success.\n\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/procedureRecordCreate'\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/procedureRecord'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/{uid}/procedures/{id}':\n    parameters:\n    - in: path\n      name: uid\n      description: Client User ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    - in: path\n      name: id\n      description: Procedure record ID\n      required: true\n      schema:\n        type: integer\n    patch:\n      tags:\n      - Client Procedures\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Update a procedure record\n      description: Only those properties included in the request body will be changed.\n\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/procedureRecordCreate'\n      responses:\n        201:\n          description: Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/procedureRecord'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    delete:\n      tags:\n      - Client Procedures\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Delete a procedure record\n\n      responses:\n        201:\n          description: Deleted\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/{uid}/transplants':\n    parameters:\n    - in: path\n      name: uid\n      description: Client User ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    post:\n      tags:\n      - Client Procedures\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Schedule a transplant\n      description: The transplant record date must not be in the past. If it is, a 400 error will be returned.\n      parameters:\n      - $ref: '#/components/parameters/organId'\n      - $ref: '#/components/parameters/requestId'\n      - $ref: '#/components/parameters/hospitalId'\n      - $ref: '#/components/parameters/dateString'\n      responses:\n        200:\n          description: Updated\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/{uid}/transplants/{id}':\n    parameters:\n    - in: path\n      name: uid\n      description: Client User ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    - in: path\n      name: id\n      description: Transplant record ID\n      required: true\n      schema:\n        type: integer\n    post:\n      tags:\n      - Client Procedures\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Resolve a transplant record\n      description: The transplant record date must not be in the future, if it is a 400 error will be thrown.\n\n      responses:\n        200:\n          description: Updated\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/transplantRequests':\n    get:\n      tags:\n      - Client Transplant Requests\n      security:\n      - ClientAccess: []\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Returns a list of transplant requests\n      parameters:\n      - $ref: '#/components/parameters/offset'\n      - $ref: '#/components/parameters/count'\n      - $ref: '#/components/parameters/region'\n      - name: organs\n        in: query\n        description: \"Only return transplants involving the given organs, may be comma separated for multiple\"\n        schema:\n          $ref: '#/components/schemas/organEnum'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/transplantRequest'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/{uid}/transplantRequests':\n    parameters:\n    - in: path\n      name: uid\n      description: Client User ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    get:\n      tags:\n      - Client Transplant Requests\n      security:\n      - ClientAccess: []\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Get the list of a given clients transplant requests\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/transplantRequest'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    post:\n      tags:\n      - Client Transplant Requests\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Create a new transplant request\n      description: Returns the full list of transplant requests in response upon success.\n\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/transplantRequestCreate'\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/transplantRequest'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clients/{uid}/transplantRequests/{id}':\n    parameters:\n    - in: path\n      name: uid\n      description: Client User ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    - in: path\n      name: id\n      description: Transplant Request ID\n      required: true\n      schema:\n        type: integer\n    patch:\n      tags:\n      - Client Transplant Requests\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Update a transpant request\n      description: Only those properties included in the request body will be changed.\n\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/transplantRequestCreate'\n      responses:\n        201:\n          description: Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/transplantRequest'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  ### Clinician\n  '/clinicians':\n    get:\n      tags:\n      - Clinician\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: \"Returns all clinicians from the system\"\n      parameters:\n      - $ref: '#/components/parameters/q'\n      - $ref: '#/components/parameters/offset'\n      - $ref: '#/components/parameters/count'\n      - $ref: '#/components/parameters/region'\n      responses:\n        200:\n          description: A list of clinicians\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/clinicianOverview'\n\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    post:\n      tags:\n      - Clinician\n      security:\n      - AdministratorAccess: []\n      summary: Create a new clinician\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/clinicianCreateDetails'\n        required: true\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/clinicianDetails'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clinicians/file':\n    get:\n      tags:\n      - Clinician\n      security:\n      - AdministratorAccess: []\n      summary: Get a file of all clinicians\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n                format: binary\n                example: Raw content of JSON clinicians file\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clinicians/{staffId}':\n    parameters:\n    - in: path\n      name: staffId\n      description: Clinician Staff ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    get:\n      tags:\n      - Clinician\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Get detailed clinician information\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/clinicianDetails'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    patch:\n      tags:\n      - Clinician\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Change some information about a clinician\n      description: Only those properties included in the request body will be changed.\n\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/clinicianModifiableDetails'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/clinicianDetails'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    delete:\n      tags:\n      - Clinician\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Delete a clinician\n\n      responses:\n        201:\n          description: Deleted\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/clinicians/{staffId}/history':\n    parameters:\n    - in: path\n      name: staffId\n      description: Clinician Staff ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    get:\n      tags:\n      - Clinician\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Get clinician history\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/historyItem'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  ### Administrator\n  '/administrators':\n    get:\n      tags:\n      - Administrator\n      security:\n      - AdministratorAccess: []\n      summary: Returns all administrators from the system\n      parameters:\n      - $ref: '#/components/parameters/q'\n      - $ref: '#/components/parameters/offset'\n      - $ref: '#/components/parameters/count'\n      responses:\n        200:\n          description: A list of administrators\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/administratorDetails'\n\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    post:\n      tags:\n      - Administrator\n      security:\n      - AdministratorAccess: []\n      summary: Create a new administrator\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/administratorCreateDetails'\n        required: true\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/administratorDetails'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/administrators/{username}':\n    parameters:\n    - in: path\n      name: username\n      description: Administrator ID\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n    get:\n      tags:\n      - Administrator\n      security:\n      - AdministratorAccess: []\n      summary: Get detailed administrator information\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/administratorDetails'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    patch:\n      tags:\n      - Administrator\n      security:\n      - AdministratorAccess: []\n      summary: Change some information about an administrator\n      description: Only those properties included in the request body will be changed.\n\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/administratorModifiableDetails'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/administratorDetails'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    delete:\n      tags:\n      - Administrator\n      security:\n      - AdministratorAccess: []\n      summary: Delete an administrator\n\n      responses:\n        201:\n          description: Deleted\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/history':\n    get:\n      tags:\n      - Administrator\n      security:\n      - AdministratorAccess: []\n      summary: Returns all history\n      responses:\n        200:\n          description: All action history\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/historyItem'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/commands':\n    post:\n      tags:\n      - Administrator\n      security:\n      - AdministratorAccess: []\n      summary: Execute command line commands on the backend database. Try executing \"help\" for information\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/command'\n      responses:\n        200:\n          description: The response from the command\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  ### Login\n  '/login/client':\n    post:\n      tags:\n      - Authentication\n      summary: Client login endpoint\n      description: Returns the unique identifier used for future queries, and also userData\n        The response will also include the authentication token, which should be included in the Authentication header for all future requests.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/clientLoginBody'\n      responses:\n        200:\n          description: Successfully logged in\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/clientLoginResponse'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          description: Invalid username or password\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/login/clinician':\n    post:\n      tags:\n      - Authentication\n      summary: Clinician login endpoint\n      description: Returns the authentication token, which should be included in the Authentication header for all future requests.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/clinicianLoginBody'\n      responses:\n        200:\n          description: Successfully logged in\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/clinicianLoginResponse'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          description: Invalid username or password\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/login/administrator':\n    post:\n      tags:\n      - Authentication\n      summary: Administrator login endpoint\n      description: Returns the authentication token, which should be included in the Authentication header for all future requests.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/administratorLoginBody'\n      responses:\n        200:\n          description: Successfully logged in\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/administratorLoginResponse'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          description: Invalid username or password\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  ###Configurations\n  '/config/countries':\n    get:\n      tags:\n      - Configuration\n      summary: Returns the allowed list of countries\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/countryResponse'\n\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    post:\n      tags:\n      - Configuration\n      summary: Updates the allowed list of countries\n      security:\n      - AdministratorAccess: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/countryResponse'\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/config/hospitals':\n    get:\n      tags:\n      - Configuration\n      summary: Returns the list of hospitals\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/hospitalList'\n\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    post:\n      tags:\n      - Configuration\n      summary: Updates the allowed list of hospitals\n      security:\n      - AdministratorAccess: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/hospitalList'\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/config/hospitals/{id}/transplantPrograms':\n    parameters:\n    - in: path\n      name: id\n      description: Hospital ID\n      required: true\n      schema:\n        type: integer\n    post:\n      tags:\n      - Configuration\n      summary: Updates the set of organs that the hospital can perform transplants for\n      security:\n      - AdministratorAccess: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/organTypeList'\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/organimage/{organtype}':\n    parameters:\n    - in: path\n      name: organtype\n      description: Organ Type\n      required: true\n      schema:\n        $ref: '#/components/schemas/organEnum'\n    get:\n      tags:\n      - Configuration\n      summary: Returns the image for the specified organ-type\n      responses:\n        200:\n          description: OK\n          content:\n            image/png:\n              schema:\n                type: string\n                format: binary\n                example: Raw content of PNG image file\n\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/statistics':\n    get:\n      tags:\n      - Configuration\n      summary: Gets the statistics of the organs and donors\n      security:\n      - AdministratorAccess: []\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/dashboardStatistics'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  ### Undo/Redo\n  '/actions/undo':\n    get:\n      tags:\n      - Actions\n      security:\n      - ClientAccess: []\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Get the next action to be undone. May be null if no more actions to undo\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/textResponse'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    post:\n      tags:\n      - Actions\n      security:\n      - ClientAccess: []\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Undo the last executed action\n      description: Returns the string text of the undo action\n      responses:\n        201:\n          description: Undone\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/actionResponse'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/actions/redo':\n    get:\n      tags:\n      - Actions\n      security:\n      - ClientAccess: []\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Get the next action to be redone. May be null if no more actions to redo\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/textResponse'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n    post:\n      tags:\n      - Actions\n      security:\n      - ClientAccess: []\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: Redo the last undone action\n      description: Returns the string text of the redo action.\n      responses:\n        201:\n          description: Redone\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/actionResponse'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  ### Algorithms\n  '/matchOrganToRecipients':\n    get:\n      tags:\n      - Algorithms\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: \"Returns a list of potential recipients for the organ, in priority order.\"\n      parameters:\n      - $ref: '#/components/schemas/donatedOrgan'\n      responses:\n        200:\n          description: A list of clients\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/clientOverview'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n  '/viableDeceasedDonors':\n    get:\n      tags:\n      - Algorithms\n      security:\n      - ClinicianAccess: []\n      - AdministratorAccess: []\n      summary: \"Returns a list of all viable deceased donors, those that are deceased and have available organs (not expired or overridden)\"\n      responses:\n        200:\n          description: List of viable deceased donors\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/clientOverview'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401Unauthorized'\n        403:\n          $ref: '#/components/responses/403Forbidden'\n        500:\n          $ref: '#/components/responses/500InternalServerError'\n\n\ncomponents:\n  parameters:\n    q:\n      name: q\n      in: query\n      description: \"The search string\"\n      schema:\n        type: string\n\n    offset:\n      name: offset\n      in: query\n      description: \"The offset from the start of the result set, used for pagination\"\n      schema:\n        type: integer\n\n    count:\n      name: count\n      in: query\n      description: \"How many results to return, used for pagination\"\n      schema:\n        type: integer\n\n    minimumAge:\n      name: minimumAge\n      in: query\n      description: \"The minimum age to filter\"\n      schema:\n        type: integer\n\n    maximumAge:\n      name: maximumAge\n      in: query\n      description: \"The maximum age to filter\"\n      schema:\n        type: integer\n\n    region:\n      name: region\n      in: query\n      description: \"The region to filter, may be comma separated for multiple\"\n      schema:\n        $ref: '#/components/schemas/regionEnum'\n\n    birthGender:\n      name: birthGender\n      in: query\n      description: \"The birth gender to filter, may be comma separated for multiple\"\n      schema:\n        $ref: '#/components/schemas/genderEnum'\n\n    clientType:\n      name: clientType\n      in: query\n      description: \"The client type to filter\"\n      schema:\n        $ref: '#/components/schemas/clientTypeEnum'\n\n    donating:\n      name: donating\n      in: query\n      description: \"Only return clients that are donating the given organs, may be comma separated for multiple\"\n      schema:\n        $ref: '#/components/schemas/organEnum'\n\n    requesting:\n      name: requesting\n      in: query\n      description: \"Only return clients that are requesting the given organs, may be comma separated for multiple\"\n      schema:\n        $ref: '#/components/schemas/organEnum'\n\n    sortOption:\n      name: sortOption\n      in: query\n      description: \"Returns clients in the order specified\"\n      schema:\n        $ref: '#/components/schemas/clientSortOptionsEnum'\n\n    isReversed:\n      name: isReversed\n      in: query\n      description: \"If the sort order should be reversed\"\n      schema:\n        type: boolean\n\n    donatedOrgan:\n      name: donatedOrgan\n      in: header\n      description: The DonatedOrgan unique ID to get results for\n      required: true\n      schema:\n        type: number\n\n    organId:\n      name: organId\n      in: query\n      description: \"The id of the DonatedOrgan to use in the transplant\"\n      required: true\n      schema:\n        type: integer\n\n    requestId:\n      name: donatedOrganId\n      in: query\n      description: \"The id of the TransplantRequest to fulfill with this transplant\"\n      required: true\n      schema:\n        type: integer\n\n    hospitalId:\n      name: hospitalId\n      in: query\n      description: \"The id of the Hospital the transplant will take place in\"\n      required: true\n      schema:\n        type: integer\n\n    dateString:\n      name: dateString\n      in: query\n      description: \"An ISO formatted string (YYYY-mm-dd) representing a date\"\n      required: true\n      schema:\n        type: string\n\n  examples:\n    clientDetailsExample:\n      value:\n        {\n          \"uid\": 0,\n          \"firstName\": \"Joeseph\",\n          \"middleName\": \"Freddy\",\n          \"lastName\": \"Bloggs\",\n          \"preferredName\": \"Jolene\",\n          \"currentAddress\": \"123 Fake St\",\n          \"height\": 177,\n          \"weight\": 74,\n          \"bloodType\": \"A_NEG\",\n          \"region\": \"CANTERBURY\",\n          \"birthGender\": \"MALE\",\n          \"genderIdentity\": \"FEMALE\",\n          \"dateOfBirth\": {\n            \"year\": 1987,\n            \"month\": 04,\n            \"day\": 01\n          },\n          \"dateOfDeath\": null,\n          \"createdTimestamp\": {\n            \"date\": {\n              \"year\": 2018,\n              \"month\": 06,\n              \"day\": 25\n            },\n            \"time\": {\n              \"hour\": 01,\n              \"minute\": 02,\n              \"second\": 03,\n              \"nano\": 123456\n            }\n          },\n          \"modifiedTimestamp\": {\n            \"date\": {\n              \"year\": 2018,\n              \"month\": 06,\n              \"day\": 26\n            },\n            \"time\": {\n              \"hour\": 04,\n              \"minute\": 05,\n              \"second\": 06,\n              \"nano\": 123456\n            }\n          }\n        }\n\n  schemas:\n\n    clientLoginBody:\n      type: object\n      properties:\n        userid:\n          type: integer\n\n    clientLoginResponse:\n      type: object\n      properties:\n        token:\n          $ref: '#/components/schemas/jsonWebToken'\n        identifier:\n          type: integer\n        userData:\n          $ref: '#/components/schemas/clientDetails'\n\n    clinicianLoginBody:\n      type: object\n      properties:\n        staffId:\n          type: integer\n        password:\n          type: string\n\n    clinicianLoginResponse:\n      type: object\n      properties:\n        token:\n          $ref: '#/components/schemas/jsonWebToken'\n        userData:\n          $ref: '#/components/schemas/clinicianDetails'\n\n    administratorLoginBody:\n      type: object\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n\n    administratorLoginResponse:\n      type: object\n      properties:\n        token:\n          $ref: '#/components/schemas/jsonWebToken'\n        userData:\n          $ref: '#/components/schemas/administratorDetails'\n\n    jsonWebToken:\n      type: string\n      description: A JSON Web Token used for all further authentication. Should be included in the Authentication header\n      example: eyJhbGR5cCI6IkpXVCJ9.eyJzdWIiDIyfQ.Vxrhpalxry4EfsAKGITz02x0\n\n    ### Clinician\n\n    clinicianOverview:\n      type: object\n      properties:\n        staffId:\n          type: integer\n        firstName:\n          type: string\n        lastName:\n          type: string\n        middleName:\n          type: string\n        region:\n          $ref: '#/components/schemas/regionEnum'\n\n    clinicianDetails:\n      type: object\n      properties:\n        staffId:\n          type: integer\n        firstName:\n          type: string\n        lastName:\n          type: string\n        middleName:\n          type: string\n        workAddress:\n          type: string\n        region:\n          $ref: '#/components/schemas/regionEnum'\n        createdOn:\n          $ref: '#/components/schemas/dateTime'\n        modifiedOn:\n          $ref: '#/components/schemas/dateTime'\n\n    clinicianModifiableDetails:\n      type: object\n      properties:\n        firstName:\n          type: string\n        lastName:\n          type: string\n        middleName:\n          type: string\n        workAddress:\n          type: string\n        password:\n          type: string\n        region:\n          $ref: '#/components/schemas/regionEnum'\n\n    clinicianCreateDetails:\n      type: object\n      properties:\n        staffId:\n          type: integer\n        firstName:\n          type: string\n        lastName:\n          type: string\n        middleName:\n          type: string\n        workAddress:\n          type: string\n        password:\n          type: string\n        region:\n          $ref: '#/components/schemas/regionEnum'\n\n    ### Administrator\n\n    administratorDetails:\n      type: object\n      properties:\n        username:\n          type: string\n        createdOn:\n          $ref: '#/components/schemas/dateTime'\n        modifiedOn:\n          $ref: '#/components/schemas/dateTime'\n\n    administratorCreateDetails:\n      type: object\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n\n    administratorModifiableDetails:\n      type: object\n      properties:\n        username:\n          type: string\n\n    #Client attributes\n\n    clientOverview:\n      type: object\n      properties:\n        uid:\n          type: integer\n        firstName:\n          type: string\n        lastName:\n          type: string\n        middleName:\n          type: string\n        preferredName:\n          type: string\n        region:\n          $ref: '#/components/schemas/regionEnum'\n        birthGender:\n          $ref: '#/components/schemas/genderEnum'\n        bloodType:\n          $ref: '#/components/schemas/bloodTypeEnum'\n        dateOfBirth:\n          $ref: '#/components/schemas/date'\n\n    clientDetails:\n      type: object\n      properties:\n        uid:\n          type: integer\n        firstName:\n          type: string\n        middleName:\n          type: string\n        lastName:\n          type: string\n        preferredName:\n          type: string\n        currentAddress:\n          type: string\n        height:\n          type: number\n        weight:\n          type: number\n        bloodType:\n          $ref: '#/components/schemas/bloodTypeEnum'\n        region:\n          $ref: '#/components/schemas/regionEnum'\n        birthGender:\n          $ref: '#/components/schemas/genderEnum'\n        genderIdentity:\n          $ref: '#/components/schemas/genderEnum'\n        dateOfBirth:\n          $ref: '#/components/schemas/date'\n        dateOfDeath:\n          $ref: '#/components/schemas/date'\n        createdTimestamp:\n          $ref: '#/components/schemas/dateTime'\n        modifiedTimestamp:\n          $ref: '#/components/schemas/dateTime'\n      example:\n        $ref: '#/components/examples/clientDetailsExample'\n\n    clientCreateDetails:\n      type: object\n      properties:\n        firstName:\n          type: string\n        lastName:\n          type: string\n        middleName:\n          type: string\n        preferredName:\n          type: string\n        dateOfBirth:\n          $ref: '#/components/schemas/date'\n\n    clientModifiableDetails:\n      type: object\n      properties:\n        firstName:\n          type: string\n        middleName:\n          type: string\n        lastName:\n          type: string\n        preferredName:\n          type: string\n        currentAddress:\n          type: string\n        height:\n          type: number\n        weight:\n          type: number\n        region:\n          $ref: '#/components/schemas/regionEnum'\n        birthGender:\n          $ref: '#/components/schemas/genderEnum'\n        genderIdentity:\n          $ref: '#/components/schemas/genderEnum'\n        dateOfBirth:\n          $ref: '#/components/schemas/date'\n        dateOfDeath:\n          $ref: '#/components/schemas/date'\n        bloodType:\n          $ref: '#/components/schemas/bloodTypeEnum'\n\n    paginatedClientList:\n      type: object\n      properties:\n        clients:\n          type: array\n          items:\n            $ref: '#/components/schemas/clientOverview'\n        totalResults:\n          type: integer\n          example: 308\n\n    donatedOrgan:\n      type: object\n      properties:\n        id:\n          type: number\n        organType:\n          $ref: '#/components/schemas/organEnum'\n        dateTimeOfDonation:\n          $ref: '#/components/schemas/dateTime'\n        overrideReason:\n          type: string\n          example: \"It got dropped\"\n\n    donatedOrganList:\n      type: object\n      properties:\n        donatedOrgan:\n          $ref: '#/components/schemas/donatedOrgan'\n        donor:\n          $ref: '#/components/schemas/clientOverview'\n        receiver:\n          $ref: '#/components/schemas/clientOverview'\n\n    date:\n      type: string\n      example: \"2018-07-19\"\n      nullable: true\n\n    time:\n      type: string\n      example: \"14:56:01.562\"\n\n    dateTime:\n      type: string\n      example: \"2018-07-19T14:56:01.562\"\n\n    organBooleanArray:\n      type: object\n      properties:\n        LIVER:\n          type: boolean\n        KIDNEY:\n          type: boolean\n        PANCREAS:\n          type: boolean\n        HEART:\n          type: boolean\n        LUNG:\n          type: boolean\n        INTESTINE:\n          type: boolean\n        CORNEA:\n          type: boolean\n        MIDDLE_EAR:\n          type: boolean\n        SKIN:\n          type: boolean\n        BONE:\n          type: boolean\n        BONE_MARROW:\n          type: boolean\n        CONNECTIVE_TISSUE:\n          type: boolean\n\n    medicationRecord:\n      type: object\n      properties:\n        id:\n          type: number\n        medicationName:\n          type: string\n        started:\n          $ref: '#/components/schemas/date'\n        stopped:\n          $ref: '#/components/schemas/date'\n\n    medicationRecordCreate:\n      type: object\n      required:\n      - name\n      properties:\n        name:\n          type: string\n          example: Paracetamol\n\n    illnessRecord:\n      type: object\n      properties:\n        id:\n          type: number\n        illnessName:\n          type: string\n        diagnosisDate:\n          $ref: '#/components/schemas/date'\n        curedDate:\n          $ref: '#/components/schemas/date'\n        isChronic:\n          type: boolean\n\n    illnessRecordCreate:\n      type: object\n      properties:\n        name:\n          type: string\n        diagnosisDate:\n          $ref: '#/components/schemas/date'\n        curedDate:\n          $ref: '#/components/schemas/date'\n        isChronic:\n          type: boolean\n\n    illnessRecordModify:\n      type: object\n      properties:\n        diagnosisDate:\n          $ref: '#/components/schemas/date'\n        curedDate:\n          $ref: '#/components/schemas/date'\n        isChronic:\n          type: boolean\n\n    procedureRecord:\n      type: object\n      properties:\n        id:\n          type: number\n        summary:\n          type: string\n        description:\n          type: string\n        date:\n          $ref: '#/components/schemas/date'\n        affectedOrgans:\n          type: array\n          items:\n            $ref: '#/components/schemas/organEnum'\n\n    procedureRecordCreate:\n      type: object\n      properties:\n        summary:\n          type: string\n        description:\n          type: string\n        date:\n          $ref: '#/components/schemas/date'\n        affectedOrgans:\n          type: array\n          items:\n            $ref: '#/components/schemas/organEnum'\n\n    transplantRequest:\n      type: object\n      properties:\n        id:\n          type: number\n        requestedOrgan:\n          $ref: '#/components/schemas/organEnum'\n        requestDateTime:\n          $ref: '#/components/schemas/dateTime'\n        resolvedDateTime:\n          $ref: '#/components/schemas/dateTime'\n        status:\n          $ref: '#/components/schemas/transplantRequestStatusEnum'\n        resolvedReason:\n          type: string\n\n    transplantRequestCreate:\n      type: object\n      properties:\n        requestedOrgan:\n          $ref: '#/components/schemas/organEnum'\n        requestDateTime:\n          $ref: '#/components/schemas/dateTime'\n        resolvedDateTime:\n          $ref: '#/components/schemas/dateTime'\n        status:\n          $ref: '#/components/schemas/transplantRequestStatusEnum'\n        resolvedReason:\n          type: string\n          nullable: true\n\n    historyItem:\n      type: object\n      properties:\n        type:\n          type: string\n        details:\n          type: string\n        timestamp:\n          $ref: '#/components/schemas/dateTime'\n\n    countryResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/countryEnum'\n\n    hospitalList:\n      type: array\n      items:\n        $ref: '#/components/schemas/hospital'\n\n    hospital:\n      type: object\n      properties:\n        id:\n          type: number\n        name:\n          type: string\n        latitude:\n          type: number\n        longitude:\n          type: number\n        address:\n          type: string\n        transplantPrograms:\n          type: array\n          items:\n            $ref: '#/components/schemas/organEnum'\n\n    organTypeList:\n      type: array\n      items:\n        $ref: '#/components/schemas/organEnum'\n\n    textResponse:\n      type: object\n      properties:\n        response:\n          type: string\n\n    singleStringView:\n      type: object\n      required:\n      - value\n      properties:\n        value:\n          type: string\n          example: \"This is my request.\"\n\n    actionResponse:\n      type: object\n      properties:\n        resultText:\n          type: string\n        canUndo:\n          type: boolean\n        canRedo:\n          type: boolean\n\n    dashboardStatistics:\n      type: object\n      properties:\n        clientCount:\n          type: integer\n        donorCount:\n          type: integer\n        receiverCount:\n          type: integer\n        donorReceiverCount:\n          type: integer\n        organCount:\n          type: integer\n        requestCount:\n          type: integer\n\n    # Enums\n\n    regionEnum:\n      type: string\n      enum: [NORTHLAND, AUCKLAND, WAIKATO, BAY_OF_PLENTY, GISBORNE, HAWKES_BAY, TARANAKI, MANAWATU_WANGANUI, WELLINGTON, TASMAN, NELSON, MARLBOROUGH, WEST_COAST, CANTERBURY, OTAGO, SOUTHLAND, UNSPECIFIED]\n\n    genderEnum:\n      type: string\n      enum: [MALE, FEMALE, OTHER, UNSPECIFIED]\n\n    clientTypeEnum:\n      type: string\n      enum: [ANY, ONLY_DONOR, ONLY_RECEIVER, BOTH, NEITHER]\n\n    organEnum:\n      type: string\n      enum: [LIVER, KIDNEY, PANCREAS, HEART, LUNG, INTESTINE, CORNEA, MIDDLE_EAR, SKIN, BONE, BONE_MARROW, CONNECTIVE_TISSUE]\n\n    bloodTypeEnum:\n      type: string\n      enum: [A_POS, A_NEG, B_POS, B_NEG, AB_POS, AB_NEG, O_POS, O_NEG]\n\n    countryEnum:\n      type: string\n      enum: [AF, AX, AL, DZ, AS, AD, AO, AI, ...]\n\n    transplantRequestStatusEnum:\n      type: string\n      enum: [WAITING, CANCELLED, COMPLETED]\n\n    clientSortOptionsEnum:\n      type: string\n      enum: [ID, NAME, AGE, BIRTH_GENDER, REGION, DONOR, RECEIVER]\n\n    # Other\n\n    command:\n      type: object\n      properties:\n        command:\n          type: string\n          example: help\n\n  responses:\n    400BadRequest:\n      description: Bad request\n    401Unauthorized:\n      description: Access token is missing or invalid\n    403Forbidden:\n      description: You do not have permission to perform that action\n    404NotFound:\n      description: The specified resource was not found\n    500InternalServerError:\n      description: Internal server error\n\n  securitySchemes:\n\n    ClientAccess:\n      description: A client may only access their own data, they cannot access other users. They may only modify their personal information and organ donation status. They can view all their other statuses.\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n\n    ClinicianAccess:\n      description: Clincians can access and modify and client, and may view any clinician, but only modify their own information.\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n\n    AdministratorAccess:\n      description: Administrators can access and modify all user types.\n      type: http\n      scheme: bearer\n      bearerFormat: JWT",
			"canonicalURL": "/github.com/UCNZ-SENG302-2018-Donaco/OrgaNZ@5202b05f081797387bde2e3048e79da68685b0cf/-/blob/doc/API_Specification_OAS3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/UCNZ-SENG302-2018-Donaco/OrgaNZ/blob/5202b05f081797387bde2e3048e79da68685b0cf/doc/API_Specification_OAS3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/matchOrganToRecipients\": get: parameters: parse parameter \"\": resolve \"#/components/schemas/donatedOrgan\" reference: at 1:9173: unknown parameter location \"\""
}