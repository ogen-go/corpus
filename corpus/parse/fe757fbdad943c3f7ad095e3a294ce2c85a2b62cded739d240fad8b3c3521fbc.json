{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/geoadmin/service-stac"
		},
		"file": {
			"name": "parameters.yaml",
			"size": 0,
			"path": "spec/components/parameters.yaml",
			"byteSize": 3397,
			"content": "openapi: 3.0.1\ncomponents:\n  parameters:\n    assetQuery:\n     description: \u003e-\n       Query for properties in assets (e.g. mediatype). Use the JSON form of the assetQueryFilter\n       used in POST.\n     in: query\n     name: assetQuery\n     required: false\n     schema:\n       type: string\n    bbox:\n      explode: false\n      in: query\n      name: bbox\n      required: false\n      schema:\n        $ref: \"./schemas.yaml#/components/schemas/bbox\"\n      style: form\n    collectionId:\n      description: Local identifier of a collection\n      in: path\n      name: collectionId\n      required: true\n      schema:\n        type: string\n    collectionsArray:\n      explode: false\n      in: query\n      name: collections\n      required: false\n      schema:\n        $ref: \"./schemas.yaml#/components/schemas/collectionsArray\"\n    datetime:\n      explode: false\n      in: query\n      name: datetime\n      required: false\n      schema:\n        $ref: \"./schemas.yaml#/components/schemas/datetimeQuery\"\n      example: 2018-02-12T00%3A00%3A00Z%2F2018-03-18T12%3A31%3A12Z\n      style: form\n    featureId:\n      description: Local identifier of a feature\n      in: path\n      name: featureId\n      required: true\n      schema:\n        type: string\n    ids:\n      description: \u003e-\n        Array of Item ids to return. All other filter parameters that further\n        restrict the number of search results are ignored\n      explode: false\n      in: query\n      name: ids\n      required: false\n      schema:\n        $ref: \"./schemas.yaml#/components/schemas/ids\"\n    limit:\n      explode: false\n      in: query\n      name: limit\n      required: false\n      schema:\n        $ref: \"./schemas.yaml#/components/schemas/limit\"\n      style: form\n    query:\n      description: Query for properties in items. Use the JSON form of the queryFilter used in POST.\n      in: query\n      name: query\n      required: false\n      schema:\n        type: string\n    IfNoneMatch:\n      name: If-None-Match\n      in: header\n      schema:\n        type: string\n      description: \u003e-\n        The RFC7232 `If-None-Match` header field makes the GET request method conditional. It is\n        composed of a comma separated list of ETags or value \"*\".\n\n\n        The server compares the client's ETags (sent with `If-None-Match`) with the ETag for its\n        current version of the resource, and if both values match (that is, the resource has not changed),\n        the server sends back a `304 Not Modified` status, without a body, which tells the client that\n        the cached version of the response is still good to use (fresh).\n      example: \"d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b\"\n    IfMatch:\n      name: If-Match\n      in: header\n      schema:\n        type: string\n      description: \u003e-\n        The RFC7232 `If-Match` header field makes the GET request method conditional. It is\n        composed of a comma separated list of ETags or value \"*\".\n\n\n        The server compares the client's ETags (sent with `If-Match`) with the ETag for its\n        current version of the resource, and if both values don't match (that is, the resource has changed),\n        the server sends back a `412 Precondition Failed` status, without a body, which tells the client that\n        the cached version of the response is not good to use anymore.\n      example: \"d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b\"\n"
		}
	},
	"Error": "parse: parse spec: parse components: parameters: \"ids\": schema: parse schema: resolve \"./schemas.yaml#/components/schemas/ids\": external \"./schemas.yaml\": file: local file reference is not allowed"
}