{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/geoserver/geoserver"
		},
		"file": {
			"name": "catalog.yaml",
			"size": 0,
			"path": "src/community/rest-openapi/openapi/src/main/resources/org/geoserver/rest/openapi/1.0.0/catalog.yaml",
			"byteSize": 20600,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: GeoServer Catalog Model\n  description: GeoServer Catalog Model Objects\n\npaths:\n  /fake:\n    description: fake operation entry point to pass validation, otherwise codegen will comply there's no paths element\n    get:\n      operationId: fakeOp\n      responses:\n        200:\n          description: nothing really\n   \ncomponents:\n  schemas:\n    NamespaceInfo:\n      type: object\n      description: The namespace URI of the resource. Example would be an application\n        schema namespace URI.\n      properties:\n        prefix:\n          type: string\n          description: The name of the namespace.\n        uri:\n          type: string\n          description: URL to the namespace.\n        isolated:\n          type: boolean\n          description: Isolated workspaces content is only visible and queryable in the context of a virtual service bound to the isolated workspace.\n          \n    WorkspaceInfo:\n      title: Workspace\n      type: object\n      properties:\n        name:\n          type: string\n          description: name of the workspace\n        isolated:\n          type: boolean\n          description: Isolated workspaces content is only visible and queryable in the context of a virtual service bound to the isolated workspace.\n\n    DataStoreInfo:\n      title: datastore\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of data store\n        description:\n          type: string\n          description: Description of data store\n        enabled:\n          type: boolean\n          default: true\n          description: Whether or not the data store is enabled\n        connectionParameters:\n          $ref: \"#/components/schemas/ConnectionParameters\"\n        workspace:\n          $ref: \"#/components/schemas/WorkspaceInfo\"\n\n    ConnectionParameters:\n      type: object\n      additionalProperties:\n        type: string\n\n    CoverageStoreInfo:\n      type: object\n      required:\n        - name\n        - type\n      properties:\n        name:\n          type: string\n          description: Name of the coverage store\n        description:\n          type: string\n          description: Description of the coverage store\n        type:\n          type: string\n          description: Type of coverage store\n          enum:\n           - ArcGrid\n           - GeoTIFF\n           - ImageMosaic\n           - WorldImage\n        enabled:\n          type: boolean\n          description: Whether the store is enabled, or not\n        url:\n          type: string\n          description: Location of the raster data source (often, but not necessarily, a file). Can be relative to the data directory.\n        workspace:\n          $ref: \"#/components/schemas/WorkspaceInfo\"\n\n    CoverageInfo:\n      allOf: #note: Not using inheritance on purpose, there seems not to be a need so far, and would rather avoid the nasty discriminator\n      - $ref: \"#/components/schemas/ResourceInfo\"\n      - type: object\n        properties:\n          store:\n            $ref: \"#/components/schemas/CoverageStoreInfo\"\n          nativeCoverageName:\n            description: the native coverage name (used to pick up a specific coverage from within a reader)\n            type: string\n          nativeFormat:\n            description: The native format name of the coverage\n            type: string\n          supportedFormats:\n            type: array\n            description: The supported formats for the coverage\n            items:\n              type: string\n          requestSRS:\n            type: array\n            description: The collection of identifiers of the crs's the coverage supports in a request.\n            items:\n              type: string\n          responseSRS:\n            description: The collection of identifiers of the crs's the coverage supports in a response.\n            type: array\n            items:\n              type: string\n          defaultInterpolationMethod:\n            type: string\n            description: Default resampling (interpolation) method that will be used for this coverage.\n          interpolationMethods:\n            type: array\n            description: available interporlations methods for this coverage\n            items:\n              type: string\n          parameters:\n            type: object\n            additionalProperties:\n              type: object\n          dimensions:\n            description: raster dimensions\n            type: array\n            items:\n              $ref: \"#/components/schemas/CoverageDimensionInfo\"\n          #TODO: grid\n          \n    CoverageDimensionInfo:\n      type: object\n      description: A coverage dimension.\n      properties:\n        id:\n          type: string\n          description: Id of the dimension\n        name:\n          type: string\n          description: name of the dimension\n        description:\n          type: string\n          description: description of the raster dimension\n        range:\n          $ref: \"#/components/schemas/NumberRange\"\n        nullValues:\n          type: array\n          items:\n            type: number\n            format: double\n        unit:\n          type: string\n          description: the unit name for this dimension, or null if unknown\n        #dimensionType: TODO, add property of type SampleDimensionType?\n    \n    NumberRange:\n      type: object\n      description: a range of numbers\n      properties:\n        min:\n          type: number\n          format: double\n          description: min range value\n        max:\n          type: number\n          format: double\n          description: max range value\n    \n    KeywordInfo:\n      type: object\n      description: The namespace URI of the resource. Example would be an application\n        schema namespace URI.\n      required:\n        - value\n      properties:\n        value:\n          type: string\n          description: The keyword value.\n        language:\n          type: string\n          description: The language of the keyword, null if no language.\n        vocabulary:\n          type: string\n          description: The vocabulary of the keyword, null if no vocabulary.\n\n    DataLinkInfo:\n        type: object\n        description: Wraps a collection of data links for the resource.\n        properties:\n          about:\n            type: string\n          type:\n            type: string\n          content:\n            type: string\n\n    MetadataLinks:\n      type: object\n      description: Wraps a collection of metadata links for the resource.\n      properties:\n        metadataLink:\n          type: array\n          items:\n            $ref: \"catalog.yaml#/components/schemas/MetadataLinkInfo\"\n            \n    MetadataLinkInfo:\n      type: object\n      description: A metadata link.\n      properties:\n        about:\n          type: string\n          description: Human readable title\n        content:\n          type: string\n          description: URL for the metadata record/resource\n        metadataType:\n          type: string\n          description: Metadata standard (e.g. ISO19115:2003)\n          default: 'ISO19115:2003'\n        type:\n          type: string\n          description: Content-Type (e.g. text/plain, application/xml)\n    EnvelopeInfo:\n      type: object\n      properties:\n        minx:\n          type: number\n          format: double\n          nullable: false          \n          description: The min x coordinate\n        maxx:\n          type: number\n          format: double          \n          nullable: false          \n          description: The max x coordinate\n        miny:\n          type: number\n          format: double          \n          nullable: false          \n          description: The min y coordinate\n        maxy:\n          type: number\n          format: double          \n          nullable: false          \n          description: The max y coordinate\n        crs:\n          type: string\n          description: The coordinate reference system object of the bounding box.\n    \n    MetadataMap:\n      type: object\n      properties:\n        entry:\n          type: array\n          items:\n            $ref: '#/components/schemas/MetadataEntry'\n      example:\n        entry:\n        - '@key': kml.regionateFeatureLimit\n          $: '10'\n        - '@key': cacheAgeMax\n          $: '3600'\n        - '@key': cachingEnabled\n          $: 'true'\n        - '@key': indexingEnabled\n          $: 'false'\n        - '@key': dirName\n          $: tasmania_roads\n    MetadataEntry:\n      type: object\n      title: entry\n      properties:\n        '@key':\n          title: key\n          type: string\n        $:\n          title: text\n          type: string\n    \n    ProjectionPolicy:\n      type: string\n      enum:\n        - FORCE_DECLARED\n        - REPROJECT_TO_DECLARED\n        - NONE\n\n    ResourceInfo:\n      type: object\n      required:\n        - nativeName\n      properties:\n        name:\n          type: string\n          description: The name of the resource. This name corresponds to the \"published\"\n            name of the resource.\n        nativeName:\n          type: string\n          description: The native name of the resource. This name corresponds to the\n            physical resource that feature type is derived from -- a shapefile\n            name, a database table, etc...\n        namespace:\n          $ref: \"#/components/schemas/NamespaceInfo\"\n        title:\n          type: string\n          description: The title of the resource.\n        abstract:\n          type: string\n          description: the abstract for the resource.\n        description:\n          type: string\n          description: A description of the resource. This is usually something that is to be displayed in a user interface.\n        enabled:\n          type: boolean\n          description: A flag indicating if the resource is enabled or not.\n        alias:\n          description: A set of aliases or alternative names that the resource is also known by.\n          type: array\n          items:\n            type: string\n        dataLinks:\n          description: A collection of data links for the resource.\n          type: array\n          items:\n            $ref: \"#/components/schemas/DataLinkInfo\"\n        disabledServices:\n          description: a list of disabled services names for this resource (e.g. [WMS, WCS])\n          type: array\n          items:\n            type: string\n        keywords:\n          description: A collection of keywords associated with the resource.\n          type: array\n          items:\n            $ref: \"#/components/schemas/KeywordInfo\"\n        latLonBoundingBox:\n          $ref: \"#/components/schemas/EnvelopeInfo\"\n        nativeBoundingBox:\n          $ref: \"#/components/schemas/EnvelopeInfo\"\n        metadata:\n          $ref: \"#/components/schemas/MetadataMap\"\n        metadataLinks:\n            $ref: \"#/components/schemas/MetadataLinks\"\n        nativeCRS:\n          type: string\n          description: The native coordinate reference system object of the resource, in WKT format\n        srs:\n          type: string\n          description: Returns the identifier of coordinate reference system of the resource.\n        projectionPolicy:\n          $ref: \"#/components/schemas/ProjectionPolicy\"\n        advertised:\n          type: boolean\n          description: true if the resource existence should be advertised (true by default, unless otherwise set)\n        serviceConfiguration:\n          type: boolean\n          description: true if the resource will configure services access, false otherwise\n\n    AttributeTypeInfo:\n      type: object\n      description: An attribute exposed by a FeatureTypeInfo.\n      properties:\n        name:\n          type: string\n          description: Name of the attribute.\n        minOccurs:\n          type: integer\n          description: Minimum number of occurrences of the attribute.\n        maxOccurs:\n          type: integer\n          description: Maximum number of occurrences of the attribute.\n        nillable:\n          type: boolean\n          description: Flag indicating if null is an acceptable value for the attribute.\n        binding:\n          type: string\n          description: The java class that values of this attribute are bound to.\n        length:\n          type: integer\n          description: Returns the length of this attribute. It's usually non null only for string and numeric types\n            \n    FeatureTypeInfo:\n      allOf: #note: Not using inheritance on purpose, there seems not to be a need so far, and would rather avoid the nasty discriminator\n      - $ref: \"#/components/schemas/ResourceInfo\"\n      - type: object\n        properties:\n          store:\n            $ref: \"#/components/schemas/DataStoreInfo\"\n          cqlFilter:\n            type: string\n            description: The ECQL string used as default feature type filter\n          maxFeatures:\n            type: integer\n            description: A cap on the number of features that a query against this type can return.\n          numDecimals:\n            type: integer\n            format: int32\n            description: The number of decimal places to use when encoding floating point numbers from data of this feature type.\n          padWithZeros:\n            type: boolean\n          forcedDecimal:\n            type: boolean\n          responseSRS:\n            description: The srs codes that the WFS service will advertise in the capabilities\n              document for this feature type (overriding the global WFS settings).\n            type: array\n            items:\n              type: string\n          overridingServiceSRS:\n            type: boolean\n            description: True if this feature type info is overriding the WFS global SRS list\n          skipNumberMatched:\n            type: boolean\n            description: True if this feature type info is overriding the counting of numberMatched.\n          circularArcPresent:\n            type: boolean\n          encodeMeasures:\n            type: boolean\n          linearizationTolerance:\n            type: number\n            description: Tolerance used to linearize this feature type, as an absolute value\n              expressed in the geometries own CRS\n          attributes:\n            description: The attributes that the feature type exposes.\n            type: array\n            items:\n              $ref: \"#/components/schemas/AttributeTypeInfo\"\n\n    StyleInfo:\n      title: Style\n      type: object\n      properties:\n        name:\n          type: string\n          nullable: false\n          description: Name of the style. This value is unique among all styles and can be used to identify the style.\n        workspace:\n          $ref: \"#/components/schemas/WorkspaceInfo\"\n        format:\n          type: string\n          enum: [sld, mbstyle]\n          description: 'The styling language/format for the style, for example: \"sld\"'\n        formatVersion:\n          $ref: \"#/components/schemas/Version\"\n        languageVersion:\n          $ref: \"#/components/schemas/Version\"\n          #deprecated: true\n          #description: deprecated, StyleInfo defines formatVersion but the XStream encoder encodes languageVersion as that's how the internal StyleInfo member variable is called\n        filename:\n          type: string\n          nullable: false\n          description: name of the file the style originates from.\n        legend:\n          $ref: \"#/components/schemas/LegendInfo\"\n        metadata:\n          $ref: \"#/components/schemas/MetadataMap\"\n\n    Version:\n      type: object\n      properties:\n        version:\n          type: string\n          \n    AuthorityURLInfo:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Authory name, describing the industry, national or international origanization responsible for data product standard.\n        href:\n          type: string\n          description: URL to authority organization\n\n    LayerIdentifierInfo:\n      type: object\n      properties:\n        authority:\n          type: string\n          description: Authority cited, for details see authorityURLs\n        identifier:\n          type: string\n          description: Work citied, often a data standard provided by\n          \n    LegendInfo:\n      type: object\n      description: A legend for a layer\n      properties:\n        width:\n          type: integer\n          format: int32\n          description: Width of the legend \n        height:\n          type: integer\n          format: int32\n          description: Height of the legend\n        format:\n          type: string\n          description: Format of the legend. \n        onlineResource:\n          type: string\n          description: Online resource of the legend.\n\n    AttributionInfo:\n      type: object\n      description: WMS attribution information to be drawn on each map\n      properties:\n        title:\n          type: string\n          description: Human-readable text describing the data provider\n        href:\n          type: string\n          description: URL to data provider\n        logoURL:\n          type: string\n          description: Data provider logo\n        logoWidth:\n          type: integer\n          description: Data provider logo width\n        logoHeight:\n          type: integer\n          description: Data provider logo height\n        logoType:\n          type: string\n          description: Format of data provider logo, example \"image/png\"\n            \n    PublishedType:\n      type: string\n      enum:\n        - VECTOR\n        - RASTER\n        - REMOTE\n        - WMS\n        - GROUP\n        - WMTS\n          \n    PublishedInfo:\n      type: object\n      discriminator:\n        propertyName: type\n        mapping:\n          VECTOR: \"#/components/schemas/LayerInfo\"\n          RASTER: \"#/components/schemas/LayerInfo\"\n          REMOTE: \"#/components/schemas/LayerInfo\"\n          WMS: \"#/components/schemas/LayerInfo\"\n          WMTS: \"#/components/schemas/LayerInfo\"\n          GROUP: \"#/components/schemas/LayerGroupInfo\"\n      properties:\n        type:\n          $ref: \"#/components/schemas/PublishedType\"\n        name:\n          type: string\n        title:\n          type: string\n        abstract:\n          type: string\n        metadata:\n          $ref: \"#/components/schemas/MetadataMap\"\n        authorityURLs:\n          type: array\n          items:\n            $ref: \"#/components/schemas/AuthorityURLInfo\"\n        identifiers:\n          type: array\n          items:\n            $ref: \"#/components/schemas/LayerIdentifierInfo\"\n        attribution:\n          $ref: \"#/components/schemas/AttributionInfo\"\n\n    WMSInterpolation:\n      type: string\n      enum:\n        - Nearest\n        - Bilinear\n        - Bicubic\n    \n    LayerInfo:\n      allOf:\n        - $ref: \"#/components/schemas/PublishedInfo\"\n        - type: object\n          properties:\n            path:\n              type: string\n            defaultStyle:\n              $ref: \"#/components/schemas/StyleInfo\"\n            styles:\n              type: array\n              items:\n                $ref: \"#/components/schemas/StyleInfo\"\n            resource:\n              $ref: \"#/components/schemas/ResourceInfo\"\n            legend:\n              $ref: \"#/components/schemas/LegendInfo\"\n            enabled:\n              type: boolean\n            queryable:\n              type: boolean\n            opaque:\n              type: boolean\n            advertised:\n              type: boolean\n              default: true\n            defaultWMSInterpolationMethod:\n              $ref: \"#/components/schemas/WMSInterpolation\"\n              \n    LayerGroupInfo:\n      allOf:\n        - $ref: \"#/components/schemas/PublishedInfo\"\n        - type: object\n          properties:\n            mode:\n              type: string\n              enum:\n                - SINGLE\n                - OPAQUE_CONTAINER\n                - NAMED\n                - CONTAINER\n                - EO\n            gueryDisabled:\n              type: boolean\n            keywords:\n              $ref: \"#/components/schemas/KeywordInfo\"\n            workspace:\n              $ref: \"#/components/schemas/WorkspaceInfo\"\n            rootLayer:\n              $ref: \"#/components/schemas/LayerInfo\"\n            rootLayerStyle:\n              $ref: \"#/components/schemas/StyleInfo\"\n            layers:\n              type: array\n              items:\n                $ref: \"#/components/schemas/PublishedInfo\"\n            styles:\n              type: array\n              items:\n                $ref: \"#/components/schemas/StyleInfo\"\n            bounds:\n              $ref: \"#/components/schemas/EnvelopeInfo\"\n            metadataLinks:\n                $ref: \"#/components/schemas/MetadataLinks\"\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"FeatureTypeInfo\": parse schema: allOf: [0]: parse schema: resolve \"#/components/schemas/ResourceInfo\": parse schema: property \"metadataLinks\": parse schema: resolve \"#/components/schemas/MetadataLinks\": parse schema: property \"metadataLink\": parse schema: item: parse schema: resolve \"catalog.yaml#/components/schemas/MetadataLinkInfo\": find schema: external base \"catalog.yaml\" is not supported"
}