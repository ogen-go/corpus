{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/cowprotocol/services"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "crates/orderbook/openapi.yml",
			"byteSize": 36928,
			"content": "openapi: 3.0.3\ninfo:\n  version: 0.0.1\n  title: Order Book API\nservers:\n  - description: Mainnet (Staging)\n    url: https://barn.api.cow.fi/mainnet\n  - description: Mainnet (Prod)\n    url: https://api.cow.fi/mainnet\n  - description: Rinkeby (Staging)\n    url: https://barn.api.cow.fi/rinkeby\n  - description: Rinkeby (Prod)\n    url: https://api.cow.fi/rinkeby\n  - description: Gnosis Chain (Staging)\n    url: https://barn.api.cow.fi/xdai\n  - description: Gnosis Chain (Prod)\n    url: https://api.cow.fi/xdai\n  - description: Local\n    url: http://localhost:8080\npaths:\n  /api/v1/orders:\n    post:\n      summary: Create a new order.\n      responses:\n        201:\n          description: Order has been accepted.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UID\"\n        400:\n          description: Error during order validation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OrderPostError\"\n        403:\n          description: Forbidden, your account is deny-listed\n        429:\n          description: Too many order placements\n        500:\n          description: Error adding an order\n      requestBody:\n        description: The order to create.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OrderCreation\"\n    get:\n      summary: Get existing orders.\n      description: |\n        By default all currently valid orders are returned. The set of returned orders can be\n        reduced by setting owner, sell token, buy token filters. It can be increased by disabling\n        different order validity exclusion criteria.\n        At least one of owner, sellToken, buyToken has to be set.\n      parameters:\n        - name: owner\n          in: query\n          schema:\n            $ref: \"#/components/schemas/Address\"\n          required: false\n        - name: sellToken\n          in: query\n          schema:\n            $ref: \"#/components/schemas/Address\"\n          required: false\n        - name: buyToken\n          in: query\n          schema:\n            $ref: \"#/components/schemas/Address\"\n          required: false\n        - name: includeFullyExecuted\n          in: query\n          description: Should fully executed orders be returned?\n          schema:\n            type: boolean\n            default: false\n        - name: includeInvalidated\n          in: query\n          description: Should orders that have been invalidated be returned?\n          schema:\n            type: boolean\n            default: false\n        - name: includeInsufficientBalance\n          in: query\n          description: Should fill or kill orders that are not sufficiently funded be included?\n          schema:\n            type: boolean\n            default: false\n        - name: includePresignaturePending\n          in: query\n          description: Should pre-sign orders waiting for the on-chain presignature be included?\n          schema:\n            type: boolean\n            default: false\n        - name: includeUnsupportedTokens\n          in: query\n          description: Should the orders containing unsupported tokens be included?\n          schema:\n            type: boolean\n            default: false\n        - name: minValidTo\n          in: query\n          description: |\n            Minimum valid_to timestamp for included orders.\n            The default is the current time.\n          schema:\n            type: integer\n      responses:\n        200:\n          description: existing orders\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Order\"\n  /api/v1/orders/{UID}:\n    get:\n      summary: Get existing order from UID.\n      parameters:\n        - in: path\n          name: UID\n          schema:\n            $ref: \"#/components/schemas/UID\"\n          required: true\n      responses:\n        200:\n          description: Order\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        404:\n          description: Order was not found\n    delete:\n      summary: Cancels order by marking it invalid with a timestamp.\n      description: |\n        The successful deletion might not prevent solvers from settling the order\n        Authentication must be provided by signing the following message:\n      parameters:\n        - in: path\n          name: UID\n          schema:\n            $ref: \"#/components/schemas/UID\"\n          required: true\n      requestBody:\n        description: \"Signed OrderCancellation\"\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OrderCancellation\"\n      responses:\n        200:\n          description: Order deleted\n        400:\n          description: Malformed signature\n        401:\n          description: Invalid signature\n        404:\n          description: Order was not found\n  /api/v1/transactions/{txHash}/orders:\n    get:\n      summary: Get orders by settlement transaction hash.\n      parameters:\n        - in: path\n          name: txHash\n          schema:\n            $ref: \"#/components/schemas/TransactionHash\"\n          required: true\n      responses:\n        200:\n          description: Order\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Order\"\n  /api/v1/trades:\n    get:\n      summary: Get existing Trades.\n      description: |\n        Exactly one of owner or order_uid has to be set.\n      parameters:\n        - name: owner\n          in: query\n          schema:\n            $ref: \"#/components/schemas/Address\"\n          required: false\n        - name: orderUid\n          in: query\n          schema:\n            $ref: \"#/components/schemas/UID\"\n          required: false\n      responses:\n        200:\n          description: all trades\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Trade\"\n  /api/v1/solvable_orders:\n    get:\n      summary: Get solvable orders.\n      description: |\n        The set of orders that solvers should be solving right now. These orders are determined to\n        be valid at the time of the request.\n      responses:\n        200:\n          description: the orders\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Order\"\n  /api/v2/solvable_orders:\n    get:\n      summary: Get solvable orders.\n      description: |\n        The set of orders that solvers should be solving right now. These orders are determined to\n        be valid at the time of the request.\n      responses:\n        200:\n          description: the orders\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  orders:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Order\"\n                  latestSettlementBlock:\n                    type: integer\n                    description: The block number in which the most recent settlement was observed.\n  /api/v1/auction:\n    get:\n      summary: Gets the current batch auction.\n      description: |\n        The current batch auction that solvers should be solving right now. Includes the list of\n        solvable orders, the block on which the batch was created, as well as prices for all tokens\n        being traded (used for objective value computation).\n      responses:\n        200:\n          description: the auction\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Auction\"\n  /api/v1/fee:\n    get:\n      description: |\n        The fee that is charged for placing an order.\n        The fee is described by a minimum fee - in order to cover the gas costs for onchain settling - and\n        a feeRatio charged to the users for using the service.\n      parameters:\n        - name: sellToken\n          in: query\n          schema:\n            $ref: \"#/components/schemas/Address\"\n          required: true\n        - name: buyToken\n          in: query\n          schema:\n            $ref: \"#/components/schemas/Address\"\n          required: true\n        - name: amount\n          in: query\n          schema:\n            $ref: \"#/components/schemas/TokenAmount\"\n          required: true\n        - name: kind\n          in: query\n          schema:\n            $ref: \"#/components/schemas/OrderType\"\n          required: true\n      responses:\n        200:\n          description: the fee\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FeeInformation\"\n        400:\n          description: Token not supported by the protocol (e.g. token with fee on transfer)\n        404:\n          description: Token non-existent or not connected to native token\n        500:\n          description: Unexpected internal error while processing the request\n  /api/v1/markets/{baseToken}-{quoteToken}/{kind}/{amount}:\n    get:\n      description: |\n        The estimated amount in quote token for either buying or selling `amount` of baseToken.\n      parameters:\n        - name: baseToken\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/Address\"\n        - name: quoteToken\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/Address\"\n        - name: amount\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/TokenAmount\"\n        - name: kind\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/OrderType\"\n      responses:\n        200:\n          description: the price denominated in quote token\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AmountEstimate\"\n        400:\n          description: Token not supported by the protocol (e.g. token with fee on transfer)\n        404:\n          description: Token non-existent or no valid price found\n        500:\n          description: Unexpected internal error while processing the request\n  /api/v1/feeAndQuote/sell:\n    get:\n      description: |\n        For a total available amount of sell_token returns the fee in the sell token and the\n        resulting buy amount after the fee has been deducted.\n        sellAmountBeforeFee is the total amount that is available for the order. From it the fee\n        is deducted and the buy amount is calculated.\n      parameters:\n        - name: sellToken\n          in: query\n          schema:\n            $ref: \"#/components/schemas/Address\"\n          required: true\n        - name: buyToken\n          in: query\n          schema:\n            $ref: \"#/components/schemas/Address\"\n          required: true\n        - name: sellAmountBeforeFee\n          in: query\n          schema:\n            $ref: \"#/components/schemas/TokenAmount\"\n          required: true\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FeeAndQuoteSellResponse\"\n        400:\n          description: Error with the input data.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FeeAndQuoteError\"\n        404:\n          description: Token non-existent or not connected to native token\n        500:\n          description: Unexpected internal error while processing the request\n  /api/v1/feeAndQuote/buy:\n    get:\n      description: |\n        For a target buy amount returns the total sell_amount that is needed and how much of it is\n        the fee.\n      parameters:\n        - name: sellToken\n          in: query\n          schema:\n            $ref: \"#/components/schemas/Address\"\n          required: true\n        - name: buyToken\n          in: query\n          schema:\n            $ref: \"#/components/schemas/Address\"\n          required: true\n        - name: buyAmountAfterFee\n          in: query\n          schema:\n            $ref: \"#/components/schemas/TokenAmount\"\n          required: true\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FeeAndQuoteBuyResponse\"\n        400:\n          description: Error with the input data.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FeeAndQuoteError\"\n        404:\n          description: Token non-existent or not connected to native token\n        500:\n          description: Unexpected internal error while processing the request\n  /api/v1/account/{owner}/orders:\n    get:\n      summary: Get orders of one user paginated.\n      description: |\n        The orders are ordered by their creation date descending (newest orders first).\n        To enumerate all orders start with offset 0 and keep increasing the offset by the total\n        number of returned results. When a response contains less than the limit the last page has\n        been reached.\n      parameters:\n        - name: owner\n          in: path\n          required: true\n          schema:\n            $ref: \"#/components/schemas/Address\"\n        - name: offset\n          in: query\n          description: |\n            The pagination offset. Defaults to 0.\n          schema:\n            type: integer\n          required: false\n        - name: limit\n          in: query\n          description: |\n            The pagination limit. Defaults to 10. Maximum 1000. Minimum 1.\n          schema:\n            type: integer\n          required: false\n      responses:\n        200:\n          description: the orders\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Order\"\n        400:\n          description: Problem with parameters like limit being too large.\n  /api/v1/quote:\n    post:\n      summary: Quotes a price and fee for the specified order parameters.\n      description: |\n        This API endpoint accepts a partial order and computes the minimum fee and\n        a price estimate for the order. It returns a full order that can be used\n        directly for signing, and with an included signature, passed directly to\n        the order creation endpoint.\n      requestBody:\n        description: The order parameters to compute a quote for.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OrderQuoteRequest\"\n      responses:\n        200:\n          description: Quoted order.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OrderQuoteResponse\"\n        400:\n          description: Error quoting order.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FeeAndQuoteError\"\n        403:\n          description: Forbidden, your account is deny-listed\n        429:\n          description: Too many order quotes\n        500:\n          description: Unexpected error quoting an order\n  /api/v1/solver_competition/{auction_id}:\n    get:\n      summary: Information about solver competition\n      description: |\n        Returns the settlements submitted by every solver for a specific auction\n        id. The auction id corresponds to the id external solvers are provided\n        with. Auction ids are not globally unique, they are reused from time to\n        time. The backend keeps the competition information for a limited amount\n        of time.\n      parameters:\n        - name: auction_id\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: competition info\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SolverCompetitionResponse\"\n        404:\n          description: No competition information available for this auction id.\ncomponents:\n  schemas:\n    TransactionHash:\n      description: 32 byte digest encoded as a hex with `0x` prefix.\n      example: \"0xd51f28edffcaaa76be4a22f6375ad289272c037f3cc072345676e88d92ced8b5\"\n    Address:\n      description: 20 byte Ethereum address encoded as a hex with `0x` prefix.\n      type: string\n      example: \"0x6810e776880c02933d47db1b9fc05908e5386b96\"\n    AppData:\n      description: 32 bytes encoded as hex with `0x` prefix.\n      example: \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n    BigUint:\n      description: A big unsigned integer encoded in decimal.\n      type: string\n      example: \"1234567890\"\n    TokenAmount:\n      description: Amount of a token. uint256 encoded in decimal.\n      type: string\n      example: \"1234567890\"\n    FeeInformation:\n      description: |\n        Provides the information to calculate the fees.\n      type: object\n      properties:\n        expirationDate:\n          description: |\n            Expiration date of the offered fee. Order service might not accept\n            the fee after this expiration date. Encoded as ISO 8601 UTC.\n          type: string\n          example: \"2020-12-03T18:35:18.814523Z\"\n        amount:\n          description: Absolute amount of fee charged per order in specified sellToken\n          $ref: \"#/components/schemas/TokenAmount\"\n      required:\n        - expirationDate\n        - amount\n    OrderType:\n      description: Is this a buy order or sell order?\n      type: string\n      enum: [buy, sell]\n    SellTokenSource:\n      description: Where should the sell token be drawn from?\n      type: string\n      enum: [ erc20, internal, external ]\n    BuyTokenDestination:\n      description: Where should the buy token be transfered to?\n      type: string\n      enum: [ erc20, internal ]\n    PriceQuality:\n      description: How good should the price estimate be?\n      type: string\n      enum: [ fast, optimal ]\n    OrderStatus:\n      description: The current order status\n      type: string\n      enum: [presignaturePending, open, fulfilled, cancelled, expired]\n    OrderParameters:\n      description: Order parameters.\n      type: object\n      properties:\n        sellToken:\n          description: \"ERC20 token to be sold\"\n          $ref: \"#/components/schemas/Address\"\n        buyToken:\n          description: \"ERC20 token to be bought\"\n          $ref: \"#/components/schemas/Address\"\n        receiver:\n          description: |\n            An optional address to receive the proceeds of the trade instead of the\n            owner (i.e. the order signer).\n          $ref: \"#/components/schemas/Address\"\n          nullable: true\n        sellAmount:\n          description: \"Amount of sellToken to be sold in atoms\"\n          $ref: \"#/components/schemas/TokenAmount\"\n        buyAmount:\n          description: \"Amount of buyToken to be bought in atoms\"\n          $ref: \"#/components/schemas/TokenAmount\"\n        validTo:\n          description: Unix timestamp until the order is valid. uint32.\n          type: integer\n        appData:\n          description: |\n            Arbitrary application specific data that can be added to an order. This can\n            also be used to ensure uniqueness between two orders with otherwise the\n            exact same parameters.\n          $ref: \"#/components/schemas/AppData\"\n        feeAmount:\n          description: \"Fees: feeRatio * sellAmount + minimal_fee in atoms\"\n          $ref: \"#/components/schemas/TokenAmount\"\n        kind:\n          description: \"The kind is either a buy or sell order\"\n          $ref: \"#/components/schemas/OrderType\"\n        partiallyFillable:\n          description: Is this a fill-or-kill order or a partially fillable order?\n          type: boolean\n        sellTokenBalance:\n          $ref: \"#/components/schemas/SellTokenSource\"\n          default: \"erc20\"\n        buyTokenBalance:\n          $ref: \"#/components/schemas/BuyTokenDestination\"\n          default: \"erc20\"\n        signingScheme:\n          $ref: \"#/components/schemas/SigningScheme\"\n          default: \"eip712\"\n      required:\n        - sellToken\n        - buyToken\n        - sellAmount\n        - buyAmount\n        - validTo\n        - appData\n        - feeAmount\n        - kind\n        - partiallyFillable\n    OrderCreation:\n      description: Data a user provides when creating a new order.\n      allOf:\n        - $ref: \"#/components/schemas/OrderParameters\"\n        - type: object\n          properties:\n            signingScheme:\n              $ref: \"#/components/schemas/SigningScheme\"\n            signature:\n              $ref: \"#/components/schemas/Signature\"\n            from:\n              description: |\n                If set, the backend enforces that this address matches what is decoded as the signer of\n                the signature. This helps catch errors with invalid signature encodings as the backend\n                might otherwise silently work with an unexpected address that for example does not have\n                any balance.\n              $ref: \"#/components/schemas/Address\"\n              nullable: true\n          required:\n            - signingScheme\n            - signature\n    OrderMetaData:\n      description: |\n        Extra order data that is returned to users when querying orders\n        but not provided by users when creating orders.\n      type: object\n      properties:\n        creationTime:\n          description: Creation time of the order. Encoded as ISO 8601 UTC.\n          type: string\n          example: \"2020-12-03T18:35:18.814523Z\"\n        owner:\n          $ref: \"#/components/schemas/Address\"\n        UID:\n          $ref: \"#/components/schemas/UID\"\n        availableBalance:\n          description: \"Amount of sellToken available for the settlement contract to spend on behalf of the owner. Null if API was unable to fetch balance or if the order status isn't Open.\"\n          $ref: \"#/components/schemas/TokenAmount\"\n          nullable: true\n        executedSellAmount:\n          description: \"The total amount of sellToken that has been executed for this order including fees.\"\n          $ref: \"#/components/schemas/BigUint\"\n        executedSellAmountBeforeFees:\n          description: \"The total amount of sellToken that has been executed for this order without fees.\"\n          $ref: \"#/components/schemas/BigUint\"\n        executedBuyAmount:\n          description: \"The total amount of buyToken that has been executed for this order.\"\n          $ref: \"#/components/schemas/BigUint\"\n        executedFeeAmount:\n          description: \"The total amount of fees that have been executed for this order.\"\n          $ref: \"#/components/schemas/BigUint\"\n        invalidated:\n          description: Has this order been invalidated?\n          type: boolean\n        status:\n          description: Order status\n          $ref: \"#/components/schemas/OrderStatus\"\n        fullFeeAmount:\n          description: \"Amount that the signed fee would be without subsidies\"\n          $ref: \"#/components/schemas/TokenAmount\"\n        isLiquidityOrder:\n          description: |\n            Liquidity orders are functionally the same as normal smart contract orders but are not\n            placed with the intent of actively getting traded. Instead they facilitate the\n            trade of normal orders by allowing them to be matched against liquidity orders which\n            uses less gas and can have better prices than external liquidity.\n            As such liquidity orders will only be used in order to improve settlement of normal\n            orders. They should not be expected to be traded otherwise and should not expect to get\n            surplus.\n          type: boolean\n      required:\n        - creationTime\n        - owner\n        - UID\n        - executedSellAmount\n        - executedSellAmountBeforeFees\n        - executedBuyAmount\n        - executedFeeAmount\n        - invalidated\n    Order:\n      allOf:\n        - $ref: \"#/components/schemas/OrderCreation\"\n        - $ref: \"#/components/schemas/OrderMetaData\"\n    Auction:\n      description: |\n        A batch auction for solving.\n      type: object\n      properties:\n        block:\n          type: integer\n          description: |\n            The block number for the auction. Orders and prices are guaranteed to be valid on this\n            block. Proposed settlements should be valid for this block as well.\n        latestSettlementBlock:\n          type: integer\n          description: |\n            The latest block on which a settlement has been processed.\n\n            Note that under certain conditions it is possible for a settlement to have been mined as\n            part of `block` but not have yet been processed.\n        orders:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Order\"\n          description: |\n            The solvable orders included in the auction.\n        prices:\n          type: object\n          additionalProperties:\n            $ref: \"#/components/schemas/BigUint\"\n          description: |\n            The reference prices for all traded tokens in the auction as a mapping from token\n            addresses to a price denominated in native token (i.e. 1e18 represents a token that\n            trades one to one with the native token). These prices are used for solution competition\n            for computing surplus and converting fees to native token.\n    OrderCancellation:\n      description: |\n        EIP712 signature of struct OrderCancellation { orderUid: bytes } from the order's owner\n      type: object\n      properties:\n        signature:\n          description: \"OrderCancellation signed by owner\"\n          $ref: \"#/components/schemas/Signature\"\n        signingScheme:\n          $ref: \"#/components/schemas/SigningScheme\"\n      required:\n        - signature\n        - signingScheme\n    AmountEstimate:\n      description: |\n        Provides the information about an estimated price.\n      type: object\n      properties:\n        amount:\n          description: The estimated amount\n          $ref: \"#/components/schemas/TokenAmount\"\n        token:\n          description: \"The token in which the amount is given\"\n          $ref: \"#/components/schemas/Address\"\n    Trade:\n      description: |\n        Trade data such as executed amounts, fees, order id and block number.\n      type: object\n      properties:\n        blockNumber:\n          description: \"Block in which trade occurred.\"\n          type: integer\n        logIndex:\n          description: \"Index in which transaction was included in block.\"\n          type: integer\n        orderUid:\n          description: \"Unique ID of the order matched by this trade.\"\n          $ref: \"#/components/schemas/UID\"\n        owner:\n          description: \"Address of trader.\"\n          $ref: \"#/components/schemas/Address\"\n        sellToken:\n          description: \"Address of token sold.\"\n          $ref: \"#/components/schemas/Address\"\n        buyToken:\n          description: \"Address of token bought.\"\n          $ref: \"#/components/schemas/Address\"\n        sellAmount:\n          description: \"Total amount of sellToken that has been executed for this trade (including fees).\"\n          $ref: \"#/components/schemas/TokenAmount\"\n        sellAmountBeforeFees:\n          description: \"The total amount of sellToken that has been executed for this order without fees.\"\n          $ref: \"#/components/schemas/BigUint\"\n        buyAmount:\n          description: \"Total amount of buyToken received in this trade.\"\n          $ref: \"#/components/schemas/TokenAmount\"\n        transactionHash:\n          description: \"Hash of the corresponding settlement transaction containing the trade (if available).\"\n          $ref: \"#/components/schemas/TransactionHash\"\n          nullable: true\n      required:\n        - blockNumber\n        - logIndex\n        - orderUid\n        - owner\n        - sellToken\n        - buyToken\n        - sellAmount\n        - sellAmountBeforeFees\n        - buyAmount\n        - transactionHash\n    UID:\n      description: |\n        Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix.\n        Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address\n        and bytes 52..56 valid to,\n      type: string\n    Signature:\n      description: 65 bytes encoded as hex with `0x` prefix. r + s + v from the spec.\n      example: \"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    SigningScheme:\n      description: How was the order signed?\n      type: string\n      enum: [eip712, ethsign]\n    OrderPostError:\n      type: object\n      properties:\n        errorType:\n          type: string\n          enum:\n            [\n              DuplicateOrder,\n              InsufficientFee,\n              InsufficientAllowance,\n              InsufficientBalance,\n              InsufficientValidTo,\n              ExcessiveValidTo,\n              InvalidSignature,\n              TransferEthToContract,\n              TransferSimulationFailed,\n              UnsupportedToken,\n              WrongOwner,\n              SameBuyAndSellToken,\n              ZeroAmount,\n              UnsupportedBuyTokenDestination,\n              UnsupportedSellTokenSource,\n              UnsupportedOrderType,\n            ]\n        description:\n          type: string\n      required:\n        - errorType\n        - description\n    OrderCancellationError:\n      type: object\n      properties:\n        errorType:\n          type: string\n          enum:\n            [\n              InvalidSignature,\n              WrongOwner,\n              OrderNotFound,\n              AlreadyCancelled,\n              OrderFullyExecuted,\n              OrderExpired,\n              OnChainOrder,\n            ]\n        description:\n          type: string\n      required:\n        - errorType\n        - description\n    FeeAndQuoteSellResponse:\n      type: object\n      properties:\n        fee:\n          $ref: \"#/components/schemas/FeeInformation\"\n        buyAmountAfterFee:\n          description: The buy amount after deducting the fee.\n          $ref: \"#/components/schemas/TokenAmount\"\n    FeeAndQuoteBuyResponse:\n      type: object\n      properties:\n        fee:\n          $ref: \"#/components/schemas/FeeInformation\"\n        sellAmountBeforeFee:\n          description: The sell amount including the fee.\n          $ref: \"#/components/schemas/TokenAmount\"\n    FeeAndQuoteError:\n      type: object\n      properties:\n        errorType:\n          type: string\n          enum: [\"NoLiquidity\", \"UnsupportedToken\", \"AmountIsZero\", \"SellAmountDoesNotCoverFee\"]\n        description:\n          type: string\n      required:\n        - errorType\n        - description\n    OrderQuoteSide:\n      description: The buy or sell side when quoting an order.\n      oneOf:\n        - type: object\n          description: Quote a sell order given the final total sell amount including fees\n          properties:\n            kind:\n              type: string\n              enum: [sell]\n            sellAmountBeforeFee:\n              description: |\n                The total amount that is available for the order. From this value, the fee\n                is deducted and the buy amount is calculated.\n              $ref: \"#/components/schemas/TokenAmount\"\n          required:\n            - kind\n            - sellAmountBeforeFee\n        - type: object\n          description: Quote a sell order given the sell amount.\n          properties:\n            kind:\n              type: string\n              enum: [sell]\n            sellAmountAfterFee:\n              description: The sell amount for the order.\n              $ref: \"#/components/schemas/TokenAmount\"\n          required:\n            - kind\n            - sellAmountAfterFee\n        - type: object\n          description: Quote a buy order given an exact buy amount.\n          properties:\n            kind:\n              type: string\n              enum: [buy]\n            buyAmountAfterFee:\n              description: The buy amount for the order.\n              $ref: \"#/components/schemas/TokenAmount\"\n          required:\n            - kind\n            - buyAmountAfterFee\n    OrderQuoteRequest:\n      description: Request fee and price quote.\n      allOf:\n        - $ref: \"#/components/schemas/OrderQuoteSide\"\n        - type: object\n          properties:\n            sellToken:\n              description: \"ERC20 token to be sold\"\n              $ref: \"#/components/schemas/Address\"\n            buyToken:\n              description: \"ERC20 token to be bought\"\n              $ref: \"#/components/schemas/Address\"\n            receiver:\n              description: |\n                An optional address to receive the proceeds of the trade instead of the\n                owner (i.e. the order signer).\n              $ref: \"#/components/schemas/Address\"\n              nullable: true\n            validTo:\n              description: Unix timestamp until the order is valid. uint32.\n              type: integer\n            appData:\n              description: |\n                Arbitrary application specific data that can be added to an order. This can\n                also be used to ensure uniqueness between two orders with otherwise the\n                exact same parameters.\n              $ref: \"#/components/schemas/AppData\"\n            partiallyFillable:\n              description: Is this a fill-or-kill order or a partially fillable order?\n              type: boolean\n            sellTokenBalance:\n              $ref: \"#/components/schemas/SellTokenSource\"\n              default: \"erc20\"\n            buyTokenBalance:\n              $ref: \"#/components/schemas/BuyTokenDestination\"\n              default: \"erc20\"\n            from:\n              $ref: \"#/components/schemas/Address\"\n            priceQuality:\n              $ref: \"#/components/schemas/PriceQuality\"\n              default: \"optimal\"\n          required:\n            - sellToken\n            - buyToken\n            - validTo\n            - appData\n            - partiallyFillable\n            - from\n    OrderQuoteResponse:\n      description: |\n        An order quoted by the back end that can be directly signed and\n        submitted to the order creation backend.\n      type: object\n      properties:\n        quote:\n          $ref: \"#/components/schemas/OrderParameters\"\n        from:\n          $ref: \"#/components/schemas/Address\"\n        expirationDate:\n          description: |\n            Expiration date of the offered fee. Order service might not accept\n            the fee after this expiration date. Encoded as ISO 8601 UTC.\n          type: string\n          example: \"1985-03-10T18:35:18.814523Z\"\n    SolverCompetitionResponse:\n      type: object\n      properties:\n        transactionHash:\n          nullable: true\n          allOf:\n            - $ref: \"#/components/schemas/TransactionHash\"\n        gasPrice:\n          type: number\n          description: gas price used for ranking solutions\n        liquidityCollectedBlock:\n          type: integer\n        competitionSimulationBlock:\n          type: integer\n        solutions:\n          type: array\n          description: Maps from solver name to object describing that solver's settlement.\n          items:\n            $ref: \"#/components/schemas/SolverSettlement\"\n    SolverSettlement:\n      type: object\n      properties:\n        solver:\n          type: string\n          description: name of the solver\n        objective:\n          type: object\n          properties:\n            total:\n              type: number\n              description: the total objective value used for ranking solutions\n            surplus:\n              type: number\n            fees:\n              type: number\n            cost:\n              type: number\n            gas:\n              type: integer\n        prices:\n          type: object\n          additionalProperties:\n            $ref: \"#/components/schemas/BigUint\"\n          description: |\n            The prices of tokens for settled user orders as passed to the settlement contract.\n        orders:\n          type: array\n          description: the touched orders\n          items:\n            type: object\n            properties:\n              id:\n                $ref: \"#/components/schemas/UID\"\n              executedAmount:\n                $ref: \"#/components/schemas/BigUint\"\n        callData:\n          description: hex encoded transaction calldata\n          type: string\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /api/v1/transactions/{txHash}/orders: get: parameters: parse parameter \"txHash\": invalid schema:style:explode combination"
}