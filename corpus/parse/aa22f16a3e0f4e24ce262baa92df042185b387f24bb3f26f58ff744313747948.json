{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ekelen/tarot-api"
		},
		"file": {
			"name": "RWS-card-api.yaml",
			"size": 0,
			"path": "static/RWS-card-api.yaml",
			"byteSize": 4766,
			"content": "---\nopenapi: 3.0.0\ninfo:\n  title: Tarot Card Meanings REST API\n  description: Card names, descriptions, and divinatory meanings according to AE Waite's Pictorial Key to the Tarot (1910), the companion to the Rider-Waite-Smith (RWS) deck upon which most newer decks are based.\n  version: 1.0.0\nservers:\n  - url: https://rws-cards-api.herokuapp.com/api/v1\n    description: Production server\n  - url: localhost:8080\n    description: Local server\ntags:\n  - name: Get cards\n    description: Get tarot cards filtered by path or query string parameters\npaths:\n  /cards:\n    get:\n      tags:\n        - Get cards\n      responses:\n        \"200\":\n          description: Get all card data.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CardList\"\n  /cards/suits/{suit}:\n    get:\n      tags:\n        - Get cards\n      parameters:\n        - name: suit\n          in: path\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - wands\n              - cups\n              - swords\n              - pentacles\n      responses:\n        \"200\":\n          description: Get cards of specified suit\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CardList\"\n  /cards/courts/{rank}:\n    get:\n      tags:\n        - Get cards\n      parameters:\n        - name: rank\n          in: path\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            enum:\n              - queen\n              - queens\n              - king\n              - kings\n              - knight\n              - knights\n              - page\n              - pages\n      responses:\n        \"200\":\n          description: Get cards of specified suit\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CardList\"\n  /cards/search:\n    get:\n      tags:\n        - Get cards\n      parameters:\n        - name: q\n          in: query\n          description: Search all for text (case insensitive)\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: suit\n          in: query\n          description: Returns only cards of specified suit. e.g. search?suit=wands\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - wands\n              - swords\n              - cups\n              - pentacles\n        - name: value\n          in: query\n          description: Returns only cards of specified value, e.g. search?value=4\n          required: false\n          style: form\n          explode: true\n          schema:\n            $ref: \"#/components/schemas/value\"\n        - name: type\n          in: query\n          description: Returns only cards of specified type.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - major\n              - minor\n      responses:\n        \"200\":\n          description: Searches all cards (using q for global text search, or by parameter)\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CardList\"\n  /cards/random:\n    get:\n      tags:\n        - Get cards\n      parameters:\n        - name: \"n\"\n          in: query\n          description: If specified and between 1 and 78, returns n number of unique random cards. Else, returns all cards in random order.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Returns one random card (or n random card if specified in parameters).\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CardList\"\ncomponents:\n  schemas:\n    Card:\n      type: object\n      properties:\n        name_short:\n          type: string\n        name:\n          type: string\n        value:\n          type: string\n        value_int:\n          type: integer\n        type:\n          type: string\n          enum:\n            - major\n            - minor\n        meaning_up:\n          type: string\n        meaning_rev:\n          type: string\n        desc:\n          type: string\n    CardList:\n      type: object\n      properties:\n        nhits:\n          type: integer\n        cards:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Card\"\n    value:\n      anyOf:\n        - type: integer\n        - type: string\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /cards/search: get: parameters: parse parameter \"value\": invalid schema:style:explode combination: (\"\":\"form\":true)"
}