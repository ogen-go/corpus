{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/authelia/authelia"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "api/openapi.yml",
			"byteSize": 146589,
			"content": "# yamllint disable rule:line-length\n---\nopenapi: 3.0.3\ninfo:\n  title: Authelia API\n  description: \u003e\n    Authelia is an open-source authentication and authorization server providing 2-factor authentication and single\n    sign-on (SSO) for your applications via a web portal.\n  contact:\n    name: Authelia Support\n    url: https://www.authelia.com/contact/\n    email: team@authelia.com\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0\n  version: 1.0.0\nservers:\n  - url: \"{{ .BaseURL }}\"\n    description: Authelia API\ntags:\n  - name: State\n    description: Configuration, health and state endpoints\n  - name: Authentication\n    description: Authentication and verification endpoints\n  - name: Password Reset\n    description: Password reset endpoints\n  - name: User Information\n    description: User configuration endpoints\n  - name: Second Factor\n    description: TOTP, Webauthn and Duo endpoints\n    externalDocs:\n      url: https://www.authelia.com/configuration/second-factor/introduction/\n  - name: OpenID Connect 1.0\n    description: OpenID Connect 1.0 and OAuth 2.0 Endpoints\n    externalDocs:\n      url: https://www.authelia.com/integration/openid-connect/introduction/\npaths:\n  /api/configuration:\n    get:\n      tags:\n        - State\n      summary: Application Configuration\n      description: \u003e\n        The configuration endpoint provides detailed information including available second factor methods, if any\n        second factor policies exist and the TOTP period configuration.\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.configuration.ConfigurationBody'\n        \"403\":\n          description: Forbidden\n      security:\n        - authelia_auth: []\n  /api/configuration/password-policy:\n    get:\n      tags:\n        - State\n      summary: Password Policy Configuration\n      description: \u003e\n        The password policy configuration endpoint provides a password policy for resetting passwords.\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.configuration.PasswordPolicyConfigurationBody'\n  /api/health:\n    get:\n      tags:\n        - State\n      summary: Application Health\n      description: The health check endpoint provides information about the health of Authelia.\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/middlewares.OkResponse'\n  /api/state:\n    get:\n      tags:\n        - State\n      summary: User Application State\n      description: \u003e\n        The state endpoint provides detailed information including the user, current authenticate level and Authelia's\n        configured default redirection URL.\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.StateResponse'\n  /api/verify:\n    get:\n      tags:\n        - Authentication\n      summary: Verification\n      description: \u003e\n        The verify endpoint provides the ability to verify if a user has the necessary permissions to access a specified\n        domain.\n      parameters:\n        - $ref: '#/components/parameters/originalURLParam'\n        - $ref: '#/components/parameters/forwardedMethodParam'\n        - $ref: '#/components/parameters/authParam'\n      responses:\n        \"200\":\n          description: Successful Operation\n          headers:\n            remote-user:\n              description: Username\n              schema:\n                type: string\n                example: john\n            remote-name:\n              description: Name\n              schema:\n                type: string\n                example: John Doe\n            remote-email:\n              description: Email\n              schema:\n                type: string\n                example: john.doe@authelia.com\n            remote-groups:\n              description: Comma separated list of Groups\n              schema:\n                type: string\n                example: admin,devs\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n    head:\n      tags:\n        - Authentication\n      summary: Verification\n      description: \u003e\n        The verify endpoint provides the ability to verify if a user has the necessary permissions to access a specified\n        domain.\n      parameters:\n        - $ref: '#/components/parameters/originalURLParam'\n        - $ref: '#/components/parameters/forwardedMethodParam'\n        - $ref: '#/components/parameters/authParam'\n      responses:\n        \"200\":\n          description: Successful Operation\n          headers:\n            remote-user:\n              description: Username\n              schema:\n                type: string\n                example: john\n            remote-name:\n              description: Name\n              schema:\n                type: string\n                example: John Doe\n            remote-email:\n              description: Email\n              schema:\n                type: string\n                example: john.doe@authelia.com\n            remote-groups:\n              description: Comma separated list of Groups\n              schema:\n                type: string\n                example: admin,devs\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n    options:\n      tags:\n        - Authentication\n      summary: Verification\n      description: \u003e\n        The verify endpoint provides the ability to verify if a user has the necessary permissions to access a specified\n        domain.\n      parameters:\n        - $ref: '#/components/parameters/originalURLParam'\n        - $ref: '#/components/parameters/forwardedMethodParam'\n        - $ref: '#/components/parameters/authParam'\n      responses:\n        \"200\":\n          description: Successful Operation\n          headers:\n            remote-user:\n              description: Username\n              schema:\n                type: string\n                example: john\n            remote-name:\n              description: Name\n              schema:\n                type: string\n                example: John Doe\n            remote-email:\n              description: Email\n              schema:\n                type: string\n                example: john.doe@authelia.com\n            remote-groups:\n              description: Comma separated list of Groups\n              schema:\n                type: string\n                example: admin,devs\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n    post:\n      tags:\n        - Authentication\n      summary: Verification\n      description: \u003e\n        The verify endpoint provides the ability to verify if a user has the necessary permissions to access a specified\n        domain.\n      parameters:\n        - $ref: '#/components/parameters/originalURLParam'\n        - $ref: '#/components/parameters/forwardedMethodParam'\n        - $ref: '#/components/parameters/authParam'\n      responses:\n        \"200\":\n          description: Successful Operation\n          headers:\n            remote-user:\n              description: Username\n              schema:\n                type: string\n                example: john\n            remote-name:\n              description: Name\n              schema:\n                type: string\n                example: John Doe\n            remote-email:\n              description: Email\n              schema:\n                type: string\n                example: john.doe@authelia.com\n            remote-groups:\n              description: Comma separated list of Groups\n              schema:\n                type: string\n                example: admin,devs\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n    put:\n      tags:\n        - Authentication\n      summary: Verification\n      description: \u003e\n        The verify endpoint provides the ability to verify if a user has the necessary permissions to access a specified\n        domain.\n      parameters:\n        - $ref: '#/components/parameters/originalURLParam'\n        - $ref: '#/components/parameters/forwardedMethodParam'\n        - $ref: '#/components/parameters/authParam'\n      responses:\n        \"200\":\n          description: Successful Operation\n          headers:\n            remote-user:\n              description: Username\n              schema:\n                type: string\n                example: john\n            remote-name:\n              description: Name\n              schema:\n                type: string\n                example: John Doe\n            remote-email:\n              description: Email\n              schema:\n                type: string\n                example: john.doe@authelia.com\n            remote-groups:\n              description: Comma separated list of Groups\n              schema:\n                type: string\n                example: admin,devs\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n    patch:\n      tags:\n        - Authentication\n      summary: Verification\n      description: \u003e\n        The verify endpoint provides the ability to verify if a user has the necessary permissions to access a specified\n        domain.\n      parameters:\n        - $ref: '#/components/parameters/originalURLParam'\n        - $ref: '#/components/parameters/forwardedMethodParam'\n        - $ref: '#/components/parameters/authParam'\n      responses:\n        \"200\":\n          description: Successful Operation\n          headers:\n            remote-user:\n              description: Username\n              schema:\n                type: string\n                example: john\n            remote-name:\n              description: Name\n              schema:\n                type: string\n                example: John Doe\n            remote-email:\n              description: Email\n              schema:\n                type: string\n                example: john.doe@authelia.com\n            remote-groups:\n              description: Comma separated list of Groups\n              schema:\n                type: string\n                example: admin,devs\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n    delete:\n      tags:\n        - Authentication\n      summary: Verification\n      description: \u003e\n        The verify endpoint provides the ability to verify if a user has the necessary permissions to access a specified\n        domain.\n      parameters:\n        - $ref: '#/components/parameters/originalURLParam'\n        - $ref: '#/components/parameters/forwardedMethodParam'\n        - $ref: '#/components/parameters/authParam'\n      responses:\n        \"200\":\n          description: Successful Operation\n          headers:\n            remote-user:\n              description: Username\n              schema:\n                type: string\n                example: john\n            remote-name:\n              description: Name\n              schema:\n                type: string\n                example: John Doe\n            remote-email:\n              description: Email\n              schema:\n                type: string\n                example: john.doe@authelia.com\n            remote-groups:\n              description: Comma separated list of Groups\n              schema:\n                type: string\n                example: admin,devs\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n    trace:\n      tags:\n        - Authentication\n      summary: Verification\n      description: \u003e\n        The verify endpoint provides the ability to verify if a user has the necessary permissions to access a specified\n        domain.\n      parameters:\n        - $ref: '#/components/parameters/originalURLParam'\n        - $ref: '#/components/parameters/forwardedMethodParam'\n        - $ref: '#/components/parameters/authParam'\n      responses:\n        \"200\":\n          description: Successful Operation\n          headers:\n            remote-user:\n              description: Username\n              schema:\n                type: string\n                example: john\n            remote-name:\n              description: Name\n              schema:\n                type: string\n                example: John Doe\n            remote-email:\n              description: Email\n              schema:\n                type: string\n                example: john.doe@authelia.com\n            remote-groups:\n              description: Comma separated list of Groups\n              schema:\n                type: string\n                example: admin,devs\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n  /api/firstfactor:\n    post:\n      tags:\n        - Authentication\n      summary: Login\n      description: \u003e\n        The firstfactor endpoint allows a user to login and generates an authentication cookie for authorization.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/handlers.bodyFirstFactorRequest'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.redirectResponse'\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n  /api/checks/safe-redirection:\n    post:\n      tags:\n        - Authentication\n      summary: Check whether URI is safe to redirect to.\n      description: \u003e\n        End users usually needs to be redirected to a target website after authentication. This endpoint aims to check\n        if target URL is safe to redirect to. This prevents open redirect attacks.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/handlers.checkURIWithinDomainRequestBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.checkURIWithinDomainResponseBody'\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n  /api/logout:\n    post:\n      tags:\n        - Authentication\n      summary: Logout\n      description: The logout endpoint allows a user to logout and destroy a sesssion.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/handlers.logoutRequestBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.logoutResponseBody'\n      security:\n        - authelia_auth: []\n  /api/reset-password/identity/start:\n    post:\n      tags:\n        - Password Reset\n      summary: Identity Verification Token Creation\n      description: \u003e\n        This endpoint is step 1 of 3 in the password reset process.\n\n        It validates the user session and sends the user an email with a token and a link to reset their password. This\n        step also generates a session cookie for the rest of the process.\n\n        The same session cookie must be used for all steps in this process.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/handlers.resetPasswordStep1RequestBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/middlewares.OkResponse'\n      security:\n        - authelia_auth: []\n  /api/reset-password/identity/finish:\n    post:\n      tags:\n        - Password Reset\n      summary: Identity Verification Token Validation\n      description: \u003e\n        This endpoint is step 2 of 3 in the password reset process.\n\n        It validates the user session and reset token.\n\n        The same session cookie must be used for all steps in this process.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/middlewares.IdentityVerificationFinishBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/middlewares.OkResponse'\n      security:\n        - authelia_auth: []\n  /api/reset-password:\n    post:\n      tags:\n        - Password Reset\n      summary: Password Reset\n      description: \u003e\n        This endpoint is step 3 of 3 in the password reset process.\n\n        It validates the user session and changes the password.\n\n        The same session cookie must be used for all steps in this process.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/handlers.resetPasswordStep2RequestBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/middlewares.OkResponse'\n      security:\n        - authelia_auth: []\n  /api/user/info:\n    get:\n      tags:\n        - User Information\n      summary: User Configuration\n      description: \u003e\n        The user info endpoint provides detailed information including a users display name, preferred and registered\n        second factor method(s).\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.UserInfo'\n        \"403\":\n          description: Forbidden\n      security:\n        - authelia_auth: []\n    post:\n      tags:\n        - User Information\n      summary: User Configuration\n      description: \u003e\n        The user info endpoint provides detailed information including a users display name, preferred and registered\n        second factor method(s). The POST method also ensures the preferred method is configured correctly.\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.UserInfo'\n        \"403\":\n          description: Forbidden\n      security:\n        - authelia_auth: []\n  /api/user/info/totp:\n    get:\n      tags:\n        - User Information\n      summary: User TOTP Configuration\n      description: \u003e\n        The user TOTP info endpoint provides information necessary to display the TOTP component to validate their\n        TOTP input such as the period/frequency and number of digits.\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.UserInfoTOTP'\n        \"403\":\n          description: Forbidden\n      security:\n        - authelia_auth: []\n  /api/user/info/2fa_method:\n    post:\n      tags:\n        - User Information\n      summary: User Configuration\n      description: The user info 2fa_method endpoint sets the users preferred second factor method.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/handlers.UserInfo.MethodBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/middlewares.OkResponse'\n        \"403\":\n          description: Forbidden\n      security:\n        - authelia_auth: []\n  /api/secondfactor/totp/identity/start:\n    post:\n      tags:\n        - Second Factor\n      summary: Identity Verification TOTP Token Creation\n      description: \u003e\n        This endpoint performs identity verification to begin the TOTP device registration process.\n\n        The session generated from this endpoint must be utilised for the subsequent step in the\n        `/api/secondfactor/totp/identity/finish` endpoint.\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/middlewares.OkResponse'\n      security:\n        - authelia_auth: []\n  /api/secondfactor/totp/identity/finish:\n    post:\n      tags:\n        - Second Factor\n      summary: Identity Verification TOTP Token Validation and Device Creation\n      description: \u003e\n        This endpoint performs identity and token verification, upon success also generates TOTP device secret and\n        registers said device.\n\n        The session cookie generated from the `/api/secondfactor/totp/identity/start` endpoint must be utilised for the\n        step here.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/middlewares.IdentityVerificationFinishBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.TOTPKeyResponse'\n      security:\n        - authelia_auth: []\n  /api/secondfactor/totp:\n    post:\n      tags:\n        - Second Factor\n      summary: Second Factor Authentication - TOTP\n      description: This endpoint performs second factor authentication with a TOTP key.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/handlers.bodySignTOTPRequest'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.redirectResponse'\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/middlewares.ErrorResponse'\n      security:\n        - authelia_auth: []\n  /api/secondfactor/webauthn/assertion:\n    get:\n      tags:\n        - Second Factor\n      summary: Second Factor Authentication - Webauthn (Request)\n      description: This endpoint starts the second factor authentication process with the FIDO2 Webauthn credential.\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/webauthn.PublicKeyCredentialRequestOptions'\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n    post:\n      tags:\n        - Second Factor\n      summary: Second Factor Authentication - Webauthn\n      description: This endpoint completes the second factor authentication process with the FIDO2 Webauthn credential.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/webauthn.CredentialAssertionResponse\"\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.redirectResponse'\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n  /api/secondfactor/webauthn/identity/start:\n    post:\n      tags:\n        - Second Factor\n      summary: Identity Verification Webauthn Credential Creation\n      description: \u003e\n        This endpoint performs identity verification to begin the FIDO2 Webauthn credential attestation process\n        (registration).\n\n        The session generated from this endpoint must be utilised for the subsequent steps in the\n        `/api/secondfactor/webauthn/identity/finish` and `/api/secondfactor/webauthn/attestation` endpoints.\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/middlewares.OkResponse'\n      security:\n        - authelia_auth: []\n  /api/secondfactor/webauthn/identity/finish:\n    post:\n      tags:\n        - Second Factor\n      summary: Identity Verification FIDO2 Webauthn Credential Validation\n      description: \u003e\n        This endpoint performs identity and token verification, upon success generates a FIDO2 Webauthn device\n        attestation challenge (registration).\n\n        The session cookie generated from the `/api/secondfactor/webauthn/identity/start` endpoint must be utilised\n        for the subsequent steps here and in the `/api/secondfactor/webauthn/attestation` endpoint.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/middlewares.IdentityVerificationFinishBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/webauthn.PublicKeyCredentialCreationOptions'\n      security:\n        - authelia_auth: []\n  /api/secondfactor/webauthn/attestation:\n    post:\n      tags:\n        - Second Factor\n      summary: Webauthn Credential Attestation\n      description: This endpoint performs Webauthn credential attestation (registration).\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/webauthn.CredentialAttestationResponse'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/middlewares.OkResponse'\n      security:\n        - authelia_auth: []\n  /api/secondfactor/duo:\n    post:\n      tags:\n        - Second Factor\n      summary: Second Factor Authentication - Duo Mobile Push\n      description: This endpoint performs second factor authentication with a Duo Mobile Push.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/handlers.bodySignDuoRequest'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.redirectResponse'\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n  /api/secondfactor/duo_devices:\n    get:\n      tags:\n        - Second Factor\n      summary: Second Factor Authentication - Duo Mobile Push\n      description: This endpoint retrieves a users available devices and capabilities from Duo.\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.DuoDevicesResponse'\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n  /api/secondfactor/duo_device:\n    post:\n      tags:\n        - Second Factor\n      summary: Second Factor Authentication - Duo Mobile Push\n      description: This endpoint updates the users preferred Duo device and method.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/handlers.DuoDeviceBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/middlewares.OkResponse'\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n  /.well-known/openid-configuration:\n    get:\n      tags:\n        - OpenID Connect 1.0\n      summary: OpenID Connect Discovery 1.0 Document\n      description: \u003e\n        This endpoint retrieves the OpenID Connect Discovery 1.0 document used by clients to perform discovery for\n        an OpenID Connect 1.0 Provider. See https://openid.net/specs/openid-connect-discovery-1_0.html.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/openid.spec.Metadata.OpenIDConfiguration'\n        \"400\":\n          description: Bad Request\n        \"500\":\n          description: Internal Server Error\n  /.well-known/oauth-authorization-server:\n    get:\n      tags:\n        - OpenID Connect 1.0\n      summary: OAuth 2.0 Authorization Server Metadata\n      description: \u003e\n        This endpoint retrieves the OAuth 2.0 Authorization Server Metadata document (RFC8414) used by clients to\n        perform discovery for an OAuth 2.0 Authorization Server. See https://www.rfc-editor.org/rfc/rfc8414.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/openid.spec.Metadata.OAuth2AuthorizationServer'\n        \"400\":\n          description: Bad Request\n        \"500\":\n          description: Internal Server Error\n  /jwks.json:\n    get:\n      tags:\n        - OpenID Connect 1.0\n      summary: OpenID Connect 1.0 JSON Web Key Set Document\n      description: \u003e\n        This endpoint retrieves the OpenID Connect 1.0 JSON Web Key Set Document (JWKS) used by clients to validate\n        information from this OpenID Connect 1.0 Provider.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jose.spec.JWKs'\n  /api/oidc/authorization:\n    get:\n      tags:\n        - OpenID Connect 1.0\n      summary: OpenID Connect 1.0 Authorization Endpoint\n      description: \u003e\n        This endpoint performs OpenID Connect 1.0 Authorization.\n      parameters:\n        - in: query\n          name: id\n          required: false\n          description: The OpenID Connect 1.0 consent workflow ID.\n          schema:\n            type: string\n            format: uuid\n            pattern: '^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$'\n            example: \"713ef767-81bc-4a27-9b83-5fe2e101b2b4\"\n        - in: query\n          name: scope\n          description: The requested scope.\n          required: true\n          schema:\n            type: string\n            example: \"openid profile groups\"\n        - in: query\n          name: response_type\n          description: The OAuth 2.0 response type.\n          required: true\n          schema:\n            $ref: '#/components/schemas/openid.spec.ResponseType'\n        - in: query\n          name: client_id\n          description: The OAuth 2.0 client identifier.\n          required: true\n          schema:\n            type: string\n            example: \"app\"\n        - in: query\n          name: redirect_uri\n          description: \u003e\n            Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI\n            values for the Client pre-registered at the OpenID Provider, with the matching performed as described in\n            Section 6.2.1 of [RFC3986] (Simple String Comparison). When using this flow, the Redirection URI SHOULD use\n            the https scheme; however, it MAY use the http scheme, provided that the Client Type is confidential, as\n            defined in Section 2.1 of OAuth 2.0, and provided the OP allows the use of http Redirection URIs in this\n            case. The Redirection URI MAY use an alternate scheme, such as one that is intended to identify a callback\n            into a native application.\n          required: true\n          schema:\n            type: string\n            example: \"https://app.example.com\"\n        - in: query\n          name: state\n          description: \u003e\n            Opaque value used to maintain state between the request and the callback. Typically, Cross-Site Request\n            Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a\n            browser cookie.\n          required: false\n          schema:\n            type: string\n            example: \"oV84Vsy7wyCgRk2h4aZBmXZq4q3g2f\"\n        - in: query\n          name: response_mode\n          description: \u003e\n            Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization\n            Endpoint. This use of this parameter is NOT RECOMMENDED when the Response Mode that would be requested is\n            the default mode specified for the Response Type.\n          required: false\n          schema:\n            $ref: '#/components/schemas/openid.spec.ResponseMode'\n        - in: query\n          name: nonce\n          description: \u003e\n            String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value\n            is passed through unmodified from the Authentication Request to the ID Token. Sufficient entropy MUST be\n            present in the nonce values used to prevent attackers from guessing values. For implementation notes, see\n            Section 15.5.2.\n          required: false\n          schema:\n            type: string\n            example: \"TRMLqchoKGQNcooXvBvUy9PtmLdJGf\"\n        - in: query\n          name: display\n          description: \u003e\n            Not Supported: ASCII string value that specifies how the Authorization Server displays the authentication\n            and consent user interface pages to the End-User.\n          required: false\n          schema:\n            $ref: '#/components/schemas/openid.spec.DisplayType'\n        - in: query\n          name: prompt\n          description: \u003e\n            Not Supported: Space delimited, case sensitive list of ASCII string values that specifies whether the\n            Authorization Server prompts the End-User for reauthentication and consent.\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: max_age\n          description: \u003e\n            Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User\n            was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to\n            actively re-authenticate the End-User. (The max_age request parameter corresponds to the OpenID 2.0 PAPE\n            [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an\n            auth_time Claim Value.\n          required: false\n          schema:\n            type: integer\n            example: 3600\n        - in: query\n          name: ui_locales\n          description: \u003e\n            Not Supported: End-User's preferred languages and scripts for the user interface, represented as a\n            space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value\n            \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region\n            designation), followed by English (without a region designation). An error SHOULD NOT result if some or all\n            of the requested locales are not supported by the OpenID Provider.\n          required: false\n          schema:\n            type: string\n            example: \"en-US\"\n        - in: query\n          name: claims_locales\n          description: \u003e\n            Not Supported: End-User's preferred languages and scripts for Claims being returned, represented as a\n            space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. An error SHOULD NOT\n            result if some or all of the requested locales are not supported by the OpenID Provider.\n          required: false\n          schema:\n            type: string\n            example: \"en-US\"\n        - in: query\n          name: id_token_hint\n          required: false\n          description: \u003e\n            Not Supported: ID Token previously issued by the Authorization Server being passed as a hint about the\n            End-User's current or past authenticated session with the Client. If the End-User identified by the ID Token\n            is logged in or is logged in by the request, then the Authorization Server returns a positive response;\n            otherwise, it SHOULD return an error, such as login_required. When possible, an id_token_hint SHOULD be\n            present when prompt=none is used and an invalid_request error MAY be returned if it is not; however, the\n            server SHOULD respond successfully when possible, even if it is not present. The Authorization Server need\n            not be listed as an audience of the ID Token when it is used as an id_token_hint value. If the ID Token\n            received by the RP from the OP is encrypted, to use it as an id_token_hint, the Client MUST decrypt the\n            signed ID Token contained within the encrypted ID Token. The Client MAY re-encrypt the signed ID token to\n            the Authentication Server using a key that enables the server to decrypt the ID Token, and use the\n            re-encrypted ID token as the id_token_hint value.\n          schema:\n            type: string\n        - in: query\n          name: login_hint\n          description: \u003e\n            Not Supported: Hint to the Authorization Server about the login identifier the End-User might use to log in\n            (if necessary). This hint can be used by an RP if it first asks the End-User for their e-mail address\n            (or other identifier) and then wants to pass that value as a hint to the discovered authorization service.\n            It is RECOMMENDED that the hint value match the value used for discovery. This value MAY also be a phone\n            number in the format specified for the phone_number Claim. The use of this parameter is left to the OP's\n            discretion.\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: acr_values\n          description: \u003e\n            Not Supported: Requested Authentication Context Class Reference values. Space-separated string that\n            specifies the acr values that the Authorization Server is being requested to use for processing this\n            Authentication Request, with the values appearing in order of preference. The Authentication Context Class\n            satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2.\n            The acr Claim is requested as a Voluntary Claim by this parameter.\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: claims\n          description: \u003e\n            Not Supported: The claims parameter value, as specified in Section 5.5.\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: registration\n          description: \u003e\n            Not Supported: This parameter is used by the Client to provide information about itself to a Self-Issued OP\n            that would normally be provided to an OP during Dynamic Client Registration, as specified in Section 7.2.1.\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: request\n          description: \u003e\n            Not Supported: Request Object value, as specified in Section 6.1. The Request Object MAY be encrypted to\n            the Self-Issued OP by the Client. In this case, the sub (subject) of a previously issued ID Token for this\n            Client MUST be sent as the kid (Key ID) of the JWE. Encrypting content to Self-Issued OPs is currently only\n            supported when the OP's JWK key type is RSA and the encryption algorithm used is RSA1_5.\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: code_challenge\n          description: \u003e\n            RFC7636 Code Challenge.\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: code_challenge_method\n          required: false\n          description: \u003e\n            RFC7636 Code Challenge Method. defaults to \"plain\" if not present in the request.\n            Code verifier transformation method is \"S256\" or \"plain\".\n          schema:\n            $ref: '#/components/schemas/openid.spec.CodeChallengeMethod'\n      responses:\n        \"200\":\n          description: OK\n          content:\n            text/html:\n              schema:\n                type: string\n                description: The Form Post Response Mode content.\n        \"303\":\n          description: See Other\n          headers:\n            Location:\n              schema:\n                type: string\n              description: \u003e\n                Redirection location for the consent flow, or the authorization response callback location when using\n                the Query or Fragment Response Modes.\n        \"400\":\n          description: Bad Request\n        \"500\":\n          description: Internal Server Error\n    post:\n      tags:\n        - OpenID Connect 1.0\n      summary: OpenID Connect 1.0 Authorization Endpoint\n      description: \u003e\n        This endpoint performs OpenID Connect 1.0 Authorization.\n      requestBody:\n        description: Authorize Request Parameters.\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/openid.spec.AuthorizeRequest'\n      responses:\n        \"200\":\n          description: OK\n          content:\n            text/html:\n              schema:\n                type: string\n                description: The Form Post Response Mode content.\n        \"303\":\n          description: See Other\n          headers:\n            Location:\n              schema:\n                type: string\n              description: \u003e\n                Redirection location for the consent flow, or the authorization response callback location when using\n                the Query or Fragment Response Modes.\n        \"400\":\n          description: Bad Request\n        \"500\":\n          description: Internal Server Error\n      security:\n        - authelia_auth: []\n  /api/oidc/token:\n    post:\n      tags:\n        - OpenID Connect 1.0\n      summary: OpenID Connect 1.0 Token Endpoint\n      description: \u003e\n        This endpoint performs OpenID Connect 1.0 Token Access Requests.\n      requestBody:\n        description: Access Request Parameters.\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/openid.spec.AccessRequest.AuthorizationCodeFlow'\n                - $ref: '#/components/schemas/openid.spec.AccessRequest.RefreshTokenFlow'\n                - $ref: '#/components/schemas/openid.spec.AccessRequest.DeviceCodeFlow'\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/openid.spec.AccessResponse'\n        \"401\":\n          description: Forbidden\n        \"403\":\n          description: Unauthorized\n        \"500\":\n          description: Internal Server Error\n      security:\n        - openid: []\n  /api/oidc/revocation:\n    post:\n      tags:\n        - OpenID Connect 1.0\n      summary: OAuth 2.0 Token Revocation Endpoint\n      description: \u003e\n        This endpoint performs OAuth 2.0 Token Revocation Requests.\n      requestBody:\n        description: Required OAuth 2.0 revocation parameters.\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/openid.spec.IntrospectionRequest'\n      responses:\n        \"200\":\n          description: OK\n        \"401\":\n          description: Forbidden\n        \"403\":\n          description: Unauthorized\n        \"500\":\n          description: Internal Server Error\n      security:\n        - openid: []\n  /api/oidc/introspection:\n    post:\n      tags:\n        - OpenID Connect 1.0\n      summary: OAuth 2.0 Token Introspection Endpoint\n      description: \u003e\n        This endpoint performs OAuth 2.0 Token Introspection Requests.\n      requestBody:\n        description: Required OAuth 2.0 introspection parameters.\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/openid.spec.IntrospectionRequest'\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/openid.implementation.Claims.Object'\n        \"401\":\n          description: Forbidden\n        \"403\":\n          description: Unauthorized\n        \"500\":\n          description: Internal Server Error\n      security:\n        - openid: []\n  /api/oidc/userinfo:\n    get:\n      tags:\n        - OpenID Connect 1.0\n      summary: OpenID Connect 1.0 UserInfo Endpoint\n      description: \u003e\n        This endpoint performs OpenID Connect 1.0 UserInfo Access Requests.\n      parameters:\n        - in: query\n          name: access_token\n          description: The OAuth 2.0 Access Token issued by this OpenID Connect 1.0 Provider.\n          schema:\n            type: string\n            example: \"authelia_at_cr4i4EtTn2F4k6mX4XzxbsBewkxCGn\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/jwt: {}\n            application/json:\n              schema:\n                $ref: '#/components/schemas/openid.implementation.Claims.Object'\n        \"401\":\n          description: Forbidden\n        \"403\":\n          description: Unauthorized\n        \"500\":\n          description: Internal Server Error\n      security:\n        - openid: []\n    post:\n      tags:\n        - OpenID Connect 1.0\n      summary: OpenID Connect 1.0 UserInfo Endpoint\n      description: \u003e\n        This endpoint performs OpenID Connect 1.0 UserInfo Access Requests.\n      parameters:\n        - in: query\n          name: access_token\n          description: The OAuth 2.0 Access Token issued by this OpenID Connect 1.0 Provider.\n          schema:\n            type: string\n            example: \"authelia_at_cr4i4EtTn2F4k6mX4XzxbsBewkxCGn\"\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                access_token:\n                  description: The OAuth 2.0 Access Token issued by this OpenID Connect 1.0 Provider.\n                  type: string\n                  example: \"authelia_at_cr4i4EtTn2F4k6mX4XzxbsBewkxCGn\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/jwt: {}\n            application/json:\n              schema:\n                $ref: '#/components/schemas/openid.implementation.Claims.Object'\n        \"401\":\n          description: Forbidden\n        \"403\":\n          description: Unauthorized\n        \"500\":\n          description: Internal Server Error\n      security:\n        - openid: []\n  /api/oidc/consent:\n    get:\n      tags:\n        - OpenID Connect 1.0\n      summary: OpenID Connect 1.0 Consent Information\n      description: \u003e\n        This endpoint retrieves the consent information about a specific consent ID during the consent workflow.\n      parameters:\n        - $ref: '#/components/parameters/idRequiredParam'\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/openid.request.consent'\n        \"403\":\n          description: Forbidden\n      security:\n        - authelia_auth: []\n    post:\n      tags:\n        - OpenID Connect 1.0\n      summary: OpenID Connect 1.0 Consent Response\n      description: \u003e\n        This endpoint retrieves the consent response for a specific consent ID during the consent workflow.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/openid.response.consent'\n        \"403\":\n          description: Forbidden\n      security:\n        - authelia_auth: []\ncomponents:\n  parameters:\n    originalURLParam:\n      name: X-Original-URL\n      in: header\n      description: Redirection URL\n      required: true\n      style: simple\n      explode: true\n      schema:\n        type: string\n    forwardedMethodParam:\n      name: X-Forwarded-Method\n      in: header\n      description: Request Method\n      required: false\n      style: simple\n      explode: true\n      schema:\n        type: string\n        enum:\n          - \"GET\"\n          - \"HEAD\"\n          - \"POST\"\n          - \"PUT\"\n          - \"PATCH\"\n          - \"DELETE\"\n          - \"TRACE\"\n          - \"CONNECT\"\n          - \"OPTIONS\"\n          - \"COPY\"\n          - \"LOCK\"\n          - \"MKCOL\"\n          - \"MOVE\"\n          - \"PROPFIND\"\n          - \"PROPPATCH\"\n          - \"UNLOCK\"\n    authParam:\n      name: auth\n      in: query\n      description: Switch authorization header and prompt for basic auth\n      required: false\n      schema:\n        type: string\n        enum: [\"basic\"]\n    idRequiredParam:\n      name: id\n      in: query\n      description: The ID of what is being requested\n      required: true\n      schema:\n        type: string\n  schemas:\n    handlers.checkURIWithinDomainRequestBody:\n      type: object\n      properties:\n        uri:\n          type: string\n          example: https://secure.example.com\n    handlers.checkURIWithinDomainResponseBody:\n      type: object\n      properties:\n        ok:\n          type: boolean\n          example: true\n          description: If redirection URL is safe.\n    handlers.configuration.ConfigurationBody:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            available_methods:\n              type: array\n              description: List of available 2FA methods. If no methods exist 2FA is disabled.\n              items:\n                enum:\n                  - \"totp\"\n                  - \"webauthn\"\n                  - \"mobile_push\"\n              example: [totp, webauthn, mobile_push]\n    handlers.configuration.PasswordPolicyConfigurationBody:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            mode:\n              type: string\n              description: The password policy mode.\n              enum:\n                - \"disabled\"\n                - \"standard\"\n                - \"zxcvbn\"\n            min_length:\n              type: integer\n              description: The minimum password length when using the standard mode.\n            max_length:\n              type: integer\n              description: The maximum password length when using the standard mode.\n            min_score:\n              type: integer\n              description: The minimum password score when using the zxcvbn mode.\n            require_uppercase:\n              type: boolean\n              description: If uppercase characters are required when using the standard mode.\n            require_lowercase:\n              type: boolean\n              description: If uppercase characters are required when using the standard mode.\n            require_number:\n              type: boolean\n              description: If numeric characters are required when using the standard mode.\n            require_special:\n              type: boolean\n              description: If special characters are required when using the standard mode.\n    handlers.DuoDeviceBody:\n      required:\n        - device\n        - method\n      type: object\n      properties:\n        device:\n          type: string\n          example: ABCDE123456789FGHIJK\n        method:\n          type: string\n          example: push\n    handlers.DuoDevicesResponse:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            result:\n              type: string\n              example: auth\n            devices:\n              type: array\n              items:\n                type: object\n                properties:\n                  device:\n                    type: string\n                    example: ABCDE123456789FGHIJK\n                  display_name:\n                    type: string\n                    example: iOS (+XX XXX XXX 123)\n                  capabilities:\n                    type: array\n                    items:\n                      type: string\n                      example: push\n    handlers.bodyFirstFactorRequest:\n      required:\n        - username\n        - password\n      type: object\n      properties:\n        username:\n          type: string\n          example: john\n        password:\n          type: string\n          example: password\n        targetURL:\n          type: string\n          example: https://home.example.com\n        workflow:\n          type: string\n          example: openid_connect\n        workflowID:\n          type: string\n          format: uuid\n          pattern: '^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$'\n          example: \"3ebcfbc5-b0fd-4ee0-9d3c-080ae1e7298c\"\n        requestMethod:\n          type: string\n          example: GET\n        keepMeLoggedIn:\n          type: boolean\n          example: true\n    handlers.logoutRequestBody:\n      type: object\n      properties:\n        targetURL:\n          type: string\n          example: https://redirect.example.com\n    handlers.logoutResponseBody:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            safeTargetURL:\n              type: boolean\n              example: true\n    handlers.redirectResponse:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            redirect:\n              type: string\n              example: https://home.example.com\n    handlers.resetPasswordStep1RequestBody:\n      required:\n        - username\n      type: object\n      properties:\n        username:\n          type: string\n          example: john\n    handlers.resetPasswordStep2RequestBody:\n      required:\n        - password\n      type: object\n      properties:\n        password:\n          type: string\n          example: password\n    handlers.bodySignDuoRequest:\n      type: object\n      properties:\n        targetURL:\n          type: string\n          example: https://secure.example.com\n        passcode:\n          type: string\n        workflow:\n          type: string\n          example: openid_connect\n        workflowID:\n          type: string\n          format: uuid\n          pattern: '^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$'\n          example: \"3ebcfbc5-b0fd-4ee0-9d3c-080ae1e7298c\"\n    handlers.bodySignTOTPRequest:\n      type: object\n      properties:\n        token:\n          type: string\n          example: \"123456\"\n        targetURL:\n          type: string\n          example: https://secure.example.com\n        workflow:\n          type: string\n          example: openid_connect\n        workflowID:\n          type: string\n          format: uuid\n          pattern: '^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$'\n          example: \"3ebcfbc5-b0fd-4ee0-9d3c-080ae1e7298c\"\n    handlers.StateResponse:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            username:\n              type: string\n              example: john\n            authentication_level:\n              type: integer\n              example: 1\n            default_redirection_url:\n              type: string\n              example: https://home.example.com\n    handlers.TOTPKeyResponse:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            base32_secret:\n              type: string\n              example: 5ZH7Y5CTFWOXN7EOLGBMMXADRNQFHVUDZSYKCN5HMFAIRSLAWY3Q\n            otpauth_url:\n              type: string\n              example: otpauth://totp/auth.example.com:john?algorithm=SHA1\u0026digits=6\u0026issuer=auth.example.com\u0026period=30\u0026secret=5ZH7Y5CTFWOXN7EOLGBMMXADRNQFHVUDZSYKCN5HMFAIRSLAWY3Q\n    handlers.UserInfo:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            display_name:\n              type: string\n              example: John Doe\n            method:\n              type: string\n              enum:\n                - \"totp\"\n                - \"webauthn\"\n                - \"mobile_push\"\n              example: totp\n            has_webauthn:\n              type: boolean\n              example: false\n            has_totp:\n              type: boolean\n              example: true\n            has_duo:\n              type: boolean\n              example: true\n    handlers.UserInfoTOTP:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            period:\n              default: 30\n              description: The period defined in the users TOTP configuration\n              type: integer\n              example: 30\n            digits:\n              default: 6\n              description: The number of digits defined in the users TOTP configuration\n              type: integer\n              example: 6\n    handlers.UserInfo.MethodBody:\n      required:\n        - method\n      type: object\n      properties:\n        method:\n          type: string\n          enum:\n            - \"totp\"\n            - \"webauthn\"\n            - \"mobile_push\"\n          example: totp\n    middlewares.ErrorResponse:\n      type: object\n      properties:\n        status:\n          type: string\n          example: KO\n        message:\n          type: string\n          example: Authentication failed, please retry later.\n    middlewares.IdentityVerificationFinishBody:\n      required:\n        - token\n      type: object\n      properties:\n        token:\n          type: string\n          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MDc5MjU1OTYsImlzcyI6IkF1dGhlbGlhIiwiYWN0aW9uIjoiUmVzZXRQYXNzd29yZCIsInVzZXJuYW1lIjoiQW1pciJ9.636yqRrUCGCe4jsMCsonleX5CYWHncYqZum-YYb6VaY\n    middlewares.OkResponse:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n    webauthn.PublicKeyCredential:\n      type: object\n      properties:\n        rawId:\n          type: string\n          format: byte\n        id:\n          type: string\n        type:\n          type: string\n    webauthn.AuthenticatorResponse:\n      type: object\n      properties:\n        clientDataJSON:\n          type: string\n          format: byte\n    webauthn.CredentialAttestationResponse:\n      allOf:\n        - $ref: '#/components/schemas/webauthn.PublicKeyCredential'\n        - type: object\n          properties:\n            clientExtensionResults:\n              type: object\n              properties:\n                appidExclude:\n                  type: boolean\n            response:\n              allOf:\n                - $ref: '#/components/schemas/webauthn.AuthenticatorResponse'\n                - type: object\n                  properties:\n                    attestationObject:\n                      type: string\n                      format: byte\n    webauthn.CredentialAssertionResponse:\n      allOf:\n        - $ref: '#/components/schemas/webauthn.PublicKeyCredential'\n        - type: object\n          properties:\n            response:\n              allOf:\n                - $ref: '#/components/schemas/webauthn.AuthenticatorResponse'\n                - type: object\n                  required: [authenticatorData, clientDataJSON, signature]\n                  properties:\n                    authenticatorData:\n                      type: string\n                      format: byte\n                    clientDataJSON:\n                      type: string\n                      format: byte\n                    clientExtensionResults:\n                      type: object\n                      properties:\n                        appid:\n                          type: boolean\n                          example: false\n                    signature:\n                      type: string\n                      format: byte\n                    userHandle:\n                      type: string\n                      format: byte\n                    workflow:\n                      type: string\n                      example: openid_connect\n                    workflowID:\n                      type: string\n                      format: uuid\n                      pattern: '^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$'\n                      example: \"3ebcfbc5-b0fd-4ee0-9d3c-080ae1e7298c\"\n    webauthn.PublicKeyCredentialCreationOptions:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            publicKey:\n              allOf:\n                - $ref: '#/components/schemas/webauthn.AttestationType'\n                - $ref: '#/components/schemas/webauthn.AuthenticatorSelectionCriteria'\n                - $ref: '#/components/schemas/webauthn.CredentialUserEntity'\n                - $ref: '#/components/schemas/webauthn.CredentialRPEntity'\n                - type: object\n                  required:\n                    - \"challenge\"\n                    - \"pubKeyCredParams\"\n                  properties:\n                    challenge:\n                      type: string\n                      format: byte\n                    pubKeyCredParams:\n                      type: array\n                      items:\n                        type: object\n                        required:\n                          - \"alg\"\n                          - \"type\"\n                        properties:\n                          alg:\n                            type: integer\n                          type:\n                            type: string\n                            example: public-key\n                            enum:\n                              - \"public-key\"\n                    timeout:\n                      type: integer\n                      example: 60000\n                    excludeCredentials:\n                      type: array\n                      items:\n                        allOf:\n                          - $ref: '#/components/schemas/webauthn.CredentialDescriptor'\n                    extensions:\n                      type: object\n                      properties:\n                        appidExclude:\n                          type: string\n                          example: https://auth.example.com\n    webauthn.PublicKeyCredentialRequestOptions:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            publicKey:\n              allOf:\n                - $ref: '#/components/schemas/webauthn.UserVerification'\n                - type: object\n                  required:\n                    - \"challenge\"\n                  properties:\n                    challenge:\n                      type: string\n                    timeout:\n                      type: integer\n                      example: 60000\n                    rpId:\n                      type: string\n                      example: auth.example.com\n                    allowCredentials:\n                      type: array\n                      items:\n                        allOf:\n                          - $ref: '#/components/schemas/webauthn.CredentialDescriptor'\n                    extensions:\n                      type: object\n                      properties:\n                        appid:\n                          type: string\n                          example: https://auth.example.com\n    webauthn.Transports:\n      type: object\n      properties:\n        transports:\n          type: array\n          items:\n            type: string\n            example:\n              - \"usb\"\n              - \"nfc\"\n            enum:\n              - \"usb\"\n              - \"nfc\"\n              - \"ble\"\n              - \"internal\"\n    webauthn.UserVerification:\n      type: object\n      properties:\n        userVerification:\n          type: string\n          example: preferred\n          enum:\n            - \"required\"\n            - \"preferred\"\n            - \"discouraged\"\n    webauthn.AttestationType:\n      type: object\n      properties:\n        attestation:\n          type: string\n          example: direct\n          enum:\n            - \"none\"\n            - \"indirect\"\n            - \"direct\"\n    webauthn.AuthenticatorSelectionCriteria:\n      type: object\n      properties:\n        authenticatorSelection:\n          type: object\n          properties:\n            authenticatorAttachment:\n              type: string\n              example: cross-platform\n              enum:\n                - \"platform\"\n                - \"cross-platform\"\n            residentKey:\n              type: string\n              example: discouraged\n              enum:\n                - \"discouraged\"\n                - \"preferred\"\n                - \"required\"\n            requireResidentKey:\n              type: boolean\n    webauthn.CredentialDescriptor:\n      allOf:\n        - $ref: '#/components/schemas/webauthn.Transports'\n        - type: object\n          required:\n            - \"id\"\n            - \"type\"\n          properties:\n            id:\n              type: string\n              format: byte\n            type:\n              type: string\n              example: public-key\n              enum:\n                - \"public-key\"\n    webauthn.CredentialEntity:\n      type: object\n      required:\n        - \"id\"\n        - \"name\"\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        icon:\n          type: string\n    webauthn.CredentialRPEntity:\n      type: object\n      required:\n        - \"rp\"\n      properties:\n        rp:\n          allOf:\n            - $ref: '#/components/schemas/webauthn.CredentialEntity'\n    webauthn.CredentialUserEntity:\n      type: object\n      required:\n        - \"user\"\n      properties:\n        user:\n          allOf:\n            - $ref: '#/components/schemas/webauthn.CredentialEntity'\n            - type: object\n              required:\n                - \"displayName\"\n              properties:\n                displayName:\n                  type: string\n    webauthn.AuthenticationExtensionsClientOutputs:\n      type: object\n      properties:\n        clientExtensionResults:\n          type: object\n          properties:\n            appid:\n              type: boolean\n              example: true\n            appidExclude:\n              type: boolean\n              example: false\n            uvm:\n              type: array\n              items:\n                type: string\n                format: byte\n            credProps:\n              type: object\n              properties:\n                rk:\n                  type: boolean\n                  example: false\n            largeBlob:\n              type: object\n              properties:\n                supported:\n                  type: boolean\n                  example: false\n                blob:\n                  type: string\n                written:\n                  type: boolean\n                  example: false\n    openid.request.consent:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            client_id:\n              type: string\n              description: The identifier of the client for the user to provide consent for.\n              example: \"app\"\n            client_description:\n              description: The descriptive name of the client for the user to provide consent for.\n              type: string\n              example: \"App Platform\"\n            scopes:\n              description: The list of the requested scopes for the user to provide consent for.\n              type: array\n              items:\n                type: string\n                enum:\n                  - \"openid\"\n                  - \"offline_access\"\n                  - \"groups\"\n                  - \"email\"\n                  - \"profile\"\n            audience:\n              description: The list of the requested audiences for the user to provide consent for.\n              type: array\n              items:\n                type: string\n            pre_configuration:\n              description: Indicates if this client supports pre-configuration.\n              type: boolean\n              example: true\n    openid.response.consent:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            id:\n              description: The identifier of the consent session.\n              type: string\n              format: uuid\n              pattern: '^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$'\n              example: \"713ef767-81bc-4a27-9b83-5fe2e101b2b4\"\n            client_id:\n              description: The identifier of the client for the user to provide consent for.\n              type: string\n              example: \"app\"\n            consent:\n              description: Indicates if the user consented to the consent request.\n              type: boolean\n              example: true\n            pre_configure:\n              description: Indicates if the user consented to pre-configuration.\n              type: boolean\n              example: true\n    openid.spec.Metadata.OAuth2AuthorizationServer:\n      type: object\n      required:\n        - issuer\n        - authorization_endpoint\n        - subject_types_supported\n        - response_types_supported\n        - require_pushed_authorization_requests\n      properties:\n        authorization_endpoint:\n          description: \u003e\n            URL of the OP''s OAuth 2.0 Authorization Endpoint [OpenID.Core].\n            See Also: OpenID.Core: https://openid.net/specs/openid-connect-core-1_0.html\n          type: string\n          example: \"{{ .BaseURL }}api/oidc/authorization\"\n        claims_supported:\n          description: \u003e\n            JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply\n            values for. Note that for privacy or other reasons, this might not be an exhaustive list.\n          type: array\n          example:\n            - \"amr\"\n            - \"aud\"\n            - \"azp\"\n            - \"client_id\"\n            - \"exp\"\n            - \"iat\"\n            - \"iss\"\n            - \"jti\"\n            - \"rat\"\n            - \"sub\"\n            - \"auth_time\"\n            - \"nonce\"\n            - \"email\"\n            - \"email_verified\"\n            - \"alt_emails\"\n            - \"groups\"\n            - \"preferred_username\"\n            - \"name\"\n          items:\n            $ref: '#/components/schemas/openid.implementation.Claims.Array'\n        code_challenge_methods_supported:\n          description: \u003e\n            JSON array containing a list of PKCE [RFC7636] code challenge methods supported by this authorization\n            server. Code challenge method values are used in the \"code_challenge_method\" parameter defined in Section\n            4.3 of [RFC7636]. The valid code challenge method values are those registered in the IANA \"PKCE Code\n            Challenge Methods\" registry [IANA.OAuth.Parameters]. If omitted, the authorization server does not support\n            PKCE. See Also: PKCE: https://datatracker.ietf.org/doc/html/rfc7636 IANA.OAuth.Parameters: https://www.iana.org/assignments/oauth-parameters/oauth-parameters.xhtml\n          type: array\n          example: [\"S256\", \"none\"]\n          items:\n            $ref: '#/components/schemas/openid.spec.CodeChallengeMethod'\n        grant_types_supported:\n          type: array\n          description: \u003e\n            JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports. Dynamic OpenID\n            Providers MUST support the authorization_code and implicit Grant Type values and MAY support other Grant\n            Types. If omitted, the default value is [\"authorization_code\", \"implicit\"].\n          example: [\"authorization_code\", \"implicit\"]\n          items:\n            $ref: '#/components/schemas/openid.spec.GrantType'\n        introspection_endpoint:\n          description: \u003e\n            URL of the authorization server''s OAuth 2.0 introspection endpoint [RFC7662]. See Also: OAuth 2.0 Token\n            Introspection: https://datatracker.ietf.org/doc/html/rfc7662\n          type: string\n          example: \"{{ .BaseURL }}api/oidc/introspection\"\n        introspection_endpoint_auth_methods_supported:\n          description: \u003e\n            JSON array containing a list of client authentication methods supported by this introspection endpoint. The\n            valid client authentication method values are those registered in the IANA \"OAuth Token Endpoint\n            Authentication Methods\" registry [IANA.OAuth.Parameters] or those registered in the IANA \"OAuth Access Token\n            Types\" registry [IANA.OAuth.Parameters]. (These values are and will remain distinct, due to Section 7.2.) If\n            omitted, the set of supported authentication methods MUST be determined by other means. See Also:\n            IANA.OAuth.Parameters: https://www.iana.org/assignments/oauth-parameters/oauth-parameters.xhtml\n            OAuth 2.0 Authorization Server Metadata - Updated Registration Instructions:\n            https://datatracker.ietf.org/doc/html/draft-ietf-oauth-discovery-10#section-7.2\n          type: array\n          example: [\"client_secret_post\"]\n          items:\n            $ref: '#/components/schemas/openid.spec.ClientAuthMethod'\n        introspection_endpoint_auth_signing_alg_values_supported:\n          description: \u003e\n            JSON array containing a list of the JWS signing algorithms (\"alg\" values) supported by the introspection\n            endpoint for the signature on the JWT [JWT] used to authenticate the client at the introspection endpoint\n            for the \"private_key_jwt\" and \"client_secret_jwt\" authentication methods. This metadata entry MUST be\n            present if either of these authentication methods are specified in the\n            \"introspection_endpoint_auth_methods_supported\" entry. No default algorithms are implied if this entry is\n            omitted. The value \"none\" MUST NOT be used. See Also: JWT: https://datatracker.ietf.org/doc/html/rfc7519\n          type: array\n          example: [\"RS256\"]\n          items:\n            $ref: '#/components/schemas/jose.spec.jws'\n        issuer:\n          description:\n            URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier.\n            If Issuer discovery is supported (see Section 2), this value MUST be identical to the issuer value returned\n            by WebFinger. This also MUST be identical to the iss Claim value in ID Tokens issued from this Issuer.\n          type: string\n          example: \"{{ .BaseURL }}\"\n        jwks_uri:\n          description: \u003e\n            URL of the OP's JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate\n            signatures from the OP. The JWK Set MAY also contain the Server's encryption key(s), which are used by RPs\n            to encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use)\n            parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage.\n            Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT\n            RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of\n            keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.\n          type: string\n          example: \"{{ .BaseURL }}jwks.json\"\n        op_policy_uri:\n          description:\n            URL that the OpenID Provider provides to the person registering the Client to read about the OP's\n            requirements on how the Relying Party can use the data provided by the OP. The registration process SHOULD\n            display this URL to the person registering the Client if it is given.\n          type: string\n        op_tos_uri:\n          description: \u003e\n            URL that the OpenID Provider provides to the person registering the Client to read about OpenID Provider's\n            terms of service. The registration process SHOULD display this URL to the person registering the Client if\n            it is given.\n          type: string\n        pushed_authorization_request_endpoint:\n          description: \u003e\n            The URL of the pushed authorization request endpoint at which a client can post an authorization request to\n            exchange for a \"request_uri\" value usable at the authorization server.\n          type: string\n          example: \"{{ .BaseURL }}api/oidc/par\"\n        registration_endpoint:\n          description: \u003e\n            URL of the authorization server''s OAuth 2.0 Dynamic Client Registration endpoint [RFC7591]. See Also:\n            OAuth 2.0 Dynamic Client Registration Protocol: https://datatracker.ietf.org/doc/html/rfc7591\n          type: string\n          example: \"{{ .BaseURL }}api/oidc/registration\"\n        require_pushed_authorization_requests:\n          description: \u003e\n            Boolean parameter indicating whether the authorization server accepts authorization request data only via\n            PAR. If omitted, the default value is \"false\".\n          type: boolean\n          example: false\n        response_modes_supported:\n          description: \u003e\n            JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports, as specified in\n            OAuth 2.0 Multiple Response Type Encoding Practices [OAuth.Responses]. If omitted, the default for Dynamic\n            OpenID Providers is [\"query\", \"fragment\"].\n          type: array\n          example: [\"query\", \"fragment\"]\n          items:\n            $ref: '#/components/schemas/openid.spec.ResponseMode'\n        response_types_supported:\n          description: \u003e\n            JSON array containing a list of the OAuth 2.0 response_type values that this OP supports.\n            Dynamic OpenID Providers MUST support the code, id_token, and the token id_token Response Type values.\n          type: array\n          example: [\"code\", \"id_token\", \"token id_token\"]\n          items:\n            $ref: '#/components/schemas/openid.spec.ResponseType'\n        revocation_endpoint:\n          description: \u003e\n            URL of the authorization server''s OAuth 2.0 revocation endpoint [RFC7009].\n            See Also: OAuth 2.0 Token Revocation: https://datatracker.ietf.org/doc/html/rfc7009\n          type: string\n          example: \"{{ .BaseURL }}api/oidc/revocation\"\n        revocation_endpoint_auth_methods_supported:\n          description: \u003e\n            JSON array containing a list of client authentication methods supported by this revocation endpoint. The\n            valid client authentication method values are those registered in the IANA \"OAuth Token Endpoint\n            Authentication Methods\" registry [IANA.OAuth.Parameters]. If omitted, the default is \"client_secret_basic\"\n            -- the HTTP Basic Authentication Scheme specified in Section 2.3.1 of OAuth 2.0 [RFC6749]. See Also:\n            IANA.OAuth.Parameters: https://www.iana.org/assignments/oauth-parameters/oauth-parameters.xhtml\n            OAuth 2.0 - Client Password: https://datatracker.ietf.org/doc/html/rfc6749#section-2.3.1\n          type: array\n          example: [\"client_secret_post\"]\n          items:\n            $ref: '#/components/schemas/openid.spec.ClientAuthMethod'\n        revocation_endpoint_auth_signing_alg_values_supported:\n          description: \u003e\n            JSON array containing a list of the JWS signing algorithms (\"alg\" values) supported by the revocation\n            endpoint for the signature on the JWT [JWT] used to authenticate the client at the revocation endpoint for\n            the \"private_key_jwt\" and \"client_secret_jwt\" authentication methods. This metadata entry MUST be present if\n            either of these authentication methods are specified in the \"revocation_endpoint_auth_methods_supported\"\n            entry. No default algorithms are implied if this entry is omitted. The value \"none\" MUST NOT be used.\n            See Also: JWT: https://datatracker.ietf.org/doc/html/rfc7519\n          type: array\n          example: [\"RS256\"]\n          items:\n            $ref: '#/components/schemas/jose.spec.jws'\n        scopes_supported:\n          description: \u003e\n            JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports. The server\n            MUST support the openid scope value. Servers MAY choose not to advertise some supported scope values even\n            when this parameter is used, although those defined in [OpenID.Core] SHOULD be listed, if supported.\n            See Also: OAuth 2.0: https://datatracker.ietf.org/doc/html/rfc6749 OpenID.Core: https://openid.net/specs/openid-connect-core-1_0.html\n          type: array\n          example:\n            - \"openid\"\n            - \"offline_access\"\n            - \"profile\"\n            - \"email\"\n            - \"groups\"\n          items:\n            $ref: '#/components/schemas/openid.implementation.Scopes.Object'\n        service_documentation:\n          description: \u003e\n            URL of a page containing human-readable information that developers might want or need to know when using\n            the OpenID Provider. In particular, if the OpenID Provider does not support Dynamic Client Registration,\n            then information on how to register Clients needs to be provided in this documentation.\n          type: string\n          example: \"https://authelia.com\"\n        subject_types_supported:\n          description: \u003e\n            JSON array containing a list of the Subject Identifier types that this OP supports.\n            Valid types include pairwise and public.\n          type: array\n          example: [\"public\", \"pairwise\"]\n          items:\n            $ref: '#/components/schemas/openid.spec.SubjectIdentifier'\n        token_endpoint:\n          description: \u003e\n            URL of the OP''s OAuth 2.0 Token Endpoint [OpenID.Core]. This is REQUIRED unless only the Implicit Flow is\n            used. See Also: OpenID.Core: https://openid.net/specs/openid-connect-core-1_0.html\n          type: string\n          example: \"{{ .BaseURL }}api/oidc/token\"\n        token_endpoint_auth_methods_supported:\n          description: \u003e\n            JSON array containing a list of Client Authentication methods supported by this Token Endpoint. The options\n            are client_secret_post, client_secret_basic, client_secret_jwt, and private_key_jwt, as described in Section\n            9 of OpenID Connect Core 1.0 [OpenID.Core]. Other authentication methods MAY be defined by extensions. If\n            omitted, the default is client_secret_basic -- the HTTP Basic Authentication Scheme specified in Section\n            2.3.1 of OAuth 2.0 [RFC6749]. See Also: OAuth 2.0: https://datatracker.ietf.org/doc/html/rfc6749\n            OpenID.Core Section 9: https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication\n          type: array\n          example: [\"client_secret_post\"]\n          items:\n            $ref: '#/components/schemas/openid.spec.ClientAuthMethod'\n        token_endpoint_auth_signing_alg_values_supported:\n          description: \u003e\n            JSON array containing a list of the JWS signing algorithms (alg values) supported by the Token Endpoint for\n            the signature on the JWT [JWT] used to authenticate the Client at the Token Endpoint for the private_key_jwt\n            and client_secret_jwt authentication methods. Servers SHOULD support RS256. The value none MUST NOT be used.\n            See Also: JWT: https://datatracker.ietf.org/doc/html/rfc7519'\n          type: array\n          example: [\"RS256\"]\n          items:\n            $ref: '#/components/schemas/jose.spec.jws'\n        ui_locales_supported:\n          type: array\n          description: \u003e\n            Languages and scripts supported for the user interface, represented as a JSON array of BCP47 [RFC5646]\n            language tag values. See Also: BCP47: https://datatracker.ietf.org/doc/html/rfc5646\n          example: [\"en-US\"]\n          items:\n            type: string\n    openid.spec.Metadata.OpenIDConfiguration:\n      type: object\n      required:\n        - \"issuer\"\n        - \"authorization_endpoint\"\n        - \"subject_types_supported\"\n        - \"response_types_supported\"\n        - \"require_pushed_authorization_requests\"\n        - \"request_uri_parameter_supported\"\n        - \"require_request_uri_registration\"\n        - \"claims_parameter_supported\"\n        - \"frontchannel_logout_supported\"\n        - \"frontchannel_logout_session_supported\"\n        - \"backchannel_logout_supported\"\n        - \"backchannel_logout_session_supported\"\n      properties:\n        acr_values_supported:\n          description:\n            JSON array containing a list of the Authentication Context Class References that this OP supports.\n          type: array\n          items:\n            type: string\n        authorization_endpoint:\n          description: \u003e\n            URL of the OP''s OAuth 2.0 Authorization Endpoint [OpenID.Core].\n            See Also: OpenID.Core: https://openid.net/specs/openid-connect-core-1_0.html\n          type: string\n          example: \"{{ .BaseURL }}api/oidc/authorization\"\n        backchannel_logout_session_supported:\n          description: \u003e\n            Boolean value specifying whether the OP can pass a sid (session ID) Claim in the Logout Token to identify\n            the RP session with the OP. If supported, the sid Claim is also included in ID Tokens issued by the OP.\n            If omitted, the default value is false.\n          type: boolean\n          example: false\n        backchannel_logout_supported:\n          description: \u003e\n            Boolean value specifying whether the OP supports back-channel logout, with true indicating support. If\n            omitted, the default value is false.\n          type: boolean\n          example: false\n        claim_types_supported:\n          description: \u003e\n            JSON array containing a list of the Claim Types that the OpenID Provider supports. These Claim Types are\n            described in Section 5.6 of OpenID Connect Core 1.0 [OpenID.Core]. Values defined by this specification are\n            normal, aggregated, and distributed. If omitted, the implementation supports only normal Claims. See Also:\n            OpenID.Core Section 5.6: https://openid.net/specs/openid-connect-core-1_0.html#ClaimTypes\n          type: array\n          example: [\"normal\"]\n          items:\n            $ref: '#/components/schemas/openid.spec.ClaimType'\n        claims_locales_supported:\n          description: \u003e\n            Languages and scripts supported for values in Claims being returned, represented as a JSON array of BCP47\n            [RFC5646] language tag values. Not all languages and scripts are necessarily supported for all Claim values.\n            See Also: BCP47: https://datatracker.ietf.org/doc/html/rfc5646\n          type: array\n          example: [\"en-US\"]\n          items:\n            type: string\n        claims_parameter_supported:\n          description: \u003e\n            Boolean value specifying whether the OP supports use of the claims parameter, with true indicating support.\n            If omitted, the default value is false.\n          type: boolean\n          example: false\n        claims_supported:\n          description: \u003e\n            JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply\n            values for. Note that for privacy or other reasons, this might not be an exhaustive list.\n          type: array\n          example:\n            - \"amr\"\n            - \"aud\"\n            - \"azp\"\n            - \"client_id\"\n            - \"exp\"\n            - \"iat\"\n            - \"iss\"\n            - \"jti\"\n            - \"rat\"\n            - \"sub\"\n            - \"auth_time\"\n            - \"nonce\"\n            - \"email\"\n            - \"email_verified\"\n            - \"alt_emails\"\n            - \"groups\"\n            - \"preferred_username\"\n            - \"name\"\n          items:\n            $ref: '#/components/schemas/openid.implementation.Claims.Array'\n        code_challenge_methods_supported:\n          description: \u003e\n            JSON array containing a list of PKCE [RFC7636] code challenge methods supported by this authorization\n            server. Code challenge method values are used in the \"code_challenge_method\" parameter defined in Section\n            4.3 of [RFC7636]. The valid code challenge method values are those registered in the IANA \"PKCE Code\n            Challenge Methods\" registry [IANA.OAuth.Parameters]. If omitted, the authorization server does not support\n            PKCE. See Also: PKCE: https://datatracker.ietf.org/doc/html/rfc7636 IANA.OAuth.Parameters:\n            https://www.iana.org/assignments/oauth-parameters/oauth-parameters.xhtml\n          type: array\n          example: [\"S256\", \"plain\"]\n          items:\n            $ref: '#/components/schemas/openid.spec.CodeChallengeMethod'\n        display_values_supported:\n          description: \u003e\n            JSON array containing a list of the display parameter values that the OpenID Provider supports. These values\n            are described in Section 3.1.2.1 of OpenID Connect Core 1.0 [OpenID.Core]. See Also: OpenID.Core Section\n            3.1.2.1: https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\n          type: array\n          example: [\"page\"]\n          items:\n            $ref: '#/components/schemas/openid.spec.DisplayType'\n        frontchannel_logout_session_supported:\n          description: \u003e\n            Boolean value specifying whether the OP can pass iss (issuer) and sid (session ID) query parameters to\n            identify the RP session with the OP when the frontchannel_logout_uri is used. If supported, the sid Claim is\n            also included in ID Tokens issued by the OP. If omitted, the default value is false.\n          type: boolean\n          example: false\n        frontchannel_logout_supported:\n          description: \u003e\n            Boolean value specifying whether the OP supports HTTP-based logout, with true indicating support. If\n            omitted, the default value is false.\n          type: boolean\n          example: false\n        grant_types_supported:\n          description: \u003e\n            JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports. Dynamic OpenID\n            Providers MUST support the authorization_code and implicit Grant Type values and MAY support other Grant\n            Types. If omitted, the default value is [\"authorization_code\", \"implicit\"].\n          type: array\n          example: [\"authorization_code\", \"implicit\"]\n          items:\n            $ref: '#/components/schemas/openid.spec.GrantType'\n        id_token_encryption_alg_values_supported:\n          description: \u003e\n            JSON array containing a list of the JWE encryption algorithms (alg values) supported by the OP for the ID\n            Token to encode the Claims in a JWT [JWT]. See Also: JWE: https://datatracker.ietf.org/doc/html/rfc7516 JWT:\n            https://datatracker.ietf.org/doc/html/rfc7519\n          type: array\n          example: [\"A256GCMKW\"]\n          items:\n            $ref: '#/components/schemas/jose.spec.JWE.alg'\n        id_token_encryption_enc_values_supported:\n          description: \u003e\n            JSON array containing a list of the JWE encryption algorithms (enc values) supported by the OP for the ID\n            Token to encode the Claims in a JWT [JWT]. See Also: JWE: https://datatracker.ietf.org/doc/html/rfc7516\n            JWT: https://datatracker.ietf.org/doc/html/rfc7519\n          type: array\n          example: [\"A256GCM\"]\n          items:\n            $ref: '#/components/schemas/jose.spec.JWE.enc'\n        id_token_signing_alg_values_supported:\n          description: \u003e\n            JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token\n            to encode the Claims in a JWT [JWT]. The algorithm RS256 MUST be included. The value none MAY be supported,\n            but MUST NOT be used unless the Response Type used returns no ID Token from the Authorization Endpoint\n            (such as when using the Authorization Code Flow).\n            See Also: JWT: https://datatracker.ietf.org/doc/html/rfc7519\n          type: array\n          example: [\"RS256\"]\n          items:\n            $ref: '#/components/schemas/jose.spec.JWS.None'\n        introspection_endpoint:\n          description: \u003e\n            URL of the authorization server''s OAuth 2.0 introspection endpoint [RFC7662]. See Also: OAuth 2.0\n            Token Introspection: https://datatracker.ietf.org/doc/html/rfc7662'\n          type: string\n          example: \"{{ .BaseURL }}api/oidc/introspection\"\n        introspection_endpoint_auth_methods_supported:\n          description: \u003e\n            JSON array containing a list of client authentication methods supported by this introspection endpoint. The\n            valid client authentication method values are those registered in the IANA \"OAuth Token Endpoint\n            Authentication Methods\" registry [IANA.OAuth.Parameters] or those registered in the IANA \"OAuth Access\n            Token Types\" registry [IANA.OAuth.Parameters]. (These values are and will remain distinct, due to Section\n            7.2.) If omitted, the set of supported authentication methods MUST be determined by other means. See Also:\n            IANA.OAuth.Parameters: https://www.iana.org/assignments/oauth-parameters/oauth-parameters.xhtml\n            OAuth 2.0 Authorization Server Metadata - Updated Registration Instructions:\n            https://datatracker.ietf.org/doc/html/draft-ietf-oauth-discovery-10#section-7.2\n          type: array\n          example: [\"client_secret_post\"]\n          items:\n            $ref: '#/components/schemas/openid.spec.ClientAuthMethod'\n        introspection_endpoint_auth_signing_alg_values_supported:\n          description: \u003e\n            JSON array containing a list of the JWS signing algorithms (\"alg\" values) supported by the introspection\n            endpoint for the signature on the JWT [JWT] used to authenticate the client at the introspection endpoint\n            for the \"private_key_jwt\" and \"client_secret_jwt\" authentication methods. This metadata entry MUST be\n            present if either of these authentication methods are specified in the\n            \"introspection_endpoint_auth_methods_supported\" entry. No default algorithms are implied if this entry is\n            omitted. The value \"none\" MUST NOT be used. See Also: JWT: https://datatracker.ietf.org/doc/html/rfc7519\n          type: array\n          example: [\"RS256\"]\n          items:\n            $ref: '#/components/schemas/jose.spec.jws'\n        issuer:\n          description: \u003e\n            URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier.\n            If Issuer discovery is supported (see Section 2), this value MUST be identical to the issuer value returned\n            by WebFinger. This also MUST be identical to the iss Claim value in ID Tokens issued from this Issuer.\n          type: string\n          example: \"{{ .BaseURL }}\"\n        jwks_uri:\n          description: \u003e\n            URL of the OP's JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate\n            signatures from the OP. The JWK Set MAY also contain the Server's encryption key(s), which are used by RPs\n            to encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use)\n            parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage.\n            Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT\n            RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of\n            keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.\n          type: string\n          example: \"{{ .BaseURL }}jwks.json\"\n        op_policy_uri:\n          description: \u003e\n            URL that the OpenID Provider provides to the person registering the Client to read about the OP's\n            requirements on how the Relying Party can use the data provided by the OP. The registration process SHOULD\n            display this URL to the person registering the Client if it is given.\n          type: string\n        op_tos_uri:\n          description: \u003e\n            URL that the OpenID Provider provides to the person registering the Client to read about OpenID Provider's\n            terms of service. The registration process SHOULD display this URL to the person registering the Client\n            if it is given.\n          type: string\n        pushed_authorization_request_endpoint:\n          description: \u003e\n            The URL of the pushed authorization request endpoint at which a client can post an authorization request to\n            exchange for a \"request_uri\" value usable at the authorization server.\n          type: string\n          example: \"{{ .BaseURL }}api/oidc/par\"\n        registration_endpoint:\n          description: \u003e\n            URL of the authorization server''s OAuth 2.0 Dynamic Client Registration endpoint [RFC7591]. See Also:\n            OAuth 2.0 Dynamic Client Registration Protocol: https://datatracker.ietf.org/doc/html/rfc7591\n          type: string\n          example: \"{{ .BaseURL }}api/oidc/registration\"\n        request_object_encryption_alg_values_supported:\n          description: \u003e\n            JSON array containing a list of the JWE encryption algorithms (alg values) supported by the OP for Request\n            Objects. These algorithms are used both when the Request Object is passed by value and when it is passed by\n            reference. See Also: JWE: https://datatracker.ietf.org/doc/html/rfc7516\n          type: array\n          example: [\"A256GCMKW\"]\n          items:\n            $ref: '#/components/schemas/jose.spec.JWE.alg'\n        request_object_encryption_enc_values_supported:\n          description: \u003e\n            JSON array containing a list of the JWE encryption algorithms (enc values) supported by the OP for Request\n            Objects. These algorithms are used both when the Request Object is passed by value and when it is passed by\n            reference. See Also: JWE: https://datatracker.ietf.org/doc/html/rfc7516\n            JWT: https://datatracker.ietf.org/doc/html/rfc7519\n          type: array\n          example: [\"A256GCM\"]\n          items:\n            $ref: '#/components/schemas/jose.spec.JWE.enc'\n        request_object_signing_alg_values_supported:\n          description: \u003e\n            JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for Request\n            Objects, which are described in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core]. These algorithms are\n            used both when the Request Object is passed by value (using the request parameter) and when it is passed by\n            reference (using the request_uri parameter). Servers SHOULD support none and RS256.\n          type: array\n          example: [\"RS256\"]\n          items:\n            $ref: '#/components/schemas/jose.spec.JWS.None'\n        request_uri_parameter_supported:\n          description: \u003e\n            Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating\n            support. If omitted, the default value is true.\n          type: boolean\n          example: true\n        require_pushed_authorization_requests:\n          description: \u003e\n            Boolean parameter indicating whether the authorization server accepts authorization request data only via\n            PAR. If omitted, the default value is \"false\".\n          type: boolean\n          example: false\n        require_request_uri_registration:\n          description: \u003e\n            Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the\n            request_uris registration parameter. Pre-registration is REQUIRED when the value is true. If omitted, the\n            default value is false.\n          type: boolean\n          example: false\n        response_modes_supported:\n          description: \u003e\n            JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports, as specified in\n            OAuth 2.0 Multiple Response Type Encoding Practices [OAuth.Responses]. If omitted, the default for Dynamic\n            OpenID Providers is [\"query\", \"fragment\"].\n          type: array\n          example: [\"query\", \"fragment\"]\n          items:\n            $ref: '#/components/schemas/openid.spec.ResponseMode'\n        response_types_supported:\n          description: \u003e\n            JSON array containing a list of the OAuth 2.0 response_type values that this OP supports. Dynamic OpenID\n            Providers MUST support the code, id_token, and the token id_token Response Type values.\n          type: array\n          example: [\"code\", \"id_token\", \"token id_token\"]\n          items:\n            $ref: '#/components/schemas/openid.spec.ResponseType'\n        revocation_endpoint:\n          description: \u003e\n            URL of the authorization server''s OAuth 2.0 revocation endpoint [RFC7009]. See Also:\n            OAuth 2.0 Token Revocation: https://datatracker.ietf.org/doc/html/rfc7009\n          type: string\n          example: \"{{ .BaseURL }}api/oidc/revocation\"\n        revocation_endpoint_auth_methods_supported:\n          description: \u003e\n            JSON array containing a list of client authentication methods supported by this revocation endpoint. The\n            valid client authentication method values are those registered in the IANA \"OAuth Token Endpoint\n            Authentication Methods\" registry [IANA.OAuth.Parameters]. If omitted, the default is \"client_secret_basic\"\n            -- the HTTP Basic Authentication Scheme specified in Section 2.3.1 of OAuth 2.0 [RFC6749].\n            See Also: IANA.OAuth.Parameters: https://www.iana.org/assignments/oauth-parameters/oauth-parameters.xhtml\n            OAuth 2.0 - Client Password: https://datatracker.ietf.org/doc/html/rfc6749#section-2.3.1\n          type: array\n          example: [\"client_secret_basic\"]\n          items:\n            $ref: '#/components/schemas/openid.spec.ClientAuthMethod'\n        revocation_endpoint_auth_signing_alg_values_supported:\n          description: \u003e\n            JSON array containing a list of the JWS signing algorithms (\"alg\" values) supported by the revocation\n            endpoint for the signature on the JWT [JWT] used to authenticate the client at the revocation endpoint for\n            the \"private_key_jwt\" and \"client_secret_jwt\" authentication methods. This metadata entry MUST be present if\n            either of these authentication methods are specified in the \"revocation_endpoint_auth_methods_supported\"\n            entry. No default algorithms are implied if this entry is omitted. The value \"none\" MUST NOT be used.\n            See Also: JWT: https://datatracker.ietf.org/doc/html/rfc7519\n          type: array\n          example: [\"RS256\"]\n          items:\n            $ref: '#/components/schemas/jose.spec.jws'\n        scopes_supported:\n          description: \u003e\n            JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports.\n            The server MUST support the openid scope value. Servers MAY choose not to advertise some supported scope\n            values even when this parameter is used, although those defined in [OpenID.Core] SHOULD be listed, if\n            supported. See Also: OAuth 2.0: https://datatracker.ietf.org/doc/html/rfc6749 OpenID.Core:\n            https://openid.net/specs/openid-connect-core-1_0.html\n          type: array\n          example:\n            - \"openid\"\n            - \"offline_access\"\n            - \"profile\"\n            - \"email\"\n            - \"groups\"\n          items:\n            $ref: '#/components/schemas/openid.implementation.Scopes.Object'\n        service_documentation:\n          description: \u003e\n            URL of a page containing human-readable information that developers might want or need to know when using\n            the OpenID Provider. In particular, if the OpenID Provider does not support Dynamic Client Registration,\n            then information on how to register Clients needs to be provided in this documentation.\n          type: string\n          example: \"https://www.authelia.com\"\n        subject_types_supported:\n          description: \u003e\n            JSON array containing a list of the Subject Identifier types that this OP supports. Valid types include\n            pairwise and public.\n          type: array\n          example: [\"public\", \"pairwise\"]\n          items:\n            $ref: '#/components/schemas/openid.spec.SubjectIdentifier'\n        token_endpoint:\n          description: \u003e\n            URL of the OP''s OAuth 2.0 Token Endpoint [OpenID.Core]. This is REQUIRED unless only the Implicit Flow is\n            used. See Also: OpenID.Core: https://openid.net/specs/openid-connect-core-1_0.html\n          type: string\n          example: \"{{ .BaseURL }}api/oidc/token\"\n        token_endpoint_auth_methods_supported:\n          description: \u003e\n            JSON array containing a list of Client Authentication methods supported by this Token Endpoint. The options\n            are client_secret_post, client_secret_basic, client_secret_jwt, and private_key_jwt, as described in Section\n            9 of OpenID Connect Core 1.0 [OpenID.Core]. Other authentication methods MAY be defined by extensions. If\n            omitted, the default is client_secret_basic -- the HTTP Basic Authentication Scheme specified in Section\n            2.3.1 of OAuth 2.0 [RFC6749]. See Also: OAuth 2.0: https://datatracker.ietf.org/doc/html/rfc6749\n            OpenID.Core Section 9: https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication\n          type: array\n          example: [\"client_secret_post\"]\n          items:\n            $ref: '#/components/schemas/openid.spec.ClientAuthMethod'\n        token_endpoint_auth_signing_alg_values_supported:\n          description: \u003e\n            JSON array containing a list of the JWS signing algorithms (alg values) supported by the Token Endpoint\n            for the signature on the JWT [JWT] used to authenticate the Client at the Token Endpoint for the\n            private_key_jwt and client_secret_jwt authentication methods. Servers SHOULD support RS256.\n            The value none MUST NOT be used. See Also: JWT: https://datatracker.ietf.org/doc/html/rfc7519\n          type: array\n          example: [\"RS256\"]\n          items:\n            $ref: '#/components/schemas/jose.spec.jws'\n        ui_locales_supported:\n          description: \u003e\n            Languages and scripts supported for the user interface, represented as a JSON array of BCP47\n            [RFC5646] language tag values. See Also: BCP47: https://datatracker.ietf.org/doc/html/rfc5646\n          type: array\n          example: [\"en-US\"]\n          items:\n            type: string\n        userinfo_encryption_alg_values_supported:\n          description: \u003e\n            JSON array containing a list of the JWE [JWE] encryption algorithms (alg values) [JWA] supported by the\n            UserInfo Endpoint to encode the Claims in a JWT [JWT]. See Also: JWE:\n            https://datatracker.ietf.org/doc/html/rfc7516 JWA: https://datatracker.ietf.org/doc/html/rfc7518\n            JWT: https://datatracker.ietf.org/doc/html/rfc7519\n          type: array\n          example: [\"A256GCMKW\"]\n          items:\n            $ref: '#/components/schemas/jose.spec.JWE.alg'\n        userinfo_encryption_enc_values_supported:\n          description: \u003e\n            JSON array containing a list of the JWE encryption algorithms (enc values) [JWA] supported by the UserInfo\n            Endpoint to encode the Claims in a JWT [JWT]. See Also: JWE: https://datatracker.ietf.org/doc/html/rfc7516\n            JWA: https://datatracker.ietf.org/doc/html/rfc7518 JWT: https://datatracker.ietf.org/doc/html/rfc7519\n          type: array\n          example: [\"A256GCM\"]\n          items:\n            $ref: '#/components/schemas/jose.spec.JWE.enc'\n        userinfo_endpoint:\n          description: \u003e\n            URL of the OP''s UserInfo Endpoint [OpenID.Core]. This URL MUST use the https scheme and MAY contain port,\n            path, and query parameter components.\n            See Also: OpenID.Core: https://openid.net/specs/openid-connect-core-1_0.html\n          type: string\n          example: \"{{ .BaseURL }}api/oidc/userinfo\"\n        userinfo_signing_alg_values_supported:\n          description: \u003e\n            JSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA] supported by the\n            UserInfo Endpoint to encode the Claims in a JWT [JWT]. The value none MAY be included. See Also:\n            JWS: https://datatracker.ietf.org/doc/html/rfc7515 JWA: https://datatracker.ietf.org/doc/html/rfc7518 JWT:\n            https://datatracker.ietf.org/doc/html/rfc7519\n          type: array\n          example: [\"none\", \"RS256\"]\n          items:\n            $ref: '#/components/schemas/jose.spec.JWS.None'\n    openid.implementation.Claims.Array:\n      type: array\n      items:\n        type: string\n        enum:\n          - \"amr\"\n          - \"aud\"\n          - \"azp\"\n          - \"client_id\"\n          - \"exp\"\n          - \"iat\"\n          - \"iss\"\n          - \"jti\"\n          - \"rat\"\n          - \"sub\"\n          - \"auth_time\"\n          - \"nonce\"\n          - \"email\"\n          - \"email_verified\"\n          - \"alt_emails\"\n          - \"groups\"\n          - \"preferred_username\"\n          - \"name\"\n    openid.implementation.Claims.Object:\n      description: OpenID Connect 1.0 User Claims.\n      type: object\n      properties:\n        amr:\n          type: array\n          items:\n            type: string\n            enum:\n              - \"mfa\"\n              - \"mca\"\n              - \"user\"\n              - \"pin\"\n              - \"pwd\"\n              - \"otp\"\n              - \"hwk\"\n              - \"sms\"\n        aud:\n          type: array\n          items:\n            type: string\n        azp:\n          type: string\n        client_id:\n          type: string\n        scope:\n          type: string\n        scp:\n          type: array\n          items:\n            type: string\n        exp:\n          type: integer\n        iat:\n          type: integer\n        iss:\n          type: string\n        jti:\n          type: string\n        rat:\n          type: integer\n        sub:\n          type: string\n        auth_time:\n          type: integer\n        nonce:\n          type: string\n        email:\n          type: string\n        email_verified:\n          type: boolean\n        alt_emails:\n          type: array\n          items:\n            type: string\n        groups:\n          type: array\n          items:\n            type: string\n        preferred_username:\n          type: string\n        name:\n          type: string\n    openid.implementation.Scopes.Object:\n      description: The scope.\n      type: string\n      oneOf:\n        - $ref: '#/components/schemas/openid.spec.Scopes'\n        - type: string\n          enum:\n            - \"groups\"\n    openid.spec.Scopes:\n      type: string\n      enum:\n        - \"openid\"\n        - \"offline_access\"\n        - \"profile\"\n        - \"email\"\n        - \"address\"\n        - \"phone\"\n    openid.spec.IntrospectionRequest:\n      type: object\n      required:\n        - \"token\"\n      properties:\n        token:\n          description: \u003e\n            The string value of the token. For access tokens, this\n            is the \"access_token\" value returned from the token endpoint\n            defined in OAuth 2.0 [RFC6749], Section 5.1. For refresh tokens,\n            this is the \"refresh_token\" value returned from the token endpoint\n            as defined in OAuth 2.0 [RFC6749], Section 5.1. Other token types\n            are outside the scope of this specification.\n          type: string\n          example: \"authelia_at_cr4i4EtTn2F4k6mX4XzxbsBewkxCGn\"\n        token_type_hint:\n          description: \u003e\n            A hint about the type of the token submitted for\n            introspection. The protected resource MAY pass this parameter to\n            help the authorization server optimize the token lookup. If the\n            server is unable to locate the token using the given hint, it MUST\n            extend its search across all of its supported token types. An\n            authorization server MAY ignore this parameter, particularly if it\n            is able to detect the token type automatically. Values for this\n            field are defined in the \"OAuth Token Type Hints\" registry defined\n            in OAuth Token Revocation [RFC7009].\n          type: string\n          example: \"access_token\"\n          enum:\n            - \"access_token\"\n            - \"refresh_token\"\n    openid.spec.AccessRequest.ClientAuth:\n      type: object\n      properties:\n        client_id:\n          description: \u003e\n            REQUIRED if the client is not authenticating with the\n            authorization server as described in Section 3.2.1. of [RFC6749].\n            The client identifier as described in Section 2.2 of [RFC6749].\n          type: string\n          example: \"authelia_dc_mn123kjn12kj3123njk\"\n        client_secret:\n          description: \u003e\n            REQUIRED. The client secret. The client MAY omit the\n            parameter if the client secret is an empty string.\n          type: string\n          format: password\n    openid.spec.AccessRequest.AuthorizationCodeFlow:\n      allOf:\n        - $ref: '#/components/schemas/openid.spec.AccessRequest.ClientAuth'\n        - type: object\n          required:\n            - \"code\"\n            - \"grant_type\"\n          properties:\n            grant_type:\n              description: Value MUST be set to \"urn:ietf:params:oauth:grant-type:device_code\".\n              type: string\n              enum:\n                - \"authorization_code\"\n            code:\n              description: The Authorization Code.\n              type: string\n              example: \"authelia_ac_1j2kn3knj12n3kj12n\"\n            code_verifier:\n              description: The Authorization Code Verifier (PKCE).\n              type: string\n              example: \"88a25754f7c0b3b3b88cf6cd4e29e8356b160524fdc1cb329a94471825628fd3\"\n            redirect_uri:\n              description: The original Redirect URI used in the Authorization Request.\n              type: string\n              example: \"https://app.example.com/oidc/callback\"\n    openid.spec.AccessRequest.DeviceCodeFlow:\n      allOf:\n        - $ref: '#/components/schemas/openid.spec.AccessRequest.ClientAuth'\n        - type: object\n          required:\n            - \"grant_type\"\n            - \"device_code\"\n          properties:\n            grant_type:\n              description: Value MUST be set to \"urn:ietf:params:oauth:grant-type:device_code\".\n              type: string\n              enum:\n                - \"urn:ietf:params:oauth:grant-type:device_code\"\n            device_code:\n              description: The Device Authorization Code.\n              type: string\n              example: \"authelia_dc_mn123kjn12kj3123njk\"\n    openid.spec.AccessRequest.RefreshTokenFlow:\n      allOf:\n        - $ref: '#/components/schemas/openid.spec.AccessRequest.ClientAuth'\n        - type: object\n          required:\n            - \"grant_type\"\n            - \"device_code\"\n          properties:\n            grant_type:\n              description: Value MUST be set to \"refresh_token\".\n              type: string\n              enum:\n                - \"refresh_token\"\n            refresh_token:\n              description: The Refresh Token.\n              example: \"authelia_rt_1n2j3kihn12kj3n12k\"\n            scope:\n              description: \u003e\n                The scope of the access request as described by\n                Section 3.3. The requested scope MUST NOT include any scope\n                not originally granted by the resource owner, and if omitted is\n                treated as equal to the scope originally granted by the\n                resource owner.\n    openid.spec.AccessResponse:\n      type: object\n      properties:\n        access_token:\n          description: The access token issued by the authorization server.\n          type: string\n          example: \"authelia_at_cr4i4EtTn2F4k6mX4XzxbsBewkxCGn\"\n        refresh_token:\n          type: string\n          description: \u003e\n            The refresh token, which can be used to obtain new access tokens using the\n            same authorization grant as described in Section 6.\n        token_type:\n          type: string\n          description: \u003e\n            The access token type provides the client with the information\n            required to successfully utilize the access token to make a protected\n            resource request (along with type-specific attributes). The client\n            MUST NOT use an access token if it does not understand the token\n            type.\n          enum:\n            - \"bearer\"\n        expires_in:\n          type: integer\n          description: \u003e\n            The lifetime in seconds of the access token. For\n            example, the value \"3600\" denotes that the access token will\n            expire in one hour from the time the response was generated.\n            If omitted, the authorization server SHOULD provide the\n            expiration time via other means or document the default value.\n        state:\n          type: string\n          description: Exactly the state value passed in the authorization request if present.\n        scope:\n          type: string\n          description: \u003e\n            The scope of the access token as described by Section 3.3 if it differs from the requested scope.\n    openid.spec.AuthorizeRequest:\n      type: object\n      required:\n        - \"scope\"\n        - \"response_type\"\n        - \"client_id\"\n        - \"redirect_uri\"\n      properties:\n        scope:\n          description: The requested scope.\n          type: string\n          example: \"openid profile groups\"\n        response_type:\n          $ref: '#/components/schemas/openid.spec.ResponseType'\n        client_id:\n          description: The OAuth 2.0 client identifier.\n          type: string\n          example: \"app\"\n        redirect_uri:\n          description: \u003e\n            Redirection URI to which the response will be sent. This URI MUST exactly match one of the\n            Redirection URI values for the Client pre-registered at the OpenID Provider, with the matching\n            performed as described in Section 6.2.1 of [RFC3986] (Simple String Comparison). When using this\n            flow, the Redirection URI SHOULD use the https scheme; however, it MAY use the http scheme, provided\n            that the Client Type is confidential, as defined in Section 2.1 of OAuth 2.0, and provided the OP\n            allows the use of http Redirection URIs in this case. The Redirection URI MAY use an alternate\n            scheme, such as one that is intended to identify a callback into a native application.\n          type: string\n          example: \"https://app.example.com\"\n        state:\n          description: \u003e\n            Opaque value used to maintain state between the request and the callback. Typically, Cross-Site\n            Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this\n            parameter with a browser cookie.\n          type: string\n          example: \"oV84Vsy7wyCgRk2h4aZBmXZq4q3g2f\"\n        response_mode:\n          $ref: '#/components/schemas/openid.spec.ResponseMode'\n        nonce:\n          description: \u003e\n            String value used to associate a Client session with an ID Token, and to mitigate replay attacks.\n            The value is passed through unmodified from the Authentication Request to the ID Token. Sufficient\n            entropy MUST be present in the nonce values used to prevent attackers from guessing values. For\n            implementation notes, see Section 15.5.2.\n          type: string\n          example: \"TRMLqchoKGQNcooXvBvUy9PtmLdJGf\"\n        display:\n          $ref: '#/components/schemas/openid.spec.DisplayType'\n        prompt:\n          description: \u003e\n            Not Supported: Space delimited, case sensitive list of ASCII string values that specifies whether\n            the Authorization Server prompts the End-User for reauthentication and consent.\n          type: string\n        max_age:\n          description: \u003e\n            Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the\n            End-User was actively authenticated by the OP. If the elapsed time is greater than this value, the\n            OP MUST attempt to actively re-authenticate the End-User. (The max_age request parameter corresponds\n            to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID\n            Token returned MUST include an auth_time Claim Value.\n          type: integer\n        ui_locales:\n          description: \u003e\n            Not Supported: End-User's preferred languages and scripts for the user interface, represented as a\n            space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance,\n            the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without\n            a region designation), followed by English (without a region designation). An error SHOULD NOT\n            result if some or all of the requested locales are not supported by the OpenID Provider.\n          type: string\n        claims_locales:\n          description: \u003e\n            Not Supported: End-User's preferred languages and scripts for Claims being returned, represented as\n            a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. An error\n            SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.\n          type: string\n        id_token_hint:\n          description: \u003e\n            Not Supported: ID Token previously issued by the Authorization Server being passed as a hint about\n            the End-User's current or past authenticated session with the Client. If the End-User identified by\n            the ID Token is logged in or is logged in by the request, then the Authorization Server returns a\n            positive response; otherwise, it SHOULD return an error, such as login_required. When possible, an\n            id_token_hint SHOULD be present when prompt=none is used and an invalid_request error MAY be\n            returned if it is not; however, the server SHOULD respond successfully when possible, even if it is\n            not present. The Authorization Server need not be listed as an audience of the ID Token when it is\n            used as an id_token_hint value. If the ID Token received by the RP from the OP is encrypted, to use\n            it as an id_token_hint, the Client MUST decrypt the signed ID Token contained within the encrypted\n            ID Token. The Client MAY re-encrypt the signed ID token to the Authentication Server using a key\n            that enables the server to decrypt the ID Token, and use the re-encrypted ID token as the\n            id_token_hint value.\n          type: string\n        login_hint:\n          description: \u003e\n            Not Supported: Hint to the Authorization Server about the login identifier the End-User might use to\n            log in (if necessary). This hint can be used by an RP if it first asks the End-User for their e-mail\n            address (or other identifier) and then wants to pass that value as a hint to the discovered\n            authorization service. It is RECOMMENDED that the hint value match the value used for discovery.\n            This value MAY also be a phone number in the format specified for the phone_number Claim. The use\n            of this parameter is left to the OP's discretion.\n          type: string\n        acr_values:\n          description: \u003e\n            Not Supported: Requested Authentication Context Class Reference values. Space-separated string that\n            specifies the acr values that the Authorization Server is being requested to use for processing this\n            Authentication Request, with the values appearing in order of preference. The Authentication Context\n            Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in\n            Section 2. The acr Claim is requested as a Voluntary Claim by this parameter.\n          type: string\n        claims:\n          description: \u003e\n            Not Supported: The claims parameter value, as specified in Section 5.5.\n          type: string\n        registration:\n          description: \u003e\n            Not Supported: This parameter is used by the Client to provide information about itself to a\n            Self-Issued OP that would normally be provided to an OP during Dynamic Client Registration, as\n            specified in Section 7.2.1.\n          type: string\n        request:\n          description: \u003e\n            Not Supported: Request Object value, as specified in Section 6.1. The Request Object MAY be\n            encrypted to the Self-Issued OP by the Client. In this case, the sub (subject) of a previously\n            issued ID Token for this Client MUST be sent as the kid (Key ID) of the JWE. Encrypting content to\n            Self-Issued OPs is currently only supported when the OP's JWK key type is RSA and the encryption\n            algorithm used is RSA1_5.\n          type: string\n    openid.spec.SubjectIdentifier:\n      description: \u003e\n        A Subject Identifier is a locally unique and never reassigned identifier within the Issuer for the\n        End-User, which is intended to be consumed by the Client.\n      type: string\n      enum:\n        - \"public\"\n        - \"pairwise\"\n    openid.spec.ClientAuthMethod:\n      description: The OAuth 2.0 / OpenID Connect 1.0 Client Authentication Method.\n      type: string\n      enum:\n        - \"client_secret_basic\"\n        - \"client_secret_post\"\n        - \"client_secret_jwt\"\n        - \"private_key_jwt\"\n        - \"none\"\n    openid.spec.DisplayType:\n      description: \u003e\n        ASCII string value that specifies how the Authorization Server displays the authentication and consent user\n        interface pages to the End-User.\n      type: string\n      example: \"page\"\n      enum:\n        - \"page\"\n        - \"popup\"\n        - \"touch\"\n        - \"wap\"\n    openid.spec.ResponseType:\n      description: The OAuth 2.0 / OpenID Connect 1.0 Response Type.\n      type: string\n      example: \"code\"\n      enum:\n        - \"code\"\n        - \"id_token\"\n        - \"token\"\n        - \"code token\"\n        - \"code id_token\"\n        - \"token id_token\"\n        - \"code id_token token\"\n        - \"none\"\n    openid.spec.ResponseMode:\n      description: \u003e\n        Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization\n        Endpoint. This use of this parameter is NOT RECOMMENDED when the Response Mode that would be requested is\n        the default mode specified for the Response Type.\n      type: string\n      example: \"query\"\n      enum:\n        - \"query\"\n        - \"fragment\"\n        - \"form_post\"\n    openid.spec.GrantType:\n      description: The OAuth 2.0 / OpenID Connect 1.0 Grant Type.\n      type: string\n      example: \"authorization_code\"\n      enum:\n        - \"authorization_code\"\n        - \"refresh_token\"\n        - \"implicit\"\n        - \"password\"\n        - \"client_credentials\"\n        - \"urn:ietf:params:oauth:grant-type:device_code\"\n    openid.spec.CodeChallengeMethod:\n      description: The RFC7636 Code Challenge Verifier Method.\n      type: string\n      example: \"S256\"\n      enum:\n        - \"plain\"\n        - \"S256\"\n    openid.spec.ClaimType:\n      description: The representation of claims.\n      type: string\n      example: \"normal\"\n      enum:\n        - \"normal\"\n        - \"aggregated\"\n        - \"distributed\"\n    jose.spec.None:\n      description: The JSON Web Signature Algorithm\n      type: string\n      enum:\n        - \"none\"\n    jose.spec.JWS.None:\n      description: The JSON Web Signature Algorithm\n      type: string\n      oneOf:\n        - $ref: '#/components/schemas/jose.spec.None'\n        - $ref: '#/components/schemas/jose.spec.jws'\n    jose.spec.jws:\n      description: The JSON Web Signature Algorithm\n      type: string\n      enum:\n        - \"HS256\"\n        - \"HS384\"\n        - \"HS512\"\n        - \"RS256\"\n        - \"RS384\"\n        - \"RS512\"\n        - \"ES256\"\n        - \"ES384\"\n        - \"ES512\"\n        - \"PS256\"\n        - \"PS384\"\n        - \"PS512\"\n    jose.spec.JWE.alg:\n      description: The JSON Web Encryption Algorithm (CEK)\n      type: string\n      enum:\n        - \"RSA1_5\"\n        - \"RSA-OAEP\"\n        - \"RSA-OAEP-256\"\n        - \"A128KW\"\n        - \"A192KW\"\n        - \"A256KW\"\n        - \"dir\"\n        - \"ECDH-ES\"\n        - \"ECDH-ES+A128KW\"\n        - \"ECDH-ES+A192KW\"\n        - \"ECDH-ES+A256KW\"\n        - \"A128GCMKW\"\n        - \"A192GCMKW\"\n        - \"A256GCMKW\"\n        - \"PBES2-HS256+A128KW\"\n        - \"PBES2-HS384+A192KW\"\n        - \"PBES2-HS512+A256KW\"\n    jose.spec.JWE.enc:\n      description: The JSON Web Encryption Algorithm (Claims)\n      type: string\n      enum:\n        - \"A128CBC-HS256\"\n        - \"A192CBC-HS384\"\n        - \"A256CBC-HS512\"\n        - \"A128CBC\"\n        - \"A256CBC\"\n        - \"A128GCM\"\n        - \"A256GCM\"\n    jose.spec.JWK.base:\n      type: object\n      properties:\n        use:\n          description: \u003e\n            The \"use\" (public key use) parameter identifies the intended use of\n            the public key. The \"use\" parameter is employed to indicate whether\n            a public key is used for encrypting data or verifying the signature\n            on data.\n          type: string\n          example: \"sig\"\n          enum:\n            - \"sig\"\n            - \"enc\"\n        key_ops:\n          description: \u003e\n            The \"key_ops\" (key operations) parameter identifies the operation(s)\n            for which the key is intended to be used. The \"key_ops\" parameter is\n            intended for use cases in which public, private, or symmetric keys\n            may be present.\n          type: array\n          example: [\"sign\"]\n          items:\n            type: string\n            enum:\n              - \"sign\"\n              - \"verify\"\n              - \"encrypt\"\n              - \"decrypt\"\n              - \"wrapKey\"\n              - \"unwrapKey\"\n              - \"deriveKey\"\n              - \"deriveBits\"\n        kid:\n          description: \u003e\n            The \"kid\" (key ID) parameter is used to match a specific key. This\n            is used, for instance, to choose among a set of keys within a JWK Set\n            during key rollover. The structure of the \"kid\" value is\n            unspecified. When \"kid\" values are used within a JWK Set, different\n            keys within the JWK Set SHOULD use distinct \"kid\" values. (One\n            example in which different keys might use the same \"kid\" value is if\n            they have different \"kty\" (key type) values but are considered to be\n            equivalent alternatives by the application using them.) The \"kid\"\n            value is a case-sensitive string. Use of this member is OPTIONAL.\n            When used with JWS or JWE, the \"kid\" value is used to match a JWS or\n            JWE \"kid\" Header Parameter value.\n          type: string\n        x5u:\n          description: \u003e\n            The \"x5u\" (X.509 URL) parameter is a URI [RFC3986] that refers to a\n            resource for an X.509 public key certificate or certificate chain\n            [RFC5280]. The identified resource MUST provide a representation of\n            the certificate or certificate chain that conforms to RFC 5280\n            [RFC5280] in PEM-encoded form, with each certificate delimited as\n            specified in Section 6.1 of RFC 4945 [RFC4945]. The key in the first\n            certificate MUST match the public key represented by other members of\n            the JWK. The protocol used to acquire the resource MUST provide\n            integrity protection; an HTTP GET request to retrieve the certificate\n            MUST use TLS [RFC2818] [RFC5246]; the identity of the server MUST be\n            validated, as per Section 6 of RFC 6125 [RFC6125]. Use of this\n            member is OPTIONAL.\n          type: string\n        x5c:\n          description: \u003e\n            The \"x5c\" (X.509 certificate chain) parameter contains a chain of one\n            or more PKIX certificates [RFC5280]. The certificate chain is\n            represented as a JSON array of certificate value strings. Each\n            string in the array is a base64-encoded (Section 4 of [RFC4648] --\n            not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.\n            The PKIX certificate containing the key value MUST be the first\n            certificate. This MAY be followed by additional certificates, with\n            each subsequent certificate being the one used to certify the\n            previous one. The key in the first certificate MUST match the public\n            key represented by other members of the JWK. Use of this member is\n            OPTIONAL.\n          type: array\n          items:\n            type: string\n            format: byte\n        x5t:\n          description: \u003e\n            The \"x5t\" (X.509 certificate SHA-1 thumbprint) parameter is a\n            base64url-encoded SHA-1 thumbprint (a.k.a. digest) of the DER\n            encoding of an X.509 certificate [RFC5280]. Note that certificate\n            thumbprints are also sometimes known as certificate fingerprints.\n            The key in the certificate MUST match the public key represented by\n            other members of the JWK. Use of this member is OPTIONAL.\n          type: string\n          format: byte\n        x5t#S256:\n          description: \u003e\n            The \"x5t#S256\" (X.509 certificate SHA-256 thumbprint) parameter is a\n            base64url-encoded SHA-256 thumbprint (a.k.a. digest) of the DER\n            encoding of an X.509 certificate [RFC5280]. Note that certificate\n            thumbprints are also sometimes known as certificate fingerprints.\n            The key in the certificate MUST match the public key represented by\n            other members of the JWK. Use of this member is OPTIONAL.\n          type: string\n          format: byte\n    jose.spec.JWK.RSA:\n      description: RSA Public Key in JSON Web Key format as defined by RFC7517 and RFC7518.\n      allOf:\n        - $ref: '#/components/schemas/jose.spec.JWK.base'\n        - type: object\n          required:\n            - \"kty\"\n            - \"n\"\n            - \"e\"\n          properties:\n            kty:\n              description: \u003e\n                The \"kty\" (key type) parameter identifies the cryptographic algorithm\n                family used with the key.\n              type: string\n              example: \"RSA\"\n              enum:\n                - \"RSA\"\n            alg:\n              description: The JSON Web Signature Algorithm\n              type: string\n              example: \"RS256\"\n              enum:\n                - \"RS256\"\n                - \"RS384\"\n                - \"RS512\"\n                - \"PS256\"\n                - \"PS384\"\n                - \"PS512\"\n            n:\n              description: \u003e\n                RSA Public Key: The \"n\" (modulus) parameter contains the modulus value for the RSA public key. It is\n                represented as a Base64urlUInt-encoded value.\n              type: string\n              format: byte\n            e:\n              description: \u003e\n                RSA Public Key: The \"e\" (exponent) parameter contains the exponent value for the RSA public key.\n                It is represented as a Base64urlUInt-encoded value.\n              type: string\n              format: byte\n    jose.spec.JWK.RSA.Private:\n      description: RSA Private Key in JSON Web Key format as defined by RFC7517 and RFC7518.\n      allOf:\n        - $ref: '#/components/schemas/jose.spec.JWK.base'\n        - $ref: '#/components/schemas/jose.spec.JWK.RSA'\n        - type: object\n          required:\n            - \"d\"\n          properties:\n            d:\n              description: \u003e\n                RSA Private Key: The \"d\" (private exponent) parameter contains the private exponent value for the RSA\n                private key. It is represented as a Base64urlUInt-encoded value.\n              type: string\n              format: byte\n            p:\n              description: \u003e\n                RSA Private Key: The \"p\" (first prime factor) parameter contains the first prime factor.\n                It is represented as a Base64urlUInt-encoded value.\n              type: string\n              format: byte\n            q:\n              description: \u003e\n                RSA Private Key: The \"q\" (second prime factor) parameter contains the second prime factor. It is\n                represented as a Base64urlUInt-encoded value.\n              type: string\n              format: byte\n            dp:\n              description: \u003e\n                RSA Private Key: The \"dp\" (first factor CRT exponent) parameter contains the Chinese Remainder Theorem\n                (CRT) exponent of the first factor. It is represented as a Base64urlUInt-encoded value.\n              type: string\n            dq:\n              description: \u003e\n                RSA Private Key: The \"dq\" (second factor CRT exponent) parameter contains the CRT exponent of the\n                second factor. It is represented as a Base64urlUInt-encoded value.\n              type: string\n            qi:\n              description: \u003e\n                RSA Private Key: The \"qi\" (first CRT coefficient) parameter contains the CRT coefficient of the second\n                factor. It is represented as a Base64urlUInt-encoded value.\n              type: string\n              format: byte\n            oth:\n              description: \u003e\n                The \"oth\" (other primes info) parameter contains an array of\n                information about any third and subsequent primes, should they exist.\n              type: array\n              items:\n                type: object\n                required:\n                  - \"r\"\n                  - \"d\"\n                  - \"t\"\n                properties:\n                  r:\n                    description: \u003e\n                      The \"r\" (prime factor) parameter within an \"oth\" array member\n                      represents the value of a subsequent prime factor. It is represented\n                      as a Base64urlUInt-encoded value.\n                    type: string\n                    format: byte\n                  d:\n                    description: \u003e\n                      The \"d\" (factor CRT exponent) parameter within an \"oth\" array member\n                      represents the CRT exponent of the corresponding prime factor. It is\n                      represented as a Base64urlUInt-encoded value.\n                    type: string\n                    format: byte\n                  t:\n                    description: \u003e\n                      The \"t\" (factor CRT coefficient) parameter within an \"oth\" array\n                      member represents the CRT coefficient of the corresponding prime\n                      factor. It is represented as a Base64urlUInt-encoded value.\n                    type: string\n                    format: byte\n    jose.spec.JWK.EC:\n      description: Elliptic Curve Public Key in JSON Web Key format as defined by RFC7517 and RFC7518.\n      allOf:\n        - $ref: '#/components/schemas/jose.spec.JWK.base'\n        - type: object\n          required:\n            - \"kty\"\n            - \"crv\"\n            - \"x\"\n          properties:\n            kty:\n              description: \u003e\n                The \"kty\" (key type) parameter identifies the cryptographic algorithm\n                family used with the key.\n              type: string\n              example: \"EC\"\n              enum:\n                - \"EC\"\n            alg:\n              description: The JSON Web Signature Algorithm\n              type: string\n              example: \"ES256\"\n              enum:\n                - \"ES256\"\n                - \"ES384\"\n                - \"ES512\"\n            x:\n              description: \u003e\n                EC Public Key: The x coordinate parameter contains the x coordinate for the Elliptic Curve point.\n                It is represented as the base64url encoding of the octet string representation of the coordinate, as\n                defined in Section 2.3.5 of SEC1 [SEC1].\n              type: string\n              format: byte\n            y:\n              description: \u003e\n                EC Public Key: The y coordinate parameter contains the y coordinate for the Elliptic Curve point.\n                It is represented as the base64url encoding of the octet string representation of the coordinate, as\n                defined in Section 2.3.5 of SEC1 [SEC1].\n              type: string\n              format: byte\n            crv:\n              description: \u003e\n                The curve parameter identifies the cryptographic curve used with the key. Curve\n                values from [DSS] used by this specification.\n              type: string\n              example: \"P-521\"\n              enum:\n                - \"P-256\"\n                - \"P-384\"\n                - \"P-521\"\n                - \"Ed25519\"\n                - \"Ed448\"\n                - \"X25519\"\n                - \"X448\"\n                - \"secp256k1\"\n    jose.spec.JWK.EC.Private:\n      description: Elliptic Curve Private Key in JSON Web Key format as defined by RFC7517 and RFC7518.\n      allOf:\n        - $ref: '#/components/schemas/jose.spec.JWK.base'\n        - $ref: '#/components/schemas/jose.spec.JWK.EC'\n        - type: object\n          required:\n            - \"d\"\n          properties:\n            d:\n              description: \u003e\n                ECC Private Key: The \"d\" (ECC private key) parameter contains the Elliptic Curve private key value. It\n                is represented as the base64url encoding of the octet string representation of the private key value,\n                as defined in Section 2.3.7 of SEC1 [SEC1]. The length of this octet string MUST be\n                ceiling(log-base-2(n)/8) octets (where n is the order of the curve).\n              type: string\n              format: byte\n    jose.spec.JWK.Symmetric:\n      description: Symmetric Key in JSON Web Key format as defined by RFC7517 and RFC7518.\n      allOf:\n        - $ref: '#/components/schemas/jose.spec.JWK.base'\n        - type: object\n          required:\n            - \"k\"\n          properties:\n            kty:\n              description: \u003e\n                The \"kty\" (key type) parameter identifies the cryptographic algorithm\n                family used with the key.\n              type: string\n              example: \"oct\"\n              enum:\n                - \"oct\"\n            k:\n              description: \u003e\n                The \"k\" (key value) parameter contains the value of the symmetric (or\n                other single-valued) key. It is represented as the base64url\n                encoding of the octet sequence containing the key value.\n              type: string\n              format: byte\n    jose.spec.JWK:\n      type: string\n      anyOf:\n        - $ref: '#/components/schemas/jose.spec.JWK.RSA'\n        - $ref: '#/components/schemas/jose.spec.JWK.RSA.Private'\n        - $ref: '#/components/schemas/jose.spec.JWK.EC'\n        - $ref: '#/components/schemas/jose.spec.JWK.EC.Private'\n        - $ref: '#/components/schemas/jose.spec.JWK.Symmetric'\n    jose.spec.JWKs:\n      type: object\n      description: The JSON Web Key Sets Document as defined by RFC7517.\n      properties:\n        keys:\n          description: List of JSON Wek Key's in the JSON Web Key format as defined by RFC7517.\n          type: array\n          items:\n            $ref: '#/components/schemas/jose.spec.JWK'\n  securitySchemes:\n    authelia_auth:\n      type: apiKey\n      name: \"{{ .Session }}\"\n      in: cookie\n    openid:\n      type: openIdConnect\n      openIdConnectUrl: \"{{ .BaseURL }}.well-known/openid-configuration\"\n...\n",
			"canonicalURL": "/github.com/authelia/authelia@3c5ae52d4205144bcd446ced29d26bda9ada1c2f/-/blob/api/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/authelia/authelia/blob/3c5ae52d4205144bcd446ced29d26bda9ada1c2f/api/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/api/oidc/introspection\": post: security: parse security scheme \"openid\": openIdConnect: at api/openapi.yml:3679:25: \"openIdConnectUrl\" MUST be in the form of a URL: parse \"{{ .BaseURL }}.well-known/openid-configuration\": invalid URI for request"
}