{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Backbase/golden-sample-services"
		},
		"file": {
			"name": "store-integration-enricher-api-v1.yaml",
			"size": 0,
			"path": "api/store-integration-enricher-api/src/main/resources/store-integration-enricher-api-v1.yaml",
			"byteSize": 1681,
			"content": "openapi: 3.0.3\ninfo:\n  title: Store Intgration Enricher Webhook API\n  version: 1.0.0\n  description: Description of the API...\n  license:\n    name: License\n    url: http://atorres.es\n  x-icon: credit_card\nservers:\n  - description: Prism mock server\n    url: http://localhost:4010\n  - description: Service running locally\n    url: http://localhost:9917\ntags:\n  - name: store-integration-webhook\npaths:\n  /service-api/v1/web-hooks/product-composites/enrich:\n    put:\n      tags:\n        - store-integration-webhook\n      summary: Submits a product composite for enrichment.\n      description: |\n        # Normal response\n        The enriched (or unmodified) product will be returned to client.\n        \n        # 204 response.\n        Product aggregate will be retuned unmodified \n        (same as returning unchanged product with 200 code, but less overhead).\n        \n        $ 4xx/500 response\n        Depending on service configuration: The service can ignore the error and return the product as is. If the \n        extension is critical, the service can treat failure to call extension is internal server error and return 500.\n\n      operationId: enrichProduct\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: 'schemas/definitions.yaml#/components/schemas/ProductAggregate'\n            example:\n              $ref: examples/product-aggregate.json\n\n      responses:\n        '200':\n          $ref: 'schemas/definitions.yaml#/components/responses/200ProductAggregate'\n        '204':\n          description: No changes to apply to product.\n        '404':\n          $ref: 'lib/common-types.yaml#/components/responses/404NotFound'\n",
			"canonicalURL": "/github.com/Backbase/golden-sample-services@2a763d1017a26b33ea23d59eae0e7c67cc4875de/-/blob/api/store-integration-enricher-api/src/main/resources/store-integration-enricher-api-v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Backbase/golden-sample-services/blob/2a763d1017a26b33ea23d59eae0e7c67cc4875de/api/store-integration-enricher-api/src/main/resources/store-integration-enricher-api-v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/service-api/v1/web-hooks/product-composites/enrich\": put: operation \"enrichProduct\": requestBody: parse content: application/json: schema: parse schema: $ref: resolve \"schemas/definitions.yaml#/components/schemas/ProductAggregate\": $ref: resolve \"../schemas/product-aggregate.yaml\": property \"reviews\": items: $ref: resolve \"../schemas/definitions.yaml#/components/schemas/ReviewSummary\": $ref: resolve \"../schemas/review-summary.yaml\": property \"additions\": $ref: resolve \"../schemas/definitions.yaml#/components/schemas/Additions\": at https://raw.githubusercontent.com/Backbase/golden-sample-services/2a763d1017a26b33ea23d59eae0e7c67cc4875de/api/store-integration-enricher-api/src/main/resources/schemas/definitions.yaml:8:13: $ref: resolve \"../lib/schemas/additions.yaml\": get \"https://raw.githubusercontent.com/Backbase/golden-sample-services/2a763d1017a26b33ea23d59eae0e7c67cc4875de/api/store-integration-enricher-api/src/main/resources/lib/schemas/additions.yaml\": https: bad HTTP code 404 (Not Found)"
}