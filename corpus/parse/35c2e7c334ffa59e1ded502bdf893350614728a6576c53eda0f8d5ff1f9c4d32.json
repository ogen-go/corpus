{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Devolutions/devolutions-gateway"
		},
		"file": {
			"name": "gateway-api.yaml",
			"size": 0,
			"path": "devolutions-gateway/openapi/gateway-api.yaml",
			"byteSize": 11682,
			"content": "openapi: 3.0.3\ninfo:\n  title: devolutions-gateway\n  description: Protocol-aware fine-grained relay server\n  contact:\n    name: Devolutions Inc.\n    email: infos@devolutions.net\n  license:\n    name: MIT/Apache-2.0\n  version: 2022.3.3\npaths:\n  /jet/config:\n    patch:\n      tags:\n      - Config\n      summary: Modifies configuration\n      description: |\n        Modifies configuration\n      operationId: PatchConfig\n      requestBody:\n        description: JSON-encoded configuration patch\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConfigPatch'\n        required: true\n      responses:\n        '200':\n          description: Configuration has been patched with success\n        '400':\n          description: Bad patch request\n        '401':\n          description: Invalid or missing authorization token\n        '403':\n          description: Insufficient permissions\n        '500':\n          description: Failed to patch configuration\n      deprecated: false\n      security:\n      - scope_token:\n        - gateway.config.write\n  /jet/diagnostics/clock:\n    get:\n      tags:\n      - Diagnostics\n      summary: Retrieves server's clock in order to diagnose clock drifting.\n      description: |\n        Retrieves server's clock in order to diagnose clock drifting.\n\n        Clock drift is an issue for token validation because of claims such as `nbf` and `exp`.\n      operationId: GetClockDiagnostic\n      responses:\n        '200':\n          description: Server's clock\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClockDiagnostic'\n      deprecated: false\n  /jet/diagnostics/configuration:\n    get:\n      tags:\n      - Diagnostics\n      summary: Retrieves configuration.\n      description: |\n        Retrieves configuration.\n      operationId: GetConfigurationDiagnostic\n      responses:\n        '200':\n          description: Service configuration diagnostic (including version)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigDiagnostic'\n        '400':\n          description: Bad request\n        '401':\n          description: Invalid or missing authorization token\n        '403':\n          description: Insufficient permissions\n      deprecated: false\n      security:\n      - scope_token:\n        - gateway.diagnostics.read\n  /jet/diagnostics/logs:\n    get:\n      tags:\n      - Diagnostics\n      summary: Retrieves latest logs.\n      description: |\n        Retrieves latest logs.\n      operationId: GetLogs\n      responses:\n        '200':\n          description: Latest logs\n          content:\n            text/plain:\n              schema:\n                type: string\n        '400':\n          description: Bad request\n        '401':\n          description: Invalid or missing authorization token\n        '403':\n          description: Insufficient permissions\n        '500':\n          description: Failed to retrieve logs\n      deprecated: false\n      security:\n      - scope_token:\n        - gateway.diagnostics.read\n  /jet/health:\n    get:\n      tags:\n      - Health\n      summary: Performs a health check\n      description: |\n        Performs a health check\n      operationId: GetHealth\n      responses:\n        '200':\n          description: Identity for this Gateway\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Identity'\n        '400':\n          description: Invalid Accept header\n      deprecated: false\n  /jet/jrl:\n    post:\n      tags:\n      - Jrl\n      summary: Updates JRL (Json Revocation List) using a JRL token\n      description: |\n        Updates JRL (Json Revocation List) using a JRL token\n      operationId: UpdateJrl\n      responses:\n        '200':\n          description: JRL updated successfully\n        '400':\n          description: Bad request\n        '401':\n          description: Invalid or missing authorization token\n        '403':\n          description: Insufficient permissions\n        '500':\n          description: Failed to update the JRL\n      deprecated: false\n      security:\n      - jrl_token: []\n  /jet/jrl/info:\n    get:\n      tags:\n      - Jrl\n      summary: Retrieves current JRL (Json Revocation List) info\n      description: |\n        Retrieves current JRL (Json Revocation List) info\n      operationId: GetJrlInfo\n      responses:\n        '200':\n          description: Current JRL Info\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JrlInfo'\n        '400':\n          description: Bad request\n        '401':\n          description: Invalid or missing authorization token\n        '403':\n          description: Insufficient permissions\n        '500':\n          description: Failed to update the JRL\n      deprecated: false\n      security:\n      - scope_token:\n        - gateway.jrl.read\n  /jet/session/{id}/terminate:\n    post:\n      tags:\n      - Sessions\n      summary: Terminate forcefully a running session\n      description: |\n        Terminate forcefully a running session\n      operationId: TerminateSession\n      parameters:\n      - name: id\n        in: path\n        description: Session / association ID of the session to terminate\n        required: true\n        deprecated: false\n        schema:\n          type: string\n          format: uuid\n      responses:\n        '200':\n          description: Session terminated successfully\n        '400':\n          description: Bad request\n        '401':\n          description: Invalid or missing authorization token\n        '403':\n          description: Insufficient permissions\n        '404':\n          description: No running session found with provided ID\n        '500':\n          description: Unexpected server error\n      deprecated: false\n      security:\n      - scope_token:\n        - gateway.session.terminate\n  /jet/sessions:\n    get:\n      tags:\n      - Sessions\n      summary: Lists running sessions\n      description: |\n        Lists running sessions\n      operationId: GetSessions\n      responses:\n        '200':\n          description: Running sessions\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SessionInfo'\n        '400':\n          description: Bad request\n        '401':\n          description: Invalid or missing authorization token\n        '403':\n          description: Insufficient permissions\n        '500':\n          description: Unexpected server error\n      deprecated: false\n      security:\n      - scope_token:\n        - gateway.sessions.read\ncomponents:\n  schemas:\n    AccessScope:\n      type: string\n      enum:\n      - '*'\n      - gateway.sessions.read\n      - gateway.session.terminate\n      - gateway.associations.read\n      - gateway.diagnostics.read\n      - gateway.jrl.read\n      - gateway.config.write\n    ClockDiagnostic:\n      type: object\n      required:\n      - timestamp_secs\n      - timestamp_millis\n      properties:\n        timestamp_millis:\n          type: integer\n          format: int64\n          description: Current time in milliseconds\n        timestamp_secs:\n          type: integer\n          format: int64\n          description: Current time in seconds\n    ConfigDiagnostic:\n      type: object\n      description: Service configuration diagnostic\n      required:\n      - hostname\n      - version\n      - listeners\n      properties:\n        hostname:\n          type: string\n          description: This Gateway's hostname\n        id:\n          type: string\n          format: uuid\n          description: This Gateway's unique ID\n        listeners:\n          type: array\n          items:\n            $ref: '#/components/schemas/ListenerUrls'\n        version:\n          type: string\n          description: Gateway service version\n    ConfigPatch:\n      type: object\n      properties:\n        Id:\n          type: string\n          format: uuid\n          description: This Gateway's unique ID\n        SubProvisionerPublicKey:\n          $ref: '#/components/schemas/SubProvisionerKey'\n        Subscriber:\n          $ref: '#/components/schemas/Subscriber'\n    ConnectionMode:\n      type: string\n      enum:\n      - rdv\n      - fwd\n    DataEncoding:\n      type: string\n      enum:\n      - Multibase\n      - Base64\n      - Base64Pad\n      - Base64Url\n      - Base64UrlPad\n    Identity:\n      type: object\n      required:\n      - hostname\n      properties:\n        hostname:\n          type: string\n          description: This Gateway's hostname\n        id:\n          type: string\n          format: uuid\n          description: This Gateway's unique ID\n    JrlInfo:\n      type: object\n      required:\n      - jti\n      - iat\n      properties:\n        iat:\n          type: integer\n          format: int64\n          description: JWT \"Issued At\" claim of JRL\n        jti:\n          type: string\n          format: uuid\n          description: Unique ID for current JRL\n    ListenerUrls:\n      type: object\n      required:\n      - internal_url\n      - external_url\n      properties:\n        external_url:\n          type: string\n          description: URL to use from external networks\n        internal_url:\n          type: string\n          description: URL to use on local network\n    PubKeyFormat:\n      type: string\n      enum:\n      - Spki\n      - Rsa\n    SessionInfo:\n      type: object\n      description: Information about an ongoing Gateway session\n      required:\n      - association_id\n      - application_protocol\n      - recording_policy\n      - filtering_policy\n      - start_timestamp\n      - connection_mode\n      properties:\n        application_protocol:\n          type: string\n          description: Protocol used during this session\n        association_id:\n          type: string\n          format: uuid\n          description: Unique ID for this session\n        connection_mode:\n          $ref: '#/components/schemas/ConnectionMode'\n        destination_host:\n          type: string\n          description: Destination Host\n        filtering_policy:\n          type: boolean\n          description: Filtering Policy\n        recording_policy:\n          type: boolean\n          description: Recording Policy\n        start_timestamp:\n          type: string\n          format: date-time\n          description: Date this session was started\n        time_to_live:\n          type: integer\n          format: int64\n          description: Maximum session duration in minutes (0 is used for the infinite\n            duration)\n    SubProvisionerKey:\n      type: object\n      required:\n      - Id\n      - Value\n      properties:\n        Encoding:\n          $ref: '#/components/schemas/DataEncoding'\n        Format:\n          $ref: '#/components/schemas/PubKeyFormat'\n        Id:\n          type: string\n          description: The key ID for this subkey\n        Value:\n          type: string\n          description: The binary-to-text-encoded key data\n    Subscriber:\n      type: object\n      description: Subscriber configuration\n      required:\n      - Url\n      - Token\n      properties:\n        Token:\n          type: string\n          description: Bearer token to use when making HTTP requests\n        Url:\n          type: string\n          description: HTTP URL where notification messages are to be sent\n  securitySchemes:\n    jrl_token:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: Contains the JRL to apply if newer\n    scope_token:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: Token allowing a single HTTP request for a specific scope\n\n",
			"canonicalURL": "/github.com/Devolutions/devolutions-gateway@561dcbbc4609559a42d4d4a96fc251c3f6bc813e/-/blob/devolutions-gateway/openapi/gateway-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Devolutions/devolutions-gateway/blob/561dcbbc4609559a42d4d4a96fc251c3f6bc813e/devolutions-gateway/openapi/gateway-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/jet/config\": patch: operation \"PatchConfig\": security: at devolutions-gateway/openapi/gateway-api.yaml:41:11: list of scopes MUST be empty for \"type\" \"http\""
}