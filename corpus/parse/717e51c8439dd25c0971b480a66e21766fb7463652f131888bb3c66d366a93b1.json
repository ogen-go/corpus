{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Backbase/golden-sample-services"
		},
		"file": {
			"name": "product-service-api-v1.yaml",
			"size": 0,
			"path": "api/product-api/src/main/resources/product-service-api-v1.yaml",
			"byteSize": 4561,
			"content": "openapi: 3.0.3\ninfo:\n  title: Product Service API\n  version: 1.0.0\n  description: Description of the API...\n  license:\n    name: Copyright Backbase\n    url: https://www.backbase.com/legal\n  x-icon: credit_card\nservers:\n  - description: Prism mock server\n    url: http://localhost:4010\n  - description: Service running locally\n    url: http://localhost:9915\ntags:\n  - name: product-service\npaths:\n  /service-api/v1/products:\n    get:\n      tags:\n        - product-service\n      summary: List products\n      description: Returns a list of products matching the search criteria\n      operationId: getProducts\n      responses:\n        '200':\n          $ref: 'schemas/definitions.yaml#/components/responses/200ProductList'\n        '400':\n          $ref: 'lib/common-types.yaml#/components/responses/400BadRequest'\n        '401':\n          $ref: 'lib/common-types.yaml#/components/responses/401Unauthorized'\n        '500':\n          $ref: 'lib/common-types.yaml#/components/responses/500InternalServerError'\n    post:\n      tags:\n        - product-service\n      summary:  Create a product\n      description: Creates a new product\n      operationId: postProduct\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: 'schemas/definitions.yaml#/components/schemas/Product'\n            example:\n              $ref: examples/create-product-request.json\n      responses:\n        '200':\n          $ref: 'schemas/definitions.yaml#/components/responses/200ProductId'\n        '400':\n          $ref: 'lib/common-types.yaml#/components/responses/400BadRequest'\n        '401':\n          $ref: 'lib/common-types.yaml#/components/responses/401Unauthorized'\n        '500':\n          $ref: 'lib/common-types.yaml#/components/responses/500InternalServerError'\n    put:\n      deprecated: true\n      tags:\n        - product-service\n      summary:  Update a product\n      description: Updates an existing product\n      operationId: putProduct\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: 'schemas/definitions.yaml#/components/schemas/Product'\n            example:\n              $ref: examples/update-product-request.json\n      responses:\n        '204':\n          description: If the product has been updated successfully\n        '400':\n          $ref: 'lib/common-types.yaml#/components/responses/400BadRequest'\n        '401':\n          $ref: 'lib/common-types.yaml#/components/responses/401Unauthorized'\n        '403':\n          $ref: 'lib/common-types.yaml#/components/responses/403Forbidden'\n        '404':\n          $ref: 'lib/common-types.yaml#/components/responses/404NotFound'\n        '500':\n          $ref: 'lib/common-types.yaml#/components/responses/500InternalServerError'\n\n  /service-api/v1/products/{productId}:\n    get:\n      tags:\n        - product-service\n      summary: Retrieve a product by ID\n      description: |\n        If the requested product ID is found the method will return information regarding base product information\n      operationId: getProductById\n      parameters:\n        - name: productId\n          in: path\n          description: productId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          $ref: 'schemas/definitions.yaml#/components/responses/200Product'\n        '401':\n          $ref: 'lib/common-types.yaml#/components/responses/401Unauthorized'\n        '403':\n          $ref: 'lib/common-types.yaml#/components/responses/403Forbidden'\n        '404':\n          $ref: 'lib/common-types.yaml#/components/responses/404NotFound'\n        '500':\n          $ref: 'lib/common-types.yaml#/components/responses/500InternalServerError'\n\n    delete:\n      tags:\n        - product-service\n      summary: Delete a product\n      description: Deletes an existing product\n      operationId: deleteProduct\n      parameters:\n        - name: productId\n          in: path\n          description: productId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '204':\n          description: If the product has been deleted successfully\n        '401':\n          $ref: 'lib/common-types.yaml#/components/responses/401Unauthorized'\n        '403':\n          $ref: 'lib/common-types.yaml#/components/responses/403Forbidden'\n        '404':\n          $ref: 'lib/common-types.yaml#/components/responses/404NotFound'\n        '500':\n          $ref: 'lib/common-types.yaml#/components/responses/500InternalServerError'\n",
			"canonicalURL": "/github.com/Backbase/golden-sample-services@f49771c269b17b77d6e8987c1019b766e3b55665/-/blob/api/product-api/src/main/resources/product-service-api-v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Backbase/golden-sample-services/blob/f49771c269b17b77d6e8987c1019b766e3b55665/api/product-api/src/main/resources/product-service-api-v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/service-api/v1/products\": at 1:257: get: operation \"getProducts\": at 1:264: responses: 500: at 1:615: resolve \"lib/common-types.yaml#/components/responses/500InternalServerError\" reference: external \"lib/common-types.yaml\": file: local file reference is not allowed"
}