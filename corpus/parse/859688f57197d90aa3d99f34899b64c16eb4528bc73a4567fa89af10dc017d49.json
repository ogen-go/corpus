{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mcity/octane-api"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "api.yaml",
			"byteSize": 241891,
			"content": "openapi: 3.0.0\ninfo:\n  description: Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous\n    and connected vehicle test facilities/cities.\n  version: 0.0.12\n  title: McityOS - OCTANE API\n  contact:\n    name: API support\n    email: mcity-engineering@umich.edu\n  license:\n    name: MIT License\n    url: https://opensource.org/licenses/MIT\nservers:\n- url: /api\n  description: Octane API Endpoint\nsecurity:\n- APIKeyHeader: []\ntags:\n- name: Facility\n  description: Information about the facility Mcity\n  externalDocs:\n    description: Discover Mcity\n    url: https://mcity.umich.edu\n- name: Intersections\n  description: Management of intersections\n  externalDocs:\n    description: Mcity's intersections\n- name: Signals\n  description: Management of traffic signals\n  externalDocs:\n    description: Mcity's traffic signals\n- name: Rail\n  description: Management of rail crossings.\n  externalDocs:\n    description: Discover Mcity's rail service\n- name: Crosswalks\n  description: Management of crosswalks\n  externalDocs:\n    description: Mcity's crosswalks\n- name: Gates\n  description: Control of facility gates\n  externalDocs:\n    description: Mcity's gates\n- name: Garages\n  description: Control of facility garage bays\n  externalDocs:\n    description: Mcity's Garages\n- name: Lights\n  description: Control and enumeration of lighting\n  externalDocs:\n    description: Mcity's Lights\n- name: Safety\n  description: Management of safety equipment\n  externalDocs:\n    description: Mcity's safety equipment\n- name: Maintenance\n  description: Maintenance equipment - internal devices to maintain the facility\n  externalDocs:\n    description: Mcity's maintenance equipment\n    url: https://members.um.city/wiki/track/maintenance\n- name: Sensors\n  description: Raw sensor feed, enumeration, and control\n  externalDocs:\n    description: Mcity's sensors\n- name: Weather\n  description: Weather alert and weather data feed\n  externalDocs:\n    description: Weather\n- name: V2X\n  description: V2X RSU and OBU management, near real time messages available via WebSocket\n  externalDocs:\n    description: V2X Technology\n- name: Scenarios\n  description: Management of test case scenarios\n  externalDocs:\n    description: Save, restore, and run test case scripts to setup a facility in a\n      specific way and trigger on events.\n    url: https://mcity.umich.edu\n- name: Robots\n  description: Information about OCTANE configured robots\n  externalDocs:\n    description: Discover Mcity\n    url: https://mcity.umich.edu\n- name: Requests\n  description: Information about current requests\n  externalDocs:\n    description: Mcity's requests\n    url: https://members.um.city/wiki/track/requests\n- name: Sessions\n  description: Manage active user sessions, session logging, and session notification.\n  externalDocs:\n    description: Mcity Scheduling\n    url: https://scheduling.umich.edu\npaths:\n  /garages:\n    x-octane-tag:\n    - Garages\n    get:\n      tags:\n      - Garages\n      summary: Return a list of garages\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  garages:\n                    type: array\n                    description: A list of garages\n                    items:\n                      $ref: '#/components/schemas/Garage'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /garage/{id}:\n    x-octane-tag:\n    - Garages\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A garage ID string.\n      schema:\n        type: string\n        minimum: 1\n    get:\n      tags:\n      - Garages\n      summary: Return a garage object with the specified ID.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  garage:\n                    $ref: '#/components/schemas/Garage'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Garages\n      summary: Allows control of a garage.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  description: Allows control to state of a specific garage state\n                  type: object\n                  properties:\n                    open:\n                      type: boolean\n                      description: Default is false, set to true to open the door.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /octane/garage:\n    x-octane-tag:\n    - Garages\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing garage_* events.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/garage_update:\n    x-octane-tag:\n    - Garages\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted when the state of a garage is updated.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Garage update\n                properties:\n                  id:\n                    type: string\n                    description: An ID number identifying this light fixture.\n                  serviced:\n                    type: string\n                    format: date-time\n                    description: UTC date time representing when the message was published.\n                    example: '2019-03-16T16:47:04.123-4:00'\n                  state:\n                    $ref: '#/components/schemas/GarageState'\n  /octane/garage_request:\n    x-octane-tag:\n    - Garages\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event published when request to change state was made on this garage.\n      responses:\n        200:\n          description: Success\n          content:\n            '*/*':\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/Garage'\n  /lights:\n    x-octane-tag:\n    - Lights\n    get:\n      tags:\n      - Lights\n      summary: Return a list of light objects.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  lights:\n                    type: array\n                    description: A list of Lights\n                    items:\n                      $ref: '#/components/schemas/Light'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Lights\n      summary: Sets features on all configured lights that support a feature.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: Default is 0. 1 causes the light to turn on.\n                    dimLevel:\n                      type: integer\n                      description: Default is 0. \u003e 0 setting toggles the dim percentage\n                        of the light.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestIDs:\n                    type: array\n                    description: Work request IDs\n                    items:\n                      type: string\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /light/{id}:\n    x-octane-tag:\n    - Lights\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A light ID string.\n      schema:\n        type: string\n        minimum: 1\n    get:\n      tags:\n      - Lights\n      summary: Return a light object with the specified ID.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  light:\n                    $ref: '#/components/schemas/Light'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Lights\n      summary: Allows control to a light.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  description: Allows control to state of a specific light.\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: Default is 0. 1 causes the light to turn on.\n                    dimLevel:\n                      type: integer\n                      description: Default is 0. \u003e 0 setting toggles the dim percentage\n                        of the light.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /octane/light:\n    x-octane-tag:\n    - Lights\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing light_* events.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/light_update:\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted when the state of a light is updated.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Light update\n                properties:\n                  id:\n                    type: string\n                    description: An ID number identifying this light fixture.\n                  serviced:\n                    type: string\n                    format: date-time\n                    description: UTC date time representing when the message was published.\n                    example: '2019-03-16T16:47:04.123-4:00'\n                  state:\n                    $ref: '#/components/schemas/LightState'\n  /octane/light_request:\n    x-octane-tag:\n    - Lights\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event published when request to change state was made on this light.\n      responses:\n        200:\n          description: Success\n          content:\n            '*/*':\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/Light'\n  /intersections:\n    x-octane-tag:\n    - Intersections\n    get:\n      tags:\n      - Intersections\n      summary: Return a list of intersection objects.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  intersections:\n                    type: array\n                    description: A list of modules supported by octane\n                    items:\n                      $ref: '#/components/schemas/Intersection'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Intersections\n      summary: Sets features on all configured intersections that support a feature.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    reset:\n                      type: boolean\n                      description: Request a reset of the timing on all traffic controllers.\n                        Reset is performed before other items in this request.\n                    enabled:\n                      type: boolean\n                      description: Request the signal heads for this intersection\n                        be switched on or off. This does not shut off the controller.\n                    flash:\n                      type: boolean\n                      description: Toggles the intersections between all way flash\n                        and a free timed mode.\n                    timePaused:\n                      type: boolean\n                      description: Pause or un-pause ring time of this intersection.\n                        Causes all lights to freeze in current state when set True.\n                    timeClearControl:\n                      type: integer\n                      description: Default is 0 - disabled. \u003e 0 setting causes control\n                        commands to be automatically cleared this input number of\n                        seconds.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestIDs:\n                    type: array\n                    description: Work request IDs\n                    items:\n                      type: string\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /intersection/{id}:\n    x-octane-tag:\n    - Intersections\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: An intersection ID string.\n      schema:\n        type: string\n        minimum: 1\n    get:\n      tags:\n      - Intersections\n      summary: Return an intersection object with the specified ID.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  intersection:\n                    $ref: '#/components/schemas/Intersection'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Intersections\n      summary: Allows control one to many phases within an intersection.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  description: 'All values are bit strings presenting phases 1-8 in\n                    descending order. Phase 1 and 6: 00100001'\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: Turn signal heads at this intersection on or off.\n                    omit:\n                      type: string\n                      description: Omit specified phases. A bit string representing\n                        request for all 8 phases in descending order.\n                      example: '00100001'\n                    hold:\n                      type: string\n                      description: Hold specified phases green. A bit string representing\n                        request for all 8 phases in descending order.\n                      example: '01000010'\n                    forceOff:\n                      type: string\n                      description: Force off specified phases. A bit string representing\n                        request for all 8 phases in descending order.\n                      example: '00100010'\n                    omitPedestrian:\n                      type: string\n                      description: Omit pedestrian call for specified phases. A bit\n                        string representing 8 phases in descending order.\n                      example: '00010001'\n                    callVehicle:\n                      type: string\n                      description: A vehicle call will be placed on specified phases.\n                        A bit string representing 8 phases in descending order.\n                      example: '00010001'\n                    callPedestrian:\n                      type: string\n                      description: A pedestrian call will be placed on specified phases.\n                        8 phases in descending order.\n                      example: '10001001'\n                    reset:\n                      type: boolean\n                      description: Request a reset of the timing on this traffic controller.\n                        Reset is performed before other items in this request.\n                    flash:\n                      type: boolean\n                      description: Toggles the intersection between an all way flash\n                        and a free timed mode.\n                    timePaused:\n                      type: boolean\n                      description: Pause or un-pause ring time of this intersection.\n                        Causes all lights to freeze in current state.\n                    timeClearControl:\n                      type: integer\n                      description: Default is 0 - disabled. Changing this per traffic\n                        controller causes control commands to be cleared after input\n                        number of seconds.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /intersection/{id}/phases:\n    x-octane-tag:\n    - Intersections\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: An intersection ID string.\n      schema:\n        type: integer\n        minimum: 1\n    get:\n      summary: Return list of phases configured for an intersection\n      tags:\n      - Intersections\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  phases:\n                    type: array\n                    description: A list of phases for this intersection\n                    items:\n                      $ref: '#/components/schemas/Phase'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /intersection/{id}/preempt/{preempt_id}:\n    x-octane-tag:\n    - Intersections\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: An intersection ID string.\n      schema:\n        type: string\n        minimum: 1\n    - in: path\n      name: preempt_id\n      required: true\n      description: An intersection preempt ID.\n      schema:\n        type: string\n        minimum: 1\n    patch:\n      tags:\n      - Intersections\n      summary: Allows enabling/disabling preconfigured preempt at an intersection.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: Enables or disables a given preempt configuration.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /intersection/{id}/signals:\n    x-octane-tag:\n    - Intersections\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: An intersection ID string.\n      schema:\n        type: integer\n        minimum: 1\n    get:\n      summary: Return list of traffic signal configured for an intersection\n      tags:\n      - Intersections\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  signals:\n                    type: array\n                    description: A list of signals for this intersection\n                    items:\n                      $ref: '#/components/schemas/Signal'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /intersection/{id}/crosswalks:\n    x-octane-tag:\n    - Intersections\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: An intersection ID string.\n      schema:\n        type: integer\n        minimum: 1\n    get:\n      summary: Return list of crosswalks within an intersection\n      tags:\n      - Intersections\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  crosswalks:\n                    type: array\n                    description: A list of crosswalks within this intersection\n                    items:\n                      $ref: '#/components/schemas/Crosswalk'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /intersection/{id}/rsus:\n    x-octane-tag:\n    - Intersections\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: An intersection ID string.\n      schema:\n        type: integer\n        minimum: 1\n    get:\n      summary: Return list of V2X RSUs connected to an intersection\n      tags:\n      - Intersections\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  crosswalks:\n                    type: array\n                    description: A list of crosswalks within this intersection\n                    items:\n                      $ref: '#/components/schemas/V2X'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /intersection/{id}/stages:\n    x-octane-tag:\n    - Intersections\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: An intersection ID string.\n      schema:\n        type: integer\n        minimum: 1\n    get:\n      summary: Return list of suggested control groupings for the intersection (stages)\n      tags:\n      - Intersections\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  stages:\n                    type: array\n                    description: A list of phases for this intersection\n                    items:\n                      $ref: '#/components/schemas/Stage'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /octane/intersection:\n    x-octane-tag:\n    - Intersections\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing intersection_* events.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/intersection_update:\n    x-octane-tag:\n    - Intersections\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted when the state of an intersection is updated.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Intersection event update\n                properties:\n                  id:\n                    type: string\n                    description: An ID number identifying this intersection\n                  serviced:\n                    type: string\n                    format: date-time\n                    description: UTC date time representing when the message was published.\n                    example: '2019-03-16T16:47:04.123-4:00'\n                  state:\n                    $ref: '#/components/schemas/IntersectionState'\n  /octane/intersection_request:\n    x-octane-tag:\n    - Intersections\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event published when request to change state was made on this intersection.\n      responses:\n        200:\n          description: Success\n          content:\n            '*/*':\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/Intersection'\n  /signals:\n    x-octane-tag:\n    - Signals\n    get:\n      tags:\n      - Signals\n      summary: Return a list of signal objects describing all instrumented signals\n        within the facility.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  signals:\n                    type: array\n                    description: A list of signals\n                    items:\n                      $ref: '#/components/schemas/Signal'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /signal/{id}:\n    x-octane-tag:\n    - Signals\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A signal ID string.\n      schema:\n        type: string\n        minimum: 1\n    get:\n      tags:\n      - Signals\n      summary: Return an signal object with the specified ID.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  signal:\n                    $ref: '#/components/schemas/Signal'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Signals\n      summary: Allows control of a single signal set.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  description: The specified object you are sending.\n                  type: object\n                  properties:\n                    reset:\n                      type: boolean\n                      description: Request a reset of the timing on this traffic controller.\n                        Reset is performed before other items in this request.\n                    flash:\n                      type: boolean\n                      description: Toggles the intersection between an all way flash\n                        and a free timed mode.\n                    left:\n                      type: object\n                      properties:\n                        color:\n                          type: string\n                          enum:\n                          - RED\n                          - YELLOW\n                          - GREEN\n                    right:\n                      type: object\n                      properties:\n                        color:\n                          type: string\n                          enum:\n                          - RED\n                          - YELLOW\n                          - GREEN\n                    straight:\n                      type: object\n                      properties:\n                        color:\n                          type: string\n                          enum:\n                          - RED\n                          - YELLOW\n                          - GREEN\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /octane/signal:\n    x-octane-tag:\n    - Signals\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing intersection_* events.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/signal_update:\n    x-octane-tag:\n    - Signals\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted on update of signal state.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Signal event update\n                properties:\n                  id:\n                    type: string\n                    description: An ID number identifying this signal\n                  serviced:\n                    type: string\n                    format: date-time\n                    description: UTC date time representing when the message was published.\n                    example: '2019-03-16T16:47:04.123-4:00'\n                  state:\n                    $ref: '#/components/schemas/SignalState'\n  /octane/signal_request:\n    x-octane-tag:\n    - Signals\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted when a request to a signal is being serviced.\n      responses:\n        200:\n          description: Success\n          content:\n            '*/*':\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/Signal'\n  /railcrossings:\n    x-octane-tag:\n    - Rail\n    get:\n      tags:\n      - Rail\n      summary: Return a list of rail crossing objects describing all instrumented\n        crossings within the facility.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  railcrossings:\n                    type: array\n                    description: A list of rail crossings\n                    items:\n                      $ref: '#/components/schemas/Railcrossing'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /railcrossing/{id}:\n    x-octane-tag:\n    - Rail\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A rail crossing ID string.\n      schema:\n        type: string\n        minimum: 1\n    get:\n      tags:\n      - Rail\n      summary: Return an rail crossing object with the specified ID.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  railcrossing:\n                    $ref: '#/components/schemas/Railcrossing'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Rail\n      summary: Updates an existing rail crossing status, allowing for triggering.\n        Returns request ID on success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    manualCall:\n                      type: boolean\n                      description: Activate rail crossing cycle (close, wait, open)\n                    manualCallTimeOverride:\n                      type: integer\n                      description: Specify a length of time the gate should stay in\n                        the closed position during a manual call. This setting does\n                        not persist.\n                    activated:\n                      type: boolean\n                      description: Activate or deactivate the rail crossing.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /octane/railcrossing:\n    x-octane-tag:\n    - Rail\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing railcrossing_* events.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/railcrossing_update:\n    x-octane-tag:\n    - Rail\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted on update of railcrossing state.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Rail crossing event update\n                properties:\n                  id:\n                    type: string\n                    description: An ID number identifying this rail crossing\n                  serviced:\n                    type: string\n                    format: date-time\n                    description: UTC date time representing when the message was published.\n                    example: '2019-03-16T16:47:04.123-4:00'\n                  state:\n                    $ref: '#/components/schemas/RailcrossingState'\n  /octane/railcrossing_request:\n    x-octane-tag:\n    - Rail\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted when a request to a railcrossing is being serviced.\n      responses:\n        200:\n          description: Success\n          content:\n            '*/*':\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/Railcrossing'\n  /crosswalks:\n    x-octane-tag:\n    - Crosswalks\n    get:\n      tags:\n      - Crosswalks\n      summary: Return a list of crosswalk objects describing all instrumented crossings\n        within the facility.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  crosswalks:\n                    type: array\n                    description: A list of crosswalks\n                    items:\n                      $ref: '#/components/schemas/Crosswalk'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /crosswalk/{id}:\n    x-octane-tag:\n    - Crosswalks\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A crosswalk ID number.\n      schema:\n        type: integer\n        minimum: 1\n    get:\n      tags:\n      - Crosswalks\n      summary: Return a crosswalk object with the specified ID.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  crosswalk:\n                    $ref: '#/components/schemas/Crosswalk'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Crosswalks\n      summary: Updates an existing crosswalk status, allowing for triggering. Returns\n        request ID on success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    callPedestrian:\n                      type: boolean\n                      description: Activate crosswalk cycle\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /octane/crosswalk:\n    x-octane-tag:\n    - Crosswalks\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing crosswalk_* events.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/crosswalk_update:\n    x-octane-tag:\n    - Crosswalks\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted on update of railcrossing state.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Crosswalk event update\n                properties:\n                  id:\n                    type: string\n                    description: An ID number identifying this crosswalk\n                  serviced:\n                    type: string\n                    format: date-time\n                    description: UTC date time representing when the message was published.\n                    example: '2019-03-16T16:47:04.123-4:00'\n                  state:\n                    $ref: '#/components/schemas/CrosswalkState'\n  /octane/crosswalk_request:\n    x-octane-tag:\n    - Crosswalks\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted when a request to a railcrossing is being serviced.\n      responses:\n        200:\n          description: Success\n          content:\n            '*/*':\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/Crosswalk'\n  /gates:\n    x-octane-tag:\n    - Gates\n    get:\n      tags:\n      - Gates\n      summary: Return a list of gate objects describing all instrumented gates within\n        the facility.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  gates:\n                    type: array\n                    description: A list of Gates\n                    items:\n                      $ref: '#/components/schemas/Gate'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /gate/{id}:\n    x-octane-tag:\n    - Gates\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A gate ID number.\n      schema:\n        type: integer\n        minimum: 1\n    get:\n      tags:\n      - Gates\n      summary: Return a gate object with the specified ID.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  gate:\n                    $ref: '#/components/schemas/Gate'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Gates\n      summary: Updates an existing gate status, allowing for triggering. Returns request\n        ID on success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    gateCall:\n                      type: boolean\n                      description: Activate gate cycle\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /octane/gate:\n    x-octane-tag:\n    - Gates\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing gate_* events.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/gate_update:\n    x-octane-tag:\n    - Gates\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted on update of gate state.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Gate event update\n                properties:\n                  id:\n                    type: string\n                    description: An ID number identifying this gate\n                  serviced:\n                    type: string\n                    format: date-time\n                    description: UTC date time representing when the message was published.\n                    example: '2019-03-16T16:47:04.123-4:00'\n                  state:\n                    $ref: '#/components/schemas/GateState'\n  /octane/gate_request:\n    x-octane-tag:\n    - Gates\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted when a request to a gate is being serviced.\n      responses:\n        200:\n          description: Success\n          content:\n            '*/*':\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/Gate'\n  /weather/alerts/current:\n    x-octane-tag:\n    - Weather\n    get:\n      tags:\n      - Weather\n      summary: Return the current weather alert\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  alerts:\n                    type: array\n                    description: A single weather alert\n                    items:\n                      $ref: '#/components/schemas/WeatherAlert'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /weather/alerts/{date}:\n    x-octane-tag:\n    - Weather\n    parameters:\n    - in: path\n      name: date\n      required: true\n      description: YYYY-MM-DD\n      schema:\n        type: string\n    get:\n      tags:\n      - Weather\n      summary: Return a list of weather alerts from given date\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  alerts:\n                    type: array\n                    description: A list of weather alerts\n                    items:\n                      $ref: '#/components/schemas/WeatherAlert'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /octane/weather:\n    x-octane-tag:\n    - Weather\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing weather_* events.\n      responses:\n        200:\n          description: Joined the weather channel.\n  /octane/weather_alert:\n    x-octane-tag:\n    - Weather\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted to users when a new weather alert is broadcast.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WeatherAlert'\n  /octane/weather_alert_update:\n    x-octane-tag:\n    - Weather\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted to users when a weather alert is sent to OCTANE.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Weather alert update update\n                properties:\n                  id:\n                    type: string\n                    description: An ID number identifying this weather alert\n                  serviced:\n                    type: string\n                    format: date-time\n                    description: UTC date time representing when the message was published.\n                    example: '2019-03-16T16:47:04.123-4:00'\n                  state:\n                    $ref: '#/components/schemas/WeatherAlertState'\n  /weather/stations:\n    x-octane-tag:\n    - Weather\n    get:\n      tags:\n      - Weather\n      summary: Return a list of WeatherStation objects.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  stations:\n                    type: array\n                    description: A list of modules supported by octane\n                    items:\n                      $ref: '#/components/schemas/WeatherStation'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /weather/station/{id}:\n    x-octane-tag:\n    - Weather\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A weather station ID string.\n      schema:\n        type: string\n        minimum: 1\n    get:\n      tags:\n      - Weather\n      summary: Return a station object with the specified ID.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  station:\n                    $ref: '#/components/schemas/WeatherStation'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /weather/{station}:\n    x-octane-tag:\n    - Weather\n    parameters:\n    - in: path\n      name: station\n      required: true\n      description: One of the valid weather stations\n      schema:\n        type: string\n        minimum: 1\n    get:\n      tags:\n      - Weather\n      summary: Return a list of the five most recent weather data points for a specific\n        station\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  weather:\n                    type: array\n                    description: A list of weather data points\n                    items:\n                      $ref: '#/components/schemas/Weather'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /weather/{station_id}/{date}:\n    x-octane-tag:\n    - Weather\n    parameters:\n    - in: path\n      name: station_id\n      required: true\n      description: Identifier for a weather station\n      schema:\n        type: string\n        minimum: 1\n    - in: path\n      name: date\n      required: true\n      description: Date in the following format dd-mm-yyyy\n      schema:\n        type: string\n        minimum: 1\n    get:\n      tags:\n      - Weather\n      summary: Return the weather observations for specific station at the specified\n        date\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  weather:\n                    type: array\n                    description: A list of all weather data points in the database\n                      for specific station and date\n                    items:\n                      $ref: '#/components/schemas/Weather'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /sensors:\n    x-octane-tag:\n    - Sensors\n    get:\n      tags:\n      - Sensors\n      summary: Return a list of sensors at this facility.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  sensors:\n                    type: array\n                    description: A list of Sensors\n                    items:\n                      $ref: '#/components/schemas/Sensor'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Sensors\n      summary: Updates a sensor state. Returns request ID on success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: Is the sensor on or off?\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /sensors/packages:\n    x-octane-tag:\n    - Sensors\n    get:\n      tags:\n      - Sensors\n      summary: Return a list of sensors packages and groupings from this facility.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  packages:\n                    type: array\n                    description: A list of Sensor packages\n                    items:\n                      $ref: '#/components/schemas/SensorPackage'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Sensors\n      summary: Updates a sensor state. Returns request ID on success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: Is the sensor on or off?\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /sensors/cameras:\n    x-octane-tag:\n    - Sensors\n    get:\n      tags:\n      - Sensors\n      summary: Return a list of cameras from this facility.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  cameras:\n                    type: array\n                    description: A list of Sensor cameras\n                    items:\n                      $ref: '#/components/schemas/SensorCamera'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Sensors\n      summary: Updates a sensor state. Returns request ID on success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: Is the sensor on or off?\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /sensors/lidars:\n    x-octane-tag:\n    - Sensors\n    get:\n      tags:\n      - Sensors\n      summary: Return a list of LIDAR sensors from this facility.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  lidars:\n                    type: array\n                    description: A list of Sensor LIDAR\n                    items:\n                      $ref: '#/components/schemas/SensorLIDAR'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Sensors\n      summary: Updates a sensor state. Returns request ID on success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: Is the sensor on or off?\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /sensors/radars:\n    x-octane-tag:\n    - Sensors\n    get:\n      tags:\n      - Sensors\n      summary: Return a list of RADAR sensors from this facility.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  radars:\n                    type: array\n                    description: A list of Sensor RADAR\n                    items:\n                      $ref: '#/components/schemas/SensorRADAR'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Sensors\n      summary: Updates a sensor state. Returns request ID on success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: Is the sensor on or off?\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /sensor/{id}:\n    x-octane-tag:\n    - Sensors\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A sensor ID string.\n      schema:\n        type: string\n        minimum: 1\n    get:\n      tags:\n      - Sensors\n      summary: Return information about a sensor.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  gate:\n                    $ref: '#/components/schemas/Sensor'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Sensors\n      summary: Updates a sensor state. Returns request ID on success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: Is the sensor on or off?\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /sensor/package/{id}:\n    x-octane-tag:\n    - Sensors\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A sensor ID string.\n      schema:\n        type: string\n        minimum: 1\n    get:\n      tags:\n      - Sensors\n      summary: Return information about a grouping of sensors, known as a sensor package,\n        with the specified ID.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  package:\n                    $ref: '#/components/schemas/SensorPackage'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Sensors\n      summary: Updates a sensor state. Returns request ID on success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: Is the sensor on or off?\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /sensor/camera/{id}:\n    x-octane-tag:\n    - Sensors\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A sensor ID string.\n      schema:\n        type: string\n        minimum: 1\n    get:\n      tags:\n      - Sensors\n      summary: Return information about a camera with the specified ID.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  camera:\n                    $ref: '#/components/schemas/SensorCamera'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Sensors\n      summary: Updates a sensor state. Returns request ID on success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: Is the sensor on or off?\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /sensor/lidar/{id}:\n    x-octane-tag:\n    - Sensors\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A sensor ID string.\n      schema:\n        type: string\n        minimum: 1\n    get:\n      tags:\n      - Sensors\n      summary: Return information about a LIDAR with the specified ID.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  lidar:\n                    $ref: '#/components/schemas/SensorLIDAR'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Sensors\n      summary: Updates a sensor state. Returns request ID on success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: Is the sensor on or off?\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /sensor/radar/{id}:\n    x-octane-tag:\n    - Sensors\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A sensor ID string.\n      schema:\n        type: string\n        minimum: 1\n    get:\n      tags:\n      - Sensors\n      summary: Return information about a RADAR with the specified ID.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  radar:\n                    $ref: '#/components/schemas/SensorRADAR'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Sensors\n      summary: Updates a sensor state. Returns request ID on success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: Is the sensor on or off?\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /octane/sensor:\n    x-octane-tag:\n    - Sensors\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing sensor_* events.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/sensor_update:\n    x-octane-tag:\n    - Sensors\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted when the state of a sensor is updated.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Sensor update\n                properties:\n                  id:\n                    type: string\n                    description: An ID number identifying this sensor\n                  serviced:\n                    type: string\n                    format: date-time\n                    description: UTC date time representing when the message was published.\n                    example: '2019-03-16T16:47:04.123-4:00'\n                  state:\n                    $ref: '#/components/schemas/SensorState'\n  /octane/sensor_request:\n    x-octane-tag:\n    - Sensors\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event published when request to change state was made on this sensor.\n      responses:\n        200:\n          description: Success\n          content:\n            '*/*':\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/SensorState'\n  /robots:\n    x-octane-tag:\n    - Robots\n    get:\n      tags:\n      - Robots\n      summary: Return a list of robots configured for this facility\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  robots:\n                    type: array\n                    description: A list of robots\n                    items:\n                      $ref: '#/components/schemas/Robot'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /robot/{id}:\n    x-octane-tag:\n    - Robots\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A robot ID string.\n      schema:\n        type: number\n        minimum: 1\n    get:\n      tags:\n      - Robots\n      summary: Return a information about a robot with the specified ID.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  robot:\n                    $ref: '#/components/schemas/Robot'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Robots\n      summary: Allows enabling/disabling control of a robot.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  description: Controls state of a specific robot related to motion.\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: Power on or off robot if controllable remotely.\n                        If robot is activated, deactivates robot. When this attribute\n                        is included and power is controllable, the activated and scenario\n                        attributes are ignored.\n                    activated:\n                      type: boolean\n                      description: Run the currently selected scenario. If robot is\n                        in manual mode and can be switched to automated, OCTANE will\n                        switch the robot or fail this request.\n                    scenario:\n                      description: The desired next scenario for this robot.\n                      type: object\n                      properties:\n                        id:\n                          type: number\n                          description: An ID number identifying this robot scenario\n                            inside OCTANE\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  robot:\n                    $ref: '#/components/schemas/Robot'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /robot/{id}/scenarios:\n    x-octane-tag:\n    - Robots\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A robot ID string.\n      schema:\n        type: number\n        minimum: 1\n    get:\n      tags:\n      - Robots\n      summary: Return a list of all configured/stored scenarios for a robot.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  scenarios:\n                    type: array\n                    description: A list of robots\n                    items:\n                      $ref: '#/components/schemas/RobotScenario'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /robot/{id}/scenario:\n    x-octane-tag:\n    - Robots\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A robot ID string.\n      schema:\n        type: string\n        minimum: 1\n    get:\n      tags:\n      - Robots\n      summary: The currently selected scenario for this robot.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RobotScenario'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    post:\n      tags:\n      - Robots\n      summary: Creates a new user defined scenario for this robot.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                scenario:\n                  $ref: '#/components/schemas/RobotScenario'\n      responses:\n        200:\n          description: Success, returns created scenario\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RobotScenario'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /robot/{id}/scenario/{scenarioId}:\n    x-octane-tag:\n    - Robots\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A robot ID number.\n      schema:\n        type: number\n        minimum: 1\n    - in: path\n      name: scenarioId\n      required: true\n      description: A robot scenario string.\n      schema:\n        type: number\n        minimum: 1\n    get:\n      tags:\n      - Robots\n      summary: Return a robot scenario with the specified ID.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  scenario:\n                    $ref: '#/components/schemas/RobotScenario'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    delete:\n      tags:\n      - Robots\n      summary: Removes a specified non-locked scenario\n      responses:\n        200:\n          description: Success\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /octane/robot:\n    x-octane-tag:\n    - Robots\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing robot_* events.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/robot_update:\n    x-octane-tag:\n    - Robots\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted when the state of a robot is updated.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Robot state update\n                properties:\n                  id:\n                    type: string\n                    description: An ID number identifying this robot.\n                  serviced:\n                    type: string\n                    format: date-time\n                    description: UTC date time representing when the message was published.\n                    example: '2019-03-16T16:47:04.123-4:00'\n                  state:\n                    $ref: '#/components/schemas/RobotState'\n  /octane/robot_activate:\n    x-octane-tag:\n    - Robots\n    post:\n      tags:\n      - WebSockets-Events\n      summary: Event submitted to request a start/stop of a robot in it's current\n        control state and scenario.\n      responses:\n        200:\n          description: Success\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              description: Payload for broadcasting a message via a RSU\n              properties:\n                id:\n                  description: Identifier of the Robot to control.\n                  type: string\n                payload:\n                  type: object\n                  description: Robot control similar to patch on REST endpoint\n                  properties:\n                    activated:\n                      description: Start/stop control mode.\n                      type: boolean\n                    scenario:\n                      description: The desired next scenario for this robot.\n                      type: object\n                      properties:\n                        id:\n                          type: number\n                          description: An ID number identifying this robot scenario\n                            inside OCTANE\n  /octane/robot_request:\n    x-octane-tag:\n    - Robots\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event published when request to change state was made on this robot.\n      responses:\n        200:\n          description: Success\n          content:\n            '*/*':\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/Robot'\n  /safety/equipment:\n    x-octane-tag:\n    - Safety\n    get:\n      summary: Return list of [Cones, Barrels, Delineators, Barricades, ...] safety\n        equipment\n      tags:\n      - Safety\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  equipment:\n                    properties:\n                      id:\n                        type: string\n                      equipment_type:\n                        $ref: '#/components/schemas/SafetyEquipmentType'\n                      state:\n                        properties:\n                          placed:\n                            type: boolean\n                          latitude:\n                            type: number\n                          longitude:\n                            type: number\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    delete:\n      summary: Resets the location and placed attribute of all safety equipment\n      tags:\n      - Safety\n      parameters:\n      - in: query\n        name: safety_equipment_type\n        required: false\n        description: The type of safety equipment you want reset, if none provided\n          all equipment is reset\n        schema:\n          $ref: '#/components/schemas/SafetyEquipmentType'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    type: string\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /safety/equipment/{id}:\n    x-octane-tag:\n    - Safety\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: An ID identifying the equipment, the equipment is not marked with\n        the ID\n      schema:\n        type: string\n        minimum: 1\n    - in: query\n      name: safety_equipment_type\n      required: true\n      description: The type of safety equipment\n      schema:\n        $ref: '#/components/schemas/SafetyEquipmentType'\n    get:\n      summary: Returns a single piece of safety equipment with the specified ID.\n      tags:\n      - Safety\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  safetyEquipment:\n                    type: object\n                    properties:\n                      id:\n                        type: string\n                      ephemeral_type:\n                        $ref: '#/components/schemas/SafetyEquipmentType'\n                      state:\n                        properties:\n                          placed:\n                            type: boolean\n                          latitude:\n                            type: number\n                          longitude:\n                            type: number\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Safety\n      summary: Allows update of a single piece of safety equipment\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  description: Describe the stat of a single piece of safety equipment\n                  type: object\n                  properties:\n                    latitude:\n                      type: number\n                      description: Set latitude of equipment\n                    longitude:\n                      type: number\n                      description: Set longitude of equipment\n                    placed:\n                      type: boolean\n                      description: Mark the equipment as placed (does not prevent\n                        subsequent updates)\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /maintenance:\n    get:\n      tags:\n        - Maintenance\n      summary: Return a list of all maintenance equipment\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  maintenance:\n                    type: array\n                    description: A list of maintenance devices supported by octane\n                    items:\n                      $ref: '#/components/schemas/MaintenanceEquipment'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /maintenance/lawnmowers:\n    get:\n      tags:\n        - Maintenance\n      summary: Return a list of lawnmower objects\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  lawnmowers:\n                    type: array\n                    description: A list of lawnmowers supported by octane\n                    items:\n                      $ref: '#/components/schemas/LawnMower'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /maintenance/lawnmower/{id}:\n    parameters:\n      - in: path\n        name: id\n        required: true\n        description: A unique identifier for the lawnmower\n        schema:\n          type: string\n          minimum: 1\n    get:\n      tags:\n        - Maintenance\n      summary: Return the current location and state of the lawnmower\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LawnMower'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n        - Maintenance\n      summary: Change the state of a lawnmower\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  description: Controls the running state of the lawnmower\n                  type: object\n                  properties:\n                    mowerCall:\n                      type: string\n                      description: \"Change the mowing state of the mower (start or stop)\"\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /facilities:\n    x-octane-tag:\n    - Facility\n    get:\n      tags:\n      - Facility\n      summary: Return information about facilities managed by this OCTANE instance.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  facilities:\n                    type: array\n                    description: Facilities configured in this octane instance that\n                      the user has access to.\n                    items:\n                      $ref: '#/components/schemas/Facility'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /facility:\n    x-octane-tag:\n    - Facility\n    get:\n      tags:\n      - Facility\n      summary: Return information about the primary reservation facility and current\n        reservation.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  facility:\n                    $ref: '#/components/schemas/Facility'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /facility/chat:\n    x-octane-tag:\n    - Facility\n    post:\n      tags:\n      - Facility\n      summary: Post a message to the facility chat through ReST.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              description: A message that a user wants to send via facility chat.\n              properties:\n                message:\n                  type: string\n                  description: The message to be sent to other users of the system.\n                user:\n                  type: string\n                  description: Username to send with message.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: The message sent.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /facility/notification:\n    x-octane-tag:\n    - Facility\n    post:\n      tags:\n      - Facility\n      summary: 'TOKEN TYPE: ADMIN. Post a message to the facility notification system.'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              description: A message that a user wants to send via facility chat.\n              properties:\n                message:\n                  type: string\n                  description: The message to be sent to other users of the system.\n                type:\n                  type: string\n                  description: A type describing the message\n                  enum:\n                  - NOTIFY\n                  - WEATHER\n                  - SCHEDULE\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: The notification sent.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /octane/facility:\n    x-octane-tag:\n    - Facility\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing facility_* events.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/facility_message:\n    x-octane-tag:\n    - Facility\n    get:\n      tags:\n      - WebSockets-Events\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FacilityMessage'\n  /octane/facility_request:\n    x-octane-tag:\n    - Facility\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted for facility wide requests.\n      responses:\n        200:\n          description: Success\n          content:\n            '*/*':\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/Facility'\n  /octane/facility_update:\n    x-octane-tag:\n    - Facility\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted for facility wide status updates.\n      responses:\n        200:\n          description: Success\n          content:\n            '*/*':\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/Facility'\n  /v2x:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - V2X\n      summary: Return a list of V2X devices known to OCTANE.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  v2xs:\n                    type: array\n                    description: A list of V2X devices.\n                    items:\n                      $ref: '#/components/schemas/V2X'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /v2x/rsus:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - V2X\n      summary: Return a list of V2X RSUs known to OCTANE.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  rsus:\n                    type: array\n                    description: A list of V2X RSU devices.\n                    items:\n                      $ref: '#/components/schemas/V2X'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - V2X\n      summary: Updates all existing and capable V2x RSUs. Returns request ID on success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: Is the radio on or off?\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /v2x/obus:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - V2X\n      summary: Return a list of V2X OBUs known to OCTANE.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  obus:\n                    type: array\n                    description: A list of V2X OBU devices.\n                    items:\n                      $ref: '#/components/schemas/V2X'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - V2X\n      summary: Updates an existing and capable V2X OBUs. Returns request ID on success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: Is the radio on or off?\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /v2x/vrus:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - V2X\n      summary: Return a list of V2X Vulnerable Road Users (VRUs) known to OCTANE.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  vrus:\n                    type: array\n                    description: A list of V2X VRUs.\n                    items:\n                      $ref: '#/components/schemas/V2X'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /v2x/{id}:\n    x-octane-tag:\n    - V2X\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A V2X ID number.\n      schema:\n        type: integer\n        minimum: 1\n    get:\n      tags:\n      - V2X\n      summary: Return a v2x object with the specified ID.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  v2x:\n                    $ref: '#/components/schemas/V2X'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - V2X\n      summary: Updates an existing v2x status, allowing for triggering. Returns request\n        ID on success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: Is the radio on or off?\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /v2x/vru/{id}:\n    x-octane-tag:\n    - V2X\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A V2X Vulnerable Road User identifier number.\n      schema:\n        type: integer\n        minimum: 1\n    get:\n      tags:\n      - V2X\n      summary: Return a v2x object with the specified ID.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  vru:\n                    $ref: '#/components/schemas/V2X'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /v2x/rsu/{id}:\n    x-octane-tag:\n    - V2X\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A V2X ID number.\n      schema:\n        type: integer\n        minimum: 1\n    get:\n      tags:\n      - V2X\n      summary: Return a v2x object with the specified ID.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  rsu:\n                    $ref: '#/components/schemas/V2X'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - V2X\n      summary: Updates an existing v2x status, allowing for triggering. Returns request\n        ID on success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: Is the radio on or off?\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /v2x/rsu/{id}/bsm:\n    x-octane-tag:\n    - V2X\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A V2X ID number.\n      schema:\n        type: integer\n        minimum: 1\n    post:\n      tags:\n      - V2X\n      summary: For RSUs with support, pack posted data into active protocol format\n        and broadcasts the BSM.  Request body type allows for sending a pre-packed\n        message to be sent as a direct payload or for a JSON format that will be encoded\n        to the appropriate message format and broadcast serverside. request ID on\n        success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/V2XBSM'\n          application/octet-stream:\n            schema:\n              type: object\n      responses:\n        200:\n          description: Success\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /v2x/rsu/{id}/bsms:\n    x-octane-tag:\n    - V2X\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A V2X ID number.\n      schema:\n        type: integer\n        minimum: 1\n    post:\n      tags:\n      - V2X\n      summary: For RSUs with support, pack posted data into active protocol format\n        and broadcasts each row through the BSM. request ID on success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/V2XBSM'\n      responses:\n        200:\n          description: Success\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /v2x/rsu/{id}/psm:\n    x-octane-tag:\n    - V2X\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A V2X RSU ID number.\n      schema:\n        type: integer\n        minimum: 1\n    post:\n      tags:\n      - V2X\n      summary: For RSUs with support, pack posted data into active protocol format\n        and broadcasts the PSM. Request body type allows for sending a pre-packed\n        message to be sent as a direct payload or for a JSON format that will be encoded\n        to the appropriate message format and broadcast server side. request ID on\n        success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/V2XPSM'\n          application/octet-stream:\n            schema:\n              type: object\n      responses:\n        200:\n          description: Success\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /v2x/obu/{id}:\n    x-octane-tag:\n    - V2X\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A V2X ID number.\n      schema:\n        type: integer\n        minimum: 1\n    get:\n      tags:\n      - V2X\n      summary: Return a v2x object with the specified ID.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  obu:\n                    $ref: '#/components/schemas/V2X'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - V2X\n      summary: Updates an existing v2x status, allowing for triggering. Returns request\n        ID on success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: is the radio on or off?\n                    longitude:\n                      type: number\n                      description: The longitude of the V2X device.\n                    latitude:\n                      type: number\n                      description: The latitude of the V2X device.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /octane/v2x:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing requests and updates from V2X devices.\n        Provides notifications when new devices are heard from.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/v2x_rsu_raw:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing raw v2x_* events from all known RSUs.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/v2x_vru_raw:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing raw v2x_* events from all known VRUs.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/v2x_obu_raw:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing raw v2x_* events from all known OBUs.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/v2x_rsu_parsed:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing raw v2x_* events from all known RSUs.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/v2x_vru_parsed:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing raw v2x_* events from all known VRUs.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/v2x_obu_parsed:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing raw v2x_* events from all known OBUs.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/v2x_rsu_[id]_raw:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing all raw v2x_* events from a specific RSU.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/v2x_obu_[id]_raw:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing all raw v2x_* events from a specific OBU.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/v2x_rsu_[id]_parsed:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: JSON formatted version of events from a specific RSU.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/v2x_obu_[id]_parsed:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: formatted version of events from a specific OBU.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/v2x_update:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted on update of V2X device state.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                description: V2X Device update\n                properties:\n                  id:\n                    type: string\n                    description: An ID number identifying this V2X Device\n                  serviced:\n                    type: string\n                    format: date-time\n                    description: UTC date time representing when the message was published.\n                    example: '2019-03-16T16:47:04.123-4:00'\n                  state:\n                    $ref: '#/components/schemas/V2X'\n  /octane/v2x_request:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted on request to a V2X device.\n      responses:\n        200:\n          description: Success\n          content:\n            '*/*':\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/V2X'\n  /octane/v2x_new:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - WebSockets-Events\n      summary: COMING SOON - Event emitted when a new V2X device is heard from and\n        added to the V2X device listing.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/V2X'\n  /octane/v2x_raw:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted on message between V2X devices.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2XRaw'\n  /octane/v2x_SPaT:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - WebSockets-Events\n      summary: On receipt of a V2X SPaT message, this event is emitted with a parsed\n        version of the message.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/V2XSPaT'\n  /octane/v2x_BSM:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - WebSockets-Events\n      summary: On receipt of a V2X BSM message, this event is emitted with a parsed\n        version of the message.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2XBSM'\n    post:\n      tags:\n      - WebSockets-Events\n      summary: Broadcast a V2X BSM message through an RSU\n      responses:\n        200:\n          description: Success\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              description: Payload for broadcasting a message via a RSU\n              properties:\n                id:\n                  description: Identifier of the RSU to broadcast the message\n                  type: string\n                payload:\n                  $ref: '#/components/schemas/V2XBSM'\n  /octane/v2x_PSM:\n    x-octane-tag:\n    - V2X\n    get:\n      tags:\n      - WebSockets-Events\n      summary: On receipt of a V2X PSM message, this event is emitted with a parsed\n        version of the message.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2XPSM'\n    post:\n      tags:\n      - WebSockets-Events\n      summary: Broadcast a V2X PSM message through an RSU\n      responses:\n        200:\n          description: Success\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              description: Payload for broadcasting a message via a RSU\n              properties:\n                id:\n                  description: Identifier of the RSU to broadcast the message\n                  type: string\n                payload:\n                  $ref: '#/components/schemas/V2XPSM'\n  /management/modules:\n    x-octane-tag:\n    - Management\n    get:\n      tags:\n      - Management\n      summary: Return a list of Modules supported by this instance of Octane\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  modules:\n                    type: array\n                    description: A list of modules supported by octane\n                    example:\n                    - Crosswalk\n                    - Intersections\n                    - V2X\n                    - Facilities\n                    - Signals\n                    - Lights\n                    - Scenarios\n                    - Railcrossings\n                    - Crosswalks\n                    - Gates\n                    - Sensors\n                    - Safety\n                    - Garages\n                    - Websockets\n                    - Management\n                    - Edge\n                    - Maintenance\n                    - Weather\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        500:\n          description: Internal server error\n  /management/favorites:\n    x-octane-tag:\n    - Management\n    get:\n      tags:\n      - Management\n      summary: Retrieve list of all favorites.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  favorites:\n                    type: array\n                    description: A list of the users Favorite items from each module.\n                    items:\n                      $ref: '#/components/schemas/Favorite'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /management/favorite:\n    x-octane-tag:\n    - Management\n    post:\n      tags:\n      - Management\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                moduleName:\n                  type: string\n                favoriteID:\n                  type: integer\n      summary: Add a favorite to database.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Favorite'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /management/favorite/{moduleName}/{favoriteId}:\n    x-octane-tag:\n    - Management\n    delete:\n      parameters:\n      - name: moduleName\n        in: path\n        required: true\n        description: Type of infrastructure\n        schema:\n          type: string\n          description: Type of infrastructure\n      - name: favoriteId\n        in: path\n        required: true\n        description: Type of infrastructure id\n        schema:\n          type: integer\n          description: Type of infrastructure id\n      tags:\n      - Management\n      summary: Delete a favorite from the database.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                description: A message regarding the status of the deletion.\n                properties:\n                  message:\n                    type: string\n                    description: The delete request was successful.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /management/polling/intersections:\n    x-octane-tag:\n    - Management\n    patch:\n      tags:\n      - Management\n      summary: 'TOKEN TYPE: ADMIN. Start/Stop Intersection Traffic signal polling.'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                      description: Starts or terminates all polling processes.\n        description: Modifications to the process that controls intersection updates\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /management/facility/reset:\n    x-octane-tag:\n    - Management\n    post:\n      tags:\n      - Management\n      summary: 'TOKEN TYPE: USER. Reset controllable items within the facility.'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: object\n                  properties:\n                    confirm:\n                      type: boolean\n                      description: Confirms the reset of the facility.\n        description: Modify the state of all devices in the facility\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /management/device/callback:\n    x-octane-tag:\n    - Management\n    post:\n      tags:\n      - Management\n      summary: 'TOKEN TYPE: DEVICE. Handles callbacks from physical devices connected\n        to API.'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                data:\n                  type: string\n                  description: Data from event\n                event:\n                  type: string\n                  description: Remote Event name\n                coreid:\n                  type: string\n                  description: Device ID of calling device\n                published_at:\n                  type: string\n                  description: The time this event was published.\n        description: External devices use this to modify state of API managed device\n          state.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  requestID:\n                    type: string\n                    description: Work request ID.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /requests/queued:\n    x-octane-tag:\n    - Requests\n    get:\n      summary: Return information of all jobs queued by this user.\n      tags:\n      - Requests\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  queuedJobs:\n                    type: array\n                    items:\n                      properties:\n                        createdAt:\n                          type: string\n                          format: date-time\n                          description: Time given request was created\n                          example: '2019-03-16T16:47:04.123-4:00'\n                        enqueuedAt:\n                          type: string\n                          format: date-time\n                          description: Time given request was enqueued\n                          example: '2019-03-16T16:47:04.123-4:00'\n                        jobType:\n                          type: string\n                          description: Type of request\n                        timeInQueue:\n                          type: string\n                          format: date-time\n                          description: Time request has been in current status\n                          example: '2019-03-16T16:47:04.123-4:00'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /requests/failed:\n    x-octane-tag:\n    - Requests\n    get:\n      summary: Return information of all jobs requested by this user in a failed state.\n      tags:\n      - Requests\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  failedJobs:\n                    type: array\n                    items:\n                      properties:\n                        createdAt:\n                          type: string\n                          format: date-time\n                          description: Time given request was created\n                          example: '2019-03-16T16:47:04.123-4:00'\n                        enqueuedAt:\n                          type: string\n                          format: date-time\n                          description: Time given request was enqueued\n                          example: '2019-03-16T16:47:04.123-4:00'\n                        jobType:\n                          type: string\n                          description: Type of request\n                        timeInQueue:\n                          type: string\n                          format: date-time\n                          description: Time request has been in current status\n                          example: '2019-03-16T16:47:04.123-4:00'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /requests/job/{id}:\n    x-octane-tag:\n    - Requests\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A request ID string\n      schema:\n        type: string\n        minimum: 1\n    get:\n      summary: Return information of request with given id\n      tags:\n      - Requests\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  failedRequests:\n                    properties:\n                      createdAt:\n                        type: string\n                        format: date-time\n                        description: Time given request was created\n                        example: '2019-03-16T16:47:04.123-4:00'\n                      enqueuedAt:\n                        type: string\n                        format: date-time\n                        description: Time given request was enqueued\n                        example: '2019-03-16T16:47:04.123-4:00'\n                      status:\n                        type: string\n                        description: Current status of given request\n                      description:\n                        type: string\n                        description: Type of request\n                      timeInStatus:\n                        type: string\n                        format: date-time\n                        description: Time request has been in current status\n                        example: '2019-03-16T16:47:04.123-4:00'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /requests/job/{type}/queued:\n    x-octane-tag:\n    - Requests\n    parameters:\n    - in: path\n      name: type\n      required: true\n      description: A request type string.\n      schema:\n        type: string\n        minimum: 1\n    get:\n      summary: Return list of queued {type} requests\n      tags:\n      - Requests\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  queuedRequests:\n                    type: string\n                    description: Request ID for queued requests of given type.\n  /requests/job/{type}/failed:\n    x-octane-tag:\n    - Requests\n    parameters:\n    - in: path\n      name: type\n      required: true\n      description: A requests type string.\n      schema:\n        type: string\n        minimum: 1\n    get:\n      summary: Return list of failed {type} requests\n      tags:\n      - Requests\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  failedRequests:\n                    type: string\n                    description: Request ID for failed requests of given type.\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /sessions:\n    x-octane-tag:\n    - Sessions\n    get:\n      tags:\n      - Sessions\n      summary: 'TOKEN TYPE: ADMIN. Lists all active sessions across all facilities.'\n      description: Lists sessions and their users. A list of currently active, valid,\n        and non-expired sessions.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  sessions:\n                    type: array\n                    description: A list of sessions managed by this octane instance\n                    items:\n                      type: object\n                      properties:\n                        email:\n                          type: string\n                          description: Email address of session owner.\n                        sessionType:\n                          type: string\n                          description: Event Identifier\n                        dateValid:\n                          type: string\n                          format: date-time\n                          description: UTC valid date time\n                          example: '2019-03-16T16:47:04.123-4:00'\n                        dateExpire:\n                          type: string\n                          format: date-time\n                          description: UTC expiration date time\n                          example: '2019-03-16T16:47:04.123-4:00'\n                        facilities:\n                          type: array\n                          items:\n                            type: string\n                            description: Name of the facility which session has access.\n                          example:\n                          - Mcity\n                          - Urban\n                          - Highway\n                          - Garage\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /session:\n    x-octane-tag:\n    - Sessions\n    get:\n      tags:\n      - Sessions\n      summary: Current session information.\n      description: Information about the current requesting user session.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  session:\n                    type: object\n                    description: A set of information about the user session.\n                    properties:\n                      email:\n                        type: string\n                        description: Email address of session owner.\n                      sessionType:\n                        type: string\n                        description: Event Identifier\n                      dateValid:\n                        type: string\n                        format: date-time\n                        description: UTC valid date time\n                        example: '2019-03-16T16:47:04.123-4:00'\n                      dateExpire:\n                        type: string\n                        format: date-time\n                        description: UTC expiration date time\n                        example: '2019-03-16T16:47:04.123-4:00'\n                      facilities:\n                        type: array\n                        items:\n                          type: string\n                          description: Name of the facility which session has access.\n                        example:\n                        - Mcity\n                        - Urban\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    post:\n      tags:\n      - Sessions\n      summary: 'TOKEN TYPE: SCHEDULING. Creates a new USER type token with API access\n        between a specific date and time.'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  description: Email address of token owner.\n                desc:\n                  type: string\n                  description: Event Identifier\n                dateValid:\n                  type: string\n                  format: date-time\n                  description: UTC valid date time\n                  example: '2019-03-16T16:47:04-04:00'\n                dateExpire:\n                  type: string\n                  format: date-time\n                  description: UTC expiration date time\n                  example: '2019-03-16T16:47:04-04:00'\n                facilities:\n                  type: array\n                  items:\n                    type: string\n                    description: Name of the facility which session has access.\n                  example:\n                  - Mcity\n                  - Urban\n                  - Highway\n                  - Garage\n        description: Request for a new token to be created. Dates are in format of\n          2019-03-16T16:47:04-04:00\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  token:\n                    type: string\n                    description: Newly generated access token\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /octane/ipc:\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel for IPC/Timing messages. Publishes user_* events.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/ipc_message:\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted to other users when a client emits an IPC message to\n        others listening.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IPCMessage'\n  /octane/user:\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel for direct messages. Publishes user_* events.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/user_message:\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted to other users when a user emits in the user channel.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserMessage'\n    post:\n      tags:\n      - WebSockets-Events\n      summary: Event to be submitted for broadcast to the user channel only.\n      responses:\n        200:\n          description: Success\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              description: A message a user wants to broadcast\n              properties:\n                message:\n                  type: string\n                  description: The message to be sent to other users of the system.\n                user:\n                  type: string\n                  description: Username to send with message. Optional.\n  /octane/join:\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted to other users when a user joins a channel successfully.\n      responses:\n        200:\n          description: Success\n    post:\n      tags:\n      - WebSockets-Events\n      summary: Event to be submitted for user to join a specified channel.\n      responses:\n        200:\n          description: Success\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              description: The channel a user wishes to join.\n              properties:\n                channel:\n                  type: string\n                  description: Channel to join.\n  /octane/leave:\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted to other users when a user leaves a channel successfully.\n      responses:\n        200:\n          description: Success\n    post:\n      tags:\n      - WebSockets-Events\n      summary: Event to be submitted for user to leave a specified channel.\n      responses:\n        200:\n          description: Success\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              description: The channel a user wishes to leave\n              properties:\n                channel:\n                  type: string\n                  description: Channel to leave.\n  /octane/auth:\n    post:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted to server when user wishes to authenticate.\n      responses:\n        200:\n          description: Success\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              description: The channel a user wishes to leave\n              properties:\n                x-api-key:\n                  type: string\n                  description: The authentication token to login to the socket feed\n                    with.\n  /octane/auth_ok:\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted on success of authentication.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: OK\n  /octane/auth_fail:\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted to user if authentication through socket.io fails. User\n        is then disconnected.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Message describing why the authentication failed.\n  /octane/channels:\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Emitted in response to request for OCTANE channels.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    name:\n                      type: string\n                      description: Channel name\n                    subscribed:\n                      type: boolean\n                      description: User is currently subscribed to this channel.\n    post:\n      tags:\n      - WebSockets-Events\n      summary: Event to be submitted to request current users channels and all valid\n        channels.\n      responses:\n        200:\n          description: Success\n  /scenarios:\n    x-octane-tag:\n    - Scenarios\n    get:\n      tags:\n      - Scenarios\n      summary: Return a list of scenario objects.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  scenarios:\n                    type: array\n                    description: A list of modules supported by octane\n                    items:\n                      $ref: '#/components/schemas/Scenario'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        500:\n          description: Internal server error\n  /scenario/{id}:\n    x-octane-tag:\n    - Scenarios\n    parameters:\n    - in: path\n      name: id\n      required: true\n      description: A scenario id string.\n      schema:\n        type: string\n        minimum: 1\n    get:\n      tags:\n      - Scenarios\n      summary: Return a scenario object with the specified id\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  scenario:\n                    $ref: '#/components/schemas/Scenario'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Scenarios\n      summary: Update an existing scenario\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                scenario:\n                  type: object\n                  properties:\n                    name:\n                      type: string\n                      description: Name of the scenario\n                    workspace:\n                      type: string\n                      description: The XML structure containing the code to be run\n                        in the scenario\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  scenario:\n                    $ref: '#/components/schemas/Scenario'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    delete:\n      tags:\n      - Scenarios\n      summary: Delete a scenario from the database\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                description: A message regarding the status of the deletion.\n                properties:\n                  message:\n                    type: string\n                    description: The delete request was successful.\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /scenario:\n    x-octane-tag:\n    - Scenarios\n    post:\n      tags:\n      - Scenarios\n      summary: Create a new scenario object\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                scenario:\n                  type: object\n                  properties:\n                    name:\n                      type: string\n                      description: Name of the scenario\n                    workspace:\n                      type: string\n                      description: The XML structure containing the code to be run\n                        in the scenario\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  scenario:\n                    $ref: '#/components/schemas/Scenario'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /beacons:\n    get:\n      tags:\n      - Beacons\n      summary: Return a list of beacons available for your session\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  beacons:\n                    type: array\n                    description: A list of beacons\n                    items:\n                      $ref: '#/components/schemas/Beacon'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /beacon/:\n    post:\n      tags:\n      - Beacons\n      summary: Create a new session specific beacon\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                beacon:\n                  $ref: '#/components/schemas/Beacon'\n            example:\n              id_string: 0A1B2C3D4E5F\n              name: Mcity RTK Device\n              description: Mcity RTK Device mounted on cone\n              host:\n                width: 0.35\n                length: 0.35\n                height: 0.7\n              hostLocation:\n                x: 0.17\n                y: 0.17\n                z: 0.7\n              octaneAssociation:\n                module: ARROW_BOARD\n                id: 2\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Beacon'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /beacon/{idString}:\n    parameters:\n    - in: path\n      name: idString\n      required: true\n      description: The unique identifying string for the beacon\n      schema:\n        type: string\n        minimum: 2\n    get:\n      tags:\n      - Beacons\n      summary: Return a information about a beacon with the specified ID.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  beacon:\n                    $ref: '#/components/schemas/Beacon'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    patch:\n      tags:\n      - Beacons\n      summary: Update the state of a specific beacon\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                state:\n                  $ref: '#/components/schemas/BeaconState'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  beacon:\n                    $ref: '#/components/schemas/Beacon'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n    delete:\n      tags:\n      - Beacons\n      summary: Delete a session specific beacon\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  beacon:\n                    $ref: '#/components/schemas/Beacon'\n        400:\n          $ref: '#/components/responses/PoorFormError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: Internal server error\n  /octane/beacon:\n    get:\n      tags:\n      - WebSockets-Channels\n      summary: Channel used for publishing beacon_* events.\n      responses:\n        200:\n          description: Join of Channel\n  /octane/beacon_update:\n    get:\n      tags:\n      - WebSockets-Events\n      summary: Event emitted when the state of a beacon is updated.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Beacon state update\n                properties:\n                  id:\n                    type: string\n                    description: An ID number identifying this beacon.\n                  serviced:\n                    type: string\n                    format: date-time\n                    description: UTC date time representing when the message was published.\n                    example: '2019-03-16T16:47:04.123-4:00'\n                  state:\n                    $ref: '#/components/schemas/BeaconState'\n  /octane/beacon_message:\n    post:\n      tags:\n      - WebSockets-Events\n      summary: Event submitted to update the current state of a beacon\n      responses:\n        200:\n          description: Success\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              description: Payload for updating the state of a Beacon\n              properties:\n                id_string:\n                  description: Identifier for the Beacon\n                  type: string\n                state:\n                  $ref: '#/components/schemas/BeaconState'\nexternalDocs:\n  description: Mcity website\n  url: https://mcity.umich.edu\ncomponents:\n  responses:\n    UnauthorizedError:\n      description: Authorization Error - API key is missing or invalid\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/APIError'\n    PoorFormError:\n      description: Request to this endpoint was not appropriately formed.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/APIError'\n    NotFoundError:\n      description: Requested ID does not exist.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/APIError'\n    NotAllowedError:\n      description: Request was denied because resource does not support this action,\n        or the action results in an invalid state.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/APIError'\n  securitySchemes:\n    APIKeyHeader:\n      type: apiKey\n      description: Tokens that expire sent to users to utilize the API\n      in: header\n      name: X-API-KEY\n  schemas:\n    Stage:\n      type: object\n      description: Describes a suggested control grouping for an intersection. Stages\n        are lights that work together to make non-conflicting sets of phases.\n      properties:\n        name:\n          type: string\n          description: A text description of the phases controlled by this stage.\n        controlGroup:\n          type: string\n          description: A bit string that can be used to hold/omit/force off or utilize\n            other control functions for non-conflicting portions of an intersection\n            or signal.\n          example: '00100001'\n    Phase:\n      type: object\n      description: Describes a set of one or more signal heads that are wired together,\n        all heads will show the same indication\n      properties:\n        number:\n          type: integer\n          description: The phase number as configured on the traffic controller\n        bound:\n          type: string\n          description: The direction of traffic this phase controls. A signal with\n            this phase would face the opposite direction.\n          enum:\n          - north\n          - south\n          - east\n          - west\n        turn:\n          type: string\n          description: Direction of movement this signal is setup to control\n          enum:\n          - left\n          - right\n          - through\n        stopBar:\n          type: object\n          description: A list of lat/long points representing the upper left, upper\n            right, lower left, and lower right corners of the stop bar corresponding\n            to the phase.\n          properties:\n            ul:\n              type: object\n              description: A latitude/longitude pair representing the upper left point\n                of the stop bar.\n              properties:\n                latitude:\n                  type: number\n                  description: Upper left latitude stop bar location\n                longitude:\n                  type: number\n                  description: Upper left longitude stop bar location\n            ur:\n              type: object\n              description: A latitude/longitude pair representing the upper right\n                point of the stop bar.\n              properties:\n                latitude:\n                  type: number\n                  description: Upper right latitude stop bar location\n                longitude:\n                  type: number\n                  description: Upper right longitude stop bar location\n            ll:\n              type: object\n              description: A latitude/longitude pair representing the lower left point\n                of the stop bar.\n              properties:\n                latitude:\n                  type: number\n                  description: Lower left latitude stop bar location\n                longitude:\n                  type: number\n                  description: Lower left longitude stop bar location\n            lr:\n              type: object\n              description: A latitude/longitude pair representing the lower right\n                point of the stop bar.\n              properties:\n                latitude:\n                  type: number\n                  description: Lower right latitude stop bar location\n                longitude:\n                  type: number\n                  description: Lower right longitude stop bar location\n    Signal:\n      type: object\n      description: Describes a collection of signal heads facing a specific direction/mount\n        type. Their state is also known as a PHASE in traffic control systems.\n      required:\n      - id\n      properties:\n        id:\n          type: integer\n          description: An ID number identifying this signal set\n        uri:\n          type: string\n          description: The URI which can be used to access this signal set directly\n        name:\n          type: string\n          description: A text based description of the signal\n        url:\n          type: string\n          description: A url with more information about this specific signal\n        longitude:\n          type: number\n          description: The longitude of the centroid of the signal set\n        latitude:\n          type: number\n          description: The latitude of the centroid of the signal set\n        instrument:\n          type: string\n          enum:\n          - light\n          nullable: true\n          description: The signal type\n        directionFacing:\n          type: string\n          enum:\n          - north\n          - east\n          - south\n          - west\n          description: The direction the signal head is facing\n        directionTraffic:\n          type: string\n          enum:\n          - north\n          - east\n          - south\n          - west\n          description: The direction of traffic this signal controls.\n        orientation:\n          type: string\n          description: Describes the mounting orientation of the signal heads\n          enum:\n          - horizontal\n          - vertical\n        height:\n          type: number\n          description: Height of signal head to road surface in facility units.\n          nullable: true\n        pole:\n          type: boolean\n          description: Is signal mounted to a side pole.\n        mast:\n          type: boolean\n          description: Is signal mounted to a mast off the pole pole.\n        mastAngle:\n          type: boolean\n          description: Is mast angled off the pole\n        wire:\n          type: boolean\n          description: Is the signal mounted by wire to the mast or pole\n        backplate:\n          type: boolean\n          description: Does the signal have a backplate?\n        left:\n          type: boolean\n          description: This signal set has a signal pointing in this direction\n        right:\n          type: boolean\n          description: This signal set has a signal pointing in this direction\n        straight:\n          type: boolean\n          description: This signal set has a signal pointing in this direction\n        state:\n          $ref: '#/components/schemas/SignalState'\n    SignalState:\n      type: object\n      description: The current state of the signal set\n      properties:\n        left:\n          type: object\n          description: The current state left turn signal if present\n          nullable: true\n          properties:\n            color:\n              type: string\n              description: Color of signal if active\n              nullable: true\n              enum:\n              - RED\n              - YELLOW\n              - GREEN\n            status:\n              type: string\n              description: Light status\n              enum:\n              - steady\n              - flashing\n              - disabled\n            vehTimeMin:\n              type: number\n              description: Minimum time (seconds) until next phase.\n            vehTimeMax:\n              type: number\n              description: Maximum time (seconds) until next phase.\n            updated:\n              description: The last time the status of this signal was updated\n              type: string\n              format: date-time\n        right:\n          type: object\n          description: The current state right turn signal if present\n          nullable: true\n          properties:\n            color:\n              type: string\n              description: Color of signal if active\n              nullable: true\n              enum:\n              - RED\n              - YELLOW\n              - GREEN\n            status:\n              type: string\n              description: Light status\n              enum:\n              - steady\n              - flashing\n              - disabled\n            vehTimeMin:\n              type: number\n              description: Minimum time (seconds) until next phase.\n            vehTimeMax:\n              type: number\n              description: Maximum time (seconds) until next phase.\n            updated:\n              description: The last time the status of this signal was updated\n              type: string\n              format: date-time\n        straight:\n          type: object\n          description: The current state straight signal if present\n          nullable: true\n          properties:\n            color:\n              type: string\n              description: Color of signal if active\n              enum:\n              - RED\n              - YELLOW\n              - GREEN\n              nullable: true\n            status:\n              type: string\n              description: Light status\n              enum:\n              - steady\n              - flashing\n              - disabled\n            vehTimeMin:\n              type: number\n              description: Minimum time (seconds) until next phase.\n            vehTimeMax:\n              type: number\n              description: Maximum time (seconds) until next phase.\n            updated:\n              description: The last time the status of this signal was updated\n              type: string\n              format: date-time\n    Favorite:\n      type: object\n      properties:\n        id:\n          type: integer\n          title: database entry id\n        moduleName:\n          type: string\n          title: infrastructure type\n        favoriteID:\n          type: integer\n          title: infrastructure type id\n    Light:\n      type: object\n      description: Describes a street light within the facility. Non-instrumented\n        street lights reject control requests.\n      required:\n      - id\n      properties:\n        id:\n          type: integer\n          description: An ID number identifying this street light\n        uri:\n          type: string\n          description: The URI which can be used to access this street light directly\n        name:\n          type: string\n          description: A text based description of the street light\n        url:\n          type: string\n          nullable: true\n          description: A url with more information about this specific street light\n        longitude:\n          type: number\n          description: The longitude of the centroid of the street light\n        latitude:\n          type: number\n          description: The latitude of the centroid of the street light\n        maxWattPower:\n          type: number\n          description: The maximum watt power of the street light\n        manufacturer:\n          type: string\n          description: The manufacturer of the street light\n        model:\n          type: string\n          description: The model of the street light\n        controlType:\n          type: string\n          description: The control type of the street light\n        state:\n          $ref: '#/components/schemas/LightState'\n    LightState:\n      type: object\n      description: The current state of the street light\n      properties:\n        updated:\n          description: The last time the status of this street light was updated\n          type: string\n          format: date-time\n        enabled:\n          description: Boolean value representing if the street light is on\n          type: boolean\n        dimLevel:\n          description: The current dim level of the street light\n          type: integer\n          nullable: true\n    Garage:\n      type: object\n      description: Describes a garage state.\n      required:\n      - id\n      properties:\n        id:\n          type: string\n          description: An ID number identifying this garage\n        uri:\n          type: string\n          description: The URI which can be used to access this garage directly\n        name:\n          type: string\n          description: A text based description of the garage\n        url:\n          type: string\n          description: A url with more information about this specific garage\n        longitude:\n          type: number\n          description: The longitude of the centroid of the garage\n        latitude:\n          type: number\n          description: The latitude of the centroid of the garage\n        state:\n          $ref: '#/components/schemas/GarageState'\n    GarageState:\n      type: object\n      description: The current state of the garage\n      properties:\n        updated:\n          description: The last time the status of this garage was updated\n          type: string\n          format: date-time\n        open:\n          description: Boolean value representing if the door is open\n          type: boolean\n        activated:\n          description: Boolean value representing if the door in motion\n          type: boolean\n    Intersection:\n      type: object\n      description: Intersections can be collections of traffic devices such as signals,\n        signs, and crosswalks in multiple directions.\n      required:\n      - id\n      properties:\n        id:\n          type: integer\n          description: An ID number identifying this intersection\n        uri:\n          type: string\n          description: The URI which can be used to access this signal set directly\n        name:\n          type: string\n          description: A text based description of the signal\n        url:\n          type: string\n          description: A url with more information about this specific intersection\n        longitude:\n          type: number\n          description: The longitude of the centroid of the signal set\n        latitude:\n          type: number\n          description: The latitude of the centroid of the signal set\n        instrument:\n          type: string\n          enum:\n          - signal\n          - stop\n          - yield\n          - ramp\n          description: The intersection instrument type\n        phases:\n          type: array\n          description: A listing of configured non-conflicting sets of phases that\n            can be used for control.\n          items:\n            $ref: '#/components/schemas/Phase'\n        stages:\n          type: array\n          description: A listing of configured non-conflicting sets of phases that\n            can be used for control.\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n                description: A name given to describe the stage of this light.\n              controlGroup:\n                type: string\n                description: Bitstring descending order 8 phases.\n                example: '00100101'\n        style:\n          type: string\n          enum:\n          - straight\n          - three-way\n          - four-way\n          - five-way\n          description: Describes the number of road segments entering the intersection\n        streetMain:\n          type: string\n          example: Main Street\n          description: The name of the street which is considered to be the main street\n            by the traffic controller\n        streetCross:\n          type: string\n          example: Cross Street\n          description: The name of the second street which is considered the cross\n            street by the traffic controller\n        v2xIntersectionId:\n          type: string\n          example: '2550'\n          description: Identifier for this intersection used in V2X messages such\n            as MAP and SPaT.\n        state:\n          $ref: '#/components/schemas/IntersectionState'\n    IntersectionState:\n      type: object\n      description: The current state of the intersection\n      properties:\n        updated:\n          description: The last time the status of this Intersection was updated\n          type: string\n          format: date-time\n        enabled:\n          type: boolean\n          description: True / False representing lit state of signal heads in intersection.\n        timePaused:\n          description: Is the countdown timer between phase changes for this intersection\n            paused?\n          type: boolean\n        timeClearControl:\n          description: Time in seconds between a control requests and when the traffic\n            controller automatically clears that request. NTCIP 1202 Backup time.\n            Setting to 0 disables automatic clearing of controls requests at this\n            intersection.\n          type: integer\n        flash:\n          type: boolean\n          description: Boolean value representing if the intersection is in flash\n            (night flash) mode.\n        callVehicle:\n          description: Active Vehicles calls placed on each phase. A bit string representing\n            a true or false value for each of the 8 phases in descending order Ex.\n            00100001 (Phase 1+6)\n          type: string\n          example: '00100001'\n        callPedestrian:\n          description: Active Pedestrian calls placed on each phase. A bit string\n            representing a true or false value for each of the 8 phases in descending\n            order Ex. 00100001 (Phase 1+6)\n          type: string\n          example: '00100001'\n        omit:\n          description: Active Phase omits. A bit string representing a true or false\n            value for each of the 8 phases in descending order Ex. 00100001 (Phase\n            1+6)\n          type: string\n          example: '00100001'\n        hold:\n          description: Active Green holds by Phase. A bit string representing a true\n            or false value for each of the 8 phases in descending order Ex. 00100001\n            (Phase 1+6)\n          type: string\n          example: '00100001'\n        forceOff:\n          description: Active force off to red requests by Phase. A bit string representing\n            a true or false value for each of the 8 phases in descending order Ex.\n            00100001 (Phase 1+6)\n          type: string\n          example: '00100001'\n        pedestrianClear:\n          description: Pedestrian clear state active/inactive by phase. A bit string\n            representing a true or false value for each of the 8 phases in descending\n            order Ex. 00100001 (Phase 1+6)\n          type: string\n          example: '00100001'\n        walkDont:\n          description: Don't walk activity by phase. A bit string representing a true\n            or false value for each of the 8 phases in descending order Ex. 00100001\n            (Phase 1+6)\n          type: string\n          example: '00100001'\n        walk:\n          description: Walk activity by phase. A bit string representing a true or\n            false value for each of the 8 phases in descending order Ex. 00100001\n            (Phase 1+6)\n          type: string\n          example: '00100001'\n        phases:\n          type: array\n          description: Status for each phase at time of last update\n          items:\n            type: object\n            properties:\n              phase:\n                type: integer\n                description: Phase ID number\n              color:\n                type: string\n                description: The displayed color of the current Phase\n                enum:\n                - GREEN\n                - RED\n                - YELLOW\n              vehTimeMin:\n                type: number\n                description: Minimum time (seconds) until next phase for vehicle.\n              vehTimeMax:\n                type: number\n                description: Minimum time (seconds) until next phase for vehicle.\n              callVehicle:\n                type: boolean\n                description: A vehicle call has been placed for this phase.\n              callPedestrian:\n                type: boolean\n                description: A pedestrian call has been placed for this phase.\n              omit:\n                type: boolean\n                description: An omit has been placed for this phase.\n              omitPedestrian:\n                type: boolean\n                description: A pedestrian omit has been placed for this phase.\n              hold:\n                type: boolean\n                description: A hold has been placed for this phase.\n              forceOff:\n                type: boolean\n                description: This phase has a force off active\n              pedestrianClear:\n                type: boolean\n                description: Pedestrian clear is active\n              walkDont:\n                type: boolean\n                description: DONT WALK sign is active\n              walk:\n                type: boolean\n                description: WALK sign is active\n    Railcrossing:\n      type: object\n      description: Describes a rail crossing within the facility. Non-instrumented\n        crossings reject control requests.\n      required:\n      - id\n      properties:\n        id:\n          type: integer\n          description: An ID number identifying this crosswalk\n        uri:\n          type: string\n          description: The URI which can be used to access this rail crossing directly\n        name:\n          type: string\n          description: A text based description of the rail crossing\n        url:\n          type: string\n          nullable: true\n          description: A url with more information about this specific rail crossing\n        longitude:\n          type: number\n          description: The longitude of the centroid of the rail crossing\n        latitude:\n          type: number\n          description: The latitude of the centroid of the rail crossing\n        instrument:\n          type: string\n          enum:\n          - crossbuck\n          - gated\n          nullable: true\n          description: The signal type of rail crossing\n        audible:\n          type: boolean\n          description: Is the rail crossing equipped with an audible warning\n        gate:\n          type: boolean\n          description: Is the rail crossing equipped with a gate\n        beacon:\n          type: string\n          enum:\n          - wig-wag\n          - flashing\n          nullable: true\n          description: The beacon type used for this rail crossing\n        phases:\n          type: array\n          description: A list of supported phases\n          nullable: true\n          items:\n            type: string\n            enum:\n            - presignal\n            - closing\n            - closed\n            - opening\n            - postsignal\n            - open\n        state:\n          $ref: '#/components/schemas/RailcrossingState'\n    RailcrossingState:\n      type: object\n      description: The current state of the rail crossing\n      properties:\n        manualCall:\n          type: boolean\n          description: Manual activation call placed, but has not been serviced.\n        activated:\n          type: boolean\n          description: Is the rail crossing cycle activated\n        phase:\n          type: string\n          description: The current phase of the rail crossing if instrumented\n          enum:\n          - presignal\n          - closing\n          - closed\n          - opening\n          - postsignal\n          - open\n          nullable: true\n        gate:\n          type: boolean\n          description: True if the gate is down/in motion.\n        audible:\n          type: boolean\n          description: True if audible tone is activated.\n        beacon:\n          type: boolean\n          description: True if beacon is activated.\n        updated:\n          description: The last time the status of this rail crossing was updated\n          type: string\n          format: date-time\n    Crosswalk:\n      type: object\n      description: Describes a crosswalk within the facility. Non-instrumented crosswalks\n        can be created for discovery purposes, but will not allow for updates to status.\n      required:\n      - id\n      properties:\n        id:\n          type: integer\n          description: An ID number identifying this crosswalk\n        uri:\n          type: string\n          description: The URI which can be used to access this crosswalk directly\n        name:\n          type: string\n          description: A text based description of this crosswalk\n        url:\n          type: string\n          nullable: true\n          description: A url with more information about this specific crosswalk\n        longitude:\n          type: number\n          description: The longitude of the centroid of the crosswalk\n        latitude:\n          type: number\n          description: The latitude of the centroid of the crosswalk\n        instrument:\n          type: string\n          enum:\n          - solid\n          - standard\n          - continental\n          - dashed\n          - ladder\n          - zebra\n          - scramble\n          - uk-pelican\n          - uk-puffin\n          - uk-toucan\n          - uk-pegasus\n          description: The painted line pattern for this crosswalk\n        refuge:\n          type: boolean\n          description: Does the crosswalk have a central island pedestrian refuge\n        beacon:\n          type: string\n          enum:\n          - phb\n          - belisha\n          - signal\n          - rapid-flash\n          nullable: true\n          description: The beacon type used for this crosswalk\n        phases:\n          type: array\n          description: A list of valid phases for the crosswalk if equipped with a\n            graphical display\n          nullable: true\n          items:\n            type: string\n            enum:\n            - walk-text\n            - do-not-walk-text\n            - steady-upraised-hand\n            - steady-walking-man\n            - flashing-upraised-hand\n        countdown:\n          type: boolean\n          description: Does the crosswalk feature an instrumented phase timer\n        audible:\n          type: boolean\n          description: Is the crosswalk equipped with an audible warning for the crossing/countdown\n        visor:\n          type: string\n          description: The type of visor installed on the beacon\n          nullable: true\n          enum:\n          - egg-crate\n          - tunnel\n          - cap\n        callButton:\n          type: boolean\n          description: Can a pedestrian place a call or trigger this crosswalk with\n            a button\n        tactileSurface:\n          type: boolean\n          description: Does the entrance to the crosswalk feature a tactile surface\n        state:\n          $ref: '#/components/schemas/CrosswalkState'\n    CrosswalkState:\n      type: object\n      description: The current state of the crosswalk\n      properties:\n        callPedestrian:\n          type: boolean\n          description: Pedestrian call placed, but has not been serviced.\n        activated:\n          type: boolean\n          nullable: true\n          description: Is the crosswalk activated?\n        phase:\n          type: string\n          description: The current phase of the crosswalk if instrumented\n          enum:\n          - walk-text\n          - do-not-walk-text\n          - steady-upraised-hand\n          - steady-walking-man\n          - flashing-upraised-hand\n          nullable: true\n        countdownTime:\n          description: The time remaining in this crosswalk phase if instrumented.\n          type: integer\n          nullable: true\n        pedestrianClear:\n          type: boolean\n          description: Pedestrian clear is active\n        walkDont:\n          type: boolean\n          description: DONT WALK sign is active\n        walk:\n          type: boolean\n          description: WALK sign is active\n        updated:\n          description: The last time the status of this crosswalk was updated\n          type: string\n          format: date-time\n    Gate:\n      type: object\n      description: Describes a gate within the facility. Non-instrumented gates can\n        be created for discovery purposes, but will not allow for updates to status.\n      required:\n      - id\n      properties:\n        id:\n          type: integer\n          description: An ID number identifying this gate\n        uri:\n          type: string\n          description: The URI which can be used to access this gate directly\n        name:\n          type: string\n          description: A text based description of this gate\n        url:\n          type: string\n          nullable: true\n          description: A url with more information about this specific gate\n        longitude:\n          type: number\n          description: The longitude of the centroid of the gate\n        latitude:\n          type: number\n          description: The latitude of the centroid of the gate\n        electric:\n          type: boolean\n          description: Is this a manual or electric gate\n        arm:\n          type: boolean\n          description: Does this gate have an arm\n        slide:\n          type: boolean\n          description: Does this gate slide to the side?\n        swing:\n          type: boolean\n          description: Gate swings horizontally to open\n        lift:\n          type: boolean\n          description: Gate lifts to open\n        audible:\n          type: boolean\n          description: Gate has an audible alarm\n        state:\n          $ref: '#/components/schemas/GateState'\n    GateState:\n      type: object\n      description: The current state of the gate\n      properties:\n        gateCall:\n          type: boolean\n          description: Gate open requested, but has not been serviced.\n        activated:\n          type: boolean\n          description: Gate in motion\n        open:\n          type: boolean\n          description: Is the gate open?\n          nullable: true\n        updated:\n          description: The last time the status of this gate was updated\n          type: string\n          format: date-time\n    WeatherAlert:\n      type: object\n      description: Weather alert\n      required:\n      - id\n      - description\n      - instruction\n      properties:\n        id:\n          type: string\n          description: An ID number identifying this weather alert\n        description:\n          type: string\n          description: Additional information about the event\n        instruction:\n          type: string\n          description: An advisory message\n        state:\n          $ref: '#/components/schemas/WeatherAlertState'\n    WeatherAlertState:\n      type: object\n      description: The current state of a weather alert\n      required:\n      - dateValid\n      - onset\n      - dateExpire\n      - status\n      - severity\n      - certainty\n      - urgency\n      - event\n      properties:\n        event:\n          type: string\n          description: The event name\n        dateValid:\n          type: string\n          description: The DateTime the alert is effective\n        onset:\n          type: string\n          description: The DateTime of the onset of the event\n        dateExpire:\n          type: string\n          description: The DateTime when the alert expires\n        ends:\n          type: string\n          description: The DateTime of the end of the event\n        status:\n          type: string\n          description: Status (actual, exercise, system, test, draft)\n        severity:\n          type: string\n          description: Severity (extreme, severe, moderate, minor, unknown)\n        certainty:\n          type: string\n          description: Certainty (observed, likely, possible, unlikely, unknown)\n        urgency:\n          type: string\n          description: Urgency (immediate, expected, future, past, unknown)\n        updated:\n          type: string\n          description: The last time the status of this alert was updated.\n    Weather:\n      type: object\n      properties:\n        weatherStationID:\n          type: integer\n          description: Weather station ID with which this weather object is associated\n        observationDate:\n          type: string\n          description: Date of the weather observation\n        observationDateTime:\n          type: string\n          description: Date and time of the weather observation\n        et:\n          type: string\n          description: EvapoTranspiration (ET) is a measurement of the amount of water\n            vapor returned to the air\n        humidity:\n          type: string\n          description: Humidity measured in grams of water vapor per cubic meter of\n            air (g/m3).\n        rainRateMm:\n          type: string\n          description: Rate of rain fall per hour in millimeters\n        tempC:\n          type: string\n          description: Temperature measured in Celsius\n        tempF:\n          type: string\n          description: Temperature measured in Fahrenheit\n        shortForecast:\n          type: string\n          description: Short Forecast for the hour e.g. Sunny, Mostly Cloudy\n        sun:\n          type: object\n          properties:\n            solarRadiation:\n              type: string\n              description: Solar radiation measured in Watts\n            uvIndex:\n              type: string\n              description: UV index measurement\n        wind:\n          type: object\n          properties:\n            direction:\n              type: string\n              description: direction of wind\n            speedKnot:\n              type: string\n              description: Wind speed measured in knots\n            speedMph:\n              type: string\n              description: Wind speed measured in miles per hour\n    WeatherStation:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Weather station's name or airport code\n        url:\n          type: string\n          description: Station's URL for the Weather API https://www.weather.gov/documentation/services-web-api\n        weatherStationType:\n          type: string\n          enum:\n          - WEATHERDOTGOV\n          - WEATHERLINK\n          description: Type of weather station - ie. weather.gov or Davis Instruments\n            WeatherLink\n        latitude:\n          type: string\n          description: Latitude of weather device\n        longitude:\n          type: string\n          description: Longitude of weather device\n    Sensor:\n      type: object\n      description: A sensor or grouping of sensors located within the facility\n      required:\n      - id\n      properties:\n        id:\n          type: string\n          description: An ID number identifying this sensor\n        uri:\n          type: string\n          description: The URI which can be used to access this sensor directly\n        name:\n          type: string\n          description: A text based description of the sensor\n        url:\n          type: string\n          description: A url with more information about this specific sensor\n        longitude:\n          type: number\n          description: The longitude of the centroid of the sensor\n        latitude:\n          type: number\n          description: The latitude of the centroid of the sensor\n        type:\n          type: string\n          enum:\n          - PACKAGE\n          - CAMERA\n          - LIDAR\n          - RADAR\n          - SONAR\n          - WIRE\n          - BEAM\n          - SOFT\n          description: The sensor type\n        manufacturer:\n          type: string\n          description: The sensor manufacturer\n        model:\n          type: string\n          description: The model number/name of the sensor\n        revision:\n          type: string\n          description: Sensor revision number/edition information\n        state:\n          $ref: '#/components/schemas/SensorState'\n    SensorCamera:\n      type: object\n      description: A camera sensor located within the facility\n      required:\n      - id\n      properties:\n        id:\n          type: string\n          description: An ID number identifying this sensor\n        uri:\n          type: string\n          description: The URI which can be used to access this sensor\n        name:\n          type: string\n          description: A text based description of the sensor\n        url:\n          type: string\n          description: A url with more information about this specific sensor\n        longitude:\n          type: number\n          description: The longitude of the centroid of the sensor\n        latitude:\n          type: number\n          description: The latitude of the centroid of the sensor\n        type:\n          type: string\n          enum:\n          - Camera\n          description: The sensor type\n        manufacturer:\n          type: string\n          description: The sensor manufacturer\n        model:\n          type: string\n          description: The model number/name of the sensor\n        revision:\n          type: string\n          description: Sensor revision number/edition information\n        ipAddress:\n          type: string\n          description: The IP Address of the sensor\n        urlWebInterface:\n          type: string\n          description: A URL allowing control or management of the sensor\n        urlStream:\n          type: string\n          description: A URL for retrieving a stream of video from the camera.\n        urlStill:\n          type: string\n          description: A URL allowing still capture from the camera.\n        urlStreamFormat:\n          type: string\n          description: The file format of the stream endpoint.\n        urlStillFormat:\n          type: string\n          description: The file format of the still endpoint.\n        resolutionStream:\n          type: string\n          description: The maximum resolution of streaming video.\n        resolutionStill:\n          type: string\n          description: The maximum resolution of still capture\n        framerate:\n          type: number\n          description: The max number of frames achievable at max resolution.\n        lens:\n          type: string\n          description: Detail about camera lens information.\n        state:\n          $ref: '#/components/schemas/SensorState'\n    SensorPackage:\n      type: object\n      description: A grouping of sensors located within the facility\n      required:\n      - id\n      properties:\n        id:\n          type: string\n          description: An ID number identifying this sensor package\n        uri:\n          type: string\n          description: The URI which can be used to access this sensor package\n        name:\n          type: string\n          description: A text based description of the sensor package\n        url:\n          type: string\n          description: A url with more information about this specific sensor package\n        longitude:\n          type: number\n          description: The longitude of the centroid of the sensor package\n        latitude:\n          type: number\n          description: The latitude of the centroid of the sensor package\n        type:\n          type: string\n          enum:\n          - PACKAGE\n          description: The sensor type\n        manufacturer:\n          type: string\n          description: The sensor package manufacturer\n        model:\n          type: string\n          description: The model number/name of the sensor package\n        revision:\n          type: string\n          description: Sensor package revision number/edition information\n        ipAddress:\n          type: string\n          description: The ip address of the sensor package\n        urlWebInterface:\n          type: string\n          description: A URL allowing control or management of the sensor package\n        cameras:\n          type: array\n          description: Cameras included in this sensor package\n          items:\n            $ref: '#/components/schemas/SensorCamera'\n        lidars:\n          type: array\n          description: LIDARs included in this sensor package\n          items:\n            $ref: '#/components/schemas/SensorLIDAR'\n        radars:\n          type: array\n          description: RADARs included in this sensor package\n          items:\n            $ref: '#/components/schemas/SensorRADAR'\n        state:\n          $ref: '#/components/schemas/SensorState'\n    SensorRADAR:\n      type: object\n      description: A radar sensor located within the facility\n      required:\n      - id\n      properties:\n        id:\n          type: string\n          description: An ID number identifying this sensor\n        uri:\n          type: string\n          description: The URI which can be used to access this sensor\n        name:\n          type: string\n          description: A text based description of the sensor\n        url:\n          type: string\n          description: A url with more information about this specific sensor\n        longitude:\n          type: number\n          description: The longitude of the centroid of the sensor\n        latitude:\n          type: number\n          description: The latitude of the centroid of the sensor\n        type:\n          type: string\n          enum:\n          - RADAR\n          description: The sensor type\n        manufacturer:\n          type: string\n          description: The sensor manufacturer\n        model:\n          type: string\n          description: The model number/name of the sensor\n        revision:\n          type: string\n          description: Sensor revision number/edition information\n        ipAddress:\n          type: string\n          description: The IP Address of the sensor\n        urlWebInterface:\n          type: string\n          description: A URL allowing control or management of the sensor\n        rangeMax:\n          type: number\n          description: The maximum range of the sensor.\n        rangeAccuracy:\n          type: number\n          description: The accuracy range rating of the sensor.\n        speedAccuracy:\n          type: number\n          description: The accuracy of speed detection of the sensor\n        resolutionUpdateRate:\n          type: number\n          description: The rate at which the sensor updates.\n        objectedTrackedMax:\n          type: integer\n          description: The maximum number of objects tracked by the sensor.\n        state:\n          $ref: '#/components/schemas/SensorState'\n    SensorLIDAR:\n      type: object\n      description: A LIDAR sensor located within the facility\n      required:\n      - id\n      properties:\n        id:\n          type: string\n          description: An ID number identifying this sensor\n        uri:\n          type: string\n          description: The URI which can be used to access this sensor\n        name:\n          type: string\n          description: A text based description of the sensor\n        url:\n          type: string\n          description: A url with more information about this specific sensor\n        longitude:\n          type: number\n          description: The longitude of the centroid of the sensor\n        latitude:\n          type: number\n          description: The latitude of the centroid of the sensor\n        type:\n          type: string\n          enum:\n          - LIDAR\n          description: The sensor type\n        manufacturer:\n          type: string\n          description: The sensor manufacturer\n        model:\n          type: string\n          description: The model number/name of the sensor\n        revision:\n          type: string\n          description: Sensor revision number/edition information\n        ipAddress:\n          type: string\n          description: The IP Address of the sensor\n        urlWebInterface:\n          type: string\n          description: A URL allowing control or management of the sensor\n        rangeTypical:\n          type: number\n          description: The typical range of the sensor.\n        accuracyTypical:\n          type: number\n          description: The typical accuracy of the sensor.\n        resolutionAngularDegree:\n          type: number\n          description: The max angular resolution of this LIDAR.\n        resolutionDistance:\n          type: number\n          description: The resolution at max distance of this LIDAR.\n        beamCount:\n          type: integer\n          description: The number of beams this LIDAR uses for sensing.\n        fovHorizontalDegree:\n          type: number\n          description: The horizontal FOV of this sensor.\n        fovVerticalDegree:\n          type: number\n          description: The vertical FOV of this sensor.\n        state:\n          $ref: '#/components/schemas/SensorState'\n    SensorState:\n      type: object\n      description: The current state of a sensor or sensor housing.\n      properties:\n        enabled:\n          type: boolean\n          description: True / False representing if the sensor presently powered on.\n        updated:\n          description: The last time the state of the sensor was updated.\n          type: string\n          format: date-time\n    Robot:\n      type: object\n      description: Describes a robot.\n      required:\n      - id\n      properties:\n        id:\n          type: number\n          description: An ID number identifying this robot inside OCTANE\n        uri:\n          type: string\n          description: The URI which can be used to access this robot directly\n        name:\n          type: string\n          description: A text based description of the robot (DRI Platform)\n        url:\n          type: string\n          description: A url with more information about this specific robot\n        types:\n          type: array\n          description: Control mode types supported by this robot.\n          items:\n            type: string\n            enum:\n            - path\n            - waypoint\n            - geojson\n            - external\n        state:\n          $ref: '#/components/schemas/RobotState'\n    RobotState:\n      type: object\n      description: The current state of the robot\n      properties:\n        updated:\n          description: The last time the status of this robot was updated\n          type: string\n          format: date-time\n        longitude:\n          type: number\n          description: The last reported longitude of the robot\n        latitude:\n          type: number\n          description: The last reported longitude of the robot\n        scenario:\n          $ref: '#/components/schemas/RobotScenario'\n        activated:\n          description: Boolean value representing is the mode is currently active\n          type: boolean\n        status:\n          description: Additional optional status information provided from the robot\n          type: string\n        connection:\n          type: object\n          description: A description of the robot network connection\n          properties:\n            updated:\n              description: The last time this robot contacted OCTANE\n              type: string\n              format: date-time\n            type:\n              description: Network interface for connection\n              type: string\n              enum:\n              - DSRC\n              - WIFI\n              - CELLULAR\n              - ZIGBEE\n              - ETHERNET\n              - DIRECT\n            strength:\n              description: The connection strength rating 0-100 of the lowest of either\n                RX or TX measurements.\n              type: integer\n            network:\n              description: The reported network name (Ex. MWireless, T-Mobile)\n              type: string\n        charge:\n          type: object\n          description: A description of the robot power status\n          properties:\n            updated:\n              description: The last time this robot reported power state\n              type: string\n              format: date-time\n            charging:\n              description: Is the robot charging?\n              type: boolean\n            percent:\n              description: How much percent of battery life is left? (0-100)\n              type: integer\n              format: double\n            voltage:\n              description: The current voltage of the battery\n              type: number\n        enabled:\n          type: boolean\n          description: Is the robot powered on without a physical interlock activated?\n    RobotScenario:\n      properties:\n        id:\n          type: number\n          description: An ID number identifying this robot scenario inside OCTANE\n        name:\n          description: A short name for a scenario (ex. \"Bike Merge\", \"Open Door\")\n          type: string\n        description:\n          description: A long description of a scenario. (ex. \"The bicycle will merge\n            from a specific point.\")\n          type: string\n        test:\n          description: If this robot scenario belongs to a specific overall test,\n            the test name will be populated here.\n          type: string\n        category:\n          description: The optional type of this test\n          enum:\n          - development\n          - regression\n          - production\n          - other\n          type: string\n        index:\n          description: Identifier number to differentiate robots in the same test,\n            with different robot based scenarios\n          type: number\n        type:\n          description: A predefined external scenario, path, waypoint, or geojson\n            object\n          type: string\n          enum:\n          - path\n          - waypoint\n          - geojson\n          - external\n        lock:\n          description: The scenario cannot be deleted or modified through the API,\n            but is instead system provided or requested as locked by a user. Contact\n            API admin to delete or modify.\n          type: boolean\n        path:\n          description: When scenario type is PATH, represents a set of latitude and\n            longitude points in order.\n          type: array\n          items:\n            properties:\n              longitude:\n                type: number\n                description: The next longitude destination of the robot.\n              latitude:\n                type: number\n                description: The next latitude destination of the robot.\n              velocity:\n                type: number\n                description: desired max velocity (M/S) heading to this location.\n              acceleration:\n                type: number\n                description: desired max acceleration (M/S^2) heading to this location.\n        waypoint:\n          description: When scenario is waypoint type, this represents a named latitude/longitude\n            point.\n          type: object\n          properties:\n            longitude:\n              type: number\n              description: The next longitude destination of the robot.\n            latitude:\n              type: number\n              description: The next latitude destination of the robot.\n        geojson:\n          description: When in scenario is geojson, this represents the currently\n            geojson specified path.\n          type: object\n        external:\n          description: Contains data/parameters needed to begin an non-OCTANE defined\n            scenario\n          type: object\n    MaintenanceEquipment:\n      type: object\n      description: Maintenance equipment - lawnmower\n      required:\n      - id\n      - unitID\n      properties:\n        id:\n          type: integer\n          description: An ID number identifying this piece of maintenance equipment\n        unitID:\n          type: string\n          description: The unit ID that the maintenance equipment responds with.\n        name:\n          type: string\n          description: A text based description of the maintenance equipment.\n        state:\n          type: object\n          oneOf:\n          - $ref: '#/components/schemas/LawnMowerState'\n          description: The current state of the maintenance device\n        type:\n          type: string\n          description: The maintenance equipment type\n    MessageBoard:\n      type: object\n      description: Roadside message board\n      required:\n      - id\n      - unitID\n      properties:\n        id:\n          type: integer\n          description: An ID number identifying this message board\n        unitID:\n          type: string\n          description: The unit ID that the message board responds with.  This is\n            the manufacturers identification number.\n        name:\n          type: string\n          description: A text based description of this message board\n        state:\n          $ref: '#/components/schemas/MessageBoardState'\n    ArrowBoard:\n      type: object\n      description: Roadside arrow board\n      required:\n      - id\n      - unitID\n      properties:\n        id:\n          type: integer\n          description: An ID number identifying this sign board\n        unitID:\n          type: string\n          description: The unit ID that the sign board responds with.  This is the\n            manufacturers identification number.\n        name:\n          type: string\n          description: A text based description of this arrow board\n        state:\n          $ref: '#/components/schemas/ArrowBoardState'\n    MessageBoardState:\n      type: object\n      description: The current state of the message board\n      properties:\n        contentType:\n          type: string\n          description: The current content type ('text' or 'pattern') of the sign\n            board\n        content:\n          type: string\n          description: The current content of the sign board\n        longitude:\n          type: number\n          description: The longitude of the centroid of the sign board\n        latitude:\n          type: number\n          description: The latitude of the centroid of the sign board\n        enabled:\n          type: boolean\n          description: Is the messageboard on or off?\n    ArrowBoardState:\n      type: object\n      description: The current state of the arrow board\n      properties:\n        batteryVoltage:\n          type: number\n          description: The current voltage on the arrow board\n        contentPattern:\n          type: string\n          description: The current content pattern displayed on the arrow board\n        longitude:\n          type: number\n          description: The longitude of the centroid of the sign board\n        latitude:\n          type: number\n          description: The latitude of the centroid of the sign board\n    SignType:\n      type: string\n      enum:\n      - MESSAGE_BOARD\n      - ARROW_BOARD\n    SafetyEquipmentType:\n      type: string\n      enum:\n      - CONE\n      - DELINEATOR\n      - BARREL\n      - CONCRETE_BARRICADE\n      - WATER_BARRICADE\n      - STEEL_BARRICADE\n      - A_FRAME_BARRICADE\n      - TYPE_ONE_BARRICADE\n      - TYPE_TWO_BARRICADE\n      - BOLLARD\n    OctaneModuleType:\n      type: string\n      enum:\n      - ARROW_BOARD\n      - MESSAGE_BOARD\n      - ROBOT\n      - CONE\n      - DELINEATOR\n      - BARREL\n      - CONCRETE_BARRICADE\n      - WATER_BARRICADE\n      - STEEL_BARRICADE\n      - A_FRAME_BARRICADE\n      - TYPE_ONE_BARRICADE\n      - TYPE_TWO_BARRICADE\n      - BOLLARD\n    LawnMower:\n      type: object\n      description: Automated lawnmower at Mcity\n      required:\n      - id\n      - unitID\n      properties:\n        id:\n          type: integer\n          description: An ID number identifying this lawnmower\n        name:\n          type: string\n          description: A text based description of this lawnmower\n        unitID:\n          type: string\n          description: The unit ID that the lawnmower responds with.  This is the\n            manufacturers identification number.\n        state:\n          $ref: '#/components/schemas/LawnMowerState'\n    LawnMowerState:\n      type: object\n      description: The current state of the lawn mower\n      properties:\n        mowerCall:\n          type: string\n          description: The current running state of the lawnmower\n        batteryCharge:\n          type: integer\n          description: The charge % of the battery\n    Facility:\n      type: object\n      description: Describes the facility.\n      required:\n      - id\n      properties:\n        id:\n          type: integer\n          description: An ID number identifying this Facility\n        uri:\n          type: string\n          description: The URI which can be used to access this facility directly\n        name:\n          type: string\n          description: A text based description of this facility\n        url:\n          type: string\n          description: A url with more information about this facility\n        urlMap:\n          type: string\n          description: A url to a facility map\n        longitude:\n          type: number\n          description: The longitude of the centroid of the facility\n        latitude:\n          type: number\n          description: The latitude of the centroid of the facility\n        overlays:\n          type: array\n          description: Array representing all configured overlays for use in map software\n            of the facility.\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n                description: A name describing the contends of the overlay.\n              description:\n                type: string\n                description: A description of the contents of this overlay.\n              ul:\n                type: object\n                description: A latitude/longitude pair representing the upper left\n                  point of an overlay.\n                properties:\n                  latitude:\n                    type: number\n                    description: Upper left latitude\n                  longitude:\n                    type: number\n                    description: Upper left longitude\n              lr:\n                type: object\n                description: A latitude/longitude pair representing the lower right\n                  point of an overlay.\n                properties:\n                  latitude:\n                    type: number\n                    description: Upper right latitude\n                  longitude:\n                    type: number\n                    description: Upper right longitude\n              url:\n                type: string\n                description: A url pointing to the overlay file.\n              opacity:\n                type: integer\n                description: A suggested opacity to be used when displaying this layer.\n        contact:\n          type: object\n          description: Object representing all contact information of the facility.\n          properties:\n            maintenance:\n              type: string\n              description: Facility Maintenance Contact\n            reservations:\n              type: string\n              description: Facility Reservation Contact\n            manager:\n              type: string\n              description: Facility Manager Contact\n            technical:\n              type: string\n              description: Facility Technical Contact\n            emergency:\n              type: string\n              description: Facility Emergency Contact\n        unitDistance:\n          type: string\n          description: Facility Unit for Distance\n        unitMass:\n          type: string\n          description: Facility Unit for Mass\n    V2X:\n      type: object\n      description: Describes for a V2X (Vehicle to Everything) connected device within\n        the facility. status.\n      required:\n      - id\n      properties:\n        id:\n          type: integer\n          description: An ID number identifying this V2X device\n        uri:\n          type: string\n          description: The URI which can be used to access this V2X device directly\n        name:\n          type: string\n          description: A text based description of this V2X device\n        url:\n          type: string\n          description: A url with more information about this specific V2X device\n        longitude:\n          type: number\n          description: The longitude of the centroid of the V2X device, if fixed.\n        latitude:\n          type: number\n          description: The latitude of the centroid of the V2X device, if fixed.\n        type:\n          type: string\n          enum:\n          - OBU\n          - RSU\n        radiosSupported:\n          type: array\n          description: A list of supported configurations for this device.\n          items:\n            type: object\n            properties:\n              radio:\n                description: Radio Type\n                type: string\n                enum:\n                - DSRC\n                - CV2X\n              messageSet:\n                type: string\n                description: The message set this type is supported in for this radio.\n                enum:\n                - J2735_201603\n                - J2735_201601\n                - J2735_201509\n                - J2735_200911\n                - J2735_200612\n                - NTCIP\n              messageType:\n                type: string\n                description: The message type supported.\n                enum:\n                - BSM\n                - PSM\n                - SPaT\n                - MAP\n                - TIM\n                - RTCM\n              rxEnabled:\n                type: boolean\n                description: This radio will provide received messages of this type\n                  to OCTANE.\n              txEnabled:\n                type: boolean\n                description: This radio allows for sending messages of this type through\n                  OCTANE.\n        manufacturer:\n          type: string\n          description: The OBU/RSU manufacturer\n        model:\n          type: string\n          description: The OBU/RSU model\n        revision:\n          type: string\n          description: Revision of the OBU/RSU\n        vehicleManufacturer:\n          type: string\n          description: Manufacturer of vehicle\n        vehicleModel:\n          type: string\n          description: Model of vehicle\n        vehicleYear:\n          type: string\n          description: Release year of Vehicle.\n        state:\n          oneOf:\n          - $ref: '#/components/schemas/V2XRSUState'\n          - $ref: '#/components/schemas/V2XOBUState'\n          - $ref: '#/components/schemas/V2XVRUState'\n    V2XOBUState:\n      type: object\n      description: Personal Safety Message received from an OBU.\n      properties:\n        updated:\n          description: The date time this message was sent via OCTANE.\n          type: string\n          format: date-time\n        longitude:\n          type: number\n          description: Longitude of the transmitting V2X device.\n        latitude:\n          type: number\n          description: Latitude of the transmitting V2X device.\n        elevation:\n          type: number\n          description: Elevation of transmitting V2X device. Units in meters\n        speed:\n          type: number\n          description: Reported Velocity of V2X Device. Units in meters/second\n        heading:\n          type: number\n          description: 0 to 359.9875 degrees.\n        angle:\n          type: number\n          description: 0 to 359.9875 degrees.\n    V2XVRUState:\n      type: object\n      description: Vulnerable Road USER (PSM) state.\n      properties:\n        updated:\n          description: The date time this message was sent via OCTANE.\n          type: string\n          format: date-time\n        longitude:\n          type: number\n          description: Longitude of the transmitting V2X device.\n        latitude:\n          type: number\n          description: Latitude of the transmitting V2X device.\n        elevation:\n          type: number\n          description: Elevation of transmitting V2X device. Units in meters\n        speed:\n          type: number\n          description: Reported Velocity of V2X Device. Units in meters/second\n        heading:\n          type: number\n          description: 0 to 359.9875 degrees.\n        type:\n          type: string\n          description: The type of VRU\n          enum:\n          - pedestrian\n          - bicyclist\n          - worker\n          - animal\n        size:\n          type: string\n          description: Estimated size of the VRU. Large is \u003e 1.5m\n          enum:\n          - unknown\n          - small\n          - large\n    V2XRSUState:\n      type: object\n      description: The current state of the V2X device\n      properties:\n        enabled:\n          type: boolean\n          description: Is the radio on or off?\n        radiosEnabled:\n          type: array\n          description: A list of enabled configurations for this device.\n          items:\n            type: object\n            properties:\n              radio:\n                description: Radio Type\n                type: string\n                enum:\n                - DSRC\n                - CV2X\n              messageSet:\n                type: string\n                enum:\n                - J2735_201603\n                - J2735_201601\n                - J2735_201509\n                - J2735_200911\n                - J2735_200612\n                - NTCIP\n              messageType:\n                type: string\n                description: The message type supported.\n                enum:\n                - BSM\n                - PSM\n                - SPaT\n                - MAP\n                - TIM\n                - RTCM\n              rxEnabled:\n                type: boolean\n                description: This radio will provide received messages of this type\n                  to OCTANE.\n              txEnabled:\n                type: boolean\n                description: This radio allows for sending messages of this type through\n                  OCTANE.\n        updated:\n          description: The last time the status of this device was updated.\n          type: string\n          format: date-time\n        received:\n          description: The last time the API received a message from this device.\n          type: string\n          format: date-time\n        longitude:\n          type: number\n          description: The last known longitude of the V2X device, if movable.\n        latitude:\n          type: number\n          description: The last known latitude of the V2X device, if movable.\n    V2XSPaT:\n      type: object\n      description: Signal Phase and Timing V2X Message decoded.\n      properties:\n        id:\n          description: Identifier given for the intersection this message is related\n            to.\n          type: string\n        messageSet:\n          description: The original format this message was broadcast in before decoding.\n          type: string\n          enum:\n          - J2735_201603\n          - J2735_201601\n          - J2735_201509\n          - J2735_200911\n          - J2735_200612\n          - NTCIP\n        updated:\n          description: The date time of this message was parsed.\n          type: string\n          format: date-time\n        timeSystem:\n          description: System reported time represented as seconds.milliseconds\n          type: string\n        green:\n          description: Phases which are Green. A bit string representing a true or\n            false value for each of the 16 phases in descending order Ex. 0000000000100001\n            (Phase 1+6)\n          type: string\n          example: '0000000000100001'\n        yellow:\n          description: Phases which are Yellow. A bit string representing a true or\n            false value for each of the 16 phases in descending order Ex. 0000000000100001\n            (Phase 1+6)\n          type: string\n          example: '0000000000100001'\n        red:\n          description: Phases which are Red. A bit string representing a true or false\n            value for each of the 16 phases in descending order Ex. 0000000000100001\n            (Phase 1+6)\n          type: string\n          example: '0000000000100001'\n        pedestrianClear:\n          description: Pedestrian clear state active/inactive by phase. A bit string\n            representing a true or false value for each of the 16 phases in descending\n            order Ex. 00100001 (Phase 1+6)\n          type: string\n          example: '0000000000100001'\n        walkDont:\n          description: Don't walk activity by phase. A bit string representing a true\n            or false value for each of the 16 phases in descending order Ex. 00100001\n            (Phase 1+6)\n          type: string\n          example: '0000000000100001'\n        walk:\n          description: Walk activity by phase. A bit string representing a true or\n            false value for each of the 16 phases in descending order Ex. 00100001\n            (Phase 1+6)\n          type: string\n          example: '0000000000100001'\n        flash:\n          description: Flashing indicator by phase. A bit string representing a true\n            or false value for each of the 16 phases in descending order Ex. 00100001\n            (Phase 1+6)\n          type: string\n          example: '0000000000100001'\n        overlap:\n          type: object\n          properties:\n            green:\n              type: string\n              example: '000000110000101'\n              description: Phases with green overlaps set. A bit string representing\n                a true or false value for each of the 16 phases in descending order\n                Ex. 00100001 (Phase 1+6)\n            yellow:\n              type: string\n              example: '000000110000101'\n              description: Phases with yellow overlaps set. A bit string representing\n                a true or false value for each of the 16 phases in descending order\n                Ex. 00100001 (Phase 1+6)\n            red:\n              type: string\n              example: '000000110000101'\n              description: Phases with red overlaps set. A bit string representing\n                a true or false value for each of the 16 phases in descending order\n                Ex. 00100001 (Phase 1+6)\n            flash:\n              type: string\n              example: '000000110000101'\n              description: Phases with flashing overlaps set. A bit string representing\n                a true or false value for each of the 16 phases in descending order\n                Ex. 00100001 (Phase 1+6)\n        phases:\n          type: array\n          description: Information about each Phase\n          items:\n            type: object\n            properties:\n              phase:\n                type: integer\n                description: Phase ID number\n              color:\n                type: string\n                description: The displayed color of the current Phase\n                enum:\n                - GREEN\n                - RED\n                - YELLOW\n              flash:\n                type: boolean\n                description: Is the signal flashing?\n              overlap:\n                type: object\n                properties:\n                  green:\n                    type: boolean\n                    description: Does this phase have a green overlap set.\n                  yellow:\n                    type: boolean\n                    description: Does this phase have a yellow overlap set\n                  red:\n                    type: boolean\n                    description: Does this phase have a red overlap set\n                  flash:\n                    type: boolean\n                    description: Does this phase have a flash overlap set\n              vehTimeMin:\n                type: number\n                description: Minimum time (seconds) until next phase for vehicle.\n              vehTimeMax:\n                type: number\n                description: Minimum time (seconds) until next phase for vehicle.\n              pedTimeMin:\n                type: number\n                description: Minimum time (seconds) until next phase for vehicle.\n              pedTimeMax:\n                type: number\n                description: Minimum time (seconds) until next phase for vehicle.\n    V2XRaw:\n      type: object\n      description: A raw message delivered from a V2X Device.\n      properties:\n        id:\n          description: Identifier, if known of the transmitting RSU or OBU.\n          type: string\n        messageSet:\n          description: The format, if known, this message is broadcast in.\n          type: string\n          enum:\n          - J2735_201603\n          - J2735_201601\n          - J2735_201509\n          - J2735_200911\n          - J2735_200612\n          - NTCIP\n        updated:\n          description: The date and time this message was broadcast by OCTANE.\n          type: string\n          format: date-time\n        data:\n          description: The raw payload of the message, HEX encoded.\n          type: string\n          example: '0000000000100001'\n    V2XBSM:\n      type: object\n      description: Basic Safety Message received from an OBU.\n      properties:\n        id:\n          description: Eight hex character static identifier if available, else temporary\n            identifier provided by OBU.\n          type: string\n        idTemporary:\n          description: Temporary identifier\n          type: string\n        idFixed:\n          description: Permanent vehicle identifier for known vehicles.\n          type: string\n        messageSet:\n          description: The original format this message was broadcast in before decoding.\n          type: string\n          enum:\n          - J2735_201603\n          - J2735_201601\n          - J2735_201509\n          - J2735_200911\n          - J2735_200612\n        vehicleLength:\n          description: Vehicle length in Meters\n          type: number\n        vehicleWidth:\n          description: Vehicle width in Meters\n          type: number\n        updated:\n          description: The date time this message was sent via OCTANE.\n          type: string\n          format: date-time\n        longitude:\n          type: number\n          description: Longitude of the transmitting V2X device.\n        latitude:\n          type: number\n          description: Latitude of the transmitting V2X device.\n        elevation:\n          type: number\n          description: Elevation of transmitting V2X device. Units in meters\n        speed:\n          type: number\n          description: Reported Velocity of V2X Device. Units in meters/second\n        heading:\n          type: number\n          description: 0 to 359.9875 degrees.\n        angle:\n          type: number\n          description: 0 to 359.9875 degrees.\n    V2XPSM:\n      type: object\n      description: Personal Safety Message received from an OBU.\n      properties:\n        id:\n          description: Eight hex character static identifier if available, else temporary\n            identifier provided by Personal Safety Device.\n          type: string\n        messageSet:\n          description: The original format this message was broadcast in before decoding.\n          type: string\n          enum:\n          - J2735_201603\n          - J2735_201601\n          - J2735_201509\n          - J2735_200911\n          - J2735_200612\n        updated:\n          description: The date time this message was sent via OCTANE.\n          type: string\n          format: date-time\n        longitude:\n          type: number\n          description: Longitude of the transmitting V2X device.\n        latitude:\n          type: number\n          description: Latitude of the transmitting V2X device.\n        elevation:\n          type: number\n          description: Elevation of transmitting V2X device. Units in meters\n        speed:\n          type: number\n          description: Reported Velocity of V2X Device. Units in m/s\n        heading:\n          type: number\n          description: 0 to 359.9875 degrees.\n        type:\n          type: string\n          description: The personal safety message user type\n          enum:\n          - pedestrian\n          - bicyclist\n          - worker\n          - animal\n          - godzilla\n        size:\n          type: string\n          description: Estimated size of the PSM. Large is \u003e 1.5m\n          enum:\n          - unknown\n          - small\n          - large\n    Beacon:\n      type: object\n      description: A generic device capable of emitting a location and used to track\n        a module not already in Octane\n      required:\n      - id\n      - name\n      properties:\n        id:\n          type: string\n          nullable: true\n          description: MAC address or other unique identifier for the Beacon\n        name:\n          type: string\n          description: A short text based description of the beacon (Mcity RTK Device)\n        description:\n          type: string\n          nullable: true\n          description: Additional description which may be helpful - for example,\n            'The beacon host was a 1981 Delorean'\n        octaneAssociation:\n          type: object\n          nullable: true\n          description: Association with Octane module (if any - ie. Safety).  Updates\n            to state will attempt to updated associated device/equipment module/id\n          properties:\n            module:\n              $ref: '#/components/schemas/OctaneModuleType'\n            id:\n              type: number\n              description: Unique identifier for the device/equipment - generally\n                retrieved from a GET method in the API\n        host:\n          type: object\n          nullable: true\n          description: Size and height of the beacon host (if available)\n          properties:\n            width:\n              type: number\n              nullable: true\n              description: Width, in meters, of the host carrying the beacon.\n            length:\n              type: number\n              nullable: true\n              description: Length, in meters, of the host carrying the beacon.\n            height:\n              type: number\n              nullable: true\n              description: Height, in meters, of the host carrying the beacon.\n        hostLocation:\n          type: object\n          nullable: true\n          description: Location of the beacon, relative to the host\n          properties:\n            x:\n              type: number\n              nullable: true\n              description: If a host is carrying the beacon, the location of the beacon\n                in meters from the left (x, 0, 0) edge\n            y:\n              type: number\n              nullable: true\n              description: If a host is carrying the beacon, the location of the beacon\n                in meters from the bottom-left (0, y, 0) edge\n            z:\n              type: number\n              nullable: true\n              description: If a host is carrying the beacon, the location of the beacon\n                in meters from the base of the host (0,0,z)\n        state:\n          $ref: '#/components/schemas/BeaconState'\n    BeaconState:\n      type: object\n      description: The current state of the beacon\n      properties:\n        dynamics:\n          type: object\n          description: Any or all of the known attributes associated with motion and\n            position\n          properties:\n            longitude:\n              type: number\n              nullable: true\n              description: The last reported longitude of the beacon\n            latitude:\n              type: number\n              nullable: true\n              description: The last reported longitude of the beacon\n            heading:\n              description: The last reported heading, relative to true north, of the\n                beacon\n              nullable: true\n              type: number\n            velocity:\n              description: The last reported velocity of the beacon (m/s)\n              nullable: true\n              type: number\n            acceleration:\n              description: The last reported acceleration of the beacon (m/s)\n              nullable: true\n              type: number\n            elevation:\n              description: The last reported elevation of the beacon (m/s)\n              nullable: true\n              type: number\n            updated:\n              type: string\n              nullable: true\n              format: date-time\n              description: The last time the dynamics of this beacon were updated\n        v2xCommunication:\n          type: object\n          properties:\n            enabled:\n              type: boolean\n              description: Whether PSMs/BSMs should be emitted (can be enabled/disabled\n                later)\n            type:\n              type: string\n              enum:\n              - pedestrian\n              - bicyclist\n              - worker\n              - animal\n              - vehicle\n              description: Type of object the beacon is attached to\n        connection:\n          type: object\n          nullable: true\n          description: A description of the robot network connection\n          properties:\n            type:\n              description: Network interface for connection\n              type: string\n              enum:\n              - WIFI\n              - DSRC\n              - CELLULAR\n              - ZIGBEE\n              - ETHERNET\n              - DIRECT\n            strength:\n              description: The connection strength rating 0-100 of the lowest of either\n                RX or TX measurements.\n              type: integer\n            quality:\n              description: The signal quality rating 0-100 of the lowest of either\n                RX or TX measurements.\n              type: integer\n            network:\n              description: The reported network name (Ex. MWireless, T-Mobile)\n              type: string\n            updated:\n              description: The last time the connection information of this beacon\n                were updated\n              type: string\n              format: date-time\n        charge:\n          type: object\n          description: A description of the beacon power status\n          properties:\n            updated:\n              description: The last time this beacon reported power state\n              type: string\n              format: date-time\n            charging:\n              description: Is the beacon charging?\n              type: boolean\n            percent:\n              description: How much percent of battery life is left? (0-100)\n              type: integer\n              format: double\n            voltage:\n              description: The current voltage of the battery\n              type: number\n    APIError:\n      type: object\n      properties:\n        internalCode:\n          type: integer\n          format: int32\n          description: The internal error code encountered by the API\n        status:\n          type: integer\n          description: The HTTP error code returned with this error object. (legacy)\n        httpStatusCode:\n          type: integer\n          description: The HTTP error code returned with this error object.\n        message:\n          type: string\n          description: The error message encountered\n        humanMessage:\n          type: string\n          description: A human readable HTTP error code\n    Scenario:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of the scenario\n        name:\n          type: string\n          description: Name of the scenario\n        owner:\n          type: string\n          description: Email of the scenario owner\n        workspace:\n          type: string\n          description: The XML structure containing the code to be run in the scenario\n        lastModified:\n          type: string\n          format: date-time\n          description: Time that the scenario was last modified\n    UserMessage:\n      type: object\n      properties:\n        message:\n          type: string\n          description: A message\n        user:\n          type: string\n          description: The user name provided as the message sender.\n        time:\n          type: string\n          format: date-time\n          description: Time that the message was sent.\n    IPCMessage:\n      type: object\n      properties:\n        payload:\n          type: string\n          description: A message payload object to be shared related to the listed\n            type.\n        type:\n          type: string\n          description: A string representing the type of IPC message. Reserved IPC\n            types are shown below. Contact mcity-engineering@umich.edu to request\n            a reserved type.\n          enum:\n          - POI\n          - OVERLAY\n          - SCENARIO\n        time:\n          type: string\n          format: date-time\n          description: Time that the message was sent to the server. This is server\n            generated.\n    FacilityMessage:\n      type: object\n      properties:\n        message:\n          type: string\n          description: A message containing a notification.\n        type:\n          type: string\n          description: A type describing the message\n          enum:\n          - NOTIFY\n          - WEATHER\n          - SCHEDULE\n        time:\n          type: string\n          format: date-time\n          description: Time that the notification was sent.\n",
			"canonicalURL": "/github.com/mcity/octane-api@7561109f3842cbd837b79b39b63c33cd3910dfba/-/blob/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/mcity/octane-api/blob/7561109f3842cbd837b79b39b63c33cd3910dfba/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/octane/crosswalk_request\": get: responses: 200: content: */*: schema: parse schema: at 1:102248: object cannot contain 'items' field"
}