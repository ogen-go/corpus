{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/DiabeticTurtle/Nightscout-Re-Design"
		},
		"file": {
			"name": "swagger.json",
			"size": 0,
			"path": "swagger.json",
			"byteSize": 43285,
			"content": "{\n  \"openapi\": \"3.0.0\",\n  \"servers\": [\n    {\n      \"url\": \"/api/v1\"\n    }\n  ],\n  \"info\": {\n    \"title\": \"Nightscout API\",\n    \"description\": \"Own your DData with the Nightscout API\",\n    \"version\": \"14.0.3\",\n    \"license\": {\n      \"name\": \"AGPL 3\",\n      \"url\": \"https://www.gnu.org/licenses/agpl.txt\"\n    }\n  },\n  \"security\": [\n    {\n      \"api_secret\": [],\n      \"token_in_url\": [],\n      \"jwtoken\": []\n    }\n  ],\n  \"paths\": {\n    \"/entries/{spec}\": {\n      \"get\": {\n        \"summary\": \"All Entries matching query\",\n        \"description\": \"The Entries endpoint returns information about the\\nNightscout entries.\\n\",\n        \"parameters\": [\n          {\n            \"name\": \"spec\",\n            \"in\": \"path\",\n            \"description\": \"entry id, such as `55cf81bc436037528ec75fa5` or a type filter such\\nas `sgv`, `mbg`, etc.\\n\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"default\": \"sgv\"\n            }\n          },\n          {\n            \"name\": \"find\",\n            \"in\": \"query\",\n            \"description\": \"The query used to find entries, support nested query syntax, for\\nexample `find[dateString][$gte]=2015-08-27`.  All find parameters\\nare interpreted as strings.\\n\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"count\",\n            \"in\": \"query\",\n            \"description\": \"Number of entries to return.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"tags\": [\n          \"Entries\"\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"An array of entries\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Entries\"\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"Entries\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Entries\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/slice/{storage}/{field}/{type}/{prefix}/{regex}\": {\n      \"get\": {\n        \"summary\": \"All Entries matching query\",\n        \"description\": \"The Entries endpoint returns information about the Nightscout entries.\",\n        \"parameters\": [\n          {\n            \"name\": \"storage\",\n            \"in\": \"path\",\n            \"description\": \"Prefix to use in constructing a prefix-based regex, default is `entries`.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"default\": \"entries\"\n            }\n          },\n          {\n            \"name\": \"field\",\n            \"in\": \"path\",\n            \"description\": \"Name of the field to use Regex against in query object, default is `dateString`.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"default\": \"dateString\"\n            }\n          },\n          {\n            \"name\": \"type\",\n            \"in\": \"path\",\n            \"description\": \"The type field to search against, default is sgv.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"default\": \"sgv\"\n            }\n          },\n          {\n            \"name\": \"prefix\",\n            \"in\": \"path\",\n            \"description\": \"Prefix to use in constructing a prefix-based regex.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"default\": \"2015\"\n            }\n          },\n          {\n            \"name\": \"regex\",\n            \"in\": \"path\",\n            \"description\": \"Tail part of regexp to use in expanding/construccting a query object.\\nRegexp also has bash-style brace and glob expansion applied to it,\\ncreating ways to search for modal times of day, perhaps using\\nsomething like this syntax: `T{15..17}:.*`, this would search for\\nall records from 3pm to 5pm.\\n\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"default\": \".*\"\n            }\n          },\n          {\n            \"name\": \"find\",\n            \"in\": \"query\",\n            \"description\": \"The query used to find entries, support nested query syntax, for\\nexample `find[dateString][$gte]=2015-08-27`.  All find parameters\\nare interpreted as strings.\\n\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"count\",\n            \"in\": \"query\",\n            \"description\": \"Number of entries to return.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"tags\": [\n          \"Entries\"\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"An array of entries\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Entries\"\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"Unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/echo/{storage}/{spec}\": {\n      \"get\": {\n        \"summary\": \"View generated Mongo Query object\",\n        \"description\": \"Information about the mongo query object created by the query.\\n\",\n        \"parameters\": [\n          {\n            \"name\": \"storage\",\n            \"in\": \"path\",\n            \"description\": \"`entries`, or `treatments` to select the storage layer.\\n\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"default\": \"sgv\"\n            }\n          },\n          {\n            \"name\": \"spec\",\n            \"in\": \"path\",\n            \"description\": \"entry id, such as `55cf81bc436037528ec75fa5` or a type filter such\\nas `sgv`, `mbg`, etc.\\nThis parameter is optional.\\n\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"default\": \"sgv\"\n            }\n          },\n          {\n            \"name\": \"find\",\n            \"in\": \"query\",\n            \"description\": \"The query used to find entries, support nested query syntax, for\\nexample `find[dateString][$gte]=2015-08-27`.  All find parameters\\nare interpreted as strings.\\n\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"count\",\n            \"in\": \"query\",\n            \"description\": \"Number of entries to return.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"tags\": [\n          \"Entries\",\n          \"Debug\"\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"An array of entries\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/MongoQuery\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/times/echo/{prefix}/{regex}\": {\n      \"get\": {\n        \"summary\": \"Echo the query object to be used.\",\n        \"description\": \"Echo debug information about the query object constructed.\",\n        \"parameters\": [\n          {\n            \"name\": \"prefix\",\n            \"in\": \"path\",\n            \"description\": \"Prefix to use in constructing a prefix-based regex.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"regex\",\n            \"in\": \"path\",\n            \"description\": \"Tail part of regexp to use in expanding/construccting a query object.\\nRegexp also has bash-style brace and glob expansion applied to it,\\ncreating ways to search for modal times of day, perhaps using\\nsomething like this syntax: `T{15..17}:.*`, this would search for\\nall records from 3pm to 5pm.\\n\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"find\",\n            \"in\": \"query\",\n            \"description\": \"The query used to find entries, support nested query syntax, for example `find[dateString][$gte]=2015-08-27`.  All find parameters are interpreted as strings.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"count\",\n            \"in\": \"query\",\n            \"description\": \"Number of entries to return.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"tags\": [\n          \"Entries\",\n          \"Debug\"\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"An array of entries\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/MongoQuery\"\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"Unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/times/{prefix}/{regex}\": {\n      \"get\": {\n        \"summary\": \"All Entries matching query\",\n        \"description\": \"The Entries endpoint returns information about the Nightscout entries.\",\n        \"parameters\": [\n          {\n            \"name\": \"prefix\",\n            \"in\": \"path\",\n            \"description\": \"Prefix to use in constructing a prefix-based regex.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"regex\",\n            \"in\": \"path\",\n            \"description\": \"Tail part of regexp to use in expanding/construccting a query object.\\nRegexp also has bash-style brace and glob expansion applied to it,\\ncreating ways to search for modal times of day, perhaps using\\nsomething like this syntax: `T{15..17}:.*`, this would search for\\nall records from 3pm to 5pm.\\n\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"find\",\n            \"in\": \"query\",\n            \"description\": \"The query used to find entries, support nested query syntax, for example `find[dateString][$gte]=2015-08-27`.  All find parameters are interpreted as strings.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"count\",\n            \"in\": \"query\",\n            \"description\": \"Number of entries to return.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"tags\": [\n          \"Entries\"\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"An array of entries\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Entries\"\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"Unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/entries\": {\n      \"get\": {\n        \"summary\": \"All Entries matching query\",\n        \"description\": \"The Entries endpoint returns information about the Nightscout entries.\",\n        \"parameters\": [\n          {\n            \"name\": \"find\",\n            \"in\": \"query\",\n            \"description\": \"The query used to find entries, support nested query syntax, for example `find[dateString][$gte]=2015-08-27`.  All find parameters are interpreted as strings.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"count\",\n            \"in\": \"query\",\n            \"description\": \"Number of entries to return.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"tags\": [\n          \"Entries\"\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"An array of entries\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Entries\"\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"Unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Entries\"\n        ],\n        \"summary\": \"Add new entries.\",\n        \"description\": \"\",\n        \"operationId\": \"addEntries\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Rejected list of entries.  Empty list is success.\"\n          },\n          \"405\": {\n            \"description\": \"Invalid input\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/Entries\"\n              }\n            },\n            \"text/plain\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/Entries\"\n              }\n            }\n          },\n          \"description\": \"Entries to be uploaded.\",\n          \"required\": true\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Entries\"\n        ],\n        \"summary\": \"Delete entries matching query.\",\n        \"description\": \"Remove entries, same search syntax as GET.\",\n        \"operationId\": \"remove\",\n        \"parameters\": [\n          {\n            \"name\": \"find\",\n            \"in\": \"query\",\n            \"description\": \"The query used to find entries, support nested query syntax, for example `find[dateString][$gte]=2015-08-27`.  All find parameters are interpreted as strings.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"count\",\n            \"in\": \"query\",\n            \"description\": \"Number of entries to return.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Empty list is success.\"\n          }\n        }\n      }\n    },\n    \"/treatments\": {\n      \"get\": {\n        \"summary\": \"Treatments\",\n        \"description\": \"The Treatments endpoint returns information about the Nightscout treatments.\",\n        \"tags\": [\n          \"Treatments\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"find\",\n            \"in\": \"query\",\n            \"description\": \"The query used to find entries, supports nested query syntax.  Examples `find[insulin][$gte]=3` `find[carb][$gte]=100` `find[eventType]=Correction+Bolus` All find parameters are interpreted as strings.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"count\",\n            \"in\": \"query\",\n            \"description\": \"Number of entries to return.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"An array of treatments\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Treatments\"\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"Unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Treatments\"\n        ],\n        \"summary\": \"Add new treatments.\",\n        \"description\": \"\",\n        \"operationId\": \"addTreatments\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Rejected list of treatments.  Empty list is success.\"\n          },\n          \"405\": {\n            \"description\": \"Invalid input\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/Treatments\"\n              }\n            }\n          },\n          \"description\": \"Treatments to be uploaded.\",\n          \"required\": true\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Treatments\"\n        ],\n        \"summary\": \"Delete treatments matching query.\",\n        \"description\": \"Remove treatments, same search syntax as GET.\",\n        \"operationId\": \"remove\",\n        \"parameters\": [\n          {\n            \"name\": \"find\",\n            \"in\": \"query\",\n            \"description\": \"The query used to find treatments to delete, support nested query syntax, for example `find[insulin][$gte]=3`. All find parameters are interpreted as strings.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"count\",\n            \"in\": \"query\",\n            \"description\": \"Number of entries to return.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Empty list is success.\"\n          }\n        }\n      }\n    },\n    \"/treatments/{spec}\": {\n      \"delete\": {\n        \"summary\": \"Delete treatments record with id provided in spec\",\n        \"description\": \"The Treatments endpoint returns information about the\\nNightscout devicestatus records.\\n\",\n        \"parameters\": [\n          {\n            \"name\": \"spec\",\n            \"in\": \"path\",\n            \"description\": \"treatment id, such as `55cf81bc436037528ec75fa5`\\n\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"tags\": [\n          \"Treatments\"\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"A status record of the delete.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/DeleteStatus\"\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"Unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/profile\": {\n      \"get\": {\n        \"summary\": \"Profile\",\n        \"description\": \"The Profile endpoint returns information about the Nightscout Treatment Profiles.\",\n        \"tags\": [\n          \"Profile\"\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"An array of treatments\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Profile\"\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"Unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/status\": {\n      \"get\": {\n        \"summary\": \"Status\",\n        \"description\": \"Server side status, default settings and capabilities.\",\n        \"tags\": [\n          \"Status\"\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Server capabilities and status.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Status\"\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"Unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/devicestatus/\": {\n      \"get\": {\n        \"summary\": \"All Devicestatuses matching query\",\n        \"description\": \"The Devicestatus endpoint returns information about the Nightscout devicestatus records.\",\n        \"parameters\": [\n          {\n            \"name\": \"find\",\n            \"in\": \"query\",\n            \"description\": \"The query used to find entries, support nested query syntax, for example `find[dateString][$gte]=2015-08-27`.  All find parameters are interpreted as strings.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"count\",\n            \"in\": \"query\",\n            \"description\": \"Number of devicestatus records to return.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"tags\": [\n          \"Devicestatus\"\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"An array of devicestatus entries\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Devicestatuses\"\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"Unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Devicestatus\"\n        ],\n        \"summary\": \"Add new devicestatus records.\",\n        \"description\": \"\",\n        \"operationId\": \"addDevicestatuses\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Rejected list of device statuses.  Empty list is success.\"\n          },\n          \"405\": {\n            \"description\": \"Invalid input\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/Devicestatuses\"\n              }\n            }\n          },\n          \"description\": \"Device statuses to be uploaded.\",\n          \"required\": true\n        }\n      },\n      \"delete\": {\n        \"summary\": \"Delete all Devicestatus records matching query\",\n        \"description\": \"The Devicestatus endpoint returns information about the\\nNightscout devicestatus records.\\n\",\n        \"parameters\": [\n          {\n            \"name\": \"find\",\n            \"in\": \"query\",\n            \"description\": \"The query used to find entries, support nested query syntax, for\\nexample `find[created_at][$gte]=2015-08-27`.  All find parameters\\nare interpreted as strings.\\n\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"tags\": [\n          \"Devicestatus\"\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"A status record of the delete.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/DeleteStatus\"\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"Unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/devicestatus/{spec}\": {\n      \"delete\": {\n        \"summary\": \"Delete devicestatus record with id provided in spec\",\n        \"description\": \"The Devicestatus endpoint returns information about the\\nNightscout devicestatus records.\\n\",\n        \"parameters\": [\n          {\n            \"name\": \"spec\",\n            \"in\": \"path\",\n            \"description\": \"entry id, such as `55cf81bc436037528ec75fa5`\\n\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"tags\": [\n          \"Devicestatus\"\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"A status record of the delete.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/DeleteStatus\"\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"Unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"securitySchemes\": {\n      \"api_secret\": {\n        \"type\": \"apiKey\",\n        \"name\": \"api_secret\",\n        \"in\": \"header\",\n        \"description\": \"The hash of the API_SECRET env var\"\n      },\n      \"token_in_url\": {\n        \"type\": \"apiKey\",\n        \"name\": \"token\",\n        \"in\": \"query\",\n        \"description\": \"Add token as query item in the URL. You can manage access Token in `/admin`. This uses json webtokens.\"\n      },\n      \"jwtoken\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"description\": \"Use this if you know the temporary json webtoken.\",\n        \"bearerFormat\": \"JWT\"\n      }\n    },\n    \"schemas\": {\n      \"Entry\": {\n        \"properties\": {\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"sgv, mbg, cal, etc\"\n          },\n          \"dateString\": {\n            \"type\": \"string\",\n            \"description\": \"dateString, MUST be ISO `8601` format date parseable by Javascript Date()\"\n          },\n          \"date\": {\n            \"type\": \"number\",\n            \"description\": \"Epoch\"\n          },\n          \"sgv\": {\n            \"type\": \"number\",\n            \"description\": \"The glucose reading. (only available for sgv types)\"\n          },\n          \"direction\": {\n            \"type\": \"string\",\n            \"description\": \"Direction of glucose trend reported by CGM. (only available for sgv types)\"\n          },\n          \"noise\": {\n            \"type\": \"number\",\n            \"description\": \"Noise level at time of reading. (only available for sgv types)\"\n          },\n          \"filtered\": {\n            \"type\": \"number\",\n            \"description\": \"The raw filtered value directly from CGM transmitter. (only available for sgv types)\"\n          },\n          \"unfiltered\": {\n            \"type\": \"number\",\n            \"description\": \"The raw unfiltered value directly from CGM transmitter. (only available for sgv types)\"\n          },\n          \"rssi\": {\n            \"type\": \"number\",\n            \"description\": \"The signal strength from CGM transmitter. (only available for sgv types)\"\n          }\n        }\n      },\n      \"Entries\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/Entry\"\n        }\n      },\n      \"Devicestatus\": {\n        \"required\": [\n          \"device\",\n          \"created_at\"\n        ],\n        \"properties\": {\n          \"device\": {\n            \"type\": \"string\",\n            \"description\": \"Device type and hostname for example openaps://hostname\"\n          },\n          \"created_at\": {\n            \"type\": \"string\",\n            \"description\": \"dateString, prefer ISO `8601`\"\n          },\n          \"openaps\": {\n            \"type\": \"string\",\n            \"description\": \"OpenAPS devicestatus record - TODO: Fill Out Details\"\n          },\n          \"loop\": {\n            \"type\": \"string\",\n            \"description\": \"Loop devicestatus record - TODO: Fill Out Details\"\n          },\n          \"pump\": {\n            \"$ref\": \"#/components/schemas/pump\"\n          },\n          \"uploader\": {\n            \"$ref\": \"#/components/schemas/uploader\"\n          },\n          \"xdripjs\": {\n            \"$ref\": \"#/components/schemas/xdripjs\"\n          }\n        }\n      },\n      \"Devicestatuses\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/Devicestatus\"\n        }\n      },\n      \"pump\": {\n        \"properties\": {\n          \"clock\": {\n            \"type\": \"string\",\n            \"description\": \"dateString, prefer ISO `8601`\"\n          },\n          \"battery\": {\n            \"$ref\": \"#/components/schemas/pumpbattery\"\n          },\n          \"reservoir\": {\n            \"type\": \"number\",\n            \"description\": \"Amount of insulin remaining in pump reservoir\"\n          },\n          \"status\": {\n            \"$ref\": \"#/components/schemas/pumpstatus\"\n          }\n        }\n      },\n      \"pumpbattery\": {\n        \"properties\": {\n          \"status\": {\n            \"type\": \"string\",\n            \"description\": \"Pump Battery Status String\"\n          },\n          \"voltage\": {\n            \"type\": \"number\",\n            \"description\": \"Pump Battery Voltage Level\"\n          }\n        }\n      },\n      \"pumpstatus\": {\n        \"properties\": {\n          \"status\": {\n            \"type\": \"string\",\n            \"description\": \"Pump Status String\"\n          },\n          \"bolusing\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is Pump Bolusing\"\n          },\n          \"suspended\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is Pump Suspended\"\n          },\n          \"timestamp\": {\n            \"type\": \"string\",\n            \"description\": \"dateString, prefer ISO `8601`\"\n          }\n        }\n      },\n      \"uploader\": {\n        \"properties\": {\n          \"batteryVoltage\": {\n            \"type\": \"number\",\n            \"description\": \"Uploader Device Battery Voltage\"\n          },\n          \"battery\": {\n            \"type\": \"number\",\n            \"description\": \"Uploader Device Battery Percentage Charge Remaining\"\n          }\n        }\n      },\n      \"xdripjs\": {\n        \"properties\": {\n          \"state\": {\n            \"type\": \"number\",\n            \"description\": \"CGM Sensor Session State Code\"\n          },\n          \"stateString\": {\n            \"type\": \"string\",\n            \"description\": \"CGM Sensor Session State String\"\n          },\n          \"stateStringShort\": {\n            \"type\": \"string\",\n            \"description\": \"CGM Sensor Session State Short String\"\n          },\n          \"txId\": {\n            \"type\": \"string\",\n            \"description\": \"CGM Transmitter ID\"\n          },\n          \"txStatus\": {\n            \"type\": \"number\",\n            \"description\": \"CGM Transmitter Status\"\n          },\n          \"txStatusString\": {\n            \"type\": \"string\",\n            \"description\": \"CGM Transmitter Status String\"\n          },\n          \"txStatusStringShort\": {\n            \"type\": \"string\",\n            \"description\": \"CGM Transmitter Status Short String\"\n          },\n          \"txActivation\": {\n            \"type\": \"number\",\n            \"description\": \"CGM Transmitter Activation Milliseconds After Epoch\"\n          },\n          \"mode\": {\n            \"type\": \"string\",\n            \"description\": \"Mode xdrip-js Application Operationg: expired, not expired, etc.\"\n          },\n          \"timestamp\": {\n            \"type\": \"number\",\n            \"description\": \"Last Update Milliseconds After Epoch\"\n          },\n          \"rssi\": {\n            \"type\": \"number\",\n            \"description\": \"Receive Signal Strength of Transmitter\"\n          },\n          \"unfiltered\": {\n            \"type\": \"number\",\n            \"description\": \"Most Recent Raw Unfiltered Glucose\"\n          },\n          \"filtered\": {\n            \"type\": \"number\",\n            \"description\": \"Most Recent Raw Filtered Glucose\"\n          },\n          \"noise\": {\n            \"type\": \"number\",\n            \"description\": \"Calculated Noise Value - 1=Clean, 2=Light, 3=Medium, 4=Heavy\"\n          },\n          \"noiseString\": {\n            \"type\": \"number\",\n            \"description\": \"Noise Value String\"\n          },\n          \"slope\": {\n            \"type\": \"number\",\n            \"description\": \"Calibration Slope Value\"\n          },\n          \"intercept\": {\n            \"type\": \"number\",\n            \"description\": \"Calibration Intercept Value\"\n          },\n          \"calType\": {\n            \"type\": \"string\",\n            \"description\": \"Algorithm Used to Calculate Calibration Values\"\n          },\n          \"lastCalibrationDate\": {\n            \"type\": \"number\",\n            \"description\": \"Most Recent Calibration Milliseconds After Epoch\"\n          },\n          \"sessionStart\": {\n            \"type\": \"number\",\n            \"description\": \"Sensor Session Start Milliseconds After Epoch\"\n          },\n          \"batteryTimestamp\": {\n            \"type\": \"number\",\n            \"description\": \"Most Recent Batter Status Read Milliseconds After Epoch\"\n          },\n          \"voltagea\": {\n            \"type\": \"number\",\n            \"description\": \"Voltage of Battery A\"\n          },\n          \"voltageb\": {\n            \"type\": \"number\",\n            \"description\": \"Voltage of Battery B\"\n          },\n          \"temperature\": {\n            \"type\": \"number\",\n            \"description\": \"Transmitter Temperature\"\n          },\n          \"resistance\": {\n            \"type\": \"number\",\n            \"description\": \"Sensor Resistance\"\n          }\n        }\n      },\n      \"Treatment\": {\n        \"properties\": {\n          \"_id\": {\n            \"type\": \"string\",\n            \"description\": \"Internally assigned id.\"\n          },\n          \"eventType\": {\n            \"type\": \"string\",\n            \"description\": \"The type of treatment event.\"\n          },\n          \"created_at\": {\n            \"type\": \"string\",\n            \"description\": \"The date of the event, might be set retroactively .\"\n          },\n          \"glucose\": {\n            \"type\": \"string\",\n            \"description\": \"Current glucose.\"\n          },\n          \"glucoseType\": {\n            \"type\": \"string\",\n            \"description\": \"Method used to obtain glucose, Finger or Sensor.\"\n          },\n          \"carbs\": {\n            \"type\": \"number\",\n            \"description\": \" Amount of carbs consumed in grams.\"\n          },\n          \"protein\": {\n            \"type\": \"number\",\n            \"description\": \" Amount of protein consumed in grams.\"\n          },\n          \"fat\": {\n            \"type\": \"number\",\n            \"description\": \" Amount of fat consumed in grams.\"\n          },\n          \"insulin\": {\n            \"type\": \"number\",\n            \"description\": \"Amount of insulin, if any.\"\n          },\n          \"units\": {\n            \"type\": \"string\",\n            \"description\": \"The units for the glucose value, mg/dl or mmol.\"\n          },\n          \"notes\": {\n            \"type\": \"string\",\n            \"description\": \"Description/notes of treatment.\"\n          },\n          \"enteredBy\": {\n            \"type\": \"string\",\n            \"description\": \"Who entered the treatment.\"\n          }\n        }\n      },\n      \"Treatments\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/Treatment\"\n        }\n      },\n      \"Profile\": {\n        \"properties\": {\n          \"sens\": {\n            \"type\": \"integer\",\n            \"description\": \"Internally assigned id\"\n          },\n          \"dia\": {\n            \"type\": \"integer\",\n            \"description\": \"Internally assigned id\"\n          },\n          \"carbratio\": {\n            \"type\": \"integer\",\n            \"description\": \"Internally assigned id\"\n          },\n          \"carbs_hr\": {\n            \"type\": \"integer\",\n            \"description\": \"Internally assigned id\"\n          },\n          \"_id\": {\n            \"type\": \"string\",\n            \"description\": \"Internally assigned id\"\n          }\n        }\n      },\n      \"Status\": {\n        \"properties\": {\n          \"apiEnabled\": {\n            \"type\": \"boolean\",\n            \"description\": \"Whether or not the REST API is enabled.\"\n          },\n          \"careportalEnabled\": {\n            \"type\": \"boolean\",\n            \"description\": \"Whether or not the careportal is enabled in the API.\"\n          },\n          \"head\": {\n            \"type\": \"string\",\n            \"description\": \"The git identifier for the running instance of the app.\"\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"Nightscout (static)\"\n          },\n          \"version\": {\n            \"type\": \"string\",\n            \"description\": \"The version label of the app.\"\n          },\n          \"settings\": {\n            \"$ref\": \"#/components/schemas/Settings\"\n          },\n          \"extendedSettings\": {\n            \"$ref\": \"#/components/schemas/ExtendedSettings\"\n          }\n        }\n      },\n      \"Settings\": {\n        \"properties\": {\n          \"units\": {\n            \"type\": \"string\",\n            \"description\": \"Default units for glucose measurements across the server.\"\n          },\n          \"timeFormat\": {\n            \"type\": \"string\",\n            \"description\": \"Default time format\",\n            \"enum\": [\n              12,\n              24\n            ]\n          },\n          \"customTitle\": {\n            \"type\": \"string\",\n            \"description\": \"Default custom title to be displayed system wide.\"\n          },\n          \"nightMode\": {\n            \"type\": \"boolean\",\n            \"description\": \"Should Night mode be enabled by default?\"\n          },\n          \"theme\": {\n            \"type\": \"string\",\n            \"description\": \"Default theme to be displayed system wide, `default`, `colors`, `colorblindfriendly`.\"\n          },\n          \"language\": {\n            \"type\": \"string\",\n            \"description\": \"Default language code to be used system wide\"\n          },\n          \"showPlugins\": {\n            \"type\": \"string\",\n            \"description\": \"Plugins that should be shown by default\"\n          },\n          \"showRawbg\": {\n            \"type\": \"string\",\n            \"description\": \"If Raw BG is enabled when should it be shown? `never`, `always`, `noise`\"\n          },\n          \"alarmTypes\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"enum\": [\n              \"simple\",\n              \"predict\"\n            ],\n            \"description\": \"Enabled alarm types, can be multiple\"\n          },\n          \"alarmUrgentHigh\": {\n            \"type\": \"boolean\",\n            \"description\": \"Enable/Disable client-side Urgent High alarms by default, for use with `simple` alarms.\"\n          },\n          \"alarmHigh\": {\n            \"type\": \"boolean\",\n            \"description\": \"Enable/Disable client-side High alarms by default, for use with `simple` alarms.\"\n          },\n          \"alarmLow\": {\n            \"type\": \"boolean\",\n            \"description\": \"Enable/Disable client-side Low alarms by default, for use with `simple` alarms.\"\n          },\n          \"alarmUrgentLow\": {\n            \"type\": \"boolean\",\n            \"description\": \"Enable/Disable client-side Urgent Low alarms by default, for use with `simple` alarms.\"\n          },\n          \"alarmTimeagoWarn\": {\n            \"type\": \"boolean\",\n            \"description\": \"Enable/Disable client-side stale data alarms by default.\"\n          },\n          \"alarmTimeagoWarnMins\": {\n            \"type\": \"number\",\n            \"description\": \"Number of minutes before a stale data warning is generated.\"\n          },\n          \"alarmTimeagoUrgent\": {\n            \"type\": \"boolean\",\n            \"description\": \"Enable/Disable client-side urgent stale data alarms by default.\"\n          },\n          \"alarmTimeagoUrgentMins\": {\n            \"type\": \"number\",\n            \"description\": \"Number of minutes before a stale data warning is generated.\"\n          },\n          \"enable\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"Enabled features\"\n          },\n          \"thresholds\": {\n            \"$ref\": \"#/components/schemas/Threshold\"\n          }\n        }\n      },\n      \"Threshold\": {\n        \"properties\": {\n          \"bg_high\": {\n            \"type\": \"integer\",\n            \"description\": \"High BG range.\"\n          },\n          \"bg_target_top\": {\n            \"type\": \"integer\",\n            \"description\": \"Top of target range.\"\n          },\n          \"bg_target_bottom\": {\n            \"type\": \"integer\",\n            \"description\": \"Bottom of target range.\"\n          },\n          \"bg_low\": {\n            \"type\": \"integer\",\n            \"description\": \"Low BG range.\"\n          }\n        }\n      },\n      \"ExtendedSettings\": {\n        \"description\": \"Extended settings of client side plugins\"\n      },\n      \"MongoQuery\": {\n        \"description\": \"Mongo Query object.\"\n      },\n      \"Error\": {\n        \"properties\": {\n          \"code\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"message\": {\n            \"type\": \"string\"\n          },\n          \"fields\": {\n            \"type\": \"object\"\n          }\n        }\n      },\n      \"DeleteStatus\": {\n        \"properties\": {\n          \"n\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"description\": \"Number of records deleted\"\n          },\n          \"optime\": {\n            \"$ref\": \"#/components/schemas/optime\"\n          },\n          \"electionId\": {\n            \"type\": \"string\",\n            \"description\": \"Election id of operation\"\n          },\n          \"ok\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"description\": \"Status of whether delete was successful\"\n          },\n          \"operationTime\": {\n            \"type\": \"string\",\n            \"description\": \"Time delete operation was executed\"\n          },\n          \"$clusterTime\": {\n            \"type\": \"string\",\n            \"description\": \"Information about execution time in cluster environment\"\n          }\n        }\n      },\n      \"optime\": {\n        \"properties\": {\n          \"ts\": {\n            \"type\": \"string\",\n            \"description\": \"Time the operation started\"\n          },\n          \"t\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"description\": \"Time the operation took to complete\"\n          }\n        }\n      }\n    }\n  }\n}\n",
			"canonicalURL": "/github.com/DiabeticTurtle/Nightscout-Re-Design@c65870d5b408f0c11ab060ca1008a199b7b31f18/-/blob/swagger.json",
			"externalURLs": [
				{
					"url": "https://github.com/DiabeticTurtle/Nightscout-Re-Design/blob/c65870d5b408f0c11ab060ca1008a199b7b31f18/swagger.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: at 880:17: schemas: \"Settings\": parse schema: property \"timeFormat\": at 1271:25: parse enum values: parse value \"12\": expected type \"string\", got \"number\""
}