{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Hassan950/OudBackEnd"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/openapi.yaml",
			"byteSize": 188053,
			"content": "openapi: 3.0.0\ninfo:\n  version: \"1.0.1\"\n  title: Oud API Documentation\n  description: \u003e-\n    Web API endpoints enable application to access the Oud catalog and user\n    data. The endpoints are arranged in a structure defined by an object model.\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: Artists\n    description: Endpoints for artists\n  - name: Follow\n    description: \u003e-\n      Endpoints for managing the artists, users, and playlists that a user\n      follows.\n  - name: Users Profile\n    description: Endpoints for user’s profile.\n  - name: Albums\n    description: Endpoints for albums\n  - name: Tracks\n    description: Endpoints for tracks\n  - name: Playlists\n    description: Endpoints for Playlists.\n  - name: Library\n    description: Endpoints for User Library.\n  - name: Search\n    description: Endpoints for Searching.\n  - name: Premium\n    description: Endpoints for Premium.\n  - name: UsersAuth\n    description: Endpoints for user authentication\n  - name: Auth\n    description: Endpoints for general authentication\n  - name: Player\n    description: Endpoints for player\n  - name: Queue\n    description: Endpoints for queue\n  - name: Genres\n    description: Endpoints for genres\n  - name: Notifications\n    description: Endpoints for notifications\n  - name: Chat\n    description: Endpoints for Chatting\npaths:\n  /me/chat/:\n    get:\n      tags:\n      - Chat\n      summary: Get messages' threads\n      description: gets the messages' threads of the user in paging object sorted from most frequent modified to least\n      security:\n          - bearerAuth: []\n      parameters:\n      - name: limit\n        in: query\n        description: maximum number of threads to return (maximum 50, default 20)\n        schema:\n          type: integer\n      - name: offset\n        in: query\n        description: number of threads to skip from beginning to return (starts from zero)\n        schema:\n          type: integer\n      responses:\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '200':\n          description: list of threads inside a paging object\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Thread'\n                  limit: \n                    type: integer\n                    description:  maximum number of threads to return as set in the query or by default\n                  offset:\n                    type: integer\n                    description: index of the first element in the array\n                  total:\n                    type: integer\n                    description: total number of documents available in the database\n  /me/chat/{id}:\n    get:\n      tags:\n      - Chat\n      summary: Get messages of a thread\n      description: gets a specific thread of the user with its messages wrapped in paging object sorted from most frequent one to least.\n      security:\n          - bearerAuth: []\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n        description: ID of the thread\n      - name: limit\n        in: query\n        description: maximum number of messages to return (maximum 50, default 20)\n        schema:\n          type: integer\n      - name: offset\n        in: query\n        description: number of messages to skip from beginning to return (starts from zero)\n        schema:\n          type: integer\n      responses:\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '200':\n          description: A thread with messages paging object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Messages'\n    post:\n      tags:\n      - Chat\n      summary: Send Message to a Thread\n      description: sends a message to a specific thread of the user.\n      security:\n          - bearerAuth: []\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n        description: ID of the recipient\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                message:\n                  type: string\n                  description: The contents of the message\n      responses:\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '201':\n          $ref: '#/components/responses/Created'\n  /me/chat/{id}/{messageId}:\n    delete:\n      tags:\n      - Chat\n      summary: Delete Message From a Thread\n      description: Deletes a specific message from a thread\n      security:\n          - bearerAuth: []\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n        description: ID of the thread\n      - name: messageId\n        in: path\n        required: true\n        schema:\n          type: string\n        description: ID of the message to be deleted\n      responses:\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '204':\n          $ref: '#/components/responses/NoContent'\n  /me/notifications/:\n    put:\n      tags:\n        - Notifications\n      summary: Updates the registration token of a user\n      description: Updates the registration token that is used to send nofications to the user via Firebase Cloud Messaging(FCM).\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n                  description: The registration token of the user\n      responses:\n        '204':\n          description: the resources are updated and the response body is empty.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n\n  /genres/{id}:\n    get:\n      tags:\n        - Genres\n      summary: Get a genre\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: The ID for the genre.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: the response body contains a genre object in JSON format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Genre'\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /genres:\n    get:\n      tags:\n        - Genres\n      summary: Get all genres\n      description: Get all genres inside a paging object\n      parameters:\n        - name: limit\n          in: query\n          description: maximum number of genres to return (maximum 50, default 50)\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: number of genres to skip from beginning to return (starts from zero)\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: list of genres inside a paging object\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Genre'\n                  limit: \n                    type: integer\n                    description:  maximum number of genres to return as set in the query or by default\n                  offset:\n                    type: integer\n                    description: index of the first element in the array\n                  total:\n                    type: integer\n                    description: total number of documents available in the database\n        '400':\n          $ref: '#/components/responses/InvalidId'        \n  /me/premium/redeem:\n    patch:\n      tags:\n        - Premium\n      summary: Redeeming coupons that gives the user credit (Oud Coins)\n      description: \u003e-\n        Redeeming a valid coupon increases the user's credit (Oud Coins) that\n        can be used for subscribing in the Premium Plan\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                couponId:\n                  type: string\n                  description: \u003e-\n                    The coupon code\n      responses:\n        '200':\n          description: the response body contains the user private object with current credit in JSON format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserPrivate'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /me/premium/gift:\n    patch:\n      tags:\n        - Premium\n      summary: Subscribe or Resubscribe an user by spending The User's credit (Oud Coins)\n      description: \u003e-\n        subscribe or resubscribe an user by spending The User's credit (Oud Coins) as a gift. Sends a confirmation email for the gifted user that informs him that he was gifted and his end date.\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                userId:\n                  type: string\n                  description: \u003e-\n                    The Gifted User ID.\n      responses:\n        '200':\n          description: the response body contains the user private object with current credit in JSON format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserPrivate'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /albums/{id}/comments:\n    post:\n      tags:\n        - Albums\n      summary: add comments for the album\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: id of album to add comment to\n          schema:\n            type: string\n            format: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                comment:\n                  type: string    \n      responses:\n        '201':  \n          description: comment added\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n    get:\n      tags:\n        - Albums\n      summary: get comments for the album\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: id of album to add comment to\n          schema:\n            type: string\n            format: string\n      responses:\n        '200':\n          description: comments on the album\n          content:\n            application/json:\n              schema:\n                description: \u003e-\n                  The offset-based paging object is a container for a set of\n                  objects. It contains a key called items (whose value is an\n                  array of the requested objects) along with other keys like\n                  previous, next and limit that can be useful in future calls.\n                type: object\n                properties:\n                  comments:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        userName:\n                          type: string\n                        comment:\n                          type: string\n                    description: the Requested releases\n                  limit:\n                    type: integer\n                    description: \u003e-\n                      The maximum number of items in the response (as set in the\n                      query or by default).\n                  offset:\n                    type: integer\n                    description: \u003e-\n                      The offset of the items returned (as set in the query or\n                      by default).\n                  total:\n                    type: integer\n                    description: The total number of items available to return\n        '400':\n          description: bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /playlists/{id}/comments:\n    post:\n      tags:\n        - Playlists\n      summary: add comments for the playlist\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: id of playlist to add comment to\n          schema:\n            type: string\n            format: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                comment:\n                  type: string    \n      responses:\n        '201':  \n          description: comment added\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n    get:\n      tags:\n        - Playlists\n      summary: get comments for the playlist\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: id of playlist to add comment to\n          schema:\n            type: string\n            format: string\n      responses:\n        '200':\n          description: comments on the playlist\n          content:\n            application/json:\n              schema:\n                description: \u003e-\n                  The offset-based paging object is a container for a set of\n                  objects. It contains a key called items (whose value is an\n                  array of the requested objects) along with other keys like\n                  previous, next and limit that can be useful in future calls.\n                type: object\n                properties:\n                  comments:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        userName:\n                          type: string\n                        comment:\n                          type: string\n                    description: the Requested releases\n                  limit:\n                    type: integer\n                    description: \u003e-\n                      The maximum number of items in the response (as set in the\n                      query or by default).\n                  offset:\n                    type: integer\n                    description: \u003e-\n                      The offset of the items returned (as set in the query or\n                      by default).\n                  total:\n                    type: integer\n                    description: The total number of items available to return\n        '400':\n          description: bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'                      \n  /me/premium/subscribe:\n    patch:\n      tags:\n        - Premium\n      summary: Subscribe to Premium plan\n      description: Subscribe to Premium plan\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: the response body the user private object with plan updated to be the end date of the premium subscription.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserPrivate'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /artists/{artistId}:\n    get:\n      tags:\n        - Artists\n      summary: Get an Artist\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: artistId\n          in: path\n          description: The ID for the artist.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: the response body contains an artist object in JSON format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Artist'\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /artists/genres/{id}:\n    get:\n      tags:\n        - Artists\n      summary: Gets artists of a specific genre\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: The ID of the genre.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: the response body contains a list of artist objects in JSON format.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Artist'\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /artists/{artistId}/albums:\n    get:\n      tags:\n        - Artists\n      summary: Get an Artist's Albums\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: artistId\n          in: path\n          description: The ID for the artist.\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: \u003e-\n            The number of album objects to return. Minimum: 1. Maximum: 50. For\n            example: `limit=2`\n          schema:\n            type: integer\n            default: 20\n          required: false\n        - name: offset\n          in: query\n          description: \u003e-\n            The index of the first album to return. (0 is the first album). Use\n            with `limit` to get the next set of albums.\n          schema:\n            type: integer\n            default: 0\n        - name: included_groups\n          in: query\n          description: \u003e-\n                    A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. Valid values are:\n                      - album\n                      - single\n                      - appears_on\n                      - compilation'\n                    For example: include_groups=album,single.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: \u003e-\n            The response body contains an array of simplified album objects\n            (wrapped in a paging object) in JSON format.\n          content:\n            application/json:\n              schema:\n                description: \u003e-\n                  The offset-based paging object is a container for a set of\n                  objects. It contains a key called items (whose value is an\n                  array of the requested objects) along with other keys like\n                  total, offset and limit that can be useful in future calls.\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      type: object\n                      description: Album Simple Object\n                      properties:\n                        _id:\n                          type: string\n                          description: Unique ID of the album\n                        album_type:\n                          type: string\n                          description: \u003e-\n                            the type of the album: one of the following 'single', 'album' or\n                            'compilation'\n                        album_group:\n                          type: string\n                          description: \u003e-\n                            Possible values are “album”, “single”, “compilation”, “appears_on”. Compare to album_type this field represents relationship between the artist and the album.\n                        artists:\n                          type: array\n                          items:\n                            $ref: '#/components/schemas/ArtistSimple'\n                          description: \u003e-\n                            The artists of the album. Each artist object includes a link in href\n                            to more detailed information about the artist.\n                        image:\n                          type: string\n                          description: The source url of the image\n                        name:\n                          type: string\n                          description: The name of the album\n                        type:\n                          type: string\n                          description: The object type \"album\"\n                        released:\n                          type: boolean\n                          description: determines if the album is released for public or private\n                    description: The requested Albums.\n                  limit:\n                    type: integer\n                    description: \u003e-\n                      The maximum number of items in the response (as set in the\n                      query or by default).\n                  offset:\n                    type: integer\n                    description: \u003e-\n                      The offset of the items returned (as set in the query or\n                      by default).\n                  total:\n                    type: integer\n                    description: The maximum number of items available to return\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /artists/{artistId}/top-tracks:\n    get:\n      tags:\n        - Artists\n      security:\n        - bearerAuth: []\n      summary: Get an Artist's Top Tracks\n      description: Get information about an artist’s top tracks by views.\n      parameters:\n        - name: artistId\n          in: path\n          description: The ID for the artist.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: \u003e-\n            the response body contains an object whose key is `\"tracks\"` and\n            whose value is an array of up to 10 track objects in JSON format.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  tracks:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Track'\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /artists/{artistId}/related-artists:\n    get:\n      security:\n        - bearerAuth: []\n      tags:\n        - Artists\n      summary: Get an Artist's Related Artists\n      description: \u003e-\n        Get information about artists similar to a given artist. Similarity is\n        based on genre.\n      parameters:\n        - name: artistId\n          in: path\n          description: The ID for the artist.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: \u003e-\n            the response body contains an object whose key is `\"artists\"` and\n            whose value is an array of up to 20 artist objects in JSON format.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  artists:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Artist'\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /artists:\n    get:\n      tags:\n        - Artists\n      summary: Get Several Artists\n      description: Get information for several artists based on their IDs.\n      parameters:\n        - name: artistId\n          in: query\n          description: 'A comma-separated list of IDs for the artists. Maximum: 50 IDs.'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: \u003e-\n            the response body contains an object whose key is `\"artists\"` and\n            whose value is an array of artist objects in JSON format. Objects\n            are returned in the order requested. If an object is not found, a\n            `null` value is returned in the appropriate position. Duplicate ids\n            in the query will result in duplicate objects in the response.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  artists:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Artist'\n        '400':\n          $ref: '#/components/responses/InvalidId'\n  /artists/some:\n    get:\n      tags:\n        - Artists\n      summary: Get some Artists\n      description: Get information for some artists without specifing anything about them.\n      responses:\n        '200':\n          description: \u003e-\n            the response body contains an array of artist objects in JSON format. \n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Artist'\n  /me/following/contains:\n    get:\n      tags:\n        - Follow\n      summary: Check if Current User Follows Artists or Users\n      description: \u003e-\n        Check to see if the current user is following one or more artists or\n        other users.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: type\n          in: query\n          description: 'The ID type: either `artist` or `user`.'\n          required: true\n          schema:\n            type: string\n        - name: ids\n          in: query\n          description: \u003e-\n            A comma-separated list of the artist or the user IDs to check. For\n            example: `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A\n            maximum of 50 IDs can be sent in one request.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: \u003e-\n            the response body contains a JSON array of `true` or `false` values,\n            in the same order in which the ids were specified.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: boolean\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /playlists/{playlistId}/followers/contains:\n    get:\n      tags:\n        - Follow\n      summary: Check if Users Follow a Playlist\n      description: Check to see if one or more users are following a specified playlist.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: playlistId\n          in: path\n          description: The ID of the playlist.\n          required: true\n          schema:\n            type: string\n        - name: ids\n          in: query\n          description: \u003e-\n            A comma-separated list of User IDs; the ids of the users that you\n            want to check to see if they follow the playlist. Maximum: 5 ids.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: \u003e-\n            the response body contains a JSON array of `true` or `false` values,\n            in the same order in which the ids were specified.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: boolean\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /users/{userId}/following:\n    get:\n      tags:\n        - Follow\n      summary: Get a User's Followed Artists or Users\n      description: Get a user’s followed artists/users.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: userId\n          in: path\n          description: 'The user id requested to view his followings'\n          required: true\n          schema:\n            type: string\n        - name: type\n          in: query\n          description: 'The ID type: `artist` or `user`'\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: 'The maximum number of items to return. Minimum: 1. Maximum: 50.'\n          required: false\n          schema:\n            type: integer\n            default: 20\n        - name: offset\n          in: query\n          description: \u003e-\n            The index of the first track to return. Default: 0 (the first\n            object). Use with limit to get the next set of followings.\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: \u003e-\n            the response body contains an artists object or user object wrapped\n            in paging object.\n          content:\n            application/json:\n              schema:\n                description: \u003e-\n                  The offset-based paging object is a container for a set of\n                  objects. It contains a key called items (whose value is an\n                  array of the requested objects) along with other keys like\n                  total, offset and limit that can be useful in future calls.\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      oneOf:\n                        - $ref: '#/components/schemas/ArtistSimple'\n                        - $ref: '#/components/schemas/UserPublic'\n                      description: The requested data.\n                  limit:\n                    type: integer\n                    description: \u003e-\n                      The maximum number of items in the response (as set in the\n                      query or by default).\n                  offset:\n                    type: integer\n                    description: \u003e-\n                      The offset of the items returned (as set in the query or\n                      by default).\n                  total:\n                    type: integer\n                    description: The maximum number of items available to return\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /users/{userId}/followers:\n    get:\n      tags:\n        - Follow\n      summary: Get a User's Followers\n      description: Get a user’s followers\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: userId\n          in: path\n          description: 'The user id requested to view his followers'\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: 'The maximum number of items to return. Minimum: 1. Maximum: 50.'\n          required: false\n          schema:\n            type: integer\n            default: 20\n        - name: offset\n          in: query\n          description: \u003e-\n            The index of the first track to return. Default: 0 (the first\n            object). Use with limit to get the next set of followers.\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: \u003e-\n            the response body contains a user object wrapped\n            in paging object.\n          content:\n            application/json:\n              schema:\n                description: \u003e-\n                  The offset-based paging object is a container for a set of\n                  objects. It contains a key called items (whose value is an\n                  array of the requested objects) along with other keys like\n                  total, offset and limit that can be useful in future calls.\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/UserPublic'\n                    description: The requested data.\n                  limit:\n                    type: integer\n                    description: \u003e-\n                      The maximum number of items in the response (as set in the\n                      query or by default).\n                  offset:\n                    type: integer\n                    description: \u003e-\n                      The offset of the items returned (as set in the query or\n                      by default).\n                  total:\n                    type: integer\n                    description: The maximum number of items available to return\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /me/followers:\n    get:\n      tags:\n        - Follow\n      summary: Get Current User's Followers\n      description: Get Current User’s followers\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: limit\n          in: query\n          description: 'The maximum number of items to return. Minimum: 1. Maximum: 50.'\n          required: false\n          schema:\n            type: integer\n            default: 20\n        - name: offset\n          in: query\n          description: \u003e-\n            The index of the first track to return. Default: 0 (the first\n            object). Use with limit to get the next set of followers.\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: \u003e-\n            the response body contains a user object wrapped\n            in paging object.\n          content:\n            application/json:\n              schema:\n                description: \u003e-\n                  The offset-based paging object is a container for a set of\n                  objects. It contains a key called items (whose value is an\n                  array of the requested objects) along with other keys like\n                  total, offset and limit that can be useful in future calls.\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/UserPublic'\n                    description: The requested data.\n                  limit:\n                    type: integer\n                    description: \u003e-\n                      The maximum number of items in the response (as set in the\n                      query or by default).\n                  offset:\n                    type: integer\n                    description: \u003e-\n                      The offset of the items returned (as set in the query or\n                      by default).\n                  total:\n                    type: integer\n                    description: The maximum number of items available to return\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /me/following:\n    put:\n      tags:\n        - Follow\n      summary: Follow Artists or Users\n      description: \u003e-\n        Add the current user as a follower of one or more artists or other\n        users.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: type\n          in: query\n          description: 'The ID type: either `artist` or `user`.'\n          required: true\n          schema:\n            type: string\n        - name: ids\n          in: query\n          description: \u003e-\n            A comma-separated list of the artist or the user IDs. For example:\n            `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A maximum of 50\n            IDs can be sent in one request.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n      requestBody:\n        description: \u003e-\n          A JSON array of the artist or user IDs. For example:\n          `{ids:[\"74ASZWbe4lXaubB36ztrGX\", \"08td7MxkoHQkXnWAYD8d6Q\"]}`. A\n          maximum of 50 IDs can be sent in one request. Note: if the ids\n          parameter is present in the query string, any IDs listed here in the\n          body will be ignored.\n        required: false\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ids:\n                  type: array\n                  items:\n                    type: string\n      responses:\n        '204':\n          description: the resources are created and the response body is empty.\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n    get:\n      tags:\n        - Follow\n      summary: Get User's Followed Artists or Users\n      description: Get the current user’s followed artists/users.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: type\n          in: query\n          description: 'The ID type: `artist` or `user`'\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: 'The maximum number of items to return. Minimum: 1. Maximum: 50.'\n          required: false\n          schema:\n            type: integer\n            default: 20\n        - name: offset\n          in: query\n          description: \u003e-\n            The index of the first track to return. Default: 0 (the first\n            object). Use with limit to get the next set of followings.\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: \u003e-\n            the response body contains an artists object or user object wrapped\n            in paging object.\n          content:\n            application/json:\n              schema:\n                description: \u003e-\n                  The offset-based paging object is a container for a set of\n                  objects. It contains a key called items (whose value is an\n                  array of the requested objects) along with other keys like\n                  total, offset and limit that can be useful in future calls.\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      oneOf:\n                        - $ref: '#/components/schemas/ArtistSimple'\n                        - $ref: '#/components/schemas/UserPublic'\n                      description: The requested data.\n                  limit:\n                    type: integer\n                    description: \u003e-\n                      The maximum number of items in the response (as set in the\n                      query or by default).\n                  offset:\n                    type: integer\n                    description: \u003e-\n                      The offset of the items returned (as set in the query or\n                      by default).\n                  total:\n                    type: integer\n                    description: The maximum number of items available to return\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n    delete:\n      tags:\n        - Follow\n      summary: Unfollow Artists or Users\n      description: \u003e-\n        Remove the current user as a follower of one or more artists or other\n        users.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: type\n          in: query\n          description: 'The ID type: `artist` or `user`'\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n        - name: ids\n          in: query\n          description: \u003e-\n            A comma-separated list of the artist or the user IDs. For example:\n            `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A maximum of 50\n            IDs can be sent in one request.\n          required: false\n          schema:\n            type: string\n      responses:\n        '204':\n          description: The resources are deleted and the response body is empty.\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /playlists/{playlistId}/followers:\n    put:\n      tags:\n        - Follow\n      summary: Follow a Playlist\n      description: Add the current user as a follower of a playlist.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: playlistId\n          in: path\n          description: \u003e-\n            The ID of the playlist. Any playlist can be followed, regardless of\n            its public/private status, as long as you know its playlist ID.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: \u003e-\n          If `true` the playlist will be included in user’s public playlists, if\n          `false` it will remain private.\n        required: false\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                public:\n                  type: boolean\n                  default: true\n      responses:\n        '204':\n          description: the resources are created and the response body is empty.\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n    delete:\n      tags:\n        - Follow\n      summary: Unfollow a Playlist\n      description: Remove the current user as a follower of a playlist.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: playlistId\n          in: path\n          description: The ID of the playlist that is to be no longer followed.\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: the resources are deleted and the response body is empty.\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /me:\n    get:\n      tags:\n        - Users Profile\n      summary: Get Current User's Profile\n      description: \u003e-\n        Get detailed profile information about the current user (including the\n        current user’s username).\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: the response body contains a user object in JSON format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserPrivate'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /me/profilePicture:\n    patch:\n      tags:\n        - Users Profile\n      summary: Update user's profile image\n      description: Updates the current user image\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          multipart/mixed:\n            schema:\n              type: object\n              properties:\n                images:\n                  type: string\n                  format: binary\n            encoding:\n              images:\n                contentType: 'image/png, image/jpeg'\n      responses:\n        '200':\n          description: the response body contains a user object in JSON format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserPrivate'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /me/profile:\n    put:\n      tags:\n        - Users Profile\n      summary: Edit user's profile\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Profile data\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - email\n                - passwordConfirm\n                - gender\n                - dateOfBirth\n                - Country\n                - displayName\n              properties:\n                email:\n                  type: string\n                  format: email\n                passwordConfirm:\n                  type: string\n                  minLength: 8\n                gender:\n                  type: string\n                  enum:\n                    - M\n                    - F\n                dateOfBirth:\n                  description: 'The user`s birthdate, must be at least 10 years old'\n                  type: string\n                  format: date\n                country:\n                  type: string\n                  minLength: 2\n                  maxLength: 2\n                  format: ISO ALPHA 2\n                displayName:\n                  type: string\n      responses:\n        '200':\n          description: the response body contains a user object in JSON format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserPrivate'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /me/privateSession:\n    put:\n      tags:\n        - Users Profile\n      summary: Start or End a Private Session\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: The Value of Private Session to be set\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - privateSession\n              properties:\n                privateSession:\n                  type: boolean\n      responses:\n        '200':\n          description: the response body contains a user object in JSON format after changing the value of privateSession.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserPrivate'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /users/{userId}:\n    get:\n      tags:\n        - Users Profile\n      summary: Get a User's Profile\n      description: Get public profile information about a user.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: userId\n          required: true\n          in: path\n          schema:\n            type: string\n      responses:\n        '200':\n          description: the response body contains a user object in JSON format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserPublic'\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /artists/requests:\n    post:\n      tags:\n        - Artists\n      summary: Request to be an Artist\n      description: \u003e-\n        User/Guest requests to be an Artist if it's accepted they will be able\n        to upload albums/tracks.\n      requestBody:\n        description: JSON object contains the needed information for the request.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                genres:\n                  type: array\n                  items:\n                    type: string\n                  description: \u003e-\n                    A list of the genre ID's of the genres of the artist. \n                name:\n                  type: string\n                  description: The name of the artist.\n                displayName:\n                  type: string\n                  description: The name that will be displayed on his/her profile\n                bio:\n                  type: string\n                  description: a biography or short biographical profile of the artist.\n                email: \n                  type: string\n                  description: An email for contact\n                country:\n                  type: string\n                  description: The country of the artist\n              required:\n              - genres\n              - email\n              - name\n              - displayName\n              - country\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id: \n                    type: string\n                    description: The id of the created request\n        '400':\n          description: \u003e-\n            The request could not be understood by the server due to malformed\n            syntax.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /artists/requests/{id}/attachments:\n    post:\n      tags:\n        - Artists\n      summary: Uploads an official document image\n      description: Uploads an official document that is attached to the request to be an artist.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: ID of the request\n          required: true\n          schema:\n            type: string\n            format: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                image:\n                  type: string\n                  format: binary\n            encoding:\n              image:\n                contentType: 'image/png, image/jpeg'\n      responses:\n        '204':\n          description: the resources are created and the response body is empty.\n        '400':\n          description: \u003e-\n            the server cannot or will not process the request due to something that is perceived to be a client error. and the artist request will be discarded and removed from the server and the user should resubmit.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /artists/requests/{id}/handle:\n    post:\n      tags:\n      - Artists\n      summary: Responds to artist requests by accepting or refusing\n      description: \u003e-\n        Determine whether a request to be an artist should by accepted or refused and create an artist if accepted then send informing emails for the applicant.\n      parameters:\n        - name: id\n          required: true\n          in: path\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                accept:\n                  type: boolean\n                  description: true for accepting and false for refusing the request\n              required:\n              - accept\n      responses:\n        '204':\n          description: successful operation and response body is empty\n        '400':\n          description: \u003e-\n            The request could not be understood by the server due to malformed\n            syntax.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /albums/{id}:\n    get:\n      tags:\n        - Albums\n      summary: Return a single album\n      description: Returns information about the album with the given ID\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: ID of album to return\n          required: true\n          schema:\n            type: string\n            format: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Album'\n        '400':\n          $ref: '#/components/responses/InvalidId'\n  /me/artists/albums/{id}:\n    delete:\n      tags:\n        - Albums\n      summary: Remove an album\n      description: Deletes the album with the given ID\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: ID of album to delete\n          required: true\n          schema:\n            type: string\n            format: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Album'\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n    patch:\n      tags:\n        - Albums\n      summary: Update an album\n      description: Updates the album with the given ID\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: ID of album to update\n          required: true\n          schema:\n            type: string\n            format: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: The name of the album\n                artists:\n                  type: array\n                  description: The ID's of the artists of the album.\n                  items:\n                    type: string\n                genres:\n                  type: array\n                  description: \u003e-\n                    A list of the genre ID's of the genres used to classify the album.\n                  items:\n                    type: string\n                album_type:\n                  type: string\n                  description: \u003e-\n                    the type of the album: one of the following 'single',\n                    'album' or 'compilation'\n                release_date:\n                  type: string\n                  description: The date the album was first released\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Album'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /albums:\n    get:\n      tags:\n        - Albums\n      summary: Get several albums\n      description: Retrieves the information of the albums specified by given ID's\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: ids\n          in: query\n          description: list of ID's of albums to be retrieved (comma separated)\n          schema:\n            type: string\n            format: string\n          required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  albums:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Album'\n        '400':\n          $ref: '#/components/responses/InvalidId'\n  /albums/{id}/tracks:\n    get:\n      tags:\n        - Albums\n      summary: Return the tracks of an album\n      description: Retrieves the tracks of the album with the given ID\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: ID of the album containing the tracks\n          required: true\n          schema:\n            type: string\n            format: string\n        - name: limit\n          in: query\n          description: The maximum number of items to return\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: \u003e-\n            The index of the first track to return. Default: 0 (the first\n            object). Use with limit to get the next set of tracks.\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                description: The album tracks inside a paging object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TrackSimple'\n                  limit:\n                    type: integer\n                    description: \u003e-\n                      The maximum number of items in the response (as set in the\n                      query or by default).\n                  offset:\n                    type: integer\n                    description: \u003e-\n                      The offset of the items returned (as set in the query or\n                      by default).\n                  total:\n                    type: integer\n                    description: The maximum number of items available to return\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /tracks/{id}/download:\n    get:\n      tags:\n        - Tracks\n      summary: Download a track\n      description: Download Track with the given id\n      security:\n        - bearerAuth: ['premium', 'artist']\n      parameters:\n        - name: id\n          in: path\n          description: ID of track to return\n          required: true\n          schema:\n            type: string\n            format: string\n      responses:\n        '200':\n          $ref: '#/components/responses/NoContent'\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        \n  /tracks/{id}:\n    get:\n      tags:\n        - Tracks\n      summary: Return a single track\n      description: Retrieves information about the track with the given ID\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: ID of track to return\n          required: true\n          schema:\n            type: string\n            format: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Track'\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '404':\n          $ref: '#/components/responses/NotFound'\n    delete:\n      tags:\n        - Tracks\n      summary: Remove a track\n      description: Deletes the track with the given ID\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: ID of track to delete\n          required: true\n          schema:\n            type: string\n            format: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Track'\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n    patch:\n      tags:\n        - Tracks\n      summary: Update a Track\n      description: Updates the track with the given ID\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: ID of track to update\n          required: true\n          schema:\n            type: string\n            format: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: The name of the track\n                artists:\n                  type: array\n                  description: The ID's of the artists of the album.\n                  items:\n                    type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Track'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n    post:\n      tags:\n        - Tracks\n      summary: Upload Track's file\n      parameters:\n        - name: id\n          in: path\n          description: ID of the track\n          required: true\n          schema:\n            type: string\n            format: string\n      description: Uploads the file of the track\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                track:\n                  type: string\n                  format: binary\n            encoding:\n              track:\n                contentType: audio/mpeg\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Track'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /tracks:\n    get:\n      tags:\n        - Tracks\n      summary: Get several tracks\n      description: Retrieves information of the tracks specified by given ID's\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: ids\n          in: query\n          description: list of ID's of tracks to be retrieved (comma separated)\n          schema:\n            type: string\n            format: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  tracks:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Track'\n        '400':\n          $ref: '#/components/responses/InvalidId'\n  /me/artists/albums:\n    post:\n      tags:\n        - Albums\n      summary: Create a new album\n      description: Creates a new album for an artist\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: The name of the album\n                artists:\n                  type: array\n                  description: The ID's of the artists of the album.\n                  items:\n                    type: string\n                genres:\n                  type: array\n                  description: \u003e-\n                    A list of the genre ID's of the genres used to classify the album.\n                  items:\n                    type: string\n                album_type:\n                  type: string\n                  description: \u003e-\n                    the type of the album: one of the following 'single',\n                    'album' or 'compilation'\n                release_date:\n                  type: string\n                  description: The date the album was first released\n              required:\n                - name\n                - artists\n                - album_type\n                - genres\n                - release_date\n                - album_group\n              description: Album data\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Album'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /me/artists/albums/{id}/images:\n    post:\n      tags:\n        - Albums\n      summary: Update the image of an album\n      description: Updates the image of the album with the given ID\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: ID of album to update\n          required: true\n          schema:\n            type: string\n            format: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                image:\n                  type: string\n                  format: binary\n            encoding:\n              image:\n                contentType: 'image/png, image/jpeg'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Track'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /me/albums:\n    put:\n      tags:\n        - Library\n      summary: Save Albums for Current User\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: ids\n          in: query\n          required: true\n          description: comma separated ids of the Albums to be saved\n          schema:\n            type: array\n            items:\n              type: string\n              maximum: 50\n      responses:\n        '201':\n          description: Album Saved\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n    delete:\n      tags:\n        - Library\n      security:\n        - bearerAuth: []\n      summary: Remove Saved Albums for Current User\n      parameters:\n        - name: ids\n          in: query\n          required: true\n          description: comma separated ids of the Albums to be deleted\n          schema:\n            type: array\n            items:\n              type: string\n              maximum: 50\n      responses:\n        '204':\n          description: Albums removed successfully and the body of the response is empty\n        '400':\n          description: bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: The specified resource was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    get:\n      tags:\n        - Library\n      security:\n        - bearerAuth: []\n      summary: Get Current User's Saved Albums\n      parameters:\n        - name: limit\n          in: query\n          description: The maximum number of albums to return.\n          schema:\n            type: integer\n            default: 20\n            minimum: 1\n            maximum: 50\n        - name: offset\n          in: query\n          description: The index of the first album to return.\n          schema:\n            type: integer\n            default: 0\n      responses:\n        '200':\n          description: list of playlist of the user\n          content:\n            application/json:\n              schema:\n                description: \u003e-\n                  The offset-based paging object is a container for a set of\n                  objects. It contains a key called items (whose value is an\n                  array of the requested objects) along with other keys like\n                  previous, next and limit that can be useful in future calls.\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/SavedAlbum'\n                    description: the Requested releases\n                  limit:\n                    type: integer\n                    description: \u003e-\n                      The maximum number of items in the response (as set in the\n                      query or by default).\n                  offset:\n                    type: integer\n                    description: \u003e-\n                      The offset of the items returned (as set in the query or\n                      by default).\n                  total:\n                    type: integer\n                    description: The total number of items available to return\n        '400':\n          description: bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /me/artists/albums/{id}/release:\n    patch:\n      security:\n        - bearerAuth: []\n      tags:\n        - Albums\n      summary: Release an album\n      description: Releases an album and make it public\n      parameters:\n        - name: id\n          in: path\n          description: ID of album to release\n          required: true\n          schema:\n            type: string\n            format: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                released:\n                  type: boolean\n              required:\n                - released\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Album'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /me/artists/bio:\n    patch:\n      tags:\n        - Artists\n      summary: Update artist's bio\n      description: Updates artist's bio\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                bio:\n                  type: string\n                  description: The bio of the artist\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Artist'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /me/artists/top-tracks:\n    patch:\n      tags:\n        - Artists\n      summary: Update popular songs\n      description: Updates the current artist's list of popular songs\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                tracks:\n                  type: array\n                  items:\n                    type: string\n                  description: ID's of the tracks sorted. (maximum 10 tracks)\n              required: \n              - tracks\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Artist'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /me/artists/albums/{id}/tracks:\n    post:\n      tags:\n        - Albums\n      summary: Add a track to an album\n      description: Adds a new track to an album for an artist\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: 'ID of the album, if not given then the track will be single'\n          schema:\n            type: string\n            format: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: name of the track\n                artists:\n                  type: array\n                  items:\n                    type: string\n                  description: The ID's of the track's artists\n              required:\n                - name\n                - artists\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Album'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /me/search/recent:\n    put:\n      tags:\n        - Search\n      summary: what user recently searched for\n      description: store what the user used from rescent search\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              description: the item user used from the search\n              properties:\n                id:\n                  type: string\n                  description: the id of the used item\n                type:\n                  type: string\n                  description: item can be 'track' or 'user' or 'Album' or 'Artist'\n      responses:\n        '204':\n          description: successful operation\n        '400':\n          $ref: '#/components/responses/BadRequest'\n    get:\n      tags:\n        - Search\n      summary: retrive what user recently searched for\n      description: retrive what the user used from rescent search\n      parameters:\n        - name: limit\n          in: query\n          description: The maximum number of items to return.\n          schema:\n            type: integer\n            default: 20\n            minimum: 1\n            maximum: 50\n        - name: offset\n          in: query\n          description: The index of the first item to return.\n          schema:\n            type: integer\n            default: 0\n            maximum: 2000\n      responses:\n        '200':\n          description: item the user used in recent search\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      oneOf:\n                        - $ref: '#/components/schemas/ArtistSimple'\n                        - $ref: '#/components/schemas/UserPublic'\n                        - $ref: '#/components/schemas/Track'\n                        - $ref: '#/components/schemas/Album'\n                        - $ref: '#/components/schemas/Playlist'\n                      description: The requested data.\n                  limit:\n                    type: integer\n                    description: \u003e-\n                      The maximum number of items in the response (as set in the\n                      query or by default).\n                  offset:\n                    type: integer\n                    description: \u003e-\n                      The offset of the items returned (as set in the query or\n                      by default).\n                  total:\n                    type: integer\n                    description: The maximum number of items available to return\n        '400':\n          $ref: '#/components/responses/BadRequest'\n  /search:\n    get:\n      tags:\n        - Search\n      summary: Search for an Item\n      parameters:\n        - name: q\n          in: query\n          description: name of what you want to search for eg q = Top this will return items with name that includes Top.\n          schema:\n            type: string\n          required: true  \n        - name: type\n          in: query\n          description: \u003e-\n            A comma-separated list of item types to search across. Valid types\n            are album ,User, Artist, playlist, and track. Search results include hits\n            from all the specified item types.Its optional if not sent search will be on all types.\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: The maximum number of items to return.\n          schema:\n            type: integer\n            default: 20\n            minimum: 1\n            maximum: 50\n        - name: offset\n          in: query\n          description: The index of the first item to return.\n          schema:\n            type: integer\n            default: 0\n            maximum: 2000\n      responses:\n        '200':\n          description: \u003e-\n            the response body contains array of objects in\n            JSON format with the required type.\n          content:\n            application/json:\n              schema:\n                description: \u003e-\n                  The offset-based paging object is a container for a set of\n                  objects. It contains a key called items (whose value is an\n                  array of the requested objects) along with other keys like\n                  previous, next and limit that can be useful in future calls.\n                type: object\n                properties:\n                  tracks:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Track'\n              \n                  albums:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/AlbumSimple'\n                  artists:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Artist'\n                    description: the requested playlists\n                  users:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/UserPublic'\n                    description: the requested playlists\n                  playlists:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Playlist'\n                    description: the requested playlists\n                  limit:\n                    type: integer\n                    description: \u003e-\n                      The maximum number of items in the response (as set in the\n                      query or by default).\n                  offset:\n                    type: integer\n                    description: \u003e-\n                      The offset of the items returned (as set in the query or\n                      by default).\n                  total:\n                    type: integer\n                    description: The total number of items available to return\n        '400':\n          description: bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /me/albums/contains:\n    get:\n      tags:\n        - Library\n      security:\n        - bearerAuth: []\n      summary: Check User's Saved Albums\n      description: Checks if the albums with the given ID's are saved\n      parameters:\n        - name: ids\n          in: query\n          required: true\n          description: A comma-separated list of the IDs for the albums\n          schema:\n            type: array\n            items:\n              type: string\n              maximum: 50\n      responses:\n        '200':\n          description: true or false if found album saved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: boolean\n                  description: true or false if found album saved\n        '400':\n          description: Invalid ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /me/tracks/contains:\n    get:\n      tags:\n        - Library\n      security:\n        - bearerAuth: []\n      summary: Check User's Saved tracks\n      description: Checks if the tracks with the given ID's are saved\n      parameters:\n        - name: ids\n          in: query\n          required: true\n          description: A comma-separated list of the IDs for the tracks\n          schema:\n            type: array\n            items:\n              type: string\n              maximum: 50\n      responses:\n        '200':\n          description: true or false if found track saved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: boolean\n                  description: true or false if found track saved\n        '400':\n          description: Invalid ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /me/tracks:\n    put:\n      tags:\n        - Library\n      security:\n        - bearerAuth: []\n      summary: Save Tracks for Current User\n      parameters:\n        - name: ids\n          in: query\n          required: true\n          description: comma separated Ids of the Tracks to be saved\n          schema:\n            type: array\n            items:\n              type: string\n              maximum: 50\n      responses:\n        '200':\n          description: Tracks Saved\n        '400':\n          description: Invalid ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: The specified resource was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      tags:\n        - Library\n      security:\n        - bearerAuth: []\n      summary: Remove Saved Tracks for Current User\n      parameters:\n        - name: ids\n          in: query\n          required: true\n          description: the IDs of the Tracks to be removed\n          schema:\n            type: array\n            items:\n              type: string\n              maximum: 50\n      responses:\n        '204':\n          description: Tracks removed successfully\n        '400':\n          description: bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: The specified resource was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    get:\n      tags:\n        - Library\n      summary: Get Current User's Saved tracks\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: limit\n          in: query\n          description: The maximum number of tracks to return.\n          schema:\n            type: integer\n            default: 20\n            minimum: 1\n            maximum: 50\n        - name: offset\n          in: query\n          description: The index of the first track to return.\n          schema:\n            type: integer\n            default: 0\n      responses:\n        '200':\n          description: list of playlist of the user\n          content:\n            application/json:\n              schema:\n                description: \u003e-\n                  The offset-based paging object is a container for a set of\n                  objects. It contains a key called items (whose value is an\n                  array of the requested objects) along with other keys like\n                  previous, next and limit that can be useful in future calls.\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/SavedTrack'\n                    description: the Requested releases\n                  limit:\n                    type: integer\n                    description: \u003e-\n                      The maximum number of items in the response (as set in the\n                      query or by default).\n                  offset:\n                    type: integer\n                    description: \u003e-\n                      The offset of the items returned (as set in the query or\n                      by default).\n                  total:\n                    type: integer\n                    description: The total number of items available to return\n        '400':\n          description: bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /browse/categories/{categoryId}:\n    get:\n      security:\n        - bearerAuth: []\n      tags:\n        - Browse\n      summary: Get Category of specific Id\n      parameters:\n        - name: categoryId\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Id of the Category\n      responses:\n        '200':\n          description: the response body contains category object in JSON format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CategorySimple'\n        '400':\n          description: Invalid ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: The specified resource was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /browse/categories/{category_id}/playlists:\n    get:\n      security:\n        - bearerAuth: []\n      tags:\n        - Browse\n      summary: Get Category's Playlists of specific Id\n      parameters:\n        - name: category_id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Id of the Category\n        - name: limit\n          in: query\n          description: The maximum number of items to return.\n          schema:\n            type: integer\n            default: 20\n            minimum: 1\n            maximum: 50\n        - name: offset\n          in: query\n          description: The index of the first item to return.\n          schema:\n            type: integer\n            default: 0\n      responses:\n        '200':\n          description: \u003e-\n            the response body contains array of Simplified Playlist objects in\n            JSON format.\n          content:\n            application/json:\n              schema:\n                description: \u003e-\n                  The offset-based paging object is a container for a set of\n                  objects. It contains a key called items (whose value is an\n                  array of the requested objects) along with other keys like\n                  previous, next and limit that can be useful in future calls.\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/PlaylistSimple'\n                    description: the requested playlists\n                  limit:\n                    type: integer\n                    description: \u003e-\n                      The maximum number of items in the response (as set in the\n                      query or by default).\n                  offset:\n                    type: integer\n                    description: \u003e-\n                      The offset of the items returned (as set in the query or\n                      by default).\n                  total:\n                    type: integer\n                    description: The total number of items available to return\n        '400':\n          description: Invalid ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: The specified resource was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /browse/categories:\n    get:\n      tags:\n        - Browse\n      summary: Get List of Categories\n      parameters:\n        - name: offset\n          in: query\n          description: The index of the first item to return.\n          schema:\n            type: integer\n            default: 0\n        - name: limit\n          in: query\n          description: The maximum number of items to return.\n          schema:\n            type: integer\n            default: 20\n            minimum: 1\n            maximum: 50\n      responses:\n        '200':\n          description: \u003e-\n            the response body contains array of Simplified Playlist objects in\n            JSON format.\n          content:\n            application/json:\n              schema:\n                description: \u003e-\n                  The offset-based paging object is a container for a set of\n                  objects. It contains a key called items (whose value is an\n                  array of the requested objects) along with other keys like\n                  previous, next and limit that can be useful in future calls.\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/CategorySimple'\n                    description: the requested categories\n                  limit:\n                    type: integer\n                    description: \u003e-\n                      The maximum number of items in the response (as set in the\n                      query or by default).\n                  offset:\n                    type: integer\n                    description: \u003e-\n                      The offset of the items returned (as set in the query or\n                      by default).\n                  total:\n                    type: integer\n                    description: The total number of items available to return\n        '400':\n          description: Invalid ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: The specified resource was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /browse/new-releases:\n    get:\n      tags:\n        - Browse\n      summary: Get a List of New Releases\n      parameters:\n        - name: offset\n          in: query\n          description: The index of the first item to return.\n          schema:\n            type: integer\n            default: 0\n        - name: limit\n          in: query\n          description: The maximum number of items to return.\n          schema:\n            type: integer\n            default: 20\n            minimum: 1\n            maximum: 50\n      responses:\n        '200':\n          description: the response body contains array of album objects in JSON format.\n          content:\n            application/json:\n              schema:\n                description: \u003e-\n                  The offset-based paging object is a container for a set of\n                  objects. It contains a key called items (whose value is an\n                  array of the requested objects) along with other keys like\n                  previous, next and limit that can be useful in future calls.\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/AlbumSimple'\n                    description: the Requested releases\n                  limit:\n                    type: integer\n                    description: \u003e-\n                      The maximum number of items in the response (as set in the\n                      query or by default).\n                  offset:\n                    type: integer\n                    description: \u003e-\n                      The offset of the items returned (as set in the query or\n                      by default).\n                  total:\n                    type: integer\n                    description: The total number of items available to return\n        '400':\n          description: Invalid ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: The specified resource was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /playlists/{playlist_id}:\n    get:\n      security:\n        - bearerAuth: []\n      tags:\n        - Playlists\n      summary: Get Playlist of specific Id\n      parameters:\n        - name: playlist_id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Id of the Playlist\n      responses:\n        '200':\n          description: the response body contains Playlist object in JSON format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PlaylistSimple'\n        '400':\n          description: Invalid ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: The specified resource was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: The specified resource was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      security:\n        - bearerAuth: []\n      tags:\n        - Playlists\n      summary: change playlist details\n      parameters:\n        - name: playlist_id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Id of the Playlist\n      requestBody:\n        description: tracks to be added\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: the new name for the playlist\n                  type: string\n                public:\n                  type: boolean\n                  description: \u003e-\n                    If true the playlist will be public, if false it will be\n                    private. index.\n                collaborative:\n                  type: boolean\n                  description: \u003e-\n                    If true , the playlist will become collaborative and other\n                    users will be able to modify the playlist in their client.\n                description:\n                  type: string\n                  description: \u003e-\n                    Value for playlist description as displayed in Clients and\n                    in the Web API.\n                image/png:\n                  type: string\n                  format: binary\n                  description: the image of the playlist\n      responses:\n        '200':\n          description: Update completed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PlaylistSimple'\n        '400':\n          description: Invalid ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: The specified resource was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /playlists/{playlist_id}/tracks:\n    delete:\n      security:\n        - bearerAuth: []\n      tags:\n        - Playlists\n      summary: Remove a Playlist's Tracks\n      parameters:\n        - name: playlist_id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Id of the Playlist\n        - name: Tracks\n          in: query\n          description: \u003e-\n            Tracks to be removed from playlist and should be sent in body api\n            doesnot support that\n          schema:\n            type: object\n            properties:\n              ids:\n                type: array\n                items:\n                  type: string\n      responses:\n        '204':\n          description: Tracks removed successfully and the response body is empty\n        '400':\n          description: Invalid ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: The specified resource was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    get:\n      security:\n        - bearerAuth: []\n      tags:\n        - Playlists\n      summary: Get a Playlist's Tracks\n      parameters:\n        - name: playlist_id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Id of the Playlist\n        - name: limit\n          in: query\n          description: The maximum number of tracks to return.\n          schema:\n            type: integer\n            default: 100\n            minimum: 1\n            maximum: 100\n        - name: offset\n          in: query\n          description: The index of the first track to return.\n          schema:\n            type: integer\n            default: 0\n      responses:\n        '200':\n          description: the response body contains array of album objects in JSON format.\n          content:\n            application/json:\n              schema:\n                description: \u003e-\n                  The offset-based paging object is a container for a set of\n                  objects. It contains a key called items (whose value is an\n                  array of the requested objects) along with other keys like\n                  previous, next and limit that can be useful in future calls.\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Track'\n                    description: the Requested releases\n                  limit:\n                    type: integer\n                    description: \u003e-\n                      The maximum number of items in the response (as set in the\n                      query or by default).\n                  offset:\n                    type: integer\n                    description: \u003e-\n                      The offset of the items returned (as set in the query or\n                      by default).\n                  total:\n                    type: integer\n                    description: The total number of items available to return\n        '400':\n          description: Invalid ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: The specified resource was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      security:\n        - bearerAuth: []\n      tags:\n        - Playlists\n      summary: Add tracks to a specific playlist\n      parameters:\n        - name: playlist_id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Id of the Playlist\n        - name: position\n          in: query\n          schema:\n            type: integer\n          description: 'The position to insert the tracks, a zero-based index.'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ids:\n                  type: array\n                  items:\n                    type: string\n      responses:\n        '204':\n          description: tracks has been added and the response body is empty\n        '400':\n          description: Invalid ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: The specified resource was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      security:\n        - bearerAuth: []\n      tags:\n        - Playlists\n      summary: ReOrder Playlists Tracks\n      parameters:\n        - name: playlist_id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Id of the Playlist\n      requestBody:\n        required: true\n        description: info about Reorder a Playlist's Tracks\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                rangeStart:\n                  type: integer\n                  description: The position of the first track to be reordered\n                rangeLength:\n                  type: integer\n                  description: \u003e-\n                    The amount of tracks to be reordered.The range of tracks to\n                    be reordered begins from the range_start position, and\n                    includes the range_length subsequent tracks\n                  default: 1\n                insertBefore:\n                  type: integer\n                  description: \u003e-\n                    The position where the tracks should be inserted.To reorder\n                    the tracks to the end of the playlist, simply set\n                    insert_before to the position after the last track.\n      responses:\n        '204':\n          description: tracks has been ReOrdered\n        '400':\n          description: Invalid ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: The specified resource was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /me/playlists:\n    get:\n      security:\n        - bearerAuth: []\n      tags:\n        - Playlists\n      summary: Get a List of current User's Playlists\n      parameters:\n        - name: isOwner\n          in: query\n          description: if true you will get the playlists created by current user if false you will get the playlists followed by current user\n          required: true\n          schema:\n            type: boolean\n        - name: limit\n          in: query\n          description: The maximum number of playlists to return.\n          schema:\n            type: integer\n            default: 20\n            minimum: 1\n            maximum: 50\n        - name: offset\n          in: query\n          description: The index of the first playlist to return.\n          schema:\n            type: integer\n            default: 0\n            maximum: 100000\n      responses:\n        '200':\n          description: list of playlist of the user\n          content:\n            application/json:\n              schema:\n                description: \u003e-\n                  The offset-based paging object is a container for a set of\n                  objects. It contains a key called items (whose value is an\n                  array of the requested objects) along with other keys like\n                  previous, next and limit that can be useful in future calls.\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/PlaylistSimple'\n                    description: the Requested releases\n                  limit:\n                    type: integer\n                    description: \u003e-\n                      The maximum number of items in the response (as set in the\n                      query or by default).\n                  offset:\n                    type: integer\n                    description: \u003e-\n                      The offset of the items returned (as set in the query or\n                      by default).\n                  total:\n                    type: integer\n                    description: The total number of items available to return\n        '400':\n          description: bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /playlists/{playlist_id}/images:\n    get:\n      security:\n        - bearerAuth: []\n      tags:\n        - Playlists\n      summary: Get Playlist Cover Image\n      parameters:\n        - name: playlist_id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Id of the playlist\n      responses:\n        '200':\n          description: the cover image of the playlist\n          content:\n            application/json:\n              schema:\n                properties:\n                  image:\n                    type: string\n        '400':\n          description: Invalid ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: The specified resource was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      security:\n        - bearerAuth: []\n      tags:\n        - Playlists\n      summary: Upload a Custom Playlist Cover Image\n      parameters:\n        - name: playlist_id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Id of the playlist\n      requestBody:\n        content:\n          image/png:\n            schema:\n              type: string\n              format: binary\n      responses:\n        '202':\n          description: Accepted but not completed\n        '204':\n          description: successful and the response body is empty\n        '400':\n          description: Invalid ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: The specified resource was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /playlists/{playlist_id}/tracks/Replace:\n    put:\n      security:\n        - bearerAuth: []\n      tags:\n        - Playlists\n      summary: Replace a playlist's tracks\n      parameters:\n        - name: playlist_id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Id of the playlist\n      requestBody:\n        description: info about Reorder a Playlist's Tracks\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ids:\n                  type: array\n                  description: uris of the tracks\n                  items:\n                    type: string\n      responses:\n        '204':\n          description: Replaced track in playlist\n        '400':\n          description: Invalid ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: The specified resource was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users/{user_id}/playlists:\n    post:\n      security:\n        - bearerAuth: []\n      tags:\n        - Playlists\n      summary: create a playlist\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Id of the user creating the playlist\n      requestBody:\n        required: true\n        description: info of Playlist\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: the new name for the playlist\n                  type: string\n                public:\n                  type: boolean\n                  description: \u003e-\n                    If true the playlist will be public, if false it will be\n                    private. index.\n                  default: true\n                collaborative:\n                  type: boolean\n                  description: \u003e-\n                    If true , the playlist will become collaborative and other\n                    users will be able to modify the playlist in their client.\n                  default: false\n                description:\n                  type: string\n                  description: \u003e-\n                    Value for playlist description as displayed in Clients and\n                    in the Web API.\n                image/png:\n                  type: string\n                  format: binary\n                  description: the image of the playlist\n      responses:\n        '200':\n          description: playlist created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PlaylistSimple'\n        '400':\n          $ref: '#/components/responses/InvalidId'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    get:\n      security:\n        - bearerAuth: []\n      tags:\n        - Playlists\n      summary: Get a List of a User's Playlists\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Id of the user\n        - name: limit\n          in: query\n          description: The maximum number of playlists to return.\n          schema:\n            type: integer\n            default: 20\n            minimum: 1\n            maximum: 50\n        - name: offset\n          in: query\n          description: The index of the first playlist to return.\n          schema:\n            type: integer\n            default: 0\n            maximum: 100000\n      responses:\n        '200':\n          description: list of playlist of the user\n          content:\n            application/json:\n              schema:\n                description: \u003e-\n                  The offset-based paging object is a container for a set of\n                  objects. It contains a key called items (whose value is an\n                  array of the requested objects) along with other keys like\n                  previous, next and limit that can be useful in future calls.\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/PlaylistSimple'\n                    description: the Requested releases\n                  limit:\n                    type: integer\n                    description: \u003e-\n                      The maximum number of items in the response (as set in the\n                      query or by default).\n                  offset:\n                    type: integer\n                    description: \u003e-\n                      The offset of the items returned (as set in the query or\n                      by default).\n                  total:\n                    type: integer\n                    description: The total number of items available to return\n        '400':\n          description: bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users/signup:\n    post:\n      tags:\n        - UsersAuth\n      description: Create new user account\n      requestBody:\n        description: Account Data\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Signup'\n      responses:\n        '200':\n          $ref: '#/components/responses/Login'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /users/login:\n    post:\n      tags:\n        - UsersAuth\n      description: Log in\n      requestBody:\n        description: Login with user’s email and password\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Login'\n      responses:\n        '200':\n          $ref: '#/components/responses/Login'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n  /me/verify:\n    post:\n      tags:\n        - UsersAuth\n      description: 'Request two way auth for signup, send email with token to user'\n      responses:\n        '200':\n          $ref: '#/components/responses/Login'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n  /users/verify/{token}:\n    patch:\n      tags:\n        - UsersAuth\n      description: \u003e-\n        Two way auth for signup - Change verified attribute is user account to\n        true\n      parameters:\n        - name: token\n          in: path\n          description: Authentication token to verify the user account\n          required: true\n          schema:\n            type: string\n            minLength: 8\n      responses:\n        '200':\n          $ref: '#/components/responses/Login'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n  /users/forgotPassword:\n    post:\n      tags:\n        - UsersAuth\n      description: Forgot user password\n      requestBody:\n        description: User email\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  format: email\n                  example: example@example.com\n      responses:\n        '200':\n          $ref: '#/components/responses/TokenSentToEmail'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /users/resetPassword/{token}:\n    patch:\n      tags:\n        - UsersAuth\n      parameters:\n        - name: token\n          in: path\n          description: Authentication token to verify the user account\n          required: true\n          schema:\n            type: string\n            minLength: 8\n      description: reset user password\n      requestBody:\n        description: User password and passwordConfirm\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewPassword'\n      responses:\n        '200':\n          $ref: '#/components/responses/Login'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n  /me/updatePassword:\n    patch:\n      tags:\n        - Users Profile\n      description: update user password\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: User password and passwordConfirm\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdatePassword'\n      responses:\n        '200':\n          $ref: '#/components/responses/Login'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n    \n  /auth/facebook:\n    post:\n      tags:\n        - Auth\n      description: Authentication with facebook\n      requestBody:\n        description: Facebook access token\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                access_token:\n                  description: Facebook access token\n                  type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/FacebookAuth'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n    patch:\n      tags:\n        - Auth\n      description: Connect or disconnect your user account with facebook.\n      requestBody:\n        description: Facebook access token\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                access_token:\n                  description: \u003e-\n                    Facebook access token, if passed connect with facebook else\n                    disconnect\n                  type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/Login'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /auth/google:\n    post:\n      tags:\n        - Auth\n      description: Authentication with google\n      requestBody:\n        description: Google access token\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                access_token:\n                  description: Google access token\n                  type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/GoogleAuth'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n    patch:\n      tags:\n        - Auth\n      description: Connect or disconnect your user account with google.\n      requestBody:\n        description: Google access token\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                access_token:\n                  description: \u003e-\n                    Google access token, if passed connect with google else\n                    disconnect\n                  type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/Login'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /auth/github:\n    post:\n      tags:\n        - Auth\n      description: Authentication with github\n      requestBody:\n        description: Github access token\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                access_token:\n                  description: Github access token\n                  type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/GithubAuth'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n    patch:\n      tags:\n        - Auth\n      description: Connect or disconnect your user account with github.\n      requestBody:\n        description: Google access token\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                access_token:\n                  description: \u003e-\n                    Github access token, if passed connect with github else\n                    disconnect\n                  type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/Login'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /auth/refresh_token:\n    post:\n      tags:\n        - Auth\n      description: Refresh access token\n      parameters:\n        - in: cookie\n          name: refresh_token\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/Login'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /auth/refresh_token/reject:\n    post:\n      tags:\n        - Auth\n      description: Remove refresh token from the server\n      parameters:\n        - in: cookie\n          name: refresh_token\n          schema:\n            type: string\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /me/queue:\n    delete:\n      security:\n        - bearerAuth: []\n      tags:\n        - Queue\n      description: Delete a track from Queue. If the deleted track was the playing track the queue will play the first track if found and if not it will play the last queue if found\n      parameters:\n        - name: queueIndex\n          in: query\n          description: \u003e-\n            Optional. The index of the queue Default 0 must be greater than 0 if\n            `0` get the current queue if `1` get the last queue\n          schema:\n            type: integer\n            default: 0\n            minimum: 0\n            maximum: 1\n        - name: trackIndex\n          in: query\n          description: \u003e-\n            Optional, the track index to be deleted, must be positive. pass\n            track Index or trackId if nothing passed thow `400` BadRequest if\n            passed both `400` BadRequest\n          schema:\n            type: integer\n            minimum: 0\n        - name: trackId\n          in: query\n          description: \u003e-\n            Optional, the track id to be deleted, must be positive.  pass\n            trackIndex or trackId if nothing passed thow `400` BadRequest if\n            passed both `400` BadRequest\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n    patch:\n      security:\n        - bearerAuth: []\n      tags:\n        - Queue\n      description: Edit Track Position\n      parameters:\n        - name: queueIndex\n          in: query\n          description: \u003e-\n            Optional. The index of the queue Default 0 must be greater than 0 if\n            `0` get the current queue if 1 get the last queue\n          schema:\n            type: integer\n            default: 0\n            minimum: 0\n            maximum: 1\n        - name: trackIndex\n          in: query\n          description: \u003e-\n            Optional, the track index to be moved, zero based, must be positive.\n            pass trackIndex or trackId if nothing passed `400` BadRequest if\n            passed both `400` BadRequest\n          schema:\n            type: integer\n            minimum: 0\n        - name: trackId\n          in: query\n          description: \u003e-\n            Optional, the track id to be moved, must be positive. pass\n            trackIndex or trackId if nothing passed thow `400` BadRequest if\n            passed both `400` BadRequest\n          schema:\n            type: string\n            format: uuid\n        - name: newIndex\n          in: query\n          required: true\n          description: \u003e-\n            Required, the new track index, zero based, must be positive. if\n            index greater than the queue length `400` BadRequest\n          schema:\n            type: integer\n            minimum: 0\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n    post:\n      security:\n        - bearerAuth: []\n      tags:\n        - Queue\n      description: Add an Item to the User's Playback Current Queue\n      parameters:\n        - name: queueIndex\n          in: query\n          description: \u003e-\n            Optional. The index of the queue Default 0 must be greater than 0 if\n            `0` get the current queue if `1` get the last queue\n          schema:\n            type: integer\n            default: 0\n            minimum: 0\n            maximum: 1\n        - name: deviceId\n          in: query\n          description: \u003e-\n            Optional. The id of the device this command is targeting. If not\n            supplied, the user’s currently active device is the target.\n          schema:\n            type: integer\n        - name: trackId\n          in: query\n          required: true\n          description: Track ID to add to queue\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n    get:\n      security:\n        - bearerAuth: []\n      tags:\n        - Queue\n      description: Get User's Playback Queue\n      parameters:\n        - name: queueIndex\n          in: query\n          description: \u003e-\n            Optional. The index of the queue Default 0 must be greater than 0 if\n            `0` get the current queue if 1 get the last queue\n          schema:\n            type: integer\n            default: 0\n            minimum: 0\n            maximum: 1\n      responses:\n        '200':\n          $ref: '#/components/responses/Queue'\n        '204':\n          $ref: '#/components/responses/NoContent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /me/player/volume:\n    put:\n      security:\n        - bearerAuth: []\n      tags:\n        - Queue\n      description: Set Volume For User's Playback\n      parameters:\n        - name: deviceId\n          in: query\n          description: \u003e-\n            Optional. The id of the device this command is targeting. If not\n            supplied, the user’s currently active device is the target.\n          schema:\n            type: integer\n        - name: volumePercent\n          in: query\n          description: \u003e-\n            Required. Integer. The volume to set. Must be a value from 0 to 100\n            inclusive.\n          schema:\n            minimum: 0\n            maximum: 100\n            type: integer\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /me/player/previous:\n    post:\n      security:\n        - bearerAuth: []\n      tags:\n        - Queue\n      description: \u003e-\n        Skip User’s Playback To Previous Track.\n        If the repeat state in player is `context` and the playing track is the first track it will go to the last track in the queue. If the repeat state in player is not `context` and the playing track is the first track it will play will play the last queue if found.\n      parameters:\n        - name: deviceId\n          in: query\n          description: \u003e-\n            Optional. The id of the device this command is targeting. If not\n            supplied, the user’s currently active device is the target.\n          schema:\n            type: integer\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /me/player/next:\n    post:\n      security:\n        - bearerAuth: []\n      tags:\n        - Queue\n      description: \u003e-\n        Skip User’s Playback To Next Track.\n        If the repeat state in player is `context` and the playing track is the last track it will go to the first track in the queue. If the repeat state in player is not `context` and the playing track is the last track it will create a new queue similar to the playing queue.\n                  \n      parameters:\n        - name: deviceId\n          in: query\n          description: \u003e-\n            Optional. The id of the device this command is targeting. If not\n            supplied, the user’s currently active device is the target.\n          schema:\n            type: integer\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /me/player/pause:\n    put:\n      security:\n        - bearerAuth: []\n      tags:\n        - Queue\n      description: Pause a User's Playback\n      parameters:\n        - name: deviceId\n          in: query\n          description: \u003e-\n            Optional. The id of the device this command is targeting. If not\n            supplied, the user’s currently active device is the target.\n          schema:\n            type: integer\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /me/player/seek:\n    put:\n      security:\n        - bearerAuth: []\n      tags:\n        - Queue\n      description: Seek To Position In Currently Playing Track\n      parameters:\n        - name: positionMs\n          required: true\n          in: query\n          description: \u003e-\n            Required. The position in milliseconds to seek to. Must be a\n            positive number. Passing in a position that is greater than the\n            length of the track will cause the player to start playing the next\n            song.\n          schema:\n            type: integer\n        - name: deviceId\n          in: query\n          description: \u003e-\n            Optional. The id of the device this command is targeting. If not\n            supplied, the user’s currently active device is the target.\n          schema:\n            type: integer\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /me/player/repeat:\n    put:\n      security:\n        - bearerAuth: []\n      tags:\n        - Queue\n      description: Set Repeat Mode On User’s Playback\n      parameters:\n        - name: state\n          required: true\n          in: query\n          description: \u003e-\n            Required. `track`, `context` or `off`. track will repeat the current\n            track.context will repeat the current context. off will turn repeat\n            off.\n          schema:\n            type: string\n            enum:\n              - track\n              - context\n              - 'off'\n        - name: deviceId\n          in: query\n          description: \u003e-\n            Optional. The id of the device this command is targeting. If not\n            supplied, the user’s currently active device is the target.\n          schema:\n            type: integer\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /me/player/shuffle:\n    put:\n      security:\n        - bearerAuth: []\n      tags:\n        - Queue\n      description: Toggle Shuffle For User’s Playback\n      parameters:\n        - name: state\n          required: true\n          in: query\n          description: \u003e-\n            Required `true` : Shuffle user’s playback `false` : Do not shuffle\n            user’s playback.\n          schema:\n            type: boolean\n        - name: deviceId\n          in: query\n          description: \u003e-\n            Optional. The id of the device this command is targeting. If not\n            supplied, the user’s currently active device is the target.\n          schema:\n            type: integer\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /me/player:\n    get:\n      security:\n        - bearerAuth: []\n      tags:\n        - Player\n      description: Get Information About The User's Current Playback\n      responses:\n        '200':\n          $ref: '#/components/responses/CurrentPlayback'\n        '204':\n          $ref: '#/components/responses/NoContent'\n    put:\n      security:\n        - bearerAuth: []\n      tags:\n        - Player\n      description: Transfer a User's Playback\n      requestBody:\n        description: DeviceIds and play\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TransferPlayback'\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /me/player/play:\n    put:\n      security:\n        - bearerAuth: []\n      tags:\n        - Queue\n      description: Start/Resume a User's Playback. if the user is a free user every 3 tracks 1 ad will be played\n      parameters:\n        - name: deviceId\n          in: query\n          description: \u003e-\n            Optional. The id of the device this command is targeting. If not\n            supplied, the user’s currently active device is the target.\n          schema:\n            type: integer\n        - name: queueIndex\n          in: query\n          description: \u003e-\n            Optional. The index of the queue if `0` get the current queue if `1`\n            get the last queue, if not supplied the user’s current queue is the\n            target.\n          schema:\n            type: integer\n            default: 0\n            minimum: 0\n            maximum: 1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \u003e-\n                ContextUri or uris can be specified to create a new queue. If\n                neither is present, calling /play will resume playback.\n                an offset can be specified either by track uri\n                OR position. If both are present the request will return 400 BAD\n                REQUEST. If incorrect values are provided for position or uri,\n                the request may be accepted but with an unpredictable resulting\n                action on playback.\n              type: object\n              properties:\n                contextUri:\n                  type: string\n                  format: uri\n                  description: \u003e-\n                    Optional. Oud URI of the context to play. Valid contexts are\n                    album, artist, playlist.\n                  example: 'oud:album:4iV5W9uYEdYUVa79Axb7Rh'\n                    \n                uris:\n                  description: Optional. A JSON array of the Oud track URIs to play\n                  example:\n                    - 'oud:track:4iV5W9uYEdYUVa79Axb7Rh'\n                    - 'oud:track:1301WleyT98MSxVHPZCA6M'\n                  type: array\n                  items:\n                    type: string\n                    format: uri\n                offset:\n                  type: object\n                  description: \u003e-\n                    Optional. Indicates from where in the context playback\n                    should start. Only available when contextUri corresponds to\n                    an album or playlist object, or when the uris parameter is\n                    used.`position` is zero based and can’t be negative.\n                    Example: \"offset\": {\"position\": 5}. “uri” is a string\n                    representing the uri of the item to start at. Example:\n                    'offset': {\"uri\": \"oud:track:1301WleyT98MSxVHPZCA6M\"}\n                positionMs:\n                  description: \u003e-\n                    Optional. Indicates from what position to start playback.\n                    Must be a positive number. Passing in a position that is\n                    greater than the length of the track will cause the player\n                    to start playing the next song.\n                  type: integer\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /me/player/currently-playing:\n    get:\n      security:\n        - bearerAuth: []\n      tags:\n        - Player\n      description: Get the User's Currently Playing Track\n      responses:\n        '200':\n          $ref: '#/components/responses/CurrentlyPlaying'\n        '204':\n          $ref: '#/components/responses/NoContent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /me/player/recently-played:\n    get:\n      security:\n        - bearerAuth: []\n      tags:\n        - Player\n      description: Get Current User's Recently Played Tracks\n      parameters:\n        - name: limit\n          in: query\n          description: \u003e-\n            Optional. The maximum number of items to return. Default: 20.\n            Minimum: 1. Maximum: 50.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 50\n            default: 20\n        - name: after\n          in: query\n          description: \u003e-\n            Optional. A Unix timestamp in milliseconds. Returns all items after\n            (but not including) this cursor position. If after is specified,\n            before must not be specified.\n          schema:\n            type: integer\n            format: Unix Millisecond\n        - name: before\n          in: query\n          description: \u003e-\n            Optional. A Unix timestamp in milliseconds. Returns all items before\n            (but not including) this cursor position. If before is specified,\n            after must not be specified.\n          schema:\n            type: integer\n            format: Unix Millisecond\n      responses:\n        '200':\n          $ref: '#/components/responses/PlayHistory'\n        '204':\n          $ref: '#/components/responses/NoContent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /me/player/devices:\n    get:\n      security:\n        - bearerAuth: []\n      tags:\n        - Player\n      description: Get a User's Available Devices\n      responses:\n        '200':\n          $ref: '#/components/responses/ListOfDevices'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\ncomponents:\n  schemas:\n    Ad:\n      type: object\n      description: advertisement\n      properties:\n        _id:\n          type: string\n        image:\n          type: string\n          example: https://imgr.com/img.jpg\n          description: Ad Image source\n        type:\n          type: string\n          description: object type 'ad'\n          example: 'ad'\n        duration:\n          type: number\n          description: Ad duration in ms\n        audioUrl:\n          type: string\n          description: audio source\n        name:\n          type: string\n          description: Ad name\n          example: 'Pepsi'\n        link:\n          type: string\n          description: Add redirect link\n          example: 'https://www.pepsi.com'\n  \n    UserWithToken:\n      type: object\n      properties:\n        token:\n          type: string\n        user:\n          $ref: '#/components/schemas/UserPrivate'\n    TransferPlayback:\n      type: object\n      description: TransferPlayback body request\n      required:\n        - deviceIds\n      properties:\n        deviceIds:\n          description: \u003e-\n            Required. A JSON array containing the ID of the device on which\n            playback should be started/transferred. For example:\n            `{deviceIds:[\"74ASZWbe4lXaubB36ztrGX\"]}` Note: Although an array is\n            accepted, only a single deviceId is currently supported. Supplying\n            more than one will return `400` Bad Request\n          type: array\n          items:\n            type: string\n        play:\n          description: \u003e-\n            Optional. `true`: ensure playback happens on new device.`false`:\n            keep the current playback state.\n          type: boolean\n    Artist:\n      type: object\n      description: Artist Full Object\n      properties:\n        _id:\n          type: string\n          description: The unique ID of the Artist\n        genres:\n          type: array\n          items:\n            $ref: '#/components/schemas/Genre'\n        images:\n          type: array\n          items:\n            type: string\n            format: url\n          description: 'The source URL of the image (Profile, Cover).'\n        displayName:\n          type: string\n          description: The name of the artist.\n        bio:\n          type: string\n          description: a biography or short biographical profile of the artist.\n        popularSongs:\n          type: array\n          description: Array of popular Tracks of the artist\n          items:\n            $ref: '#/components/schemas/Track'\n        type:\n          type: string\n          description: 'The object type: `\"artist\"`'\n    ArtistSimple:\n      type: object\n      description: Artist Simple Object\n      properties:\n        _id:\n          type: string\n          description: The unique ID of the Artist\n        displayName:\n          type: string\n          description: The name of the artist.\n        type:\n          type: string\n          description: 'The object type: \"artist\"'\n        images:\n          type: array\n          items:\n            type: string\n            format: url\n          description: 'The source URL of the image (Profile, Cover).'\n    AlbumSimple:\n      type: object\n      description: Album Simple Object\n      properties:\n        _id:\n          type: string\n          description: Unique ID of the album\n        album_type:\n          type: string\n          description: \u003e-\n            the type of the album: one of the following 'single', 'album' or\n            'compilation'\n        artists:\n          type: array\n          items:\n            $ref: '#/components/schemas/ArtistSimple'\n          description: \u003e-\n            The artists of the album. Each artist object includes a link in href\n            to more detailed information about the artist.\n        image:\n          type: string\n          description: The source url of the image\n        name:\n          type: string\n          description: The name of the album\n        type:\n          type: string\n          description: The object type \"album\"\n        released:\n          type: boolean\n          description: determines if the album is released for public or private\n    Track:\n      type: object\n      description: Track Full Object\n      properties:\n        _id:\n          type: string\n          description: The unique Id of the track\n        name:\n          type: string\n          description: The name of the Track.\n        artists:\n          type: array\n          items:\n            $ref: '#/components/schemas/ArtistSimple'\n          description: The artists who performed the track.\n        albumId:\n          type: string\n          description: The id of the album of the track.\n        album:\n          $ref: '#/components/schemas/AlbumSimple'\n        type:\n          type: string\n          description: The object type i.e “track”\n        duartion:\n          type: integer\n          description: The duartion of the song in ms\n        views:\n          type: integer\n          description: The number of times someone listened to this track\n    TrackWithAudioUrl:\n      type: object\n      description: Track with AudioUrl\n      properties:\n        _id:\n          type: string\n          description: The unique Id of the track\n        name:\n          type: string\n          description: The name of the Track.\n        artists:\n          type: array\n          items:\n            $ref: '#/components/schemas/ArtistSimple'\n          description: The artists who performed the track.\n        albumId:\n          type: string\n          description: The id of the album of the track.\n        album:\n          $ref: '#/components/schemas/AlbumSimple'\n        type:\n          type: string\n          description: The object type i.e “track”\n        duartion:\n          type: integer\n          description: The duartion of the song in ms\n        views:\n          type: integer\n          description: The number of times someone listened to this track\n        audioUrl:\n          type: string\n          description: AudioUrl to download the track\n    TrackSimple:\n      type: object\n      description: Simple Track Object\n      properties:\n        _id:\n          type: string\n          description: The unique Id of the track\n        name:\n          type: string\n          description: The name of the Track.\n        artists:\n          type: array\n          items:\n            $ref: '#/components/schemas/ArtistSimple'\n          description: The artists who performed the track.\n        type:\n          type: string\n          description: The object type i.e “track”\n        duartion: \n          type: integer\n          description: The duartion of the song in ms\n        views:\n          type: integer\n          description: The number of times someone listened to this track\n\n    Paging:\n      description: \u003e-\n        The offset-based paging object is a container for a set of objects. It\n        contains a key called items (whose value is an array of the requested\n        objects) along with other keys like total, offset and limit that can be\n        useful in future calls.\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            type: object\n          description: The requested data.\n        limit:\n          type: integer\n          description: \u003e-\n            The maximum number of items in the response (as set in the query or\n            by default).\n        offset:\n          type: integer\n          description: \u003e-\n            The offset of the items returned (as set in the query or by\n            default).\n        total:\n          type: integer\n          description: The maximum number of items available to return\n    UserPublic:\n      type: object\n      description: Some information of the user\n      properties:\n        _id:\n          description: The unique ID of the user.\n          type: string\n          format: uuid\n          example: 5a2539b41c574006c46f1a07\n        displayName:\n          description: User Display Name\n          type: string\n          format: string\n        images:\n          description: The user’s profile images.\n          type: array\n          items:\n            type: string\n          nullable: true\n        verified:\n          description: false if user is not verified else true\n          type: boolean\n          default: false\n          nullable: false\n        lastLogin:\n          description: last time user logged in\n          type: string\n          format: date\n          nullable: true\n        type:\n          description: 'The object type: “user”'\n          type: string\n    UserPrivate:\n      type: object\n      description: All information of the user\n      required:\n        - _id\n        - username\n        - email\n        - displayName\n        - role\n      properties:\n        _id:\n          description: The unique ID of the user.\n          type: string\n          format: uuid\n          example: 5a2539b41c574006c46f1a07\n        username:\n          description: \u003e-\n            The user’s username, as entered by the user when creating their\n            account.\n          type: string\n          format: string\n          minLength: 5\n          maxLength: 30\n        birthDate:\n          type: string\n          format: date\n          nullable: true\n        privateSession:\n          type: boolean\n          default: false\n        gender:\n          type: string\n          enum:\n            - F\n            - M\n        email:\n          description: \u003e-\n            The user’s email address, as entered by the user when creating their\n            account.\n          type: string\n          format: email\n          example: example@example.com\n        displayName:\n          description: User Display Name\n          type: string\n          format: string\n        role:\n          description: User System Role\n          type: string\n          format: string\n          enum:\n            - free\n            - premium\n            - artist\n        country:\n          description: User Country Name\n          type: string\n          format: ISO Alpha 2\n          minLength: 2\n          maxLength: 2\n          example: EG\n          nullable: true\n        credit:\n          description: Oud Coins that can be used to purchase Premium Plan\n          type: integer\n          default: 0\n        plan:\n          description: \u003e-\n            This takes the date of the end of the premium plan or `null` if the\n            user is on the free plan\n          type: string\n          format: date\n          nullable: true\n          default: null\n        images:\n          description: The user’s profile images.\n          type: array\n          items:\n            type: string\n          nullable: true\n        verified:\n          description: false if user is not verified else true\n          type: boolean\n          default: false\n          nullable: false\n        lastLogin:\n          description: last time user logged in\n          type: string\n          format: date\n          nullable: true\n        facebook_id:\n          description: Facebook Authentication id\n          nullable: true\n          type: string\n        google_id:\n          description: Google Authentication id\n          nullable: true\n          type: string\n        type:\n          description: 'The object type: “user”'\n          type: string\n    Genre:\n      type: object\n      properties:\n        _id:\n          type: string\n          description: Unique ID of the genre\n        name:\n          type: string\n          description: name of the genre\n      description: \u003e-\n            A list of the genres the artist is associated with. For example:\n            `\"Prog Rock\"` , `\"Post-Grunge\"`. (If not yet classified, the array\n            is empty.)\n    Album:\n      type: object\n      properties:\n        _id:\n          type: string\n          description: Unique ID of the album\n        album_type:\n          type: string\n          description: \u003e-\n            the type of the album: one of the following 'single', 'album' or\n            'compilation'\n        artists:\n          type: array\n          items:\n            $ref: '#/components/schemas/ArtistSimple'\n          description: \u003e-\n            The artists of the album. Each artist object includes a link in href\n            to more detailed information about the artist.\n        genres:\n          type: array\n          items:\n            $ref: '#/components/schemas/Genre'\n        image:\n          type: string\n          description: The source url of the image\n        name:\n          type: string\n          description: The name of the album\n        release_date:\n          type: string\n          format: date\n          description: \u003e-\n            The date the album was first released, for example 1981. Depending\n            on the precision, it might be shown as `1981-12` or `1981-12-15`\n        tracks:\n          type: object\n          description: The album tracks inside a paging object\n          properties:\n            items:\n              type: array\n              items:\n                $ref: '#/components/schemas/TrackSimple'\n            limit:\n              type: integer\n              description: \u003e-\n                The maximum number of items in the response (as set in the query\n                or by default).\n            offset:\n              type: integer\n              description: \u003e-\n                The offset of the items returned (as set in the query or by\n                default).\n            total:\n              type: integer\n              description: The maximum number of items available to return\n        type:\n          type: string\n          description: The object type `\"album\"`\n        released:\n          type: boolean\n          description: determines if the album is released for public or private\n    Category:\n      type: object\n      properties:\n        _id:\n          type: string\n          description: the unique ID of Category\n        name:\n          type: string\n          description: the name of the category\n        icon:\n          type: string\n          description: the source URl of the Icon\n        playlists:\n          type: array\n          items:\n            type: string\n          description: The IDs of playlists of that category.\n    CategorySimple:\n      type: object\n      properties:\n        _id:\n          type: string\n          description: the unique ID of Category\n        name:\n          type: string\n          description: the name of the category\n        icon:\n          type: string\n          description: the source URl of the Icon\n    Error:\n      type: object\n      properties:\n        status:\n          type: string\n        message:\n          type: string\n      required:\n        - status\n        - message\n    SavedAlbum:\n      type: object\n      properties:\n        added_at:\n          type: string\n          description: The date and time the album was saved.\n          format: date-time\n        album:\n          $ref: '#/components/schemas/Album'\n    SavedTrack:\n      type: object\n      properties:\n        added_at:\n          type: string\n          description: The date and time the track was saved.\n          format: date-time\n        track:\n          $ref: '#/components/schemas/Track'\n    PlaylistSimple:\n      type: object\n      properties:\n        _id:\n          type: string\n          description: The unique ID of the Playlist\n        name:\n          type: string\n          description: The name of the Playlist.\n        owner:\n          type: string\n          description: the user ID who owns the Playlist\n        tracks:\n          type: array\n          description: Information about the tracks of the Playlist\n          items:\n            $ref: '#/components/schemas/PlaylistTrack'\n        collaborative:\n          type: boolean\n          description: true if user allows other users to modify the Playlist\n        description:\n          type: string\n          description: \u003e-\n            The Playlist Description. Only returned for modified,verified\n            playlists,otherwise nullz\n        public:\n          type: boolean\n          description: The Playlist's Public/Private state\n        image:\n          type: string\n          description: The image of the playlist\n          nullable: true\n        type:\n          type: string\n          description: 'The object type: `\"Playlist\"`'\n    Playlist:\n      type: object\n      properties:\n        _id:\n          type: string\n          description: The unique ID of the Playlist\n        name:\n          type: string\n          description: The name of the Playlist.\n        owner:\n          type: string\n          description: the user ID who owns the Playlist\n        collaborative:\n          type: boolean\n          description: true if user allows other users to modify the Playlist\n        description:\n          type: string\n          description: \u003e-\n            The Playlist Description. Only returned for modified,verified\n            playlists,otherwise null\n        tracks:\n          type: array\n          description: Information about the tracks of the Playlist\n          items:\n            $ref: '#/components/schemas/Track'\n        image:\n          type: string\n          description: The image of the playlist\n          nullable: true\n        public:\n          type: boolean\n          description: The Playlist's Public/Private state\n        type:\n          type: string\n          description: 'The object type: `\"Playlist\"`'\n    PlaylistTrack:\n      type: object\n      description: Simple Track Object\n      properties:\n        _id:\n          type: string\n          description: The unique Id of the track\n        name:\n          type: string\n          description: The name of the Track.\n        album:\n          type: string\n          description: id of the album\n        artists:\n          type: array\n          items:\n            type: string\n          description: ids of artists who performed the track.\n        type:\n          type: string\n          description: The object type i.e “track”\n        duartion: \n          type: integer\n          description: The duartion of the song in ms\n        views:\n          type: integer\n          description: The number of times someone listened to this track\n\n    Signup:\n      type: object\n      required:\n        - username\n        - email\n        - password\n        - passwordConfirm\n        - displayName\n        - role\n        - country\n      properties:\n        username:\n          description: \u003e-\n            REQUIRED - The user’s username, as entered by the user when creating\n            their account.\n          type: string\n          format: string\n          minLength: 5\n          maxLength: 30\n        birthDate:\n          description: 'OPTIONAL - The user`s birthdate, must be at least 10 years old'\n          type: string\n          format: date\n          nullable: true\n        email:\n          description: \u003e-\n            REQUIRED - The user’s email address, as entered by the user when\n            creating their account.\n          type: string\n          format: email\n          example: example@example.com\n        password:\n          description: REQUIRED - The user’s password\n          type: string\n          format: password\n          minLength: 8\n        passwordConfirm:\n          description: REQUIRED - The user’s password confirm\n          type: string\n          format: password\n          minLength: 8\n        displayName:\n          description: REQUIRED - User Display Name\n          type: string\n          format: string\n        role:\n          description: REQUIRED - User System Role\n          type: string\n          format: string\n          enum:\n            - free\n            - premium\n            - artist\n        country:\n          description: User Country Name\n          type: string\n          format: ISO Alpha 2\n          minLength: 2\n          maxLength: 2\n          example: EG\n        gender:\n          type: string\n          enum:\n            - F\n            - M\n        github_id:\n          type: string\n        google_id:\n          type: string\n        facebook_id:\n          type: string\n    Login:\n      type: object\n      required:\n        - email\n        - password\n      properties:\n        email:\n          description: \u003e-\n            REQUIRED - The user’s email address, as entered by the user when\n            creating their account.\n          type: string\n          format: email\n          example: example@example.com\n        password:\n          description: REQUIRED - The user’s password\n          type: string\n          format: password\n          minLength: 8\n    Device:\n      type: object\n      required:\n        - id\n        - isActive\n        - name\n        - type\n      properties:\n        id:\n          type: string\n          description: The device ID. This may be `null`.\n          nullable: true\n        isActive:\n          type: boolean\n          description: If this device is the currently active device.\n        isPrivateSession:\n          description: If this device is currently in a private session.\n          type: boolean\n        name:\n          type: string\n          description: The name of the device.\n        type:\n          type: string\n          default: Unknown\n          enum:\n            - Computer\n            - Tablet\n            - Smartphone\n            - Speaker\n            - TV\n            - AVR\n            - STB\n            - AudioDongle\n            - GameConsole\n            - CastVideo\n            - CastAudio\n            - Automobile\n            - Unknown\n          description: 'Device type, such as `Computer`, `Smartphone` or `Speaker`.'\n        volumePercent:\n          type: integer\n          description: The current volume in percent. This may be null.\n          nullable: true\n          minimum: 0\n          maximum: 100\n    NewPassword:\n      type: object\n      required:\n        - password\n        - passwordConfirm\n      properties:\n        password:\n          description: REQUIRED - The user’s new password\n          type: string\n          format: password\n          minLength: 8\n        passwordConfirm:\n          description: REQUIRED - The user’s new password confirm\n          type: string\n          format: password\n          minLength: 8\n    UpdatePassword:\n      type: object\n      required:\n        - currentPassword\n        - password\n        - passwordConfirm\n      properties:\n        currentPassword:\n          description: REQUIRED - The user’s current password\n          type: string\n          format: password\n          minLength: 8\n        password:\n          description: REQUIRED - The user’s new password\n          type: string\n          format: password\n          minLength: 8\n        passwordConfirm:\n          description: REQUIRED - The user’s new password confirm\n          type: string\n          format: password\n          minLength: 8\n    Disallows:\n      type: object\n      description: \u003e-\n        The following actions may be included in the list of disallows,\n        depending on the current context. If an action is included in the\n        disallows object and set to true, that action is not allowed (disallowed\n        = true equals not allowed).If an action is not included in the disallows\n        object or set to false or undefined, that action is allowed (disallowed\n        = false equals allowed).For example, skipping_next, skipping_prev and\n        seeking will be set to true while playing an ad track, meaning that\n        users cannot skip or seek at this point in time.\n      properties:\n        interrupting_playback:\n          type: boolean\n        pausing:\n          type: boolean\n        resuming:\n          type: boolean\n        seeking:\n          type: boolean\n        skipping_next:\n          type: boolean\n        skipping_prev:\n          type: boolean\n        toggling_repeat_context:\n          type: boolean\n        toggling_shuffle:\n          type: boolean\n        toggling_repeat_track:\n          type: boolean\n        transferring_playback:\n          type: boolean\n    Context:\n      type: object\n      description: Context Object\n      required:\n        - type\n        - id\n      properties:\n        type:\n          type: string\n          enum:\n            - album\n            - artist\n            - playlist\n            - unknown\n          default: unknwon\n        id:\n          type: string\n    SmallArtist:\n      type: object\n      description: Small artist\n      properties:\n        _id:\n          type: string\n        displayName:\n          type: string\n        type:\n          type: string\n        images:\n          type: array\n          items:\n            type: string\n          \n    SmallAlbum:\n      type: object\n      description: Small album\n      properties:\n        _id:\n          type: string\n        name:\n          type: string\n        image:\n          type: string\n        type:\n          type: string\n        artists:\n          type: array\n          items:\n            $ref: '#/components/schemas/SmallArtist'\n      \n    Thread:\n      type: object\n      description: Messages' Thread\n      properties:\n        _id:\n          type: string\n          description: Id of the thread\n        from:\n          type: object\n          properties:\n            _id:\n              type: string\n              description: Id of the first user\n            displayName:\n              type: string\n        to:\n          type: object\n          properties:\n            _id:\n              type: string\n              description: Id of the second user\n            displayName:\n              type: string\n        read:\n          type: boolean\n          description: shows if the recipient has read the message or not yet.\n        updatedAt:\n          type: string\n          description: the date at which the thread was updated/modified (i.e. a new message was added).\n        messages:\n          type: array\n          items:\n            type: object\n            properties:\n              _id:\n                type: string\n                description: id of the message\n              author:\n                type: string\n                description: id of the author of the message\n              message:\n                type: string\n                description: the body of the message\n              sentAt:\n                type: string\n                description: the date when the message was sent.\n                \n    Messages:\n      type: object\n      description: Messages of a Thread\n      properties:\n        _id:\n          type: string\n          description: Id of the thread\n        from:\n          type: object\n          properties:\n            _id:\n              type: string\n              description: Id of the first user\n            displayName:\n              type: string\n        to:\n          type: object\n          properties:\n            _id:\n              type: string\n              description: Id of the second user\n            displayName:\n              type: string\n        read:\n          type: boolean\n          description: shows if the recipient has read the message or not yet.\n        updatedAt:\n          type: string\n          description: the date at which the thread was updated/modified (i.e. a new message was added).\n        createdAt:\n          type: string\n          description: the date at which the thread was created (i.e. when first message was sent).\n        messages:\n          type: object\n          properties:\n            items:\n              type: array\n              items:\n                type: object\n                properties:\n                  _id:\n                    type: string\n                    description: id of the message\n                  author:\n                    type: string\n                    description: id of the author of the message\n                  message:\n                    type: string\n                    description: the body of the message\n                  sentAt:\n                    type: string\n                    description: the date when the message was sent.\n            limit: \n              type: integer\n              description:  maximum number of messages to return as set in the query or by default\n            offset:\n              type: integer\n              description: index of the first element in the array\n            total:\n              type: integer\n              description: total number of documents available in the database\n\n                      \n          \n    SmallPlaylist:\n      type: object\n      description: Small artist\n      properties:\n        _id:\n          type: string\n        name:\n          type: string\n        image:\n          type: string\n        type:\n          type: string\n      \n    PlayHistoryContext:\n      type: object\n      description: Context Object\n      required:\n        - type\n        - id\n      properties:\n        type:\n          type: string\n          enum:\n            - Album\n            - Artist\n            - Playlist\n        id:\n          type: string\n        item:\n          oneOf:\n            - $ref: '#/components/schemas/SmallArtist'\n            - $ref: '#/components/schemas/SmallPlaylist'\n            - $ref: '#/components/schemas/SmallAlbum'\n        \n    CurrentlyPlayingContext:\n      type: object\n      description: Current Playing Context\n      properties:\n        device:\n          description: The device that is currently active\n          $ref: '#/components/schemas/Device'\n        progressMs:\n          description: \u003e-\n            Progress into the currently playing track. Can be null (e.g. If\n            private session is enabled this will be null).\n          type: integer\n          format: Unix Millisecond\n          nullable: true\n        isPlaying:\n          description: If something is currently playing.\n          type: boolean\n        shuffleState:\n          description: If shuffle is on or off\n          type: boolean\n        repeatState:\n          description: 'off, track, context'\n          type: string\n          enum:\n            - off\n            - track\n            - context\n        currentlyPlayingType:\n          description: \u003e-\n            The object type of the currently playing item. Can be one of track,\n            ad or unknown.\n          type: string\n          default: unknown\n          enum:\n            - track\n            - ad\n            - unknown\n        item:\n          description: \u003e-\n            The currently playing track. Can be null (e.g. If private session is\n            enabled this will be null).\n          oneOf:\n            - $ref: '#/components/schemas/TrackWithAudioUrl'\n            - $ref: '#/components/schemas/Ad'\n        actions:\n          description: \u003e-\n            Allows to update the user interface based on which playback actions\n            are available within the current context\n          $ref: '#/components/schemas/Disallows'\n        context:\n          description: \u003e-\n            A Context Object. Can be null (e.g. If private session is enabled\n            this will be null).\n          $ref: '#/components/schemas/Context'\n    CurrentlyPlaying:\n      type: object\n      description: Current Playing Context\n      properties:\n        track:\n          description: \u003e-\n            The currently playing track. Can be null (e.g. If private session is\n            enabled this will be null).\n          oneOf:\n            - $ref: '#/components/schemas/TrackWithAudioUrl'\n            - $ref: '#/components/schemas/Ad'\n        context:\n          description: \u003e-\n            A Context Object. Can be null (e.g. If private session is enabled\n            this will be null).\n          $ref: '#/components/schemas/Context'\n    PlayHistory:\n      type: object\n      description: Play history\n      required:\n        - items\n        - limit\n      properties:\n        items:\n          description: The requested data.\n          type: array\n          items:\n            type: object\n            properties:\n              playedAt:\n                description: The date and time the track was played.\n                type: string\n                format: date-time\n              context:\n                description: The context the track was played from.\n                $ref: '#/components/schemas/PlayHistoryContext'\n        limit:\n          description: \u003e-\n            The maximum number of items in the response (as set in the query or\n            by default).\n          type: integer\n    Queue:\n      type: object\n      description: User Queue\n      required:\n        - tracks\n        - total\n      properties:\n        tracks:\n          type: array\n          description: The track IDs.\n          items:\n            type: string\n            format: uuid\n        total:\n          type: integer\n          description: The tracks number\n    UserDataForFacebook:\n      type: object\n      properties:\n        facebook_id:\n          type: string\n        email:\n          type: string\n        gender:\n          type: string\n          enum:\n            - M\n            - F\n        displayName:\n          type: string\n        images:\n          type: array\n          description: user images\n          items:\n            type: string\n        birthDate:\n          type: string\n          format: date\n    UserDataForGoogle:\n      type: object\n      properties:\n        google_id:\n          type: string\n        email:\n          type: string\n        displayName:\n          type: string\n        images:\n          type: array\n          description: user images\n          items:\n            type: string\n    UserDataForGithub:\n      type: object\n      properties:\n        github_id:\n          type: string\n        email:\n          type: string\n        displayName:\n          type: string\n        username:\n          type: string\n        images:\n          type: array\n          description: user images\n          items:\n            type: string\n  responses:\n    FacebookAuth:\n      description: \u003e-\n        Facebook Auth response. send user account and x-auth-token if user is\n        already exists. else send user data to signup\n      headers:\n        x-auth-token:\n          description: Authentication token\n          schema:\n            type: string\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - $ref: '#/components/schemas/UserWithToken'\n              - $ref: '#/components/schemas/UserDataForFacebook'\n    GoogleAuth:\n      description: \u003e-\n        Google Auth response. send user account and x-auth-token if user is\n        already exists. else send user data to signup\n      headers:\n        x-auth-token:\n          description: Authentication token\n          schema:\n            type: string\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - $ref: '#/components/schemas/UserWithToken'\n              - $ref: '#/components/schemas/UserDataForGoogle'\n    GithubAuth:\n      description: \u003e-\n        Github Auth response. send user account and x-auth-token if user is\n        already exists. else send user data to signup\n      headers:\n        x-auth-token:\n          description: Authentication token\n          schema:\n            type: string\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - $ref: '#/components/schemas/UserWithToken'\n              - $ref: '#/components/schemas/UserDataForGithub'\n    InvalidId:\n      description: Invalid ID\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    CreateSendToken:\n      description: \u003e-\n        Created - The request has been fulfilled and resulted in a new resource\n        being created.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              token:\n                type: string\n              user:\n                $ref: '#/components/schemas/UserPrivate'\n    TokenSentToEmail:\n      description: OK - The token sent to email\n      headers:\n        x-auth-token:\n          description: Authentication token\n          schema:\n            type: string\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              status:\n                type: string\n                example: '200'\n              message:\n                type: string\n                example: Token sent to email!\n    Login:\n      description: \u003e-\n        OK - The request has succeeded. The client can read the result of the\n        request in the body and the headers of the response.\n      headers:\n        x-auth-token:\n          description: Authentication token\n          schema:\n            type: string\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              token:\n                type: string\n              user:\n                $ref: '#/components/schemas/UserPrivate'\n    PlayHistory:\n      description: \u003e-\n        OK - The request has succeeded. The client can read the result of the\n        request in the body and the headers of the response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/PlayHistory'\n    CurrentPlayback:\n      description: \u003e-\n        OK - The request has succeeded. The client can read the result of the\n        request in the body and the headers of the response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CurrentlyPlayingContext'\n    NoContent:\n      description: No Content - The request has succeeded but returns no message body.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    BadRequest:\n      description: \u003e-\n        Bad Request - The request could not be understood by the server due to\n        malformed syntax. The message body will contain more information.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    Created:\n      description: \u003e-\n        Created - The request has been fulfilled and resulted in a new resource being created.\n    InternalError:\n      description: Internal Server Error.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    TooManyRequests:\n      description: Too Many Requests\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    NotFound:\n      description: Not Found - The requested resource could not be found.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    Unauthorized:\n      description: \u003e-\n        Unauthorized - The request requires user authentication or, if the\n        request included authorization credentials, authorization has been\n        refused for those credentials.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    Forbidden:\n      description: \u003e-\n        Forbidden - The server understood the request, but is refusing to\n        fulfill it.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    PartialContent:\n      description: \u003e-\n        OK - The server is successfully fulfilling a range request for the\n        target resource by transferring one or more parts of the selected\n        representation that correspond to the satisfiable ranges found in the\n        request's Range header field\n    Queue:\n      description: \u003e-\n        OK - The request has succeeded. The client can read the result of the\n        request in the body and the headers of the response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Queue'\n    CurrentlyPlayingContext:\n      description: \u003e-\n        OK - The request has succeeded. The client can read the result of the\n        request in the body and the headers of the response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CurrentlyPlayingContext'\n    CurrentlyPlaying:\n      description: \u003e-\n        OK - The request has succeeded. The client can read the result of the\n        request in the body and the headers of the response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CurrentlyPlaying'\n    ListOfDevices:\n      description: \u003e-\n        OK - The request has succeeded. The client can read the result of the\n        request in the body and the headers of the response.\n      content:\n        application/json:\n          schema:\n            type: array\n            description: List of all devices\n            items:\n              $ref: '#/components/schemas/Device'\n    Track:\n      description: \u003e-\n        OK - The request has succeeded. The client can read the result of the\n        request in the body and the headers of the response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Track'\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT"
		}
	},
	"Error": "parse: parse spec: paths: /me/player: get: operation \"\": responses: 200: resolve \"#/components/responses/CurrentPlayback\" reference: content: \"application/json\": schema: parse schema: resolve \"#/components/schemas/CurrentlyPlayingContext\": parse schema: property \"repeatState\": parse enum values: parse value \"false\": expected type \"string\", got \"bool\""
}