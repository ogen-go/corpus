{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/preciousifada360/aquitweb"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "aquits/www/src/dist/openapi.yaml",
			"byteSize": 39965,
			"content": "openapi: 3.0.0\ninfo:\n  title: 'Swagger Petstore'\n  description: 'This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.'\n  termsOfService: 'http://swagger.io/terms/'\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: 'Apache 2.0'\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n  version: 1.0.0\nservers:\n  -\n    url: 'https://petstore.swagger.io/v3'\n    description: 'OpenApi host'\n  -\n    url: '{schema}://host.dev'\n    description: 'OpenApi parameters'\n    variables:\n      schema:\n        enum:\n          - https\n          - http\n        default: https\n  -\n    url: 'https://virtserver.swaggerhub.com/swagger/Petstore/1.0.0'\n    description: 'SwaggerHUB API Mocking'\npaths:\n  '/products/{product_id}':\n    get:\n      tags:\n        - Products\n      operationId: 'UsingRefs\\ProductController::getProduct'\n      responses:\n        default:\n          description: 'successful operation'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/product'\n    patch:\n      tags:\n        - Products\n      operationId: 'UsingRefs\\ProductController::updateProduct'\n      parameters:\n        -\n          $ref: '#/components/requestBodies/product_in_body'\n      responses:\n        default:\n          description: 'successful operation'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/product'\n    parameters:\n      -\n        $ref: '#/components/parameters/product_id_in_path_required'\n  /users:\n    post:\n      summary: 'Adds a new user'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                id:\n                  type: string\n                name:\n                  type: string\n              type: object\n              example:\n                id: 10\n                name: 'Jessica Smith'\n      responses:\n        '200':\n          description: OK\n  /api/endpoint:\n    get:\n      responses:\n        '200':\n          description: Success\n  '/2.0/repositories/{username}':\n    get:\n      operationId: getRepositoriesByOwner\n      parameters:\n        -\n          name: username\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'repositories owned by the supplied user'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/repository'\n          links:\n            userRepository:\n              $ref: '#/components/links/UserRepository'\n  '/2.0/repositories/{username}/{slug}':\n    get:\n      operationId: getRepository\n      parameters:\n        -\n          name: username\n          in: path\n          required: true\n          schema:\n            type: string\n        -\n          name: slug\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'The repository'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/repository'\n          links:\n            repositoryPullRequests:\n              $ref: '#/components/links/RepositoryPullRequests'\n  '/2.0/repositories/{username}/{slug}/pullrequests':\n    get:\n      operationId: getPullRequestsByRepository\n      parameters:\n        -\n          name: username\n          in: path\n          required: true\n          schema:\n            type: string\n        -\n          name: slug\n          in: path\n          required: true\n          schema:\n            type: string\n        -\n          name: state\n          in: query\n          schema:\n            type: string\n            enum:\n              - open\n              - merged\n              - declined\n      responses:\n        '200':\n          description: 'an array of pull request objects'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/pullrequest'\n  '/2.0/repositories/{username}/{slug}/pullrequests/{pid}':\n    get:\n      operationId: getPullRequestsById\n      parameters:\n        -\n          name: username\n          in: path\n          required: true\n          schema:\n            type: string\n        -\n          name: slug\n          in: path\n          required: true\n          schema:\n            type: string\n        -\n          name: pid\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'a pull request object'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/pullrequest'\n          links:\n            pullRequestMerge:\n              $ref: '#/components/links/PullRequestMerge'\n  '/2.0/repositories/{username}/{slug}/pullrequests/{pid}/merge':\n    post:\n      operationId: mergePullRequest\n      parameters:\n        -\n          name: username\n          in: path\n          required: true\n          schema:\n            type: string\n        -\n          name: slug\n          in: path\n          required: true\n          schema:\n            type: string\n        -\n          name: pid\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: 'the PR was successfully merged'\n  '/2.0/users/{username}':\n    get:\n      operationId: getUserByName\n      parameters:\n        -\n          name: username\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'The User'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user'\n          links:\n            userRepositories:\n              $ref: '#/components/links/UserRepositories'\n  /pet:\n    put:\n      tags:\n        - pet\n      summary: 'Update an existing pet'\n      operationId: updatePet\n      requestBody:\n        $ref: '#/components/requestBodies/Pet'\n      responses:\n        '400':\n          description: 'Invalid ID supplied'\n        '404':\n          description: 'Pet not found'\n        '405':\n          description: 'Validation exception'\n      security:\n        -\n          petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n    post:\n      tags:\n        - pet\n      summary: 'Add a new pet to the store'\n      operationId: addPet\n      requestBody:\n        $ref: '#/components/requestBodies/Pet'\n      responses:\n        '405':\n          description: 'Invalid input'\n      security:\n        -\n          petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: 'Finds Pets by status'\n      description: 'Multiple status values can be provided with comma separated string'\n      operationId: findPetsByStatus\n      parameters:\n        -\n          name: status\n          in: query\n          description: 'Status values that needed to be considered for filter'\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - available\n                - pending\n                - sold\n            default: available\n      responses:\n        '200':\n          description: 'successful operation'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        '400':\n          description: 'Invalid status value'\n      deprecated: true\n      security:\n        -\n          petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: 'Finds Pets by tags'\n      description: \"\u003e-\\n    Muliple tags can be provided with comma separated strings. Use\\\\ \\\\ tag1,\\n    tag2, tag3 for testing.\"\n      operationId: findByTags\n      parameters:\n        -\n          name: tags\n          in: query\n          description: 'Tags to filter by'\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: 'successful operation'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        '400':\n          description: 'Invalid status value'\n      security:\n        -\n          petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  '/pet/{petId}':\n    get:\n      tags:\n        - pet\n      summary: 'Find pet by ID'\n      description: 'Returns a single pet'\n      operationId: getPetById\n      parameters:\n        -\n          name: petId\n          in: path\n          description: 'ID of pet to return'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: 'successful operation'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '400':\n          description: 'Invalid ID supplier'\n        '404':\n          description: 'Pet not found'\n      security:\n        -\n          api_key: []\n    post:\n      tags:\n        - pet\n      summary: 'Updates a pet in the store with form data'\n      operationId: updatePetWithForm\n      parameters:\n        -\n          name: petId\n          in: path\n          description: 'ID of pet that needs to be updated'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        description: 'Input data format'\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                name:\n                  description: 'Updated name of the pet'\n                  type: string\n                status:\n                  description: 'Updated status of the pet'\n                  type: string\n              type: object\n      responses:\n        '405':\n          description: 'Invalid input'\n      security:\n        -\n          petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n    delete:\n      tags:\n        - pet\n      summary: 'Deletes a pet'\n      operationId: deletePet\n      parameters:\n        -\n          name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        -\n          name: petId\n          in: path\n          description: 'Pet id to delete'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '400':\n          description: 'Invalid ID supplied'\n        '404':\n          description: 'Pet not found'\n      security:\n        -\n          petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  '/pet/{petId}/uploadImage':\n    post:\n      tags:\n        - pet\n      summary: 'uploads an image'\n      operationId: uploadFile\n      parameters:\n        -\n          name: petId\n          in: path\n          description: 'ID of pet to update'\n          required: true\n          schema:\n            type: integer\n            format: int64\n            example: 1\n      requestBody:\n        description: 'Upload images request body'\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n      responses:\n        '200':\n          description: 'successful operation'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n      security:\n        -\n          petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  /store:\n    get:\n      tags:\n        - store\n      summary: 'Returns pet inventories by status'\n      description: 'Returns a map of status codes to quantities'\n      operationId: getInventory\n      responses:\n        '200':\n          description: 'successful operation'\n          content:\n            application/json:\n              schema: {  }\n      security:\n        -\n          api_key: []\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: 'Place an order for a pet'\n      operationId: placeOrder\n      requestBody:\n        description: 'order placed for purchasing th pet'\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Order'\n      responses:\n        '200':\n          description: 'successful operation'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n  '/store/order/{orderId}':\n    get:\n      tags:\n        - store\n      description: \"\u003e-\\n    For valid response try integer IDs with value \u003e= 1 and \u003c= 10.\\\\ \\\\ Other\\n    values will generated exceptions\"\n      operationId: getOrderById\n      parameters:\n        -\n          name: orderId\n          in: path\n          description: 'ID of pet that needs to be fetched'\n          required: true\n          schema:\n            type: integer\n            format: int64\n            maximum: 1\n            minimum: 10\n      responses:\n        '200':\n          description: 'successful operation'\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        '400':\n          description: 'Invalid ID supplied'\n        '404':\n          description: 'Order not found'\n    delete:\n      tags:\n        - store\n      summary: 'Delete purchase order by ID'\n      description: \"\u003e-\\n    For valid response try integer IDs with positive integer value.\\\\ \\\\\\n    Negative or non-integer values will generate API errors\"\n      operationId: deleteOrder\n      parameters:\n        -\n          name: orderId\n          in: path\n          description: 'ID of the order that needs to be deleted'\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      responses:\n        '400':\n          description: 'Invalid ID supplied'\n        '404':\n          description: 'Order not found'\n  /user:\n    post:\n      tags:\n        - user\n      summary: 'Create user'\n      description: 'This can only be done by the logged in user.'\n      operationId: createUser\n      requestBody:\n        description: 'Create user object'\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        default:\n          description: 'successful operation'\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: 'Create list of users with given input array'\n      operationId: createUsersWithListInput\n      requestBody:\n        $ref: '#/components/requestBodies/UserArray'\n      responses:\n        default:\n          description: 'successful operation'\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: 'Logs user into system'\n      operationId: loginUser\n      parameters:\n        -\n          name: username\n          in: query\n          description: 'The user name for login'\n          required: true\n          schema:\n            type: string\n        -\n          name: password\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'successful operation'\n          headers:\n            X-Rate-Limit:\n              description: 'calls per hour allowed by the user'\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: 'date in UTC when token expires'\n              schema:\n                type: string\n                format: datetime\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        '400':\n          description: 'Invalid username/password supplied'\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: 'Logs out current logged in user session'\n      operationId: logoutUser\n      responses:\n        default:\n          description: 'successful operation'\n  '/user/{username}':\n    get:\n      summary: 'Get user by user name'\n      operationId: getUserByName\n      parameters:\n        -\n          name: username\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'successful operation'\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: 'Invalid username supplied'\n        '404':\n          description: 'User not found'\n    put:\n      summary: 'Updated user'\n      description: 'This can pnly be done by the logged in user.'\n      operationId: updateUser\n      parameters:\n        -\n          name: username\n          in: path\n          description: 'name that to be updated'\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: 'Updated user object'\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '400':\n          description: 'Invalid user supplied'\n        '404':\n          description: 'User not found'\n    delete:\n      summary: 'Delete user'\n      description: 'This can only be done by the logged in user.'\n      operationId: deleteUser\n      parameters:\n        -\n          name: username\n          in: path\n          description: 'The name that needs to be deleted'\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: 'Invalid username supplied'\n        '404':\n          description: 'User not found'\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: 'Returns pet inventories by status'\n      description: 'Returns a map of status codes to quantities'\n      operationId: getInventory\n      parameters: []\n      responses:\n        '200':\n          description: 'successful operation'\n      security:\n        -\n          api_key: []\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: 'Creates list of users with given input array'\n      description: ''\n      operationId: createUsersWithListInput\n      requestBody:\n        description: 'List of user object'\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/User'\n      responses:\n        default:\n          description: 'successful operation'\n  /pets:\n    get:\n      description: 'Returns all pets from the system that the user has access to'\n      operationId: findPets\n      parameters:\n        -\n          name: tags\n          in: query\n          description: 'tags to filter by'\n          required: false\n          style: form\n          schema:\n            type: array\n            items:\n              type: string\n        -\n          name: limit\n          in: query\n          description: 'maximum number of results to return'\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: 'pet response'\n          content:\n            text/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            text/html:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        default:\n          description: 'unexpected error'\n          content:\n            text/xml:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n            text/html:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n    post:\n      description: 'Creates a new pet in the store.  Duplicates are allowed'\n      operationId: addPet\n      requestBody:\n        description: 'Pet to add to the store'\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/NewPet'\n      responses:\n        '200':\n          description: 'pet response'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        default:\n          description: 'unexpected error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n  '/pets/{id}':\n    get:\n      description: 'Returns a user based on a single ID, if the user does not have access to the pet'\n      operationId: findPetById\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'ID of pet to fetch'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: 'pet response'\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            text/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            text/html:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        default:\n          description: 'unexpected error'\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n            text/xml:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n            text/html:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n    delete:\n      description: 'deletes a single pet based on the ID supplied'\n      operationId: deletePet\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'ID of pet to delete'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '204':\n          description: 'pet deleted'\n        default:\n          description: 'unexpected error'\n  '/pets/{petId}':\n    get:\n      tags:\n        - pets\n      summary: 'Info for a specific pet'\n      operationId: showPetById\n      parameters:\n        -\n          name: petId\n          in: path\n          description: 'The id of the pet to retrieve'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'Expected response to a valid request'\n        default:\n          description: 'unexpected error'\n  /products:\n    post:\n      tags:\n        - Products\n      operationId: 'UsingRefs\\ProductController::addProduct'\n      parameters:\n        -\n          $ref: '#/components/requestBodies/product_in_body'\n      responses:\n        default:\n          description: 'successful operation'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/product'\n  /api/path:\n    post:\n      summary: 'Post to URL'\n      operationId: 'OpenApiFixtures\\DynamicReference::postSomething'\n      responses:\n        '200':\n          description: 'Example extended response'\n          content:\n            application/json:\n              schema:\n                properties:\n                  data: { $ref: '#/components/schemas/Product' }\n                  test: { $ref: $/components/schemas/TestProperty }\n                type: object\n                $ref: $/components/schemas/Product\n          $ref: $/components/responses/Json\n      security:\n        -\n          Bearer: []\n  api/3rd-party:\n    get:\n      operationId: 'OpenApiFixtures\\ThirdPartyAnnotations::methodWithOpenApiAnnotation'\n      responses:\n        '200':\n          description: 'a response'\n  api/test1:\n    get:\n      summary: 'Example summary'\n      description: \"Example description...\\nMore description...\"\n      operationId: 'OpenApiFixtures\\UsingPhpDoc::methodWithDescription'\n      responses:\n        '200':\n          description: 'a response'\n  api/test2:\n    get:\n      summary: 'Example summary'\n      operationId: 'OpenApiFixtures\\UsingPhpDoc::methodWithSummary'\n      responses:\n        '200':\n          description: 'a response'\n  '/pi/{item_name}':\n    get:\n      summary: 'Get protected item'\n      operationId: 'OpenApiFixtures\\UsingRefs::getProtectedItem'\n      parameters:\n        -\n          $ref: '#/components/parameters/ItemName'\n      responses:\n        default:\n          $ref: '#/components/responses/Item'\n  '/users/{id}':\n    put:\n      tags:\n        - users\n      summary: 'Update user entry'\n      operationId: updateUser\n      parameters:\n        -\n          name: id\n          in: path\n          description: UUID\n          required: true\n        -\n          name: user\n          in: cookie\n          required: true\n          schema:\n            $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: success\n        default:\n          description: error\n    delete:\n      tags:\n        - users\n      summary: 'Remove user entry'\n      operationId: deleteUser\n      parameters:\n        -\n          name: id\n          in: path\n          description: UUID\n          required: true\n      responses:\n        '200':\n          description: success\n        default:\n          description: error\n    options:\n      responses:\n        '200':\n          description: 'Some CORS stuff'\n    head:\n      responses:\n        '200':\n          description: 'Only checking if it exists'\ncomponents:\n  schemas:\n    pullrequest:\n      properties:\n        id:\n          type: integer\n        title:\n          type: string\n        repository:\n          $ref: '#/components/schemas/repository'\n        author:\n          $ref: '#/components/schemas/user'\n      type: object\n    repository:\n      properties:\n        slug:\n          type: string\n        owner:\n          $ref: '#/components/schemas/user'\n      type: object\n    user:\n      properties:\n        username:\n          type: string\n        uuid:\n          type: string\n      type: object\n    ApiResponse:\n      title: 'Api response'\n      description: 'Api response'\n      properties:\n        code:\n          title: Code\n          description: Code\n          type: integer\n          format: int32\n        message:\n          title: Message\n          description: Message\n          type: string\n      type: object\n    Category:\n      title: 'Pets Category'\n      description: 'Pets Category'\n      properties:\n        id:\n          title: ID\n          description: ID\n          type: integer\n          format: int64\n        name:\n          title: 'Category name'\n          description: 'Category name'\n          type: string\n      type: object\n      xml:\n        name: Category\n    Order:\n      title: 'Order model'\n      description: 'Order model'\n      properties:\n        id:\n          title: ID\n          description: ID\n          type: integer\n          format: int64\n          default: 1\n        petId:\n          title: 'Pet ID'\n          description: 'Pet ID'\n          type: integer\n          format: int64\n          default: 1\n        quantity:\n          title: Quantity\n          description: Quantity\n          type: integer\n          format: in32\n          default: 12\n        shipDate:\n          title: 'Pet ID'\n          description: 'Shipping date'\n          type: string\n          format: datetime\n          default: '2017-02-02 18:31:45'\n        status:\n          title: 'Pet ID'\n          description: 'Order status'\n          type: string\n          default: placed\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          title: 'Complete status'\n          description: 'Complete status'\n          type: boolean\n          format: int64\n          default: 'false'\n      type: object\n    Pet:\n      title: 'Pet model'\n      description: 'Pet model'\n      required:\n        - name\n        - photoUrls\n      properties:\n        id:\n          title: ID\n          description: ID\n          type: integer\n          format: int64\n        category:\n          title: Category\n          description: 'Category relation'\n          $ref: '#/components/schemas/Category'\n        name:\n          title: 'Pet name'\n          description: 'Pet name'\n          type: integer\n          format: int64\n        photoUrls:\n          title: 'Photo urls'\n          description: 'Photo urls'\n          type: array\n          items:\n            type: string\n            default: images/image-1.png\n          xml:\n            name: photoUrl\n            wrapped: true\n        tags:\n          title: 'Pet tags'\n          description: 'Pet tags'\n          type: array\n          items:\n            $ref: '#/components/schemas/Tag'\n          xml:\n            name: tag\n            wrapped: true\n      type: object\n      xml:\n        name: Pet\n    Tag:\n      title: Tag\n      description: Tag\n      properties:\n        id:\n          title: ID\n          description: ID\n          type: integer\n          format: int64\n        name:\n          title: Name\n          description: Name\n          type: string\n      type: object\n      xml:\n        name: Tag\n    User:\n      title: 'User model'\n      description: 'User model'\n      properties:\n        id:\n          title: ID\n          description: ID\n          type: integer\n          format: int64\n        username:\n          title: Username\n          description: Username\n          type: string\n        firstName:\n          title: 'First name'\n          description: 'First name'\n          type: string\n        lastName:\n          title: 'Last name'\n          description: 'Last name'\n          type: string\n        email:\n          title: Email\n          description: Email\n          type: string\n          format: email\n        password:\n          title: Password\n          description: Password\n          type: string\n          format: int64\n          maximum: 255\n        phone:\n          title: Phone\n          description: Phone\n          type: string\n          format: msisdn\n        userStatus:\n          title: 'User status'\n          description: 'User status'\n          type: integer\n          format: int32\n      type: object\n    NewPet:\n      required:\n        - name\n      properties:\n        name:\n          type: string\n        tag:\n          type: string\n      type: object\n    ErrorModel:\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n      type: object\n    Error:\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n      type: object\n    Pets:\n      type: array\n      items:\n        $ref: '#/components/schemas/Pet'\n    Product:\n      title: 'Product model'\n      description: 'Product model'\n      properties:\n        id:\n          description: 'The unique identifier of a product in our catalog.'\n          type: integer\n          format: int64\n          example: 1\n        status:\n          $ref: '#/components/schemas/product_status'\n      type: object\n    product_status:\n      description: 'The status of a product'\n      type: string\n      default: available\n      enum:\n        - available\n        - discontinued\n    Customer:\n      properties:\n        firstname:\n          description: 'The first name of the customer.'\n          type: string\n          example: John\n        secondname:\n          description: 'The second name of the customer.'\n          type: string\n          example: Allan\n        thirdname:\n          description: 'The third name of the customer.'\n          type: string\n          example: Peter\n        fourthname:\n          description: 'The unknown name of the customer.'\n          example: Unknown\n        lastname:\n          description: 'The lastname of the customer.'\n          type: string\n        tags:\n          type: array\n          items:\n            type: string\n        submittedBy:\n          $ref: '#/components/schemas/Customer'\n        friends:\n          type: array\n          items:\n            $ref: '#/components/schemas/Customer'\n      type: object\n    TestProperty:\n      description: 'The status of a product'\n      type: string\n      default: available\n      enum:\n        - available\n        - discontinued\n    trait:\n      properties:\n        greet: {  }\n      type: object\n    Base:\n      properties:\n        baseProperty:\n          type: string\n      type: object\n    Child:\n      properties:\n        isBaby:\n          type: boolean\n        firstname:\n          type: string\n        lastname:\n          type: string\n      type: object\n    ChildWithDocBlocks:\n      properties:\n        isBaby:\n          type: boolean\n        firstname:\n          type: string\n        lastname:\n          type: string\n      type: object\n    ExtendedModel:\n      allOf:\n        -\n          $ref: '#/components/schemas/Base'\n        -\n          properties:\n            extendedProperty:\n              type: string\n    ExtendedWithTwoSchemas:\n      allOf:\n        -\n          $ref: '#/components/schemas/Base'\n        -\n          properties:\n            nested:\n              $ref: '#/components/schemas/NestedSchema'\n            extendedProperty:\n              type: string\n          type: object\n    NestedSchema:\n      properties:\n        nestedProperty:\n          type: string\n      type: object\n    ExtendedWithoutAllOf:\n      allOf:\n        -\n          $ref: '#/components/schemas/Base'\n        -\n          properties:\n            extendedProperty:\n              type: string\n          type: object\n    NestedProperty:\n      properties:\n        parentProperty:\n          properties:\n            babyProperty:\n              properties:\n                theBabyOfBaby:\n                  properties: { theBabyOfBabyBaby: { type: string } }\n                  type: object\n              type: object\n          type: object\n      type: object\n    UsingVar:\n      required:\n        - name\n      properties:\n        name:\n          type: string\n        createdAt:\n          $ref: '#/components/schemas/date'\n      type: object\n    date:\n      type: datetime\n  responses:\n    product:\n      description: 'All information about a product'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Product'\n    todo:\n      description: 'This API call has no documentated response (yet)'\n    Json:\n      description: 'the basic response'\n      content:\n        application/json:\n          schema:\n            properties:\n              success:\n                type: boolean\n              data: {  }\n              errors:\n                type: object\n              token:\n                type: string\n            type: object\n    Item:\n      description: 'A protected item'\n  parameters:\n    product_id_in_path_required:\n      name: product_id\n      in: path\n      description: 'The ID of the product'\n      required: true\n      schema:\n        type: integer\n        format: int64\n    ItemName:\n      name: ItemName\n      in: path\n      description: 'protected item name'\n      required: true\n  requestBodies:\n    Pet:\n      description: 'Pet object that needs to be added to the store'\n      required: true\n      content:\n        application/xml:\n          schema:\n            $ref: '#/components/schemas/Pet'\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Pet'\n    UserArray:\n      description: 'List of user object'\n      required: true\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/User'\n    product_in_body:\n      description: product_request\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Product'\n  securitySchemes:\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'\n          scopes:\n            'write:pets': 'modify pets in your account'\n            'read:pets': 'read your pets'\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n  links:\n    UserRepositories:\n      operationId: getRepositoriesByOwner\n      parameters:\n        username: '$response.body#/username'\n    UserRepository:\n      operationId: getRepository\n      parameters:\n        username: '$response.body#/owner/username'\n        slug: '$response.body#/slug'\n    RepositoryPullRequests:\n      operationId: getPullRequestsByRepository\n      parameters:\n        username: '$response.body#/owner/username'\n        slug: '$response.body#/slug'\n    PullRequestMerge:\n      operationId: mergePullRequest\n      parameters:\n        username: '$response.body#/author/username'\n        slug: '$response.body#/repository/slug'\n        pid: '$response.body#/id'\ntags:\n  -\n    name: pet\n    description: 'Everything about your Pets'\n    externalDocs:\n      description: 'Find out more'\n      url: 'http://swagger.io'\n  -\n    name: store\n    description: 'Access to Petstore orders'\n  -\n    name: user\n    description: 'Operations about user'\n    externalDocs:\n      description: 'Find out more about store'\n      url: 'http://swagger.io'\n  -\n    name: pet\n    description: 'Everything about your Pets'\n    externalDocs:\n      description: 'Find out more'\n      url: 'http://swagger.io'\n  -\n    name: store\n    description: 'Access to Petstore orders'\n  -\n    name: user\n    description: 'Operations about user'\n    externalDocs:\n      description: 'Find out more about our store'\n      url: 'http://swagger.io'\nexternalDocs:\n  description: 'Find out more about Swagger'\n  url: 'http://swagger.io'\n"
		}
	},
	"Error": "parse: parse spec: parse components: parameters: \"ItemName\": parameter MUST contain either a schema property, or a content property"
}