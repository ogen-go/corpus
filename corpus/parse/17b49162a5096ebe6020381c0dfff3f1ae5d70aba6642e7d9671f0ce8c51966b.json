{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/hpi-schul-cloud/schulcloud-server"
		},
		"file": {
			"name": "adminusers.openapi.yaml",
			"size": 0,
			"path": "src/services/user/docs/adminusers.openapi.yaml",
			"byteSize": 13173,
			"content": "security:\n  - jwtBearer: []\ninfo:\n  title: Schul-Cloud User Service API\n  description:\n    This is the API specification for the Schul-Cloud User service.\n    \n  contact:\n    name: support\n    email: info@dbildungscloud.de\n  license:\n    name: GPL-3.0\n    url: 'https://github.com/hpi-schul-cloud/schulcloud-server/blob/master/LICENSE'\n  version: 1.0.0\nservers:\n  - url: /users/admin/\ncomponents:\n  securitySchemes:\n    jwtBearer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    user_admin_base:\n      description: Data Transfer Object containing userdata\n      type: object\n      properties:\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n          format: 'email'\n        birthday:\n          type: string\n          nullable: true\n        roles:\n          type: array\n          items:\n            type: string\n        schoolId:\n          type: string\n          pattern: '^[0-9a-f]{24}$'\n        sendRegistration:\n          type: boolean\n        generateRegistrationLink:\n          type: boolean\n    user_admin:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/user_admin_base'\n        - required:\n          - firstName\n          - lastName\n          - email\n    user_admin_list:\n      description: TODO\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/user_admin'\n        total:\n          type: integer\n        limit:\n          type: integer\n        skip:\n          type: integer\npaths:\n  /students:\n    get:\n      parameters:\n        - description: Number of results to return\n          in: query\n          name: $limit\n          schema:\n            type: integer\n        - description: Number of results to skip\n          in: query\n          name: $skip\n          schema:\n            type: integer\n        - description: Property to sort results\n          in: query\n          name: $sort\n          schema:\n            type: object\n        - description: Regex to search for in firstName, lastName, and emails.\n          in: query\n          name: searchQuery\n          allowEmptyValue: true\n          schema:\n            type: string\n        - description: Query parameters to filter\n          in: query\n          name: firstName\n          schema:\n            type: string\n        - description: Query parameters to filter\n          in: query\n          name: lastName\n          schema:\n            type: string\n        - description: Query parameters to filter\n          in: query\n          name: createdAt\n          schema:\n            anyOf:\n              - type: string\n              - type: object\n        - description: Query parameters to filter\n          in: query\n          name: consentStatus\n          schema:\n            anyOf:\n              - type: string\n              - type: object\n              - type: array\n        - description: Array of user ids to filter\n          in: query\n          name: users\n          schema:\n            anyOf:\n              - type: string\n              - type: array\n              - type: object\n        - description: Array of classes to filter\n          in: query\n          name: classes\n          schema:\n            anyOf:\n              - type: string\n              - type: array\n              - type: object\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user_admin_list'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Retrieves a list of all resources from the service.\n      summary: ''\n      tags:\n        - users\n      security: []\n    post:\n      parameters: []\n      responses:\n        '201':\n          description: created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user_admin'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Creates a new resource with data.\n      summary: ''\n      tags:\n        - users\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/user_admin'\n  '/students/{id}':\n    get:\n      parameters:\n        - in: path\n          name: id\n          description: ID of admin to return\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user_admin'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Retrieves a single resource with the given id from the service.\n      summary: ''\n      tags:\n        - users\n      security: []\n    put:\n      parameters:\n        - in: path\n          name: id\n          description: ID of admin to update\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user_admin'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - users\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/user_admin'\n    patch:\n      parameters:\n        - in: path\n          name: id\n          description: ID of admin to update\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user_admin'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - users\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/user_admin_base'\n    delete:\n      parameters:\n        - in: path\n          name: id\n          description: ID of admin to remove\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user_admin'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Removes the resource with id.\n      summary: ''\n      tags:\n        - users\n      security: []\n  /teachers:\n    get:\n      parameters:\n        - description: Number of results to return\n          in: query\n          name: $limit\n          schema:\n            type: integer\n        - description: Number of results to skip\n          in: query\n          name: $skip\n          schema:\n            type: integer\n        - description: Property to sort results\n          in: query\n          name: $sort\n          schema:\n            type: object\n        - description: Regex to search for in firstName, lastName, and emails.\n          in: query\n          name: searchQuery\n          allowEmptyValue: true\n          schema:\n            type: string\n        - description: Query parameters to filter\n          in: query\n          name: firstName\n          schema:\n            type: string\n        - description: Query parameters to filter\n          in: query\n          name: lastName\n          schema:\n            type: string\n        - description: Query parameters to filter\n          in: query\n          name: createdAt\n          schema:\n            anyOf:\n              - type: string\n              - type: object\n        - description: Query parameters to filter\n          in: query\n          name: consentStatus\n          schema:\n            anyOf:\n              - type: string\n              - type: object\n        - description: Array of user ids to filter\n          in: query\n          name: users\n          schema:\n            anyOf:\n              - type: string\n              - type: array\n              - type: object\n        - description: Array of classes to filter\n          in: query\n          name: classes\n          schema:\n            anyOf:\n              - type: string\n              - type: array\n              - type: object\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user_admin_list'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Retrieves a list of all resources from the service.\n      summary: ''\n      tags:\n        - users\n      security: []\n    post:\n      parameters: []\n      responses:\n        '201':\n          description: created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user_admin'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Creates a new resource with data.\n      summary: ''\n      tags:\n        - users\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/user_admin'\n  '/teachers/{id}':\n    get:\n      parameters:\n        - in: path\n          name: id\n          description: ID of admin to return\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user_admin'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Retrieves a single resource with the given id from the service.\n      summary: ''\n      tags:\n        - users\n      security: []\n    put:\n      parameters:\n        - in: path\n          name: id\n          description: ID of admin to update\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user_admin'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - users\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/user_admin'\n    patch:\n      parameters:\n        - in: path\n          name: id\n          description: ID of admin to update\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user_admin'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - users\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/user_admin_base'\n    delete:\n      parameters:\n        - in: path\n          name: id\n          description: ID of admin to remove\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user_admin'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Removes the resource with id.\n      summary: ''\n      tags:\n        - users\n      security: []\nopenapi: 3.0.2"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /teachers: get: parameters: parse parameter \"createdAt\": invalid schema:style:explode combination"
}