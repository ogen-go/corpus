{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/InventivetalentDev/api.capes.dev"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi.yml",
			"byteSize": 9634,
			"content": "openapi: 3.0.0\ninfo:\n  title: Capes.dev API\n  description: Minecraft Capes API, History & CDN\n  version: 1.0.0\n  license:\n    name: MIT\n    url: \"https://github.com/InventivetalentDev/api.capes.dev/blob/master/LICENSE\"\n  contact:\n    name: inventivetalent\n    url: \"https://inventivetalent.dev\"\n\nservers:\n  - url: https://api.capes.dev/\n\ncomponents:\n  schemas:\n    Cape:\n      type: object\n      properties:\n        exists:\n          type: boolean\n          description: Whether the requested player owns a cape of this type\n        msg:\n          type: string\n          description: Status message\n          example: \"Cape found\"\n        hash:\n          type: string\n          description: Unique hash of the cape\n        player:\n          type: string\n          description: Stripped UUID of the owning player\n          example: \"bcd2033c63ec4bf88aca680b22461340\"\n        playerName:\n          type: string\n          description: Owning player's name\n          example: \"inventivetalent\"\n        type:\n          type: string\n          description: Type of the cape\n          example: \"optifine\"\n        time:\n          type: number\n          description: Timestamp when this cape was last loaded\n        width:\n          type: number\n          description: Width of the cape\n        fullWidth:\n          type: number\n          description: Width of the source cape image\n        height:\n          type: number\n          description: Height of the cape (this is the height of a single frame for animated capes)\n        fullHeight:\n          type: number\n          description: Height of the source cape image\n        extension:\n          type: string\n          description: Cape image's file extension (usually PNG)\n          example: png\n        imageHash:\n          type: string\n          description: Hash of the source cape image\n        capeUrl:\n          type: string\n          description: Direct link to get information about this cape, see [/get/{hash}](#/cape/getCapeByHash)\n        imageUrl:\n          type: string\n          description: Direct link to the cached cape source image, see [/img/{imageHash}](#/image/getImageByHash)\n        imageUrls:\n          $ref: '#/components/schemas/ImageUrls'\n    ImageUrls:\n      type: object\n      description: Set of available cape image variants\n      properties:\n        base:\n          type: object\n          description: Base image links, defaults to animated version if applicable - always present if the cape exists\n          allOf:\n            - $ref: '#/components/schemas/ImageVariantUrls'\n        still:\n          type: object\n          description: Forced static versions of possibly animated capes - always present if the cape exists\n          allOf:\n            - $ref: '#/components/schemas/ImageVariantUrls'\n        animated:\n          type: object\n          description: Forced animated versions capes - only has properties if the cape is animated\n          allOf:\n            - $ref: '#/components/schemas/ImageVariantUrls'\n    ImageVariantUrls:\n      type: object\n      description: Direct links to image variants\n      properties:\n        full:\n          type: string\n          description: Link to the cape's full texture (first frame if animated), see [/img/{imageHash}](#/image/getImageByHash)\n        front:\n          type: string\n          description: Link to the cape's front texture,  see [/img/{transform}/{imageHash}](#/image/getImageTransformByHash)\n\n  parameters:\n    userAgent:\n      name: User-Agent\n      description: Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples\n      example: \"ExampleApp/v1.0\"\n      in: header\n      required: true\n\npaths:\n  /types:\n    get:\n      tags:\n        - info\n      parameters:\n        - $ref: '#/components/parameters/userAgent'\n      summary: Get a list of supported cape types\n      responses:\n        200:\n          description: JSON Array of supported cape types\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /stats:\n    get:\n      tags:\n        - info\n      parameters:\n        - $ref: '#/components/parameters/userAgent'\n      summary: Get API stats\n      responses:\n        200:\n          description: Stats\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: number\n                    description: Total stored cape count\n                  players:\n                    type: number\n                    description: Number of unique players\n                  types:\n                    type: object\n                    description: Map of counts per type\n                    additionalProperties:\n                      type: number\n  /load/{player}/{type}:\n    get:\n      tags:\n        - player\n      summary: Load a player's cape of the specified type\n      operationId: loadPlayerType\n      parameters:\n        - in: path\n          name: player\n          description: Player UUID or Name (UUID recommended)\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: type\n          description: Type to load\n          required: true\n          schema:\n            type: string\n        - $ref: '#/components/parameters/userAgent'\n      responses:\n        200:\n          description: JSON Object containing the cape info\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Cape'\n  /load/{player}:\n    get:\n      tags:\n        - player\n      summary: Load all available cape types for a player\n      operationId: loadPlayer\n      parameters:\n        - in: path\n          name: player\n          description: Player UUID or Name (UUID recommended)\n          required: true\n          schema:\n            type: string\n        - $ref: '#/components/parameters/userAgent'\n      responses:\n        200:\n          description: JSON Object mapping type -> cape info\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  $ref: '#/components/schemas/Cape'\n  /history/{player}/{type}:\n    get:\n      tags:\n        - player\n      summary: Get the cape history of a player\n      operationId: playerHistory\n      parameters:\n        - in: path\n          name: player\n          description: Player UUID or Name (UUID recommended)\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: type\n          description: (optional) Type to check\n          required: true  # Swagger doesn't support optional path params ._.\n          schema:\n            type: string\n        - $ref: '#/components/parameters/userAgent'\n      responses:\n        200:\n          description: History info\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  type:\n                    type: string\n                    description: \"Either 'all' if checking all types, or the requested type\"\n                    example: \"optifine\"\n                  player:\n                    type: string\n                    description: \"Requested player name/uuid\"\n                  history:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Cape'\n  /get/{hash}:\n    get:\n      tags:\n        - cape\n      summary: Get a specific cape's data by its hash\n      operationId: getCapeByHash\n      parameters:\n        - in: path\n          name: hash\n          description: Cape hash\n          required: true\n          schema:\n            type: string\n        - $ref: '#/components/parameters/userAgent'\n      responses:\n        200:\n          description: Cape info\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Cape'\n  /img/{hash}:\n    get:\n      tags:\n        - image\n      summary: Get a cape image by its image hash\n      operationId: getImageByHash\n      parameters:\n        - in: path\n          name: hash\n          description: Image hash\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: still\n          description: Prefer still version\n          schema:\n            type: boolean\n        - in: query\n          name: animated\n          description: Prefer animated version\n          schema:\n            type: boolean\n        - $ref: '#/components/parameters/userAgent'\n      responses:\n        200:\n          description: Cape image\n  /img/{transform}/{hash}:\n    get:\n      tags:\n        - image\n      summary: Get a transformed cape image by its image hash\n      operationId: getImageTransformByHash\n      parameters:\n        - in: path\n          name: transform\n          description: Transform id\n          required: true\n          schema:\n            type: string\n          example: front\n        - in: path\n          name: hash\n          description: Image hash\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: still\n          description: Prefer still version\n          schema:\n            type: boolean\n        - in: query\n          name: animated\n          description: Prefer animated version\n          schema:\n            type: boolean\n        - $ref: '#/components/parameters/userAgent'\n      responses:\n        200:\n          description: Transformed Cape image\n\n\n",
			"canonicalURL": "/github.com/InventivetalentDev/api.capes.dev@77484540caba5ad1899203574593d35e583371e5/-/blob/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/InventivetalentDev/api.capes.dev/blob/77484540caba5ad1899203574593d35e583371e5/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: at 1:15: parameters: \"userAgent\": at 1:42: parameter MUST contain either a schema property, or a content property"
}