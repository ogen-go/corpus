{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/eclipse-tractusx/sldt-semantic-hub"
		},
		"file": {
			"name": "semantic-hub-openapi.yaml",
			"size": 0,
			"path": "backend/src/main/resources/static/semantic-hub-openapi.yaml",
			"byteSize": 16055,
			"content": "openapi: 3.0.3\ninfo:\n  title: Semantic Hub\n  version: v1\n\nsecurity:\n  - OpenIdProfile:\n      - profile\n\nservers:\n  - url: ./api/{api-version}\n    variables:\n      api-version:\n        default: v1\npaths:\n  /models:\n    get:\n      tags:\n        - SemanticHub\n      operationId: getModelList\n      parameters:\n        - in: query\n          name: namespaceFilter\n          schema:\n            default: \"\"\n            type: string\n            description: substring to search in the model`s namespace\n        - in: query\n          name: status\n          schema:\n            $ref: '#/components/schemas/SemanticModelStatus'\n        - in: query\n          name: pageSize\n          required: true\n          schema:\n            default: 10\n            type: integer\n            enum:\n              - 10\n              - 50\n              - 100\n            description: Size of the pages that the results should be partitioned in\n        - in: query\n          name: page\n          required: true\n          schema:\n            default: 0\n            type: integer\n            description: The page to return\n      responses:\n        '200':\n          $ref: '#/components/responses/SemanticModelList'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - SemanticHub\n      operationId: createModelWithUrn\n      parameters:\n      - in: query\n        name: status\n        schema:\n          $ref: '#/components/schemas/SemanticModelStatus'\n      - in: query\n        name: type\n        required: true\n        schema:\n          $ref: '#/components/schemas/SemanticModelType'\n      requestBody:\n        description: \u003e-\n          The request body contains all necessary properties to create a new\n          model entry.\n        required: true\n        content:\n          text/plain:\n            schema:\n              type: string\n      responses:\n        '201':\n          $ref: '#/components/responses/SemanticModel'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      tags:\n        - SemanticHub\n      operationId: modifyModel\n      parameters:\n        - in: query\n          name: status\n          schema:\n            $ref: '#/components/schemas/SemanticModelStatus'\n        - in: query\n          name: type\n          required: true\n          schema:\n            $ref: '#/components/schemas/SemanticModelType'\n      requestBody:\n        description: \u003e-\n          The request body contains the updated model.\n        required: true\n        content:\n          text/plain:\n            schema:\n              type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/SemanticModel'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /models/lookup:\n    post:\n      tags:\n        - SemanticHub\n      operationId: getModelListByUrns\n      description: This endpoint allows to filter for a specific set of URNs. The endpoint returns the metadata, such as the model status. For URNs that are not in the database there is no entry in the result set. Therefore, a search array with 10 URNs can result in a response containing 9 or less result entries.\n      parameters:\n        - in: query\n          name: pageSize\n          required: true\n          schema:\n            default: 10\n            type: integer\n            enum:\n              - 10\n              - 50\n              - 100\n            description: Size of the pages that the results should be partitioned in\n        - in: query\n          name: page\n          required: true\n          schema:\n            default: 0\n            type: integer\n            description: The page to return\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              maxItems: 10000\n              items:\n                type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/SemanticModelList'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  '/models/{urn}':\n    get:\n      tags:\n        - SemanticHub\n      operationId: getModelByUrn\n      parameters:\n        - in: path\n          name: urn\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/SemanticModel'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - SemanticHub\n      operationId: deleteModel\n      parameters:\n        - in: path\n          name: urn\n          schema:\n            type: string\n          required: true\n      responses:\n        '204':\n          description: The resource was deleted successfully.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  '/models/{urn}/file':\n    get:\n      tags:\n        - SemanticHub\n      operationId: getModelFile\n      parameters:\n        - in: path\n          name: urn\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/SemanticModelFile'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  '/models/{urn}/diagram':\n    get:\n      tags:\n        - SemanticHub\n      operationId: getModelDiagram\n      parameters:\n        - in: path\n          name: urn\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/SemanticModelDiagram'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  '/models/{urn}/documentation':\n    get:\n      tags:\n        - SemanticHub\n      operationId: getModelDocu\n      parameters:\n        - in: path\n          name: urn\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/SemanticModelDocumentation'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  '/models/{urn}/json-schema':\n    get:\n      tags:\n        - SemanticHub\n      operationId: getModelJsonSchema\n      parameters:\n        - in: path\n          name: urn\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/SemanticModelJsonSchema'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  '/models/{urn}/openapi':\n    get:\n      tags:\n        - SemanticHub\n      operationId: getModelOpenApi\n      parameters:\n        - in: path\n          name: urn\n          schema:\n            type: string\n          required: true\n        - in: query\n          name: baseUrl\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/ModelOpenApiJson'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  '/models/{urn}/example-payload':\n    get:\n      tags:\n        - SemanticHub\n      operationId: getModelExamplePayloadJson\n      parameters:\n        - in: path\n          name: urn\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/ModelExamplePayloadJson'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  '/models/{urn}/aas':\n    get:\n      tags:\n        - SemanticHub\n      operationId: getAasSubmodelTemplate\n      parameters:\n        - in: path\n          name: urn\n          schema:\n            type: string\n          required: true\n        - in: query\n          name: aasFormat\n          schema:\n            $ref: '#/components/schemas/AasFormat'\n          required: false\n      responses:\n        '200':\n          $ref: '#/components/responses/AasxSubmodelTemplate'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\ncomponents:\n  schemas:\n    ErrorResponse:\n      type: object\n      required:\n        - error\n      properties:\n        error:\n          $ref: '#/components/schemas/Error'\n    Error:\n      type: object\n      required:\n        - details\n      properties:\n        message:\n          type: string\n          example: size must be between {min} and {max}\n          description: The detailed error message for the exception which occurred.\n          minLength: 1\n        path:\n          type: string\n          description: The requested path.\n          minLength: 1\n        details:\n          type: object\n          additionalProperties:\n            type: object\n          description: An object with key/value pairs containing additional information about the error.\n    SemanticModelStatus:\n      type: string\n      enum:\n        - DRAFT\n        - RELEASED\n        - DEPRECATED\n    SemanticModelType:\n      type: string\n      enum:\n        - BAMM\n    SemanticModel:\n      type: object\n      properties:\n        urn:\n          description: \u003e-\n            The urn of a model consists of the model namespace and the Aspect\n            name.\n          type: string\n        version:\n          description: \u003e-\n            The version of the model. The version can be extracted from the raw\n            model.\n          type: string\n        name:\n          type: string\n        type:\n          $ref: '#/components/schemas/SemanticModelType'\n        status:\n          $ref: '#/components/schemas/SemanticModelStatus'\n    SemanticModelList:\n      required:\n        - items\n        - totalItems\n        - currentPage\n        - totalPages\n        - itemCount\n      type: object\n      properties:\n        items:\n          title: Items\n          type: array\n          maxItems: 10000\n          items:\n            $ref: '#/components/schemas/SemanticModel'\n        totalItems:\n          title: Totalitems\n          type: integer\n        currentPage:\n          title: Currentpage\n          type: integer\n        totalPages:\n          title: Totalpages\n          type: integer\n        itemCount:\n          title: Itemcount\n          type: integer\n    NewSemanticModel:\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/SemanticModelType'\n        status:\n          $ref: '#/components/schemas/SemanticModelStatus'\n        model:\n          description: \u003e-\n            The actual model definition in the format defined by the type\n            property.\n          type: string\n    AasFormat:\n      type: string\n      default: XML\n      enum:\n        - FILE\n        - XML\n  responses:\n    SemanticModelJsonSchema:\n      description: OK\n      content:\n        'application/schema+json':\n          example: \u003e\n            {\n              \"$schema\": \"http://json-schema.org/draft-04/schema\",\n              \"type\": \"object\",\n              \"components\": {\n                \"schemas\": {\n                  \"urn_bamm_net.catenax_1.0.0_TestCharacteristic\": {\n                    \"type\": \"string\"\n                  }\n                }\n              },\n              \"properties\": {\n                \"testProperty\": {\n                  \"$ref\": \"#/components/schemas/urn_bamm_net.catenax_1.0.0_TestCharacteristic\"\n                }\n              },\n              \"required\": [\n                \"testProperty\"\n              ]\n            }\n    SemanticModelDiagram:\n      description: OK\n      content:\n        image/png:\n          schema:\n            type: string\n            format: binary\n    AasxSubmodelTemplate:\n      description: OK\n      content:\n        application/xml:\n          schema:\n            type: string\n        application/octet-stream:\n          schema:\n            type: string\n            format: binary\n\n\n    SemanticModelDocumentation:\n      description: OK\n      content:\n        text/html:\n          example: |\n            \u003c!DOCTYPE html\u003e\n            \u003chtml\u003e\n            \u003chead\u003e\n            \u003c/head\u003e\n            \u003cbody\u003e\n              Aspect Description\n            \u003c/body\u003e\n            \u003c/html\u003e\n    SemanticModelFile:\n      description: The raw RDF based model definition.\n      content:\n        text/turtle:\n          example: \u003e\n            @prefix : \u003curn:bamm:net.catenax.semantics:1.0.0#\u003e .\n\n            @prefix bamm: \u003curn:bamm:io.openmanufacturing:meta-model:1.0.0#\u003e .\n\n            @prefix bamm-c:\n            \u003curn:bamm:io.openmanufacturing:characteristic:1.0.0#\u003e .\n\n            @prefix xsd: \u003chttp://www.w3.org/2001/XMLSchema#\u003e .\n\n\n            :TestAspect a bamm:Aspect ;\n               bamm:name \"Test\" ;\n               bamm:preferredName \"Test Aspect\"@en ;\n               bamm:description \"This is a Test Aspect.\"@en ;\n               bamm:properties (  ) ;\n               bamm:operations (  ) .\n    ModelOpenApiJson:\n      description: OK\n      content:\n        application/json:\n          example: |\n            {}\n    ModelExamplePayloadJson:\n      description: OK\n      content:\n        application/json:\n          example: |\n            {}\n    SemanticModel:\n      description: The resulting model entry.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/SemanticModel'\n    SemanticModelList:\n      description: 'A list of models, matching the provided filter options.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/SemanticModelList'\n    Unauthorized:\n      description: Unauthorized\n    BadRequest:\n      description: Bad Request\n    NotFound:\n      description: Not Found\n    InternalServerError:\n      description: Internal Server Error\n\n  securitySchemes:\n    OpenIdProfile:\n      type: openIdConnect\n      openIdConnectUrl: ../.well-known/openid-configuration",
			"canonicalURL": "/github.com/eclipse-tractusx/sldt-semantic-hub@809d45dd016873e6ab3f13680c057b710455147b/-/blob/backend/src/main/resources/static/semantic-hub-openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/eclipse-tractusx/sldt-semantic-hub/blob/809d45dd016873e6ab3f13680c057b710455147b/backend/src/main/resources/static/semantic-hub-openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/models\": get: operation \"getModelList\": security: parse security scheme \"OpenIdProfile\": openIdConnect: at backend/src/main/resources/static/semantic-hub-openapi.yaml:592:25: \"openIdConnectUrl\" MUST be in the form of a URL: parse \"../.well-known/openid-configuration\": invalid URI for request"
}