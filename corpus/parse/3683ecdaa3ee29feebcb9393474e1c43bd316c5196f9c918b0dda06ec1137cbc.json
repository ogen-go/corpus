{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/sonallux/spotify-web-api"
		},
		"file": {
			"name": "official-spotify-open-api.yml",
			"size": 0,
			"path": "official-spotify-open-api.yml",
			"byteSize": 249677,
			"content": "openapi: \"3.0.3\"\ninfo:\n  description: |\n      You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.\n\n      In order to make successful Web API requests your app will need a valid access token. One can be obtained through \u003ca href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\"\u003eOAuth 2.0\u003c/a\u003e.\n\n      The base URI for all Web API requests is `https://api.spotify.com/v1`.\n\n      Need help? See our \u003ca href=\"https://developer.spotify.com/documentation/web-api/guides/\"\u003eWeb API guides\u003c/a\u003e for more information, or visit the \u003ca href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\"\u003eSpotify for Developers community forum\u003c/a\u003e to ask questions and connect with other developers.\n  version: \"1.0.0\"\n  title: \"Spotify Web API\"\n  termsOfService: \"https://developer.spotify.com/terms/\"\nservers:\n  - url: https://api.spotify.com/v1\npaths:\n  /albums/{id}:\n    x-spotify-docs-display-name: album\n    x-spotify-docs-category: Albums\n    get:\n      operationId: get-an-album\n      tags:\n        - Albums\n      x-spotify-docs-endpoint-name: Get an Album\n      x-spotify-docs-console-url: /console/get-album/?id=0sNOF9WDwhWunNAHPD3Baj\n      summary: |\n        Get Album\n      description: |\n        Get Spotify catalog information for a single album.\n      parameters:\n        - $ref: '#/components/parameters/PathAlbumId'\n        - $ref: '#/components/parameters/QueryMarket'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OneAlbum\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /albums:\n    x-spotify-docs-display-name: several-albums\n    x-spotify-docs-category: Albums\n    get:\n      operationId: get-multiple-albums\n      tags:\n        - Albums\n      x-spotify-docs-endpoint-name: Get Multiple Albums\n      x-spotify-docs-console-url: /console/get-several-albums/\n      summary: |\n        Get Several Albums\n      description: |\n        Get Spotify catalog information for multiple albums identified by their Spotify IDs.\n      parameters:\n        - $ref: '#/components/parameters/QueryAlbumIds'\n        - $ref: '#/components/parameters/QueryMarket'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ManyAlbums\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /albums/{id}/tracks:\n    x-spotify-docs-display-name: album-tracks\n    x-spotify-docs-category: Albums\n    get:\n      operationId: get-an-albums-tracks\n      tags:\n        - Albums\n        - Tracks\n      x-spotify-docs-endpoint-name: Get an Album's Tracks\n      x-spotify-docs-console-url: /console/get-album-tracks/\n      summary: |\n        Get Album Tracks\n      description: |\n        Get Spotify catalog information about an album’s tracks.\n        Optional parameters can be used to limit the number of tracks returned.\n      parameters:\n        - $ref: '#/components/parameters/PathAlbumId'\n        - $ref: '#/components/parameters/QueryMarket'\n        - $ref: '#/components/parameters/QueryLimit'\n        - $ref: '#/components/parameters/QueryOffset'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/PagingObject\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /artists/{id}:\n    x-spotify-docs-display-name: artist\n    x-spotify-docs-category: Artists\n    get:\n      tags:\n        - Artists\n      operationId: get-an-artist\n      x-spotify-docs-endpoint-name: Get an Artist\n      x-spotify-docs-console-url: /console/get-artist/?id=0OdUWJ0sBjDrqHygGUXeCF\n      summary: |\n        Get Artist\n      description: |\n        Get Spotify catalog information for a single artist identified by their unique Spotify ID.\n      parameters:\n        - $ref: '#/components/parameters/PathArtistId'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OneArtist\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /artists:\n    x-spotify-docs-display-name: several-artists\n    x-spotify-docs-category: Artists\n    get:\n      tags:\n        - Artists\n      operationId: get-multiple-artists\n      x-spotify-docs-endpoint-name: Get Multiple Artists\n      x-spotify-docs-console-url: /console/get-several-artists/?ids=0oSGxfWSnnOXhD2fKuz2Gy,3dBVyJ7JuOMt4GE9607Qin\n      summary: |\n        Get Several Artists\n      description: |\n        Get Spotify catalog information for several artists based on their Spotify IDs.\n      parameters:\n        -\n          name: ids\n          required: true\n          in: query\n          schema:\n            title: Spotify Artist IDs\n            description: |\n              A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids) for the artists. Maximum: 50 IDs.\n            example: 2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ManyArtists\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /artists/{id}/albums:\n    x-spotify-docs-display-name: artist-albums\n    x-spotify-docs-category: Artists\n    get:\n      tags:\n        - Artists\n        - Albums\n      operationId: get-an-artists-albums\n      x-spotify-docs-endpoint-name: Get an Artist's Albums\n      x-spotify-docs-console-url: /console/get-artist-albums/?album_type=single\u0026amp;limit=2\u0026amp;market=ES\u0026amp;id=1vCWHaC5f2uS3yhpwWbIA6\n      summary: |\n        Get Artist's Albums\n      description: |\n        Get Spotify catalog information about an artist's albums.\n      parameters:\n        - $ref: '#/components/parameters/PathArtistId'\n        - $ref: '#/components/parameters/QueryIncludeGroups'\n        - $ref: '#/components/parameters/QueryMarket'\n        - $ref: '#/components/parameters/QueryLimit'\n        - $ref: '#/components/parameters/QueryOffset'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/PagingObject\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /artists/{id}/top-tracks:\n    x-spotify-docs-display-name: artist-top-tracks\n    x-spotify-docs-category: Artists\n    get:\n      tags:\n        - Artists\n        - Tracks\n      operationId: get-an-artists-top-tracks\n      x-spotify-docs-endpoint-name: Get an Artist's Top Tracks\n      x-spotify-docs-console-url: /console/get-artist-top-tracks/?country=SE\u0026amp;id=43ZHCT0cAZBISjO8DG9PnE\n      summary: |\n        Get Artist's Top Tracks\n      description: |\n        Get Spotify catalog information about an artist's top tracks by country.\n      parameters:\n        - $ref: '#/components/parameters/PathArtistId'\n        - $ref: '#/components/parameters/QueryMarket'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ManyTracks\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /artists/{id}/related-artists:\n    x-spotify-docs-display-name: artist-related-artists\n    x-spotify-docs-category: Artists\n    get:\n      tags:\n        - Artists\n      operationId: get-an-artists-related-artists\n      x-spotify-docs-endpoint-name: Get an Artist's Related Artists\n      x-spotify-docs-console-url: /console/get-artist-related-artists/?id=43ZHCT0cAZBISjO8DG9PnE\n      summary: |\n        Get Artist's Related Artists\n      description: |\n        Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community's [listening history](http://news.spotify.com/se/2010/02/03/related-artists/).\n      parameters:\n        - $ref: '#/components/parameters/PathArtistId'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ManyArtists\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /shows/{id}:\n    x-spotify-docs-display-name: show\n    x-spotify-docs-category: Shows\n    get:\n      tags:\n        - Shows\n      operationId: get-a-show\n      x-spotify-docs-endpoint-name: Get a Show\n      x-spotify-docs-console-url: /console/get-show/?id=38bS44xjbVVZ3No3ByF1dJ\n      summary: |\n        Get Show\n      description: |\n        Get Spotify catalog information for a single show identified by its\n        unique Spotify ID.\n      parameters:\n        - $ref: '#/components/parameters/QueryMarket'\n        - $ref: '#/components/parameters/PathShowId'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OneShow\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-read-playback-position\n  /shows:\n    x-spotify-docs-display-name: several-shows\n    x-spotify-docs-category: Shows\n    get:\n      tags:\n        - Shows\n      operationId: get-multiple-shows\n      x-spotify-docs-endpoint-name: Get Multiple Shows\n      x-spotify-docs-console-url: /console/get-several-shows/?ids=5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ\n      summary: |\n        Get Several Shows\n      description: |\n        Get Spotify catalog information for several shows based on their Spotify IDs.\n      parameters:\n        - $ref: '#/components/parameters/QueryMarket'\n        - $ref: '#/components/parameters/QueryShowIds'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ManySimplifiedShows\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /shows/{id}/episodes:\n    x-spotify-docs-display-name: show-episodes\n    x-spotify-docs-category: Shows\n    get:\n      tags:\n        - Shows\n        - Episodes\n      operationId: get-a-shows-episodes\n      x-spotify-docs-endpoint-name: Get a Show's Episodes\n      x-spotify-docs-console-url: /console/get-show-episodes/\n      summary: |\n        Get Show Episodes\n      description: |\n        Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned.\n      parameters:\n        - $ref: '#/components/parameters/PathShowId'\n        - $ref: '#/components/parameters/QueryMarket'\n        - $ref: '#/components/parameters/QueryLimit'\n        - $ref: '#/components/parameters/QueryOffset'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/PagingObject\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-read-playback-position\n  /episodes/{id}:\n    x-spotify-docs-display-name: episode\n    x-spotify-docs-category: Episodes\n    get:\n      tags:\n        - Episodes\n      operationId: get-an-episode\n      x-spotify-docs-endpoint-name: Get an Episode\n      x-spotify-docs-console-url: /console/get-episode/?id=512ojhOuo1ktJprKbVcKyQ\n      summary: |\n        Get Episode\n      description: |\n        Get Spotify catalog information for a single episode identified by its\n        unique Spotify ID.\n      parameters:\n        -\n          name: id\n          required: true\n          in: path\n          schema:\n            title: Get an Episode\n            description: The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids)\n              for the episode.\n            example: 512ojhOuo1ktJprKbVcKyQ\n            type: string\n        - $ref: '#/components/parameters/QueryMarket'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OneEpisode\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-read-playback-position\n  /episodes:\n    x-spotify-docs-display-name: several-episodes\n    x-spotify-docs-category: Episodes\n    get:\n      tags:\n        - Episodes\n      operationId: get-multiple-episodes\n      x-spotify-docs-endpoint-name: Get Multiple Episodes\n      x-spotify-docs-console-url: /console/get-several-episodes/?ids=77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf\n      summary: |\n        Get Several Episodes\n      description: |\n        Get Spotify catalog information for several episodes based on their Spotify IDs.\n      parameters:\n        -\n          name: ids\n          required: true\n          in: query\n          schema:\n            title: Ids\n            description: |\n              A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids) for the episodes. Maximum: 50 IDs.\n            example: 77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf\n            type: string\n        - $ref: '#/components/parameters/QueryMarket'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ManyEpisodes\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-read-playback-position\n  /tracks/{id}:\n    x-spotify-docs-display-name: track\n    x-spotify-docs-category: Tracks\n    get:\n      tags:\n        - Tracks\n      operationId: get-track\n      x-spotify-docs-endpoint-name: Get a Track\n      x-spotify-docs-console-url: /console/get-track/?id=3n3Ppam7vgaVa1iaRUc9Lp\n      summary: |\n        Get Track\n      description: |\n        Get Spotify catalog information for a single track identified by its\n        unique Spotify ID.\n      parameters:\n        -\n          name: id\n          required: true\n          in: path\n          schema:\n            title: Spotify Track ID\n            description: |\n              The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids)\n              for the track.\n            example: 11dFghVXANMlKmJXsNCbNl\n            type: string\n        - $ref: '#/components/parameters/QueryMarket'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OneTrack\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /tracks:\n    x-spotify-docs-display-name: several-tracks\n    x-spotify-docs-category: Tracks\n    get:\n      tags:\n        - Tracks\n      operationId: get-several-tracks\n      x-spotify-docs-endpoint-name: Get Several Tracks\n      x-spotify-docs-console-url: /console/get-several-tracks/?ids=3n3Ppam7vgaVa1iaRUc9Lp,3twNvmDtFQtAd5gMKedhLD\n      summary: |\n        Get Several Tracks\n      description: |\n        Get Spotify catalog information for multiple tracks based on their Spotify IDs.\n      parameters:\n        - $ref: '#/components/parameters/QueryMarket'\n        - $ref: '#/components/parameters/QueryTrackIds'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ManyTracks\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /search:\n    x-spotify-docs-display-name: search-item\n    x-spotify-docs-category: Search\n    get:\n      tags:\n        - Search\n      operationId: search\n      x-spotify-docs-endpoint-name: Search for an Item\n      x-spotify-docs-console-url: /console/get-search-item/?q=tania+bowra\u0026amp;type=artist\n      summary: |\n        Search for Item\n      description: |\n        Get Spotify catalog information about albums, artists, playlists, tracks, shows or episodes\n        that match a keyword string.\n      parameters:\n        -\n          name: q\n          required: true\n          in: query\n          schema:\n            title: Query\n            description: |\n              Your search query.\n\n              You can narrow down your search using field filters. The available filters are `album`, `artist`, `track`, `year`, `upc`, `tag:hipster`, `tag:new`, `isrc`, and `genre`. Each field filter only applies to certain result types.\n\n              The `artist` filter can be used while searching albums, artists or tracks.\u003cbr /\u003e\n              The `album` and `year` filters can be used while searching albums or tracks. You can filter on a single `year` or a range (e.g. 1955-1960).\u003cbr /\u003e\n              The `genre` filter can be use while searching tracks and artists.\u003cbr /\u003e\n              The `isrc` and `track` filters can be used while searching tracks.\u003cbr /\u003e\n              The `upc`, `tag:new` and `tag:hipster` filters can only be used while searching albums. The `tag:new` filter will return albums released in the past two weeks and `tag:hipster` can be used to return only albums with the lowest 10% popularity.\u003cbr /\u003e\n\n              You can also use the `NOT` operator to exclude keywords from your search.\n            example: remaster%20track:Doxy+artist:Miles%20Davis\n            type: string\n        -\n          name: type\n          required: true\n          explode: false\n          in: query\n          schema:\n            title: Item type\n            description: |\n              A comma-separated list of item types to search\n              across. Search results include hits from all the specified item types. For\n              example: `q=name:abacab\u0026type=album,track` returns both albums and tracks\n              with \"abacab\" included in their name.\n            example: track,artist\n            enum:\n              - album\n              - artist\n              - playlist\n              - track\n              - show\n              - episode\n            type: array\n        - $ref: '#/components/parameters/QueryMarket'\n        -\n          name: limit\n          required: false\n          in: query\n          schema:\n            title: Limit\n            description: |\n              The maximum number of results to return in each item type.\n            default: 20\n            example: 10\n            type: integer\n            minimum: 0\n            maximum: 50\n        -\n          name: offset\n          required: false\n          in: query\n          schema:\n            title: Offset\n            description: |\n              The index of the first result to return. Use\n              with limit to get the next page of search results.\n            default: 0\n            minimum: 0\n            maximum: 1000\n            example: 5\n            type: integer\n        -\n          name: include_external\n          required: false\n          in: query\n          schema:\n            title: Include External\n            description: |\n              If `include_external=audio` is specified it signals that the client can play externally hosted audio content, and marks\n              the content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.\n            type: string\n            enum:\n              - audio\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SearchItems\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /me:\n    x-spotify-docs-display-name: current-user\n    x-spotify-docs-category: Users Profile\n    get:\n      tags:\n        - Users\n      operationId: get-current-users-profile\n      x-spotify-docs-endpoint-name: Get Current User's Profile\n      x-spotify-docs-console-url: /console/get-current-user/\n      summary: |\n        Get Current User's Profile\n      description: |\n        Get detailed profile information about the current user (including the\n        current user's username).\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OnePrivateUser\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-read-private\n            - user-read-email\n  /playlists/{playlist_id}:\n    x-spotify-docs-display-name: playlist\n    x-spotify-docs-category: Playlists\n    get:\n      tags:\n        - Playlists\n      operationId: get-playlist\n      x-spotify-docs-endpoint-name: Get a Playlist\n      x-spotify-docs-console-url: /console/get-playlist/?playlist_id=59ZbFPES4DQwEjBpWHzrtC\u0026amp;user_id=spotify\n      summary: |\n        Get Playlist\n      description: |\n        Get a playlist owned by a Spotify user.\n      parameters:\n        - $ref: '#/components/parameters/PathPlaylistId'\n        - $ref: '#/components/parameters/QueryMarket'\n        -\n          name: fields\n          required: false\n          in: query\n          schema:\n            title: Fields\n            description: |\n              Filters for the query: a comma-separated list of the\n              fields to return. If omitted, all fields are returned. For example, to get\n              just the playlist''s description and URI: `fields=description,uri`. A dot\n              separator can be used to specify non-reoccurring fields, while parentheses\n              can be used to specify reoccurring fields within objects. For example, to\n              get just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`.\n              Use multiple parentheses to drill down into nested objects, for example: `fields=tracks.items(track(name,href,album(name,href)))`.\n              Fields can be excluded by prefixing them with an exclamation mark, for example:\n              `fields=tracks.items(track(name,href,album(!name,href)))`\n            example: items(added_by.id,track(name,href,album(name,href)))\n            type: string\n        - $ref: '#/components/parameters/QueryAdditionalTypes'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OnePlaylist\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n    put:\n      tags:\n        - Playlists\n        - Library\n      operationId: change-playlist-details\n      x-spotify-docs-endpoint-name: Change a Playlist's Details\n      x-spotify-docs-console-url: /console/put-playlist/\n      summary: |\n        Change Playlist Details\n      description: |\n        Change a playlist's name and public/private state. (The user must, of\n        course, own the playlist.)\n      parameters:\n        - $ref: '#/components/parameters/PathPlaylistId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                name: Updated Playlist Name\n                description: Updated playlist description\n                public: false\n              type: object\n              additionalProperties: true\n              properties:\n                name:\n                  type: string\n                  description: |\n                    The new name for the playlist, for example `\"My New Playlist Title\"`\n                public:\n                  type: boolean\n                  description: |\n                    If `true` the playlist will be public, if `false` it will be private.\n                collaborative:\n                  type: boolean\n                  description: |\n                    If `true`, the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. \u003cbr\u003e\n                    _**Note**: You can only set `collaborative` to `true` on non-public playlists._\n                description:\n                  type: string\n                  description: |\n                    Value for playlist description as displayed in Spotify Clients and in the Web API.\n      responses:\n        \"200\":\n          description: Playlist updated\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - playlist-modify-public\n            - playlist-modify-private\n  /playlists/{playlist_id}/tracks:\n    x-spotify-docs-display-name: playlist-tracks\n    x-spotify-docs-category: Playlists\n    get:\n      tags:\n        - Playlists\n        - Tracks\n      operationId: get-playlists-tracks\n      x-spotify-docs-endpoint-name: Get a Playlist's Items\n      x-spotify-docs-console-url: /console/get-playlist-tracks/?playlist_id=21THa8j9TaSGuXYNBU5tsC\u0026amp;user_id=spotify_espa%C3%B1a\n      summary: |\n        Get Playlist Items\n      description: |\n        Get full details of the items of a playlist owned by a Spotify user.\n      parameters:\n        - $ref: '#/components/parameters/PathPlaylistId'\n        - $ref: '#/components/parameters/QueryMarket'\n        -\n          name: fields\n          required: false\n          in: query\n          schema:\n            title: Fields\n            description: |\n              Filters for the query: a comma-separated list of the\n              fields to return. If omitted, all fields are returned. For example, to get\n              just the total number of items and the request limit:\u003cbr\u003e`fields=total,limit`\u003cbr\u003eA\n              dot separator can be used to specify non-reoccurring fields, while parentheses\n              can be used to specify reoccurring fields within objects. For example, to\n              get just the added date and user ID of the adder:\u003cbr\u003e`fields=items(added_at,added_by.id)`\u003cbr\u003eUse\n              multiple parentheses to drill down into nested objects, for example:\u003cbr\u003e`fields=items(track(name,href,album(name,href)))`\u003cbr\u003eFields\n              can be excluded by prefixing them with an exclamation mark, for example:\u003cbr\u003e`fields=items.track.album(!external_urls,images)`\n            example: items(added_by.id,track(name,href,album(name,href)))\n            type: string\n        - $ref: '#/components/parameters/QueryLimit'\n        - $ref: '#/components/parameters/QueryOffset'\n        - $ref: '#/components/parameters/QueryAdditionalTypes'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/PagingObject\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - playlist-read-public\n            - playlist-read-private\n    post:\n      tags:\n        - Playlists\n        - Tracks\n      operationId: add-tracks-to-playlist\n      x-spotify-docs-endpoint-name: Add Items to a Playlist\n      x-spotify-docs-console-url: /console/post-playlist-tracks/\n      summary: |\n        Add Items to Playlist\n      description: |\n        Add one or more items to a user's playlist.\n      parameters:\n        - $ref: '#/components/parameters/PathPlaylistId'\n        -\n          name: position\n          required: false\n          in: query\n          schema:\n            title: Position (append by default)\n            description: |\n              The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0`; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body.\n            example: 0\n            type: integer\n        -\n          name: uris\n          required: false\n          in: query\n          schema:\n            title: Spotify Track URIs\n            description: |\n              A comma-separated list of [Spotify URIs](/documentation/web-api/#spotify-uris-and-ids) to add, can be track or episode URIs. For example:\u003cbr\u003e`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`\u003cbr\u003eA maximum of 100 items can be added in one request. \u003cbr\u003e\n              _**Note**: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below._\n            example: spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: true\n              properties:\n                uris:\n                  description: |\n                    A JSON array of the [Spotify URIs](/documentation/web-api/#spotify-uris-and-ids) to add. For example: `{\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\",\"spotify:track:1301WleyT98MSxVHPZCA6M\", \"spotify:episode:512ojhOuo1ktJprKbVcKyQ\"]}`\u003cbr\u003eA maximum of 100 items can be added in one request. _**Note**: if the `uris` parameter is present in the query string, any URIs listed here in the body will be ignored._\n                  type: array\n                  items:\n                    type: string\n                position:\n                  description: |\n                    The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0` ; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they appear in the uris array. For example: `{\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\",\"spotify:track:1301WleyT98MSxVHPZCA6M\"], \"position\": 3}`\n                  type: integer\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/PlaylistSnapshotId\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - playlist-modify-public\n            - playlist-modify-private\n    put:\n      tags:\n        - Playlists\n        - Tracks\n      operationId: reorder-or-replace-playlists-tracks\n      x-spotify-docs-endpoint-name: Reorder or Replace a Playlist's Items\n      x-spotify-docs-console-url: /console/put-playlist-tracks/\n      summary: |\n        Update Playlist Items\n      description: |\n        Either reorder or replace items in a playlist depending on the request's parameters.\n        To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body.\n        To replace items, include `uris` as either a query parameter or in the request's body.\n        Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.\n        \u003cbr\u003e\n        **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters.\n        These operations can't be applied together in a single request.\n      parameters:\n        - $ref: '#/components/parameters/PathPlaylistId'\n        -\n          name: uris\n          required: false\n          in: query\n          schema:\n            title: Spotify Track URIs\n            description: |\n              A comma-separated list of [Spotify URIs](/documentation/web-api/#spotify-uris-and-ids) to set, can be track or episode URIs. For example: `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`\u003cbr\u003eA maximum of 100 items can be set in one request.\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                range_start: 1\n                insert_before: 3\n                range_length: 2\n              type: object\n              additionalProperties: true\n              properties:\n                uris:\n                  type: array\n                  items:\n                    type: string\n                range_start:\n                  type: integer\n                  description: |\n                    The position of the first item to be reordered.\n                insert_before:\n                  type: integer\n                  description: |\n                    The position where the items should be inserted.\u003cbr\u003eTo reorder the items to the end of the playlist, simply set _insert_before_ to the position after the last item.\u003cbr\u003eExamples:\u003cbr\u003eTo reorder the first item to the last position in a playlist with 10 items, set _range_start_ to 0, and _insert_before_ to 10.\u003cbr\u003eTo reorder the last item in a playlist with 10 items to the start of the playlist, set _range_start_ to 9, and _insert_before_ to 0.\n                range_length:\n                  type: integer\n                  description: |\n                    The amount of items to be reordered. Defaults to 1 if not set.\u003cbr\u003eThe range of items to be reordered begins from the _range_start_ position, and includes the _range_length_ subsequent items.\u003cbr\u003eExample:\u003cbr\u003eTo move the items at index 9-10 to the start of the playlist, _range_start_ is set to 9, and _range_length_ is set to 2.\n                snapshot_id:\n                  type: string\n                  description: |\n                    The playlist's snapshot ID against which you want to make the changes.\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/PlaylistSnapshotId\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - playlist-modify-public\n            - playlist-modify-private\n    delete:\n      tags:\n        - Playlists\n        - Tracks\n      operationId: remove-tracks-playlist\n      x-spotify-docs-endpoint-name: Remove Items from a Playlist\n      x-spotify-docs-console-url: /console/delete-playlist-tracks/\n      summary: |\n        Remove Playlist Items\n      description: |\n        Remove one or more items from a user's playlist.\n      parameters:\n        - $ref: '#/components/parameters/PathPlaylistId'\n      requestBody: # Request body in DELETE is allowed, but discouraged (https://github.com/OAI/OpenAPI-Specification/pull/2117).\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - tracks\n              properties:\n                tracks:\n                  type: array\n                  description: |\n                    An array of objects containing [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) of the tracks or episodes to remove.\n                    For example: `{ \"tracks\": [{ \"uri\": \"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\" },{ \"uri\": \"spotify:track:1301WleyT98MSxVHPZCA6M\" }] }`. A maximum of 100 objects can be sent at once.\n                  items:\n                    type: object\n                    properties:\n                      uri:\n                        type: string\n                        description: Spotify URI\n                snapshot_id:\n                  type: string\n                  description: |\n                    The playlist's snapshot ID against which you want to make the changes.\n                    The API will validate that the specified items exist and in the specified positions and make the changes,\n                    even if more recent changes have been made to the playlist.\n      responses:\n        \"200\":\n           $ref: \"#/components/responses/PlaylistSnapshotId\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - playlist-modify-public\n            - playlist-modify-private\n  /me/playlists:\n    x-spotify-docs-display-name: current-user-playlists\n    x-spotify-docs-category: Playlists\n    get:\n      tags:\n        - Playlists\n        - Library\n      operationId: get-a-list-of-current-users-playlists\n      x-spotify-docs-endpoint-name: Get a List of Current User's Playlists\n      x-spotify-docs-console-url: /console/get-current-user-playlists/\n      summary: |\n        Get Current User's Playlists\n      description: |\n        Get a list of the playlists owned or followed by the current Spotify\n        user.\n      parameters:\n        - $ref: '#/components/parameters/QueryLimit'\n        -\n          name: offset\n          required: false\n          in: query\n          schema:\n            title: Offset\n            description: |\n              'The index of the first playlist to return. Default:\n              0 (the first object). Maximum offset: 100.000\\. Use with `limit` to get the\n              next set of playlists.'\n            default: 0\n            example: 5\n            type: integer\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/PagingObject\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - playlist-read-private\n  /me/albums:\n    x-spotify-docs-display-name: current-user-saved-albums\n    x-spotify-docs-category: Library\n    get:\n      tags:\n        - Albums\n        - Library\n      operationId: get-users-saved-albums\n      x-spotify-docs-endpoint-name: Get User's Saved Albums\n      x-spotify-docs-console-url: /console/get-current-user-saved-albums/?limit=1\n      summary: |\n        Get Saved Albums\n      description: |\n        Get a list of the albums saved in the current Spotify user's 'Your Music' library.\n      parameters:\n        - $ref: '#/components/parameters/QueryLimit'\n        - $ref: '#/components/parameters/QueryOffset'\n        - $ref: '#/components/parameters/QueryMarket'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/PagingObject\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-library-read\n    put:\n      tags:\n        - Albums\n        - Library\n      operationId: save-albums-user\n      x-spotify-docs-endpoint-name: Save Albums for Current User\n      x-spotify-docs-console-url: /console/put-current-user-saved-albums/?ids=07bYtmE3bPsLB6ZbmmFi8d%2C48JYNjh7GMie6NjqYHMmtT%2C27cZdqrQiKt3IT00338dws\n      summary: |\n        Save Albums\n      description: |\n        Save one or more albums to the current user's 'Your Music' library.\n      parameters:\n        - $ref: '#/components/parameters/QueryAlbumIds'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: true\n              properties:\n                ids:\n                  type: array\n                  description: |\n                    A JSON array of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]`\u003cbr\u003eA maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._\n                  items:\n                    type: string\n      responses:\n        \"200\":\n          description: The album is saved\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-library-modify\n    delete:\n      tags:\n        - Albums\n        - Library\n      operationId: remove-albums-user\n      x-spotify-docs-endpoint-name: Remove Albums for Current User\n      x-spotify-docs-console-url: /console/delete-current-user-saved-albums/?ids=07bYtmE3bPsLB6ZbmmFi8d%2C48JYNjh7GMie6NjqYHMmtT%2C27cZdqrQiKt3IT00338dws\n      summary: |\n        Remove Albums\n      description: |\n        Remove one or more albums from the current user's 'Your Music' library.\n      parameters:\n        - $ref: '#/components/parameters/QueryAlbumIds'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: true\n              properties:\n                ids:\n                  type: array\n                  description: |\n                    A JSON array of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]`\u003cbr\u003eA maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._\n                  items:\n                    type: string\n      responses:\n        \"200\":\n          description: Album(s) have been removed from the library\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-library-modify\n  /me/albums/contains:\n    x-spotify-docs-display-name: current-user-contains-saved-albums\n    x-spotify-docs-category: Library\n    get:\n      tags:\n        - Albums\n        - Library\n      operationId: check-users-saved-albums\n      x-spotify-docs-endpoint-name: Check User's Saved Albums\n      x-spotify-docs-console-url: /console/get-current-user-contains-saved-albums/?ids=0pJJgBzj26qnE1nSQUxaB0%2C5ZAKzV4ZIa5Gt7z29OYHv0\n      summary: |\n        Check Saved Albums\n      description: |\n        Check if one or more albums is already saved in the current Spotify user's 'Your Music' library.\n      parameters:\n        - $ref: '#/components/parameters/QueryAlbumIds'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ArrayOfBooleans\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-library-read\n  /me/tracks:\n    x-spotify-docs-display-name: current-user-saved-tracks\n    x-spotify-docs-category: Library\n    get:\n      tags:\n        - Tracks\n        - Library\n      operationId: get-users-saved-tracks\n      x-spotify-docs-endpoint-name: Get User's Saved Tracks\n      x-spotify-docs-console-url: /console/get-current-user-saved-tracks/\n      summary: |\n        Get User's Saved Tracks\n      description: |\n        Get a list of the songs saved in the current Spotify user's 'Your Music' library.\n      parameters:\n        - $ref: '#/components/parameters/QueryMarket'\n        - $ref: '#/components/parameters/QueryLimit'\n        - $ref: '#/components/parameters/QueryOffset'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/PagingObject\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-library-read\n    put:\n      tags:\n        - Tracks\n        - Library\n      operationId: save-tracks-user\n      x-spotify-docs-endpoint-name: Save Tracks for User\n      x-spotify-docs-console-url: /console/put-current-user-saved-tracks/?ids=7ouMYWpwJ422jRcDASZB7P%2C4VqPOruhp5EdPBeR92t6lQ%2C2takcwOaAZWiXQijPHIx7B\n      summary: |\n        Save Tracks for Current User\n      description: |\n        Save one or more tracks to the current user's 'Your Music' library.\n      parameters:\n        - $ref: '#/components/parameters/QueryTrackIds'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: true\n              required:\n                - uris\n              properties:\n                ids:\n                  type: array\n                  description: |\n                    A JSON array of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]`\u003cbr\u003eA maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._\n                  items:\n                    type: string\n      responses:\n        \"200\":\n          description: Track saved\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-library-modify\n    delete:\n      tags:\n        - Tracks\n        - Library\n      operationId: remove-tracks-user\n      x-spotify-docs-endpoint-name: Remove User's Saved Tracks\n      x-spotify-docs-console-url: /console/delete-current-user-saved-tracks/?ids=7ouMYWpwJ422jRcDASZB7P%2C4VqPOruhp5EdPBeR92t6lQ%2C2takcwOaAZWiXQijPHIx7B\n      summary: |\n        Remove Tracks for Current User\n      description: |\n        Remove one or more tracks from the current user's 'Your Music' library.\n      parameters:\n        - $ref: '#/components/parameters/QueryTrackIds'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: true\n              properties:\n                ids:\n                  type: array\n                  description: |\n                    A JSON array of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]`\u003cbr\u003eA maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._\n                  items:\n                    type: string\n      responses:\n        \"200\":\n          description: Track removed\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-library-modify\n  /me/tracks/contains:\n    x-spotify-docs-display-name: current-user-contains-saved-tracks\n    x-spotify-docs-category: Library\n    get:\n      tags:\n        - Tracks\n        - Library\n      operationId: check-users-saved-tracks\n      x-spotify-docs-endpoint-name: Check User's Saved Tracks\n      x-spotify-docs-console-url: /console/get-current-user-contains-saved-tracks/?ids=0udZHhCi7p1YzMlvI4fXoK%2C3SF5puV5eb6bgRSxBeMOk9\n      summary: |\n        Check User's Saved Tracks\n      description: |\n        Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library.\n      parameters:\n        - $ref: '#/components/parameters/QueryTrackIds'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ArrayOfBooleans\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-library-read\n  /me/episodes:\n    x-spotify-docs-display-name: current-user-saved-episodes\n    x-spotify-docs-category: Library\n    get:\n      tags:\n        - Episodes\n        - Library\n      operationId: get-users-saved-episodes\n      x-spotify-docs-endpoint-name: Get User's Saved Episodes\n      x-spotify-docs-console-url: /console/get-current-user-saved-episodes/\n      summary: |\n        Get User's Saved Episodes\n      description: |\n        Get a list of the episodes saved in the current Spotify user's library.\u003cbr\u003e\n        This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).\n      parameters:\n        - $ref: '#/components/parameters/QueryMarket'\n        - $ref: '#/components/parameters/QueryLimit'\n        - $ref: '#/components/parameters/QueryOffset'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/PagingObject\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-library-read\n            - user-read-playback-position\n    put:\n      tags:\n        - Episodes\n        - Library\n      operationId: save-episodes-user\n      x-spotify-docs-endpoint-name: Save Episodes for User\n      x-spotify-docs-console-url: /console/put-current-user-saved-episodes/?ids=77o6BIVlYM3msb4MMIL1jH%2C0Q86acNRm6V9GYx55SXKwf\n      summary: |\n        Save Episodes for User\n      description: |\n        Save one or more episodes to the current user's library.\u003cbr\u003e\n        This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).\n      parameters:\n        -\n          name: ids\n          required: true\n          in: query\n          schema:\n            title: Spotify Episodes IDs\n            description: |\n              A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). Maximum: 50 IDs.\n            example: 77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: true\n              required:\n                - uris\n              properties:\n                ids:\n                  type: array\n                  description: |\n                    A JSON array of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). \u003cbr\u003eA maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._\n                  items:\n                    type: string\n      responses:\n        \"200\":\n          description: Episode saved\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-library-modify\n    delete:\n      tags:\n        - Episodes\n        - Library\n      operationId: remove-episodes-user\n      x-spotify-docs-endpoint-name: Remove User's Saved Episodes\n      x-spotify-docs-console-url: /console/delete-current-user-saved-episodes/?ids=77o6BIVlYM3msb4MMIL1jH%2C0Q86acNRm6V9GYx55SXKwf\n      summary: |\n        Remove User's Saved Episodes\n      description: |\n        Remove one or more episodes from the current user's library.\u003cbr\u003e\n        This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).\n      parameters:\n        - $ref: '#/components/parameters/QueryTrackIds'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: true\n              properties:\n                ids:\n                  type: array\n                  description: |\n                    A JSON array of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). \u003cbr\u003eA maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._\n                  items:\n                    type: string\n      responses:\n        \"200\":\n          description: Episode removed\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-library-modify\n  /me/episodes/contains:\n    x-spotify-docs-display-name: current-user-contains-saved-episodes\n    x-spotify-docs-category: Library\n    get:\n      tags:\n        - Episodes\n        - Library\n      operationId: check-users-saved-episodes\n      x-spotify-docs-endpoint-name: Check User's Saved Episodes\n      x-spotify-docs-console-url: /console/get-current-user-contains-saved-episodes/?ids=77o6BIVlYM3msb4MMIL1jH%2C0Q86acNRm6V9GYx55SXKwf\n      summary: |\n        Check User's Saved Episodes\n      description: |\n        Check if one or more episodes is already saved in the current Spotify user's 'Your Episodes' library.\u003cbr\u003e\n        This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer)..\n      parameters:\n        -\n          name: ids\n          required: true\n          in: query\n          schema:\n            title: Spotify Episode IDs\n            description: |\n              A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids) for the episodes. Maximum: 50 IDs.\n            example: 77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ArrayOfBooleans\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-library-read\n  /me/shows:\n    x-spotify-docs-display-name: current-user-saved-shows\n    x-spotify-docs-category: Library\n    get:\n      tags:\n        - Shows\n        - Library\n      operationId: get-users-saved-shows\n      x-spotify-docs-endpoint-name: Get User's Saved Shows\n      x-spotify-docs-console-url: /console/get-current-user-saved-shows/\n      summary: |\n        Get User's Saved Shows\n      description: |\n        Get a list of shows saved in the current Spotify user's library. Optional parameters can be used to limit the number of shows returned.\n      parameters:\n        - $ref: '#/components/parameters/QueryLimit'\n        - $ref: '#/components/parameters/QueryOffset'\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n        \"200\":\n          $ref: \"#/components/responses/PagingObject\"\n      security:\n        -\n          oauth_2_0:\n            - user-library-read\n    put:\n      tags:\n        - Shows\n        - Library\n      operationId: save-shows-user\n      x-spotify-docs-endpoint-name: Save Shows for Current User\n      x-spotify-docs-console-url: /console/put-current-user-saved-shows/?ids=5AvwZVawapvyhJUIx71pdJ%2C6ups0LMt1G8n81XLlkbsPo%2C5AvwZVawapvyhJUIx71pdJ\n      summary: |\n        Save Shows for Current User\n      description: |\n        Save one or more shows to current Spotify user's library.\n      parameters:\n        - $ref: '#/components/parameters/QueryShowIds'\n      responses:\n        \"200\":\n          description: Show saved\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-library-modify\n    delete:\n      tags:\n        - Shows\n        - Library\n      operationId: remove-shows-user\n      x-spotify-docs-endpoint-name: Remove User's Saved Shows\n      x-spotify-docs-console-url: /console/delete-current-user-saved-shows/?ids=5AvwZVawapvyhJUIx71pdJ%2C6ups0LMt1G8n81XLlkbsPo%2C5AvwZVawapvyhJUIx71pdJ\n      summary: |\n        Remove User's Saved Shows\n      description: |\n        Delete one or more shows from current Spotify user's library.\n      parameters:\n        - $ref: '#/components/parameters/QueryShowIds'\n        - $ref: '#/components/parameters/QueryMarket'\n      responses:\n        \"200\":\n          description: Show removed\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-library-modify\n  /me/shows/contains:\n    x-spotify-docs-display-name: current-user-contains-saved-shows\n    x-spotify-docs-category: Library\n    get:\n      tags:\n        - Shows\n        - Library\n      operationId: check-users-saved-shows\n      x-spotify-docs-endpoint-name: Check User's Saved Shows\n      x-spotify-docs-console-url: /console/get-current-user-contains-saved-shows/?ids=5AvwZVawapvyhJUIx71pdJ%2C6ups0LMt1G8n81XLlkbsPo%2C5AvwZVawapvyhJUIx71pdJ\n      summary: |\n        Check User's Saved Shows\n      description: |\n        Check if one or more shows is already saved in the current Spotify user's library.\n      parameters:\n        - $ref: '#/components/parameters/QueryShowIds'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ArrayOfBooleans\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-library-read\n  /me/top/{type}:\n    x-spotify-docs-display-name: current-user-top-artists-and-tracks\n    x-spotify-docs-category: Personalization\n    get:\n      tags:\n        - Users\n        - Tracks\n        - Library\n      operationId: get-users-top-artists-and-tracks\n      x-spotify-docs-endpoint-name: Get a User's Top Artists and Tracks\n      x-spotify-docs-console-url: /console/get-current-user-top-artists-and-tracks/?type=artists\n      summary: |\n        Get User's Top Items\n      description: |\n        Get the current user's top artists or tracks based on calculated affinity.\n      parameters:\n        -\n          name: type\n          required: true\n          in: path\n          schema:\n            title: Type\n            description: |\n              The type of entity to return. Valid values: `artists` or `tracks`\n            example: artists\n            type: string\n        -\n          name: time_range\n          required: false\n          in: query\n          schema:\n            title: Time Range\n            description: |\n              Over what time frame the affinities are computed. Valid values: `long_term` (calculated from several years of data and including all new data as it becomes available), `medium_term` (approximately last 6 months), `short_term` (approximately last 4 weeks). Default: `medium_term`\n            default: medium_term\n            example: medium_term\n            type: string\n        - $ref: '#/components/parameters/QueryLimit'\n        - $ref: '#/components/parameters/QueryOffset'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/PagingObject\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-top-read\n  /users/{user_id}:\n    x-spotify-docs-display-name: users-profile\n    x-spotify-docs-category: Users Profile\n    get:\n      tags:\n        - Users\n      operationId: get-users-profile\n      x-spotify-docs-endpoint-name: Get a User's Profile\n      x-spotify-docs-console-url: /console/get-users-profile/?user_id=wizzler\n      summary: |\n        Get User's Profile\n      description: |\n        Get public profile information about a Spotify user.\n      parameters:\n        - $ref: '#/components/parameters/PathUserId'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OnePublicUser\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /users/{user_id}/playlists:\n    x-spotify-docs-display-name: playlists\n    x-spotify-docs-category: Playlists\n    get:\n      tags:\n        - Playlists\n        - Users\n      operationId: get-list-users-playlists\n      x-spotify-docs-endpoint-name: Get a List of a User's Playlists\n      x-spotify-docs-console-url: /console/get-playlists/?user_id=wizzler\n      summary: |\n        Get User's Playlists\n      description: |\n        Get a list of the playlists owned or followed by a Spotify user.\n      parameters:\n        - $ref: '#/components/parameters/PathUserId'\n        - $ref: '#/components/parameters/QueryLimit'\n        -\n          name: offset\n          required: false\n          in: query\n          schema:\n            title: Offset\n            description: |\n              The index of the first playlist to return. Default:\n              0 (the first object). Maximum offset: 100.000\\. Use with `limit` to get the\n              next set of playlists.\n            default: 0\n            example: 5\n            type: integer\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/PagingObject\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - playlist-read-private\n            - playlist-read-collaborative\n    post:\n      tags:\n        - Playlists\n        - Library\n      operationId: create-playlist\n      x-spotify-docs-endpoint-name: Create a Playlist\n      x-spotify-docs-console-url: /console/post-playlists/\n      summary: |\n        Create Playlist\n      description: |\n        Create a playlist for a Spotify user. (The playlist will be empty until\n        you [add tracks](/documentation/web-api/reference/#/operations/add-tracks-to-playlist).)\n      parameters:\n        - $ref: '#/components/parameters/PathUserId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                name: New Playlist\n                description: New playlist description\n                public: false\n              type: object\n              additionalProperties: true\n              required:\n                - name\n              properties:\n                name:\n                  type: string\n                  description: |\n                    The name for the new playlist, for example `\"Your Coolest Playlist\"`. This name does not need to be unique; a user may have several playlists with the same name.\n                public:\n                  type: boolean\n                  description: |\n                    Defaults to `true`. If `true` the playlist will be public, if `false` it will be private. To be able to create private playlists, the user must have granted the `playlist-modify-private` [scope](/documentation/general/guides/authorization-guide/#list-of-scopes)\n                collaborative:\n                  type: boolean\n                  description: |\n                    Defaults to `false`. If `true` the playlist will be collaborative. _**Note**: to create a collaborative playlist you must also set `public` to `false`. To create collaborative playlists you must have granted `playlist-modify-private` and `playlist-modify-public` [scopes](/documentation/general/guides/authorization-guide/#list-of-scopes)._\n                description:\n                  type: string\n                  description: |\n                    value for playlist description as displayed in Spotify Clients and in the Web API.\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/OnePlaylist\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - playlist-modify-public\n            - playlist-modify-private\n  /playlists/{playlist_id}/followers:\n    x-spotify-docs-display-name: playlist-followers\n    x-spotify-docs-category: Follow\n    put:\n      tags:\n        - Users\n        - Playlists\n      operationId: follow-playlist\n      x-spotify-docs-endpoint-name: Follow a Playlist\n      x-spotify-docs-console-url: /console/put-playlist-followers/?playlist_id=2v3iNvBX8Ay1Gt2uXtUKUT\u0026amp;body-json=%7B%0D%0A++%22public%22%3A+true%0D%0A%7D\u0026amp;user_id=jmperezperez\n      description: |\n        Add the current user as a follower of a playlist.\n      summary: |\n        Follow Playlist\n      parameters:\n        - $ref: '#/components/parameters/PathPlaylistId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                public: false\n              type: object\n              additionalProperties: true\n              properties:\n                public:\n                  type: boolean\n                  description: |\n                    Defaults to `true`. If `true` the playlist will be included in user's public playlists, if `false` it will remain private.\n      responses:\n        \"200\":\n          description: Playlist followed\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - playlist-modify-public\n            - playlist-modify-private\n    delete:\n      tags:\n        - Users\n        - Playlists\n      operationId: unfollow-playlist\n      x-spotify-docs-endpoint-name: Unfollow Playlist\n      x-spotify-docs-console-url: /console/delete-playlist-followers/?playlist_id=2v3iNvBX8Ay1Gt2uXtUKUT\u0026amp;user_id=jmperezperez\n      summary: |\n        Unfollow Playlist\n      description: |\n        Remove the current user as a follower of a playlist.\n      parameters:\n        - $ref: '#/components/parameters/PathPlaylistId'\n      responses:\n        \"200\":\n          description: Playlist unfollowed\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - playlist-modify-public\n            - playlist-modify-private\n  /browse/featured-playlists:\n    x-spotify-docs-display-name: featured-playlists\n    x-spotify-docs-category: Browse\n    get:\n      tags:\n        - Playlists\n      operationId: get-featured-playlists\n      x-spotify-docs-endpoint-name: Get All Featured Playlists\n      x-spotify-docs-console-url: /console/get-featured-playlists/?country=SE\u0026amp;limit=2\n      summary: |\n        Get Featured Playlists\n      description: |\n        Get a list of Spotify featured playlists (shown, for example, on a Spotify player's 'Browse' tab).\n      parameters:\n        -\n          name: country\n          required: false\n          in: query\n          schema:\n            title: Country\n            description: |\n              A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.\n            example: SE\n            type: string\n        -\n          name: locale\n          required: false\n          in: query\n          schema:\n            title: Locale\n            description: |\n              The desired language, consisting of a lowercase [ISO 639-1 language code](http://en.wikipedia.org/wiki/ISO_639-1) and an uppercase [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: `es_MX`, meaning \"Spanish (Mexico)\". Provide this parameter if you want the results returned in a particular language (where available). \u003cbr\u003e\n              _**Note**: if `locale` is not supplied, or if the specified language is not available, all strings will be returned in the Spotify default language (American English). The `locale` parameter, combined with the `country` parameter, may give odd results if not carefully matched. For example `country=SE\u0026locale=de_DE` will return a list of categories relevant to Sweden but as German language strings._\n            example: sv_SE\n            type: string\n        -\n          name: timestamp\n          required: false\n          in: query\n          schema:\n            title: Timestamp\n            description: |\n              A timestamp in [ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601): `yyyy-MM-ddTHH:mm:ss`. Use this parameter to specify the user's local time to get results tailored for that specific date and time in the day. If not provided, the response defaults to the current UTC time. Example: \"2014-10-23T09:00:00\" for a user whose local time is 9AM. If there were no featured playlists (or there is no data) at the specified time, the response will revert to the current UTC time.\n            example: 2014-10-23T09:00:00\n            type: string\n        - $ref: '#/components/parameters/QueryLimit'\n        - $ref: '#/components/parameters/QueryOffset'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/PagedPlaylistsAndMessage\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /browse/categories:\n    x-spotify-docs-display-name: browse-categories\n    x-spotify-docs-category: Browse\n    get:\n      tags:\n        - Categories\n      operationId: get-categories\n      x-spotify-docs-endpoint-name: Get All Categories\n      x-spotify-docs-console-url: /console/get-browse-categories/\n      summary: |\n        Get Several Browse Categories\n      description: |\n        Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).\n      parameters:\n        -\n          name: country\n          required: false\n          in: query\n          schema:\n            title: Country\n            description: |\n              A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant.\n            example: SE\n            type: string\n        -\n          name: locale\n          required: false\n          in: query\n          schema:\n            title: Locale\n            description: |\n              The desired language, consisting of an [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code and an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: `es_MX`, meaning \"Spanish (Mexico)\". Provide this parameter if you want the category metadata returned in a particular language. \u003cbr\u003e\n              _**Note**: if `locale` is not supplied, or if the specified language is not available, all strings will be returned in the Spotify default language (American English). The `locale` parameter, combined with the `country` parameter, may give odd results if not carefully matched. For example `country=SE\u0026locale=de_DE` will return a list of categories relevant to Sweden but as German language strings._\n            example: sv_SE\n            type: string\n        - $ref: '#/components/parameters/QueryLimit'\n        - $ref: '#/components/parameters/QueryOffset'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/PagedCategories\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /browse/categories/{category_id}:\n    x-spotify-docs-display-name: browse-category\n    x-spotify-docs-category: Browse\n    get:\n      tags:\n        - Categories\n      operationId: get-a-category\n      x-spotify-docs-endpoint-name: Get a Category\n      x-spotify-docs-console-url: /console/get-browse-category/\n      summary: |\n        Get Single Browse Category\n      description: |\n        Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).\n      parameters:\n        -\n          name: category_id\n          required: true\n          in: path\n          schema:\n            title: Category ID\n            description: |\n              The [Spotify category ID](/documentation/web-api/#spotify-uris-and-ids) for the category.\n            example: dinner\n            type: string\n        -\n          name: country\n          required: false\n          in: query\n          schema:\n            title: Country\n            description: |\n              A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter to ensure that the category exists for a particular country.\n            example: SE\n            type: string\n        -\n          name: locale\n          required: false\n          in: query\n          schema:\n            title: Locale\n            description: |\n              The desired language, consisting of an [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code and an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: `es_MX`, meaning \u0026quot;Spanish (Mexico)\u0026quot;. Provide this parameter if you want the category strings returned in a particular language.\u003cbr\u003e _**Note**: if `locale` is not supplied, or if the specified language is not available, the category strings returned will be in the Spotify default language (American English)._\n            example: sv_SE\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OneCategory\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /browse/categories/{category_id}/playlists:\n    x-spotify-docs-display-name: category-playlists\n    x-spotify-docs-category: Browse\n    get:\n      tags:\n        - Playlists\n        - Categories\n      operationId: get-a-categories-playlists\n      x-spotify-docs-endpoint-name: Get a Category's Playlists\n      x-spotify-docs-console-url: /console/get-category-playlists/?country=BR\u0026amp;category_id=party\u0026amp;limit=2\n      summary: |\n        Get Category's Playlists\n      description: |\n        Get a list of Spotify playlists tagged with a particular category.\n      parameters:\n        -\n          name: category_id\n          required: true\n          in: path\n          schema:\n            title: Category ID\n            description: |\n              The [Spotify category ID](/documentation/web-api/#spotify-uris-and-ids) for the category.\n            example: dinner\n            type: string\n        -\n          name: country\n          required: false\n          in: query\n          schema:\n            title: Country\n            description: |\n              A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter to ensure that the category exists for a particular country.\n            example: SE\n            type: string\n        - $ref: '#/components/parameters/QueryLimit'\n        - $ref: '#/components/parameters/QueryOffset'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/PagedPlaylists\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /playlists/{playlist_id}/images:\n    x-spotify-docs-display-name: playlist-images\n    x-spotify-docs-category: Playlists\n    get:\n      tags:\n        - Playlists\n      operationId: get-playlist-cover\n      x-spotify-docs-endpoint-name: Get a Playlist Cover Image\n      x-spotify-docs-console-url: /console/get-playlist-images?playlist_id=3cEYpjA9oz9GiPac4AsH4n\n      summary: |\n        Get Playlist Cover Image\n      description: |\n        Get the current image associated with a specific playlist.\n      parameters:\n        - $ref: '#/components/parameters/PathPlaylistId'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ArrayOfImages\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n    put:\n      tags:\n        - Playlists\n      operationId: upload-custom-playlist-cover\n      x-spotify-docs-endpoint-name: Upload a Custom Playlist Cover Image\n      x-spotify-docs-console-url: /console/put-playlist-images?playlist_id=3cEYpjA9oz9GiPac4AsH4n\n      summary: |\n        Add Custom Playlist Cover Image\n      description: |\n        Replace the image used to represent a specific playlist.\n      parameters:\n        - $ref: '#/components/parameters/PathPlaylistId'\n      responses:\n        \"200\":\n          description: Image uploaded\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - ugc-image-upload\n            - playlist-modify-public\n            - playlist-modify-private\n  /browse/new-releases:\n    x-spotify-docs-display-name: new-releases\n    x-spotify-docs-category: Browse\n    get:\n      tags:\n        - Albums\n      operationId: get-new-releases\n      x-spotify-docs-endpoint-name: Get All New Releases\n      x-spotify-docs-console-url: /console/get-new-releases/?country=SE\n      summary: |\n        Get New Releases\n      description: |\n        Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab).\n      parameters:\n        -\n          name: country\n          required: false\n          in: query\n          schema:\n            title: Country\n            description: |\n              A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.\n            example: SE\n            type: string\n        - $ref: '#/components/parameters/QueryLimit'\n        - $ref: '#/components/parameters/QueryOffset'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/PagedAlbums\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /me/following:\n    x-spotify-docs-display-name: following\n    x-spotify-docs-category: Follow\n    get:\n      tags:\n        - Users\n        - Library\n        - Artists\n      operationId: get-followed\n      x-spotify-docs-endpoint-name: Get User's Followed Artists\n      x-spotify-docs-console-url: /console/get-following/?type=artist\u0026amp;limit=20\n      summary: |\n        Get Followed Artists\n      description: |\n        Get the current user's followed artists.\n      parameters:\n        -\n          name: type\n          required: true\n          in: query\n          schema:\n            title: Item Type\n            description: |\n              The ID type: currently only `artist` is supported.\n            enum:\n              - artist\n            example: artist\n            type: string\n        -\n          name: after\n          required: false\n          in: query\n          schema:\n            title: After\n            description: |\n              The last artist ID retrieved from the previous request.\n            example: 0I2XqVXqHScXjHhk6AYYRe\n            type: string\n        -\n          name: limit\n          required: false\n          in: query\n          schema:\n            title: Limit\n            description: |\n              The maximum number of items to return. Default: 20\\. Minimum: 1\\. Maximum: 50\\.\n            default: 20\n            example: 10\n            type: integer\n            minimum: 0\n            maximum: 50\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/CursorPagedArtists\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-follow-read\n    put:\n      tags:\n        - Users\n        - Artists\n        - Library\n      operationId: follow-artists-users\n      x-spotify-docs-endpoint-name: Follow Artists or Users\n      x-spotify-docs-console-url: /console/put-following/?type=user\u0026amp;ids=exampleuser01\n      summary: |\n        Follow Artists or Users\n      description: |\n        Add the current user as a follower of one or more artists or other Spotify users.\n      parameters:\n        -\n          name: type\n          required: true\n          in: query\n          schema:\n            title: Item Type\n            description: |\n              The ID type.\n            enum:\n              - artist\n              - user\n            example: artist\n            type: string\n        -\n          name: ids\n          required: true\n          in: query\n          schema:\n            title: Spotify IDs\n            description: |\n              A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids).\n              A maximum of 50 IDs can be sent in one request.\n            example: 2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: true\n              required:\n                - ids\n              properties:\n                ids:\n                  type: array\n                  description: |\n                    A JSON array of the artist or user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids).\n                    For example: `{ids:[\"74ASZWbe4lXaubB36ztrGX\", \"08td7MxkoHQkXnWAYD8d6Q\"]}`. A maximum of 50 IDs can be sent in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._\n                  items:\n                    type: string\n\n      responses:\n        \"204\":\n          description: Artist or user followed\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-follow-modify\n    delete:\n      tags:\n        - Users\n        - Artists\n        - Library\n      operationId: unfollow-artists-users\n      x-spotify-docs-endpoint-name: Unfollow Artists or Users\n      x-spotify-docs-console-url: /console/delete-following/?type=user\u0026amp;ids=exampleuser01\n      summary: |\n        Unfollow Artists or Users\n      description: |\n        Remove the current user as a follower of one or more artists or other Spotify users.\n      parameters:\n        -\n          name: type\n          required: true\n          in: query\n          schema:\n            title: Item Type\n            description: |\n              The ID type: either `artist` or `user`.\n            enum:\n              - artist\n              - user\n            example: artist\n            type: string\n        -\n          name: ids\n          required: true\n          in: query\n          schema:\n            title: Spotify IDs\n            description: |\n              A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A maximum of 50 IDs can be sent in one request.\n            example: 2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: true\n              properties:\n                ids:\n                  type: array\n                  description: |\n                    A JSON array of the artist or user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `{ids:[\"74ASZWbe4lXaubB36ztrGX\", \"08td7MxkoHQkXnWAYD8d6Q\"]}`. A maximum of 50 IDs can be sent in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._\n                  items:\n                    type: string\n      responses:\n        \"200\":\n          description: Artist or user unfollowed\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-follow-modify\n  /me/following/contains:\n    x-spotify-docs-display-name: following-contains\n    x-spotify-docs-category: Follow\n    get:\n      tags:\n        - Users\n        - Artists\n        - Library\n      operationId: check-current-user-follows\n      x-spotify-docs-endpoint-name: Get Following State for Artists/Users\n      x-spotify-docs-console-url: /console/get-following-contains/?type=user\u0026amp;ids=exampleuser01\n      summary: |\n        Check If User Follows Artists or Users\n      description: |\n        Check to see if the current user is following one or more artists or other Spotify users.\n      parameters:\n        -\n          name: type\n          required: true\n          in: query\n          schema:\n            title: Item Type\n            description: |\n              The ID type: either `artist` or `user`.\n            enum:\n              - artist\n              - user\n            example: artist\n            type: string\n        -\n          name: ids\n          required: true\n          in: query\n          schema:\n            title: Spotify IDs\n            description: |\n              A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids) to check. For example: `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A maximum of 50 IDs can be sent in one request.\n            example: 2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ArrayOfBooleans\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-follow-read\n  /playlists/{playlist_id}/followers/contains:\n    x-spotify-docs-display-name: playlist-followers-contains\n    x-spotify-docs-category: Follow\n    get:\n      tags:\n        - Users\n        - Playlists\n      operationId: check-if-user-follows-playlist\n      x-spotify-docs-endpoint-name: Check if Users Follow a Playlist\n      x-spotify-docs-console-url: /console/get-playlist-followers-contains/?ids=possan,elogain\u0026amp;user_id=jmperezperez\u0026amp;playlist_id=2v3iNvBX8Ay1Gt2uXtUKUT\n      summary: |\n        Check if Users Follow Playlist\n      description: |\n        Check to see if one or more Spotify users are following a specified playlist.\n      parameters:\n        - $ref: '#/components/parameters/PathPlaylistId'\n        -\n          name: ids\n          required: true\n          in: query\n          schema:\n            title: Spotify user IDs\n            description: |\n              A comma-separated list of [Spotify User IDs](/documentation/web-api/#spotify-uris-and-ids) ; the ids of the users that you want to check to see if they follow the playlist. Maximum: 5 ids.\n            example: jmperezperez,thelinmichael,wizzler\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ArrayOfBooleans\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /audio-features:\n    x-spotify-docs-display-name: audio-features-several-tracks\n    x-spotify-docs-category: Tracks\n    get:\n      tags:\n        - Tracks\n      operationId: get-several-audio-features\n      x-spotify-docs-endpoint-name: Get Audio Features for Several Tracks\n      x-spotify-docs-console-url: /console/get-audio-features-several-tracks/?ids=4JpKVNYnVcJ8tuMKjAj50A,2NRANZE9UCmPAS5XVbXL40,24JygzOLM0EmRQeGtFcIcG\n      summary: |\n        Get Tracks' Audio Features\n      description: |\n        Get audio features for multiple tracks based on their Spotify IDs.\n      parameters:\n        -\n          name: ids\n          required: true\n          in: query\n          schema:\n            title: Spotify Track IDs\n            description: |\n              A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids)\n              for the tracks. Maximum: 100 IDs.\n            example: 7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ManyAudioFeatures\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /audio-features/{id}:\n    x-spotify-docs-display-name: audio-features-track\n    x-spotify-docs-category: Tracks\n    get:\n      tags:\n        - Tracks\n      operationId: get-audio-features\n      x-spotify-docs-endpoint-name: Get Audio Features for a Track\n      x-spotify-docs-console-url: /console/get-audio-features-track/?id=06AKEBrKUckW0KREUWRnvT\n      summary: |\n        Get Track's Audio Features\n      description: |\n        Get audio feature information for a single track identified by its unique\n        Spotify ID.\n      parameters:\n        -\n          name: id\n          required: true\n          in: path\n          schema:\n            title: Spotify Track ID\n            description: |\n              The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) for the track.\n            example: 11dFghVXANMlKmJXsNCbNl\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OneAudioFeatures\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /audio-analysis/{id}:\n    x-spotify-docs-display-name: audio-analysis-track\n    x-spotify-docs-category: Tracks\n    get:\n      tags:\n        - Tracks\n      operationId: get-audio-analysis\n      x-spotify-docs-endpoint-name: Get Audio Analysis for a Track\n      x-spotify-docs-console-url: /console/get-audio-analysis-track/?id=06AKEBrKUckW0KREUWRnvT\n      summary: |\n        Get Track's Audio Analysis\n      description: |\n        Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre.\n      parameters:\n        -\n          name: id\n          required: true\n          in: path\n          schema:\n            title: Spotify Track ID\n            description: |\n              The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids)\n              for the track.\n            example: 11dFghVXANMlKmJXsNCbNl\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OneAudioAnalysis\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /recommendations:\n    x-spotify-docs-display-name: recommendations\n    x-spotify-docs-category: Browse\n    get:\n      tags:\n        - Tracks\n      operationId: get-recommendations\n      x-spotify-docs-endpoint-name: Get Recommendations\n      x-spotify-docs-console-url: /console/get-recommendations/?seed_artists=4NHQUGzhtTLFvgF5SZesLK\u0026amp;seed_tracks=0c6xIDDpzE81m2q797ordA\u0026amp;min_energy=0.4\u0026amp;min_popularity=50\u0026amp;market=US\n      summary: |\n        Get Recommendations\n      description: |\n        Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.\n\n        For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks.\n      parameters:\n        -\n          name: limit\n          required: false\n          in: query\n          schema:\n            title: Limit\n            description: |\n              The target size of the list of recommended tracks. For seeds with unusually small pools or when highly restrictive filtering is applied, it may be impossible to generate the requested number of recommended tracks. Debugging information for such cases is available in the response. Default: 20\\. Minimum: 1\\. Maximum: 100.\n            default: 20\n            example: 10\n            type: integer\n            minimum: 1\n            maximum: 100\n        - $ref: '#/components/parameters/QueryMarket'\n        -\n          name: seed_artists\n          required: true\n          in: query\n          schema:\n            title: Spotify Artist ID Seeds\n            description: |\n              A comma separated list of [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids) for seed artists.  Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`.\n            example: 4NHQUGzhtTLFvgF5SZesLK\n            type: string\n        -\n          name: seed_genres\n          required: true\n          in: query\n          schema:\n            title: Genres Seeds\n            description: |\n              A comma separated list of any genres in the set of [available genre seeds](#available-genre-seeds).  Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`.\n            example: classical,country\n            type: string\n        -\n          name: seed_tracks\n          required: true\n          in: query\n          schema:\n            title: Spotify Track ID Seeds\n            description: |\n              A comma separated list of [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids) for a seed track.  Up to 5 seed values may be provided in any combination of `seed_artists`, `seed_tracks` and `seed_genres`.\n            example: 0c6xIDDpzE81m2q797ordA\n            type: string\n        -\n          name: min_acousticness\n          required: false\n          in: query\n          schema:\n            title: Min. Acousticness\n            description: |\n              For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n            type: number\n            minimum: 0\n            maximum: 1\n        -\n          name: max_acousticness\n          required: false\n          in: query\n          schema:\n            title: Max. Acousticness\n            description: |\n              For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.\n            type: number\n            minimum: 0\n            maximum: 1\n        -\n          name: target_acousticness\n          required: false\n          in: query\n          schema:\n            title: Target Acousticness\n            description: |\n              For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.\n            type: number\n            minimum: 0\n            maximum: 1\n        -\n          name: min_danceability\n          required: false\n          in: query\n          schema:\n            title: Min. Danceability\n            description: |\n              For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n            type: number\n            minimum: 0\n            maximum: 1\n        -\n          name: max_danceability\n          required: false\n          in: query\n          schema:\n            title: Max. Danceability\n            description: |\n              For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.\n            type: number\n            minimum: 0\n            maximum: 1\n        -\n          name: target_danceability\n          required: false\n          in: query\n          schema:\n            title: Target Danceability\n            description: |\n              For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.\n            type: number\n            minimum: 0\n            maximum: 1\n        -\n          name: min_duration_ms\n          required: false\n          in: query\n          schema:\n            title: Min. Duration (ms)\n            description: |\n              For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n            type: integer\n        -\n          name: max_duration_ms\n          required: false\n          in: query\n          schema:\n            title: Max. Duration (ms)\n            description: |\n              For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.\n            type: integer\n        -\n          name: target_duration_ms\n          required: false\n          in: query\n          schema:\n            title: Target Duration (ms)\n            description: Target duration of the track (ms)\n            type: integer\n        -\n          name: min_energy\n          required: false\n          in: query\n          schema:\n            title: Min. Energy\n            description: |\n              For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n            type: number\n            minimum: 0\n            maximum: 1\n        -\n          name: max_energy\n          required: false\n          in: query\n          schema:\n            title: Max. Energy\n            description: |\n              For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.\n            type: number\n            minimum: 0\n            maximum: 1\n        -\n          name: target_energy\n          required: false\n          in: query\n          schema:\n            title: Target Energy\n            description: |\n              For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.\n            type: number\n            minimum: 0\n            maximum: 1\n        -\n          name: min_instrumentalness\n          required: false\n          in: query\n          schema:\n            title: Min. Instrumentalness\n            description: |\n              For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n            type: number\n            minimum: 0\n            maximum: 1\n        -\n          name: max_instrumentalness\n          required: false\n          in: query\n          schema:\n            title: Max. Instrumentalness\n            description: |\n              For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.\n            type: number\n            minimum: 0\n            maximum: 1\n        -\n          name: target_instrumentalness\n          required: false\n          in: query\n          schema:\n            title: Target Instrumentalness\n            description: |\n              For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.\n            type: number\n            minimum: 0\n            maximum: 1\n        -\n          name: min_key\n          required: false\n          in: query\n          schema:\n            title: Min. Key\n            description: |\n              For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n            type: integer\n            minimum: 0\n            maximum: 11\n        -\n          name: max_key\n          required: false\n          in: query\n          schema:\n            title: Max. Key\n            description: |\n              For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.\n            type: integer\n            minimum: 0\n            maximum: 11\n        -\n          name: target_key\n          required: false\n          in: query\n          schema:\n            title: Target Key\n            description: |\n              For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.\n            type: integer\n            minimum: 0\n            maximum: 11\n        -\n          name: min_liveness\n          required: false\n          in: query\n          schema:\n            title: Min. Liveness\n            description: |\n              For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n            type: number\n            minimum: 0\n            maximum: 1\n        -\n          name: max_liveness\n          required: false\n          in: query\n          schema:\n            title: Max. Liveness\n            description: |\n              For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.\n            type: number\n            minimum: 0\n            maximum: 1\n        -\n          name: target_liveness\n          required: false\n          in: query\n          schema:\n            title: Target Liveness\n            description: |\n              For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.\n            type: number\n            minimum: 0\n            maximum: 1\n        -\n          name: min_loudness\n          required: false\n          in: query\n          schema:\n            title: Min. Loudness\n            description: |\n              For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n            type: number\n        -\n          name: max_loudness\n          required: false\n          in: query\n          schema:\n            title: Max. Loudness\n            description: |\n              For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.\n            type: number\n        -\n          name: target_loudness\n          required: false\n          in: query\n          schema:\n            title: Target Loudness\n            description: |\n              For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.\n            type: number\n        -\n          name: min_mode\n          required: false\n          in: query\n          schema:\n            title: Min. Mode\n            description: |\n              For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n            type: integer\n            minimum: 0\n            maximum: 1\n        -\n          name: max_mode\n          required: false\n          in: query\n          schema:\n            title: Max. Mode\n            description: |\n              For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.\n            type: integer\n            minimum: 0\n            maximum: 1\n        -\n          name: target_mode\n          required: false\n          in: query\n          schema:\n            title: Target Mode\n            description: |\n              For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.\n            type: integer\n            minimum: 0\n            maximum: 1\n        -\n          name: min_popularity\n          required: false\n          in: query\n          schema:\n            title: Min. Popularity\n            description: |\n              For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n            type: integer\n            minimum: 0\n            maximum: 100\n        -\n          name: max_popularity\n          required: false\n          in: query\n          schema:\n            title: Max. Popularity\n            description: |\n              For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.\n            type: integer\n            minimum: 0\n            maximum: 100\n        -\n          name: target_popularity\n          required: false\n          in: query\n          schema:\n            title: Target Popularity\n            description: |\n              For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.\n            type: integer\n            minimum: 0\n            maximum: 100\n        -\n          name: min_speechiness\n          required: false\n          in: query\n          schema:\n            title: Min. Speechiness\n            description: |\n              For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n            type: number\n            minimum: 0\n            maximum: 1\n        -\n          name: max_speechiness\n          required: false\n          in: query\n          schema:\n            title: Max. Speechiness\n            description: |\n              For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.\n            type: number\n            minimum: 0\n            maximum: 1\n        -\n          name: target_speechiness\n          required: false\n          in: query\n          schema:\n            title: Target Speechiness\n            description: |\n              For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.\n            type: number\n            minimum: 0\n            maximum: 1\n        -\n          name: min_tempo\n          required: false\n          in: query\n          schema:\n            title: Min. Tempo\n            description: |\n              For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n            type: number\n        -\n          name: max_tempo\n          required: false\n          in: query\n          schema:\n            title: Max. Tempo\n            description: |\n              For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.\n            type: number\n        -\n          name: target_tempo\n          required: false\n          in: query\n          schema:\n            title: Target Tempo\n            description: Target tempo (BPM)\n            type: number\n        -\n          name: min_time_signature\n          required: false\n          in: query\n          schema:\n            title: Min. Time Signature\n            description: |\n              For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n            type: integer\n            maximum: 11\n        -\n          name: max_time_signature\n          required: false\n          in: query\n          schema:\n            title: Max. Time Signature\n            description: |\n              For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.\n            type: integer\n        -\n          name: target_time_signature\n          required: false\n          in: query\n          schema:\n            title: Target Time Signature\n            description: |\n              For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.\n            type: integer\n        -\n          name: min_valence\n          required: false\n          in: query\n          schema:\n            title: Min. Valence\n            description: |\n              For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `min_tempo=140` would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n            type: number\n            minimum: 0\n            maximum: 1\n        -\n          name: max_valence\n          required: false\n          in: query\n          schema:\n            title: Max. Valence\n            description: |\n              For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, `max_instrumentalness=0.35` would filter out most tracks that are likely to be instrumental.\n            type: number\n            minimum: 0\n            maximum: 1\n        -\n          name: target_valence\n          required: false\n          in: query\n          schema:\n            title: Target Valence\n            description: |\n              For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request `target_energy=0.6` and `target_danceability=0.8`. All target values will be weighed equally in ranking results.\n            type: number\n            minimum: 0\n            maximum: 1\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OneRecommendations\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /recommendations/available-genre-seeds:\n    x-spotify-docs-display-name: available-genre-seeds\n    x-spotify-docs-category: Browse\n    get:\n      tags:\n        - Genres\n      operationId: get-recommendation-genres\n      x-spotify-docs-endpoint-name: Get Recommendation Genres\n      x-spotify-docs-console-url: /console/get-available-genre-seeds/\n      summary: |\n        Get Available Genre Seeds\n      description: |\n        Retrieve a list of available genres seed parameter values for [recommendations](/documentation/web-api/reference/#/operations/get-recommendations).\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ManyGenres\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n  /me/player:\n    x-spotify-docs-display-name: user-player\n    x-spotify-docs-category: Player\n    get:\n      tags:\n        - Player\n      operationId: get-information-about-the-users-current-playback\n      x-spotify-docs-endpoint-name: Get Information About The User's Current Playback\n      x-spotify-docs-console-url: /console/get-user-player/\n      summary: |\n        Get Playback State\n      description: |\n        Get information about the user’s current playback state, including track or episode, progress, and active device.\n      parameters:\n        - $ref: '#/components/parameters/QueryMarket'\n        - $ref: '#/components/parameters/QueryAdditionalTypes'\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OneCurrentlyPlaying\"\n        \"204\":\n          description: Playback not available or active\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-read-playback-state\n    put:\n      tags:\n        - Player\n      operationId: transfer-a-users-playback\n      x-spotify-docs-endpoint-name: Transfer a User's Playback\n      x-spotify-docs-console-url: /console/put-user-player\n      summary: |\n        Transfer Playback\n      description: |\n        Transfer playback to a new device and determine if it should start playing.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                device_ids:\n                  - 74ASZWbe4lXaubB36ztrGX\n              type: object\n              additionalProperties: true\n              required:\n                - device_ids\n              properties:\n                device_ids:\n                  type: array\n                  description: |\n                    A JSON array containing the ID of the device on which playback should be started/transferred.\u003cbr\u003eFor example:`{device_ids:[\"74ASZWbe4lXaubB36ztrGX\"]}`\u003cbr\u003e_**Note**: Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return `400 Bad Request`_\n                  items:\n                    type: string\n                play:\n                  type: boolean\n                  description: |\n                    **true**: ensure playback happens on new device.\u003cbr\u003e**false** or not provided: keep the current playback state.\n                  additionalProperties: true\n      responses:\n        \"204\":\n          description: Playback transferred\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-modify-playback-state\n  /me/player/devices:\n    x-spotify-docs-display-name: users-available-devices\n    x-spotify-docs-category: Player\n    get:\n      tags:\n        - Player\n      operationId: get-a-users-available-devices\n      x-spotify-docs-endpoint-name: Get a User's Available Devices\n      x-spotify-docs-console-url: /console/get-users-available-devices/\n      summary: |\n        Get Available Devices\n      description: |\n        Get information about a user’s available devices.\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ManyDevices\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-read-playback-state\n  /me/player/currently-playing:\n    x-spotify-docs-display-name: users-currently-playing-track\n    x-spotify-docs-category: Player\n    get:\n      tags:\n        - Player\n      operationId: get-the-users-currently-playing-track\n      x-spotify-docs-endpoint-name: Get the User's Currently Playing Track\n      x-spotify-docs-console-url: /console/get-users-currently-playing-track/\n      summary: |\n        Get Currently Playing Track\n      description: |\n        Get the object currently being played on the user's Spotify account.\n      parameters:\n        - $ref: '#/components/parameters/QueryMarket'\n        - $ref: '#/components/parameters/QueryAdditionalTypes'\n      responses:\n        \"200\":\n          description: \"#/components/responses/OneCurrentlyPlayingTrack\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-read-currently-playing\n  /me/player/play:\n    x-spotify-docs-display-name: play\n    x-spotify-docs-category: Player\n    put:\n      tags:\n        - Player\n      operationId: start-a-users-playback\n      x-spotify-docs-endpoint-name: Start/Resume a User's Playback\n      x-spotify-docs-console-url: /console/put-play/\n      summary: |\n        Start/Resume Playback\n      description: |\n        Start a new context or resume current playback on the user's active device.\n      parameters:\n        -\n          name: device_id\n          required: false\n          in: query\n          schema:\n            title: Device ID\n            description:\n              The id of the device this command is targeting. If\n              not supplied, the user's currently active device is the target.\n            example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                context_uri: spotify:album:5ht7ItJgpBH7W6vJ5BqpPr\n                offset:\n                  position: 5\n                position_ms: 0\n              type: object\n              additionalProperties: true\n              properties:\n                context_uri:\n                  type: string\n                  description: |\n                    string\n                  additionalProperties: true\n                uris:\n                  type: array\n                  description: |\n                    Array of URIs\n                  items:\n                    type: string\n                offset:\n                  type: object\n                  description: object\n                  additionalProperties: true\n                position_ms:\n                  type: integer\n                  description: integer\n                  additionalProperties: true\n      responses:\n        \"204\":\n          description: Playback started\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-modify-playback-state\n  /me/player/pause:\n    x-spotify-docs-display-name: pause\n    x-spotify-docs-category: Player\n    put:\n      tags:\n        - Player\n      operationId: pause-a-users-playback\n      x-spotify-docs-endpoint-name: Pause a User's Playback\n      x-spotify-docs-console-url: /console/put-pause/\n      summary: |\n        Pause Playback\n      description: |\n        Pause playback on the user's account.\n      parameters:\n        -\n          name: device_id\n          required: false\n          in: query\n          schema:\n            title: Device ID\n            description: |\n              The id of the device this command is targeting. If not supplied, the user's currently active device is the target.\n            example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8\n            type: string\n      responses:\n        \"204\":\n          description: Playback paused\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-modify-playback-state\n  /me/player/next:\n    x-spotify-docs-display-name: next\n    x-spotify-docs-category: Player\n    post:\n      tags:\n        - Player\n      operationId: skip-users-playback-to-next-track\n      x-spotify-docs-endpoint-name: Skip User’s Playback To Next Track\n      x-spotify-docs-console-url: /console/post-next/\n      summary: |\n        Skip To Next\n      description: |\n        Skips to next track in the user’s queue.\n      parameters:\n        -\n          name: device_id\n          required: false\n          in: query\n          schema:\n            title: Device ID\n            description:\n              The id of the device this command is targeting. If\n              not supplied, the user's currently active device is the target.\n            example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8\n            type: string\n      responses:\n        \"204\":\n          description: Command sent\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-modify-playback-state\n  /me/player/previous:\n    x-spotify-docs-display-name: previous\n    x-spotify-docs-category: Player\n    post:\n      tags:\n        - Player\n      operationId: skip-users-playback-to-previous-track\n      x-spotify-docs-endpoint-name: Skip User’s Playback To Previous Track\n      x-spotify-docs-console-url: /console/post-previous/\n      summary: |\n        Skip To Previous\n      description: |\n        Skips to previous track in the user’s queue.\n      parameters:\n        -\n          name: device_id\n          required: false\n          in: query\n          schema:\n            title: Device ID\n            description: |\n              The id of the device this command is targeting. If\n              not supplied, the user's currently active device is the target.\n            example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8\n            type: string\n      responses:\n        \"204\":\n          description: Command sent\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-modify-playback-state\n  /me/player/seek:\n    x-spotify-docs-display-name: seek\n    x-spotify-docs-category: Player\n    put:\n      tags:\n        - Player\n      operationId: seek-to-position-in-currently-playing-track\n      x-spotify-docs-endpoint-name: Seek To Position In Currently Playing Track\n      x-spotify-docs-console-url: /console/put-seek/\n      summary: |\n        Seek To Position\n      description: |\n        Seeks to the given position in the user’s currently playing track.\n      parameters:\n        -\n          name: position_ms\n          required: true\n          in: query\n          schema:\n            title: Position (ms)\n            description: |\n              The position in milliseconds to seek to. Must be a\n              positive number. Passing in a position that is greater than the length of\n              the track will cause the player to start playing the next song.\n            example: 25000\n            type: integer\n        -\n          name: device_id\n          required: false\n          in: query\n          schema:\n            title: Device ID\n            description: |\n              The id of the device this command is targeting. If\n              not supplied, the user's currently active device is the target.\n            example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8\n            type: string\n      responses:\n        \"204\":\n          description: Command sent\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-modify-playback-state\n  /me/player/repeat:\n    x-spotify-docs-display-name: repeat\n    x-spotify-docs-category: Player\n    put:\n      tags:\n        - Player\n      operationId: set-repeat-mode-on-users-playback\n      x-spotify-docs-endpoint-name: Set Repeat Mode On User’s Playback\n      x-spotify-docs-console-url: /console/put-repeat/\n      summary: |\n        Set Repeat Mode\n      description: |\n        Set the repeat mode for the user's playback. Options are repeat-track,\n        repeat-context, and off.\n      parameters:\n        -\n          name: state\n          required: true\n          in: query\n          schema:\n            title: State\n            description: |\n              **track**, **context** or **off**.\u003cbr\u003e\n              **track** will repeat the current track.\u003cbr\u003e\n              **context** will repeat the current context.\u003cbr\u003e\n              **off** will turn repeat off.\n            example: context\n            type: string\n        -\n          name: device_id\n          required: false\n          in: query\n          schema:\n            title: Device ID\n            description: |\n              The id of the device this command is targeting. If\n              not supplied, the user's currently active device is the target.\n            example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8\n            type: string\n      responses:\n        \"204\":\n          description: Command sent\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-modify-playback-state\n  /me/player/volume:\n    x-spotify-docs-display-name: volume\n    x-spotify-docs-category: Player\n    put:\n      tags:\n        - Player\n      operationId: set-volume-for-users-playback\n      x-spotify-docs-endpoint-name: Set Volume For User's Playback\n      x-spotify-docs-console-url: /console/put-volume/\n      summary: |\n        Set Playback Volume\n      description: |\n        Set the volume for the user’s current playback device.\n      parameters:\n        -\n          name: volume_percent\n          required: true\n          in: query\n          schema:\n            title: Volume %\n            description: |\n              The volume to set. Must be a value from 0 to 100 inclusive.\n            example: 50\n            type: integer\n        -\n          name: device_id\n          required: false\n          in: query\n          schema:\n            title: Device ID\n            description: |\n              The id of the device this command is targeting. If not supplied, the user's currently active device is the target.\n            example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8\n            type: string\n      responses:\n        \"204\":\n          description: Command sent\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-modify-playback-state\n  /me/player/shuffle:\n    x-spotify-docs-display-name: shuffle\n    x-spotify-docs-category: Player\n    put:\n      tags:\n        - Player\n      operationId: toggle-shuffle-for-users-playback\n      x-spotify-docs-endpoint-name: Toggle Shuffle For User’s Playback\n      x-spotify-docs-console-url: /console/put-shuffle/?state=true\n      summary: |\n        Toggle Playback Shuffle\n      description: |\n        Toggle shuffle on or off for user’s playback.\n      parameters:\n        -\n          name: state\n          required: true\n          in: query\n          schema:\n            title: State\n            description: |\n              **true** : Shuffle user's playback.\u003cbr\u003e\n              **false** : Do not shuffle user's playback.\n            example: true\n            type: boolean\n        -\n          name: device_id\n          required: false\n          in: query\n          schema:\n            title: Device ID\n            description: |\n              The id of the device this command is targeting. If\n              not supplied, the user's currently active device is the target.\n            example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8\n            type: string\n      responses:\n        \"204\":\n          description: Command sent\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-modify-playback-state\n  /me/player/recently-played:\n    x-spotify-docs-display-name: recently-played\n    x-spotify-docs-category: Player\n    get:\n      tags:\n        - Player\n      operationId: get-recently-played\n      x-spotify-docs-endpoint-name: Get Current User's Recently Played Tracks\n      x-spotify-docs-console-url: /console/get-recently-played/\n      summary: |\n        Get Recently Played Tracks\n      description: |\n        Get tracks from the current user's recently played tracks.\n        _**Note**: Currently doesn't support podcast episodes._\n      parameters:\n        -\n          name: limit\n          required: false\n          in: query\n          schema:\n            title: Limit\n            description: |\n              The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n            default: 20\n            example: 10\n            type: integer\n            minimum: 0\n            maximum: 50\n        -\n          name: after\n          required: false\n          in: query\n          schema:\n            title: After\n            description: |\n              A Unix timestamp in milliseconds. Returns all items\n              after (but not including) this cursor position. If `after` is specified, `before`\n              must not be specified.\n            example: 1484811043508\n            type: integer\n        -\n          name: before\n          required: false\n          in: query\n          schema:\n            title: Before\n            description: |\n              A Unix timestamp in milliseconds. Returns all items\n              before (but not including) this cursor position. If `before` is specified,\n              `after` must not be specified.\n            type: integer\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/CursorPaging\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-read-recently-played\n  /me/player/queue:\n    x-spotify-docs-display-name: queue\n    x-spotify-docs-category: Player\n    post:\n      tags:\n        - Player\n      operationId: add-to-queue\n      x-spotify-docs-endpoint-name: Add an item to queue\n      x-spotify-docs-console-url: /console/post-queue/\n      summary: |\n        Add Item to Playback Queue\n      description: |\n        Add an item to the end of the user's current playback queue.\n      parameters:\n        -\n          name: uri\n          required: true\n          in: query\n          schema:\n            title: Spotify URI\n            description: |\n              The uri of the item to add to the queue. Must be a track or an episode uri.\n            example: spotify:track:4iV5W9uYEdYUVa79Axb7Rh\n            type: string\n        -\n          name: device_id\n          required: false\n          in: query\n          schema:\n            title: Device ID\n            description: |\n              The id of the device this command is targeting. If\n              not supplied, the user's currently active device is the target.\n            example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8\n            type: string\n      responses:\n        \"204\":\n          description: Command received\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0:\n            - user-modify-playback-state\n  /markets:\n    x-spotify-docs-display-name: available-markets\n    x-spotify-docs-category: Markets\n    get:\n      tags:\n        - Markets\n      operationId: get-available-markets\n      x-spotify-docs-endpoint-name: Get Available Markets\n      x-spotify-docs-console-url: /console/get-available-markets/\n      summary: |\n        Get Available Markets\n      description: |\n        Get the list of markets where Spotify is available.\n      responses:\n        \"200\":\n          description: A markets object with an array of country codes\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  markets:\n                    type: array\n                    items:\n                      type: string\n                    example: [\"CA\", \"BR\", \"IT\"]\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"429\":\n          $ref: \"#/components/responses/TooManyRequests\"\n      security:\n        -\n          oauth_2_0: []\n\ncomponents:\n  securitySchemes:\n    oauth_2_0:\n      type: oauth2\n      description: Spotify supports OAuth 2.0 for authenticating all API requests.\n      flows:\n        authorizationCode:\n          authorizationUrl: https://accounts.spotify.com/authorize\n          tokenUrl: https://accounts.spotify.com/api/token\n          scopes:\n            app-remote-control: |\n              Communicate with the Spotify app on your device.\n            playlist-read-private: |\n              Access your private playlists.\n            playlist-read-collaborative: |\n              Access your collaborative playlists.\n            playlist-modify-public: |\n              Manage your public playlists.\n            playlist-modify-private: |\n              Manage your private playlists.\n            user-library-read: |\n              Access your saved content.\n            user-library-modify: |\n              Manage your saved content.\n            user-read-private: |\n              Access your subscription details.\n            user-read-email: |\n              Get your real email address.\n            user-follow-read: |\n              Access your followers and who you are following.\n            user-follow-modify: |\n              Manage your saved content.\n            user-top-read: |\n              Read your top artists and content.\n            user-read-playback-position: |\n              Read your position in content you have played.\n            user-read-playback-state: |\n              Read your currently playing content and Spotify Connect devices information.\n            user-read-recently-played: |\n              Access your recently played items.\n            user-read-currently-playing: |\n              Read your currently playing content.\n            user-modify-playback-state: |\n              Control playback on your Spotify clients and Spotify Connect devices.\n            ugc-image-upload: |\n              Upload images to Spotify on your behalf.\n            streaming: |\n              Play content and control playback on your other devices.\n  responses:\n    Unauthorized:\n      description: |\n        Bad or expired token. This can happen if the user revoked a token or\n        the access token has expired. You should re-authenticate the user.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - error\n            properties:\n              error:\n                $ref: \"#/components/schemas/ErrorObject\"\n\n    Forbidden:\n      description: |\n              Bad OAuth request (wrong consumer key, bad nonce, expired\n              timestamp...). Unfortunately, re-authenticating the user won't help here.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - error\n            properties:\n              error:\n                $ref: \"#/components/schemas/ErrorObject\"\n\n    TooManyRequests:\n      description: |\n              The app has exceeded its rate limits.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - error\n            properties:\n              error:\n                $ref: \"#/components/schemas/ErrorObject\"\n\n    ManyAlbums:\n      description: A set of albums\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - albums\n            properties:\n              albums:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AlbumObject'\n\n    ManyDevices:\n      description: A set of devices\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - devices\n            properties:\n              devices:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DeviceObject'\n\n    PagedAlbums:\n      description: A paged set of albums\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - albums\n            properties:\n              albums:\n                $ref: '#/components/schemas/PagingObject'\n\n    PagedCategories:\n      description: A paged set of categories\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - categories\n            properties:\n              categories:\n                $ref: '#/components/schemas/PagingObject'\n\n    PagedPlaylistsAndMessage:\n      description: A paged set of albums\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - playlists\n              - message\n            properties:\n              albums:\n                $ref: '#/components/schemas/PagingObject'\n              message:\n                type: string\n                description: A description of the playlists\n\n    PagedPlaylists:\n      description: A paged set of albums\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - playlists\n            properties:\n              albums:\n                $ref: '#/components/schemas/PagingObject'\n              message:\n                type: string\n                description: A description of the playlists\n\n    CursorPagedArtists:\n      description: A paged set of artists\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - artists\n            properties:\n              artists:\n                $ref: '#/components/schemas/CursorPagingObject'\n\n    CursorPaging:\n      description: A paged set of objects\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CursorPagingObject'\n\n    ManyArtists:\n      description: A set of artists\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - artists\n            properties:\n              artists:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ArtistObject'\n\n    ManyAudioFeatures:\n      description: A set of audio features\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - audio_features\n            properties:\n              audio_features:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AudioFeaturesObject'\n\n    ManyEpisodes:\n      description: A set of episodes\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - episodes\n            properties:\n              episodes:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EpisodeObject'\n\n    ManyGenres:\n      description: A set of genres\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - genres\n            properties:\n              genres:\n                type: array\n                example: [\"alternative\", \"samba\"]\n                items:\n                  type: string\n\n    OneEpisode:\n      description: An episode\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/EpisodeObject\"\n\n    OneAlbum:\n      description: An album\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AlbumObject\"\n\n    ArrayOfImages:\n      description: A set of images\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: \"#/components/schemas/ImageObject\"\n\n    OnePrivateUser:\n      description: A user\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/PrivateUserObject\"\n\n    OnePublicUser:\n      description: A user\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/PublicUserObject\"\n\n    OneTrack:\n      description: A track\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/TrackObject\"\n\n    OneShow:\n      description: A show\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ShowObject\"\n\n    OneCategory:\n      description: A category\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CategoryObject\"\n\n    OnePlaylist:\n      description: A playlist\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/PlaylistObject\"\n\n    OneAudioFeatures:\n      description: Audio features for one track\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AudioFeaturesObject\"\n\n    OneAudioAnalysis:\n      description: Audio analysis for one track\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AudioAnalysisObject\"\n\n    OneArtist:\n      description: An artist\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ArtistObject\"\n\n    ManyTracks:\n      description: A set of tracks\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - tracks\n            properties:\n              tracks:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TrackObject'\n\n    ManySimplifiedShows:\n      description: A set of shows\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - shows\n            properties:\n              shows:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SimplifiedShowObject'\n\n    PagingObject:\n      description: Pages of content\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/PagingObject\"\n\n    SearchItems:\n      description: Search response\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              tracks:\n                $ref: \"#/components/schemas/PagingObject\"\n              artists:\n                $ref: \"#/components/schemas/PagingObject\"\n              albums:\n                $ref: \"#/components/schemas/PagingObject\"\n              playlists:\n                $ref: \"#/components/schemas/PagingObject\"\n              shows:\n                $ref: \"#/components/schemas/PagingObject\"\n              episodes:\n                $ref: \"#/components/schemas/PagingObject\"\n\n    OneRecommendations:\n      description: A set of recommendations\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/RecommendationsObject\"\n\n    ArrayOfBooleans:\n      description: Array of booleans\n      content:\n        application/json:\n          schema:\n            type: array\n            example: [false, true]\n            items:\n              type: boolean\n\n    OneCurrentlyPlaying:\n      description: Information about playback\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CurrentlyPlayingContextObject\"\n\n    OneCurrentlyPlayingTrack:\n      description: Information about the currently playing track\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CurrentlyPlayingContextObject\"\n\n    PlaylistSnapshotId:\n      description: A snapshot ID for the playlist\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              snapshot_id:\n                type: string\n                example: \"abc\"\n\n  #-------------------------------\n  # Reusable schemas (data models)\n  #-------------------------------\n  schemas:\n    LinkedTrackObject:\n      type: object\n      x-spotify-docs-type: LinkedTrackObject\n      properties:\n        external_urls:\n          allOf:\n            - $ref: '#/components/schemas/ExternalUrlObject'\n          description: |\n            Known external URLs for this track.\n        href:\n          type: string\n          description: |\n            A link to the Web API endpoint providing full details of the track.\n        id:\n          type: string\n          description: |\n            The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) for the track.\n        type:\n          type: string\n          description: |\n            The object type: \"track\".\n        uri:\n          type: string\n          description: |\n            The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the track.\n\n    TrackRestrictionObject:\n      type: object\n      x-spotify-docs-type: TrackRestrictionObject\n      properties:\n        reason:\n          type: string\n          description: |\n            The reason for the restriction. Supported values:\u003cbr\u003e\n            - `market` - The content item is not available in the given market.\u003cbr\u003e\n            - `product` - The content item is not available for the user's subscription type.\u003cbr\u003e\n            - `explicit` - The content item is explicit and the user's account is set to not play explicit content.\u003cbr\u003e\n            Additional reasons may be added in the future.\n            **Note**: If you use this field, make sure that your application safely handles unknown values.\n\n    AlbumRestrictionObject:\n      type: object\n      x-spotify-docs-type: AlbumRestrictionObject\n      properties:\n        reason:\n          type: string\n          enum: [\"market\", \"product\", \"explicit\"]\n          description: |\n            The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user's subscription type, or when the user's account is set to not play explicit content.\n            Additional reasons may be added in the future.\n\n    EpisodeRestrictionObject:\n      type: object\n      x-spotify-docs-type: EpisodeRestrictionObject\n      properties:\n        reason:\n          type: string\n          description: |\n            The reason for the restriction. Supported values:\u003cbr\u003e\n            - `market` - The content item is not available in the given market.\u003cbr\u003e\n            - `product` - The content item is not available for the user's subscription type.\u003cbr\u003e\n            - `explicit` - The content item is explicit and the user's account is set to not play explicit content.\u003cbr\u003e\n            Additional reasons may be added in the future.\n            **Note**: If you use this field, make sure that your application safely handles unknown values.\n\n    ArtistObject:\n      type: object\n      x-spotify-docs-type: ArtistObject\n      properties:\n        external_urls:\n          allOf:\n            - $ref: '#/components/schemas/ExternalUrlObject'\n          description: |\n            Known external URLs for this artist.\n        followers:\n          allOf:\n            - $ref: '#/components/schemas/FollowersObject'\n          description: |\n            Information about the followers of the artist.\n        genres:\n          type: array\n          items:\n            type: string\n          example: [\"Prog rock\", \"Grunge\"]\n          description: |\n            A list of the genres the artist is associated with. If not yet classified, the array is empty.\n        href:\n          type: string\n          description: |\n            A link to the Web API endpoint providing full details of the artist.\n        id:\n          type: string\n          description: |\n            The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) for the artist.\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageObject'\n          description: |\n            Images of the artist in various sizes, widest first.\n        name:\n          type: string\n          description: |\n            The name of the artist.\n        popularity:\n          type: integer\n          description: |\n            The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist's popularity is calculated from the popularity of all the artist's tracks.\n        type:\n          type: string\n          enum: [\"artist\"]\n          description: |\n            The object type.\n        uri:\n          type: string\n          description: |\n            The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the artist.\n\n    SimplifiedArtistObject:\n      type: object\n      x-spotify-docs-type: SimplifiedArtistObject\n      properties:\n        external_urls:\n          allOf:\n            - $ref: '#/components/schemas/ExternalUrlObject'\n          description: |\n            Known external URLs for this artist.\n        href:\n          type: string\n          description: |\n            A link to the Web API endpoint providing full details of the artist.\n        id:\n          type: string\n          description: |\n            The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) for the artist.\n        name:\n          type: string\n          description: |\n            The name of the artist.\n        type:\n          type: string\n          enum: [\"artist\"]\n          description: |\n            The object type.\n        uri:\n          type: string\n          description: |\n            The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the artist.\n\n    PlayHistoryObject:\n      type: object\n      x-spotify-docs-type: PlayHistoryObject\n      properties:\n        track:\n          allOf:\n            - $ref: '#/components/schemas/SimplifiedTrackObject'\n          description: The track the user listened to.\n        played_at:\n          type: string\n          format: date-time\n          x-spotify-docs-type: Timestamp\n          description: The date and time the track was played.\n        context:\n          allOf:\n            - $ref: '#/components/schemas/ContextObject'\n          description: The context the track was played from.\n\n    PlaylistTrackObject:\n      type: object\n      x-spotify-docs-type: PlaylistTrackObject\n      properties:\n        added_at:\n          type: string\n          format: date-time\n          x-spotify-docs-type: Timestamp\n          description: |\n            The date and time the track or episode was added. _**Note**: some very old playlists may return `null` in this field._\n        added_by:\n          allOf:\n            - $ref: '#/components/schemas/PlaylistUserObject'\n          description: |\n            The Spotify user who added the track or episode. _**Note**: some very old playlists may return `null` in this field._\n        is_local:\n          type: boolean\n          description: |\n            Whether this track or episode is a [local file](https://developer.spotify.com/web-api/local-files-spotify-playlists/) or not.\n        track:\n          oneOf:\n           - $ref: '#/components/schemas/TrackObject'\n           - $ref: '#/components/schemas/EpisodeObject'\n          x-spotify-docs-type: TrackObject | EpisodeObject\n          description: Information about the track or episode.\n\n    CurrentlyPlayingObject:\n      type: object\n      x-spotify-docs-type: CurrentlyPlayingObject\n      properties:\n        context:\n          allOf:\n            - $ref: '#/components/schemas/ContextObject'\n          description: A Context Object. Can be `null`.\n        timestamp:\n          type: integer\n          description: Unix Millisecond Timestamp when data was fetched\n        progress_ms:\n          type: integer\n          description: Progress into the currently playing track or episode. Can be `null`.\n        is_playing:\n          type: boolean\n          description: If something is currently playing, return `true`.\n        item:\n          oneOf:\n           - $ref: '#/components/schemas/TrackObject'\n           - $ref: '#/components/schemas/EpisodeObject'\n          x-spotify-docs-type: TrackObject | EpisodeObject\n          description: The currently playing track or episode. Can be `null`.\n        currently_playing_type:\n          type: string\n          description: |\n            The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`.\n\n    CurrentlyPlayingContextObject:\n      type: object\n      x-spotify-docs-type: CurrentlyPlayingContextObject\n      properties:\n        device:\n          allOf:\n            - $ref: '#/components/schemas/DeviceObject'\n          description: |\n            The device that is currently active.\n        repeat_state:\n          type: string\n          description: off, track, context\n        shuffle_state:\n          type: string\n          description: If shuffle is on or off.\n        context:\n          allOf:\n            - $ref: '#/components/schemas/ContextObject'\n          description: A Context Object. Can be `null`.\n        timestamp:\n          type: integer\n          description: Unix Millisecond Timestamp when data was fetched.\n        progress_ms:\n          type: integer\n          description: Progress into the currently playing track or episode. Can be `null`.\n        is_playing:\n          type: boolean\n          description: If something is currently playing, return `true`.\n        item:\n          oneOf:\n           - $ref: '#/components/schemas/TrackObject'\n           - $ref: '#/components/schemas/EpisodeObject'\n          x-spotify-docs-type: TrackObject | EpisodeObject\n          description: The currently playing track or episode. Can be `null`.\n        currently_playing_type:\n          type: string\n          description: |\n            The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`.\n        actions:\n          allOf:\n            - $ref: '#/components/schemas/DisallowsObject'\n          description: |\n            Allows to update the user interface based on which playback actions are available within the current context.\n\n    DisallowsObject:\n      type: object\n      x-spotify-docs-type: DisallowsObject\n      properties:\n        interrupting_playback:\n          type: boolean\n          description: Interrupting playback. Optional field.\n        pausing:\n          type: boolean\n          description: Pausing. Optional field.\n        resuming:\n          type: boolean\n          description: Resuming. Optional field.\n        seeking:\n          type: boolean\n          description: Seeking playback location. Optional field.\n        skipping_next:\n          type: boolean\n          description: Skipping to the next context. Optional field.\n        skipping_prev:\n          type: boolean\n          description: Skipping to the previous context. Optional field.\n        toggling_repeat_context:\n          type: boolean\n          description: Toggling repeat context flag. Optional field.\n        toggling_shuffle:\n          type: boolean\n          description: Toggling shuffle flag. Optional field.\n        toggling_repeat_track:\n          type: boolean\n          description: Toggling repeat track flag. Optional field.\n        transferring_playback:\n          type: boolean\n          description: Transfering playback between devices. Optional field.\n\n    ErrorObject:\n      type: object\n      x-spotify-docs-type: ErrorObject\n      required:\n        - status\n        - message\n      properties:\n        status:\n          type: integer\n          minimum: 400\n          maximum: 599\n          description: |\n            The HTTP status code (also returned in the response header; see [Response Status Codes](/documentation/web-api/#response-status-codes) for more information).\n        message:\n          type: string\n          description: |\n            A short description of the cause of the error.\n\n    PlayerErrorObject:\n      type: object\n      x-spotify-docs-type: PlayerErrorObject\n      properties:\n        status:\n          type: integer\n          description: |\n            The HTTP status code. Either `404 NOT FOUND` or `403 FORBIDDEN`.  Also returned in the response header.\n        message:\n          type: string\n          description: |\n            A short description of the cause of the error.\n        reason:\n          allOf:\n            - $ref: '#/components/schemas/PlayerErrorReasons'\n\n    PlayerErrorReasons:\n      type: string\n      enum:\n        - NO_PREV_TRACK\n        - NO_NEXT_TRACK\n        - NO_SPECIFIC_TRACK\n        - ALREADY_PAUSED\n        - NOT_PAUSED\n        - NOT_PLAYING_LOCALLY\n        - NOT_PLAYING_TRACK\n        - NOT_PLAYING_CONTEXT\n        - ENDLESS_CONTEXT\n        - CONTEXT_DISALLOW\n        - ALREADY_PLAYING\n        - RATE_LIMITED\n        - REMOTE_CONTROL_DISALLOW\n        - DEVICE_NOT_CONTROLLABLE\n        - VOLUME_CONTROL_DISALLOW\n        - NO_ACTIVE_DEVICE\n        - PREMIUM_REQUIRED\n        - UNKNOWN\n      description: |\n        * `NO_PREV_TRACK` - The command requires a previous track, but there is none in the context.\n        * `NO_NEXT_TRACK` - The command requires a next track, but there is none in the context.\n        * `NO_SPECIFIC_TRACK` - The requested track does not exist.\n        * `ALREADY_PAUSED` - The command requires playback to not be paused.\n        * `NOT_PAUSED` - The command requires playback to be paused.\n        * `NOT_PLAYING_LOCALLY` - The command requires playback on the local device.\n        * `NOT_PLAYING_TRACK` - The command requires that a track is currently playing.\n        * `NOT_PLAYING_CONTEXT` - The command requires that a context is currently playing.\n        * `ENDLESS_CONTEXT` - The shuffle command cannot be applied on an endless context.\n        * `CONTEXT_DISALLOW` - The command could not be performed on the context.\n        * `ALREADY_PLAYING` - The track should not be restarted if the same track and context is already playing, and there is a resume point.\n        * `RATE_LIMITED` - The user is rate limited due to too frequent track play, also known as cat-on-the-keyboard spamming.\n        * `REMOTE_CONTROL_DISALLOW` - The context cannot be remote-controlled.\n        * `DEVICE_NOT_CONTROLLABLE` - Not possible to remote control the device.\n        * `VOLUME_CONTROL_DISALLOW` - Not possible to remote control the device's volume.\n        * `NO_ACTIVE_DEVICE` - Requires an active device and the user has none.\n        * `PREMIUM_REQUIRED` - The request is prohibited for non-premium users.\n        * `UNKNOWN` - Certain actions are restricted because of unknown reasons.\n\n    PrivateUserObject:\n      type: object\n      x-spotify-docs-type: PrivateUserObject\n      properties:\n        country:\n          type: string\n          description: |\n            The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the current user has granted access to the [user-read-private](/documentation/general/guides/authorization-guide/#list-of-scopes) scope._\n        display_name:\n          type: string\n          description: |\n            The name displayed on the user's profile. `null` if not available.\n        email:\n          type: string\n          description: |\n            The user's email address, as entered by the user when creating their account. _**Important!** This email address is unverified; there is no proof that it actually belongs to the user._ _This field is only available when the current user has granted access to the [user-read-email](/documentation/general/guides/authorization-guide/#list-of-scopes) scope._\n        explicit_content:\n          allOf:\n            - $ref: '#/components/schemas/ExplicitContentSettingsObject'\n          description: |\n            The user's explicit content settings. _This field is only available when the current user has granted access to the [user-read-private](/documentation/general/guides/authorization-guide/#list-of-scopes) scope._\n        external_urls:\n          allOf:\n            - $ref: '#/components/schemas/ExternalUrlObject'\n          description: Known external URLs for this user.\n        followers:\n          allOf:\n            - $ref: '#/components/schemas/FollowersObject'\n          description: Information about the followers of the user.\n        href:\n          type: string\n          description: |\n            A link to the Web API endpoint for this user.\n        id:\n          type: string\n          description: |\n            The [Spotify user ID](/documentation/web-api/#spotify-uris-and-ids) for the user.\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageObject'\n          description: The user's profile image.\n        product:\n          type: string\n          description: |\n            The user's Spotify subscription level: \"premium\", \"free\", etc. (The subscription level \"open\" can be considered the same as \"free\".) _This field is only available when the current user has granted access to the [user-read-private](/documentation/general/guides/authorization-guide/#list-of-scopes) scope._\n        type:\n          type: string\n          description: |\n            The object type: \"user\"\n        uri:\n          type: string\n          description: |\n            The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the user.\n\n    PublicUserObject:\n      type: object\n      x-spotify-docs-type: PublicUserObject\n      properties:\n        display_name:\n          type: string\n          nullable: true\n          description: |\n            The name displayed on the user's profile. `null` if not available.\n        external_urls:\n          allOf:\n            - $ref: '#/components/schemas/ExternalUrlObject'\n          description: |\n            Known public external URLs for this user.\n        followers:\n          allOf:\n            - $ref: '#/components/schemas/FollowersObject'\n          description: |\n            Information about the followers of this user.\n        href:\n          type: string\n          description: |\n            A link to the Web API endpoint for this user.\n        id:\n          type: string\n          description: |\n            The [Spotify user ID](/documentation/web-api/#spotify-uris-and-ids) for this user.\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageObject'\n          description: |\n            The user's profile image.\n        type:\n          type: string\n          enum: [\"user\"]\n          description: |\n            The object type.\n        uri:\n          type: string\n          description: |\n            The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for this user.\n\n    AudioAnalysisObject:\n      type: object\n      x-spotify-docs-type: AudioAnalysisObject\n      properties:\n        meta:\n          type: object\n          properties:\n            analyzer_version:\n              type: string\n              example: \"4.0.0\"\n              description: The version of the Analyzer used to analyze this track.\n            platform:\n              type: string\n              example: \"Linux\"\n              description: The platform used to read the track's audio data.\n            detailed_status:\n              type: string\n              example: \"OK\"\n              description: A detailed status code for this track. If analysis data is missing, this code may explain why.\n            status_code:\n              type: integer\n              example: 0\n              description: The return code of the analyzer process. 0 if successful, 1 if any errors occurred.\n            timestamp:\n              type: integer\n              example: 1495193577\n              description: The Unix timestamp (in seconds) at which this track was analyzed.\n            analysis_time:\n              type: number\n              example: 6.93906\n              description: The amount of time taken to analyze this track.\n            input_process:\n              type: string\n              example: libvorbisfile L+R 44100-\u003e22050\n              description: The method used to read the track's audio data.\n        track:\n          type: object\n          properties:\n            num_samples:\n              type: integer\n              example: 4585515\n              description: The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.\n            duration:\n              type: number\n              description: Length of the track in seconds.\n              example: 207.95985\n            sample_md5:\n              type: string\n              description: This field will always contain the empty string.\n            offset_seconds:\n              type: integer\n              example: 0\n              description: An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)\n            window_seconds:\n              type: integer\n              example: 0\n              description: The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)\n            analysis_sample_rate:\n              type: integer\n              example: 22050\n              description: The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.\n            analysis_channels:\n              type: integer\n              example: 1\n              description: The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.\n            end_of_fade_in:\n              type: number\n              example: 0.0\n              description: The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.\n            start_of_fade_out:\n              type: number\n              example: 201.13705\n              description: The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.\n            loudness:\n              $ref: '#/components/schemas/Loudness'\n            tempo:\n              $ref: '#/components/schemas/Tempo'\n            tempo_confidence:\n              type: number\n              example: 0.73\n              minimum: 0\n              maximum: 1\n              description: The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.\n            time_signature:\n              $ref: '#/components/schemas/TimeSignature'\n            time_signature_confidence:\n              type: number\n              example:  0.994\n              minimum: 0\n              maximum: 1\n              description: The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.\n            key:\n              $ref: '#/components/schemas/Key'\n            key_confidence:\n              type: number\n              example: 0.408\n              minimum: 0\n              maximum: 1\n              description: The confidence, from 0.0 to 1.0, of the reliability of the `key`.\n            mode:\n              $ref: '#/components/schemas/Mode'\n            mode_confidence:\n              type: number\n              example: 0.485\n              minimum: 0\n              maximum: 1\n              description: The confidence, from 0.0 to 1.0, of the reliability of the `mode`.\n            codestring:\n              type: string\n              description: An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.\n            code_version:\n              type: number\n              example: 3.15\n              description: A version number for the Echo Nest Musical Fingerprint format used in the codestring field.\n            echoprintstring:\n              type: string\n              description: An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.\n            echoprint_version:\n              type: number\n              example: 4.15\n              description: A version number for the EchoPrint format used in the echoprintstring field.\n            synchstring:\n              type: string\n              description: A [Synchstring](https://github.com/echonest/synchdata) for this track.\n            synch_version:\n              type: number\n              example: 1.0\n              description: A version number for the Synchstring used in the synchstring field.\n            rhythmstring:\n              type: string\n              description: A Rhythmstring for this track. The format of this string is similar to the Synchstring.\n            rhythm_version:\n              type: number\n              example: 1.0\n              description: A version number for the Rhythmstring used in the rhythmstring field.\n        bars:\n          type: array\n          description: The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats.\n          items:\n            $ref: '#/components/schemas/TimeIntervalObject'\n        beats:\n          type: array\n          description: The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.\n          items:\n            $ref: '#/components/schemas/TimeIntervalObject'\n        sections:\n          type: array\n          description: Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.\n          items:\n            $ref: '#/components/schemas/SectionObject'\n        segments:\n          type: array\n          description: Each segment contains a roughly conisistent sound throughout its duration.\n          items:\n            $ref: '#/components/schemas/SegmentObject'\n        tatums:\n          type: array\n          description: A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments).\n          items:\n            $ref: '#/components/schemas/TimeIntervalObject'\n\n    TimeIntervalObject:\n      type: object\n      properties:\n        start:\n          type: number\n          description: The starting point (in seconds) of the time interval.\n          example: 0.49567\n        duration:\n          type: number\n          description: The duration (in seconds) of the time interval.\n          example: 2.18749\n        confidence:\n          type: number\n          description: The confidence, from 0.0 to 1.0, of the reliability of the interval.\n          example: 0.925\n          minimum: 0\n          maximum: 1\n\n    SectionObject:\n      type: object\n      properties:\n        start:\n          type: number\n          description: The starting point (in seconds) of the section.\n          example: 0.0\n        duration:\n          type: number\n          description: The duration (in seconds) of the section.\n          example: 6.97092\n        confidence:\n          type: number\n          description: The confidence, from 0.0 to 1.0, of the reliability of the section's \"designation\".\n          example: 1.0\n          minimum: 0\n          maximum: 1\n        loudness:\n          type: number\n          description: The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks.\n          example: -14.938\n        tempo:\n          type: number\n          description: The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.\n          example: 113.178\n        tempo_confidence:\n          type: number\n          description: The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes or sounds which don't contain tempo (like pure speech) which would correspond to a low value in this field.\n          example: 0.647\n          minimum: 0\n          maximum: 1\n        key:\n          type: integer\n          description: The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on). If no key was detected, the value is -1.\n          example: 9\n        key_confidence:\n          type: number\n          description: The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may correspond to low values in this field.\n          example: 0.297\n          minimum: 0\n          maximum: 1\n        mode:\n          type: number\n          description: Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for \"minor\", a 1 for \"major\", or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.\n          enum:\n            - -1\n            - 0\n            - 1\n        mode_confidence:\n          type: number\n          description: The confidence, from 0.0 to 1.0, of the reliability of the `mode`.\n          example: 0.471\n          minimum: 0\n          maximum: 1\n        time_signature:\n          $ref: '#/components/schemas/TimeSignature'\n        time_signature_confidence:\n          type: number\n          description: The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`. Sections with time signature changes may correspond to low values in this field.\n          example: 1.0\n          minimum: 0\n          maximum: 1\n\n    SegmentObject:\n      type: object\n      properties:\n        start:\n          type: number\n          description: The starting point (in seconds) of the segment.\n          example: 0.70154\n        duration:\n          type: number\n          description: The duration (in seconds) of the segment.\n          example: 0.19891\n        confidence:\n          type: number\n          example: 0.435\n          minimum: 0\n          maximum: 1\n          description: |\n            The confidence, from 0.0 to 1.0, of the reliability of the segmentation. Segments of the song which are difficult to logically segment (e.g: noise) may correspond to low values in this field.\n        loudness_start:\n          type: number\n          description: The onset loudness of the segment in decibels (dB). Combined with `loudness_max` and `loudness_max_time`, these components can be used to describe the \"attack\" of the segment.\n          example: -23.053\n        loudness_max:\n          type: number\n          description: The peak loudness of the segment in decibels (dB). Combined with `loudness_start` and `loudness_max_time`, these components can be used to describe the \"attack\" of the segment.\n          example: -14.25\n        loudness_max_time:\n          type: number\n          description: The segment-relative offset of the segment peak loudness in seconds. Combined with `loudness_start` and `loudness_max`, these components can be used to desctibe the \"attack\" of the segment.\n          example: 0.07305\n        loudness_end:\n          type: number\n          description:  The offset loudness of the segment in decibels (dB). This value should be equivalent to the loudness_start of the following segment.\n          example: 0.0\n        pitches:\n          type: array\n          description: |\n            Pitch content is given by a “chroma” vector, corresponding to the 12 pitch classes C, C#, D to B, with values ranging from 0 to 1 that describe the relative dominance of every pitch in the chromatic scale. For example a C Major chord would likely be represented by large values of C, E and G (i.e. classes 0, 4, and 7).\n\n            Vectors are normalized to 1 by their strongest dimension, therefore noisy sounds are likely represented by values that are all close to 1, while pure tones are described by one value at 1 (the pitch) and others near 0.\n            As can be seen below, the 12 vector indices are a combination of low-power spectrum values at their respective pitch frequencies.\n            \u003cimg src=\"https://developer.spotify.com/assets/audio/Pitch_vector.png\" /\u003e\n          items:\n            type: number\n            minimum: 0\n            maximum: 1\n          example: [0.212, 0.141, 0.294]\n        timbre:\n          type: array\n          description: |\n            Timbre is the quality of a musical note or sound that distinguishes different types of musical instruments, or voices. It is a complex notion also referred to as sound color, texture, or tone quality, and is derived from the shape of a segment’s spectro-temporal surface, independently of pitch and loudness. The timbre feature is a vector that includes 12 unbounded values roughly centered around 0. Those values are high level abstractions of the spectral surface, ordered by degree of importance.\n\n            For completeness however, the first dimension represents the average loudness of the segment; second emphasizes brightness; third is more closely correlated to the flatness of a sound; fourth to sounds with a stronger attack; etc. See an image below representing the 12 basis functions (i.e. template segments).\n            \u003cimg src=\"https://developer.spotify.com/assets/audio/Timbre_basis_functions.png\" /\u003e\n\n            The actual timbre of the segment is best described as a linear combination of these 12 basis functions weighted by the coefficient values: timbre = c1 x b1 + c2 x b2 + ... + c12 x b12, where c1 to c12 represent the 12 coefficients and b1 to b12 the 12 basis functions as displayed below. Timbre vectors are best used in comparison with each other.\n          items:\n            type: number\n          example: [42.115, 64.373, -0.233]\n\n    TimeSignature:\n      type: integer\n      description: An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".\n      example: 4\n      minimum: 3\n      maximum: 7\n\n    Tempo:\n      type: number\n      example: 118.211\n      format: float\n      x-spotify-docs-type: Float\n      description: |\n        The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.\n\n    Loudness:\n      type: number\n      example: -5.883\n      format: float\n      x-spotify-docs-type: Float\n      description: |\n        The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db.\n\n    Key:\n      type: integer\n      example: 9\n      minimum: -1\n      maximum: 11\n      description: |\n        The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.\n\n    Mode:\n      type: integer\n      example: 0\n      description: |\n        Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.\n\n    AudioFeaturesObject:\n      type: object\n      x-spotify-docs-type: AudioFeaturesObject\n      properties:\n        acousticness:\n          type: number\n          format: float\n          example: 0.00242\n          minimum: 0.0\n          maximum: 1.0\n          x-spotify-docs-type: Float\n          description: |\n            A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.\n        analysis_url:\n          type: string\n          example: |\n            https://api.spotify.com/v1/audio-analysis/2takcwOaAZWiXQijPHIx7B\n          description: |\n            A URL to access the full audio analysis of this track. An access token is required to access this data.\n        danceability:\n          type: number\n          example: 0.585\n          format: float\n          x-spotify-docs-type: Float\n          description: |\n            Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.\n        duration_ms:\n          type: integer\n          example: 237040\n          description: |\n            The duration of the track in milliseconds.\n        energy:\n          type: number\n          example: 0.842\n          format: float\n          x-spotify-docs-type: Float\n          description: |\n            Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.\n        id:\n          type: string\n          example: 2takcwOaAZWiXQijPHIx7B\n          description: |\n            The Spotify ID for the track.\n        instrumentalness:\n          type: number\n          example: 0.00686\n          format: float\n          x-spotify-docs-type: Float\n          description: |\n            Predicts whether a track contains no vocals. \"Ooh\" and \"aah\" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.\n        key:\n          $ref: '#/components/schemas/Key'\n        liveness:\n          type: number\n          example: 0.0866\n          format: float\n          x-spotify-docs-type: Float\n          description: |\n            Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.\n        loudness:\n          $ref: '#/components/schemas/Loudness'\n        mode:\n          $ref: '#/components/schemas/Mode'\n        speechiness:\n          type: number\n          example: 0.0556\n          format: float\n          x-spotify-docs-type: Float\n          description: |\n            Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.\n        tempo:\n          $ref: '#/components/schemas/Tempo'\n        time_signature:\n          $ref: '#/components/schemas/TimeSignature'\n        track_href:\n          type: string\n          example: |\n            https://api.spotify.com/v1/tracks/2takcwOaAZWiXQijPHIx7B\n          description: |\n            A link to the Web API endpoint providing full details of the track.\n        type:\n          type: string\n          enum: [\"audio_features\"]\n          description: |\n            The object type.\n        uri:\n          type: string\n          example: spotify:track:2takcwOaAZWiXQijPHIx7B\n          description: |\n            The Spotify URI for the track.\n        valence:\n          type: number\n          example: 0.428\n          minimum: 0\n          maximum: 1\n          format: float\n          x-spotify-docs-type: Float\n          description: |\n            A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).\n\n    SimplifiedTrackObject:\n      type: object\n      x-spotify-docs-type: SimplifiedTrackObject\n      properties:\n        artists:\n          type: array\n          items:\n            $ref: '#/components/schemas/SimplifiedArtistObject'\n          description: The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.\n        available_markets:\n          type: array\n          items:\n            type: string\n          description: |\n            A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.\n        disc_number:\n          type: integer\n          description: The disc number (usually `1` unless the album consists of more than one disc).\n        duration_ms:\n          type: integer\n          description: The track length in milliseconds.\n        explicit:\n          type: boolean\n          description: Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).\n        external_urls:\n          allOf:\n            - $ref: '#/components/schemas/ExternalUrlObject'\n          description: |\n            External URLs for this track.\n        href:\n          type: string\n          description: A link to the Web API endpoint providing full details of the track.\n        id:\n          type: string\n          description: |\n            The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) for the track.\n        is_playable:\n          type: boolean\n          description: |\n            Part of the response when [Track Relinking](/documentation/general/guides/track-relinking-guide/) is applied. If `true`, the track is playable in the given market. Otherwise `false`.\n        linked_from:\n          allOf:\n            - $ref: '#/components/schemas/LinkedTrackObject'\n          description: Part of the response when [Track Relinking](/documentation/general/guides/track-relinking-guide/) is applied and is only part of the response if the track linking, in fact, exists. The requested track has been replaced with a different track. The track in the `linked_from` object contains information about the originally requested track.\n        restrictions:\n          allOf:\n            - $ref: '#/components/schemas/TrackRestrictionObject'\n          description: |\n            Included in the response when a content restriction is applied.\n            See [Restriction Object](/documentation/web-api/reference/#object-trackrestrictionobject) for more details.\n        name:\n          type: string\n          description: The name of the track.\n        preview_url:\n          type: string\n          description: |\n            A URL to a 30 second preview (MP3 format) of the track.\n        track_number:\n          type: integer\n          description: |\n            The number of the track. If an album has several discs, the track number is the number on the specified disc.\n        type:\n          type: string\n          description: |\n            The object type: \"track\".\n        uri:\n          type: string\n          description: |\n            The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the track.\n        is_local:\n          type: boolean\n          description: |\n            Whether or not the track is from a local file.\n\n    DevicesObject:\n      type: object\n      x-spotify-docs-type: DevicesObject\n      properties:\n        devices:\n          type: array\n          items:\n            $ref: '#/components/schemas/DeviceObject'\n          description: A list of 0..n Device objects\n\n    DeviceObject:\n      type: object\n      x-spotify-docs-type: DeviceObject\n      properties:\n        id:\n          type: string\n          nullable: true\n          description: The device ID.\n        is_active:\n          type: boolean\n          description: If this device is the currently active device.\n        is_private_session:\n          type: boolean\n          description: If this device is currently in a private session.\n        is_restricted:\n          type: boolean\n          description: Whether controlling this device is restricted. At present if this is \"true\" then no Web API commands will be accepted by this device.\n        name:\n          type: string\n          example: \"Loudest speaker\"\n          description: The name of the device.\n        type:\n          type: string\n          example: \"computer\"\n          description: Device type, such as \"computer\", \"smartphone\" or \"speaker\".\n        volume_percent:\n          type: integer\n          minimum: 0\n          example: 59\n          maximum: 100\n          nullable: true\n          description: The current volume in percent.\n\n    CursorObject:\n      type: object\n      x-spotify-docs-type: CursorObject\n      properties:\n        after:\n          type: string\n          description: The cursor to use as key to find the next page of items.\n\n    CursorPagingObject:\n      type: object\n      x-spotify-docs-type: CursorPagingObject\n      properties:\n        href:\n          type: string\n          description: A link to the Web API endpoint returning the full result of the request.\n        items:\n          type: array\n          items:\n            type: object\n          description: The requested data.\n        limit:\n          type: integer\n          description: The maximum number of items in the response (as set in the query or by default).\n        next:\n          type: string\n          description: URL to the next page of items. ( `null` if none)\n        cursors:\n          allOf:\n            - $ref: '#/components/schemas/CursorObject'\n          description: The cursors used to find the next set of items.\n        total:\n          type: integer\n          description: The total number of items available to return.\n\n    PagingObject:\n      type: object\n      x-spotify-docs-type: PagingObject\n      required:\n        - href\n        - items\n        - limit\n        - next\n        - offset\n        - previous\n        - total\n      properties:\n        href:\n          type: string\n          example: |\n            https://api.spotify.com/v1/me/shows?offset=0\u0026limit=20\n          description: |\n            A link to the Web API endpoint returning the full result of the request\n        items:\n          type: array\n          items:\n            type: object\n          description: |\n             The requested content\n        limit:\n          type: integer\n          example: 20\n          description: |\n            The maximum number of items in the response (as set in the query or by default).\n        next:\n          type: string\n          example: https://api.spotify.com/v1/me/shows?offset=1\u0026limit=1\n          nullable: true\n          description: |\n            URL to the next page of items. ( `null` if none)\n        offset:\n          type: integer\n          example: 0\n          description: |\n            The offset of the items returned (as set in the query or by default)\n        previous:\n          type: string\n          example: https://api.spotify.com/v1/me/shows?offset=1\u0026limit=1\n          nullable: true\n          description: |\n            URL to the previous page of items. ( `null` if none)\n        total:\n          type: integer\n          example: 4\n          description: |\n            The total number of items available to return.\n\n    RecommendationsObject:\n      type: object\n      x-spotify-docs-type: RecommendationsObject\n      required:\n        - seeds\n        - tracks\n      properties:\n        seeds:\n          type: array\n          items:\n            $ref: '#/components/schemas/RecommendationSeedObject'\n          description: |\n            An array of [recommendation seed objects](/documentation/web-api/reference/#object-recommendationseedobject).\n        tracks:\n          type: array\n          items:\n            $ref: '#/components/schemas/SimplifiedTrackObject'\n          description: |\n            An array of [track object (simplified)](/documentation/web-api/reference/#object-simplifiedtrackobject) ordered according to the parameters supplied.\n\n    RecommendationSeedObject:\n      type: object\n      x-spotify-docs-type: RecommendationSeedObject\n      properties:\n        afterFilteringSize:\n          type: integer\n          description: |\n            The number of tracks available after min\\_\\* and max\\_\\* filters have been applied.\n        afterRelinkingSize:\n          type: integer\n          description: |\n            The number of tracks available after relinking for regional availability.\n        href:\n          type: string\n          description: |\n            A link to the full track or artist data for this seed. For tracks this will be a link to a [Track Object](/documentation/web-api/reference/#object-trackobject). For artists a link to [an Artist Object](/documentation/web-api/reference/#object-artistobject). For genre seeds, this value will be `null`.\n        id:\n          type: string\n          description: |\n            The id used to select this seed. This will be the same as the string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter.\n        initialPoolSize:\n          type: integer\n          description: |\n            The number of recommended tracks available for this seed.\n        type:\n          type: string\n          description: |\n            The entity type of this seed. One of `artist`, `track` or `genre`.\n\n    SavedAlbumObject:\n      type: object\n      x-spotify-docs-type: SavedAlbumObject\n      properties:\n        added_at:\n          type: string\n          format: date-time\n          x-spotify-docs-type: Timestamp\n          description: |\n            The date and time the album was saved\n            Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.\n            If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.\n        album:\n          allOf:\n            - $ref: '#/components/schemas/AlbumObject'\n          description: Information about the album.\n\n    SavedTrackObject:\n      type: object\n      x-spotify-docs-type: SavedTrackObject\n      properties:\n        added_at:\n          type: string\n          format: date-time\n          x-spotify-docs-type: Timestamp\n          description: |\n            The date and time the track was saved.\n            Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.\n            If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.\n        track:\n          allOf:\n            - $ref: '#/components/schemas/TrackObject'\n          description: Information about the track.\n\n    SavedEpisodeObject:\n      type: object\n      x-spotify-docs-type: SavedEpisodeObject\n      properties:\n        added_at:\n          type: string\n          format: date-time\n          x-spotify-docs-type: Timestamp\n          description: |\n            The date and time the episode was saved.\n            Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.\n        episode:\n          allOf:\n            - $ref: '#/components/schemas/EpisodeObject'\n          description: Information about the episode.\n\n    SavedShowObject:\n      type: object\n      x-spotify-docs-type: SavedShowObject\n      properties:\n        added_at:\n          type: string\n          format: date-time\n          x-spotify-docs-type: Timestamp\n          description: |\n            The date and time the show was saved.\n            Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.\n            If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.\n        show:\n          allOf:\n            - $ref: '#/components/schemas/SimplifiedShowObject'\n          description: Information about the show.\n\n    TuneableTrackObject:\n      type: object\n      x-spotify-docs-type: TuneableTrackObject\n      properties:\n        acousticness:\n          type: number\n          format: float\n          x-spotify-docs-type: Float\n          description: |\n            A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.\n        danceability:\n          type: number\n          format: float\n          x-spotify-docs-type: Float\n          description: |\n            Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.\n        duration_ms:\n          type: integer\n          description: |\n            The duration of the track in milliseconds.\n        energy:\n          type: number\n          format: float\n          x-spotify-docs-type: Float\n          description: |\n            Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.\n        instrumentalness:\n          type: number\n          format: float\n          x-spotify-docs-type: Float\n          description: |\n            Predicts whether a track contains no vocals. \"Ooh\" and \"aah\" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.\n        key:\n          $ref: '#/components/schemas/Key'\n        liveness:\n          type: number\n          format: float\n          x-spotify-docs-type: Float\n          description: |\n            Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.\n        loudness:\n          $ref: '#/components/schemas/Loudness'\n        mode:\n          $ref: '#/components/schemas/Mode'\n        popularity:\n          type: number\n          format: float\n          x-spotify-docs-type: Float\n          description: |\n            The popularity of the track. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are. _**Note**: When applying track relinking via the `market` parameter, it is expected to find relinked tracks with popularities that do not match `min_*`, `max_*`and `target_*` popularities. These relinked tracks are accurate replacements for unplayable tracks with the expected popularity scores. Original, non-relinked tracks are available via the `linked_from` attribute of the [relinked track response](/documentation/general/guides/track-relinking-guide)._\n        speechiness:\n          type: number\n          format: float\n          x-spotify-docs-type: Float\n          description: |\n            Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.\n        tempo:\n          $ref: '#/components/schemas/Tempo'\n        time_signature:\n          $ref: '#/components/schemas/TimeSignature'\n        valence:\n          type: number\n          format: float\n          x-spotify-docs-type: Float\n          description: |\n            A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).\n\n    PlaylistObject:\n      type: object\n      x-spotify-docs-type: PlaylistObject\n      properties:\n        collaborative:\n          type: boolean\n          description: |\n            `true` if the owner allows other users to modify the playlist.\n        description:\n          type: string\n          nullable: true\n          description: |\n            The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.\n        external_urls:\n          allOf:\n            - $ref: '#/components/schemas/ExternalUrlObject'\n          description: |\n            Known external URLs for this playlist.\n        followers:\n          allOf:\n            - $ref: '#/components/schemas/FollowersObject'\n          description:\n            Information about the followers of the playlist.\n        href:\n          type: string\n          description: |\n            A link to the Web API endpoint providing full details of the playlist.\n        id:\n          type: string\n          description: |\n            The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) for the playlist.\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageObject'\n          description: |\n             Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/general/guides/working-with-playlists/). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._\n        name:\n          type: string\n          description: |\n            The name of the playlist.\n        owner:\n          allOf:\n            - $ref: '#/components/schemas/PlaylistOwnerObject'\n          description: |\n            The user who owns the playlist\n        public:\n          type: boolean\n          description: |\n            The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/general/guides/working-with-playlists/)\n        snapshot_id:\n          type: string\n          description: |\n            The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version\n        tracks:\n          type: object\n          allOf:\n            - $ref: '#/components/schemas/PagingObject'\n          description: |\n            The tracks of the playlist.\n        type:\n          type: string\n          description: |\n            The object type: \"playlist\"\n        uri:\n          type: string\n          description: |\n            The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the playlist.\n\n    SimplifiedPlaylistObject:\n      type: object\n      x-spotify-docs-type: SimplifiedPlaylistObject\n      properties:\n        collaborative:\n          type: boolean\n          description: |\n            `true` if the owner allows other users to modify the playlist.\n        description:\n          type: string\n          description: |\n            The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.\n        external_urls:\n          allOf:\n            - $ref: '#/components/schemas/ExternalUrlObject'\n          description: |\n            Known external URLs for this playlist.\n        href:\n          type: string\n          description: |\n            A link to the Web API endpoint providing full details of the playlist.\n        id:\n          type: string\n          description: |\n            The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) for the playlist.\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageObject'\n          description: |\n             Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/general/guides/working-with-playlists/). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._\n        name:\n          type: string\n          description: |\n            The name of the playlist.\n        owner:\n          allOf:\n            - $ref: '#/components/schemas/PlaylistOwnerObject'\n          description: |\n            The user who owns the playlist\n        public:\n          type: boolean\n          description: |\n            The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/general/guides/working-with-playlists/)\n        snapshot_id:\n          type: string\n          description: |\n            The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version\n        tracks:\n          allOf:\n            - $ref: '#/components/schemas/PlaylistTracksRefObject'\n          description: |\n            A collection containing a link ( `href` ) to the Web API endpoint where full details of the playlist's tracks can be retrieved, along with the `total` number of tracks in the playlist. Note, a track object may be `null`. This can happen if a track is no longer available.\n        type:\n          type: string\n          description: |\n            The object type: \"playlist\"\n        uri:\n          type: string\n          description: |\n            The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the playlist.\n\n    PlaylistTracksRefObject:\n      type: object\n      x-spotify-docs-type: PlaylistTracksRefObject\n      properties:\n        href:\n          type: string\n          description: |\n            A link to the Web API endpoint where full details of the playlist's tracks can be retrieved.\n        total:\n          type: integer\n          description: |\n            Number of tracks in the playlist.\n\n    PlaylistUserObject:\n      type: object\n      x-spotify-docs-type: PlaylistUserObject\n      properties:\n        external_urls:\n          allOf:\n            - $ref: '#/components/schemas/ExternalUrlObject'\n          description: |\n            Known public external URLs for this user.\n        followers:\n          allOf:\n            - $ref: '#/components/schemas/FollowersObject'\n          description: |\n            Information about the followers of this user.\n        href:\n          type: string\n          description: |\n            A link to the Web API endpoint for this user.\n        id:\n          type: string\n          description: |\n            The [Spotify user ID](/documentation/web-api/#spotify-uris-and-ids) for this user.\n        type:\n          type: string\n          enum: [ \"user\" ]\n          description: |\n            The object type.\n        uri:\n          type: string\n          description: |\n            The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for this user.\n\n    PlaylistOwnerObject:\n      allOf:\n        - $ref: '#/components/schemas/PlaylistUserObject'\n        - type: object\n          properties:\n            display_name:\n              type: string\n              nullable: true\n              description: |\n                The name displayed on the user's profile. `null` if not available.\n\n    CategoryObject:\n      type: object\n      x-spotify-docs-type: CategoryObject\n      required:\n        - href\n        - icons\n        - id\n        - name\n      properties:\n        href:\n          type: string\n          description: |\n            A link to the Web API endpoint returning full details of the category.\n        icons:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageObject'\n          description: |\n            The category icon, in various sizes.\n        id:\n          type: string\n          example: equal\n          description: |\n            The [Spotify category ID](/documentation/web-api/#spotify-uris-and-ids) of the category.\n        name:\n          type: string\n          example: EQUAL\n          description: |\n            The name of the category.\n\n    TrackObject:\n      type: object\n      x-spotify-docs-type: TrackObject\n      properties:\n        album:\n          allOf:\n            - $ref: '#/components/schemas/SimplifiedAlbumObject'\n          description: |\n            The album on which the track appears. The album object includes a link in `href` to full information about the album.\n        artists:\n          type: array\n          items:\n            $ref: '#/components/schemas/ArtistObject'\n          description: |\n            The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.\n        available_markets:\n          type: array\n          items:\n            type: string\n          description: |\n            A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.\n        disc_number:\n          type: integer\n          description: |\n            The disc number (usually `1` unless the album consists of more than one disc).\n        duration_ms:\n          type: integer\n          description: |\n            The track length in milliseconds.\n        explicit:\n          type: boolean\n          description: |\n             Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).\n        external_ids:\n          allOf:\n            - $ref: '#/components/schemas/ExternalIdObject'\n          description: |\n            Known external IDs for the track.\n        external_urls:\n          allOf:\n            - $ref: '#/components/schemas/ExternalUrlObject'\n          description: |\n            Known external URLs for this track.\n        href:\n          type: string\n          description: |\n            A link to the Web API endpoint providing full details of the track.\n        id:\n          type: string\n          description: |\n            The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) for the track.\n        is_playable:\n          type: boolean\n          description: |\n            Part of the response when [Track Relinking](/documentation/general/guides/track-relinking-guide/) is applied. If `true`, the track is playable in the given market. Otherwise `false`.\n        linked_from:\n          allOf:\n            - $ref: '#/components/schemas/TrackObject'\n          description: |\n            Part of the response when [Track Relinking](/documentation/general/guides/track-relinking-guide/) is applied, and the requested track has been replaced with different track. The track in the `linked_from` object contains information about the originally requested track.\n        restrictions:\n          allOf:\n            - $ref: '#/components/schemas/TrackRestrictionObject'\n          description: |\n            Included in the response when a content restriction is applied.\n            See [Restriction Object](/documentation/web-api/reference/#object-trackrestrictionobject) for more details.\n        name:\n          type: string\n          description: |\n             The name of the track.\n        popularity:\n          type: integer\n          description: |\n            The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.\u003cbr\u003eThe popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.\u003cbr\u003eGenerally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._\n        preview_url:\n          type: string\n          description: |\n            A link to a 30 second preview (MP3 format) of the track. Can be `null`\n        track_number:\n          type: integer\n          description: |\n            The number of the track. If an album has several discs, the track number is the number on the specified disc.\n        type:\n          type: string\n          description: |\n            The object type: \"track\".\n        uri:\n          type: string\n          description: |\n            The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the track.\n        is_local:\n          type: boolean\n          description: |\n            Whether or not the track is from a local file.\n\n    EpisodeObject:\n      x-spotify-docs-type: EpisodeObject\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/EpisodeBase'\n        - type: object\n          required:\n            - show\n          properties:\n            show:\n              $ref: '#/components/schemas/SimplifiedShowObject'\n              description: |\n                The show on which the episode belongs.\n\n    SimplifiedEpisodeObject:\n      x-spotify-docs-type: SimplifiedEpisodeObject\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/EpisodeBase'\n        - type: object\n\n    EpisodeBase:\n      type: object\n      required:\n        - audio_preview_url\n        - description\n        - html_description\n        - duration_ms\n        - explicit\n        - external_urls\n        - href\n        - id\n        - images\n        - is_externally_hosted\n        - is_playable\n        - languages\n        - name\n        - release_date\n        - release_date_precision\n        - resume_point\n        - type\n        - uri\n      properties:\n        audio_preview_url:\n          type: string\n          example: https://p.scdn.co/mp3-preview/2f37da1d4221f40b9d1a98cd191f4d6f1646ad17\n          description: |\n            A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.\n        description:\n          type: string\n          example: |\n            A Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.\n          description: |\n            A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.\n        html_description:\n          type: string\n          example: |\n            \u003cp\u003eA Spotify podcast sharing fresh insights on important topics of the moment—in a way only Spotify can. You’ll hear from experts in the music, podcast and tech industries as we discover and uncover stories about our work and the world around us.\u003c/p\u003e\n          description: |\n            A description of the episode. This field may contain HTML tags.\n        duration_ms:\n          type: integer\n          example: 1686230\n          description: |\n            The episode length in milliseconds.\n        explicit:\n          type: boolean\n          description: |\n            Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown).\n        external_urls:\n          allOf:\n            - $ref: '#/components/schemas/ExternalUrlObject'\n          description: |\n            External URLs for this episode.\n        href:\n          type: string\n          example: https://api.spotify.com/v1/episodes/5Xt5DXGzch68nYYamXrNxZ\n          description: |\n            A link to the Web API endpoint providing full details of the episode.\n        id:\n          type: string\n          example: 5Xt5DXGzch68nYYamXrNxZ\n          description: |\n            The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) for the episode.\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageObject'\n          description: |\n            The cover art for the episode in various sizes, widest first.\n        is_externally_hosted:\n          type: boolean\n          description: |\n            True if the episode is hosted outside of Spotify's CDN.\n        is_playable:\n          type: boolean\n          description: |\n            True if the episode is playable in the given market. Otherwise false.\n        language:\n          type: string\n          deprecated: true\n          example: en\n          description: |\n            The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead.\n        languages:\n          type: array\n          items:\n            type: string\n          example: [\"fr\", \"en\"]\n          description: |\n            A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code.\n        name:\n          type: string\n          example: |\n            Starting Your Own Podcast: Tips, Tricks, and Advice From Anchor Creators\n          description: |\n            The name of the episode.\n        release_date:\n          type: string\n          example: 1981-12-15\n          description: |\n            The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`.\n        release_date_precision:\n          type: string\n          example: day\n          enum: [\"year\", \"month\", \"day\"]\n          description: |\n            The precision with which `release_date` value is known.\n        resume_point:\n          allOf:\n            - $ref: '#/components/schemas/ResumePointObject'\n          description: |\n            The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.\n        type:\n          type: string\n          enum: [\"episode\"]\n          description: |\n            The object type.\n        uri:\n          type: string\n          example: spotify:episode:0zLhl3WsOCQHbe1BPTiHgr\n          description: |\n            The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the episode.\n        restrictions:\n          allOf:\n            - $ref: '#/components/schemas/EpisodeRestrictionObject'\n          description: |\n            Included in the response when a content restriction is applied.\n            See [Restriction Object](/documentation/web-api/reference/#object-episoderestrictionobject) for more details.\n\n    ResumePointObject:\n      type: object\n      x-spotify-docs-type: ResumePointObject\n      properties:\n        fully_played:\n          type: boolean\n          description: |\n            Whether or not the episode has been fully played by the user.\n        resume_position_ms:\n          type: integer\n          description: |\n            The user's most recent position in the episode in milliseconds.\n\n    ShowBase:\n      type: object\n      required:\n        - available_markets\n        - copyrights\n        - description\n        - explicit\n        - external_urls\n        - href\n        - html_description\n        - id\n        - images\n        - is_externally_hosted\n        - languages\n        - media_type\n        - name\n        - publisher\n        - total_episodes\n        - type\n        - uri\n      properties:\n        available_markets:\n          type: array\n          items:\n            type: string\n          description: |\n            A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.\n        copyrights:\n          type: array\n          items:\n            $ref: '#/components/schemas/CopyrightObject'\n          description: |\n            The copyright statements of the show.\n        description:\n          type: string\n          description: |\n            A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.\n        html_description:\n          type: string\n          description: |\n            A description of the show. This field may contain HTML tags.\n        explicit:\n          type: boolean\n          description: |\n            Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown).\n        external_urls:\n          allOf:\n            - $ref: '#/components/schemas/ExternalUrlObject'\n          description: |\n            External URLs for this show.\n        href:\n          type: string\n          description: |\n            A link to the Web API endpoint providing full details of the show.\n        id:\n          type: string\n          description: |\n            The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) for the show.\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageObject'\n          description: |\n            The cover art for the show in various sizes, widest first.\n        is_externally_hosted:\n          type: boolean\n          description: |\n            True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases.\n        languages:\n          type: array\n          items:\n            type: string\n          description: |\n            A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.\n        media_type:\n          type: string\n          description: |\n            The media type of the show.\n        name:\n          type: string\n          description: |\n            The name of the episode.\n        publisher:\n          type: string\n          description: |\n            The publisher of the show.\n        type:\n          type: string\n          enum: [\"show\"]\n          description: |\n            The object type.\n        uri:\n          type: string\n          description: |\n            The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the show.\n\n    ShowObject:\n      x-spotify-docs-type: ShowObject\n      allOf:\n        - $ref: '#/components/schemas/ShowBase'\n        - type: object\n          required:\n            - episodes\n          properties:\n            episodes:\n              type: object\n              allOf:\n                - $ref: '#/components/schemas/PagingObject'\n              description: |\n                The episodes of the show.\n\n    SimplifiedShowObject:\n      x-spotify-docs-type: SimplifiedShowObject\n      allOf:\n        - $ref: '#/components/schemas/ShowBase'\n        - type: object\n\n    AlbumBase:\n      type: object\n      required:\n        - album_type\n        - total_tracks\n        - available_markets\n        - external_urls\n        - href\n        - id\n        - images\n        - name\n        - release_date\n        - release_date_precision\n        - type\n        - uri\n      properties:\n        album_type:\n          type: string\n          description: |\n            The type of the album.\n          enum: [album, single, compilation]\n          example: compilation\n        total_tracks:\n          type: integer\n          description: The number of tracks in the album.\n          example: 9\n        available_markets:\n          type: array\n          items:\n            type: string\n          example: [\"CA\", \"BR\", \"IT\"]\n          description: |\n            The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._\n        external_urls:\n          allOf:\n            - $ref: '#/components/schemas/ExternalUrlObject'\n          description: |\n            Known external URLs for this album.\n        href:\n          type: string\n          description: |\n            A link to the Web API endpoint providing full details of the album.\n        id:\n          type: string\n          description: |\n            The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) for the album.\n          example: 2up3OPMp9Tb4dAKM2erWXQ\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageObject'\n          description: |\n            The cover art for the album in various sizes, widest first.\n        name:\n          type: string\n          description: |\n            The name of the album. In case of an album takedown, the value may be an empty string.\n        release_date:\n          type: string\n          example: 1981-12\n          description: |\n            The date the album was first released.\n        release_date_precision:\n          type: string\n          enum: [\"year\", \"month\", \"day\"]\n          example: \"year\"\n          description: |\n            The precision with which `release_date` value is known.\n        restrictions:\n          allOf:\n            - $ref: '#/components/schemas/AlbumRestrictionObject'\n          description: |\n            Included in the response when a content restriction is applied.\n        type:\n          type: string\n          enum: [\"album\"]\n          description: |\n            The object type.\n        uri:\n          type: string\n          example: \"spotify:album:2up3OPMp9Tb4dAKM2erWXQ\"\n          description: |\n            The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the album.\n\n    SimplifiedAlbumObject:\n      x-spotify-docs-type: SimplifiedAlbumObject\n      allOf:\n        - $ref: '#/components/schemas/AlbumBase'\n        - type: object\n          required:\n            - artists\n          properties:\n            album_group:\n              type: string\n              enum: [album, single, compilation, appears_on]\n              example: compilation\n              description: |\n                The field is present when getting an artist's albums. Compare to album_type this field represents relationship between the artist and the album.\n            artists:\n              type: array\n              items:\n                $ref: '#/components/schemas/SimplifiedArtistObject'\n              description: |\n                The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.\n\n    AlbumObject:\n      x-spotify-docs-type: AlbumObject\n      allOf:\n        - $ref: '#/components/schemas/AlbumBase'\n        - type: object\n          properties:\n            artists:\n              type: array\n              items:\n                $ref: '#/components/schemas/ArtistObject'\n              description: |\n                The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.\n            tracks:\n              type: object\n              allOf:\n                - $ref: '#/components/schemas/PagingObject'\n              description: |\n                The tracks of the album.\n\n    ContextObject:\n      type: object\n      x-spotify-docs-type: ContextObject\n      properties:\n        type:\n          type: string\n          description: |\n            The object type, e.g. \"artist\", \"playlist\", \"album\", \"show\".\n        href:\n          type: string\n          description: A link to the Web API endpoint providing full details of the track.\n        external_urls:\n          allOf:\n            - $ref: '#/components/schemas/ExternalUrlObject'\n          description: External URLs for this context.\n        uri:\n          type: string\n          description: |\n            The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the context.\n\n    CopyrightObject:\n      type: object\n      x-spotify-docs-type: CopyrightObject\n      properties:\n        text:\n          type: string\n          description: |\n            The copyright text for this content.\n        type:\n          type: string\n          description: |\n            The type of copyright: `C` = the copyright, `P` = the sound recording (performance) copyright.\n\n    ExternalIdObject:\n      type: object\n      x-spotify-docs-type: ExternalIdObject\n      properties:\n        isrc:\n          type: string\n          description: |\n            [International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code)\n        ean:\n          type: string\n          description: |\n            [International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29)\n        upc:\n          type: string\n          description: |\n            [Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code)\n\n    ExternalUrlObject:\n      type: object\n      x-spotify-docs-type: ExternalUrlObject\n      properties:\n        spotify:\n          type: string\n          description: |\n            The [Spotify URL](/documentation/web-api/#spotify-uris-and-ids) for the object.\n\n    FollowersObject:\n      type: object\n      x-spotify-docs-type: FollowersObject\n      properties:\n        href:\n          type: string\n          nullable: true\n          description: |\n            This will always be set to null, as the Web API does not support it at the moment.\n        total:\n          type: integer\n          description: |\n            The total number of followers.\n\n    ImageObject:\n      type: object\n      x-spotify-docs-type: ImageObject\n      required:\n        - url\n        - height\n        - width\n      properties:\n        url:\n          type: string\n          example: |\n            https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228\n          description: |\n            The source URL of the image.\n        height:\n          type: integer\n          example: 300\n          nullable: true\n          description: |\n            The image height in pixels.\n        width:\n          type: integer\n          example: 300\n          nullable: true\n          description: |\n            The image width in pixels.\n\n    ExplicitContentSettingsObject:\n      type: object\n      x-spotify-docs-type: ExplicitContentSettingsObject\n      properties:\n        filter_enabled:\n          type: boolean\n          description: |\n            When `true`, indicates that explicit content should not be played.\n        filter_locked:\n          type: boolean\n          description: |\n            When `true`, indicates that the explicit content setting is locked and can't be changed by the user.\n  parameters:\n    PathAlbumId:\n      in: path\n      name: id\n      required: true\n      schema:\n        title: Spotify Album ID\n        description: |\n          The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the album.\n        example: 4aawyAB9vmqN3uQ7FjRGTy\n        type: string\n    PathPlaylistId:\n      name: playlist_id\n      required: true\n      in: path\n      schema:\n        title: Playlist ID\n        description: |\n          The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the playlist.\n        example: 3cEYpjA9oz9GiPac4AsH4n\n        type: string\n    QueryMarket:\n      name: market\n      required: false\n      in: query\n      schema:\n        title: Market\n        description: |\n          An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\n            If a country code is specified, only content that is available in that market will be returned.\u003cbr\u003e\n            If a valid user access token is specified in the request header, the country associated with\n            the user account will take priority over this parameter.\u003cbr\u003e\n            _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._\u003cbr\u003e\n            Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\n        example: ES\n        type: string\n    QueryLimit:\n      name: limit\n      required: false\n      in: query\n      schema:\n        title: Limit\n        description: |\n          The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n        default: 20\n        example: 10\n        type: integer\n        minimum: 0\n        maximum: 50\n    QueryOffset:\n      name: offset\n      required: false\n      in: query\n      schema:\n        title: Offset\n        description: |\n          The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.\n        default: 0\n        example: 5\n        type: integer\n    QueryAdditionalTypes:\n      name: additional_types\n      required: false\n      in: query\n      schema:\n        title: Additional Types\n        description: |\n          A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.\u003cbr\u003e\n          _**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._\u003cbr\u003e\n          In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\n        type: string\n    QueryAlbumIds:\n      name: ids\n      required: true\n      in: query\n      schema:\n        title: Spotify Album IDs\n        description: |\n          A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids) for the albums. Maximum: 20 IDs.\n        example: 382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc\n        type: string\n    PathArtistId:\n      name: id\n      required: true\n      in: path\n      schema:\n        title: Spotify Artist ID\n        description: |\n          The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) of the artist.\n        example: 0TnOYISbd1XYRBk9myaseg\n        type: string\n    PathShowId:\n      name: id\n      required: true\n      in: path\n      schema:\n        title: Spotify Show ID\n        description: |\n          The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids)\n          for the show.\n        example: 38bS44xjbVVZ3No3ByF1dJ\n        type: string\n    QueryTrackIds:\n      name: ids\n      required: true\n      in: query\n      schema:\n        title: Spotify Track IDs\n        description: |\n          A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.\n        example: 7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B\n        type: string\n    QueryIncludeGroups:\n      name: include_groups\n      required: false\n      in: query\n      schema:\n        title: Groups to include (single, album, appears_on, compilation)\n        description: |\n          A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. \u003cbr\u003e\n          Valid values are:\u003cbr\u003e- `album`\u003cbr\u003e- `single`\u003cbr\u003e- `appears_on`\u003cbr\u003e- `compilation`\u003cbr\u003eFor example: `include_groups=album,single`.\n        example: single,appears_on\n        type: string\n    QueryShowIds:\n      name: ids\n      required: true\n      in: query\n      schema:\n        title: Ids\n        description: |\n          A comma-separated list of the [Spotify IDs](/documentation/web-api/#spotify-uris-and-ids) for the shows. Maximum: 50 IDs.\n        example: 5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ\n        type: string\n    PathUserId:\n      name: user_id\n      required: true\n      in: path\n      schema:\n        title: User ID\n        description: |\n          The user's [Spotify user ID](/documentation/web-api/#spotify-uris-and-ids).\n        example: smedjan\n        type: string\n",
			"canonicalURL": "/github.com/sonallux/spotify-web-api@f9422059d939daf464a6158be9424ccfbe23d36e/-/blob/official-spotify-open-api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/sonallux/spotify-web-api/blob/f9422059d939daf464a6158be9424ccfbe23d36e/official-spotify-open-api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /search: get: operation \"search\": parameters: parse parameter \"type\": schema: parse enum values: parse value \"\\\"album\\\"\": expected type \"array\", got \"string\""
}