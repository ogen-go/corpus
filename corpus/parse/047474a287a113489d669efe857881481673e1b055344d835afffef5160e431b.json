{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/UNDP-Data/geohub"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "sites/geohub/static/api/docs/swagger.yaml",
			"byteSize": 27558,
			"content": "openapi: 3.0.0\ninfo:\n  title: GeoHub API specification\n  version: '1.0'\n  description: This documentation is for GeoHub's endpoints specification\n  contact:\n    email: jin.igarashi@undp.org\n    url: 'https://geohub.data.undp.org'\nservers:\n  - url: 'http://localhost:5173/api'\n    description: localhost\n  - url: 'https://dev.undpgeohub.org/api'\n    description: development\n  - url: 'https://geohub.data.undp.org/api'\n    description: production\npaths:\n  /datasets:\n    get:\n      summary: Datasets search API\n      tags:\n        - search\n      responses:\n        '200':\n          description: GeoJSON feature collection\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  type:\n                    type: string\n                  features:\n                    type: object\n                    properties:\n                      type:\n                        type: string\n                      geometry:\n                        type: object\n                        properties:\n                          type:\n                            type: string\n                          coordinates:\n                            type: array\n                            items:\n                              type: array\n                              items:\n                                type: array\n                                items:\n                                  type: number\n                      properties:\n                        type: object\n                        properties:\n                          id:\n                            type: string\n                          storage_id:\n                            type: string\n                          url:\n                            type: string\n                          name:\n                            type: string\n                          description:\n                            type: string\n                          is_raster:\n                            type: boolean\n                          source:\n                            type: string\n                          license:\n                            type: string\n                          createdat:\n                            type: string\n                          updatedat:\n                            type: string\n                          tags:\n                            type: array\n                            items:\n                              $ref: '#/components/schemas/Tag'\n                        required:\n                          - id\n                          - storage_id\n                          - url\n                          - name\n                          - description\n                          - is_raster\n                          - createdat\n                          - updatedat\n              examples:\n                Example for /datasets?limit=1\u0026sdg_goal=1:\n                  value:\n                    type: FeatureCollection\n                    features:\n                      - type: Feature\n                        geometry:\n                          type: Polygon\n                          coordinates:\n                            - - - -179.999985902\n                                - -59.492685518\n                              - - 179.995392624\n                                - -59.492685518\n                              - - 179.995392624\n                                - 83.632916502\n                              - - -179.999985902\n                                - 83.632916502\n                              - - -179.999985902\n                                - -59.492685518\n                        properties:\n                          id: 87538d7d497cfcc67e12505e8a29f893\n                          storage_id: da3cd4ffd3ac844db37bf1f87e2fc200\n                          url: 'https://undpngddlsgeohubdev01.blob.core.windows.net/end-poverty/Population_Density/2000_Population_density_per_squareKm.tif?sv=2021-10-04\u0026ss=b\u0026srt=o\u0026se=2023-12-05T15%3A25%3A26Z\u0026sp=r\u0026sig=t30dcAo8pKix1mAcnCAOq0k3vssfaLlSwrjaXxr9PGE%3D'\n                          name: 2000 Population density per squareKm\n                          description: Estimated population density per grid-cell.\n                          is_raster: true\n                          source: WorldPop\n                          license: ''\n                          createdat: '2022-04-29T16:51:38+00:00'\n                          updatedat: '2022-10-08T17:33:46+00:00'\n                          tags:\n                            - key: granularity\n                              value: Subnational\n                            - key: resolution\n                              value: 1km\n                            - key: extent\n                              value: Global\n                            - key: year_value\n                              value: '2000'\n                            - key: sdg_target\n                              value: population\n                            - key: theme\n                              value: Population density\n                            - key: sdg_goal\n                              value: '1'\n                    links:\n                      - rel: root\n                        type: application/json\n                        href: 'http://localhost:5173/api/datasets'\n                      - rel: self\n                        type: application/json\n                        href: 'http://localhost:5173/api/datasets?limit=1\u0026sdg_goal=1'\n                      - rel: next\n                        type: application/json\n                        href: 'http://localhost:5173/api/datasets?limit=1\u0026sdg_goal=1\u0026offset=1'\n      operationId: get-datasets\n      description: |-\n        This API returns the result as GeoJSON feature collection format and it contains links property at the bottom.\n\n        The links will have the following patterns.\n\n        - self = URL for the query itself\n        - root = URL origin for this API\n        - next = URL for next page\n        - previous = URL for previous page\n\n        You can use next or previous links to implement paging feature.\n\n        Flexiblely to search by key/value of tags.\n\n        {key}={value} e.g., sdg_goal=1 to filter where tag key is sdg_goal and value is 1. If multiple key/value are set, it will filter by OR operator. if you want to filter by SDG1 and 2, you can query like '\u0026sdg_goal=1\u0026sdg_goal=2'\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: query\n          description: 'free text to search in name, description'\n        - schema:\n            type: string\n          in: query\n          name: storage_id\n          description: you can also filter by directly storage_id\n        - schema:\n            type: string\n          in: query\n          name: bbox\n          description: 'you can filter the data by bounding box (minx, miny, maxx, maxy)'\n        - schema:\n            type: number\n          in: query\n          name: limit\n          description: The number of datasets retrieved. default is 10\n        - schema:\n            type: string\n          in: query\n          name: offset\n          description: Offset value for paging. default is 0\n        - schema:\n            type: string\n          in: query\n          name: extent\n          description: Search by extent value\n        - schema:\n            type: string\n          in: query\n          name: granularity\n          description: Search by granularity value\n        - schema:\n            type: string\n          in: query\n          name: keyword\n          description: Search by keyword value\n        - schema:\n            type: string\n            enum:\n              - table\n              - function\n          in: query\n          name: layertype\n          description: Search by layertype of pg_tileserv\n        - schema:\n            type: string\n          in: query\n          name: resolution\n          description: Search by resolution value\n        - schema:\n            type: string\n            enum:\n              - '1'\n              - '2'\n              - '3'\n              - '4'\n              - '5'\n              - '6'\n              - '7'\n              - '8'\n              - '9'\n              - '10'\n              - '11'\n              - '12'\n              - '13'\n              - '14'\n              - '15'\n              - '16'\n              - '17'\n          in: query\n          name: sdg_goal\n          description: search by sdg_goal value\n        - schema:\n            type: string\n          in: query\n          name: sdg_target\n          description: search by sdg_target value\n        - schema:\n            type: string\n            enum:\n              - earth-search\n              - microsoft-pc\n          in: query\n          name: stac\n          description: search by stac value\n        - schema:\n            type: string\n          in: query\n          name: theme\n          description: search by theme value\n        - schema:\n            type: string\n            enum:\n              - martin\n              - pgtileserv\n              - stac\n          in: query\n          name: type\n          description: search by type value\n        - schema:\n            type: string\n          in: query\n          name: year_value\n          description: search by year value\n  /stac/mosaicjson:\n    get:\n      summary: STAC mosaicjson processing API\n      tags:\n        - stac\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  tilejson:\n                    type: string\n                  mosaicjson:\n                    type: string\n                  classmap:\n                    type: string\n                required:\n                  - tilejson\n                  - mosaicjson\n              examples:\n                Example for ESA world cover:\n                  value:\n                    tilejson: 'https://titiler.undpgeohub.org/mosaicjson/tilejson.json?url=https%3A%2F%2Fundpngddlsgeohubdev01.blob.core.windows.net%2Fmosaicjson%2Fmosaicjson_f412f914-0562-4a99-913b-b712170e61d9.json'\n                    mosaicjson: 'https://undpngddlsgeohubdev01.blob.core.windows.net/mosaicjson/mosaicjson_f412f914-0562-4a99-913b-b712170e61d9.json'\n                    classmap:\n                      '10': Tree cover\n                      '20': Shrubland\n                      '30': Grassland\n                      '40': Cropland\n                      '50': Built-up\n                      '60': Bare / sparse vegetation\n                      '70': Snow and ice\n                      '80': Permanent water bodies\n                      '90': Herbaceous wetland\n                      '95': Mangroves\n                      '100': Moss and lichen\n      operationId: get-stac-mosaicjson\n      description: This api is to search items in STAC collection to make mosaicjson URL.\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: url\n          description: URL for searching STAC items\n          required: true\n        - schema:\n            type: string\n          in: query\n          name: bbox\n          description: 'minx,miny,maxx,maxy'\n        - schema:\n            type: string\n          in: query\n          name: asset\n          description: Asset name of item\n        - schema:\n            type: string\n            enum:\n              - microsoft-pc\n            default: microsoft-pc\n          in: query\n          name: type\n          description: 'type of STAC. e.g., microsoft-pc'\n  /storages:\n    get:\n      summary: Storage search API\n      tags:\n        - search\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                  name:\n                    type: string\n                  url:\n                    type: string\n                  label:\n                    type: string\n                  description:\n                    type: string\n                  icon:\n                    type: string\n                  tags:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Tag'\n      operationId: get-storages\n      description: |-\n        This api can return the list of storages which contain datasets.\n\n        It can search any key/value of tags stored in storage table as the following specification.\n\n        {key}={value} e.g., type=stac to filter where tag key is 'type' and value is 'stac'. If multiple key/value are set, it will filter by OR operator. if you want to filter by SDG1 and 2, you can query like '\u0026sdg=1\u0026sdg=2'. 'keyword', 'type' and 'sdg' are available for key value.\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: query\n          description: 'ree text to search in label and description. AND search is aaa and bbb OR search is aaa or bbb If queried text contains space like ''water quality'', query=''water quality'' should be used with single quatation.'\n        - schema:\n            type: string\n          in: query\n          name: keyword\n        - schema:\n            type: string\n            enum:\n              - '1'\n              - '2'\n              - '3'\n              - '4'\n              - '5'\n              - '6'\n              - '7'\n              - '8'\n              - '9'\n              - '10'\n              - '11'\n              - '12'\n              - '13'\n              - '14'\n              - '15'\n              - '16'\n              - '17'\n          in: query\n          name: sdg\n  /tags:\n    get:\n      summary: Tag search API\n      tags:\n        - search\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n              examples:\n                Example for tags?key=extent:\n                  value:\n                    extent:\n                      - key: extent\n                        value: Afghanistan\n                        count: 2\n                      - key: extent\n                        value: Africa\n                        count: 5\n                      - key: extent\n                        value: America\n                        count: 1\n                      - key: extent\n                        value: Asia\n                        count: 5\n                      - key: extent\n                        value: Burundi\n                        count: 3\n                      - key: extent\n                        value: Cambodia\n                        count: 2\n                      - key: extent\n                        value: Conflict areas\n                        count: 1\n                      - key: extent\n                        value: Ethiopia\n                        count: 3\n                      - key: extent\n                        value: EU\n                        count: 3\n                      - key: extent\n                        value: Europe\n                        count: 9\n                      - key: extent\n                        value: Ghana\n                        count: 2\n                      - key: extent\n                        value: Global\n                        count: 3845\n                      - key: extent\n                        value: Greenland and Antarctica\n                        count: 1\n                      - key: extent\n                        value: India\n                        count: 2\n                      - key: extent\n                        value: Kenya\n                        count: 10\n                      - key: extent\n                        value: Madagascar\n                        count: 2\n                      - key: extent\n                        value: Malawi\n                        count: 4\n                      - key: extent\n                        value: Mali\n                        count: 2\n                      - key: extent\n                        value: Mozambique\n                        count: 2\n                      - key: extent\n                        value: Nepal\n                        count: 2\n                      - key: extent\n                        value: Nigeria\n                        count: 12\n                      - key: extent\n                        value: North America\n                        count: 1\n                      - key: extent\n                        value: Oceania\n                        count: 1\n                      - key: extent\n                        value: OECD\n                        count: 7\n                      - key: extent\n                        value: Pakistan\n                        count: 6\n                      - key: extent\n                        value: Rwanda\n                        count: 6\n                      - key: extent\n                        value: South America\n                        count: 1\n                      - key: extent\n                        value: SouthEast Asia\n                        count: 2\n                      - key: extent\n                        value: Tanzania\n                        count: 8\n                      - key: extent\n                        value: Uganda\n                        count: 10\n                      - key: extent\n                        value: West Africa\n                        count: 1\n                      - key: extent\n                        value: Zambia\n                        count: 2\n      operationId: get-tags\n      description: 'This API can return the list of available tags. If you simply query by /tags, it returns all tags. You can also filter a key value to list available tags.'\n      parameters:\n        - schema:\n            type: string\n            enum:\n              - extent\n              - granularity\n              - keyword\n              - layertype\n              - resolution\n              - schema\n              - sdg_goal\n              - sdg_target\n              - stac\n              - theme\n              - type\n              - year_value\n          in: query\n          name: key\n          description: Optional parameter to filter by key\n  /vector/statistics:\n    get:\n      summary: Vector tile statistics API\n      tags:\n        - vectortile\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  layer:\n                    type: string\n                  geometry:\n                    type: string\n                  count:\n                    type: number\n                  attributeCount:\n                    type: number\n                  attributes:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        attribute:\n                          type: string\n                        type:\n                          type: string\n                        count:\n                          type: number\n                        min:\n                          type: number\n                        max:\n                          type: number\n                        mean:\n                          type: number\n                        median:\n                          type: number\n                        std:\n                          type: number\n                        histogram:\n                          type: object\n                          properties:\n                            count:\n                              type: array\n                              items:\n                                type: number\n                            bins:\n                              type: array\n                              items:\n                                type: number\n              examples:\n                Example for zambia.poverty:\n                  value:\n                    layer: zambia.poverty\n                    geometry: Polygon\n                    count: 145\n                    attributeCount: 7\n                    attributes:\n                      - attribute: poverty\n                        type: number\n                        count: 145\n                        min: 0.1\n                        max: 0.96\n                        mean: 0.6919310344827585\n                        median: 0.78\n                        std: 0.21315518783181625\n                        histogram:\n                          count:\n                            - 9\n                            - 19\n                            - 10\n                            - 36\n                            - 71\n                          bins:\n                            - 0.1\n                            - 0.272\n                            - 0.444\n                            - 0.616\n                            - 0.788\n                            - 0.96\n                Example for zambia.poverty_selector:\n                  value:\n                    layer: zambia.poverty_selector\n                    geometry: Polygon\n                    count: 5\n                    attributeCount: 1\n                    attributes:\n                      - attribute: district\n                        type: string\n                        count: 5\n                        values:\n                          - Chilubi\n                          - Kasama\n                          - Luwingu\n                          - Chinsali\n                          - Mpika\n      operationId: get-vector-statistics\n      description: This api it to calculate statistics for vector tiles from /0/0/0.pbf\n      parameters:\n        - schema:\n            type: string\n            example: 'https://martin.undpgeohub.org/zambia.poverty/0/0/0.pbf'\n          in: query\n          name: path\n          description: URL for vector tile. must be /0/0/0.pbf path\n          required: true\n        - schema:\n            type: string\n            example: zambia.poverty\n          in: query\n          name: layer_name\n          description: layer name for vector tile\n          required: true\n  '/vector/{source}/metadata.json':\n    get:\n      summary: Vector tile metadata.json API\n      tags:\n        - vectortile\n      responses: {}\n      operationId: 'get-vector-[source]-metadata.json'\n      description: |-\n        This api is to generate metadata.json for vector tiles.\n\n        return metadata.json v1.3.0 (https://github.com/mapbox/mbtiles-spec/blob/master/1.3/spec.md)\n      parameters:\n        - schema:\n            type: string\n            example: zambia.poverty\n          in: query\n          name: table\n          description: table name. only available for source = martin or pgtileserv\n        - schema:\n            type: string\n            enum:\n              - table\n              - function\n          in: query\n          name: type\n          description: type name. only available for source = pgtileserv\n        - schema:\n            type: string\n          in: query\n          name: pbfpath\n          description: pbf path. only available for soruce = azstorage\n    parameters:\n      - schema:\n          type: string\n          enum:\n            - azstorage\n            - pgtileserv\n            - martin\n        name: source\n        in: path\n        required: true\n        description: source type\n  '/vector/{source}/tile.json':\n    parameters:\n      - schema:\n          type: string\n          enum:\n            - pgtileserv\n            - martin\n        name: source\n        in: path\n        required: true\n        description: source type\n    get:\n      summary: Vector tile tile.json API\n      tags:\n        - vectortile\n      responses: {}\n      operationId: get-vector-source-tile.json\n      description: |-\n        This api is to generate tile.json for vector tiles.\n\n        return TileJSON v3.0.0 (https://github.com/mapbox/tilejson-spec/tree/master/3.0.0)\n      parameters:\n        - schema:\n            type: string\n            example: zambia.poverty\n          in: query\n          name: table\n          description: table name. only available for source = martin or pgtileserv\n          required: true\n        - schema:\n            type: string\n            enum:\n              - table\n              - function\n          in: query\n          name: type\n          description: type name. only available for source = pgtileserv\n  /style:\n    get:\n      summary: Style list API\n      tags:\n        - style\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n                    name:\n                      type: string\n                    createdat:\n                      type: string\n                  required:\n                    - id\n                    - name\n                    - createdat\n              examples:\n                Example 1:\n                  value:\n                    - id: 25\n                      name: Global South LOCE\n                      createdat: '2022-09-08T17:13:26.890Z'\n      operationId: get-style\n      description: Get the list of saved style from PostGIS database\n      parameters:\n        - schema:\n            type: integer\n          in: query\n          name: limit\n        - schema:\n            type: integer\n          in: query\n          name: offset\n    post:\n      summary: Style register API\n      operationId: post-style\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  url:\n                    type: string\n                    description: URL for style sharing viewer\n                required:\n                  - url\n      description: Save style.json to PostgreSQL database\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: name for style\n                style:\n                  type: object\n                  description: style.json object\n              required:\n                - name\n                - style\n      tags:\n        - style\n  '/style/{id}':\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n        description: style ID\n    delete:\n      summary: Style delete API\n      operationId: delete-style-id\n      responses:\n        '204':\n          description: No Content\n      description: Delete style by ID\n      tags:\n        - style\n  '/style/{id}.json':\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n        description: style ID\n    get:\n      summary: Style JSON api\n      tags:\n        - style\n      responses:\n        '200':\n          description: style.json object\n      operationId: get-style-id-.json\n      description: get style.json by ID\ncomponents:\n  schemas:\n    Tag:\n      title: Tag\n      x-stoplight:\n        id: um38sy7bphx89\n      type: object\n      properties:\n        key:\n          type: string\n        value:\n          type: string\n        count:\n          type: number\n      required:\n        - key\n        - value\n",
			"canonicalURL": "/github.com/UNDP-Data/geohub@5194234f2889da7f97606d292e73dd27098fd42b/-/blob/sites/geohub/static/api/docs/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/UNDP-Data/geohub/blob/5194234f2889da7f97606d292e73dd27098fd42b/sites/geohub/static/api/docs/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/vector/{source}/metadata.json\": get: operation \"get-vector-[source]-metadata.json\": at sites/geohub/static/api/docs/swagger.yaml:654:18: responses: no responses"
}