{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aarondl/oa3"
		},
		"file": {
			"name": "openapi3.yaml",
			"size": 0,
			"path": "openapi3spec/testdata/openapi3.yaml",
			"byteSize": 5383,
			"content": "openapi: 3.0.0\n\ninfo:\n  title: title\n  description: description\n  termsOfService: tos\n  contact:\n    name: person\n    url: http://world.com\n    email: email@email.com\n    x-extension: ext\n  license:\n    name: MIT\n    url: http://mit.edu\n    x-extension: ext\n  version: 1.2.3\n  x-extension: ext\n\nservers:\n  - url: http://server\n    description: desc\n    x-extension: ext\n    variables:\n      first:\n        enum: [enum1, enum2]\n        default: default\n        description: desc\n      second:\n        enum: [enum3, enum4]\n        default: default\n        description: desc\n\npaths:\n  /path/one:\n    summary: summary\n    description: description\n    parameters:\n      - name: param\n        in: query\n        description: description\n        required: true\n        deprecated: true\n        allowEmptyValue: true\n        style: simple\n        explode: true\n        allowReserved: true\n        schema: { $ref: '#/components/schemas/Ref' }\n        example: example\n        x-extension: ext\n        examples:\n          example:\n            summary: summary\n            description: description\n            value: value\n            externalValue: http://value\n            x-extension: ext\n    servers:\n      - url: http://server\n    x-extension: ext\n    get:\n      tags: [one, two]\n      summary: summary\n      description: description\n      operationId: operationid\n      deprecated: true\n      x-extension: ext\n      requestBody:\n        description: description\n        content:\n          application/json:\n            schema: { $ref: '#/components/schemas/Ref'}\n            example: example\n            examples:\n              one:\n                summary: summary\n                description: string\n                value: 3.4\n                externalValue: http://url\n        required: true\n      parameters:\n        - name: param\n          in: query\n          description: description\n          required: true\n          deprecated: true\n          allowEmptyValue: true\n          style: header\n          explode: true\n          allowReserved: true\n          schema: { $ref: '#/components/schemas/Ref' }\n          example: example\n          examples:\n            example:\n              description: description\n      responses:\n        '200':\n          description: description\n          headers:\n            Origin:\n              description: string\n              required: true\n              deprecated: true\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: array\n          links:\n            link:\n              operationRef: operationref\n              operationId: operationId\n              parameters:\n                param: string\n              requestBody: string\n              description: string\n              server:\n                url: http://server\n        default: { $ref: '#/components/schemas/Ref' }\n      callbacks:\n        callback:\n          '{expression}':\n            summary: summary\n      externalDocs:\n        description: description\n        url: http://url\n        x-extension: ext\n      servers:\n        - url: http://server\n      security:\n        - 'name': [string]\n\ntags:\n  - name: name\n    description: description\n    externalDocs:\n      description: description\n      url: http://url\n      x-extension: ext\n\nsecurity:\n  - name: [string]\n\ncomponents:\n  responses:\n    Response:\n      description: description\n  parameters:\n    Parameter:\n      description: description\n  examples:\n    Example:\n      description: description\n  requestBodies:\n    RequestBody:\n      description: description\n  headers:\n    Header:\n      description: description\n  securitySchemes:\n    Scheme:\n      type: apiKey\n      description: description\n      name: apikeyname\n      in: header\n      scheme: http\n      bearerFormat: bearer\n      flows:\n        implicit:\n          authorizationUrl: http://oauth2\n          tokenUrl: http://oauth2\n          refreshUrl: http://oauth2\n          scopes:\n            scopename: scopedescription\n      openIdConnectUrl: http://openid\n  links:\n    Link:\n      description: string\n  callbacks:\n    Callback:\n      '{expression}': { description: path }\n  schemas:\n    Schema:\n      title: title\n      description: description\n      default: default\n      type: string\n      nullable: true\n      readOnly: true\n      writeOnly: true\n      deprecated: true\n      example: example\n      externalDocs:\n        description: description\n        url: http://url\n        x-extension: ext\n      multipleOf: 2.5\n      maximum: 2.5\n      minimum: 2.5\n      exclusiveMinimum: true\n      exclusiveMaximum: true\n      maxLength: 2\n      minLength: 2\n      format: format\n      pattern: pattern\n      items: { $ref: '#/components/schemas/Ref' }\n      maxItems: 2\n      minItems: 2\n      uniqueItems: true\n      required: [all]\n      enum: [item1, item2]\n      maxProperties: 2\n      minProperties: 2\n      properties:\n        property: { type: string }\n      additionalProperties: true\n      allOf:\n        - { $ref: '#/components/schemas/Ref' }\n      anyOf:\n        - { $ref: '#/components/schemas/Ref' }\n      oneOf:\n        - { $ref: '#/components/schemas/Ref' }\n      not: { $ref: '#/components/schemas/Ref' }\n      discriminator:\n        propertyName: discriminator\n        mapping:\n          payloadval: schemaname\n      x-extension: ext\n",
			"canonicalURL": "/github.com/aarondl/oa3@1958eafa9c9cf7fc1cde9046ce261cb062eaabf2/-/blob/openapi3spec/testdata/openapi3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aarondl/oa3/blob/1958eafa9c9cf7fc1cde9046ce261cb062eaabf2/openapi3spec/testdata/openapi3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"Schema\": resolve \"#/components/schemas/Schema\": parse discriminator: at openapi3spec/testdata/openapi3.yaml:227:23: resolve mapping: resolve \"schemaname\": get \"https://raw.githubusercontent.com/aarondl/oa3/1958eafa9c9cf7fc1cde9046ce261cb062eaabf2/openapi3spec/testdata/schemaname\": https: bad HTTP code 404 (Not Found)"
}