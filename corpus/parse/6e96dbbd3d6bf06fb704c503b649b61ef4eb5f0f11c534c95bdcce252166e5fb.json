{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/yakumioto/alkaid"
		},
		"file": {
			"name": "oas3.yaml",
			"size": 0,
			"path": "docs/oas3.yaml",
			"byteSize": 10883,
			"content": "---\nopenapi: 3.0.1\n\ninfo:\n  title: Alkaid RESTful API\n  description: |\n  contact:\n    email: yakumioto@gmail.com\n  license:\n    name: MIT\n  version: 0.1.0\n\ntags:\n  - name: User\n    description: 用户\n  - name: Organization\n    description: 一个受管理的成员集合\n  - name: Identity\n    description: 用户或节点身份\n  - name: Network\n    description: 区块链网络\n  - name: Node\n    description: 网络中的节点\n\npaths:\n  /login:\n    post:\n      tags:\n        - User\n      summary: 用户登陆\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  type: string\n                password:\n                  type: string\n      responses:\n        200:\n          description: succcess\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  token:\n                    type: string\n\n  /users:\n    post:\n      tags:\n        - User\n      summary: 创建用户\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        200:\n          description: succcess\n          content: {}\n    get:\n      tags:\n        - User\n      summary: 查看用户列表\n      responses:\n        200:\n          description: succcess\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n  /users/{userId}:\n    patch:\n      tags:\n        - User\n      summary: 更新用户\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        200:\n          description: succcess\n          content: {}\n    get:\n      tags:\n        - User\n      summary: 查看用户\n      responses:\n        200:\n          description: succcess\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n\n  /organizations:\n    post:\n      tags:\n        - Organization\n      summary: 创建一个组织\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Organization'\n        required: true\n      responses:\n        200:\n          description: success\n          content: {}\n    get:\n      tags:\n        - Organization\n      summary: 查看组织列表\n      responses:\n        200:\n          description: succcess\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n  /organizations/{organizationId}:\n    patch:\n      tags:\n        - Organization\n      summary: 更新组织\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Organization'\n      responses:\n        200:\n          description: succcess\n          content: {}\n    get:\n      tags:\n        - Organization\n      summary: 查看组织\n      responses:\n        200:\n          description: succcess\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n\n  /identities:\n    post:\n      tags:\n        - Identity\n      summary: 创建一个身份\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Identity'\n        required: true\n      responses:\n        200:\n          description: success\n          content: {}\n    get:\n      tags:\n        - Identity\n      summary: 查看身份列表\n      responses:\n        200:\n          description: succcess\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Identity'\n  /identities/{identityId}:\n    patch:\n      tags:\n        - Identity\n      summary: 更新身份\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Identity'\n        required: true\n      responses:\n        200:\n          description: success\n          content: {}\n    get:\n      tags:\n        - Identity\n      summary: 查看身份\n      responses:\n        200:\n          description: succcess\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Identity'\n\n  /networks:\n    post:\n      tags:\n        - Network\n      summary: 创建一个网络\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Network'\n        required: true\n      responses:\n        200:\n          description: success\n          content: {}\n    get:\n      tags:\n        - Network\n      summary: 查看网络列表\n      responses:\n        200:\n          description: succcess\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Network'\n  /networks/{networkId}:\n    patch:\n      tags:\n        - Network\n      summary: 更新网络\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Network'\n        required: true\n      responses:\n        200:\n          description: success\n          content: {}\n    get:\n      tags:\n        - Network\n      summary: 查看网络\n      responses:\n        200:\n          description: succcess\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Network'\n\n  /nodes:\n    post:\n      tags:\n        - Node\n      summary: 创建一个节点\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Node'\n        required: true\n      responses:\n        200:\n          description: success\n          content: {}\n    get:\n      tags:\n        - Node\n      summary: 查看节点列表\n      responses:\n        200:\n          description: succcess\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Node'\n  /nodes/{nodeId}:\n    patch:\n      tags:\n        - Node\n      summary: 更新节点\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Node'\n        required: true\n      responses:\n        200:\n          description: success\n          content: {}\n    get:\n      tags:\n        - Node\n      summary: 查看网络\n      responses:\n        200:\n          description: succcess\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Node'\n\ncomponents:\n  schemas:\n    User:\n      type: object\n      properties:\n        resourceId:\n          type: string\n        id:\n          type: string\n        organizationId:\n          type: string\n        name:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        # 签名 以及 通信 公私密钥\n        protectedSigPrivateKey:\n          type: string\n        protectedTlsPrivateKey:\n          type: string\n        status:\n          type: string\n        createdAt:\n          type: integer\n          format: int64\n        updatedAt:\n          type: integer\n          format: int64\n    Organization:\n      type: object\n      properties:\n        # 组织的基础信息\n        id:\n          type: string\n        name:\n          type: string\n        domain:\n          type: string\n          example: example.com\n        description:\n          type: string\n        type:\n          type: string\n          description: 用于区分是排序组织还是对等组织\n          enum:\n            - orderer\n            - peer\n        # 用于生成组织证书信息\n        country:\n          type: string\n        province:\n          type: string\n        locality:\n          type: string\n        organizationalUnit:\n          type: string\n        streetAddress:\n          type: string\n        postalCode:\n          type: string\n        # 签名以及 TLS 通信根证书\n        signCAPrivateKey:\n          type: string\n        tlsCAPrivateKey:\n          type: string\n        signCACertificate:\n          type: string\n        tlsCACertificate:\n          type: string\n        createdAt:\n          type: integer\n          format: int64\n        updatedAt:\n          type: integer\n          format: int64\n    Identity:\n      type: object\n      properties:\n        id:\n          type: string\n        organizationId:\n          type: string\n        type:\n          type: string\n          enum:\n            - user\n            - application\n        use:\n          type: string\n          description: 用于指定证书类型\n          enum:\n            - orderer\n            - peer\n            - admin\n            - client\n        name:\n          type: string\n          description: |\n            如果用户类型为 orderer 或者 peer，则会自动解析为域名，格式如下：{{ .Name }}.{{ .Organization.Domain }}\n            如果用户类型为 admin 或者 client，则会自动解析为邮箱，格式如下：{{ .Name }}@{{ .Organization.Domain }}\n        description:\n          type: string\n        nodeOUs:\n          type: boolean\n          description: 针对类型为 orderer 或 peer 的用户设置证书的校验\n        sans:\n          type: array\n          description: 可以指定多个域名进行访问\n        # 签名证书 TLS 通信证书\n        signCertificate:\n          type: string\n        tlsCertificate:\n          type: string\n        createdAt:\n          type: integer\n          format: int64\n        updatedAt:\n          type: integer\n          format: int64\n    Network:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        type:\n          type: string\n          enum:\n            - docker\n            - swarm\n            - kubernetes\n        createdAt:\n          type: integer\n          format: int64\n        updatedAt:\n          type: integer\n          format: int64\n    Node:\n      type: object\n      properties:\n        id:\n          type: string\n        organizationId:\n          type: string\n        userId:\n          type: string\n        networkId:\n          type: string\n        name:\n          type: string\n        enableCouchDB:\n          type: boolean\n        status:\n          type: string\n        # 签名 以及 通信 公私密钥\n        signPrivateKey:\n          type: string\n        tlsPrivateKey:\n          type: string\n        createdAt:\n          type: integer\n          format: int64\n        updatedAt:\n          type: integer\n          format: int64"
		}
	},
	"Error": "parse: parse spec: paths: /identities/{identityId}: get: operation \"\": parse path: path parameter not specified: \"identityId\""
}