{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/elmasy-com/elmasy"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "api/swagger.yaml",
			"byteSize": 14510,
			"content": "openapi: 3.0.0\ninfo:\n  version: 0.0.1\n  title: Elmasy API\n  description: Documentation for Elmasy API.\n\nservers:\n  - url: https://scan.elmasy.com/api\n  - url: http://localhost:8080/api\n  - url: https://dev.elmasy.com/api\n\ntags:\n  - name: Basic\n    description: Basic API.\n  - name: Random\n    description: Return random things.\n  - name: Protocol\n    description: Protocol implementations.\n  - name: Scan\n    description: Scanner.\n\npaths:\n\n  /ip:\n    get:\n      summary: Your public IP address.\n      description: Returns your public IP address.\n      tags:\n        - Basic\n      responses:\n        200:\n          description: Success\n          content:\n            \"*/*\":\n              schema:\n                type: string\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResultStr\"       \n\n  /random/ip/:\n    get:\n      summary: Get a random public IP address.\n      description: Returns a random public IP address.\n      tags:\n        - Random\n      parameters:\n        - name: version\n          description: The version of the IP protocol. Valid versions are `ipv4`/`4` or `ipv6`/`6`. If `version` is omitted, the return IP version is random.\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResultStr\"\n        400:\n          description: Invalid IP protocol version.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /random/port:\n    get:\n      summary: Get a random port number.\n      description: Returns a random port.\n      tags:\n        - Random\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResultStr\"\n            \"*/*\":\n              schema:\n                type: string\n\n  /protocol/dns/{type}/{name}:\n    get:\n      summary: DNS Lookup.\n      description: >\n        Do a DNS lookup.\n      tags:\n        - Protocol\n      parameters:\n        - name: type\n          description: The question type. Can be `A`, `AAAA`, `MX` or `TXT`.\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: name\n          description: The domain name.\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Successful query.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResultStrs\"\n        400:\n          description: Invalid type or domain.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        404:\n          description: The domain name not exist (`NXDOMAIN`).\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: >\n            Query or server error. DNS Response codes returned: `FORMERR`, `SERVFAIL`,\n            `NOTIMP`, `REFUSED`, `YXDOMAIN`, `XRRSET`, `NOTAUTH` and `NOTZONE`.\n            Can be other unknown server error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  \n  /protocol/tls:\n    get:\n      summary: Analyze SSL/TLS.\n      description: >\n        A **low level** API to analyze SSL/TLS on ip:port. Returns the supported ciphers.\n      tags:\n        - Protocol\n      parameters:\n        - name: version\n          description: Specify the SSL/TLS version. Can be `ssl30`, `tls10`, `tls11`, `tls12` or `tls13`.\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: network\n          description: Target network. Can be `tcp` or `udp`. Defaults to `tcp`.\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: ip\n          description: The target IP address.\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: port\n          description: The target port.\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: servername\n          description: The server name for SNI. If omitted, SNI is not added to ServerHello.\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TLSVersion\"\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: An error occured while scanning.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  \n  /protocol/tls/certificate:\n    get:\n      summary: Parse TLS certificate.\n      description: >\n        A **Low Level** API parse a TLS certificate.\n      tags:\n        - Protocol\n      parameters:\n        - name: network\n          description: Target network. Can be `tcp` or `udp`. Defaults to `tcp`.\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: ip\n          description: The target IP address.\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: port\n          description: The target port.\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: servername\n          description: The server name for SNI.\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Cert\"\n        400:\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: Internal Server Error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /protocol/probe:\n    get:\n      summary: Probe protocol.\n      description: >\n        A **Low Level** API to probe whether the given protocol is supported on network on ip:port.\n      tags:\n        - Protocol\n      parameters:\n        - name: protocol\n          description: > \n            Protocol to probe. Currently supported: `dns`, `ssl30`, `tls10`, `tls11`, `tls12`, `tls13` and `tls`. If `tls` selected, every versions will be probed and report if any version is supported.\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: network\n          description: Target network. Can be `tcp` or `udp`. Defaults to `tcp`.\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: ip\n          description: The target IP address.\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: port\n          description: The target port.\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResultBool\"\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: An error occured while scanning.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /scan:\n    get:\n      summary: Scan target.\n      description: >\n        Scan the given target. Currently, only IPv4 targets are supported.\n      tags:\n        - Scan\n      parameters:\n        - name: target\n          description: Target hostname or IP.\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: port\n          description: The target port. Defaults to `443`.\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: network\n          description: The target network. Can be `tcp` or `udp`, defaults to `tcp`.\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success. This not means, that no error occured while scanning! These errors are returned in `errors` array.\n          content:\n            application/json:\n              schema:\n                $ref: \"#components/schemas/Result\"\n        400:\n          description: Invalid target or port.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        404:\n          description: Target domain not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: Internal error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n          \n  /scan/port:\n    get:\n      summary: Port scan\n      description: Port scanner API.\n      tags:\n        - Scan\n      parameters:\n        - name: technique\n          description: The portscan technique. Can be `syn`/`stealth`, `connect` or `udp`. If omitted, `connect` is used.\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: ip\n          description: The target IP address.\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: port\n          description: The target port number.\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: timeout\n          description: Scan timeout in second. Default to 2 seconds.\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: >\n            Success. This not mean that the port is open!\n            The possible results are: `open`, `closed` or `filtered`\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResultStr\"\n        400:\n          description: Invalid or missing query parameter.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        403:\n          description: The address is blacklisted. Not scanning!\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description:  Error.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n\n\ncomponents:\n\n  schemas:\n\n    ResultStr:\n      type: object\n      properties:\n        result:\n          type: string\n    \n    ResultBool:\n      type: object\n      properties:\n        result:\n          type: boolean\n      \n    ResultStrs:\n      type: object\n      properties:\n        results:\n          type: array\n          items:\n            type: string\n      \n    Error:\n      type: object\n      properties:\n        error:\n          type: string\n    \n    Errors:\n      type: object\n      properties:\n        errors:\n          type: array\n          items:\n            type: string\n\n    Cipher:\n      type: object\n      properties:\n        name:\n          type: string\n        security:\n          type: string\n    \n    PubKey:\n      type: object\n      properties:\n        algo:\n          type: string\n        size:\n          type: integer\n        key:\n          type: string\n        exponent:\n          type: integer\n        modulus:\n          type: string\n\n    Additional:\n      type: object\n      properties:\n        commonName:\n          type: string\n        hash:\n          type: string\n        notAfter:\n          type: string\n        issuer:\n          type: string\n        publicKey:\n          $ref: \"#/components/schemas/PubKey\"\n        signatureAlgorithm:\n          type: string\n\n    Cert:\n      type: object\n      properties:\n        commonName:\n          type: string\n        hash:\n          type: string\n        alternativeNames:\n          type: array\n          items:\n            type: string\n        signatureAlgorithm:\n          type: string\n        publicKey:\n          $ref: \"#/components/schemas/PubKey\"\n        serialNumber:\n          type: string\n        issuer:\n          type: string\n        notBefore:\n          type: string\n        notAfter:\n          type: string\n        verified:\n          type: boolean\n        verifiedError:\n          type: string\n        chain:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Additional\"\n  \n    TLSVersion:\n      type: object\n      properties:\n        version:\n          type: string\n        supported:\n          type: boolean\n        ciphers:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n              security:\n                type: string\n    TLS:\n      type: object\n      properties:\n        versions:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TLSVersion\"\n        cert:\n          $ref: \"#/components/schemas/Cert\"\n\n    Target:\n      type: object\n      properties:\n        ip:\n          type: string\n        tls:\n          $ref: \"#/components/schemas/TLS\"\n\n    Result:\n      type: object\n      properties:\n        domain:\n          type: string\n        targets:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Target\"\n        errors:\n          type: array\n          items:\n            type: string\n        \n        ",
			"canonicalURL": "/github.com/elmasy-com/elmasy@78d155f5f0a006e8338438700de986822652b426/-/blob/api/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/elmasy-com/elmasy/blob/78d155f5f0a006e8338438700de986822652b426/api/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/scan\": at 1:8131: get: at 1:8138: responses: 200: at 1:8650: content: application/json: at 1:8681: schema: at 1:8691: parse schema: resolve \"#components/schemas/Result\": find schema: resolve \"#components/schemas/Result\": invalid pointer \"components/schemas/Result\": pointer must start with '/'"
}