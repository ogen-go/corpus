{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/plantbreeding/BrAPI"
		},
		"file": {
			"name": "ObservationUnitNewRequest.yaml",
			"size": 0,
			"path": "Specification/BrAPI-Phenotyping/ObservationUnits/Schemas/ObservationUnitNewRequest.yaml",
			"byteSize": 3147,
			"content": "info:\n  title: BrAPI\n  version: ''\nopenapi: 3.0.0\npaths: {}\ncomponents:\n  schemas:\n    ObservationUnitNewRequest:\n      type: object\n      properties:\n        additionalInfo:\n          additionalProperties:\n            type: string\n          description: Additional arbitrary info\n          type: object\n        germplasmDbId:\n          description: The ID which uniquely identifies a germplasm\n          type: string\n          example: e9d9ed57\n        germplasmName:\n          description: Name of the germplasm. It can be the preferred name and does not have to be unique.\n          type: string\n          example: A0000001\n        seedLotDbId:\n          description: The unique identifier for the originating Seed Lot\n          type: string\n          example: 261ecb09\n        locationDbId:\n          description: The ID which uniquely identifies a location, associated with this study\n          type: string\n          example: 0e208b20\n        locationName:\n          description: The human readable name of a location associated with this study\n          type: string\n          example: Field Station Alpha\n        observationUnitName:\n          description: A human readable name for an observation unit\n          type: string\n          example: Plot 1\n        observationUnitPUI:\n          description: |-\n            A Permanent Unique Identifier for an observation unit\n            \n            MIAPPE V1.1 (DM-72) External ID - Identifier for the observation unit in a persistent repository, comprises the name of the repository and the identifier of the observation unit therein. The EBI Biosamples repository can be used. URI are recommended when possible.\n          type: string\n          example: http://pui.per/plot/1a9afc14\n        externalReferences: \n          $ref: '#/components/schemas/ExternalReferences'\n        observationUnitPosition:\n          $ref: '#/components/schemas/ObservationUnitPosition'\n        programDbId:\n          description: The ID which uniquely identifies a program\n          type: string\n          example: 2d763a7a\n        programName:\n          description: The human readable name of a program\n          type: string\n          example: The Perfect Breeding Program\n        studyDbId:\n          description: The ID which uniquely identifies a study within the given database server\n          type: string\n          example: 9865addc\n        studyName:\n          description: The human readable name for a study\n          type: string\n          example: Purple_Tomato_1\n        treatments:\n          description: |-\n            List of treatments applied to an observation unit.\n            \n            MIAPPE V1.1 (DM-74) Observation Unit factor value - List of values for each factor applied to the observation unit.\n          items:\n            $ref: '#/components/schemas/ObservationTreatment'\n          type: array\n        trialDbId:\n          description: The ID which uniquely identifies a trial\n          type: string\n          example: 776a609c\n        trialName:\n          description: The human readable name of a trial\n          type: string\n          example: Purple Tomato\n          \n\n",
			"canonicalURL": "/github.com/plantbreeding/BrAPI@5252d84f331840650fffbca6cb8cece10a65cea6/-/blob/Specification/BrAPI-Phenotyping/ObservationUnits/Schemas/ObservationUnitNewRequest.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/plantbreeding/BrAPI/blob/5252d84f331840650fffbca6cb8cece10a65cea6/Specification/BrAPI-Phenotyping/ObservationUnits/Schemas/ObservationUnitNewRequest.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"ObservationUnitNewRequest\": parse schema: property \"externalReferences\": parse schema: resolve \"#/components/schemas/ExternalReferences\": find schema: resolve \"#/components/schemas/ExternalReferences\": can't find value for \"components/schemas/ExternalReferences\""
}