{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/DianaMukaliyeva/hypertube"
		},
		"file": {
			"name": "docs.yaml",
			"size": 0,
			"path": "backend/docs/docs.yaml",
			"byteSize": 26384,
			"content": "---\nopenapi: 3.0.0\ninfo:\n  title: Hypertube\n  description: This is a Hypertube API\n  contact:\n    email: you@your-company.com\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.0\nservers:\n  - url: https://virtserver.swaggerhub.com/tes929/Hypertube/1.0.0\n    description: SwaggerHub API Auto Mocking\ntags:\n  - name: Auth\n    description: user auth routes.\n  - name: Users\n    description: user profile routes\n  - name: Movies\n    description: movie gallery routes\npaths:\n  /api/auth/login:\n    post:\n      tags:\n        - Auth\n      summary: user login\n      operationId: userLogin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/body'\n        required: true\n      responses:\n        '200':\n          description: search results matching criteria\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200'\n        '400':\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse400'\n        '500':\n          description: Internal Server Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n  /api/auth/google:\n    get:\n      tags:\n        - Auth\n      summary: login with Google\n      operationId: googleLogin\n      responses:\n        '200':\n          description: url for Google authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_5_google'\n        '500':\n          description: Internal Server Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n  /api/auth/42:\n    get:\n      tags:\n        - Auth\n      summary: login with 42 account\n      operationId: 42Login\n      responses:\n        '200':\n          description: url for 42 authentication\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_5_42'\n        '500':\n          description: Internal Server Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n  /api/auth/token/{key}:\n    get:\n      tags:\n        - Auth\n      summary: get authorization token by key\n      parameters:\n        - in: path\n          name: key\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: a3016883-22ee-4c56-b680-2394862974ca\n          required: true\n          description: uuid key of the token to get\n      operationId: omniAuthToken\n      responses:\n        '200':\n          description: authorization token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_5_token'\n        '400':\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse400'\n        '500':\n          description: Internal Server Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n  /api/auth/recoverylink:\n    post:\n      tags:\n        - Auth\n      summary: send recover link\n      operationId: recoverLInk\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/body_1'\n        required: true\n      responses:\n        '200':\n          description: recovery email has been successfully sent\n        '400':\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse400'\n        '500':\n          description: Internal Server Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n  /api/users:\n    post:\n      tags:\n        - Users\n      summary: create account\n      operationId: createAccount\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/body_2'\n        required: true\n      responses:\n        '201':\n          description: user successfully created\n        '400':\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse400'\n        '500':\n          description: Internal Server Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n    patch:\n      tags:\n        - Users\n      summary: Change password\n      operationId: changePwd\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/body_3'\n        required: true\n      responses:\n        '200':\n          description: password successfully updated\n        '400':\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse400'\n        '500':\n          description: Internal Server Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n  /api/users/{userId}:\n    get:\n      tags:\n        - Users\n      summary: get user details\n      operationId: getUser\n      parameters:\n        - name: userId\n          in: path\n          description: user id\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: integer\n            example: 456\n      responses:\n        '200':\n          description: user information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_1'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n        '500':\n          description: Internal Server Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n    patch:\n      tags:\n        - Users\n      summary: update user profile\n      operationId: updateUser\n      parameters:\n        - name: userId\n          in: path\n          description: user id\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: integer\n            example: 456\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/body_4'\n        required: true\n      responses:\n        '200':\n          description: user successfully updated\n        '400':\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse400'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n        '500':\n          description: Internal Server Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n  /api/movies:\n    get:\n      tags:\n        - Movies\n      summary: get list of movies\n      operationId: getMovies\n      parameters:\n        - name: page\n          in: query\n          description: page\n          required: true\n          schema:\n            type: integer\n            example: 2\n        - name: decade\n          in: query\n          description: decade\n          schema:\n            type: string\n            example: 1980\n        - name: imdb\n          in: query\n          description: minimum imdb rating\n          schema:\n            type: string\n            example: 8\n        - name: genre\n          in: query\n          description: genre\n          schema:\n            type: string\n            example: comedy\n        - name: sort_by\n          in: query\n          description: sort by 'year', 'title', 'rating'\n          schema:\n            type: string\n            example: rating\n        - name: order_by\n          in: query\n          description: order by 'desc', 'asc'\n          schema:\n            type: string\n            example: desc\n        - name: search\n          in: query\n          description: search by movie's title\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            example: breaking\n      responses:\n        '200':\n          description: list of movies\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_2'\n        '400':\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse400'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n        '500':\n          description: Internal Server Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n  /api/movies/{imdbCode}:\n    get:\n      tags:\n        - Movies\n      summary: get Movie\n      operationId: getMovieInfo\n      parameters:\n        - name: imdbCode\n          in: path\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: tt1211837\n      responses:\n        '200':\n          description: movie information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_4'\n        '400':\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse400'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n        '500':\n          description: Internal Server Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n  /api/movies/{imdbCode}/play/{token}:\n    get:\n      tags:\n        - Movies\n      summary: start movie download and playback\n      operationId: playMovie\n      parameters:\n        - name: imdbCode\n          in: path\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: tt1211837\n        - name: token\n          in: path\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwNDdkODM3MWIxZTg1MDAxZTllMDk1ZiIsImxhbmciOiJmaSIsImlhdCI6MTYxNTQwMzU2MX0.qZf_Aw8U7dKYIXudIExHhP9vmXfOMJhlx8X9Mra6beQ\n      responses:\n        '206':\n          description: movie filestream in .mp4 format, 20mb chunks\n          content:\n            video/mp4:\n              schema:\n                type: binary\n                example: ftypisomisomiso2avc1mp41S8smoovlmvhd2h3b4\\4w5q5�5�6/6j7K7[...]2h3b4\\4w5q5�5�6/6j7K7\n\n        '400':\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse400'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n        '500':\n          description: Internal Server Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n    patch:\n      tags:\n        - Movies\n      summary: set Movie watched\n      operationId: setWatched\n      parameters:\n        - name: imdbCode\n          in: path\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: tt1211837\n      responses:\n        '200':\n          description: Success.\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n        '500':\n          description: Internal Server Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n  /api/movies/{imdbCode}/subtitles/{lang}/{token}:\n    get:\n      tags:\n        - Movies\n      summary: get subtitles\n      operationId: getSubtitles\n      parameters:\n        - name: imdbCode\n          in: path\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: tt1211837\n        - name: lang\n          in: path\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: en\n        - name: token\n          in: path\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwNDdkODM3MWIxZTg1MDAxZTllMDk1ZiIsImxhbmciOiJmaSIsImlhdCI6MTYxNTQwMzU2MX0.qZf_Aw8U7dKYIXudIExHhP9vmXfOMJhlx8X9Mra6beQ\n      responses:\n        '200':\n          description: movie information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_4'\n        '400':\n          description: Bad Request.\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n        '500':\n          description: Internal Server Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n  /api/movies/{imdbCode}/comments:\n    get:\n      tags:\n        - Movies\n      summary: get comments by movie IMDb code\n      operationId: getComments\n      parameters:\n        - name: imdbCode\n          in: path\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: tt1211837\n      responses:\n        '200':\n          description: successfully fetched\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  comments:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/inline_response_200_4_comments'\n        '400':\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse400'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n        '500':\n          description: Internal Server Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n    post:\n      tags:\n        - Movies\n      summary: add comment to Movie\n      operationId: addComment\n      parameters:\n        - name: imdbCode\n          in: path\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: tt1211837\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/body_5'\n        required: true\n      responses:\n        '201':\n          description: comment added\n        '400':\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse400'\n        '401':\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\n        '500':\n          description: Internal Server Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse401-500'\ncomponents:\n  schemas:\n    ErrorResponse401-500:\n      required:\n        - errorType\n      type: object\n      properties:\n        errorType:\n          type: string\n          example: string\n    ErrorResponse400:\n      required:\n        - details\n        - errorType\n      type: object\n      properties:\n        errorType:\n          type: string\n          example: string\n        details:\n          type: array\n          items:\n            $ref: '#/components/schemas/ErrorResponse400_details'\n    body:\n      required:\n        - password\n        - username\n      type: object\n      properties:\n        username:\n          type: string\n          example: jane88\n        password:\n          type: string\n          example: 123aaaa\n    inline_response_200:\n      type: object\n      properties:\n        token:\n          type: string\n          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n    body_1:\n      required:\n        - email\n      type: object\n      properties:\n        email:\n          type: string\n          example: plustig@lustiger.de\n    body_2:\n      required:\n        - confirmPassword\n        - email\n        - firstname\n        - lastname\n        - language\n        - password\n        - username\n      type: object\n      properties:\n        username:\n          type: string\n          example: jane88\n        email:\n          type: string\n          example: jane88@test.com\n        firstname:\n          type: string\n          example: Jane\n        lastname:\n          type: string\n          example: Doe\n        language:\n          type: string\n          example: en\n        password:\n          type: string\n          example: jane88ssssss\n        confirmPassword:\n          type: string\n          example: jane88ssssss\n    body_3:\n      required:\n        - password\n        - confirmPassword\n        - token\n        - userId\n      type: object\n      properties:\n        password:\n          type: string\n          example: jane88\n        confirmPassword:\n          type: string\n          example: jane88\n        resetToken:\n          type: string\n          description: from recovery link params\n          example: some long token\n        userId:\n          type: integer\n          description: from recovery link params\n          example: 556\n    inline_response_200_1:\n      required:\n        - avatarBase64String\n        - firstname\n        - lastname\n        - username\n      type: object\n      properties:\n        username:\n          type: string\n          example: johny\n        firstname:\n          type: string\n          example: John\n        lastname:\n          type: string\n          example: Doe\n        email:\n          type: string\n          example: john.doe@example.com\n        avatarBase64String:\n          type: string\n          example: base64 image string\n        language:\n          type: string\n          example: en\n        hasPw:\n          type: boolean\n          example: true\n      description: if user's own info, then send everything, otherwise - only requried\n    body_4:\n      type: object\n      properties:\n        username:\n          type: string\n          example: jane88\n        email:\n          type: string\n          example: jane88@test.com\n        firstname:\n          type: string\n          example: Jane\n        lastname:\n          type: string\n          example: Doe\n        language:\n          type: string\n          example: en\n        avatarBase64String:\n          type: string\n          example: 'base 64 string'\n        oldPassword:\n          type: string\n          example: old password\n        password:\n          type: string\n          example: jane88ssssss\n        confirmPassword:\n          type: string\n          example: jane88ssssss\n    inline_response_200_2:\n      type: object\n      properties:\n        movies:\n          type: array\n          items:\n            $ref: '#/components/schemas/inline_response_200_2_movies'\n        hasMore:\n          type: boolean\n          example: true\n    inline_response_200_3:\n      type: object\n      properties:\n        genres:\n          type: array\n          example:\n            - comedy\n            - drama\n            - fantasy\n          items:\n            type: string\n    inline_response_200_4:\n      type: object\n      properties:\n        title:\n          type: string\n          example: Epidemia\n        imdbRating:\n          type: number\n          example: 8.4\n        year:\n          type: integer\n          example: 1984\n        genre:\n          type: string\n          example: comedy\n        description:\n          type: string\n          example: Cool movie\n        length:\n          type: integer\n          description: in minutes\n          example: 85\n        director:\n          type: string\n          example: Mike King\n        producer:\n          type: string\n          example: Alex Cohon\n        cast:\n          type: array\n          example:\n            - John Smith\n            - Rebecca Vincor\n          items:\n            type: string\n        subtitles:\n          $ref: '#/components/schemas/inline_response_200_4_subtitles'\n        downloaded:\n          type: boolean\n        watched:\n          type: boolean\n        availableSubtitles:\n          type: array\n          example:\n            - en\n            - fi\n        comments:\n          type: array\n          items:\n            $ref: '#/components/schemas/inline_response_200_4_comments'\n\n    body_5:\n      type: object\n      properties:\n        comment:\n          type: string\n          example: new comment\n    ErrorResponse400_details:\n      required:\n        - param\n        - provided\n        - reason\n      type: object\n      properties:\n        param:\n          type: string\n          example: string\n        provided:\n          type: string\n          example: string\n        reason:\n          type: string\n          example: string\n    inline_response_200_2_movies:\n      type: object\n      properties:\n        title:\n          type: string\n          example: Epidemia\n        imdbCode:\n          type: string\n          example: tt3501632\n        imdbRating:\n          type: float\n          example: 7.9\n        year:\n          type: integer\n          example: 1984\n        thumbnail:\n          type: string\n          example: /movies/movidl;\n        hash:\n          type: string\n          example: 134F7AF967DBDB585A934A24C9F2A2EEE72E2A93\n        watched:\n          type: boolean\n          example: true\n    inline_response_200_4_subtitles:\n      type: object\n      properties:\n        en:\n          type: string\n          example: ???\n        userLanguage:\n          type: string\n          example: ???\n    inline_response_200_4_comments:\n      type: object\n      properties:\n        userId:\n          type: integer\n          example: 465\n        username:\n          type: string\n          example: Johny77\n        firstname:\n          type: string\n          example: John\n        lastname:\n          type: string\n          example: Doe\n        message:\n          type: string\n          example: amazing\n        avatar:\n          type: string\n          example: TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCB\n    inline_response_200_5_google:\n      type: object\n      properties:\n        url:\n          type: string\n          example: https://accounts.google.com/o/oauth2/v2/auth?access_type=offline\u0026prompt=consent\u0026scope=something\u0026response_type=code\u0026client_id=something\u0026redirect_uri=something\n    inline_response_200_5_42:\n      type: object\n      properties:\n        url:\n          type: string\n          example: https://api.intra.42.fr/oauth/authorize?client_id=something\u0026redirect_uri=something\u0026state=something\u0026response_type=code\n    inline_response_200_5_token:\n      type: object\n      properties:\n        token:\n          type: string\n          example: eyJhbGciOiJIUzI1NiIsmxhbmciOiJlbiIsImlhInR5cCI6IkpXVCJ9.eyJpZCI6IjYwNDVmZDczZDNlYTRlMDAyZmNkOGI3NiIsIdCI6MTYxNTIwNDY5OH0.J3LxM4soiYaXC0XGoHzFDXVp9lpbVgAm5pB4daZjciE\n  responses:\n    '500ApiError':\n      description: Internal Server Error.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse401-500'\n    '409ApiError':\n      description: Conflict.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse401-500'\n    '404ApiError':\n      description: Not Found.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse401-500'\n    '403ApiError':\n      description: Forbidden.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse401-500'\n    '401ApiError':\n      description: Unauthorized.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse401-500'\n    '400ApiError':\n      description: Bad Request.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse400'\n"
		}
	},
	"Error": "parse: parse spec: paths: /api/movies: get: operation \"getMovies\": responses: 200: content: \"application/json\": schema: parse schema: reference \"#/components/schemas/inline_response_200_2\": parse schema: movies: parse schema: item: parse schema: reference \"#/components/schemas/inline_response_200_2_movies\": parse schema: imdbRating: parse schema: unexpected schema type: \"float\""
}