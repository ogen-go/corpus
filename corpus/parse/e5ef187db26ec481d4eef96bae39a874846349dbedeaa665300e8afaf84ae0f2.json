{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/kevenli/scrapydd"
		},
		"file": {
			"name": "node_api.yaml",
			"size": 0,
			"path": "docs/node_api.yaml",
			"byteSize": 6546,
			"content": "openapi: 3.0.0\r\ninfo:\r\n  description: |\r\n    Node API for communication between worker and server.\r\n  version: 1.0.0\r\n  title: Node API\r\ntags:\r\n- name: node\r\n- name: NodeSession\r\npaths:\r\n  /nodes:\r\n    post:\r\n      summary: Register a new permanent node.\r\n      operationId: CreateNode\r\n      tags:\r\n      - node\r\n      parameters:\r\n        - in: query\r\n          name: node_key\r\n          required: true\r\n          schema:\r\n            type: string\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: \"#/components/schemas/Node\"\r\n          application/x-www-form-urlencoded:\r\n            schema:\r\n              type: object\r\n              properties:\r\n                tags:\r\n                  type: array\r\n                  items:\r\n                    type: string\r\n\r\n      responses:\r\n        200:\r\n          description: Success\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref:  \"#/components/schemas/Node\"\r\n        400:\r\n          description: Invalid parameter.\r\n        401:\r\n          description: Unauthenticated request.\r\n  /nodes/{nodeId}:\r\n    get:\r\n      tags:\r\n      - node\r\n      parameters:\r\n      - in: path\r\n        name: nodeId\r\n        required: true\r\n        schema:\r\n          type: integer\r\n          format: int64\r\n      responses:\r\n        200:\r\n          description: Successful Response\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: \"#/components/schemas/Node\"\r\n  /nodeSessions:\r\n    post:\r\n      tags:\r\n      - node\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/NodeSession'\r\n      responses:\r\n        200:\r\n          description: Sucessful Result\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: \"#/components/schemas/NodeSession\"\r\n        401:\r\n          description: Unauthenticated request.\r\n        409:\r\n          description: |\r\n            There are some NodeSession living already relates to the\r\n            target Node.\r\n\r\n\r\n  /nodeSessions/{nodeSessionId}:heartbeat:\r\n    post:\r\n      tags:\r\n        - node\r\n      parameters:\r\n        - in: path\r\n          name: nodeSessionId\r\n          required: true\r\n          schema:\r\n            type: integer\r\n            format: int64\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              type: object\r\n              properties:\r\n                running_job_ids:\r\n                  type: array\r\n                  items:\r\n                    type: string\r\n      responses:\r\n        200:\r\n          description: Successful Result\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                properties:\r\n                  new_job_available:\r\n                    type: boolean\r\n                  kill_job_ids:\r\n                    type: array\r\n                    items:\r\n                      type: string\r\n        401:\r\n          description: Unauthenticated request\r\n  /nodeSessions/{node_session_id}/jobs:obtain:\r\n    post:\r\n      operationId: ObtainNodeSessionJob\r\n      description: Pull a new job which current Node is qualified to run.\r\n      responses:\r\n        200:\r\n          description: new job obtained\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: \"#/components/schemas/NodeSessionJob\"\r\n        404:\r\n          description: No job available\r\n        401:\r\n          description: Authentication failed or NodeSession is not existing.\r\n  /nodeSessions/{node_session_id}/jobs/{job_id}/egg:\r\n    get:\r\n      operationId: GetNodeSessionJobEgg\r\n      description: Get NodeSession's job egg file\r\n      parameters:\r\n        - in: path\r\n          name: node_session_id\r\n          schema:\r\n            type: integer\r\n            format: int64\r\n        - in: path\r\n          name: job_id\r\n          schema:\r\n            type: string\r\n      responses:\r\n        200:\r\n          description: The egg binary file\r\n          content:\r\n            application/octet-stream:\r\n              schema:\r\n                type: string\r\n                format: binary\r\n  /nodeSessions/node_session_id/jobs/{job_id}:complete:\r\n    post:\r\n      operationId: CompoleteNodeSessionJob\r\n      description: Complete a job\r\n      parameters:\r\n        - in: path\r\n          name: node_session_id\r\n          schema:\r\n            type: integer\r\n            format: int64\r\n        - in: path\r\n          name: job_id\r\n          schema:\r\n            type: string\r\n      requestBody:\r\n        content:\r\n          multipart/form-data:\r\n            schema:\r\n              type: object\r\n              properties:\r\n                status:\r\n                  type: string\r\n                  enum: [success, fail]\r\n                logs:\r\n                  type: string\r\n                  format: binary\r\n                items:\r\n                  type: string\r\n                  format: binary\r\n      responses:\r\n        200:\r\n          description: Success\r\n        404:\r\n          description: job not found.\r\n        401:\r\n          description: Node session not authenticated, may be expired.\r\ncomponents:\r\n  schemas:\r\n    Node:\r\n      type: object\r\n      required:\r\n      - node_key\r\n      properties:\r\n        name:\r\n          type: string\r\n          readOnly: true\r\n          example: nodes/*\r\n        id:\r\n          type: integer\r\n          format: int64\r\n          readOnly: true\r\n        display_name:\r\n          type: string\r\n          readOnly: true\r\n        tags:\r\n          type: array\r\n          items:\r\n            type: string\r\n        is_online:\r\n          type: boolean\r\n          readOnly: true\r\n        client_ip:\r\n          type: string\r\n          readOnly: true\r\n    NodeSession:\r\n      type: object\r\n      properties:\r\n        name:\r\n          type: string\r\n          example: 'nodeSessions/*'\r\n          readOnly: true\r\n        id:\r\n          type: integer\r\n          format: int64\r\n          readOnly: true\r\n        node_id:\r\n          type: integer\r\n          format: int64\r\n    NodeSessionJob:\r\n      type: object\r\n      properties:\r\n        name:\r\n          type: string\r\n          example: 'nodeSessions/*/jobs/*'\r\n          readOnly: true\r\n        id:\r\n          type: string\r\n        figure:\r\n          type: string\r\n          description: the job's figure in json format\r\n\r\nservers:\r\n  - url: http://localhost:6800/v1\r\n",
			"canonicalURL": "/github.com/kevenli/scrapydd@ba7854a69e756e5d0e6b5f835d8f36fe57f7f7c2/-/blob/docs/node_api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/kevenli/scrapydd/blob/ba7854a69e756e5d0e6b5f835d8f36fe57f7f7c2/docs/node_api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/nodeSessions/{node_session_id}/jobs/{job_id}/egg\": get: operation \"GetNodeSessionJobEgg\": parameters: parse parameter \"node_session_id\": at 1:2873: path parameters must be required"
}