{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wikimedia/restbase"
		},
		"file": {
			"name": "definition.yaml",
			"size": 0,
			"path": "v1/definition.yaml",
			"byteSize": 5650,
			"content": "openapi: 3.0.1\ninfo:\n  version: 1.0.0-beta\n  title: MediaWiki Definition API\n  description: Wikitionary word definition API\n  termsOfService: https://github.com/wikimedia/restbase#restbase\n  contact:\n    name: Services\n    email: services@lists.wikimedia.org\n    url: https://www.mediawiki.org/wiki/Services\n  license:\n    name: Apache licence, v2\n    url: https://www.apache.org/licenses/LICENSE-2.0\npaths:\n  /definition/{term}:\n    x-route-filters:\n      - path: ./lib/access_check_filter.js\n      - path: ./lib/normalize_title_filter.js\n        options:\n          title_param_name: term\n          redirect_cache_control: '{{options.response_cache_control}}'\n    get:\n      tags:\n        - Page content\n      summary: Get term definitions based on Wiktionary content.\n      description: |\n        Experimental end point providing term definitions extracted from\n        Wiktionary content. Currently, only English Wiktionary is supported.\n        See [this wiki\n        page](https://www.mediawiki.org/wiki/Wikimedia_Apps/Wiktionary_definition_popups_in_the_Android_Wikipedia_Beta_app)\n        for background and considerations for further development.\n\n        Stability: [stable](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Stable)\n\n        Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.\n      parameters:\n        - name: term\n          in: path\n          description: The term to define\n          required: true\n          schema:\n            type: string\n        - name: redirect\n          in: query\n          description: |\n            Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.\n            To get a 200 response instead, supply `false` to the `redirect` parameter.\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: The definition for the given term\n          content:\n            application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/definition/0.8.0\":\n              schema:\n                $ref: '#/components/schemas/definitionsResponse'\n        301:\n          description: |\n            A permanent redirect is returned if the supplied article title was not in the normalized form.\n            To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform\n            title normalization client-side.\n\n            Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)\n            will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).\n        302:\n          description: |\n            The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).\n            The `location` header points to the redirect target.\n            If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.\n\n            Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)\n            will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).\n        404:\n          description: Unknown term\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        501:\n          description: Term definitions not supported for this language\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        default:\n          description: Error\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n      x-request-handler:\n        - extract:\n            request:\n              method: get\n              uri: '{{$$.options.host}}/{domain}/v1/page/definition/{term}'\n            return:\n              status: 200\n              headers:\n                etag: '{{extract.headers.etag}}'\n                cache-control: '{{options.response_cache_control}}'\n                content-language: '{{extract.headers.content-language}}'\n                content-type: '{{extract.headers.content-type}}'\n                vary: '{{extract.headers.vary}}'\n              body: '{{extract.body}}'\n      x-monitor: false\n\ncomponents:\n  schemas:\n    definition:\n      type: object\n      description: Describes a single definition of a term\n      properties:\n        definition:\n          type: string\n          description: A term definition\n        examples:\n          type: array\n          items:\n            type: string\n            description: An example of word usage\n      required:\n        - definition\n    usageDescription:\n      type: object\n      properties:\n        partOfSpeech:\n          type: string\n          description: Part of speech (e.g. 'Noun' or 'Verb')\n        definitions:\n          type: array\n          items:\n            $ref: '#/components/schemas/definition'\n      required:\n        - definitions\n        - partOfSpeech\n\n    definitionsResponse:\n      type: object\n      properties:\n        usages:\n          type: array\n          items:\n            $ref: '#/components/schemas/usageDescription'\n      required:\n        - usages\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /definition/{term}: get: responses: 404: content: application/problem+json: schema: parse schema: resolve \"#/components/schemas/problem\": find schema: resolve \"#/components/schemas/problem\": can't find value for \"components/schemas/problem\""
}