{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/geoadmin/service-stac"
		},
		"file": {
			"name": "schemas.yaml",
			"size": 0,
			"path": "spec/transaction/components/schemas.yaml",
			"byteSize": 18586,
			"content": "openapi: 3.0.1\ncomponents:\n  schemas:\n    assetId:\n      type: string\n      pattern: ^[a-z0-9.-_]+$\n      title: ID\n      description: \u003e-\n        The asset id uniquely identifies the asset for an item\n\n\n        **Note**: `id` must be unique for the item and must be identical to the\n        filename.\n      example: smr50-263-2016-2056-kgrs-2.5.tiff\n    assets:\n      title: Assets\n      type: object\n      properties:\n        assets:\n          items:\n            $ref: \"#/components/schemas/readUpdateAsset\"\n          type: array\n        links:\n          items:\n            $ref: \"../../components/schemas.yaml#/components/schemas/link\"\n          type: array\n          example:\n            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets\n              rel: self\n            - href: https://data.geo.admin.ch/api/stac/v0.9/\n              rel: root\n            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019\n              rel: parent\n            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019\n              rel: item\n            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale\n              rel: collection\n    collectionWrite:\n      title: collection\n      allOf:\n        - $ref: \"../../components/schemas.yaml#/components/schemas/collectionBase\"\n        - type: object\n          properties:\n            published:\n              type: boolean\n              default: True\n              description: |\n                Collection that are not published are not listed in the /collections endpoint. Same for collection's items,\n                they are then not listed in the /search endpoint when not published.\n            links:\n              type: array\n              items:\n                $ref: \"../../components/schemas.yaml#/components/schemas/link\"\n              example:\n                - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html\n                  rel: license\n                  title: Licence for the free geodata of the Federal Office of Topography swisstopo\n                - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df\n                  rel: describedby\n    createAsset:\n      allOf:\n        - $ref: \"../../components/schemas.yaml#/components/schemas/assetBase\"\n        - type: object\n          required:\n            - id\n            - links\n          properties:\n            id:\n              $ref: \"./schemas.yaml#/components/schemas/assetId\"\n            links:\n              items:\n                $ref: \"../../components/schemas.yaml#/components/schemas/link\"\n              type: array\n              readOnly: true\n              example:\n                - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets/smr50-263-2016-2056-kgrs-2.5.tiff\n                  rel: self\n                - href: https://data.geo.admin.ch/api/stac/v0.9/\n                  rel: root\n                - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019\n                  rel: parent\n                - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019\n                  rel: item\n                - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale\n                  rel: collection\n    readUpdateAsset:\n      allOf:\n        - $ref: \"../../components/schemas.yaml#/components/schemas/assetBase\"\n        - type: object\n          required:\n            - id\n            - links\n          properties:\n            id:\n              $ref: \"./schemas.yaml#/components/schemas/assetId\"\n            links:\n              items:\n                $ref: \"../../components/schemas.yaml#/components/schemas/link\"\n              type: array\n              readOnly: true\n              example:\n                - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets/smr50-263-2016-2056-kgrs-2.5.tiff\n                  rel: self\n                - href: https://data.geo.admin.ch/api/stac/v0.9/\n                  rel: root\n                - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019\n                  rel: parent\n                - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019\n                  rel: item\n                - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale\n                  rel: collection\n    writeItem:\n      allOf:\n        - $ref: \"../../components/schemas.yaml#/components/schemas/itemBase\"\n        - type: object\n          properties:\n            links:\n              items:\n                $ref: \"../../components/schemas.yaml#/components/schemas/link\"\n              type: array\n              description: \u003e-\n                Add additional link to the generated ones (`self`, `root`, `parent`, `items`,\n                `collection`, `next`, `previous`)\n    createItem:\n      allOf:\n        - type: object\n          required:\n            - id\n          properties:\n            id:\n              $ref: \"../../components/schemas.yaml#/components/schemas/itemId\"\n        - $ref: \"./schemas.yaml#/components/schemas/writeItem\"\n    updateItem:\n      allOf:\n        - type: object\n          required:\n            - id\n          properties:\n            id:\n              $ref: \"#/components/schemas/itemIdUpdate\"\n        - $ref: \"#/components/schemas/writeItem\"\n    partialItem:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/itemIdUpdate\"\n        geometry:\n          $ref: \"../../components/schemas.yaml#/components/schemas/itemGeometry\"\n        properties:\n          $ref: \"../../components/schemas.yaml#/components/schemas/itemProperties\"\n        links:\n          type: array\n          items:\n            $ref: \"../../components/schemas.yaml#/components/schemas/link\"\n          description: \u003e-\n            Add/update additional link to the generated ones (`self`, `root`, `parent`, `items`,\n            `collection`, `next`, `previous`)\n      example:\n        properties:\n          datetime: \"2016-05-03T13:22:30.040Z\"\n    partialCollection:\n      type: object\n      description: Allows for a set of partial metadata fields for a collection\n      properties:\n        id:\n          description: Identifier of the collection used, for example, in URIs\n          type: string\n          example: ch.swisstopo.pixelkarte-farbe-pk200.noscale\n        title:\n          description: Human readable title of the collection\n          type: string\n          example: National Map 1:200'000\n        description:\n          description: A description of the features in the collection\n          type: string\n          example: The National Map 1:200,000 is a topographic map giving an overview of Switzerland.\n        links:\n          type: array\n          items:\n            $ref: \"../../components/schemas.yaml#/components/schemas/link\"\n          example:\n            - href: http://data.example.com/buildings\n              rel: item\n            - href: http://example.com/concepts/buildings.html\n              rel: describedBy\n              type: text/html\n        extent:\n          $ref: \"../../components/schemas.yaml#/components/schemas/extent\"\n        itemType:\n          description: \u003e-\n            Indicator about the type of the items in the collection (the default value is 'feature').\n          type: string\n          default: feature\n        crs:\n          description: The list of coordinate reference systems supported by the service\n          type: array\n          items:\n            type: string\n          default:\n            - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n          example:\n            - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n            - http://www.opengis.net/def/crs/EPSG/0/4326\n        example:\n          title: The new title of the collection\n    itemIdUpdate:\n      description: \u003e-\n        Item identifier (unique per collection. If it doesn't match the `featureId` in path\n        parameters, then the Item is renamed.\n      example: smr200-200-4-2019\n      type: string\n    uploadId:\n      title: ID\n      type: string\n      description: Unique Asset upload identifier\n      example: KrFTuglD.N8ireqry_w3.oQqNwrYI7SfSXpVRiusKah0YigDnuM06hfJNIUZg4R_No0MMW9FLU2UG5anTW0boTUYVxKfBZWCFXqnQTpjnQEo1K7la39MYpjSTvIbZgnG\n      readOnly: true\n    dtUploadCreated:\n      title: created\n      description: Date and time when the Asset's upload has been created/started.\n      type: string\n      format: date-time\n      readOnly: true\n    dtUploadCompleted:\n      title: completed\n      description: |\n        Date and time when the Asset's upload has been completed.\n\n        *Note: this property is mutually exclusive with `aborted`*\n      type: string\n      format: date-time\n      readOnly: true\n    dtUploadAborted:\n      title: aborted\n      description: |\n        Date and time when the Asset's upload has been aborted.\n\n        *Note: this property is mutually exclusive with `completed`*\n      type: string\n      format: date-time\n      readOnly: true\n    assetUploads:\n      title: AssetUploads\n      type: object\n      required:\n        - uploads\n        - links\n      properties:\n        uploads:\n          description: List of uploads that are within the asset.\n          type: array\n          items:\n            $ref: \"#/components/schemas/assetUpload\"\n        links:\n          description: Next and/or previous links for the pagination.\n          type: array\n          items:\n            $ref: \"../../components/schemas.yaml#/components/schemas/link\"\n          example:\n            - rel: next\n              href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets/smr50-263-2016-2056-kgrs-2.5.tiff/uploads?cursor=0d34\n    assetUpload:\n      title: AssetUpload\n      type: object\n      required:\n        - upload_id\n        - status\n        - created\n        - \"checksum:multihash\"\n        - number_parts\n      properties:\n        upload_id:\n          $ref: \"#/components/schemas/uploadId\"\n        status:\n          $ref: \"#/components/schemas/status\"\n        number_parts:\n          $ref: \"#/components/schemas/number_parts\"\n        urls:\n          type: array\n          description: |\n            Note: As soon as the multipart upload is completed or aborted, the `urls` property is removed.\n          items:\n            $ref: \"#/components/schemas/multipartUploadUrl\"\n          readOnly: true\n        created:\n          $ref: \"#/components/schemas/dtUploadCreated\"\n        completed:\n          $ref: \"#/components/schemas/dtUploadCompleted\"\n        aborted:\n          $ref: \"#/components/schemas/dtUploadAborted\"\n        \"checksum:multihash\":\n          $ref: \"../../components/schemas.yaml#/components/schemas/checksumMultihash\"\n    assetUploadCreate:\n      title: AssetUpload\n      type: object\n      required:\n        - upload_id\n        - status\n        - created\n        - \"checksum:multihash\"\n        - number_parts\n        - md5_parts\n      properties:\n        upload_id:\n          $ref: \"#/components/schemas/uploadId\"\n        status:\n          $ref: \"#/components/schemas/status\"\n        number_parts:\n          $ref: \"#/components/schemas/number_parts\"\n        md5_parts:\n          $ref: \"#/components/schemas/md5_parts\"\n        urls:\n          type: array\n          description: |\n            Note: As soon as the multipart upload is completed or aborted, the `urls` property is removed.\n          items:\n            $ref: \"#/components/schemas/multipartUploadUrl\"\n          readOnly: true\n        created:\n          $ref: \"#/components/schemas/dtUploadCreated\"\n        \"checksum:multihash\":\n          $ref: \"../../components/schemas.yaml#/components/schemas/checksumMultihash\"\n    assetCompleteUpload:\n      title: CompleteUpload\n      type: object\n      required:\n        - parts\n      properties:\n        parts:\n          type: array\n          description: Parts that have been uploaded\n          items:\n            title: File parts that have been uploaded\n            type: object\n            required:\n              - etag\n              - part_number\n            properties:\n              etag:\n                title: ETag\n                type: string\n                description: \u003e-\n                  ETag of the uploaded file part (returned in the header of the answer of\n                  [Upload asset file part](#operation/uploadAssetFilePart)).\n                example: \"d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b\"\n              part_number:\n                $ref: \"#/components/schemas/part_number\"\n    assetUploadCompleted:\n      title: UploadCompleted\n      type: object\n      required:\n        - upload_id\n        - status\n        - number_parts\n        - created\n        - completed\n        - \"checksum:multihash\"\n      properties:\n        upload_id:\n          $ref: \"#/components/schemas/uploadId\"\n        status:\n          title: Status\n          description: Status of the Asset's multipart upload.\n          type: string\n          enum:\n            - completed\n          example:\n            completed\n        number_parts:\n          $ref: \"#/components/schemas/number_parts\"\n        created:\n          $ref: \"#/components/schemas/dtUploadCreated\"\n        completed:\n          $ref: \"#/components/schemas/dtUploadCompleted\"\n        \"checksum:multihash\":\n          $ref: \"../../components/schemas.yaml#/components/schemas/checksumMultihash\"\n    assetUploadAborted:\n      title: UploadCompleted\n      type: object\n      required:\n        - upload_id\n        - status\n        - number_parts\n        - created\n        - aborted\n        - \"checksum:multihash\"\n      properties:\n        upload_id:\n          $ref: \"#/components/schemas/uploadId\"\n        status:\n          title: Status\n          description: Status of the Asset's multipart upload.\n          type: string\n          enum:\n            - aborted\n          example:\n            aborted\n        number_parts:\n          $ref: \"#/components/schemas/number_parts\"\n        created:\n          $ref: \"#/components/schemas/dtUploadCreated\"\n        aborted:\n          $ref: \"#/components/schemas/dtUploadAborted\"\n        \"checksum:multihash\":\n          $ref: \"../../components/schemas.yaml#/components/schemas/checksumMultihash\"\n    assetUploadParts:\n      title: Parts\n      type: object\n      required:\n        - parts\n        - links\n      properties:\n        parts:\n          type: object\n          description: List of uploaded parts\n          required:\n            - etag\n            - part_number\n            - modified\n            - size\n          properties:\n            etag:\n              $ref: \"#/components/schemas/uploadEtag\"\n            part_number:\n              $ref: \"#/components/schemas/part_number\"\n            modified:\n              type: string\n              format: date-time\n              description: Date time when the part was added/modified\n            size:\n              type: integer\n              description: Part size in bytes\n              minimum: 0\n              example: 1024\n        links:\n          description: Next and/or previous links for the pagination.\n          type: array\n          items:\n            $ref: \"../../components/schemas.yaml#/components/schemas/link\"\n          example:\n            - rel: next\n              href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets/smr50-263-2016-2056-kgrs-2.5.tiff/uploads/upload-id/parts?limit=50\u0026offset=50\n    status:\n      title: Status\n      description: Status of the Asset's multipart upload.\n      type: string\n      enum:\n        - in-progress\n        - aborted\n        - completed\n      readOnly: true\n    number_parts:\n      description: Number of parts for the Asset's multipart upload.\n      type: integer\n      minimum: 1\n      maximum: 100\n    md5_parts:\n      description: MD5 checksums of each individual parts.\n      type: array\n      minItems: 1\n      maxItems: 100\n      items:\n        type: object\n        required:\n          - part_number\n          - md5\n        properties:\n          part_number:\n            $ref: \"#/components/schemas/part_number\"\n          md5:\n            description: The base64-encoded 128-bit MD5 digest of the associate part data.\n            type: string\n            example: yLLiDqX2OL7mcIMTjob60A==\n    part_number:\n      description: Number of the part.\n      type: integer\n      minimum: 1\n      maximum: 100\n    multipartUploadUrl:\n      title: MultipartUploadUrl\n      description: Multipart upload url.\n      type: object\n      required:\n        - url\n        - part\n        - expires\n      properties:\n        url:\n          description: Presigned URL to use to upload the Asset File part using the PUT method.\n          type: string\n          format: url\n          example: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr200-200-4-2019/smr50-263-2016-2056-kgrs-2.5.tiff?uploadId=d77UbNnEVTaqCAyAz61AVqy7uuTGJ_YOUyPOklcRMr4ZPBthON9p6cpMREx683yQ_oeGVmGE_yTg4cmnEz3mTErEPKn0_m.3LBjo6A88Qxlj4vFrAdU6YBuourb.IqFF\u0026partNumber=1\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIA4HDUVYWAM6ZB6SWO%2F20210414%2Feu-central-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T112742Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=d12763467eaffa0c69d601297a661a05c9f414d4008b4148fa6ba604f203be01\n        part:\n          description: Part number assigned to this presigned URL.\n          type: integer\n          minimum: 1\n          maximum: 100\n        expires:\n          description: Date time when this presigned URL expires and is not valid anymore.\n          type: string\n          format: date-time\n    uploadEtag:\n      title: ETag\n      type: string\n      description: The RFC7232 ETag for the specified uploaded part.\n      example: \"d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b\""
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"assets\": parse schema: property \"assets\": parse schema: item: parse schema: resolve \"#/components/schemas/readUpdateAsset\": parse schema: allOf: [0]: parse schema: resolve \"../../components/schemas.yaml#/components/schemas/assetBase\": find schema: external base \"../../components/schemas.yaml\" is not supported"
}