{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/geoadmin/service-stac"
		},
		"file": {
			"name": "responses.yaml",
			"size": 0,
			"path": "spec/components/responses.yaml",
			"byteSize": 9352,
			"content": "openapi: 3.0.1\ncomponents:\n  responses:\n    Collection:\n      headers:\n        ETag:\n          $ref: \"./headers.yaml#/components/headers/ETag\"\n      content:\n        application/json:\n          schema:\n            $ref: \"./schemas.yaml#/components/schemas/collection\"\n      description: \u003e-\n        Information about the feature collection with id `collectionId`.\n\n\n        The response contains a link to the items in the collection\n        (path `/collections/{collectionId}/items`, link relation `items`)\n        as well as key information about the collection. This information\n        includes:\n\n\n        * A local identifier for the collection that is unique for the dataset\n\n        * A list of coordinate reference systems (CRS) in which geometries may be returned by the\n        server. The first CRS is the default coordinate reference system (the default is always\n        WGS 84 with axis order longitude/latitude)\n\n        * An optional title and description for the collection\n\n        * An optional extent that can be used to provide an indication of the spatial and temporal\n        extent of the collection - typically derived from the data\n\n        * An optional indicator about the type of the items in the collection (the default value,\n        if the indicator is not provided, is 'feature')\n    Collections:\n      content:\n        application/json:\n          schema:\n            $ref: \"./schemas.yaml#/components/schemas/collections\"\n      description: \u003e-\n        The feature collections shared by this API.\n\n\n        The dataset is organized as one or more feature collections. This resource\n        provides information about and access to the collections.\n\n\n        The response contains the list of collections. For each collection, a link\n        to the items in the collection (path `/collections/{collectionId}/items`,\n        link relation `items`) as well as key information about the collection.\n        This information includes:\n\n\n        * A local identifier for the collection that is unique for the dataset\n\n        * A list of coordinate reference systems (CRS) in which geometries may be returned by the\n        server. The first CRS is the default coordinate reference system (the default is always\n        WGS 84 with axis order longitude/latitude)\n\n        * An optional title and description for the collection\n\n        * An optional extent that can be used to provide an indication of the spatial and temporal\n        extent of the collection - typically derived from the data\n\n        * An optional indicator about the type of the items in the collection (the default value,\n        if the indicator is not provided, is 'feature').\n\n        The `limit` parameter may be used to control the subset of the\n        selected collections that should be returned in the response, the page size.\n        Each page include links to support paging (link relation `next` and/or\n        `previous`).\n    ConformanceDeclaration:\n      content:\n        application/json:\n          example:\n            conformsTo:\n              - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n              - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n              - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\n          schema:\n            $ref: \"./schemas.yaml#/components/schemas/confClasses\"\n      description: \u003e-\n        The URIs of all conformance classes supported by the server.\n\n\n        To support \"generic\" clients that want to access multiple\n        OGC API Features implementations - and not \"just\" a specific\n        API / server, the server declares the conformance\n        classes it implements and conforms to.\n    Feature:\n      headers:\n        ETag:\n          $ref: \"./headers.yaml#/components/headers/ETag\"\n      content:\n        application/json:\n          schema:\n            $ref: \"./schemas.yaml#/components/schemas/item\"\n      description: \u003e-\n        Fetch the feature with id `featureId` in the feature collection\n        with id `collectionId`\n    Features:\n      content:\n        application/json:\n          schema:\n            $ref: \"./schemas.yaml#/components/schemas/items\"\n      description: \u003e-\n        The response is a document consisting of features in the collection.\n        The features included in the response are determined by the server\n        based on the query parameters of the request. To support access to\n        larger collections without overloading the client, the API supports\n        paged access with links to the next page, if more features are selected\n        that the page size.\n\n\n        The `bbox` and `datetime` parameter can be used to select only a\n        subset of the features in the collection (the features that are in the\n        bounding box or time interval). The `bbox` parameter matches all features\n        in the collection that are not associated with a location, too. The\n        `datetime` parameter matches all features in the collection that are\n        not associated with a time stamp or interval, too.\n\n\n        The `limit` parameter may be used to control the subset of the\n        selected features that should be returned in the response, the page size.\n        Each page include links to support paging (link relation `next` and/or\n        `previous`).\n    NotModified:\n      # Currently the 304 Not Modified is handled by django and we cannot give a body. Anyway\n      # the standard specify the 304 without body\n      # content:\n      #   application/json:\n      #     schema:\n      #       $ref: \"./schemas.yaml#/components/schemas/exception\"\n      #     example:\n      #       code: 304\n      #       description: \"Not modified\"\n      description: The cached resource was not modified since last request.\n    InvalidParameter:\n      content:\n        application/json:\n          schema:\n            $ref: \"./schemas.yaml#/components/schemas/exception\"\n          example:\n            code: 400\n            description: \"Invalid parameter\"\n      description: A query parameter has an invalid value.\n    LandingPage:\n      content:\n        application/json:\n          example:\n            description: Catalog of Swiss Geodata Downloads\n            id: ch\n            links:\n              - href: http://data.geo.admin.ch/api/stac/v0.9/\n                rel: self\n                type: application/json\n                title: this document\n              - href: http://data.geo.admin.ch/api/stac/v0.9/static/api.html\n                rel: service-doc\n                type: text/html\n                title: the API documentation\n              - href: http://data.geo.admin.ch/api/stac/v0.9/conformance\n                rel: conformance\n                type: application/json\n                title: OGC API conformance classes implemented by this server\n              - href: http://data.geo.admin.ch/api/stac/v0.9/collections\n                rel: data\n                type: application/json\n                title: Information about the feature collections\n              - href: http://data.geo.admin.ch/api/stac/v0.9/search\n                rel: search\n                type: application/json\n                title: Search across feature collections\n            stac_version: 0.9.0\n            title: data.geo.admin.ch\n          schema:\n            $ref: \"./schemas.yaml#/components/schemas/landingPage\"\n      description: \u003e-\n        The landing page provides links to the API definition\n        (link relations `service-desc` and `service-doc`),\n        the Conformance declaration (path `/conformance`,\n        link relation `conformance`), and the Feature\n        Collections (path `/collections`, link relation\n        `data`).\n    NotFound:\n      description: The specified resource/URI was not found\n      content:\n        application/json:\n          schema:\n            $ref: \"./schemas.yaml#/components/schemas/exception\"\n          example:\n            code: 404\n            description: \"Resource not found\"\n    BadRequest:\n      description: The request was malformed or semantically invalid\n      content:\n        application/json:\n          schema:\n            $ref: \"./schemas.yaml#/components/schemas/exception\"\n          example:\n            code: 400\n            description: \"Invalid parameter\"\n    PermissionDenied:\n      description: No Permission for this request\n      content:\n        application/json:\n          schema:\n            $ref: \"./schemas.yaml#/components/schemas/exception\"\n          example:\n            code: 403\n            description: \"Permission denied\"\n    PreconditionFailed:\n      description: Some condition specified by the request could not be met in the server\n      # Currently the 412 Precondition not met is handled by django and we cannot give a body\n      # content:\n      #   application/json:\n      #     schema:\n      #       $ref: \"./schemas.yaml#/components/schemas/exception\"\n      #     example:\n      #       code: 412\n      #       description: \"Precondition not met\"\n    ServerError:\n      description: \u003e-\n        The request was syntactically and semantically valid, but an error occurred while trying\n        to act upon it\n      content:\n        application/json:\n          schema:\n            $ref: \"./schemas.yaml#/components/schemas/exception\"\n          example:\n            code: 500\n            description: \"Internal server error\"\n"
		}
	},
	"Error": "parse: parse spec: parse components: responses: \"Features\": content: application/json: schema: parse schema: resolve \"./schemas.yaml#/components/schemas/items\": find schema: external base \"./schemas.yaml\" is not supported"
}