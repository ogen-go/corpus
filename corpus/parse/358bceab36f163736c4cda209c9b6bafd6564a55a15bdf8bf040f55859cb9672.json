{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/akornatskyy/scheduler"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 15524,
			"content": "openapi: 3.0.2\n# https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md\nservers:\n  - url: 'http://localhost:8080'\ninfo:\n  version: 1.0.0\n  title: Scheduler Service\n  description: |\n    REST API for the Scheduler Service. This API allows create and manage\n    scheduled jobs.\n  contact:\n    name: Andriy Kornatskyy\n    email: andriy.kornatskyy@live.com\n  license:\n    name: MIT\ntags:\n  - name: collections\n    description: Provides operations for creating and managing collections of scheduled jobs.\n  - name: jobs\n    description: Provides operations for creating and managing scheduled jobs.\n  - name: history\n    description: Provides operations for managing job history.\n  - name: others\npaths:\n  /collections:\n    get:\n      summary: Retrieves a list of job collections\n      operationId: ListCollections\n      tags:\n        - collections\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json:\n              schema:\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/CollectionItem'\n                required:\n                  - items\n              example:\n                items:\n                  - id: 65ada2f9-be3d-4960-a7f4-ea47fe3323b9\n                    name: 'My App #1'\n                    state: enabled\n                  - id: 7d76cb30-f581-49ca-a718-d353a1d129a8\n                    name: My Other App\n                    state: disabled\n    post:\n      summary: Creates a job collection\n      operationId: CreateCollection\n      tags:\n        - collections\n      requestBody:\n        description: a job collection to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Collection'\n      responses:\n        '201':\n          description: created\n          content:\n            application/json:\n              schema:\n                type: string\n        '400':\n          description: validation errors\n        '404':\n          description: not found\n        '409':\n          description: conflict\n        '422':\n          description: unprocessable entity\n  /collections/{id}:\n    parameters:\n      - $ref: '#/components/parameters/id'\n    get:\n      summary: Retrieves a specified job collection\n      operationId: RetrieveCollection\n      tags:\n        - collections\n      parameters:\n        - $ref: '#/components/parameters/if-none-match'\n      responses:\n        '200':\n          description: ok\n          headers:\n            ETag:\n              $ref: '#/components/schemas/ETag'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Collection'\n        '304':\n          description: not modified\n        '400':\n          description: validation errors\n        '404':\n          description: not found\n    patch:\n      summary: Updates a job collection\n      operationId: UpdateCollection\n      tags:\n        - collections\n      parameters:\n        - $ref: '#/components/parameters/if-match'\n      requestBody:\n        description: a job collection to update\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Collection'\n      responses:\n        '204':\n          description: updated\n          content:\n            application/json:\n              example:\n        '400':\n          description: validation errors\n        '404':\n          description: not found\n        '409':\n          description: conflict\n        '412':\n          description: precondition failed\n        '422':\n          description: unprocessable entity\n    delete:\n      description: Deletes a single job collection\n      operationId: DeleteCollection\n      tags:\n        - collections\n      parameters:\n        - $ref: '#/components/parameters/if-match'\n      responses:\n        '204':\n          description: deleted\n        '400':\n          description: validation errors\n        '404':\n          description: not found\n        '409':\n          description: conflict\n        '412':\n          description: precondition failed\n  /jobs:\n    get:\n      summary: Retrieves a list of jobs\n      operationId: ListJobs\n      tags:\n        - jobs\n      parameters:\n        - $ref: '#/components/parameters/collectionId'\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json:\n              schema:\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/JobItem'\n                required:\n                  - items\n              example:\n                items:\n                  - id: 7ce1f17e-48b1-4e73-be22-771fa764993a\n                    name: 'My Task #1'\n                    schedule: '@every 15s'\n                    state: disabled\n                  - id: 94946f60-711f-4044-b08e-ccd9ba998f88\n                    name: 'My Task #2'\n                    schedule: '@every 1m'\n                    state: enabled\n    post:\n      summary: Creates a job\n      operationId: CreateJob\n      tags:\n        - jobs\n      requestBody:\n        description: a job to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JobDefinition'\n      responses:\n        '201':\n          description: created\n          content:\n            application/json:\n              schema:\n                type: string\n        '400':\n          description: validation errors\n        '404':\n          description: not found\n        '409':\n          description: conflict\n        '422':\n          description: unprocessable entity\n  /jobs/{id}:\n    parameters:\n      - $ref: '#/components/parameters/id'\n    get:\n      summary: Retrieves a specified job definition\n      operationId: RetrieveJob\n      tags:\n        - jobs\n      parameters:\n        - $ref: '#/components/parameters/if-none-match'\n      responses:\n        '200':\n          description: ok\n          headers:\n            ETag:\n              $ref: '#/components/schemas/ETag'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobDefinition'\n        '304':\n          description: not modified\n        '400':\n          description: validation errors\n        '404':\n          description: not found\n    patch:\n      summary: Updates a job definition\n      operationId: UpdateJob\n      tags:\n        - jobs\n      parameters:\n        - $ref: '#/components/parameters/if-match'\n      requestBody:\n        description: a job definition to update\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JobDefinition'\n      responses:\n        '204':\n          description: updated\n        '400':\n          description: validation errors\n        '404':\n          description: not found\n        '409':\n          description: conflict\n        '412':\n          description: precondition failed\n        '422':\n          description: unprocessable entity\n    delete:\n      description: Deletes a single job definition\n      operationId: DeleteJob\n      tags:\n        - jobs\n      parameters:\n        - $ref: '#/components/parameters/if-match'\n      responses:\n        '204':\n          description: job definition deleted\n        '400':\n          description: validation errors\n        '404':\n          description: not found\n        '409':\n          description: conflict\n        '412':\n          description: precondition failed\n  /jobs/{id}/status:\n    parameters:\n      - $ref: '#/components/parameters/id'\n    get:\n      summary: Retrieves a specified job status\n      operationId: RetrieveJobStatus\n      tags:\n        - jobs\n      parameters:\n        - $ref: '#/components/parameters/if-none-match'\n      responses:\n        '200':\n          description: ok\n          headers:\n            ETag:\n              $ref: '#/components/schemas/ETag'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobStatus'\n        '400':\n          description: validation errors\n        '404':\n          description: not found\n    patch:\n      summary: Updates a specified job status\n      operationId: PatchJobStatus\n      tags:\n        - jobs\n      parameters:\n        - $ref: '#/components/parameters/if-match'\n      requestBody:\n        description: job to run\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/JobStatus'\n      responses:\n        '204':\n          description: updated\n        '400':\n          description: validation errors\n        '404':\n          description: not found\n        '409':\n          description: conflict\n        '412':\n          description: precondition failed\n        '422':\n          description: unprocessable entity\n  /jobs/{id}/history:\n    parameters:\n      - $ref: '#/components/parameters/id'\n    get:\n      summary: Retrieves a list of specified job history\n      operationId: ListJobHistory\n      tags:\n        - history\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json:\n              schema:\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/JobHistory'\n                required:\n                  - items\n        '400':\n          description: validation errors\n    delete:\n      description: Deletes a specified job history\n      operationId: DeleteJobHistory\n      tags:\n        - history\n      parameters:\n        - $ref: '#/components/parameters/before'\n      responses:\n        '204':\n          description: job history deleted\n        '400':\n          description: validation errors\n        '404':\n          description: not found\n        '409':\n          description: conflict\n  /health:\n    get:\n      summary: Queries health-related information\n      operationId: RetrieveHealth\n      tags:\n        - others\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Health'\n        '503':\n          description: service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Health'\n              example:\n                status: down\n                message: unable connect to database\ncomponents:\n  schemas:\n    CollectionItem:\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n          description: unique job collection name\n          example: 'My App #1'\n          minimum: 3\n          maximum: 64\n        state:\n          type: string\n          default: enabled\n          enum:\n            - enabled\n            - disabled\n    Collection:\n      allOf:\n        - $ref: '#/components/schemas/CollectionItem'\n      properties:\n        updated:\n          type: string\n          format: date-time\n          readOnly: true\n      required:\n        - name\n    JobItem:\n      properties:\n        id:\n          type: string\n          readOnly: true\n        collectionId:\n          type: string\n        name:\n          type: string\n          description: unique job name\n          example: 'My Task #1'\n        state:\n          type: string\n          enum:\n            - enabled\n            - disabled\n        schedule:\n          type: string\n          example: '@every 1h'\n    JobDefinition:\n      allOf:\n        - $ref: '#/components/schemas/JobItem'\n      properties:\n        updated:\n          type: string\n          format: date-time\n          readOnly: true\n        action:\n          $ref: '#/components/schemas/Action'\n      required:\n        - collectionId\n        - action\n    Action:\n      properties:\n        type:\n          type: string\n          default: HTTP\n          enum:\n            - HTTP\n        request:\n          $ref: '#/components/schemas/HttpRequest'\n        retryPolicy:\n          $ref: '#/components/schemas/RetryPolicy'\n      required:\n        - request\n        - retryPolicy\n    HttpRequest:\n      properties:\n        method:\n          type: string\n          default: GET\n          enum:\n            - HEAD\n            - GET\n            - POST\n            - PUT\n            - PATCH\n            - DELETE\n        uri:\n          type: string\n          format: uri\n          example: http://example.com\n        headers:\n          type: array\n          items:\n            $ref: '#/components/schemas/NameValuePair'\n        body:\n          type: string\n      required:\n        - uri\n    NameValuePair:\n      properties:\n        name:\n          type: string\n          example: X-Requested-With\n        value:\n          type: string\n          example: XMLHttpRequest\n      required:\n        - name\n        - value\n    RetryPolicy:\n      properties:\n        retryCount:\n          type: integer\n          format: int32\n          description: the number of times a retry should be attempted\n          default: 3\n          example: 3\n          minimum: 0\n          maximum: 10\n        retryInterval:\n          type: string\n          description: the interval between retries, duration in ISO 8601 format\n          default: 5s\n          example: 10s\n        deadline:\n          type: string\n          default: 20s\n          example: 1m\n    JobStatus:\n      properties:\n        running:\n          type: boolean\n        runCount:\n          type: integer\n          format: int32\n          readOnly: true\n          example: 157\n        errorCount:\n          type: integer\n          format: int32\n          readOnly: true\n          example: 39\n        lastRun:\n          type: string\n          format: date-time\n          readOnly: true\n        nextRun:\n          type: string\n          format: date-time\n          readOnly: true\n    JobHistory:\n      properties:\n        action:\n          type: string\n          description: action name\n          example: HTTP\n        started:\n          type: string\n          format: date-time\n        finished:\n          type: string\n          format: date-time\n        status:\n          type: string\n          enum:\n            - completed\n            - failed\n        retryCount:\n          type: integer\n          format: int32\n          example: 0\n          minimum: 0\n          maximum: 3\n        message:\n          type: string\n          example:\n    ETag:\n      type: string\n      example: '\"fde7bculys\"'\n    Health:\n      properties:\n        status:\n          type: string\n          example: up\n        message:\n          type: string\n      required:\n        - status\n  parameters:\n    id:\n      in: path\n      name: id\n      required: true\n      schema:\n        type: string\n    collectionId:\n      in: query\n      name: collectionId\n      required: false\n      schema:\n        type: string\n    before:\n      in: query\n      name: before\n      required: false\n      schema:\n        type: string\n        format: date-time\n    if-match:\n      in: header\n      name: If-Match\n      required: false\n      schema:\n        $ref: '#/components/schemas/ETag'\n    if-none-match:\n      in: header\n      name: If-None-Match\n      required: false\n      schema:\n        $ref: '#/components/schemas/ETag'\n",
			"canonicalURL": "/github.com/akornatskyy/scheduler@ae2f60c27fa353518bfb9be563072aaa5b85e74b/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/akornatskyy/scheduler/blob/ae2f60c27fa353518bfb9be563072aaa5b85e74b/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/jobs/{id}\": at 1:7887: get: operation \"RetrieveJob\": at 1:8268: responses: 200: at 1:8380: headers: header \"ETag\": at 1:8506: resolve \"#/components/schemas/ETag\" reference: parameter MUST contain either a schema property, or a content property"
}