{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/eclipse/vorto"
		},
		"file": {
			"name": "vorto_repository-1.0.yml",
			"size": 0,
			"path": "docs/specs/vorto_repository-1.0.yml",
			"byteSize": 41675,
			"content": "#\n# Copyright (c) 2020 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) distributed with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made available under the\n# terms of the Eclipse Public License 2.0 which is available at\n# https://www.eclipse.org/legal/epl-2.0\n#\n# SPDX-License-Identifier: EPL-2.0\n#\n\nopenapi: 3.0.0\ninfo:\n  title: Eclipse Vorto Repository API\n  description: |- \n    The Eclipse Vorto Repository API allows you to interact with models managed by the Repository.\n  contact:\n    name: Eclipse Vorto Team\n    url: https://www.eclipse.org/vorto\n    email: vorto-development@bosch-si.com\n  version: '1.0'\n  \nservers:\n- url: https://vorto.eclipseprojects.io/api/v1\n  description: Eclipse Vorto Repository\n  \ntags:\n  - name: Models\n    description: Explore models\n  - name: Generators\n    description: Generic API for generating code from models\n  - name: Plugins\n    description: Invoke official generator plugins\n  - name: Attachments\n    description: Explore attachments of models, such as images etc.\n  - name: Importers\n    description: Import models to be managed in the Repository\n  - name: Namespaces\n    description: Manage namespaces and collaborators\n    \nsecurity:\n  - BearerAuth: []\n    \npaths:\n  '/namespaces':\n    get:\n      tags: \n      - Namespaces\n      summary: Get all namespaces where the current user is a collaborator\n      description: \"A list of all namespaces for which the user is a collaborator.\"\n      responses:\n        200:\n          description: 'Successful response with list of all namespaces'\n          headers: {}\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Namespace'\n        400:\n          description: 'Request is invalid'\n  '/namespaces/{namespace}':\n    get:\n      tags: \n      - Namespaces\n      summary: Get namespace information for which the current user is a collaborator\n      description: \"All information pertaining to the namespace.\"\n      parameters:\n        - name: namespace\n          in: path\n          description: namespace\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: 'Successful response information for namespace'\n          headers: {}\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/Namespace'\n        403:\n          description: 'User is not a namespace collaborator'\n        400:\n          description: 'Request is invalid'\n  '/namespaces/{namespace}/collaborators/{userId}':\n    put:\n      tags:\n      - Namespaces\n      summary: Update/Add a collaborator in the namespace\n      description: \"Update or add a collaborator in the namespace.\"\n      parameters:\n        - name: namespace\n          in: path\n          description: namespace\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: userId\n          in: path\n          description: userId\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      requestBody:\n        description: 'Collaborator information'\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Collaborator'\n      responses:\n        200:\n          description: 'Updating of collaborator successful'\n        403:\n          description: 'User is not a namespace administrator'\n        400:\n          description: 'Request is invalid'\n  '/importers':\n    get:\n      tags: \n      - Importers\n      summary: A list of all supported importers\n      description: \"A list of all supported importer plugins.\"\n      responses:\n        200:\n          description: 'Successful response with supported importer data'\n          headers: {}\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ImporterInfo'\n    post:\n      tags: \n      - Importers\n      summary: Upload and validates Vorto Models or other supported device description files.\n      description: \"Upload and validates Vorto Models or other supported device description files. If validation was successful, a upload handle is returned, that is needed to perform the actual check-in. You need to have 'CREATOR' permission to import models.\"\n      parameters: \n      - name: targetNamespace\n        in: query\n        description: Target namespace of the models to be imported\n        required: true\n        schema:\n          type: string\n      - name: key\n        in: query\n        description: Key of the importer plugin\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  description: single model file or ZIP containing the models\n                  format: binary\n      responses:\n        200:\n          description: 'Successful response of UploadResult'\n          headers: {}\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UploadResult'\n    put:\n      tags: \n      - Importers\n      summary: Performs the actual check in of the model(s) to the Repository\n      description: \"Performs the actual import of the model(s) to the Repository. Once imported, they are saved and managed in DRAFT state. You need to have 'CREATOR' permission to import model.\"\n      parameters: \n      - name: targetNamespace\n        in: query\n        description: Target namespace of the models to be imported\n        required: true\n        style: form\n        schema:\n          type: string\n      - name: key\n        in: query\n        description: Key of the importer plugin\n        required: true\n        schema:\n          type: string\n      - name: handleId\n        in: path\n        description: Upload Handle ID that refers to a previous upload\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: ''\n          headers: {}\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ModelInfo'\n  '/search/models':\n    get:\n      tags:\n      - Models\n      summary: Search for models\n      description: \"This resource can be used to search for models. It allows free-text and tagged search using the model's attributes, e.g. *Display name*, *Name* or *Description*. These values can be set using the Model Editor in the Model Details page, e.g. if there are models with names: *Light* and *Lightbulb*, searching with keyword *name:light** will fetch both. If you want to include unpublished or private models in search, you must login. The search syntax is described [here](https://github.com/eclipse/vorto/tree/master/repository/repository-elasticsearch/Readme.md)\"\n      operationId: SearchForModels\n      parameters:\n      - name: expression\n        in: query\n        description: Free-text search expression,example-\"*name:light**\"\n        required: true\n        style: form\n        explode: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successful retrieval of search result\n          headers: {}\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ModelInfo'\n                description: Successful retrieval of search result\n        400:\n          description: The request could not be completed, invalid search expression.\n      deprecated: false\n\n  '/generators/{serviceKey}':\n    get:\n      tags:\n      - Generators\n      summary: Retrieve information for a specific generator\n      description: Returns information corresponding to a specific generator identified using its 'servicekey'.\n      operationId: RetrieveInformationForASpecificGenerator\n      parameters:\n      - name: serviceKey\n        in: path\n        description: ServiceKey of the generator\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        200:\n          description: OK\n          headers: {}\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GeneratorInfo'\n      deprecated: false\n\n  '/generators':\n    get:\n      tags:\n      - Generators\n      summary: List all registered generators\n      description: Returns a list of all generators registered with the Vorto Repository.  The generators are grouped under 'production', 'infra' and 'demo' tags.\n      parameters:\n      - name: orderBy\n        in: query\n        description: Order results using the tag of your choice\n        style: form\n        explode: true\n        schema:\n          $ref: '#/components/schemas/orderBy'\n      responses:\n        200:\n          description: Retrieved generators successfully\n          headers: {}\n          content:\n            text/plain:\n              schema:\n                type: object\n                description: Retrieved generators successfully\n      deprecated: false\n\n  '/models/{modelId}':\n    get:\n      tags:\n      - Models\n      summary: Retrieve the meta-info of a model\n      description: Returns the meta information of the model using its `modelId`.  If you want to search unpublished or private models, you must login.\n      parameters:\n      - name: modelId\n        in: path\n        description: The identifier of vorto model, e.g. com.bosch.bcds:XDK:2.0.0\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successful retrieval of model info\n          headers: {}\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ModelInfo'\n        400:\n          description: The request could not be completed, invalid input.\n        401:\n          description: The request could not be completed, invalid authentication.\n        403:\n          description: The request could not be completed, unauthorized.\n        404:\n          description: The request could not be completed, resource not found.\n      deprecated: false\n\n  '/models/{modelId}/content':\n    get:\n      tags:\n      - Models\n      summary: Retrieve model content\n      description: Returns the complete model content including all resolved references for a given `modelId`.  If you want to retrieve an unpublished or private model, you must login.\n      operationId: RetrieveModelContent\n      parameters:\n      - name: modelId\n        in: path\n        description: The identifier of Vorto model, e.g. com.bosch.bcds:XDK:2.0.0\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successful retrieval of model content\n          headers: {}\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ModelContent'\n        400:\n          description: The request could not be completed, invalid input.\n        401:\n          description: The request could not be completed, invalid authentication.\n        404:\n          description: The request could not be completed, resource not found.\n      deprecated: false\n      \n  '/generators/{serviceKey}/models/{modelId}':\n\n    get:\n      tags:\n      - Generators\n      summary: Invoke generator for a model\n      description: Invoke a generator for a specific model using the `service key` and `modelId`.\n      operationId: InvokeGeneratorForAModel\n      parameters:\n      - name: modelId\n        in: path\n        description: The identifier of the vorto model in *namespace.name:version* format, e.g. com.mycompany:Car:1.0.0\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: serviceKey\n        in: path\n        description: ServiceKey of the generator\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        200:\n          description: Code was successfully generated.\n          headers: {}\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        400:\n          description: The request could not be completed, invalid input.\n        404:\n          description: The request could not be completed, resource not found.\n      deprecated: false\n      \n  '/plugins/generators/openapi/models/{modelId}':\n    get:\n      tags:\n      - Plugins\n      summary: Creates OpenAPI Specification\n      description: Generates an OpenAPI V3 specification for the given `modelId`.\n      parameters:\n      - name: modelId\n        in: path\n        description: The identifier of the vorto model in *namespace.name:version* format, e.g. com.mycompany:Car:1.0.0\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: digitaltwin\n        in: query\n        required: true\n        description: The target Digital Twin Service for the OpenAPI Spec\n        style: form\n        explode: true\n        schema:\n          $ref: '#/components/schemas/digitaltwin'\n      responses:\n        200:\n          description: Code was successfully generated.\n          headers: {}\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        400:\n          description: The request could not be completed, invalid input.\n        404:\n          description: The request could not be completed, resource not found.\n      deprecated: false\n      \n  '/plugins/generators/openapi':\n    get:\n      tags:\n      - Plugins\n      summary: Meta-Information about plugin\n      description: Gives meta - information about the plugin.\n      responses:\n        200:\n          description: Successful retrieval of Plugin information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GeneratorInfo'\n        400:\n          description: The request could not be completed, invalid input.\n        404:\n          description: The request could not be completed, resource not found.\n      deprecated: false\n      \n  '/plugins/generators/boschiotsuite/models/{modelId}/connectivity':\n    get:\n      tags:\n      - Plugins\n      summary: Connect device via MQTT\n      description: Generates code to connect the device for the `modelId` to Bosch IoT Suite via MQTT.\n      parameters:\n      - name: modelId\n        in: path\n        description: The identifier of the vorto model in *namespace.name:version* format, e.g. com.mycompany:Car:1.0.0\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: language\n        in: query\n        required: true\n        description: Language of the source code\n        style: form\n        explode: true\n        schema:\n          $ref: '#/components/schemas/language'\n      responses:\n        200:\n          description: Code was successfully generated.\n          headers: {}\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        400:\n          description: The request could not be completed, invalid input.\n        404:\n          description: The request could not be completed, resource not found.\n      deprecated: false\n      \n  '/plugins/generators/boschiotsuite/models/{modelId}/provision':\n    get:\n      tags:\n      - Plugins\n      summary: Provision the device\n      description: Generates a script to provision the device for `modelId` in the Bosch IoT Suite.\n      parameters:\n      - name: modelId\n        in: path\n        description: The identifier of the vorto model in *namespace.name:version* format, e.g. com.mycompany:Car:1.0.0\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        200:\n          description: Code was successfully generated.\n          headers: {}\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        400:\n          description: The request could not be completed, invalid input.\n        404:\n          description: The request could not be completed, resource not found.\n      deprecated: false\n      \n  '/plugins/generators/boschiotsuite':\n    get:\n      tags:\n      - Plugins\n      summary: Meta-Information about plugin\n      description: Gives meta - information about the plugin.\n      responses:\n        200:\n          description: Successful retrieval of Plugin information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GeneratorInfo'\n        400:\n          description: The request could not be completed, invalid input.\n        404:\n          description: The request could not be completed, resource not found.\n      deprecated: false\n      \n  '/plugins/generators/eclipsehono/models/{modelId}/connectivity':\n    get:\n      tags:\n      - Plugins\n      summary: Connect device to Hono MQTT Adapter\n      description: Generates code to connect the device for the `modelId` to Eclipse Hono MQTT Adapter.\n      parameters:\n      - name: modelId\n        in: path\n        description: The identifier of the vorto model in *namespace.name:version* format, e.g. com.mycompany:Car:1.0.0\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: language\n        in: query\n        required: true\n        description: Language of the source code\n        style: form\n        explode: true\n        schema:\n          $ref: '#/components/schemas/language'\n      responses:\n        200:\n          description: Code was successfully generated.\n          headers: {}\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        400:\n          description: The request could not be completed, invalid input.\n        404:\n          description: The request could not be completed, resource not found.\n      deprecated: false\n      \n  '/plugins/generators/eclipsehono':\n    get:\n      tags:\n      - Plugins\n      summary: Meta-Information about plugin\n      description: Gives meta - information about the plugin.\n      responses:\n        200:\n          description: Successful retrieval of Plugin information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GeneratorInfo'\n        400:\n          description: The request could not be completed, invalid input.\n        404:\n          description: The request could not be completed, resource not found.\n      deprecated: false\n      \n  '/plugins/generators/eclipseditto/models/{modelId}':\n    get:\n      tags:\n      - Plugins\n      summary: Eclipse Ditto JSON Schema\n      description: Generates JSON-schema for the given `modelId` compliant for Eclipse Ditto.\n      parameters:\n      - name: modelId\n        in: path\n        description: The identifier of the vorto model in *namespace.name:version* format, e.g. com.mycompany:Car:1.0.0\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        200:\n          description: Code was successfully generated.\n          headers: {}\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        400:\n          description: The request could not be completed, invalid input.\n        404:\n          description: The request could not be completed, resource not found.\n      deprecated: false\n      \n  '/plugins/generators/eclipseditto':\n    get:\n      tags:\n      - Plugins\n      summary: Meta-Information about plugin\n      description: Gives meta - information about the plugin.\n      responses:\n        200:\n          description: Successful retrieval of Plugin information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GeneratorInfo'\n        400:\n          description: The request could not be completed, invalid input.\n        404:\n          description: The request could not be completed, resource not found.\n      deprecated: false\n\n  '/models/{modelId}/content/{targetplatformKey}':\n    get:\n      tags:\n      - Models\n      summary: Retrieve model content for a platform\n      description: Returns the complete model content including all resolved references and platform specific attributes for a given `modelId`. Platform specific attributes can be defined using mappings.  If there are no platform specific attributes available the call will return 404.  If you want to retrieve an unpublished or private model, you must login.\n      operationId: RetrieveModelContentForAPlatform\n      parameters:\n      - name: modelId\n        in: path\n        description: The modelId of vorto model, e.g. com.ipso.smartobjects:Pressure:1.1.0\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: targetplatformKey\n        in: path\n        description: The key of the targetplatform, e.g. lwm2m\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successful retrieval of model content\n          headers: {}\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ModelContent'\n        400:\n          description: The request could not be completed, invalid input.\n        401:\n          description: The request could not be completed, invalid authentication.\n        404:\n          description: The request could not be completed, resource not found.\n      deprecated: false\n\n  '/models/{modelId}/file':\n    get:\n      tags:\n      - Models\n      summary: Download a model\n      description: Downloads the desired model using its `modelId`. If you also require the dependencies set `includeDependencies` flag to `true`. If you want to download an unpublished or private model, you must login.\n      operationId: DownloadAModel\n      parameters:\n      - name: modelId\n        in: path\n        description: The identifier of vorto model, e.g. com.bosch.bcds:XDK:2.0.0\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: includeDependencies\n        in: query\n        description: Optional parameter, set it to `true` if you also require the dependencies.\n        style: form\n        explode: true\n        schema:\n          $ref: '#/components/schemas/includeDependencies'\n      responses:\n        200:\n          description: Successful download of model file\n          headers: {}\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        400:\n          description: The request could not be completed, invalid parameters.\n        401:\n          description: The request could not be completed, missing authentication.\n        404:\n          description: The request could not be completed, model not found.\n      deprecated: false\n\n  '/attachments/{modelId}/files/{filename}':\n    get:\n      tags:\n      - Attachments\n      summary: Retrieve a specific attachment\n      description: Returns a specific attachment from a model by using`modelId` and `filename`.  If you want to perform this operation for an unpublished or private model, you must login.\n      operationId: RetrieveASpecificAttachment\n      parameters:\n      - name: modelId\n        in: path\n        description: The identifier of the vorto model in *namespace.name:version* format, e.g. com.bosch.bcds:XDK:2.0.0\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: filename\n        in: path\n        description: The name of the attached file that you want to retrieve\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successfully retrieved the attachment\n          headers: {}\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        404:\n          description: The request could not be completed, resource not found.\n      deprecated: false\n\n  '/attachments/{modelId}':\n    get:\n      tags:\n      - Attachments\n      summary: List all attachments for a model\n      description: Returns list of attachments related to a model identified using its `modelId`. If you want to retrieve the list of attachments for an unpublished or private model, you must login.\n      operationId: ListAllAttachmentsForAModel\n      parameters:\n      - name: modelId\n        in: path\n        description: The ID of the vorto model in *namespace.name:version* format, e.g. com.bosch.bcds:XDK:2.0.0\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successfully retrieved list of attachments\n          headers: {}\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Attachment'\n                description: Successfully retrieved list of attachments\n        404:\n          description: The request could not be completed, resource not found.\n      deprecated: false\n\n  '/attachments/{modelId}/links':\n    get:\n      tags:\n        - Attachments\n      summary: Retrieve links attached to a model.\n      description: Returns list of links related to a model identified using its `modelId`. If you want to retrieve the list of attachments for an unpublished or private model, you must login.\n      operationId: ListAllLinksForAModel\n      parameters:\n        - name: modelId\n          in: path\n          description: The identifier of the vorto model in *namespace.name:version* format, e.g. com.bosch.bcds:XDK:2.0.0\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: Successfully retrieved links\n          headers: { }\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Link'\n                description: Successfully retrieved links\n        404:\n          description: The request could not be completed, resource not found.\n      deprecated: false\n\ncomponents:\n  schemas:\n    Collaborator:\n      title: Collaborator\n      type: object\n      properties:\n        userId: \n          description: UserId of collaborator\n          type: string\n        providerId:\n          description: The provider ID of the user.\n          type: string\n        subject:\n          description: Purpose of this user (only for technical users)\n          type: string\n        roles:\n          description: Roles of this user on this namespace\n          type: array\n          items:\n            type: string\n            enum: [USER, TENANT_ADMIN, MODEL_CREATOR, MODEL_PROMOTER, MODEL_REVIEWER, MODEL_PUBLISHER]\n      required:\n        - userId\n        - providerId\n        - roles\n    Namespace:\n      title: Namespace\n      type: object\n      properties:\n        name: \n          description: Name of namespace\n          type: string\n        collaborators:\n          description: collaborators of this namespace\n          type: array\n          items:\n            $ref: '#/components/schemas/Collaborator'\n    ImporterInfo:\n      title: ImporterInfo\n      type: object\n      properties:\n        key:\n          description: Importer Key\n          type: string\n        shortDescription:\n          description: Short description of the Importer\n          type: string\n        extensionTypes:\n          description: Supported file extensions by the importer\n          items:\n            type: string\n    UploadResult:\n      title: UploadResult\n      type: object\n      properties:\n        handleId:\n          description: Upload Handle ID. If uploaded models are invalid, this field is null\n          nullable: true\n          type: string\n        message:\n          description: Short description of the outcome of the upload.\n          type: string\n        isValid:\n          description: Identifies if uploaded models are valid or not\n          type: boolean\n        hasWarnings:\n          type: boolean\n        reports:\n          type: array\n          items:\n            $ref: '#/components/schemas/ValidationReport'\n    ValidationReport:\n      title: ValidationReport\n      type: object\n      properties:\n        model:\n          $ref: '#/components/schemas/ModelInfo'\n        valid:\n          type: boolean\n        message:\n          $ref: '#/components/schemas/StatusMessage'\n        unresolvedReferences:\n          type: array\n          items:\n            $ref: '#/components/schemas/ModelId'\n        validationIssues:\n          type: array\n          items:\n            $ref: '#/components/schemas/ValidationIssue'\n    ValidationIssue:\n      title: ValidationIssue\n      type: object\n      properties:\n        lineNumber:\n          type: integer\n        msg:\n          type: string\n    StatusMessage:\n      title: StatusMessage\n      type: object\n      properties:\n        message:\n          type: string\n        severity:\n          enum:\n            - ERROR\n            - WARNING\n            - INFO\n          type: string \n    ModelInfo:\n      title: ModelInfo\n      type: object\n      properties:\n        author:\n          type: string\n        creationDate:\n          type: string\n          format: date-time\n        description:\n          type: string\n        displayName:\n          type: string\n        fileName:\n          type: string\n        hasImage:\n          type: boolean\n        id:\n          $ref: '#/components/schemas/ModelId'\n        imported:\n          type: boolean\n        mappingReference:\n          $ref: '#/components/schemas/ModelId'\n        modificationDate:\n          type: string\n          format: date-time\n        platformMappings:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/ModelId'\n        referencedBy:\n          type: array\n          items:\n            $ref: '#/components/schemas/ModelId'\n        references:\n          type: array\n          items:\n            $ref: '#/components/schemas/ModelId'\n        released:\n          type: boolean\n        state:\n          type: string\n        stereotypes:\n          type: array\n          items:\n            $ref: '#/components/schemas/Stereotype'\n        targetPlatformKey:\n          type: string\n        type:\n          $ref: '#/components/schemas/ModelType'\n        vortolang:\n          type: string\n\n    ModelContent:\n      title: ModelContent\n      type: object\n      properties:\n        models:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Model'\n        root:\n          $ref: '#/components/schemas/ModelId'\n    \n    BaseModel:\n      title: BaseModel\n      type: object\n      properties:\n        targetPlatformKey:\n          type: string\n        stereotypes:\n          type: array\n          items:\n            $ref: '#/components/schemas/Stereotype'\n        mappingReference:\n          $ref: '#/components/schemas/ModelId'\n        vortolang:\n          type: string\n        id:\n          $ref: '#/components/schemas/ModelId'\n        type:\n          $ref: '#/components/schemas/ModelType'\n        modelType:\n          type: string\n        displayName:\n          type: string\n        description:\n          type: string\n        fileName:\n          type: string\n        references:\n          type: array\n          items:\n            $ref: '#/components/schemas/ModelId'\n    \n    Model:\n      title: Model\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n      oneOf:\n        - $ref: '#/components/schemas/EnumModel'\n        - $ref: '#/components/schemas/EntityModel'\n        - $ref: '#/components/schemas/FunctionblockModel'\n        - $ref: '#/components/schemas/Infomodel'\n      discriminator:\n        propertyName: modelType\n    \n    EnumModel:\n      title: EnumModel\n      allOf:\n      - $ref: '#/components/schemas/Model'\n      - type: object\n        properties:\n          literals:\n            type: array\n            items:\n              $ref: '#/components/schemas/EnumLiteral'\n              \n    EnumLiteral:\n      title: EnumLiteral\n      type: object\n      properties:\n        name:\n          type: string\n        parent:\n          $ref: '#/components/schemas/ModelId'\n          \n    EntityModel:\n      title: EntityModel\n      allOf:\n      - $ref: '#/components/schemas/Model'\n      - type: object\n        properties:\n          properties:\n            type: array\n            items:\n              $ref: '#/components/schemas/ModelProperty'\n              \n    ModelProperty:\n      title: ModelProperty\n      type: object\n      properties:\n        targetPlatformKey:\n          type: string\n        stereotypes:\n          type: array\n          items:\n            $ref: '#/components/schemas/Stereotype'\n        mappingReference:\n          $ref: '#/components/schemas/ModelId'\n        mandatory:\n          type: boolean\n        name:\n          type: string\n        description:\n          type: string\n        type:\n          type: object\n        constraints:\n          type: array\n          items:\n            $ref: '#/components/schemas/Constraint'\n        attributes:\n          type: array\n          items:\n            $ref: '#/components/schemas/IPropertyAttribute'\n        primitive:\n          type: boolean\n        multiple:\n          type: boolean\n\n    IPropertyAttribute:\n      title: IPropertyAttribute\n      type: object\n      properties:\n        type:\n          oneOf:\n            - $ref: '#/components/schemas/BooleanAttributeProperty'\n            - $ref: '#/components/schemas/EnumAttributeProperty'\n\n    Constraint:\n      title: Constraint\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/ConstraintType'\n        value:\n          type: string\n\n    BooleanAttributeProperty:\n      title: BooleanAttributeProperty\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/BooleanAttributePropertyType'\n        value:\n          type: string\n\n    EnumAttributeProperty:\n      title: EnumAttributeProperty\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/EnumAttributePropertyType'\n        value:\n          type: string\n\n    BooleanAttributePropertyType:\n      title: BooleanAttributePropertyType\n      enum:\n        - READABLE\n        - WRITABLE\n        - EVENTABLE\n      type: string\n      example: READABLE\n\n    EnumAttributePropertyType:\n      title: EnumAttributePropertyType\n      enum:\n        - MEASUREMENT_UNIT\n      type: string\n      example: MEASUREMENT_UNIT\n\n    FunctionblockModel:\n      title: FunctionblockModel\n      allOf:\n      - $ref: '#/components/schemas/Model'\n      - type: object\n        properties:\n          configurationProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/ModelProperty'\n          statusProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/ModelProperty'\n          faultProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/ModelProperty'\n          events:\n            type: array\n            items:\n              $ref: '#/components/schemas/ModelEvent'\n          operations:\n            type: array\n            items:\n              $ref: '#/components/schemas/Operation'\n              \n    ModelEvent:\n      title: ModelEvent\n      type: object\n      properties:\n        name:\n          type: string\n        properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/ModelProperty'\n            \n    Operation:\n      title: Operation\n      type: object\n      properties:\n        targetPlatformKey:\n          type: string\n        stereotypes:\n          type: array\n          items:\n            $ref: '#/components/schemas/Stereotype'\n        mappingReference:\n          $ref: '#/components/schemas/ModelId'\n        name:\n          type: string\n        description:\n          type: string\n        result:\n          $ref: '#/components/schemas/ReturnType'\n        params:\n          type: array\n          items:\n            $ref: '#/components/schemas/Param'\n        breakable:\n          type: boolean\n          \n    ReturnType:\n      title: ReturnType\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/ModelId'\n        primitive:\n          type: boolean\n        multiple:\n          type: boolean\n          \n    Param:\n      title: Param\n      type: object\n      properties:\n        targetPlatformKey:\n          type: string\n        stereotypes:\n          type: array\n          items:\n            $ref: '#/components/schemas/Stereotype'\n        mappingReference:\n          $ref: '#/components/schemas/ModelId'\n        mandatory:\n          type: boolean\n        name:\n          type: string\n        description:\n          type: string\n        type:\n          $ref: '#/components/schemas/ModelId'\n        constraints:\n          type: array\n          items:\n            $ref: '#/components/schemas/Constraint'\n        primitive:\n          type: boolean\n        multiple:\n          type: boolean\n    \n    Infomodel:\n      title: Infomodel\n      allOf:\n      - $ref: '#/components/schemas/Model'\n      - type: object\n        properties:\n          functionblocks:\n            type: array\n            items:\n              $ref: '#/components/schemas/ModelProperty'\n    \n    ConstraintType:\n      title: ConstraintType\n      enum:\n      - MIN\n      - MAX\n      - STRLEN\n      - REGEX\n      - MIMETYPE\n      - SCALING\n      - DEFAULT\n      - NULLABLE\n      type: string\n      example: MIN\n    \n    Stereotype:\n      title: Stereotype\n      type: object\n      properties:\n        attributes:\n          type: object\n          additionalProperties:\n            type: string\n        name:\n          type: string\n\n    Attachment:\n      title: Attachment\n      type: object\n      properties:\n        filename:\n          type: string\n        modelId:\n          $ref: '#/components/schemas/ModelId'\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/Tag'\n\n    Link:\n      title: Link\n      type: object\n      properties:\n        url:\n          type: string\n        displayName:\n          type: string\n\n    Tag:\n      title: Tag\n      type: object\n      properties:\n        id:\n          type: string\n        label:\n          type: string\n\n    GeneratorInfo:\n      title: GeneratorInfo\n      type: object\n      properties:\n        amountOfDownloads:\n          type: integer\n          format: int32\n        configKeys:\n          type: array\n          items:\n            type: string\n        configTemplate:\n          type: string\n        creator:\n          type: string\n        description:\n          type: string\n        documentationUrl:\n          type: string\n        image144x144:\n          type: string\n        image32x32:\n          type: string\n        infoUrl:\n          type: string\n        key:\n          type: string\n        name:\n          type: string\n        tags:\n          type: array\n          items:\n            type: string\n\n    ModelId:\n      title: ModelId\n      type: object\n      properties:\n        name:\n          type: string\n        namespace:\n          type: string\n        prettyFormat:\n          type: string\n        version:\n          type: string\n\n    includeDependencies:\n      title: includeDependencies\n      enum:\n      - false\n      - true\n      type: string\n      example: false\n      \n    orderBy:\n      title: orderBy\n      enum:\n      - demo\n      - infra\n      - production\n      type: string\n      example: demo\n      \n    language:\n      title: language\n      enum:\n        - python\n        - arduino\n        - java\n        \n    digitaltwin:\n      title: Digital Twin Service\n      enum:\n        - boschiotthings\n        \n    ModelType:\n      title: ModelType\n      enum:\n      - Functionblock\n      - InformationModel\n      - Datatype\n      - Mapping\n      type: string\n      example: Functionblock\n\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: OAuth Bearer token\n      description: |-\n        A token issued by Github or Bosch ID\n",
			"canonicalURL": "/github.com/eclipse/vorto@3a7ecc3a425471ba84f89c23cd2f3bb961b802ea/-/blob/docs/specs/vorto_repository-1.0.yml",
			"externalURLs": [
				{
					"url": "https://github.com/eclipse/vorto/blob/3a7ecc3a425471ba84f89c23cd2f3bb961b802ea/docs/specs/vorto_repository-1.0.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: at 1:15: schemas: \"includeDependencies\": parse enum values: parse value \"false\": expected type \"string\", got \"bool\""
}