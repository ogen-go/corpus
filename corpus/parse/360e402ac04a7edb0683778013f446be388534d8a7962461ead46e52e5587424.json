{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Microservice-API-Patterns/MDSL-Specification"
		},
		"file": {
			"name": "http-binding-verbs-datatypes-trees.yaml",
			"size": 0,
			"path": "dsl-core/io.mdsl.tests/test-data/openapi-generation/http-binding-verbs-datatypes-trees.yaml",
			"byteSize": 5474,
			"content": "openapi: 3.0.1\ninfo:\n  title: ExplicitTreeBindingTest\n  version: \"1.0\"\nservers:\n- url: http://localhost:8080\ntags:\n- name: SampleEntityInformationHolderProvider-SampleEntityInformationHolderHome\n  externalDocs:\n    description: SampleEntityInformationHolder contract\n    url: \"\"\n- name: SampleEntityInformationHolderProvider-SampleEntityInformationHolderHome2\n  externalDocs:\n    description: SampleEntityInformationHolder contract\n    url: \"\"\npaths:\n  /sampleEntityInformationHolderHome:\n    put:\n      tags:\n      - SampleEntityInformationHolderProvider-SampleEntityInformationHolderHome\n      summary: sampleMethodWithEmbeddedTypes\n      description: \"\"\n      operationId: SampleEntityInformationHolderHome-sampleMethodWithEmbeddedTypes\n      parameters:\n      - name: tree3\n        in: query\n        description: Type reference tree3\n        schema:\n          type: array\n          items:\n            $ref: '#/components/schemas/DTOFlat'\n      - name: tree4\n        in: query\n        description: Type reference tree4\n        schema:\n          minItems: 1\n          type: array\n          items:\n            $ref: '#/components/schemas/DTOFlat'\n      - name: tree5\n        in: cookie\n        description: Type reference tree5\n        schema:\n          $ref: '#/components/schemas/DTOFlat'\n      requestBody:\n        description: Message payload (content)\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                tree1:\n                  $ref: '#/components/schemas/DTOFlat'\n                tree2:\n                  $ref: '#/components/schemas/DTOFlat'\n              description: request body elements for sampleMethodWithEmbeddedTypes\n      responses:\n        \"200\":\n          description: sampleMethodWithEmbeddedTypes successful execution\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  tree1:\n                    $ref: '#/components/schemas/DTOFlat'\n                  tree2:\n                    $ref: '#/components/schemas/DTOFlat'\n                  tree3:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/DTOFlat'\n                  tree4:\n                    minItems: 1\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/DTOFlat'\n                  tree5:\n                    $ref: '#/components/schemas/DTOFlat'\n  /sampleEntityInformationHolderHome2/{tree2}:\n    post:\n      tags:\n      - SampleEntityInformationHolderProvider-SampleEntityInformationHolderHome2\n      summary: sampleMethodWithTypeReference\n      description: \"\"\n      operationId: SampleEntityInformationHolderHome2-sampleMethodWithTypeReference\n      parameters:\n      - name: tree1\n        in: query\n        description: Type reference tree1\n        schema:\n          $ref: '#/components/schemas/DTOFlat'\n      - name: tree2\n        in: path\n        description: Type reference tree2\n        required: true\n        schema:\n          $ref: '#/components/schemas/DTOFlat'\n      - name: tree3\n        in: cookie\n        description: Type reference tree3\n        schema:\n          type: array\n          items:\n            $ref: '#/components/schemas/DTOFlat'\n      - name: tree4\n        in: header\n        description: Type reference tree4\n        schema:\n          minItems: 1\n          type: array\n          items:\n            $ref: '#/components/schemas/DTOFlat'\n      requestBody:\n        description: Message payload (content)\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                tree5:\n                  $ref: '#/components/schemas/DTOFlat'\n              description: request body elements for sampleMethodWithTypeReference\n      responses:\n        \"200\":\n          description: sampleMethodWithTypeReference successful execution\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DTONested'\n    parameters:\n    - name: tree2\n      in: path\n      required: true\n      schema:\n        type: string\ncomponents:\n  schemas:\n    DTOFlat:\n      type: object\n      properties:\n        leaf1:\n          type: integer\n          description: \u003ca href=\"https://microservice-api-patterns.org/patterns/structure/elementStereotypes/IdElement\"\n            target=\"_blank\"\u003eId Element\u003c/a\u003e\n          format: int32\n        leaf2:\n          type: string\n          description: \u003ca href=\"https://microservice-api-patterns.org/patterns/structure/elementStereotypes/DataElement\"\n            target=\"_blank\"\u003eData Element\u003c/a\u003e\n          nullable: true\n        leaf3:\n          minItems: 1\n          type: array\n          description: \u003ca href=\"https://microservice-api-patterns.org/patterns/structure/elementStereotypes/DataElement\"\n            target=\"_blank\"\u003eData Element\u003c/a\u003e\n          items:\n            type: string\n    DTONested:\n      type: object\n      properties:\n        tree1:\n          $ref: '#/components/schemas/DTOFlat'\n        tree2:\n          $ref: '#/components/schemas/DTOFlat'\n        tree3:\n          type: array\n          items:\n            $ref: '#/components/schemas/DTOFlat'\n        tree4:\n          minItems: 1\n          type: array\n          items:\n            $ref: '#/components/schemas/DTOFlat'\n        tree5:\n          $ref: '#/components/schemas/DTOFlat'\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /sampleEntityInformationHolderHome: put: operation \"SampleEntityInformationHolderHome-sampleMethodWithEmbeddedTypes\": parameters: parse parameter \"tree5\": invalid schema:style:explode combination: (\"object\":\"form\":true)"
}