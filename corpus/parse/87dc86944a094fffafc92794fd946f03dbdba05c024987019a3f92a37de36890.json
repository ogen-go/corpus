{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aml-org/als"
		},
		"file": {
			"name": "oas30-full.yaml",
			"size": 0,
			"path": "als-server/shared/src/test/resources/actions/hover/oas30-full.yaml",
			"byteSize": 9617,
			"content": "openapi: 3.0.0\ninfo:\n  title: Sample Pet Store App\n  description: This is a sample server for a pet store.\n  termsOfService: http://example.com/terms/\n  contact:\n    name: API Support\n    url: http://www.example.com/support\n    email: support@example.com\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.1\nservers:\n  - url: https://development.gigantic-server.com/v1\n    description: Development server\n    variables:\n      username:\n        # note! no enum here means it is an open value\n        enum:\n          - '8443'\n          - '443'\n        default: '8443'\n        description: this value is assigned by the service provider, in this example `gigantic-server.com`\n\npaths:\n  /path:\n    summary: an endpoint\n    description: still an endpoint\n    get:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: Updates a pet in the store with form data\n      externalDocs:\n        description: Find more info here\n        url: https://example.com\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            ty[*]pe: string\n      requestBody:\n        content:\n          'application/x-www-form-urlencoded':\n            schema:\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n              required:\n                - status\n      responses:\n        '200':\n          description: Pet updated.\n          content:\n            'application/json': {}\n            'application/xml': {}\n        '405':\n          description: Invalid input\n          content:\n            'application/json': {}\n            'application/xml': {}\n        default:\n          $ref: \"#/components/responses/aResponse\"\n      callbacks:\n        refCallback:\n          $ref: \"#/components/callbacks/myWebhook\"\n        callBack:\n          'http://notificationServer.com?transactionId={$request.body#/id}&email={$request.body#/email}':\n            post:\n              requestBody:\n                description: Callback payload\n                content:\n                  'application/json':\n                    schema:\n                      $ref: '#/components/schemas/objectSchema'\n              responses:\n                '200':\n                  description: webhook successfully processed and no retries will be performed\n      deprecated: false\n\n      security:\n        - oauth2:\n            - write:pets\n            - read:pets\n      servers:\n        - url: https://development.gigantic-server.com/v1\n          description: Development server\n    put:\n      description: put\n    post:\n      description: post\n    delete:\n      description: delete\n    options:\n      description: options\n    head:\n      description: head\n    patch:\n      description: patch\n    trace:\n      description: trace\n    servers:\n      - url: https://development.gigantic-server.com/v1\n        description: Development server\n    parameters:\n      - $ref: \"#/components/parameters/aParam\"\n      - name: token\n        in: header\n        description: token to be passed as a header\n        required: true\n        schema:\n          type: array\n          items:\n            type: integer\n            format: int64\n        style: simple\ncomponents:\n  schemas:\n    intFormat:\n      format:\n    common:\n      title: common schema\n      multipleOf: 2\n      maximum: 32\n      exclusiveMaximum: true\n      minimum: 0\n      exclusiveMinimum: true\n      maxLength: 100\n      minLength: 0\n      pattern: \"^(\\\\([0-9]{3}\\\\))?[0-9]{3}-[0-9]{4}$\"\n      enum:\n        - a\n        - b\n      type: string\n      description: common test case\n      default: a\n      nullable: true\n      externalDocs:\n        description: Find more info here\n        url: https://example.com\n      example: a\n      deprecated: false\n    arraySchema:\n      minItems: 0\n      uniqueItems: true\n      maxItems: 100\n      items:\n        type: string\n    objectSchema:\n      maxProperties: 100\n      minProperties: 0\n      required:\n        - a\n      properties:\n        a:\n          readOnly: false\n          writeOnly: false\n          xml:\n            name: a\n            attribute: false\n            wrapped: false\n            namespace: http://example.com/schema/sample\n            prefix: sample\n      additionalProperties: false\n    refSchema:\n      $ref: '#/components/schemas/objectSchema'\n    oneOfschema:\n      oneOf:\n        - $ref: '#/components/schemas/objectSchema'\n        - $ref: '#/components/schemas/arraySchema'\n      discriminator:\n        propertyName: a\n        mapping:\n          dog: '#/components/schemas/objectSchema'\n    anyOfSchema:\n      anyOf:\n        - $ref: '#/components/schemas/objectSchema'\n        - $ref: '#/components/schemas/arraySchema'\n    allOfSchema:\n      allOf:\n        - $ref: '#/components/schemas/objectSchema'\n        - $ref: '#/components/schemas/arraySchema'\n    notSchema:\n      not:\n        type: string\n  responses:\n    aResponse:\n      description: a response\n      headers:\n        inlined:\n          description: The number of allowed requests in the current period\n          schema:\n            type: integer\n        aRef:\n          $ref: \"#/components/headers/aHeader\"\n      content:\n        application/json:\n          schema:\n            type: string\n          example: a\n          encoding:\n            historyMetadata:\n              # require XML Content-Type in utf-8 encoding\n              contentType: application/xml; charset=utf-8\n              style: form\n              explode: false\n              allowReserved: false\n            profileImage:\n              # only accept png/jpeg\n              contentType: image/png, image/jpeg\n              headers:\n                X-Rate-Limit-Limit:\n                  description: The number of allowed requests in the current period\n                  schema:\n                    type: integer\n      links:\n        refLink:\n          $ref: \"#/components/links/address\"\n\n  parameters:\n    headerP:\n      name: headerP\n      in: header\n      schema:\n        type: string\n    pathP:\n      name: pathP\n      in: path\n      required: true\n      schema:\n        type: string\n    cookieP:\n      name: cookieP\n      in: cookie\n      schema:\n        type: string\n      examples:\n        anExample:\n          value: a\n    aParam:\n      name: aParam\n      description: a description\n      in: query\n      deprecated: false\n      allowEmptyValue: true\n      style: spaceDelimited\n      explode: false\n      allowReserved: false\n      example: a\n      schema:\n        type: string\n  examples:\n    aExample:\n      summary: a summary\n      description: a description\n      value: a\n    externalValueExample:\n      externalValue: a\n    refExample:\n      $ref: '#/components/examples/aExample'\n\n  requestBodies:\n    rquestBody:\n      description: a description\n      content:\n        'text/plain':\n          examples:\n            user:\n              summary: User example in text plain format\n              externalValue: 'http://foo.bar/examples/user-example.txt'\n    refBody:\n      $ref: \"#/components/requestBodies/rquestBody\"\n  headers:\n    aHeader:\n      description: a description\n      deprecated: false\n      allowEmptyValue: true\n      style: spaceDelimited\n      explode: false\n      allowReserved: false\n      example: a\n      schema:\n        type: string\n  securitySchemes:\n    apikey:\n      description: a security scheme\n      type: apiKey\n      name: api_key\n      in: header\n    http:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    openIdConnect:\n      type: openIdConnect\n      openIdConnectUrl: url\n    oauth2:\n      type: oauth2\n      flows:\n        implicit:\n          refreshUrl: https://example.com/api/oauth/dialog\n          authorizationUrl: https://example.com/api/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n        password:\n          tokenUrl: http\n        clientCredentials:\n          tokenUrl: http\n        authorizationCode:\n          tokenUrl: http\n          authorizationUrl: https://example.com/api/oauth/dialog\n\n    aRef:\n      $ref: \"#/components/securitySchemes/apikey\"\n  links:\n    forOpId:\n      operationId: an operation Id\n    address:\n      # the target link operationId\n      operationRef: operation reference\n      parameters:\n        # get the `id` field from the request path parameter named `id`\n        userId: $request.path.id\n      requestBody: aaa\n      description: a description\n      server:\n        url: https://development.gigantic-server.com/v1\n        description: Development server\n  callbacks:\n    myWebhook:\n      'http://notificationServer.com?transactionId={$request.body#/id}&email={$request.body#/email}':\n        post:\n          requestBody:\n            description: Callback payload\n            content:\n              'application/json':\n                schema:\n                  $ref: \"#/components/schemas/objectSchema\"\n          responses:\n            '200':\n              description: webhook successfully processed and no retries will be performed\nsecurity:\n  - oauth2:\n      - read:pets\ntags:\n  - name: atag\n    description: a description\n    externalDocs:\n      description: Find more info here\n      url: https://example.com\nexternalDocs:\n  description: Find more info here\n  url: https://example.com\n",
			"canonicalURL": "/github.com/aml-org/als@b9e6bcf775562d4a32ee07c1ac7841a8bf0552d0/-/blob/als-server/shared/src/test/resources/actions/hover/oas30-full.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aml-org/als/blob/b9e6bcf775562d4a32ee07c1ac7841a8bf0552d0/als-server/shared/src/test/resources/actions/hover/oas30-full.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: at 1:15: responses: \"aResponse\": at 1:1867: content: application/json: at 1:1898: encoding property \"historyMetadata\": at 1:1929: unknown property \"historyMetadata\""
}