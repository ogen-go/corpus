{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/cuplsensor/cuplbackend"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "docs/api/admin/api.yaml",
			"byteSize": 23994,
			"content": "openapi: 3.0.1\ninfo:\n  title: cupl Administrator API\n  description: API endpoints that require administrator access.\n  contact:\n    url: www.plotsensor.com\n    email: malcolm@plotsensor.com\n  version: 0.0.2\ntags:\n  - name: Tags\n    description: Tag endpoints\n    externalDocs:\n      url: http://docs.my-api.com/pet-operations.htm\n  - name: Captures\n    description: Capture endpoints\n    externalDocs:\n      url: http://docs.my-api.com/store-orders.htm\npaths:\n  /token:\n    post:\n      description: Obtain a JWT for interacting with this API.\n      summary: Obtain a bearer token.\n      operationId: TokenPost\n      responses:\n        '200':\n          description: A bearer token that can be used to make calls to other endpoints in this API.\n          headers: {}\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '400':\n          description: No credentials supplied\n          content:\n            application/json:\n              schema: {}\n        '401':\n          description: Bad credentials\n          content:\n            application/json:\n              schema: {}\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TokenRequest'\n        description: Token Request Credentials\n        required: true\n  /capture/{id}:\n    get:\n      description: Get a capture by its ID.\n      summary: Get a capture.\n      tags:\n        - Captures\n      operationId: AdminCaptureGet\n      security:\n        - Bearer: []\n      parameters:\n        - name: id\n          in: query\n          required: false\n          description: Capture id\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: A capture object\n          headers: {}\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Capture'\n        '400':\n          description: bad input parameter\n          content:\n            application/json:\n              schema: {}\n    delete:\n      description: Delete a capture\n      summary: Delete a capture\n      tags:\n        - Captures\n      operationId: AdminCaptureDelete\n      security:\n        - Bearer: []\n      parameters:\n        - name: id\n          in: query\n          required: false\n          description: Capture id\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: Capture has been deleted\n          content:\n            application/json:\n              schema: {}\n        '400':\n          description: bad input parameter\n          content:\n            application/json:\n              schema: {}\n        '404':\n          description: No capture found\n          content:\n            application/json:\n              schema: {}\n  /captures:\n    get:\n      summary: List all captures\n      description: Get a list of captures ordered by ID. Optional to filter on tag_id.\n      tags:\n        - Captures\n      operationId: CapturesGet\n      parameters:\n        - name: offset\n          in: query\n          description: Return captures starting from this index.\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          description: Limit the number of captures returned.\n          schema:\n            type: integer\n        - name: tag_id\n          in: query\n          description: Only returns captures from tag_id.\n          schema:\n            type: integer\n      security:\n        - Bearer: []\n      responses:\n        200:\n          description: List of captures\n          headers:\n            Link:\n              type: string\n              description: |\n                Links to related resources, in the format defined by\n                [RFC 5988](https://tools.ietf.org/html/rfc5988#section-5).\n                This will include a link with relation type `next` to the\n                next page, if there is a next page.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Capture'\n        400:\n          description: bad input parameter\n          content:\n            application/json:\n              schema: {}\n    post:\n      description: Create a capture\n      summary: Create a capture\n      tags:\n        - Captures\n      operationId: AdminCapturePost\n      security:\n        - Bearer: []\n      responses:\n        '201':\n          description: Capture created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Capture'\n          headers: {}\n        '400':\n          description: 'invalid input, object invalid'\n          content:\n            application/json:\n              schema: {}\n        '409':\n          description: a capture with the same id already exists\n          content:\n            application/json:\n              schema: {}\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CapturePost'\n        description: Capture object\n  /tag/{id}:\n    get:\n      description: Get a tag from an id.\n      summary: Get a tag\n      tags:\n        - Tags\n      operationId: TagGet\n      security:\n        - Bearer: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Tag id\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: A tag object\n          headers: {}\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdminTag'\n        '400':\n          description: bad input parameter\n          content:\n            application/json:\n              schema: {}\n\n    put:\n      tags:\n        - Tags\n      description: Edit a tag\n      summary: Edit a tag\n      operationId: TagPut\n      security:\n        - Bearer: [ ]\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Tag id\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AdminTag'\n      responses:\n        200:\n          description: A tag object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdminTag'\n        400:\n          description: Bad input parameter.\n          content:\n            application/json:\n              schema:\n                type: object\n        401:\n          description: Not authorised. TagToken is not valid for this tag.\n          content:\n            application/json:\n              schema:\n                type: object\n        404:\n          description: Tag not found.\n          content: { }\n\n    delete:\n      description: Delete a tag\n      summary: Delete a tag\n      tags:\n        - Tags\n      operationId: TagDelete\n      security:\n        - Bearer: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Tag id\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: Tag has been deleted\n          content:\n            application/json:\n              schema: {}\n        '400':\n          description: bad input parameter\n          content:\n            application/json:\n              schema: {}\n        '404':\n          description: No tag found\n          content:\n            application/json:\n              schema: {}\n  /tags:\n    get:\n      description: Get a list of tags ordered by ID\n      summary: List all tags\n      tags:\n        - Tags\n      operationId: TagsGet\n      parameters:\n        - name: offset\n          in: query\n          description: Return samples starting from this index.\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          description: Limit the number of samples returned.\n          schema:\n            type: integer\n      security:\n        - Bearer: []\n      responses:\n        200:\n          description: List of tags\n          headers:\n            Link:\n              type: string\n              description: |\n                Links to related resources, in the format defined by\n                [RFC 5988](https://tools.ietf.org/html/rfc5988#section-5).\n                This will include a link with relation type `next` to the\n                next page, if there is a next page.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AdminTag'\n        400:\n          description: bad input parameter\n          content:\n            application/json:\n              schema: {}\n    post:\n      description: Create a tag\n      summary: Create a tag\n      tags:\n        - Tags\n      operationId: TagPost\n      security:\n        - Bearer: []\n      responses:\n        201:\n          description: Tag created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdminTag'\n          headers: {}\n        400:\n          description: 'invalid input, object invalid'\n          content:\n            application/json:\n              schema: {}\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AdminTag'\n        description: Tag id\n  /tag/{id}/simulate:\n    get:\n      summary: Simulate a tag.\n      description: Get URL from a simulated tag. This contains mock sensor data.\n      tags:\n        - Tags\n      operationId: TagSimGet\n      security:\n        - Bearer: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Tag id to simulate\n          schema:\n            type: integer\n        - name: frontendurl\n          in: query\n          required: true\n          description: URL of the consumer frontend application that will decode wscodec URLs.\n          schema:\n            type: string\n        - name: nsamples\n          in: query\n          required: false\n          description: Number of temperature and humidity samples to include in the wscodec URL.\n            0 samples is valid and should raise an error.\n          schema:\n            type: integer\n            default: 100\n        - name: smplintervalmins\n          in: query\n          required: false\n          description: Time interval between samples in minutes.\n          schema:\n            type: integer\n            default: 10\n        - name: format\n          in: query\n          required: false\n          description: Format code e.g. 1 for temperature and humidity and 2 for temperarture samples only.\n          schema:\n            type: integer\n            default: 1\n        - name: usehmac\n          in: query\n          required: false\n          description: Use HMAC rather than MD5.\n          schema:\n            type: boolean\n            default: true\n        - name: batvoltagemv\n          in: query\n          required: false\n          description: Battery voltage in mV.\n          schema:\n            type: integer\n            default: 3000\n        - name: bor\n          in: query\n          required: false\n          description: Reset caused by Brownout.\n          schema:\n            type: boolean\n            default: false\n        - name: svsh\n          in: query\n          required: false\n          description: Reset caused by Supply Voltage Supervisor (High Side).\n          schema:\n            type: boolean\n            default: false\n        - name: wdt\n          in: query\n          required: false\n          description: Reset caused by watchdog timer.\n          schema:\n            type: boolean\n            default: false\n        - name: misc\n          in: query\n          required: false\n          description: Miscellaneous error flag on cupl Tag.\n          schema:\n            type: boolean\n            default: false\n        - name: lpm5wu\n          in: query\n          required: false\n          description: Low Power Mode x.5 wakeup flag.\n          schema:\n            type: boolean\n            default: false\n        - name: clockfail\n          in: query\n          required: false\n          description: Clock failure error flag.\n          schema:\n            type: boolean\n            default: false\n        - name: tagerror\n          in: query\n          required: false\n          description: Initialise encoder with the error flag set. The circular buffer will be empty.\n          schema:\n            type: boolean\n            default: false\n\n      responses:\n        '200':\n          description: URL containing sensor data.\n          headers: {}\n          content:\n            application/json:\n              schema:\n                type: string\n        '400':\n          description: bad input parameter\n          content:\n            application/json:\n              schema: {}\n\n  /webhook/{id}:\n    get:\n      description: Get a webhook from an id.\n      summary: Get a webhook\n      tags:\n        - Webhooks\n      operationId: WebhookGet\n      security:\n        - Bearer: [ ]\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Webhook id\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: A webhook object\n          headers: { }\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdminWebhook'\n        '400':\n          description: bad input parameter\n          content:\n            application/json:\n              schema: { }\n\n    delete:\n      description: Delete a webhook\n      summary: Delete a webhook\n      tags:\n        - Webhooks\n      operationId: WebhookDelete\n      security:\n        - Bearer: [ ]\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Webhook id\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: Webhook has been deleted\n          content:\n            application/json:\n              schema: { }\n        '400':\n          description: bad input parameter\n          content:\n            application/json:\n              schema: { }\n        '404':\n          description: No tag found\n          content:\n            application/json:\n              schema: { }\n  /webhooks:\n    get:\n      description: Get a list of webhooks ordered by ID\n      summary: List all webhooks\n      tags:\n        - Webhooks\n      operationId: WebhooksGet\n      parameters:\n        - name: offset\n          in: query\n          description: Return webhooks starting from this index.\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          description: Limit the number of webhooks returned.\n          schema:\n            type: integer\n      security:\n        - Bearer: [ ]\n      responses:\n        200:\n          description: List of webhooks\n          headers:\n            Link:\n              type: string\n              description: |\n                Links to related resources, in the format defined by\n                [RFC 5988](https://tools.ietf.org/html/rfc5988#section-5).\n                This will include a link with relation type `next` to the\n                next page, if there is a next page.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AdminWebhook'\n        400:\n          description: bad input parameter\n          content:\n            application/json:\n              schema: { }\n    post:\n      description: Create a webhook\n      summary: Create a webhook\n      tags:\n        - Webhooks\n      operationId: WebhookPost\n      security:\n        - Bearer: [ ]\n      responses:\n        201:\n          description: Webhook created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdminWebhook'\n          headers: { }\n        400:\n          description: 'invalid input, object invalid'\n          content:\n            application/json:\n              schema: { }\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AdminWebhook'\n        description: Webhook id\n\ncomponents:\n  schemas:\n    AdminWebhook:\n      title: Webhook\n      type: object\n      properties:\n        tag_id:\n          type: integer\n          description: Id of the parent tag.\n          example: 1\n        address:\n          type: string\n          description: URL to send the POST request to when the tag is scanned. Data are encoded as JSON.\n          example: https://webhook.site/a1b658b6-6b23-4a49-959c-e9b33d20e034\n        fields:\n          type: string\n          description: A string containing a comma separated list of fields to include in the capture webhook.\n          example: '[\"samples\", \"batvoltagemv\"]'\n        wh_secretkey:\n          type: string\n          description: The secret key used to create an HMAC-SHA256 signature in the webhook header.\n          example: 4490vasnl456q2l\n        created_on:\n          type: string\n          format: date-time\n          readOnly: true\n          example: 2019-01-15T13:09:52.456Z\n    AdminTag:\n      allOf:     # Combines the BasicErrorModel and the inline model\n        - $ref: '#/components/schemas/Tag'\n        - type: object\n          properties:\n            id:\n              readOnly: true\n              type: integer\n              format: int32\n            secretKey:\n              example: AAAAcCcC\n              type: string\n            usehmac:\n              example: true\n              type: boolean\n              description: True if the tag is using the HMAC-MD5 algorithm to generate its hash. False if it is only using MD5.\n    CapturePost:\n      allOf:     # Combines the BasicErrorModel and the inline model\n        - $ref: '#/components/schemas/Capture'\n        - type: object\n          samples:\n            type: array\n            items:\n              $ref: '#/components/schemas/CaptureSample'\n    Token:\n      title: Token\n      type: object\n      properties:\n        token:\n          example: eyJz93a...k4laUWw\n          type: string\n        token_type:\n          example: Bearer\n          type: string\n    TokenRequest:\n      title: TokenRequest\n      type: object\n      properties:\n        client_id:\n          example: ABE39cASE940\n          type: string\n        client_secret:\n          example: nsfsaeASEFGSAE\n          type: string\n    Tag:\n      title: Tag\n      type: object\n      properties:\n        description:\n          type: string\n          description: A free text field that a user can modify. It may be a description of the tag location.\n            Alternatively, this may be the URL of a linked frontend web application.\n          example: In the kitchen.\n        fwversion:\n          type: string\n          description: Version string for the cuplTag firmware.\n          example: HT04_F1.1_C2\n        hwversion:\n          type: string\n          description: Version string for the cuplTag hardware.\n          example: HT04\n        serial:\n          readOnly: true\n          type: string\n          description: Serial of the tag that made the capture\n          example: YWJjZGVM\n        timeregistered:\n          readOnly: true\n          type: string\n          description: Time the tag was created\n          format: date-time\n          example: 2019-01-15T13:09:52.456\n        webhook:\n          type: integer\n          description: Webhook Id or null if no webhook has been set.\n          example: 3\n          readOnly: true\n    Capture:\n      title: Capture\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 1\n          readOnly: true\n          description: Database ID of the capture.\n        tag_id:\n          type: integer\n          format: int32\n          example: 1\n          description: Database ID of a tag the capture was taken from.\n        batvoltagemv:\n          type: integer\n          format: int32\n          example: 2900\n          description: Tag battery voltage in mV.\n        timestamp:\n          type: string\n          example: 2020-09-01T05:27:06Z\n          description: Time the capture was taken in the ISO 8601 format.\n        loopcount:\n          type: integer\n          format: int32\n          example: 10\n          description: The number of times the tag circular buffer has looped around. This indicates how long the\n            tag has been running for.\n        format:\n          type: integer\n          format: int32\n          example: 2\n          description: Major version of cuplCodec running on the tag.\n        cursorpos:\n          type: integer\n          format: int32\n          example: 24\n          description: Position of cursor in the circular buffer. The newest environmental sensor data are to the left of this cursor and the oldest to the right.\n        timeintmins:\n          type: integer\n          format: int32\n          example: 10\n          description: Time interval between samples in minutes.\n        hash:\n          type: string\n          example: d673aafc976e85\n          description: Hash of the capture. This may be either HMAC or MD5.\n        status:\n          $ref: '#/components/schemas/CaptureStatus'\n    CaptureSample:\n      title: CaptureSample\n      required:\n        - capture_id\n        - id\n        - temp\n        - timestamp\n      type: object\n      properties:\n        capture_id:\n          type: integer\n          description: ID of the parent Capture object\n          format: int32\n          example: 1\n        id:\n          type: integer\n          description: CaptureSample ID\n          format: int32\n          example: 1\n        rh:\n          type: number\n          description: Relative Humidity in percent\n          format: double\n          example: 55.0\n        temp:\n          type: number\n          description: Temperature in degrees Celsius\n          format: double\n          example: 21.0\n        timestamp:\n          type: string\n          description: Unix timestamp in seconds since January 1st 1970\n          format: date-time\n          example: 2019-01-15T13:09:52.456Z\n    CaptureStatus:\n      title: CaptureStatus\n      type: object\n      properties:\n        brownout:\n          type: boolean\n          description: True if the cause of the most recentreset was a brown out condition.\n          example: false\n        clockfail:\n          type: boolean\n          description: True if the most recent reset was caused by an MCU clock failure.\n          example: false\n        id:\n          type: integer\n          description: CaptureStatus ID\n          format: int32\n          example: 1\n        lpm5wakeup:\n          type: boolean\n          description: True if the MCU has woken up from LPM (Low Power Mode) x.5\n          example: false\n        misc:\n          type: boolean\n          description: True if a reset has occured for miscellaneous reasons\n          example: false\n        parent_capture:\n          type: integer\n          description: Parent Capture ID\n          format: int32\n          example: 232\n        resetsalltime:\n          type: integer\n          example: 20\n        supervisor:\n          type: boolean\n          description: True if the supply voltage supervisor caused the most recent\n            reset\n          example: false\n        watchdog:\n          type: boolean\n          description: True if the MCU watchdog caused the most recent reset.\n          example: false\n  securitySchemes:\n    Bearer: # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: Admin JWT    # optional, arbitrary value for documentation purposes"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /captures: get: operation \"CapturesGet\": responses: 200: headers: Link: parameter MUST contain either a schema property, or a content property"
}