{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aws-samples/aws-saas-factory-ref-solution-serverless-saas"
		},
		"file": {
			"name": "tenant-template.yaml",
			"size": 0,
			"path": "server/tenant-template.yaml",
			"byteSize": 47800,
			"content": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: \u003e\n  Serverless SaaS Reference Architecture \n\nGlobals:\n  Function:\n    Timeout: 29\n    Layers:\n      - !Sub \"arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14\"\n    Environment:\n        Variables:\n          LOG_LEVEL: DEBUG         \n          POWERTOOLS_METRICS_NAMESPACE: \"ServerlessSaaS\"\n          \nParameters:\n  TenantIdParameter:\n    Type: String\n    Default: pooled\n    Description: Tenant ID for the stack\n  CognitoUserPoolIdParameter:\n    Type: String    \n    Description: 'User Pool Id For Tenant'\n  CognitoAppClientIdParameter:\n    Type: String\n    Description: 'App Client Id for Tenant'\n  StageName:\n    Type: String\n    Default: \"prod\"\n    Description: \"Stage Name for the api\"\n  BootstrapStackName:\n    Type: String\n    Default: \"serverless-saas\"\n    Description: \"Name of the bootstrap stack\"\n  LambdaReserveConcurrency:\n    Type: Number\n    Default: 20\n    Description: \"Reserve concurrency for lambda function. You can customize this on per tenant basis, if needed, by storing in the tenant table\"\n  LambdaCanaryDeploymentPreference:\n    Type: String\n    Default: \"True\"\n    Description: \"Pass it as False if you want to disable the canary release for Lambda and don't want to wait for 5 mins to complete the release\"\nConditions:\n  IsPooledDeploy: !Equals [ !Ref TenantIdParameter, pooled]\n  IsSiloDeploy: !Not [!Equals [ !Ref TenantIdParameter, pooled]]\n  \nResources: \n  ServerlessSaaSLayers:\n    Type: AWS::Serverless::LayerVersion\n    Properties:\n      LayerName: !Join ['-', [serverless-saas-dependencies, !Ref TenantIdParameter]]\n      Description: Utilities for project\n      ContentUri: layers/\n      CompatibleRuntimes:\n        - python3.8          \n      LicenseInfo: 'MIT'\n      RetentionPolicy: Retain      \n    Metadata:\n      BuildMethod: python3.8   \n  \n  ProductTable:\n    Type: AWS::DynamoDB::Table\n    Properties: \n      AttributeDefinitions:\n        - AttributeName: shardId\n          AttributeType: S          \n        - AttributeName: productId\n          AttributeType: S          \n      KeySchema:\n        - AttributeName: shardId\n          KeyType: HASH  \n        - AttributeName: productId\n          KeyType: RANGE  \n      ProvisionedThroughput: \n        ReadCapacityUnits: 5\n        WriteCapacityUnits: 5\n      TableName: !Join ['-', [Product, !Ref TenantIdParameter]] \n      Tags:\n        - Key: \"TenantId\"\n          Value: !Ref TenantIdParameter \n\n  OrderTable:\n    Type: AWS::DynamoDB::Table\n    Properties: \n      AttributeDefinitions:\n        - AttributeName: shardId\n          AttributeType: S \n        - AttributeName: orderId\n          AttributeType: S          \n      KeySchema:\n        - AttributeName: shardId\n          KeyType: HASH \n        - AttributeName: orderId\n          KeyType: RANGE  \n      ProvisionedThroughput: \n        ReadCapacityUnits: 5\n        WriteCapacityUnits: 5\n      TableName: !Join ['-', [Order, !Ref TenantIdParameter]] \n      Tags:\n        - Key: \"TenantId\"\n          Value: !Ref TenantIdParameter  \n\n  ProductFunctionExecutionRolePolicy:\n    Condition: IsSiloDeploy\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName: !Join ['-', [!Ref TenantIdParameter, product-function-policy]]\n      Roles: \n        - !Ref ProductFunctionExecutionRole\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:              \n          - Effect: Allow\n            Action:\n              - dynamodb:GetItem\n              - dynamodb:UpdateItem\n              - dynamodb:PutItem\n              - dynamodb:DeleteItem\n              - dynamodb:Query\n            Resource:\n              - !GetAtt ProductTable.Arn\n\n  ProductFunctionExecutionRole:\n    Type: AWS::IAM::Role     \n    Properties:\n      RoleName: !Join ['-', [!Ref TenantIdParameter, product-function-execution-role]]\n      Path: '/'\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      ManagedPolicyArns: \n        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy    \n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess      \n  GetProductFunction:\n    Type: AWS::Serverless::Function \n    DependsOn: ProductFunctionExecutionRole \n    Properties:\n      CodeUri: ProductService/\n      Handler: product_service.get_product\n      Runtime: python3.8  \n      Tracing: Active\n      Role: !GetAtt ProductFunctionExecutionRole.Arn\n      ReservedConcurrentExecutions: !If [IsPooledDeploy, !Ref \"AWS::NoValue\" , !Ref LambdaReserveConcurrency]\n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: \"ProductService\"\n          IS_POOLED_DEPLOY: !If [IsPooledDeploy, true, false]  \n          PRODUCT_TABLE_NAME: !Ref ProductTable\n      AutoPublishAlias: live\n      DeploymentPreference:\n        Enabled: !Ref LambdaCanaryDeploymentPreference\n        Type: Canary10Percent5Minutes\n        Alarms:\n          - !Ref GetProductFunctionCanaryErrorsAlarm\n      Tags:\n        TenantId: !Ref TenantIdParameter       \n  GetProductFunctionCanaryErrorsAlarm:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: Lambda function canary errors\n      ComparisonOperator: GreaterThanThreshold\n      EvaluationPeriods: 2\n      MetricName: Errors\n      Namespace: AWS/Lambda\n      Period: 60\n      Statistic: Sum\n      Threshold: 0\n      Dimensions:\n        - Name: Resource\n          Value: !Sub \"${GetProductFunction}:live\"\n        - Name: FunctionName\n          Value: !Ref GetProductFunction\n        - Name: ExecutedVersion\n          Value: !GetAtt GetProductFunction.Version.Version    \n  \n  GetProductsFunction:\n    Type: AWS::Serverless::Function \n    DependsOn: ProductFunctionExecutionRole \n    Properties:\n      CodeUri: ProductService/\n      Handler: product_service.get_products\n      Runtime: python3.8  \n      Tracing: Active\n      Role: !GetAtt ProductFunctionExecutionRole.Arn\n      ReservedConcurrentExecutions: !If [IsPooledDeploy, !Ref \"AWS::NoValue\" , !Ref LambdaReserveConcurrency]\n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: \"ProductService\"\n          IS_POOLED_DEPLOY: !If [IsPooledDeploy, true, false]        \n          PRODUCT_TABLE_NAME: !Ref ProductTable\n      AutoPublishAlias: live\n      DeploymentPreference:\n        Enabled: !Ref LambdaCanaryDeploymentPreference\n        Type: Canary10Percent5Minutes\n        Alarms:\n          - !Ref GetProductsFunctionCanaryErrorsAlarm\n      Tags:\n        TenantId: !Ref TenantIdParameter    \n  GetProductsFunctionCanaryErrorsAlarm:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: Lambda function canary errors\n      ComparisonOperator: GreaterThanThreshold\n      EvaluationPeriods: 2\n      MetricName: Errors\n      Namespace: AWS/Lambda\n      Period: 60\n      Statistic: Sum\n      Threshold: 0\n      Dimensions:\n        - Name: Resource\n          Value: !Sub \"${GetProductsFunction}:live\"\n        - Name: FunctionName\n          Value: !Ref GetProductsFunction\n        - Name: ExecutedVersion\n          Value: !GetAtt GetProductsFunction.Version.Version    \n\n  CreateProductFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: ProductFunctionExecutionRole \n    Properties:\n      CodeUri: ProductService/\n      Handler: product_service.create_product\n      Runtime: python3.8  \n      Tracing: Active \n      Role: !GetAtt ProductFunctionExecutionRole.Arn \n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: \"ProductService\"\n          IS_POOLED_DEPLOY: !If [IsPooledDeploy, true, false]   \n          PRODUCT_TABLE_NAME: !Ref ProductTable\n      AutoPublishAlias: live\n      DeploymentPreference:\n        Enabled: !Ref LambdaCanaryDeploymentPreference\n        Type: Canary10Percent5Minutes\n        Alarms:\n          - !Ref CreateProductFunctionCanaryErrorsAlarm\n      Tags:\n        TenantId: !Ref TenantIdParameter    \n  CreateProductFunctionCanaryErrorsAlarm:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: Lambda function canary errors\n      ComparisonOperator: GreaterThanThreshold\n      EvaluationPeriods: 2\n      MetricName: Errors\n      Namespace: AWS/Lambda\n      Period: 60\n      Statistic: Sum\n      Threshold: 0\n      Dimensions:\n        - Name: Resource\n          Value: !Sub \"${CreateProductFunction}:live\"\n        - Name: FunctionName\n          Value: !Ref CreateProductFunction\n        - Name: ExecutedVersion\n          Value: !GetAtt CreateProductFunction.Version.Version    \n\n  UpdateProductFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: ProductFunctionExecutionRole \n    Properties:\n      CodeUri: ProductService/\n      Handler: product_service.update_product\n      Runtime: python3.8 \n      Tracing: Active\n      Role: !GetAtt ProductFunctionExecutionRole.Arn \n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: \"ProductService\"\n          IS_POOLED_DEPLOY: !If [IsPooledDeploy, true, false]  \n          PRODUCT_TABLE_NAME: !Ref ProductTable\n      AutoPublishAlias: live\n      DeploymentPreference:\n        Enabled: !Ref LambdaCanaryDeploymentPreference\n        Type: Canary10Percent5Minutes\n        Alarms:\n          - !Ref UpdateProductFunctionCanaryErrorsAlarm\n      Tags:\n        TenantId: !Ref TenantIdParameter  \n  UpdateProductFunctionCanaryErrorsAlarm:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: Lambda function canary errors\n      ComparisonOperator: GreaterThanThreshold\n      EvaluationPeriods: 2\n      MetricName: Errors\n      Namespace: AWS/Lambda\n      Period: 60\n      Statistic: Sum\n      Threshold: 0\n      Dimensions:\n        - Name: Resource\n          Value: !Sub \"${UpdateProductFunction}:live\"\n        - Name: FunctionName\n          Value: !Ref UpdateProductFunction\n        - Name: ExecutedVersion\n          Value: !GetAtt UpdateProductFunction.Version.Version    \n\n  DeleteProductFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: ProductFunctionExecutionRole \n    Properties:\n      CodeUri: ProductService/\n      Handler: product_service.delete_product\n      Runtime: python3.8 \n      Tracing: Active\n      Role: !GetAtt ProductFunctionExecutionRole.Arn \n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: \"ProductService\"\n          IS_POOLED_DEPLOY: !If [IsPooledDeploy, true, false]        \n          PRODUCT_TABLE_NAME: !Ref ProductTable\n      AutoPublishAlias: live\n      DeploymentPreference:\n        Enabled: !Ref LambdaCanaryDeploymentPreference\n        Type: Canary10Percent5Minutes\n        Alarms:\n          - !Ref DeleteProductFunctionCanaryErrorsAlarm\n      Tags:\n        TenantId: !Ref TenantIdParameter    \n  DeleteProductFunctionCanaryErrorsAlarm:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: Lambda function canary errors\n      ComparisonOperator: GreaterThanThreshold\n      EvaluationPeriods: 2\n      MetricName: Errors\n      Namespace: AWS/Lambda\n      Period: 60\n      Statistic: Sum\n      Threshold: 0\n      Dimensions:\n        - Name: Resource\n          Value: !Sub \"${DeleteProductFunction}:live\"\n        - Name: FunctionName\n          Value: !Ref DeleteProductFunction\n        - Name: ExecutedVersion\n          Value: !GetAtt DeleteProductFunction.Version.Version    \n\n  OrderFunctionExecutionRolePolicy:\n    Condition: IsSiloDeploy\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName: !Join ['-', [!Ref TenantIdParameter, order-function-policy]]\n      Roles: \n        - !Ref OrderFunctionExecutionRole\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:              \n          - Effect: Allow\n            Action:\n              - dynamodb:GetItem\n              - dynamodb:UpdateItem\n              - dynamodb:PutItem\n              - dynamodb:DeleteItem\n              - dynamodb:Query\n            Resource:\n              - !GetAtt OrderTable.Arn\n\n  OrderFunctionExecutionRole:\n    Type: AWS::IAM::Role     \n    Properties:\n      RoleName: !Join ['-', [!Ref TenantIdParameter, order-function-execution-role]]\n      Path: '/'\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      ManagedPolicyArns: \n        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy    \n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess        \n  GetOrdersFunction:\n    Type: AWS::Serverless::Function \n    DependsOn: OrderFunctionExecutionRole \n    Properties:\n      CodeUri: OrderService/\n      Handler: order_service.get_orders\n      Runtime: python3.8  \n      Tracing: Active\n      Role: !GetAtt OrderFunctionExecutionRole.Arn\n      ReservedConcurrentExecutions: !If [IsPooledDeploy, !Ref \"AWS::NoValue\" , !Ref LambdaReserveConcurrency]\n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: \"OrderService\"\n          IS_POOLED_DEPLOY: !If [IsPooledDeploy, true, false] \n          ORDER_TABLE_NAME: !Ref OrderTable\n      AutoPublishAlias: live\n      DeploymentPreference:\n        Enabled: !Ref LambdaCanaryDeploymentPreference\n        Type: Canary10Percent5Minutes\n        Alarms:\n          - !Ref GetOrdersFunctionCanaryErrorsAlarm\n      Tags:\n        TenantId: !Ref TenantIdParameter    \n  GetOrdersFunctionCanaryErrorsAlarm:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: Lambda function canary errors\n      ComparisonOperator: GreaterThanThreshold\n      EvaluationPeriods: 2\n      MetricName: Errors\n      Namespace: AWS/Lambda\n      Period: 60\n      Statistic: Sum\n      Threshold: 0\n      Dimensions:\n        - Name: Resource\n          Value: !Sub \"${GetOrdersFunction}:live\"\n        - Name: FunctionName\n          Value: !Ref GetOrdersFunction\n        - Name: ExecutedVersion\n          Value: !GetAtt GetOrdersFunction.Version.Version    \n\n  GetOrderFunction:\n    Type: AWS::Serverless::Function \n    DependsOn: OrderFunctionExecutionRole \n    Properties:\n      CodeUri: OrderService/\n      Handler: order_service.get_order\n      Runtime: python3.8  \n      Tracing: Active\n      Role: !GetAtt OrderFunctionExecutionRole.Arn\n      ReservedConcurrentExecutions: !If [IsPooledDeploy, !Ref \"AWS::NoValue\" , !Ref LambdaReserveConcurrency]\n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: \"OrderService\"\n          IS_POOLED_DEPLOY: !If [IsPooledDeploy, true, false]   \n          ORDER_TABLE_NAME: !Ref OrderTable\n      AutoPublishAlias: live\n      DeploymentPreference:\n        Enabled: !Ref LambdaCanaryDeploymentPreference\n        Type: Canary10Percent5Minutes\n        Alarms:\n          - !Ref GetOrderFunctionCanaryErrorsAlarm\n      Tags:\n        TenantId: !Ref TenantIdParameter   \n  GetOrderFunctionCanaryErrorsAlarm:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: Lambda function canary errors\n      ComparisonOperator: GreaterThanThreshold\n      EvaluationPeriods: 2\n      MetricName: Errors\n      Namespace: AWS/Lambda\n      Period: 60\n      Statistic: Sum\n      Threshold: 0\n      Dimensions:\n        - Name: Resource\n          Value: !Sub \"${GetOrderFunction}:live\"\n        - Name: FunctionName\n          Value: !Ref GetOrderFunction\n        - Name: ExecutedVersion\n          Value: !GetAtt GetOrderFunction.Version.Version    \n\n  CreateOrderFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: OrderFunctionExecutionRole \n    Properties:\n      CodeUri: OrderService/\n      Handler: order_service.create_order\n      Runtime: python3.8  \n      Tracing: Active \n      Role: !GetAtt OrderFunctionExecutionRole.Arn \n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: \"OrderService\"\n          IS_POOLED_DEPLOY: !If [IsPooledDeploy, true, false]   \n          ORDER_TABLE_NAME: !Ref OrderTable\n      AutoPublishAlias: live\n      DeploymentPreference:\n        Enabled: !Ref LambdaCanaryDeploymentPreference\n        Type: Canary10Percent5Minutes\n        Alarms:\n          - !Ref CreateOrderFunctionCanaryErrorsAlarm\n      Tags:\n        TenantId: !Ref TenantIdParameter   \n  CreateOrderFunctionCanaryErrorsAlarm:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: Lambda function canary errors\n      ComparisonOperator: GreaterThanThreshold\n      EvaluationPeriods: 2\n      MetricName: Errors\n      Namespace: AWS/Lambda\n      Period: 60\n      Statistic: Sum\n      Threshold: 0\n      Dimensions:\n        - Name: Resource\n          Value: !Sub \"${CreateOrderFunction}:live\"\n        - Name: FunctionName\n          Value: !Ref CreateOrderFunction\n        - Name: ExecutedVersion\n          Value: !GetAtt CreateOrderFunction.Version.Version    \n\n  UpdateOrderFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: OrderFunctionExecutionRole \n    Properties:\n      CodeUri: OrderService/\n      Handler: order_service.update_order\n      Runtime: python3.8 \n      Tracing: Active\n      Role: !GetAtt OrderFunctionExecutionRole.Arn \n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: \"OrderService\"\n          IS_POOLED_DEPLOY: !If [IsPooledDeploy, true, false]  \n          ORDER_TABLE_NAME: !Ref OrderTable\n      AutoPublishAlias: live\n      DeploymentPreference:\n        Enabled: !Ref LambdaCanaryDeploymentPreference\n        Type: Canary10Percent5Minutes\n        Alarms:\n          - !Ref UpdateOrderFunctionCanaryErrorsAlarm\n      Tags:\n        TenantId: !Ref TenantIdParameter    \n  UpdateOrderFunctionCanaryErrorsAlarm:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: Lambda function canary errors\n      ComparisonOperator: GreaterThanThreshold\n      EvaluationPeriods: 2\n      MetricName: Errors\n      Namespace: AWS/Lambda\n      Period: 60\n      Statistic: Sum\n      Threshold: 0\n      Dimensions:\n        - Name: Resource\n          Value: !Sub \"${UpdateOrderFunction}:live\"\n        - Name: FunctionName\n          Value: !Ref UpdateOrderFunction\n        - Name: ExecutedVersion\n          Value: !GetAtt UpdateOrderFunction.Version.Version    \n\n  DeleteOrderFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: OrderFunctionExecutionRole \n    Properties:\n      CodeUri: OrderService/\n      Handler: order_service.delete_order\n      Runtime: python3.8 \n      Tracing: Active\n      Role: !GetAtt OrderFunctionExecutionRole.Arn \n      Layers: \n        - !Ref ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: \"OrderService\"\n          IS_POOLED_DEPLOY: !If [IsPooledDeploy, true, false]        \n          ORDER_TABLE_NAME: !Ref OrderTable\n      AutoPublishAlias: live\n      DeploymentPreference:\n        Enabled: !Ref LambdaCanaryDeploymentPreference\n        Type: Canary10Percent5Minutes\n        Alarms:\n          - !Ref DeleteOrderFunctionCanaryErrorsAlarm\n      Tags:\n        TenantId: !Ref TenantIdParameter    \n  DeleteOrderFunctionCanaryErrorsAlarm:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: Lambda function canary errors\n      ComparisonOperator: GreaterThanThreshold\n      EvaluationPeriods: 2\n      MetricName: Errors\n      Namespace: AWS/Lambda\n      Period: 60\n      Statistic: Sum\n      Threshold: 0\n      Dimensions:\n        - Name: Resource\n          Value: !Sub \"${DeleteOrderFunction}:live\"\n        - Name: FunctionName\n          Value: !Ref DeleteOrderFunction\n        - Name: ExecutedVersion\n          Value: !GetAtt DeleteOrderFunction.Version.Version   \n     \n  \n  ApiGatewayAccessLogs:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Join ['-', [/aws/api-gateway/access-logs-serverless-saas-tenant-api-, !Ref TenantIdParameter]]\n      RetentionInDays: 30\n  ApiGatewayTenantApi:\n    Type: AWS::Serverless::Api\n    Properties:\n      # Auth:\n      #   UsagePlan: !Ref TierUsagePlanParameter\n      MethodSettings:\n        - DataTraceEnabled: False\n          LoggingLevel: INFO\n          MetricsEnabled: True\n          ResourcePath: '/*' \n          HttpMethod: '*' \n      AccessLogSetting:\n        DestinationArn: !GetAtt ApiGatewayAccessLogs.Arn\n        Format: '{ \"requestId\":\"$context.requestId\", \"ip\": \"$context.identity.sourceIp\", \"caller\":\"$context.identity.caller\", \"user\":\"$context.identity.user\",\"requestTime\":\"$context.requestTime\", \"httpMethod\":\"$context.httpMethod\",\"resourcePath\":\"$context.resourcePath\", \"status\":\"$context.status\",\"protocol\":\"$context.protocol\", \"responseLength\":\"$context.responseLength\" }'\n      TracingEnabled: True\n      DefinitionBody:\n        openapi: 3.0.1\n        info:\n          title: !Join ['-', [!Ref TenantIdParameter, 'serverless-saas-tenant-api']]\n        basePath: !Join ['', ['/', !Ref StageName]]\n        x-amazon-apigateway-api-key-source : \"AUTHORIZER\"\n        schemes:\n          - https\n        paths:\n          /order/{id}:\n            get:\n              summary: Returns a order\n              description: Return a order by a order id.\n              produces:\n                - application/json\n              parameters:\n                - name: id\n                  in: path\n                  required: true\n                  type: string\n              responses: {}\n              security:        \n                - api_key: []        \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !GetAtt GetOrderFunction.Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy \n            put:              \n              produces:\n                - application/json\n              responses: {}\n              security:      \n                - api_key: []          \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !GetAtt UpdateOrderFunction.Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy     \n            delete:\n              summary: Deletes a order\n              description: Deletes a order by a order id.\n              produces:\n                - application/json\n              parameters:\n                - name: id\n                  in: path\n                  required: true\n                  type: string\n              responses: {}\n              security:       \n                - api_key: []         \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !GetAtt DeleteOrderFunction.Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                type: mock      \n          /orders:\n            get:\n              summary: Returns all orders\n              description: Returns all orders.\n              produces:\n                - application/json\n              responses: {}\n              security:     \n                - api_key: []           \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !GetAtt GetOrdersFunction.Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                type: mock                              \n          /order:\n            post:              \n              produces:\n                - application/json\n              responses: {}\n              security:         \n                - api_key: []       \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !GetAtt CreateOrderFunction.Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                type: mock     \n          /product/{id}:\n            get:\n              summary: Returns a product\n              description: Return a product by a product id.\n              produces:\n                - application/json\n              parameters:\n                - name: id\n                  in: path\n                  required: true\n                  type: string\n              responses: {}\n              security:  \n                - api_key: []              \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !GetAtt GetProductFunction.Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy \n            put:              \n              produces:\n                - application/json\n              responses: {}\n              security: \n                - api_key: []               \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !GetAtt UpdateProductFunction.Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy     \n            delete:\n              summary: Deletes a product\n              description: Deletes a product by a product id.\n              produces:\n                - application/json\n              parameters:\n                - name: id\n                  in: path\n                  required: true\n                  type: string\n              responses: {}\n              security:     \n                - api_key: []           \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !GetAtt DeleteProductFunction.Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy \n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                type: mock      \n          /products:\n            get:\n              summary: Returns all products\n              description: Returns all products.\n              produces:\n                - application/json\n              responses: {}\n              security: \n                - api_key: []               \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !GetAtt GetProductsFunction.Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy  \n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                type: mock                           \n          /product:\n            post:              \n              produces:\n                - application/json\n              responses: {}\n              security:   \n                - api_key: []             \n                - Authorizer: []\n              x-amazon-apigateway-integration:\n                uri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    -  !GetAtt CreateProductFunction.Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy   \n            options:\n              consumes:\n                - application/json\n              produces:\n                - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: \"#/definitions/Empty\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n                      method.response.header.Access-Control-Allow-Headers: \"'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'\"\n                      method.response.header.Access-Control-Allow-Origin:  \"'*'\"\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 200}\"\n                type: mock                                    \n        components:\n          securitySchemes:  \n            api_key:\n              type: \"apiKey\"\n              name: \"x-api-key\"\n              in: \"header\"          \n            Authorizer:\n              type: \"apiKey\"\n              name: \"Authorization\"\n              in: \"header\"\n              x-amazon-apigateway-authtype: \"custom\"\n              x-amazon-apigateway-authorizer:\n                authorizerUri: !Join\n                  - ''\n                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    - !ImportValue \n                      Serverless-SaaS-AuthorizerFunctionArn\n                      #'Fn::Sub': \"${BootstrapStackName}-AuthorizerFunctionArn\"\n                    - /invocations\n                authorizerResultTtlInSeconds: 30\n                type: \"token\"\n      StageName: !Ref StageName            \n  \n  GetProductsLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt GetProductsFunction.Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\n        \"\", [\n          \"arn:aws:execute-api:\", \n          {\"Ref\": \"AWS::Region\"}, \":\", \n          {\"Ref\": \"AWS::AccountId\"}, \":\", \n          !Ref ApiGatewayTenantApi, \"/*/*/*\"\n          ]\n        ] \n      \n  GetProductLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt \n        - GetProductFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\n        \"\", [\n          \"arn:aws:execute-api:\", \n          {\"Ref\": \"AWS::Region\"}, \":\", \n          {\"Ref\": \"AWS::AccountId\"}, \":\", \n          !Ref ApiGatewayTenantApi, \"/*/*/*\"\n          ]\n        ]  \n  CreateProductLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt \n        - CreateProductFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\n        \"\", [\n          \"arn:aws:execute-api:\", \n          {\"Ref\": \"AWS::Region\"}, \":\", \n          {\"Ref\": \"AWS::AccountId\"}, \":\", \n          !Ref ApiGatewayTenantApi, \"/*/*/*\"\n          ]\n        ]    \n  UpdateProductLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt \n        - UpdateProductFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\n        \"\", [\n          \"arn:aws:execute-api:\", \n          {\"Ref\": \"AWS::Region\"}, \":\", \n          {\"Ref\": \"AWS::AccountId\"}, \":\", \n          !Ref ApiGatewayTenantApi, \"/*/*/*\"\n          ]\n        ]         \n  DeleteProductLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt \n        - DeleteProductFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\n        \"\", [\n          \"arn:aws:execute-api:\", \n          {\"Ref\": \"AWS::Region\"}, \":\", \n          {\"Ref\": \"AWS::AccountId\"}, \":\", \n          !Ref ApiGatewayTenantApi, \"/*/*/*\"\n          ]\n        ]  \n  \n  GetOrdersLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt \n        - GetOrdersFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\n        \"\", [\n          \"arn:aws:execute-api:\", \n          {\"Ref\": \"AWS::Region\"}, \":\", \n          {\"Ref\": \"AWS::AccountId\"}, \":\", \n          !Ref ApiGatewayTenantApi, \"/*/*/*\"\n          ]\n        ]      \n\n  GetOrderLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt \n        - GetOrderFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\n        \"\", [\n          \"arn:aws:execute-api:\", \n          {\"Ref\": \"AWS::Region\"}, \":\", \n          {\"Ref\": \"AWS::AccountId\"}, \":\", \n          !Ref ApiGatewayTenantApi, \"/*/*/*\"\n          ]\n        ]  \n  CreateOrderLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt \n        - CreateOrderFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\n        \"\", [\n          \"arn:aws:execute-api:\", \n          {\"Ref\": \"AWS::Region\"}, \":\", \n          {\"Ref\": \"AWS::AccountId\"}, \":\", \n          !Ref ApiGatewayTenantApi, \"/*/*/*\"\n          ]\n        ]    \n  UpdateOrderLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt \n        - UpdateOrderFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\n        \"\", [\n          \"arn:aws:execute-api:\", \n          {\"Ref\": \"AWS::Region\"}, \":\", \n          {\"Ref\": \"AWS::AccountId\"}, \":\", \n          !Ref ApiGatewayTenantApi, \"/*/*/*\"\n          ]\n        ]         \n  DeleteOrderLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt \n        - DeleteOrderFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\n        \"\", [\n          \"arn:aws:execute-api:\", \n          {\"Ref\": \"AWS::Region\"}, \":\", \n          {\"Ref\": \"AWS::AccountId\"}, \":\", \n          !Ref ApiGatewayTenantApi, \"/*/*/*\"\n          ]\n        ]            \n\n  AuthorizerLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName:   !ImportValue \n                      Serverless-SaaS-AuthorizerFunctionArn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join [\"\", [\"arn:aws:execute-api:\", !Ref \"AWS::Region\", \":\", !Ref \"AWS::AccountId\", \":\", !Ref ApiGatewayTenantApi, \"/*/*\" ]]\n  \n  UpdateUsagePlanLambdaExecutionRole:\n    Type: AWS::IAM::Role\n    DependsOn: ApiGatewayTenantApi\n    Properties:\n      RoleName: !Join ['-', [!Ref TenantIdParameter, update-usage-plan-role]]\n      Path: \"/\"\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy\n      Policies:\n        - PolicyName: !Join ['-', [!Ref TenantIdParameter, update-usage-plan-policy]]\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - kms:Decrypt\n                Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*\n              - Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:PutLogEvents\n                  - logs:CreateLogStream\n                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*\n              - Effect: Allow\n                Action:\n                  - logs:DescribeLogStreams\n                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*\n              - Effect: Allow\n                Action:\n                  - xray:PutTraceSegments\n                  - xray:PutTelemetryRecords\n                Resource: \"*\"\n              - Effect: Allow\n                Action:\n                  - apigateway:PATCH\n                Resource: !Sub arn:aws:apigateway:${AWS::Region}::/usageplans/* \n              - Effect: Allow\n                Action:\n                  - dynamodb:GetItem\n                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ServerlessSaaS-Settings\n  UpdateUsagePlanFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: UpdateUsagePlanLambdaExecutionRole\n    Properties:\n      CodeUri: custom_resources/\n      Handler: update_usage_plan.handler\n      Runtime: python3.8\n      Role: !GetAtt UpdateUsagePlanLambdaExecutionRole.Arn\n      Layers: \n          - !Ref ServerlessSaaSLayers\n  AssociateUsagePlanWithTenantAPI:\n    Type: Custom::AssociateUsagePlanWithTenantAPI\n    DependsOn: UpdateUsagePlanFunction\n    Properties:\n      ServiceToken: !GetAtt UpdateUsagePlanFunction.Arn\n      ApiGatewayId: !Ref ApiGatewayTenantApi\n      SettingsTableName: ServerlessSaaS-Settings\n      IsPooledDeploy: !If [IsPooledDeploy, true, false]     \n      Stage: !Ref StageName\n      UsagePlanBasicTier: !ImportValue Serverless-SaaS-UsagePlanBasicTier\n      UsagePlanStandardTier: !ImportValue Serverless-SaaS-UsagePlanStandardTier\n      UsagePlanPremiumTier: !ImportValue Serverless-SaaS-UsagePlanPremiumTier\n      UsagePlanPlatinumTier: !ImportValue Serverless-SaaS-UsagePlanPlatinumTier\n  UpdateTenantApiGatewayUrlLambdaExecutionRole:\n    Type: AWS::IAM::Role\n    DependsOn: ApiGatewayTenantApi\n    Properties:\n      RoleName: !Join ['-', [!Ref TenantIdParameter, apigwurl-lambda-exec-role]]\n      Path: \"/\"\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess\n      Policies:\n        - PolicyName: !Join ['-', [!Ref TenantIdParameter, apigwurl-lambda-exe-policy ]]\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - dynamodb:PutItem\n                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ServerlessSaaS-Settings \n              - Effect: Allow\n                Action:\n                  - dynamodb:UpdateItem\n                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ServerlessSaaS-TenantDetails    \n  UpdateTenantApiGatewayUrlFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: UpdateTenantApiGatewayUrlLambdaExecutionRole\n    Properties:\n      CodeUri: custom_resources/\n      Handler: update_tenant_apigatewayurl.handler\n      Runtime: python3.8\n      Role: !GetAtt UpdateTenantApiGatewayUrlLambdaExecutionRole.Arn\n      Layers: \n          - !Ref ServerlessSaaSLayers\n  UpdateTenantApiGatewayUrl:\n    Type: Custom::UpdateTenantApiGatewayUrl\n    DependsOn: UpdateTenantApiGatewayUrlFunction\n    Properties:\n      ServiceToken: !GetAtt UpdateTenantApiGatewayUrlFunction.Arn\n      TenantDetailsTableName: ServerlessSaaS-TenantDetails\n      SettingsTableName: ServerlessSaaS-Settings  \n      TenantId: !Ref TenantIdParameter  \n      TenantApiGatewayUrl: !Sub \"https://${ApiGatewayTenantApi}.execute-api.${AWS::Region}.amazonaws.com/prod/\"\n  \nOutputs:\n  TenantApiGatewayId:\n    Description: Id for Tenant API Gateway\n    Value: !Ref ApiGatewayTenantApi\n  TenantAPI:\n    Description: \"API Gateway endpoint URL for Tenant API\"\n    Value: !Join ['', [!Sub \"https://${ApiGatewayTenantApi}.execute-api.${AWS::Region}.amazonaws.com/\", !Ref StageName, \"/\"]]",
			"canonicalURL": "/github.com/aws-samples/aws-saas-factory-ref-solution-serverless-saas@a7ce8bfd4ee11c490844905a1fa374aed7f53a62/-/blob/server/tenant-template.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aws-samples/aws-saas-factory-ref-solution-serverless-saas/blob/a7ce8bfd4ee11c490844905a1fa374aed7f53a62/server/tenant-template.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse version: at server/tenant-template.yaml:4:1: invalid version: invalid major version: strconv.Atoi: parsing \"\": invalid syntax"
}