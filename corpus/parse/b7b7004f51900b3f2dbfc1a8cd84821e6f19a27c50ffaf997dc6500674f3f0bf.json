{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/plantbreeding/BrAPI"
		},
		"file": {
			"name": "Images_ImageDbId_GET_PUT.yaml",
			"size": 0,
			"path": "Specification/BrAPI-Phenotyping/Images/Images_ImageDbId_GET_PUT.yaml",
			"byteSize": 4127,
			"content": "info:\n  title: BrAPI\n  version: ''\nopenapi: 3.0.0\npaths:\n  /images/{imageDbId}:\n    get:\n      summary: Get the an image metadata summary\n      description: |-\n        Get one image metadata object\n\n        Implementation Notes\n\n        - ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for \n        retrieving the image content, so it could be on a different path, or a different host.\n\n        - ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive \n        words, or ontology references, or full ontology URI''s.\n      parameters:\n      - description: The unique identifier for a image\n        in: path\n        name: imageDbId\n        required: true\n        schema:\n          type: string\n      - $ref: '#/components/parameters/authorizationHeader'\n      responses:\n        '200':\n          $ref: '#/components/responses/ImageSingleResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n      tags:\n      - Images\n    put:\n      summary: Update an existing image metadata record\n      description: |-\n        Update an existing image metadata record\n        \n        Implementation Notes\n        \n        - This endpoint should be implemented with 'PUT /images/{imageDbId}/imagecontent' for full image update capability\n        \n        - A server may choose to modify the image metadata object based on the actually image which has been uploaded. \n        \n        - Image data may be stored in a database or file system. Servers should generate and provide the \"imageURL\" as an \n        absolute path for retrieving the image, wherever it happens to live. \n        \n        - 'descriptiveOntologyTerm' can be thought of as Tags for the image. These could be simple descriptive words, or \n        ontology references, or full ontology URI's. \n        \n        - The '/images' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON \n        only supports two of the possible geometries; Points and Polygons. \n        \n        - With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera. \n        \n        - For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and \n        latitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the \n        image content.\n\n        An example use case is available on the BrAPI Wiki -\u003e https://wiki.brapi.org/index.php/Image_Upload\n      parameters:\n      - description: The unique identifier for a image\n        in: path\n        name: imageDbId\n        required: true\n        schema:\n          type: string\n      - $ref: '#/components/parameters/authorizationHeader'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ImageNewRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/ImageSingleResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n      tags:\n      - Images\ncomponents:\n  responses:\n    ImageSingleResponse:\n      content:\n        application/json:\n          schema:\n            title: ImageSingleResponse\n            type: object\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n              metadata:\n                $ref: '#/components/schemas/metadata'\n              result:\n                $ref: '#/components/schemas/Image'\n            required:\n            - metadata\n            - result\n      description: OK\n      headers: {}\n",
			"canonicalURL": "/github.com/plantbreeding/BrAPI@a45723dba8753a1c1177ec8f7759d57ebcf5f5b1/-/blob/Specification/BrAPI-Phenotyping/Images/Images_ImageDbId_GET_PUT.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/plantbreeding/BrAPI/blob/a45723dba8753a1c1177ec8f7759d57ebcf5f5b1/Specification/BrAPI-Phenotyping/Images/Images_ImageDbId_GET_PUT.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: at 1:15: responses: \"ImageSingleResponse\": at 1:51: at 1:62: content: application/json: at 1:82: schema: at 1:92: parse schema: property \"@context\": at 1:118: parse schema: resolve \"#/components/schemas/Context\": find schema: resolve: can't find value for \"components/schemas/Context\""
}