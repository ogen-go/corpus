{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/gyselroth/balloon"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "src/app/Balloon.App.Api/openapi.yml",
			"byteSize": 114553,
			"content": "openapi: 3.0.0\ninfo:\n  description: balloon API\n  version: 1.0.0\n  title: balloon API\n  license:\n    name: MIT\n    url: https://opensource.org/licenses/MIT\npaths:\n  /api:\n    get:\n      tags:\n        - core.v2\n      summary: Get server status\n      operationId: getApi\n      security: []\n      responses:\n        \"200\":\n          description: API root\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.ApiRoot\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /api/v2:\n    get:\n      tags:\n        - core.v2\n      summary: Get server status (API v2)\n      operationId: getV2\n      security: []\n      responses:\n        \"200\":\n          description: API root\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.ApiRoot\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /api/v2/tokens:\n    post:\n      tags:\n        - core.v2\n      summary: Get OAUTH2 Bearer token\n      operationId: createToken\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                grant_type:\n                  description: OAUTH2 grant_type\n                  type: string\n                  enum:\n                    - password\n                    - password_mfa\n                    - refresh_token\n                username:\n                  description: Username\n                  type: string\n                password:\n                  description: Password\n                  type: string\n                code:\n                  description: Multi factor value. This is usually some kind of a code.\n                  type: string\n                refresh_token:\n                  description: OAUTH2 refresh_token to retrieve a new access_token.\n                  type: string\n              required:\n                - grant_type\n      security:\n        - BasicAuth: []\n      responses:\n        \"200\":\n          description: Oauth2 token\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.OAuth2Token\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /api/v2/groups:\n    get:\n      tags:\n        - core.v2\n      summary: Get groups\n      description: A group is a colletion of users\n      operationId: getGroups\n      parameters:\n        - in: query\n          name: query\n          description: \"Specify a MongoDB based resource query\n            (https://docs.mongodb.com/manual/tutorial/query-documents) using\n            JSON (For example: {\\\"name\\\": {$regex: 'foo.*'}}).\"\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: attributes\n          description: Filter attributes\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: offset\n          description: Objects offset, per default it starts from 0. You may also request a\n            negative offset which will return results from the end [total -\n            offset].\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: Objects limit, per default 20 objects will get returned\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: sort\n          description: 'Specify a MongoDB sort operation\n            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)\n            using JSON (For example: {\"name\": -1}).'\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: List of groups\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Groups\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n    post:\n      tags:\n        - core.v2\n      summary: Add group\n      operationId: addGroup\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/core.v2.Group\"\n      responses:\n        \"201\":\n          description: If successful the server will respond with 201 Created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Group\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/groups/{group}\":\n    get:\n      tags:\n        - core.v2\n      operationId: getGroup\n      summary: Get group\n      parameters:\n        - name: group\n          in: path\n          required: true\n          description: Resource identifier\n          schema:\n            type: string\n        - in: query\n          name: attributes\n          description: Filter attributes\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: Group\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Group\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n    patch:\n      tags:\n        - core.v2\n      summary: Change group\n      operationId: patchGroup\n      parameters:\n        - name: group\n          in: path\n          required: true\n          description: Resource identifier\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/core.v2.Group\"\n        description: Set attributes for group\n        required: true\n      responses:\n        \"200\":\n          description: Group\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Group\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n    delete:\n      tags:\n        - core.v2\n      summary: Delete group\n      operationId: deleteGroup\n      parameters:\n        - name: group\n          in: path\n          required: true\n          description: Resource identifier\n          schema:\n            type: string\n        - name: force\n          in: query\n          required: false\n          description: Per default the group gets disabled, if force is set the group gets\n            removed completely.\n          schema:\n            type: boolean\n      responses:\n        \"204\":\n          description: If successful the server will respond with 204 No Content\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/groups/{group}/members\":\n    get:\n      tags:\n        - core.v2\n      summary: Get group members\n      operationId: getGroupMembers\n      parameters:\n        - name: group\n          in: path\n          required: true\n          description: Resource identifier\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: List of users\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Users\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/groups/{group}/undelete\":\n    post:\n      tags:\n        - core.v2\n      summary: Restore group\n      operationId: undeleteGroup\n      parameters:\n        - name: group\n          in: path\n          required: true\n          description: Resource identifier\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Group\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Group\"\n        \"403\":\n          description: Access denied\n        \"404\":\n          description: Resource does not exists\n  /api/v2/users:\n    get:\n      tags:\n        - core.v2\n      summary: Get users\n      operationId: getUsers\n      parameters:\n        - in: query\n          name: query\n          description: \"Specify a MongoDB based resource query\n            (https://docs.mongodb.com/manual/tutorial/query-documents) using\n            JSON (For example: {\\\"name\\\": {$regex: 'foo.*'}}).\"\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: attributes\n          description: Filter attributes\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: offset\n          description: Objects offset, per default it starts from 0. You may also request a\n            negative offset which will return results from the end [total -\n            offset].\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: Objects limit, per default 20 objects will get returned\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: sort\n          description: 'Specify a MongoDB sort operation\n            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)\n            using JSON (For example: {\"name\": -1}).'\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: List of users\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Users\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n    post:\n      tags:\n        - core.v2\n      summary: Add user\n      operationId: addUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/core.v2.User\"\n      responses:\n        \"201\":\n          description: If successful the server will respond with 201 Created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.User\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/users/{user}\":\n    get:\n      tags:\n        - core.v2\n      operationId: getUser\n      summary: Get user\n      parameters:\n        - name: user\n          in: path\n          required: true\n          description: Resource identifier\n          schema:\n            type: string\n        - in: query\n          name: attributes\n          description: Filter attributes\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: User\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.User\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n    patch:\n      tags:\n        - core.v2\n      summary: Update user\n      operationId: patchUser\n      parameters:\n        - name: user\n          in: path\n          required: true\n          description: Resource identifier\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/core.v2.User\"\n        description: Set attributes for user\n        required: true\n      responses:\n        \"200\":\n          description: User\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.User\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n    delete:\n      tags:\n        - core.v2\n      summary: Delete user\n      operationId: deleteUser\n      parameters:\n        - name: user\n          in: path\n          required: true\n          description: Resource identifier\n          schema:\n            type: string\n        - name: force\n          in: query\n          required: false\n          description: Per default the user gets disabled, if force is set the user gets\n            removed completely.\n          schema:\n            type: boolean\n      responses:\n        \"204\":\n          description: If successful the server will respond with 204 No Content\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/users/{user}/node-attribute-summary\":\n    get:\n      tags:\n        - core.v2\n      summary: Get user node summary.\n      operationId: getNodeAttributeSummary\n      parameters:\n        - name: user\n          in: path\n          required: true\n          description: Resource identifier\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: User\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.UserNodeAttributeSummary\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/users/{user}/groups\":\n    get:\n      tags:\n        - core.v2\n      summary: Get all groups of a user\n      operationId: getUserGroups\n      parameters:\n        - name: user\n          in: path\n          required: true\n          description: Resource identifier\n          schema:\n            type: string\n        - in: query\n          name: query\n          description: \"Specify a MongoDB based resource query\n            (https://docs.mongodb.com/manual/tutorial/query-documents) using\n            JSON (For example: {\\\"name\\\": {$regex: 'foo.*'}}).\"\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: attributes\n          description: Filter attributes\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: offset\n          description: Objects offset, per default it starts from 0. You may also request a\n            negative offset which will return results from the end [total -\n            offset].\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: Objects limit, per default 20 objects will get returned\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: sort\n          description: 'Specify a MongoDB sort operation\n            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)\n            using JSON (For example: {\"name\": -1}).'\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: List of groups\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Groups\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/users/{user}/undelete\":\n    post:\n      tags:\n        - core.v2\n      summary: Restore user\n      operationId: undeleteUser\n      parameters:\n        - name: user\n          in: path\n          required: true\n          description: Resource identifier\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: User\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.User\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /api/v2/users/whoami:\n    get:\n      tags:\n        - core.v2\n      summary: Get current user\n      operationId: getCurrentUser\n      parameters:\n        - in: query\n          name: attributes\n          description: Filter attributes\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: User\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.User\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/users/{user}/avatar\":\n    get:\n      tags:\n        - core.v2\n      summary: Get user avatar\n      operationId: getUserAvatar\n      parameters:\n        - name: user\n          in: path\n          required: true\n          description: Resource identifier\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Binaray user avatar\n          content:\n            octet/stream:\n              schema:\n                $ref: \"#/components/schemas/core.v2.User\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /api/v2/nodes/trash:\n    get:\n      tags:\n        - core.v2\n      summary: Get deleted nodes\n      description: Return deleted nodes (Excluding sub nodes of deleted collections)\n      operationId: getDeletedNodes\n      parameters:\n        - in: query\n          name: query\n          description: \"Specify a MongoDB based resource query\n            (https://docs.mongodb.com/manual/tutorial/query-documents) using\n            JSON (For example: {\\\"name\\\": {$regex: 'foo.*'}}).\"\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: attributes\n          description: Filter attributes\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: offset\n          description: Objects offset, per default it starts from 0. You may also request a\n            negative offset which will return results from the end [total -\n            offset].\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: Objects limit, per default 20 objects will get returned\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: sort\n          description: 'Specify a MongoDB sort operation\n            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)\n            using JSON (For example: {\"name\": -1}).'\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Nodes\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Nodes\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /api/v2/nodes/search:\n    get:\n      tags:\n        - elasticsearch.v2\n      summary: Extended search query using elasticsearch\n      operationId: queryElasticsearch\n      parameters:\n        - name: query\n          in: query\n          required: true\n          description: Elasticsearch query as JSON\n          schema:\n            type: string\n        - name: deleted\n          in: query\n          required: false\n          description: \"Wherever include deleted nodes or not, possible values:  0 Exclude\n            deleted 1 Only deleted 2 Include deleted.\"\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Nodes\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Nodes\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /api/v2/notifications:\n    get:\n      tags:\n        - notification.v2\n      summary: Get nofitifications\n      operationId: getNotifications\n      parameters:\n        - in: query\n          name: query\n          description: \"Specify a MongoDB based resource query\n            (https://docs.mongodb.com/manual/tutorial/query-documents) using\n            JSON (For example: {\\\"name\\\": {$regex: 'foo.*'}}).\"\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: attributes\n          description: Filter attributes\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: offset\n          description: Objects offset, per default it starts from 0. You may also request a\n            negative offset which will return results from the end [total -\n            offset].\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: Objects limit, per default 20 objects will get returned\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: sort\n          description: 'Specify a MongoDB sort operation\n            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)\n            using JSON (For example: {\"name\": -1}).'\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: List of notifications\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/notification.v2.Notifications\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n    post:\n      tags:\n        - notification.v2\n      summary: Send notification\n      operationId: postNotification\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/notification.v2.Notification\"\n      responses:\n        \"202\":\n          description: Notification\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/notification.v2.Notification\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/notifications/{notification}\":\n    get:\n      tags:\n        - notification.v2\n      summary: Get notification\n      operationId: getNotification\n      parameters:\n        - name: notification\n          in: path\n          required: true\n          description: Resource identifier\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Notification\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/notification.v2.Notification\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n    delete:\n      tags:\n        - notification.v2\n      summary: Delete notification\n      operationId: deleteNotification\n      parameters:\n        - name: notification\n          in: path\n          required: true\n          description: Resource identifier\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: If successful the server will respond with 204 No Content\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /api/v2/notifications/broadcast:\n    post:\n      tags:\n        - notification.v2\n      summary: Send broadcast\n      operationId: sendBroadcast\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/notification.v2.Notification\"\n        description: Notification\n      responses:\n        \"202\":\n          description: Notification\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/notification.v2.Notification\"\n        \"403\":\n          description: Access denied\n  /api/v2/notifications/mail:\n    post:\n      tags:\n        - notification.v2\n      summary: Send mail\n      operationId: sendMail\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/notification.v2.Mail\"\n        description: Mail\n      responses:\n        \"202\":\n          description: Mail\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/nodes/{node}/subscription\":\n    post:\n      tags:\n        - notification.v2\n      summary: Subscribe node updates\n      operationId: subscribeNode\n      parameters:\n        - name: node\n          in: path\n          required: true\n          description: Node identifier\n          schema:\n            type: string\n        - name: subscribe\n          in: query\n          required: false\n          description: If true the subscription is active\n          schema:\n            type: boolean\n        - name: exclude_me\n          in: query\n          required: false\n          description: Exclude subscription owner (me) from change notifications\n          schema:\n            type: boolean\n        - name: recursive\n          in: query\n          required: false\n          description: Apply subscription to children (inclusive newly added children)\n          schema:\n            type: boolean\n        - name: throttle\n          in: query\n          required: false\n          description: Set a custom notification throttle interval in seconds\n          schema:\n            type: integer\n      responses:\n        \"202\":\n          description: Node\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Node\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/files/{file}/convert/slaves\":\n    get:\n      tags:\n        - convert.v2\n      summary: Get convert slaves\n      operationId: getSlaves\n      parameters:\n        - name: file\n          in: path\n          required: true\n          description: File identifier\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Slaves\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/convert.v2.Slaves\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n    post:\n      tags:\n        - convert.v2\n      summary: Add convert slave\n      operationId: addSlave\n      parameters:\n        - name: file\n          in: path\n          required: true\n          description: File identifier\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/convert.v2.Slave\"\n        description: \"Add new conversion slave \"\n        required: true\n      responses:\n        \"202\":\n          description: Slave\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/convert.v2.Slave\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/files/{file}/convert/slaves/{slave}\":\n    get:\n      tags:\n        - convert.v2\n      summary: Get convert slave\n      operationId: getSlave\n      parameters:\n        - name: file\n          in: path\n          required: true\n          description: File identifier\n          schema:\n            type: string\n        - name: slave\n          in: path\n          required: true\n          description: Slave identifier\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Slave\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/convert.v2.Slave\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n    delete:\n      tags:\n        - convert.v2\n      summary: Delete convert slave\n      operationId: deleteSlave\n      parameters:\n        - name: file\n          in: path\n          required: true\n          description: File identifier\n          schema:\n            type: string\n        - name: slave\n          in: path\n          required: true\n          description: Slave identifier\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: If successful the server will respond with 204 No Content\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/files/{file}/convert/supported-formats\":\n    get:\n      tags:\n        - convert.v2\n      summary: Get supported convert file formats\n      description: Get supported file formats to convert to (formats do vary between files)\n      operationId: getSupportedFormats\n      parameters:\n        - name: file\n          in: path\n          required: true\n          description: File identifier\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Formats\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/desktop-clients/{format}/content\":\n    get:\n      tags:\n        - desktopclient.v2\n      summary: Download balloon desktop client\n      operationId: getDesktopClient\n      parameters:\n        - name: format\n          in: path\n          required: true\n          description: Request client foramt (deb, rpm, exe, pkg, zip or a custom format)\n          schema:\n            type: string\n            enum:\n              - deb\n              - rpm\n              - exe\n              - pkg\n              - zip\n      responses:\n        \"200\":\n          description: Desktop client (binary)\n          content:\n            octet/stream:\n              schema:\n                type: string\n                format: binary\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/office/wopi/document/{document}\":\n    get:\n      tags:\n        - wopi.v2\n      summary: Get wopi document\n      description: Get document session information including document owner, session user\n        and document size\n      operationId: getWopiDocument\n      parameters:\n        - name: document\n          in: path\n          required: true\n          description: The document id\n          schema:\n            type: string\n        - name: access_token\n          in: query\n          required: true\n          description: An access token to access the document\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: WOPI document information\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/office.v2.WopiDocument\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/office/wopi/document/{document}/contents\":\n    get:\n      tags:\n        - wopi.v2\n      summary: Get wopi document contents\n      operationId: getWopiDocumentContent\n      parameters:\n        - name: document\n          in: path\n          required: true\n          description: \"The document id \"\n          schema:\n            type: string\n        - name: access_token\n          in: query\n          required: true\n          description: An access token to access the document\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Contents\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n    post:\n      tags:\n        - wopi.v2\n      summary: Save wopi document contents\n      operationId: updateWopiDocuemntContent\n      parameters:\n        - name: document\n          in: path\n          required: true\n          description: \"The document id \"\n          schema:\n            type: string\n        - name: access_token\n          in: query\n          required: true\n          description: An access token to access the document\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n        description: Document content\n      responses:\n        \"200\":\n          description: Operation was successful\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /api/v2/office/documents:\n    post:\n      tags:\n        - wopi.v2\n      summary: Create new document\n      description: Create new document from an existing office document template\n      operationId: createDocument\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/core.v2.File\"\n        required: true\n      responses:\n        \"201\":\n          description: File\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.File\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/nodes/{node}/clone\":\n    post:\n      tags:\n        - core.v2\n      summary: Clone node\n      operationId: cloneNode\n      parameters:\n        - name: node\n          in: path\n          required: true\n          description: Node identifier\n          schema:\n            type: string\n        - name: destid\n          in: query\n          required: false\n          description: Destination collection, if this is null root is taken\n          schema:\n            type: string\n        - name: conflict\n          in: query\n          required: false\n          description: Conflict resolution\n          schema:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n            default: 0\n      responses:\n        \"201\":\n          description: Node\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Node\"\n        \"207\":\n          description: Multi status if batch request\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/nodes/{node}/move\":\n    post:\n      tags:\n        - core.v2\n      summary: Move node\n      description: Move node (Change parent collection), single or multiple ones\n      operationId: moveNode\n      parameters:\n        - name: node\n          in: path\n          required: true\n          description: Node identifier\n          schema:\n            type: string\n        - name: destid\n          in: query\n          required: false\n          description: Destination collection, if this is null root is taken\n          schema:\n            type: string\n        - name: conflict\n          in: query\n          required: false\n          description: Conflict resolution\n          schema:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n            default: 0\n      responses:\n        \"200\":\n          description: Node\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Node\"\n        \"207\":\n          description: Multi status if batch request\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/nodes/{node}/undelete\":\n    post:\n      tags:\n        - core.v2\n      summary: Restore node\n      description: Undelete (Restore from trash) a single node or multiple ones.\n      operationId: undeleteNode\n      parameters:\n        - name: node\n          in: path\n          required: true\n          description: Node identifier\n          schema:\n            type: string\n        - name: move\n          in: query\n          required: false\n          description: If node should also be moved during undelete\n          schema:\n            type: boolean\n            default: false\n        - name: destid\n          in: query\n          required: false\n          description: If node should also be moved during undelete\n          schema:\n            type: string\n        - name: conflict\n          in: query\n          required: false\n          description: Conflict resolution\n          schema:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n            default: 0\n      responses:\n        \"200\":\n          description: Node\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Node\"\n        \"207\":\n          description: Multi status if batch request\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/collections/{collection}/share\":\n    get:\n      tags:\n        - core.v2\n      summary: Get share acl and share name\n      operationId: getShare\n      parameters:\n        - name: collection\n          in: path\n          required: true\n          description: Collection identifier\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Share\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Share\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n    post:\n      tags:\n        - core.v2\n      summary: Create share\n      description: Create a new share from an existing collection\n      operationId: shareCollection\n      parameters:\n        - name: collection\n          in: path\n          required: true\n          description: Collection identifier\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/core.v2.Share\"\n        description: \"Create a new share from an existing collection \"\n        required: true\n      responses:\n        \"200\":\n          description: Collection\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Collection\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n    delete:\n      tags:\n        - core.v2\n      summary: Delete share\n      description: Does only remove sharing options and transform a share back into a\n        normal collection. There will not be any data loss after this action.\n        All existing references would be removed automatically.\n      operationId: deleteShare\n      parameters:\n        - name: collection\n          in: path\n          required: true\n          description: Collection identifier\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: The server responds with 204 if successful.\n        \"403\":\n          description: Access denied\n        \"404\":\n          description: Resource does not exists\n  \"/api/v2/collections/{collection}/children\":\n    get:\n      tags:\n        - core.v2\n      summary: Get collection children\n      operationId: getChildren\n      parameters:\n        - name: collection\n          in: path\n          required: true\n          description: Parent collection\n          schema:\n            type: string\n        - in: query\n          name: query\n          description: \"Specify a MongoDB based resource query\n            (https://docs.mongodb.com/manual/tutorial/query-documents) using\n            JSON (For example: {\\\"name\\\": {$regex: 'foo.*'}}).\"\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: deleted\n          description: Wheter to include deleted or not\n          required: false\n          schema:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n        - in: query\n          name: attributes\n          description: Filter attributes\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: offset\n          description: Objects offset, per default it starts from 0. You may also request a\n            negative offset which will return results from the end [total -\n            offset].\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: Objects limit, per default 20 objects will get returned\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: sort\n          description: 'Specify a MongoDB sort operation\n            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)\n            using JSON (For example: {\"name\": -1}).'\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: recursive\n          description: Include children recursively.\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: List of children\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Nodes\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /api/v2/collections/children:\n    get:\n      tags:\n        - core.v2\n      summary: Get root children\n      operationId: getRootChildren\n      parameters:\n        - in: query\n          name: query\n          description: \"Specify a MongoDB based resource query\n            (https://docs.mongodb.com/manual/tutorial/query-documents) using\n            JSON (For example: {\\\"name\\\": {$regex: 'foo.*'}}).\"\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: deleted\n          description: Wheter to include deleted or not\n          required: false\n          schema:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n        - in: query\n          name: attributes\n          description: Filter attributes\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: offset\n          description: Objects offset, per default it starts from 0. You may also request a\n            negative offset which will return results from the end [total -\n            offset].\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: Objects limit, per default 20 objects will get returned\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: sort\n          description: 'Specify a MongoDB sort operation\n            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)\n            using JSON (For example: {\"name\": -1}).'\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: recursive\n          description: Include children recursively.\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: List of children\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Nodes\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /api/v2/collections:\n    get:\n      tags:\n        - core.v2\n      summary: Get collections\n      operationId: getCollections\n      parameters:\n        - in: query\n          name: query\n          description: \"Specify a MongoDB based resource query\n            (https://docs.mongodb.com/manual/tutorial/query-documents) using\n            JSON (For example: {\\\"name\\\": {$regex: 'foo.*'}}).\"\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: deleted\n          description: Wheter to include deleted or not\n          required: false\n          schema:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n        - in: query\n          name: attributes\n          description: Filter attributes\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: offset\n          description: Objects offset, per default it starts from 0. You may also request a\n            negative offset which will return results from the end [total -\n            offset].\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: Objects limit, per default 20 objects will get returned\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: sort\n          description: 'Specify a MongoDB sort operation\n            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)\n            using JSON (For example: {\"name\": -1}).'\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: List of collections\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Collections\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n    post:\n      tags:\n        - core.v2\n      summary: Create a new collection in root\n      operationId: createRootCollection\n      requestBody:\n        $ref: \"#/components/requestBodies/core.v2.Collection\"\n      responses:\n        \"201\":\n          description: Collection\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Collection\"\n        \"403\":\n          description: Access denied\n        \"404\":\n          description: Resource does not exists\n  \"/api/v2/collections/{collection}\":\n    post:\n      tags:\n        - core.v2\n      summary: Create collection\n      operationId: createCollection\n      parameters:\n        - name: collection\n          in: path\n          required: true\n          description: Parent collection\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/core.v2.Collection\"\n      responses:\n        \"201\":\n          description: Collection\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Collection\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /api/v2/files:\n    get:\n      tags:\n        - core.v2\n      summary: Get files\n      operationId: getFiles\n      parameters:\n        - in: query\n          name: query\n          description: \"Specify a MongoDB based resource query\n            (https://docs.mongodb.com/manual/tutorial/query-documents) using\n            JSON (For example: {\\\"name\\\": {$regex: 'foo.*'}}).\"\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: deleted\n          description: Wheter to include deleted or not\n          required: false\n          schema:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n        - in: query\n          name: attributes\n          description: Filter attributes\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: offset\n          description: Objects offset, per default it starts from 0. You may also request a\n            negative offset which will return results from the end [total -\n            offset].\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: Objects limit, per default 20 objects will get returned\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: sort\n          description: 'Specify a MongoDB sort operation\n            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)\n            using JSON (For example: {\"name\": -1}).'\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: List of files\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Files\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n    put:\n      tags:\n        - core.v2\n      summary: Upload file\n      description: Upload an entire file in one-shot. Use this endpoint only for small\n        files, for bigger files use the chunking endpoint.\n      operationId: uploadFile\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n        description: File content\n      responses:\n        \"201\":\n          description: File created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.File\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/files/{file}/history\":\n    get:\n      tags:\n        - core.v2\n      summary: Get file history\n      operationId: getFileHistory\n      parameters:\n        - name: file\n          in: path\n          required: true\n          description: File identifier\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: File history\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.FileHistory\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/files/{file}/restore\":\n    post:\n      tags:\n        - core.v2\n      summary: Rollback file\n      description: Rollback to a recent version from history. Use the version number from\n        history.\n      operationId: rollbackFile\n      parameters:\n        - name: file\n          in: path\n          required: true\n          description: File identifier\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: File\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.File\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /api/v2/files/chunk:\n    put:\n      tags:\n        - core.v2\n      summary: Resumeable upload file (chunked)\n      description: Upload a file chunk. You have to manually splitt the binary data into\n        multiple chunks and upload them successively using this method. Once\n        uploading the last chunk, the server will automatically create or update\n        the file node. You may set the parent collection, name and or custom\n        attributes only with the last request to save traffic.\n      operationId: uploadChunk\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n        description: File content\n        required: true\n      responses:\n        \"200\":\n          description: File updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.File\"\n        \"201\":\n          description: File newly created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.File\"\n        \"206\":\n          description: Chunk uploaded\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.ChunkSession\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /api/v2/nodes:\n    get:\n      tags:\n        - core.v2\n      summary: Get all nodes\n      operationId: getNodes\n      parameters:\n        - in: query\n          name: query\n          description: \"Specify a MongoDB based resource query\n            (https://docs.mongodb.com/manual/tutorial/query-documents) using\n            JSON (For example: {\\\"name\\\": {$regex: 'foo.*'}}).\"\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: deleted\n          description: Wheter to include deleted or not\n          required: false\n          schema:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n        - in: query\n          name: attributes\n          description: Filter attributes\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: offset\n          description: Objects offset, per default it starts from 0. You may also request a\n            negative offset which will return results from the end [total -\n            offset].\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: Objects limit, per default 20 objects will get returned\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: sort\n          description: 'Specify a MongoDB sort operation\n            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)\n            using JSON (For example: {\"name\": -1}).'\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: List of nodes\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Nodes\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/nodes/{node}\":\n    delete:\n      tags:\n        - core.v2\n      summary: Delete node\n      operationId: deleteNode\n      parameters:\n        - name: node\n          in: path\n          required: true\n          description: Node identifier\n          schema:\n            type: string\n        - name: force\n          in: query\n          required: false\n          description: \"Force flag need to be set to delete a node from trash (node must\n            have the deleted flag) \"\n          schema:\n            type: boolean\n        - name: ignore_flag\n          in: query\n          required: false\n          description: \"If both ignore_flag and force_flag were set, the node will be\n            deleted completely \"\n          schema:\n            type: boolean\n        - name: at\n          in: query\n          required: false\n          description: Has to be a valid unix timestamp if so the node will destroy itself\n            at this specified time instead immediatly\n          schema:\n            type: integer\n      responses:\n        \"204\":\n          description: If successful the server will respond with 204 No Content\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n    get:\n      tags:\n        - core.v2\n      summary: Get node\n      operationId: getNode\n      parameters:\n        - name: node\n          in: path\n          required: true\n          description: Node identifier\n          schema:\n            type: string\n        - name: attributes\n          in: query\n          required: false\n          description: Filter attributes\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: Node\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Node\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n    patch:\n      tags:\n        - core.v2\n      summary: Change node\n      operationId: updateNode\n      parameters:\n        - name: node\n          in: path\n          required: true\n          description: Node identifier\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/core.v2.Node\"\n        description: \"Change attributes \"\n        required: true\n      responses:\n        \"200\":\n          description: Node\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Node\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/nodes/{node}/share-link\":\n    delete:\n      tags:\n        - sharelink.v2\n      summary: Delete share link\n      operationId: deleteLink\n      parameters:\n        - name: node\n          in: path\n          required: true\n          description: Node identifier\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: The server responds with 204 if operation was successful\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n    post:\n      tags:\n        - sharelink.v2\n      summary: Create share link\n      description: Create a unique share link of a node (global accessible). A possible\n        existing link will get deleted if this endpoint gets called.\n      operationId: createLink\n      parameters:\n        - name: node\n          in: path\n          required: true\n          description: Node identifier\n          schema:\n            type: string\n        - name: expiration\n          in: query\n          required: false\n          description: Expire timestamp as unix timestap. Tells the server when the public\n            link should expire automatically. The default is to never expire.\n          schema:\n            type: integer\n            default: 0\n        - name: password\n          in: query\n          required: false\n          description: Optionally set a password to protect the public link.\n          schema:\n            type: string\n      responses:\n        \"201\":\n          description: Node\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Node\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /api/v2/nodes/last-cursor:\n    get:\n      tags:\n        - core.v2\n      summary: Get last cursor\n      description: Use this method to request the latest cursor if you only need to now if\n        there are changes on the server. This method will not return any other\n        data than the newest cursor. To request a feed with all deltas request\n        /delta.\n      operationId: getLastCursor\n      responses:\n        \"200\":\n          description: Cursor\n          content:\n            application/json:\n              schema:\n                type: string\n  \"/api/v2/nodes/{node}/content\":\n    get:\n      tags:\n        - core.v2\n      summary: Download node content.\n      description: Stream node contents. Note that collections are zipped on-the-fly.\n      operationId: getContent\n      parameters:\n        - name: node\n          in: path\n          required: true\n          description: Node identifier\n          schema:\n            type: string\n        - name: Range\n          in: header\n          required: false\n          description: Read stream from a specific offset/limit in bytes.\n          schema:\n            type: string\n        - name: encode\n          in: query\n          required: false\n          description: Can be set to base64 to encode content as base64.\n          schema:\n            type: string\n            enum:\n              - base64\n        - name: download\n          in: query\n          required: false\n          description: \"Force download file (Content-Disposition: attachment HTTP header)\"\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: Content\n          content:\n            octet/stream:\n              schema:\n                type: string\n                format: binary\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /api/v2/nodes/delta:\n    get:\n      tags:\n        - core.v2\n      summary: Delta stream with cursor support.\n      operationId: getDelta\n      parameters:\n        - name: limit\n          in: query\n          required: false\n          description: \"Limit the number of delta entries, if too low you have to call this\n            endpoint more often since has_more would be true more often \"\n          schema:\n            type: integer\n        - name: attributes\n          in: query\n          required: false\n          description: Filter attributes, per default not all attributes would be returned\n          schema:\n            type: array\n            items:\n              type: string\n        - name: cursor\n          in: query\n          required: false\n          description: \"Set a cursor to rquest next nodes within delta processing \"\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Delta\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Delta\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /api/v2/nodes/event-log:\n    get:\n      tags:\n        - core.v2\n      summary: Get events\n      description: Get event log containing all operations which are made by the user\n        himself or share members\n      operationId: getEventLog\n      parameters:\n        - in: query\n          name: query\n          description: \"Specify a MongoDB based resource query\n            (https://docs.mongodb.com/manual/tutorial/query-documents) using\n            JSON (For example: {\\\"name\\\": {$regex: 'foo.*'}}).\"\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: attributes\n          description: Filter attributes\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: offset\n          description: Objects offset, per default it starts from 0. You may also request a\n            negative offset which will return results from the end [total -\n            offset].\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: Objects limit, per default 20 objects will get returned\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: sort\n          description: 'Specify a MongoDB sort operation\n            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)\n            using JSON (For example: {\"name\": -1}).'\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Event log\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.EventLogs\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/nodes/{node}/event-log\":\n    get:\n      tags:\n        - core.v2\n      summary: Get event\n      description: Get event log containing all operations which are made by the user\n        himself or share members on a given node\n      operationId: getNodeEventLog\n      parameters:\n        - name: node\n          in: path\n          required: true\n          description: Node identifier\n          schema:\n            type: string\n        - in: query\n          name: query\n          description: \"Specify a MongoDB based resource query\n            (https://docs.mongodb.com/manual/tutorial/query-documents) using\n            JSON (For example: {\\\"name\\\": {$regex: 'foo.*'}}).\"\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: attributes\n          description: Filter attributes\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: offset\n          description: Objects offset, per default it starts from 0. You may also request a\n            negative offset which will return results from the end [total -\n            offset].\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: Objects limit, per default 20 objects will get returned\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: sort\n          description: 'Specify a MongoDB sort operation\n            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)\n            using JSON (For example: {\"name\": -1}).'\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Event log\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.EventLogs\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/nodes/{node}/parents\":\n    get:\n      tags:\n        - core.v2\n      summary: Get parent collections\n      description: The hirarchy of all parent nodes is ordered in a single level array\n        beginning with the collection on the highest level.\n      operationId: getParentNodes\n      parameters:\n        - name: node\n          in: path\n          required: true\n          description: Node identifier\n          schema:\n            type: string\n        - in: query\n          name: attributes\n          description: Filter attributes\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: self\n          in: query\n          required: false\n          description: Include requested collection itself at the end of the list (Will be\n            ignored if the requested node is a file)\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: Parent nodes\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.Nodes\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /api/v2/feedbacks:\n    post:\n      tags:\n        - feedback.v2\n      description: Submit feedback\n      summary: Submit a feedback to the developers of balloon (or another destination).\n        You may submit some metadata and a zipped collection of debug\n        information.\n      operationId: submitFeedback\n      responses:\n        \"201\":\n          description: Feedback submited\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  \"/api/v2/files/{file}/preview\":\n    get:\n      tags:\n        - preview.v2\n      description: Get preview\n      summary: Get a preview of the files content. The body either contains an encoded\n        string or a jpeg binary.\n      operationId: getPreview\n      parameters:\n        - name: file\n          in: path\n          required: true\n          description: File identifier\n          schema:\n            type: string\n        - name: encode\n          in: query\n          required: false\n          description: Set to base64 to return a jpeg encoded preview as base64, else\n            return it as jpeg binary\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Binary data\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n    patch:\n      tags:\n        - preview.v2\n      description: Create preview\n      summary: Create or replace preview of a file. A preview may be a maximum of 2MB\n      operationId: setPreview\n      parameters:\n        - name: file\n          in: path\n          required: true\n          description: File identifier\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: File\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/core.v2.File\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n    delete:\n      tags:\n        - preview.v2\n      description: Delete preview\n      summary: Delete an existing preview\n      operationId: deletePreview\n      parameters:\n        - name: file\n          in: path\n          required: true\n          description: File identifier\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: Preview deleted\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/Forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableEntity\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\nsecurity:\n  - BasicAuth: []\n  - BearerAuth: []\nservers:\n  - url: /\ncomponents:\n  responses:\n    NotFound:\n      description: The specified resource was not found\n      content:\n        \"*/*\":\n          schema:\n            $ref: \"#/components/schemas/core.v2.Error\"\n    Unauthorized:\n      description: Unauthorized\n      content:\n        \"*/*\":\n          schema:\n            $ref: \"#/components/schemas/core.v2.Error\"\n    UnprocessableEntity:\n      description: Unauthorized\n      content:\n        \"*/*\":\n          schema:\n            $ref: \"#/components/schemas/core.v2.Error\"\n    Conflict:\n      description: Conflict\n      content:\n        \"*/*\":\n          schema:\n            $ref: \"#/components/schemas/core.v2.Error\"\n    Forbidden:\n      description: Forbidden\n      content:\n        \"*/*\":\n          schema:\n            $ref: \"#/components/schemas/core.v2.Error\"\n    BadRequest:\n      description: Bad Reqeust\n      content:\n        \"*/*\":\n          schema:\n            $ref: \"#/components/schemas/core.v2.Error\"\n    InternalServerError:\n      description: Internal Server Error\n      content:\n        \"*/*\":\n          schema:\n            $ref: \"#/components/schemas/core.v2.Error\"\n  requestBodies:\n    core.v2.Collection:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/core.v2.Collection\"\n      required: true\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n    BearerAuth:\n      type: apiKey\n      name: Authorization\n      in: header\n  schemas:\n    core.v2.Error:\n      type: object\n      properties:\n        code:\n          type: integer\n        message:\n          type: string\n        error:\n          type: string\n    core.v2.JsonPatch:\n      description: A JSON Patch according rfc6902.\n      type: object\n      properties:\n        op:\n          type: string\n        path:\n          type: string\n        value:\n          type: string\n    core.v2.ApiRoot:\n      description: Describes the api root.\n      type: object\n      properties:\n        name:\n          type: string\n        api:\n          type: integer\n    core.v2.Links:\n      description: Contains resource links (URL) to other resources.\n      type: object\n      properties:\n        self:\n          $ref: \"#/components/schemas/core.v2.Link\"\n    core.v2.ListLinks:\n      type: object\n      properties:\n        self:\n          $ref: \"#/components/schemas/core.v2.Link\"\n        prev:\n          $ref: \"#/components/schemas/core.v2.Link\"\n        next:\n          $ref: \"#/components/schemas/core.v2.Link\"\n    core.v2.Link:\n      type: object\n      properties:\n        href:\n          type: string\n    core.v2.ResourceList:\n      type: object\n      properties:\n        _links:\n          $ref: \"#/components/schemas/core.v2.ListLinks\"\n        kind:\n          description: The resource type, always List.\n          type: string\n          default: List\n        count:\n          description: Holds the number of items in the current list response.\n          type: integer\n        total:\n          description: Holds the number of total available items on the server. Note that a\n            List resource is always paged. You need to traverse with offset and\n            limit to request further resources in the list.\n          type: integer\n    core.v2.Resource:\n      type: object\n      properties:\n        _links:\n          $ref: \"#/components/schemas/core.v2.Links\"\n        kind:\n          description: Resource type\n          type: string\n        id:\n          description: Unique 12-byte resource identifier. Note this is a MongoDB ObjectId.\n            The name is the standard resource identifier, the id only useful to\n            verify that a given resource was completely recreated. An ID is\n            immutable and will be created on the server.\n          type: string\n        created:\n          description: ISO 8601 timestamp when the resource was created.\n          type: string\n          format: date-time\n    core.v2.OAuth2Token:\n      description: OAUTH2 access token response according RFC6749\n        https://tools.ietf.org/html/rfc6749#section-4.3.3\n      type: object\n      properties:\n        access_token:\n          description: Resource access_token.\n          type: string\n        expires_in:\n          description: The number of seconds the issues acceess_token is valid for. This is\n            usually 1hour.\n          type: integer\n          default: 3600\n        token_type:\n          description: The type of token. This is usually a Bearer token.\n          type: string\n          default: Bearer\n        scope:\n          description: The scopes.\n          type: string\n        refresh_token:\n          description: An optional refresh token to get new access_tokens via the\n            refresh_token grant type.\n          type: string\n    core.v2.Users:\n      description: A list of users.\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/core.v2.ResourceList\"\n        - type: object\n          properties:\n            data:\n              type: array\n              items:\n                $ref: \"#/components/schemas/core.v2.User\"\n    core.v2.User:\n      description: A user is used to access the server.\n      allOf:\n        - $ref: \"#/components/schemas/core.v2.Resource\"\n        - type: object\n          properties:\n            changed:\n              description: ISO 8601 timestamp when the resource was changed.\n              type: string\n              format: date-time\n            username:\n              description: Unique username.\n              type: string\n            name:\n              description: Display name (Usuallly same as username).\n              type: string\n            admin:\n              description: Admin user flag.\n              type: boolean\n              default: false\n            namespace:\n              description: User namespace.\n              type: string\n            locale:\n              description: User locale.\n              type: string\n              default: en_US\n            auth:\n              description: Authentication source.\n              type: string\n              default: internal\n              enum:\n                - internal\n                - external\n            has_password:\n              description: Is true if the user has a local password set.\n              type: boolean\n              default: false\n            hard_quota:\n              description: Hard quota in bytes (Max. limit of storage usage). Note that\n                external storage is not part of the quota. The default is no\n                limit.\n              type: integer\n              default: -1\n            soft_quota:\n              description: Soft quota in bytes (Warning of high quota usage). The default\n                is no limit.\n              type: integer\n              default: -1\n            available:\n              description: Available storage in bytes. Is -1 if there is no hard_quota.\n              type: integer\n              default: -1\n            used:\n              description: Used storage in bytes.\n              type: integer\n              default: 0\n    core.v2.Groups:\n      description: A list of groups.\n      allOf:\n        - $ref: \"#/components/schemas/core.v2.ResourceList\"\n        - type: object\n          properties:\n            data:\n              type: array\n              items:\n                $ref: \"#/components/schemas/core.v2.Group\"\n    core.v2.Group:\n      description: A group contains user resources.\n      allOf:\n        - $ref: \"#/components/schemas/core.v2.Resource\"\n        - type: object\n          properties:\n            changed:\n              description: ISO 8601 timestamp when the resource was changed.\n              type: string\n              format: date-time\n            name:\n              description: Group name.\n              type: string\n            namespace:\n              description: User namespace.\n              type: string\n            member:\n              description: Array of user id's.\n              type: array\n              items:\n                type: string\n    core.v2.Nodes:\n      description: A list of nodes.\n      allOf:\n        - $ref: \"#/components/schemas/core.v2.ResourceList\"\n        - type: object\n          properties:\n            data:\n              type: array\n              items:\n                $ref: \"#/components/schemas/core.v2.Node\"\n    core.v2.NodeMeta:\n      description: Node meta data.\n      type: object\n      properties:\n        tags:\n          description: Node tags. Tags can be freely choosen.\n          type: array\n          items:\n            type: string\n        author:\n          description: Author.\n          type: string\n        license:\n          description: Content license.\n          type: string\n        color:\n          description: A color tag.\n          type: string\n    core.v2.Node:\n      description: A Node.\n      allOf:\n        - $ref: \"#/components/schemas/core.v2.Resource\"\n        - type: object\n          properties:\n            changed:\n              description: ISO 8601 timestamp when the resource was changed.\n              type: string\n              format: date-time\n            deleted:\n              description: ISO 8601 timestamp when the resource was deleted.\n              type: string\n              format: date-time\n            name:\n              description: Node name.\n              type: string\n            mime:\n              description: Mimetype.\n              type: string\n            readonly:\n              description: Readonly only affects the content of the node but not metadata.\n              type: boolean\n              default: false\n            directory:\n              description: If node is of type Collection this flag is true.\n              type: boolean\n              default: false\n            meta:\n              $ref: \"#/components/schemas/core.v2.NodeMeta\"\n            size:\n              description: The size in bytes. If the node is of type collection the size is\n                the number of child nodes.\n              type: integer\n              default: 0\n            path:\n              description: The path abstraction of the node.\n              type: string\n            access:\n              description: Access level.\n              type: string\n              default: rw\n              enum:\n                - rw\n                - w\n                - m\n                - rp\n            parent:\n              description: Points to the parent collection. If the nodes is in the root\n                this is null.\n              type: object\n              properties:\n                id:\n                  description: The id of the parent collection\n                  type: string\n                name:\n                  description: The name of the parent collection\n                  type: string\n            share:\n              description: Points to the shared node (or share reference). If the node is\n                not part of any share this is null.\n              type: object\n              properties:\n                id:\n                  description: The id of the share collection. If the share is a reference\n                    (incoming share) it will point to the share reference and\n                    not the id of the shared collection itself.\n                  type: string\n                name:\n                  description: The name of the share (or share reference).\n                  type: string\n            shareowner:\n              description: Points to the share owner. If the node is not part of any share\n                this is null.\n              type: object\n              properties:\n                id:\n                  description: The id of the share owner.\n                  type: string\n                name:\n                  description: The username of the share owner.\n                  type: string\n            subscription:\n              description: Is true if the user has an active subscription on this node.\n              type: boolean\n              default: false\n            subscription_exclude_me:\n              description: Subscription excludes actions from the subscribed user itself.\n              type: boolean\n              default: false\n            subscription_throttle:\n              description: Subscription throttle interval in seconds\n              type: integer\n              default: false\n            sharelink_has_password:\n              description: Is true if the node has a protected public sharelink.\n              type: boolean\n              default: false\n            sharelink_token:\n              description: \"Contains the shared link token if set\"\n              type: \"string\"\n              default: null\n            sharelink_expire:\n              description: \"Contains the datetime of a shared link if set\"\n              type: \"string\"\n              default: null\n              format: date-time\n    core.v2.Collections:\n      description: A list of collections.\n      allOf:\n        - $ref: \"#/components/schemas/core.v2.ResourceList\"\n        - type: object\n          properties:\n            data:\n              type: array\n              items:\n                $ref: \"#/components/schemas/core.v2.Collection\"\n    core.v2.Collection:\n      description: A collection can hold an unlimited number of child nodes.\n      allOf:\n        - $ref: \"#/components/schemas/core.v2.Node\"\n    core.v2.Files:\n      description: A list of files.\n      allOf:\n        - $ref: \"#/components/schemas/core.v2.ResourceList\"\n        - type: object\n          properties:\n            data:\n              type: array\n              items:\n                $ref: \"#/components/schemas/core.v2.File\"\n    core.v2.File:\n      description: A collection can hold an unlimited number of child nodes.\n      allOf:\n        - $ref: \"#/components/schemas/core.v2.Node\"\n        - type: object\n          properties:\n            version:\n              description: The content version. Does increase if the content gets changed.\n              type: integer\n              default: 1\n            hash:\n              description: MD5 content checksum.\n              type: string\n            preview:\n              description: Is true if there is a preview\n              type: boolean\n    core.v2.FileHistory:\n      description: File history.\n      type: object\n      properties:\n        version:\n          description: The version number.\n          type: integer\n          default: 1\n        changed:\n          description: ISO 8601 timestamp when the resource was changed.\n          type: string\n          format: date-time\n        type:\n          description: Type of change.\n          type: integer\n        user:\n          description: Resolves to user who executed the operation.\n          type: object\n          properties:\n            id:\n              description: The id of the share owner.\n              type: string\n            name:\n              description: The username of the share owner.\n              type: string\n    core.v2.Delta:\n      description: The delta is a differential feed to get changes since the last delta\n        call.\n      type: object\n      properties:\n        reset:\n          description: If true the client needs to reset its state.\n          type: boolean\n          default: false\n        cursor:\n          description: ACL rules.\n          type: string\n        has_more:\n          description: If true the server has more entries and the client must send another\n            request with the latest cursor.\n          type: boolean\n          default: false\n        nodes:\n          type: array\n          items:\n            $ref: \"#/components/schemas/core.v2.Node\"\n    core.v2.Share:\n      description: Node share.\n      type: object\n      properties:\n        share_name:\n          description: The name of the share. By default the name of the node.\n          type: string\n        acl:\n          description: ACL rules.\n          type: array\n          items:\n            $ref: \"#/components/schemas/core.v2.AclRule\"\n    core.v2.AclRule:\n      description: ACL rule.\n      type: object\n      properties:\n        type:\n          description: The type of the resource.\n          type: string\n          enum:\n            - user\n            - group\n        id:\n          description: ACL rules.\n          type: string\n        privilege:\n          description: Privilege.\n          type: string\n          enum:\n            - rw\n            - w\n            - m\n            - rp\n            - d\n        role:\n          description: Points to the share owner. If the node is not part of any share this\n            is null.\n          type: object\n          properties:\n            id:\n              description: The id of the role resource.\n              type: string\n            name:\n              description: The name of role resource.\n              type: string\n    core.v2.UserNodeAttributeSummary:\n      description: Request node fiel statistics.\n      type: object\n      additionalProperties:\n        type: array\n        items:\n          type: object\n          properties:\n            _id:\n              type: string\n            sum:\n              type: integer\n    core.v2.ChunkSession:\n      description: Chunking upload session.\n      type: object\n      properties:\n        session:\n          description: The upload session id\n          type: string\n        chunks_left:\n          description: Tells how many chunks are left to upload.\n          type: integer\n    core.v2.EventLogs:\n      description: A list of events.\n      allOf:\n        - $ref: \"#/components/schemas/core.v2.ResourceList\"\n        - type: object\n          properties:\n            data:\n              type: array\n              items:\n                $ref: \"#/components/schemas/core.v2.EventLog\"\n    core.v2.EventLog:\n      description: Event log entry. Each event represents an executed operation on the\n        server.\n      type: object\n      properties:\n        event:\n          description: The event id.\n          type: string\n        timestamp:\n          description: ISO 8601 timestamp when the event was created.\n          type: string\n        operation:\n          description: The event operation.\n          type: string\n          enum:\n            - deleteCollectionReference\n            - deleteCollectionShare\n            - deleteCollection\n            - addCollection\n            - addFile\n            - addCollectionShare\n            - addCollectionReference\n            - undeleteFile\n            - undeleteCollectionReference\n            - undeleteCollectionShare\n            - restoreFile\n            - renameFile\n            - renameCollection\n            - renameCollectionShare\n            - renameCollectionReference\n            - copyFile\n            - copyCollection\n            - copyCollectionShare\n            - copyCollectionRFeference\n            - moveFile\n            - moveCollection\n            - moveCollectionReference\n            - moveCollectionShare\n        node:\n          description: Resolves to the node involved in the operation.\n          type: object\n          properties:\n            id:\n              description: The id of the node\n              type: string\n            name:\n              description: The name of the node\n              type: string\n        parent:\n          description: Points to the parent collection. If the node is in the root this is\n            null.\n          type: object\n          properties:\n            id:\n              description: The id of the parent collection\n              type: string\n            name:\n              description: The name of the parent collection\n              type: string\n        share:\n          description: Points to the shared node (or share reference). If the node is not\n            part of any share this is null.\n          type: object\n          properties:\n            id:\n              description: The id of the share collection. If the share is a reference\n                (incoming share) it will point to the share reference and not\n                the id of the shared collection itself.\n              type: string\n            name:\n              description: The name of the share (or share reference).\n              type: string\n        user:\n          description: Resolves to user who executed the operation.\n          type: object\n          properties:\n            id:\n              description: The id of the share owner.\n              type: string\n            name:\n              description: The username of the share owner.\n              type: string\n        client:\n          description: Describes the client from which the operation was executed.\n          type: object\n          properties:\n            type:\n              description: The type of the client.\n              type: string\n            app:\n              description: The client app name.\n              type: string\n            v:\n              description: The version of the client app.\n              type: string\n            hostname:\n              description: The hostname of the client.\n              type: string\n    office.v2.WopiDocument:\n      description: WOPI document\n        https://wopi.readthedocs.io/projects/wopirest/en/latest/files/CheckFileInfo.html\n      type: object\n      properties:\n        BaseFileName:\n          type: string\n        Size:\n          type: string\n        Version:\n          type: string\n        OwnerId:\n          type: string\n        UserId:\n          type: string\n        UserFriendlyName:\n          type: string\n        UserCanWrite:\n          type: boolean\n        PostMessageOrigin:\n          type: string\n    notification.v2.Mail:\n      description: Mail\n      type: object\n      properties:\n        receiver:\n          type: array\n          items:\n            type: string\n            format: mail\n        subject:\n          type: string\n        body:\n          type: string\n    notification.v2.Notifications:\n      description: A list of notifications.\n      allOf:\n        - $ref: \"#/components/schemas/core.v2.ResourceList\"\n        - type: object\n          properties:\n            data:\n              type: array\n              items:\n                $ref: \"#/components/schemas/notification.v2.Notification\"\n    notification.v2.Notification:\n      description: A notification\n      allOf:\n        - $ref: \"#/components/schemas/core.v2.Resource\"\n        - type: object\n          properties:\n            locale:\n              description: Notification locale. A locale contains a static message which is\n                of a given locale.\n              type: string\n              default: en_US\n            subject:\n              description: Subject.\n              type: string\n            message:\n              description: Message.\n              type: string\n            sender:\n              description: Points to the message. If there is no sender (For example the\n                message came from the system itself) this is null.\n              type: object\n              properties:\n                id:\n                  description: The id of the sender.\n                  type: string\n                name:\n                  description: The username of the sender.\n                  type: string\n            node:\n              description: A notification may point to a node. If there is no node given\n                this is null.\n              type: object\n              properties:\n                id:\n                  description: The id of the node.\n                  type: string\n                name:\n                  description: The name of the node.\n                  type: string\n    convert.v2.Slaves:\n      description: A list of convert slaves.\n      allOf:\n        - $ref: \"#/components/schemas/core.v2.ResourceList\"\n        - type: object\n          properties:\n            data:\n              type: array\n              items:\n                $ref: \"#/components/schemas/convert.v2.Slave\"\n    convert.v2.Slave:\n      description: A convert slave\n      allOf:\n        - $ref: \"#/components/schemas/core.v2.Resource\"\n        - type: object\n          properties:\n            format:\n              description: Slave format.\n              type: string\n            master:\n              description: Master node from which the slave is from.\n              type: object\n              properties:\n                id:\n                  description: The id of the node.\n                  type: string\n                name:\n                  description: The name of the node.\n                  type: string\n            slave:\n              description: The generated slave node. As long as the slave has not yet been\n                created this is null.\n              type: object\n              properties:\n                id:\n                  description: The id of the node.\n                  type: string\n                name:\n                  description: The name of the node.\n                  type: string\n\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"core.v2.Delta\": parse schema: property \"nodes\": parse schema: item: parse schema: resolve \"#/components/schemas/core.v2.Node\": parse schema: allOf: [1]: parse schema: property \"sharelink_expire\": unexpected default \"null\" value"
}