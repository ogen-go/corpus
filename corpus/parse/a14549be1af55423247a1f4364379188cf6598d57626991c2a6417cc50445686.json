{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/BSI-Bund/TSMS"
		},
		"file": {
			"name": "tsm-rest-api-1.0.0.yaml",
			"size": 0,
			"path": "tsm-rest-api/dist/1.0.0/tsm-rest-api-1.0.0.yaml",
			"byteSize": 143565,
			"content": "openapi: 3.0.0\n\ninfo:\n  description: |\n    A graphical representation of the TSM-Backend API for a TSMS (Trusted Service Management System) using Swagger UI is presented here. This is to be seen as a supplement to the [BSI-TR-03165](https://www.bsi.bund.de/DE/Themen/Unternehmen-und-Organisationen/Standards-und-Zertifizierung/Technische-Richtlinien/TR-nach-Thema-sortiert/tr03165/tr-03165.html). In case of discrepancies, the content of the written guideline applies.\n    \n    A TSM-Backend is an IT-system of a TSM that provides TSM-services in form of a REST-API. It acts as a repository for secure applications in different Flavors, configurations, and resources that are necessary to install a secure application. It allows service providers to create, read, update and delete all data objects that are necessary to enable the life-cycle management of their secure application on secure components.\n    \n    __Functionality:__\n    * upload JavaCard *.cap files to TSM-Backend\n    * define a service which consists of one or multiple *.cap files\n    * versionize the service\n    * define hardware variants for each service - called flavors \n    * specify technical requirements for each flavor, e.g. minimal JavaCard version\n    \n  version: \"1.0\"\n  title: \"BSI-TR-03165: TSM-Backend\"\n  termsOfService: https://www.bsi.bund.de/DE/Service/Nutzungsbedingungen/Nutzungsbedingungen_node.html\n  contact:\n    email: mobile-eid@bsi.bund.de\n  license:\n    name: Apache License, Version 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n\ntags:\n- name: /auth\n  description: \"authentication methods\"\n- name: /serviceproviders\n  description: \"methods for management of SP\"\n- name: /secure-component-profiles\n  description: \"Retrieve SecureComponentProfiles\"\n- name: /services\n  description: \"methods for management of Services and Flavors\"\n- name: /executable-load-files\n  description: \"methods for management of ELFs and EMs\"\n- name: /application-configs\n  description: \"methods for management of ApplicationConfigurations\"\n- name: /personalization-scripts\n  description: \"methods for management of PersonalizationScripts\"\n- name: /certificates\n  description: \"methods for management of Certificates\"\n- name: /spos-configs\n  description: \"methods for management of SposConfigs\"\n\npaths:\n\n### 4.1.6.1 Authentication ###\n\n### 4.1.6.1.1 Create Access Token ###\n  /auth:\n    post:\n      tags:\n      - /auth\n      summary: \"Authenticate to the TSM-Backend by sending a long-term token, and...\"\n      description: \"Authenticate to the TSM-Backend by sending a long-term token, and receive a short-term bearer token. The short-term bearer token is used to access the other API functions. The long-term token is provided out of band.\"\n      operationId: createAccessToken\n      ##### Request Headers:\n      security:\n        - LongtermToken: []\n      ##### Content-Type: application/json\n      ##### Accept: application/json\n      ##### Request Body: -\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/auth-Token\"\n        400:\n          $ref: \"#/components/responses/400Error_1002\"\n        401:\n          $ref: \"#/components/responses/401Error_1001\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.2 Manage SP Account ###\n# This section lists methods for the management of SP account information.\n\n### 4.1.6.2.1 Get Account Information ###\n  /serviceproviders/current:\n    get:\n      tags:\n      - /serviceproviders\n      summary: \"Get details of the SP account.\"\n      description: \"Get details of the SP account.\"\n      operationId: getAccountInformation\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceProvider\"\n        400:\n          $ref: \"#/components/responses/400Error_1002\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.3 Retrieve SecureComponentProfiles ###\n# This section provides methods to retrieve information about the by the TSMS supported hardware platforms.\n\n### 4.1.6.3.1 List SecureComponentProfiles ###\n  /secure-component-profiles:\n    get:\n      tags:\n      - /secure-component-profiles\n      summary: \"List all available SecureComponentProfiles.\"\n      description: \"List all available SecureComponentProfiles.\"\n      operationId: listSecureComponentProfiles\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/SecureComponentProfile\"\n        400:\n          $ref: \"#/components/responses/400Error_1002\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.3.2 Get SecureComponentProfile ###\n  /secure-component-profiles/{scpId}:\n    get:\n      tags:\n      - /secure-component-profiles\n      summary: \"Get details of a certain SecureComponentProfile.\"\n      description: \"Get details of a certain SecureComponentProfile.\"\n      operationId: getSecureComponentProfile\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/scpId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SecureComponentProfile\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.3.3 List Related ELFs ###\n  /secure-component-profiles/{scpId}/elfs:\n    get:\n      tags:\n      - /secure-component-profiles\n      summary: \"List all ELFs that use a certain SecureComponentProfile.\"\n      description: \"List all ELFs that use a certain SecureComponentProfile.\"\n      operationId: listScpRelatedElfs\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/scpId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ExecutableLoadFile\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.3.4 List Related Services ###\n  /secure-component-profiles/{scpId}/services:\n    get:\n      tags:\n      - /secure-component-profiles\n      summary: \"List all Services that use a certain SecureComponentProfile.\"\n      description: \"List all Services that use a certain SecureComponentProfile.\"\n      operationId: listScpRelatedServices\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/scpId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Service\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.3.5 List Related Flavors ###\n  /secure-component-profiles/{scpId}/services/{serviceId}/flavors:\n    get:\n      tags:\n      - /secure-component-profiles\n      summary: \"List all Flavors of a certain Service that use a certain SecureCo...\"\n      description: \"List all Flavors of a certain Service that use a certain SecureComponentProfile.\"\n      operationId: listScpRelatedFlavors\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/scpId\"\n      - $ref: \"#/components/parameters/serviceId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Flavor\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.3.6 List Related Versions ###\n  /secure-component-profiles/{scpId}/services/{serviceId}/versions:\n    get:\n      tags:\n      - /secure-component-profiles\n      summary: \"List all Versions of a certain Service that use a certain SecureC...\"\n      description: \"List all Versions of a certain Service that use a certain SecureComponentProfile.\"\n      operationId: listScpRelatedVersions\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/scpId\"\n      - $ref: \"#/components/parameters/serviceId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Version\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4 Manage Services and Flavors ###\n# This section lists methods for the management of Services, Versions, and Flavors. Using these methods, an SP may, e.g., link existing ELFs and ApplicationConfigs to create and modify different Versions and Flavors of a Service.\n# There are methods to list, create, modify, and delete Service entities and their corresponding Version and Flavor entities, and to link ExecutableModule entities and ApplicationConfig entities to a certain Flavor.\n# The methods listed in this section do not provide functionality to upload binary data for ELFs or to create ApplicationConfigs. Uploading ELFs can be done via methods listed in Section 4.1.6.4.27. Managing ApplicationConfigs can be done via methods listed in Section 4.1.6.6.\n\n### 4.1.6.4.1 List Services ###\n  /services:\n    get:\n      tags:\n      - /services\n      summary: \"List all Services of the authenticated ServiceProvider.\"\n      description: \"List all Services of the authenticated ServiceProvider.\"\n      operationId: listServices\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Service\"\n        400:\n          $ref: \"#/components/responses/400Error_1002\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.2 Create Service ###\n  #/services:\n    post:\n      tags:\n      - /services\n      summary: \"Create a new Service.\"\n      description: \"Create a new Service.\"\n      operationId: createService\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: application/json\n      ##### Accept: application/json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Service\"\n            example:\n              name: \"authDeviceByBNE\"\n              accessAuthorizedDeviceApps: [ \"A00000021784013C0110\", \"A00000007220548C0001\", \"A00000033467106C1111\" ]\n              sposConfigId: \"62d2a5d8-f591-f9ec-32b3-558047c576a7\"\n              spParameters: { param0: \"Value0 which can be evaluated by the App.\", param1: \"Value1 which can be evaluated by the App.\", param2: \"Value2 which can be evaluated by the App.\" }\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Service\"\n        400:\n          $ref: \"#/components/responses/400Error_1003_1004_1007_1008_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.3 Get Service ###\n  /services/{serviceId}:\n    get:\n      tags:\n      - /services\n      summary: \"Get details of a certain Service.\"\n      description: \"Get details of a certain Service.\"\n      operationId: getService\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Service\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.4 Modify Service ###\n  #/services/{serviceId}:\n    put:\n      tags:\n      - /services\n      summary: \"Update details of an existing Service.\"\n      description: \"Update details of an existing Service.\"\n      operationId: modifyService\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: application/json\n      ##### Accept: application/json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Service\"\n            example:\n              name: \"authDeviceByBNE\"\n              accessAuthorizedDeviceApps: [ \"A00000021784013C0110\", \"A00000007220548C0001\", \"A00000033467106C1111\" ]\n              sposConfigId: \"62d2a5d8-f591-f9ec-32b3-558047c576a7\"\n              spParameters: { param0: \"Value0 which can be evaluated by the App.\", param1: \"Value1 which can be evaluated by the App.\", param2: \"Value2 which can be evaluated by the App.\" }\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Service\"\n        400:\n          $ref: \"#/components/responses/400Error_1005_1006_1007_1008_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.5 Delete Service ###\n  #/services/{serviceId}:\n    delete:\n      tags:\n      - /services\n      summary: \"Delete a certain Service. All data, including associated Versions...\"\n      description: \"Delete a certain Service. All data, including associated Versions, Flavors, and ApplicationInstantiationConfigs is deleted. Referenced ELFs, ApplicationConfigs, and SposConfigs are not deleted.\"\n      operationId: deleteService\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      responses:\n        204:\n          description: \"item deleted sucessfully\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.6 List Flavors ###\n  /services/{serviceId}/flavors:\n    get:\n      tags:\n      - /services\n      summary: \"List all Flavors of a certain Service.\"\n      description: \"List all Flavors of a certain Service.\"\n      operationId: listFlavors\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Flavor\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.7 Create Flavor ###\n  #/services/{serviceId}/flavors:\n    post:\n      tags:\n      - /services\n      summary: \"Create a new Flavor for a certain Service.\"\n      description: \"Create a new Flavor for a certain Service.\"\n      operationId: createFlavor\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: application/json\n      ##### Accept: application/json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Flavor\"\n            example:\n              name: \"YY-624B-11\"\n              description: \"Additional description for this Flavor.\"\n              executableLoadFileIds: [ \"54050ff0-7d9e-ef28-b120-3c3e81ae77af\", \"7860e9a9-70b3-43b1-b2d7-fc6199c92cb4\", \"2b3447ca-eecc-eba9-3f48-2f61ae43c742\" ]\n              applicationInstantiationConfigs: [ { priority: 137, executableModuleId: \"40b455b5-1e45-fd2f-319b-83794b2a8d82\", applicationConfigId: \"1e555fae-c0bb-9915-b086-b7f77a52ca69\" }, { priority: 81, executableModuleId: \"efe37b02-819a-9dc1-f656-b00b80072581\", applicationConfigId: \"9b2990c9-59b0-a979-d4b2-11ff5fe00cb2\" }, { priority: 132, executableModuleId: \"105030db-8fd7-095f-953e-a4143a3576c3\", applicationConfigId: \"b3f08e86-ebed-1a72-984d-8030cbe89b79\" } ]\n              spParameters: { param0: \"Value0 which can be evaluated by the App.\", param1: \"Value1 which can be evaluated by the App.\", param2: \"Value2 which can be evaluated by the App.\" }\n              contextSpecificAttributes: { param0: \"Value0 which can be evaluated by the App.\", param1: \"Value1 which can be evaluated by the App.\", param2: \"Value2 which can be evaluated by the App.\" }\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Flavor\"\n        400:\n          $ref: \"#/components/responses/400Error_1003_1004_1007_1008_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.8 Get Flavor ###\n  /services/{serviceId}/flavors/{flavorId}:\n    get:\n      tags:\n      - /services\n      summary: \"Get details of a certain Flavor.\"\n      description: \"Get details of a certain Flavor.\"\n      operationId: getFlavor\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      - $ref: \"#/components/parameters/flavorId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Flavor\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.9 Modify Flavor ###\n  #/services/{serviceId}/flavors/{flavorId}:\n    put:\n      tags:\n      - /services\n      summary: \"Update details of an existing Flavor.\"\n      description: \"Update details of an existing Flavor.\"\n      operationId: modifyFlavor\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: application/json\n      ##### Accept: application/json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Flavor\"\n            example:\n              name: \"YY-624B-11\"\n              description: \"Additional description for this Flavor.\"\n              executableLoadFileIds: [ \"54050ff0-7d9e-ef28-b120-3c3e81ae77af\", \"7860e9a9-70b3-43b1-b2d7-fc6199c92cb4\", \"2b3447ca-eecc-eba9-3f48-2f61ae43c742\" ]\n              applicationInstantiationConfigs: [ { priority: 137, executableModuleId: \"40b455b5-1e45-fd2f-319b-83794b2a8d82\", applicationConfigId: \"1e555fae-c0bb-9915-b086-b7f77a52ca69\" }, { priority: 81, executableModuleId: \"efe37b02-819a-9dc1-f656-b00b80072581\", applicationConfigId: \"9b2990c9-59b0-a979-d4b2-11ff5fe00cb2\" }, { priority: 132, executableModuleId: \"105030db-8fd7-095f-953e-a4143a3576c3\", applicationConfigId: \"b3f08e86-ebed-1a72-984d-8030cbe89b79\" } ]\n              spParameters: { param0: \"Value0 which can be evaluated by the App.\", param1: \"Value1 which can be evaluated by the App.\", param2: \"Value2 which can be evaluated by the App.\" }\n              contextSpecificAttributes: { param0: \"Value0 which can be evaluated by the App.\", param1: \"Value1 which can be evaluated by the App.\", param2: \"Value2 which can be evaluated by the App.\" }\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      - $ref: \"#/components/parameters/flavorId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Flavor\"\n        400:\n          $ref: \"#/components/responses/400Error_1005_1006_1007_1008_1009_1015_1016\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.10 Delete Flavor ###\n  #/services/{serviceId}/flavors/{flavorId}:\n    delete:\n      tags:\n      - /services\n      summary: \"Delete a certain Flavor. All data, including associated Applicati...\"\n      description: \"Delete a certain Flavor. All data, including associated ApplicationInstantiationConfigs, is deleted. Referenced ELFs and ApplicationConfigs are not deleted. Deletion SHALL only be possible if the Flavor is not referenced in any Version and thus is not in use anywhere.\"\n      operationId: deleteFlavor\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      - $ref: \"#/components/parameters/flavorId\"\n      responses:\n        204:\n          description: \"item deleted sucessfully\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009_1010\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.11 List Related ApplicationConfigs ###\n  /services/{serviceId}/flavors/{flavorId}/application-configs:\n    get:\n      tags:\n      - /services\n      summary: \"List all ApplicationConfigs that use a certain Flavor.\"\n      description: \"List all ApplicationConfigs that use a certain Flavor.\"\n      operationId: listServiceRelatedAppConfigs\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      - $ref: \"#/components/parameters/flavorId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ApplicationConfig\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.12 List Linked ELFs ###\n  /services/{serviceId}/flavors/{flavorId}/executable-load-files:\n    get:\n      tags:\n      - /services\n      summary: \"List all ExecutableLoadFiles used by a certain Flavor.\"\n      description: \"List all ExecutableLoadFiles used by a certain Flavor.\"\n      operationId: listLinkedElfs\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      - $ref: \"#/components/parameters/flavorId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ExecutableLoadFile\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.13 Link ELFs ###\n  #/services/{serviceId}/flavors/{flavorId}/executable-load-files:\n    post:\n      tags:\n      - /services\n      summary: \"Add additional ExecutableLoadFiles to a certain Flavor. In case E...\"\n      description: \"Add additional ExecutableLoadFiles to a certain Flavor. In case ELF Ids provided are already linked to this Flavor, method will still be successful.\"\n      operationId: linkElfs\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: application/json\n      ##### Accept: application/json\n      requestBody:\n        description: \"Ids of the ELFs to be added to the flavor (elfIds)\"\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      - $ref: \"#/components/parameters/flavorId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Flavor\"\n        400:\n          $ref: \"#/components/responses/400Error_1008_1009_1015_1016\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.14 Unlink ELFs ###\n  #/services/{serviceId}/flavors/{flavorId}/executable-load-files:\n    put:\n      tags:\n      - /services\n      summary: \"Remove ExecutableLoadFiles from a certain Flavor. In case ELF Ids...\"\n      description: \"Remove ExecutableLoadFiles from a certain Flavor. In case ELF Ids provided are not linked to this Flavor, method will still be successful.\"\n      operationId: unlinkElfs\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: application/json\n      ##### Accept: application/json\n      requestBody:\n        description: \"Ids of the ELFs to be removed from the flavor (elfIds)\"\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      - $ref: \"#/components/parameters/flavorId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Flavor\"\n        400:\n          $ref: \"#/components/responses/400Error_1008_1009_1015\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.15 Publish Flavor ###\n  /services/{serviceId}/flavors/{flavorId}/publish:\n    post:\n      tags:\n      - /services\n      summary: \"Publish a Flavor. After publishing, the Flavor can be used for in...\"\n      description: \"Publish a Flavor. After publishing, the Flavor can be used for installation on a handset and certain attributes cannot be modified anymore (see Section 4.1.6.4.6). The publishing status of a Flavor can be checked with the attribute publish of the Flavor. When a Flavor is once published, it is not possible to undo this process. It is valid to call this method multiple times, even if a Flavor is already published.\"\n      operationId: publishFlavor\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: application/json\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      - $ref: \"#/components/parameters/flavorId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Flavor\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.16 List Related Versions ###\n  /services/{serviceId}/flavors/{flavorId}/versions:\n    get:\n      tags:\n      - /services\n      summary: \"List all Versions that use a certain Flavor.\"\n      description: \"List all Versions that use a certain Flavor.\"\n      operationId: listServiceRelatedVersions\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      - $ref: \"#/components/parameters/flavorId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Version\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.17 List Versions ###\n  /services/{serviceId}/versions:\n    get:\n      tags:\n      - /services\n      summary: \"List all Versions of a certain Service.\"\n      description: \"List all Versions of a certain Service.\"\n      operationId: listVersions\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Version\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.18 Create Version ###\n  #/services/{serviceId}/versions:\n    post:\n      tags:\n      - /services\n      summary: \"Create a new Version of a certain Service.\"\n      description: \"Create a new Version of a certain Service.\"\n      operationId: createVersion\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: application/json\n      ##### Accept: application/json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Version\"\n            example:\n              allowedDeployments: [ \"c207b03f-75c5-c5ff-2460-fe6cec8ab803\", \"ca85a700-9b54-e89a-8b3f-60296b75c26f\", \"553e809b-5610-53f0-ed91-5a12fa0e65ac\" ]\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Version\"\n        400:\n          $ref: \"#/components/responses/400Error_1003_1004_1007_1008_1009_1016\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.19 Get Version ###\n  /services/{serviceId}/versions/{tag}:\n    get:\n      tags:\n      - /services\n      summary: \"Get details of a certain Version.\"\n      description: \"Get details of a certain Version.\"\n      operationId: getVersion\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      - $ref: \"#/components/parameters/tag\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Version\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.20 Modify Version ###\n  #/services/{serviceId}/versions/{tag}:\n    put:\n      tags:\n      - /services\n      summary: \"Update details of an existing Version.\"\n      description: \"Update details of an existing Version.\"\n      operationId: modifyVersion\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: application/json\n      ##### Accept: application/json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Version\"\n            example:\n              allowedDeployments: [ \"c207b03f-75c5-c5ff-2460-fe6cec8ab803\", \"ca85a700-9b54-e89a-8b3f-60296b75c26f\", \"553e809b-5610-53f0-ed91-5a12fa0e65ac\" ]\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      - $ref: \"#/components/parameters/tag\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Version\"\n        400:\n          $ref: \"#/components/responses/400Error_1005_1006_1007_1008_1009_1016\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.21 Delete Version ###\n  #/services/{serviceId}/versions/{tag}:\n    delete:\n      tags:\n      - /services\n      summary: \"Delete a certain Version. All data is deleted. Referenced Flavors...\"\n      description: \"Delete a certain Version. All data is deleted. Referenced Flavors are not deleted.\"\n      operationId: deleteVersion\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      - $ref: \"#/components/parameters/tag\"\n      responses:\n        204:\n          description: \"item deleted sucessfully\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009_1010\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.22 List Linked Flavors ###\n  /services/{serviceId}/versions/{tag}/flavors:\n    get:\n      tags:\n      - /services\n      summary: \"List all Flavors used by a certain Version.\"\n      description: \"List all Flavors used by a certain Version.\"\n      operationId: listLinkedFlavors\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      - $ref: \"#/components/parameters/tag\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Flavor\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.23 Link Flavors ###\n  #/services/{serviceId}/versions/{tag}/flavors:\n    post:\n      tags:\n      - /services\n      summary: \"Add additional Flavors to a certain Version and configure the Sec...\"\n      description: \"Add additional Flavors to a certain Version and configure the SecureComponentProfiles supported by the Flavor. In case Flavor Ids provided are already linked to this Version, the method will still be successful and it will just modify the list of supported SecureComponentProfiles.\"\n      operationId: linkFlavors\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: application/json\n      ##### Accept: application/json\n      requestBody:\n        description: \"Map keys: flavorIds, Map values: list of secureComponentProfileIds\"\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: array\n                items:\n                  type: string\n                  maxLength: 255\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      - $ref: \"#/components/parameters/tag\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Version\"\n        400:\n          $ref: \"#/components/responses/400Error_1008_1009_1016\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.24 Unlink Flavors ###\n  #/services/{serviceId}/versions/{tag}/flavors:\n    put:\n      tags:\n      - /services\n      summary: \"Remove Flavors from a certain Version. In case Flavor Ids provide...\"\n      description: \"Remove Flavors from a certain Version. In case Flavor Ids provided are not linked to this Version, method will still be successful.\"\n      operationId: unlinkFlavors\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: application/json\n      ##### Accept: application/json\n      requestBody:\n        description: \"Ids of the flavors to be removed from the version (flavorIds)\"\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      - $ref: \"#/components/parameters/tag\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Version\"\n        400:\n          $ref: \"#/components/responses/400Error_1008_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.25 List Associated SecureComponentProfiles ###\n  /services/{serviceId}/versions/{tag}/flavors/{flavorId}/secure-component-profiles:\n    get:\n      tags:\n      - /services\n      summary: \"List SecureComponentProfiles associated to a certain Flavor of a ...\"\n      description: \"List SecureComponentProfiles associated to a certain Flavor of a certain Version.\"\n      operationId: listAssociatedSecureComponentProfiles\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      - $ref: \"#/components/parameters/tag\"\n      - $ref: \"#/components/parameters/flavorId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/SecureComponentProfile\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.26 List Linked SecureComponentProfiles ###\n  /services/{serviceId}/versions/{tag}/secure-component-profiles:\n    get:\n      tags:\n      - /services\n      summary: \"List all SecureComponentProfiles used by a certain Version.\"\n      description: \"List all SecureComponentProfiles used by a certain Version.\"\n      operationId: listLinkedSecureComponentProfiles\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      - $ref: \"#/components/parameters/tag\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/SecureComponentProfile\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.27 Link SecureComponentProfiles ###\n  #/services/{serviceId}/versions/{tag}/secure-component-profiles:\n    post:\n      tags:\n      - /services\n      summary: \"Add additional SecureComponentProfiles to a certain Version and c...\"\n      description: \"Add additional SecureComponentProfiles to a certain Version and configure the Flavors supported. In case SecureComponentProfile Ids provided are already linked to this Version, the method will still be successful and it will just modify the list of supported Flavors.\"\n      operationId: linkSecureComponentProfiles\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: application/json\n      ##### Accept: application/json\n      requestBody:\n        description: \"Map keys: secureComponentProfileIds, Map values: list of flavorIds\"\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: array\n                items:\n                  type: string\n                  maxLength: 255\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      - $ref: \"#/components/parameters/tag\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Version\"\n        400:\n          $ref: \"#/components/responses/400Error_1008_1009_1016\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.4.28 Unlink SecureComponentProfiles ###\n  #/services/{serviceId}/versions/{tag}/secure-component-profiles:\n    put:\n      tags:\n      - /services\n      summary: \"Remove SecureComponentProfiles from a certain Version. In case Se...\"\n      description: \"Remove SecureComponentProfiles from a certain Version. In case SecureComponentProfile Ids provided are not linked to this Version, method will still be successful.\"\n      operationId: unlinkSecureComponentProfiles\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: application/json\n      ##### Accept: application/json\n      requestBody:\n        description: \"Ids of the secureComponentProfiles to be removed from the version (secureComponentProfileIds)\"\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      - $ref: \"#/components/parameters/tag\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Version\"\n        400:\n          $ref: \"#/components/responses/400Error_1008_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.5 Manage ELFs and EMs ###\n# This section lists methods for the upload of executable binary files, usually CAP files, and to provide technical requirements and installation orders for the EMs inside those files.\n# There are methods to list, create, modify, upload, overwrite, and delete ExecutableLoadFile entities and their corresponding InstallationOrder and TechnicalRequirements entities.\n# These methods do not provide functionality to link EMs to certain ApplicationConfigs. Linking EMs and ApplicationConfigs is done using methods listed in Section 4.1.6.4.\n\n### 4.1.6.5.1 List ELFs ###\n  /executable-load-files:\n    get:\n      tags:\n      - /executable-load-files\n      summary: \"List all ExecutableLoadFiles of the authenticated ServiceProvider.\"\n      description: \"List all ExecutableLoadFiles of the authenticated ServiceProvider.\"\n      operationId: listElfs\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ExecutableLoadFile\"\n        400:\n          $ref: \"#/components/responses/400Error_1002\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.5.2 Create ELF and Upload Binary ###\n  #/executable-load-files:\n    post:\n      tags:\n      - /executable-load-files\n      summary: \"Create a new ExecutableLoadFile and upload corresponding binary d...\"\n      description: \"Create a new ExecutableLoadFile and upload corresponding binary data. ELF details and binary must both be provided to create a new ExecutableLoadFile.\"\n      operationId: createElfAndUploadBinary\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: multipart/form-data; boundary=\u003c\u003cboundary\u003e\u003e\n      ##### Accept: application/json\n      requestBody:\n        $ref: \"#/components/requestBodies/binaryELF\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExecutableLoadFile\"\n        400:\n          $ref: \"#/components/responses/400Error_1003_1004_1007_1008_1009_1011_1012_1013_1014\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.5.3 Get ELF ###\n  /executable-load-files/{elfId}:\n    get:\n      tags:\n      - /executable-load-files\n      summary: \"Get details of a certain ExecutableLoadFile.\"\n      description: \"Get details of a certain ExecutableLoadFile.\"\n      operationId: getElf\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/elfId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExecutableLoadFile\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.5.4 Modify ELF and Overwrite Binary ###\n  #/executable-load-files/{elfId}:\n    put:\n      tags:\n      - /executable-load-files\n      summary: \"Update details and overwrite binary data of an existing Executabl...\"\n      description: \"Update details and overwrite binary data of an existing ExecutableLoadFile. The binary of an ExecutableLoadFile can only be replaced, as long it is not yet linked to a published Flavor.\"\n      operationId: modifyElfAndOverwriteBinary\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: text/plain\n      ##### Accept: application/json\n      requestBody:\n        $ref: \"#/components/requestBodies/binaryELF\"\n      parameters:\n      - $ref: \"#/components/parameters/elfId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExecutableLoadFile\"\n        400:\n          $ref: \"#/components/responses/400Error_1005_1006_1007_1008_1009_1011_1012_1013_1014_1015_1016\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.5.5 Delete ELF ###\n  #/executable-load-files/{elfId}:\n    delete:\n      tags:\n      - /executable-load-files\n      summary: \"Delete a certain ExecutableLoadFile. All data, including binary d...\"\n      description: \"Delete a certain ExecutableLoadFile. All data, including binary data, meta-data, and associated TechnicalRequirements, is deleted. Deletion SHALL only be possible if the ExecutableLoadFile is not referenced in any Flavor and thus is not in use anywhere.\"\n      operationId: deleteElf\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/elfId\"\n      responses:\n        204:\n          description: \"item deleted sucessfully\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009_1010\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.5.6 Get Binary ###\n  /executable-load-files/{elfId}/binary:\n    get:\n      tags:\n      - /executable-load-files\n      summary: \"Get binary data of a certain ExecutableLoadFile.\"\n      description: \"Get binary data of a certain ExecutableLoadFile.\"\n      operationId: getElfBinary\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/elfId\"\n      responses:\n        200:\n          $ref: \"#/components/responses/200Binary_ELF\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.5.7 List EMs ###\n  /executable-load-files/{elfId}/executable-modules:\n    get:\n      tags:\n      - /executable-load-files\n      summary: \"List all ExecutableModules of a certain ExecutableLoadFile.\"\n      description: \"List all ExecutableModules of a certain ExecutableLoadFile.\"\n      operationId: listEms\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/elfId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ExecutableModule\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.5.8 Get EM ###\n  /executable-load-files/{elfId}/executable-modules/{emId}:\n    get:\n      tags:\n      - /executable-load-files\n      summary: \"Get details of a certain ExecutableModule of a certain Executable...\"\n      description: \"Get details of a certain ExecutableModule of a certain ExecutableLoadFile.\"\n      operationId: getEm\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/elfId\"\n      - $ref: \"#/components/parameters/emId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExecutableModule\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.5.9 List Related ApplicationConfigs ###\n  /executable-load-files/{elfId}/executable-modules/{emId}/application-configs:\n    get:\n      tags:\n      - /executable-load-files\n      summary: \"Return the ApplicationConfigs that apply to a certain ExecutableM...\"\n      description: \"Return the ApplicationConfigs that apply to a certain ExecutableModule.\"\n      operationId: listElfRelatedAppConfigs\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/elfId\"\n      - $ref: \"#/components/parameters/emId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ApplicationConfig\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.5.10 List Related Flavors ###\n  /services/{serviceId}/executable-load-files/{elfId}/flavors:\n    get:\n      tags:\n      - /services\n      summary: \"List all Flavors that use a certain ExecutableLoadFile.\"\n      description: \"List all Flavors that use a certain ExecutableLoadFile.\"\n      operationId: listElfRelatedFlavors\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/serviceId\"\n      - $ref: \"#/components/parameters/elfId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Flavor\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.5.11 List Related Services ###\n  /executable-load-files/{elfId}/services:\n    get:\n      tags:\n      - /executable-load-files\n      summary: \"List all Services that use a certain ExecutableLoadFile.\"\n      description: \"List all Services that use a certain ExecutableLoadFile.\"\n      operationId: listElfRelatedServices\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/elfId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Service\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.5.12 List Related Versions ###\n  /executable-load-files/{elfId}/services/{servideId}/versions:\n    get:\n      tags:\n      - /executable-load-files\n      summary: \"List all Versions of a certain Service that use a certain Executa...\"\n      description: \"List all Versions of a certain Service that use a certain ExecutableLoadFile.\"\n      operationId: listElfRelatedVersions\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/elfId\"\n      - $ref: \"#/components/parameters/servideId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Version\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.5.13 List Related SecureComponentProfiles ###\n  /executable-load-files/{elfId}/services/{serviceId}/secure-component-profiles:\n    get:\n      tags:\n      - /executable-load-files\n      summary: \"List all SecureComponentProfiles associated to certain Service th...\"\n      description: \"List all SecureComponentProfiles associated to certain Service that use a certain ExecutableLoadFile. The returned list of SecureComponentProfiles SHALL not contain any duplicate entries.\"\n      operationId: listElfRelatedSecureComponentProfiles\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/elfId\"\n      - $ref: \"#/components/parameters/serviceId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/SecureComponentProfile\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.6 Manage ApplicationConfigs ###\n# This section lists methods to create application configurations for EMs. An ApplicationConfig consists of parameters and certificates necessary for the provisioning of a specific kind of SC. An ApplicationConfig does not depend on a specific EM.\n# There are methods to list, upload, overwrite, and delete ApplicationConfigs, and to link PersonalizationScripts and Certificates to a certain ApplicationConfig.\n# The methods listed here do not provide functionality to link ApplicationConfigs to certain EMs. Linking ApplicationConfigs and EMs is done via methods listed in Section 4.1.6.4.\n# The methods listed here do not provide functionality to upload binary data for PersonalizationScripts or Certificates. Uploading those files is done via methods listed in Section 4.1.6.7 and Section 4.1.6.8.\n\n### 4.1.6.6.1 List ApplicationConfigs ###\n  /application-configs:\n    get:\n      tags:\n      - /application-configs\n      summary: \"List all ApplicationConfigs of the authenticated ServiceProvider.\"\n      description: \"List all ApplicationConfigs of the authenticated ServiceProvider.\"\n      operationId: listAppConfigs\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ApplicationConfig\"\n        400:\n          $ref: \"#/components/responses/400Error_1002\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.6.2 Create ApplicationConfig ###\n  #/application-configs:\n    post:\n      tags:\n      - /application-configs\n      summary: \"Create a new ApplicationConfig.\"\n      description: \"Create a new ApplicationConfig.\"\n      operationId: createAppConfig\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: application/json\n      ##### Accept: application/json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ApplicationConfig\"\n            example:\n              instanceAid: \"A00000089316631C0000\"\n              name: \"XX-413D-58\"\n              description: \"Description of this ApplicationConfig.\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApplicationConfig\"\n        400:\n          $ref: \"#/components/responses/400Error_1003_1004_1007_1008_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.6.3 Get ApplicationConfig ###\n  /application-configs/{applicationConfigId}:\n    get:\n      tags:\n      - /application-configs\n      summary: \"Get details of a certain ApplicationConfig.\"\n      description: \"Get details of a certain ApplicationConfig.\"\n      operationId: getAppConfig\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/applicationConfigId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApplicationConfig\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.6.4 Modify ApplicationConfig ###\n  #/application-configs/{applicationConfigId}:\n    put:\n      tags:\n      - /application-configs\n      summary: \"Update details of an existing ApplicationConfig.\"\n      description: \"Update details of an existing ApplicationConfig.\"\n      operationId: modifyAppConfig\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: application/json\n      ##### Accept: application/json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ApplicationConfig\"\n            example:\n              instanceAid: \"A00000089316631C0000\"\n              name: \"XX-413D-58\"\n              description: \"Description of this ApplicationConfig.\"\n      parameters:\n      - $ref: \"#/components/parameters/applicationConfigId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApplicationConfig\"\n        400:\n          $ref: \"#/components/responses/400Error_1005_1006_1007_1008_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.6.5 Delete ApplicationConfig ###\n  #/application-configs/{applicationConfigId}:\n    delete:\n      tags:\n      - /application-configs\n      summary: \"Delete a certain ApplicationConfig. All data is deleted. Referenc...\"\n      description: \"Delete a certain ApplicationConfig. All data is deleted. Referenced Certificates and PersonalizationScripts are not deleted. Deletion SHALL only be possible if the ApplicationConfig is not referenced in any Flavor and thus is not in use anywhere.\"\n      operationId: deleteAppConfig\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/applicationConfigId\"\n      responses:\n        204:\n          description: \"item deleted sucessfully\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009_1010\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.6.6 List Related EMs ###\n  /application-configs/{applicationConfigId}/executable-modules:\n    get:\n      tags:\n      - /application-configs\n      summary: \"List all ExecutableModules that use a certain ApplicationConfig.\"\n      description: \"List all ExecutableModules that use a certain ApplicationConfig.\"\n      operationId: listAppConfigRelatedEms\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/applicationConfigId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ExecutableModule\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.6.7 List Related Flavors ###\n  /application-configs/{applicationConfigId}/flavors:\n    get:\n      tags:\n      - /application-configs\n      summary: \"List all Flavors that use a certain ApplicationConfig.\"\n      description: \"List all Flavors that use a certain ApplicationConfig.\"\n      operationId: listAppConfigRelatedFlavors\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/applicationConfigId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Flavor\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.6.8 List Related Services ###\n  /application-configs/{applicationConfigId}/services:\n    get:\n      tags:\n      - /application-configs\n      summary: \"List all Services that use a certain ApplicationConfig.\"\n      description: \"List all Services that use a certain ApplicationConfig.\"\n      operationId: listAppConfigRelatedServices\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/applicationConfigId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Service\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.7 Manage PersonalizationScripts ###\n# This section lists methods to upload and manage PersonalizationScripts. A PersonalizationScript is a binary script a SP may use to specify installation instructions or request TSM-support for, e.g., the personalization of a secure application during the provisioning process. A PersonalizationScript is independent of specific EMs and can be linked to an ApplicationConfig.\n# There are methods to list, get, upload, and delete PersonalizationScripts.\n# The methods listed here do not provide functionality to link a PersonalizationScript to an ApplicationConfig or EM. Linking a PersonalizationScript to an ApplicationConfig is done via methods listed in Section 4.1.6.6 , indirect linking to EMs is done via methods listed in Section 4.1.6.4.\n\n### 4.1.6.7.1 List PersonalizationScripts ###\n  /personalization-scripts:\n    get:\n      tags:\n      - /personalization-scripts\n      summary: \"List all PersonalizationScripts of the authenticated ServiceProvider.\"\n      description: \"List all PersonalizationScripts of the authenticated ServiceProvider.\"\n      operationId: listPersoScripts\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/PersonalizationScript\"\n        400:\n          $ref: \"#/components/responses/400Error_1002\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.7.2 Create PersonalizationScript and Upload Binary ###\n  #/personalization-scripts:\n    post:\n      tags:\n      - /personalization-scripts\n      summary: \"Create a new PersonalizationScript and upload corresponding binar...\"\n      description: \"Create a new PersonalizationScript and upload corresponding binary data.\"\n      operationId: createPersoScriptAndUploadBinary\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: multipart/form-data; boundary=\u003c\u003cboundary\u003e\u003e\n      ##### Accept: application/json\n      requestBody:\n        $ref: \"#/components/requestBodies/binaryPersoScript\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PersonalizationScript\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1011_1012_1013_1014\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.7.3 Get PersonalizationScript ###\n  /personalization-scripts/{personalizationScriptId}:\n    get:\n      tags:\n      - /personalization-scripts\n      summary: \"Get details of a certain PersonalizationScript.\"\n      description: \"Get details of a certain PersonalizationScript.\"\n      operationId: getPersoScript\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/personalizationScriptId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PersonalizationScript\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.7.4 Modify PersonalizationScript and Overwrite Binary ###\n  #/personalization-scripts/{personalizationScriptId}:\n    put:\n      tags:\n      - /personalization-scripts\n      summary: \"Update details and overwrite binary data of an existing Personali...\"\n      description: \"Update details and overwrite binary data of an existing PersonalizationScript.\"\n      operationId: modifyPersoScriptAndOverwriteBinary\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: multipart/form-data; boundary=\u003c\u003cboundary\u003e\u003e\n      ##### Accept: application/json\n      requestBody:\n        $ref: \"#/components/requestBodies/binaryPersoScript\"\n      parameters:\n      - $ref: \"#/components/parameters/personalizationScriptId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PersonalizationScript\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.7.5 Delete PersonalizationScript ###\n  #/personalization-scripts/{personalizationScriptId}:\n    delete:\n      tags:\n      - /personalization-scripts\n      summary: \"Delete a certain PersonalizationScript. All data, including binar...\"\n      description: \"Delete a certain PersonalizationScript. All data, including binary data, is deleted. Deletion SHALL only be possible if the PersonalizationScript is not referenced in any ApplicationConfig and thus is not in use anywhere.\"\n      operationId: deletePersoScript\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/personalizationScriptId\"\n      responses:\n        204:\n          description: \"item deleted sucessfully\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009_1010\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.7.6 List Related ApplicationConfigs ###\n  /personalization-scripts/{personalizationScriptId}/application-configs:\n    get:\n      tags:\n      - /personalization-scripts\n      summary: \"List all ApplicationConfigs that use a certain PersonalizationScript.\"\n      description: \"List all ApplicationConfigs that use a certain PersonalizationScript.\"\n      operationId: listScriptRelatedAppConfigs\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/personalizationScriptId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ApplicationConfig\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.7.7 Get Binary ###\n  /personalization-scripts/{personalizationScriptId}/binary:\n    get:\n      tags:\n      - /personalization-scripts\n      summary: \"Get binary data of a certain PersonalizationScript.\"\n      description: \"Get binary data of a certain PersonalizationScript.\"\n      operationId: getScriptBinary\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/personalizationScriptId\"\n      responses:\n        200:\n          $ref: \"#/components/responses/200Binary_Script\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.7.8 List Related Flavors ###\n  /personalization-scripts/{personalizationScriptId}/flavors:\n    get:\n      tags:\n      - /personalization-scripts\n      summary: \"List all Flavors that use a certain PersonalizationScript.\"\n      description: \"List all Flavors that use a certain PersonalizationScript.\"\n      operationId: listScriptRelatedFlavors\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/personalizationScriptId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Flavor\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.7.9 List Related Services ###\n  /personalization-scripts/{personalizationScriptId}/services:\n    get:\n      tags:\n      - /personalization-scripts\n      summary: \"List all Services that use a certain PersonalizationScript.\"\n      description: \"List all Services that use a certain PersonalizationScript.\"\n      operationId: listScriptRelatedServices\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/personalizationScriptId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Service\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.8 Manage Certificates ###\n# This section lists methods to manage the TLS certificates which are used for communication with a SP backend requested by PersonalizationScripts (if applicable) and for communication between TSM and SPOS.\n# There are methods to list, get, upload, and delete Certificates.\n# The methods listed here do not provide functionality to link a Certificate to certain ApplicationConfigs or SposConfigs. Linking Certificates to ApplicationConfigs is done via methods listed in Section 4.1.6.6, and linking to SposConfigs is done using methods listed in Section 4.1.6.9.\n\n### 4.1.6.8.1 List Certificates ###\n  /certificates:\n    get:\n      tags:\n      - /certificates\n      summary: \"List all Certificates of the authenticated ServiceProvider.\"\n      description: \"List all Certificates of the authenticated ServiceProvider.\"\n      operationId: listCerts\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Certificate\"\n        400:\n          $ref: \"#/components/responses/400Error_1002\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.8.2 Create Certificate and Upload Binary ###\n  #/certificates:\n    post:\n      tags:\n      - /certificates\n      summary: \"Create a new Certificate and upload corresponding binary data.\"\n      description: \"Create a new Certificate and upload corresponding binary data.\"\n      operationId: createCertAndUploadBinary\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: multipart/form-data; boundary=\u003c\u003cboundary\u003e\u003e\n      ##### Accept: application/json\n      requestBody:\n        $ref: \"#/components/requestBodies/binaryCertificate\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Certificate\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1011_1012_1013_1014\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.8.3 Get Certificate ###\n  /certificates/{certificateId}:\n    get:\n      tags:\n      - /certificates\n      summary: \"Get details of a certain Certificate.\"\n      description: \"Get details of a certain Certificate.\"\n      operationId: getCert\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/certificateId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Certificate\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.8.4 Modify Certificate and Overwrite Binary ###\n  #/certificates/{certificateId}:\n    put:\n      tags:\n      - /certificates\n      summary: \"Update details and overwrite binary data of an existing Certificate.\"\n      description: \"Update details and overwrite binary data of an existing Certificate.\"\n      operationId: modifyCertAndOverwriteBinary\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: multipart/form-data; boundary=\u003c\u003cboundary\u003e\u003e\n      ##### Accept: application/json\n      requestBody:\n        $ref: \"#/components/requestBodies/binaryCertificate\"\n      parameters:\n      - $ref: \"#/components/parameters/certificateId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Certificate\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.8.5 Delete Certificate ###\n  #/certificates/{certificateId}:\n    delete:\n      tags:\n      - /certificates\n      summary: \"Delete a certain Certificate. All data, including binary data, is...\"\n      description: \"Delete a certain Certificate. All data, including binary data, is deleted. Deletion SHALL only be possible if the Certficate is not referenced in any ApplicationConfig or SposConfig and thus is not in use anywhere.\"\n      operationId: deleteCert\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/certificateId\"\n      responses:\n        204:\n          description: \"item deleted sucessfully\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009_1010\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.8.6 List Related ApplicationConfigs ###\n  /certificates/{certificateId}/application-configs:\n    get:\n      tags:\n      - /certificates\n      summary: \"List all ApplicationConfigs that use a certain Certificate.\"\n      description: \"List all ApplicationConfigs that use a certain Certificate.\"\n      operationId: listCertRelatedAppConfigs\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/certificateId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ApplicationConfig\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.8.7 Get Binary ###\n  /certificates/{certificateId}/binary:\n    get:\n      tags:\n      - /certificates\n      summary: \"Get binary data of a certain Certificate.\"\n      description: \"Get binary data of a certain Certificate.\"\n      operationId: getCertBinary\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/certificateId\"\n      responses:\n        200:\n          $ref: \"#/components/responses/200Binary_Cert\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.8.8 List Related Flavors ###\n  /certificates/{certificateId}/flavors:\n    get:\n      tags:\n      - /certificates\n      summary: \"List all Flavors that use a certain Certificate.\"\n      description: \"List all Flavors that use a certain Certificate.\"\n      operationId: listCertRelatedFlavors\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/certificateId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Flavor\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.8.9 List Related Services ###\n  /certificates/{certificateId}/services:\n    get:\n      tags:\n      - /certificates\n      summary: \"List all Services that use a certain Certificate.\"\n      description: \"List all Services that use a certain Certificate.\"\n      operationId: listCertRelatedServices\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/certificateId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Service\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.8.10 List Related SposConfigs ###\n  /certificates/{certificateId}/spos-configs:\n    get:\n      tags:\n      - /certificates\n      summary: \"List all SposConfigs that use a certain Certificate.\"\n      description: \"List all SposConfigs that use a certain Certificate.\"\n      operationId: listCertRelatedSposConfigs\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/certificateId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/SposConfig\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.9 Manage SposConfigs ###\n# This section lists methods to manage SposConfigs.\n\n### 4.1.6.9.1 List SposConfigs ###\n  /spos-configs:\n    get:\n      tags:\n      - /spos-configs\n      summary: \"List all SposConfigs of the authenticated ServiceProvider.\"\n      description: \"List all SposConfigs of the authenticated ServiceProvider.\"\n      operationId: listSposConfigs\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/SposConfig\"\n        400:\n          $ref: \"#/components/responses/400Error_1002\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.9.2 Create SposConfig ###\n  #/spos-configs:\n    post:\n      tags:\n      - /spos-configs\n      summary: \"Create a new SposConfig and set all corresponding details.\"\n      description: \"Create a new SposConfig and set all corresponding details.\"\n      operationId: createSposConfig\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: application/json\n      ##### Accept: application/json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SposConfig\"\n            example:\n              url: \"/relative/uri/to/resource\"\n              certificateId: \"652f7175-d33a-0616-cf61-0451f2587361\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SposConfig\"\n        400:\n          $ref: \"#/components/responses/400Error_1003_1004_1007_1008_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.9.3 Get SposConfig ###\n  /spos-configs/{sposConfigId}:\n    get:\n      tags:\n      - /spos-configs\n      summary: \"Get details of a certain SposConfig.\"\n      description: \"Get details of a certain SposConfig.\"\n      operationId: getSposConfig\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/sposConfigId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SposConfig\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.9.4 Modify SposConfig ###\n  #/spos-configs/{sposConfigId}:\n    put:\n      tags:\n      - /spos-configs\n      summary: \"Update details of an existing SposConfig.\"\n      description: \"Update details of an existing SposConfig.\"\n      operationId: modifySposConfig\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Content-Type: application/json\n      ##### Accept: application/json\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SposConfig\"\n            example:\n              url: \"/relative/uri/to/resource\"\n              certificateId: \"652f7175-d33a-0616-cf61-0451f2587361\"\n      parameters:\n      - $ref: \"#/components/parameters/sposConfigId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SposConfig\"\n        400:\n          $ref: \"#/components/responses/400Error_1005_1006_1007_1008_1009\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.9.5 Delete SposConfig ###\n  #/spos-configs/{sposConfigId}:\n    delete:\n      tags:\n      - /spos-configs\n      summary: \"Delete a certain SposConfig. All data is deleted. Deletion SHALL ...\"\n      description: \"Delete a certain SposConfig. All data is deleted. Deletion SHALL only be possible if the SposConfig is not referenced in any Service and thus is not in use anywhere.\"\n      operationId: deleteSposConfig\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/sposConfigId\"\n      responses:\n        204:\n          description: \"item deleted sucessfully\"\n        400:\n          $ref: \"#/components/responses/400Error_1002_1009_1010\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\n### 4.1.6.9.6 List Related Services ###\n  /spos-configs/{sposConfigId}/services:\n    get:\n      tags:\n      - /spos-configs\n      summary: \"List all Services that use a certain SposConfig.\"\n      description: \"List all Services that use a certain SposConfig.\"\n      operationId: listSposConfigRelatedServices\n      ##### Request Headers:\n      security:\n        - authToken: []\n      ##### Accept: application/json\n      ##### Request Body: -\n      parameters:\n      - $ref: \"#/components/parameters/sposConfigId\"\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Service\"\n        400:\n          $ref: \"#/components/responses/400Error_1002\"\n        401:\n          $ref: \"#/components/responses/401Error_1000\"\n        500:\n          $ref: \"#/components/responses/500Error_2000\"\n\ncomponents:\n\n  parameters:\n  \n    scpId:\n      in: path\n      name: scpId\n      required: true\n      schema:\n        type: string\n        format: uuid\n        maxLength: 36\n        minLength: 36\n        example: \"bc675568-34ac-40b0-abc0-03929b2d5ccd\"\n      description: identifier of the referred Scp\n    \n    serviceId:\n      in: path\n      name: serviceId\n      required: true\n      schema:\n        type: string\n        format: uuid\n        maxLength: 36\n        minLength: 36\n        example: \"e59d3d32-6756-76ac-ffff-feeba10c081a\"\n      description: identifier of the referred Service\n    \n    flavorId:\n      in: path\n      name: flavorId\n      required: true\n      schema:\n        type: string\n        format: uuid\n        maxLength: 36\n        minLength: 36\n        example: \"ff686d37-4674-1456-26fa-c9ed658bb41c\"\n      description: identifier of the referred Flavor\n    \n    tag:\n      in: path\n      name: tag\n      required: true\n      schema:\n        type: string\n        format: version\n        maxLength: 11\n        minLength: 5\n        pattern: '^\\d{1,3}.\\d{1,3}.\\d{1,3}$'\n        example: \"4.31.005\"\n      description: identifier of the referred Tag\n    \n    elfId:\n      in: path\n      name: elfId\n      required: true\n      schema:\n        type: string\n        format: uuid\n        maxLength: 36\n        minLength: 36\n        example: \"c73e8ddc-0318-7940-dc7d-ae5bab5ce549\"\n      description: identifier of the referred Elf\n    \n    emId:\n      in: path\n      name: emId\n      required: true\n      schema:\n        type: string\n        format: uuid\n        maxLength: 36\n        minLength: 36\n        example: \"4079f402-4e86-b4b0-0c4f-a21681ece9c8\"\n      description: identifier of the referred Em\n    \n    servideId:\n      in: path\n      name: servideId\n      required: true\n      schema:\n        type: string\n        format: uuid\n        maxLength: 36\n        minLength: 36\n        example: \"615c1678-895b-ff21-7c6c-bcd9fed11b84\"\n      description: identifier of the referred Servide\n    \n    applicationConfigId:\n      in: path\n      name: applicationConfigId\n      required: true\n      schema:\n        type: string\n        format: uuid\n        maxLength: 36\n        minLength: 36\n        example: \"a0f59df9-7ee2-161f-9325-46e1ecc0ecae\"\n      description: identifier of the referred ApplicationConfig\n    \n    personalizationScriptId:\n      in: path\n      name: personalizationScriptId\n      required: true\n      schema:\n        type: string\n        format: uuid\n        maxLength: 36\n        minLength: 36\n        example: \"5bd3cb36-3688-e41b-45b4-24abb956e2c5\"\n      description: identifier of the referred PersonalizationScript\n    \n    certificateId:\n      in: path\n      name: certificateId\n      required: true\n      schema:\n        type: string\n        format: uuid\n        maxLength: 36\n        minLength: 36\n        example: \"ffe6404d-0589-e66c-f837-3e89cfe3d19a\"\n      description: identifier of the referred Certificate\n    \n    sposConfigId:\n      in: path\n      name: sposConfigId\n      required: true\n      schema:\n        type: string\n        format: uuid\n        maxLength: 36\n        minLength: 36\n        example: \"f071b74c-ea66-b415-9a66-4ba06c637d13\"\n      description: identifier of the referred SposConfig\n    \n  requestBodies:\n  \n    binaryELF:\n      description: \"Binary data of ELF to be uploaded as part of a request body.\"\n      required: true\n      content:\n        multipart/form-data:\n          schema:\n            type: object\n            properties:\n              elf-filename:\n                description: filename of the ELF\n                type: string\n                example: elf-file.cap\n              elf-file:\n                description: containing actual elf-file\n                type: string\n                format: binary\n                example: \"01000101010011000100011000101101010001100110100101101100011001010010000001000011011011110110111001110100011001010110111001110100\"\n          encoding:\n            elf-filename:\n              contentType: text/plain\n            elf-file:\n              contentType: application/octet-stream\n    \n    binaryPersoScript:\n      description: \"Binary data of a personalization script to be uploaded as part of a request body.\"\n      required: true\n      content:\n        multipart/form-data:\n          schema:\n            type: object\n            properties:\n              script-filename:\n                description: filename of the personalization script\n                type: string\n                example: file.pers\n              script-file:\n                description: containing actual script-file\n                type: string\n                format: binary\n                example: \"01010011011000110111001001101001011100000111010000101101010001100110100101101100011001010010000001000011011011110110111001110100011001010110111001110100\"\n          encoding:\n            script-filename:\n              contentType: text/plain\n            script-file:\n              contentType: application/octet-stream\n    \n    binaryCertificate:\n      description: \"Binary data of a certificate to be uploaded as part of a request body.\"\n      required: true\n      content:\n        multipart/form-data:\n          schema:\n            type: object\n            properties:\n              cert-filename:\n                description: filename of the certificate\n                type: string\n                example: file.cert\n              cert-file:\n                description: containing actual cert-file\n                type: string\n                format: binary\n                example: \"0100001101100101011100100111010000101101010001100110100101101100011001010010000001000011011011110110111001110100011001010110111001110100\"\n          encoding:\n            cert-filename:\n              contentType: text/plain\n            cert-file:\n              contentType: application/octet-stream\n    \n  responses:\n  \n    200Binary_ELF:\n      description: Ok\n      headers:\n        Content-Disposition:\n          schema:\n            type: string\n            example: attachment; filename=\"filename.cap\"\n      content:\n        application/octet-data:\n          schema:\n            description: containing actual elf-binary\n            type: string\n            format: binary\n            example: \"01000101010011000100011000101101010001100110100101101100011001010010000001000011011011110110111001110100011001010110111001110100\"\n    \n    200Binary_Script:\n      description: Ok\n      headers:\n        Content-Disposition:\n          schema:\n            type: string\n            example: attachment; filename=\"filename.pers\"\n      content:\n        application/octet-data:\n          schema:\n            description: containing actual pers-binary\n            type: string\n            format: binary\n            example: \"01010011011000110111001001101001011100000111010000101101010001100110100101101100011001010010000001000011011011110110111001110100011001010110111001110100\"\n    \n    200Binary_Cert:\n      description: Ok\n      headers:\n        Content-Disposition:\n          schema:\n            type: string\n            example: attachment; filename=\"filename.cert\"\n      content:\n        application/octet-data:\n          schema:\n            description: containing actual cert-binary\n            type: string\n            format: binary\n            example: \"0100001101100101011100100111010000101101010001100110100101101100011001010010000001000011011011110110111001110100011001010110111001110100\"\n    \n    400Error_1002:\n      description: \"Bad Request - returned error category: 1002\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            errorCategory: 1002\n            errorMessage: \"Invalid: request body not allowed.\"\n    \n    400Error_1002_1009:\n      description: \"Bad Request - possible error categories: 1002, 1009\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            errorCategory: 1009\n            errorMessage: \"Not existing: \u003c\u003centityName\u003e\u003e with identifier '\u003c\u003cattributeValue\u003e\u003e' is not existing.\"\n    \n    400Error_1002_1009_1010:\n      description: \"Bad Request - possible error categories: 1002, 1009, 1010\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            errorCategory: 1010\n            errorMessage: \"Delete failed: \u003c\u003centityName\u003e\u003e is referenced in \u003c\u003centityNameWhereUsed\u003e\u003e.\"\n    \n    400Error_1002_1011_1012_1013_1014:\n      description: \"Bad Request - possible error categories: 1002, 1011, 1012, 1013, 1014\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            errorCategory: 1011\n            errorMessage: \"Upload failed: missing file.\"\n    \n    400Error_1003_1004_1007_1008_1009_1011_1012_1013_1014:\n      description: \"Bad Request - possible error categories: 1003, 1004, 1007, 1008, 1009, 1011, 1012, 1013, 1014\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            errorCategory: 1013\n            errorMessage: \"Upload failed: invalid file type. Supported file types are \u003c\u003cfileTypeList\u003e\u003e.\"\n    \n    400Error_1003_1004_1007_1008_1009:\n      description: \"Bad Request - possible error categories: 1003, 1004, 1007, 1008, 1009\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            errorCategory: 1003\n            errorMessage: \"Create failed: attribute \u003c\u003cattributeName\u003e\u003e not allowed for POST. It is automatically assigned when created.\"\n    \n    400Error_1003_1004_1007_1008_1009_1016:\n      description: \"Bad Request - possible error categories: 1003, 1004, 1007, 1008, 1009, 1016\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            errorCategory: 1004\n            errorMessage: \"Create failed: attribute \u003c\u003cattributeName\u003e\u003e is missing, but it is mandatory for \u003c\u003centityName\u003e\u003e.\"\n    \n    \n    400Error_1005_1006_1007_1008_1009:\n      description: \"Bad Request - possible error categories: 1005, 1006, 1007, 1008, 1009\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            errorCategory: 1005\n            errorMessage: \"Modify failed: attribute \u003c\u003cattributeName\u003e\u003e not allowed for PUT. Attribute cannot be modified after creation.\"\n    \n    400Error_1005_1006_1007_1008_1009_1011_1012_1013_1014_1015_1016:\n      description: \"Bad Request - possible error categories: 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            errorCategory: 1007\n            errorMessage: \"Unknown: ‘\u003c\u003cattributeName\u003e\u003e’ is not a valid attribute.\"\n    \n    400Error_1005_1006_1007_1008_1009_1015_1016:\n      description: \"Bad Request - possible error categories: 1005, 1006, 1007, 1008, 1009, 1015, 1016\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            errorCategory: 1015\n            errorMessage: \"Already Published: \u003c\u003centityName\u003e\u003e cannot be modified. It is already published via Flavor identifier ‘\u003c\u003cattributeValue\u003e\u003e’.\"\n    \n    400Error_1005_1006_1007_1008_1009_1016:\n      description: \"Bad Request - possible error categories: 1005, 1006, 1007, 1008, 1009, 1016\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            errorCategory: 1016\n            errorMessage: \"Technical constraints failed: minimal \u003c\u003cattributeName\u003e\u003e version not supported by SecureComponentProfile.\"\n    \n    400Error_1008_1009:\n      description: \"Bad Request - possible error categories: 1008, 1009\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            errorCategory: 1008\n            errorMessage: \"Invalid format '\u003c\u003cattributeValue\u003e\u003e' for \u003c\u003c attributeName\u003e\u003e. Supported format is \u003c\u003cformatDefinition\u003e\u003e.\"\n    \n    400Error_1008_1009_1015:\n      description: \"Bad Request - possible error categories: 1008, 1009, 1015\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            errorCategory: 1008\n            errorMessage: \"Invalid format '\u003c\u003cattributeValue\u003e\u003e' for \u003c\u003c attributeName\u003e\u003e. Supported format is \u003c\u003cformatDefinition\u003e\u003e.\"\n    \n    400Error_1008_1009_1015_1016:\n      description: \"Bad Request - possible error categories: 1008, 1009, 1015, 1016\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            errorCategory: 1015\n            errorMessage: \"Already Published: \u003c\u003centityName\u003e\u003e cannot be modified. It is already published via Flavor identifier ‘\u003c\u003cattributeValue\u003e\u003e’.\"\n    \n    400Error_1008_1009_1016:\n      description: \"Bad Request - possible error categories: 1008, 1009, 1016\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            errorCategory: 1016\n            errorMessage: \"Technical constraints failed: minimal \u003c\u003cattributeName\u003e\u003e version not supported by SecureComponentProfile.\"\n    \n    401Error_1000:\n      description: \"Unauthorized - returned error category: 1000\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            errorCategory: 1000\n            errorMessage: \"Not authenticated\"\n    \n    401Error_1001:\n      description: \"Unauthorized - returned error category: 1001\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            errorCategory: 1001\n            errorMessage: \"Authentication failed.\"  \n    \n    403Error_1000:\n      description: \"Forbidden - returned error category: 1000\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            errorCategory: 1000\n            errorMessage: \"Not authenticated\"\n    \n    500Error_2000:\n      description: \"Internal Server Error - possible error categories: \u003e= 2000\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            errorCategory: 2000\n            errorMessage: \"Internal server error: Sample error reason\"\n    \n  securitySchemes:\n  \n    LongtermToken:\n      type: \"http\"\n      scheme: bearer\n    \n    authToken:\n      type: \"http\"\n      scheme: bearer\n    \n### 4.1.4 ###\n  schemas:\n  \n### 4.1.4.0 ###\n  \n    auth-Token:\n      description: Short-term bearer token, that is used to access Backend-API functions.\n      type: string\n      #format: uuid\n      example: \"a cryptographic token, transmitted as part of the request header\"\n\n### 4.1.4.1 ###\n    ServiceProvider:\n      description: \"The top-level entity of the data model is a ServiceProvider. The ServiceProvider entity of the data model represents the ('real-life') SP, and both terms will be used interchangeable. The access to resources that are associated with a ServiceProvider is always restricted to the users that are associated with that ServiceProvider. A ServiceProvider has one or more Service entities and zero or more SposConfig entities. The SP can check and modify account information via a REST-API with the following attributes:\"\n      type: object\n      required: [name]\n      properties:\n        id: # A, No\n          description: \"Unique identification of the SP.\"\n          type: string\n          format: uuid\n          readOnly: true\n          example: \"6c4a3aa8-5240-ad98-4673-a820be2df3b0\"\n        name: # M, Yes\n          description: \"Name of the SP.\"\n          type: string\n          maxLength: 255\n          example: \"nameOfTheSp\"\n\n### 4.1.4.2 ###\n    Service:\n      description: \"A Service (as an entity of the data model) represents all data needed for the life-cycle management of a secure application. Services are the key elements for the communication between TSM-Backend and TSM-API. A Service may have multiple Versions with multiple Flavors, which in turn may contain different ELFs. A Service is associated with zero to one SposConfigs. A Service has the following attributes:\"\n      type: object\n      required: [name]\n      properties:\n        id: # A, No\n          description: \"Unique identification of the Service.\"\n          type: string\n          format: uuid\n          readOnly: true\n          example: \"fde02274-914f-b360-c679-74970a9d6cef\"\n        name: # M, Yes\n          description: \"Name of the Service.\"\n          type: string\n          maxLength: 255\n          example: \"nameOfTheService\"\n        creationDate: # A, No\n          description: \"A datetime string (creation of Service).\"\n          type: string\n          format: date-time\n          readOnly: true\n        sdAid: # A, No\n          description: \"AID of the specific security domain that is created for every Service Instance. The AID format follows [ISO/IEC7816-4].\"\n          type: string\n          format: aid\n          readOnly: true\n          example: \"A00000025128620C1110\"\n        accessAuthorizedDeviceApps: # O, Yes\n          description: \"List of apps for which an access rule is created when an instance of this Service is activated.\"\n          type: array\n          items:\n            type: string\n            format: aid\n          example: [ \"A00000039998960C1111\", \"A00000086243583C0111\", \"A00000052220986C0110\" ]\n        sposConfigId: # O, Yes\n          description: \"ID of the SposConfig used for this Service.\"\n          type: string\n          format: uuid\n          example: \"de10f784-d526-618f-443f-2a98cb2c9893\"\n        spParameters: # O, Yes\n          description: \"Key value definitions used as parameters of a Service. Those parameters can be retrieved via TSM-API. The parameters can be overwritten for each Flavor.\"\n          type: object\n          additionalProperties:\n            type: string\n            maxLength: 255\n          example: { param1: \"Value1 which can be evaluated by the App.\", param2: \"Value2 which can be evaluated by the App.\", param3: \"Value3 which can be evaluated by the App.\" }\n\n### 4.1.4.3 ###\n    Version:\n      description: \"A Service can be provided in different Versions. Each Version may have multiple Flavors. Each Flavor defines a set of configurations and ELF files to support a certain hardware platform. The matching of a Flavor to specific SCs is managed via the attribute allowedDeployments. This attribute is a map where one or multiple SecureComponentProfiles are assigned to a specific Flavor. A SecureComponentProfile describes the hardware platform(s) a Flavor is supporting. Thus, inside the Version, a SP MUST define which ELF is used for which hardware platform. The SP also MAY add platform specific configurations. A TSM provider MUST ensure that the FlavorIds and SecureComponentProfileIds are unique for a Version. In the same Version it is not supported to assign a SecureComponentProfile to multiple Flavors or vice versa. A TSM provider MUST also perform a compatibility check when the allowedDeployments attribute is modified. Here, a TSM provider SHALL compare the ELF files with the assigned SecureComponentProfiles, e.g. to check for JavaCard version mismatch or missing CSP support. Such a compatibility check might also be needed when an ELF or a Flavor is modified. The Version is mutable, thus it is allowed to modify a Version when it is already deployed on a device. With this, the SP can assign new SecureComponentProfiles to an existing Version to increase the amount of devices supported by this Version. The SP can also remove SecureComponentProfiles from an existing Version, e.g., in case of a security incident. A Version has the following attributes:\"\n      type: object\n      required: [tag, allowedDeployments]\n      properties:\n        tag: # M, No\n          description: \"Tag of the Version in the format \u003cMajor\u003e.\u003cMinor\u003e.\u003cRevision\u003e The tag must be unique for a Service, since tag is used to reference the Version.\"\n          type: string\n          format: version\n          maxLength: 11\n          minLength: 5\n          pattern: '^\\d{1,3}.\\d{1,3}.\\d{1,3}$'\n          readOnly: true\n          example: \"3.1.4\"\n        allowedDeployments: # M, Yes\n          description: \"Map, which associates Flavors (see 4.1.4.4) to one or multiple SecureComponentProfiles (see 4.1.4.5). By this, Flavors linked to this Version are assigned to concrete hardware platforms as 1-n association. The key of the map contains the FlavorId. The value of the map is a list of SecureComponentProfileIds. Specific FlavorIds and SecureComponentProfileIds can only be used once inside a Version, i.e., inside a Version it is not supported to assign a SecureComponentProfile to multiple Flavors or vice versa.\"\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n              maxLength: 255\n\n### 4.1.4.4 ###\n    Flavor:\n      description: \"Services, respectively Versions, can be provided in different Flavors to solve interoperability problems when provisioning Services to different SC platforms. Simply speaking, a Flavor is a certain variant of a Service. A Flavor consists of zero or more ExecutableLoadFile entities, zero or more ApplicationInstantiationConfigs, and exactly one FeatureConfig entity. Flavors need to be published before they can be used for installation. After publishing a Flavor, certain data attributes of the Flavor cannot be modified anymore. The purpose is to avoid the problem that Flavor modifications done on a Flavor which is already installed might lead to inconsistencies on the handset. The allocation of a Flavor to one or multiple SecureComponentProfiles is done via the allowedDeployments attribute of the parent Version of each Flavor. A Flavor has the following attributes:\"\n      type: object\n      #required: []\n      properties:\n        id: # A, No\n          description: \"Unique identification of the Flavor. The id shall be used to check the necessity of applet reinstallation during the Version update process, for use cases when the same Flavor is used for different Versions.\"\n          type: string\n          format: uuid\n          readOnly: true\n          example: \"167f43e0-2ada-d0d0-ba18-b23fd6accd18\"\n        name: # O, Yes\n          description: \"Name of this Flavor.\"\n          type: string\n          maxLength: 255\n          example: \"nameOfThisFlavor\"\n        description: # O, Yes\n          description: \"Additional description for this Flavor.\"\n          type: string\n          maxLength: 255\n          example: \"Additional description for this Flavor.\"\n        creationDate: # A, No\n          description: \"A datetime string (creation of Flavor).\"\n          type: string\n          format: date-time\n          readOnly: true\n        published: # A, No\n          description: \"A Flavor can only be used for deployment if it is published. Once published, modification of the following attributes is no longer possible -\u003e executableLoadFileIds -\u003e applicationInstantation Configs Default value is false. The value can be changed to true via the interface method Publish Flavor (see Section 4.1.6.4.15). Once published (value set to true), a Flavor cannot be reversed to an unpublished state again.\"\n          type: boolean\n          default: false\n          readOnly: true\n        executableLoadFileIds: # O, C\n          description: \"List of IDs of ELFs used by this Flavor. Modifications are only possible, as long as the Flavor is not yet published.\"\n          type: array\n          items:\n            type: string\n            format: uuid\n          example: [ \"bb5c8384-f856-ca00-2b52-bcf9f45e1f39\", \"39fb1716-4a34-87ab-18be-8ee81e7f2d67\", \"bb451440-fdc1-1983-43f2-df17104a4715\" ]\n        applicationInstantiationConfigs: # O, C\n          description: \"List to link and prioritize EMs and ApplicationConfigs. Modifications are only possible, as long as the Flavor is not yet published.\"\n          type: array\n          items:\n            $ref: \"#/components/schemas/ApplicationInstantiationConfig\"\n        spParameters: # O, Yes\n          description: \"Key value definitions used as parameters of a service. Those parameters can be retrieved via TSM-API. For the parameters returned by TSM-API the key value pairs are combined with key values pairs of spParameters contained in the Service definition. For pairs with identical keys, the key value pairs of the given flavor take presence over the corresponding pairs contained in spParameters of the Service definition..\"\n          type: object\n          additionalProperties:\n            type: string\n            maxLength: 255\n          example: { param1: \"Value1 which can be evaluated by the App.\", param2: \"Value2 which can be evaluated by the App.\", param3: \"Value3 which can be evaluated by the App.\" }\n        featureConfig: # O, Yes\n          $ref: \"#/components/schemas/FeatureConfig\" # \"Used to indicate the use of features that must be supported by a SC which is associated to the Flavor as part of allowedDeployments attribute of a Version applied for deployment.\"\n        contextSpecificAttributes: # O, Yes\n          description: \"Additional context specific configuration settings (e.g. platform specific CSP patch level). Possible options are defined bilateral between SP and TSMS provider.\"\n          type: object\n          additionalProperties:\n            type: string\n            maxLength: 255\n          example: { param1: \"Value1 which can be evaluated by the App.\", param2: \"Value2 which can be evaluated by the App.\", param3: \"Value3 which can be evaluated by the App.\" }\n\n### 4.1.4.5 ###\n    SecureComponentProfile:\n      description: \"A SecureComponentProfile describes a secure component by its properties like JavaCard version, operating system name and version, chip identifier etc. The SP can retrieve this list via the TSM-Backend REST-API to determine supported hardware platforms. With this information, the SP can prepare the necessary ELF files and configure a corresponding Flavor. Finally, the SP assigns specific SecureComponentProfiles to this Flavor to control on which platforms it shall be deployed. This is done via the allowedDeployments attribute of the Version (see Section 4.1.4.3.) A SecureComponentProfile has the following attributes:\"\n      type: object\n      required: [name, scType, hardwarePlatform, os, osVersion, javaCardVersion, javaCardFeatures, gpSpecVersions, gpApiVersions, csp, certifications]\n      properties:\n        id: # A, No\n          description: \"Unique identification of the Secure Component Profile assigned automatically by TSMS.\"\n          type: string\n          format: uuid\n          readOnly: true\n          example: \"fd4aad1f-50f8-1534-aeab-652bafa65604\"\n        name: # M, No\n          description: \"Name of the SecureComponentProfile.\"\n          type: string\n          maxLength: 255\n          readOnly: true\n          example: \"nameOfTheSecurecomponentprofile\"\n        scType: # M, No\n          description: \"Secure component type. One of -\u003e 1 EMBEDDED_SE -\u003e 2 EMBEDDED_UICC -\u003e 3 REMOVABLE_EUICC -\u003e 4 UICC\"\n          type: integer\n          minimum: 1\n          maximum: 4\n          readOnly: true\n          example: 1\n        hardwarePlatform: # M, No\n          description: \"Name of hardware platform / chip. Sample values are P62G98, S9FD2EE.\"\n          type: string\n          maxLength: 255\n          readOnly: true\n          example: \"P62G98\"\n        os: # M, No\n          description: \"Secure component operating system name, e.g. GTO, JCOP.\"\n          type: string\n          maxLength: 255\n          readOnly: true\n          example: \"JCOP\"\n        osVersion: # M, No\n          description: \"Version of operating system with vendor specific encoding. Sample values are 4.7, 3.1.\"\n          type: string\n          maxLength: 7\n          minLength: 3\n          pattern: '^\\d{1,3}.\\d{1,3}$'\n          readOnly: true\n          example: \"4.7\"\n        javaCardVersion: # M, No\n          description: \"JavaCard version. Sample values are 3.0.5, 3.0.4.\"\n          type: string\n          format: version\n          maxLength: 11\n          minLength: 5\n          pattern: '^\\d{1,3}.\\d{1,3}.\\d{1,3}$'\n          readOnly: true\n          example: \"3.0.5\"\n        javaCardFeatures: # M, No\n          description: \"Features provided by the JavaCard. The key contains the name of the feature. The value contains a list of supported algorithm for each feature. Sample keys are -\u003e cypher -\u003e signature -\u003e messageDigest -\u003e randomData -\u003e keyBuilder -\u003e keyAgreement -\u003e checksum -\u003e keyPairAlgRsaOnCardGeneration -\u003e keyPairAlgRsaCrtOnCardGeneration -\u003e keyPairAlgDsaOnCardGeneration -\u003e keyPairAlgEcF2MOnCardGeneration -\u003e keyPairAlgEcFpOnCardGeneration -\u003e aeadCipher\"\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n              maxLength: 255\n          readOnly: true\n        gpSpecVersions: # M, No\n          description: \"Global Platform Specification versions. The key contains an identifier for the GP specification document. The value contains the version for each specification. Sample keys are -\u003e card -\u003e contactlessServices -\u003e scp03 -\u003e executableLoadFileUpgrade Sample values are 2.3.1, 2.3, 2.2.1.\"\n          type: object\n          additionalProperties:\n            type: string\n            maxLength: 255\n          readOnly: true\n          example: { \"card\": \"2.3.1\", \"contactlessServices\": \"2.3\" }\n        gpApiVersions: # M, No\n          description: \"GlobalPlatform API versions. The key contains an identifier for the GP API. The value contains the version for each API. Sample keys are -\u003e card -\u003e contactless -\u003e elfUpgrade Sample values are 1.7, 1.6.\"\n          type: object\n          additionalProperties:\n            type: string\n            maxLength: 255\n          readOnly: true\n          example: { \"card\": \"1.7\", \"contactless\": \"1.6\" }\n        csp: # M, No\n          description: \"Supported CSP. Empty when no CSP is available. Key contains an identifier for additional information about the CSP. Value contains the additional CSP information. Sample keys are -\u003e apiVersion -\u003e vendor\"\n          type: object\n          additionalProperties:\n            type: string\n            maxLength: 255\n          readOnly: true\n          example: { \"apiVersion\": \"1.0\", \"vendor\": \"nxp\" }\n        certifications: # M, No\n          description: \"Platform certification level. The key contains the identifier of the certification. The value contains the link to the letter of approval. Sample keys are -\u003e BSI-CC-PP-0084-2014 -\u003e BSI-CC-PP-0089-2015 -\u003e BSI-CC-PP-0099-2017 -\u003e BSI-CC-PP-0100-2018 -\u003e BSI-CC-PP-0104-2019 -\u003e BSI-CC-PP-0117-2022\"\n          type: object\n          additionalProperties:\n            type: string\n            maxLength: 255\n          readOnly: true\n          example: { \"BSI-CC-PP-0084-2014\": \"link/to/letter/of/approval/1\", \"BSI-CC-PP-0100-2018\": \"link/to/letter/of/approval/2\" }\n\n### 4.1.4.6 ###\n    FeatureConfig:\n      description: \"The FeatureConfig is part of a Flavor. It is used to indicate the use of features supported by a SC which is associated to the Flavor as part of the allowedDeployments attribute of a Version applied for deployment. The FeatureConfig data type is only used as a complex type inside Flavor and is not directly referenced in any API methods. Currently, it only has one attribute.\"\n      type: object\n      #required: []\n      properties:\n        cspFull: # O, Yes\n          description: \"True if the SC is required to support full CSP mode, false otherwise. Default value is false.\"\n          type: boolean\n          default: false\n        genericOptions: # O, Yes\n          description: \"Possibility to configure further feature options (e.g. key-agreement-algorithm, message-digest). Default value is an empty list.\"\n          type: object\n          additionalProperties:\n            type: boolean\n          default: {}\n\n### 4.1.4.7 ###\n    ApplicationInstantiationConfig:\n      description: \"The ApplicationInstantiationConfig contains the link between EM and the ApplicationConfig for a certain Flavor. A lower value of priority indicates that an ApplicationInstantiationConfig shall be applied before an ApplicationInstantiationConfig with a higher value of priority. If multiple ApplicationInstantiationConfigs within the same Flavor have the same priority value, the TSM will choose which one will be applied first. The ApplicationInstantiationConfig is only used as complex type inside Flavor and is not directly referenced in any API methods. It has the following attributes:\"\n      type: object\n      required: [executableModuleId, applicationConfigId]\n      properties:\n        priority: # A, Yes\n          description: \"Priority, which specifies the order in which an application should be instantiated. Must be in the range from 1 to 255. A lower value means a higher priority. Default value is 255.\"\n          type: integer\n          minimum: 1\n          maximum: 255\n        executableModuleId: # M, Yes\n          description: \"ID of the EM the referenced ApplicationConfig shall be applied to.\"\n          type: string\n          format: uuid\n          example: \"96f3baa5-d50c-84e4-b285-07b679aa6953\"\n        applicationConfigId: # M, Yes\n          description: \"ID of the ApplicationConfig that shall be applied to the referenced EM.\"\n          type: string\n          format: uuid\n          example: \"69c1eede-6767-ddbc-6c84-3903126e51b4\"\n\n### 4.1.4.8 ###\n    ExecutableLoadFile:\n      description: \"An ExecutableLoadFile (ELF) is an executable binary file that can be loaded onto a Secure Component. In SmartCard terminology, the ELF is a container of executable code on a secure component [GPC_SPE_034]. ELFs are essential components of a Flavor used by a Version of a Service. ELFs are uploaded by the SP and may be used in different Flavors. An ELF may contain zero or more ExecutableModule entities. The specific type of an ELF is determined at upload time. If the ELF is a CAP, the ELF AID is automatically extracted from the CAP. An ELF has the following attributes:\"\n      type: object\n      #required: []\n      properties:\n        id: # A, No\n          description: \"Unique identification of the ELF.\"\n          type: string\n          format: uuid\n          readOnly: true\n          example: \"a38d4f8a-a4d5-d5c9-b134-0657c74a9853\"\n        aid: # A, No\n          description: \"Package-ID of this ELF.\"\n          type: string\n          format: aid\n          readOnly: true\n          example: \"A00000030027697C0110\"\n        fileName: # A, Yes\n          description: \"Name of this ELF.\"\n          type: string\n          maxLength: 255\n          example: \"nameOfThisElf\"\n        type: # A, No\n          description: \"Type of this ELF. Currently, only CAP is supported.\"\n          type: string\n          maxLength: 255\n          readOnly: true\n        creationDate: # A, No\n          description: \"A datetime string (creation of ELF)\"\n          type: string\n          format: date-time\n          readOnly: true\n        uploadDate: # A, No\n          description: \"A datetime string (upload of ELF binary). Binary of an ELF can be replaced only as long as the ELF is not linked to a published Flavor.\"\n          type: string\n          format: date-time\n          readOnly: true\n\n### 4.1.4.9 ###\n    CAP:\n      description: \"A CAP is a Java Card realization of an ELF. It is derived from ExecutableLoadFile and adds the following attributes:\"\n      type: object\n      #required: []\n      properties:\n        packageName: # A, No\n          description: \"Name of the package of the CAP.\"\n          type: string\n          maxLength: 255\n          readOnly: true\n          example: \"nameOfThePackageOfTheCap\"\n        importedPackages: # A, No\n          description: \"List of imported package AIDs used by the EM of this CAP.\"\n          type: array\n          items:\n            type: string\n            maxLength: 255\n          readOnly: true\n        packageVersion: # A, No\n          description: \"Version of the package ('major.minor').\"\n          type: string\n          format: version\n          maxLength: 7\n          minLength: 3\n          pattern: '^\\d{1,3}.\\d{1,3}$'\n          readOnly: true\n          example: \"1.7\"\n        technicalRequirements: # O, Yes\n          $ref: \"#/components/schemas/TechnicalRequirements\" # \"Technical requirements needed for this CAP.\"\n\n### 4.1.4.10 ###\n    TechnicalRequirements:\n      description: \"The TechnicalRequirements data type is used to define technical requirements needed to execute a CAP. Those requirements are detected automatically when uploading the binary file and are checked against the SecureComponentProfiles when modifying the allowedDeployments of a Flavor. The TechnicalRequirements data type is only used as a complex type inside CAP and is not directly referenced in any API methods. It has the following attributes:\"\n      type: object\n      #required: []\n      properties:\n        javaCardVersion: # A, No\n          description: \"Version of Java Card required by the CAP ('major.minor.patch').\"\n          type: string\n          format: version\n          maxLength: 11\n          minLength: 5\n          pattern: '^\\d{1,3}.\\d{1,3}.\\d{1,3}$'\n          readOnly: true\n          example: \"2.3.1\"\n        gpApiVersion: # A, No\n          description: \"Version of GlobalPlatform API required by the CAP ('major.minor.patch').\"\n          type: string\n          format: version\n          maxLength: 7\n          minLength: 3\n          pattern: '^\\d{1,3}.\\d{1,3}$'\n          readOnly: true\n          example: \"5.12\"\n\n### 4.1.4.11 ###\n    ExecutableModule:\n      description: \"ExecutableModules (EMs) are contained in ELFs. Thus, an EM is always bound to an ELF. A specific example of an EM is a Java Card Applet. A Java Card Applet is a specific class which extends javacard.framework.Applet and is part of a CAP file, which is a technology-specific type of an ELF in this context. An EM has the following attributes:\"\n      type: object\n      #required: []\n      properties:\n        id: # A, No\n          description: \"Unique identification of the EM.\"\n          type: string\n          format: uuid\n          readOnly: true\n          example: \"26dffd3f-59fd-80b3-bc31-29dca2795831\"\n        aid: # A, No\n          description: \"Application identifier of this EM. The AID format follows [ISO/IEC7816-4].\"\n          type: string\n          format: aid\n          readOnly: true\n          example: \"A00000065553856C1001\"\n\n### 4.1.4.12 ###\n    ApplicationConfig:\n      description: \"An ApplicationConfig consists of parameters, certificates and other properties needed for provisioning applications. All configuration options defined here are applied to the secure component during deploy or update service commands triggered with the TSM-API. The ApplicationConfig itself is not dependent on a specific EM. In order to link it to an EM, the ApplicationConfig is referenced in an ApplicationInstantiationConfig within a Flavor by a mapping of available EMs and corresponding ApplicationConfigs. The same ApplicationConfigs can be used for EMs in different Flavors. An ApplicationConfig has the following attributes:\"\n      type: object\n      required: [instanceAid, installConfig]\n      properties:\n        id: # A, No\n          description: \"Unique identification of the ApplicationConfig.\"\n          type: string\n          format: uuid\n          readOnly: true\n          example: \"47db1f00-d894-af9a-a27b-1303d61fa3f4\"\n        instanceAid: # M, Yes\n          description: \"AID of the running application instance that shall be created from this ApplicationConfig. This AID is also the AID that is used for selecting a selectable application on the SC. The AID format follows [ISO/IEC7816-4].\"\n          type: string\n          format: aid\n          example: \"A00000037797423C1100\"\n        name: # O, Yes\n          description: \"Name of this ApplicationConfig.\"\n          type: string\n          maxLength: 255\n          example: \"nameOfThisApplicationconfig\"\n        description: # O, Yes\n          description: \"Description of this ApplicationConfig.\"\n          type: string\n          maxLength: 255\n          example: \"Description of this ApplicationConfig.\"\n        installConfig: # M, Yes\n          $ref: \"#/components/schemas/InstallConfig\" # \"Configuration settings applied to the running application instance during transition to lifecycle state Installed.\"\n        activationConfig: # O, Yes\n          $ref: \"#/components/schemas/ActivationConfig\" # \"Configuration settings applied to the running application instance during transition to lifecycle state Activated.\"\n        personalizationConfig: # O, Yes\n          $ref: \"#/components/schemas/PersonalizationConfig\" # \"Configuration settings applied to the running application instance during transition to lifecycle state Personalized.\"\n\n### 4.1.4.13 ###\n    InstallConfig:\n      description: \"An InstallConfig is a structure to configure configuration options needed to deploy a Service to lifecycle state Installed. It defines configuration settings which are applied to the applet during deploy or update processes triggered with the TSM-API when using the InstallServiceCommand parameter. The InstallConfig data type is only used as a complex type inside ApplicationConfig and is not directly referenced in any API methods. It has the following attributes:\"\n      type: object\n      #required: []\n      properties:\n        applicationSpecificInstallParameter: # O, Yes\n          description: \"List of application specific parameters needed for installation. If omitted, empty application specific parameters will be used. Format \u003cTLV-Structures\u003e.\"\n          type: string\n          format: tlv\n          maxLength: 255\n          example: \"0f 09 e6 ea e9 06 8d 89 19 a4 8a\"\n        privileges: # O, Yes\n          description: \"List of required privileges for an application instance. Subset of -\u003e 'CVMManagement' -\u003e 'ContactlessSelfActivation' -\u003e 'GlobalService' -\u003e 'PrivacyTrusted'\"\n          type: array\n          items:\n            type: string\n            maxLength: 255\n\n### 4.1.4.14 ###\n    ActivationConfig:\n      description: \"An ActivationConfig is a structure to configure configuration options needed to deploy a Service to lifecycle state Activated. It defines configuration settings which are applied to the applet during deploy or update processes triggered with the TSM-API when using the ActivateServiceCommand parameter. The ActivationConfig data type is only used as a complex type inside ApplicationConfig and is not directly referenced in any API methods. It has following attributes:\"\n      type: object\n      #required: []\n      properties:\n        makeSelectable: # O, Yes\n          description: \"Flag, whether application instance to be created shall be made selectable. If omitted, default value true will be used.\"\n          type: boolean\n          default: true\n        accessibleViaApdu: # O, Yes\n          description: \"Flag, whether the application instance to be created will be accessible via APDU. Can only be applied if makeSelectable is true. If omitted, default value false will be used.\"\n          type: boolean\n          default: false\n        accessibleViaNfc: # O, Yes\n          description: \"Flag, whether the application instance to be created will be accessible via NFC. Can only be applied if makeSelectable is true. If omitted, default value false will be used.\"\n          type: boolean\n          default: false\n\n### 4.1.4.15 ###\n    PersonalizationConfig:\n      description: \"A PersonalizationConfig is a structure to configure configuration options needed to deploy a Service to lifecycle state Personalized. It defines configuration settings which are applied to the applet during deploy or update processes triggered with the TSM-API when using the PersonalizeServiceCommand parameter. The PersonalizationConfig data type is only used as a complex type inside ApplicationConfig and is not directly referenced in any API methods. It has the following attributes:\"\n      type: object\n      #required: []\n      properties:\n        certificateId: # O, Yes\n          description: \"ID of the Certificate, if needed for a PersonalizationScript.\"\n          type: string\n          format: uuid\n          example: \"8fa10eff-19a2-7c4b-1102-2e8b867d3fda\"\n        personalizationScriptId: # O, Yes\n          description: \"ID of the PersonalizationScript used for personalization.\"\n          type: string\n          format: uuid\n          example: \"8339dcd0-b9e1-6b73-b5f0-33793d4e2307\"\n        provideAttestationToken: # O, Yes\n          description: \"Flag, whether an AttestationToken shall be included in the application specific install parameters. If omitted, default value false will be used.\"\n          type: boolean\n          default: false\n        includeKeyDiversificationData: # O, Yes\n          description: \"Flag, whether Key Diversification Data shall be included in the Attestation Token. Can only be applied if provideAttestationToken is true. If omitted, default value false will be used.\"\n          type: boolean\n          default: false\n\n### 4.1.4.16 ###\n    PersonalizationScript:\n      description: \"A PersonalizationScript is a script a SP may use to specify installation instructions or request TSM-support for, e.g., the personalization of a secure application during the provisioning process. This interface only provides methods to manage the PersonalizationScripts and link them with Certificates for communication to a SP backend (if required). The content of the PersonalizationScript is currently not in the scope of this TR. A PersonalizationScript has the following attributes:\"\n      type: object\n      #required: []\n      properties:\n        id: # A, No\n          description: \"Unique identification of the Personalization-Script.\"\n          type: string\n          format: uuid\n          readOnly: true\n          example: \"060dc3ac-71dd-3bae-e00a-a8fe85ceb022\"\n        fileName: # A, Yes\n          description: \"Name of this PersonalizationScript.\"\n          type: string\n          maxLength: 255\n          example: \"nameOfThisPersonalizationscript\"\n        creationDate: # A, No\n          description: \"A datetime string (creation of Personalization-Script).\"\n          type: string\n          format: date-time\n          readOnly: true\n        uploadDate: # A, No\n          description: \"A datetime string (upload of Personalization-Script binary).\"\n          type: string\n          format: date-time\n          readOnly: true\n\n### 4.1.4.17 ###\n    Certificate:\n      description: \"A Certificate is used for the communication between TSM and SP Online System and also in PersonalizationScripts for applet provisioning and personalization. A Certificate has the following attributes:\"\n      type: object\n      #required: []\n      properties:\n        id: # A, No\n          description: \"Unique identification of the Certificate.\"\n          type: string\n          format: uuid\n          readOnly: true\n          example: \"2355d041-c1c6-4ab1-e0d2-a15a41e85351\"\n        fileName: # A, Yes\n          description: \"Name of the file the Certificate was created from.\"\n          type: string\n          maxLength: 255\n          example: \"nameOfTheFileTheCertificateWasCreatedFrom\"\n        creationDate: # A, No\n          description: \"A datetime string (creation of Certificate).\"\n          type: string\n          format: date-time\n          readOnly: true\n        uploadDate: # A, No\n          description: \"A datetime string (upload of Certificate binary).\"\n          type: string\n          format: date-time\n          readOnly: true\n\n### 4.1.4.18 ###\n    SposConfig:\n      description: \"SposConfig is used to configure communication with the Service Provider Online System. The aim is to enable a service provider to receive process success and process error messages sent by the TSM. A SposConfig has the following attributes:\"\n      type: object\n      required: [url, certificateId]\n      properties:\n        id: # A, No\n          description: \"Unique identification of the SposConfig.\"\n          type: string\n          format: uuid\n          readOnly: true\n          example: \"f36d5f2e-0950-6e80-6367-fe7e6250a713\"\n        url: # M, Yes\n          description: \"URL of the SP's Online Service.\"\n          type: string\n          format: uri\n          maxLength: 500\n          example: \"/relative/uri/to/resource\"\n        certificateId: # M, Yes\n          description: \"ID of the Certificate that is used for the backend communication.\"\n          type: string\n          format: uuid\n          example: \"6cda80a1-efb3-acf3-8b18-14a10ff2ad24\"\n\n### 4.1.4.19 ###\n    GeneralError:\n      description: \"A GeneralError is used as response object for any REST method call in case the response status code is not 2xx. GeneralError has the following attributes:\"\n      type: object\n      required: [errorCategory, errorMessage]\n      properties:\n        errorCategory: # M, No\n          description: \"The error type.\"\n          type: integer\n          minimum: 1000\n          maximum: 9999\n          readOnly: true\n        errorMessage: # M, No\n          description: \"A human-readable error description in English.\"\n          type: string\n          maxLength: 255\n          readOnly: true\n\n",
			"canonicalURL": "/github.com/BSI-Bund/TSMS@38cacc7aa8165f0d1326b0d3e43d5f8ff3c0d9d7/-/blob/tsm-rest-api/dist/1.0.0/tsm-rest-api-1.0.0.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/BSI-Bund/TSMS/blob/38cacc7aa8165f0d1326b0d3e43d5f8ff3c0d9d7/tsm-rest-api/dist/1.0.0/tsm-rest-api-1.0.0.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"FeatureConfig\": parse schema: property \"genericOptions\": at 1:21414: parse default: unexpected type: \"object\""
}