{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/JHUAPL/PINE"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "backend/pine/backend/collections/openapi.yaml",
			"byteSize": 28188,
			"content": "# (C) 2021 The Johns Hopkins University Applied Physics Laboratory LLC.\n\nopenapi: \"3.0.2\"\n\nsecurity:\n  - cookieAuth: []\n  - eveBasicAuth: []\n  - vegasBearerAuth: []\n\ntags:\n  - name: collections\n    description: Operations in the \"collections\" blueprint.\n\ncomponents:\n\n  schemas:\n\n    WrappedCollections:\n      type: object\n      properties:\n        _items:\n          type: array\n          items:\n            $ref: \"../api/components.yaml#/schemas/Collection\"\n\n    NewCollection:\n      type: object\n      properties:\n        collection:\n          description: \"At minimum, this must include creator_id, annotators, viewers and labels. All other args or sub-args should be deleted or set to null value.\\n\\ncreator_id MUST be a valid user, otherwise 500 Error will occur.\"\n          type: object\n          properties:\n            creator_id:\n              type: string\n            annotators:\n              type: array\n              items:\n                type: string\n            viewers:\n              type: array\n              items:\n                type: string\n            labels:\n              type: array\n              items:\n                type: string\n            archived:\n              type: boolean\n              default: false\n            metadata:\n              type: object\n              properties:\n                title:\n                  type: string\n                subject:\n                  type: string\n                description:\n                  type: string\n                publisher:\n                  type: string\n                contributor:\n                  type: string\n                date:\n                  type: string\n                type:\n                  type: string\n                format:\n                  type: string\n                identifier:\n                  type: string\n                source:\n                  type: string\n                language:\n                  type: string\n                relation:\n                  type: string\n                coverage:\n                  type: string\n                rights:\n                  type: string\n            configuration:\n              type: object\n              properties:\n                allow_overlapping_ner_annotations:\n                  type: boolean\n                  default: true\n          example:\n            {\"creator_id\": \"ada\",\n             \"annotators\": [\"ada\"],\n             \"viewers\": [\"ada\", \"margaret\"],\n             \"labels\": [\"label1\", \"label2\"],\n             \"archived\": false,\n             \"metadata\": {\"title\": \"Test\", \"subject\": \"testcoll\",\n                          \"description\": \"test collection\", \"publisher\": \"ada\",\n                          \"contributor\": \"ada\", \"date\": \"1/1/21\", \"type\": \"sometype\",\n                          \"format\": \"HTML\", \"identifier\": \"ABCD\", \"source\": \"apl\",\n                          \"language\": \"english\", \"relation\": \"family\", \"coverage\": \"some\",\n                          \"rights\": \"all of them\"},\n              \"configuration\": {\"allow_overlapping_ner_annotations\": true}}\n        train_every:\n          description: Should be an integer \u003e= 5.\n          type: integer\n          minimum: 5\n        overlap:\n          description: |\n            Should be a float between 0 and 1.\n            \n            WARNING: You MUST put double quotation marks (`\"\"`) around the number for the backend to\n            parse it correctly.\n            \n            Ex: enter `\".5\"` instead of just `.5`\n          type: number\n          format: float\n          minimum: 0.0\n          maximum: 1.0\n        pipelineId:\n          type: string\n          description: |\n            WARNING: You MUST put double quotation marks (`\"\"`) around the id for the backend to\n            parse it correctly.\n            \n            Ex: enter `\"123abc...\"` instead of just `123abc...`\n        classifierParameters:\n          type: string\n          format: object\n        file:\n          description: Optional CSV file to upload for collection documents.\n          type: string\n          format: binary\n        csvTextCol:\n          description: \u003e\n            If a CSV file is uploaded, this is the column number that contains the text.\n          type: integer\n        csvHasHeader:\n          description: \u003e\n            If a CSV file is uploaded, this is a flag for whether the file has a header row or not.\n          type: boolean\n        imageFile:\n          description: \u003e\n            One or more image files to add to the collection.  The form should include the filename\n            which will be used to store the image within the collection.\n          type: array\n          items:\n            type: string\n            format: binary\n      required:\n        - collection\n        - train_every\n        - overlap\n        - pipelineId\n\npaths:\n  \n  /collections/unarchived:\n    get:\n      summary: Get Unarchived Collections\n      description: |\n        Get all unarchived collections for logged in user.\n        \n        Example: `curl http://localhost:5000/collections/unarchived --cookie session.cookie`\n      operationId: collections_get_unarchived_all\n      tags: [collections]\n      responses:\n        \"200\":\n          description: Successfully retrieved relevant collections.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WrappedCollections\"\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n        default:\n          $ref: \"../api/components.yaml#/responses/UnexpectedServerError\"\n          \n  /collections/unarchived/{page}:\n    get:\n      summary: Get Paginated Unarchived Collections\n      description: |\n        Get unarchived user collections (either all or a certain page).\n        \n        Example: `curl http://localhost:5000/collections/unarchived --cookie session.cookie`\n      operationId: collections_get_unarchived_paginated\n      tags: [collections]\n      parameters:\n        - name: page\n          in: path\n          required: true\n          description: \u003e\n            Optional page number for specifying which collections.  \"all\" for all pages or a page\n            number.\n          schema:\n            oneOf:\n            - type: string\n              default: \"all\"\n            - type: integer\n      responses:\n        \"200\":\n          description: Successfully retrieved relevant collections.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WrappedCollections\"\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n        default:\n          $ref: \"../api/components.yaml#/responses/UnexpectedServerError\"\n          \n  /collections/archived:\n    get:\n      summary: Get Archived Collections\n      description: |\n        Get all archived user collections.\n        \n        Example: `curl http://localhost:5000/collections/archived --cookie session.cookie`\n      operationId: collections_get_archived_all\n      tags: [collections]\n      responses:\n        \"200\":\n          description: Successfully retrieved relevant collections.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WrappedCollections\"\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n        default:\n          $ref: \"../api/components.yaml#/responses/UnexpectedServerError\"\n          \n  /collections/archived/{page}:\n    get:\n      summary: Get Paginated Archived Collections\n      description: |\n        Get archived user collections (either all or a certain page).\n        \n        Example: `curl http://localhost:5000/collections/archived --cookie session.cookie`\n      operationId: collections_get_archived_paginated\n      tags: [collections]\n      parameters:\n        - name: page\n          in: path\n          required: true\n          description: \u003e\n            Optional page number for specifying which collections.  \"all\" for all pages or a page\n            number.\n          schema:\n            oneOf:\n            - type: string\n              default: \"all\"\n            - type: integer\n      responses:\n        \"200\":\n          description: Successfully retrieved relevant collections.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WrappedCollections\"\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n        default:\n          $ref: \"../api/components.yaml#/responses/UnexpectedServerError\"\n          \n  /collections/archive/{collection_id}:\n    put:\n      summary: Archive Collection\n      description: |\n        Archive a collection with a certain ID.\n        \n        Example: `curl -X PUT http://localhost:5000/collections/archive/60c7b7375b72bf4ed6523bf0 --cookie session.cookie`\n      operationId: collections_archive\n      tags: [collections]\n      parameters:\n        - $ref: \"../api/components.yaml#/parameters/collectionIdParam\"\n      responses:\n        \"200\":\n          description: Successfully archived the chosen collection.\n          content:\n            application/json:\n              schema:\n                $ref: \"../api/components.yaml#/schemas/Collection\"\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n        \"404\":\n          $ref: \"../api/components.yaml#/responses/CollectionNotFound\"\n        default:\n          $ref: \"../api/components.yaml#/responses/UnexpectedServerError\"\n          \n  /collections/unarchive/{collection_id}:\n    put:\n      summary: Unarchive Collection\n      description: |\n        Unarchive a collection with a certain ID.\n        \n        Example: `curl -X PUT http://localhost:5000/collections/unarchive/60c7b7375b72bf4ed6523bf0 --cookie session.cookie`\n      operationId: collections_unarchive\n      tags: [collections]\n      parameters:\n        - $ref: \"../api/components.yaml#/parameters/collectionIdParam\"\n      responses:\n        \"200\":\n          description: Successfully unarchived the chosen collection.\n          content:\n            application/json:\n              schema:\n                $ref: \"../api/components.yaml#/schemas/Collection\"\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n        \"404\":\n          $ref: \"../api/components.yaml#/responses/CollectionNotFound\"\n        default:\n          $ref: \"../api/components.yaml#/responses/UnexpectedServerError\"\n          \n  /collections/by_id/{collection_id}:\n    get:\n      summary: Get Collection\n      description: |\n        Retrieve a collection by its ID.\n        \n        Example: `curl -X GET http://localhost:5000/collections/by_id/60c7b7375b72bf4ed6523bf0 --cookie session.cookie`\n      operationId: collections_get\n      tags: [collections]\n      parameters:\n        - $ref: \"../api/components.yaml#/parameters/collectionIdParam\"\n      responses:\n        \"200\":\n          description: Successfully found and rerieved the chosen collection.\n          content:\n            application/json:\n              schema:\n                $ref: \"../api/components.yaml#/schemas/Collection\"\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n        \"404\":\n          $ref: \"../api/components.yaml#/responses/CollectionNotFound\"\n        default:\n          $ref: \"../api/components.yaml#/responses/UnexpectedServerError\"\n          \n  /collections/by_id/{collection_id}/download:\n    get:\n      summary: Download Collection Data\n      description: |\n        Download a collection's data by its ID.\n        \n        Example: `curl -X GET http://localhost:5000/collections/by_id/60c7b7375b72bf4ed6523bf0/download --cookie session.cookie`\n      operationId: collections_download\n      tags: [collections]\n      parameters:\n        - $ref: \"../api/components.yaml#/parameters/collectionIdParam\"\n      responses:\n        \"200\":\n          description: Successfully found and downloaded the chosen collection.\n          content:\n            application/json:\n              schema:\n                $ref: \"../api/components.yaml#/schemas/Collection\"\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n        \"404\":\n          $ref: \"../api/components.yaml#/responses/CollectionNotFound\"\n        default:\n          $ref: \"../api/components.yaml#/responses/UnexpectedServerError\"\n          \n  /collections/add_annotator/{collection_id}:\n    post:\n      summary: Add Collection Annotator\n      description: |\n        Add an annotator by user_id to a specific collection.\n        \n        Example: `curl --cookie session.cookie  -X POST \"http://localhost:5000/collections/add_annotator/60c7453d5b72bf4ed65239e9\" -F 'user_id=\"\\\"bob\\\"\"'`\n        \n        Notice the quotes around the user_id value, NEEDS to be like that to include the \"\" in the\n        request session.cookie is a file containing: \"Set-cookie: session=.eJy...(rest of cookie)\".\n      operationId: collections_add_annotator\n      tags: [collections]\n      parameters:\n        - $ref: \"../api/components.yaml#/parameters/collectionIdParam\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                user_id:\n                  type: string\n                  description: \u003e\n                    Note: You must put double quotation marks (`\"\"`) around the user_id for the\n                    backend to parse it correctly as it is a JSON string.  For example, enter\n                    `\"ada\"` instead of just `ada`.\n              required:\n                - user_id\n      responses:\n        \"200\":\n          description: Successfully added the user as an annotator to the collection.\n          content:\n            application/json:\n              schema:\n                $ref: \"../api/components.yaml#/schemas/IDInfo\"\n        \"400\":\n          description: Request malformed, probably missisng user_id arg.\n          content: {application/json: {schema: {$ref: \"../api/components.yaml#/schemas/ErrorResponse\"}}}\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n        \"404\":\n          $ref: \"../api/components.yaml#/responses/CollectionNotFound\"\n        \"409\":\n          description: Specified user is already an annotator.\n          content: {application/json: {schema: {$ref: \"../api/components.yaml#/schemas/ErrorResponse\"}}}\n        \"500\":\n          description: Internal server error - the form data was probably malformed.\n          content: {application/json: {schema: {$ref: \"../api/components.yaml#/schemas/ErrorResponse\"}}}\n          \n  /collections/add_viewer/{collection_id}:\n    post:\n      summary: Add Collection Viewer\n      description: |\n        Add a viewer by user_id to a specific collection.\n        \n        Example: `curl --cookie session.cookie  -X POST \"http://localhost:5000/collections/add_viewer/60c7453d5b72bf4ed65239e9\" -F 'user_id=\"\\\"bob\\\"\"'`\n        \n        Notice the quotes around the user_id value, NEEDS to be like that to include the \"\" in the\n        request. session.cookie is a file containing: \"Set-cookie: session=.eJy...(rest of cookie)\"\n      operationId: addViewerToCollection\n      tags: [collections]\n      parameters:\n        - $ref: \"../api/components.yaml#/parameters/collectionIdParam\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                user_id:\n                  type: string\n                  description: \"Note: You must put double quotation marks (\\\"\\\") around the user_id for the backend to parse it correctly.\n                  \\n\\nEx: enter \\\"ada\\\" instead of just ada\"\n              required:\n                - user_id\n      responses:\n        \"200\":\n          description: Successfully added the user as a viewer to the collection.\n          content:\n            application/json:\n              schema:\n                $ref: \"../api/components.yaml#/schemas/IDInfo\"\n        \"400\":\n          description: Request malformed, probably missisng user_id arg.\n          content: {application/json: {schema: {$ref: \"../api/components.yaml#/schemas/ErrorResponse\"}}}\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n        \"404\":\n          $ref: \"../api/components.yaml#/responses/CollectionNotFound\"\n        \"409\":\n          description: Specified user is already an viewer.\n          content: {application/json: {schema: {$ref: \"../api/components.yaml#/schemas/ErrorResponse\"}}}\n        \"500\":\n          description: Internal server error - the form data was probably malformed.\n          content: {application/json: {schema: {$ref: \"../api/components.yaml#/schemas/ErrorResponse\"}}}\n          \n  /collections/add_label/{collection_id}:\n    post:\n      summary: Add Collection Label\n      description: |\n        Add a label to a specific collection.\n        \n        Example: `curl --cookie session.cookie  -X POST \"http://localhost:5000/collections/add_label/60c7453d5b72bf4ed65239e9\" -F 'new_label=\"\\\"testlabel\\\"\"'`\n        \n        Notice the quotes around the new_label value, NEEDS to be like that to include the \"\" in the\n        request.  session.cookie is a file containing: \"Set-cookie: session=.eJy...(rest of cookie)\"\n      operationId: collections_add_label\n      tags: [collections]\n      parameters:\n        - $ref: \"../api/components.yaml#/parameters/collectionIdParam\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                new_label:\n                  type: string\n                  description: \u003e\n                    Note: You must put double quotation marks (`\"\"`) around the new_label for the\n                    backend to parse it correctly.  Ex: enter `\"MyLabel\"` instead of just `MyLabel`\n              required:\n                - new_label\n      responses:\n        \"200\":\n          description: Successfully added the label to the collection.\n          content:\n            application/json:\n              schema:\n                $ref: \"../api/components.yaml#/schemas/IDInfo\"\n        \"400\":\n          description: Request malformed, probably missisng new_label arg.\n          content: {application/json: {schema: {$ref: \"../api/components.yaml#/schemas/ErrorResponse\"}}}\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n        \"404\":\n          $ref: \"../api/components.yaml#/responses/CollectionNotFound\"\n        \"409\":\n          description: Specified label is already in collection.\n          content: {application/json: {schema: {$ref: \"../api/components.yaml#/schemas/ErrorResponse\"}}}\n        \"500\":\n          description: Internal server error - the form data was probably malformed.\n          content: {application/json: {schema: {$ref: \"../api/components.yaml#/schemas/ErrorResponse\"}}}\n          \n  /collections:\n    post:\n      summary: Create Collection\n      description: |\n        Create a new collection.\n        \n        Example: `curl --cookie session.cookie  -X POST \"http://localhost:5000/collections\" -F 'collection={\"creator_id\":\"ada\", \"annotators\":[\"ada\"], \"labels\":[\"label1\", \"labellll\"],\"metadata\":{\"title\":\"newcoll11\",\"subject\":null,\"description\":\"describe blahblah\"}}' -F 'overlap=\"\\\".9\\\"\"' -F 'train_every=\"\\\"100\\\"\"' -F 'pipelineId=\"\\\"5babb6ee4eb7dd2c39b9671d\\\"\"'`\n        \n        Notice the quotes around some value, NEEDS to be like that to include the \"\" in the request\n        to be parsed as a JSON string.  session.cookie is a file containing:\n        \"Set-cookie: session=.eJy...(rest of cookie)\"\n      operationId: collections_create\n      tags: [collections]\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: \"#/components/schemas/NewCollection\"\n      responses:\n        \"201\":\n          description: Successfully created the collection.\n          content:\n            application/json:\n              schema:\n                $ref: \"../api/components.yaml#/schemas/IDInfo\"\n        \"400\":\n          description: Request malformed.\n          content: {application/json: {schema: {$ref: \"../api/components.yaml#/schemas/ErrorResponse\"}}}\n        \"401\":\n          description: Authentication failed, not logged in.\n          content: {application/json: {schema: {$ref: \"../api/components.yaml#/schemas/ErrorResponse\"}}}\n        \"500\":\n          description: Error in syntax of the request - OR Wekzeug Authentication Failure.\n          content: {application/json: {schema: {$ref: \"../api/components.yaml#/schemas/ErrorResponse\"}}}\n          \n  /collections/static_images/{collection_id}:\n    get:\n      summary: Get Collection Static Images\n      description: |\n        Retrieve all static images used in a collection.\n        \n        Example: `curl --cookie session.cookie  -X GET \"http://localhost:5000/collections/static_images/60c745395b72bf4ed6523821\"`\n      operationId: collections_get_static_images\n      tags: [collections]\n      parameters:\n        - $ref: \"../api/components.yaml#/parameters/collectionIdParam\"\n      responses:\n        \"200\":\n          description: Successfully found the collection and got any relevant static images.\n          content:\n            application/json:\n              schema:\n                type: array\n                description: An array of static image paths.\n                items:\n                  type: string\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n        \"404\":\n          $ref: \"../api/components.yaml#/responses/CollectionNotFound\"\n        default:\n          $ref: \"../api/components.yaml#/responses/UnexpectedServerError\"\n          \n  /collections/images/{collection_id}:\n    get:\n      summary: Get Collection Images\n      description: |\n        Retrieve all (non-static) images used in a collection.\n        \n        Example: `curl --cookie session.cookie  -X GET \"http://localhost:5000/collections/images/60c745395b72bf4ed6523821\"`\n      operationId: collections_get_images\n      tags: [collections]\n      parameters:\n        - $ref: \"../api/components.yaml#/parameters/collectionIdParam\"\n      responses:\n        \"200\":\n          description: Successfully found the collection and got any relevant images.\n          content:\n            application/json:\n              schema:\n                type: array\n                description: An array of image paths.\n                items:\n                  type: string\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n        \"404\":\n          $ref: \"../api/components.yaml#/responses/CollectionNotFound\"\n        default:\n          $ref: \"../api/components.yaml#/responses/UnexpectedServerError\"\n          \n  /collections/image_exists/{collection_id}/{path}:\n    get:\n      summary: Check Collection Image\n      description: |\n        Checks whether the given image exists in the given collection.\n        \n        Example: `curl -X GET \"http://localhost:5000/collections/image_exists/60c745395b72bf4ed6523821/static%2Fapl.png\" -H  \"accept: application/json\" --cookie session.cookie`\n      operationId: collections_image_exists\n      tags: [collections]\n      parameters:\n        - $ref: \"../api/components.yaml#/parameters/collectionIdParam\"\n        - name: path\n          in: path\n          required: true\n          description: Path of the image to check (same as returned from images/static_images).\n          schema:\n            type: string\n          example: \"static/apl.jpg\"\n      responses:\n        \"200\":\n          description: Returns whether the collection holds the image.\n          content:\n            application/json:\n              schema:\n                type: boolean\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n        \"404\":\n          $ref: \"../api/components.yaml#/responses/CollectionNotFound\"\n        default:\n          $ref: \"../api/components.yaml#/responses/UnexpectedServerError\"\n          \n  /collections/image/{collection_id}/{path}:\n    get:\n      summary: Get Collection Image\n      description: |\n        Download an image from a collection.\n        \n        Example: `curl --cookie session.cookie  -X GET \"http://localhost:5000/collections/image/60c745395b72bf4ed6523821/static/apl.png\" -v --output - \u003e apl.png`\n      operationId: collections_image\n      tags: [collections]\n      parameters:\n        - $ref: \"../api/components.yaml#/parameters/collectionIdParam\"\n        - name: path\n          in: path\n          required: true\n          description: Path of the image to download (same as returned from images/static_images).\n          schema:\n            type: string\n          example: \"static/apl.jpg\"\n      responses:\n        \"200\":\n          description: \"Successfully found the collection and returns image data.\"\n          content:\n            image/*:\n              schema:\n                type: string\n                format: binary\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n        \"404\":\n          $ref: \"../api/components.yaml#/responses/CollectionNotFound\"\n        default:\n          $ref: \"../api/components.yaml#/responses/UnexpectedServerError\"\n\n    post:\n      summary: Upload Collection Image\n      description: |\n        Upload an image to a collection.\n        \n        Example: `curl --cookie session.cookie  -X POST \"http://localhost:5000/collections/image/60c745395b72bf4ed6523821/static/dog.jpeg\" -F 'file=@/home/pine/Downloads/dog.jpeg'`\n      operationId: collections_image_upload\n      tags: [collections]\n      parameters:\n        - $ref: \"../api/components.yaml#/parameters/collectionIdParam\"\n        - name: path\n          in: path\n          required: true\n          description: |\n            Path to place the image at.\n          \n            Note: This path piece should NOT start with / (Ex: static/dog.jpg, not /static/dog.jpg).\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n              required:\n                - file\n      responses:\n        \"100\":\n          description: Couldn't read the image, probably bad permissions or bad path.\n          content: {application/json: {schema: {$ref: \"../api/components.yaml#/schemas/ErrorResponse\"}}}\n        \"200\":\n          description: \"Successfully uploaded image (Will return the path).\"\n          # This is the same as error response but isn't an error\n          content:\n            application/json:\n              schema:\n                type: string\n        \"400\":\n          description: Did not include the image in the request form.\n          content: {application/json: {schema: {$ref: \"../api/components.yaml#/schemas/ErrorResponse\"}}}\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n        \"404\":\n          $ref: \"../api/components.yaml#/responses/CollectionNotFound\"\n        default:\n          $ref: \"../api/components.yaml#/responses/UnexpectedServerError\"\n          \n  /collections/user_permissions/{collection_id}:\n    get:\n      summary: Get Collection User Permissions\n      description: |\n        Get the current user permissions of a collection.\n        \n        Example: `curl --cookie session.cookie -X GET \"http://localhost:5000/collections/user_permissions/60c745395b72bf4ed6523821\" -v`\n      operationId: collections_permissions\n      tags: [collections]\n      parameters:\n        - $ref: \"../api/components.yaml#/parameters/collectionIdParam\"\n      responses:\n        \"200\":\n          description: Returns collection permissions for logged in user.\n          content:\n            application/json:\n              schema:\n                $ref: \"../api/components.yaml#/schemas/UserPermissions\"\n        \"401\":\n          $ref: \"../api/components.yaml#/responses/NotAuthorized\"\n        \"404\":\n          $ref: \"../api/components.yaml#/responses/CollectionNotFound\"\n        default:\n          $ref: \"../api/components.yaml#/responses/UnexpectedServerError\"\n"
		}
	},
	"Error": "parse: parse spec: paths: /collections/unarchived: get: operation \"collections_get_unarchived_all\": responses: 200: content: \"application/json\": schema: parse schema: resolve \"#/components/schemas/WrappedCollections\": parse schema: property \"_items\": parse schema: item: parse schema: resolve \"../api/components.yaml#/schemas/Collection\": find schema: external base \"../api/components.yaml\" is not supported"
}