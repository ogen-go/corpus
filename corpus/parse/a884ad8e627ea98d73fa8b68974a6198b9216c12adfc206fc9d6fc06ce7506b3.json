{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dkackman/chia-api"
		},
		"file": {
			"name": "daemon.yaml",
			"size": 0,
			"path": "src/daemon.yaml",
			"byteSize": 19643,
			"content": "openapi: 3.0.3\ninfo:\n  description: \u003e-\n    The Chia node and services come with a JSON RPC API server that allows you to access information and control the services. \n    These are accessible via HTTPS, WebSockets, or via client SDKs. The ports can be configured in `~/.chia/mainnet/config/config.yaml`. \n    The RPC ports should not be exposed to the internet. TLS certificates are used to secure the communication \n    [using mutualTLS](https://github.com/dkackman/chia-api/wiki/Mutual-TLS).\n\n    The daemon uses port 55400 by default.\n  version: 1.3.5\n  title: Chia RPC\n  termsOfService: https://www.chia.net/assets/legal/Guidelines-for-Using-Chia-Network.pdf\n  contact:\n    name: Chia Network\n    url: https://www.chia.net/\n    email: hello@chia.net\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\nservers:\n  - url: wss://localhost:55400\n    description: Daemon Websocket RPC\nsecurity:\n  - bearerAuth: []\ncomponents:\n  requestBodies:\n    empty:\n      $ref: \"./requestBodies/empty.yaml#/empty\"\n    service:\n      $ref: \"./requestBodies/service.yaml#/service\"\n  responses:\n    empty:\n      $ref: \"./responses/empty.yaml#/empty\"\n  schemas:\n    k_size:\n      $ref: \"./schemas/k_size.yaml#/k_size\"\n    plotter_config:\n      $ref: \"./schemas/plotter_config.yaml#/plotter_config\"\n    plotter_info:\n      $ref: \"./schemas/plotter_info.yaml#/plotter_info\"\n    queued_plot_info:\n      $ref: \"./schemas/queued_plot_info.yaml#/queued_plot_info\"\n    apiResponse:\n      $ref: \"./schemas/apiResponse.yaml#/apiResponse\"\n    error_details:\n      $ref: \"./schemas/error_details.yaml#/error_details\"\n    keyring_status:\n      type: object\n      properties:\n        is_keyring_locked:\n          type: boolean\n        passphrase_support_enabled:\n          type: boolean\n        can_save_passphrase:\n          type: boolean\n        user_passphrase_is_set:\n          type: boolean\n        needs_migration:\n          type: boolean\n        can_remove_legacy_keys:\n          type: boolean\n        can_set_passphrase_hint:\n          type: boolean\n        passphrase_hint:\n          type: string\n        passphrase_requirements:\n          type: object\n          properties:\n            is_optional:\n              type: boolean\n            min_length:\n              type: integer\n    private_key:\n      type: object\n      properties:\n        pk:\n          type: string\n        entropy:\n          type: string\n  securitySchemes:\n    bearerAuth:\n      $ref: \"./securitySchemes/bearerAuth.yaml#/bearerAuth\"\ntags:\n  - name: Daemon\n    description: The daemon interface is exposed on port 55400 by default and uses WebSockets only. It can be used to interact with other service endpoints.\n  - name: Key Ring\n    description: Methods for managing keys and the keyring.\n  - name: Plotter\n    description: Methods for creating plos and managing plotters.\npaths:\n  /register_service:\n    post:\n      tags:\n        - Daemon\n      summary: Registers this daemon to receive messages.\n      description: Registers this daemon to receive messages. This is needed to receive responses from services other than the daemon.\n      operationId: register_service\n      requestBody:\n        $ref: \"#/components/requestBodies/service\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      queue:\n                        type: array\n                        description: Only present when the registered service name is 'chia_plotter'\n                        items:\n                          $ref: \"#/components/schemas/queued_plot_info\"\n                  - $ref: \"#/components/schemas/apiResponse\"\n  /start_service:\n    post:\n      tags:\n        - Daemon\n      summary: Starts the named service.\n      description: Starts the named service.\n      operationId: start_service\n      requestBody:\n        $ref: \"#/components/requestBodies/service\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/empty\"\n  /stop_service:\n    post:\n      tags:\n        - Daemon\n      summary: Stops the named service.\n      description: Stops the named service.\n      operationId: stop_service\n      requestBody:\n        $ref: \"#/components/requestBodies/service\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/empty\"\n  /ping:\n    post:\n      tags:\n        - Daemon\n      summary: Ping the daemon.\n      description: Ping the daemon.\n      operationId: ping\n      requestBody:\n        $ref: \"#/components/requestBodies/empty\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/empty\"\n  /exit:\n    post:\n      tags:\n        - Daemon\n      summary: Tells the daemon at the RPC endpoint to exit.\n      description: Tells the daemon at the RPC endpoint to exit. There isn't a way to start the daemon remotely via RPC, so take care that you have access to the RPC host if needed.\n      operationId: exit\n      requestBody:\n        $ref: \"#/components/requestBodies/empty\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/empty\"\n  /is_running:\n    post:\n      tags:\n        - Daemon\n      summary: Determines if the named service is running.\n      description: Determines if the named service is running.\n      operationId: is_running\n      requestBody:\n        $ref: \"#/components/requestBodies/service\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      is_running:\n                        type: boolean\n                  - $ref: \"#/components/schemas/apiResponse\"\n  /get_version:\n    post:\n      tags:\n        - Daemon\n      summary: Get the installed version of chia at the endpoint.\n      description: Get the installed version of chia at the endpoint.\n      operationId: get_version\n      requestBody:\n        $ref: \"#/components/requestBodies/empty\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      version:\n                        type: string\n                  - $ref: \"#/components/schemas/apiResponse\"\n  /get_status:\n    post:\n      tags:\n        - Daemon\n      summary: Indicator if the genesis block is intialized.\n      description: Indicator if the genesis block is intialized.\n      operationId: get_status\n      requestBody:\n        $ref: \"#/components/requestBodies/empty\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      genesis_initialized:\n                        type: boolean\n                  - $ref: \"#/components/schemas/apiResponse\"\n  /get_plotters:\n    post:\n      tags:\n        - Plotter\n      summary: Get info about installed and installable plotters.\n      description: Get info about installed and installable plotters.\n      operationId: get_plotters\n      requestBody:\n        $ref: \"#/components/requestBodies/empty\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      plotters:\n                        type: object\n                        additionalProperties:\n                          $ref: \"#/components/schemas/plotter_info\"\n                  - $ref: \"#/components/schemas/apiResponse\"\n  /start_plotting:\n    post:\n      tags:\n        - Plotter\n      summary: Starts plotting.\n      description: Starts plotting. Returns after request is added to the plotting queue. Does not wait for plotting to finish.\n      operationId: start_plotting\n      requestBody:\n        description: Options for creating the plots\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/plotter_config\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      ids:\n                        type: array\n                        items:\n                          type: string\n                  - $ref: \"#/components/schemas/apiResponse\"\n  /stop_plotting:\n    post:\n      tags:\n        - Plotter\n      summary: Stops the plot with the given id.\n      description: Stops the plot with the given id.\n      operationId: stop_plotting\n      requestBody:\n        description: The id of the plot to stop\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - id\n              properties:\n                id:\n                  type: string\n      responses:\n        '200':\n          $ref: \"#/components/responses/empty\"\n  /is_keyring_locked:\n    post:\n      tags:\n        - Key Ring\n      summary: Returns whether the keyring is in a locked state.\n      description: Returns whether the keyring is in a locked state. If the keyring doesn't have a master passphrase set, or if a master passphrase is set and the cached passphrase is valid, the keyring is \"unlocked\".\n      operationId: is_keyring_locked\n      requestBody:\n        $ref: \"#/components/requestBodies/empty\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      is_keyring_locked:\n                        type: boolean\n                  - $ref: \"#/components/schemas/apiResponse\"\n  /keyring_status:\n    post:\n      tags:\n        - Key Ring\n      summary: Get detailed status of the key ring.\n      description: Get detailed status of the key ring.\n      operationId: keyring_status\n      requestBody:\n        $ref: \"#/components/requestBodies/empty\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/keyring_status\"\n                  - $ref: \"#/components/schemas/apiResponse\"\n  /unlock_keyring:\n    post:\n      tags:\n        - Key Ring\n      summary: Unlock the keyring.\n      description: Unlock the keyring.\n      operationId: unlock_keyring\n      requestBody:\n        description: Key ring key\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                key:\n                  type: string\n      responses:\n        '200':\n          $ref: \"#/components/responses/empty\"\n  /validate_keyring_passphrase:\n    post:\n      tags:\n        - Key Ring\n      summary: Test the validity of a passphrase.\n      description: Test the validity of a passphrase.\n      operationId: validate_keyring_passphrase\n      requestBody:\n        description: The passphrase\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                key:\n                  type: string\n      responses:\n        '200':\n          $ref: \"#/components/responses/empty\"\n  /migrate_keyring:\n    post:\n      tags:\n        - Key Ring\n      summary: Migrate from key phrase to key ring.\n      description: Migrate from key phrase to key ring.\n      operationId: migrate_keyring\n      requestBody:\n        description: The migration options\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - passphrase\n                - passphrase_hint\n              properties:\n                passphrase:\n                  type: string\n                passphrase_hint:\n                  type: string\n                save_passphrase:\n                  type: boolean\n                  default: false\n                cleanup_legacy_keyring:\n                  type: boolean\n                  default: false\n      responses:\n        '200':\n          $ref: \"#/components/responses/empty\"\n  /set_keyring_passphrase:\n    post:\n      tags:\n        - Key Ring\n      summary: Update the key ring passphrase.\n      description: Update the key ring passphrase.\n      operationId: set_keyring_passphrase\n      requestBody:\n        description: The passphrase options\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - new_passphrase\n              properties:\n                current_passphrase:\n                  type: string\n                new_passphrase:\n                  type: string\n                passphrase_hint:\n                  type: string\n                save_passphrase:\n                  type: boolean\n                  default: false\n      responses:\n        '200':\n          $ref: \"#/components/responses/empty\"\n  /remove_keyring_passphrase:\n    post:\n      tags:\n        - Key Ring\n      summary: Remove the key ring passphrase.\n      description: Remove the key ring passphrase.\n      operationId: remove_keyring_passphrase\n      requestBody:\n        description: The passphrase\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - current_passphrase\n              properties:\n                current_passphrase:\n                  type: string\n      responses:\n        '200':\n          $ref: \"#/components/responses/empty\"\n  /add_private_key:\n    post:\n      tags:\n        - Key Ring\n      summary: Adds a private key to the keychain.\n      description:\n        Adds a private key to the keychain, with the given entropy and passphrase. The\n        keychain itself will store the public key, and the entropy bytes, but not the passphrase.\n      operationId: add_private_key\n      requestBody:\n        description: The private key\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - mnemonic\n                - passphrase\n              properties:\n                mnemonic:\n                  type: string\n                passphrase:\n                  type: string\n      responses:\n        '200':\n          description: OK response without return values\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/apiResponse\"\n                  - $ref: \"#/components/schemas/error_details\"\n  /check_keys:\n    post:\n      tags:\n        - Key Ring\n      summary: Check the keys.\n      description: Check the keys.\n      operationId: check_keys\n      requestBody:\n        description: The config root path\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - root_path\n              properties:\n                root_path:\n                  type: string\n      responses:\n        '200':\n          description: OK response without return values\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/apiResponse\"\n                  - $ref: \"#/components/schemas/error_details\"\n  /delete_all_keys:\n    post:\n      tags:\n        - Key Ring\n      summary: Deletes all keys from the keychain.\n      description: Deletes all keys from the keychain.\n      operationId: daemon_delete_all_keys\n      requestBody:\n        $ref: \"#/components/requestBodies/empty\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/empty\"\n  /delete_key_by_fingerprint:\n    post:\n      tags:\n        - Key Ring\n      summary: Deletes all keys which have the given public key fingerprint.\n      description: Deletes all keys which have the given public key fingerprint.\n      operationId: delete_key_by_fingerprint\n      requestBody:\n        description: The fingerprint\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - fingerprint\n              properties:\n                fingerprint:\n                  type: integer\n                  format: uint32\n      responses:\n        '200':\n          description: OK response without return values\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/apiResponse\"\n                  - $ref: \"#/components/schemas/error_details\"\n  /get_all_private_keys:\n    post:\n      tags:\n        - Key Ring\n      summary: Returns all private keys which can be retrieved, with the given passphrases.\n      description:\n        Returns all private keys which can be retrieved, with the given passphrases.\n        A tuple of key, and entropy bytes (i.e. mnemonic) is returned for each key.\n      operationId: get_all_private_keys\n      requestBody:\n        $ref: \"#/components/requestBodies/empty\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      private_keys:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/private_key\"\n                  - $ref: \"#/components/schemas/apiResponse\"\n  /get_first_private_key:\n    post:\n      tags:\n        - Key Ring\n      summary: Returns the first key in the keychain.\n      description: Returns the first key in the keychain.\n      operationId: get_first_private_key\n      requestBody:\n        $ref: \"#/components/requestBodies/empty\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                allOf:\n                  - $ref: \"#/components/schemas/private_key\"\n                  - $ref: \"#/components/schemas/apiResponse\"\n  /get_key_for_fingerprint:\n    post:\n      tags:\n        - Key Ring\n      summary: Locates and returns a private key matching the provided fingerprint.\n      description: Locates and returns a private key matching the provided fingerprint.\n      operationId: get_key_for_fingerprint\n      requestBody:\n        description: The fingerprint\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - fingerprint\n              properties:\n                fingerprint:\n                  type: integer\n                  format: uint32\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                allOf:\n                  - $ref: \"#/components/schemas/private_key\"\n                  - $ref: \"#/components/schemas/apiResponse\"\nexternalDocs:\n  description: Find out more about chia\n  url: https://chia.net\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"queued_plot_info\": parse schema: resolve \"./schemas/queued_plot_info.yaml#/queued_plot_info\": find schema: external base \"./schemas/queued_plot_info.yaml\" is not supported"
}