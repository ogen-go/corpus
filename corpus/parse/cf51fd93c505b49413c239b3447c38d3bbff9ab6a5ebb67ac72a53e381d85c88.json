{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/harness/harness-go-sdk"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "harness/policymgmt/api/swagger.yaml",
			"byteSize": 402207,
			"content": "openapi: 3.0.3\ninfo:\n  title: Governance Policy Management API\n  description: \"Read and manage OPA Governance policies, policy sets and evaluations\"\n  version: 1.2.0\nservers:\n- url: https://app.harness.io/gateway/pm/\ntags:\n- name: dashboard\n  description: \"Aggregate summary of policies, policy sets and evaluations for display\\\n    \\ on the dashboard\"\n- name: examples\n  description: Example rego policies and corresponding input\n- name: policies\n  description: \"Create, edit and delete Governance policies written in rego\"\n- name: evaluate\n  description: Perform evaluations\n- name: evaluations\n  description: Access evaluation results\n- name: policysets\n  description: \"Create, edit and delete Governance policy sets\"\n- name: system\n  description: System version and health\npaths:\n  /api/v1/dashboard:\n    get:\n      tags:\n      - dashboard\n      description: \"Get metrics about policies, policy sets and evaluations\"\n      operationId: dashboard#metrics\n      parameters:\n      - name: range\n        in: query\n        description: \"The time period over which to aggregate dashboard data. Can\\\n          \\ be: 24 hours, 7 days or 30 days\"\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: \"The time period over which to aggregate dashboard data. Can\\\n            \\ be: 24 hours, 7 days or 30 days\"\n          example: 30d\n          default: 30d\n          enum:\n          - 24h\n          - 7d\n          - 30d\n        example: 30d\n      - name: accountIdentifier\n        in: query\n        description: Harness account ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness account ID\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        example: eBqAoNchMLKigC_qZ5EdC\n      - name: orgIdentifier\n        in: query\n        description: Harness organization ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness organization ID\n          example: test-org\n          default: \"\"\n        example: test-org\n      - name: projectIdentifier\n        in: query\n        description: Harness project ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness project ID\n          example: test-project\n          default: \"\"\n        example: test-project\n      responses:\n        \"200\":\n          description: OK response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DashboardMetrics'\n              example:\n                aggregates:\n                - error: 1201513832267580740\n                  pass: 2920020791307846359\n                  time: 461119712411546138\n                  warning: 6971582622373151866\n                - error: 1201513832267580740\n                  pass: 2920020791307846359\n                  time: 461119712411546138\n                  warning: 6971582622373151866\n                - error: 1201513832267580740\n                  pass: 2920020791307846359\n                  time: 461119712411546138\n                  warning: 6971582622373151866\n                policy_health:\n                  total_evaluation_count: 7467880620589340301\n                  total_evaluation_entity_count:\n                    error: 4962770580155356801\n                    pass: 1838564234748219477\n                    warning: 6712404284550845579\n                  total_policy_count: 1018281497905076142\n                  total_policy_set_count: 4767159674574934953\n                  total_policy_set_entity_count:\n                    A ut.: 8823333786778254735\n        \"400\":\n          description: \"BadRequest: Bad Request response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: \"Unauthorized: Unauthorized response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: \"Forbidden: Forbidden response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"NotFound: Not Found response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"500\":\n          description: \"InternalServer: Internal Server Error response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"502\":\n          description: \"BadGateway: Bad Gateway response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - jwt_header_Authorization:\n        - core_governancePolicy_view\n        - core_governancePolicy_edit\n        - core_governancePolicy_delete\n        - core_governancePolicySets_view\n        - core_governancePolicySets_edit\n        - core_governancePolicySets_delete\n        - core_governancePolicySets_evaluate\n        - core_governance_admin\n  /api/v1/evaluate:\n    post:\n      tags:\n      - evaluate\n      description: Evaluate arbitrary rego\n      operationId: evaluate#evaluate\n      parameters:\n      - name: accountIdentifier\n        in: query\n        description: Harness account ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness account ID\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        example: eBqAoNchMLKigC_qZ5EdC\n      - name: orgIdentifier\n        in: query\n        description: Harness organization ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness organization ID\n          example: test-org\n          default: \"\"\n        example: test-org\n      - name: projectIdentifier\n        in: query\n        description: Harness project ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness project ID\n          example: test-project\n          default: \"\"\n        example: test-project\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EvaluateRequestBody'\n            example:\n              input: \"{\\\"message\\\": \\\"everyone\\\"}\"\n              rego: |-\n                package test\n                deny[\"should say hello world\"] {input.message != \"world\"}\n        required: true\n      responses:\n        \"200\":\n          description: OK response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EvaluatedPolicy'\n              example:\n                deny_messages:\n                - deployment stage 'example-stage' does not have a HarnessApproval\n                  step\n                - deployment stage 'example-stage' has step 'run-script' that is forbidden\n                  type 'ShellScript'\n                error: \"policy.rego:25: rego_parse_error: non-terminated string m\\\n                  \\ == \\\"test\"\n                output: |-\n                  {\n                      \"deny\": [\n                          \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                      ],\n                      \"stages_with_approval\": []\n                  }\n                policy:\n                  account_id: eBqAoNchMLKigC_qZ5EdC\n                  created: 1636669297674\n                  git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                  git_connector_ref: \".\"\n                  git_default_branch: main\n                  git_default_branch_update_error:\n                    explanation: \"File with given filepath [file.rego] already exists\\\n                      \\ in Github, thus couldn't create a new file\"\n                    hint: \"Please check if there's already a file [file.rego] in Github\\\n                      \\ repository [rego-demo] for the given filepath and branch [main].\"\n                    message: \"Please check if there's already a file [file.rego] in\\\n                      \\ Github repository [rego-demo] for the given filepath and branch\\\n                      \\ [main].\"\n                  git_default_branch_updated: 1636669297674\n                  git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                  git_file_url: \"\"\n                  git_path: .harness/policy.rego\n                  git_repo: \"github.com/org/repo,omitempty\"\n                  identifier: policy-1\n                  name: Pipeline Approval\n                  org_id: test-org\n                  project_id: test-project\n                  rego: \"\"\n                  updated: 1636669297674\n                status: error\n        \"400\":\n          description: \"PolicySetNotFound: Bad Request response.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: \"Unauthorized: Unauthorized response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: \"Forbidden: Forbidden response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"NotFound: Not Found response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"500\":\n          description: \"InternalServer: Internal Server Error response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"502\":\n          description: \"BadGateway: Bad Gateway response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - jwt_header_Authorization:\n        - core_governancePolicy_view\n        - core_governancePolicy_edit\n        - core_governancePolicy_delete\n        - core_governancePolicySets_view\n        - core_governancePolicySets_edit\n        - core_governancePolicySets_delete\n        - core_governancePolicySets_evaluate\n        - core_governance_admin\n  /api/v1/evaluate-by-ids:\n    post:\n      tags:\n      - evaluate\n      description: Evaluate policy sets by ID\n      operationId: evaluate#evaluate-by-ids\n      parameters:\n      - name: accountIdentifier\n        in: query\n        description: Harness account ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness account ID\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        example: eBqAoNchMLKigC_qZ5EdC\n      - name: orgIdentifier\n        in: query\n        description: Harness organization ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness organization ID\n          example: test-org\n          default: \"\"\n        example: test-org\n      - name: projectIdentifier\n        in: query\n        description: Harness project ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness project ID\n          example: test-project\n          default: \"\"\n        example: test-project\n      - name: entity\n        in: query\n        description: User-supplied global identifier of the entity under evaluation\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: User-supplied global identifier of the entity under evaluation\n          example: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n          default: \"\"\n        example: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n      - name: entityMetadata\n        in: query\n        description: User-supplied additional metadata for the entity under evaluation\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: User-supplied additional metadata for the entity under evaluation\n          example: \"{\\\"name\\\":\\\"test-entity\\\"}\"\n          default: \"\"\n        example: \"{\\\"name\\\":\\\"test-entity\\\"}\"\n      - name: principalIdentifier\n        in: query\n        description: Identifier of the principal that triggered the evaluation - must\n          be specified in conjunction with 'principalType'\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Identifier of the principal that triggered the evaluation -\n            must be specified in conjunction with 'principalType'\n          example: aaabbbcccddd\n          default: \"\"\n        example: aaabbbcccddd\n      - name: principalType\n        in: query\n        description: Type of principal that triggered the evaluation - must be specified\n          in conjunction with 'principalIdentifier'\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Type of principal that triggered the evaluation - must be specified\n            in conjunction with 'principalIdentifier'\n          example: USER\n          default: \"\"\n        example: USER\n      - name: userIdentifier\n        in: query\n        description: \"Deprecated: Please use 'principalIdentifier' and 'principalType'\\\n          \\ instead\"\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: \"Deprecated: Please use 'principalIdentifier' and 'principalType'\\\n            \\ instead\"\n          example: Voluptas qui veniam.\n          default: \"\"\n        example: Nisi facere eaque.\n      - name: ids\n        in: query\n        description: \"Comma-separated list of identifiers for the policy sets that\\\n          \\ should be evaluated, with account. or org. prefixes if needed\"\n        required: true\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          minLength: 1\n          type: string\n          description: \"Comma-separated list of identifiers for the policy sets that\\\n            \\ should be evaluated, with account. or org. prefixes if needed\"\n          example: \"policyset-1,policyset-2,policyset-3\"\n        example: \"policyset-1,policyset-2,policyset-3\"\n      responses:\n        \"200\":\n          description: OK response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Evaluation'\n              example:\n                account_id: XRQAjvT37acOiXx9PRaQMF\n                action: onrun\n                created: 1636370209475\n                details:\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n                entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n                id: 123\n                input: \"\"\n                org_id: test-org\n                project_id: test-project\n                status: error\n                type: pipeline\n        \"400\":\n          description: \"PolicySetNotFound: Bad Request response.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: \"Unauthorized: Unauthorized response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: \"Forbidden: Forbidden response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"NotFound: Not Found response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"500\":\n          description: \"InternalServer: Internal Server Error response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"502\":\n          description: \"BadGateway: Bad Gateway response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - jwt_header_Authorization:\n        - core_governancePolicy_view\n        - core_governancePolicy_edit\n        - core_governancePolicy_delete\n        - core_governancePolicySets_view\n        - core_governancePolicySets_edit\n        - core_governancePolicySets_delete\n        - core_governancePolicySets_evaluate\n        - core_governance_admin\n  /api/v1/evaluate-by-type:\n    post:\n      tags:\n      - evaluate\n      description: Evaluate all policy sets of a specified type\n      operationId: evaluate#evaluate-by-type\n      parameters:\n      - name: accountIdentifier\n        in: query\n        description: Harness account ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness account ID\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        example: eBqAoNchMLKigC_qZ5EdC\n      - name: orgIdentifier\n        in: query\n        description: Harness organization ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness organization ID\n          example: test-org\n          default: \"\"\n        example: test-org\n      - name: projectIdentifier\n        in: query\n        description: Harness project ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness project ID\n          example: test-project\n          default: \"\"\n        example: test-project\n      - name: entity\n        in: query\n        description: User-supplied global identifier of the entity under evaluation\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: User-supplied global identifier of the entity under evaluation\n          example: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n          default: \"\"\n        example: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n      - name: entityMetadata\n        in: query\n        description: User-supplied additional metadata for the entity under evaluation\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: User-supplied additional metadata for the entity under evaluation\n          example: \"{\\\"name\\\":\\\"test-entity\\\"}\"\n          default: \"\"\n        example: \"{\\\"name\\\":\\\"test-entity\\\"}\"\n      - name: type\n        in: query\n        description: Type of entity under evaluation\n        required: true\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          minLength: 1\n          type: string\n          description: Type of entity under evaluation\n          example: pipeline\n        example: pipeline\n      - name: action\n        in: query\n        description: Action that triggered the evaluation\n        required: true\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          minLength: 1\n          type: string\n          description: Action that triggered the evaluation\n          example: onrun\n        example: onrun\n      - name: principalIdentifier\n        in: query\n        description: Identifier of the principal that triggered the evaluation - must\n          be specified in conjunction with 'principalType'\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Identifier of the principal that triggered the evaluation -\n            must be specified in conjunction with 'principalType'\n          example: aaabbbcccddd\n          default: \"\"\n        example: aaabbbcccddd\n      - name: principalType\n        in: query\n        description: Type of principal that triggered the evaluation - must be specified\n          in conjunction with 'principalIdentifier'\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Type of principal that triggered the evaluation - must be specified\n            in conjunction with 'principalIdentifier'\n          example: USER\n          default: \"\"\n        example: USER\n      - name: userIdentifier\n        in: query\n        description: \"Deprecated: Please use 'principalIdentifier' and 'principalType'\\\n          \\ instead\"\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: \"Deprecated: Please use 'principalIdentifier' and 'principalType'\\\n            \\ instead\"\n          example: Molestias nostrum dolor.\n          default: \"\"\n        example: Explicabo ea excepturi natus unde dolores.\n      responses:\n        \"200\":\n          description: OK response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Evaluation'\n              example:\n                account_id: XRQAjvT37acOiXx9PRaQMF\n                action: onrun\n                created: 1636370209475\n                details:\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n                entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n                id: 123\n                input: \"\"\n                org_id: test-org\n                project_id: test-project\n                status: error\n                type: pipeline\n        \"400\":\n          description: \"PolicySetNotFound: Bad Request response.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: \"Unauthorized: Unauthorized response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: \"Forbidden: Forbidden response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"NotFound: Not Found response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"500\":\n          description: \"InternalServer: Internal Server Error response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"502\":\n          description: \"BadGateway: Bad Gateway response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - jwt_header_Authorization:\n        - core_governancePolicy_view\n        - core_governancePolicy_edit\n        - core_governancePolicy_delete\n        - core_governancePolicySets_view\n        - core_governancePolicySets_edit\n        - core_governancePolicySets_delete\n        - core_governancePolicySets_evaluate\n        - core_governance_admin\n  /api/v1/evaluations:\n    get:\n      tags:\n      - evaluations\n      description: List evaluations\n      operationId: evaluations#list\n      parameters:\n      - name: accountIdentifier\n        in: query\n        description: Harness account ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness account ID\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        example: eBqAoNchMLKigC_qZ5EdC\n      - name: orgIdentifier\n        in: query\n        description: Harness organization ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness organization ID\n          example: test-org\n          default: \"\"\n        example: test-org\n      - name: projectIdentifier\n        in: query\n        description: Harness project ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness project ID\n          example: test-project\n          default: \"\"\n        example: test-project\n      - name: per_page\n        in: query\n        description: Number of results per page\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          maximum: 100\n          minimum: 1\n          type: integer\n          description: Number of results per page\n          example: 20\n          default: 50\n        example: 20\n      - name: page\n        in: query\n        description: Page number (starting from 0)\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          minimum: 0\n          type: integer\n          description: Page number (starting from 0)\n          example: 4\n          default: 0\n        example: 4\n      - name: entity\n        in: query\n        description: Filter by the entity associated with the evaluation\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Filter by the entity associated with the evaluation\n          example: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n        example: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n      - name: type\n        in: query\n        description: Filter by the type associated with the evaluation\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Filter by the type associated with the evaluation\n          example: pipeline\n        example: pipeline\n      - name: action\n        in: query\n        description: Filter by the action associated with the evaluation\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Filter by the action associated with the evaluation\n          example: onrun\n        example: onrun\n      - name: last_seen\n        in: query\n        description: Retrieve results starting after this last-seen result\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: integer\n          description: Retrieve results starting after this last-seen result\n          format: int64\n          example: 123\n        example: 123\n      - name: includeChildScopes\n        in: query\n        description: \"When true, evaluations from child scopes will be inculded in\\\n          \\ the results\"\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: boolean\n          description: \"When true, evaluations from child scopes will be inculded\\\n            \\ in the results\"\n          example: false\n          default: false\n        example: false\n      responses:\n        \"200\":\n          description: OK response.\n          headers:\n            Link:\n              description: Link-based paging\n              required: true\n              style: simple\n              explode: false\n              schema:\n                type: string\n                description: Link-based paging\n                example: \"\"\n              example: \"\"\n            X-Page-Index:\n              description: Page number\n              required: true\n              style: simple\n              explode: false\n              schema:\n                type: integer\n                description: Page number\n                format: int64\n                example: 4\n              example: 4\n            X-Page-Item-Count:\n              description: Number of results in this page\n              required: true\n              style: simple\n              explode: false\n              schema:\n                type: integer\n                description: Number of results in this page\n                format: int64\n                example: 20\n              example: 20\n            X-Page-Size:\n              description: Requested page size\n              required: true\n              style: simple\n              explode: false\n              schema:\n                type: integer\n                description: Requested page size\n                format: int64\n                example: 20\n              example: 20\n            X-Total-Items:\n              description: Total results available\n              required: true\n              style: simple\n              explode: false\n              schema:\n                type: integer\n                description: Total results available\n                format: int64\n                example: 230\n              example: 230\n            X-Total-Pages:\n              description: Total pages available\n              required: true\n              style: simple\n              explode: false\n              schema:\n                type: integer\n                description: Total pages available\n                format: int64\n                example: 12\n              example: 12\n          content:\n            application/json:\n              schema:\n                type: array\n                example:\n                - account_id: XRQAjvT37acOiXx9PRaQMF\n                  action: onrun\n                  created: 1636370209475\n                  details:\n                  - account_id: eBqAoNchMLKigC_qZ5EdC\n                    action: onrun\n                    created: 1636669297674\n                    description: Captures critical production policies\n                    details:\n                    - deny_messages:\n                      - deployment stage 'example-stage' does not have a HarnessApproval\n                        step\n                      - deployment stage 'example-stage' has step 'run-script' that\n                        is forbidden type 'ShellScript'\n                      error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                        \\ m == \\\"test\"\n                      output: |-\n                        {\n                            \"deny\": [\n                                \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                            ],\n                            \"stages_with_approval\": []\n                        }\n                      policy:\n                        account_id: eBqAoNchMLKigC_qZ5EdC\n                        created: 1636669297674\n                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_connector_ref: \".\"\n                        git_default_branch: main\n                        git_default_branch_update_error:\n                          explanation: \"File with given filepath [file.rego] already\\\n                            \\ exists in Github, thus couldn't create a new file\"\n                          hint: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                          message: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                        git_default_branch_updated: 1636669297674\n                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_file_url: \"\"\n                        git_path: .harness/policy.rego\n                        git_repo: \"github.com/org/repo,omitempty\"\n                        identifier: policy-1\n                        name: Pipeline Approval\n                        org_id: test-org\n                        project_id: test-project\n                        rego: \"\"\n                        updated: 1636669297674\n                      status: error\n                    - deny_messages:\n                      - deployment stage 'example-stage' does not have a HarnessApproval\n                        step\n                      - deployment stage 'example-stage' has step 'run-script' that\n                        is forbidden type 'ShellScript'\n                      error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                        \\ m == \\\"test\"\n                      output: |-\n                        {\n                            \"deny\": [\n                                \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                            ],\n                            \"stages_with_approval\": []\n                        }\n                      policy:\n                        account_id: eBqAoNchMLKigC_qZ5EdC\n                        created: 1636669297674\n                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_connector_ref: \".\"\n                        git_default_branch: main\n                        git_default_branch_update_error:\n                          explanation: \"File with given filepath [file.rego] already\\\n                            \\ exists in Github, thus couldn't create a new file\"\n                          hint: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                          message: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                        git_default_branch_updated: 1636669297674\n                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_file_url: \"\"\n                        git_path: .harness/policy.rego\n                        git_repo: \"github.com/org/repo,omitempty\"\n                        identifier: policy-1\n                        name: Pipeline Approval\n                        org_id: test-org\n                        project_id: test-project\n                        rego: \"\"\n                        updated: 1636669297674\n                      status: error\n                    enabled: true\n                    identifier: policyset-1\n                    name: Production Policies\n                    org_id: test-org\n                    project_id: test-project\n                    status: error\n                    type: pipeline\n                    updated: 1636669297674\n                  - account_id: eBqAoNchMLKigC_qZ5EdC\n                    action: onrun\n                    created: 1636669297674\n                    description: Captures critical production policies\n                    details:\n                    - deny_messages:\n                      - deployment stage 'example-stage' does not have a HarnessApproval\n                        step\n                      - deployment stage 'example-stage' has step 'run-script' that\n                        is forbidden type 'ShellScript'\n                      error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                        \\ m == \\\"test\"\n                      output: |-\n                        {\n                            \"deny\": [\n                                \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                            ],\n                            \"stages_with_approval\": []\n                        }\n                      policy:\n                        account_id: eBqAoNchMLKigC_qZ5EdC\n                        created: 1636669297674\n                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_connector_ref: \".\"\n                        git_default_branch: main\n                        git_default_branch_update_error:\n                          explanation: \"File with given filepath [file.rego] already\\\n                            \\ exists in Github, thus couldn't create a new file\"\n                          hint: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                          message: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                        git_default_branch_updated: 1636669297674\n                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_file_url: \"\"\n                        git_path: .harness/policy.rego\n                        git_repo: \"github.com/org/repo,omitempty\"\n                        identifier: policy-1\n                        name: Pipeline Approval\n                        org_id: test-org\n                        project_id: test-project\n                        rego: \"\"\n                        updated: 1636669297674\n                      status: error\n                    - deny_messages:\n                      - deployment stage 'example-stage' does not have a HarnessApproval\n                        step\n                      - deployment stage 'example-stage' has step 'run-script' that\n                        is forbidden type 'ShellScript'\n                      error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                        \\ m == \\\"test\"\n                      output: |-\n                        {\n                            \"deny\": [\n                                \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                            ],\n                            \"stages_with_approval\": []\n                        }\n                      policy:\n                        account_id: eBqAoNchMLKigC_qZ5EdC\n                        created: 1636669297674\n                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_connector_ref: \".\"\n                        git_default_branch: main\n                        git_default_branch_update_error:\n                          explanation: \"File with given filepath [file.rego] already\\\n                            \\ exists in Github, thus couldn't create a new file\"\n                          hint: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                          message: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                        git_default_branch_updated: 1636669297674\n                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_file_url: \"\"\n                        git_path: .harness/policy.rego\n                        git_repo: \"github.com/org/repo,omitempty\"\n                        identifier: policy-1\n                        name: Pipeline Approval\n                        org_id: test-org\n                        project_id: test-project\n                        rego: \"\"\n                        updated: 1636669297674\n                      status: error\n                    enabled: true\n                    identifier: policyset-1\n                    name: Production Policies\n                    org_id: test-org\n                    project_id: test-project\n                    status: error\n                    type: pipeline\n                    updated: 1636669297674\n                  - account_id: eBqAoNchMLKigC_qZ5EdC\n                    action: onrun\n                    created: 1636669297674\n                    description: Captures critical production policies\n                    details:\n                    - deny_messages:\n                      - deployment stage 'example-stage' does not have a HarnessApproval\n                        step\n                      - deployment stage 'example-stage' has step 'run-script' that\n                        is forbidden type 'ShellScript'\n                      error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                        \\ m == \\\"test\"\n                      output: |-\n                        {\n                            \"deny\": [\n                                \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                            ],\n                            \"stages_with_approval\": []\n                        }\n                      policy:\n                        account_id: eBqAoNchMLKigC_qZ5EdC\n                        created: 1636669297674\n                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_connector_ref: \".\"\n                        git_default_branch: main\n                        git_default_branch_update_error:\n                          explanation: \"File with given filepath [file.rego] already\\\n                            \\ exists in Github, thus couldn't create a new file\"\n                          hint: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                          message: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                        git_default_branch_updated: 1636669297674\n                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_file_url: \"\"\n                        git_path: .harness/policy.rego\n                        git_repo: \"github.com/org/repo,omitempty\"\n                        identifier: policy-1\n                        name: Pipeline Approval\n                        org_id: test-org\n                        project_id: test-project\n                        rego: \"\"\n                        updated: 1636669297674\n                      status: error\n                    - deny_messages:\n                      - deployment stage 'example-stage' does not have a HarnessApproval\n                        step\n                      - deployment stage 'example-stage' has step 'run-script' that\n                        is forbidden type 'ShellScript'\n                      error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                        \\ m == \\\"test\"\n                      output: |-\n                        {\n                            \"deny\": [\n                                \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                            ],\n                            \"stages_with_approval\": []\n                        }\n                      policy:\n                        account_id: eBqAoNchMLKigC_qZ5EdC\n                        created: 1636669297674\n                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_connector_ref: \".\"\n                        git_default_branch: main\n                        git_default_branch_update_error:\n                          explanation: \"File with given filepath [file.rego] already\\\n                            \\ exists in Github, thus couldn't create a new file\"\n                          hint: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                          message: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                        git_default_branch_updated: 1636669297674\n                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_file_url: \"\"\n                        git_path: .harness/policy.rego\n                        git_repo: \"github.com/org/repo,omitempty\"\n                        identifier: policy-1\n                        name: Pipeline Approval\n                        org_id: test-org\n                        project_id: test-project\n                        rego: \"\"\n                        updated: 1636669297674\n                      status: error\n                    enabled: true\n                    identifier: policyset-1\n                    name: Production Policies\n                    org_id: test-org\n                    project_id: test-project\n                    status: error\n                    type: pipeline\n                    updated: 1636669297674\n                  entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n                  entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n                  id: 123\n                  input: \"\"\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                - account_id: XRQAjvT37acOiXx9PRaQMF\n                  action: onrun\n                  created: 1636370209475\n                  details:\n                  - account_id: eBqAoNchMLKigC_qZ5EdC\n                    action: onrun\n                    created: 1636669297674\n                    description: Captures critical production policies\n                    details:\n                    - deny_messages:\n                      - deployment stage 'example-stage' does not have a HarnessApproval\n                        step\n                      - deployment stage 'example-stage' has step 'run-script' that\n                        is forbidden type 'ShellScript'\n                      error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                        \\ m == \\\"test\"\n                      output: |-\n                        {\n                            \"deny\": [\n                                \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                            ],\n                            \"stages_with_approval\": []\n                        }\n                      policy:\n                        account_id: eBqAoNchMLKigC_qZ5EdC\n                        created: 1636669297674\n                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_connector_ref: \".\"\n                        git_default_branch: main\n                        git_default_branch_update_error:\n                          explanation: \"File with given filepath [file.rego] already\\\n                            \\ exists in Github, thus couldn't create a new file\"\n                          hint: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                          message: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                        git_default_branch_updated: 1636669297674\n                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_file_url: \"\"\n                        git_path: .harness/policy.rego\n                        git_repo: \"github.com/org/repo,omitempty\"\n                        identifier: policy-1\n                        name: Pipeline Approval\n                        org_id: test-org\n                        project_id: test-project\n                        rego: \"\"\n                        updated: 1636669297674\n                      status: error\n                    - deny_messages:\n                      - deployment stage 'example-stage' does not have a HarnessApproval\n                        step\n                      - deployment stage 'example-stage' has step 'run-script' that\n                        is forbidden type 'ShellScript'\n                      error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                        \\ m == \\\"test\"\n                      output: |-\n                        {\n                            \"deny\": [\n                                \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                            ],\n                            \"stages_with_approval\": []\n                        }\n                      policy:\n                        account_id: eBqAoNchMLKigC_qZ5EdC\n                        created: 1636669297674\n                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_connector_ref: \".\"\n                        git_default_branch: main\n                        git_default_branch_update_error:\n                          explanation: \"File with given filepath [file.rego] already\\\n                            \\ exists in Github, thus couldn't create a new file\"\n                          hint: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                          message: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                        git_default_branch_updated: 1636669297674\n                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_file_url: \"\"\n                        git_path: .harness/policy.rego\n                        git_repo: \"github.com/org/repo,omitempty\"\n                        identifier: policy-1\n                        name: Pipeline Approval\n                        org_id: test-org\n                        project_id: test-project\n                        rego: \"\"\n                        updated: 1636669297674\n                      status: error\n                    enabled: true\n                    identifier: policyset-1\n                    name: Production Policies\n                    org_id: test-org\n                    project_id: test-project\n                    status: error\n                    type: pipeline\n                    updated: 1636669297674\n                  - account_id: eBqAoNchMLKigC_qZ5EdC\n                    action: onrun\n                    created: 1636669297674\n                    description: Captures critical production policies\n                    details:\n                    - deny_messages:\n                      - deployment stage 'example-stage' does not have a HarnessApproval\n                        step\n                      - deployment stage 'example-stage' has step 'run-script' that\n                        is forbidden type 'ShellScript'\n                      error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                        \\ m == \\\"test\"\n                      output: |-\n                        {\n                            \"deny\": [\n                                \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                            ],\n                            \"stages_with_approval\": []\n                        }\n                      policy:\n                        account_id: eBqAoNchMLKigC_qZ5EdC\n                        created: 1636669297674\n                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_connector_ref: \".\"\n                        git_default_branch: main\n                        git_default_branch_update_error:\n                          explanation: \"File with given filepath [file.rego] already\\\n                            \\ exists in Github, thus couldn't create a new file\"\n                          hint: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                          message: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                        git_default_branch_updated: 1636669297674\n                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_file_url: \"\"\n                        git_path: .harness/policy.rego\n                        git_repo: \"github.com/org/repo,omitempty\"\n                        identifier: policy-1\n                        name: Pipeline Approval\n                        org_id: test-org\n                        project_id: test-project\n                        rego: \"\"\n                        updated: 1636669297674\n                      status: error\n                    - deny_messages:\n                      - deployment stage 'example-stage' does not have a HarnessApproval\n                        step\n                      - deployment stage 'example-stage' has step 'run-script' that\n                        is forbidden type 'ShellScript'\n                      error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                        \\ m == \\\"test\"\n                      output: |-\n                        {\n                            \"deny\": [\n                                \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                            ],\n                            \"stages_with_approval\": []\n                        }\n                      policy:\n                        account_id: eBqAoNchMLKigC_qZ5EdC\n                        created: 1636669297674\n                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_connector_ref: \".\"\n                        git_default_branch: main\n                        git_default_branch_update_error:\n                          explanation: \"File with given filepath [file.rego] already\\\n                            \\ exists in Github, thus couldn't create a new file\"\n                          hint: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                          message: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                        git_default_branch_updated: 1636669297674\n                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_file_url: \"\"\n                        git_path: .harness/policy.rego\n                        git_repo: \"github.com/org/repo,omitempty\"\n                        identifier: policy-1\n                        name: Pipeline Approval\n                        org_id: test-org\n                        project_id: test-project\n                        rego: \"\"\n                        updated: 1636669297674\n                      status: error\n                    enabled: true\n                    identifier: policyset-1\n                    name: Production Policies\n                    org_id: test-org\n                    project_id: test-project\n                    status: error\n                    type: pipeline\n                    updated: 1636669297674\n                  - account_id: eBqAoNchMLKigC_qZ5EdC\n                    action: onrun\n                    created: 1636669297674\n                    description: Captures critical production policies\n                    details:\n                    - deny_messages:\n                      - deployment stage 'example-stage' does not have a HarnessApproval\n                        step\n                      - deployment stage 'example-stage' has step 'run-script' that\n                        is forbidden type 'ShellScript'\n                      error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                        \\ m == \\\"test\"\n                      output: |-\n                        {\n                            \"deny\": [\n                                \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                            ],\n                            \"stages_with_approval\": []\n                        }\n                      policy:\n                        account_id: eBqAoNchMLKigC_qZ5EdC\n                        created: 1636669297674\n                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_connector_ref: \".\"\n                        git_default_branch: main\n                        git_default_branch_update_error:\n                          explanation: \"File with given filepath [file.rego] already\\\n                            \\ exists in Github, thus couldn't create a new file\"\n                          hint: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                          message: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                        git_default_branch_updated: 1636669297674\n                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_file_url: \"\"\n                        git_path: .harness/policy.rego\n                        git_repo: \"github.com/org/repo,omitempty\"\n                        identifier: policy-1\n                        name: Pipeline Approval\n                        org_id: test-org\n                        project_id: test-project\n                        rego: \"\"\n                        updated: 1636669297674\n                      status: error\n                    - deny_messages:\n                      - deployment stage 'example-stage' does not have a HarnessApproval\n                        step\n                      - deployment stage 'example-stage' has step 'run-script' that\n                        is forbidden type 'ShellScript'\n                      error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                        \\ m == \\\"test\"\n                      output: |-\n                        {\n                            \"deny\": [\n                                \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                            ],\n                            \"stages_with_approval\": []\n                        }\n                      policy:\n                        account_id: eBqAoNchMLKigC_qZ5EdC\n                        created: 1636669297674\n                        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_connector_ref: \".\"\n                        git_default_branch: main\n                        git_default_branch_update_error:\n                          explanation: \"File with given filepath [file.rego] already\\\n                            \\ exists in Github, thus couldn't create a new file\"\n                          hint: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                          message: \"Please check if there's already a file [file.rego]\\\n                            \\ in Github repository [rego-demo] for the given filepath\\\n                            \\ and branch [main].\"\n                        git_default_branch_updated: 1636669297674\n                        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                        git_file_url: \"\"\n                        git_path: .harness/policy.rego\n                        git_repo: \"github.com/org/repo,omitempty\"\n                        identifier: policy-1\n                        name: Pipeline Approval\n                        org_id: test-org\n                        project_id: test-project\n                        rego: \"\"\n                        updated: 1636669297674\n                      status: error\n                    enabled: true\n                    identifier: policyset-1\n                    name: Production Policies\n                    org_id: test-org\n                    project_id: test-project\n                    status: error\n                    type: pipeline\n                    updated: 1636669297674\n                  entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n                  entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n                  id: 123\n                  input: \"\"\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                items:\n                  $ref: '#/components/schemas/Evaluation2'\n                x-content-type: application/json\n              example:\n              - account_id: XRQAjvT37acOiXx9PRaQMF\n                action: onrun\n                created: 1636370209475\n                details:\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n                entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n                id: 123\n                input: \"\"\n                org_id: test-org\n                project_id: test-project\n                status: error\n                type: pipeline\n              - account_id: XRQAjvT37acOiXx9PRaQMF\n                action: onrun\n                created: 1636370209475\n                details:\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n                entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n                id: 123\n                input: \"\"\n                org_id: test-org\n                project_id: test-project\n                status: error\n                type: pipeline\n              - account_id: XRQAjvT37acOiXx9PRaQMF\n                action: onrun\n                created: 1636370209475\n                details:\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n                entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n                id: 123\n                input: \"\"\n                org_id: test-org\n                project_id: test-project\n                status: error\n                type: pipeline\n              - account_id: XRQAjvT37acOiXx9PRaQMF\n                action: onrun\n                created: 1636370209475\n                details:\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n                entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n                id: 123\n                input: \"\"\n                org_id: test-org\n                project_id: test-project\n                status: error\n                type: pipeline\n        \"400\":\n          description: \"BadRequest: Bad Request response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: \"Unauthorized: Unauthorized response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: \"Forbidden: Forbidden response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"NotFound: Not Found response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"500\":\n          description: \"InternalServer: Internal Server Error response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"502\":\n          description: \"BadGateway: Bad Gateway response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - jwt_header_Authorization:\n        - core_governancePolicy_view\n        - core_governancePolicy_edit\n        - core_governancePolicy_delete\n        - core_governancePolicySets_view\n        - core_governancePolicySets_edit\n        - core_governancePolicySets_delete\n        - core_governancePolicySets_evaluate\n        - core_governance_admin\n  /api/v1/evaluations/{id}:\n    get:\n      tags:\n      - evaluations\n      description: Find an evaluation by ID\n      operationId: evaluations#find\n      parameters:\n      - name: accountIdentifier\n        in: query\n        description: Harness account ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness account ID\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        example: eBqAoNchMLKigC_qZ5EdC\n      - name: orgIdentifier\n        in: query\n        description: Harness organization ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness organization ID\n          example: test-org\n          default: \"\"\n        example: test-org\n      - name: projectIdentifier\n        in: query\n        description: Harness project ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness project ID\n          example: test-project\n          default: \"\"\n        example: test-project\n      - name: id\n        in: path\n        description: The ID of the evaluation to retrieve\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: integer\n          description: The ID of the evaluation to retrieve\n          format: int64\n          example: 123\n        example: 123\n      responses:\n        \"200\":\n          description: OK response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Evaluation'\n              example:\n                account_id: XRQAjvT37acOiXx9PRaQMF\n                action: onrun\n                created: 1636370209475\n                details:\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  details:\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  - deny_messages:\n                    - deployment stage 'example-stage' does not have a HarnessApproval\n                      step\n                    - deployment stage 'example-stage' has step 'run-script' that\n                      is forbidden type 'ShellScript'\n                    error: \"policy.rego:25: rego_parse_error: non-terminated string\\\n                      \\ m == \\\"test\"\n                    output: |-\n                      {\n                          \"deny\": [\n                              \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                          ],\n                          \"stages_with_approval\": []\n                      }\n                    policy:\n                      account_id: eBqAoNchMLKigC_qZ5EdC\n                      created: 1636669297674\n                      git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_connector_ref: \".\"\n                      git_default_branch: main\n                      git_default_branch_update_error:\n                        explanation: \"File with given filepath [file.rego] already\\\n                          \\ exists in Github, thus couldn't create a new file\"\n                        hint: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                        message: \"Please check if there's already a file [file.rego]\\\n                          \\ in Github repository [rego-demo] for the given filepath\\\n                          \\ and branch [main].\"\n                      git_default_branch_updated: 1636669297674\n                      git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                      git_file_url: \"\"\n                      git_path: .harness/policy.rego\n                      git_repo: \"github.com/org/repo,omitempty\"\n                      identifier: policy-1\n                      name: Pipeline Approval\n                      org_id: test-org\n                      project_id: test-project\n                      rego: \"\"\n                      updated: 1636669297674\n                    status: error\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  project_id: test-project\n                  status: error\n                  type: pipeline\n                  updated: 1636669297674\n                entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n                entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n                id: 123\n                input: \"\"\n                org_id: test-org\n                project_id: test-project\n                status: error\n                type: pipeline\n        \"400\":\n          description: \"BadRequest: Bad Request response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: \"Unauthorized: Unauthorized response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: \"Forbidden: Forbidden response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"NotFound: Not Found response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"500\":\n          description: \"InternalServer: Internal Server Error response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"502\":\n          description: \"BadGateway: Bad Gateway response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - jwt_header_Authorization:\n        - core_governancePolicy_view\n        - core_governancePolicy_edit\n        - core_governancePolicy_delete\n        - core_governancePolicySets_view\n        - core_governancePolicySets_edit\n        - core_governancePolicySets_delete\n        - core_governancePolicySets_evaluate\n        - core_governance_admin\n  /api/v1/examples:\n    get:\n      tags:\n      - examples\n      description: list examples\n      operationId: examples#list\n      parameters:\n      - name: accountIdentifier\n        in: query\n        description: Harness account ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness account ID\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        example: eBqAoNchMLKigC_qZ5EdC\n      - name: orgIdentifier\n        in: query\n        description: Harness organization ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness organization ID\n          example: test-org\n          default: \"\"\n        example: test-org\n      - name: projectIdentifier\n        in: query\n        description: Harness project ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness project ID\n          example: test-project\n          default: \"\"\n        example: test-project\n      - name: x-api-key\n        in: header\n        description: Harness PAT key used to perform authorization\n        required: false\n        style: simple\n        explode: false\n        schema:\n          type: string\n          description: Harness PAT key used to perform authorization\n          example: Consequatur ea.\n        example: Molestias qui cupiditate sint.\n      responses:\n        \"200\":\n          description: OK response.\n          content:\n            application/json:\n              schema:\n                type: array\n                example:\n                - desc: This is a pipeline example\n                  input: \"{\\\"message\\\": \\\"everyone\\\"}\"\n                  name: Pipeline example\n                  rego: |-\n                    package test\n                    deny[\"should say hello world\"] {input.message != \"world\"}\n                  type: pipeline\n                - desc: This is a pipeline example\n                  input: \"{\\\"message\\\": \\\"everyone\\\"}\"\n                  name: Pipeline example\n                  rego: |-\n                    package test\n                    deny[\"should say hello world\"] {input.message != \"world\"}\n                  type: pipeline\n                - desc: This is a pipeline example\n                  input: \"{\\\"message\\\": \\\"everyone\\\"}\"\n                  name: Pipeline example\n                  rego: |-\n                    package test\n                    deny[\"should say hello world\"] {input.message != \"world\"}\n                  type: pipeline\n                items:\n                  $ref: '#/components/schemas/PolicyExample'\n                x-content-type: application/json\n              example:\n              - desc: This is a pipeline example\n                input: \"{\\\"message\\\": \\\"everyone\\\"}\"\n                name: Pipeline example\n                rego: |-\n                  package test\n                  deny[\"should say hello world\"] {input.message != \"world\"}\n                type: pipeline\n              - desc: This is a pipeline example\n                input: \"{\\\"message\\\": \\\"everyone\\\"}\"\n                name: Pipeline example\n                rego: |-\n                  package test\n                  deny[\"should say hello world\"] {input.message != \"world\"}\n                type: pipeline\n        \"400\":\n          description: \"BadRequest: Bad Request response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: \"Unauthorized: Unauthorized response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: \"Forbidden: Forbidden response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"NotFound: Not Found response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"500\":\n          description: \"InternalServer: Internal Server Error response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"502\":\n          description: \"BadGateway: Bad Gateway response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - jwt_header_Authorization:\n        - core_governancePolicy_view\n        - core_governancePolicy_edit\n        - core_governancePolicy_delete\n        - core_governancePolicySets_view\n        - core_governancePolicySets_edit\n        - core_governancePolicySets_delete\n        - core_governancePolicySets_evaluate\n        - core_governance_admin\n      - api_key_header_x-api-key: []\n  /api/v1/policies:\n    get:\n      tags:\n      - policies\n      description: List all policies\n      operationId: policies#list\n      parameters:\n      - name: accountIdentifier\n        in: query\n        description: Harness account ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness account ID\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        example: eBqAoNchMLKigC_qZ5EdC\n      - name: orgIdentifier\n        in: query\n        description: Harness organization ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness organization ID\n          example: test-org\n          default: \"\"\n        example: test-org\n      - name: projectIdentifier\n        in: query\n        description: Harness project ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness project ID\n          example: test-project\n          default: \"\"\n        example: test-project\n      - name: per_page\n        in: query\n        description: Number of results per page\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          maximum: 100\n          minimum: 1\n          type: integer\n          description: Number of results per page\n          example: 20\n          default: 50\n        example: 20\n      - name: page\n        in: query\n        description: Page number (starting from 0)\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          minimum: 0\n          type: integer\n          description: Page number (starting from 0)\n          example: 4\n          default: 0\n        example: 4\n      - name: searchTerm\n        in: query\n        description: Filter results by partial name match\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Filter results by partial name match\n          example: poli\n          default: \"\"\n        example: poli\n      - name: sort\n        in: query\n        description: Sort order for results\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Sort order for results\n          example: \"name,ASC\"\n          default: \"name,ASC\"\n          enum:\n          - \"name,ASC\"\n          - \"name,DESC\"\n          - \"updated,ASC\"\n          - \"updated,DESC\"\n        example: \"name,DESC\"\n      - name: x-api-key\n        in: header\n        description: Harness PAT key used to perform authorization\n        required: false\n        style: simple\n        explode: false\n        schema:\n          type: string\n          description: Harness PAT key used to perform authorization\n          example: Harum aliquam facere.\n        example: Adipisci et nesciunt libero.\n      responses:\n        \"200\":\n          description: OK response.\n          headers:\n            Link:\n              description: Link-based paging\n              required: true\n              style: simple\n              explode: false\n              schema:\n                type: string\n                description: Link-based paging\n                example: \"\"\n              example: \"\"\n            X-Page-Index:\n              description: Page number\n              required: true\n              style: simple\n              explode: false\n              schema:\n                type: integer\n                description: Page number\n                format: int64\n                example: 4\n              example: 4\n            X-Page-Item-Count:\n              description: Number of results in this page\n              required: true\n              style: simple\n              explode: false\n              schema:\n                type: integer\n                description: Number of results in this page\n                format: int64\n                example: 20\n              example: 20\n            X-Page-Size:\n              description: Requested page size\n              required: true\n              style: simple\n              explode: false\n              schema:\n                type: integer\n                description: Requested page size\n                format: int64\n                example: 20\n              example: 20\n            X-Total-Items:\n              description: Total results available\n              required: true\n              style: simple\n              explode: false\n              schema:\n                type: integer\n                description: Total results available\n                format: int64\n                example: 230\n              example: 230\n            X-Total-Pages:\n              description: Total pages available\n              required: true\n              style: simple\n              explode: false\n              schema:\n                type: integer\n                description: Total pages available\n                format: int64\n                example: 12\n              example: 12\n          content:\n            application/json:\n              schema:\n                type: array\n                example:\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  created: 1636669297674\n                  git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                  git_connector_ref: \".\"\n                  git_default_branch: main\n                  git_default_branch_update_error:\n                    explanation: \"File with given filepath [file.rego] already exists\\\n                      \\ in Github, thus couldn't create a new file\"\n                    hint: \"Please check if there's already a file [file.rego] in Github\\\n                      \\ repository [rego-demo] for the given filepath and branch [main].\"\n                    message: \"Please check if there's already a file [file.rego] in\\\n                      \\ Github repository [rego-demo] for the given filepath and branch\\\n                      \\ [main].\"\n                  git_default_branch_updated: 1636669297674\n                  git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                  git_file_url: \"\"\n                  git_path: .harness/policy.rego\n                  git_repo: \"github.com/org/repo,omitempty\"\n                  identifier: policy-1\n                  name: Pipeline Approval\n                  org_id: test-org\n                  project_id: test-project\n                  rego: \"\"\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  created: 1636669297674\n                  git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                  git_connector_ref: \".\"\n                  git_default_branch: main\n                  git_default_branch_update_error:\n                    explanation: \"File with given filepath [file.rego] already exists\\\n                      \\ in Github, thus couldn't create a new file\"\n                    hint: \"Please check if there's already a file [file.rego] in Github\\\n                      \\ repository [rego-demo] for the given filepath and branch [main].\"\n                    message: \"Please check if there's already a file [file.rego] in\\\n                      \\ Github repository [rego-demo] for the given filepath and branch\\\n                      \\ [main].\"\n                  git_default_branch_updated: 1636669297674\n                  git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                  git_file_url: \"\"\n                  git_path: .harness/policy.rego\n                  git_repo: \"github.com/org/repo,omitempty\"\n                  identifier: policy-1\n                  name: Pipeline Approval\n                  org_id: test-org\n                  project_id: test-project\n                  rego: \"\"\n                  updated: 1636669297674\n                items:\n                  $ref: '#/components/schemas/Policy'\n                x-content-type: application/json\n              example:\n              - account_id: eBqAoNchMLKigC_qZ5EdC\n                created: 1636669297674\n                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_connector_ref: \".\"\n                git_default_branch: main\n                git_default_branch_update_error:\n                  explanation: \"File with given filepath [file.rego] already exists\\\n                    \\ in Github, thus couldn't create a new file\"\n                  hint: \"Please check if there's already a file [file.rego] in Github\\\n                    \\ repository [rego-demo] for the given filepath and branch [main].\"\n                  message: \"Please check if there's already a file [file.rego] in\\\n                    \\ Github repository [rego-demo] for the given filepath and branch\\\n                    \\ [main].\"\n                git_default_branch_updated: 1636669297674\n                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_file_url: \"\"\n                git_path: .harness/policy.rego\n                git_repo: \"github.com/org/repo,omitempty\"\n                identifier: policy-1\n                name: Pipeline Approval\n                org_id: test-org\n                project_id: test-project\n                rego: \"\"\n                updated: 1636669297674\n              - account_id: eBqAoNchMLKigC_qZ5EdC\n                created: 1636669297674\n                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_connector_ref: \".\"\n                git_default_branch: main\n                git_default_branch_update_error:\n                  explanation: \"File with given filepath [file.rego] already exists\\\n                    \\ in Github, thus couldn't create a new file\"\n                  hint: \"Please check if there's already a file [file.rego] in Github\\\n                    \\ repository [rego-demo] for the given filepath and branch [main].\"\n                  message: \"Please check if there's already a file [file.rego] in\\\n                    \\ Github repository [rego-demo] for the given filepath and branch\\\n                    \\ [main].\"\n                git_default_branch_updated: 1636669297674\n                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_file_url: \"\"\n                git_path: .harness/policy.rego\n                git_repo: \"github.com/org/repo,omitempty\"\n                identifier: policy-1\n                name: Pipeline Approval\n                org_id: test-org\n                project_id: test-project\n                rego: \"\"\n                updated: 1636669297674\n        \"400\":\n          description: \"GitError: Bad Request response.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: \"Unauthorized: Unauthorized response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: \"Forbidden: Forbidden response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"NotFound: Not Found response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"500\":\n          description: \"InternalServer: Internal Server Error response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"502\":\n          description: \"BadGateway: Bad Gateway response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - jwt_header_Authorization:\n        - core_governancePolicy_view\n        - core_governancePolicy_edit\n        - core_governancePolicy_delete\n        - core_governancePolicySets_view\n        - core_governancePolicySets_edit\n        - core_governancePolicySets_delete\n        - core_governancePolicySets_evaluate\n        - core_governance_admin\n      - api_key_header_x-api-key: []\n    post:\n      tags:\n      - policies\n      description: Create a policy\n      operationId: policies#create\n      parameters:\n      - name: accountIdentifier\n        in: query\n        description: Harness account ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness account ID\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        example: eBqAoNchMLKigC_qZ5EdC\n      - name: orgIdentifier\n        in: query\n        description: Harness organization ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness organization ID\n          example: test-org\n          default: \"\"\n        example: test-org\n      - name: projectIdentifier\n        in: query\n        description: Harness project ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness project ID\n          example: test-project\n          default: \"\"\n        example: test-project\n      - name: module\n        in: query\n        description: \"The module in which the resource was created, updated or deleted.\\\n          \\ Only relevant in the context of a project\"\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: \"The module in which the resource was created, updated or deleted.\\\n            \\ Only relevant in the context of a project\"\n          example: sto\n          enum:\n          - cd\n          - cf\n          - ci\n          - sto\n          - cv\n        example: cv\n      - name: git_commit_msg\n        in: query\n        description: The commit message used in git when creating the policy\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: The commit message used in git when creating the policy\n          example: harness policy commit msg\n        example: harness policy commit msg\n      - name: git_import\n        in: query\n        description: A flag to determine if the api should try and import and existing\n          policy from git\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: boolean\n          description: A flag to determine if the api should try and import and existing\n            policy from git\n          example: true\n        example: true\n      - name: git_branch\n        in: query\n        description: The git branch the policy will be created in\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: The git branch the policy will be created in\n          example: main\n        example: main\n      - name: git_is_new_branch\n        in: query\n        description: A flag to determine if the api should try and commit to a new\n          branch\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: boolean\n          description: A flag to determine if the api should try and commit to a new\n            branch\n          example: true\n        example: true\n      - name: git_base_branch\n        in: query\n        description: \"If committing to a new branch, git_base_branch tells the api\\\n          \\ which branch to base the new branch from\"\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: \"If committing to a new branch, git_base_branch tells the api\\\n            \\ which branch to base the new branch from\"\n          example: main\n        example: main\n      - name: x-api-key\n        in: header\n        description: Harness PAT key used to perform authorization\n        required: false\n        style: simple\n        explode: false\n        schema:\n          type: string\n          description: Harness PAT key used to perform authorization\n          example: Quis enim alias deserunt repudiandae quidem est.\n        example: Laudantium ea unde consequuntur.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateRequestBody'\n            example:\n              git_connector_ref: \".\"\n              git_path: .harness/policy.rego\n              git_repo: github.com/org/repo\n              identifier: policy-1\n              name: Check that an approval step is present\n              rego: |-\n                package test\n                deny[\"should say hello world\"] {input.message != \"world\"}\n        required: true\n      responses:\n        \"201\":\n          description: Created response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Policy'\n              example:\n                account_id: eBqAoNchMLKigC_qZ5EdC\n                created: 1636669297674\n                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_connector_ref: \".\"\n                git_default_branch: main\n                git_default_branch_update_error:\n                  explanation: \"File with given filepath [file.rego] already exists\\\n                    \\ in Github, thus couldn't create a new file\"\n                  hint: \"Please check if there's already a file [file.rego] in Github\\\n                    \\ repository [rego-demo] for the given filepath and branch [main].\"\n                  message: \"Please check if there's already a file [file.rego] in\\\n                    \\ Github repository [rego-demo] for the given filepath and branch\\\n                    \\ [main].\"\n                git_default_branch_updated: 1636669297674\n                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_file_url: \"\"\n                git_path: .harness/policy.rego\n                git_repo: \"github.com/org/repo,omitempty\"\n                identifier: policy-1\n                name: Pipeline Approval\n                org_id: test-org\n                project_id: test-project\n                rego: \"\"\n                updated: 1636669297674\n        \"400\":\n          description: \"GitError: Bad Request response.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: \"Unauthorized: Unauthorized response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: \"Forbidden: Forbidden response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"NotFound: Not Found response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"500\":\n          description: \"InternalServer: Internal Server Error response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"502\":\n          description: \"BadGateway: Bad Gateway response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - jwt_header_Authorization:\n        - core_governancePolicy_view\n        - core_governancePolicy_edit\n        - core_governancePolicy_delete\n        - core_governancePolicySets_view\n        - core_governancePolicySets_edit\n        - core_governancePolicySets_delete\n        - core_governancePolicySets_evaluate\n        - core_governance_admin\n      - api_key_header_x-api-key: []\n  /api/v1/policies/{identifier}:\n    get:\n      tags:\n      - policies\n      description: Find a policy by identifier\n      operationId: policies#find\n      parameters:\n      - name: accountIdentifier\n        in: query\n        description: Harness account ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness account ID\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        example: eBqAoNchMLKigC_qZ5EdC\n      - name: orgIdentifier\n        in: query\n        description: Harness organization ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness organization ID\n          example: test-org\n          default: \"\"\n        example: test-org\n      - name: projectIdentifier\n        in: query\n        description: Harness project ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness project ID\n          example: test-project\n          default: \"\"\n        example: test-project\n      - name: git_branch\n        in: query\n        description: The git branch the policy resides in\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: The git branch the policy resides in\n          example: main\n        example: main\n      - name: identifier\n        in: path\n        description: Identifier of the policy to retrieve\n        required: true\n        style: simple\n        explode: false\n        schema:\n          minLength: 1\n          type: string\n          description: Identifier of the policy to retrieve\n          example: policy-1\n        example: policy-1\n      - name: x-api-key\n        in: header\n        description: Harness PAT key used to perform authorization\n        required: false\n        style: simple\n        explode: false\n        schema:\n          type: string\n          description: Harness PAT key used to perform authorization\n          example: Nihil molestias iure iste aliquam excepturi hic.\n        example: Et voluptate nobis ex quis distinctio quis.\n      responses:\n        \"200\":\n          description: OK response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Policy'\n              example:\n                account_id: eBqAoNchMLKigC_qZ5EdC\n                created: 1636669297674\n                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_connector_ref: \".\"\n                git_default_branch: main\n                git_default_branch_update_error:\n                  explanation: \"File with given filepath [file.rego] already exists\\\n                    \\ in Github, thus couldn't create a new file\"\n                  hint: \"Please check if there's already a file [file.rego] in Github\\\n                    \\ repository [rego-demo] for the given filepath and branch [main].\"\n                  message: \"Please check if there's already a file [file.rego] in\\\n                    \\ Github repository [rego-demo] for the given filepath and branch\\\n                    \\ [main].\"\n                git_default_branch_updated: 1636669297674\n                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_file_url: \"\"\n                git_path: .harness/policy.rego\n                git_repo: \"github.com/org/repo,omitempty\"\n                identifier: policy-1\n                name: Pipeline Approval\n                org_id: test-org\n                project_id: test-project\n                rego: \"\"\n                updated: 1636669297674\n        \"400\":\n          description: \"GitError: Bad Request response.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: \"Unauthorized: Unauthorized response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: \"Forbidden: Forbidden response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"NotFound: Not Found response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"500\":\n          description: \"InternalServer: Internal Server Error response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"502\":\n          description: \"BadGateway: Bad Gateway response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - jwt_header_Authorization:\n        - core_governancePolicy_view\n        - core_governancePolicy_edit\n        - core_governancePolicy_delete\n        - core_governancePolicySets_view\n        - core_governancePolicySets_edit\n        - core_governancePolicySets_delete\n        - core_governancePolicySets_evaluate\n        - core_governance_admin\n      - api_key_header_x-api-key: []\n    delete:\n      tags:\n      - policies\n      description: Delete a policy by identifier\n      operationId: policies#delete\n      parameters:\n      - name: accountIdentifier\n        in: query\n        description: Harness account ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness account ID\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        example: eBqAoNchMLKigC_qZ5EdC\n      - name: orgIdentifier\n        in: query\n        description: Harness organization ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness organization ID\n          example: test-org\n          default: \"\"\n        example: test-org\n      - name: projectIdentifier\n        in: query\n        description: Harness project ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness project ID\n          example: test-project\n          default: \"\"\n        example: test-project\n      - name: module\n        in: query\n        description: \"The module in which the resource was created, updated or deleted.\\\n          \\ Only relevant in the context of a project\"\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: \"The module in which the resource was created, updated or deleted.\\\n            \\ Only relevant in the context of a project\"\n          example: ci\n          enum:\n          - cd\n          - cf\n          - ci\n          - sto\n          - cv\n        example: sto\n      - name: identifier\n        in: path\n        description: Identifier of the policy\n        required: true\n        style: simple\n        explode: false\n        schema:\n          minLength: 1\n          type: string\n          description: Identifier of the policy\n          example: policy-1\n        example: policy-1\n      - name: x-api-key\n        in: header\n        description: Harness PAT key used to perform authorization\n        required: false\n        style: simple\n        explode: false\n        schema:\n          type: string\n          description: Harness PAT key used to perform authorization\n          example: Est quidem explicabo pariatur qui.\n        example: Molestiae non eaque et sunt.\n      responses:\n        \"204\":\n          description: No Content response.\n        \"400\":\n          description: \"GitError: Bad Request response.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: \"Unauthorized: Unauthorized response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: \"Forbidden: Forbidden response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"NotFound: Not Found response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"500\":\n          description: \"InternalServer: Internal Server Error response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"502\":\n          description: \"BadGateway: Bad Gateway response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - jwt_header_Authorization:\n        - core_governancePolicy_view\n        - core_governancePolicy_edit\n        - core_governancePolicy_delete\n        - core_governancePolicySets_view\n        - core_governancePolicySets_edit\n        - core_governancePolicySets_delete\n        - core_governancePolicySets_evaluate\n        - core_governance_admin\n      - api_key_header_x-api-key: []\n    patch:\n      tags:\n      - policies\n      description: Update a policy by identifier\n      operationId: policies#update\n      parameters:\n      - name: git_commit_msg\n        in: query\n        description: The commit message used in git when creating the policy\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: The commit message used in git when creating the policy\n          example: harness policy commit msg\n        example: harness policy commit msg\n      - name: git_is_new_branch\n        in: query\n        description: A flag to determine if the api should try and commit to a new\n          branch\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: boolean\n          description: A flag to determine if the api should try and commit to a new\n            branch\n          example: true\n        example: true\n      - name: git_base_branch\n        in: query\n        description: \"If committing to a new branch, git_base_branch tells the api\\\n          \\ which branch to base the new branch from\"\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: \"If committing to a new branch, git_base_branch tells the api\\\n            \\ which branch to base the new branch from\"\n          example: main\n        example: main\n      - name: git_branch\n        in: query\n        description: The git branch the policy resides in\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: The git branch the policy resides in\n          example: main\n        example: main\n      - name: git_commit_sha\n        in: query\n        description: The existing commit sha of the file being updated\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: The existing commit sha of the file being updated\n          example: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n        example: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n      - name: git_file_id\n        in: query\n        description: The existing file if od the bile being updated\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: The existing file if od the bile being updated\n          example: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n        example: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n      - name: accountIdentifier\n        in: query\n        description: Harness account ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness account ID\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        example: eBqAoNchMLKigC_qZ5EdC\n      - name: orgIdentifier\n        in: query\n        description: Harness organization ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness organization ID\n          example: test-org\n          default: \"\"\n        example: test-org\n      - name: projectIdentifier\n        in: query\n        description: Harness project ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness project ID\n          example: test-project\n          default: \"\"\n        example: test-project\n      - name: module\n        in: query\n        description: \"The module in which the resource was created, updated or deleted.\\\n          \\ Only relevant in the context of a project\"\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: \"The module in which the resource was created, updated or deleted.\\\n            \\ Only relevant in the context of a project\"\n          example: cd\n          enum:\n          - cd\n          - cf\n          - ci\n          - sto\n          - cv\n        example: cf\n      - name: identifier\n        in: path\n        description: Identifier of the policy\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n          description: Identifier of the policy\n          example: policy-1\n        example: policy-1\n      - name: x-api-key\n        in: header\n        description: Harness PAT key used to perform authorization\n        required: false\n        style: simple\n        explode: false\n        schema:\n          type: string\n          description: Harness PAT key used to perform authorization\n          example: Accusantium quidem unde harum harum.\n        example: Ut dolores quae.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateRequestBody'\n            example:\n              name: Check that an approval step is present\n              rego: |-\n                package test\n                deny[\"should say hello world\"] {input.message != \"world\"}\n        required: true\n      responses:\n        \"204\":\n          description: No Content response.\n        \"400\":\n          description: \"GitError: Bad Request response.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: \"Unauthorized: Unauthorized response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: \"Forbidden: Forbidden response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"NotFound: Not Found response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"500\":\n          description: \"InternalServer: Internal Server Error response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"502\":\n          description: \"BadGateway: Bad Gateway response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - jwt_header_Authorization:\n        - core_governancePolicy_view\n        - core_governancePolicy_edit\n        - core_governancePolicy_delete\n        - core_governancePolicySets_view\n        - core_governancePolicySets_edit\n        - core_governancePolicySets_delete\n        - core_governancePolicySets_evaluate\n        - core_governance_admin\n      - api_key_header_x-api-key: []\n  /api/v1/policysets:\n    get:\n      tags:\n      - policysets\n      description: List all policy sets\n      operationId: policysets#list\n      parameters:\n      - name: accountIdentifier\n        in: query\n        description: Harness account ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness account ID\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        example: eBqAoNchMLKigC_qZ5EdC\n      - name: orgIdentifier\n        in: query\n        description: Harness organization ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness organization ID\n          example: test-org\n          default: \"\"\n        example: test-org\n      - name: projectIdentifier\n        in: query\n        description: Harness project ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness project ID\n          example: test-project\n          default: \"\"\n        example: test-project\n      - name: per_page\n        in: query\n        description: Number of results per page\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          maximum: 100\n          minimum: 1\n          type: integer\n          description: Number of results per page\n          example: 20\n          default: 50\n        example: 20\n      - name: page\n        in: query\n        description: Page number (starting from 0)\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          minimum: 0\n          type: integer\n          description: Page number (starting from 0)\n          example: 4\n          default: 0\n        example: 4\n      - name: searchTerm\n        in: query\n        description: Filter results by partial name match\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Filter results by partial name match\n          example: poli\n          default: \"\"\n        example: poli\n      - name: sort\n        in: query\n        description: Sort order for results\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Sort order for results\n          example: \"updated,ASC\"\n          default: \"name,ASC\"\n          enum:\n          - \"name,ASC\"\n          - \"name,DESC\"\n          - \"updated,ASC\"\n          - \"updated,DESC\"\n        example: \"updated,ASC\"\n      - name: type\n        in: query\n        description: Filter results by type\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          minLength: 1\n          type: string\n          description: Filter results by type\n          example: pipeline\n        example: pipeline\n      - name: action\n        in: query\n        description: Filter results by action\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          minLength: 1\n          type: string\n          description: Filter results by action\n          example: onrun\n        example: onrun\n      - name: x-api-key\n        in: header\n        description: Harness PAT key used to perform authorization\n        required: false\n        style: simple\n        explode: false\n        schema:\n          type: string\n          description: Harness PAT key used to perform authorization\n          example: Aliquid soluta repellendus numquam.\n        example: Eos inventore temporibus.\n      responses:\n        \"200\":\n          description: OK response.\n          headers:\n            Link:\n              description: Link-based paging\n              required: true\n              style: simple\n              explode: false\n              schema:\n                type: string\n                description: Link-based paging\n                example: \"\"\n              example: \"\"\n            X-Page-Index:\n              description: Page number\n              required: true\n              style: simple\n              explode: false\n              schema:\n                type: integer\n                description: Page number\n                format: int64\n                example: 4\n              example: 4\n            X-Page-Item-Count:\n              description: Number of results in this page\n              required: true\n              style: simple\n              explode: false\n              schema:\n                type: integer\n                description: Number of results in this page\n                format: int64\n                example: 20\n              example: 20\n            X-Page-Size:\n              description: Requested page size\n              required: true\n              style: simple\n              explode: false\n              schema:\n                type: integer\n                description: Requested page size\n                format: int64\n                example: 20\n              example: 20\n            X-Total-Items:\n              description: Total results available\n              required: true\n              style: simple\n              explode: false\n              schema:\n                type: integer\n                description: Total results available\n                format: int64\n                example: 230\n              example: 230\n            X-Total-Pages:\n              description: Total pages available\n              required: true\n              style: simple\n              explode: false\n              schema:\n                type: integer\n                description: Total pages available\n                format: int64\n                example: 12\n              example: 12\n          content:\n            application/json:\n              schema:\n                type: array\n                example:\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  policies:\n                  - account_id: eBqAoNchMLKigC_qZ5EdC\n                    created: 1636669297674\n                    identifier: policy-1\n                    name: Pipeline Approval\n                    org_id: test-org\n                    project_id: test-project\n                    rego: \"\"\n                    severity: warning\n                    updated: 1636669297674\n                  - account_id: eBqAoNchMLKigC_qZ5EdC\n                    created: 1636669297674\n                    identifier: policy-1\n                    name: Pipeline Approval\n                    org_id: test-org\n                    project_id: test-project\n                    rego: \"\"\n                    severity: warning\n                    updated: 1636669297674\n                  project_id: test-project\n                  type: pipeline\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  policies:\n                  - account_id: eBqAoNchMLKigC_qZ5EdC\n                    created: 1636669297674\n                    identifier: policy-1\n                    name: Pipeline Approval\n                    org_id: test-org\n                    project_id: test-project\n                    rego: \"\"\n                    severity: warning\n                    updated: 1636669297674\n                  - account_id: eBqAoNchMLKigC_qZ5EdC\n                    created: 1636669297674\n                    identifier: policy-1\n                    name: Pipeline Approval\n                    org_id: test-org\n                    project_id: test-project\n                    rego: \"\"\n                    severity: warning\n                    updated: 1636669297674\n                  project_id: test-project\n                  type: pipeline\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  action: onrun\n                  created: 1636669297674\n                  description: Captures critical production policies\n                  enabled: true\n                  identifier: policyset-1\n                  name: Production Policies\n                  org_id: test-org\n                  policies:\n                  - account_id: eBqAoNchMLKigC_qZ5EdC\n                    created: 1636669297674\n                    identifier: policy-1\n                    name: Pipeline Approval\n                    org_id: test-org\n                    project_id: test-project\n                    rego: \"\"\n                    severity: warning\n                    updated: 1636669297674\n                  - account_id: eBqAoNchMLKigC_qZ5EdC\n                    created: 1636669297674\n                    identifier: policy-1\n                    name: Pipeline Approval\n                    org_id: test-org\n                    project_id: test-project\n                    rego: \"\"\n                    severity: warning\n                    updated: 1636669297674\n                  project_id: test-project\n                  type: pipeline\n                  updated: 1636669297674\n                items:\n                  $ref: '#/components/schemas/PolicySet'\n                x-content-type: application/json\n              example:\n              - account_id: eBqAoNchMLKigC_qZ5EdC\n                action: onrun\n                created: 1636669297674\n                description: Captures critical production policies\n                enabled: true\n                identifier: policyset-1\n                name: Production Policies\n                org_id: test-org\n                policies:\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  created: 1636669297674\n                  identifier: policy-1\n                  name: Pipeline Approval\n                  org_id: test-org\n                  project_id: test-project\n                  rego: \"\"\n                  severity: warning\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  created: 1636669297674\n                  identifier: policy-1\n                  name: Pipeline Approval\n                  org_id: test-org\n                  project_id: test-project\n                  rego: \"\"\n                  severity: warning\n                  updated: 1636669297674\n                project_id: test-project\n                type: pipeline\n                updated: 1636669297674\n              - account_id: eBqAoNchMLKigC_qZ5EdC\n                action: onrun\n                created: 1636669297674\n                description: Captures critical production policies\n                enabled: true\n                identifier: policyset-1\n                name: Production Policies\n                org_id: test-org\n                policies:\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  created: 1636669297674\n                  identifier: policy-1\n                  name: Pipeline Approval\n                  org_id: test-org\n                  project_id: test-project\n                  rego: \"\"\n                  severity: warning\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  created: 1636669297674\n                  identifier: policy-1\n                  name: Pipeline Approval\n                  org_id: test-org\n                  project_id: test-project\n                  rego: \"\"\n                  severity: warning\n                  updated: 1636669297674\n                project_id: test-project\n                type: pipeline\n                updated: 1636669297674\n        \"400\":\n          description: \"BadRequest: Bad Request response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: \"Unauthorized: Unauthorized response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: \"Forbidden: Forbidden response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"NotFound: Not Found response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"500\":\n          description: \"InternalServer: Internal Server Error response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"502\":\n          description: \"BadGateway: Bad Gateway response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - jwt_header_Authorization:\n        - core_governancePolicy_view\n        - core_governancePolicy_edit\n        - core_governancePolicy_delete\n        - core_governancePolicySets_view\n        - core_governancePolicySets_edit\n        - core_governancePolicySets_delete\n        - core_governancePolicySets_evaluate\n        - core_governance_admin\n      - api_key_header_x-api-key: []\n    post:\n      tags:\n      - policysets\n      description: Create a policy set\n      operationId: policysets#create\n      parameters:\n      - name: accountIdentifier\n        in: query\n        description: Harness account ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness account ID\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        example: eBqAoNchMLKigC_qZ5EdC\n      - name: orgIdentifier\n        in: query\n        description: Harness organization ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness organization ID\n          example: test-org\n          default: \"\"\n        example: test-org\n      - name: projectIdentifier\n        in: query\n        description: Harness project ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness project ID\n          example: test-project\n          default: \"\"\n        example: test-project\n      - name: module\n        in: query\n        description: \"The module in which the resource was created, updated or deleted.\\\n          \\ Only relevant in the context of a project\"\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: \"The module in which the resource was created, updated or deleted.\\\n            \\ Only relevant in the context of a project\"\n          example: cd\n          enum:\n          - cd\n          - cf\n          - ci\n          - sto\n          - cv\n        example: cv\n      - name: x-api-key\n        in: header\n        description: Harness PAT key used to perform authorization\n        required: false\n        style: simple\n        explode: false\n        schema:\n          type: string\n          description: Harness PAT key used to perform authorization\n          example: Et dolores cum.\n        example: Sed perspiciatis debitis.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateRequestBody2'\n            example:\n              action: onrun\n              description: Captures critical production policies\n              enabled: true\n              identifier: policyset-1\n              name: Production Policies\n              type: pipeline\n        required: true\n      responses:\n        \"201\":\n          description: Created response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicySet2'\n              example:\n                account_id: eBqAoNchMLKigC_qZ5EdC\n                action: onrun\n                created: 1636669297674\n                description: Captures critical production policies\n                enabled: true\n                identifier: policyset-1\n                name: Production Policies\n                org_id: test-org\n                policies:\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  created: 1636669297674\n                  identifier: policy-1\n                  name: Pipeline Approval\n                  org_id: test-org\n                  project_id: test-project\n                  rego: \"\"\n                  severity: warning\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  created: 1636669297674\n                  identifier: policy-1\n                  name: Pipeline Approval\n                  org_id: test-org\n                  project_id: test-project\n                  rego: \"\"\n                  severity: warning\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  created: 1636669297674\n                  identifier: policy-1\n                  name: Pipeline Approval\n                  org_id: test-org\n                  project_id: test-project\n                  rego: \"\"\n                  severity: warning\n                  updated: 1636669297674\n                project_id: test-project\n                type: pipeline\n                updated: 1636669297674\n        \"400\":\n          description: \"BadRequest: Bad Request response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: \"Unauthorized: Unauthorized response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: \"Forbidden: Forbidden response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"NotFound: Not Found response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"500\":\n          description: \"InternalServer: Internal Server Error response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"502\":\n          description: \"BadGateway: Bad Gateway response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - jwt_header_Authorization:\n        - core_governancePolicy_view\n        - core_governancePolicy_edit\n        - core_governancePolicy_delete\n        - core_governancePolicySets_view\n        - core_governancePolicySets_edit\n        - core_governancePolicySets_delete\n        - core_governancePolicySets_evaluate\n        - core_governance_admin\n      - api_key_header_x-api-key: []\n  /api/v1/policysets/{identifier}:\n    get:\n      tags:\n      - policysets\n      description: Find a policy set by identifier\n      operationId: policysets#find\n      parameters:\n      - name: accountIdentifier\n        in: query\n        description: Harness account ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness account ID\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        example: eBqAoNchMLKigC_qZ5EdC\n      - name: orgIdentifier\n        in: query\n        description: Harness organization ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness organization ID\n          example: test-org\n          default: \"\"\n        example: test-org\n      - name: projectIdentifier\n        in: query\n        description: Harness project ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness project ID\n          example: test-project\n          default: \"\"\n        example: test-project\n      - name: identifier\n        in: path\n        description: Identifier of the policy set to retrieve\n        required: true\n        style: simple\n        explode: false\n        schema:\n          minLength: 1\n          type: string\n          description: Identifier of the policy set to retrieve\n          example: policyset-1\n        example: policyset-1\n      - name: x-api-key\n        in: header\n        description: Harness PAT key used to perform authorization\n        required: false\n        style: simple\n        explode: false\n        schema:\n          type: string\n          description: Harness PAT key used to perform authorization\n          example: Ad quo sequi animi perspiciatis.\n        example: Maiores quia et fugiat cum architecto.\n      responses:\n        \"200\":\n          description: OK response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicySet2'\n              example:\n                account_id: eBqAoNchMLKigC_qZ5EdC\n                action: onrun\n                created: 1636669297674\n                description: Captures critical production policies\n                enabled: true\n                identifier: policyset-1\n                name: Production Policies\n                org_id: test-org\n                policies:\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  created: 1636669297674\n                  identifier: policy-1\n                  name: Pipeline Approval\n                  org_id: test-org\n                  project_id: test-project\n                  rego: \"\"\n                  severity: warning\n                  updated: 1636669297674\n                - account_id: eBqAoNchMLKigC_qZ5EdC\n                  created: 1636669297674\n                  identifier: policy-1\n                  name: Pipeline Approval\n                  org_id: test-org\n                  project_id: test-project\n                  rego: \"\"\n                  severity: warning\n                  updated: 1636669297674\n                project_id: test-project\n                type: pipeline\n                updated: 1636669297674\n        \"400\":\n          description: \"BadRequest: Bad Request response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: \"Unauthorized: Unauthorized response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: \"Forbidden: Forbidden response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"NotFound: Not Found response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"500\":\n          description: \"InternalServer: Internal Server Error response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"502\":\n          description: \"BadGateway: Bad Gateway response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - jwt_header_Authorization:\n        - core_governancePolicy_view\n        - core_governancePolicy_edit\n        - core_governancePolicy_delete\n        - core_governancePolicySets_view\n        - core_governancePolicySets_edit\n        - core_governancePolicySets_delete\n        - core_governancePolicySets_evaluate\n        - core_governance_admin\n      - api_key_header_x-api-key: []\n    delete:\n      tags:\n      - policysets\n      description: Delete a policy set by identifier\n      operationId: policysets#delete\n      parameters:\n      - name: accountIdentifier\n        in: query\n        description: Harness account ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness account ID\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        example: eBqAoNchMLKigC_qZ5EdC\n      - name: orgIdentifier\n        in: query\n        description: Harness organization ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness organization ID\n          example: test-org\n          default: \"\"\n        example: test-org\n      - name: projectIdentifier\n        in: query\n        description: Harness project ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness project ID\n          example: test-project\n          default: \"\"\n        example: test-project\n      - name: module\n        in: query\n        description: \"The module in which the resource was created, updated or deleted.\\\n          \\ Only relevant in the context of a project\"\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: \"The module in which the resource was created, updated or deleted.\\\n            \\ Only relevant in the context of a project\"\n          example: cd\n          enum:\n          - cd\n          - cf\n          - ci\n          - sto\n          - cv\n        example: cd\n      - name: identifier\n        in: path\n        description: Identifier of the policy set\n        required: true\n        style: simple\n        explode: false\n        schema:\n          minLength: 1\n          type: string\n          description: Identifier of the policy set\n          example: policyset-1\n        example: policyset-1\n      - name: x-api-key\n        in: header\n        description: Harness PAT key used to perform authorization\n        required: false\n        style: simple\n        explode: false\n        schema:\n          type: string\n          description: Harness PAT key used to perform authorization\n          example: Veniam cum praesentium et corrupti harum.\n        example: Enim velit exercitationem natus voluptatem placeat occaecati.\n      responses:\n        \"204\":\n          description: No Content response.\n        \"400\":\n          description: \"BadRequest: Bad Request response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: \"Unauthorized: Unauthorized response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: \"Forbidden: Forbidden response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"NotFound: Not Found response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"500\":\n          description: \"InternalServer: Internal Server Error response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"502\":\n          description: \"BadGateway: Bad Gateway response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - jwt_header_Authorization:\n        - core_governancePolicy_view\n        - core_governancePolicy_edit\n        - core_governancePolicy_delete\n        - core_governancePolicySets_view\n        - core_governancePolicySets_edit\n        - core_governancePolicySets_delete\n        - core_governancePolicySets_evaluate\n        - core_governance_admin\n      - api_key_header_x-api-key: []\n    patch:\n      tags:\n      - policysets\n      description: Update a policy set by identifier\n      operationId: policysets#update\n      parameters:\n      - name: accountIdentifier\n        in: query\n        description: Harness account ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness account ID\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        example: eBqAoNchMLKigC_qZ5EdC\n      - name: orgIdentifier\n        in: query\n        description: Harness organization ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness organization ID\n          example: test-org\n          default: \"\"\n        example: test-org\n      - name: projectIdentifier\n        in: query\n        description: Harness project ID\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: Harness project ID\n          example: test-project\n          default: \"\"\n        example: test-project\n      - name: module\n        in: query\n        description: \"The module in which the resource was created, updated or deleted.\\\n          \\ Only relevant in the context of a project\"\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: string\n          description: \"The module in which the resource was created, updated or deleted.\\\n            \\ Only relevant in the context of a project\"\n          example: cf\n          enum:\n          - cd\n          - cf\n          - ci\n          - sto\n          - cv\n        example: cf\n      - name: identifier\n        in: path\n        description: Identifier of the policy set\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n          description: Identifier of the policy set\n          example: policyset-1\n        example: policyset-1\n      - name: x-api-key\n        in: header\n        description: Harness PAT key used to perform authorization\n        required: false\n        style: simple\n        explode: false\n        schema:\n          type: string\n          description: Harness PAT key used to perform authorization\n          example: Quo voluptatum minima nulla facere.\n        example: Unde quidem et sint.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateRequestBody2'\n            example:\n              action: onrun\n              description: Captures critical production policies\n              enabled: true\n              name: Production Policies\n              policies:\n              - identifier: policy-1\n                severity: warning\n              - identifier: policy-1\n                severity: warning\n              - identifier: policy-1\n                severity: warning\n              - identifier: policy-1\n                severity: warning\n              type: pipeline\n        required: true\n      responses:\n        \"204\":\n          description: No Content response.\n        \"400\":\n          description: \"BadRequest: Bad Request response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: \"Unauthorized: Unauthorized response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: \"Forbidden: Forbidden response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"NotFound: Not Found response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"500\":\n          description: \"InternalServer: Internal Server Error response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"502\":\n          description: \"BadGateway: Bad Gateway response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - jwt_header_Authorization:\n        - core_governancePolicy_view\n        - core_governancePolicy_edit\n        - core_governancePolicy_delete\n        - core_governancePolicySets_view\n        - core_governancePolicySets_edit\n        - core_governancePolicySets_delete\n        - core_governancePolicySets_evaluate\n        - core_governance_admin\n      - api_key_header_x-api-key: []\n  /api/v1/system/health:\n    get:\n      tags:\n      - system\n      description: Check service health\n      operationId: system#health\n      responses:\n        \"204\":\n          description: No Content response.\n        \"500\":\n          description: \"InternalServer: Internal Server Error response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"502\":\n          description: \"BadGateway: Bad Gateway response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /api/v1/system/version:\n    get:\n      tags:\n      - system\n      description: Check service version\n      operationId: system#version\n      responses:\n        \"200\":\n          description: OK response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceVersion'\n              example:\n                commit: 96381692bf3a2bd7904769c6886e832435768b57\n                version: v0.123.0\n        \"500\":\n          description: \"InternalServer: Internal Server Error response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"502\":\n          description: \"BadGateway: Bad Gateway response.\"\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  schemas:\n    AggregateStatus:\n      required:\n      - error\n      - pass\n      - time\n      - warning\n      type: object\n      properties:\n        error:\n          type: integer\n          description: Count of evaluations that have a status of 'error'\n          format: int64\n          example: 6131954873636422800\n        pass:\n          type: integer\n          description: Count of evaluations that have a status of 'pass'\n          format: int64\n          example: 6122119631547907047\n        time:\n          type: integer\n          description: The Unix time of this particular aggregation\n          format: int64\n          example: 4891691738930437908\n        warning:\n          type: integer\n          description: Count of evaluations that have a status of 'warning'\n          format: int64\n          example: 4996866704380369589\n      description: Aggregate metrics for evaluations on a single day\n      example:\n        error: 2174285678586957279\n        pass: 6713433384340029592\n        time: 1299583733304690280\n        warning: 2581612184076268921\n    CreateRequestBody:\n      required:\n      - account_id\n      - created\n      - identifier\n      - name\n      - org_id\n      - project_id\n      - rego\n      - updated\n      type: object\n      properties:\n        git_connector_ref:\n          type: string\n          description: The harness connector used for authenticating on the git provider\n          example: \".\"\n        git_path:\n          type: string\n          description: The path to the file in the git repo\n          example: .harness/policy.rego\n        git_repo:\n          type: string\n          description: The git repo the policy resides in\n          example: github.com/org/repo\n        identifier:\n          minLength: 1\n          type: string\n          description: Identifier for the policy\n          example: policy-1\n        name:\n          minLength: 1\n          type: string\n          description: Name of the policy\n          example: Check that an approval step is present\n        rego:\n          minLength: 1\n          type: string\n          description: Rego that defines the policy policy\n          example: |-\n            package test\n            deny[\"should say hello world\"] {input.message != \"world\"}\n      example:\n        git_connector_ref: \".\"\n        git_path: .harness/policy.rego\n        git_repo: github.com/org/repo\n        identifier: policy-1\n        name: Check that an approval step is present\n        rego: |-\n          package test\n          deny[\"should say hello world\"] {input.message != \"world\"}\n    CreateRequestBody2:\n      required:\n      - account_id\n      - action\n      - created\n      - enabled\n      - identifier\n      - name\n      - org_id\n      - project_id\n      - type\n      - updated\n      type: object\n      properties:\n        action:\n          minLength: 1\n          type: string\n          description: Action that triggers the policy set\n          example: onrun\n        description:\n          type: string\n          description: Description of the policy set\n          example: Captures critical production policies\n        enabled:\n          type: boolean\n          description: Only enabled policy sets are evaluated when evaluating by type/action\n          example: true\n        identifier:\n          minLength: 1\n          type: string\n          description: Identifier for the policy set\n          example: policyset-1\n        name:\n          minLength: 1\n          type: string\n          description: Name of the policy set\n          example: Production Policies\n        type:\n          minLength: 1\n          type: string\n          description: Type of input suitable for the policy set\n          example: pipeline\n      example:\n        action: onrun\n        description: Captures critical production policies\n        enabled: true\n        identifier: policyset-1\n        name: Production Policies\n        type: pipeline\n    DashboardMetrics:\n      required:\n      - aggregates\n      - policy_health\n      type: object\n      properties:\n        aggregates:\n          type: array\n          description: Aggregate evaluation counts by day\n          example:\n          - error: 1201513832267580740\n            pass: 2920020791307846359\n            time: 461119712411546138\n            warning: 6971582622373151866\n          - error: 1201513832267580740\n            pass: 2920020791307846359\n            time: 461119712411546138\n            warning: 6971582622373151866\n          - error: 1201513832267580740\n            pass: 2920020791307846359\n            time: 461119712411546138\n            warning: 6971582622373151866\n          items:\n            $ref: '#/components/schemas/AggregateStatus'\n        policy_health:\n          $ref: '#/components/schemas/PolicyHealth'\n      example:\n        aggregates:\n        - error: 1201513832267580740\n          pass: 2920020791307846359\n          time: 461119712411546138\n          warning: 6971582622373151866\n        - error: 1201513832267580740\n          pass: 2920020791307846359\n          time: 461119712411546138\n          warning: 6971582622373151866\n        - error: 1201513832267580740\n          pass: 2920020791307846359\n          time: 461119712411546138\n          warning: 6971582622373151866\n        - error: 1201513832267580740\n          pass: 2920020791307846359\n          time: 461119712411546138\n          warning: 6971582622373151866\n        policy_health:\n          total_evaluation_count: 7467880620589340301\n          total_evaluation_entity_count:\n            error: 4962770580155356801\n            pass: 1838564234748219477\n            warning: 6712404284550845579\n          total_policy_count: 1018281497905076142\n          total_policy_set_count: 4767159674574934953\n          total_policy_set_entity_count:\n            A ut.: 8823333786778254735\n    Error:\n      required:\n      - fault\n      - id\n      - message\n      - name\n      - temporary\n      - timeout\n      type: object\n      properties:\n        fault:\n          type: boolean\n          description: Is the error a server-side fault?\n          example: true\n        id:\n          type: string\n          description: ID is a unique identifier for this particular occurrence of\n            the problem.\n          example: 123abc\n        message:\n          type: string\n          description: Message is a human-readable explanation specific to this occurrence\n            of the problem.\n          example: parameter 'p' must be an integer\n        name:\n          type: string\n          description: Name is the name of this class of errors.\n          example: bad_request\n        temporary:\n          type: boolean\n          description: Is the error temporary?\n          example: true\n        timeout:\n          type: boolean\n          description: Is the error a timeout?\n          example: false\n      example:\n        id: 3F1FKVRR\n        message: Value of ID must be an integer\n        name: bad_request\n    ErrorResultWithIdentifier:\n      required:\n      - fault\n      - id\n      - message\n      - name\n      - temporary\n      - timeout\n      type: object\n      properties:\n        fault:\n          type: boolean\n          description: Is the error a server-side fault?\n          example: false\n        id:\n          type: string\n          description: ID is a unique identifier for this particular occurrence of\n            the problem.\n          example: 123abc\n        identifier:\n          type: string\n          description: the identifier associated with the error\n          example: policy-1\n        message:\n          type: string\n          description: Message is a human-readable explanation specific to this occurrence\n            of the problem.\n          example: parameter 'p' must be an integer\n        name:\n          type: string\n          description: Name is the name of this class of errors.\n          example: bad_request\n        temporary:\n          type: boolean\n          description: Is the error temporary?\n          example: true\n        timeout:\n          type: boolean\n          description: Is the error a timeout?\n          example: true\n      example:\n        fault: false\n        id: 123abc\n        identifier: policy-1\n        message: parameter 'p' must be an integer\n        name: bad_request\n        temporary: true\n        timeout: false\n    EvaluateRequestBody:\n      required:\n      - input\n      - rego\n      type: object\n      properties:\n        input:\n          type: string\n          description: Input to evaluate\n          format: binary\n          example: !!binary |-\n            eyJtZXNzYWdlIjogImV2ZXJ5b25lIn0=\n        rego:\n          minLength: 1\n          type: string\n          description: Arbitrary rego to be evaluated\n          example: |-\n            package test\n            deny[\"should say hello world\"] {input.message != \"world\"}\n      example:\n        input: \"{\\\"message\\\": \\\"everyone\\\"}\"\n        rego: |-\n          package test\n          deny[\"should say hello world\"] {input.message != \"world\"}\n    EvaluatedPolicy:\n      required:\n      - deny_messages\n      - error\n      - output\n      - policy\n      - status\n      type: object\n      properties:\n        deny_messages:\n          type: array\n          description: The values of any `deny` rego rules as returned by the rego\n            engine\n          example:\n          - deployment stage 'example-stage' does not have a HarnessApproval step\n          - deployment stage 'example-stage' has step 'run-script' that is forbidden\n            type 'ShellScript'\n          items:\n            type: string\n            example: Quia animi et harum velit officia.\n        error:\n          type: string\n          description: Any errors returned by the rego engine when this policy was\n            evaluated\n          example: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n            test\"\n        output:\n          type: string\n          description: The output returned by the rego engine when this policy was\n            evaluated\n          format: binary\n          example: !!binary |-\n            ewogICAgImRlbnkiOiBbCiAgICAgICAgImRlcGxveW1lbnQgc3RhZ2UgJ2RlcGxveScgZG9lcyBu\n            b3QgaGF2ZSBhIEhhcm5lc3NBcHByb3ZhbCBzdGVwIgogICAgXSwKICAgICJzdGFnZXNfd2l0aF9h\n            cHByb3ZhbCI6IFtdCn0=\n        policy:\n          $ref: '#/components/schemas/Policy'\n        status:\n          type: string\n          description: The overall status for this individual policy indicating whether\n            it passed\n          example: error\n          enum:\n          - error\n          - warning\n          - pass\n      example:\n        deny_messages:\n        - deployment stage 'example-stage' does not have a HarnessApproval step\n        - deployment stage 'example-stage' has step 'run-script' that is forbidden\n          type 'ShellScript'\n        error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"test\"\n        output: |-\n          {\n              \"deny\": [\n                  \"deployment stage 'deploy' does not have a HarnessApproval step\"\n              ],\n              \"stages_with_approval\": []\n          }\n        policy:\n          account_id: eBqAoNchMLKigC_qZ5EdC\n          created: 1636669297674\n          git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n          git_connector_ref: \".\"\n          git_default_branch: main\n          git_default_branch_update_error:\n            explanation: \"File with given filepath [file.rego] already exists in Github,\\\n              \\ thus couldn't create a new file\"\n            hint: \"Please check if there's already a file [file.rego] in Github repository\\\n              \\ [rego-demo] for the given filepath and branch [main].\"\n            message: \"Please check if there's already a file [file.rego] in Github\\\n              \\ repository [rego-demo] for the given filepath and branch [main].\"\n          git_default_branch_updated: 1636669297674\n          git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n          git_file_url: \"\"\n          git_path: .harness/policy.rego\n          git_repo: \"github.com/org/repo,omitempty\"\n          identifier: policy-1\n          name: Pipeline Approval\n          org_id: test-org\n          project_id: test-project\n          rego: \"\"\n          updated: 1636669297674\n        status: error\n    Evaluation:\n      required:\n      - account_id\n      - action\n      - created\n      - details\n      - entity\n      - entity_metadata\n      - id\n      - input\n      - org_id\n      - project_id\n      - status\n      - type\n      type: object\n      properties:\n        account_id:\n          type: string\n          description: The Harness account in which the evaluation was performed\n          example: XRQAjvT37acOiXx9PRaQMF\n        action:\n          type: string\n          description: The action that triggered evaluation\n          example: onrun\n        created:\n          type: integer\n          description: The time at which the evaluation was performed in Unix time\n            millseconds\n          format: int64\n          example: 1636370209475\n        details:\n          type: array\n          description: The detailed results of te evaluation\n          example:\n          - account_id: eBqAoNchMLKigC_qZ5EdC\n            action: onrun\n            created: 1636669297674\n            description: Captures critical production policies\n            details:\n            - deny_messages:\n              - deployment stage 'example-stage' does not have a HarnessApproval step\n              - deployment stage 'example-stage' has step 'run-script' that is forbidden\n                type 'ShellScript'\n              error: \"policy.rego:25: rego_parse_error: non-terminated string m ==\\\n                \\ \\\"test\"\n              output: |-\n                {\n                    \"deny\": [\n                        \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                    ],\n                    \"stages_with_approval\": []\n                }\n              policy:\n                account_id: eBqAoNchMLKigC_qZ5EdC\n                created: 1636669297674\n                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_connector_ref: \".\"\n                git_default_branch: main\n                git_default_branch_update_error:\n                  explanation: \"File with given filepath [file.rego] already exists\\\n                    \\ in Github, thus couldn't create a new file\"\n                  hint: \"Please check if there's already a file [file.rego] in Github\\\n                    \\ repository [rego-demo] for the given filepath and branch [main].\"\n                  message: \"Please check if there's already a file [file.rego] in\\\n                    \\ Github repository [rego-demo] for the given filepath and branch\\\n                    \\ [main].\"\n                git_default_branch_updated: 1636669297674\n                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_file_url: \"\"\n                git_path: .harness/policy.rego\n                git_repo: \"github.com/org/repo,omitempty\"\n                identifier: policy-1\n                name: Pipeline Approval\n                org_id: test-org\n                project_id: test-project\n                rego: \"\"\n                updated: 1636669297674\n              status: error\n            - deny_messages:\n              - deployment stage 'example-stage' does not have a HarnessApproval step\n              - deployment stage 'example-stage' has step 'run-script' that is forbidden\n                type 'ShellScript'\n              error: \"policy.rego:25: rego_parse_error: non-terminated string m ==\\\n                \\ \\\"test\"\n              output: |-\n                {\n                    \"deny\": [\n                        \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                    ],\n                    \"stages_with_approval\": []\n                }\n              policy:\n                account_id: eBqAoNchMLKigC_qZ5EdC\n                created: 1636669297674\n                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_connector_ref: \".\"\n                git_default_branch: main\n                git_default_branch_update_error:\n                  explanation: \"File with given filepath [file.rego] already exists\\\n                    \\ in Github, thus couldn't create a new file\"\n                  hint: \"Please check if there's already a file [file.rego] in Github\\\n                    \\ repository [rego-demo] for the given filepath and branch [main].\"\n                  message: \"Please check if there's already a file [file.rego] in\\\n                    \\ Github repository [rego-demo] for the given filepath and branch\\\n                    \\ [main].\"\n                git_default_branch_updated: 1636669297674\n                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_file_url: \"\"\n                git_path: .harness/policy.rego\n                git_repo: \"github.com/org/repo,omitempty\"\n                identifier: policy-1\n                name: Pipeline Approval\n                org_id: test-org\n                project_id: test-project\n                rego: \"\"\n                updated: 1636669297674\n              status: error\n            - deny_messages:\n              - deployment stage 'example-stage' does not have a HarnessApproval step\n              - deployment stage 'example-stage' has step 'run-script' that is forbidden\n                type 'ShellScript'\n              error: \"policy.rego:25: rego_parse_error: non-terminated string m ==\\\n                \\ \\\"test\"\n              output: |-\n                {\n                    \"deny\": [\n                        \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                    ],\n                    \"stages_with_approval\": []\n                }\n              policy:\n                account_id: eBqAoNchMLKigC_qZ5EdC\n                created: 1636669297674\n                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_connector_ref: \".\"\n                git_default_branch: main\n                git_default_branch_update_error:\n                  explanation: \"File with given filepath [file.rego] already exists\\\n                    \\ in Github, thus couldn't create a new file\"\n                  hint: \"Please check if there's already a file [file.rego] in Github\\\n                    \\ repository [rego-demo] for the given filepath and branch [main].\"\n                  message: \"Please check if there's already a file [file.rego] in\\\n                    \\ Github repository [rego-demo] for the given filepath and branch\\\n                    \\ [main].\"\n                git_default_branch_updated: 1636669297674\n                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_file_url: \"\"\n                git_path: .harness/policy.rego\n                git_repo: \"github.com/org/repo,omitempty\"\n                identifier: policy-1\n                name: Pipeline Approval\n                org_id: test-org\n                project_id: test-project\n                rego: \"\"\n                updated: 1636669297674\n              status: error\n            enabled: true\n            identifier: policyset-1\n            name: Production Policies\n            org_id: test-org\n            project_id: test-project\n            status: error\n            type: pipeline\n            updated: 1636669297674\n          - account_id: eBqAoNchMLKigC_qZ5EdC\n            action: onrun\n            created: 1636669297674\n            description: Captures critical production policies\n            details:\n            - deny_messages:\n              - deployment stage 'example-stage' does not have a HarnessApproval step\n              - deployment stage 'example-stage' has step 'run-script' that is forbidden\n                type 'ShellScript'\n              error: \"policy.rego:25: rego_parse_error: non-terminated string m ==\\\n                \\ \\\"test\"\n              output: |-\n                {\n                    \"deny\": [\n                        \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                    ],\n                    \"stages_with_approval\": []\n                }\n              policy:\n                account_id: eBqAoNchMLKigC_qZ5EdC\n                created: 1636669297674\n                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_connector_ref: \".\"\n                git_default_branch: main\n                git_default_branch_update_error:\n                  explanation: \"File with given filepath [file.rego] already exists\\\n                    \\ in Github, thus couldn't create a new file\"\n                  hint: \"Please check if there's already a file [file.rego] in Github\\\n                    \\ repository [rego-demo] for the given filepath and branch [main].\"\n                  message: \"Please check if there's already a file [file.rego] in\\\n                    \\ Github repository [rego-demo] for the given filepath and branch\\\n                    \\ [main].\"\n                git_default_branch_updated: 1636669297674\n                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_file_url: \"\"\n                git_path: .harness/policy.rego\n                git_repo: \"github.com/org/repo,omitempty\"\n                identifier: policy-1\n                name: Pipeline Approval\n                org_id: test-org\n                project_id: test-project\n                rego: \"\"\n                updated: 1636669297674\n              status: error\n            - deny_messages:\n              - deployment stage 'example-stage' does not have a HarnessApproval step\n              - deployment stage 'example-stage' has step 'run-script' that is forbidden\n                type 'ShellScript'\n              error: \"policy.rego:25: rego_parse_error: non-terminated string m ==\\\n                \\ \\\"test\"\n              output: |-\n                {\n                    \"deny\": [\n                        \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                    ],\n                    \"stages_with_approval\": []\n                }\n              policy:\n                account_id: eBqAoNchMLKigC_qZ5EdC\n                created: 1636669297674\n                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_connector_ref: \".\"\n                git_default_branch: main\n                git_default_branch_update_error:\n                  explanation: \"File with given filepath [file.rego] already exists\\\n                    \\ in Github, thus couldn't create a new file\"\n                  hint: \"Please check if there's already a file [file.rego] in Github\\\n                    \\ repository [rego-demo] for the given filepath and branch [main].\"\n                  message: \"Please check if there's already a file [file.rego] in\\\n                    \\ Github repository [rego-demo] for the given filepath and branch\\\n                    \\ [main].\"\n                git_default_branch_updated: 1636669297674\n                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_file_url: \"\"\n                git_path: .harness/policy.rego\n                git_repo: \"github.com/org/repo,omitempty\"\n                identifier: policy-1\n                name: Pipeline Approval\n                org_id: test-org\n                project_id: test-project\n                rego: \"\"\n                updated: 1636669297674\n              status: error\n            - deny_messages:\n              - deployment stage 'example-stage' does not have a HarnessApproval step\n              - deployment stage 'example-stage' has step 'run-script' that is forbidden\n                type 'ShellScript'\n              error: \"policy.rego:25: rego_parse_error: non-terminated string m ==\\\n                \\ \\\"test\"\n              output: |-\n                {\n                    \"deny\": [\n                        \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                    ],\n                    \"stages_with_approval\": []\n                }\n              policy:\n                account_id: eBqAoNchMLKigC_qZ5EdC\n                created: 1636669297674\n                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_connector_ref: \".\"\n                git_default_branch: main\n                git_default_branch_update_error:\n                  explanation: \"File with given filepath [file.rego] already exists\\\n                    \\ in Github, thus couldn't create a new file\"\n                  hint: \"Please check if there's already a file [file.rego] in Github\\\n                    \\ repository [rego-demo] for the given filepath and branch [main].\"\n                  message: \"Please check if there's already a file [file.rego] in\\\n                    \\ Github repository [rego-demo] for the given filepath and branch\\\n                    \\ [main].\"\n                git_default_branch_updated: 1636669297674\n                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_file_url: \"\"\n                git_path: .harness/policy.rego\n                git_repo: \"github.com/org/repo,omitempty\"\n                identifier: policy-1\n                name: Pipeline Approval\n                org_id: test-org\n                project_id: test-project\n                rego: \"\"\n                updated: 1636669297674\n              status: error\n            enabled: true\n            identifier: policyset-1\n            name: Production Policies\n            org_id: test-org\n            project_id: test-project\n            status: error\n            type: pipeline\n            updated: 1636669297674\n          - account_id: eBqAoNchMLKigC_qZ5EdC\n            action: onrun\n            created: 1636669297674\n            description: Captures critical production policies\n            details:\n            - deny_messages:\n              - deployment stage 'example-stage' does not have a HarnessApproval step\n              - deployment stage 'example-stage' has step 'run-script' that is forbidden\n                type 'ShellScript'\n              error: \"policy.rego:25: rego_parse_error: non-terminated string m ==\\\n                \\ \\\"test\"\n              output: |-\n                {\n                    \"deny\": [\n                        \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                    ],\n                    \"stages_with_approval\": []\n                }\n              policy:\n                account_id: eBqAoNchMLKigC_qZ5EdC\n                created: 1636669297674\n                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_connector_ref: \".\"\n                git_default_branch: main\n                git_default_branch_update_error:\n                  explanation: \"File with given filepath [file.rego] already exists\\\n                    \\ in Github, thus couldn't create a new file\"\n                  hint: \"Please check if there's already a file [file.rego] in Github\\\n                    \\ repository [rego-demo] for the given filepath and branch [main].\"\n                  message: \"Please check if there's already a file [file.rego] in\\\n                    \\ Github repository [rego-demo] for the given filepath and branch\\\n                    \\ [main].\"\n                git_default_branch_updated: 1636669297674\n                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_file_url: \"\"\n                git_path: .harness/policy.rego\n                git_repo: \"github.com/org/repo,omitempty\"\n                identifier: policy-1\n                name: Pipeline Approval\n                org_id: test-org\n                project_id: test-project\n                rego: \"\"\n                updated: 1636669297674\n              status: error\n            - deny_messages:\n              - deployment stage 'example-stage' does not have a HarnessApproval step\n              - deployment stage 'example-stage' has step 'run-script' that is forbidden\n                type 'ShellScript'\n              error: \"policy.rego:25: rego_parse_error: non-terminated string m ==\\\n                \\ \\\"test\"\n              output: |-\n                {\n                    \"deny\": [\n                        \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                    ],\n                    \"stages_with_approval\": []\n                }\n              policy:\n                account_id: eBqAoNchMLKigC_qZ5EdC\n                created: 1636669297674\n                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_connector_ref: \".\"\n                git_default_branch: main\n                git_default_branch_update_error:\n                  explanation: \"File with given filepath [file.rego] already exists\\\n                    \\ in Github, thus couldn't create a new file\"\n                  hint: \"Please check if there's already a file [file.rego] in Github\\\n                    \\ repository [rego-demo] for the given filepath and branch [main].\"\n                  message: \"Please check if there's already a file [file.rego] in\\\n                    \\ Github repository [rego-demo] for the given filepath and branch\\\n                    \\ [main].\"\n                git_default_branch_updated: 1636669297674\n                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_file_url: \"\"\n                git_path: .harness/policy.rego\n                git_repo: \"github.com/org/repo,omitempty\"\n                identifier: policy-1\n                name: Pipeline Approval\n                org_id: test-org\n                project_id: test-project\n                rego: \"\"\n                updated: 1636669297674\n              status: error\n            - deny_messages:\n              - deployment stage 'example-stage' does not have a HarnessApproval step\n              - deployment stage 'example-stage' has step 'run-script' that is forbidden\n                type 'ShellScript'\n              error: \"policy.rego:25: rego_parse_error: non-terminated string m ==\\\n                \\ \\\"test\"\n              output: |-\n                {\n                    \"deny\": [\n                        \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                    ],\n                    \"stages_with_approval\": []\n                }\n              policy:\n                account_id: eBqAoNchMLKigC_qZ5EdC\n                created: 1636669297674\n                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_connector_ref: \".\"\n                git_default_branch: main\n                git_default_branch_update_error:\n                  explanation: \"File with given filepath [file.rego] already exists\\\n                    \\ in Github, thus couldn't create a new file\"\n                  hint: \"Please check if there's already a file [file.rego] in Github\\\n                    \\ repository [rego-demo] for the given filepath and branch [main].\"\n                  message: \"Please check if there's already a file [file.rego] in\\\n                    \\ Github repository [rego-demo] for the given filepath and branch\\\n                    \\ [main].\"\n                git_default_branch_updated: 1636669297674\n                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_file_url: \"\"\n                git_path: .harness/policy.rego\n                git_repo: \"github.com/org/repo,omitempty\"\n                identifier: policy-1\n                name: Pipeline Approval\n                org_id: test-org\n                project_id: test-project\n                rego: \"\"\n                updated: 1636669297674\n              status: error\n            enabled: true\n            identifier: policyset-1\n            name: Production Policies\n            org_id: test-org\n            project_id: test-project\n            status: error\n            type: pipeline\n            updated: 1636669297674\n          items:\n            $ref: '#/components/schemas/EvaluationDetail'\n        entity:\n          type: string\n          description: An arbtrary user-supplied string that globally identifies the\n            entity under evaluation\n          example: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n        entity_metadata:\n          type: string\n          description: Additional arbtrary user-supplied metadta about the entity\n            under evaluation\n          example: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n        id:\n          type: integer\n          description: The ID of this evaluation\n          format: int64\n          example: 123\n        input:\n          type: string\n          description: The input provided at evaluation time\n          format: binary\n          example: !!binary \"\"\n        org_id:\n          type: string\n          description: The Harness organisation in which the evaluation was performed\n          example: test-org\n        project_id:\n          type: string\n          description: The Harness project in which the evaluation was performed\n          example: test-project\n        status:\n          type: string\n          description: The overall status of the evaluation indicating whether it\n            passed\n          example: error\n          enum:\n          - error\n          - warning\n          - pass\n        type:\n          type: string\n          description: The type of the entity under evaluation\n          example: pipeline\n      example:\n        account_id: XRQAjvT37acOiXx9PRaQMF\n        action: onrun\n        created: 1636370209475\n        details:\n        - account_id: eBqAoNchMLKigC_qZ5EdC\n          action: onrun\n          created: 1636669297674\n          description: Captures critical production policies\n          details:\n          - deny_messages:\n            - deployment stage 'example-stage' does not have a HarnessApproval step\n            - deployment stage 'example-stage' has step 'run-script' that is forbidden\n              type 'ShellScript'\n            error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n              test\"\n            output: |-\n              {\n                  \"deny\": [\n                      \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                  ],\n                  \"stages_with_approval\": []\n              }\n            policy:\n              account_id: eBqAoNchMLKigC_qZ5EdC\n              created: 1636669297674\n              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_connector_ref: \".\"\n              git_default_branch: main\n              git_default_branch_update_error:\n                explanation: \"File with given filepath [file.rego] already exists\\\n                  \\ in Github, thus couldn't create a new file\"\n                hint: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n                message: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n              git_default_branch_updated: 1636669297674\n              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_file_url: \"\"\n              git_path: .harness/policy.rego\n              git_repo: \"github.com/org/repo,omitempty\"\n              identifier: policy-1\n              name: Pipeline Approval\n              org_id: test-org\n              project_id: test-project\n              rego: \"\"\n              updated: 1636669297674\n            status: error\n          - deny_messages:\n            - deployment stage 'example-stage' does not have a HarnessApproval step\n            - deployment stage 'example-stage' has step 'run-script' that is forbidden\n              type 'ShellScript'\n            error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n              test\"\n            output: |-\n              {\n                  \"deny\": [\n                      \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                  ],\n                  \"stages_with_approval\": []\n              }\n            policy:\n              account_id: eBqAoNchMLKigC_qZ5EdC\n              created: 1636669297674\n              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_connector_ref: \".\"\n              git_default_branch: main\n              git_default_branch_update_error:\n                explanation: \"File with given filepath [file.rego] already exists\\\n                  \\ in Github, thus couldn't create a new file\"\n                hint: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n                message: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n              git_default_branch_updated: 1636669297674\n              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_file_url: \"\"\n              git_path: .harness/policy.rego\n              git_repo: \"github.com/org/repo,omitempty\"\n              identifier: policy-1\n              name: Pipeline Approval\n              org_id: test-org\n              project_id: test-project\n              rego: \"\"\n              updated: 1636669297674\n            status: error\n          - deny_messages:\n            - deployment stage 'example-stage' does not have a HarnessApproval step\n            - deployment stage 'example-stage' has step 'run-script' that is forbidden\n              type 'ShellScript'\n            error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n              test\"\n            output: |-\n              {\n                  \"deny\": [\n                      \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                  ],\n                  \"stages_with_approval\": []\n              }\n            policy:\n              account_id: eBqAoNchMLKigC_qZ5EdC\n              created: 1636669297674\n              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_connector_ref: \".\"\n              git_default_branch: main\n              git_default_branch_update_error:\n                explanation: \"File with given filepath [file.rego] already exists\\\n                  \\ in Github, thus couldn't create a new file\"\n                hint: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n                message: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n              git_default_branch_updated: 1636669297674\n              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_file_url: \"\"\n              git_path: .harness/policy.rego\n              git_repo: \"github.com/org/repo,omitempty\"\n              identifier: policy-1\n              name: Pipeline Approval\n              org_id: test-org\n              project_id: test-project\n              rego: \"\"\n              updated: 1636669297674\n            status: error\n          enabled: true\n          identifier: policyset-1\n          name: Production Policies\n          org_id: test-org\n          project_id: test-project\n          status: error\n          type: pipeline\n          updated: 1636669297674\n        - account_id: eBqAoNchMLKigC_qZ5EdC\n          action: onrun\n          created: 1636669297674\n          description: Captures critical production policies\n          details:\n          - deny_messages:\n            - deployment stage 'example-stage' does not have a HarnessApproval step\n            - deployment stage 'example-stage' has step 'run-script' that is forbidden\n              type 'ShellScript'\n            error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n              test\"\n            output: |-\n              {\n                  \"deny\": [\n                      \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                  ],\n                  \"stages_with_approval\": []\n              }\n            policy:\n              account_id: eBqAoNchMLKigC_qZ5EdC\n              created: 1636669297674\n              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_connector_ref: \".\"\n              git_default_branch: main\n              git_default_branch_update_error:\n                explanation: \"File with given filepath [file.rego] already exists\\\n                  \\ in Github, thus couldn't create a new file\"\n                hint: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n                message: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n              git_default_branch_updated: 1636669297674\n              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_file_url: \"\"\n              git_path: .harness/policy.rego\n              git_repo: \"github.com/org/repo,omitempty\"\n              identifier: policy-1\n              name: Pipeline Approval\n              org_id: test-org\n              project_id: test-project\n              rego: \"\"\n              updated: 1636669297674\n            status: error\n          - deny_messages:\n            - deployment stage 'example-stage' does not have a HarnessApproval step\n            - deployment stage 'example-stage' has step 'run-script' that is forbidden\n              type 'ShellScript'\n            error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n              test\"\n            output: |-\n              {\n                  \"deny\": [\n                      \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                  ],\n                  \"stages_with_approval\": []\n              }\n            policy:\n              account_id: eBqAoNchMLKigC_qZ5EdC\n              created: 1636669297674\n              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_connector_ref: \".\"\n              git_default_branch: main\n              git_default_branch_update_error:\n                explanation: \"File with given filepath [file.rego] already exists\\\n                  \\ in Github, thus couldn't create a new file\"\n                hint: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n                message: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n              git_default_branch_updated: 1636669297674\n              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_file_url: \"\"\n              git_path: .harness/policy.rego\n              git_repo: \"github.com/org/repo,omitempty\"\n              identifier: policy-1\n              name: Pipeline Approval\n              org_id: test-org\n              project_id: test-project\n              rego: \"\"\n              updated: 1636669297674\n            status: error\n          - deny_messages:\n            - deployment stage 'example-stage' does not have a HarnessApproval step\n            - deployment stage 'example-stage' has step 'run-script' that is forbidden\n              type 'ShellScript'\n            error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n              test\"\n            output: |-\n              {\n                  \"deny\": [\n                      \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                  ],\n                  \"stages_with_approval\": []\n              }\n            policy:\n              account_id: eBqAoNchMLKigC_qZ5EdC\n              created: 1636669297674\n              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_connector_ref: \".\"\n              git_default_branch: main\n              git_default_branch_update_error:\n                explanation: \"File with given filepath [file.rego] already exists\\\n                  \\ in Github, thus couldn't create a new file\"\n                hint: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n                message: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n              git_default_branch_updated: 1636669297674\n              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_file_url: \"\"\n              git_path: .harness/policy.rego\n              git_repo: \"github.com/org/repo,omitempty\"\n              identifier: policy-1\n              name: Pipeline Approval\n              org_id: test-org\n              project_id: test-project\n              rego: \"\"\n              updated: 1636669297674\n            status: error\n          enabled: true\n          identifier: policyset-1\n          name: Production Policies\n          org_id: test-org\n          project_id: test-project\n          status: error\n          type: pipeline\n          updated: 1636669297674\n        entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n        entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n        id: 123\n        input: \"\"\n        org_id: test-org\n        project_id: test-project\n        status: error\n        type: pipeline\n    Evaluation2:\n      required:\n      - account_id\n      - action\n      - created\n      - details\n      - entity\n      - entity_metadata\n      - id\n      - input\n      - org_id\n      - project_id\n      - status\n      - type\n      type: object\n      properties:\n        account_id:\n          type: string\n          description: The Harness account in which the evaluation was performed\n          example: XRQAjvT37acOiXx9PRaQMF\n        action:\n          type: string\n          description: The action that triggered evaluation\n          example: onrun\n        created:\n          type: integer\n          description: The time at which the evaluation was performed in Unix time\n            millseconds\n          format: int64\n          example: 1636370209475\n        details:\n          type: array\n          description: The detailed results of te evaluation\n          example:\n          - account_id: eBqAoNchMLKigC_qZ5EdC\n            action: onrun\n            created: 1636669297674\n            description: Captures critical production policies\n            details:\n            - deny_messages:\n              - deployment stage 'example-stage' does not have a HarnessApproval step\n              - deployment stage 'example-stage' has step 'run-script' that is forbidden\n                type 'ShellScript'\n              error: \"policy.rego:25: rego_parse_error: non-terminated string m ==\\\n                \\ \\\"test\"\n              output: |-\n                {\n                    \"deny\": [\n                        \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                    ],\n                    \"stages_with_approval\": []\n                }\n              policy:\n                account_id: eBqAoNchMLKigC_qZ5EdC\n                created: 1636669297674\n                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_connector_ref: \".\"\n                git_default_branch: main\n                git_default_branch_update_error:\n                  explanation: \"File with given filepath [file.rego] already exists\\\n                    \\ in Github, thus couldn't create a new file\"\n                  hint: \"Please check if there's already a file [file.rego] in Github\\\n                    \\ repository [rego-demo] for the given filepath and branch [main].\"\n                  message: \"Please check if there's already a file [file.rego] in\\\n                    \\ Github repository [rego-demo] for the given filepath and branch\\\n                    \\ [main].\"\n                git_default_branch_updated: 1636669297674\n                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_file_url: \"\"\n                git_path: .harness/policy.rego\n                git_repo: \"github.com/org/repo,omitempty\"\n                identifier: policy-1\n                name: Pipeline Approval\n                org_id: test-org\n                project_id: test-project\n                rego: \"\"\n                updated: 1636669297674\n              status: error\n            - deny_messages:\n              - deployment stage 'example-stage' does not have a HarnessApproval step\n              - deployment stage 'example-stage' has step 'run-script' that is forbidden\n                type 'ShellScript'\n              error: \"policy.rego:25: rego_parse_error: non-terminated string m ==\\\n                \\ \\\"test\"\n              output: |-\n                {\n                    \"deny\": [\n                        \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                    ],\n                    \"stages_with_approval\": []\n                }\n              policy:\n                account_id: eBqAoNchMLKigC_qZ5EdC\n                created: 1636669297674\n                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_connector_ref: \".\"\n                git_default_branch: main\n                git_default_branch_update_error:\n                  explanation: \"File with given filepath [file.rego] already exists\\\n                    \\ in Github, thus couldn't create a new file\"\n                  hint: \"Please check if there's already a file [file.rego] in Github\\\n                    \\ repository [rego-demo] for the given filepath and branch [main].\"\n                  message: \"Please check if there's already a file [file.rego] in\\\n                    \\ Github repository [rego-demo] for the given filepath and branch\\\n                    \\ [main].\"\n                git_default_branch_updated: 1636669297674\n                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_file_url: \"\"\n                git_path: .harness/policy.rego\n                git_repo: \"github.com/org/repo,omitempty\"\n                identifier: policy-1\n                name: Pipeline Approval\n                org_id: test-org\n                project_id: test-project\n                rego: \"\"\n                updated: 1636669297674\n              status: error\n            enabled: true\n            identifier: policyset-1\n            name: Production Policies\n            org_id: test-org\n            project_id: test-project\n            status: error\n            type: pipeline\n            updated: 1636669297674\n          - account_id: eBqAoNchMLKigC_qZ5EdC\n            action: onrun\n            created: 1636669297674\n            description: Captures critical production policies\n            details:\n            - deny_messages:\n              - deployment stage 'example-stage' does not have a HarnessApproval step\n              - deployment stage 'example-stage' has step 'run-script' that is forbidden\n                type 'ShellScript'\n              error: \"policy.rego:25: rego_parse_error: non-terminated string m ==\\\n                \\ \\\"test\"\n              output: |-\n                {\n                    \"deny\": [\n                        \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                    ],\n                    \"stages_with_approval\": []\n                }\n              policy:\n                account_id: eBqAoNchMLKigC_qZ5EdC\n                created: 1636669297674\n                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_connector_ref: \".\"\n                git_default_branch: main\n                git_default_branch_update_error:\n                  explanation: \"File with given filepath [file.rego] already exists\\\n                    \\ in Github, thus couldn't create a new file\"\n                  hint: \"Please check if there's already a file [file.rego] in Github\\\n                    \\ repository [rego-demo] for the given filepath and branch [main].\"\n                  message: \"Please check if there's already a file [file.rego] in\\\n                    \\ Github repository [rego-demo] for the given filepath and branch\\\n                    \\ [main].\"\n                git_default_branch_updated: 1636669297674\n                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_file_url: \"\"\n                git_path: .harness/policy.rego\n                git_repo: \"github.com/org/repo,omitempty\"\n                identifier: policy-1\n                name: Pipeline Approval\n                org_id: test-org\n                project_id: test-project\n                rego: \"\"\n                updated: 1636669297674\n              status: error\n            - deny_messages:\n              - deployment stage 'example-stage' does not have a HarnessApproval step\n              - deployment stage 'example-stage' has step 'run-script' that is forbidden\n                type 'ShellScript'\n              error: \"policy.rego:25: rego_parse_error: non-terminated string m ==\\\n                \\ \\\"test\"\n              output: |-\n                {\n                    \"deny\": [\n                        \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                    ],\n                    \"stages_with_approval\": []\n                }\n              policy:\n                account_id: eBqAoNchMLKigC_qZ5EdC\n                created: 1636669297674\n                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_connector_ref: \".\"\n                git_default_branch: main\n                git_default_branch_update_error:\n                  explanation: \"File with given filepath [file.rego] already exists\\\n                    \\ in Github, thus couldn't create a new file\"\n                  hint: \"Please check if there's already a file [file.rego] in Github\\\n                    \\ repository [rego-demo] for the given filepath and branch [main].\"\n                  message: \"Please check if there's already a file [file.rego] in\\\n                    \\ Github repository [rego-demo] for the given filepath and branch\\\n                    \\ [main].\"\n                git_default_branch_updated: 1636669297674\n                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_file_url: \"\"\n                git_path: .harness/policy.rego\n                git_repo: \"github.com/org/repo,omitempty\"\n                identifier: policy-1\n                name: Pipeline Approval\n                org_id: test-org\n                project_id: test-project\n                rego: \"\"\n                updated: 1636669297674\n              status: error\n            enabled: true\n            identifier: policyset-1\n            name: Production Policies\n            org_id: test-org\n            project_id: test-project\n            status: error\n            type: pipeline\n            updated: 1636669297674\n          - account_id: eBqAoNchMLKigC_qZ5EdC\n            action: onrun\n            created: 1636669297674\n            description: Captures critical production policies\n            details:\n            - deny_messages:\n              - deployment stage 'example-stage' does not have a HarnessApproval step\n              - deployment stage 'example-stage' has step 'run-script' that is forbidden\n                type 'ShellScript'\n              error: \"policy.rego:25: rego_parse_error: non-terminated string m ==\\\n                \\ \\\"test\"\n              output: |-\n                {\n                    \"deny\": [\n                        \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                    ],\n                    \"stages_with_approval\": []\n                }\n              policy:\n                account_id: eBqAoNchMLKigC_qZ5EdC\n                created: 1636669297674\n                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_connector_ref: \".\"\n                git_default_branch: main\n                git_default_branch_update_error:\n                  explanation: \"File with given filepath [file.rego] already exists\\\n                    \\ in Github, thus couldn't create a new file\"\n                  hint: \"Please check if there's already a file [file.rego] in Github\\\n                    \\ repository [rego-demo] for the given filepath and branch [main].\"\n                  message: \"Please check if there's already a file [file.rego] in\\\n                    \\ Github repository [rego-demo] for the given filepath and branch\\\n                    \\ [main].\"\n                git_default_branch_updated: 1636669297674\n                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_file_url: \"\"\n                git_path: .harness/policy.rego\n                git_repo: \"github.com/org/repo,omitempty\"\n                identifier: policy-1\n                name: Pipeline Approval\n                org_id: test-org\n                project_id: test-project\n                rego: \"\"\n                updated: 1636669297674\n              status: error\n            - deny_messages:\n              - deployment stage 'example-stage' does not have a HarnessApproval step\n              - deployment stage 'example-stage' has step 'run-script' that is forbidden\n                type 'ShellScript'\n              error: \"policy.rego:25: rego_parse_error: non-terminated string m ==\\\n                \\ \\\"test\"\n              output: |-\n                {\n                    \"deny\": [\n                        \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                    ],\n                    \"stages_with_approval\": []\n                }\n              policy:\n                account_id: eBqAoNchMLKigC_qZ5EdC\n                created: 1636669297674\n                git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_connector_ref: \".\"\n                git_default_branch: main\n                git_default_branch_update_error:\n                  explanation: \"File with given filepath [file.rego] already exists\\\n                    \\ in Github, thus couldn't create a new file\"\n                  hint: \"Please check if there's already a file [file.rego] in Github\\\n                    \\ repository [rego-demo] for the given filepath and branch [main].\"\n                  message: \"Please check if there's already a file [file.rego] in\\\n                    \\ Github repository [rego-demo] for the given filepath and branch\\\n                    \\ [main].\"\n                git_default_branch_updated: 1636669297674\n                git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n                git_file_url: \"\"\n                git_path: .harness/policy.rego\n                git_repo: \"github.com/org/repo,omitempty\"\n                identifier: policy-1\n                name: Pipeline Approval\n                org_id: test-org\n                project_id: test-project\n                rego: \"\"\n                updated: 1636669297674\n              status: error\n            enabled: true\n            identifier: policyset-1\n            name: Production Policies\n            org_id: test-org\n            project_id: test-project\n            status: error\n            type: pipeline\n            updated: 1636669297674\n          items:\n            $ref: '#/components/schemas/EvaluationDetail2'\n        entity:\n          type: string\n          description: An arbtrary user-supplied string that globally identifies the\n            entity under evaluation\n          example: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n        entity_metadata:\n          type: string\n          description: Additional arbtrary user-supplied metadta about the entity\n            under evaluation\n          example: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n        id:\n          type: integer\n          description: The ID of this evaluation\n          format: int64\n          example: 123\n        input:\n          type: string\n          description: The input provided at evaluation time\n          format: binary\n          example: !!binary \"\"\n        org_id:\n          type: string\n          description: The Harness organisation in which the evaluation was performed\n          example: test-org\n        project_id:\n          type: string\n          description: The Harness project in which the evaluation was performed\n          example: test-project\n        status:\n          type: string\n          description: The overall status of the evaluation indicating whether it\n            passed\n          example: error\n          enum:\n          - error\n          - warning\n          - pass\n        type:\n          type: string\n          description: The type of the entity under evaluation\n          example: pipeline\n      description: The result of a single evaluation\n      example:\n        account_id: XRQAjvT37acOiXx9PRaQMF\n        action: onrun\n        created: 1636370209475\n        details:\n        - account_id: eBqAoNchMLKigC_qZ5EdC\n          action: onrun\n          created: 1636669297674\n          description: Captures critical production policies\n          details:\n          - deny_messages:\n            - deployment stage 'example-stage' does not have a HarnessApproval step\n            - deployment stage 'example-stage' has step 'run-script' that is forbidden\n              type 'ShellScript'\n            error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n              test\"\n            output: |-\n              {\n                  \"deny\": [\n                      \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                  ],\n                  \"stages_with_approval\": []\n              }\n            policy:\n              account_id: eBqAoNchMLKigC_qZ5EdC\n              created: 1636669297674\n              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_connector_ref: \".\"\n              git_default_branch: main\n              git_default_branch_update_error:\n                explanation: \"File with given filepath [file.rego] already exists\\\n                  \\ in Github, thus couldn't create a new file\"\n                hint: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n                message: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n              git_default_branch_updated: 1636669297674\n              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_file_url: \"\"\n              git_path: .harness/policy.rego\n              git_repo: \"github.com/org/repo,omitempty\"\n              identifier: policy-1\n              name: Pipeline Approval\n              org_id: test-org\n              project_id: test-project\n              rego: \"\"\n              updated: 1636669297674\n            status: error\n          - deny_messages:\n            - deployment stage 'example-stage' does not have a HarnessApproval step\n            - deployment stage 'example-stage' has step 'run-script' that is forbidden\n              type 'ShellScript'\n            error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n              test\"\n            output: |-\n              {\n                  \"deny\": [\n                      \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                  ],\n                  \"stages_with_approval\": []\n              }\n            policy:\n              account_id: eBqAoNchMLKigC_qZ5EdC\n              created: 1636669297674\n              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_connector_ref: \".\"\n              git_default_branch: main\n              git_default_branch_update_error:\n                explanation: \"File with given filepath [file.rego] already exists\\\n                  \\ in Github, thus couldn't create a new file\"\n                hint: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n                message: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n              git_default_branch_updated: 1636669297674\n              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_file_url: \"\"\n              git_path: .harness/policy.rego\n              git_repo: \"github.com/org/repo,omitempty\"\n              identifier: policy-1\n              name: Pipeline Approval\n              org_id: test-org\n              project_id: test-project\n              rego: \"\"\n              updated: 1636669297674\n            status: error\n          enabled: true\n          identifier: policyset-1\n          name: Production Policies\n          org_id: test-org\n          project_id: test-project\n          status: error\n          type: pipeline\n          updated: 1636669297674\n        - account_id: eBqAoNchMLKigC_qZ5EdC\n          action: onrun\n          created: 1636669297674\n          description: Captures critical production policies\n          details:\n          - deny_messages:\n            - deployment stage 'example-stage' does not have a HarnessApproval step\n            - deployment stage 'example-stage' has step 'run-script' that is forbidden\n              type 'ShellScript'\n            error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n              test\"\n            output: |-\n              {\n                  \"deny\": [\n                      \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                  ],\n                  \"stages_with_approval\": []\n              }\n            policy:\n              account_id: eBqAoNchMLKigC_qZ5EdC\n              created: 1636669297674\n              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_connector_ref: \".\"\n              git_default_branch: main\n              git_default_branch_update_error:\n                explanation: \"File with given filepath [file.rego] already exists\\\n                  \\ in Github, thus couldn't create a new file\"\n                hint: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n                message: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n              git_default_branch_updated: 1636669297674\n              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_file_url: \"\"\n              git_path: .harness/policy.rego\n              git_repo: \"github.com/org/repo,omitempty\"\n              identifier: policy-1\n              name: Pipeline Approval\n              org_id: test-org\n              project_id: test-project\n              rego: \"\"\n              updated: 1636669297674\n            status: error\n          - deny_messages:\n            - deployment stage 'example-stage' does not have a HarnessApproval step\n            - deployment stage 'example-stage' has step 'run-script' that is forbidden\n              type 'ShellScript'\n            error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n              test\"\n            output: |-\n              {\n                  \"deny\": [\n                      \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                  ],\n                  \"stages_with_approval\": []\n              }\n            policy:\n              account_id: eBqAoNchMLKigC_qZ5EdC\n              created: 1636669297674\n              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_connector_ref: \".\"\n              git_default_branch: main\n              git_default_branch_update_error:\n                explanation: \"File with given filepath [file.rego] already exists\\\n                  \\ in Github, thus couldn't create a new file\"\n                hint: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n                message: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n              git_default_branch_updated: 1636669297674\n              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_file_url: \"\"\n              git_path: .harness/policy.rego\n              git_repo: \"github.com/org/repo,omitempty\"\n              identifier: policy-1\n              name: Pipeline Approval\n              org_id: test-org\n              project_id: test-project\n              rego: \"\"\n              updated: 1636669297674\n            status: error\n          enabled: true\n          identifier: policyset-1\n          name: Production Policies\n          org_id: test-org\n          project_id: test-project\n          status: error\n          type: pipeline\n          updated: 1636669297674\n        entity: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n        entity_metadata: 7bbca5d4-e9f2-4955-9b2a-019ec4d3645e\n        id: 123\n        input: \"\"\n        org_id: test-org\n        project_id: test-project\n        status: error\n        type: pipeline\n    EvaluationCounts:\n      required:\n      - error\n      - pass\n      - warning\n      type: object\n      properties:\n        error:\n          type: integer\n          description: Count of evaluations that have a status of 'error'\n          format: int64\n          example: 4970251986521508580\n        pass:\n          type: integer\n          description: Count of evaluations that have a status of 'pass'\n          format: int64\n          example: 307083773713586752\n        warning:\n          type: integer\n          description: Count of evaluations that have a status of 'warning'\n          format: int64\n          example: 1502739105740891635\n      description: Evaluation counts by status\n      example:\n        error: 5942734405936107822\n        pass: 4691718722125000343\n        warning: 690944801675665669\n    EvaluationDetail:\n      required:\n      - account_id\n      - action\n      - created\n      - details\n      - enabled\n      - identifier\n      - name\n      - org_id\n      - project_id\n      - status\n      - type\n      - updated\n      type: object\n      properties:\n        account_id:\n          type: string\n          description: Harness account ID associated with this policy set\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        action:\n          minLength: 1\n          type: string\n          description: Action that triggers the policy set\n          example: onrun\n        created:\n          type: integer\n          description: Time the policy set was created\n          format: int64\n          example: 1636669297674\n        description:\n          type: string\n          description: Description of the policy set\n          example: Captures critical production policies\n        details:\n          type: array\n          example:\n          - deny_messages:\n            - deployment stage 'example-stage' does not have a HarnessApproval step\n            - deployment stage 'example-stage' has step 'run-script' that is forbidden\n              type 'ShellScript'\n            error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n              test\"\n            output: |-\n              {\n                  \"deny\": [\n                      \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                  ],\n                  \"stages_with_approval\": []\n              }\n            policy:\n              account_id: eBqAoNchMLKigC_qZ5EdC\n              created: 1636669297674\n              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_connector_ref: \".\"\n              git_default_branch: main\n              git_default_branch_update_error:\n                explanation: \"File with given filepath [file.rego] already exists\\\n                  \\ in Github, thus couldn't create a new file\"\n                hint: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n                message: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n              git_default_branch_updated: 1636669297674\n              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_file_url: \"\"\n              git_path: .harness/policy.rego\n              git_repo: \"github.com/org/repo,omitempty\"\n              identifier: policy-1\n              name: Pipeline Approval\n              org_id: test-org\n              project_id: test-project\n              rego: \"\"\n              updated: 1636669297674\n            status: error\n          - deny_messages:\n            - deployment stage 'example-stage' does not have a HarnessApproval step\n            - deployment stage 'example-stage' has step 'run-script' that is forbidden\n              type 'ShellScript'\n            error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n              test\"\n            output: |-\n              {\n                  \"deny\": [\n                      \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                  ],\n                  \"stages_with_approval\": []\n              }\n            policy:\n              account_id: eBqAoNchMLKigC_qZ5EdC\n              created: 1636669297674\n              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_connector_ref: \".\"\n              git_default_branch: main\n              git_default_branch_update_error:\n                explanation: \"File with given filepath [file.rego] already exists\\\n                  \\ in Github, thus couldn't create a new file\"\n                hint: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n                message: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n              git_default_branch_updated: 1636669297674\n              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_file_url: \"\"\n              git_path: .harness/policy.rego\n              git_repo: \"github.com/org/repo,omitempty\"\n              identifier: policy-1\n              name: Pipeline Approval\n              org_id: test-org\n              project_id: test-project\n              rego: \"\"\n              updated: 1636669297674\n            status: error\n          - deny_messages:\n            - deployment stage 'example-stage' does not have a HarnessApproval step\n            - deployment stage 'example-stage' has step 'run-script' that is forbidden\n              type 'ShellScript'\n            error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n              test\"\n            output: |-\n              {\n                  \"deny\": [\n                      \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                  ],\n                  \"stages_with_approval\": []\n              }\n            policy:\n              account_id: eBqAoNchMLKigC_qZ5EdC\n              created: 1636669297674\n              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_connector_ref: \".\"\n              git_default_branch: main\n              git_default_branch_update_error:\n                explanation: \"File with given filepath [file.rego] already exists\\\n                  \\ in Github, thus couldn't create a new file\"\n                hint: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n                message: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n              git_default_branch_updated: 1636669297674\n              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_file_url: \"\"\n              git_path: .harness/policy.rego\n              git_repo: \"github.com/org/repo,omitempty\"\n              identifier: policy-1\n              name: Pipeline Approval\n              org_id: test-org\n              project_id: test-project\n              rego: \"\"\n              updated: 1636669297674\n            status: error\n          items:\n            $ref: '#/components/schemas/EvaluatedPolicy'\n        enabled:\n          type: boolean\n          description: Only enabled policy sets are evaluated when evaluating by type/action\n          example: true\n        identifier:\n          minLength: 1\n          type: string\n          description: Identifier of the policy set\n          example: policyset-1\n        name:\n          minLength: 1\n          type: string\n          description: Name of the policy set\n          example: Production Policies\n        org_id:\n          type: string\n          description: Harness organization ID associated with this policy set\n          example: test-org\n          default: \"\"\n        project_id:\n          type: string\n          description: Harness project ID associated with this policy set\n          example: test-project\n          default: \"\"\n        status:\n          type: string\n          description: The overall status for this policy set indicating whether it\n            passed\n          example: error\n          enum:\n          - error\n          - warning\n          - pass\n        type:\n          minLength: 1\n          type: string\n          description: Type of input suitable for the policy set\n          example: pipeline\n        updated:\n          type: integer\n          description: Time the policy set was last updated\n          format: int64\n          example: 1636669297674\n      example:\n        account_id: eBqAoNchMLKigC_qZ5EdC\n        action: onrun\n        created: 1636669297674\n        description: Captures critical production policies\n        details:\n        - deny_messages:\n          - deployment stage 'example-stage' does not have a HarnessApproval step\n          - deployment stage 'example-stage' has step 'run-script' that is forbidden\n            type 'ShellScript'\n          error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n            test\"\n          output: |-\n            {\n                \"deny\": [\n                    \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                ],\n                \"stages_with_approval\": []\n            }\n          policy:\n            account_id: eBqAoNchMLKigC_qZ5EdC\n            created: 1636669297674\n            git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n            git_connector_ref: \".\"\n            git_default_branch: main\n            git_default_branch_update_error:\n              explanation: \"File with given filepath [file.rego] already exists in\\\n                \\ Github, thus couldn't create a new file\"\n              hint: \"Please check if there's already a file [file.rego] in Github\\\n                \\ repository [rego-demo] for the given filepath and branch [main].\"\n              message: \"Please check if there's already a file [file.rego] in Github\\\n                \\ repository [rego-demo] for the given filepath and branch [main].\"\n            git_default_branch_updated: 1636669297674\n            git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n            git_file_url: \"\"\n            git_path: .harness/policy.rego\n            git_repo: \"github.com/org/repo,omitempty\"\n            identifier: policy-1\n            name: Pipeline Approval\n            org_id: test-org\n            project_id: test-project\n            rego: \"\"\n            updated: 1636669297674\n          status: error\n        - deny_messages:\n          - deployment stage 'example-stage' does not have a HarnessApproval step\n          - deployment stage 'example-stage' has step 'run-script' that is forbidden\n            type 'ShellScript'\n          error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n            test\"\n          output: |-\n            {\n                \"deny\": [\n                    \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                ],\n                \"stages_with_approval\": []\n            }\n          policy:\n            account_id: eBqAoNchMLKigC_qZ5EdC\n            created: 1636669297674\n            git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n            git_connector_ref: \".\"\n            git_default_branch: main\n            git_default_branch_update_error:\n              explanation: \"File with given filepath [file.rego] already exists in\\\n                \\ Github, thus couldn't create a new file\"\n              hint: \"Please check if there's already a file [file.rego] in Github\\\n                \\ repository [rego-demo] for the given filepath and branch [main].\"\n              message: \"Please check if there's already a file [file.rego] in Github\\\n                \\ repository [rego-demo] for the given filepath and branch [main].\"\n            git_default_branch_updated: 1636669297674\n            git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n            git_file_url: \"\"\n            git_path: .harness/policy.rego\n            git_repo: \"github.com/org/repo,omitempty\"\n            identifier: policy-1\n            name: Pipeline Approval\n            org_id: test-org\n            project_id: test-project\n            rego: \"\"\n            updated: 1636669297674\n          status: error\n        - deny_messages:\n          - deployment stage 'example-stage' does not have a HarnessApproval step\n          - deployment stage 'example-stage' has step 'run-script' that is forbidden\n            type 'ShellScript'\n          error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n            test\"\n          output: |-\n            {\n                \"deny\": [\n                    \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                ],\n                \"stages_with_approval\": []\n            }\n          policy:\n            account_id: eBqAoNchMLKigC_qZ5EdC\n            created: 1636669297674\n            git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n            git_connector_ref: \".\"\n            git_default_branch: main\n            git_default_branch_update_error:\n              explanation: \"File with given filepath [file.rego] already exists in\\\n                \\ Github, thus couldn't create a new file\"\n              hint: \"Please check if there's already a file [file.rego] in Github\\\n                \\ repository [rego-demo] for the given filepath and branch [main].\"\n              message: \"Please check if there's already a file [file.rego] in Github\\\n                \\ repository [rego-demo] for the given filepath and branch [main].\"\n            git_default_branch_updated: 1636669297674\n            git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n            git_file_url: \"\"\n            git_path: .harness/policy.rego\n            git_repo: \"github.com/org/repo,omitempty\"\n            identifier: policy-1\n            name: Pipeline Approval\n            org_id: test-org\n            project_id: test-project\n            rego: \"\"\n            updated: 1636669297674\n          status: error\n        enabled: true\n        identifier: policyset-1\n        name: Production Policies\n        org_id: test-org\n        project_id: test-project\n        status: error\n        type: pipeline\n        updated: 1636669297674\n    EvaluationDetail2:\n      required:\n      - details\n      - status\n      type: object\n      properties:\n        account_id:\n          type: string\n          description: Harness account ID associated with this policy set\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        action:\n          minLength: 1\n          type: string\n          description: Action that triggers the policy set\n          example: onrun\n        created:\n          type: integer\n          description: Time the policy set was created\n          format: int64\n          example: 1636669297674\n        description:\n          type: string\n          description: Description of the policy set\n          example: Captures critical production policies\n        details:\n          type: array\n          example:\n          - deny_messages:\n            - deployment stage 'example-stage' does not have a HarnessApproval step\n            - deployment stage 'example-stage' has step 'run-script' that is forbidden\n              type 'ShellScript'\n            error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n              test\"\n            output: |-\n              {\n                  \"deny\": [\n                      \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                  ],\n                  \"stages_with_approval\": []\n              }\n            policy:\n              account_id: eBqAoNchMLKigC_qZ5EdC\n              created: 1636669297674\n              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_connector_ref: \".\"\n              git_default_branch: main\n              git_default_branch_update_error:\n                explanation: \"File with given filepath [file.rego] already exists\\\n                  \\ in Github, thus couldn't create a new file\"\n                hint: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n                message: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n              git_default_branch_updated: 1636669297674\n              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_file_url: \"\"\n              git_path: .harness/policy.rego\n              git_repo: \"github.com/org/repo,omitempty\"\n              identifier: policy-1\n              name: Pipeline Approval\n              org_id: test-org\n              project_id: test-project\n              rego: \"\"\n              updated: 1636669297674\n            status: error\n          - deny_messages:\n            - deployment stage 'example-stage' does not have a HarnessApproval step\n            - deployment stage 'example-stage' has step 'run-script' that is forbidden\n              type 'ShellScript'\n            error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n              test\"\n            output: |-\n              {\n                  \"deny\": [\n                      \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                  ],\n                  \"stages_with_approval\": []\n              }\n            policy:\n              account_id: eBqAoNchMLKigC_qZ5EdC\n              created: 1636669297674\n              git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_connector_ref: \".\"\n              git_default_branch: main\n              git_default_branch_update_error:\n                explanation: \"File with given filepath [file.rego] already exists\\\n                  \\ in Github, thus couldn't create a new file\"\n                hint: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n                message: \"Please check if there's already a file [file.rego] in Github\\\n                  \\ repository [rego-demo] for the given filepath and branch [main].\"\n              git_default_branch_updated: 1636669297674\n              git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n              git_file_url: \"\"\n              git_path: .harness/policy.rego\n              git_repo: \"github.com/org/repo,omitempty\"\n              identifier: policy-1\n              name: Pipeline Approval\n              org_id: test-org\n              project_id: test-project\n              rego: \"\"\n              updated: 1636669297674\n            status: error\n          items:\n            $ref: '#/components/schemas/EvaluatedPolicy'\n        enabled:\n          type: boolean\n          description: Only enabled policy sets are evaluated when evaluating by type/action\n          example: true\n        identifier:\n          minLength: 1\n          type: string\n          description: Identifier of the policy set\n          example: policyset-1\n        name:\n          minLength: 1\n          type: string\n          description: Name of the policy set\n          example: Production Policies\n        org_id:\n          type: string\n          description: Harness organization ID associated with this policy set\n          example: test-org\n          default: \"\"\n        project_id:\n          type: string\n          description: Harness project ID associated with this policy set\n          example: test-project\n          default: \"\"\n        status:\n          type: string\n          description: The overall status for this policy set indicating whether it\n            passed\n          example: error\n          enum:\n          - error\n          - warning\n          - pass\n        type:\n          minLength: 1\n          type: string\n          description: Type of input suitable for the policy set\n          example: pipeline\n        updated:\n          type: integer\n          description: Time the policy set was last updated\n          format: int64\n          example: 1636669297674\n      example:\n        account_id: eBqAoNchMLKigC_qZ5EdC\n        action: onrun\n        created: 1636669297674\n        description: Captures critical production policies\n        details:\n        - deny_messages:\n          - deployment stage 'example-stage' does not have a HarnessApproval step\n          - deployment stage 'example-stage' has step 'run-script' that is forbidden\n            type 'ShellScript'\n          error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n            test\"\n          output: |-\n            {\n                \"deny\": [\n                    \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                ],\n                \"stages_with_approval\": []\n            }\n          policy:\n            account_id: eBqAoNchMLKigC_qZ5EdC\n            created: 1636669297674\n            git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n            git_connector_ref: \".\"\n            git_default_branch: main\n            git_default_branch_update_error:\n              explanation: \"File with given filepath [file.rego] already exists in\\\n                \\ Github, thus couldn't create a new file\"\n              hint: \"Please check if there's already a file [file.rego] in Github\\\n                \\ repository [rego-demo] for the given filepath and branch [main].\"\n              message: \"Please check if there's already a file [file.rego] in Github\\\n                \\ repository [rego-demo] for the given filepath and branch [main].\"\n            git_default_branch_updated: 1636669297674\n            git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n            git_file_url: \"\"\n            git_path: .harness/policy.rego\n            git_repo: \"github.com/org/repo,omitempty\"\n            identifier: policy-1\n            name: Pipeline Approval\n            org_id: test-org\n            project_id: test-project\n            rego: \"\"\n            updated: 1636669297674\n          status: error\n        - deny_messages:\n          - deployment stage 'example-stage' does not have a HarnessApproval step\n          - deployment stage 'example-stage' has step 'run-script' that is forbidden\n            type 'ShellScript'\n          error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n            test\"\n          output: |-\n            {\n                \"deny\": [\n                    \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                ],\n                \"stages_with_approval\": []\n            }\n          policy:\n            account_id: eBqAoNchMLKigC_qZ5EdC\n            created: 1636669297674\n            git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n            git_connector_ref: \".\"\n            git_default_branch: main\n            git_default_branch_update_error:\n              explanation: \"File with given filepath [file.rego] already exists in\\\n                \\ Github, thus couldn't create a new file\"\n              hint: \"Please check if there's already a file [file.rego] in Github\\\n                \\ repository [rego-demo] for the given filepath and branch [main].\"\n              message: \"Please check if there's already a file [file.rego] in Github\\\n                \\ repository [rego-demo] for the given filepath and branch [main].\"\n            git_default_branch_updated: 1636669297674\n            git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n            git_file_url: \"\"\n            git_path: .harness/policy.rego\n            git_repo: \"github.com/org/repo,omitempty\"\n            identifier: policy-1\n            name: Pipeline Approval\n            org_id: test-org\n            project_id: test-project\n            rego: \"\"\n            updated: 1636669297674\n          status: error\n        - deny_messages:\n          - deployment stage 'example-stage' does not have a HarnessApproval step\n          - deployment stage 'example-stage' has step 'run-script' that is forbidden\n            type 'ShellScript'\n          error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n            test\"\n          output: |-\n            {\n                \"deny\": [\n                    \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                ],\n                \"stages_with_approval\": []\n            }\n          policy:\n            account_id: eBqAoNchMLKigC_qZ5EdC\n            created: 1636669297674\n            git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n            git_connector_ref: \".\"\n            git_default_branch: main\n            git_default_branch_update_error:\n              explanation: \"File with given filepath [file.rego] already exists in\\\n                \\ Github, thus couldn't create a new file\"\n              hint: \"Please check if there's already a file [file.rego] in Github\\\n                \\ repository [rego-demo] for the given filepath and branch [main].\"\n              message: \"Please check if there's already a file [file.rego] in Github\\\n                \\ repository [rego-demo] for the given filepath and branch [main].\"\n            git_default_branch_updated: 1636669297674\n            git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n            git_file_url: \"\"\n            git_path: .harness/policy.rego\n            git_repo: \"github.com/org/repo,omitempty\"\n            identifier: policy-1\n            name: Pipeline Approval\n            org_id: test-org\n            project_id: test-project\n            rego: \"\"\n            updated: 1636669297674\n          status: error\n        - deny_messages:\n          - deployment stage 'example-stage' does not have a HarnessApproval step\n          - deployment stage 'example-stage' has step 'run-script' that is forbidden\n            type 'ShellScript'\n          error: \"policy.rego:25: rego_parse_error: non-terminated string m == \\\"\\\n            test\"\n          output: |-\n            {\n                \"deny\": [\n                    \"deployment stage 'deploy' does not have a HarnessApproval step\"\n                ],\n                \"stages_with_approval\": []\n            }\n          policy:\n            account_id: eBqAoNchMLKigC_qZ5EdC\n            created: 1636669297674\n            git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n            git_connector_ref: \".\"\n            git_default_branch: main\n            git_default_branch_update_error:\n              explanation: \"File with given filepath [file.rego] already exists in\\\n                \\ Github, thus couldn't create a new file\"\n              hint: \"Please check if there's already a file [file.rego] in Github\\\n                \\ repository [rego-demo] for the given filepath and branch [main].\"\n              message: \"Please check if there's already a file [file.rego] in Github\\\n                \\ repository [rego-demo] for the given filepath and branch [main].\"\n            git_default_branch_updated: 1636669297674\n            git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n            git_file_url: \"\"\n            git_path: .harness/policy.rego\n            git_repo: \"github.com/org/repo,omitempty\"\n            identifier: policy-1\n            name: Pipeline Approval\n            org_id: test-org\n            project_id: test-project\n            rego: \"\"\n            updated: 1636669297674\n          status: error\n        enabled: true\n        identifier: policyset-1\n        name: Production Policies\n        org_id: test-org\n        project_id: test-project\n        status: error\n        type: pipeline\n        updated: 1636669297674\n    GitErrorResult:\n      required:\n      - explanation\n      - hint\n      - message\n      type: object\n      properties:\n        explanation:\n          type: string\n          description: the explanation of the error\n          example: \"File with given filepath [file.rego] already exists in Github,\\\n            \\ thus couldn't create a new file\"\n        hint:\n          type: string\n          description: the hint on how to resolve the error\n          example: \"Please check if there's already a file [file.rego] in Github repository\\\n            \\ [rego-demo] for the given filepath and branch [main].\"\n        message:\n          type: string\n          description: the message is a human-readable explanation specific to this\n            occurrence of the problem\n          example: \"Please check if there's already a file [file.rego] in Github repository\\\n            \\ [rego-demo] for the given filepath and branch [main].\"\n      example:\n        explanation: \"File with given filepath [file.rego] already exists in Github,\\\n          \\ thus couldn't create a new file\"\n        hint: \"Please check if there's already a file [file.rego] in Github repository\\\n          \\ [rego-demo] for the given filepath and branch [main].\"\n        message: \"Please check if there's already a file [file.rego] in Github repository\\\n          \\ [rego-demo] for the given filepath and branch [main].\"\n    LinkedPolicy:\n      required:\n      - account_id\n      - identifier\n      - name\n      - org_id\n      - project_id\n      - severity\n      type: object\n      properties:\n        account_id:\n          type: string\n          description: Harness account ID associated with this policy\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        created:\n          type: integer\n          description: Time the policy was created\n          format: int64\n          example: 1636669297674\n        identifier:\n          minLength: 1\n          type: string\n          description: identifier of the policy\n          example: policy-1\n        name:\n          minLength: 1\n          type: string\n          description: Name of the policy\n          example: Pipeline Approval\n        org_id:\n          type: string\n          description: Harness organization ID associated with this policy\n          example: test-org\n          default: \"\"\n        project_id:\n          type: string\n          description: Harness project ID associated with this policy\n          example: test-project\n          default: \"\"\n        rego:\n          minLength: 1\n          type: string\n          description: Rego that defines the policy\n          example: \"\"\n        severity:\n          type: string\n          description: The severity of this policy in this context\n          example: warning\n          enum:\n          - warning\n          - error\n        updated:\n          type: integer\n          description: Time the policy was last updated\n          format: int64\n          example: 1636669297674\n      example:\n        account_id: eBqAoNchMLKigC_qZ5EdC\n        created: 1636669297674\n        identifier: policy-1\n        name: Pipeline Approval\n        org_id: test-org\n        project_id: test-project\n        rego: \"\"\n        severity: warning\n        updated: 1636669297674\n    LinkedPolicy2:\n      required:\n      - account_id\n      - created\n      - identifier\n      - name\n      - org_id\n      - project_id\n      - rego\n      - severity\n      - updated\n      type: object\n      properties:\n        account_id:\n          type: string\n          description: Harness account ID associated with this policy\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        created:\n          type: integer\n          description: Time the policy was created\n          format: int64\n          example: 1636669297674\n        identifier:\n          minLength: 1\n          type: string\n          description: identifier of the policy\n          example: policy-1\n        name:\n          minLength: 1\n          type: string\n          description: Name of the policy\n          example: Pipeline Approval\n        org_id:\n          type: string\n          description: Harness organization ID associated with this policy\n          example: test-org\n          default: \"\"\n        project_id:\n          type: string\n          description: Harness project ID associated with this policy\n          example: test-project\n          default: \"\"\n        rego:\n          minLength: 1\n          type: string\n          description: Rego that defines the policy\n          example: \"\"\n        severity:\n          type: string\n          description: The severity of this policy in this context\n          example: warning\n          enum:\n          - warning\n          - error\n        updated:\n          type: integer\n          description: Time the policy was last updated\n          format: int64\n          example: 1636669297674\n      example:\n        account_id: eBqAoNchMLKigC_qZ5EdC\n        created: 1636669297674\n        identifier: policy-1\n        name: Pipeline Approval\n        org_id: test-org\n        project_id: test-project\n        rego: \"\"\n        severity: warning\n        updated: 1636669297674\n    Linkedpolicyidentifier:\n      required:\n      - identifier\n      - severity\n      type: object\n      properties:\n        identifier:\n          minLength: 1\n          type: string\n          description: identifier of the policy with account. or org. prefix if needed\n          example: policy-1\n        severity:\n          type: string\n          description: The severity of this policy in this context\n          example: warning\n          enum:\n          - warning\n          - error\n      example:\n        identifier: policy-1\n        severity: warning\n    Policy:\n      required:\n      - account_id\n      - created\n      - identifier\n      - name\n      - org_id\n      - project_id\n      - rego\n      - updated\n      type: object\n      properties:\n        account_id:\n          type: string\n          description: Harness account ID associated with this policy\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        created:\n          type: integer\n          description: Time the policy was created\n          format: int64\n          example: 1636669297674\n        git_commit_sha:\n          type: string\n          description: The commit sha of the commit that last effected the file\n          example: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n        git_connector_ref:\n          type: string\n          description: The harness connector used for authenticating on the git provider\n          example: \".\"\n        git_default_branch:\n          type: string\n          description: \"The default branch, the service pulls in changes from from\\\n            \\ this branch for policy evaluation\"\n          example: main\n        git_default_branch_update_error:\n          $ref: '#/components/schemas/GitErrorResult'\n        git_default_branch_updated:\n          type: integer\n          description: The last time the service successfully pulled in changes from\n            the default branch\n          format: int64\n          example: 1636669297674\n        git_file_id:\n          type: string\n          description: The file if od the bile being updated\n          example: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n        git_file_url:\n          type: string\n          description: The url of the file on the fit provider\n          example: \"\"\n        git_path:\n          type: string\n          description: The path to the file in the git repo\n          example: .harness/policy.rego\n        git_repo:\n          type: string\n          description: The git repo the policy resides in\n          example: \"github.com/org/repo,omitempty\"\n        identifier:\n          minLength: 1\n          type: string\n          description: identifier of the policy\n          example: policy-1\n        name:\n          minLength: 1\n          type: string\n          description: Name of the policy\n          example: Pipeline Approval\n        org_id:\n          type: string\n          description: Harness organization ID associated with this policy\n          example: test-org\n          default: \"\"\n        project_id:\n          type: string\n          description: Harness project ID associated with this policy\n          example: test-project\n          default: \"\"\n        rego:\n          minLength: 1\n          type: string\n          description: Rego that defines the policy\n          example: \"\"\n        updated:\n          type: integer\n          description: Time the policy was last updated\n          format: int64\n          example: 1636669297674\n      example:\n        account_id: eBqAoNchMLKigC_qZ5EdC\n        created: 1636669297674\n        git_commit_sha: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n        git_connector_ref: \".\"\n        git_default_branch: main\n        git_default_branch_update_error:\n          explanation: \"File with given filepath [file.rego] already exists in Github,\\\n            \\ thus couldn't create a new file\"\n          hint: \"Please check if there's already a file [file.rego] in Github repository\\\n            \\ [rego-demo] for the given filepath and branch [main].\"\n          message: \"Please check if there's already a file [file.rego] in Github repository\\\n            \\ [rego-demo] for the given filepath and branch [main].\"\n        git_default_branch_updated: 1636669297674\n        git_file_id: 1369b45c20fc685113adcfd1a08a914180ff3c0d\n        git_file_url: \"\"\n        git_path: .harness/policy.rego\n        git_repo: \"github.com/org/repo,omitempty\"\n        identifier: policy-1\n        name: Pipeline Approval\n        org_id: test-org\n        project_id: test-project\n        rego: \"\"\n        updated: 1636669297674\n    PolicyExample:\n      required:\n      - desc\n      - input\n      - name\n      - rego\n      - type\n      type: object\n      properties:\n        desc:\n          type: string\n          description: Longer description of the example\n          example: This is a pipeline example\n        input:\n          type: string\n          description: Example input to illustrate the rego policy\n          example: \"{\\\"message\\\": \\\"everyone\\\"}\"\n        name:\n          type: string\n          description: Example name\n          example: Pipeline example\n        rego:\n          type: string\n          description: Example rego policy\n          example: |-\n            package test\n            deny[\"should say hello world\"] {input.message != \"world\"}\n        type:\n          type: string\n          description: The type of entity illustrated in this example\n          example: pipeline\n      description: Example policies and input\n      example:\n        desc: This is a pipeline example\n        input: \"{\\\"message\\\": \\\"everyone\\\"}\"\n        name: Pipeline example\n        rego: |-\n          package test\n          deny[\"should say hello world\"] {input.message != \"world\"}\n        type: pipeline\n    PolicyHealth:\n      required:\n      - total_evaluation_count\n      - total_evaluation_entity_count\n      - total_policy_count\n      - total_policy_set_count\n      - total_policy_set_entity_count\n      type: object\n      properties:\n        total_evaluation_count:\n          type: integer\n          description: Total number of evaluations that have occurred\n          format: int64\n          example: 3106114819850014595\n        total_evaluation_entity_count:\n          $ref: '#/components/schemas/EvaluationCounts'\n        total_policy_count:\n          type: integer\n          description: Total number of policies stored\n          format: int64\n          example: 260032344239716986\n        total_policy_set_count:\n          type: integer\n          description: Total number of policy sets stored\n          format: int64\n          example: 8273115386678935454\n        total_policy_set_entity_count:\n          type: object\n          additionalProperties:\n            type: integer\n            format: int64\n            example: 1071228818264538870\n          description: Total number of policy sets by type\n          example:\n            Nihil beatae ut.: 3419870533551795433\n            Officiis eum.: 2401905417790433514\n            Ut et.: 1271161779457622586\n      description: Policy health metrics\n      example:\n        total_evaluation_count: 1514701763360421536\n        total_evaluation_entity_count:\n          error: 4962770580155356801\n          pass: 1838564234748219477\n          warning: 6712404284550845579\n        total_policy_count: 8782150527953946519\n        total_policy_set_count: 137249694436592402\n        total_policy_set_entity_count:\n          Sequi asperiores molestiae quia architecto reprehenderit.: 8689723557954075770\n          Voluptate eos.: 5766037194807765246\n    PolicySet:\n      required:\n      - account_id\n      - action\n      - created\n      - enabled\n      - identifier\n      - name\n      - org_id\n      - project_id\n      - type\n      - updated\n      type: object\n      properties:\n        account_id:\n          type: string\n          description: Harness account ID associated with this policy set\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        action:\n          minLength: 1\n          type: string\n          description: Action that triggers the policy set\n          example: onrun\n        created:\n          type: integer\n          description: Time the policy set was created\n          format: int64\n          example: 1636669297674\n        description:\n          type: string\n          description: Description of the policy set\n          example: Captures critical production policies\n        enabled:\n          type: boolean\n          description: Only enabled policy sets are evaluated when evaluating by type/action\n          example: true\n        identifier:\n          minLength: 1\n          type: string\n          description: Identifier of the policy set\n          example: policyset-1\n        name:\n          minLength: 1\n          type: string\n          description: Name of the policy set\n          example: Production Policies\n        org_id:\n          type: string\n          description: Harness organization ID associated with this policy set\n          example: test-org\n          default: \"\"\n        policies:\n          type: array\n          description: Policies linked to this policy set\n          example:\n          - account_id: eBqAoNchMLKigC_qZ5EdC\n            created: 1636669297674\n            identifier: policy-1\n            name: Pipeline Approval\n            org_id: test-org\n            project_id: test-project\n            rego: \"\"\n            severity: warning\n            updated: 1636669297674\n          - account_id: eBqAoNchMLKigC_qZ5EdC\n            created: 1636669297674\n            identifier: policy-1\n            name: Pipeline Approval\n            org_id: test-org\n            project_id: test-project\n            rego: \"\"\n            severity: warning\n            updated: 1636669297674\n          items:\n            $ref: '#/components/schemas/LinkedPolicy'\n        project_id:\n          type: string\n          description: Harness project ID associated with this policy set\n          example: test-project\n          default: \"\"\n        type:\n          minLength: 1\n          type: string\n          description: Type of input suitable for the policy set\n          example: pipeline\n        updated:\n          type: integer\n          description: Time the policy set was last updated\n          format: int64\n          example: 1636669297674\n      example:\n        account_id: eBqAoNchMLKigC_qZ5EdC\n        action: onrun\n        created: 1636669297674\n        description: Captures critical production policies\n        enabled: true\n        identifier: policyset-1\n        name: Production Policies\n        org_id: test-org\n        policies:\n        - account_id: eBqAoNchMLKigC_qZ5EdC\n          created: 1636669297674\n          identifier: policy-1\n          name: Pipeline Approval\n          org_id: test-org\n          project_id: test-project\n          rego: \"\"\n          severity: warning\n          updated: 1636669297674\n        - account_id: eBqAoNchMLKigC_qZ5EdC\n          created: 1636669297674\n          identifier: policy-1\n          name: Pipeline Approval\n          org_id: test-org\n          project_id: test-project\n          rego: \"\"\n          severity: warning\n          updated: 1636669297674\n        project_id: test-project\n        type: pipeline\n        updated: 1636669297674\n    PolicySet2:\n      required:\n      - account_id\n      - action\n      - created\n      - enabled\n      - identifier\n      - name\n      - org_id\n      - project_id\n      - type\n      - updated\n      type: object\n      properties:\n        account_id:\n          type: string\n          description: Harness account ID associated with this policy set\n          example: eBqAoNchMLKigC_qZ5EdC\n          default: \"\"\n        action:\n          minLength: 1\n          type: string\n          description: Action that triggers the policy set\n          example: onrun\n        created:\n          type: integer\n          description: Time the policy set was created\n          format: int64\n          example: 1636669297674\n        description:\n          type: string\n          description: Description of the policy set\n          example: Captures critical production policies\n        enabled:\n          type: boolean\n          description: Only enabled policy sets are evaluated when evaluating by type/action\n          example: true\n        identifier:\n          minLength: 1\n          type: string\n          description: Identifier of the policy set\n          example: policyset-1\n        name:\n          minLength: 1\n          type: string\n          description: Name of the policy set\n          example: Production Policies\n        org_id:\n          type: string\n          description: Harness organization ID associated with this policy set\n          example: test-org\n          default: \"\"\n        policies:\n          type: array\n          description: Policies linked to this policy set\n          example:\n          - account_id: eBqAoNchMLKigC_qZ5EdC\n            created: 1636669297674\n            identifier: policy-1\n            name: Pipeline Approval\n            org_id: test-org\n            project_id: test-project\n            rego: \"\"\n            severity: warning\n            updated: 1636669297674\n          - account_id: eBqAoNchMLKigC_qZ5EdC\n            created: 1636669297674\n            identifier: policy-1\n            name: Pipeline Approval\n            org_id: test-org\n            project_id: test-project\n            rego: \"\"\n            severity: warning\n            updated: 1636669297674\n          - account_id: eBqAoNchMLKigC_qZ5EdC\n            created: 1636669297674\n            identifier: policy-1\n            name: Pipeline Approval\n            org_id: test-org\n            project_id: test-project\n            rego: \"\"\n            severity: warning\n            updated: 1636669297674\n          items:\n            $ref: '#/components/schemas/LinkedPolicy2'\n        project_id:\n          type: string\n          description: Harness project ID associated with this policy set\n          example: test-project\n          default: \"\"\n        type:\n          minLength: 1\n          type: string\n          description: Type of input suitable for the policy set\n          example: pipeline\n        updated:\n          type: integer\n          description: Time the policy set was last updated\n          format: int64\n          example: 1636669297674\n      example:\n        account_id: eBqAoNchMLKigC_qZ5EdC\n        action: onrun\n        created: 1636669297674\n        description: Captures critical production policies\n        enabled: true\n        identifier: policyset-1\n        name: Production Policies\n        org_id: test-org\n        policies:\n        - account_id: eBqAoNchMLKigC_qZ5EdC\n          created: 1636669297674\n          identifier: policy-1\n          name: Pipeline Approval\n          org_id: test-org\n          project_id: test-project\n          rego: \"\"\n          severity: warning\n          updated: 1636669297674\n        - account_id: eBqAoNchMLKigC_qZ5EdC\n          created: 1636669297674\n          identifier: policy-1\n          name: Pipeline Approval\n          org_id: test-org\n          project_id: test-project\n          rego: \"\"\n          severity: warning\n          updated: 1636669297674\n        - account_id: eBqAoNchMLKigC_qZ5EdC\n          created: 1636669297674\n          identifier: policy-1\n          name: Pipeline Approval\n          org_id: test-org\n          project_id: test-project\n          rego: \"\"\n          severity: warning\n          updated: 1636669297674\n        - account_id: eBqAoNchMLKigC_qZ5EdC\n          created: 1636669297674\n          identifier: policy-1\n          name: Pipeline Approval\n          org_id: test-org\n          project_id: test-project\n          rego: \"\"\n          severity: warning\n          updated: 1636669297674\n        project_id: test-project\n        type: pipeline\n        updated: 1636669297674\n    ServiceVersion:\n      required:\n      - commit\n      - version\n      type: object\n      properties:\n        commit:\n          type: string\n          description: Build identifier\n          example: 96381692bf3a2bd7904769c6886e832435768b57\n        version:\n          type: string\n          description: Version number\n          example: v0.123.0\n      example:\n        commit: 96381692bf3a2bd7904769c6886e832435768b57\n        version: v0.123.0\n    UpdateRequestBody:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of the policy\n          example: Check that an approval step is present\n        rego:\n          type: string\n          description: The rego that defines the policy policy\n          example: |-\n            package test\n            deny[\"should say hello world\"] {input.message != \"world\"}\n      example:\n        name: Check that an approval step is present\n        rego: |-\n          package test\n          deny[\"should say hello world\"] {input.message != \"world\"}\n    UpdateRequestBody2:\n      type: object\n      properties:\n        action:\n          minLength: 1\n          type: string\n          description: Action that triggers the policy set\n          example: onrun\n        description:\n          type: string\n          description: Description of the policy set\n          example: Captures critical production policies\n        enabled:\n          type: boolean\n          description: Only enabled policy sets are evaluated when evaluating by type/action\n          example: true\n        name:\n          type: string\n          description: Name of the policy set\n          example: Production Policies\n        policies:\n          type: array\n          description: Policies linked to this policy set\n          example:\n          - identifier: policy-1\n            severity: warning\n          - identifier: policy-1\n            severity: warning\n          - identifier: policy-1\n            severity: warning\n          - identifier: policy-1\n            severity: warning\n          items:\n            $ref: '#/components/schemas/Linkedpolicyidentifier'\n        type:\n          type: string\n          description: Type of input suitable for the policy set\n          example: pipeline\n      example:\n        action: onrun\n        description: Captures critical production policies\n        enabled: true\n        name: Production Policies\n        policies:\n        - identifier: policy-1\n          severity: warning\n        - identifier: policy-1\n          severity: warning\n        - identifier: policy-1\n          severity: warning\n        type: pipeline\n  securitySchemes:\n    api_key_header_x-api-key:\n      type: apiKey\n      description: Harness PAT\n      name: x-api-key\n      in: header\n    jwt_header_Authorization:\n      type: http\n      scheme: bearer\n",
			"canonicalURL": "/github.com/harness/harness-go-sdk@bc66b03f59e7ff9d1691099bc97422a0ad7c8fa2/-/blob/harness/policymgmt/api/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/harness/harness-go-sdk/blob/bc66b03f59e7ff9d1691099bc97422a0ad7c8fa2/harness/policymgmt/api/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/api/v1/dashboard\": get: operation \"dashboard#metrics\": security: at harness/policymgmt/api/swagger.yaml:159:11: list of scopes MUST be empty for \"type\" \"http\""
}