{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/abartov/bybeconv"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "app/openapi.yaml",
			"byteSize": 17046,
			"content": "openapi: 3.0.0\ninfo:\n  title: Project Ben-Yehuda API\n  description: A read-only API to query for and retrieve texts and metadata from benyehuda.org\n  version: 1.0.0\n  license:\n    name: GNU Affero Public License\n    url: 'https://www.gnu.org/licenses/agpl-3.0.en.html'\n  contact:\n    name: Asaf Bartov\n    email: editor@benyehuda.org\ncomponents:\n  parameters:\n    keyParam:\n      name: key\n      in: query\n      required: true\n      schema:\n        type: string\n    snippetParam:\n      name: snippet\n      in: query\n      required: false\n      description: 'whether or not to include a plaintext snippet of the beginning of the text. Default is `false`.'\n      schema:\n        type: boolean\n        default: false\n    viewParam:\n      name: view\n      in: query\n      required: false\n      description: 'how much detail to return: `metadata` returns all metadata and download link; `basic` returns basic metadata and a download_link, and is the default; `enriched` returns all metadata as well as tags, recommendations, external links, and aboutnesses'\n      schema:\n        type: string\n        default: basic\n        enum:\n          - metadata\n          - basic\n          - enriched\n    personDetailParam:\n      name: author_detail\n      in: query\n      required: false\n      description: 'how much detail to return: \n        `metadata` returns personal metadata;\n        `texts` returns IDs of texts this person was involved in, with his role in each;; \n        `enriched` returns personal metadata plus list of works and works about this person (backlinks);'\n      schema:\n        type: string\n        default: metadata\n        enum:\n          - metadata\n          - works\n          - enriched\n    formatParam:\n      name: file_format\n      in: query\n      required: false\n      description: 'desired text format for download link: `html` for HTML, `txt` for plain text without any formatting, `pdf` for PDF, `epub` for EPUB, `mobi` for MOBI, `docx` for DOCX, `odt` for LibreOffice ODT'\n      schema:\n        type: string\n        default: html\n        enum:\n          - html\n          - txt\n          - pdf\n          - epub\n          - mobi\n          - docx\n          - odt\n    pageParam:\n      name: page\n      in: query\n      required: false\n      description: desired page number of result set\n      schema:\n        type: integer\n        minimum: 1\n    sortByParam:\n      name: sort_by\n      in: query\n      required: false\n      description: desired ordering of result set (ignored if fulltext search is used)\n      schema:\n        type: string\n        default: alphabetical\n        enum:\n          - alphabetical\n          - popularity\n          - publication_date\n          - creation_date\n          - upload_date\n    sortDirParam:\n      name: sort_dir\n      in: query\n      required: false\n      description: desired ordering direction (ignored if fulltext search is used)\n      schema:\n        type: string\n        default: default\n        enum:\n          - default\n          - asc\n          - desc\n  schemas:\n    genre:\n      type: string\n      enum:\n        - poetry\n        - prose\n        - drama\n        - fables\n        - article\n        - memoir\n        - letters\n        - reference\n        - lexicon\n      description: the broad field of humanities of a textual work in the database.\n    period:\n      type: string\n      enum:\n        - ancient\n        - medieval\n        - enlightenment\n        - revival\n        - modern\n      description: specifies what section of the rough timeline of Hebrew literature an object belongs to.\n    year_range:\n      type: object\n      properties:\n        from:\n          type: integer\n        to:\n          type: integer\n    tagging:\n      type: string\n    recommendation:\n      type: object\n      properties:\n        fulltext:\n          type: string\n        recommender_user_id:\n          type: integer\n        recommender_home_url:\n          type: string\n        recommendation_date:\n          type: string\n    external_link:\n      type: object\n      properties:\n        url:\n          type: string\n        description:\n          type: string\n        type:\n          type: string\n          enum:\n            - wikipedia\n            - blog\n            - youtube\n            - publisher_site\n            - other\n    gender:\n      type: string\n      enum:\n        - female\n        - male\n        - other\n        - unknown\n      description: describes a person's gender\n  responses:\n    person:\n      description: A response object describing a person from Project Ben-Yehuda\n      content:\n        application/json:\n          schema:\n            properties:\n              id:\n                type: integer\n              url:\n                type: string\n                description: Canonical URL of the person at Project Ben-Yehuda (useful for giving credit and allowing users to click through)\n              metadata:\n                type: object\n                properties:\n                  name:\n                    type: string\n                  sort_name:\n                    type: string\n                    description: version of the name more useful for alphabetical sorting\n                  birth_year:\n                    type: integer\n                  death_year:\n                    type: integer\n                  gender:\n                    $ref: '#/components/schemas/gender'\n                  copyright_status:\n                    type: boolean\n                  period:\n                    $ref: '#/components/schemas/period'\n                  other_designations:\n                    type: string\n                    description: semicolon-separated list of additional names or spellings for this person\n                  bio_snippet:\n                    type: string\n                  languages:\n                    type: array\n                    description: list of languages (by ISO code) this person worked in\n                    items:\n                      type: string\n                  genres:\n                    type: array\n                    description: list of genres this person worked in\n                    items:\n                      $ref: '#/components/schemas/genre'\n                  impressions_count:\n                    type: integer\n                    description: total number of times the person's page OR one of their texts were viewed or printed\n              texts:\n                type: object\n                description: ID numbers of all texts this person is involved into with role in each\n                properties:\n                  author:\n                    type: array\n                    items:\n                      type: integer\n                  translator:\n                    type: array\n                    items:\n                      type: integer\n                  editor:\n                    type: array\n                    items:\n                      type: integer\n                  illustrator:\n                    type: array\n                    items:\n                      type: integer\n              enrichment:\n                type: object\n                properties:\n                  texts_about:\n                    type: array\n                    description: ID numbers of texts whose subject is this person\n                    items:\n                      type: integer\n    text:\n      description: A response object describing a single text from Project Ben-Yehuda\n      content:\n        application/json:\n          schema:\n            properties:\n              id:\n                type: integer\n              url:\n                type: string\n                description: Canonical URL of the text at Project Ben-Yehuda (useful for giving credit and allowing users to click through)\n              metadata:\n                type: object\n                properties:\n                  title:\n                    type: string\n                  sort_title:\n                    type: string\n                    description: version of the title more useful for alphabetical sorting\n                  genre:\n                    $ref: '#/components/schemas/genre'\n                  orig_lang:\n                    type: string\n                  orig_lang_title:\n                    type: string\n                    description: title of translated text in the original language and script\n                  pby_publication_date:\n                    type: string\n                  author_string:\n                    type: string\n                  author_ids:\n                    type: array\n                    items:\n                      type: integer\n                    description: ID numbers of all authors involved with the text (most often only one)\n                  impressions_count:\n                    type: integer\n                    description: total number of times the text was viewed or printed\n                  orig_publication_date:\n                    type: string\n                  author_genders:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/gender'\n                  translator_genders:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/gender'\n                  copyright_status:\n                    type: boolean\n                  period:\n                    $ref: '#/components/schemas/period'\n                  raw_creation_date:\n                    type: string\n                  creation_date:\n                    type: string\n                  publication_place:\n                    type: string\n                  publisher:\n                    type: string\n                  raw_publication_date:\n                    type: string\n              enrichment:\n                type: object\n                properties:\n                  external_links:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/external_link'\n                  taggings:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/tagging'\n                  recommendations:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/recommendation'\n                  texts_about:\n                    type: array\n                    description: ID numbers of texts whose subject is this text (for example, critical essays about a creative work)\n                    items:\n                      type: integer\n              snippet:\n                type: string\n                description: 'plaintext snippet of the first few hundred characters of the text, useful for previews and search results'\n              download_url:\n                type: string\n                description: 'URL of the full text of the work, in the requested format (HTML by default)'\n    textsPage:\n      description: Single page of paginated texts list\n      content:\n        application/json:\n          schema:\n            properties:\n              total_count:\n                type: integer\n              data:\n                type: array\n                items:\n                  $ref: '#/components/responses/text'\npaths:\n  /search:\n    post:\n      parameters:\n        - $ref: '#/components/parameters/keyParam'\n        - $ref: '#/components/parameters/viewParam'\n        - $ref: '#/components/parameters/formatParam'\n        - $ref: '#/components/parameters/pageParam'\n        - $ref: '#/components/parameters/sortByParam'\n        - $ref: '#/components/parameters/sortDirParam'\n        - name: genres\n          in: query\n          required: false\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/genre'\n        - name: periods\n          in: query\n          required: false\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/period'\n        - name: is_copyrighted\n          in: query\n          required: false\n          description: limit search to copyrighted works or to non-copyrighted works\n          schema:\n            type: boolean\n        - name: author_genders\n          in: query\n          required: false\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/gender'\n        - name: translator_genders\n          in: query\n          required: false\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/gender'\n        - name: title\n          in: query\n          required: false\n          description: a substring to match against a text's title\n          schema:\n            type: string\n        - name: author\n          in: query\n          required: false\n          description: a substring to match against the name(s) of a text's author(s)\n          schema:\n            type: string\n        - name: fulltext\n          in: query\n          required: false\n          description: a substring to match against the work's full text.\n          schema:\n            type: string\n        - name: author_ids\n          in: query\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n        - name: original_language\n          in: query\n          required: false\n          description: 'ISO code of language, e.g. ''pl'' for Polish, ''grc'' for ancient Greek. Use magic constant ''xlat'' to match all non-Hebrew languages'\n          schema:\n            type: string\n        - name: uploaded_between\n          in: query\n          required: false\n          description: 'pass an years interval json `{ from: min_year, to: max_year}` to get works uploaded to the site at year min_year \u003c= year \u003c= max_year'\n          schema:\n            $ref: '#/components/schemas/year_range'\n        - name: created_between\n          in: query\n          required: false\n          description: 'pass an years interval json `{ from: min_year, to: max_year}` to get works created at year min_year \u003c= year \u003c= max_year'\n          schema:\n            $ref: '#/components/schemas/year_range'\n        - name: published_between\n          in: query\n          required: false\n          description: 'pass an years interval json `{ from: min_year, to: max_year}` to get works published in print at year min_year \u003c= year \u003c= max_year'\n          schema:\n            $ref: '#/components/schemas/year_range'\n      summary: Query the site database for texts by a variety of parameters. See API docs for documentation of each parameter. All parameters are combined with a logical AND. Parameters accepting arrays allow a logical OR within that category.\n      tags: []\n      responses:\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total_count:\n                    type: integer\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/responses/text'\n  /texts/batch:\n    post:\n      parameters:\n        - $ref: '#/components/parameters/keyParam'\n        - name: ids\n          in: query\n          required: false\n          description: array of text IDs to fetch\n          schema:\n            type: array\n            minItems: 1\n            maxItems: 25\n            items:\n              type: integer\n        - $ref: '#/components/parameters/viewParam'\n        - $ref: '#/components/parameters/formatParam'\n        - $ref: '#/components/parameters/snippetParam'\n      tags: []\n\n      summary: retrieve a collection of texts by specified IDs\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/responses/text'\n  '/texts/{id}':\n    get:\n      parameters:\n        - $ref: '#/components/parameters/keyParam'\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n        - $ref: '#/components/parameters/viewParam'\n        - $ref: '#/components/parameters/formatParam'\n        - $ref: '#/components/parameters/snippetParam'\n      summary: 'returns meta-data and, optionally, the full text, of a textual work from the database'\n      tags: []\n      description: (TBD)\n      responses:\n        '200':\n          $ref: '#/components/responses/text'\n  '/people/{id}':\n    get:\n      summary: Your GET endpoint\n      tags: []\n      parameters:\n        - $ref: '#/components/parameters/keyParam'\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n        - $ref: '#/components/parameters/personDetailParam'\n      responses: \n        '200':\n          $ref: '#/components/responses/person'\n      \n      operationId: get-people-id\nservers:\n  - url: 'https://benyehuda.org/api'\n    description: main production server of Project Ben-Yehuda\n"
		}
	},
	"Error": "parse: parse spec: paths: /texts/batch: post: operation \"\": responses: 200: content: \"application/json\": schema: parse schema: item: parse schema: reference \"#/components/responses/text\": resolve reference \"#/components/responses/text\": invalid schema reference \"#/components/responses/text\""
}