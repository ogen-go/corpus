{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/tamtam-chat/tamtam-bot-api-schema"
		},
		"file": {
			"name": "schema.yaml",
			"size": 0,
			"path": "schema.yaml",
			"byteSize": 107501,
			"content": "openapi: 3.0.0\ninfo:\n  version: 0.5.4\n  title: TamTam Bot API\n  license:\n    name: Apache 2.0\n  description: |-\n    # About\n    Bot API allows bots to interact with TamTam. Methods are called by sending HTTPS requests to [botapi.tamtam.chat](https://botapi.tamtam.chat) domain.\n    Bots are third-party applications that use TamTam features. A bot can legitimately take part in a conversation. It can be achieved through HTTP requests to the TamTam Bot API.\n\n    ## Features\n    TamTam bots of the current version are able to:\n    - Communicate with users and respond to requests\n    - Recommend users complete actions via programmed buttons\n    - Request personal data from users (name, short reference, phone number)\n    We'll keep working on expanding bot capabilities in the future.\n\n    ## Examples\n    Bots can be used for the following purposes:\n    - Providing support, answering frequently asked questions\n    - Sending typical information\n    - Voting\n    - Likes/dislikes\n    - Following external links\n    - Forwarding a user to a chat/channel\n\n    ## @PrimeBot\n    [PrimeBot](https://tt.me/primebot) is the main bot in TamTam, all bots creator. Use PrimeBot to create and edit\n    your bots. Feel free to contact us for any questions, [@support](https://tt.me/support) or [team@tamtam.chat](mailto:team@tamtam.chat).\n\n    ## HTTP verbs\n    `GET` \u0026mdash; getting resources, parameters are transmitted via URL\n\n    `POST` \u0026mdash; creation of resources (for example, sending new messages)\n\n    `PUT` \u0026mdash; editing resources\n\n    `DELETE` \u0026mdash; deleting resources\n\n    `PATCH` \u0026mdash; patching resources\n\n    ## HTTP response codes\n    `200` \u0026mdash; successful operation\n\n    `400` \u0026mdash; invalid request\n\n    `401` \u0026mdash; authentication error\n\n    `404` \u0026mdash; resource not found\n\n    `405` \u0026mdash; method is not allowed\n\n    `429` \u0026mdash; the number of requests is exceeded\n\n    `503` \u0026mdash; service unavailable\n\n    ## Resources format\n    For content requests (PUT and POST) and responses, the API uses the JSON format.\n    All strings are UTF-8 encoded.\n    Date/time fields are represented as the number of milliseconds that have elapsed since 00:00 January 1, 1970 in the long format. To get it, you can simply multiply the UNIX timestamp by 1000. All date/time fields have a UTC timezone.\n    ## Error responses\n    In case of an error, the API returns a response with the corresponding HTTP code and JSON with the following fields:\n\n    `code` - the string with the error key\n\n    `message` - a string describing the error \u003c/br\u003e\n\n    For example:\n    ```bash\n    \u003e http https://botapi.tamtam.chat/chats?access_token={EXAMPLE_TOKEN}\n    HTTP / 1.1 403 Forbidden\n    Cache-Control: no-cache\n    Connection: Keep-Alive\n    Content-Length: 57\n    Content-Type: application / json; charset = utf-8\n    Set-Cookie: web_ui_lang = ru; Path = /; Domain = .tamtam.chat; Expires = 2019-03-24T11: 45: 36.500Z\n    {\n       \"code\": \"verify.token\",\n       \"message\": \"Invalid access_token\"\n    }\n    ```\n    ## Receiving notifications\n    TamTam Bot API supports 2 options of receiving notifications on new events for bots:\n    - Push notifications via WebHook. To receive data via WebHook, you'll have to [add subscription](https://dev.tamtam.chat/#operation/subscribe);\n    - Notifications upon request via [long polling](#operation/getUpdates) API. All data can be received via long polling **by default** after creating the bot.\n\n    Both methods **cannot** be used simultaneously.\n    Refer to the response schema of [/updates](https://dev.tamtam.chat/#operation/getUpdates) method to check all available types of updates.\n\n    ### Webhook\n    There is some notes about how we handle webhook subscription:\n    - Sometimes webhook notification cannot be delivered in case when bot server or network is down.\n\n      In such case we will retry delivery in a short period of time (from 30 to 60 seconds) and will do this until get\n      `200 OK` status code from your server, but not longer than **8 hours** (*may change over time*) since update happened.\n      Subscription can be cancelled if bot doesn't response to webhook notification.\n\n      We also consider any non `200` response from server as failed delivery.\n\n    - To protect your bot from unexpected high load we send **no more than 100** notifications per second by default.\n      If you want increase this limit, contact us at [@support](https://tt.me/support).\n\n\n    It should be from one of the following subnets:\n    ```\n    185.16.150.0/30\n    185.16.150.84/30\n    185.16.150.152/30\n    185.16.150.192/30\n    ```\n\n\n    ## Message buttons\n    You can program buttons for users answering a bot.\n    TamTam supports the following types of buttons:\n\n    `callback` \u0026mdash; sends a notification with payload to a bot (via WebHook or long polling)\n\n    `link` \u0026mdash; makes a user to follow a link\n\n    `request_contact` \u0026mdash; requests the user permission to access contact information (phone number, short link, email)\n\n    `request_geo_location` \u0026mdash; asks user to provide current geo location\n\n    `chat` \u0026mdash; creates chat associated with message\n\n    To start create buttons [send message](#operation/sendMessage) with `InlineKeyboardAttachment`:\n    ```json\n    {\n      \"text\": \"It is message with inline keyboard\",\n      \"attachments\": [\n        {\n          \"type\": \"inline_keyboard\",\n          \"payload\": {\n            \"buttons\": [\n              [\n                {\n                  \"type\": \"callback\",\n                  \"text\": \"Press me!\",\n                  \"payload\": \"button1 pressed\"\n                }\n              ],\n              [\n                {\n                  \"type\": \"chat\",\n                  \"text\": \"Discuss\",\n                  \"chat_title\": \"Message discussion\"\n                }\n              ]\n            ]\n          }\n        }\n      ]\n    }\n    ```\n    ### Chat button\n    Chat button is a button that starts chat assosiated with the current message. It will be **private** chat with a link, bot will be added as administrator by default.\n\n    Chat will be created as soon as the first user taps on button. Bot will receive `message_chat_created` update.\n\n    Bot can set title and description of new chat by setting `chat_title` and `chat_description` properties.\n\n    Whereas keyboard can contain several `chat` buttons there is `uuid` property to distinct them between each other.\n    In case you do not pass `uuid` we will generate it. If you edit message, pass `uuid` so we know that this button starts the same chat as before.\n\n    Chat button also can contain `start_payload` that will be sent to bot as part of `message_chat_created` update.\n\n    ## Deep linking\n    TamTam supports deep linking mechanism for bots. It allows passing additional payload to the bot on startup.\n    Deep link can contain any data encoded into string up to **128** characters long. Longer strings will be omitted and **not** passed to the bot.\n\n    Each bot has start link that looks like:\n    ```\n    https://tt.me/%BOT_USERNAME%/start/%PAYLOAD%\n    ```\n    As soon as user clicks on such link we open dialog with bot and send this payload to bot as part of `bot_started` update:\n    ```json\n    {\n        \"update_type\": \"bot_started\",\n        \"timestamp\": 1573226679188,\n        \"chat_id\": 1234567890,\n        \"user\": {\n            \"user_id\": 1234567890,\n            \"name\": \"Boris\",\n            \"username\": \"borisd84\"\n        },\n        \"payload\": \"any data meaningful to bot\"\n    }\n    ```\n\n    Deep linking mechanism is supported for iOS version 2.7.0 and Android 2.9.0 and higher.\n\n    ## Constructors\n    Constructor is a bot that can create a message for user: add buttons, attach some media, insert text.\n\n    You can enable constructor mode for your bot via [@PrimeBot](https://tt.me/primebot)\n    sending [/constructor_mode](https://tt.me/primebot/start/constructor_mode) command.\n\n    For bot developers, it looks like request-response interaction where TamTam application\n    sends `message_construction_request` on behalf of user. Bot [responds](#operation/construct)\n    to it with `messages` ready to go or `keyboard` in case it requires further action from user.\n\n    Bot also can set up UI parts such as `hint` or `placeholder`, allow or not user's input:\n    ![Constructor UI parts](https://dev.tamtam.chat/static/hint-079a332a51a2e9e6d415ec716389661b.png)\n\n    As soon as user finishes composing a message, they can post it. Bot will receive `message_constructed_update`\n    with posted message.\n\n    Constructors are supported for iOS version 2.7.0 and Android 2.9.0 and higher.\n    \n    ## Text formatting\n    \n    Message text can be improved with basic formatting such as: **strong**, *emphasis*, ~strikethough~, \n    \u003cins\u003eunderline\u003c/ins\u003e, `code` or link. You can use either markdown-like or HTML formatting.\n    \n    To enable text formatting set the `format` property of [NewMessageBody](#tag/new_message_model).\n\n    ### TamTam flavored Markdown\n    To enable [Markdown](https://spec.commonmark.org/0.29/) parsing, set the `format` property of [NewMessageBody](#tag/new_message_model) to `markdown`.\n    \n    We currently support only the following syntax:\n\n    `*empasized*` or `_empasized_` for *italic* text\n    \n    `**strong**` or `__strong__` for __bold__ text\n    \n    `~~strikethough~~`  for ~strikethough~ text\n    \n    `++underline++`  for \u003cins\u003eunderlined\u003c/ins\u003e text\n\n    ``` `code` ``` for inline `monospaced` text (line endings inside this block are treated like spaces)\n\n    ` ```code``` ` for `monospaced` text block\n\n    `^^important^^` for highlighted text (colored in red, by default)\n\n    `[Inline URL](https://dev.tamtam.chat/)` for inline URLs\n\n    `[User mention](tamtam://user/%user_id%)` for user mentions without username\n    \n    `# Header` for header\n    \n    ### HTML support\n    \n    To enable HTML parsing, set the `format` property of [NewMessageBody](#tag/new_message_model) to `html`.\n     \n    Only the following HTML tags are supported. All others will be stripped:\n    \n    Emphasized: `\u003ci\u003e` or `\u003cem\u003e`\n    \n    Strong: `\u003cb\u003e` or `\u003cstrong\u003e`\n    \n    Strikethrough: `\u003cdel\u003e` or `\u003cs\u003e`\n    \n    Underlined: `\u003cins\u003e` or `\u003cu\u003e`\n    \n    Link: `\u003ca href=\"https://dev.tamtam.chat\"\u003eDocs\u003c/a\u003e`\n\n    Monospaced text: `\u003cpre\u003e` or `\u003ccode\u003e`\n\n    Highlighted text: `\u003cmark\u003e`\n    \n    Header: `\u003ch1\u003e`\n\n    Text formatting is supported for iOS since version 3.1 and Android since 2.20.0.\n\n    # Versioning\n    API models and interface may change over time. To make sure your bot will get the right info, we strongly recommend adding API version number to each request. You can add it as `v` parameter to each HTTP-request. For instance, `v=0.1.2`.\n    To specify the data model version you are getting through WebHook subscription, use the `version` property in the request body of the [subscribe](https://dev.tamtam.chat/#operation/subscribe) request.\n\n    # Libraries\n    We have developed the official [Java client](https://github.com/tamtam-chat/tamtam-bot-api) and [SDK](https://github.com/tamtam-chat/tamtam-bot-sdk).\n\n    Also check out unofficial libraries, created by our enthusiasts:\n    - [Kotlin DSL client](https://github.com/Namazed/TamTamBotApiClientDsl)\n    - [GO client](https://github.com/neonxp/tamtam)\n    - [Node.js module](https://github.com/vershininivan/node-tamtam-botapi)\n\n    #### Python:\n    - [Python client](https://github.com/asvbkr/openapi_client)\n    - [tamtam.py](https://github.com/uwinx/tamtam.py)\n    - [registriren/botapitamtam](https://github.com/registriren/botapitamtam)\n\n    # Changelog\n    ##### Version 0.3.0\n    - Added methods to [pin](#operation/pinMessage)/[unpin](#operation/unpinMessage) messages in chats/channels\n    - Added `is_bot` flag to [`User`](#tag/user_model) model\n\n    Check out the complete [diff](https://github.com/tamtam-chat/tamtam-bot-api-schema/compare/v0.2.1..v0.3.0) for this release.\n\n    ##### Version 0.2.1\n    - [Added](#operation/getChatByLink) method to get chat by its `@link`\n    - [Added](https://github.com/tamtam-chat/tamtam-bot-api-schema/compare/v0.2.0..HEAD#diff-7e9de78f42fb0d2ae80878b90c87300aR1240) `description` for users in some cases\n    - [Added](https://github.com/tamtam-chat/tamtam-bot-api-schema/compare/v0.2.0..HEAD#diff-7e9de78f42fb0d2ae80878b90c87300aR2555) `user_locale` to `message_created` update in dialogs\n\n    Check out the complete [diff](https://github.com/tamtam-chat/tamtam-bot-api-schema/compare/v0.2.0..v0.2.1) for this release.\n\n    ##### Version 0.2.0\n    - [Added](https://github.com/tamtam-chat/tamtam-bot-api-schema/commit/09c95259d6c8c424f82b50eab93872e7db2ca208) new type of button to start new chat\n    - [Added](https://github.com/tamtam-chat/tamtam-bot-api-schema/commit/ea4581d83d7132663d6cc5c2c61c058a2bd46aac) Constructors API that allows bots to create message on behalf of a user\n    - [Added](https://github.com/tamtam-chat/tamtam-bot-api-schema/commit/c5ff03175407819aceebd9c25de49eed566a0ce1) support for deep-links\n    - [Added](https://github.com/tamtam-chat/tamtam-bot-api-schema/commit/ff4cc4f93662d6c25db11fac72d9fcbf1f66cad8) ability to block users in chats\n    - [Added](https://github.com/tamtam-chat/tamtam-bot-api-schema/commit/b965bfb0d02933e819435312e6ab184a3dfc0250) `chat_id` and `user_id` to `message_removed` update\n    - Added meta information for video attachments\n    - Other minor improvements and fixes. Check out complete [diff](https://github.com/tamtam-chat/tamtam-bot-api-schema/compare/v0.1.11...v0.1.10) for this version\n\n    ##### Version 0.1.10\n    - [Added](https://github.com/tamtam-chat/tamtam-bot-api-schema/commit/a9ef3a1b8f4e1a75b55a9b80877eddc2c6f07ec4) `disable_link_preview` parameter to POST:/messages method to disable links parsing in text\n    - [Added](https://github.com/tamtam-chat/tamtam-bot-api-schema/commit/eb99e8ab97b55fa196d9957fca34d2316a4ca8aa) `sending_file` action\n    - [Removed](https://github.com/tamtam-chat/tamtam-bot-api-schema/commit/7a5ab5f0ea1336b3460d1827a6a7b3b141e19776) several deprecated properties\n    - `photo` upload type [renamed](https://github.com/tamtam-chat/tamtam-bot-api-schema/commit/74505883e6acb306686a6d141414aeaf5131ef49) to `image`. *C* is for consistency\n\n    To see changelog for older versions visit our [GitHub](https://github.com/tamtam-chat/tamtam-bot-api-schema/releases).\nservers:\n  - url: 'https://botapi.tamtam.chat'\nsecurity:\n  - access_token: []\ntags:\n  - name: user_model\n    x-displayName: User\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/User\"/\u003e\n  - name: chat_model\n    x-displayName: Chat\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/Chat\"/\u003e\n  - name: message_model\n    x-displayName: Message\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/Message\"/\u003e\n  - name: new_message_model\n    x-displayName: New message\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/NewMessageBody\"/\u003e\n  - name: update_model\n    x-displayName: Update\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/Update\"/\u003e\nx-tagGroups:\n  - name: Methods\n    tags:\n      - bots\n      - chats\n      - messages\n      - subscriptions\n      - upload\n  - name: Objects\n    tags:\n      - user_model\n      - chat_model\n      - message_model\n      - new_message_model\n      - update_model\npaths:\n  /me:\n    get:\n      tags:\n        - bots\n      summary: Get current bot info\n      operationId: getMyInfo\n      description: 'Returns info about current bot. Current bot can be identified by access token. Method returns bot identifier, name and avatar (if any)'\n      responses:\n        '200':\n          description: Bot info\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BotInfo'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalError'\n    patch:\n      tags:\n        - bots\n      summary: Edit current bot info\n      operationId: editMyInfo\n      description: Edits current bot info. Fill only the fields you want to update. All remaining fields will stay untouched\n      responses:\n        '200':\n          description: Modified bot info\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BotInfo'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalError'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BotPatch'\n  /chats:\n    get:\n      tags:\n        - chats\n      operationId: getChats\n      description: 'Returns information about chats that bot participated in: a result list and marker points to the next page'\n      summary: Get all chats\n      parameters:\n        - description: Number of chats requested\n          name: count\n          in: query\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 100\n            default: 50\n        - description: Points to next data page. `null` for the first page\n          name: marker\n          in: query\n          schema:\n            $ref: '#/components/schemas/bigint'\n      responses:\n        '200':\n          description: Returns paginated response of chats\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChatList'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  '/chats/{chatLink}':\n    get:\n      tags:\n        - chats\n      x-opGroup: chat\n      operationId: getChatByLink\n      description: Returns chat/channel information by its public link or dialog with user by username\n      summary: Get chat by link\n      parameters:\n        - name: chatLink\n          description: Public chat link or username\n          required: true\n          in: path\n          schema:\n            type: string\n            pattern: '@?[a-zA-Z]+[a-zA-Z0-9-_]*'\n      responses:\n        '200':\n          description: Chat information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Chat'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  '/chats/{chatId}':\n    get:\n      tags:\n        - chats\n      x-opGroup: chat\n      operationId: getChat\n      description: Returns info about chat.\n      summary: Get chat\n      parameters:\n        - name: chatId\n          description: Requested chat identifier\n          required: true\n          in: path\n          schema:\n            type: integer\n            format: int64\n            pattern: \\-?\\d+\n      responses:\n        '200':\n          description: Chat information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Chat'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalError'\n    patch:\n      tags:\n        - chats\n      x-opGroup: chat\n      operationId: editChat\n      description: 'Edits chat info: title, icon, etc…'\n      summary: Edit chat info\n      parameters:\n        - name: chatId\n          description: Chat identifier\n          required: true\n          in: path\n          schema:\n            type: integer\n            format: int64\n            pattern: \\-?\\d+\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ChatPatch'\n      responses:\n        '200':\n          description: 'If success, returns updated chat object'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Chat'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  '/chats/{chatId}/actions':\n    post:\n      tags:\n        - chats\n      operationId: sendAction\n      description: Send bot action to chat.\n      summary: Send action\n      parameters:\n        - name: chatId\n          description: Chat identifier\n          required: true\n          in: path\n          schema:\n            type: integer\n            format: int64\n            pattern: \\-?\\d+\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ActionRequestBody'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  '/chats/{chatId}/pin':\n    get:\n      tags:\n        - chats\n      operationId: getPinnedMessage\n      description: Get pinned message in chat or channel.\n      summary: Get pinned message\n      parameters:\n        - name: chatId\n          description: Chat identifier to get its pinned message\n          required: true\n          in: path\n          schema:\n            type: integer\n            format: int64\n            pattern: \\-?\\d+\n      responses:\n        '200':\n          description: Pinned message\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetPinnedMessageResult'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n    put:\n      tags:\n        - chats\n      operationId: pinMessage\n      description: Pins message in chat or channel.\n      summary: Pin message\n      parameters:\n        - name: chatId\n          description: Chat identifier where message should be pinned\n          required: true\n          in: path\n          schema:\n            type: integer\n            format: int64\n            pattern: \\-?\\d+\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PinMessageBody'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n    delete:\n      tags:\n        - chats\n      operationId: unpinMessage\n      description: Unpins message in chat or channel.\n      summary: Unpin message\n      parameters:\n        - name: chatId\n          description: Chat identifier to remove pinned message\n          required: true\n          in: path\n          schema:\n            type: integer\n            format: int64\n            pattern: \\-?\\d+\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  '/chats/{chatId}/members/me':\n    get:\n      tags:\n        - chats\n      x-opGroup: myMembership\n      operationId: getMembership\n      summary: Get chat membership\n      description: Returns chat membership info for current bot\n      parameters:\n        - name: chatId\n          description: Chat identifier\n          required: true\n          in: path\n          schema:\n            type: integer\n            format: int64\n            pattern: \\-?\\d+\n      responses:\n        '200':\n          description: Current bot membership info\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChatMember'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n    delete:\n      tags:\n        - chats\n      operationId: leaveChat\n      x-opGroup: myMembership\n      summary: Leave chat\n      description: Removes bot from chat members.\n      parameters:\n        - name: chatId\n          description: Chat identifier\n          required: true\n          in: path\n          schema:\n            type: integer\n            format: int64\n            pattern: \\-?\\d+\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  '/chats/{chatId}/members/admins':\n    get:\n      tags:\n        - chats\n      operationId: getAdmins\n      summary: Get chat admins\n      description: Returns all chat administrators. Bot must be **administrator** in requested chat.\n      parameters:\n        - name: chatId\n          description: Chat identifier\n          required: true\n          in: path\n          schema:\n            type: integer\n            format: int64\n            pattern: \\-?\\d+\n      responses:\n        '200':\n          description: Administrators list\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChatMembersList'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  '/chats/{chatId}/members':\n    get:\n      tags:\n        - chats\n      operationId: getMembers\n      summary: Get members\n      description: Returns users participated in chat.\n      parameters:\n        - name: chatId\n          description: Chat identifier\n          required: true\n          in: path\n          schema:\n            type: integer\n            format: int64\n            pattern: \\-?\\d+\n        - name: user_ids\n          description: |-\n            *Since* version [0.1.4](#section/About/Changelog).\n\n            Comma-separated list of users identifiers to get their membership. When this parameter is passed, both `count` and `marker` are ignored\n          required: false\n          in: query\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: integer\n              format: int64\n            nullable: true\n          style: simple\n        - name: marker\n          description: Marker\n          in: query\n          schema:\n            type: integer\n            format: int64\n        - name: count\n          description: Count\n          in: query\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n            default: 20\n      responses:\n        '200':\n          description: Returns members list and pointer to the next data page\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChatMembersList'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n    post:\n      tags:\n        - chats\n      operationId: addMembers\n      description: Adds members to chat. Additional permissions may require.\n      summary: Add members\n      parameters:\n        - name: chatId\n          description: Chat identifier\n          required: true\n          in: path\n          schema:\n            type: integer\n            format: int64\n            pattern: \\-?\\d+\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserIdsList'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n    delete:\n      tags:\n        - chats\n      operationId: removeMember\n      description: Removes member from chat. Additional permissions may require.\n      summary: Remove member\n      parameters:\n        - name: chatId\n          description: Chat identifier\n          required: true\n          in: path\n          schema:\n            type: integer\n            format: int64\n            pattern: \\-?\\d+\n        - name: user_id\n          description: User id to remove from chat\n          required: true\n          in: query\n          schema:\n            type: integer\n            format: int64\n        - name: block\n          description: |-\n            Set to `true` if user should be blocked in chat.\n            Applicable only for chats that have public or private link. Ignored otherwise\n          required: false\n          in: query\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /subscriptions:\n    get:\n      tags:\n        - subscriptions\n      operationId: getSubscriptions\n      description: 'In case your bot gets data via WebHook, the method returns list of all subscriptions'\n      summary: Get subscriptions\n      responses:\n        '200':\n          description: As expected\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetSubscriptionsResult'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalError'\n    post:\n      tags:\n        - subscriptions\n      operationId: subscribe\n      description: |-\n        Subscribes bot to receive updates via WebHook. After calling this method, the bot will receive notifications about new events in chat rooms at the specified URL.\n\n        Your server **must** be listening on one of the following ports: **80, 8080, 443, 8443, 16384-32383**\n      summary: Subscribe\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SubscriptionRequestBody'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalError'\n    delete:\n      tags:\n        - subscriptions\n      operationId: unsubscribe\n      description: 'Unsubscribes bot from receiving updates via WebHook. After calling the method, the bot stops receiving notifications about new events. Notification via the long-poll API becomes available for the bot'\n      summary: Unsubscribe\n      parameters:\n        - name: url\n          in: query\n          description: URL to remove from WebHook subscriptions\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /uploads:\n    post:\n      tags:\n        - upload\n      operationId: getUploadUrl\n      description: |-\n        Returns the URL for the subsequent file upload.\n\n        For example, you can upload it via curl:\n\n        ```curl -i -X POST\n          -H \"Content-Type: multipart/form-data\"\n          -F \"data=@movie.mp4\" \"%UPLOAD_URL%\"```\n\n        Two types of an upload are supported:\n        - single request upload (multipart request)\n        - and resumable upload.\n\n        ##### Multipart upload\n        This type of upload is a simpler one but it is less\n        reliable and agile. If a `Content-Type`: multipart/form-data header is passed in a request our service indicates\n        upload type as a simple single request upload.\n\n        This type of an upload has some restrictions:\n\n        - Max. file size - 2 Gb\n        - Only one file per request can be uploaded\n        - No possibility to restart stopped / failed upload\n\n        ##### Resumable upload\n        If `Content-Type` header value is not equal to `multipart/form-data` our service indicated upload type\n        as a resumable upload.\n        With a `Content-Range` header current file chunk range and complete file size\n        can be passed. If a network error has happened or upload was stopped you can continue to upload a file from\n        the last successfully uploaded file chunk. You can request the last known byte of uploaded file from server\n        and continue to upload a file.\n\n        ##### Get upload status\n        To GET an upload status you simply need to perform HTTP-GET request to a file upload URL.\n        Our service will respond with current upload status,\n        complete file size and last known uploaded byte. This data can be used to complete stopped upload\n        if something went wrong. If `REQUESTED_RANGE_NOT_SATISFIABLE` or `INTERNAL_SERVER_ERROR` status was returned\n        it is a good point to try to restart an upload\n      summary: Get upload URL\n      parameters:\n        - description: 'Uploaded file type: photo, audio, video, file'\n          name: type\n          required: true\n          in: query\n          schema:\n            $ref: '#/components/schemas/UploadType'\n      responses:\n        '200':\n          description: Returns URL to upload attachment\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UploadEndpoint'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /messages:\n    get:\n      tags:\n        - messages\n      operationId: getMessages\n      description: 'Returns messages in chat: result page and marker referencing to the next page. Messages traversed in reverse direction so the latest message in chat will be first in result array. Therefore if you use `from` and `to` parameters, `to` must be **less than** `from`'\n      summary: Get messages\n      parameters:\n        - description: Chat identifier to get messages in chat\n          name: chat_id\n          in: query\n          schema:\n            $ref: '#/components/schemas/bigint'\n        - description: Comma-separated list of message ids to get\n          name: message_ids\n          in: query\n          style: simple\n          schema:\n            uniqueItems: true\n            items:\n              type: string\n            nullable: true\n        - name: from\n          description: Start time for requested messages\n          in: query\n          schema:\n            $ref: '#/components/schemas/bigint'\n        - name: to\n          description: End time for requested messages\n          in: query\n          schema:\n            $ref: '#/components/schemas/bigint'\n        - name: count\n          description: Maximum amount of messages in response\n          in: query\n          schema:\n            type: integer\n            format: int32\n            default: 50\n            minimum: 1\n            maximum: 100\n      responses:\n        '200':\n          description: Returns list of messages\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MessageList'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          description: This exception happens when user suspended bot or it doesn't have access to chat\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          $ref: '#/components/responses/InternalError'\n    post:\n      tags:\n        - messages\n      operationId: sendMessage\n      description: |-\n        Sends a message to a chat.\n        As a result for this method new message identifier returns.\n        ### Attaching media\n        Attaching media to messages is a three-step process.\n\n        At first step, you should [obtain a URL to upload](#operation/getUploadUrl) your media files.\n\n        At the second, you should upload binary of appropriate format to URL you obtained at the previous step. See [upload](https://dev.tamtam.chat/#operation/getUploadUrl) section for details.\n\n        Finally, if the upload process was successful, you will receive JSON-object in a response body.  Use this object to create attachment. Construct an object with two properties:\n        - `type` with the value set to appropriate media type\n        - and `payload` filled with the JSON you've got.\n\n        For example, you can attach a video to message this way:\n\n        1. Get URL to upload. Execute following:\n        ```shell\n        curl -X POST 'https://botapi.tamtam.chat/uploads?access_token=%access_token%\u0026type=video'\n        ```\n        As the result it will return URL for the next step.\n        ```json\n        {\n            \"url\": \"https://vu.mycdn.me/upload.do…\"\n        }\n        ```\n\n        2. Use this url to upload your binary:\n        ```shell\n        curl -i -X POST\n          -H \"Content-Type: multipart/form-data\"\n          -F \"data=@movie.mp4\" \"https://vu.mycdn.me/upload.do…\"\n        ```\n        As the result it will return JSON you can attach to message:\n        ```json\n          {\n            \"token\": \"_3Rarhcf1PtlMXy8jpgie8Ai_KARnVFYNQTtmIRWNh4\"\n          }\n        ```\n        3. Send message with attach:\n        ```json\n        {\n            \"text\": \"Message with video\",\n            \"attachments\": [\n                {\n                    \"type\": \"video\",\n                    \"payload\": {\n                        \"token\": \"_3Rarhcf1PtlMXy8jpgie8Ai_KARnVFYNQTtmIRWNh4\"\n                    }\n                }\n            ]\n        }\n        ```\n\n        **Important notice**:\n\n        It may take time for the server to process your file (audio/video or any binary).\n        While a file is not processed you can't attach it. It means the last step will fail with `400` error.\n        Try to send a message again until you'll get a successful result.\n      summary: Send message\n      parameters:\n        - name: user_id\n          description: Fill this parameter if you want to send message to user\n          in: query\n          required: false\n          schema:\n            type: integer\n            format: int64\n        - name: chat_id\n          description: Fill this if you send message to chat\n          schema:\n            type: integer\n            format: int64\n          in: query\n          required: false\n        - name: disable_link_preview\n          description: \"If `false`, server will not generate media preview for links in text\"\n          in: query\n          required: false\n          schema:\n            type: boolean\n            default: false\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewMessageBody'\n      responses:\n        '200':\n          description: Returns info about created message\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SendMessageResult'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalError'\n    put:\n      tags:\n        - messages\n      operationId: editMessage\n      description: 'Updated message should be sent as `NewMessageBody` in a request body. In case `attachments` field is `null`, the current message attachments won’t be changed. In case of sending an empty list in this field, all attachments will be deleted.'\n      summary: Edit message\n      parameters:\n        - name: message_id\n          description: Editing message identifier\n          required: true\n          in: query\n          schema:\n            type: string\n            minLength: 1\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewMessageBody'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalError'\n    delete:\n      tags:\n        - messages\n      operationId: deleteMessage\n      summary: Delete message\n      description: Deletes message in a dialog or in a chat if bot has permission to delete messages.\n      parameters:\n        - name: message_id\n          description: Deleting message identifier\n          required: true\n          in: query\n          schema:\n            type: string\n            minLength: 1\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /messages/{messageId}:\n    get:\n      tags:\n        - messages\n      operationId: getMessageById\n      description: Returns single message by its identifier.\n      summary: Get message\n      parameters:\n        - description: Message identifier (`mid`) to get single message in chat\n          in: path\n          name: messageId\n          required: true\n          schema:\n            type: string\n            pattern: '[a-zA-Z0-9_\\-]+'\n      responses:\n        '200':\n          description: Returns single message\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Message'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          description: In case when message is not found or bot has no access to it\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /answers:\n    post:\n      tags:\n        - messages\n      operationId: answerOnCallback\n      description: This method should be called to send an answer after a user has clicked the button. The answer may be an updated message or/and a one-time user notification.\n      summary: Answer on callback\n      parameters:\n        - name: callback_id\n          description: Identifies a button clicked by user. Bot receives this identifier after user pressed button as part of `MessageCallbackUpdate`\n          required: true\n          in: query\n          # not empty string\n          schema:\n            type: string\n            minLength: 1\n            pattern: ^(?!\\s*$).+\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CallbackAnswer'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '405':\n          $ref: '#/components/responses/NotAllowed'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /answers/constructor:\n    post:\n      tags:\n        - messages\n      operationId: construct\n      description: |-\n        Sends answer on construction request. Answer can contain any prepared message and/or keyboard to help user interact with bot.\n      summary: Construct message\n      parameters:\n        - name: session_id\n          description: Constructor session identifier\n          required: true\n          in: query\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConstructorAnswer'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '405':\n          $ref: '#/components/responses/NotAllowed'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /updates:\n    get:\n      operationId: getUpdates\n      tags:\n        - subscriptions\n      description: |-\n        You can use this method for getting updates in case your bot is not subscribed to WebHook. The method is based on long polling.\n\n        Every update has its own sequence number. `marker` property in response points to the next upcoming update.\n\n        All previous updates are considered as *committed* after passing `marker` parameter.\n        If `marker` parameter is **not passed**, your bot will get all updates happened after the last commitment.\n      summary: Get updates\n      parameters:\n        - name: limit\n          description: Maximum number of updates to be retrieved\n          in: query\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 1000\n            default: 100\n        - name: timeout\n          description: Timeout in seconds for long polling\n          in: query\n          schema:\n            type: integer\n            minimum: 0\n            maximum: 90\n            default: 30\n        - name: marker\n          description: Pass `null` to get updates you didn't get yet\n          in: query\n          schema:\n            type: integer\n            format: int64\n            nullable: true\n        - name: types\n          description: Comma separated list of update types your bot want to receive\n          in: query\n          example: 'types=message_created,message_callback'\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n            nullable: true\n          style: simple\n      responses:\n        '200':\n          description: List of updates\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateList'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '405':\n          $ref: '#/components/responses/NotAllowed'\n        '500':\n          $ref: '#/components/responses/InternalError'\ncomponents:\n  securitySchemes:\n    access_token:\n      type: apiKey\n      name: access_token\n      description: |-\n        A token is given to you by [PrimeBot](https://tt.me/primebot) after you have created a bot.\n        In all subsequent requests to the Bot API, you **must** pass the received token as an `access_token` parameter to the HTTP request.\n\n\n        If [Terms and Conditions of TamTam usage](https://team.tamtam.chat/en/terms/) have been violated, the TamTam administration may withdraw tokens by aborting user sessions.\n        If your token has been compromised, you can request a new one by sending a `/revoke` command to **[PrimeBot](https://tt.me/primebot)**.\n      in: query\n  responses:\n    SuccessResponse:\n      description: Success or not result\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/SimpleQueryResult'\n    InternalError:\n      description: Internal Server Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    Unauthorized:\n      description: Authorization Error. No `access_token` provided or token is invalid\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    Forbidden:\n      description: Access error. You don't have permissions to access this resource\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    NotFound:\n      description: Requested resource is not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    NotAllowed:\n      description: Method is not allowed\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n  schemas:\n    bigint:\n      type: integer\n      format: int64\n    User:\n      properties:\n        user_id:\n          description: Users identifier\n          type: integer\n          format: int64\n        name:\n          description: Users visible name\n          type: string\n        username:\n          description: Unique public user name. Can be `null` if user is not accessible or it is not set\n          type: string\n          nullable: true\n        is_bot:\n          description: '`true` if user is bot'\n          type: boolean\n        last_activity_time:\n          description: Time of last user activity in TamTam (Unix timestamp in milliseconds). Can be outdated if user disabled its \"online\" status in settings\n          type: integer\n          format: int64\n      required:\n        - user_id\n        - name\n        - username\n        - is_bot\n        - last_activity_time\n    UserWithPhoto:\n      allOf:\n        - $ref: '#/components/schemas/User'\n        - properties:\n            description:\n              description: User description. Can be `null` if user did not fill it out\n              maxLength: 16000\n              type: string\n              nullable: true\n              readOnly: false\n            avatar_url:\n              description: URL of avatar\n              type: string\n              readOnly: false\n            full_avatar_url:\n              description: URL of avatar of a bigger size\n              type: string\n              readOnly: false\n    BotInfo:\n      allOf:\n        - $ref: '#/components/schemas/UserWithPhoto'\n        - properties:\n            commands:\n              description: Commands supported by bot\n              type: array\n              items:\n                $ref: '#/components/schemas/BotCommand'\n              maxItems: 32\n              readOnly: false\n              nullable: true\n    BotPatch:\n      properties:\n        name:\n          description: Visible name of bot\n          type: string\n          maxLength: 64\n          minLength: 1\n          readOnly: false\n          nullable: true\n        username:\n          description: 'Bot unique identifier. It can be any string 4-64 characters long containing any digit, letter or special symbols: \"-\" or \"_\". It **must** starts with a letter'\n          type: string\n          pattern: '[a-zA-Z]+[a-zA-Z0-9-_]*'\n          readOnly: false\n          minLength: 4\n          maxLength: 64\n          nullable: true\n        description:\n          description: Bot description up to 16k characters long\n          type: string\n          minLength: 1\n          maxLength: 16000\n          readOnly: false\n          nullable: true\n        commands:\n          description: Commands supported by bot. Pass empty list if you want to remove commands\n          type: array\n          items:\n            $ref: '#/components/schemas/BotCommand'\n          maxItems: 32\n          readOnly: false\n          nullable: true\n        photo:\n          description: Request to set bot photo\n          allOf:\n            - $ref: '#/components/schemas/PhotoAttachmentRequestPayload'\n          readOnly: false\n          nullable: true\n    BotCommand:\n      properties:\n        name:\n          description: Command name\n          type: string\n          maxLength: 64\n          minLength: 1\n        description:\n          description: Optional command description\n          type: string\n          minLength: 1\n          maxLength: 128\n          readOnly: false\n          nullable: true\n      required:\n        - name\n    Chat:\n      properties:\n        chat_id:\n          description: Chats identifier\n          type: integer\n          format: int64\n        type:\n          description: 'Type of chat. One of: dialog, chat, channel'\n          allOf:\n            - $ref: '#/components/schemas/ChatType'\n        status:\n          description: |-\n            Chat status. One of:\n             - active: bot is active member of chat\n             - removed: bot was kicked\n             - left: bot intentionally left chat\n             - closed: chat was closed\n             - suspended: bot was stopped by user. *Only for dialogs*\n          allOf:\n            - $ref: '#/components/schemas/ChatStatus'\n        title:\n          description: Visible title of chat. Can be null for dialogs\n          type: string\n          nullable: true\n        icon:\n          description: Icon of chat\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/Image'\n        last_event_time:\n          description: Time of last event occurred in chat\n          type: integer\n          format: int64\n        participants_count:\n          description: Number of people in chat. Always 2 for `dialog` chat type\n          type: integer\n          format: int32\n        owner_id:\n          description: Identifier of chat owner. Visible only for chat admins\n          nullable: true\n          type: integer\n          format: int64\n          readOnly: false\n        participants:\n          description: Participants in chat with time of last activity. Can be *null* when you request list of chats. Visible for chat admins only\n          nullable: true\n          readOnly: false\n          type: object\n          additionalProperties:\n            type: integer\n            format: int64\n        is_public:\n          description: Is current chat publicly available. Always `false` for dialogs\n          type: boolean\n        link:\n          description: Link on chat\n          type: string\n          readOnly: false\n          nullable: true\n        description:\n          description: Chat description\n          type: string\n          nullable: true\n        dialog_with_user:\n          description: Another user in conversation. For `dialog` type chats only\n          allOf:\n            - $ref: '#/components/schemas/UserWithPhoto'\n          nullable: true\n          readOnly: false\n        messages_count:\n          description: Messages count in chat. Only for group chats and channels. **Not available** for dialogs\n          nullable: true\n          readOnly: false\n          type: integer\n        chat_message_id:\n          description: Identifier of message that contains `chat` button initialized chat\n          nullable: true\n          readOnly: false\n          type: string\n        pinned_message:\n          description: Pinned message in chat or channel. Returned only when single chat is requested\n          nullable: true\n          readOnly: false\n          allOf:\n            - $ref: '#/components/schemas/Message'\n      required:\n        - chat_id\n        - type\n        - status\n        - title\n        - last_event_time\n        - participants_count\n        - icon\n        - is_public\n        - description\n    ChatType:\n      description: 'Type of chat. Dialog (one-on-one), chat or channel'\n      enum:\n        - dialog\n        - chat\n        - channel\n    ChatStatus:\n      description: Chat status for current bot\n      enum:\n        - active\n        - removed\n        - left\n        - closed\n        - suspended\n    ChatList:\n      properties:\n        chats:\n          description: List of requested chats\n          type: array\n          items:\n            $ref: '#/components/schemas/Chat'\n        marker:\n          description: Reference to the next page of requested chats\n          nullable: true\n          type: integer\n          format: int64\n      required:\n        - chats\n        - marker\n    ChatPatch:\n      properties:\n        icon:\n          readOnly: false\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/PhotoAttachmentRequestPayload'\n        title:\n          type: string\n          minLength: 1\n          maxLength: 200\n          readOnly: false\n          nullable: true\n        pin:\n          description: Identifier of message to be pinned in chat. In case you want to remove pin, use [unpin](#operation/unpinMessage) method\n          type: string\n          readOnly: false\n          nullable: true\n        notify:\n          description: By default, participants will be notified about change with system message in chat/channel\n          type: boolean\n          default: true\n          readOnly: false\n          nullable: true\n    ChatMember:\n      allOf:\n        - $ref: '#/components/schemas/UserWithPhoto'\n        - properties:\n            last_access_time:\n              description: User last activity time in chat. Can be outdated for super chats and channels (equals to `join_time`) \n              type: integer\n              format: int64\n            is_owner:\n              type: boolean\n            is_admin:\n              type: boolean\n            join_time:\n              type: integer\n              format: int64\n            permissions:\n              description: Permissions in chat if member is admin. `null` otherwise\n              type: array\n              uniqueItems: true\n              nullable: true\n              items:\n                allOf:\n                  - $ref: '#/components/schemas/ChatAdminPermission'\n          required:\n            - last_access_time\n            - is_owner\n            - is_admin\n            - permissions\n            - join_time\n    ChatAdminPermission:\n      description: Chat admin permissions\n      type: string\n      enum:\n        - read_all_messages\n        - add_remove_members\n        - add_admins\n        - change_chat_info\n        - pin_message\n        - write\n    ChatMembersList:\n      properties:\n        members:\n          description: Participants in chat with time of last activity. Visible only for chat admins\n          type: array\n          items:\n            $ref: '#/components/schemas/ChatMember'\n        marker:\n          description: Pointer to the next data page\n          type: integer\n          format: int64\n          nullable: true\n          readOnly: false\n      required:\n        - members\n    Image:\n      description: Generic schema describing image object\n      properties:\n        url:\n          description: URL of image\n          type: string\n      required:\n        - url\n    Subscription:\n      description: Schema to describe WebHook subscription\n      properties:\n        url:\n          description: Webhook URL\n          type: string\n        time:\n          description: Unix-time when subscription was created\n          type: integer\n          format: int64\n        update_types:\n          description: Update types bot subscribed for\n          example: '[\"message_created\", \"bot_started\"]'\n          type: array\n          nullable: true\n          uniqueItems: true\n          items:\n            type: string\n            minLength: 1\n        version:\n          type: string\n          nullable: true\n          pattern: '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n      required:\n        - url\n        - time\n        - update_types\n        - version\n    Recipient:\n      description: New message recipient. Could be user or chat\n      properties:\n        chat_id:\n          description: Chat identifier\n          type: integer\n          format: int64\n          nullable: true\n        chat_type:\n          description: Chat type\n          allOf:\n            - $ref: '#/components/schemas/ChatType'\n        user_id:\n          description: 'User identifier, if message was sent to user'\n          type: integer\n          format: int64\n          nullable: true\n      required:\n        - chat_id\n        - chat_type\n        - user_id\n    Message:\n      description: Message in chat\n      properties:\n        sender:\n          description: User who sent this message. Can be `null` if message has been posted on behalf of a channel\n          allOf:\n            - $ref: '#/components/schemas/User'\n          readOnly: false\n        recipient:\n          description: Message recipient. Could be user or chat\n          allOf:\n            - $ref: '#/components/schemas/Recipient'\n        timestamp:\n          description: Unix-time when message was created\n          type: integer\n          format: int64\n        link:\n          description: Forwarded or replied message\n          nullable: true\n          readOnly: false\n          allOf:\n            - $ref: '#/components/schemas/LinkedMessage'\n        body:\n          description: Body of created message. Text + attachments. Could be null if message contains only forwarded message\n          allOf:\n            - $ref: '#/components/schemas/MessageBody'\n        stat:\n          description: 'Message statistics. Available only for channels in [GET:/messages](#operation/getMessages) context'\n          allOf:\n            - $ref: '#/components/schemas/MessageStat'\n          nullable: true\n          readOnly: false\n        url:\n          description: Message public URL. Can be `null` for dialogs or non-public chats/channels\n          type: string\n          nullable: true\n          readOnly: false\n        constructor:\n          description: Bot-constructor created this message\n          readOnly: false\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/User'\n      required:\n        - recipient\n        - body\n        - timestamp\n    ConstructedMessage:\n      description: Message constructed i in chat\n      properties:\n        sender:\n          description: Author who sent this message. Can be `null` if message has been posted on behalf of a channel\n          readOnly: false\n          allOf:\n            - $ref: '#/components/schemas/User'\n        timestamp:\n          description: Unix-time when message has been created\n          type: integer\n          format: int64\n        link:\n          description: 'Any linked message: forward or reply'\n          nullable: true\n          readOnly: false\n          allOf:\n            - $ref: '#/components/schemas/LinkedMessage'\n        body:\n          description: Body of created message. Text + attachments\n          allOf:\n            - $ref: '#/components/schemas/MessageBody'\n      required:\n        - body\n        - timestamp\n    MessageStat:\n      description: Message statistics\n      properties:\n        views:\n          type: integer\n      required:\n        - views\n    MessageBody:\n      description: Schema representing body of message\n      type: object\n      properties:\n        mid:\n          description: Unique identifier of message\n          type: string\n        seq:\n          description: Sequence identifier of message in chat\n          type: integer\n          format: int64\n        text:\n          description: Message text\n          type: string\n          nullable: true\n        attachments:\n          description: Message attachments. Could be one of `Attachment` type. See description of this schema\n          type: array\n          nullable: true\n          items:\n            $ref: '#/components/schemas/Attachment'\n        markup:\n          description: Message text markup. See [Formatting](#section/About/Text-formatting) section for more info \n          type: array\n          nullable: true\n          readOnly: false\n          items:\n            $ref: '#/components/schemas/MarkupElement'\n      required:\n        - mid\n        - seq\n        - text\n        - attachments\n        - link\n    MessageList:\n      description: Paginated list of messages\n      properties:\n        messages:\n          description: List of messages\n          type: array\n          items:\n            $ref: '#/components/schemas/Message'\n      required:\n        - messages\n    TextFormat:\n      description: Message text format\n      type: string\n      enum:\n        - markdown\n        - html\n    NewMessageBody:\n      properties:\n        text:\n          description: Message text\n          type: string\n          maxLength: 4000\n          nullable: true\n        attachments:\n          description: Message attachments. See `AttachmentRequest` and it's inheritors for full information\n          type: array\n          nullable: true\n          items:\n            $ref: '#/components/schemas/AttachmentRequest'\n        link:\n          description: Link to Message\n          type: object\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/NewMessageLink'\n        notify:\n          description: 'If false, chat participants would not be notified'\n          type: boolean\n          default: true\n          readOnly: false\n        format:\n          description: 'If set, message text will be formatted according to given markup'\n          readOnly: false\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/TextFormat'\n      required:\n        - text\n        - attachments\n        - link\n    ConstructedMessageBody:\n      properties:\n        text:\n          description: Message text\n          type: string\n          maxLength: 4000\n          nullable: true\n          readOnly: false\n        attachments:\n          description: Message attachments. See `AttachmentRequest` and it's inheritors for full information\n          type: array\n          nullable: true\n          readOnly: false\n          items:\n            $ref: '#/components/schemas/AttachmentRequest'\n        markup:\n          description: \"Text markup\"\n          type: array\n          nullable: true\n          readOnly: false\n          items:\n            $ref: '#/components/schemas/MarkupElement'\n        format:\n          description: 'Message text format. If set, '\n          readOnly: false\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/TextFormat'\n    NewMessageLink:\n      properties:\n        type:\n          description: Type of message link\n          nullable: false\n          allOf:\n            - $ref: '#/components/schemas/MessageLinkType'\n        mid:\n          description: Message identifier of original message\n          type: string\n          nullable: false\n      required:\n        - type\n        - mid\n    LinkedMessage:\n      properties:\n        type:\n          description: Type of linked message\n          allOf:\n            - $ref: '#/components/schemas/MessageLinkType'\n        sender:\n          description: User sent this message. Can be `null` if message has been posted on behalf of a channel\n          allOf:\n            - $ref: '#/components/schemas/User'\n          readOnly: false\n        chat_id:\n          description: Chat where message has been originally posted. For forwarded messages only\n          type: integer\n          format: int64\n          readOnly: false\n        message:\n          allOf:\n            - $ref: '#/components/schemas/MessageBody'\n      required:\n        - type\n        - message\n    SendMessageResult:\n      properties:\n        message:\n          $ref: '#/components/schemas/Message'\n      required:\n        - message\n    Attachment:\n      description: Generic schema representing message attachment\n      discriminator:\n        propertyName: type\n        mapping:\n          image: '#/components/schemas/PhotoAttachment'\n          video: '#/components/schemas/VideoAttachment'\n          audio: '#/components/schemas/AudioAttachment'\n          file: '#/components/schemas/FileAttachment'\n          sticker: '#/components/schemas/StickerAttachment'\n          contact: '#/components/schemas/ContactAttachment'\n          inline_keyboard: '#/components/schemas/InlineKeyboardAttachment'\n          share: '#/components/schemas/ShareAttachment'\n          location: '#/components/schemas/LocationAttachment'\n      properties:\n        type:\n          type: string\n      required:\n        - type\n    PhotoAttachment:\n      description: Image attachment\n      allOf:\n        - $ref: '#/components/schemas/Attachment'\n        - properties:\n            payload:\n              type: object\n              allOf:\n                - $ref: '#/components/schemas/PhotoAttachmentPayload'\n          required:\n            - payload\n    PhotoAttachmentPayload:\n      properties:\n        photo_id:\n          description: Unique identifier of this image\n          type: integer\n          format: int64\n        token:\n          description: ''\n          type: string\n        url:\n          description: Image URL\n          type: string\n      required:\n        - photo_id\n        - url\n        - token\n    VideoAttachment:\n      allOf:\n        - $ref: '#/components/schemas/Attachment'\n        - properties:\n            payload:\n              type: object\n              allOf:\n                - $ref: '#/components/schemas/MediaAttachmentPayload'\n            thumbnail:\n              description: Video thumbnail\n              type: string\n              nullable: true\n              readOnly: false\n              allOf:\n                - $ref: '#/components/schemas/PhotoAttachmentPayload'\n            width:\n              description: Video width\n              type: integer\n              nullable: true\n              readOnly: false\n            height:\n              description: Video height\n              type: integer\n              nullable: true\n              readOnly: false\n            duration:\n              description: Video duration in seconds\n              type: integer\n              nullable: true\n              readOnly: false\n          required:\n            - payload\n    AudioAttachment:\n      allOf:\n        - $ref: '#/components/schemas/Attachment'\n        - properties:\n            payload:\n              type: object\n              allOf:\n                - $ref: '#/components/schemas/MediaAttachmentPayload'\n          required:\n            - payload\n    FileAttachment:\n      allOf:\n        - $ref: '#/components/schemas/Attachment'\n        - properties:\n            payload:\n              type: object\n              allOf:\n                - $ref: '#/components/schemas/FileAttachmentPayload'\n            filename:\n              description: Uploaded file name\n              type: string\n            size:\n              description: File size in bytes\n              type: integer\n              format: int64\n          required:\n            - payload\n            - filename\n            - size\n    AttachmentPayload:\n      properties:\n        url:\n          description: Media attachment URL\n          type: string\n      required:\n        - url\n    MediaAttachmentPayload:\n      allOf:\n        - $ref: '#/components/schemas/AttachmentPayload'\n        - properties:\n            token:\n              description: Use `token` in case when you are trying to reuse the same attachment in other message\n              type: string\n          required:\n            - token\n    FileAttachmentPayload:\n      allOf:\n        - $ref: '#/components/schemas/AttachmentPayload'\n        - properties:\n            token:\n              description: Use `token` in case when you are trying to reuse the same attachment in other message\n              type: string\n          required:\n            - token\n    ContactAttachment:\n      allOf:\n        - $ref: '#/components/schemas/Attachment'\n        - properties:\n            payload:\n              type: object\n              allOf:\n                - $ref: '#/components/schemas/ContactAttachmentPayload'\n          required:\n            - payload\n    ContactAttachmentPayload:\n      properties:\n        vcf_info:\n          description: User info in VCF format\n          nullable: true\n          readOnly: false\n          type: string\n        tam_info:\n          description: User info\n          nullable: true\n          readOnly: false\n          allOf:\n            - $ref: '#/components/schemas/User'\n    StickerAttachmentPayload:\n      allOf:\n        - $ref: '#/components/schemas/AttachmentPayload'\n        - properties:\n            code:\n              description: Sticker identifier\n              type: string\n          required:\n            - code\n    StickerAttachment:\n      allOf:\n        - $ref: '#/components/schemas/Attachment'\n        - properties:\n            payload:\n              type: object\n              allOf:\n                - $ref: '#/components/schemas/StickerAttachmentPayload'\n            width:\n              description: Sticker width\n              type: integer\n            height:\n              description: Sticker height\n              type: integer\n          required:\n            - payload\n            - width\n            - height\n    ShareAttachmentPayload:\n      description: Payload of ShareAttachmentRequest\n      properties:\n        url:\n          description: URL attached to message as media preview\n          minLength: 1\n          type: string\n          nullable: true\n          readOnly: false\n        token:\n          description: Attachment token\n          type: string\n          nullable: true\n          readOnly: false\n    ShareAttachment:\n      allOf:\n        - $ref: '#/components/schemas/Attachment'\n        - properties:\n            payload:\n              type: object\n              allOf:\n                - $ref: '#/components/schemas/ShareAttachmentPayload'\n            title:\n              description: Link preview title\n              type: string\n              readOnly: false\n              nullable: true\n            description:\n              description: Link preview description\n              type: string\n              readOnly: false\n              nullable: true\n            image_url:\n              description: Link preview image\n              type: string\n              nullable: true\n              readOnly: false\n          required:\n            - payload\n    LocationAttachment:\n      allOf:\n        - $ref: '#/components/schemas/Attachment'\n        - properties:\n            latitude:\n              type: number\n              format: double\n            longitude:\n              type: number\n              format: double\n          required:\n            - latitude\n            - longitude\n    InlineKeyboardAttachment:\n      description: Buttons in messages\n      allOf:\n        - $ref: '#/components/schemas/Attachment'\n        - properties:\n            payload:\n              type: object\n              allOf:\n                - $ref: '#/components/schemas/Keyboard'\n          required:\n            - payload\n    Keyboard:\n      description: Keyboard is two-dimension array of buttons\n      properties:\n        buttons:\n          type: array\n          items:\n            type: array\n            items:\n              $ref: '#/components/schemas/Button'\n      required:\n        - buttons\n    Button:\n      properties:\n        type:\n          type: string\n        text:\n          description: Visible text of button\n          type: string\n          minLength: 1\n          maxLength: 128\n      discriminator:\n        propertyName: type\n        mapping:\n          callback: '#/components/schemas/CallbackButton'\n          link: '#/components/schemas/LinkButton'\n          request_geo_location: '#/components/schemas/RequestGeoLocationButton'\n          request_contact: '#/components/schemas/RequestContactButton'\n          chat: '#/components/schemas/ChatButton'\n      required:\n        - type\n        - text\n    CallbackButton:\n      description: After pressing this type of button client sends to server payload it contains\n      allOf:\n        - $ref: '#/components/schemas/Button'\n        - properties:\n            payload:\n              description: Button payload\n              type: string\n              maxLength: 1024\n            intent:\n              description: Intent of button. Affects clients representation\n              readOnly: false\n              default: default\n              allOf:\n                - $ref: '#/components/schemas/Intent'\n          required:\n            - payload\n    LinkButton:\n      description: After pressing this type of button user follows the link it contains\n      allOf:\n        - $ref: '#/components/schemas/Button'\n        - properties:\n            url:\n              type: string\n              maxLength: 2048\n          required:\n            - url\n    RequestContactButton:\n      description: After pressing this type of button client sends new message with attachment of current user contact\n      allOf:\n        - $ref: '#/components/schemas/Button'\n    RequestGeoLocationButton:\n      description: After pressing this type of button client sends new message with attachment of current user geo location\n      allOf:\n        - $ref: '#/components/schemas/Button'\n        - properties:\n            quick:\n              description: 'If *true*, sends location without asking user''s confirmation'\n              readOnly: false\n              type: boolean\n              default: false\n    ChatButton:\n      description: |-\n        Button that creates new chat as soon as the first user clicked on it.\n        Bot will be added to chat participants as administrator.\n        Message author will be owner of the chat.\n      allOf:\n        - $ref: '#/components/schemas/Button'\n        - properties:\n            chat_title:\n              description: 'Title of chat to be created'\n              type: string\n              maxLength: 200\n            chat_description:\n              description: 'Chat description'\n              readOnly: false\n              nullable: true\n              type: string\n              maxLength: 400\n            start_payload:\n              description: 'Start payload will be sent to bot as soon as chat created'\n              readOnly: false\n              nullable: true\n              type: string\n              maxLength: 512\n            uuid:\n              description: |-\n                Unique button identifier across all chat buttons in keyboard.\n                If `uuid` changed, new chat will be created on the next click.\n                Server will generate it at the time when button initially posted.\n                Reuse it when you edit the message.'\n              readOnly: false\n              nullable: true\n              type: integer\n          required:\n            - chat_title\n    Intent:\n      description: Intent of button\n      type: string\n      enum:\n        - positive\n        - negative\n        - default\n    MessageLinkType:\n      description: Type of linked message\n      type: string\n      enum:\n        - forward\n        - reply\n    AttachmentRequest:\n      description: Request to attach some data to message\n      discriminator:\n        propertyName: type\n        mapping:\n          image: '#/components/schemas/PhotoAttachmentRequest'\n          video: '#/components/schemas/VideoAttachmentRequest'\n          audio: '#/components/schemas/AudioAttachmentRequest'\n          file: '#/components/schemas/FileAttachmentRequest'\n          sticker: '#/components/schemas/StickerAttachmentRequest'\n          contact: '#/components/schemas/ContactAttachmentRequest'\n          inline_keyboard: '#/components/schemas/InlineKeyboardAttachmentRequest'\n          location: '#/components/schemas/LocationAttachmentRequest'\n          share: '#/components/schemas/ShareAttachmentRequest'\n      properties:\n        type:\n          type: string\n      required:\n        - type\n    PhotoAttachmentRequest:\n      allOf:\n        - $ref: '#/components/schemas/AttachmentRequest'\n        - properties:\n            payload:\n              allOf:\n                - $ref: '#/components/schemas/PhotoAttachmentRequestPayload'\n          required:\n            - payload\n    PhotoAttachmentRequestPayload:\n      description: Request to attach image. All fields are mutually exclusive\n      properties:\n        url:\n          description: Any external image URL you want to attach\n          minLength: 1\n          nullable: true\n          readOnly: false\n          type: string\n        token:\n          description: Token of any existing attachment\n          nullable: true\n          readOnly: false\n          type: string\n        photos:\n          description: Tokens were obtained after uploading images\n          nullable: true\n          readOnly: false\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/PhotoToken'\n    PhotoToken:\n      properties:\n        token:\n          description: Encoded information of uploaded image\n          type: string\n      required:\n        - token\n    PhotoTokens:\n      description: This is information you will receive as soon as an image uploaded\n      properties:\n        photos:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/PhotoToken'\n      required:\n        - photos\n    VideoAttachmentRequest:\n      description: Request to attach video to message\n      allOf:\n        - $ref: '#/components/schemas/AttachmentRequest'\n        - properties:\n            payload:\n              allOf:\n                - $ref: '#/components/schemas/UploadedInfo'\n          required:\n            - payload\n    AudioAttachmentRequest:\n      description: Request to attach audio to message. MUST be the only attachment in message\n      allOf:\n        - $ref: '#/components/schemas/AttachmentRequest'\n        - properties:\n            payload:\n              allOf:\n                - $ref: '#/components/schemas/UploadedInfo'\n          required:\n            - payload\n    UploadedInfo:\n      description: This is information you will receive as soon as audio/video is uploaded\n      properties:\n        token:\n          description: Token is unique uploaded media identifier\n          type: string\n          readOnly: false\n    FileAttachmentRequest:\n      description: Request to attach file to message. MUST be the only attachment in message\n      allOf:\n        - $ref: '#/components/schemas/AttachmentRequest'\n        - properties:\n            payload:\n              allOf:\n                - $ref: '#/components/schemas/UploadedInfo'\n          required:\n            - payload\n    UploadType:\n      description: Type of file uploading\n      enum:\n        - image\n        - video\n        - audio\n        - file\n    ContactAttachmentRequest:\n      description: Request to attach contact card to message. MUST be the only attachment in message\n      allOf:\n        - $ref: '#/components/schemas/AttachmentRequest'\n        - properties:\n            payload:\n              allOf:\n                - $ref: '#/components/schemas/ContactAttachmentRequestPayload'\n          required:\n            - payload\n    ContactAttachmentRequestPayload:\n      properties:\n        name:\n          description: Contact name\n          nullable: true\n          type: string\n        contact_id:\n          description: Contact identifier if it is registered TamTam user\n          nullable: true\n          readOnly: false\n          type: integer\n          format: int64\n        vcf_info:\n          description: Full information about contact in VCF format\n          nullable: true\n          readOnly: false\n          type: string\n        vcf_phone:\n          description: Contact phone in VCF format\n          readOnly: false\n          nullable: true\n          type: string\n      required:\n        - name\n    StickerAttachmentRequest:\n      description: Request to attach sticker. MUST be the only attachment request in message\n      allOf:\n        - $ref: '#/components/schemas/AttachmentRequest'\n        - properties:\n            payload:\n              allOf:\n                - $ref: '#/components/schemas/StickerAttachmentRequestPayload'\n          required:\n            - payload\n    StickerAttachmentRequestPayload:\n      properties:\n        code:\n          description: Sticker code\n          type: string\n      required:\n        - code\n    InlineKeyboardAttachmentRequest:\n      description: Request to attach keyboard to message\n      allOf:\n        - $ref: '#/components/schemas/AttachmentRequest'\n        - properties:\n            payload:\n              type: object\n              allOf:\n                - $ref: '#/components/schemas/InlineKeyboardAttachmentRequestPayload'\n          required:\n            - payload\n    InlineKeyboardAttachmentRequestPayload:\n      properties:\n        buttons:\n          description: Two-dimensional array of buttons\n          type: array\n          minLength: 1\n          items:\n            type: array\n            items:\n              $ref: '#/components/schemas/Button'\n      required:\n        - buttons\n    LocationAttachmentRequest:\n      description: Request to attach keyboard to message\n      allOf:\n        - $ref: '#/components/schemas/AttachmentRequest'\n        - properties:\n            latitude:\n              type: number\n              format: double\n            longitude:\n              type: number\n              format: double\n          required:\n            - latitude\n            - longitude\n    ShareAttachmentRequest:\n      description: Request to attach media preview of any external URL\n      allOf:\n        - $ref: '#/components/schemas/AttachmentRequest'\n        - properties:\n            payload:\n              allOf:\n                - $ref: '#/components/schemas/ShareAttachmentPayload'\n          required:\n            - payload\n    MarkupElement:\n      properties:\n        type:\n          description: \"Type of the markup element. \n            Can be **strong**, \n            *emphasized*, ~strikethrough~, ++underline++, `monospaced`, link or user_mention\"\n          type: string\n        from:\n          description: Element start index (zero-based) in text\n          type: integer\n          format: int32\n        length:\n          description: Length of the markup element\n          type: integer\n          format: int32\n      discriminator:\n        propertyName: type\n        mapping:\n          strong: '#/components/schemas/StrongMarkup'\n          emphasized: '#/components/schemas/EmphasizedMarkup'\n          monospaced: '#/components/schemas/MonospacedMarkup'\n          link: '#/components/schemas/LinkMarkup'\n          strikethrough: '#/components/schemas/StrikethroughMarkup'\n          underline: '#/components/schemas/UnderlineMarkup'\n          user_mention: '#/components/schemas/UserMentionMarkup'\n          heading: '#/components/schemas/HeadingMarkup'\n          highlighted: '#/components/schemas/HighlightedMarkup'\n      required:\n        - type\n        - from\n        - length\n    StrongMarkup:\n      description: Represents **bold** in text \n      allOf:\n        - $ref: '#/components/schemas/MarkupElement'\n    EmphasizedMarkup:\n      description: Represents *italic* in text\n      allOf:\n        - $ref: '#/components/schemas/MarkupElement'\n    MonospacedMarkup:\n      description: Represents `monospaced` or ```code``` block in text\n      allOf:\n        - $ref: '#/components/schemas/MarkupElement'\n    LinkMarkup:\n      description: Represents link in text \n      allOf:\n        - $ref: '#/components/schemas/MarkupElement'\n        - properties:\n            url:\n              description: Link's URL\n              type: string\n              minLength: 1\n              maxLength: 2048\n          required:\n            - url\n    StrikethroughMarkup:\n      description: Represents ~strikethrough~ block in text\n      allOf:\n        - $ref: '#/components/schemas/MarkupElement'\n    UnderlineMarkup:\n      description: Represents ++underlined++ part of the text\n      allOf:\n        - $ref: '#/components/schemas/MarkupElement'\n    HeadingMarkup:\n      description: Represents header part of the text\n      allOf:\n        - $ref: '#/components/schemas/MarkupElement'\n    UserMentionMarkup:\n      description: Represents user mention in text. Mention can be both by user's username or ID if user doesn't have username\n      allOf:\n        - $ref: '#/components/schemas/MarkupElement'\n        - properties:\n            user_link:\n              description: \"`@username` of mentioned user\"\n              type: string\n              nullable: true\n              readOnly: false\n            user_id:\n              description: Identifier of mentioned user without username\n              type: integer\n              format: int64\n              nullable: true\n              readOnly: false\n    HighlightedMarkup:\n      description: Represents a highlighted piece of text\n      allOf:\n        - $ref: '#/components/schemas/MarkupElement'\n    SubscriptionRequestBody:\n      description: Request to set up WebHook subscription\n      properties:\n        url:\n          description: 'URL of HTTP(S)-endpoint of your bot. Must starts with http(s)://'\n          type: string\n        update_types:\n          description: List of update types your bot want to receive. See `Update` object for a complete list of types\n          example: '[\"message_created\", \"bot_started\"]'\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n          readOnly: false\n        version:\n          description: Version of API. Affects model representation\n          type: string\n          readOnly: false\n      required:\n        - url\n    GetSubscriptionsResult:\n      description: List of all WebHook subscriptions\n      properties:\n        subscriptions:\n          description: Current subscriptions\n          type: array\n          items:\n            $ref: '#/components/schemas/Subscription'\n      required:\n        - subscriptions\n    SimpleQueryResult:\n      description: Simple response to request\n      properties:\n        success:\n          description: '`true` if request was successful. `false` otherwise'\n          type: boolean\n        message:\n          description: Explanatory message if the result is not successful\n          type: string\n          readOnly: false\n      required:\n        - success\n    PinMessageBody:\n      properties:\n        message_id:\n          description: Identifier of message to be pinned in chat\n          type: string\n        notify:\n          description: If `true`, participants will be notified with system message in chat/channel\n          type: boolean\n          default: true\n          readOnly: false\n          nullable: true\n      required:\n        - message_id\n    GetPinnedMessageResult:\n      properties:\n        message:\n          description: Pinned message. Can be `null` if no message pinned in chat\n          readOnly: false\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/Message'\n    Callback:\n      description: Object sent to bot when user presses button\n      properties:\n        timestamp:\n          description: Unix-time when user pressed the button\n          type: integer\n          format: int64\n        callback_id:\n          description: Current keyboard identifier\n          type: string\n        payload:\n          description: Button payload\n          type: string\n          readOnly: false\n        user:\n          description: User pressed the button\n          allOf:\n            - $ref: '#/components/schemas/User'\n      required:\n        - timestamp\n        - callback_id\n        - user\n    CallbackAnswer:\n      description: Send this object when your bot wants to react to when a button is pressed\n      properties:\n        message:\n          description: Fill this if you want to modify current message\n          nullable: true\n          readOnly: false\n          allOf:\n            - $ref: '#/components/schemas/NewMessageBody'\n        notification:\n          description: Fill this if you just want to send one-time notification to user\n          nullable: true\n          readOnly: false\n          type: string\n    ConstructorAnswer:\n      description: Bot's answer on construction request\n      properties:\n        messages:\n          type: array\n          description: Array of prepared messages. This messages will be sent as user taps on \"Send\" button\n          readOnly: false\n          items:\n            $ref: '#/components/schemas/ConstructedMessageBody'\n        allow_user_input:\n          description: 'If `true` user can send any input manually. Otherwise, only keyboard will be shown'\n          type: boolean\n          readOnly: false\n        hint:\n          description: 'Hint to user. Will be shown on top of keyboard'\n          nullable: true\n          readOnly: false\n          type: string\n        data:\n          description: |-\n            In this property you can store any additional data up to 8KB. We send this data back to bot within the\n            next construction request. It is handy to store here any state of construction session\n          type: string\n          readOnly: false\n          maxLength: 8192\n        keyboard:\n          description: 'Keyboard to show to user in constructor mode'\n          nullable: true\n          readOnly: false\n          allOf:\n            - $ref: '#/components/schemas/Keyboard'\n        placeholder:\n          nullable: true\n          readOnly: false\n          description: 'Text to show over the text field'\n          type: string\n    Error:\n      description: Server returns this if there was an exception to your request\n      properties:\n        error:\n          description: Error\n          type: string\n        code:\n          description: Error code\n          type: string\n        message:\n          description: Human-readable description\n          type: string\n      required:\n        - code\n        - message\n    UploadEndpoint:\n      description: Endpoint you should upload to your binaries\n      type: object\n      properties:\n        url:\n          description: URL to upload\n          type: string\n      required:\n        - url\n    UserIdsList:\n      properties:\n        user_ids:\n          items:\n            type: integer\n            format: int64\n      required:\n        - user_ids\n    ActionRequestBody:\n      properties:\n        action:\n          $ref: '#/components/schemas/SenderAction'\n      required:\n        - action\n    SenderAction:\n      description: Different actions to send to chat members\n      enum:\n        - typing_on\n        - sending_photo\n        - sending_video\n        - sending_audio\n        - sending_file\n        - mark_seen\n    UpdateList:\n      description: List of all updates in chats your bot participated in\n      properties:\n        updates:\n          description: Page of updates\n          type: array\n          items:\n            $ref: '#/components/schemas/Update'\n        marker:\n          description: Pointer to the next data page\n          type: integer\n          format: int64\n          nullable: true\n      required:\n        - updates\n        - marker\n    Update:\n      description: '`Update` object represents different types of events that happened in chat. See its inheritors'\n      discriminator:\n        propertyName: update_type\n        mapping:\n          message_created: '#/components/schemas/MessageCreatedUpdate'\n          message_callback: '#/components/schemas/MessageCallbackUpdate'\n          message_edited: '#/components/schemas/MessageEditedUpdate'\n          message_removed: '#/components/schemas/MessageRemovedUpdate'\n          bot_added: '#/components/schemas/BotAddedToChatUpdate'\n          bot_removed: '#/components/schemas/BotRemovedFromChatUpdate'\n          user_added: '#/components/schemas/UserAddedToChatUpdate'\n          user_removed: '#/components/schemas/UserRemovedFromChatUpdate'\n          bot_started: '#/components/schemas/BotStartedUpdate'\n          chat_title_changed: '#/components/schemas/ChatTitleChangedUpdate'\n          message_construction_request: '#/components/schemas/MessageConstructionRequest'\n          message_constructed: '#/components/schemas/MessageConstructedUpdate'\n          message_chat_created: '#/components/schemas/MessageChatCreatedUpdate'\n      properties:\n        update_type:\n          type: string\n        timestamp:\n          description: Unix-time when event has occurred\n          type: integer\n          format: int64\n      required:\n        - update_type\n        - timestamp\n    MessageCallbackUpdate:\n      description: You will get this `update` as soon as user presses button\n      allOf:\n        - $ref: '#/components/schemas/Update'\n        - properties:\n            callback:\n              description: ''\n              allOf:\n                - $ref: '#/components/schemas/Callback'\n            message:\n              description: Original message containing inline keyboard. Can be `null` in case it had been deleted by the moment a bot got this update\n              nullable: true\n              allOf:\n                - $ref: '#/components/schemas/Message'\n            user_locale:\n              description: Current user locale in IETF BCP 47 format\n              type: string\n              nullable: true\n              readOnly: false\n          required:\n            - callback\n            - message\n    MessageCreatedUpdate:\n      description: You will get this `update` as soon as message is created\n      allOf:\n        - $ref: '#/components/schemas/Update'\n        - properties:\n            message:\n              description: Newly created message\n              allOf:\n                - $ref: '#/components/schemas/Message'\n            user_locale:\n              description: Current user locale in IETF BCP 47 format. Available only in dialogs\n              type: string\n              readOnly: false\n              nullable: true\n          required:\n            - message\n    MessageRemovedUpdate:\n      description: You will get this `update` as soon as message is removed\n      allOf:\n        - $ref: '#/components/schemas/Update'\n        - properties:\n            message_id:\n              description: Identifier of removed message\n              type: string\n            chat_id:\n              description: Chat identifier where message has been deleted\n              type: integer\n              format: int64\n            user_id:\n              description: User who deleted this message\n              type: integer\n              format: int64\n          required:\n            - message_id\n            - chat_id\n            - user_id\n    MessageEditedUpdate:\n      description: You will get this `update` as soon as message is edited\n      allOf:\n        - $ref: '#/components/schemas/Update'\n        - properties:\n            message:\n              description: Edited message\n              allOf:\n                - $ref: '#/components/schemas/Message'\n          required:\n            - message\n    BotAddedToChatUpdate:\n      description: You will receive this update when bot has been added to chat\n      allOf:\n        - $ref: '#/components/schemas/Update'\n        - properties:\n            chat_id:\n              description: Chat id where bot was added\n              type: integer\n              format: int64\n            user:\n              description: User who added bot to chat\n              allOf:\n                - $ref: '#/components/schemas/User'\n            is_channel:\n              description: Indicates whether bot has been added to channel or not\n              type: boolean\n          required:\n            - chat_id\n            - user\n            - is_channel\n    BotRemovedFromChatUpdate:\n      description: You will receive this update when bot has been removed from chat\n      allOf:\n        - $ref: '#/components/schemas/Update'\n        - properties:\n            chat_id:\n              description: Chat identifier bot removed from\n              type: integer\n              format: int64\n            user:\n              description: User who removed bot from chat\n              allOf:\n                - $ref: '#/components/schemas/User'\n            is_channel:\n              description: Indicates whether bot has been removed from channel or not\n              type: boolean\n          required:\n            - chat_id\n            - user\n            - is_channel\n    UserAddedToChatUpdate:\n      description: You will receive this update when user has been added to chat where bot is administrator\n      allOf:\n        - $ref: '#/components/schemas/Update'\n        - properties:\n            chat_id:\n              description: Chat identifier where event has occurred\n              type: integer\n              format: int64\n            user:\n              description: User added to chat\n              allOf:\n                - $ref: '#/components/schemas/User'\n            inviter_id:\n              description: User who added user to chat. Can be `null` in case when user joined chat by link\n              type: integer\n              format: int64\n              readOnly: false\n              nullable: true\n            is_channel:\n              description: Indicates whether user has been added to channel or not\n              type: boolean\n          required:\n            - chat_id\n            - user\n            - is_channel\n    UserRemovedFromChatUpdate:\n      description: You will receive this update when user has been removed from chat where bot is administrator\n      allOf:\n        - $ref: '#/components/schemas/Update'\n        - properties:\n            chat_id:\n              description: Chat identifier where event has occurred\n              type: integer\n              format: int64\n            user:\n              description: User removed from chat\n              allOf:\n                - $ref: '#/components/schemas/User'\n            admin_id:\n              description: Administrator who removed user from chat. Can be `null` in case when user left chat\n              type: integer\n              format: int64\n              readOnly: false\n            is_channel:\n              description: Indicates whether user has been removed from channel or not\n              type: boolean\n          required:\n            - chat_id\n            - user\n            - is_channel\n    BotStartedUpdate:\n      description: Bot gets this type of update as soon as user pressed `Start` button\n      allOf:\n        - $ref: '#/components/schemas/Update'\n        - properties:\n            chat_id:\n              description: Dialog identifier where event has occurred\n              type: integer\n              format: int64\n            user:\n              description: User pressed the 'Start' button\n              allOf:\n                - $ref: '#/components/schemas/User'\n            payload:\n              description: Additional data from deep-link passed on bot startup\n              type: string\n              maxLength: 512\n              nullable: true\n              readOnly: false\n            user_locale:\n              description: Current user locale in IETF BCP 47 format\n              type: string\n              readOnly: false\n          required:\n            - chat_id\n            - user\n    ChatTitleChangedUpdate:\n      description: Bot gets this type of update as soon as title has been changed in chat\n      allOf:\n        - $ref: '#/components/schemas/Update'\n        - properties:\n            chat_id:\n              description: Chat identifier where event has occurred\n              type: integer\n              format: int64\n            user:\n              description: User who changed title\n              allOf:\n                - $ref: '#/components/schemas/User'\n            title:\n              description: New title\n              type: string\n          required:\n            - chat_id\n            - user\n            - title\n    MessageConstructionRequest:\n      description: Bot will get this update when user sent to bot any message or pressed button during construction process\n      allOf:\n        - $ref: '#/components/schemas/Update'\n        - properties:\n            user:\n              description: User who initiated this request\n              allOf:\n                - $ref: '#/components/schemas/UserWithPhoto'\n            user_locale:\n              description: Current user locale in IETF BCP 47 format\n              type: string\n              readOnly: false\n            session_id:\n              description: Constructor session identifier\n              type: string\n            data:\n              description: data received from previous `ConstructorAnswer`\n              type: string\n              readOnly: false\n              nullable: true\n              maxLength: 8192\n            input:\n              description: User's input. It can be message (text/attachments) or simple button's callback\n              allOf:\n                - $ref: '#/components/schemas/ConstructorInput'\n          required:\n            - user\n            - session_id\n            - input\n    ConstructorInput:\n      description: It can be either message (text/attachments) or button callback\n      discriminator:\n        propertyName: input_type\n        mapping:\n          callback: '#/components/schemas/CallbackConstructorInput'\n          message: '#/components/schemas/MessageConstructorInput'\n      properties:\n        input_type:\n          type: string\n      required:\n        - input_type\n    CallbackConstructorInput:\n      description: Bot will get this input as soon as soon user taps on button created by bot in construction mode\n      allOf:\n        - $ref: '#/components/schemas/ConstructorInput'\n        - properties:\n            payload:\n              description: Pressed button payload\n              type: string\n          required:\n            - payload\n    MessageConstructorInput:\n      description: Bot will get this input in case when user sends message to bot manually\n      allOf:\n        - $ref: '#/components/schemas/ConstructorInput'\n        - properties:\n            messages:\n              description: Messages sent by user during construction process. Typically it is single element array but sometimes it can contains multiple messages. Can be empty on initial request when user just opened constructor\n              type: array\n              nullable: true\n              items:\n                $ref: '#/components/schemas/ConstructedMessageBody'\n          required:\n            - messages\n    MessageConstructedUpdate:\n      description: Bot will get this update when constructed message has been posted to any chat\n      allOf:\n        - $ref: '#/components/schemas/Update'\n        - properties:\n            session_id:\n              description: Constructor session identifier\n              type: string\n            message:\n              description: User message\n              allOf:\n                - $ref: '#/components/schemas/ConstructedMessage'\n          required:\n            - session_id\n            - message\n    MessageChatCreatedUpdate:\n      description: Bot will get this update when chat has been created as soon as first user clicked chat button\n      allOf:\n        - $ref: '#/components/schemas/Update'\n        - properties:\n            chat:\n              description: Created chat\n              allOf:\n                - $ref: '#/components/schemas/Chat'\n            message_id:\n              description: Message identifier where the button has been clicked\n              type: string\n            start_payload:\n              description: Payload from chat button\n              type: string\n              nullable: true\n              readOnly: false\n          required:\n            - message_id\n            - chat\n",
			"canonicalURL": "/github.com/tamtam-chat/tamtam-bot-api-schema@9998e60a8ac63bfb57e0e03a1b28e7f184cd18ba/-/blob/schema.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/tamtam-chat/tamtam-bot-api-schema/blob/9998e60a8ac63bfb57e0e03a1b28e7f184cd18ba/schema.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"CallbackButton\": parse schema: parse schema: property \"intent\": at 1:7788: parse default: unexpected type: \"\""
}