{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/airbusgeo/playground-docs"
		},
		"file": {
			"name": "playground_geo_processes_manager_api.yaml",
			"size": 0,
			"path": "api/playground_geo_processes_manager_api.yaml",
			"byteSize": 32827,
			"content": "openapi: 3.0.0\n\n#\n# Info\n#\ninfo:\n  title: Geo Processes Manager API for Intelligence Playground\n  description: |\n    Airbus Defence and Space \"Geo Processes Manager\" API specification for Intelligence Playground.\n\n    The processes manager is reponsible for registering, monitoring and\n    operating processes.\n\n    A job is a unitary execution of a process.\n\n    A process may be an unitary processing or a composition of several tasks.\n    In the later case, the tasks workflow management can be specific to the process\n    or delegated to the process manager which is also specific to the geo process\n    manager implementation. Workflow implementation is not covered by this API.\n\n    Results can be retrieved using another API. The job provides a link that allows the client\n    to retrieve the full result of the job processing.\n\n    This Playground specific implementation adds the concept of project and dataset to the \n    generic Airbus Defence and Space API by extending it.\n\n  contact:\n    name: Airbus Defence and Space Intelligence\n    url: 'https://www.intelligence-airbusds.com/'\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.0\n  x-logo:\n    url: https://www.intelligence-airbusds.com/files/pmedia/public/r2421_9_airbus_rgb.png\n\n\n#\n# Servers\n#\nservers:\n  - url: https://playground-api-gateway.playground.airbusds-geo.com\n    description: Intelligence Playground production server\n\n\n#\n# Tags\n#\ntags:\n  - name: Mandatory\n    description: |\n      Mandatory resources.\n      Defines the main entry point of the service.\n  - name: Catalog\n    description: |\n      Processes catalog.\n  - name: Jobs\n    description: |\n      Processes execution management.\n\n#\n# Security\n#\nsecurity:\n  - bearerAuth: []\n\n#\n# Paths\n#\npaths:\n  #\n  # OpenAPI schema\n  #\n  /api/v1/openapi:\n    get:\n      tags:\n        - Mandatory\n      summary: Open API specification of this service in YAML format\n      description: |\n        Returns Open API specification of this service in YAML format.\n        Subset of this API with implemented services.\n      responses:\n        '200':\n          description: Geo Processes Manager API for Intelligence Playground.\n\n  #\n  # Process list and creation\n  #\n  /api/v1/processes:\n    get:\n      parameters:\n        - in: query\n          name: projectId\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: Playground project ID.\n        - name: page\n          in: query\n          description: \"Page number. Default: 1.\"\n          required: false\n          schema:\n            type: integer\n        - name: size\n          in: query\n          description: \"Page size. Default: 10. Max: 100.\"\n          required: false\n          schema:\n            type: integer\n      tags:\n        - Catalog\n      summary: List all available process services\n      description: |\n        Return the list of all registered process services that are available\n        for current user\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Processes'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - Catalog\n      summary: Register a new process service\n      description: Register a process service for further execution\n      parameters:\n        - in: query\n          name: projectId\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: Playground project ID.\n      requestBody:\n        description: |\n          Process description\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProcessRef'\n      responses:\n        '201':\n          description: Process has been registered\n          headers:\n            Location:\n              schema:\n                type: string\n              description: URI of the created process\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProcessDescribe'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '405':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  #\n  # Process management\n  #\n  '/api/v1/processes/{processId}':\n    get:\n      tags:\n        - Catalog\n      summary: Find process by ID\n      description: Return a single process\n      parameters:\n        - name: processId\n          in: path\n          description: ID of process to return\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: query\n          name: projectId\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: Playground project ID.\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProcessDescribe'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      tags:\n        - Catalog\n      summary: Update an existing process service\n      description: Update an existing process service\n      parameters:\n        - name: processId\n          in: path\n          description: ID of process to return\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: query\n          name: projectId\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: Playground project ID.\n      requestBody:\n        description: |\n          Process description\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProcessRef'\n      responses:\n        '201':\n          description: Process has been updated\n          headers:\n            Location:\n              schema:\n                type: string\n              description: URI of the updated process\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProcessDescribe'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '405':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      tags:\n        - Catalog\n      summary: Delete a process\n      description: |\n        Definitively remove a process service from the platform. Note : This\n        command will need great care as we do not want to remove a process\n        which has associated jobs. Some preventive checks should be made\n        here, the process itself should only be \"marked for deletion\" until\n        we are sure we can remove it.\n      parameters:\n        - name: processId\n          in: path\n          description: Process ID to delete\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: query\n          name: projectId\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: Playground project ID.\n        - name: datasetId\n          in: query\n          description: id of a dataset\n          required: false\n          schema:\n            type: string\n      responses:\n        '202':\n          description: Process marked for deletion\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProcessSummary'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  #\n  # Job list for all processes\n  #\n  /api/v1/jobs:\n    get:\n      tags:\n        - Jobs\n      summary: List available jobs\n      description: Return the list of all available jobs for this context\n      parameters:\n        - in: query\n          name: projectId\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: Playground project ID.\n        - name: page\n          in: query\n          description: \"Page number. Default: 1.\"\n          required: false\n          schema:\n            type: integer\n        - name: size\n          in: query\n          description: \"Page size. Default: 10. Max: 100.\"\n          required: false\n          schema:\n            type: integer\n        - name: datasetId\n          in: query\n          description: id of a dataset\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Jobs'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  #\n  # Job list and creation for one process\n  #\n  '/api/v1/processes/{processId}/jobs':\n    get:\n      tags:\n        - Jobs\n      summary: List process' jobs\n      description: Return the list of all process' jobs\n      parameters:\n        - name: processId\n          in: path\n          description: ID of process to get input return\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: query\n          name: projectId\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: Playground project ID.\n        - name: page\n          in: query\n          description: \"Page number. Default: 1.\"\n          required: false\n          schema:\n            type: string\n        - name: size\n          in: query\n          description: \"Page size. Default: 10. Max: 100.\"\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Jobs'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - Jobs\n      summary: Request for a job execution\n      description: Make a job request that should be queued for future execution\n      parameters:\n        - name: processId\n          in: path\n          description: ID of process to get input return\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: header\n          name: X-Correlation-ID\n          description: System wide request identifier.\n          schema:\n            type: string\n        - in: header\n          name: X-ADS-Debug\n          description: Enable debug mode.\n          schema:\n            type: boolean\n      responses:\n        '201':\n          description: Job request queued\n          headers:\n            Location:\n              schema:\n                type: string\n              description: URI of the job process\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobDescribe'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '405':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      requestBody:\n        description: |\n          Process input parameters as defined by the JSON Schema in the input\n          attribute of the description resource.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Input'\n\n  #\n  # Job management\n  #\n  '/api/v1/processes/{processId}/jobs/{jobId}':\n    get:\n      tags:\n        - Jobs\n      summary: Find jobs by ID\n      description: Returns a single job\n      parameters:\n        - name: processId\n          in: path\n          description: ID of job's process\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: jobId\n          in: path\n          description: ID of job to return\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: query\n          name: projectId\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: Playground project ID.\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobDescribe'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      tags:\n        - Jobs\n      summary: Delete a job\n      description: Kill any running job associated to this id and delete execution details\n      parameters:\n        - name: processId\n          in: path\n          description: ID of job's process\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: jobId\n          in: path\n          description: ID of job to delete\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: query\n          name: projectId\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: Playground project ID.\n      responses:\n        '202':\n          description: Job marked for deletion\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobSummary'\n        '204':\n          description: Job killed and removed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobDescribe'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n#\n# Components\n#\ncomponents:\n\n  #\n  # Security\n  #\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n\n  #\n  # Schemas\n  #\n  schemas:\n\n    #\n    # Processes schema\n    #\n    Processes:\n      type: object\n      properties:\n        processes:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProcessSummary'\n        count:\n          type: integer\n          example: 1\n        total:\n          type: integer\n          example: 1\n        _links:\n          $ref: '#/components/schemas/NavLinks'\n\n    #\n    # ProcessRef schema\n    #\n    ProcessRef:\n      description: |\n        Reference to a new process (docker image or external instance that\n        exposes a valid describe API endpoint).\n      type: object\n      required:\n        - type\n        - reference\n      properties:\n        type:\n          description: Reference type\n          type: string\n          enum:\n            - dockerImage\n            - externalInstance\n          example: dockerImage\n        reference:\n          description: Reference value\n          type: string\n          example: 'eu.gcr.io/myproject/cat-detection:latest'\n\n    #\n    # ProcessSummary schema\n    #\n    ProcessSummary:\n      description: |\n        Process summary.\n      type: object\n      required:\n        - id\n        - title\n        - family\n        - version\n        - description\n        - _links\n      properties:\n        id:\n          description: Unique identifier of the process (usually an uuid).\n          type: string\n          format: uuid\n          example: 15c61933-0b06-442c-8bab-723b2b41f570\n        title:\n          description: The title of the process.\n          type: string\n          example: 'Cat detection'\n        family:\n          description: The process family.\n          type: string\n          example: object-detection\n        version:\n          description: The version of the process.\n          type: string\n          example: 1.0\n        description:\n          description: The description of the process.\n          type: string\n          example: 'Detect cats on tiles'\n        organization:\n          description: Identifier of the organization or entity publishing the process.\n          type: string\n          example: 'Airbus DS Intelligence'\n        email:\n          description: Contact email.\n          type: string\n          format: email\n          example: 'cat-detection@airbus.com'\n        keywords:\n          description: List of keywords.\n          type: array\n          items:\n            type: string\n          example: ['cat', 'dog']\n        _links:\n          $ref: 'shared.yaml#/components/schemas/ItemLinks'\n    #\n    # ProcessDescribe schema\n    #\n    ProcessDescribe:\n      description: |\n        Process description.\n      type: object\n      required:\n        - id\n        - name\n        - title\n        - family\n        - version\n        - description\n        - organization\n        - email\n        - requirements\n        - capabilities\n        - output\n        - _links\n      properties:\n        id:\n          description: Unique identifier of the process (usually an uuid).\n          type: string\n          format: uuid\n          example: 15c61933-0b06-442c-8bab-723b2b41f570\n        title:\n          description: The title of the process.\n          type: string\n          example: 'Cat detection'\n        family:\n          description: The process family.\n          type: string\n          example: object-detection\n        version:\n          description: The version of the process.\n          type: string\n          example: 1.0\n        description:\n          description: The description of the process.\n          type: string\n          example: 'Detect cats on tiles'\n        organization:\n          description: Identifier of the organization or entity publishing the process.\n          type: string\n          example: 'Airbus DS Intelligence'\n        email:\n          description: Contact email.\n          type: string\n          format: email\n          example: 'cat-detection@airbus.com'\n        keywords:\n          description: List of keywords.\n          type: array\n          items:\n            type: string\n          example: ['cat', 'dog']\n        requirements:\n          # Requirements of the process service\n          $ref: 'shared.yaml#/components/schemas/Requirements'\n        capabilities:\n          # Capabilities of the process service\n          $ref: 'shared.yaml#/components/schemas/Capabilities'\n        output:\n          # Process execution output interface.\n          $ref: 'shared.yaml#/components/schemas/ProcessOutput'\n        _links:\n          $ref: 'shared.yaml#/components/schemas/ItemLinks'\n\n    #\n    # Jobs schema\n    #\n    Jobs:\n      type: object\n      required:\n        - jobs\n        - _links\n      properties:\n        jobs:\n          type: array\n          items:\n            $ref: '#/components/schemas/JobSummary'\n        count:\n          type: integer\n          example: 1\n        total:\n          type: integer\n          example: 1\n        _links:\n          $ref: '#/components/schemas/NavLinks'\n\n    #\n    # JobSummary schema\n    #\n    JobSummary:\n      type: object\n      required:\n        - processId\n        - id\n        - creationDate\n      properties:\n        creationDate:\n          type: string\n          format: date-time\n          example: \"2017-07-21T17:32:28Z\"\n        startDate:\n          type: string\n          format: date-time\n          example: \"2017-07-21T17:32:28Z\"\n        endDate:\n          type: string\n          format: date-time\n          example: \"2017-07-21T17:32:28Z\"\n        processId:\n          type: string\n          format: uuid\n          example: 15c61933-0b06-442c-8bab-723b2b41f570\n        id:\n          type: string\n          format: uuid\n          example: bb4358f0-30f2-11e8-b467-0ed5f89f718b\n        nbTasks:\n          type: integer\n          example: 4\n        nbTasksPerStatus:\n          type: array\n          items:\n            $ref: '#/components/schemas/TaskCountByStatus'\n        _links:\n          $ref: '#/components/schemas/ItemLinks'\n\n    #\n    # JobDescribe schema\n    #\n    JobDescribe:\n      type: object\n      required:\n        - processId\n        - id\n        - creationDate\n        - status\n      properties:\n        creationDate:\n          type: string\n          format: date-time\n          example: \"2017-07-21T17:32:28Z\"\n        startDate:\n          type: string\n          format: date-time\n          example: \"2017-07-21T17:32:28Z\"\n        endDate:\n          type: string\n          format: date-time\n          example: \"2017-07-21T17:32:28Z\"\n        processId:\n          type: string\n          format: uuid\n          example: 15c61933-0b06-442c-8bab-723b2b41f570\n        id:\n          type: string\n          format: uuid\n          example: bb4358f0-30f2-11e8-b467-0ed5f89f718b\n        status:\n          $ref: '#/components/schemas/Status'\n        message:\n          type: string\n          example: process image 12345\n        nbTasks:\n          type: integer\n          example: 4\n        nbTasksPerStatus:\n          type: array\n          items:\n            $ref: '#/components/schemas/TaskCountByStatus'\n        userMetadatas:\n          $ref: '#/components/schemas/Metadatas'\n        input:\n          $ref: '#/components/schemas/Input'\n        asynchronous:\n          description: True if asynchronous mode provided.\n          type: boolean\n          default: false\n          example: false\n        _links:\n          $ref: '#/components/schemas/JobLinks'\n\n    #\n    # Status schema\n    #\n    Status:\n      description: |\n        Status of a process execution\n      type: object\n      required:\n        - status\n        - progress\n      properties:\n        status:\n          description: Status of this execution.\n          type: string\n          default: UNKNOWN\n          enum:\n            - UNKNOWN\n            - ACCEPTED\n            - RUNNING\n            - FAILED\n            - SUCCEEDED\n            - CANCELLED\n            - PAUSED\n          example: SUCCEEDED\n        progress:\n          description: Progress in % of this execution.\n          type: integer\n          example: 100\n\n    #\n    # NavLinks schema\n    #\n    NavLinks:\n      description: |\n        Links to related resources.\n      type: object\n      required:\n        - self\n      properties:\n        self:\n          description: Current page reference.\n          $ref: '#/components/schemas/Reference'\n        next:\n          description: Next page reference.\n          $ref: '#/components/schemas/Reference'\n        prev:\n          description: Previous page reference\n          $ref: '#/components/schemas/Reference'\n        first:\n          description: First page reference.\n          $ref: '#/components/schemas/Reference'\n        last:\n          description: Last page reference\n          $ref: '#/components/schemas/Reference'\n\n    #\n    # ItemLinks schema\n    #\n    ItemLinks:\n      description: |\n        Links for single resource.\n      type: object\n      required:\n        - self\n      properties:\n        self:\n          description: Current resource reference.\n          $ref: '#/components/schemas/Reference'\n        list:\n          description: List similar resource references.\n          $ref: '#/components/schemas/Reference'\n\n    #\n    # ProcessLinks schema\n    #\n    ProcessLinks:\n      description: |\n        Links for single process.\n      type: object\n      required:\n        - self\n      properties:\n        self:\n          description: Current resource reference.\n          $ref: '#/components/schemas/Reference'\n        list:\n          description: List similar resource references.\n          $ref: '#/components/schemas/Reference'\n        jobs:\n          description: List of associated jobs.\n          $ref: '#/components/schemas/Reference'\n        runNewJob:\n          description: POST ressource to launch a job for this process.\n          $ref: '#/components/schemas/Reference'\n        update:\n          description: PUT ressource to update this process.\n          $ref: '#/components/schemas/Reference'\n        delete:\n          description: DELETE ressource to delete this process.\n          $ref: '#/components/schemas/Reference'\n\n    #\n    # JobLinks schema\n    #\n    JobLinks:\n      description: |\n        Links for single job.\n      type: object\n      required:\n        - self\n      properties:\n        self:\n          description: Current resource reference.\n          $ref: '#/components/schemas/Reference'\n        list:\n          description: List similar resource references.\n          $ref: '#/components/schemas/Reference'\n        tasks:\n          description: List of associated tasks.\n          $ref: '#/components/schemas/Reference'\n        runNewJob:\n          description: POST ressource to launch a new job for this process.\n          $ref: '#/components/schemas/Reference'\n        delete:\n          description: DELETE ressource to delete this job.\n          $ref: '#/components/schemas/Reference'\n        zone:\n          description: Get associated zone.\n          $ref: '#/components/schemas/Reference'\n        recordsAsGeojson:\n          description: Download a GeoJSON file of generated records.\n          $ref: '#/components/schemas/Reference'\n\n    #\n    # Reference schema\n    #\n    Reference:\n      description: |\n        Reference object.\n      type: object\n      required:\n        - href\n      properties:\n        relation:\n          description: Description of the relation.\n          type: string\n          example: myrelation\n        href:\n          description: Determine the target URI of the related resource.\n          type: string\n          format: uri\n          example: |\n            http://myservice.com/api/v1/processes/15c61933-0b06-442c-8bab-723b2b41f570\n        type:\n          description: Expected content type of the response of the reference.\n          type: string\n          example: application/json\n        method:\n          description: |\n            HTTP verb to distinguish between several possible actions on the\n            same ressource. GET if omitted.\n          $ref: '#/components/schemas/ReferenceMethod'\n\n    #\n    # ReferenceMethod schema\n    #\n    ReferenceMethod:\n      description: |\n        HTTP verbs to access resources.\n      type: string\n      enum:\n        - GET\n        - POST\n        - PUT\n        - DELETE\n      example: GET\n\n    #\n    # Error schema\n    #\n    Error:\n      description: |\n        Error returned when request fails\n      type: object\n      required:\n        - message\n      properties:\n        message:\n          description: End user error description.\n          type: string\n          example: Something went wrong!\n        hint:\n          description: Internal / developper error message (no trace).\n          type: string\n          example: Class CatDetection threw an exception on line 125\n        correlationId:\n          description: System request identifier from request header.\n          type: string\n          example: run-1258\n        timestamp:\n          description: Error timestamp.\n          type: string\n          format: date-time\n          example: \"2017-07-21T17:32:28Z\"\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"Processes\": parse schema: property \"processes\": parse schema: item: parse schema: resolve \"#/components/schemas/ProcessSummary\": parse schema: property \"_links\": parse schema: resolve \"shared.yaml#/components/schemas/ItemLinks\": external \"shared.yaml\": file: local file reference is not allowed"
}