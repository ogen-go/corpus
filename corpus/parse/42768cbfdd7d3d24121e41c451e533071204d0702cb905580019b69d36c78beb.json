{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/RealEstateCore/OWL2OAS"
		},
		"file": {
			"name": "rec-core-v3.0.yaml",
			"size": 0,
			"path": "OWL2OAS/examples/rec-core-v3.0.yaml",
			"byteSize": 102007,
			"content": "ï»¿openapi: 3.0.2\ninfo:\n  title: RealEstateCore Core Module\n  license:\n    name: MIT\n    url: https://opensource.org/licenses/MIT\n  description: The documentation below is automatically extracted from a \u003cdc:description\u003e annotation on the ontology https://w3id.org/rec/core/:\u003cbr/\u003e\u003cbr/\u003e*The REC core module collects the top-level classes and properties that span over or are reused within multiple REC modules.\u003cbr/\u003e\u003cbr/\u003eNote that this module reuses certain classes, properties, and named individuals from other vocabularies, e.g., GeoSPARQL; the copyright conditions on those reused entities are stated in their respective rdfs:comments annotations.*\n  version: \"3.0\"\ncomponents:\n  parameters:\n    pageParam:\n      name: page\n      description: If the result set is large, pagination across the results can be employed; in that case, this parameter defines the page number that is requested by the client. The number of items included in each page is defined by the 'size' parameter. Default is 1, i.e., the first results page is returned.\n      schema:\n        type: integer\n        format: int32\n        minimum: 1\n        default: 1\n      in: query\n    sizeParam:\n      name: size\n      description: The number of items to display on a returned results page (see the page parameter).\n      schema:\n        type: integer\n        format: int32\n        maximum: 100\n        default: 20\n      in: query\n    sortParam:\n      name: sort\n      description: The field and direction to sort results on.\n      schema:\n        $ref: '#/components/schemas/SortingSchema'\n      style: deepObject\n      in: query\n  schemas:\n    HydraCollectionWrapper:\n      type: object\n      required:\n      - '@context'\n      - '@type'\n      - hydra:member\n      properties:\n        '@context':\n          $ref: '#/components/schemas/Context'\n        '@type':\n          type: string\n          default: hydra:Collection\n        hydra:totalItems:\n          type: integer\n        hydra:view:\n          type: object\n          properties:\n            '@id':\n              type: string\n              format: uri\n            '@type':\n              type: string\n              default: hydra:PartialCollectionView\n            hydra:first:\n              type: string\n            hydra:previous:\n              type: string\n            hydra:next:\n              type: string\n            hydra:last:\n              type: string\n    IntegerFilter:\n      type: object\n      properties:\n        eq:\n          type: integer\n        lt:\n          type: integer\n        lte:\n          type: integer\n        gt:\n          type: integer\n        gte:\n          type: integer\n    NumberFilter:\n      type: object\n      properties:\n        eq:\n          type: number\n        lt:\n          type: number\n        lte:\n          type: number\n        gt:\n          type: number\n        gte:\n          type: number\n    StringFilter:\n      type: object\n      properties:\n        eq:\n          type: string\n        contains:\n          type: string\n        regex:\n          type: string\n    DateTimeFilter:\n      type: object\n      properties:\n        eq:\n          type: string\n          format: date-time\n        starting:\n          type: string\n          format: date-time\n        ending:\n          type: string\n          format: date-time\n        before:\n          type: string\n          format: date-time\n        after:\n          type: string\n          format: date-time\n        latest:\n          type: boolean\n    SortingSchema:\n      type: object\n      properties:\n        asc:\n          type: string\n        desc:\n          type: string\n    geosparql:Geometry:\n      type: object\n      required:\n      - '@context'\n      properties:\n        '@id':\n          type: string\n        '@type':\n          type: string\n          default: geosparql:Geometry\n        label:\n          type: string\n        geosparql:asGML:\n          type: array\n          items:\n            type: string\n        geosparql:asWKT:\n          type: array\n          items:\n            type: string\n        geosparql:hasSerialization:\n          type: array\n          items:\n            type: string\n    Building:\n      type: object\n      required:\n      - '@context'\n      properties:\n        '@id':\n          type: string\n        '@type':\n          type: string\n          default: Building\n        label:\n          type: string\n        isPartOfRealEstate:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: RealEstate\n        hasBuildingComponent:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: BuildingComponent\n        hasGeoReferenceOrigo:\n          type: object\n          required:\n          - '@id'\n          properties:\n            '@id':\n              type: string\n            '@type':\n              type: string\n              default: GeoReferenceOrigo\n    BuildingComponent:\n      type: object\n      required:\n      - '@context'\n      properties:\n        '@id':\n          type: string\n        '@type':\n          type: string\n          default: BuildingComponent\n        label:\n          type: string\n        isPartOfBuilding:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: Building\n        hasSuperBuildingComponent:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: BuildingComponent\n        containsMountedDevice:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: Device\n        hasSubBuildingComponent:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: BuildingComponent\n    Device:\n      type: object\n      required:\n      - '@context'\n      properties:\n        '@id':\n          type: string\n        '@type':\n          type: string\n          default: Device\n        label:\n          type: string\n        hasSuperDevice:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: Device\n        quantityKind:\n          type: object\n          required:\n          - '@id'\n          properties:\n            '@id':\n              type: string\n            '@type':\n              type: string\n              default: QuantityKind\n        isMountedInBuildingComponent:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: BuildingComponent\n        associatedWithEvent:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: Event\n        deviceMeasurementUnit:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: MeasurementUnit\n        hasSubDevice:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: Device\n        servesBuilding:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: Building\n        servesBuildingComponent:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: BuildingComponent\n        servesDevice:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: Device\n    Event:\n      type: object\n      required:\n      - '@context'\n      properties:\n        '@id':\n          type: string\n        '@type':\n          type: string\n          default: Event\n        label:\n          type: string\n        eventMeasurementUnit:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: MeasurementUnit\n        hasCreatedTime:\n          type: array\n          items:\n            type: string\n            format: date-time\n        hasDeletedTime:\n          type: array\n          items:\n            type: string\n            format: date-time\n        hasDuration:\n          type: array\n          items:\n            type: number\n            format: double\n        hasObservationTime:\n          type: array\n          items:\n            type: string\n            format: date-time\n        hasPointInTime:\n          type: array\n          items:\n            type: string\n            format: date-time\n        hasReadTime:\n          type: array\n          items:\n            type: string\n            format: date-time\n        hasStartTime:\n          type: array\n          items:\n            type: string\n            format: date-time\n        hasStopTime:\n          type: array\n          items:\n            type: string\n            format: date-time\n        hasUpdatedTime:\n          type: array\n          items:\n            type: string\n            format: date-time\n    GeoReferenceOrigo:\n      type: object\n      required:\n      - '@context'\n      properties:\n        '@id':\n          type: string\n        '@type':\n          type: string\n          default: GeoReferenceOrigo\n        label:\n          type: string\n        geosparql:asGML:\n          type: array\n          items:\n            type: string\n        geosparql:asWKT:\n          type: array\n          items:\n            type: string\n        geosparql:hasSerialization:\n          type: array\n          items:\n            type: string\n        hasGeoReferenceBearing:\n          type: array\n          items:\n            type: number\n            format: double\n    Land:\n      type: object\n      required:\n      - '@context'\n      properties:\n        '@id':\n          type: string\n        '@type':\n          type: string\n          default: Land\n        label:\n          type: string\n        isPartOfRealEstate:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: RealEstate\n    MeasurementUnit:\n      type: object\n      required:\n      - '@context'\n      properties:\n        '@id':\n          type: string\n        '@type':\n          type: string\n          default: MeasurementUnit\n        label:\n          type: string\n    QuantityKind:\n      type: object\n      required:\n      - '@context'\n      properties:\n        '@id':\n          type: string\n        '@type':\n          type: string\n          default: QuantityKind\n        label:\n          type: string\n        qkMeasurementUnit:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: MeasurementUnit\n    RealEstate:\n      type: object\n      required:\n      - '@context'\n      properties:\n        '@id':\n          type: string\n        '@type':\n          type: string\n          default: RealEstate\n        label:\n          type: string\n        hasRealEstateComponent:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: RealEstateComponent\n    RealEstateComponent:\n      type: object\n      required:\n      - '@context'\n      properties:\n        '@id':\n          type: string\n        '@type':\n          type: string\n          default: RealEstateComponent\n        label:\n          type: string\n        isPartOfRealEstate:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: RealEstate\n    Room:\n      type: object\n      required:\n      - '@context'\n      properties:\n        '@id':\n          type: string\n        '@type':\n          type: string\n          default: Room\n        label:\n          type: string\n        isPartOfBuilding:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: Building\n        hasSuperBuildingComponent:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: BuildingComponent\n        containsMountedDevice:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: Device\n        hasSubBuildingComponent:\n          type: array\n          items:\n            type: object\n            required:\n            - '@id'\n            properties:\n              '@id':\n                type: string\n              '@type':\n                type: string\n                default: BuildingComponent\n    Context:\n      type: object\n      required:\n      - '@vocab'\n      - '@base'\n      - hydra\n      - geosparql\n      properties:\n        '@vocab':\n          type: string\n          format: uri\n          default: https://w3id.org/rec/core/\n        '@base':\n          type: string\n          format: uri\n        hydra:\n          type: string\n          format: uri\n          default: http://www.w3.org/ns/hydra/core#\n        label:\n          type: string\n          format: uri\n          default: http://www.w3.org/2000/01/rdf-schema#label\n        geosparql:\n          type: string\n          format: uri\n          default: http://www.opengis.net/ont/geosparql#\npaths:\n  /LoadedOntologies:\n    get:\n      summary: Get the set of ontologies that were imported by the root ontology when the API was generated.\n      parameters: []\n      responses:\n        200:\n          description: A list of ontologies used to generate this API. Note that while the prefix names used here correspond with the ones given in the JSON-LD @context for the supported data types, the prefix mapping in the API is based on the Ontology IRIs given in those @context blocks, which may differ from the values given here (which give priority to version IRIs).\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                - ''\n                properties:\n                  '':\n                    type: string\n                    format: uri\n                    enum:\n                    - https://w3id.org/rec/core/3.0/\n      tags: []\n  /geosparql:Geometry:\n    get:\n      summary: Get 'geosparql:Geometry' entities.\n      parameters:\n      - $ref: '#/components/parameters/pageParam'\n      - $ref: '#/components/parameters/sizeParam'\n      - $ref: '#/components/parameters/sortParam'\n      - name: geosparql:asGML\n        description: Filter value on property 'geosparql:asGML'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: geosparql:asWKT\n        description: Filter value on property 'geosparql:asWKT'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: geosparql:hasSerialization\n        description: Filter value on property 'geosparql:hasSerialization'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      responses:\n        400:\n          description: Bad Request\n        500:\n          description: Internal Server Error\n        200:\n          description: An array of 'geosparql:Geometry' objects.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/HydraCollectionWrapper'\n                - type: object\n                  properties:\n                    hydra:member:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/geosparql%3aGeometry'\n      tags:\n      - geosparql:Geometry\n    post:\n      summary: Create a new 'geosparql:Geometry' object.\n      parameters:\n      - name: entity\n        description: New 'geosparql:Geometry' entity that is to be added.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/geosparql%3aGeometry'\n        in: header\n      responses:\n        500:\n          description: Internal Server Error\n        400:\n          description: Bad Request\n        201:\n          description: Entity was successfully created (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/geosparql%3aGeometry'\n      tags:\n      - geosparql:Geometry\n  /geosparql:Geometry/{id}:\n    get:\n      summary: Get a specific 'geosparql:Geometry' object.\n      parameters:\n      - name: id\n        description: Id of 'geosparql:Geometry' to return.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'geosparql:Geometry' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: A 'geosparql:Geometry' object.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/geosparql%3aGeometry'\n      tags:\n      - geosparql:Geometry\n    put:\n      summary: Update an existing 'geosparql:Geometry' entity.\n      parameters:\n      - name: id\n        description: Id of 'geosparql:Geometry' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: entity\n        description: Updated data for 'geosparql:Geometry' entity.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/geosparql%3aGeometry'\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'geosparql:Geometry' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/geosparql%3aGeometry'\n      tags:\n      - geosparql:Geometry\n    patch:\n      summary: Update a single property on a specific 'geosparql:Geometry' object.\n      parameters:\n      - name: id\n        description: Id of 'geosparql:Geometry' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: patch\n        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/geosparql%3aGeometry'\n          - type: object\n            maxProperties: 2\n            minProperties: 2\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'geosparql:Geometry' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/geosparql%3aGeometry'\n      tags:\n      - geosparql:Geometry\n    delete:\n      summary: Delete a 'geosparql:Geometry' object.\n      parameters:\n      - name: id\n        description: Id of 'geosparql:Geometry' to delete.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'geosparql:Geometry' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: \"'geosparql:Geometry' entity was successfully deleted.\"\n      tags:\n      - geosparql:Geometry\n  /Building:\n    get:\n      summary: Get 'Building' entities.\n      parameters:\n      - $ref: '#/components/parameters/pageParam'\n      - $ref: '#/components/parameters/sizeParam'\n      - $ref: '#/components/parameters/sortParam'\n      - name: isPartOfRealEstate\n        description: Filter value on property 'isPartOfRealEstate'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: hasBuildingComponent\n        description: Filter value on property 'hasBuildingComponent'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: hasGeoReferenceOrigo\n        description: Filter value on property 'hasGeoReferenceOrigo'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      responses:\n        400:\n          description: Bad Request\n        500:\n          description: Internal Server Error\n        200:\n          description: An array of 'Building' objects.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/HydraCollectionWrapper'\n                - type: object\n                  properties:\n                    hydra:member:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/Building'\n      tags:\n      - Building\n    post:\n      summary: Create a new 'Building' object.\n      parameters:\n      - name: entity\n        description: New 'Building' entity that is to be added.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/Building'\n        in: header\n      responses:\n        500:\n          description: Internal Server Error\n        400:\n          description: Bad Request\n        201:\n          description: Entity was successfully created (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/Building'\n      tags:\n      - Building\n  /Building/{id}:\n    get:\n      summary: Get a specific 'Building' object.\n      parameters:\n      - name: id\n        description: Id of 'Building' to return.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'Building' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: A 'Building' object.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/Building'\n      tags:\n      - Building\n    put:\n      summary: Update an existing 'Building' entity.\n      parameters:\n      - name: id\n        description: Id of 'Building' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: entity\n        description: Updated data for 'Building' entity.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/Building'\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'Building' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/Building'\n      tags:\n      - Building\n    patch:\n      summary: Update a single property on a specific 'Building' object.\n      parameters:\n      - name: id\n        description: Id of 'Building' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: patch\n        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/Building'\n          - type: object\n            maxProperties: 2\n            minProperties: 2\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'Building' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/Building'\n      tags:\n      - Building\n    delete:\n      summary: Delete a 'Building' object.\n      parameters:\n      - name: id\n        description: Id of 'Building' to delete.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'Building' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: \"'Building' entity was successfully deleted.\"\n      tags:\n      - Building\n  /BuildingComponent:\n    get:\n      summary: Get 'BuildingComponent' entities.\n      parameters:\n      - $ref: '#/components/parameters/pageParam'\n      - $ref: '#/components/parameters/sizeParam'\n      - $ref: '#/components/parameters/sortParam'\n      - name: isPartOfBuilding\n        description: Filter value on property 'isPartOfBuilding'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: hasSuperBuildingComponent\n        description: Filter value on property 'hasSuperBuildingComponent'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: containsMountedDevice\n        description: Filter value on property 'containsMountedDevice'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: hasSubBuildingComponent\n        description: Filter value on property 'hasSubBuildingComponent'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      responses:\n        400:\n          description: Bad Request\n        500:\n          description: Internal Server Error\n        200:\n          description: An array of 'BuildingComponent' objects.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/HydraCollectionWrapper'\n                - type: object\n                  properties:\n                    hydra:member:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/BuildingComponent'\n      tags:\n      - BuildingComponent\n    post:\n      summary: Create a new 'BuildingComponent' object.\n      parameters:\n      - name: entity\n        description: New 'BuildingComponent' entity that is to be added.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/BuildingComponent'\n        in: header\n      responses:\n        500:\n          description: Internal Server Error\n        400:\n          description: Bad Request\n        201:\n          description: Entity was successfully created (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/BuildingComponent'\n      tags:\n      - BuildingComponent\n  /BuildingComponent/{id}:\n    get:\n      summary: Get a specific 'BuildingComponent' object.\n      parameters:\n      - name: id\n        description: Id of 'BuildingComponent' to return.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'BuildingComponent' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: A 'BuildingComponent' object.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/BuildingComponent'\n      tags:\n      - BuildingComponent\n    put:\n      summary: Update an existing 'BuildingComponent' entity.\n      parameters:\n      - name: id\n        description: Id of 'BuildingComponent' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: entity\n        description: Updated data for 'BuildingComponent' entity.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/BuildingComponent'\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'BuildingComponent' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/BuildingComponent'\n      tags:\n      - BuildingComponent\n    patch:\n      summary: Update a single property on a specific 'BuildingComponent' object.\n      parameters:\n      - name: id\n        description: Id of 'BuildingComponent' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: patch\n        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/BuildingComponent'\n          - type: object\n            maxProperties: 2\n            minProperties: 2\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'BuildingComponent' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/BuildingComponent'\n      tags:\n      - BuildingComponent\n    delete:\n      summary: Delete a 'BuildingComponent' object.\n      parameters:\n      - name: id\n        description: Id of 'BuildingComponent' to delete.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'BuildingComponent' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: \"'BuildingComponent' entity was successfully deleted.\"\n      tags:\n      - BuildingComponent\n  /Device:\n    get:\n      summary: Get 'Device' entities.\n      parameters:\n      - $ref: '#/components/parameters/pageParam'\n      - $ref: '#/components/parameters/sizeParam'\n      - $ref: '#/components/parameters/sortParam'\n      - name: hasSuperDevice\n        description: Filter value on property 'hasSuperDevice'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: quantityKind\n        description: Filter value on property 'quantityKind'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: isMountedInBuildingComponent\n        description: Filter value on property 'isMountedInBuildingComponent'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: associatedWithEvent\n        description: Filter value on property 'associatedWithEvent'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: deviceMeasurementUnit\n        description: Filter value on property 'deviceMeasurementUnit'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: hasSubDevice\n        description: Filter value on property 'hasSubDevice'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: servesBuilding\n        description: Filter value on property 'servesBuilding'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: servesBuildingComponent\n        description: Filter value on property 'servesBuildingComponent'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: servesDevice\n        description: Filter value on property 'servesDevice'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      responses:\n        400:\n          description: Bad Request\n        500:\n          description: Internal Server Error\n        200:\n          description: An array of 'Device' objects.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/HydraCollectionWrapper'\n                - type: object\n                  properties:\n                    hydra:member:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/Device'\n      tags:\n      - Device\n    post:\n      summary: Create a new 'Device' object.\n      parameters:\n      - name: entity\n        description: New 'Device' entity that is to be added.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/Device'\n        in: header\n      responses:\n        500:\n          description: Internal Server Error\n        400:\n          description: Bad Request\n        201:\n          description: Entity was successfully created (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/Device'\n      tags:\n      - Device\n  /Device/{id}:\n    get:\n      summary: Get a specific 'Device' object.\n      parameters:\n      - name: id\n        description: Id of 'Device' to return.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'Device' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: A 'Device' object.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/Device'\n      tags:\n      - Device\n    put:\n      summary: Update an existing 'Device' entity.\n      parameters:\n      - name: id\n        description: Id of 'Device' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: entity\n        description: Updated data for 'Device' entity.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/Device'\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'Device' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/Device'\n      tags:\n      - Device\n    patch:\n      summary: Update a single property on a specific 'Device' object.\n      parameters:\n      - name: id\n        description: Id of 'Device' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: patch\n        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/Device'\n          - type: object\n            maxProperties: 2\n            minProperties: 2\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'Device' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/Device'\n      tags:\n      - Device\n    delete:\n      summary: Delete a 'Device' object.\n      parameters:\n      - name: id\n        description: Id of 'Device' to delete.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'Device' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: \"'Device' entity was successfully deleted.\"\n      tags:\n      - Device\n  /Event:\n    get:\n      summary: Get 'Event' entities.\n      parameters:\n      - $ref: '#/components/parameters/pageParam'\n      - $ref: '#/components/parameters/sizeParam'\n      - $ref: '#/components/parameters/sortParam'\n      - name: eventMeasurementUnit\n        description: Filter value on property 'eventMeasurementUnit'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: hasCreatedTime\n        description: Filter value on property 'hasCreatedTime'.\n        schema:\n          $ref: '#/components/schemas/DateTimeFilter'\n        style: deepObject\n        in: query\n      - name: hasDeletedTime\n        description: Filter value on property 'hasDeletedTime'.\n        schema:\n          $ref: '#/components/schemas/DateTimeFilter'\n        style: deepObject\n        in: query\n      - name: hasDuration\n        description: Filter value on property 'hasDuration'.\n        schema:\n          $ref: '#/components/schemas/NumberFilter'\n        style: deepObject\n        in: query\n      - name: hasObservationTime\n        description: Filter value on property 'hasObservationTime'.\n        schema:\n          $ref: '#/components/schemas/DateTimeFilter'\n        style: deepObject\n        in: query\n      - name: hasPointInTime\n        description: Filter value on property 'hasPointInTime'.\n        schema:\n          $ref: '#/components/schemas/DateTimeFilter'\n        style: deepObject\n        in: query\n      - name: hasReadTime\n        description: Filter value on property 'hasReadTime'.\n        schema:\n          $ref: '#/components/schemas/DateTimeFilter'\n        style: deepObject\n        in: query\n      - name: hasStartTime\n        description: Filter value on property 'hasStartTime'.\n        schema:\n          $ref: '#/components/schemas/DateTimeFilter'\n        style: deepObject\n        in: query\n      - name: hasStopTime\n        description: Filter value on property 'hasStopTime'.\n        schema:\n          $ref: '#/components/schemas/DateTimeFilter'\n        style: deepObject\n        in: query\n      - name: hasUpdatedTime\n        description: Filter value on property 'hasUpdatedTime'.\n        schema:\n          $ref: '#/components/schemas/DateTimeFilter'\n        style: deepObject\n        in: query\n      responses:\n        400:\n          description: Bad Request\n        500:\n          description: Internal Server Error\n        200:\n          description: An array of 'Event' objects.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/HydraCollectionWrapper'\n                - type: object\n                  properties:\n                    hydra:member:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/Event'\n      tags:\n      - Event\n    post:\n      summary: Create a new 'Event' object.\n      parameters:\n      - name: entity\n        description: New 'Event' entity that is to be added.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/Event'\n        in: header\n      responses:\n        500:\n          description: Internal Server Error\n        400:\n          description: Bad Request\n        201:\n          description: Entity was successfully created (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/Event'\n      tags:\n      - Event\n  /Event/{id}:\n    get:\n      summary: Get a specific 'Event' object.\n      parameters:\n      - name: id\n        description: Id of 'Event' to return.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'Event' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: A 'Event' object.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/Event'\n      tags:\n      - Event\n    put:\n      summary: Update an existing 'Event' entity.\n      parameters:\n      - name: id\n        description: Id of 'Event' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: entity\n        description: Updated data for 'Event' entity.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/Event'\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'Event' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/Event'\n      tags:\n      - Event\n    patch:\n      summary: Update a single property on a specific 'Event' object.\n      parameters:\n      - name: id\n        description: Id of 'Event' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: patch\n        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/Event'\n          - type: object\n            maxProperties: 2\n            minProperties: 2\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'Event' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/Event'\n      tags:\n      - Event\n    delete:\n      summary: Delete a 'Event' object.\n      parameters:\n      - name: id\n        description: Id of 'Event' to delete.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'Event' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: \"'Event' entity was successfully deleted.\"\n      tags:\n      - Event\n  /GeoReferenceOrigo:\n    get:\n      summary: Get 'GeoReferenceOrigo' entities.\n      parameters:\n      - $ref: '#/components/parameters/pageParam'\n      - $ref: '#/components/parameters/sizeParam'\n      - $ref: '#/components/parameters/sortParam'\n      - name: geosparql:asGML\n        description: Filter value on property 'geosparql:asGML'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: geosparql:asWKT\n        description: Filter value on property 'geosparql:asWKT'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: geosparql:hasSerialization\n        description: Filter value on property 'geosparql:hasSerialization'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: hasGeoReferenceBearing\n        description: Filter value on property 'hasGeoReferenceBearing'.\n        schema:\n          $ref: '#/components/schemas/NumberFilter'\n        style: deepObject\n        in: query\n      responses:\n        400:\n          description: Bad Request\n        500:\n          description: Internal Server Error\n        200:\n          description: An array of 'GeoReferenceOrigo' objects.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/HydraCollectionWrapper'\n                - type: object\n                  properties:\n                    hydra:member:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/GeoReferenceOrigo'\n      tags:\n      - GeoReferenceOrigo\n    post:\n      summary: Create a new 'GeoReferenceOrigo' object.\n      parameters:\n      - name: entity\n        description: New 'GeoReferenceOrigo' entity that is to be added.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/GeoReferenceOrigo'\n        in: header\n      responses:\n        500:\n          description: Internal Server Error\n        400:\n          description: Bad Request\n        201:\n          description: Entity was successfully created (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/GeoReferenceOrigo'\n      tags:\n      - GeoReferenceOrigo\n  /GeoReferenceOrigo/{id}:\n    get:\n      summary: Get a specific 'GeoReferenceOrigo' object.\n      parameters:\n      - name: id\n        description: Id of 'GeoReferenceOrigo' to return.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'GeoReferenceOrigo' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: A 'GeoReferenceOrigo' object.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/GeoReferenceOrigo'\n      tags:\n      - GeoReferenceOrigo\n    put:\n      summary: Update an existing 'GeoReferenceOrigo' entity.\n      parameters:\n      - name: id\n        description: Id of 'GeoReferenceOrigo' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: entity\n        description: Updated data for 'GeoReferenceOrigo' entity.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/GeoReferenceOrigo'\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'GeoReferenceOrigo' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/GeoReferenceOrigo'\n      tags:\n      - GeoReferenceOrigo\n    patch:\n      summary: Update a single property on a specific 'GeoReferenceOrigo' object.\n      parameters:\n      - name: id\n        description: Id of 'GeoReferenceOrigo' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: patch\n        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/GeoReferenceOrigo'\n          - type: object\n            maxProperties: 2\n            minProperties: 2\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'GeoReferenceOrigo' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/GeoReferenceOrigo'\n      tags:\n      - GeoReferenceOrigo\n    delete:\n      summary: Delete a 'GeoReferenceOrigo' object.\n      parameters:\n      - name: id\n        description: Id of 'GeoReferenceOrigo' to delete.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'GeoReferenceOrigo' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: \"'GeoReferenceOrigo' entity was successfully deleted.\"\n      tags:\n      - GeoReferenceOrigo\n  /Land:\n    get:\n      summary: Get 'Land' entities.\n      parameters:\n      - $ref: '#/components/parameters/pageParam'\n      - $ref: '#/components/parameters/sizeParam'\n      - $ref: '#/components/parameters/sortParam'\n      - name: isPartOfRealEstate\n        description: Filter value on property 'isPartOfRealEstate'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      responses:\n        400:\n          description: Bad Request\n        500:\n          description: Internal Server Error\n        200:\n          description: An array of 'Land' objects.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/HydraCollectionWrapper'\n                - type: object\n                  properties:\n                    hydra:member:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/Land'\n      tags:\n      - Land\n    post:\n      summary: Create a new 'Land' object.\n      parameters:\n      - name: entity\n        description: New 'Land' entity that is to be added.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/Land'\n        in: header\n      responses:\n        500:\n          description: Internal Server Error\n        400:\n          description: Bad Request\n        201:\n          description: Entity was successfully created (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/Land'\n      tags:\n      - Land\n  /Land/{id}:\n    get:\n      summary: Get a specific 'Land' object.\n      parameters:\n      - name: id\n        description: Id of 'Land' to return.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'Land' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: A 'Land' object.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/Land'\n      tags:\n      - Land\n    put:\n      summary: Update an existing 'Land' entity.\n      parameters:\n      - name: id\n        description: Id of 'Land' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: entity\n        description: Updated data for 'Land' entity.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/Land'\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'Land' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/Land'\n      tags:\n      - Land\n    patch:\n      summary: Update a single property on a specific 'Land' object.\n      parameters:\n      - name: id\n        description: Id of 'Land' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: patch\n        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/Land'\n          - type: object\n            maxProperties: 2\n            minProperties: 2\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'Land' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/Land'\n      tags:\n      - Land\n    delete:\n      summary: Delete a 'Land' object.\n      parameters:\n      - name: id\n        description: Id of 'Land' to delete.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'Land' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: \"'Land' entity was successfully deleted.\"\n      tags:\n      - Land\n  /MeasurementUnit:\n    get:\n      summary: Get 'MeasurementUnit' entities.\n      parameters:\n      - $ref: '#/components/parameters/pageParam'\n      - $ref: '#/components/parameters/sizeParam'\n      - $ref: '#/components/parameters/sortParam'\n      responses:\n        400:\n          description: Bad Request\n        500:\n          description: Internal Server Error\n        200:\n          description: An array of 'MeasurementUnit' objects.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/HydraCollectionWrapper'\n                - type: object\n                  properties:\n                    hydra:member:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/MeasurementUnit'\n      tags:\n      - MeasurementUnit\n    post:\n      summary: Create a new 'MeasurementUnit' object.\n      parameters:\n      - name: entity\n        description: New 'MeasurementUnit' entity that is to be added.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/MeasurementUnit'\n        in: header\n      responses:\n        500:\n          description: Internal Server Error\n        400:\n          description: Bad Request\n        201:\n          description: Entity was successfully created (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/MeasurementUnit'\n      tags:\n      - MeasurementUnit\n  /MeasurementUnit/{id}:\n    get:\n      summary: Get a specific 'MeasurementUnit' object.\n      parameters:\n      - name: id\n        description: Id of 'MeasurementUnit' to return.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'MeasurementUnit' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: A 'MeasurementUnit' object.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/MeasurementUnit'\n      tags:\n      - MeasurementUnit\n    put:\n      summary: Update an existing 'MeasurementUnit' entity.\n      parameters:\n      - name: id\n        description: Id of 'MeasurementUnit' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: entity\n        description: Updated data for 'MeasurementUnit' entity.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/MeasurementUnit'\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'MeasurementUnit' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/MeasurementUnit'\n      tags:\n      - MeasurementUnit\n    patch:\n      summary: Update a single property on a specific 'MeasurementUnit' object.\n      parameters:\n      - name: id\n        description: Id of 'MeasurementUnit' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: patch\n        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/MeasurementUnit'\n          - type: object\n            maxProperties: 2\n            minProperties: 2\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'MeasurementUnit' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/MeasurementUnit'\n      tags:\n      - MeasurementUnit\n    delete:\n      summary: Delete a 'MeasurementUnit' object.\n      parameters:\n      - name: id\n        description: Id of 'MeasurementUnit' to delete.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'MeasurementUnit' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: \"'MeasurementUnit' entity was successfully deleted.\"\n      tags:\n      - MeasurementUnit\n  /QuantityKind:\n    get:\n      summary: Get 'QuantityKind' entities.\n      parameters:\n      - $ref: '#/components/parameters/pageParam'\n      - $ref: '#/components/parameters/sizeParam'\n      - $ref: '#/components/parameters/sortParam'\n      - name: qkMeasurementUnit\n        description: Filter value on property 'qkMeasurementUnit'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      responses:\n        400:\n          description: Bad Request\n        500:\n          description: Internal Server Error\n        200:\n          description: An array of 'QuantityKind' objects.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/HydraCollectionWrapper'\n                - type: object\n                  properties:\n                    hydra:member:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/QuantityKind'\n      tags:\n      - QuantityKind\n    post:\n      summary: Create a new 'QuantityKind' object.\n      parameters:\n      - name: entity\n        description: New 'QuantityKind' entity that is to be added.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/QuantityKind'\n        in: header\n      responses:\n        500:\n          description: Internal Server Error\n        400:\n          description: Bad Request\n        201:\n          description: Entity was successfully created (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/QuantityKind'\n      tags:\n      - QuantityKind\n  /QuantityKind/{id}:\n    get:\n      summary: Get a specific 'QuantityKind' object.\n      parameters:\n      - name: id\n        description: Id of 'QuantityKind' to return.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'QuantityKind' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: A 'QuantityKind' object.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/QuantityKind'\n      tags:\n      - QuantityKind\n    put:\n      summary: Update an existing 'QuantityKind' entity.\n      parameters:\n      - name: id\n        description: Id of 'QuantityKind' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: entity\n        description: Updated data for 'QuantityKind' entity.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/QuantityKind'\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'QuantityKind' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/QuantityKind'\n      tags:\n      - QuantityKind\n    patch:\n      summary: Update a single property on a specific 'QuantityKind' object.\n      parameters:\n      - name: id\n        description: Id of 'QuantityKind' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: patch\n        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/QuantityKind'\n          - type: object\n            maxProperties: 2\n            minProperties: 2\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'QuantityKind' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/QuantityKind'\n      tags:\n      - QuantityKind\n    delete:\n      summary: Delete a 'QuantityKind' object.\n      parameters:\n      - name: id\n        description: Id of 'QuantityKind' to delete.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'QuantityKind' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: \"'QuantityKind' entity was successfully deleted.\"\n      tags:\n      - QuantityKind\n  /RealEstate:\n    get:\n      summary: Get 'RealEstate' entities.\n      parameters:\n      - $ref: '#/components/parameters/pageParam'\n      - $ref: '#/components/parameters/sizeParam'\n      - $ref: '#/components/parameters/sortParam'\n      - name: hasRealEstateComponent\n        description: Filter value on property 'hasRealEstateComponent'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      responses:\n        400:\n          description: Bad Request\n        500:\n          description: Internal Server Error\n        200:\n          description: An array of 'RealEstate' objects.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/HydraCollectionWrapper'\n                - type: object\n                  properties:\n                    hydra:member:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/RealEstate'\n      tags:\n      - RealEstate\n    post:\n      summary: Create a new 'RealEstate' object.\n      parameters:\n      - name: entity\n        description: New 'RealEstate' entity that is to be added.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/RealEstate'\n        in: header\n      responses:\n        500:\n          description: Internal Server Error\n        400:\n          description: Bad Request\n        201:\n          description: Entity was successfully created (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/RealEstate'\n      tags:\n      - RealEstate\n  /RealEstate/{id}:\n    get:\n      summary: Get a specific 'RealEstate' object.\n      parameters:\n      - name: id\n        description: Id of 'RealEstate' to return.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'RealEstate' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: A 'RealEstate' object.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/RealEstate'\n      tags:\n      - RealEstate\n    put:\n      summary: Update an existing 'RealEstate' entity.\n      parameters:\n      - name: id\n        description: Id of 'RealEstate' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: entity\n        description: Updated data for 'RealEstate' entity.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/RealEstate'\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'RealEstate' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/RealEstate'\n      tags:\n      - RealEstate\n    patch:\n      summary: Update a single property on a specific 'RealEstate' object.\n      parameters:\n      - name: id\n        description: Id of 'RealEstate' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: patch\n        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/RealEstate'\n          - type: object\n            maxProperties: 2\n            minProperties: 2\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'RealEstate' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/RealEstate'\n      tags:\n      - RealEstate\n    delete:\n      summary: Delete a 'RealEstate' object.\n      parameters:\n      - name: id\n        description: Id of 'RealEstate' to delete.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'RealEstate' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: \"'RealEstate' entity was successfully deleted.\"\n      tags:\n      - RealEstate\n  /RealEstateComponent:\n    get:\n      summary: Get 'RealEstateComponent' entities.\n      parameters:\n      - $ref: '#/components/parameters/pageParam'\n      - $ref: '#/components/parameters/sizeParam'\n      - $ref: '#/components/parameters/sortParam'\n      - name: isPartOfRealEstate\n        description: Filter value on property 'isPartOfRealEstate'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      responses:\n        400:\n          description: Bad Request\n        500:\n          description: Internal Server Error\n        200:\n          description: An array of 'RealEstateComponent' objects.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/HydraCollectionWrapper'\n                - type: object\n                  properties:\n                    hydra:member:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/RealEstateComponent'\n      tags:\n      - RealEstateComponent\n    post:\n      summary: Create a new 'RealEstateComponent' object.\n      parameters:\n      - name: entity\n        description: New 'RealEstateComponent' entity that is to be added.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/RealEstateComponent'\n        in: header\n      responses:\n        500:\n          description: Internal Server Error\n        400:\n          description: Bad Request\n        201:\n          description: Entity was successfully created (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/RealEstateComponent'\n      tags:\n      - RealEstateComponent\n  /RealEstateComponent/{id}:\n    get:\n      summary: Get a specific 'RealEstateComponent' object.\n      parameters:\n      - name: id\n        description: Id of 'RealEstateComponent' to return.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'RealEstateComponent' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: A 'RealEstateComponent' object.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/RealEstateComponent'\n      tags:\n      - RealEstateComponent\n    put:\n      summary: Update an existing 'RealEstateComponent' entity.\n      parameters:\n      - name: id\n        description: Id of 'RealEstateComponent' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: entity\n        description: Updated data for 'RealEstateComponent' entity.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/RealEstateComponent'\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'RealEstateComponent' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/RealEstateComponent'\n      tags:\n      - RealEstateComponent\n    patch:\n      summary: Update a single property on a specific 'RealEstateComponent' object.\n      parameters:\n      - name: id\n        description: Id of 'RealEstateComponent' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: patch\n        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/RealEstateComponent'\n          - type: object\n            maxProperties: 2\n            minProperties: 2\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'RealEstateComponent' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/RealEstateComponent'\n      tags:\n      - RealEstateComponent\n    delete:\n      summary: Delete a 'RealEstateComponent' object.\n      parameters:\n      - name: id\n        description: Id of 'RealEstateComponent' to delete.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'RealEstateComponent' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: \"'RealEstateComponent' entity was successfully deleted.\"\n      tags:\n      - RealEstateComponent\n  /Room:\n    get:\n      summary: Get 'Room' entities.\n      parameters:\n      - $ref: '#/components/parameters/pageParam'\n      - $ref: '#/components/parameters/sizeParam'\n      - $ref: '#/components/parameters/sortParam'\n      - name: isPartOfBuilding\n        description: Filter value on property 'isPartOfBuilding'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: hasSuperBuildingComponent\n        description: Filter value on property 'hasSuperBuildingComponent'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: containsMountedDevice\n        description: Filter value on property 'containsMountedDevice'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      - name: hasSubBuildingComponent\n        description: Filter value on property 'hasSubBuildingComponent'.\n        schema:\n          $ref: '#/components/schemas/StringFilter'\n        style: deepObject\n        in: query\n      responses:\n        400:\n          description: Bad Request\n        500:\n          description: Internal Server Error\n        200:\n          description: An array of 'Room' objects.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/HydraCollectionWrapper'\n                - type: object\n                  properties:\n                    hydra:member:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/Room'\n      tags:\n      - Room\n    post:\n      summary: Create a new 'Room' object.\n      parameters:\n      - name: entity\n        description: New 'Room' entity that is to be added.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/Room'\n        in: header\n      responses:\n        500:\n          description: Internal Server Error\n        400:\n          description: Bad Request\n        201:\n          description: Entity was successfully created (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/Room'\n      tags:\n      - Room\n  /Room/{id}:\n    get:\n      summary: Get a specific 'Room' object.\n      parameters:\n      - name: id\n        description: Id of 'Room' to return.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'Room' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: A 'Room' object.\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/Room'\n      tags:\n      - Room\n    put:\n      summary: Update an existing 'Room' entity.\n      parameters:\n      - name: id\n        description: Id of 'Room' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: entity\n        description: Updated data for 'Room' entity.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/Room'\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'Room' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/Room'\n      tags:\n      - Room\n    patch:\n      summary: Update a single property on a specific 'Room' object.\n      parameters:\n      - name: id\n        description: Id of 'Room' to update.\n        required: true\n        schema:\n          type: string\n        in: path\n      - name: patch\n        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.\n        required: true\n        schema:\n          allOf:\n          - type: object\n            required:\n            - '@context'\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n          - $ref: '#/components/schemas/Room'\n          - type: object\n            maxProperties: 2\n            minProperties: 2\n        in: header\n      responses:\n        400:\n          description: Bad Request\n        404:\n          description: An object of type 'Room' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: Entity was updated successfully (new representation returned).\n          content:\n            application/jsonld:\n              schema:\n                allOf:\n                - type: object\n                  required:\n                  - '@context'\n                  properties:\n                    '@context':\n                      $ref: '#/components/schemas/Context'\n                - $ref: '#/components/schemas/Room'\n      tags:\n      - Room\n    delete:\n      summary: Delete a 'Room' object.\n      parameters:\n      - name: id\n        description: Id of 'Room' to delete.\n        required: true\n        schema:\n          type: string\n        in: path\n      responses:\n        404:\n          description: An object of type 'Room' with the specified ID was not found.\n        500:\n          description: Internal Server Error\n        200:\n          description: \"'Room' entity was successfully deleted.\"\n      tags:\n      - Room\nservers:\n- url: http://localhost:8080/\n\n\n\n",
			"canonicalURL": "/github.com/RealEstateCore/OWL2OAS@14e0ea64870883f6657eb3ed5eddebe2a81b5612/-/blob/OWL2OAS/examples/rec-core-v3.0.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/RealEstateCore/OWL2OAS/blob/14e0ea64870883f6657eb3ed5eddebe2a81b5612/OWL2OAS/examples/rec-core-v3.0.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/Event\": post: parameters: parse parameter \"entity\": at 1:30309: invalid schema:style:explode combination: (\"\":\"simple\":false)"
}