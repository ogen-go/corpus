{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/geoadmin/service-stac"
		},
		"file": {
			"name": "openapitransactional.yaml",
			"size": 0,
			"path": "spec/static/spec/v0.9/openapitransactional.yaml",
			"byteSize": 126945,
			"content": "openapi: 3.0.1\ninfo:\n  contact:\n    name: API Specification (based on STAC)\n    url: http://data.geo.admin.ch/api/stac/v0.9/\n  description: \u003e-\n    This is an OpenAPI definition of the API to query and access federal geodata on\n    data.geo.admin.ch. The API is based on the core SpatioTemporal Asset Catalog API\n    specification [STAC](http://stacspec.org) and adds two extensions for extended\n    searching possibilities.\n  title: The SpatioTemporal Asset Catalog API for data.geo.admin.ch\n  version: 0.9.0\nservers:\n- description: Data.geo.admin.ch\n  url: http://data.geo.admin.ch/api/stac/v0.9\ntags:\n- description: Essential characteristics of this API\n  name: Capabilities\n- description: Access to data (features)\n  name: Data\n- description: Extension to OGC API - Features to support STAC metadata model and\n    search API\n  name: STAC\n- name: Data Management\n  description: |\n    Metadata management requests. Theses requests are used to create, update or delete the STAC\n    metadata.\n\n    *NOTE: these requests require authentication as described in [here](#tag/Authentication).*\n- name: Asset Upload Management\n  description: |\n    Asset file can be uploaded via the STAC API using the following requests.\n\n    *NOTE: the POST requests require authentication as described in [here](#tag/Authentication).*\n\n    ### Example\n\n    ```python\n    import os\n    import hashlib\n    from base64 import b64encode\n\n    import requests\n    import multihash\n\n    # variables\n    scheme = 'https'\n    hostname = 'data.geo.admin.ch'\n    collection = 'ch.swisstopo.pixelkarte-farbe-pk200.noscale'\n    item = 'smr200-200-4-2016'\n    asset = 'smr200-200-4-2016-2056-kgrs-10.tiff'\n    asset_path = f'collections/{collection}/items/{item}/assets/{asset}'\n    user = os.environ.get('STAC_USER', 'unknown-user')\n    password = os.environ.get('STAC_PASSWORD', 'unknown-password')\n\n    with open('smr200-200-4-2016-2056-kgrs-10.tiff', 'rb') as fd:\n      data = fd.read()\n\n    checksum_multihash = multihash.to_hex_string(multihash.encode(hashlib.sha256(data).digest(), 'sha2-256'))\n    md5 = b64encode(hashlib.md5(data).digest()).decode('utf-8')\n\n    # 1. Create a multipart upload\n    response = requests.post(\n      f\"{scheme}://{hostname}/api/stac/v0.9/{asset_path}/uploads\",\n      auth=(user, password),\n      json={\n        \"number_parts\": 1,\n        \"md5_parts\": [{\n          \"part_number\": 1,\n          \"md5\": md5\n        }],\n        \"checksum:multihash\": checksum_multihash\n      }\n    )\n    upload_id = response.json()['upload_id']\n\n    # 2. Upload the part using the presigned url\n    response = requests.put(response.json()['urls'][0]['url'], data=data, headers={'Content-MD5': md5})\n    etag = response.headers['ETag']\n\n    # 3. Complete the upload\n    response = requests.post(\n      f\"{scheme}://{hostname}/api/stac/v0.9/{asset_path}/uploads/{upload_id}/complete\",\n      auth=(user, password),\n      json={'parts': [{'etag': etag, 'part_number': 1}]}\n    )\n    ```\n\n    See https://aws.amazon.com/premiumsupport/knowledge-center/data-integrity-s3/ for other examples on how to compute the base64 MD5 of a part.\n- name: Authentication\n  description: |\n    All write requests require authentication. There is currently three type of supported authentications:\n\n    * [Session authentication](#section/Session-authentication)\n    * [Basic authentication](#section/Basic-authentication)\n    * [Token authentication](#section/Token-authentication)\n\n    ## Session authentication\n\n    When using the browsable API the user can simply use the admin interface for logging in.\n    Once logged in, the browsable API can be used to perform write requests.\n\n    ## Basic authentication\n\n    The username and password for authentication can be added to every write request the user wants to perform.\n    Here is an example of posting an asset using curl (_username_=\"MickeyMouse\", _password_=\"I_love_Minnie_Mouse\"):\n\n    ```\n    curl --request POST \\\n      --user MickeyMouse:I_love_Minnie_Mouse \\\n      --url https://data.geoadmin.ch/api/stac/v0.9/collections/ch.swisstopo.swisstlmregio/items/swisstlmregio-2020/assets \\\n      --header 'Content-Type: application/json' \\\n      --data '{\n        \"id\": \"fancy_unique_id\",\n        \"item\": \"swisstlmregio-2020\",\n        \"title\": \"My title\",\n        \"type\": \"application/x.filegdb+zip\",\n        \"description\": \"My description\",\n        \"proj:epsg\": 2056,\n        \"checksum:multihash\": \"12200ADEC47F803A8CF1055ED36750B3BA573C79A3AF7DA6D6F5A2AED03EA16AF3BC\"\n    }'\n    ```\n\n    ## Token authentication\n\n    A user specific token for authentication can be added to every write request the user wants to perform.\n    Here is an example of posting an asset using curl:\n\n    ```\n    curl --request POST \\\n      --url https://data.geoadmin.ch/api/stac/v0.9/collections/ch.swisstopo.swisstlmregio/items/swisstlmregio-2020/assets \\\n      --header 'Authorization: Token ccecf40693bfc52ba090cd46eb7f19e723fe831f' \\\n      --header 'Content-Type: application/json' \\\n      --data '{\n        \"id\": \"fancy_unique_id\",\n        \"item\": \"swisstlmregio-2020\",\n        \"title\": \"My title\",\n        \"type\": \"application/x.filegdb+zip\",\n        \"description\": \"My description\",\n        \"proj:epsg\": 2056,\n        \"checksum:multihash\": \"12200ADEC47F803A8CF1055ED36750B3BA573C79A3AF7DA6D6F5A2AED03EA16AF3BC\"\n    }'\n    ```\n\n    Tokens can either be generated in the admin interface or existing users can perform a POST request\n    on the get-token endpoint to request a token (also see [Request token for token authentication](#operation/getToken)).\n    Here is an example using curl:\n\n    ```\n    curl --request POST \\\n      --url https://data.geoadmin.ch/api/stac/get-token \\\n      --header 'Content-Type: application/json' \\\n      --data '{\"username\": \"MickeyMouse\", \"password\": \"I_love_Minnie_Mouse\"}'\n    ```\npaths:\n  /:\n    get:\n      description: \u003e-\n        The landing page provides links to the API definition, the conformance statements\n        and to the feature collections in this dataset.\n      operationId: getLandingPage\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/LandingPage\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Landing page\n      tags:\n      - Capabilities\n  /collections:\n    get:\n      operationId: getCollections\n      parameters:\n      - $ref: \"#/components/parameters/limit\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Collections\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Fetch collections\n      description: The feature collections in the dataset\n      tags:\n      - Data\n  /collections/{collectionId}:\n    get:\n      operationId: describeCollection\n      parameters:\n      - $ref: \"#/components/parameters/collectionId\"\n      - $ref: \"#/components/parameters/IfMatch\"\n      - $ref: \"#/components/parameters/IfNoneMatch\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Collection\"\n        \"304\":\n          $ref: \"#/components/responses/NotModified\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"#/components/responses/PreconditionFailed\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Fetch a single collection\n      description: Describe the feature collection with id `collectionId`\n      tags:\n      - Data\n    put:\n      tags:\n      - Data Management\n      summary: Update or create a collection\n      description: \u003e-\n        Update or create a collection with Id `collectionId` with a complete collection\n        definition. If the collection doesn't exists it is then created.\n      operationId: updateCollection\n      parameters:\n      - $ref: \"#/components/parameters/collectionId\"\n      - $ref: \"#/components/parameters/IfMatchWrite\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/collectionWrite\"\n            example:\n              description: The National Map 1:200,000 is a topographic map giving\n                an overview of Switzerland.\n              id: ch.swisstopo.pixelkarte-farbe-pk200.noscale\n              license: proprietary\n              links:\n              - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html\n                rel: license\n                title: Licence for the free geodata of the Federal Office of Topography\n                  swisstopo\n              - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df\n                rel: describedby\n              providers:\n              - name: Federal Office of Topography - swisstopo\n                roles:\n                - producer\n                - licensor\n                url: https://www.swisstopo.admin.ch\n              title: National Map 1:200'000\n      responses:\n        \"200\":\n          description: Returns the updated Collection\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/collection\"\n        \"201\":\n          description: Returns the created Collection\n          headers:\n            Location:\n              description: A link to the collection\n              schema:\n                type: string\n                format: url\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/collection\"\n        \"403\":\n          $ref: \"#/components/responses/PermissionDenied\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"#/components/responses/PreconditionFailed\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n    patch:\n      tags:\n      - Data Management\n      summary: Partial update of a collection\n      description: \u003e-\n        Update an existing collection with Id `collectionId` with a partial collection\n        definition\n      operationId: partialUpdateCollection\n      parameters:\n      - $ref: \"#/components/parameters/collectionId\"\n      - $ref: \"#/components/parameters/IfMatch\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/collectionWrite\"\n            example:\n              id: ch.swisstopo.pixelkarte-farbe-pk200.noscale\n              license: proprietary\n              links:\n              - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html\n                rel: license\n                title: Licence for the free geodata of the Federal Office of Topography\n                  swisstopo\n              - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df\n                rel: describedby\n              providers:\n              - name: Federal Office of Topography - swisstopo\n                roles:\n                - producer\n                - licensor\n                url: https://www.swisstopo.admin.ch\n              title: National Map 1:200'000\n      responses:\n        \"200\":\n          description: Returns the updated Collection\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/collection\"\n        \"403\":\n          $ref: \"#/components/responses/PermissionDenied\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"#/components/responses/PreconditionFailed\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n  /collections/{collectionId}/items:\n    get:\n      description: \u003e-\n        Fetch features of the feature collection with id `collectionId`.\n\n\n        Every feature in a dataset belongs to a collection. A dataset may consist\n        of multiple feature collections. A feature collection is often a collection\n        of features of a similar type, based on a common schema.\n\n\n        Use content negotiation to request HTML or GeoJSON.\n      operationId: getFeatures\n      parameters:\n      - $ref: \"#/components/parameters/collectionId\"\n      - $ref: \"#/components/parameters/limit\"\n      - $ref: \"#/components/parameters/bbox\"\n      - $ref: \"#/components/parameters/datetime\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Features\"\n        \"400\":\n          $ref: \"#/components/responses/InvalidParameter\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Fetch features\n      tags:\n      - Data\n  /collections/{collectionId}/items/{featureId}:\n    get:\n      description: \u003e-\n        Fetch the feature with id `featureId` in the feature collection with id `collectionId`.\n\n\n        Use content negotiation to request HTML or GeoJSON.\n      operationId: getFeature\n      parameters:\n      - $ref: \"#/components/parameters/collectionId\"\n      - $ref: \"#/components/parameters/featureId\"\n      - $ref: \"#/components/parameters/IfMatch\"\n      - $ref: \"#/components/parameters/IfNoneMatch\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Feature\"\n        \"304\":\n          $ref: \"#/components/responses/NotModified\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"#/components/responses/PreconditionFailed\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Fetch a single feature\n      tags:\n      - Data\n    put:\n      summary: Update or create a feature\n      description: \u003e-\n        Update or create a feature with Id `featureId` with a complete feature definition.\n        If the feature doesn't exists it is then created.\n\n\n        *NOTE: Optional fields that are not part of the PUT payload, will be erased\n        in the resource. For example if the resource has a properties.title and the\n        PUT payload doesn't, then the resource's properties.title will be removed.*\n      operationId: putFeature\n      tags:\n      - Data Management\n      parameters:\n      - $ref: \"#/components/parameters/collectionId\"\n      - $ref: \"#/components/parameters/featureId\"\n      - $ref: \"#/components/parameters/IfMatchWrite\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/updateItem\"\n            example:\n              id: cs3-20160503_132131_05\n              geometry:\n                type: Polygon\n                coordinates:\n                - - - 7.0906823\n                    - 45.9160584\n                  - - 7.1035698\n                    - 45.9160977\n                  - - 7.1035146\n                    - 45.925093\n                  - - 7.0906249\n                    - 45.9250537\n                  - - 7.0906823\n                    - 45.9160584\n              properties:\n                datetime: \"2016-05-03T13:22:30.040Z\"\n                title: A CS3 item\n              links:\n              - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html\n                rel: license\n                title: Licence for the free geodata of the Federal Office of Topography\n                  swisstopo\n              - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df\n                rel: describedby\n      responses:\n        \"200\":\n          description: Returns the updated Item\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/item\"\n        \"201\":\n          description: Return the created Item.\n          headers:\n            Location:\n              description: A link to the item\n              schema:\n                type: string\n                format: url\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/item\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"403\":\n          $ref: \"#/components/responses/PermissionDenied\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"#/components/responses/PreconditionFailed\"\n        5XX:\n          $ref: \"#/components/responses/ServerError\"\n    patch:\n      summary: Update an existing feature by Id with a partial item definition\n      description: \u003e-\n        Use this method to update an existing feature. Requires a JSON fragment (containing\n        the fields to be updated) be submitted.\n      operationId: patchFeature\n      tags:\n      - Data Management\n      parameters:\n      - $ref: \"#/components/parameters/collectionId\"\n      - $ref: \"#/components/parameters/featureId\"\n      - $ref: \"#/components/parameters/IfMatchWrite\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/partialItem\"\n      responses:\n        \"200\":\n          description: Returns the updated Item\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/item\"\n        \"201\":\n          description: Returns the created Item\n          headers:\n            Location:\n              description: A link to the item\n              schema:\n                type: string\n                format: url\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/item\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"403\":\n          $ref: \"#/components/responses/PermissionDenied\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"#/components/responses/PreconditionFailed\"\n        5XX:\n          $ref: \"#/components/responses/ServerError\"\n    delete:\n      summary: Delete an existing feature by Id\n      description: Use this method to delete an existing feature/item.\n      operationId: deleteFeature\n      tags:\n      - Data Management\n      parameters:\n      - $ref: \"#/components/parameters/collectionId\"\n      - $ref: \"#/components/parameters/featureId\"\n      - $ref: \"#/components/parameters/IfMatchWrite\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/DeletedResource\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"#/components/responses/PreconditionFailed\"\n        5XX:\n          $ref: \"#/components/responses/ServerError\"\n  /conformance:\n    get:\n      description: \u003e-\n        A list of all conformance classes specified in a standard that the server\n        conforms to.\n      operationId: getConformanceDeclaration\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ConformanceDeclaration\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Information about specifications that this API conforms to\n      tags:\n      - Capabilities\n  /search:\n    get:\n      description: \u003e-\n        Retrieve Items matching filters. Intended as a shorthand API for simple queries.\n      operationId: getSearchSTAC\n      parameters:\n      - $ref: \"#/components/parameters/bbox\"\n      - $ref: \"#/components/parameters/datetime\"\n      - $ref: \"#/components/parameters/limit\"\n      - $ref: \"#/components/parameters/ids\"\n      - $ref: \"#/components/parameters/collectionsArray\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/itemsSearchGet\"\n          description: A feature collection.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Search STAC items with simple filtering.\n      tags:\n      - STAC\n    post:\n      description: \u003e-\n        Retrieve items matching filters. Intended as the standard, full-featured query\n        API.\n      operationId: postSearchSTAC\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/searchBody\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/itemsSearchPost\"\n          description: A feature collection.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Search STAC items with full-featured filtering.\n      tags:\n      - STAC\n  /collections/{collectionId}/items/{featureId}/assets:\n    get:\n      description: \u003e-\n        Fetch assets of the item with id `featureId`.\n\n        Every asset belongs to an item.\n      operationId: getAssets\n      parameters:\n      - $ref: \"#/components/parameters/collectionId\"\n      - $ref: \"#/components/parameters/featureId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Assets\"\n        \"400\":\n          $ref: \"#/components/responses/InvalidParameter\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Fetch all assets for a feature\n      tags:\n      - Data\n  /collections/{collectionId}/items/{featureId}/assets/{assetId}:\n    get:\n      description: \u003e-\n        Fetch the asset with id `assetId` of the feature with id `featureId` in the\n        feature collection with id `collectionId`.\n      operationId: getAsset\n      parameters:\n      - $ref: \"#/components/parameters/collectionId\"\n      - $ref: \"#/components/parameters/featureId\"\n      - $ref: \"#/components/parameters/assetId\"\n      - $ref: \"#/components/parameters/IfMatch\"\n      - $ref: \"#/components/parameters/IfNoneMatch\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Asset\"\n        \"304\":\n          $ref: \"#/components/responses/NotModified\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"#/components/responses/PreconditionFailed\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Fetch a single asset\n      tags:\n      - Data\n    put:\n      summary: Update or create an asset\n      description: \u003e-\n        Update or create an asset with Id `assetId` with a complete asset definition.\n        If the asset doesn't exists it is then created.\n\n\n        *Note: to upload an asset file see [Asset Upload Management](#tag/Asset-Upload-Management)*\n      operationId: putAsset\n      tags:\n      - Data Management\n      parameters:\n      - $ref: \"#/components/parameters/collectionId\"\n      - $ref: \"#/components/parameters/featureId\"\n      - $ref: \"#/components/parameters/assetId\"\n      - $ref: \"#/components/parameters/IfMatchWrite\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/readUpdateAsset\"\n      responses:\n        \"200\":\n          description: Asset has been successfully updated.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/readUpdateAsset\"\n        \"201\":\n          description: Asset has been newly created.\n          headers:\n            Location:\n              description: A link to the asset\n              schema:\n                type: string\n                format: url\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/createAsset\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"#/components/responses/PreconditionFailed\"\n        5XX:\n          $ref: \"#/components/responses/ServerError\"\n    patch:\n      summary: Update an existing asset by Id with a partial asset definition\n      description: \u003e-\n        Use this method to update an existing asset. Requires a JSON fragment (containing\n        the fields to be updated) be submitted.\n\n\n        *Note: to upload an asset file see [Asset Upload Management](#tag/Asset-Upload-Management)*\n      operationId: patchAsset\n      tags:\n      - Data Management\n      parameters:\n      - $ref: \"#/components/parameters/collectionId\"\n      - $ref: \"#/components/parameters/featureId\"\n      - $ref: \"#/components/parameters/assetId\"\n      - $ref: \"#/components/parameters/IfMatchWrite\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/readUpdateAsset\"\n      responses:\n        \"200\":\n          description: Returns the updated Asset.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/readUpdateAsset\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"#/components/responses/PreconditionFailed\"\n        5XX:\n          $ref: \"#/components/responses/ServerError\"\n    delete:\n      summary: Delete an existing asset by Id\n      description: \u003e-\n        Use this method to delete an existing asset.\n\n\n        **NOTE: Asset file on S3 will be also removed !**\n      operationId: deleteAsset\n      tags:\n      - Data Management\n      parameters:\n      - $ref: \"#/components/parameters/collectionId\"\n      - $ref: \"#/components/parameters/featureId\"\n      - $ref: \"#/components/parameters/assetId\"\n      - $ref: \"#/components/parameters/IfMatchWrite\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/DeletedResource\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"#/components/responses/PreconditionFailed\"\n        5XX:\n          $ref: \"#/components/responses/ServerError\"\n  /collections/{collectionId}/items/{featureId}/assets/{assetId}/uploads:\n    parameters:\n    - $ref: \"#/components/parameters/collectionId\"\n    - $ref: \"#/components/parameters/featureId\"\n    - $ref: \"#/components/parameters/assetId\"\n    get:\n      tags:\n      - Asset Upload Management\n      summary: List all Asset's multipart uploads\n      description: \u003e-\n        Return a list of all Asset's multipart uploads that are in progress and have\n        been completed or aborted.\n      operationId: getAssetUploads\n      parameters:\n      - name: status\n        in: query\n        description: Filter the list by status.\n        schema:\n          $ref: \"#/components/schemas/status\"\n      responses:\n        \"200\":\n          description: List of Asset's uploads\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/assetUploads\"\n              example:\n                uploads:\n                - upload_id: KrFTuglD.N8ireqry_w3.oQqNwrYI7SfSXpVRiusKah0YigDnusebaJNIUZg4R_No0MMW9FLU2UG5anTW0boTUYVxKfBZWCFXqnQTpjnQEo1K7la39MYpjSTvIbZgnG\n                  status: in-progress\n                  number_parts: 1\n                  urls:\n                  - url: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr200-200-4-2019/smr50-263-2016-2056-kgrs-2.5.tiff?uploadId=d77UbNnEVTaqCAyAz61AVqy7uuTGJ_YOUyPOklcRMr4ZPBthON9p6cpMREx683yQ_oeGVmGE_yTg4cmnEz3mTErEPKn0_m.3LBjo6A88Qxlj4vFrAdU6YBuourb.IqFF\u0026partNumber=1\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIA4HDUVYWAM6ZB6SWO%2F20210414%2Feu-central-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T112742Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=d12763467eaffa0c69d601297a661a05c9f414d4008b4148fa6ba604f203be01\n                    part: 1\n                    expires: '2019-08-24T14:15:22Z'\n                  created: '2019-08-24T14:15:22Z'\n                  checksum:multihash: 12200ADEC47F803A8CF1055ED36750B3BA573C79A3AF7DA6D6F5A2AED03EA16AF3BC\n                - upload_id: KrFTuglD.N8ireqry_w3.oQqNwrYI7SfSXpVRiusKah0YaaegJNIUZg4R_No0MMW9FLU2UG5anTW0boTUYVxKfBZWCFXqnQTpjnQEo1K7la39MYpjSTvIbZgnG\n                  status: completed\n                  number_parts: 1\n                  created: '2019-08-24T14:15:22Z'\n                  completed: '2019-08-24T14:15:22Z'\n                  checksum:multihash: 12200ADEC47F803A8CF1055ED36750B3BA573C79A3AF7DA6D6F5A2AED03EA16AF3BC\n                - upload_id: KrFTuglD.N8ireqry_w3.oQqNwrYI7SfSXpVRiusKah0YigDnuM06hfJNIUZg4R_No0MMW9FLU2UG5anTW0boTUYVxKfBZWCFXqnQTpjnQEo1K7la39MYpjSTvIbZgnG\n                  status: aborted\n                  number_parts: 1\n                  created: '2019-08-24T14:15:22Z'\n                  aborted: '2019-08-24T14:15:22Z'\n                  checksum:multihash: 12200ADEC47F803A8CF1055ED36750B3BA573C79A3AF7DA6D6F5A2AED03EA16AF3BC\n                links:\n                - rel: next\n                  href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets/smr50-263-2016-2056-kgrs-2.5.tiff/uploads?cursor=0d34\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        5XX:\n          $ref: \"#/components/responses/ServerError\"\n    post:\n      tags:\n      - Asset Upload Management\n      summary: Create a new Asset's multipart upload\n      description: |\n        Create Asset's multipart upload.\n\n        A file part must be at least 5 MB except for the last one and at most 5 GB, otherwise the complete operation will fail.\n\n        *Note: in order to provide integrity check during the upload, the base64-encoded 128-bit MD5 digest of each part must be\n        computed and passed in the create endpoint. Then this digest must also be passed as `Content-MD5` header during the upload.*\n      operationId: createAssetUpload\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/assetUploadCreate\"\n      responses:\n        \"201\":\n          description: Created Asset's multipart upload\n          headers:\n            Location:\n              description: A link to the Asset's multipart upload object\n              schema:\n                type: string\n                format: url\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/assetUploadCreate\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        5XX:\n          $ref: \"#/components/responses/ServerError\"\n  /collections/{collectionId}/items/{featureId}/assets/{assetId}/uploads/{uploadId}:\n    parameters:\n    - $ref: \"#/components/parameters/collectionId\"\n    - $ref: \"#/components/parameters/featureId\"\n    - $ref: \"#/components/parameters/assetId\"\n    - $ref: \"#/components/parameters/uploadId\"\n    get:\n      tags:\n      - Asset Upload Management\n      summary: Get an Asset's multipart upload\n      description: |\n        Return an Asset's multipart upload.\n      operationId: getAssetUpload\n      parameters:\n      - $ref: \"#/components/parameters/IfMatch\"\n      - $ref: \"#/components/parameters/IfNoneMatch\"\n      responses:\n        \"200\":\n          description: Asset's multipart upload description.\n          headers:\n            ETag:\n              $ref: \"#/components/headers/ETag\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/assetUpload\"\n              examples:\n                inprogress:\n                  $ref: \"#/components/examples/inprogress\"\n                completed:\n                  $ref: \"#/components/examples/completed\"\n                aborted:\n                  $ref: \"#/components/examples/aborted\"\n        \"304\":\n          $ref: \"#/components/responses/NotModified\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"412\":\n          $ref: \"#/components/responses/PreconditionFailed\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n  /{presignedUrl}:\n    servers:\n    - url: http://data.geo.admin.ch/\n    put:\n      tags:\n      - Asset Upload Management\n      summary: Upload asset file part\n      description: \u003e-\n        Upload an Asset file part using the presigned url(s) returned by [Create a\n        new Asset's multipart upload](#operation/createAssetUpload).\n\n\n        Parts that have been uploaded but not completed can be checked using [Get\n        an Asset's multipart upload](#operation/getAssetUpload)\n\n\n        A file part must be at least 5 MB except for the last one and at most 5 GB,\n        otherwise the complete operation will fail.\n\n\n        *Note: this endpoint doesn't require any authentication as it is already part\n        of the presigned url*\n      operationId: uploadAssetFilePart\n      parameters:\n      - $ref: \"#/components/parameters/presignedUrl\"\n      - name: Content-MD5\n        in: header\n        description: The base64-encoded 128-bit MD5 digest of this part.\n        required: true\n        schema:\n          type: string\n          example: yLLiDqX2OL7mcIMTjob60A==\n      responses:\n        \"200\":\n          description: Asset file part uploaded part successfully (Response has no\n            content).\n          content: {}\n          headers:\n            ETag:\n              schema:\n                type: string\n              description: \u003e-\n                The RFC7232 ETag header field in a response provides the current entity-\n                tag for the selected resource.\n\n\n                This ETag is required in the complete multipart upload payload.\n\n\n                An entity-tag is an opaque identifier for different versions of a\n                resource over time, regardless whether multiple versions are valid\n                at the same time. An entity-tag consists of an opaque quoted string.\n              example: \"d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b\"\n              required: true\n        \"400\":\n          description: Asset file part corrupted.\n          content:\n            application/xml:\n              schema:\n                type: object\n                required:\n                - Error\n                properties:\n                  Error:\n                    type: object\n                    required:\n                    - Code\n                    - Message\n                    properties:\n                      Code:\n                        type: string\n                        enum:\n                        - 'BadDigest'\n                      Message:\n                        type: string\n                    additionalProperties:\n                      type: string\n              example: |\n                \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n                \u003cError\u003e\n                  \u003cCode\u003eBadDigest\u003c/Code\u003e\n                  \u003cMessage\u003eThe Content-MD5 you specified did not match what we received.\u003c/Message\u003e\n                  \u003cExpectedDigest\u003e0b6vaU45Ys1BdrMhd4wnGA==\u003c/ExpectedDigest\u003e\n                  \u003cCalculatedDigest\u003e4lDYLoS0vNfNdko/3cPJJQ==\u003c/CalculatedDigest\u003e\n                  \u003cRequestId\u003eRAVFJXJQFXTCZHT3\u003c/RequestId\u003e\n                  \u003cHostId\u003ekDMsU45sQ4oZjkTgba2SNBy/0RMshW2lEWmfKnaotvViav5Qlyz4aSQdmS9FRVKp1HgJUBj3h5w=\u003c/HostId\u003e\n                \u003c/Error\u003e\n        \"403\":\n          description: Asset file part upload Bad Request, Signature does not match\n            (e.g. missing Content-MD5 header).\n          content:\n            application/xml:\n              schema:\n                type: object\n                required:\n                - Error\n                properties:\n                  Error:\n                    type: object\n                    required:\n                    - Code\n                    - Message\n                    properties:\n                      Code:\n                        type: string\n                        enum:\n                        - 'SignatureDoesNotMatch'\n                      Message:\n                        type: string\n                    additionalProperties:\n                      type: string\n              example: |\n                \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n                \u003cError\u003e\n                  \u003cCode\u003eSignatureDoesNotMatch\u003c/Code\u003e\n                  \u003cMessage\u003eThe request signature we calculated does not match the signature you provided. Check your key and signing method.\u003c/Message\u003e\n                  \u003cAWSAccessKeyId\u003edummy-key\u003c/AWSAccessKeyId\u003e\n                  \u003cStringToSign\u003e\n                    AWS4-HMAC-SHA256\n                    20210922T110759Z\n                    20210922/eu-central-1/s3/aws4_request6f0cf4c9a56acf90d9354cb79629a159c0c848ffacdbe13c7b9ae014671fa5c3\n                  \u003c/StringToSign\u003e\n                  \u003cSignatureProvided\u003e1c762db1e677a6535c0e4a91015dcd60c00e58f1e5136f8943636f157dc03d54\u003c/SignatureProvided\u003e\n                  \u003cStringToSignBytes\u003e41 57 53 34 2d 48 4d 41 43 2d 53 48 41 32 35...\u003c/StringToSignBytes\u003e\n                  \u003cCanonicalRequest\u003e\n                    PUT /service-stac-dev/test-e2e-asset-upload-UUID/test-e2e-asset-upload-UUID/test-e2e-asset-upload-UUID.txt\n                      X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=...\n                      content-md5:\n                      host:s3.eu-central-1.amazonaws.com\n\n                      content-md5;host\n                      UNSIGNED-PAYLOAD\n                  \u003c/CanonicalRequest\u003e\n                  \u003cCanonicalRequestBytes\u003e50 55 54 0a 2f 73...\u003c/CanonicalRequestBytes\u003e\n                  \u003cRequestId\u003eF5SB90RJFYE21C0V\u003c/RequestId\u003e\n                  \u003cHostId\u003eYnH6DNl93sXH5kL0nEk1TOhH+crwM+wnaRNhh7MNC6CW6XhAeJLKVV/WU+dsdRkJUzet5m7cZwU=\u003c/HostId\u003e\n                \u003c/Error\u003e\n  /collections/{collectionId}/items/{featureId}/assets/{assetId}/uploads/{uploadId}/complete:\n    parameters:\n    - $ref: \"#/components/parameters/collectionId\"\n    - $ref: \"#/components/parameters/featureId\"\n    - $ref: \"#/components/parameters/assetId\"\n    - $ref: \"#/components/parameters/uploadId\"\n    post:\n      tags:\n      - Asset Upload Management\n      summary: Complete multipart upload\n      operationId: completeMultipartUpload\n      description: \u003e-\n        Complete the multipart upload process. After completion, the Asset metadata\n        are updated with the new `checksum:multihash` from the upload and the parts\n        are automatically deleted. The Asset `href` field is also set if it was the\n        first upload.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/assetCompleteUpload\"\n      responses:\n        \"200\":\n          description: Asset multipart upload completed successfully.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/assetUploadCompleted\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        5XX:\n          $ref: \"#/components/responses/ServerError\"\n  /collections/{collectionId}/items/{featureId}/assets/{assetId}/uploads/{uploadId}/abort:\n    parameters:\n    - $ref: \"#/components/parameters/collectionId\"\n    - $ref: \"#/components/parameters/featureId\"\n    - $ref: \"#/components/parameters/assetId\"\n    - $ref: \"#/components/parameters/uploadId\"\n    post:\n      tags:\n      - Asset Upload Management\n      summary: Abort multipart upload\n      operationId: abortMultipartUpload\n      description: \u003e-\n        Abort the multipart upload process. All already uploaded parts are automatically\n        deleted.\n      responses:\n        \"200\":\n          description: Asset multipart upload aborted successfully.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/assetUploadAborted\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        5XX:\n          $ref: \"#/components/responses/ServerError\"\n  /collections/{collectionId}/items/{featureId}/assets/{assetId}/uploads/{uploadId}/parts:\n    parameters:\n    - $ref: \"#/components/parameters/collectionId\"\n    - $ref: \"#/components/parameters/featureId\"\n    - $ref: \"#/components/parameters/assetId\"\n    - $ref: \"#/components/parameters/uploadId\"\n    get:\n      tags:\n      - Asset Upload Management\n      summary: Get upload parts\n      operationId: getUploadParts\n      description: \u003e-\n        Return the list of already uploaded parts.\n\n\n        ### Pagination\n\n        By default all parts are returned (maximum number of parts being 100). The\n        user can use pagination to reduce the number of returned parts. Pagination\n        is done via the `limit` query parameter (see below).\n      parameters:\n      - $ref: \"#/components/parameters/limit\"\n      responses:\n        \"200\":\n          description: List of parts already uploaded.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/assetUploadParts\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        5XX:\n          $ref: \"#/components/responses/ServerError\"\n  /get-token:\n    servers:\n    - url: http://data.geo.admin.ch/api/stac/\n    post:\n      tags:\n      - Authentication\n      summary: \u003e-\n        Request token for token authentication.\n      operationId: getToken\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                  description: name of user for whom token is requested\n                password:\n                  type: string\n                  description: password of user for whom token is requested\n              required:\n              - username\n              - password\n            example:\n              username: \"Mickey Mouse\"\n              password: \"I_love_Minnie_Mouse\"\n      responses:\n        \"200\":\n          description: Returns the token for the specified user\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  token:\n                    type: string\n                    description: generated token for specified user\n              example:\n                token: ccecf40693bfc52ba090cd46eb7f19e723fe831f\n        \"400\":\n          description: Wrong credentials were provided.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: string\n                  description:\n                    type: string\n              example:\n                code: 400\n                description: \"Unable to log in with provided credentials.\"\ncomponents:\n  schemas:\n    assetQuery:\n      additionalProperties:\n        $ref: \"#/components/schemas/assetQueryProp\"\n      description: \u003e-\n        Define which properties of the asset to query and the operations to apply.\n\n\n        The following properties can be queried:\n\n        - `type`: query for assets with this specific media type\n\n        - `proj:epsg`: query for assets with this specific epsg\n\n        - `eo:gsd`: query for assets with this specific gsd\n\n        - `geoadmin:variant`: query for assets with this specific variant\n      example:\n        type:\n          eq: image/tiff\n      type: object\n    assetQueryFilter:\n      description: Allows users to query asset properties for specific values\n      properties:\n        assetQuery:\n          $ref: \"#/components/schemas/assetQuery\"\n      type: object\n    assetQueryProp:\n      anyOf:\n      - description: \u003e-\n          If the object doesn't contain any of the operators, it is equivalent to\n          using the equals operator\n      - description: Match using an operator\n        properties:\n          contains:\n            description: \u003e-\n              Find items with a property that contains the specified literal string,\n              e.g., matches \".*\u003cSTRING\u003e.*\". A case-insensitive comparison must be\n              performed.\n            type: string\n          endsWith:\n            description: \u003e-\n              Find items with a property that ends with the specified string. A case-insensitive\n              comparison must be performed.\n            type: string\n          eq:\n            description: \u003e-\n              Find items with a property that is equal to the specified value. For\n              strings, a case-insensitive comparison must be performed.\n            nullable: true\n            oneOf:\n            - type: string\n            - type: number\n            - type: boolean\n          in:\n            description: \u003e-\n              Find items with a property that equals at least one entry in the specified\n              array. A case-insensitive comparison must be performed.\n            items:\n              oneOf:\n              - type: string\n              - type: number\n            type: array\n          startsWith:\n            description: \u003e-\n              Find items with a property that begins with the specified string. A\n              case-insensitive comparison must be performed.\n            type: string\n        type: object\n      description: Apply query operations to a specific property\n    assetBase:\n      title: Asset\n      description: The `property name` defines the ID of the Asset.\n      type: object\n      required:\n      - type\n      - created\n      - updated\n      properties:\n        title:\n          $ref: \"#/components/schemas/title\"\n        description:\n          $ref: \"#/components/schemas/description\"\n        type:\n          $ref: \"#/components/schemas/type\"\n        href:\n          $ref: \"#/components/schemas/href\"\n        checksum:multihash:\n          $ref: \"#/components/schemas/checksumMultihashReadOnly\"\n        geoadmin:variant:\n          $ref: \"#/components/schemas/geoadminVariant\"\n        geoadmin:lang:\n          $ref: \"#/components/schemas/geoadminLang\"\n        proj:epsg:\n          $ref: \"#/components/schemas/projEpsg\"\n        eo:gsd:\n          $ref: \"#/components/schemas/eoGsd\"\n        created:\n          $ref: \"#/components/schemas/created\"\n        updated:\n          $ref: \"#/components/schemas/updated\"\n    bbox:\n      description: |\n        The bounding box is provided as four numbers:\n\n        * Lower left corner, coordinate axis 1\n        * Lower left corner, coordinate axis 2\n        * Upper right corner, coordinate axis 1\n        * Upper right corner, coordinate axis 2\n\n        The coordinate reference system of the values is WGS84\n        longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84).\n\n        For WGS84 longitude/latitude the values are in most cases the sequence\n        of minimum longitude, minimum latitude, maximum longitude and maximum\n        latitude. However, in cases where the box spans the antimeridian the\n        first value (west-most box edge) is larger than the third value\n        (east-most box edge).\n\n        Example: The bounding box of Switzerland in\n        WGS 84 (from 5.96°E to 10.49°E and from 45.82°N to 47.81°N) would be\n        represented in JSON as `[5.96, 45.82, 10.49, 47.81]` and in a query as\n        `bbox=5.96,45.82,10.49,47.81`.\"\n      example:\n      - 7.0906249\n      - 45.9160584\n      - 7.1035698\n      - 45.925093\n      items:\n        type: number\n      maxItems: 4\n      minItems: 4\n      type: array\n      readOnly: true\n    bboxfilter:\n      description: \u003e-\n        Only features that have a geometry that intersects the bounding box are selected.\n        The bounding box is provided as four numbers:\n\n\n        * Lower left corner, coordinate axis 1\n\n        * Lower left corner, coordinate axis 2\n\n        * Upper right corner, coordinate axis 1\n\n        * Upper right corner, coordinate axis 2\n\n\n        The coordinate reference system of the values is WGS84 longitude/latitude\n        (http://www.opengis.net/def/crs/OGC/1.3/CRS84).\n\n\n        For WGS84 longitude/latitude the values are in most cases the sequence of\n        minimum longitude, minimum latitude, maximum longitude and maximum latitude.\n        However, in cases where the box spans the antimeridian the first value (west-most\n        box edge) is larger than the third value (east-most box edge).\n\n\n        Example: The bounding box of Switzerland in WGS 84 (from 5.96°E to 10.49°E\n        and from 45.82°N to 47.81°N) would be represented in JSON as `[5.96, 45.82,\n        10.49, 47.81]` and in a query as `bbox=5.96,45.82,10.49,47.81`.\"\n      example:\n      - 7.0906249\n      - 45.9160584\n      - 7.1035698\n      - 45.925093\n      items:\n        type: number\n      maxItems: 4\n      minItems: 4\n      type: array\n      readOnly: false\n    bboxFilter:\n      properties:\n        bbox:\n          $ref: \"#/components/schemas/bboxfilter\"\n    checksumMultihash:\n      description: \u003e-\n        `sha2-256` checksum of the asset in [multihash](https://multiformats.io/multihash/)\n        format.\n      example: 12200ADEC47F803A8CF1055ED36750B3BA573C79A3AF7DA6D6F5A2AED03EA16AF3BC\n      pattern: ^[a-f0-9]+$\n      title: Multihash\n      type: string\n    checksumMultihashReadOnly:\n      description: |\n        `sha2-256` checksum of the asset in [multihash](https://multiformats.io/multihash/) format.\n      example: 90e402107a7f2588a85362b9beea2a12d4514d45\n      pattern: ^[a-f0-9]+$\n      title: Multihash\n      type: string\n      readOnly: true\n    created:\n      description: RFC 3339 compliant datetime string, time when the object was created\n      example: 2018-02-12T23:20:50Z\n      type: string\n      format: date-time\n      readOnly: true\n    collectionBase:\n      properties:\n        crs:\n          default:\n          - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n          description: The list of coordinate reference systems supported by the service\n          example:\n          - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n          items:\n            type: string\n          type: array\n          readOnly: true\n        description:\n          description: A description of the features in the collection\n          example: \u003e-\n            Swiss Map Raster are a conversion of the map image into a digital form\n            with no direct bearing on the individual map elements.\n\n\n            The information is structured only in colour layers. Swiss Map Raster\n            pixel maps are ideal for finding background information for a broad variety\n            of screen applications, web and mobile applications and services, as well\n            as for geographic information systems. They can also be used as basic\n            maps for a variety of purposes (digital printing, plots, offset printing,\n            etc.).\n          type: string\n        extent:\n          $ref: \"#/components/schemas/extent\"\n        id:\n          description: Identifier of the collection used, for example, in URIs\n          example: ch.swisstopo.pixelkarte-farbe-pk200.noscale\n          type: string\n        itemType:\n          default: Feature\n          description: \u003e-\n            Indicator about the type of the items in the collection (the default value\n            is 'Feature').\n          type: string\n          readOnly: true\n        license:\n          $ref: \"#/components/schemas/license\"\n        providers:\n          $ref: \"#/components/schemas/providers\"\n        stac_version:\n          $ref: \"#/components/schemas/stac_version\"\n        summaries:\n          additionalProperties:\n            oneOf:\n            - items:\n                description: A value of any type.\n              title: Set of values\n              type: array\n            - description: \u003e-\n                By default, only ranges with a minimum and a maximum value can be\n                specified. Ranges can be specified for ordinal values only, which\n                means they need to have a rank order. Therefore, ranges can only be\n                specified for numbers and some special types of strings. Examples:\n                grades (A to F), dates or times. Implementors are free to add other\n                derived statistical values to the object, for example `mean` or `stddev`.\n              properties:\n                max:\n                  anyOf:\n                  - type: string\n                  - type: number\n                min:\n                  anyOf:\n                  - type: string\n                  - type: number\n              required:\n              - min\n              - max\n              title: Statistics\n              type: object\n          description: \u003e-\n            Summaries are either a unique set of all available values *or* statistics.\n            Statistics by default only specify the range (minimum and maximum values),\n            but can optionally be accompanied by additional statistical values. The\n            range can specify the potential range of values, but it is recommended\n            to be as precise as possible. The set of values must contain at least\n            one element and it is strongly recommended to list all values. It is recommended\n            to list as many properties as reasonable so that consumers get a full\n            overview of the Collection. Properties that are covered by the Collection\n            specification (e.g. `providers` and `license`) may not be repeated in\n            the summaries.\n          type: object\n          readOnly: true\n          example:\n            eo:gsd:\n            - 10\n            - 20\n            geoadmin:variant:\n            - kgrel\n            - komb\n            - krel\n            geoadmin:lang:\n            - de\n            - fr\n            proj:epsg:\n            - 2056\n        title:\n          description: Human readable title of the collection\n          example: National Map 1:200'000\n          type: string\n        created:\n          $ref: \"#/components/schemas/created\"\n        updated:\n          $ref: \"#/components/schemas/updated\"\n      required:\n      - id\n      - stac_version\n      - description\n      - license\n      - extent\n      - created\n      - updated\n      type: object\n    collection:\n      allOf:\n      - $ref: \"#/components/schemas/collectionBase\"\n      - type: object\n        required:\n        - links\n        properties:\n          links:\n            type: array\n            items:\n              $ref: \"#/components/schemas/link\"\n            example:\n            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale\n              rel: self\n            - href: https://data.geo.admin.ch/api/stac/v0.9/\n              rel: root\n            - href: https://data.geo.admin.ch/api/stac/v0.9\n              rel: parent\n            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items\n              rel: items\n            - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html\n              rel: license\n              title: Licence for the free geodata of the Federal Office of Topography\n                swisstopo\n            - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df\n              rel: describedby\n    collections:\n      properties:\n        collections:\n          items:\n            $ref: \"#/components/schemas/collection\"\n          type: array\n        links:\n          items:\n            $ref: \"#/components/schemas/link\"\n          example:\n          - href: https://data.geo.admin.ch/api/stac/v0.9/collections\n            rel: self\n          - href: https://data.geo.admin.ch/api/stac/v0.9/\n            rel: root\n          - href: https://data.geo.admin.ch/api/stac/v0.9/collections?cursor=10ab\n            rel: next\n          - href: https://data.geo.admin.ch/api/stac/v0.9/collections?cursor=10cd\n            rel: previous\n      required:\n      - links\n      - collections\n      type: object\n    collectionsArray:\n      description: \u003e-\n        Array of Collection IDs to include in the search for items. Only Items in\n        one of the provided Collections will be searched.\n      items:\n        type: string\n      type: array\n    collectionsFilter:\n      description: Only returns the collections specified\n      properties:\n        collections:\n          $ref: \"#/components/schemas/collectionsArray\"\n      type: object\n      example:\n        collections:\n        - ch.swisstopo.swisstlmregio\n        - ch.bfe.energieschweiz\n    confClasses:\n      properties:\n        conformsTo:\n          items:\n            type: string\n          type: array\n      required:\n      - conformsTo\n      type: object\n    datetime:\n      description: RFC 3339 compliant datetime string\n      example: 2018-02-12T23:20:50Z\n      type: string\n      format: date-time\n    datetimeQuery:\n      description: \u003e-\n        Either a date-time or an interval, open or closed. Date and time expressions\n        adhere to RFC 3339. Open intervals are expressed using double-dots.\n\n        Examples:\n\n\n        * A date-time: \"2018-02-12T23:20:50Z\"\n\n        * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n\n        * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\n\n        Only features that have a temporal property that intersects the value of `datetime`\n        are selected.\n\n\n        When used as URL query argument, the value must be correctly url-encoded.\n      example: 2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\n      type: string\n    datetimeFilter:\n      properties:\n        datetime:\n          $ref: \"#/components/schemas/datetimeQuery\"\n    description:\n      description: \u003e-\n        Detailed multi-line description to fully explain the catalog or collection.\n\n\n        [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text\n        representation.\n      type: string\n    eoGsd:\n      description: \u003e-\n        GSD is the nominal Ground Sample Distance for the data, as measured in meters\n        on the ground.\n\n\n        There are many definitions of GSD. The value of this attribute should be related\n        to the spatial resolution at the sensor, rather than the pixel size of images\n        after ortho-rectification, pansharpening, or scaling. The GSD of a sensor\n        can vary depending on off-nadir and wavelength, so it is at the discretion\n        of the implementer to decide which value most accurately represents the GSD.\n        For example, Landsat8 optical and short-wave IR bands are all 30 meters, but\n        the panchromatic band is 15 meters. The eo:gsd should be 30 meters in this\n        case because that is nominal spatial resolution at the sensor. The Planet\n        PlanetScope Ortho Tile Product has an eo:gsd of 3.7 (or 4 if rounding), even\n        though the pixel size of the images is 3.125. For example, one might choose\n        for WorldView-2 the Multispectral 20° off-nadir value of 2.07 and for WorldView-3\n        the Multispectral 20° off-nadir value of 1.38.\n      example: 2.5\n      title: Ground Sample Distance\n      type: number\n    exception:\n      description: \u003e-\n        Information about the exception: an error code plus an optional description.\n      properties:\n        code:\n          type: integer\n          example: 500\n        description:\n          anyOf:\n          - type: string\n          - type: array\n            items:\n              anyOf:\n              - type: string\n              - type: object\n          - type: object\n      required:\n      - code\n      type: object\n    extent:\n      description: \u003e-\n        The extent of the features in the collection. In the Core only spatial and\n        temporal extents are specified. Extensions may add additional members to represent\n        other extents, for example, thermal or pressure ranges.\n      properties:\n        spatial:\n          description: The spatial extent of the features in the collection.\n          properties:\n            bbox:\n              description: \u003e-\n                One or more bounding boxes that describe the spatial extent of the\n                dataset. In the Core only a single bounding box is supported. Extensions\n                may support additional areas. If multiple areas are provided, the\n                union of the bounding boxes describes the spatial extent.\n              items:\n                description: \u003e-\n                  Each bounding box is provided as four or six numbers, depending\n                  on whether the coordinate reference system includes a vertical axis\n                  (height or depth):\n\n\n                  * Lower left corner, coordinate axis 1\n\n                  * Lower left corner, coordinate axis 2\n\n                  * Upper right corner, coordinate axis 1\n\n                  * Upper right corner, coordinate axis 2\n\n\n                  The coordinate reference system of the values is WGS 84 longitude/latitude\n                  (http://www.opengis.net/def/crs/OGC/1.3/CRS84).\n\n\n                  For WGS 84 longitude/latitude the values are in most cases the sequence\n                  of minimum longitude, minimum latitude, maximum longitude and maximum\n                  latitude. However, in cases where the box spans the antimeridian\n                  the first value (west-most box edge) is larger than the third value\n                  (east-most box edge).\n\n\n                  If the vertical axis is included, the third and the sixth number\n                  are the bottom and the top of the 3-dimensional bounding box.\n\n\n                  If a feature has multiple spatial geometry properties, it is the\n                  decision of the server whether only a single spatial geometry property\n                  is used to determine the extent or all relevant geometries.\n                example:\n                - 5.685114\n                - 45.534903\n                - 10.747775\n                - 47.982586\n                items:\n                  type: number\n                maxItems: 6\n                minItems: 4\n                type: array\n              minItems: 1\n              type: array\n          required:\n          - bbox\n          type: object\n        temporal:\n          description: The temporal extent of the features in the collection.\n          properties:\n            interval:\n              description: \u003e-\n                One time interval that describe the temporal extent of the dataset.\n              items:\n                description: \u003e-\n                  Begin and end times of the time interval.\n                example:\n                - \"2019-01-01T00:00:00Z\"\n                - \"2019-01-02T00:00:00Z\"\n                items:\n                  format: date-time\n                  nullable: false\n                  type: string\n                maxItems: 2\n                minItems: 2\n                type: array\n              minItems: 1\n              maxItems: 1\n              type: array\n          required:\n          - interval\n          type: object\n      required:\n      - spatial\n      - temporal\n      type: object\n      readOnly: true\n    geoadminLang:\n      enum:\n      - de\n      - it\n      - fr\n      - rm\n      - en\n      title: Product language\n      type: string\n    geoadminVariant:\n      example: komb\n      title: Product variants\n      type: string\n    href:\n      type: string\n      format: url\n      description: Link to the asset object\n      readOnly: true\n      example: |\n        http://data.geo.admin.ch/ch.swisstopo.swissimage/collections/cs/items/CS3-20160503_132130_04/thumb.png\n    ids:\n      description: \u003e-\n        Array of Item ids to return. All other filter parameters that further restrict\n        the number of search results are ignored\n      items:\n        type: string\n      type: array\n    idsFilter:\n      description: Only returns items that match the array of given ids\n      properties:\n        ids:\n          $ref: \"#/components/schemas/ids\"\n      type: object\n      example:\n        ids:\n        - swisstlmregio-2019\n        - swisstlmregio-2020\n    intersectsFilter:\n      description: Only returns items that intersect with the provided polygon.\n      properties:\n        intersects:\n          oneOf:\n          - $ref: \"#/components/schemas/geoJsonPoint\"\n          - $ref: \"#/components/schemas/geoJsonLineString\"\n          - $ref: \"#/components/schemas/geoJsonPolygon\"\n          - $ref: \"#/components/schemas/geoJsonMultiPoint\"\n          - $ref: \"#/components/schemas/geoJsonMultiLineString\"\n          - $ref: \"#/components/schemas/geoJsonMultiPolygon\"\n      type: object\n      example:\n        intersects:\n          type: \"Point\"\n          coordinates:\n          - 7\n          - 46\n    itemBase:\n      description: \u003e-\n        A GeoJSON Feature augmented with foreign members that contain values relevant\n        to a STAC entity\n      properties:\n        assets:\n          $ref: \"#/components/schemas/itemAssets\"\n        bbox:\n          $ref: \"#/components/schemas/bbox\"\n        geometry:\n          $ref: \"#/components/schemas/itemGeometry\"\n        properties:\n          $ref: \"#/components/schemas/itemProperties\"\n          readOnly: true\n        stac_version:\n          $ref: \"#/components/schemas/stac_version\"\n          readOnly: true\n        type:\n          $ref: \"#/components/schemas/itemType\"\n      required:\n      - stac_version\n      - type\n      - geometry\n      - bbox\n      - properties\n      - assets\n      type: object\n    item:\n      allOf:\n      - type: object\n        required:\n        - id\n        - links\n        properties:\n          id:\n            $ref: \"#/components/schemas/itemId\"\n          links:\n            items:\n              $ref: \"#/components/schemas/link\"\n            type: array\n            example:\n            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr50-263-2016\n              rel: self\n            - href: https://data.geo.admin.ch/api/stac/v0.9/\n              rel: root\n            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale\n              rel: parent\n            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale\n              rel: collection\n      - $ref: \"#/components/schemas/itemBase\"\n    items:\n      description: \u003e-\n        A FeatureCollection augmented with foreign members that contain values relevant\n        to a STAC entity\n      properties:\n        features:\n          items:\n            $ref: \"#/components/schemas/item\"\n          type: array\n        links:\n          items:\n            $ref: \"#/components/schemas/link\"\n          type: array\n          example:\n          - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items\n            rel: self\n          - href: https://data.geo.admin.ch/api/stac/v0.9/\n            rel: root\n          - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale\n            rel: parent\n          - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items?cursor=10ab\n            rel: next\n          - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items?cursor=10acd\n            rel: previous\n        type:\n          enum:\n          - FeatureCollection\n          type: string\n      required:\n      - features\n      - type\n      type: object\n    itemAssets:\n      title: Assets\n      description: List of Assets attached to this feature.\n      additionalProperties:\n        $ref: \"#/components/schemas/assetBase\"\n      type: object\n      readOnly: true\n      example:\n        smr50-263-2016-2056-kgrs-2.5.tiff:\n          checksum:multihash: 12200ADEC47F803A8CF1055ED36750B3BA573C79A3AF7DA6D6F5A2AED03EA16AF3BC\n          created: \"2020-07-14T12:30:00Z\"\n          eo:gsd: 2.5\n          geoadmin:variant: kgrs\n          href: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr50-263-2016-2056-kgrs-2.5.tiff\n          proj:epsg: 2056\n          type: image/tiff; application=geotiff\n          updated: \"2020-07-14T12:30:00Z\"\n        smr50-263-2016-2056-komb-2.5.tiff:\n          checksum:multihash: 12200ADEC47F803A8CF1055ED36750B3BA573C79A3AF7DA6D6F5A2AED03EA16AF3BC\n          created: \"2020-07-14T12:30:00Z\"\n          eo:gsd: 2.5\n          geoadmin:variant: komb\n          href: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr50-263-2016-2056-komb-2.5.tiff\n          proj:epsg: \"2056\"\n          type: image/tiff; application=geotiff\n          updated: \"2020-07-14T12:30:00Z\"\n        smr50-263-2016-2056-krel-2.5.tiff:\n          checksum:multihash: 12200ADEC47F803A8CF1055ED36750B3BA573C79A3AF7DA6D6F5A2AED03EA16AF3BC\n          created: \"2020-07-14T12:30:00Z\"\n          eo:gsd: 2.5\n          geoadmin:variant: krel\n          href: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr50-263-2016-2056-krel-2.5.tiff\n          proj:epsg: \"2056\"\n          type: image/tiff; application=geotiff\n          updated: \"2020-07-14T12:30:00Z\"\n    itemsSearch:\n      description: \u003e-\n        A GeoJSON FeatureCollection augmented with foreign members that contain values\n        relevant to a STAC entity\n      properties:\n        features:\n          items:\n            $ref: \"#/components/schemas/item\"\n          type: array\n        type:\n          enum:\n          - FeatureCollection\n          type: string\n      required:\n      - features\n      - type\n      type: object\n    itemsSearchGet:\n      allOf:\n      - $ref: \"#/components/schemas/itemsSearch\"\n      - type: object\n        properties:\n          links:\n            $ref: \"#/components/schemas/itemsSearchLinks\"\n    itemsSearchPost:\n      allOf:\n      - $ref: \"#/components/schemas/itemsSearch\"\n      - type: object\n        properties:\n          links:\n            $ref: \"#/components/schemas/itemsSearchPostLinks\"\n    itemsSearchLinks:\n      description: \u003e-\n        An array of links. Can be used for pagination, e.g. by providing a link with\n        the `next` relation type.\n      example:\n      - href: https://data.geo.admin.ch/api/stac/v0.9/search\n        rel: self\n      - href: https://data.geo.admin.ch/api/stac/v0.9/search?cursor=10ab\n        rel: next\n      items:\n        $ref: \"#/components/schemas/link\"\n      type: array\n    itemsSearchPostLinks:\n      description: \u003e-\n        An array of links. Can be used for pagination, e.g. by providing a link with\n        the `next` relation type.\n      example:\n      - href: https://data.geo.admin.ch/api/stac/v0.9/search\n        rel: self\n      - href: https://data.geo.admin.ch/api/stac/v0.9/search?cursor=10ab\n        rel: next\n        method: POST\n        body: {}\n        merge: true\n      items:\n        $ref: \"#/components/schemas/linkPostSearch\"\n      type: array\n    itemId:\n      title: ID\n      description: Feature identifier (unique per collection)\n      example: smr200-200-4-2019\n      type: string\n    itemGeometry:\n      $ref: \"#/components/schemas/geoJsonPolygon\"\n    geoJsonPoint:\n      title: GeoJSON Point\n      type: object\n      required:\n      - type\n      - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n          - Point\n        coordinates:\n          description: \u003e-\n            For type \"Point\", the \"coordinates\" member is a single position. The coordinate\n            reference system of the values is WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84).\n          example:\n          - 7.0906823\n          - 45.9160584\n          type: array\n          minItems: 2\n          items:\n            type: number\n    geoJsonLineString:\n      title: GeoJSON LineString\n      type: object\n      required:\n      - type\n      - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n          - LineString\n        coordinates:\n          description: \u003e-\n            For type \"LineString\", the \"coordinates\" member is an array of two or\n            more positions. The coordinate reference system of the values is WGS84\n            longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84).\n          example:\n          - - - 7.0906823\n              - 45.9160584\n            - - 7.1035698\n              - 45.9160977\n          type: array\n          minItems: 2\n          items:\n            type: array\n            minItems: 2\n            items:\n              type: number\n    geoJsonPolygon:\n      title: GeoJSON Polygon\n      type: object\n      required:\n      - type\n      - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n          - Polygon\n        coordinates:\n          description: \u003e-\n            For type \"Polygon\", the \"coordinates\" member MUST be an array of linear\n            ring coordinate arrays. The coordinate reference system of the values\n            is WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84).\n          example:\n          - - - 7.0906823\n              - 45.9160584\n            - - 7.1035698\n              - 45.9160977\n            - - 7.1035146\n              - 45.925093\n            - - 7.0906249\n              - 45.9250537\n            - - 7.0906823\n              - 45.9160584\n          type: array\n          items:\n            type: array\n            minItems: 4\n            items:\n              type: array\n              minItems: 2\n              items:\n                type: number\n    geoJsonMultiPoint:\n      title: GeoJSON MultiPoint\n      type: object\n      required:\n      - type\n      - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n          - MultiPoint\n        coordinates:\n          description: \u003e-\n            For type \"MultiPoint\", the \"coordinates\" member is an array of positions.\n            The coordinate reference system of the values is WGS84 longitude/latitude\n            (http://www.opengis.net/def/crs/OGC/1.3/CRS84).\n          example:\n          - - 7.0906823\n            - 45.9160584\n          - - 7.1035698\n            - 45.9160977\n          - - 7.1035146\n            - 45.925093\n          type: array\n          items:\n            type: array\n            minItems: 2\n            items:\n              type: number\n    geoJsonMultiLineString:\n      title: GeoJSON MultiLineString\n      type: object\n      required:\n      - type\n      - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n          - MultiLineString\n        coordinates:\n          description: \u003e-\n            For type \"MultiLineString\", the \"coordinates\" member is an array of LineString\n            coordinate arrays. The coordinate reference system of the values is WGS84\n            longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84).\n          example:\n          - - - 7.0906823\n              - 45.9160584\n            - - 7.1035698\n              - 45.9160977\n          - - - 7.1035146\n              - 45.925093\n            - - 7.0906249\n              - 45.9250537\n          type: array\n          items:\n            type: array\n            minItems: 2\n            items:\n              type: array\n              minItems: 2\n              items:\n                type: number\n    geoJsonMultiPolygon:\n      title: GeoJSON MultiPolygon\n      type: object\n      required:\n      - type\n      - coordinates\n      properties:\n        type:\n          type: string\n          enum:\n          - MultiPolygon\n        coordinates:\n          description: \u003e-\n            For type \"MultiPolygon\", the \"coordinates\" member is an array of Polygon\n            coordinate arrays. The coordinate reference system of the values is WGS84\n            longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84).\n          example:\n          - - - - 7.0906823\n                - 45.9160584\n              - - 7.1035698\n                - 45.9160977\n              - - 7.1035146\n                - 45.925093\n              - - 7.0906249\n                - 45.9250537\n              - - 7.0906823\n                - 45.9160584\n          - - - - 8.5816399\n                - 45.7218735\n              - - 8.5944806\n                - 45.7217417\n              - - 8.5946699\n                - 45.7307358\n              - - 8.581827\n                - 45.7308676\n              - - 8.5816399\n                - 45.7218735\n          type: array\n          items:\n            type: array\n            items:\n              type: array\n              minItems: 4\n              items:\n                type: array\n                minItems: 2\n                items:\n                  type: number\n    itemProperties:\n      title: Properties\n      description: \u003e-\n        Provides the core metadata fields plus extensions\n\n\n        The item's data timing information can be specified either with\n\n        * One datetime value in the field `datetime`\n\n        * A datetime range with a `start_datetime` and an `end_datetime`\n\n\n        One of the two is required\n      properties:\n        created:\n          $ref: \"#/components/schemas/created\"\n        datetime:\n          $ref: \"#/components/schemas/datetime\"\n        start_datetime:\n          $ref: \"#/components/schemas/datetime\"\n        end_datetime:\n          $ref: \"#/components/schemas/datetime\"\n        updated:\n          $ref: \"#/components/schemas/updated\"\n        title:\n          description: Human readable title of the Feature\n          example: Feature title\n          type: string\n      required:\n      - created\n      - updated\n      type: object\n    itemType:\n      title: type\n      description: The GeoJSON type\n      enum:\n      - Feature\n      type: string\n      readOnly: true\n    landingPage:\n      properties:\n        description:\n          example: \u003e-\n            Access to data about buildings in the city of Bonn via a Web API that\n            conforms to the OGC API Features specification.\n          type: string\n        id:\n          type: string\n        links:\n          items:\n            $ref: \"#/components/schemas/link\"\n          type: array\n        stac_version:\n          $ref: \"#/components/schemas/stac_version\"\n        title:\n          example: Buildings in Bonn\n          type: string\n      required:\n      - links\n      - stac_version\n      - id\n      - description\n      type: object\n    license:\n      description: \u003e-\n        License(s) of the data as a SPDX [License identifier](https://spdx.org/licenses/).\n        Alternatively, use `proprietary` if the license is not on the SPDX license\n        list or `various` if multiple licenses apply. In these two cases links to\n        the license texts SHOULD be added, see the `license` link relation type.\n\n\n        Non-SPDX licenses SHOULD add a link to the license text with the `license`\n        relation in the links section. The license text MUST NOT be provided as a\n        value of this field. If there is no public license URL available, it is RECOMMENDED\n        to host the license text and link to it.\n      example: proprietary\n      type: string\n    limit:\n      default: 100\n      description: \u003e-\n        The `limit` parameter limits the number of results that are included in the\n        response.\n\n\n        To retrieve the next bunch of result, use the `next` link in the `links` section\n        of the response.\n\n\n        Minimum = 1. Maximum = 100. Default = 100.\n      example: 20\n      maximum: 100\n      minimum: 1\n      type: integer\n    limitFilter:\n      description: Only returns maximum number of results (page size)\n      properties:\n        limit:\n          $ref: \"#/components/schemas/limit\"\n      type: object\n    linestringGeoJSON:\n      properties:\n        coordinates:\n          items:\n            items:\n              type: number\n            minItems: 2\n            type: array\n          minItems: 2\n          type: array\n        type:\n          enum:\n          - LineString\n          type: string\n      required:\n      - type\n      - coordinates\n      type: object\n    link:\n      properties:\n        href:\n          example: http://data.example.com/buildings/123\n          format: url\n          type: string\n        rel:\n          description: \u003e-\n            Relationship between the current document and the linked document.\n\n\n            NOTE: the following relations are reserved and automatically generated:\n            `self`, `root`, `parent`, `items`, `collection`, `next`, `previous`\n          example: describedby\n          type: string\n        title:\n          example: Trierer Strasse 70, 53115 Bonn\n          type: string\n        type:\n          description: The media type of the link target\n          example: application/geo+json\n          type: string\n        method:\n          default: GET\n          description: Specifies the HTTP method that the link expects\n          enum:\n          - GET\n          - POST\n          type: string\n      required:\n      - href\n      - rel\n      title: Link\n      type: object\n    linkPostSearch:\n      allOf:\n      - $ref: \"#/components/schemas/link\"\n      - type: object\n        properties:\n          body:\n            default: {}\n            description: For `POST /search` requests, the link can specify the HTTP\n              body as a JSON object.\n            type: object\n          merge:\n            default: false\n            description: \u003e-\n              This is only valid when the server is responding to `POST /search `request.\n\n\n              If merge is true, the client is expected to merge the body value into\n              the current request body before following the link. This avoids passing\n              large post bodies back and forth when following links, particularly\n              for navigating pages through the `POST /search` endpoint.\n            type: boolean\n    multilinestringGeoJSON:\n      properties:\n        coordinates:\n          items:\n            items:\n              items:\n                type: number\n              minItems: 2\n              type: array\n            minItems: 2\n            type: array\n          type: array\n        type:\n          enum:\n          - MultiLineString\n          type: string\n      required:\n      - type\n      - coordinates\n      type: object\n    multipointGeoJSON:\n      properties:\n        coordinates:\n          items:\n            items:\n              type: number\n            minItems: 2\n            type: array\n          type: array\n        type:\n          enum:\n          - MultiPoint\n          type: string\n      required:\n      - type\n      - coordinates\n      type: object\n    multipolygonGeoJSON:\n      properties:\n        coordinates:\n          items:\n            items:\n              items:\n                items:\n                  type: number\n                minItems: 2\n                type: array\n              minItems: 4\n              type: array\n            type: array\n          type: array\n        type:\n          enum:\n          - MultiPolygon\n          type: string\n      required:\n      - type\n      - coordinates\n      type: object\n    numberMatched:\n      description: \u003e-\n        The number of features of the feature type that match the selection parameters\n        like `bbox`.\n      example: 127\n      minimum: 0\n      type: integer\n    numberReturned:\n      description: \u003e-\n        The number of features in the feature collection.\n\n\n        A server may omit this information in a response, if the information about\n        the number of features is not known or difficult to compute.\n\n\n        If the value is provided, the value shall be identical to the number of items\n        in the \"features\" array.\n      example: 10\n      minimum: 0\n      type: integer\n    pointGeoJSON:\n      properties:\n        coordinates:\n          items:\n            type: number\n          minItems: 2\n          type: array\n        type:\n          enum:\n          - Point\n          type: string\n      required:\n      - type\n      - coordinates\n      type: object\n    polygonGeoJSON:\n      properties:\n        coordinates:\n          items:\n            items:\n              items:\n                type: number\n              minItems: 2\n              type: array\n            minItems: 4\n            type: array\n          type: array\n        type:\n          enum:\n          - Polygon\n          type: string\n      required:\n      - type\n      - coordinates\n      type: object\n      example:\n        coordinates:\n        - - - 7.242974548172171\n            - 46.57310580640624\n          - - 7.243756483316452\n            - 46.35721185723752\n          - - 7.698490766144817\n            - 46.357085154660915\n          - - 7.699524647567326\n            - 46.57297861624267\n          - - 7.242974548172171\n            - 46.57310580640624\n        type: Polygon\n    projEpsg:\n      description: \u003e-\n        A Coordinate Reference System (CRS) is the data reference system (sometimes\n        called a 'projection') used by the asset data, and can usually be referenced\n        using an EPSG code. If the asset data does not have a CRS, such as in the\n        case of non-rectified imagery with Ground Control Points, proj:epsg should\n        be set to null. It should also be set to null if a CRS exists, but for which\n        there is no valid EPSG code.\n      example: 2056\n      title: EPSG code.\n      type: integer\n    providers:\n      description: \u003e-\n        A list of providers, which may include all organizations capturing or processing\n        the data or the hosting provider. Providers should be listed in chronological\n        order with the most recent provider being the last element of the list.\n      items:\n        properties:\n          description:\n            description: \u003e-\n              Multi-line description to add further provider information such as processing\n              details for processors and producers, hosting details for hosts or basic\n              contact information.\n\n\n              CommonMark 0.29 syntax MAY be used for rich text representation.\n            type: string\n          name:\n            description: The name of the organization or the individual.\n            type: string\n          roles:\n            description: \u003e-\n              Roles of the provider.\n\n\n              The provider's role(s) can be one or more of the following elements:\n\n\n              * licensor: The organization that is licensing the dataset under\n\n\n                the license specified in the collection's license field.\n\n              * producer: The producer of the data is the provider that\n\n\n                initially captured and processed the source data, e.g. ESA for\n                Sentinel-2 data.\n\n              * processor: A processor is any provider who processed data to a\n\n\n                derived product.\n\n              * host: The host is the actual provider offering the data on their\n\n\n                storage. There should be no more than one host, specified as last\n                element of the list.\n            items:\n              enum:\n              - producer\n              - licensor\n              - processor\n              - host\n              type: string\n            type: array\n          url:\n            description: \u003e-\n              Homepage on which the provider describes the dataset and publishes contact\n              information.\n            format: url\n            type: string\n        required:\n        - name\n        title: Provider\n        type: object\n      type: array\n      example:\n      - name: Federal Office of Topography - swisstopo\n        roles:\n        - producer\n        - licensor\n        url: https://www.swisstopo.admin.ch\n    query:\n      additionalProperties:\n        $ref: \"#/components/schemas/queryProp\"\n      description: Define which properties to query and the operations to apply\n      example:\n        title:\n          eq: \"Swissregio\"\n          contains: \"Swiss\"\n        created:\n          lte: \"2021-01-01T00:00:00.000Z\"\n        updated:\n          gte: \"2020-01-01T00:00:00.000Z\"\n      type: object\n    queryFilter:\n      description: Allows users to query properties for specific values\n      properties:\n        query:\n          $ref: \"#/components/schemas/query\"\n      type: object\n    queryProp:\n      anyOf:\n      - description: \u003e-\n          If the object doesn't contain any of the operators, it is equivalent to\n          using the equals operator\n      - description: Match using an operator\n        properties:\n          contains:\n            description: \u003e-\n              Find items with a property that contains the specified literal string,\n              e.g., matches \".*\u003cSTRING\u003e.*\". A case-insensitive comparison must be\n              performed.\n            type: string\n          endsWith:\n            description: \u003e-\n              Find items with a property that ends with the specified string. A case-insensitive\n              comparison must be performed.\n            type: string\n          eq:\n            description: \u003e-\n              Find items with a property that is equal to the specified value. For\n              strings, a case-insensitive comparison must be performed.\n            nullable: true\n            oneOf:\n            - type: string\n            - type: number\n            - type: boolean\n          gt:\n            description: Find items with a property value greater than the specified\n              value.\n            oneOf:\n            - format: date-time\n              type: string\n            - type: number\n          gte:\n            description: Find items with a property value greater than or equal the\n              specified value.\n            oneOf:\n            - format: date-time\n              type: string\n            - type: number\n          in:\n            description: \u003e-\n              Find items with a property that equals at least one entry in the specified\n              array. A case-insensitive comparison must be performed.\n            items:\n              oneOf:\n              - type: string\n              - type: number\n            type: array\n          lt:\n            description: Find items with a property value less than the specified\n              value.\n            oneOf:\n            - format: date-time\n              type: string\n            - type: number\n          lte:\n            description: Find items with a property value less than or equal the specified\n              value.\n            oneOf:\n            - format: date-time\n              type: string\n            - type: number\n          neq:\n            description: \u003e-\n              Find items that *don't* contain the specified value. For strings, a\n              case-insensitive comparison must be performed.\n            nullable: true\n            oneOf:\n            - type: string\n            - type: number\n            - type: boolean\n          startsWith:\n            description: \u003e-\n              Find items with a property that begins with the specified string. A\n              case-insensitive comparison must be performed.\n            type: string\n        type: object\n      description: \u003e-\n        Apply query operations to a specific property. The following properties are\n        currently supported: `created`, `updated`, `title`.\n    roles:\n      type: array\n      items:\n        type: string\n      description: Purposes of the asset\n      example:\n      - thumbnail\n    searchBody:\n      allOf:\n      - $ref: \"#/components/schemas/queryFilter\"\n      - $ref: \"#/components/schemas/bboxFilter\"\n      - $ref: \"#/components/schemas/datetimeFilter\"\n      - $ref: \"#/components/schemas/intersectsFilter\"\n      - $ref: \"#/components/schemas/collectionsFilter\"\n      - $ref: \"#/components/schemas/idsFilter\"\n      - $ref: \"#/components/schemas/limitFilter\"\n      description: The search criteria\n      type: object\n    stac_version:\n      example: 0.9.0\n      title: STAC version\n      type: string\n      readOnly: true\n    timeStamp:\n      description: This property indicates the time and date when the response was\n        generated.\n      example: \"2017-08-17T08:05:32Z\"\n      format: date-time\n      type: string\n    title:\n      type: string\n      description: Displayed title\n      example: Thumbnail\n    type:\n      type: string\n      description: Media type of the asset\n      example: image/tiff; application=geotiff\n    updated:\n      description: RFC 3339 compliant datetime string, time when the object was updated\n      example: 2018-02-12T23:20:50Z\n      type: string\n      format: date-time\n      readOnly: true\n    assetId:\n      type: string\n      pattern: ^[a-z0-9.-_]+$\n      title: ID\n      description: \u003e-\n        The asset id uniquely identifies the asset for an item\n\n\n        **Note**: `id` must be unique for the item and must be identical to the filename.\n      example: smr50-263-2016-2056-kgrs-2.5.tiff\n    assets:\n      title: Assets\n      type: object\n      properties:\n        assets:\n          items:\n            $ref: \"#/components/schemas/readUpdateAsset\"\n          type: array\n        links:\n          items:\n            $ref: \"#/components/schemas/link\"\n          type: array\n          example:\n          - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets\n            rel: self\n          - href: https://data.geo.admin.ch/api/stac/v0.9/\n            rel: root\n          - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019\n            rel: parent\n          - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019\n            rel: item\n          - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale\n            rel: collection\n    collectionWrite:\n      title: collection\n      allOf:\n      - $ref: \"#/components/schemas/collectionBase\"\n      - type: object\n        properties:\n          published:\n            type: boolean\n            default: True\n            description: |\n              Collection that are not published are not listed in the /collections endpoint. Same for collection's items,\n              they are then not listed in the /search endpoint when not published.\n          links:\n            type: array\n            items:\n              $ref: \"#/components/schemas/link\"\n            example:\n            - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html\n              rel: license\n              title: Licence for the free geodata of the Federal Office of Topography\n                swisstopo\n            - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df\n              rel: describedby\n    createAsset:\n      allOf:\n      - $ref: \"#/components/schemas/assetBase\"\n      - type: object\n        required:\n        - id\n        - links\n        properties:\n          id:\n            $ref: \"#/components/schemas/assetId\"\n          links:\n            items:\n              $ref: \"#/components/schemas/link\"\n            type: array\n            readOnly: true\n            example:\n            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets/smr50-263-2016-2056-kgrs-2.5.tiff\n              rel: self\n            - href: https://data.geo.admin.ch/api/stac/v0.9/\n              rel: root\n            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019\n              rel: parent\n            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019\n              rel: item\n            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale\n              rel: collection\n    readUpdateAsset:\n      allOf:\n      - $ref: \"#/components/schemas/assetBase\"\n      - type: object\n        required:\n        - id\n        - links\n        properties:\n          id:\n            $ref: \"#/components/schemas/assetId\"\n          links:\n            items:\n              $ref: \"#/components/schemas/link\"\n            type: array\n            readOnly: true\n            example:\n            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets/smr50-263-2016-2056-kgrs-2.5.tiff\n              rel: self\n            - href: https://data.geo.admin.ch/api/stac/v0.9/\n              rel: root\n            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019\n              rel: parent\n            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019\n              rel: item\n            - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale\n              rel: collection\n    writeItem:\n      allOf:\n      - $ref: \"#/components/schemas/itemBase\"\n      - type: object\n        properties:\n          links:\n            items:\n              $ref: \"#/components/schemas/link\"\n            type: array\n            description: \u003e-\n              Add additional link to the generated ones (`self`, `root`, `parent`,\n              `items`, `collection`, `next`, `previous`)\n    createItem:\n      allOf:\n      - type: object\n        required:\n        - id\n        properties:\n          id:\n            $ref: \"#/components/schemas/itemId\"\n      - $ref: \"#/components/schemas/writeItem\"\n    updateItem:\n      allOf:\n      - type: object\n        required:\n        - id\n        properties:\n          id:\n            $ref: \"#/components/schemas/itemIdUpdate\"\n      - $ref: \"#/components/schemas/writeItem\"\n    partialItem:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/itemIdUpdate\"\n        geometry:\n          $ref: \"#/components/schemas/itemGeometry\"\n        properties:\n          $ref: \"#/components/schemas/itemProperties\"\n        links:\n          type: array\n          items:\n            $ref: \"#/components/schemas/link\"\n          description: \u003e-\n            Add/update additional link to the generated ones (`self`, `root`, `parent`,\n            `items`, `collection`, `next`, `previous`)\n      example:\n        properties:\n          datetime: \"2016-05-03T13:22:30.040Z\"\n    partialCollection:\n      type: object\n      description: Allows for a set of partial metadata fields for a collection\n      properties:\n        id:\n          description: Identifier of the collection used, for example, in URIs\n          type: string\n          example: ch.swisstopo.pixelkarte-farbe-pk200.noscale\n        title:\n          description: Human readable title of the collection\n          type: string\n          example: National Map 1:200'000\n        description:\n          description: A description of the features in the collection\n          type: string\n          example: The National Map 1:200,000 is a topographic map giving an overview\n            of Switzerland.\n        links:\n          type: array\n          items:\n            $ref: \"#/components/schemas/link\"\n          example:\n          - href: http://data.example.com/buildings\n            rel: item\n          - href: http://example.com/concepts/buildings.html\n            rel: describedBy\n            type: text/html\n        extent:\n          $ref: \"#/components/schemas/extent\"\n        itemType:\n          description: \u003e-\n            Indicator about the type of the items in the collection (the default value\n            is 'feature').\n          type: string\n          default: feature\n        crs:\n          description: The list of coordinate reference systems supported by the service\n          type: array\n          items:\n            type: string\n          default:\n          - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n          example:\n          - http://www.opengis.net/def/crs/OGC/1.3/CRS84\n          - http://www.opengis.net/def/crs/EPSG/0/4326\n        example:\n          title: The new title of the collection\n    itemIdUpdate:\n      description: \u003e-\n        Item identifier (unique per collection. If it doesn't match the `featureId`\n        in path parameters, then the Item is renamed.\n      example: smr200-200-4-2019\n      type: string\n    uploadId:\n      title: ID\n      type: string\n      description: Unique Asset upload identifier\n      example: KrFTuglD.N8ireqry_w3.oQqNwrYI7SfSXpVRiusKah0YigDnuM06hfJNIUZg4R_No0MMW9FLU2UG5anTW0boTUYVxKfBZWCFXqnQTpjnQEo1K7la39MYpjSTvIbZgnG\n      readOnly: true\n    dtUploadCreated:\n      title: created\n      description: Date and time when the Asset's upload has been created/started.\n      type: string\n      format: date-time\n      readOnly: true\n    dtUploadCompleted:\n      title: completed\n      description: |\n        Date and time when the Asset's upload has been completed.\n\n        *Note: this property is mutually exclusive with `aborted`*\n      type: string\n      format: date-time\n      readOnly: true\n    dtUploadAborted:\n      title: aborted\n      description: |\n        Date and time when the Asset's upload has been aborted.\n\n        *Note: this property is mutually exclusive with `completed`*\n      type: string\n      format: date-time\n      readOnly: true\n    assetUploads:\n      title: AssetUploads\n      type: object\n      required:\n      - uploads\n      - links\n      properties:\n        uploads:\n          description: List of uploads that are within the asset.\n          type: array\n          items:\n            $ref: \"#/components/schemas/assetUpload\"\n        links:\n          description: Next and/or previous links for the pagination.\n          type: array\n          items:\n            $ref: \"#/components/schemas/link\"\n          example:\n          - rel: next\n            href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets/smr50-263-2016-2056-kgrs-2.5.tiff/uploads?cursor=0d34\n    assetUpload:\n      title: AssetUpload\n      type: object\n      required:\n      - upload_id\n      - status\n      - created\n      - \"checksum:multihash\"\n      - number_parts\n      properties:\n        upload_id:\n          $ref: \"#/components/schemas/uploadId\"\n        status:\n          $ref: \"#/components/schemas/status\"\n        number_parts:\n          $ref: \"#/components/schemas/number_parts\"\n        urls:\n          type: array\n          description: |\n            Note: As soon as the multipart upload is completed or aborted, the `urls` property is removed.\n          items:\n            $ref: \"#/components/schemas/multipartUploadUrl\"\n          readOnly: true\n        created:\n          $ref: \"#/components/schemas/dtUploadCreated\"\n        completed:\n          $ref: \"#/components/schemas/dtUploadCompleted\"\n        aborted:\n          $ref: \"#/components/schemas/dtUploadAborted\"\n        checksum:multihash:\n          $ref: \"#/components/schemas/checksumMultihash\"\n    assetUploadCreate:\n      title: AssetUpload\n      type: object\n      required:\n      - upload_id\n      - status\n      - created\n      - \"checksum:multihash\"\n      - number_parts\n      - md5_parts\n      properties:\n        upload_id:\n          $ref: \"#/components/schemas/uploadId\"\n        status:\n          $ref: \"#/components/schemas/status\"\n        number_parts:\n          $ref: \"#/components/schemas/number_parts\"\n        md5_parts:\n          $ref: \"#/components/schemas/md5_parts\"\n        urls:\n          type: array\n          description: |\n            Note: As soon as the multipart upload is completed or aborted, the `urls` property is removed.\n          items:\n            $ref: \"#/components/schemas/multipartUploadUrl\"\n          readOnly: true\n        created:\n          $ref: \"#/components/schemas/dtUploadCreated\"\n        checksum:multihash:\n          $ref: \"#/components/schemas/checksumMultihash\"\n    assetCompleteUpload:\n      title: CompleteUpload\n      type: object\n      required:\n      - parts\n      properties:\n        parts:\n          type: array\n          description: Parts that have been uploaded\n          items:\n            title: File parts that have been uploaded\n            type: object\n            required:\n            - etag\n            - part_number\n            properties:\n              etag:\n                title: ETag\n                type: string\n                description: \u003e-\n                  ETag of the uploaded file part (returned in the header of the answer\n                  of [Upload asset file part](#operation/uploadAssetFilePart)).\n                example: \"d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b\"\n              part_number:\n                $ref: \"#/components/schemas/part_number\"\n    assetUploadCompleted:\n      title: UploadCompleted\n      type: object\n      required:\n      - upload_id\n      - status\n      - number_parts\n      - created\n      - completed\n      - \"checksum:multihash\"\n      properties:\n        upload_id:\n          $ref: \"#/components/schemas/uploadId\"\n        status:\n          title: Status\n          description: Status of the Asset's multipart upload.\n          type: string\n          enum:\n          - completed\n          example: completed\n        number_parts:\n          $ref: \"#/components/schemas/number_parts\"\n        created:\n          $ref: \"#/components/schemas/dtUploadCreated\"\n        completed:\n          $ref: \"#/components/schemas/dtUploadCompleted\"\n        checksum:multihash:\n          $ref: \"#/components/schemas/checksumMultihash\"\n    assetUploadAborted:\n      title: UploadCompleted\n      type: object\n      required:\n      - upload_id\n      - status\n      - number_parts\n      - created\n      - aborted\n      - \"checksum:multihash\"\n      properties:\n        upload_id:\n          $ref: \"#/components/schemas/uploadId\"\n        status:\n          title: Status\n          description: Status of the Asset's multipart upload.\n          type: string\n          enum:\n          - aborted\n          example: aborted\n        number_parts:\n          $ref: \"#/components/schemas/number_parts\"\n        created:\n          $ref: \"#/components/schemas/dtUploadCreated\"\n        aborted:\n          $ref: \"#/components/schemas/dtUploadAborted\"\n        checksum:multihash:\n          $ref: \"#/components/schemas/checksumMultihash\"\n    assetUploadParts:\n      title: Parts\n      type: object\n      required:\n      - parts\n      - links\n      properties:\n        parts:\n          type: object\n          description: List of uploaded parts\n          required:\n          - etag\n          - part_number\n          - modified\n          - size\n          properties:\n            etag:\n              $ref: \"#/components/schemas/uploadEtag\"\n            part_number:\n              $ref: \"#/components/schemas/part_number\"\n            modified:\n              type: string\n              format: date-time\n              description: Date time when the part was added/modified\n            size:\n              type: integer\n              description: Part size in bytes\n              minimum: 0\n              example: 1024\n        links:\n          description: Next and/or previous links for the pagination.\n          type: array\n          items:\n            $ref: \"#/components/schemas/link\"\n          example:\n          - rel: next\n            href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr200-200-4-2019/assets/smr50-263-2016-2056-kgrs-2.5.tiff/uploads/upload-id/parts?limit=50\u0026offset=50\n    status:\n      title: Status\n      description: Status of the Asset's multipart upload.\n      type: string\n      enum:\n      - in-progress\n      - aborted\n      - completed\n      readOnly: true\n    number_parts:\n      description: Number of parts for the Asset's multipart upload.\n      type: integer\n      minimum: 1\n      maximum: 100\n    md5_parts:\n      description: MD5 checksums of each individual parts.\n      type: array\n      minItems: 1\n      maxItems: 100\n      items:\n        type: object\n        required:\n        - part_number\n        - md5\n        properties:\n          part_number:\n            $ref: \"#/components/schemas/part_number\"\n          md5:\n            description: The base64-encoded 128-bit MD5 digest of the associate part\n              data.\n            type: string\n            example: yLLiDqX2OL7mcIMTjob60A==\n    part_number:\n      description: Number of the part.\n      type: integer\n      minimum: 1\n      maximum: 100\n    multipartUploadUrl:\n      title: MultipartUploadUrl\n      description: Multipart upload url.\n      type: object\n      required:\n      - url\n      - part\n      - expires\n      properties:\n        url:\n          description: Presigned URL to use to upload the Asset File part using the\n            PUT method.\n          type: string\n          format: url\n          example: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr200-200-4-2019/smr50-263-2016-2056-kgrs-2.5.tiff?uploadId=d77UbNnEVTaqCAyAz61AVqy7uuTGJ_YOUyPOklcRMr4ZPBthON9p6cpMREx683yQ_oeGVmGE_yTg4cmnEz3mTErEPKn0_m.3LBjo6A88Qxlj4vFrAdU6YBuourb.IqFF\u0026partNumber=1\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIA4HDUVYWAM6ZB6SWO%2F20210414%2Feu-central-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T112742Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=d12763467eaffa0c69d601297a661a05c9f414d4008b4148fa6ba604f203be01\n        part:\n          description: Part number assigned to this presigned URL.\n          type: integer\n          minimum: 1\n          maximum: 100\n        expires:\n          description: Date time when this presigned URL expires and is not valid\n            anymore.\n          type: string\n          format: date-time\n    uploadEtag:\n      title: ETag\n      type: string\n      description: The RFC7232 ETag for the specified uploaded part.\n      example: \"d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b\"\n  parameters:\n    assetQuery:\n      description: \u003e-\n        Query for properties in assets (e.g. mediatype). Use the JSON form of the\n        assetQueryFilter used in POST.\n      in: query\n      name: assetQuery\n      required: false\n      schema:\n        type: string\n    bbox:\n      explode: false\n      in: query\n      name: bbox\n      required: false\n      schema:\n        $ref: \"#/components/schemas/bbox\"\n      style: form\n    collectionId:\n      description: Local identifier of a collection\n      in: path\n      name: collectionId\n      required: true\n      schema:\n        type: string\n    collectionsArray:\n      explode: false\n      in: query\n      name: collections\n      required: false\n      schema:\n        $ref: \"#/components/schemas/collectionsArray\"\n    datetime:\n      explode: false\n      in: query\n      name: datetime\n      required: false\n      schema:\n        $ref: \"#/components/schemas/datetimeQuery\"\n      example: 2018-02-12T00%3A00%3A00Z%2F2018-03-18T12%3A31%3A12Z\n      style: form\n    featureId:\n      description: Local identifier of a feature\n      in: path\n      name: featureId\n      required: true\n      schema:\n        type: string\n    ids:\n      description: \u003e-\n        Array of Item ids to return. All other filter parameters that further restrict\n        the number of search results are ignored\n      explode: false\n      in: query\n      name: ids\n      required: false\n      schema:\n        $ref: \"#/components/schemas/ids\"\n    limit:\n      explode: false\n      in: query\n      name: limit\n      required: false\n      schema:\n        $ref: \"#/components/schemas/limit\"\n      style: form\n    query:\n      description: Query for properties in items. Use the JSON form of the queryFilter\n        used in POST.\n      in: query\n      name: query\n      required: false\n      schema:\n        type: string\n    IfNoneMatch:\n      name: If-None-Match\n      in: header\n      schema:\n        type: string\n      description: \u003e-\n        The RFC7232 `If-None-Match` header field makes the GET request method conditional.\n        It is composed of a comma separated list of ETags or value \"*\".\n\n\n        The server compares the client's ETags (sent with `If-None-Match`) with the\n        ETag for its current version of the resource, and if both values match (that\n        is, the resource has not changed), the server sends back a `304 Not Modified`\n        status, without a body, which tells the client that the cached version of\n        the response is still good to use (fresh).\n      example: \"d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b\"\n    IfMatch:\n      name: If-Match\n      in: header\n      schema:\n        type: string\n      description: \u003e-\n        The RFC7232 `If-Match` header field makes the GET request method conditional.\n        It is composed of a comma separated list of ETags or value \"*\".\n\n\n        The server compares the client's ETags (sent with `If-Match`) with the ETag\n        for its current version of the resource, and if both values don't match (that\n        is, the resource has changed), the server sends back a `412 Precondition Failed`\n        status, without a body, which tells the client that the cached version of\n        the response is not good to use anymore.\n      example: \"d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b\"\n    assetId:\n      name: assetId\n      in: path\n      description: Local identifier of an asset.\n      required: true\n      schema:\n        type: string\n    uploadId:\n      name: uploadId\n      in: path\n      description: Local identifier of an asset's upload.\n      required: true\n      schema:\n        type: string\n    presignedUrl:\n      name: presignedUrl\n      in: path\n      description: Presigned url returned by [Create a new Asset's multipart upload](#operation/createAssetUpload).\n      required: true\n      schema:\n        type: string\n    IfMatchWrite:\n      name: If-Match\n      in: header\n      schema:\n        type: string\n      description: \u003e-\n        The RFC7232 `If-Match` header field makes the PUT/PATCH/DEL request method\n        conditional. It is composed of a comma separated list of ETags or value \"*\".\n\n\n        The server compares the client's ETags (sent with `If-Match`) with the ETag\n        for its current version of the resource, and if both values don't match (that\n        is, the resource has changed), the server sends back a `412 Precondition Failed`\n        status, without a body, which tells the client that he would overwrite another\n        changes of the resource.\n      example: \"d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b\"\n  responses:\n    Collection:\n      headers:\n        ETag:\n          $ref: \"#/components/headers/ETag\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/collection\"\n      description: \u003e-\n        Information about the feature collection with id `collectionId`.\n\n\n        The response contains a link to the items in the collection (path `/collections/{collectionId}/items`,\n        link relation `items`) as well as key information about the collection. This\n        information includes:\n\n\n        * A local identifier for the collection that is unique for the dataset\n\n        * A list of coordinate reference systems (CRS) in which geometries may be\n        returned by the server. The first CRS is the default coordinate reference\n        system (the default is always WGS 84 with axis order longitude/latitude)\n\n        * An optional title and description for the collection\n\n        * An optional extent that can be used to provide an indication of the spatial\n        and temporal extent of the collection - typically derived from the data\n\n        * An optional indicator about the type of the items in the collection (the\n        default value, if the indicator is not provided, is 'feature')\n    Collections:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/collections\"\n      description: \u003e-\n        The feature collections shared by this API.\n\n\n        The dataset is organized as one or more feature collections. This resource\n        provides information about and access to the collections.\n\n\n        The response contains the list of collections. For each collection, a link\n        to the items in the collection (path `/collections/{collectionId}/items`,\n        link relation `items`) as well as key information about the collection. This\n        information includes:\n\n\n        * A local identifier for the collection that is unique for the dataset\n\n        * A list of coordinate reference systems (CRS) in which geometries may be\n        returned by the server. The first CRS is the default coordinate reference\n        system (the default is always WGS 84 with axis order longitude/latitude)\n\n        * An optional title and description for the collection\n\n        * An optional extent that can be used to provide an indication of the spatial\n        and temporal extent of the collection - typically derived from the data\n\n        * An optional indicator about the type of the items in the collection (the\n        default value, if the indicator is not provided, is 'feature').\n\n        The `limit` parameter may be used to control the subset of the selected collections\n        that should be returned in the response, the page size. Each page include\n        links to support paging (link relation `next` and/or `previous`).\n    ConformanceDeclaration:\n      content:\n        application/json:\n          example:\n            conformsTo:\n            - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n            - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n            - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\n          schema:\n            $ref: \"#/components/schemas/confClasses\"\n      description: \u003e-\n        The URIs of all conformance classes supported by the server.\n\n\n        To support \"generic\" clients that want to access multiple OGC API Features\n        implementations - and not \"just\" a specific API / server, the server declares\n        the conformance classes it implements and conforms to.\n    Feature:\n      headers:\n        ETag:\n          $ref: \"#/components/headers/ETag\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/item\"\n      description: \u003e-\n        Fetch the feature with id `featureId` in the feature collection with id `collectionId`\n    Features:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/items\"\n      description: \u003e-\n        The response is a document consisting of features in the collection. The features\n        included in the response are determined by the server based on the query parameters\n        of the request. To support access to larger collections without overloading\n        the client, the API supports paged access with links to the next page, if\n        more features are selected that the page size.\n\n\n        The `bbox` and `datetime` parameter can be used to select only a subset of\n        the features in the collection (the features that are in the bounding box\n        or time interval). The `bbox` parameter matches all features in the collection\n        that are not associated with a location, too. The `datetime` parameter matches\n        all features in the collection that are not associated with a time stamp or\n        interval, too.\n\n\n        The `limit` parameter may be used to control the subset of the selected features\n        that should be returned in the response, the page size. Each page include\n        links to support paging (link relation `next` and/or `previous`).\n    NotModified:\n      description: The cached resource was not modified since last request.\n    InvalidParameter:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/exception\"\n          example:\n            code: 400\n            description: \"Invalid parameter\"\n      description: A query parameter has an invalid value.\n    LandingPage:\n      content:\n        application/json:\n          example:\n            description: Catalog of Swiss Geodata Downloads\n            id: ch\n            links:\n            - href: http://data.geo.admin.ch/api/stac/v0.9/\n              rel: self\n              type: application/json\n              title: this document\n            - href: http://data.geo.admin.ch/api/stac/v0.9/static/api.html\n              rel: service-doc\n              type: text/html\n              title: the API documentation\n            - href: http://data.geo.admin.ch/api/stac/v0.9/conformance\n              rel: conformance\n              type: application/json\n              title: OGC API conformance classes implemented by this server\n            - href: http://data.geo.admin.ch/api/stac/v0.9/collections\n              rel: data\n              type: application/json\n              title: Information about the feature collections\n            - href: http://data.geo.admin.ch/api/stac/v0.9/search\n              rel: search\n              type: application/json\n              title: Search across feature collections\n            stac_version: 0.9.0\n            title: data.geo.admin.ch\n          schema:\n            $ref: \"#/components/schemas/landingPage\"\n      description: \u003e-\n        The landing page provides links to the API definition (link relations `service-desc`\n        and `service-doc`), the Conformance declaration (path `/conformance`, link\n        relation `conformance`), and the Feature Collections (path `/collections`,\n        link relation `data`).\n    NotFound:\n      description: The specified resource/URI was not found\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/exception\"\n          example:\n            code: 404\n            description: \"Resource not found\"\n    BadRequest:\n      description: The request was malformed or semantically invalid\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/exception\"\n          example:\n            code: 400\n            description: \"Invalid parameter\"\n    PermissionDenied:\n      description: No Permission for this request\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/exception\"\n          example:\n            code: 403\n            description: \"Permission denied\"\n    PreconditionFailed:\n      description: Some condition specified by the request could not be met in the\n        server\n    ServerError:\n      description: \u003e-\n        The request was syntactically and semantically valid, but an error occurred\n        while trying to act upon it\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/exception\"\n          example:\n            code: 500\n            description: \"Internal server error\"\n    Assets:\n      description: \u003e-\n        The response is a document consisting of all assets of the feature.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/assets\"\n    Asset:\n      description: \u003e-\n        The response is a document consisting of one asset of the feature.\n      headers:\n        ETag:\n          $ref: \"#/components/headers/ETag\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/readUpdateAsset\"\n    DeletedResource:\n      description: Status of the delete resource\n      content:\n        application/json:\n          schema:\n            description: \u003e-\n              Information about the deleted resource and a link to the parent resource\n            type: object\n            properties:\n              code:\n                type: integer\n                example: 200\n              description:\n                type: string\n                example: Resource successfully deleted\n              links:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/link\"\n                description: \u003e-\n                  The array contain at least a link to the parent resource (`rel:\n                  parent`).\n                example:\n                - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale\n                  rel: parent\n            required:\n            - code\n            - links\n  headers:\n    ETag:\n      schema:\n        type: string\n      description: \u003e-\n        The RFC7232 ETag header field in a response provides the current entity- tag\n        for the selected resource. An entity-tag is an opaque identifier for different\n        versions of a resource over time, regardless whether multiple versions are\n        valid at the same time. An entity-tag consists of an opaque quoted string,\n        possibly prefixed by a weakness indicator.\n      example: \"d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b\"\n      required: true\n  examples:\n    inprogress:\n      summary: In progress upload example\n      value:\n        upload_id: KrFTuglD.N8ireqry_w3.oQqNwrYI7SfSXpVRiusKah0YigDnuM06hfJNIUZg4R_No0MMW9FLU2UG5anTW0boTUYVxKfBZWCFXqnQTpjnQEo1K7la39MYpjSTvIbZgnG\n        status: in-progress\n        number_parts: 1\n        urls:\n        - url: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr200-200-4-2019/smr50-263-2016-2056-kgrs-2.5.tiff?uploadId=d77UbNnEVTaqCAyAz61AVqy7uuTGJ_YOUyPOklcRMr4ZPBthON9p6cpMREx683yQ_oeGVmGE_yTg4cmnEz3mTErEPKn0_m.3LBjo6A88Qxlj4vFrAdU6YBuourb.IqFF\u0026partNumber=1\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=AKIA4HDUVYWAM6ZB6SWO%2F20210414%2Feu-central-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20210414T112742Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=d12763467eaffa0c69d601297a661a05c9f414d4008b4148fa6ba604f203be01\n          part: 1\n          expires: '2019-08-24T14:15:22Z'\n        created: '2019-08-24T14:15:22Z'\n        checksum:multihash: 12200ADEC47F803A8CF1055ED36750B3BA573C79A3AF7DA6D6F5A2AED03EA16AF3BC\n    completed:\n      summary: Completed upload example\n      value:\n        upload_id: KrFTuglD.N8ireqry_w3.oQqNwrYI7SfSXpVRiusKah0YigDnuM06hfJNIUZg4R_No0MMW9FLU2UG5anTW0boTUYVxKfBZWCFXqnQTpjnQEo1K7la39MYpjSTvIbZgnG\n        status: completed\n        number_parts: 1\n        created: '2019-08-24T14:15:22Z'\n        completed: '2019-08-24T14:15:22Z'\n        checksum:multihash: 12200ADEC47F803A8CF1055ED36750B3BA573C79A3AF7DA6D6F5A2AED03EA16AF3BC\n    aborted:\n      summary: Aborted upload example\n      value:\n        upload_id: KrFTuglD.N8ireqry_w3.oQqNwrYI7SfSXpVRiusKah0YigDnuM06hfJNIUZg4R_No0MMW9FLU2UG5anTW0boTUYVxKfBZWCFXqnQTpjnQEo1K7la39MYpjSTvIbZgnG\n        status: completed\n        number_parts: 1\n        created: '2019-08-24T14:15:22Z'\n        aborted: '2019-08-24T14:15:22Z'\n        checksum:multihash: 12200ADEC47F803A8CF1055ED36750B3BA573C79A3AF7DA6D6F5A2AED03EA16AF3BC\n",
			"canonicalURL": "/github.com/geoadmin/service-stac@e1bc3aa0b8c01eaa4993374375975142ed00edd2/-/blob/spec/static/spec/v0.9/openapitransactional.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/geoadmin/service-stac/blob/e1bc3aa0b8c01eaa4993374375975142ed00edd2/spec/static/spec/v0.9/openapitransactional.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"itemsSearchPost\": parse schema: allOf: [1]: parse schema: property \"links\": parse schema: resolve \"#/components/schemas/itemsSearchPostLinks\": parse schema: item: parse schema: resolve \"#/components/schemas/linkPostSearch\": parse schema: allOf: [1]: parse schema: property \"body\": at 1:53082: parse default: unexpected type: \"object\""
}