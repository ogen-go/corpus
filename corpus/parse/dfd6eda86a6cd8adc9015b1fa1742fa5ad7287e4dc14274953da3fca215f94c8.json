{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mailcow/mailcow-dockerized"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "data/web/api/openapi.yaml",
			"byteSize": 177027,
			"content": "openapi: 3.0.0\ninfo:\n  description: \u003e-\n    mailcow is complete e-mailing solution with advanced antispam, antivirus,\n    nice UI and API.\n\n\n    In order to use this API you have to create a API key and add your IP\n    address to the whitelist of allowed IPs this can be done by logging into the\n    Mailcow UI using your admin account, then go to Configuration \u003e Access \u003e\n    Edit administrator details \u003e API. There you will find a collapsed API menu.\n\n\n    There are two types of API keys\n      - The read only key can only be used for all get endpoints\n      - The read write key can be used for all endpoints\n\n  title: mailcow API\n  version: \"1.0.0\"\n\nservers:\n  - url: /\n\ncomponents:\n  securitySchemes:\n    ApiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-Key\n  responses:\n    Unauthorized:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              type:\n                type: string\n                example: error\n              msg:\n                type: string\n                example: authentication failed\n            required:\n              - type\n              - msg\n\nsecurity:\n  - ApiKeyAuth: []\n\npaths:\n  /api/v1/add/alias:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - mailbox\n                        - add\n                        - alias\n                        - active: \"1\"\n                          address: alias@domain.tld\n                          goto: destination@domain.tld\n                        - null\n                      msg:\n                        - alias_added\n                        - alias@domain.tld\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Aliases\n      description: \u003e-\n        You may create your own mailbox alias using this action. It takes a JSON\n        object containing a domain informations.\n\n        Only one `goto*` option can be used, for ex. if you want learn as spam,\n        then send just `goto_spam = 1` in request body.\n      operationId: Create alias\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                active: \"1\"\n                address: alias@domain.tld\n                goto: destination@domain.tld\n              properties:\n                active:\n                  description: is alias active or not\n                  type: boolean\n                address:\n                  description: 'alias address, for catchall use \"@domain.tld\"'\n                  type: string\n                goto:\n                  description: \"destination address, comma separated\"\n                  type: string\n                goto_ham:\n                  description: learn as ham\n                  type: boolean\n                goto_null:\n                  description: silently ignore\n                  type: boolean\n                goto_spam:\n                  description: learn as spam\n                  type: boolean\n                sogo_visible:\n                  description: toggle visibility as selectable sender in SOGo\n                  type: boolean\n              type: object\n      summary: Create alias\n  /api/v1/add/time_limited_alias:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - mailbox\n                        - add\n                        - time_limited_alias\n                        - address: info@domain.tld\n                          domain: domain.tld\n                        - null\n                      msg:\n                        - mailbox_modified\n                        - info@domain.tld\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Aliases\n      description: \u003e-\n        You may create a time limited alias using this action. It takes a JSON\n        object containing a domain and mailbox informations.\n        Mailcow will generate a random alias.\n      operationId: Create time limited alias\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                username: info@domain.tld\n                domain: domain.tld\n              properties:\n                username:\n                  description: 'the mailbox an alias should be created for'\n                  type: string\n                domain:\n                  description: \"the domain\"\n                  type: string\n              type: object\n      summary: Create time limited alias\n  /api/v1/add/app-passwd:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - app_passwd\n                        - add\n                        - active: \"1\"\n                          username: info@domain.tld\n                          app_name: wordpress\n                          app_passwd: keyleudecticidechothistishownsan31\n                          app_passwd2: keyleudecticidechothistishownsan31\n                          protocols:\n                            - imap_access\n                            - dav_access\n                            - smtp_access\n                            - eas_access\n                            - pop3_access\n                            - sieve_access\n                      msg: app_passwd_added\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - App Passwords\n      description: \u003e-\n        Using this endpoint you can create a new app password for a specific\n        mailbox.\n      operationId: Create App Password\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                active: \"1\"\n                username: info@domain.tld\n                app_name: wordpress\n                app_passwd: keyleudecticidechothistishownsan31\n                app_passwd2: keyleudecticidechothistishownsan31\n                protocols:\n                  - imap_access\n                  - dav_access\n                  - smtp_access\n                  - eas_access\n                  - pop3_access\n                  - sieve_access\n              properties:\n                active:\n                  description: is alias active or not\n                  type: boolean\n                username:\n                  description: mailbox for which the app password should be created\n                  type: string\n                app_name:\n                  description: name of your app password\n                  type: string\n                app_passwd:\n                  description: your app password\n                  type: string\n                app_passwd2:\n                  description: your app password\n                  type: string\n              type: object\n      summary: Create App Password\n  /api/v1/add/bcc:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - bcc\n                        - add\n                        - active: \"1\"\n                          bcc_dest: bcc@awesomecow.tld\n                          local_dest: mailcow.tld\n                          type: sender\n                        - null\n                      msg: bcc_saved\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Address Rewriting\n      description: \u003e-\n        Using this endpoint you can create a BCC map to forward all mails via a\n        bcc for a given domain.\n      operationId: Create BCC Map\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                active: \"1\"\n                bcc_dest: bcc@awesomecow.tld\n                local_dest: mailcow.tld\n                type: sender\n              properties:\n                active:\n                  description: 1 for a active user account 0 for a disabled user account\n                  type: number\n                bcc_dest:\n                  description: the email address where all mails should be send to\n                  type: string\n                local_dest:\n                  description: the domain which emails should be forwarded\n                  type: string\n                type:\n                  description: the type of bcc map can be `sender` or `recipient`\n                  type: string\n              type: object\n      summary: Create BCC Map\n  /api/v1/add/dkim:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - dkim\n                        - add\n                        - dkim_selector: dkim\n                          domains: hanspeterlol.de\n                          key_size: \"2048\"\n                      msg:\n                        - dkim_added\n                        - hanspeterlol.de\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - DKIM\n      description: Using this endpoint you can generate new DKIM keys.\n      operationId: Generate DKIM Key\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                dkim_selector: dkim\n                domains: mailcow.tld\n                key_size: \"2048\"\n              properties:\n                dkim_selector:\n                  description: the DKIM selector default dkim\n                  type: string\n                domains:\n                  description: a list of domains for which a dkim key should be generated\n                  type: string\n                key_size:\n                  description: the key size (1024 or 2048)\n                  type: number\n              type: object\n      summary: Generate DKIM Key\n  /api/v1/add/dkim_duplicate:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - dkim\n                        - duplicate\n                        - from_domain: mailcow.tld\n                          to_domain: awesomecow.tld\n                      msg:\n                        - dkim_duplicated\n                        - mailcow.tld\n                        - awesomecow.tld\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - DKIM\n      description: Using this endpoint you can duplicate the DKIM Key of one domain.\n      operationId: Duplicate DKIM Key\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                from_domain: mailcow.tld\n                to_domain: awesomecow.tld\n              properties:\n                fron_domain:\n                  description: the domain where the dkim key should be copied from\n                  type: string\n                to_domain:\n                  description: the domain where the dkim key should be copied to\n                  type: string\n              type: object\n      summary: Duplicate DKIM Key\n  /api/v1/add/domain:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - ratelimit\n                        - edit\n                        - domain\n                        - object: domain.tld\n                          rl_frame: s\n                          rl_value: \"10\"\n                      msg:\n                        - rl_saved\n                        - domain.tld\n                      type: success\n                    - log:\n                        - mailbox\n                        - add\n                        - domain\n                        - active: \"1\"\n                          aliases: \"400\"\n                          restart_sogo: \"1\"\n                          backupmx: \"0\"\n                          defquota: \"3072\"\n                          description: some decsription\n                          domain: domain.tld\n                          mailboxes: \"10\"\n                          maxquota: \"10240\"\n                          quota: \"10240\"\n                          relay_all_recipients: \"0\"\n                          rl_frame: s\n                          rl_value: \"10\"\n                          tags: [\"tag1\", \"tag2\"]\n                        - null\n                      msg:\n                        - domain_added\n                        - domain.tld\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Domains\n      description: \u003e-\n        You may create your own domain using this action. It takes a JSON object\n        containing a domain informations.\n      operationId: Create domain\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                active: \"1\"\n                aliases: \"400\"\n                backupmx: \"0\"\n                defquota: \"3072\"\n                description: some decsription\n                domain: domain.tld\n                mailboxes: \"10\"\n                maxquota: \"10240\"\n                quota: \"10240\"\n                relay_all_recipients: \"0\"\n                rl_frame: s\n                rl_value: \"10\"\n                restart_sogo: \"10\"\n                tags: [\"tag1\", \"tag2\"]\n              properties:\n                active:\n                  description: is domain active or not\n                  type: boolean\n                aliases:\n                  description: limit count of aliases associated with this domain\n                  type: number\n                backupmx:\n                  description: relay domain or not\n                  type: boolean\n                defquota:\n                  description: predefined mailbox quota in `add mailbox` form\n                  type: number\n                description:\n                  description: Description of domain\n                  type: string\n                domain:\n                  description: Fully qualified domain name\n                  type: string\n                mailboxes:\n                  description: limit count of mailboxes associated with this domain\n                  type: number\n                maxquota:\n                  description: maximum quota per mailbox\n                  type: number\n                quota:\n                  description: maximum quota for this domain (for all mailboxes in sum)\n                  type: number\n                restart_sogo:\n                  description: restart SOGo to activate the domain in SOGo\n                  type: number\n                relay_all_recipients:\n                  description: \u003e-\n                    if not, them you have to create \"dummy\" mailbox for each\n                    address to relay\n                  type: boolean\n                rl_frame:\n                  enum:\n                    - s\n                    - m\n                    - h\n                    - d\n                  type: string\n                rl_value:\n                  description: rate limit value\n                  type: number\n              type: object\n      summary: Create domain\n  /api/v1/add/domain-admin:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - domain_admin\n                        - add\n                        - active: \"1\"\n                          domains: mailcow.tld\n                          password: \"*\"\n                          password2: \"*\"\n                          username: testadmin\n                      msg:\n                        - domain_admin_added\n                        - testadmin\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Domain admin\n      description: \u003e-\n        Using this endpoint you can create a new Domain Admin user. This user\n        has full control over a domain, and can create new mailboxes and\n        aliases.\n      operationId: Create Domain Admin user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                active: \"1\"\n                domains: mailcow.tld\n                password: supersecurepw\n                password2: supersecurepw\n                username: testadmin\n              properties:\n                active:\n                  description: 1 for a active user account 0 for a disabled user account\n                  type: number\n                domains:\n                  description: the domains the user should be a admin of\n                  type: string\n                password:\n                  description: domain admin user password\n                  type: string\n                password2:\n                  description: domain admin user password\n                  type: string\n                username:\n                  description: the username for the admin user\n                  type: string\n              type: object\n      summary: Create Domain Admin user\n  /api/v1/edit/da-acl:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - type: success\n                      log:\n                        - acl\n                        - edit\n                        - testadmin\n                        - username:\n                            - testadmin\n                          da_acl:\n                            - syncjobs\n                            - quarantine\n                            - login_as\n                            - sogo_access\n                            - app_passwds\n                            - bcc_maps\n                            - pushover\n                            - filters\n                            - ratelimit\n                            - spam_policy\n                            - extend_sender_acl\n                            - unlimited_quota\n                            - protocol_access\n                            - smtp_ip_access\n                            - alias_domains\n                            - domain_desc\n                      msg:\n                        - acl_saved\n                        - testadmin\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Domain admin\n      description: \u003e-\n        Using this endpoint you can edit the ACLs of a Domain Admin user. This user\n        has full control over a domain, and can create new mailboxes and\n        aliases.\n      operationId: Edit Domain Admin ACL\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                items:\n                  - testadmin\n                attr:\n                  da_acl:\n                    - syncjobs\n                    - quarantine\n                    - login_as\n                    - sogo_access\n                    - app_passwds\n                    - bcc_maps\n                    - pushover\n                    - filters\n                    - ratelimit\n                    - spam_policy\n                    - extend_sender_acl\n                    - unlimited_quota\n                    - protocol_access\n                    - smtp_ip_access\n                    - alias_domains\n                    - domain_desc\n              properties:\n                items:\n                  description: contains the domain admin username you want to edit\n                  type: object\n                attr:\n                  properties:\n                    da_acl:\n                      description: contains the list of acl names that are active for this user\n                      type: object\n                  type: object\n      summary: Edit Domain Admin ACL\n  /api/v1/edit/domain-admin:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - type: success\n                      log:\n                        - domain_admin\n                        - edit\n                        - username: testadmin\n                          active: [\"0\",\"1\"]\n                          username_new: testadmin\n                          domains: [\"domain.tld\"]\n                          password: \"*\"\n                          password2: \"*\"\n                      msg:\n                        - domain_admin_modified\n                        - testadmin\n              schema:\n                properties:\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Domain admin\n      description: \u003e-\n        Using this endpoint you can edit a existing Domain Admin user. This user\n        has full control over a domain, and can create new mailboxes and\n        aliases.\n      operationId: Edit Domain Admin user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                items:\n                  - testadmin\n                attr:\n                  active:\n                    - '0'\n                    - '1'\n                  username_new: testadmin\n                  domains: [\"domain.tld\"]\n                  password: supersecurepassword\n                  password2: supersecurepassword\n              properties:\n                attr:\n                  properties:\n                    active:\n                      description: is the domain admin active or not\n                      type: boolean\n                    username_new:\n                      description: the username of the domain admin, change this to change the username\n                      type: string\n                    domains:\n                      description: a list of all domains managed by this domain admin\n                      type: array\n                      items:\n                        type: string\n                    password:\n                      description: the new domain admin user password\n                      type: string\n                    password2:\n                      description: the new domain admin user password for confirmation\n                      type: string\n                  type: object\n                items:\n                  description: contains the domain admin username you want to edit\n                  type: object\n      summary: Edit Domain Admin user\n  /api/v1/add/domain-policy:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - policy\n                        - add\n                        - domain\n                        - domain: domain.tld\n                          object_from: \"*@baddomain.tld\"\n                          object_list: bl\n                      msg:\n                        - domain_modified\n                        - domain.tld\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Domain antispam policies\n      description: \u003e-\n        You may create your own domain policy using this action. It takes a JSON\n        object containing a domain informations.\n      operationId: Create domain policy\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                domain: domain.tld\n                object_from: \"*@baddomain.tld\"\n                object_list: bl\n              properties:\n                domain:\n                  description: domain name to which policy is associated to\n                  type: string\n                object_from:\n                  description: exact address or use wildcard to match whole domain\n                  type: string\n                object_list:\n                  enum:\n                    - wl\n                    - bl\n                  type: string\n              type: object\n      summary: Create domain policy\n  /api/v1/add/fwdhost:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - fwdhost\n                        - add\n                        - filter_spam: \"0\"\n                          hostname: hosted.mailcow.de\n                      msg:\n                        - forwarding_host_added\n                        - \"5.1.76.202, 2a00:f820:417::202\"\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Fordwarding Hosts\n      description: \u003e-\n        Add a new Forwarding host to mailcow. You can chose to enable or disable\n        spam filtering of incoming emails by specifing `filter_spam` 0 =\n        inactive, 1 = active.\n      operationId: Add Forward Host\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                filter_spam: \"0\"\n                hostname: hosted.mailcow.de\n              properties:\n                filter_spam:\n                  description: \"1 to enable spam filter, 0 to disable spam filter\"\n                  type: number\n                hostname:\n                  description: contains the hostname you want to add\n                  type: string\n              type: object\n      summary: Add Forward Host\n  /api/v1/add/mailbox:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - mailbox\n                        - add\n                        - mailbox\n                        - active: \"1\"\n                          domain: domain.tld\n                          local_part: info\n                          name: Full name\n                          password: \"*\"\n                          password2: \"*\"\n                          quota: \"3072\"\n                          force_pw_update: \"1\"\n                          tls_enforce_in: \"1\"\n                          tls_enforce_out: \"1\"\n                          tags: [\"tag1\", \"tag2\"]\n                        - null\n                      msg:\n                        - mailbox_added\n                        - info@domain.tld\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Mailboxes\n      description: \u003e-\n        You may create your own mailbox using this action. It takes a JSON\n        object containing a domain informations.\n      operationId: Create mailbox\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                active: \"1\"\n                domain: domain.tld\n                local_part: info\n                name: Full name\n                password: atedismonsin\n                password2: atedismonsin\n                quota: \"3072\"\n                force_pw_update: \"1\"\n                tls_enforce_in: \"1\"\n                tls_enforce_out: \"1\"\n                tags: [\"tag1\", \"tag2\"]\n              properties:\n                active:\n                  description: is mailbox active or not\n                  type: boolean\n                domain:\n                  description: domain name\n                  type: string\n                local_part:\n                  description: left part of email address\n                  type: string\n                name:\n                  description: Full name of the mailbox user\n                  type: string\n                password2:\n                  description: mailbox password for confirmation\n                  type: string\n                password:\n                  description: mailbox password\n                  type: string\n                quota:\n                  description: mailbox quota\n                  type: number\n                force_pw_update:\n                  description: forces the user to update its password on first login\n                  type: boolean\n                tls_enforce_in:\n                  description: force inbound email tls encryption\n                  type: boolean\n                tls_enforce_out:\n                  description: force oubound tmail tls encryption\n                  type: boolean\n              type: object\n      summary: Create mailbox\n\n  /api/v1/add/oauth2-client:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - oauth2\n                        - add\n                        - client\n                        - redirect_uri: \"https://mailcow.tld\"\n                      msg: Added client access\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - oAuth Clients\n      description: Using this endpoint you can create a oAuth clients.\n      operationId: Create oAuth Client\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                redirect_uri: \"https://mailcow.tld\"\n              properties:\n                redirect_uri:\n                  description: the uri where you should be redirected after oAuth\n                  type: string\n              type: object\n      summary: Create oAuth Client\n  /api/v1/add/recipient_map:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - recipient_map\n                        - add\n                        - active: \"1\"\n                          recipient_map_new: target@mailcow.tld\n                          recipient_map_old: recipient@mailcow.tld\n                        - null\n                      msg:\n                        - recipient_map_entry_saved\n                        - recipient@mailcow.tld\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Address Rewriting\n      description: \u003e-\n        Using this endpoint you can create a recipient map to forward all mails\n        from one email address to another.\n      operationId: Create Recipient Map\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                active: \"1\"\n                recipient_map_new: target@mailcow.tld\n                recipient_map_old: recipient@mailcow.tld\n              properties:\n                active:\n                  description: 1 for a active user account 0 for a disabled user account\n                  type: number\n                recipient_map_new:\n                  description: the email address that should receive the forwarded emails\n                  type: string\n                recipient_map_old:\n                  description: the email address which emails should be forwarded\n                  type: string\n              type: object\n      summary: Create Recipient Map\n  /api/v1/add/relayhost:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - relayhost\n                        - add\n                        - hostname: \"mailcow.tld:25\"\n                          password: supersecurepassword\n                          username: testuser\n                      msg:\n                        - relayhost_added\n                        - \"\"\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Routing\n      description: Using this endpoint you can create Sender-Dependent Transports.\n      operationId: Create Sender-Dependent Transports\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                hostname: \"mailcow.tld:25\"\n                password: supersecurepassword\n                username: testuser\n              properties:\n                hostname:\n                  description: the hostname of the smtp server with port\n                  type: string\n                password:\n                  description: the password for the smtp user\n                  type: string\n                username:\n                  description: the username used to authenticate\n                  type: string\n              type: object\n      summary: Create Sender-Dependent Transports\n  /api/v1/add/resource:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - mailbox\n                        - add\n                        - resource\n                        - active: \"1\"\n                          description: test\n                          domain: mailcow.tld\n                          kind: location\n                          multiple_bookings: \"0\"\n                          multiple_bookings_custom: \"\"\n                          multiple_bookings_select: \"0\"\n                        - null\n                      msg:\n                        - resource_added\n                        - mailcow.tld\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Resources\n      description: Using this endpoint you can create Resources.\n      operationId: Create Resources\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                active: \"1\"\n                description: test\n                domain: mailcow.tld\n                kind: location\n                multiple_bookings: \"0\"\n                multiple_bookings_custom: \"\"\n                multiple_bookings_select: \"0\"\n              properties:\n                active:\n                  description: 1 for a active transport map 0 for a disabled transport map\n                  type: number\n                description:\n                  description: a description of the resource\n                  type: string\n                domain:\n                  description: the domain for which the resource should be\n                  type: string\n                kind:\n                  description: the kind of recouse\n                  enum:\n                    - location\n                    - group\n                    - thing\n                  type: string\n                multiple_bookings:\n                  enum:\n                    - \"-1\"\n                    - \"1\"\n                    - custom\n                  type: string\n                multiple_bookings_custom:\n                  description: always empty\n                  type: number\n                multiple_bookings_select:\n                  enum:\n                    - \"-1\"\n                    - \"1\"\n                    - custom\n                  type: string\n              type: object\n      summary: Create Resources\n  /api/v1/add/syncjob:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - mailbox\n                        - add\n                        - syncjob\n                        - active: \"1\"\n                          automap: \"1\"\n                          custom_params: \"\"\n                          delete1: \"0\"\n                          delete2: \"0\"\n                          delete2duplicates: \"1\"\n                          enc1: SSL\n                          exclude: (?i)spam|(?i)junk\n                          host1: imap.server.tld\n                          maxage: \"0\"\n                          maxbytespersecond: \"0\"\n                          mins_interval: \"20\"\n                          password1: supersecret\n                          port1: 993\n                          skipcrossduplicates: \"0\"\n                          subfolder2: External\n                          subscribeall: \"1\"\n                          timeout1: \"600\"\n                          timeout2: \"600\"\n                          user1: username\n                          username: mailbox@domain.tld\n                        - null\n                      msg:\n                        - mailbox_modified\n                        - mailbox@domain.tld\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Sync jobs\n      description: \u003e-\n        You can create new sync job using this action. It takes a JSON object\n        containing a domain informations.\n      operationId: Create sync job\n      summary: Create sync job\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                username: lisa@mailcow.tld\n                host1: mail.mailcow.tld\n                port1: \"143\"\n                user1: demo@mailcow.tld\n                password1: supersecretpw\n                enc1: TLS\n                mins_interval: \"20\"\n                subfolder2: \"/SyncIntoSubfolder\"\n                maxage: \"0\"\n                maxbytespersecond: \"0\"\n                timeout1: \"600\"\n                timeout2: \"600\"\n                exclude: \"(?i)spam|(?i)junk\"\n                custom_params: \"--dry\"\n                delete2duplicates: \"1\"\n                delete1: \"1\"\n                delete2: \"0\"\n                automap: \"1\"\n                skipcrossduplicates: \"0\"\n                subscribeall: \"0\"\n                active: \"1\"\n              properties:\n                parameters:\n                  description: your local mailcow mailbox\n                  type: string\n                host1:\n                  description: the smtp server where mails should be synced from\n                  type: string\n                port1:\n                  description: the smtp port of the target mail server\n                  type: string\n                password:\n                  description: the password of the mailbox\n                  type: string\n                enc1:\n                  description: the encryption method used to connect to the mailserver\n                  type: string\n                mins_internal:\n                  description: the interval in which messages should be syned\n                  type: number\n                subfolder2:\n                  description: sync into subfolder on destination (empty = do not use subfolder)\n                  type: string\n                maxage:\n                  description: only sync messages up to this age in days\n                  type: number\n                maxbytespersecond:\n                  description: max speed transfer limit for the sync\n                  type: number\n                timeout1:\n                  description: timeout for connection to remote host\n                  type: number\n                timeout2:\n                  description: timeout for connection to local host\n                  type: number\n                exclude:\n                  description: exclude objects (regex)\n                  type: string\n                custom_params:\n                  description: custom parameters\n                  type: string\n                delete2duplicates:\n                  description: delete duplicates on destination (--delete2duplicates)\n                  type: boolean\n                delete1:\n                  description: delete from source when completed (--delete1)\n                  type: boolean\n                delete2:\n                  description: delete messages on destination that are not on source (--delete2)\n                  type: boolean\n                automap:\n                  description: try to automap folders (\"Sent items\", \"Sent\" =\u003e \"Sent\" etc.) (--automap)\n                  type: boolean\n                skipcrossduplicates:\n                  description: skip duplicate messages across folders (first come, first serve) (--skipcrossduplicates)\n                  type: boolean\n                subscribeall:\n                  description: subscribe all folders (--subscribeall)\n                  type: boolean\n                active:\n                  description: enables or disables the sync job\n                  type: boolean\n              type: object\n  /api/v1/add/tls-policy-map:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - tls_policy_maps\n                        - add\n                        - parameters: \"\"\n                          active: \"1\"\n                          dest: mailcow.tld\n                          policy: encrypt\n                        - null\n                      msg:\n                        - tls_policy_map_entry_saved\n                        - mailcow.tld\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Outgoing TLS Policy Map Overrides\n      description: Using this endpoint you can create a TLS policy map override.\n      operationId: Create TLS Policy Map\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                parameters: \"\"\n                active: \"1\"\n                dest: mailcow.tld\n                policy: encrypt\n              properties:\n                parameters:\n                  description: \u003e-\n                    custom parameters you find out more about them\n                    [here](http://www.postfix.org/postconf.5.html#smtp_tls_policy_maps)\n                  type: string\n                active:\n                  description: 1 for a active user account 0 for a disabled user account\n                  type: number\n                dest:\n                  description: the target domain or email address\n                  type: string\n                policy:\n                  description: the policy\n                  enum:\n                    - none\n                    - may\n                    - encrypt\n                    - dane\n                    - \"'dane\"\n                    - fingerprint\n                    - verify\n                    - secure\n                  type: string\n              type: object\n      summary: Create TLS Policy Map\n  /api/v1/add/transport:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - transport\n                        - add\n                        - active: \"1\"\n                          destination: example2.org\n                          nexthop: \"host:25\"\n                          password: supersecurepw\n                          username: testuser\n                      msg:\n                        - relayhost_added\n                        - \"\"\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Routing\n      description: Using this endpoint you can create Sender-Dependent Transports.\n      operationId: Create Transport Maps\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                active: \"1\"\n                destination: example.org\n                nexthop: \"host:25\"\n                password: supersecurepw\n                username: testuser\n              properties:\n                active:\n                  description: 1 for a active transport map 0 for a disabled transport map\n                  type: number\n                destination:\n                  type: string\n                nexthop:\n                  type: string\n                password:\n                  description: the password for the smtp user\n                  type: string\n                username:\n                  description: the username used to authenticate\n                  type: string\n              type: object\n      summary: Create Transport Maps\n  /api/v1/delete/alias:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - mailbox\n                        - delete\n                        - alias\n                        - id:\n                            - \"6\"\n                            - \"9\"\n                        - null\n                      msg:\n                        - alias_removed\n                        - alias@domain.tld\n                      type: success\n                    - log:\n                        - mailbox\n                        - delete\n                        - alias\n                        - id:\n                            - \"6\"\n                            - \"9\"\n                        - null\n                      msg:\n                        - alias_removed\n                        - alias2@domain.tld\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Aliases\n      description: You can delete one or more aliases.\n      operationId: Delete alias\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                example: \"6\"\n                type: string\n              type: array\n      summary: Delete alias\n  /api/v1/delete/app-passwd:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - app_passwd\n                        - delete\n                        - id:\n                            - \"2\"\n                      msg:\n                        - app_passwd_removed\n                        - \"2\"\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - App Passwords\n      description: Using this endpoint you can delete a single app password.\n      operationId: Delete App Password\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                - \"1\"\n              properties:\n                items:\n                  description: contains list of app passwords you want to delete\n                  type: object\n              type: object\n      summary: Delete App Password\n  /api/v1/delete/bcc:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - bcc\n                        - delete\n                        - id:\n                            - \"4\"\n                        - null\n                      msg:\n                        - bcc_deleted\n                        - \"4\"\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Address Rewriting\n      description: \u003e-\n        Using this endpoint you can delete a BCC map, for this you have to know\n        its ID. You can get the ID using the GET method.\n      operationId: Delete BCC Map\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                - \"3\"\n              properties:\n                items:\n                  description: contains list of bcc maps you want to delete\n                  type: object\n              type: object\n      summary: Delete BCC Map\n  /api/v1/delete/dkim:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - dkim\n                        - delete\n                        - domains:\n                            - mailcow.tld\n                      msg:\n                        - dkim_removed\n                        - mailcow.tld\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - DKIM\n      description: Using this endpoint a existing DKIM Key can be deleted\n      operationId: Delete DKIM Key\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                example:\n                  - mailcow.tld\n                type: string\n              type: array\n      summary: Delete DKIM Key\n  /api/v1/delete/domain:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - mailbox\n                        - delete\n                        - domain\n                        - domain:\n                            - domain.tld\n                            - domain2.tld\n                        - null\n                      msg:\n                        - domain_removed\n                        - domain.tld\n                      type: success\n                    - log:\n                        - mailbox\n                        - delete\n                        - domain\n                        - domain:\n                            - domain.tld\n                            - domain2.tld\n                        - null\n                      msg:\n                        - domain_removed\n                        - domain2.tld\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Domains\n      description: You can delete one or more domains.\n      operationId: Delete domain\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                - domain.tld\n                - domain2.tld\n              properties:\n                items:\n                  description: contains list of domains you want to delete\n                  type: object\n              type: object\n      summary: Delete domain\n  /api/v1/delete/domain-admin:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - domain_admin\n                        - delete\n                        - username:\n                            - testadmin\n                      msg:\n                        - domain_admin_removed\n                        - testadmin\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Domain admin\n      description: Using this endpoint a existing Domain Admin user can be deleted.\n      operationId: Delete Domain Admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                - testadmin\n              properties:\n                items:\n                  description: contains list of usernames of the users you want to delete\n                  type: object\n              type: object\n      summary: Delete Domain Admin\n  /api/v1/delete/domain-policy:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - policy\n                        - delete\n                        - domain\n                        - prefid:\n                            - \"1\"\n                            - \"2\"\n                      msg:\n                        - item_deleted\n                        - \"1\"\n                      type: success\n                    - log:\n                        - policy\n                        - delete\n                        - domain\n                        - prefid:\n                            - \"1\"\n                            - \"2\"\n                      msg:\n                        - item_deleted\n                        - \"2\"\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Domain antispam policies\n      description: You can delete one o more domain policies.\n      operationId: Delete domain policy\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                - \"1\"\n                - \"2\"\n              properties:\n                items:\n                  description: contains list of domain policys you want to delete\n                  type: object\n              type: object\n      summary: Delete domain policy\n  /api/v1/delete/fwdhost:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - fwdhost\n                        - delete\n                        - forwardinghost:\n                            - 5.1.76.202\n                            - \"2a00:f820:417::202\"\n                      msg:\n                        - forwarding_host_removed\n                        - 5.1.76.202\n                      type: success\n                    - log:\n                        - fwdhost\n                        - delete\n                        - forwardinghost:\n                            - 5.1.76.202\n                            - \"2a00:f820:417::202\"\n                      msg:\n                        - forwarding_host_removed\n                        - \"2a00:f820:417::202\"\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Fordwarding Hosts\n      description: \u003e-\n        Using this endpoint you can delete a forwarding host, in order to do so\n        you need to know the IP of the host.\n      operationId: Delete Forward Host\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                - 5.1.76.202\n                - \"2a00:f820:417::202\"\n              properties:\n                ip:\n                  description: contains the ip of the fowarding host you want to delete\n                  type: string\n              type: object\n      summary: Delete Forward Host\n  /api/v1/delete/mailbox:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - mailbox\n                        - delete\n                        - mailbox\n                        - username:\n                            - info@domain.tld\n                            - sales@domain.tld\n                        - null\n                      msg:\n                        - mailbox_removed\n                        - info@domain.tld\n                      type: success\n                    - log:\n                        - mailbox\n                        - delete\n                        - mailbox\n                        - username:\n                            - info@domain.tld\n                            - sales@domain.tld\n                        - null\n                      msg:\n                        - mailbox_removed\n                        - sales@domain.tld\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Mailboxes\n      description: You can delete one or more mailboxes.\n      operationId: Delete mailbox\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                - info@domain.tld\n                - sales@domain.tld\n              properties:\n                items:\n                  description: contains list of mailboxes you want to delete\n                  type: object\n              type: object\n      summary: Delete mailbox\n  /api/v1/delete/mailq:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    msg: Task completed\n                    type: success\n          description: OK\n          headers: {}\n      tags:\n        - Queue Manager\n      description: \u003e-\n        Using this API you can delete the current mail queue. This will delete\n        all mails in it.\n\n        This API uses the command: `postsuper -d`\n      operationId: Delete Queue\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                action: super_delete\n              properties:\n                action:\n                  description: use super_delete to delete the mail queue\n                  type: string\n              type: object\n      summary: Delete Queue\n  /api/v1/delete/oauth2-client:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - oauth2\n                        - delete\n                        - client\n                        - id:\n                            - \"1\"\n                      msg:\n                        - items_deleted\n                        - \"1\"\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - oAuth Clients\n      description: \u003e-\n        Using this endpoint you can delete a oAuth client, for this you have to\n        know its ID. You can get the ID using the GET method.\n      operationId: Delete oAuth Client\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                - \"3\"\n              properties:\n                items:\n                  description: contains list of oAuth clients you want to delete\n                  type: object\n              type: object\n      summary: Delete oAuth Client\n  /api/v1/delete/qitem:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - quarantine\n                        - delete\n                        - id:\n                            - \"33\"\n                      msg:\n                        - item_deleted\n                        - \"33\"\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Quarantine\n      description: \u003e-\n        Using this endpoint you can delete a email from quarantine, for this you\n        have to know its ID. You can get the ID using the GET method.\n      operationId: Delete mails in Quarantine\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                - \"33\"\n              properties:\n                items:\n                  description: contains list of emails you want to delete\n                  type: object\n              type: object\n      summary: Delete mails in Quarantine\n  /api/v1/delete/recipient_map:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - recipient_map\n                        - delete\n                        - id:\n                            - \"1\"\n                        - null\n                      msg:\n                        - recipient_map_entry_deleted\n                        - \"1\"\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Address Rewriting\n      description: \u003e-\n        Using this endpoint you can delete a recipient map, for this you have to\n        know its ID. You can get the ID using the GET method.\n      operationId: Delete Recipient Map\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                - \"1\"\n              properties:\n                items:\n                  description: contains list of recipient maps you want to delete\n                  type: object\n              type: object\n      summary: Delete Recipient Map\n  /api/v1/delete/relayhost:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - relayhost\n                        - delete\n                        - id:\n                            - \"1\"\n                      msg:\n                        - relayhost_removed\n                        - \"1\"\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Routing\n      description: \u003e-\n        Using this endpoint you can delete a Sender-Dependent Transport, for\n        this you have to know its ID. You can get the ID using the GET method.\n      operationId: Delete Sender-Dependent Transports\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                - \"1\"\n              properties:\n                items:\n                  description: \u003e-\n                    contains list of Sender-Dependent Transport you want to\n                    delete\n                  type: object\n              type: object\n      summary: Delete Sender-Dependent Transports\n  /api/v1/delete/resource:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - mailbox\n                        - delete\n                        - resource\n                        - name:\n                            - test@mailcow.tld\n                        - null\n                      msg:\n                        - resource_removed\n                        - test@mailcow.tld\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Resources\n      description: \u003e-\n        Using this endpoint you can delete a Resources, for this you have to\n        know its ID. You can get the ID using the GET method.\n      operationId: Delete Resources\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                - test@mailcow.tld\n              properties:\n                items:\n                  description: contains list of Resources you want to delete\n                  type: object\n              type: object\n      summary: Delete Resources\n  /api/v1/delete/syncjob:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    log:\n                      - entity\n                      - action\n                      - object\n                    msg:\n                      - message\n                      - entity name\n                    type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Sync jobs\n      description: You can delete one or more sync jobs.\n      operationId: Delete sync job\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                - \"6\"\n                - \"9\"\n              properties:\n                items:\n                  description: contains list of aliases you want to delete\n                  type: object\n              type: object\n      summary: Delete sync job\n  /api/v1/delete/tls-policy-map:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - tls_policy_maps\n                        - delete\n                        - id:\n                            - \"1\"\n                        - null\n                      msg:\n                        - tls_policy_map_entry_deleted\n                        - \"1\"\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Outgoing TLS Policy Map Overrides\n      description: \u003e-\n        Using this endpoint you can delete a TLS Policy Map, for this you have\n        to know its ID. You can get the ID using the GET method.\n      operationId: Delete TLS Policy Map\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                - \"3\"\n              properties:\n                items:\n                  description: contains list of tls policy maps you want to delete\n                  type: object\n              type: object\n      summary: Delete TLS Policy Map\n  /api/v1/delete/transport:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - transport\n                        - delete\n                        - id:\n                            - \"1\"\n                      msg:\n                        - relayhost_removed\n                        - \"1\"\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Routing\n      description: \u003e-\n        Using this endpoint you can delete a Transport Maps, for this you have\n        to know its ID. You can get the ID using the GET method.\n      operationId: Delete Transport Maps\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                - \"1\"\n              properties:\n                items:\n                  description: contains list of transport maps you want to delete\n                  type: object\n              type: object\n      summary: Delete Transport Maps\n  \"/api/v1/delete/mailbox/tag/{mailbox}\":\n    post:\n      parameters:\n        - description: name of mailbox\n          in: path\n          name: mailbox\n          example: info@domain.tld\n          required: true\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - mailbox\n                        - delete\n                        - tags_mailbox\n                        - tags:\n                          - tag1\n                          - tag2\n                          mailbox: info@domain.tld\n                        - null\n                      msg:\n                        - mailbox_modified\n                        - info@domain.tld\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Mailboxes\n      description: You can delete one or more mailbox tags.\n      operationId: Delete mailbox tags\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                - tag1\n                - tag2\n              properties:\n                items:\n                  description: contains list of mailboxes you want to delete\n                  type: object\n              type: object\n      summary: Delete mailbox tags\n  \"/api/v1/delete/domain/tag/{domain}\":\n    post:\n      parameters:\n        - description: name of domain\n          in: path\n          name: domain\n          example: domain.tld\n          required: true\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - mailbox\n                        - delete\n                        - tags_domain\n                        - tags:\n                          - tag1\n                          - tag2\n                          domain: domain.tld\n                        - null\n                      msg:\n                        - domain_modified\n                        - domain.tld\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Domains\n      description: You can delete one or more domain tags.\n      operationId: Delete domain tags\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                - tag1\n                - tag2\n              properties:\n                items:\n                  description: contains list of domains you want to delete\n                  type: object\n              type: object\n      summary: Delete domain tags\n  /api/v1/edit/alias:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - mailbox\n                        - edit\n                        - alias\n                        - active: \"1\"\n                          address: alias@domain.tld\n                          goto: destination@domain.tld\n                          id:\n                            - \"6\"\n                          private_comment: private comment\n                          public_comment: public comment\n                        - null\n                      msg:\n                        - alias_modified\n                        - alias@domain.tld\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Aliases\n      description: \u003e-\n        You can update one or more aliases per request. You can also send just\n        attributes you want to change\n      operationId: Update alias\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                attr:\n                  active: \"1\"\n                  address: alias@domain.tld\n                  goto: destination@domain.tld\n                  private_comment: private comment\n                  public_comment: public comment\n                items: [\"6\"]\n              properties:\n                attr:\n                  properties:\n                    active:\n                      description: is alias active or not\n                      type: boolean\n                    address:\n                      description: 'alias address, for catchall use \"@domain.tld\"'\n                      type: string\n                    goto:\n                      description: \"destination address, comma separated\"\n                      type: string\n                    goto_ham:\n                      description: learn as ham\n                      type: boolean\n                    goto_null:\n                      description: silently ignore\n                      type: boolean\n                    goto_spam:\n                      description: learn as spam\n                      type: boolean\n                    private_comment:\n                      type: string\n                    public_comment:\n                      type: string\n                    sogo_visible:\n                      description: toggle visibility as selectable sender in SOGo\n                      type: boolean\n                  type: object\n                items:\n                  description: contains list of aliases you want update\n                  type: object\n              type: object\n      summary: Update alias\n  /api/v1/edit/domain:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Domains\n      description: \u003e-\n        You can update one or more domains per request. You can also send just\n        attributes you want to change.\n\n        Example: You can add domain names to items list and in attr object just\n        include `\"active\": \"0\"` to deactivate domains.\n      operationId: Update domain\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                attr:\n                  active: \"1\"\n                  aliases: \"400\"\n                  backupmx: \"1\"\n                  defquota: \"3072\"\n                  description: domain description\n                  gal: \"1\"\n                  mailboxes: \"10\"\n                  maxquota: \"10240\"\n                  quota: \"10240\"\n                  relay_all_recipients: \"0\"\n                  relayhost: \"2\"\n                  tags: [\"tag3\", \"tag4\"]\n                items: domain.tld\n              properties:\n                attr:\n                  properties:\n                    active:\n                      description: is domain active or not\n                      type: boolean\n                    aliases:\n                      description: limit count of aliases associated with this domain\n                      type: number\n                    backupmx:\n                      description: relay domain or not\n                      type: boolean\n                    defquota:\n                      description: predefined mailbox quota in `add mailbox` form\n                      type: number\n                    description:\n                      description: Description of domain\n                      type: string\n                    gal:\n                      description: \u003e-\n                        is domain global address list active or not, it enables\n                        shared contacts accross domain in SOGo webmail\n                      type: boolean\n                    mailboxes:\n                      description: limit count of mailboxes associated with this domain\n                      type: number\n                    maxquota:\n                      description: maximum quota per mailbox\n                      type: number\n                    quota:\n                      description: maximum quota for this domain (for all mailboxes in sum)\n                      type: number\n                    relay_all_recipients:\n                      description: \u003e-\n                        if not, them you have to create \"dummy\" mailbox for each\n                        address to relay\n                      type: boolean\n                    relayhost:\n                      description: id of relayhost\n                      type: number\n                  type: object\n                items:\n                  description: contains list of domain names you want update\n                  type: object\n              type: object\n      summary: Update domain\n  /api/v1/edit/fail2ban:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Fail2Ban\n      description: \u003e-\n        Using this endpoint you can edit the Fail2Ban config and black or\n        whitelist new ips.\n      operationId: Edit Fail2Ban\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                attr:\n                  ban_time: \"86400\"\n                  blacklist: \"10.100.6.5/32,10.100.8.4/32\"\n                  max_attempts: \"5\"\n                  netban_ipv4: \"24\"\n                  netban_ipv6: \"64\"\n                  retry_window: \"600\"\n                  whitelist: mailcow.tld\n                items: none\n              properties:\n                attr:\n                  description: array containing the fail2ban settings\n                  properties:\n                    backlist:\n                      description: the backlisted ips or hostnames separated by comma\n                      type: string\n                    ban_time:\n                      description: the time a ip should be banned\n                      type: number\n                    max_attempts:\n                      description: the maximum numbe of wrong logins before a ip is banned\n                      type: number\n                    netban_ipv4:\n                      description: the networks mask to ban for ipv4\n                      type: number\n                    netban_ipv6:\n                      description: the networks mask to ban for ipv6\n                      type: number\n                    retry_window:\n                      description: \u003e-\n                        the maximum time in which a ip as to login with false\n                        credentials to be banned\n                      type: number\n                    whitelist:\n                      description: whitelisted ips or hostnames sepereated by comma\n                      type: string\n                  type: object\n                items:\n                  description: has to be none\n              type: object\n      summary: Edit Fail2Ban\n  /api/v1/edit/mailbox:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - mailbox\n                        - edit\n                        - mailbox\n                        - active: \"1\"\n                          force_pw_update: \"0\"\n                          name: Full name\n                          password: \"*\"\n                          password2: \"*\"\n                          quota: \"3072\"\n                          sender_acl:\n                            - default\n                            - info@domain2.tld\n                            - domain3.tld\n                            - \"*\"\n                          sogo_access: \"1\"\n                          username:\n                            - info@domain.tld\n                          tags: [\"tag3\", \"tag4\"]\n                        - null\n                      msg:\n                        - mailbox_modified\n                        - info@domain.tld\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Mailboxes\n      description: \u003e-\n        You can update one or more mailboxes per request. You can also send just\n        attributes you want to change\n      operationId: Update mailbox\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                attr:\n                  active: \"1\"\n                  force_pw_update: \"0\"\n                  name: Full name\n                  password: \"\"\n                  password2: \"\"\n                  quota: \"3072\"\n                  sender_acl:\n                    - default\n                    - info@domain2.tld\n                    - domain3.tld\n                    - \"*\"\n                  sogo_access: \"1\"\n                  tags: [\"tag3\", \"tag4\"]\n                items:\n                  - info@domain.tld\n              properties:\n                attr:\n                  properties:\n                    active:\n                      description: is mailbox active or not\n                      type: boolean\n                    force_pw_update:\n                      description: force user to change password on next login\n                      type: boolean\n                    name:\n                      description: Full name of the mailbox user\n                      type: string\n                    password2:\n                      description: new mailbox password for confirmation\n                      type: string\n                    password:\n                      description: new mailbox password\n                      type: string\n                    quota:\n                      description: mailbox quota\n                      type: number\n                    sender_acl:\n                      description: list of allowed send from addresses\n                      type: object\n                    sogo_access:\n                      description: is access to SOGo webmail active or not\n                      type: boolean\n                  type: object\n                items:\n                  description: contains list of mailboxes you want update\n                  type: object\n              type: object\n      summary: Update mailbox\n  /api/v1/edit/mailq:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    msg: Task completed\n                    type: success\n          description: OK\n          headers: {}\n      tags:\n        - Queue Manager\n      description: \u003e-\n        Using this API you can flush the current mail queue. This will try to\n        deliver all mails currently in it.\n\n        This API uses the command: `postqueue -f`\n      operationId: Flush Queue\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                action: flush\n              properties:\n                action:\n                  description: use flush to flush the mail queue\n                  type: string\n              type: object\n      summary: Flush Queue\n  /api/v1/edit/pushover:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - pushover\n                        - edit\n                        - active: \"0\"\n                          evaluate_x_prio: \"0\"\n                          key: 21e8918e1jksdjcpis712\n                          only_x_prio: \"0\"\n                          senders: \"\"\n                          senders_regex: \"\"\n                          text: \"\"\n                          title: Mail\n                          token: 9023e2ohcwed27d1idu2\n                          username:\n                            - info@domain.tld\n                      msg: pushover_settings_edited\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Mailboxes\n      description: \u003e-\n        Using this endpoint it is possible to update the pushover settings for\n        mailboxes\n      operationId: Update Pushover settings\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                attr:\n                  active: \"0\"\n                  evaluate_x_prio: \"0\"\n                  key: 21e8918e1jksdjcpis712\n                  only_x_prio: \"0\"\n                  senders: \"\"\n                  senders_regex: \"\"\n                  text: \"\"\n                  title: Mail\n                  token: 9023e2ohcwed27d1idu2\n                items: info@domain.tld\n              properties:\n                attr:\n                  properties:\n                    active:\n                      description: Enables pushover 1 disable pushover 0\n                      type: number\n                    evaluate_x_prio:\n                      description: Send the Push with High priority\n                      type: number\n                    key:\n                      description: Pushover key\n                      type: string\n                    only_x_prio:\n                      description: Only send push for prio mails\n                      type: number\n                    senders:\n                      description: Only send push for emails from these senders\n                      type: string\n                    senders_regex:\n                      description: Regex to match senders for which a push will be send\n                      type: string\n                    text:\n                      description: Custom push noficiation text\n                      type: string\n                    title:\n                      description: Push title\n                      type: string\n                    token:\n                      description: Pushover token\n                      type: string\n                  type: object\n                items:\n                  description: contains list of mailboxes you want to delete\n                  type: object\n              type: object\n      summary: Update Pushover settings\n  /api/v1/edit/quarantine_notification:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          description: OK\n          headers: {}\n      tags:\n        - Mailboxes\n      description: You can update one or more mailboxes per request.\n      operationId: Quarantine Notifications\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                attr:\n                  quarantine_notification: hourly\n                items:\n                  anyOf:\n                    - mailbox1@domain.tld\n                    - mailbox2@domain.tld\n              properties:\n                attr:\n                  properties:\n                    quarantine_notification:\n                      description: recurrence\n                      enum:\n                        - hourly\n                        - daily\n                        - weekly\n                        - never\n                      type: string\n                  type: object\n                items:\n                  description: \u003e-\n                    contains list of mailboxes you want set qurantine\n                    notifications\n                  type: object\n              type: object\n      summary: Quarantine Notifications\n  /api/v1/edit/syncjob:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    log:\n                      - entity\n                      - action\n                      - object\n                    msg:\n                      - message\n                      - entity name\n                    type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Sync jobs\n      description: \u003e-\n        You can update one or more sync jobs per request. You can also send just\n        attributes you want to change.\n      operationId: Update sync job\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                attr:\n                  active: \"1\"\n                  automap: \"1\"\n                  custom_params: \"\"\n                  delete1: \"0\"\n                  delete2: \"0\"\n                  delete2duplicates: \"1\"\n                  enc1: SSL\n                  exclude: (?i)spam|(?i)junk\n                  host1: imap.server.tld\n                  maxage: \"0\"\n                  maxbytespersecond: \"0\"\n                  mins_interval: \"20\"\n                  password1: supersecret\n                  port1: \"993\"\n                  skipcrossduplicates: \"0\"\n                  subfolder2: External\n                  subscribeall: \"1\"\n                  timeout1: \"600\"\n                  timeout2: \"600\"\n                  user1: username\n                items: \"1\"\n              properties:\n                attr:\n                  properties:\n                    active:\n                      description: Is sync job active\n                      type: boolean\n                    automap:\n                      description: \u003e-\n                        Try to automap folders (\"Sent items\", \"Sent\" =\u003e \"Sent\"\n                        etc.)\n                      type: boolean\n                    custom_params:\n                      description: Custom parameters passed to imapsync command\n                      type: string\n                    delete1:\n                      description: Delete from source when completed\n                      type: boolean\n                    delete2:\n                      description: Delete messages on destination that are not on source\n                      type: boolean\n                    delete2duplicates:\n                      description: Delete duplicates on destination\n                      type: boolean\n                    enc1:\n                      description: Encryption\n                      enum:\n                        - TLS\n                        - SSL\n                        - PLAIN\n                      type: string\n                    exclude:\n                      description: Exclude objects (regex)\n                      type: string\n                    host1:\n                      description: Hostname\n                      type: string\n                    maxage:\n                      description: \u003e-\n                        Maximum age of messages in days that will be polled from\n                        remote (0 = ignore age)\n                      type: number\n                    maxbytespersecond:\n                      description: Max. bytes per second (0 = unlimited)\n                      type: number\n                    mins_interval:\n                      description: Interval (min)\n                      type: number\n                    password1:\n                      description: Password\n                      type: string\n                    port1:\n                      description: Port\n                      type: string\n                    skipcrossduplicates:\n                      description: \u003e-\n                        Skip duplicate messages across folders (first come,\n                        first serve)\n                      type: boolean\n                    subfolder2:\n                      description: \u003e-\n                        Sync into subfolder on destination (empty = do not use\n                        subfolder)\n                      type: string\n                    subscribeall:\n                      description: Subscribe all folders\n                      type: boolean\n                    timeout1:\n                      description: Timeout for connection to remote host\n                      type: number\n                    timeout2:\n                      description: Timeout for connection to local host\n                      type: number\n                    user1:\n                      description: Username\n                      type: string\n                  type: object\n                items:\n                  description: contains list of aliases you want update\n                  type: object\n              type: object\n      summary: Update sync job\n  /api/v1/edit/user-acl:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - log:\n                        - acl\n                        - edit\n                        - user\n                        - user_acl:\n                            - spam_alias\n                            - tls_policy\n                            - spam_score\n                            - spam_policy\n                            - delimiter_action\n                            - syncjobs\n                            - eas_reset\n                            - quarantine\n                            - sogo_profile_reset\n                            - quarantine_attachments\n                            - quarantine_notification\n                            - app_passwds\n                            - pushover\n                          username:\n                            - info@domain.tld\n                      msg:\n                        - acl_saved\n                        - info@domain.tld\n                      type: success\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Mailboxes\n      description: Using this endpoints its possible to update the ACL's for mailboxes\n      operationId: Update mailbox ACL\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                attr:\n                  user_acl:\n                    - spam_alias\n                    - tls_policy\n                    - spam_score\n                    - spam_policy\n                    - delimiter_action\n                    - syncjobs\n                    - eas_reset\n                    - quarantine\n                    - sogo_profile_reset\n                    - quarantine_attachments\n                    - quarantine_notification\n                    - app_passwds\n                    - pushover\n                items: info@domain.tld\n              properties:\n                attr:\n                  properties:\n                    user_acl:\n                      description: contains a list of active user acls\n                      type: object\n                  type: object\n                items:\n                  description: contains list of mailboxes you want to delete\n                  type: object\n              type: object\n      summary: Update mailbox ACL\n  \"/api/v1/get/alias/{id}\":\n    get:\n      parameters:\n        - description: id of entry you want to get\n          example: all\n          in: path\n          name: id\n          required: true\n          schema:\n            enum:\n              - all\n              - \"1\"\n              - \"2\"\n              - \"5\"\n              - \"10\"\n            type: string\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - active: \"1\"\n                      address: alias@domain.tld\n                      created: \"2019-04-04 19:29:49\"\n                      domain: domain.tld\n                      goto: destination@domain.tld\n                      id: 6\n                      in_primary_domain: \"\"\n                      is_catch_all: 0\n                      modified: null\n                      private_comment: null\n                      public_comment: null\n                    - active: \"1\"\n                      address: \"@domain.tld\"\n                      created: \"2019-04-27 13:42:39\"\n                      domain: domain.tld\n                      goto: destination@domain.tld\n                      id: 10\n                      in_primary_domain: \"\"\n                      is_catch_all: 1\n                      modified: null\n                      private_comment: null\n                      public_comment: null\n          description: OK\n          headers: {}\n      tags:\n        - Aliases\n      description: You can list mailbox aliases existing in system.\n      operationId: Get aliases\n      summary: Get aliases\n  \"/api/v1/get/time_limited_aliases/{mailbox}\":\n    get:\n      parameters:\n        - description: mailbox you want to get aliasses from\n          example: domain.tld\n          in: path\n          schema:\n            type: string\n          name: mailbox\n          required: true\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - address: alias@domain.tld\n                      goto: destination@domain.tld\n                      validity: 1668251246\n                      created: \"2021-11-12 12:07:26\"\n                      modified: null\n          description: OK\n          headers: {}\n      tags:\n        - Aliases\n      description: You can list time limited mailbox aliases existing in system.\n      operationId: Get time limited aliases\n      summary: Get time limited aliases\n  \"/api/v1/get/app-passwd/all/{mailbox}\":\n    get:\n      parameters:\n        - description: mailbox of entry you want to get\n          example: hello@mailcow.email\n          in: path\n          name: mailbox\n          required: true\n          schema:\n            enum:\n              - hello@mailcow.email\n            type: string\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - active: \"1\"\n                      created: \"2019-12-21 16:04:55\"\n                      domain: mailcow.email\n                      id: 2\n                      mailbox: hello@mailcow.email\n                      modified: null\n                      name: emclient\n          description: OK\n          headers: {}\n      tags:\n        - App Passwords\n      description: \u003e-\n        Using this endpoint you can get all app passwords from a specific\n        mailbox.\n      operationId: Get App Password\n      summary: Get App Password\n  \"/api/v1/get/bcc/{id}\":\n    get:\n      parameters:\n        - description: id of entry you want to get\n          example: all\n          in: path\n          name: id\n          required: true\n          schema:\n            enum:\n              - all\n              - \"1\"\n              - \"2\"\n              - \"5\"\n              - \"10\"\n            type: string\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - active: \"1\"\n                      bcc_dest: bcc@awesomecow.tld\n                      created: \"2019-10-02 21:44:34\"\n                      domain: mailcow.tld\n                      id: 3\n                      local_dest: \"@mailcow.tld\"\n                      modified: null\n                      type: sender\n          description: OK\n          headers: {}\n      tags:\n        - Address Rewriting\n      description: Using this endpoint you can get all BCC maps.\n      operationId: Get BCC Map\n      summary: Get BCC Map\n  \"/api/v1/get/dkim/{domain}\":\n    get:\n      parameters:\n        - description: name of domain\n          in: path\n          name: domain\n          required: true\n          schema:\n            type: string\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    dkim_selector: dkim\n                    dkim_txt: \u003e-\n                      v=DKIM1;k=rsa;t=s;s=email;p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA21tUSjyasQy/hJmVjPnlRGfzx6TPhYj8mXY9DVOzSAE64Gddw/GnE/GcCR6WXNT23u9q4zPnz1IPoNt5kFOps8vg/iNqrcH++494noaZuYyFPPFnebkfryO4EvEyxC/c66qts+gnOUml+M8uv5WObBJld2gG12jLwFM0263J/N6J8LuUsaXOB2uCIfx8Nf4zjuJ6Ieez2uyHNK5dXjDLfKA4mTr+EEK6W6e34M4KN1liWM6r9Oy5S1FlLrD42VpURxxBZtBiEtaJPEKSQuk6GQz8ihu7W20Yr53tyCdaORu8dhxXVUWVf+GjuuMEdAmQCjYkarXdYCrt56Psw703kwIDAQAB\n                    length: \"2048\"\n                    privkey: \"\"\n                    pubkey: \u003e-\n                      MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA21tUSjyasQy/hJmVjPnlRGfzx6TPhYj8mXY9DVOzSAE64Gddw/GnE/GcCR6WXNT23u9q4zPnz1IPoNt5kFOps8vg/iNqrcH++494noaZuYyFPPFnebkfryO4EvEyxC/c66qts+gnOUml+M8uv5WObBJld2gG12jLwFM0263J/N6J8LuUsaXOB2uCIfx8Nf4zjuJ6Ieez2uyHNK5dXjDLfKA4mTr+EEK6W6e34M4KN1liWM6r9Oy5S1FlLrD42VpURxxBZtBiEtaJPEKSQuk6GQz8ihu7W20Yr53tyCdaORu8dhxXVUWVf+GjuuMEdAmQCjYkarXdYCrt56Psw703kwIDAQAB\n          description: OK\n          headers: {}\n      tags:\n        - DKIM\n      description: \u003e-\n        Using this endpoint you can get the DKIM public key for a specific\n        domain.\n      operationId: Get DKIM Key\n      summary: Get DKIM Key\n  /api/v1/get/domain-admin/all:\n    get:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - active: \"1\"\n                      created: \"2019-10-02 10:29:41\"\n                      selected_domains:\n                        - mailcow.tld\n                      tfa_active: \"0\"\n                      unselected_domains:\n                        - awesomemailcow.de\n                        - mailcowisgreat.de\n                      username: testadmin\n          description: OK\n          headers: {}\n      tags:\n        - Domain admin\n      description: \"\"\n      operationId: Get Domain Admins\n      summary: Get Domain Admins\n  \"/api/v1/get/domain/{id}\":\n    get:\n      parameters:\n        - description: id of entry you want to get\n          example: all\n          in: path\n          name: id\n          required: true\n          schema:\n            enum:\n              - all\n              - mailcow.tld\n            type: string\n        - description: comma seperated list of tags to filter by\n          example: \"tag1,tag2\"\n          in: query\n          name: tags\n          required: false\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - active: \"1\"\n                      aliases_in_domain: 0\n                      aliases_left: 400\n                      backupmx: \"0\"\n                      bytes_total: \"5076666944\"\n                      def_new_mailbox_quota: 3221225472\n                      def_quota_for_mbox: 3221225472\n                      description: Some description\n                      domain_name: domain.tld\n                      gal: \"0\"\n                      max_new_mailbox_quota: 10737418240\n                      max_num_aliases_for_domain: 400\n                      max_num_mboxes_for_domain: 10\n                      max_quota_for_domain: 10737418240\n                      max_quota_for_mbox: 10737418240\n                      mboxes_in_domain: 0\n                      mboxes_left: 10\n                      msgs_total: \"172440\"\n                      quota_used_in_domain: \"0\"\n                      relay_all_recipients: \"0\"\n                      relayhost: \"0\"\n                      rl: false\n                      tags: [\"tag1\", \"tag2\"]\n                    - active: \"1\"\n                      aliases_in_domain: 0\n                      aliases_left: 400\n                      backupmx: \"1\"\n                      bytes_total: \"5076666944\"\n                      def_new_mailbox_quota: 3221225472\n                      def_quota_for_mbox: 3221225472\n                      description: domain description\n                      domain_name: domain2.tld\n                      gal: \"0\"\n                      max_new_mailbox_quota: 10737418240\n                      max_num_aliases_for_domain: 400\n                      max_num_mboxes_for_domain: 10\n                      max_quota_for_domain: 10737418240\n                      max_quota_for_mbox: 10737418240\n                      mboxes_in_domain: 0\n                      mboxes_left: 10\n                      msgs_total: \"172440\"\n                      quota_used_in_domain: \"0\"\n                      relay_all_recipients: \"0\"\n                      relayhost: \"0\"\n                      rl: false\n                      tags: [\"tag3\", \"tag4\"]\n          description: OK\n          headers: {}\n      tags:\n        - Domains\n      description: You can list all domains existing in system.\n      operationId: Get domains\n      summary: Get domains\n  /api/v1/get/fail2ban:\n    get:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    ban_time: 604800\n                    blacklist: |-\n                      45.82.153.37/32\n                      92.118.38.52/32\n                    max_attempts: 1\n                    netban_ipv4: 32\n                    netban_ipv6: 128\n                    perm_bans:\n                      - 45.82.153.37/32\n                      - 92.118.38.52/32\n                    retry_window: 7200\n                    whitelist: 1.1.1.1\n          description: OK\n          headers: {}\n      tags:\n        - Fail2Ban\n      description: Gets the current Fail2Ban configuration.\n      operationId: Get Fail2Ban Config\n      summary: Get Fail2Ban Config\n  /api/v1/get/fwdhost/all:\n    get:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - host: 5.1.76.202\n                      keep_spam: \"yes\"\n                      source: hosted.mailcow.de\n                    - host: \"2a00:f820:417::202\"\n                      keep_spam: \"yes\"\n                      source: hosted.mailcow.de\n          description: OK\n          headers: {}\n      tags:\n        - Fordwarding Hosts\n      description: You can list all Forwarding Hosts in your mailcow.\n      operationId: Get Forwarding Hosts\n      summary: Get Forwarding Hosts\n  \"/api/v1/get/logs/acme/{count}\":\n    get:\n      parameters:\n        - description: Number of logs to return\n          in: path\n          name: count\n          required: true\n          schema:\n            type: number\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - message: \u003e-\n                        Certificate validation done, neither changed nor due for\n                        renewal, sleeping for another day.\n                      time: \"1569927728\"\n          description: OK\n          headers: {}\n      tags:\n        - Logs\n      description: \u003e-\n        This Api endpoint lists all ACME logs from issued Lets Enctypts\n        certificates.\n\n        Tip: You can limit how many logs you want to get by using `/\u003ccount\u003e` at\n        the end of the api url.\n      operationId: Get ACME logs\n      summary: Get ACME logs\n  \"/api/v1/get/logs/api/{count}\":\n    get:\n      parameters:\n        - description: Number of logs to return\n          in: path\n          name: count\n          required: true\n          schema:\n            type: number\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - data: \"\"\n                      method: GET\n                      remote: 1.1.1.1\n                      time: 1569939001\n                      uri: /api/v1/get/logs/api/2\n          description: OK\n          headers: {}\n      tags:\n        - Logs\n      description: \u003e-\n        This Api endpoint lists all Api logs.\n\n        Tip: You can limit how many logs you want to get by using `/\u003ccount\u003e` at\n        the end of the api url.\n      operationId: Get Api logs\n      summary: Get Api logs\n  \"/api/v1/get/logs/autodiscover/{count}\":\n    get:\n      parameters:\n        - description: Number of logs to return\n          in: path\n          name: count\n          required: true\n          schema:\n            type: number\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - service: activesync\n                      time: 1569684212\n                      ua: \u003e-\n                        Microsoft Office/16.0 (Windows NT 6.2; MAPICPL\n                        16.0.11328; Pro)\n                      user: awesome@mailcow.de\n          description: OK\n          headers: {}\n      tags:\n        - Logs\n      description: \u003e-\n        This Api endpoint lists all Autodiscover logs.\n\n        Tip: You can limit how many logs you want to get by using `/\u003ccount\u003e` at\n        the end of the api url.\n      operationId: Get Autodiscover logs\n      summary: Get Autodiscover logs\n  \"/api/v1/get/logs/dovecot/{count}\":\n    get:\n      parameters:\n        - description: Number of logs to return\n          in: path\n          name: count\n          required: true\n          schema:\n            type: number\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - message: \u003e-\n                        managesieve-login: Disconnected (no auth attempts in 0\n                        secs): user=\u003c\u003e, rip=172.22.1.3, lip=172.22.1.250\n                      priority: info\n                      program: dovecot\n                      time: \"1569938740\"\n          description: OK\n          headers: {}\n      tags:\n        - Logs\n      description: \u003e-\n        This Api endpoint lists all Dovecot logs.\n\n        Tip: You can limit how many logs you want to get by using `/\u003ccount\u003e` at\n        the end of the api url.\n      operationId: Get Dovecot logs\n      summary: Get Dovecot logs\n  \"/api/v1/get/logs/netfilter/{count}\":\n    get:\n      parameters:\n        - description: Number of logs to return\n          in: path\n          name: count\n          required: true\n          schema:\n            type: number\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - message: \"Whitelist was changed, it has 1 entries\"\n                      priority: info\n                      time: 1569754911\n                    - message: Add host/network 1.1.1.1/32 to blacklist\n                      priority: crit\n                      time: 1569754911\n          description: OK\n          headers: {}\n      tags:\n        - Logs\n      description: \u003e-\n        This Api endpoint lists all Netfilter logs.\n\n        Tip: You can limit how many logs you want to get by using `/\u003ccount\u003e` at\n        the end of the api url.\n      operationId: Get Netfilter logs\n      summary: Get Netfilter logs\n  \"/api/v1/get/logs/postfix/{count}\":\n    get:\n      parameters:\n        - description: Number of logs to return\n          in: path\n          name: count\n          required: true\n          schema:\n            type: number\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - message: \"EF1711500458: removed\"\n                      priority: info\n                      program: postfix/qmgr\n                      time: \"1569937433\"\n          description: OK\n          headers: {}\n      tags:\n        - Logs\n      description: \u003e-\n        This Api endpoint lists all Postfix logs.\n\n        Tip: You can limit how many logs you want to get by using `/\u003ccount\u003e` at\n        the end of the api url.\n      operationId: Get Postfix logs\n      summary: Get Postfix logs\n  \"/api/v1/get/logs/ratelimited/{count}\":\n    get:\n      parameters:\n        - description: Number of logs to return\n          in: path\n          name: count\n          required: true\n          schema:\n            type: number\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - from: awesome@mailcow.email\n                      header_from: '\"Awesome\" \u003cawesome@mailcow.email\u003e'\n                      header_subject: Mailcow is amazing\n                      ip: 172.22.1.248\n                      message_id: 6a-5d892500-7-240abd80@90879116\n                      qid: E3CF91500458\n                      rcpt: hello@mailcow.email\n                      rl_hash: RLsdz3tuabozgd4oacbdh8kc78\n                      rl_info: mailcow(RLsdz3tuabozgd4oacbdh8kc78)\n                      rl_name: mailcow\n                      time: 1569269003\n                      user: awesome@mailcow.email\n          description: OK\n          headers: {}\n      tags:\n        - Logs\n      description: \u003e-\n        This Api endpoint lists all Ratelimit logs.\n\n        Tip: You can limit how many logs you want to get by using `/\u003ccount\u003e` at\n        the end of the api url.\n      operationId: Get Ratelimit logs\n      summary: Get Ratelimit logs\n  \"/api/v1/get/logs/rspamd-history/{count}\":\n    get:\n      parameters:\n        - description: Number of logs to return\n          in: path\n          name: count\n          required: true\n          schema:\n            type: number\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          description: OK\n          headers: {}\n      tags:\n        - Logs\n      description: \u003e-\n        This Api endpoint lists all Rspamd logs.\n\n        Tip: You can limit how many logs you want to get by using `/\u003ccount\u003e` at\n        the end of the api url.\n      operationId: Get Rspamd logs\n      summary: Get Rspamd logs\n  \"/api/v1/get/logs/sogo/{count}\":\n    get:\n      parameters:\n        - description: Number of logs to return\n          in: path\n          name: count\n          required: true\n          schema:\n            type: number\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - message: \u003e-\n                        [109]:\n                        mailcowdockerized_watchdog-mailcow_1.mailcowdockerized_mailcow-network\n                        \"GET /SOGo.index/ HTTP/1.1\" 200 2531/0 0.005 - - 0\n                      priority: notice\n                      program: sogod\n                      time: \"1569938874\"\n          description: OK\n          headers: {}\n      tags:\n        - Logs\n      description: \u003e-\n        This Api endpoint lists all SOGo logs.\n\n        Tip: You can limit how many logs you want to get by using `/\u003ccount\u003e` at\n        the end of the api url.\n      operationId: Get SOGo logs\n      summary: Get SOGo logs\n  \"/api/v1/get/logs/watchdog/{count}\":\n    get:\n      parameters:\n        - description: Number of logs to return\n          in: path\n          name: count\n          required: true\n          schema:\n            type: number\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - hpdiff: \"0\"\n                      hpnow: \"1\"\n                      hptotal: \"1\"\n                      lvl: \"100\"\n                      service: Fail2ban\n                      time: \"1569938958\"\n                    - hpdiff: \"0\"\n                      hpnow: \"5\"\n                      hptotal: \"5\"\n                      lvl: \"100\"\n                      service: Rspamd\n                      time: \"1569938956\"\n          description: OK\n          headers: {}\n      tags:\n        - Logs\n      description: \u003e-\n        This Api endpoint lists all Watchdog logs.\n\n        Tip: You can limit how many logs you want to get by using `/\u003ccount\u003e` at\n        the end of the api url.\n      operationId: Get Watchdog logs\n      summary: Get Watchdog logs\n  \"/api/v1/get/mailbox/{id}\":\n    get:\n      parameters:\n        - description: id of entry you want to get\n          example: all\n          in: path\n          name: id\n          required: true\n          schema:\n            enum:\n              - all\n              - user@domain.tld\n            type: string\n        - description: comma seperated list of tags to filter by\n          example: \"tag1,tag2\"\n          in: query\n          name: tags\n          required: false\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - active: \"1\"\n                      attributes:\n                        force_pw_update: \"0\"\n                        mailbox_format: \"maildir:\"\n                        quarantine_notification: never\n                        sogo_access: \"1\"\n                        tls_enforce_in: \"0\"\n                        tls_enforce_out: \"0\"\n                      domain: doman3.tld\n                      is_relayed: 0\n                      local_part: info\n                      max_new_quota: 10737418240\n                      messages: 0\n                      name: Full name\n                      percent_class: success\n                      percent_in_use: 0\n                      quota: 3221225472\n                      quota_used: 0\n                      rl: false\n                      spam_aliases: 0\n                      username: info@doman3.tld\n                      tags: [\"tag1\", \"tag2\"]\n          description: OK\n          headers: {}\n      tags:\n        - Mailboxes\n      description: You can list all mailboxes existing in system.\n      operationId: Get mailboxes\n      summary: Get mailboxes\n  /api/v1/get/mailq/all:\n    get:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - arrival_time: 1570091234\n                      message_size: 1848\n                      queue_id: B98C6260CA1\n                      queue_name: incoming\n                      recipients:\n                        - recipient@awesomecow.tld\n                      sender: sender@mailcow.tld\n          description: OK\n          headers: {}\n      tags:\n        - Queue Manager\n      description: Get the current mail queue and everything it contains.\n      operationId: Get Queue\n      summary: Get Queue\n  \"/api/v1/get/oauth2-client/{id}\":\n    get:\n      parameters:\n        - description: id of entry you want to get\n          example: all\n          in: path\n          name: id\n          required: true\n          schema:\n            enum:\n              - all\n              - \"1\"\n              - \"2\"\n              - \"5\"\n              - \"10\"\n            type: string\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - client_id: 17c76aaa88c0\n                      client_secret: 73fc668a88147e32a31ff80c\n                      grant_types: null\n                      id: 1\n                      redirect_uri: \"https://mailcow.tld\"\n                      scope: profile\n                      user_id: null\n          description: OK\n          headers: {}\n      tags:\n        - oAuth Clients\n      description: Using this endpoint you can get all oAuth clients.\n      operationId: Get oAuth Clients\n      summary: Get oAuth Clients\n  \"/api/v1/get/policy_bl_domain/{domain}\":\n    get:\n      parameters:\n        - description: name of domain\n          in: path\n          name: domain\n          required: true\n          schema:\n            type: string\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - object: domain.tld\n                      prefid: 2\n                      value: \"*@baddomain.tld\"\n          description: OK\n          headers: {}\n      tags:\n        - Domain antispam policies\n      description: You can list all blacklist policies per domain.\n      operationId: List blacklist domain policy\n      summary: List blacklist domain policy\n  \"/api/v1/get/policy_wl_domain/{domain}\":\n    get:\n      parameters:\n        - description: name of domain\n          in: path\n          name: domain\n          required: true\n          schema:\n            type: string\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - object: domain.tld\n                      prefid: 1\n                      value: \"*@gooddomain.tld\"\n          description: OK\n          headers: {}\n      tags:\n        - Domain antispam policies\n      description: You can list all whitelist policies per domain.\n      operationId: List whitelist domain policy\n      summary: List whitelist domain policy\n  /api/v1/get/quarantine/all:\n    get:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    created: 1572688831\n                    id: 33\n                    notified: 1\n                    qid: 8224615004C1\n                    rcpt: admin@domain.tld\n                    score: 15.48\n                    sender: bounces@send.domain.tld\n                    subject: mailcow is awesome\n                    virus_flag: 0\n          description: OK\n          headers: {}\n      tags:\n        - Quarantine\n      description: Get all mails that are currently in Quarantine.\n      operationId: Get mails in Quarantine\n      summary: Get mails in Quarantine\n  \"/api/v1/get/recipient_map/{id}\":\n    get:\n      parameters:\n        - description: id of entry you want to get\n          example: all\n          in: path\n          name: id\n          required: true\n          schema:\n            enum:\n              - all\n              - \"1\"\n              - \"2\"\n              - \"5\"\n              - \"10\"\n            type: string\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - active: \"1\"\n                      created: \"2019-10-02 22:06:29\"\n                      id: 3\n                      modified: null\n                      recipient_map_new: target@mailcow.tld\n                      recipient_map_old: recipient@mailcow.tld\n          description: OK\n          headers: {}\n      tags:\n        - Address Rewriting\n      description: Using this endpoint you can get all recipient maps.\n      operationId: Get Recipient Map\n      summary: Get Recipient Map\n  \"/api/v1/get/relayhost/{id}\":\n    get:\n      parameters:\n        - description: id of entry you want to get\n          example: all\n          in: path\n          name: id\n          required: true\n          schema:\n            enum:\n              - all\n              - \"1\"\n              - \"2\"\n              - \"5\"\n              - \"10\"\n            type: string\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - active: \"1\"\n                      hostname: \"mailcow.tld:25\"\n                      id: 1\n                      password: supersecurepassword\n                      password_short: tes...\n                      used_by_domains: \"\"\n                      username: testuser\n          description: OK\n          headers: {}\n      tags:\n        - Routing\n      description: Using this endpoint you can get all Sender-Dependent Transports.\n      operationId: Get Sender-Dependent Transports\n      summary: Get Sender-Dependent Transports\n  /api/v1/get/resource/all:\n    get:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - active: \"1\"\n                      description: test\n                      domain: mailcow.tld\n                      kind: location\n                      local_part: test\n                      multiple_bookings: 0\n                      name: test@mailcow.tld\n          description: OK\n          headers: {}\n      tags:\n        - Resources\n      description: Using this endpoint you can get all Resources.\n      operationId: Get Resources\n      summary: Get Resources\n  \"/api/v1/get/rl-mbox/{mailbox}\":\n    get:\n      parameters:\n        - description: name of mailbox or all\n          in: path\n          name: mailbox\n          required: true\n          schema:\n            type: string\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - frame: s\n                      mailbox: leon@mailcow.tld\n                      value: \"5\"\n                    - frame: s\n                      mailbox: lisa@mailcow.tld\n                      value: \"3\"\n          description: OK\n          headers: {}\n      tags:\n        - Ratelimits\n      description: \u003e-\n        Using this endpoint you can get the ratelimits for a certain mailbox.\n        You can use all for all mailboxes.\n      operationId: Get mailbox ratelimits\n      summary: Get mailbox ratelimits\n  \"/api/v1/get/rl-domain/{domain}\":\n    get:\n      parameters:\n        - description: name of domain or all\n          in: path\n          name: domain\n          required: true\n          schema:\n            type: string\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - frame: s\n                      domain: domain.tld\n                      value: \"5\"\n                    - frame: s\n                      mailbox: domain2.tld\n                      value: \"3\"\n          description: OK\n          headers: {}\n      tags:\n        - Ratelimits\n      description: \u003e-\n        Using this endpoint you can get the ratelimits for a certain domains.\n        You can use all for all domain.\n      operationId: Get domain ratelimits\n      summary: Get domain ratelimits\n  /api/v1/edit/rl-mbox/:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - type: success\n                      log:\n                        - ratelimit\n                        - edit\n                        - mailbox\n                        - object:\n                            - info@domain.tld\n                          rl_value: \"10\"\n                          rl_frame: h\n                      msg:\n                        - rl_saved\n                        - info@domain.tld\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Ratelimits\n      description: \u003e-\n        Using this endpoint you can edit the ratelimits for a certain mailbox.\n      operationId: Edit mailbox ratelimits\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                attr:\n                  rl_value: \"10\"\n                  rl_frame: \"h\"\n                items:\n                  - info@domain.tld\n              properties:\n                attr:\n                  properties:\n                    rl_frame:\n                      description: contains the frame for the ratelimit h,s,m\n                      type: string\n                    rl_value:\n                      description: contains the rate for the ratelimit 10,20,50,1\n                      type: number\n                  type: object\n                items:\n                  description: contains list of mailboxes you want to edit the ratelimit of\n                  type: object\n              type: object\n      summary: Edit mailbox ratelimits\n  /api/v1/edit/rl-domain/:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - type: success\n                    - log:\n                        - ratelimit\n                        - edit\n                        - domain\n                        - object:\n                            - domain.tld\n                          rl_value: \"50\"\n                          rl_frame: \"h\"\n                      msg:\n                        - rl_saved\n                        - domain.tld\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Ratelimits\n      description: \u003e-\n        Using this endpoint you can edit the ratelimits for a certain domains.\n      operationId: Edit domain ratelimits\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                attr:\n                  rl_value: \"10\"\n                  rl_frame: \"h\"\n                items:\n                  - domain.tld\n              properties:\n                attr:\n                  properties:\n                    rl_frame:\n                      description: contains the frame for the ratelimit h,s,m\n                      type: string\n                    rl_value:\n                      description: contains the rate for the ratelimit 10,20,50,1\n                      type: number\n                  type: object\n                items:\n                  description: contains list of domains you want to edit the ratelimit of\n                  type: object\n              type: object\n      summary: Edit domain ratelimits\n  /api/v1/get/status/containers:\n    get:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    acme-mailcow:\n                      container: acme-mailcow\n                      image: \"mailcow/acme:1.63\"\n                      started_at: \"2019-12-22T21:00:08.270660275Z\"\n                      state: running\n                      type: info\n                    clamd-mailcow:\n                      container: clamd-mailcow\n                      image: \"mailcow/clamd:1.35\"\n                      started_at: \"2019-12-22T21:00:01.622856172Z\"\n                      state: running\n                      type: info\n                    dockerapi-mailcow:\n                      container: dockerapi-mailcow\n                      image: \"mailcow/dockerapi:1.36\"\n                      started_at: \"2019-12-22T20:59:59.984797808Z\"\n                      state: running\n                      type: info\n                    dovecot-mailcow:\n                      container: dovecot-mailcow\n                      image: \"mailcow/dovecot:1.104\"\n                      started_at: \"2019-12-22T21:00:08.988680259Z\"\n                      state: running\n                      type: info\n                    ipv6nat-mailcow:\n                      container: ipv6nat-mailcow\n                      image: robbertkl/ipv6nat\n                      started_at: \"2019-12-22T21:06:37.273225445Z\"\n                      state: running\n                      type: info\n                    memcached-mailcow:\n                      container: memcached-mailcow\n                      image: \"memcached:alpine\"\n                      started_at: \"2019-12-22T20:59:58.0907785Z\"\n                      state: running\n                      type: info\n                    mysql-mailcow:\n                      container: mysql-mailcow\n                      image: \"mariadb:10.3\"\n                      started_at: \"2019-12-22T21:00:02.201937528Z\"\n                      state: running\n                      type: info\n                    netfilter-mailcow:\n                      container: netfilter-mailcow\n                      image: \"mailcow/netfilter:1.31\"\n                      started_at: \"2019-12-22T21:00:09.851559297Z\"\n                      state: running\n                      type: info\n                    nginx-mailcow:\n                      container: nginx-mailcow\n                      image: \"nginx:mainline-alpine\"\n                      started_at: \"2019-12-22T21:00:12.9843038Z\"\n                      state: running\n                      type: info\n                    olefy-mailcow:\n                      container: olefy-mailcow\n                      image: \"mailcow/olefy:1.2\"\n                      started_at: \"2019-12-22T20:59:59.676259274Z\"\n                      state: running\n                      type: info\n                    php-fpm-mailcow:\n                      container: php-fpm-mailcow\n                      image: \"mailcow/phpfpm:1.55\"\n                      started_at: \"2019-12-22T21:00:00.955808957Z\"\n                      state: running\n                      type: info\n                    postfix-mailcow:\n                      container: postfix-mailcow\n                      image: \"mailcow/postfix:1.44\"\n                      started_at: \"2019-12-22T21:00:07.186717617Z\"\n                      state: running\n                      type: info\n                    redis-mailcow:\n                      container: redis-mailcow\n                      image: \"redis:5-alpine\"\n                      started_at: \"2019-12-22T20:59:56.827166834Z\"\n                      state: running\n                      type: info\n                    rspamd-mailcow:\n                      container: rspamd-mailcow\n                      image: \"mailcow/rspamd:1.56\"\n                      started_at: \"2019-12-22T21:00:12.456075355Z\"\n                      state: running\n                      type: info\n                    sogo-mailcow:\n                      container: sogo-mailcow\n                      image: \"mailcow/sogo:1.65\"\n                      started_at: \"2019-12-22T20:59:58.382274592Z\"\n                      state: running\n                      type: info\n                    solr-mailcow:\n                      container: solr-mailcow\n                      image: \"mailcow/solr:1.7\"\n                      started_at: \"2019-12-22T20:59:59.635413798Z\"\n                      state: running\n                      type: info\n                    unbound-mailcow:\n                      container: unbound-mailcow\n                      image: \"mailcow/unbound:1.10\"\n                      started_at: \"2019-12-22T20:59:58.760595825Z\"\n                      state: running\n                      type: info\n                    watchdog-mailcow:\n                      container: watchdog-mailcow\n                      image: \"mailcow/watchdog:1.65\"\n                      started_at: \"2019-12-22T20:59:56.028660382Z\"\n                      state: running\n                      type: info\n          description: OK\n          headers: {}\n      tags:\n        - Status\n      description: \u003e-\n        Using this endpoint you can get the status of all containers and when\n        hey where started and a few other details.\n      operationId: Get container status\n      summary: Get container status\n  /api/v1/get/status/solr:\n    get:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    solr_documents: null\n                    solr_enabled: false\n                    solr_size: null\n                    type: info\n          description: OK\n          headers: {}\n      tags:\n        - Status\n      description: \u003e-\n        Using this endpoint you can get the status of all containers and when\n        hey where started and a few other details.\n      operationId: Get solr status\n      summary: Get solr status\n  /api/v1/get/status/vmail:\n    get:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    disk: /dev/mapper/mail--vg-root\n                    total: 41G\n                    type: info\n                    used: 11G\n                    used_percent: 28%\n          description: OK\n          headers: {}\n      tags:\n        - Status\n      description: \u003e-\n        Using this endpoint you can get the status of the vmail and the amount\n        of used storage.\n      operationId: Get vmail status\n      summary: Get vmail status\n  /api/v1/get/status/version:\n    get:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    version: \"2022-04\"\n          description: OK\n          headers: {}\n      tags:\n        - Status\n      description: \u003e-\n        Using this endpoint you can get the current running release of this\n        instance.\n      operationId: Get version status\n      summary: Get version status\n  /api/v1/get/syncjobs/all/no_log:\n    get:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - active: \"1\"\n                      authmd51: 0\n                      authmech1: PLAIN\n                      automap: 1\n                      created: \"2019-05-22 11:37:25\"\n                      custom_params: \"\"\n                      delete1: 0\n                      delete2: 0\n                      delete2duplicates: 1\n                      domain2: \"\"\n                      enc1: TLS\n                      exclude: (?i)spam|(?i)junk\n                      host1: imap.server.tld\n                      id: 1\n                      is_running: 0\n                      last_run: \"2019-05-22 11:40:02\"\n                      log: \"\"\n                      maxage: 0\n                      maxbytespersecond: \"0\"\n                      mins_interval: \"20\"\n                      modified: \"2019-05-22 11:40:02\"\n                      port1: 993\n                      regextrans2: \"\"\n                      skipcrossduplicates: 0\n                      subfolder2: External\n                      subscribeall: 1\n                      timeout1: 600\n                      timeout2: 600\n                      user1: username\n                      user2: mailbox@domain.tld\n          description: OK\n          headers: {}\n      tags:\n        - Sync jobs\n      description: You can list all syn jobs existing in system.\n      operationId: Get sync jobs\n      summary: Get sync jobs\n  \"/api/v1/get/tls-policy-map/{id}\":\n    get:\n      parameters:\n        - description: id of entry you want to get\n          example: all\n          in: path\n          name: id\n          required: true\n          schema:\n            enum:\n              - all\n              - \"1\"\n              - \"2\"\n              - \"5\"\n              - \"10\"\n            type: string\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - parameters: \"\"\n                      active: \"1\"\n                      created: \"2019-10-03 08:42:12\"\n                      dest: mailcow.tld\n                      id: 1\n                      modified: null\n                      policy: encrypt\n          description: OK\n          headers: {}\n      tags:\n        - Outgoing TLS Policy Map Overrides\n      description: Using this endpoint you can get all TLS policy map override maps.\n      operationId: Get TLS Policy Map\n      summary: Get TLS Policy Map\n  \"/api/v1/get/transport/{id}\":\n    get:\n      parameters:\n        - description: id of entry you want to get\n          example: all\n          in: path\n          name: id\n          required: true\n          schema:\n            enum:\n              - all\n              - \"1\"\n              - \"2\"\n              - \"5\"\n              - \"10\"\n            type: string\n        - description: e.g. api-key-string\n          example: api-key-string\n          in: header\n          name: X-API-Key\n          required: false\n          schema:\n            type: string\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - active: \"1\"\n                      destination: example.org\n                      id: 1\n                      lookup_mx: \"0\"\n                      nexthop: \"host:25\"\n                      password: supersecurepw\n                      password_short: sup...\n                      username: testuser\n          description: OK\n          headers: {}\n      tags:\n        - Routing\n      description: Using this endpoint you can get all Transport Maps.\n      operationId: Get Transport Maps\n      summary: Get Transport Maps\n  /api/v1/edit/spam-score/:\n    post:\n      responses:\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    - type: success\n                      log:\n                        - mailbox\n                        - edit\n                        - spam_score\n                        - username:\n                            - info@domain.tld\n                          spam_score: \"8,15\"\n                      msg:\n                        - mailbox_modified\n                        - info@domain.tld\n              schema:\n                properties:\n                  log:\n                    description: contains request object\n                    items: {}\n                    type: array\n                  msg:\n                    items: {}\n                    type: array\n                  type:\n                    enum:\n                      - success\n                      - danger\n                      - error\n                    type: string\n                type: object\n          description: OK\n          headers: {}\n      tags:\n        - Mailboxes\n      description: \u003e-\n        Using this endpoint you can edit the spam filter score for a certain mailbox.\n      operationId: Edit mailbox spam filter score\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example:\n                - items:\n                    - info@domain.tld\n                  attr:\n                    spam_score: \"8,15\"\n      summary: Edit mailbox spam filter score\n\ntags:\n  - name: Domains\n    description: You can create antispam whitelist and blacklist policies\n  - name: Domain antispam policies\n    description: You can edit the Domain Antispam policies\n  - name: Mailboxes\n    description: You can manage mailboxes\n  - name: Aliases\n    description: You can manage aliases\n  - name: Sync jobs\n    description: Using Syncjobs you can sync your mails with other email servers\n  - name: Fordwarding Hosts\n    description: Forwarding Hosts enable you to send mail using a relay\n  - name: Logs\n    description: Get all mailcow system logs\n  - name: Queue Manager\n    description: Manage the postfix mail queue\n  - name: Quarantine\n    description: Check what emails went to quarantine\n  - name: Fail2Ban\n    description: Manage the Netfilter fail2ban options\n  - name: DKIM\n    description: Manage DKIM keys\n  - name: Domain admin\n    description: Create or udpdate domain admin users\n  - name: Address Rewriting\n    description: Create BCC maps or recipient maps\n  - name: Outgoing TLS Policy Map Overrides\n    description: Force global TLS policys\n  - name: oAuth Clients\n    description: Use mailcow as a oAuth server\n  - name: Routing\n    description: Define your own email routes\n  - name: Resources\n    description: Manage ressources\n  - name: App Passwords\n    description: Create mailbox app passwords\n  - name: Status\n    description: Get the status of your cow\n  - name: Ratelimits\n    description: Edit domain ratelimits\n",
			"canonicalURL": "/github.com/mailcow/mailcow-dockerized@4ce16d1ea4d6e0b1097ab7a1fa6e8a6b1195f13f/-/blob/data/web/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/mailcow/mailcow-dockerized/blob/4ce16d1ea4d6e0b1097ab7a1fa6e8a6b1195f13f/data/web/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/api/v1/get/mailbox/{id}\": at 1:87764: get: operation \"Get mailboxes\": at 1:87771: parameters: parse parameter \"tags\": at 1:88041: parameter MUST contain either a schema property, or a content property"
}