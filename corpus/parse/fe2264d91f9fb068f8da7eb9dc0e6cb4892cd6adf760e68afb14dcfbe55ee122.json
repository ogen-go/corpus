{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/tatumio/tatum-blockchain-connector"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "erc20-connector/module/openapi.yaml",
			"byteSize": 86561,
			"content": "openapi: 3.0.0\nservers:\n  - url: 'https://api-eu1.tatum.io'\ninfo:\n  version: 1.0.4\n  title: Tatum ERC20 Abstraction API\ntags:\n  - description: |\n      \u003cp\u003eAn ERC-20 token is a standardized Smart Contract with a predefined set of features. It represents fungible tokens, which can be interchanged. The ERC-20 token is used as a blockchain representation of the currency.\n      \u003cbr/\u003e\u003cbr/\u003e\n      Tatum now supports ERC20 these blockchains:\u003cbr/\u003e\n      \u003cul\u003e\n      \u003cli\u003e\u003cb\u003eEthereum\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003ePolygon (Matic)\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eKcs (KCS)\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eBinance Smart Chain\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eCelo\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eHarmony.ONE\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eXDC Network (XinFin)\u003c/b\u003e\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eAlgorand\u003c/b\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n      \u003c/p\u003e\n    name: Blockchain / Fungible Token\npaths:\n  /v3/blockchain/token/deploy:\n    post:\n      description: |\n        \u003cp\u003eDeploy ERC20 Smart Contract. This method creates new ERC20 (Fungible Tokens) Smart Contract on the blockchain. Smart contract is standardized and audited. It is possible to mint and burn tokens.\n        It is possible to see the code of the deployed contract \u003ca href=\"https://github.com/tatumio/tatum-middleware/blob/master/src/contracts/token.sol\" target=\"_blank\"\u003ehere\u003c/a\u003e.\n        Whole predefined supply of the tokens will be transferred to the chosen address.\n        \u003cbr/\u003e\u003cbr/\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        \u003c/p\u003e\n      operationId: Erc20Deploy\n      parameters:\n        - description: \"Type of Ethereum testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/ChainDeployErc20\"\n                - $ref: \"#/components/schemas/ChainDeployErc20KMS\"\n                - $ref: \"#/components/schemas/ChainDeployKcsErc20\"\n                - $ref: \"#/components/schemas/ChainDeployKcsErc20KMS\"\n                - $ref: \"#/components/schemas/ChainDeployCeloErc20\"\n                - $ref: \"#/components/schemas/ChainDeployCeloErc20KMS\"\n                # - $ref: \"#/components/schemas/ChainCreateTronTrc20\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400: \u0026API400\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error400\"\n          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.\n        401: \u0026API401\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error401NotActive\"\n                  - $ref: \"#/components/schemas/Error401Invalid\"\n          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.\n        403: \u0026API403\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403\"\n        500: \u0026API500\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error500\"\n          description: Internal server error. There was an error on the server during the processing of the request.\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Deploy ERC20 Smart Contract.\n      tags:\n        - Blockchain / Fungible Token\n  /v3/blockchain/token/mint:\n    post:\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eCreate new ERC20 Fungible Tokens and transfer it to destination account. Tokens can be created only if current supply is lower then total supply. Create and transfer any ERC20 tokens from smart contract defined in contractAddress.\n        \u003cbr/\u003e\u003cbr/\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        \u003c/p\u003e\n      parameters:\n        - description: \"Type of Ethereum testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      operationId: Erc20Mint\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/ChainMintErc20\"\n                - $ref: \"#/components/schemas/ChainMintErc20KMS\"\n                - $ref: \"#/components/schemas/ChainMintKcsErc20\"\n                - $ref: \"#/components/schemas/ChainMintKcsErc20KMS\"\n                - $ref: \"#/components/schemas/ChainMintCeloErc20\"\n                - $ref: \"#/components/schemas/ChainMintCeloErc20KMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Mint ERC20\n      tags:\n        - Blockchain / Fungible Token\n  /v3/blockchain/token/burn:\n    post:\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eBurn ERC20 Fungible Tokens. This method destroys ERC20 tokens from smart contract defined in contractAddress.\n        \u003cbr/\u003e\u003cbr/\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        \u003c/p\u003e\n      parameters:\n        - description: \"Type of Ethereum testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      operationId: Erc20Burn\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/ChainBurnErc20\"\n                - $ref: \"#/components/schemas/ChainBurnErc20KMS\"\n                - $ref: \"#/components/schemas/ChainBurnKcsErc20\"\n                - $ref: \"#/components/schemas/ChainBurnKcsErc20KMS\"\n                - $ref: \"#/components/schemas/ChainBurnCeloErc20\"\n                - $ref: \"#/components/schemas/ChainBurnCeloErc20KMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Burn ERC20\n      tags:\n        - Blockchain / Fungible Token\n  /v3/blockchain/token/approve:\n    post:\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eApprove ERC20 Fungible Tokens to be spendable by someone else. This method allows new address to transfer/burn ERC20 tokens on behalf of the owner.\n        \u003cbr/\u003e\u003cbr/\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        \u003c/p\u003e\n      parameters:\n        - description: \"Type of Ethereum testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      operationId: Erc20Approve\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/ApproveErc20\"\n                - $ref: \"#/components/schemas/ApproveErc20KMS\"\n                - $ref: \"#/components/schemas/ApproveCeloErc20\"\n                - $ref: \"#/components/schemas/ApproveCeloErc20KMS\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Approve spending of ERC20\n      tags:\n        - Blockchain / Fungible Token\n  /v3/blockchain/token/transaction:\n    post:\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eTransfer ERC20 Fungible Tokens from account to account. Transfer any ERC20 tokens from smart contract defined in contractAddress. This method invokes ERC20 method transfer() to transfer tokens.\n        \u003cbr/\u003e\u003cbr/\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        Algorand is unique a way that the receiving account should be ready before sending the FT(Erc20) asset.\n        To perform this, the receiving account should transfer the FT(Erc20) asset with 0 amount to itself.\n        During the process, it's using the same API as the main transaction: the only difference is that the \"fromPrivateKey\" should be the privateKey of the receiving account.\n        \u003c/p\u003e\n      parameters:\n        - description: \"Type of Ethereum testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      operationId: Erc20Transfer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/ChainTransferAlgoErc20\"\n                - $ref: \"#/components/schemas/ChainTransferAlgoErc20KMS\"\n                - $ref: \"#/components/schemas/ChainTransferEthErc20\"\n                - $ref: \"#/components/schemas/ChainTransferEthErc20KMS\"\n                - $ref: \"#/components/schemas/ChainTransferKcsEthErc20\"\n                - $ref: \"#/components/schemas/ChainTransferKcsEthErc20KMS\"\n                - $ref: \"#/components/schemas/ChainTransferBscBep20\"\n                - $ref: \"#/components/schemas/ChainTransferBscBep20KMS\"\n                - $ref: \"#/components/schemas/ChainTransferCeloErc20Token\"\n                - $ref: \"#/components/schemas/ChainTransferCeloErc20TokenKMS\"\n                # - $ref: \"#/components/schemas/TransferTronTrc20\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Transfer ERC20 Token\n      tags:\n        - Blockchain / Fungible Token\n  /v3/blockchain/token/transaction/{chain}/{address}/{tokenAddress}:\n    get:\n      description: \"\u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet ERC20 transactions by address. This includes incoming and outgoing transactions for the address.\u003c/p\u003e\"\n      operationId: Erc20GetTransactionByAddress\n      parameters:\n        - description: \"Blockchain to work with\"\n          in: path\n          name: chain\n          required: true\n          schema:\n            type: string\n            enum:\n              - CELO\n            example: \"CELO\"\n        - description: \"Account address\"\n          in: path\n          name: address\n          required: true\n          schema:\n            type: string\n            example: \"0x8ce4e40889a13971681391aad29e88efaf91f784\"\n        - description: \"Token address\"\n          in: path\n          name: tokenAddress\n          required: true\n          schema:\n            type: string\n            example: \"0x1ce4e40889a13971681391aad29e88efaf91f784\"\n        - description: Max number of items per page is 50.\n          in: query\n          name: pageSize\n          schema:\n            type: number\n            example: 10\n            maximum: 50\n            minimum: 1\n          required: true\n        - description: Offset to obtain next page of the data.\n          in: query\n          name: offset\n          schema:\n            type: number\n            example: 0\n        - description: Transactions from this block onwords will be included.\n          in: query\n          name: from\n          schema:\n            type: number\n            minimum: 0\n            example: 1087623\n        - description: Transactions up to this block will be included.\n          in: query\n          name: to\n          schema:\n            type: number\n            minimum: 0\n            example: 1087823\n        - description: Sorting of the data. ASC - oldest first, DESC - newest first.\n          in: query\n          name: sort\n          schema:\n            type: string\n            default: DESC\n            example: ASC\n            enum:\n              - ASC\n              - DESC\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                    - $ref: \"#/components/schemas/FungibleTx\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get ERC20 transactions by address\n      tags:\n        - Blockchain / Fungible Token\n  /v3/blockchain/token/balance/{chain}/{contractAddress}/{address}:\n    get:\n      description: \"\u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet ERC20 Account balance. Returns number of tokens Account holds.\u003c/p\u003e\"\n      operationId: Erc20GetBalance\n      parameters:\n        - description: \"Network name\"\n          in: path\n          name: chain\n          required: true\n          schema:\n            type: string\n            example: \"CELO\"\n        - description: \"Account address\"\n          in: path\n          name: address\n          required: true\n          schema:\n            type: string\n            example: \"0x3223AEB8404C7525FcAA6C512f91e287AE9FfE7B\"\n        - description: \"ERC20 contract address\"\n          in: path\n          name: contractAddress\n          required: true\n          schema:\n            type: string\n            example: \"0x94Ce79B9F001E25BBEbE7C01998A78F7B27D1326\"\n        - description: \"Type of Ethereum testnet. Defaults to ropsten. Valid only for ETH invocations.\"\n          in: header\n          name: x-testnet-type\n          required: false\n          schema:\n            default: ethereum-ropsten\n            type: string\n            enum:\n              - ethereum-ropsten\n              - ethereum-rinkeby\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  balance:\n                    type: string\n                    description: Number of ERC20 tokens in smallest token unit. E.g. token has 10 decimal places, so data returned are 9*10^10.\n                    example: \"10\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: [ ]\n      x-code-samples:\n      summary: Get ERC20 Account balance\n      tags:\n        - Blockchain / Fungible Token\ncomponents:\n  securitySchemes:\n    X-Api-Key:\n      description: |\n        To maintain the highest security level, Tatum requires X-API-Key HTTP header.\n        This X-API-Key represents identification of the plan and can be used by 1 developer or per environment.\n        Each X-API-Key is bound to the test or production blockchains.\n      in: header\n      name: x-api-key\n      type: apiKey\n  schemas:\n    ChainDeployErc20:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - BSC\n            - MATIC\n            - XDC\n            - ONE\n            - ALGO\n        symbol:\n          description: Symbol of the ERC20 token\n          example: ERC_SYMBOL\n          maxLength: 30\n          minLength: 1\n          type: string\n        name:\n          description: Name of the ERC20 token\n          example: MyERC20\n          maxLength: 100\n          minLength: 1\n          pattern: ^[a-zA-Z0-9_]+$\n          type: string\n        totalCap:\n          description: Max supply of ERC20 token.\n          maxLength: 38\n          example: \"10000000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        supply:\n          description: Initial supply of ERC20 token. If totalCap is not defined, this will be the total cap.\n          maxLength: 38\n          example: \"10000000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        digits:\n          description: Number of decimal points\n          example: 18\n          maximum: 30\n          minimum: 1\n          type: number\n        address:\n          description: Address on Ethereum blockchain, where all created ERC20 tokens will be transferred.\n          maxLength: 43\n          minLength: 42\n          example: \"0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6\"\n          type: string\n        fromPrivateKey:\n          description: Private key of Ethereum account address, from which the fee for the deployment of ERC20 will be paid. Private key, or signature Id must be present.\n          type: string\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          maxLength: 66\n          minLength: 66\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - chain\n        - name\n        - symbol\n        - address\n        - supply\n        - fromPrivateKey\n        - digits\n    FungibleTx:\n      type: object\n      properties:\n        blockNumber:\n          type: number\n          example: 6541235\n          description: Block number\n        txId:\n          type: string\n          example: \"0x955c1037608c7aecb6d1a3f150ce7d0a80536bcabb0deb69d62f55292cc4c372\"\n          description: Transaction ID\n        contractAddress:\n          type: string\n          example: \"0x4f54fAD27F7F46C102Cd49b8E75C5593397cd9c3\"\n          description: Contract address\n        amount:\n          type: string\n          example: \"1\"\n          description: Amount of tokens transferred, in smallest decimals\n        from:\n          type: string\n          example: \"0x780c3de0aba1b51f04cfe8a5d9d277d4ad032b8d\"\n          description: Sender\n        to:\n          type: string\n          example: \"0x8cb76aed9c5e336ef961265c6079c14e9cd3d2ea\"\n          description: recipient\n      required:\n        - txId\n        - blockNumber\n        - contractAddress\n        - amount\n        - from\n        - to\n    ChainDeployErc20KMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - BSC\n            - XDC\n        symbol:\n          description: Symbol of the ERC20 token\n          example: ERC_SYMBOL\n          maxLength: 30\n          minLength: 1\n          type: string\n        name:\n          description: Name of the ERC20 token\n          example: MyERC20\n          maxLength: 100\n          minLength: 1\n          pattern: ^[a-zA-Z0-9_]+$\n          type: string\n        totalCap:\n          description: Max supply of ERC20 token.\n          maxLength: 38\n          example: \"10000000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        supply:\n          description: Max supply of ERC20 token.\n          maxLength: 38\n          example: \"10000000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        digits:\n          description: Number of decimal points\n          example: 18\n          maximum: 30\n          minimum: 1\n          type: number\n        address:\n          description: Address on Ethereum blockchain, where all created ERC20 tokens will be transferred.\n          maxLength: 43\n          minLength: 42\n          example: \"0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6\"\n          type: string\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - chain\n        - name\n        - symbol\n        - address\n        - supply\n        - signatureId\n        - digits\n    ChainDeployKcsErc20:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: KCS\n          description: Chain to work with.\n          enum:\n            - KCS\n        symbol:\n          description: Symbol of the ERC20 token\n          example: ERC_SYMBOL\n          maxLength: 30\n          minLength: 1\n          type: string\n        name:\n          description: Name of the ERC20 token\n          example: MyERC20\n          maxLength: 100\n          minLength: 1\n          pattern: ^[a-zA-Z0-9_]+$\n          type: string\n        totalCap:\n          description: Max supply of ERC20 token.\n          maxLength: 38\n          example: \"10000000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        supply:\n          description: Initial supply of ERC20 token. If totalCap is not defined, this will be the total cap.\n          maxLength: 38\n          example: \"10000000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        digits:\n          description: Number of decimal points\n          example: 18\n          maximum: 30\n          minimum: 1\n          type: number\n        address:\n          description: Address on Ethereum blockchain, where all created ERC20 tokens will be transferred.\n          maxLength: 43\n          minLength: 42\n          example: \"0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6\"\n          type: string\n        fromPrivateKey:\n          description: Private key of Ethereum account address, from which the fee for the deployment of ERC20 will be paid. Private key, or signature Id must be present.\n          type: string\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          maxLength: 66\n          minLength: 66\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - chain\n        - name\n        - symbol\n        - address\n        - supply\n        - fromPrivateKey\n        - digits\n    ChainDeployKcsErc20KMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: KCS\n          description: Chain to work with.\n          enum:\n            - KCS\n        symbol:\n          description: Symbol of the ERC20 token\n          example: ERC_SYMBOL\n          maxLength: 30\n          minLength: 1\n          type: string\n        name:\n          description: Name of the ERC20 token\n          example: MyERC20\n          maxLength: 100\n          minLength: 1\n          pattern: ^[a-zA-Z0-9_]+$\n          type: string\n        totalCap:\n          description: Max supply of ERC20 token.\n          maxLength: 38\n          example: \"10000000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        supply:\n          description: Max supply of ERC20 token.\n          maxLength: 38\n          example: \"10000000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        digits:\n          description: Number of decimal points\n          example: 18\n          maximum: 30\n          minimum: 1\n          type: number\n        address:\n          description: Address on Ethereum blockchain, where all created ERC20 tokens will be transferred.\n          maxLength: 43\n          minLength: 42\n          example: \"0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6\"\n          type: string\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - chain\n        - name\n        - symbol\n        - address\n        - supply\n        - signatureId\n        - digits\n    ChainDeployCeloErc20:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        symbol:\n          description: Symbol of the ERC20 token\n          example: ERC_SYMBOL\n          maxLength: 30\n          minLength: 1\n          type: string\n        name:\n          description: Name of the ERC20 token\n          example: MyERC20\n          maxLength: 100\n          minLength: 1\n          pattern: ^[a-zA-Z0-9_]+$\n          type: string\n        totalCap:\n          description: Max supply of ERC20 token.\n          maxLength: 38\n          example: \"10000000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        supply:\n          description: Max supply of ERC20 token.\n          maxLength: 38\n          example: \"10000000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        digits:\n          description: Number of decimal points\n          example: 18\n          maximum: 30\n          minimum: 1\n          type: number\n        address:\n          description: Address on Ethereum blockchain, where all created ERC20 tokens will be transferred.\n          maxLength: 42\n          minLength: 42\n          example: \"0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6\"\n          type: string\n        fromPrivateKey:\n          description: Private key of Ethereum account address, from which the fee for the deployment of ERC20 will be paid. Private key, or signature Id must be present.\n          type: string\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          maxLength: 66\n          minLength: 66\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - name\n        - symbol\n        - address\n        - supply\n        - fromPrivateKey\n        - digits\n        - feeCurrency\n    ChainDeployCeloErc20KMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        symbol:\n          description: Symbol of the ERC20 token\n          example: ERC_SYMBOL\n          maxLength: 30\n          minLength: 1\n          type: string\n        name:\n          description: Name of the ERC20 token\n          example: MyERC20\n          maxLength: 100\n          minLength: 1\n          pattern: ^[a-zA-Z0-9_]+$\n          type: string\n        totalCap:\n          description: Max supply of ERC20 token.\n          maxLength: 38\n          example: \"10000000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        supply:\n          description: Max supply of ERC20 token.\n          maxLength: 38\n          example: \"10000000\"\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n          type: string\n        digits:\n          description: Number of decimal points\n          example: 18\n          maximum: 30\n          minimum: 1\n          type: number\n        address:\n          description: Address on Ethereum blockchain, where all created ERC20 tokens will be transferred.\n          maxLength: 42\n          minLength: 42\n          example: \"0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6\"\n          type: string\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - name\n        - symbol\n        - address\n        - supply\n        - signatureId\n        - digits\n        - feeCurrency\n    # ChainCreateTronTrc20:\n    #   type: object\n    #   properties:\n    #     chain:\n    #       type: string\n    #       example: TRON\n    #       description: Chain to work with.\n    #       enum:\n    #         - TRON\n    #     fromPrivateKey:\n    #       type: string\n    #       minLength: 64\n    #       maxLength: 64\n    #       description: Private key of the address, from which the TRX will be sent.\n    #       example: 842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701\n    #     recipient:\n    #       type: string\n    #       minLength: 34\n    #       maxLength: 34\n    #       description: Recipient address of created TRC20 tokens.\n    #       example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh\n    #     name:\n    #       type: string\n    #       minLength: 1\n    #       maxLength: 100\n    #       description: Name of the token.\n    #       example: My token\n    #     symbol:\n    #       type: string\n    #       minLength: 1\n    #       maxLength: 100\n    #       description: Symbol of the token.\n    #       example: SYM\n    #     totalSupply:\n    #       type: number\n    #       minimum: 0\n    #       description: Total supply of the tokens.\n    #       example: 100000\n    #     decimals:\n    #       type: number\n    #       minimum: 0\n    #       maximum: 30\n    #       description: Number of decimal places of the token.\n    #       example: 10\n    #   required:\n    #     - chain\n    #     - fromPrivateKey\n    #     - name\n    #     - recipient\n    #     - symbol\n    #     - totalSupply\n    #     - decimals\n    ChainMintErc20:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - BSC\n            - MATIC\n            - XDC\n            - ONE\n        amount:\n          description: Amount to be minted and transfered to the recipient.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        to:\n          maxLength: 43\n          minLength: 42\n          description: Blockchain address to send ERC-20 tokens to.\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        contractAddress:\n          maxLength: 43\n          minLength: 42\n          description: Address of ERC-20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n      required:\n        - chain\n        - to\n        - amount\n        - contractAddress\n        - fromPrivateKey\n    ChainMintKcsErc20:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: KCS\n          description: Chain to work with.\n          enum:\n            - KCS\n        amount:\n          description: Amount to be minted and transfered to the recipient.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        to:\n          maxLength: 43\n          minLength: 42\n          description: Blockchain address to send ERC-20 tokens to.\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        contractAddress:\n          maxLength: 43\n          minLength: 42\n          description: Address of ERC-20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n      required:\n        - chain\n        - to\n        - amount\n        - contractAddress\n        - fromPrivateKey\n    ChainMintErc20KMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - BSC\n            - XDC\n        amount:\n          description: Amount to be minted and transfered to the recipient.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        to:\n          maxLength: 43\n          minLength: 42\n          description: Blockchain address to send ERC-20 tokens to.\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        contractAddress:\n          maxLength: 43\n          minLength: 42\n          description: Address of ERC-20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n      required:\n        - chain\n        - to\n        - amount\n        - contractAddress\n        - signatureId\n    ChainMintKcsErc20KMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: KCS\n          description: Chain to work with.\n          enum:\n            - KCS\n        amount:\n          description: Amount to be minted and transfered to the recipient.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        to:\n          maxLength: 43\n          minLength: 42\n          description: Blockchain address to send ERC-20 tokens to.\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        contractAddress:\n          maxLength: 43\n          minLength: 42\n          description: Address of ERC-20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n      required:\n        - chain\n        - to\n        - amount\n        - contractAddress\n        - signatureId\n    ChainMintCeloErc20:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        amount:\n          description: Amount to be minted and transfered to the recipient.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        to:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address to send ERC-20 tokens to.\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of ERC-20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - to\n        - amount\n        - feeCurrency\n        - contractAddress\n        - fromPrivateKey\n    ChainMintCeloErc20KMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        amount:\n          description: Amount to be minted and transfered to the recipient.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        to:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address to send ERC-20 tokens to.\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of ERC-20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - to\n        - amount\n        - feeCurrency\n        - contractAddress\n        - signatureId\n    ApproveErc20:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - BSC\n            - MATIC\n            - ONE\n        amount:\n          description: Amount to be approved for the spender.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        spender:\n          maxLength: 43\n          minLength: 42\n          description: Blockchain address of the new spender.\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        contractAddress:\n          maxLength: 43\n          minLength: 42\n          description: Address of ERC-20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n      required:\n        - chain\n        - spender\n        - amount\n        - contractAddress\n        - fromPrivateKey\n    ApproveErc20KMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - BSC\n            - MATIC\n            - ONE\n        amount:\n          description: Amount to be approved for the spender.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        spender:\n          maxLength: 43\n          minLength: 42\n          description: Blockchain address of the new spender.\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        contractAddress:\n          maxLength: 43\n          minLength: 42\n          description: Address of ERC-20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n      required:\n        - chain\n        - spender\n        - amount\n        - contractAddress\n        - signatureId\n    ApproveCeloErc20:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        amount:\n          description: Amount to be approved for the spender.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        spender:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address of the new spender.\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of ERC-20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - spender\n        - amount\n        - feeCurrency\n        - contractAddress\n        - fromPrivateKey\n    ApproveCeloErc20KMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        amount:\n          description: Amount to be approved for the spender.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        spender:\n          maxLength: 42\n          minLength: 42\n          description: Blockchain address of the new spender.\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of ERC-20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - spender\n        - amount\n        - feeCurrency\n        - contractAddress\n        - signatureId\n    ChainBurnErc20:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - BSC\n            - MATIC\n            - XDC\n            - ONE\n            - ALGO\n        amount:\n          description: Amount of tokens to be destroyed.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        contractAddress:\n          maxLength: 43\n          minLength: 42\n          description: Address of ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n      required:\n        - chain\n        - contractAddress\n        - fromPrivateKey\n        - amount\n    ChainBurnErc20KMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - BSC\n            - XDC\n            - ALGO\n        amount:\n          description: Amount of tokens to be destroyed.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        contractAddress:\n          maxLength: 43\n          minLength: 42\n          description: Address of ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n      required:\n        - chain\n        - contractAddress\n        - signatureId\n        - amount\n    ChainBurnKcsErc20:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: KCS\n          description: Chain to work with.\n          enum:\n            - KCS\n        amount:\n          description: Amount of tokens to be destroyed.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        contractAddress:\n          maxLength: 43\n          minLength: 42\n          description: Address of ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n      required:\n        - chain\n        - contractAddress\n        - fromPrivateKey\n        - amount\n    ChainBurnKcsErc20KMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: KCS\n          description: Chain to work with.\n          enum:\n            - KCS\n        amount:\n          description: Amount of tokens to be destroyed.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        contractAddress:\n          maxLength: 43\n          minLength: 42\n          description: Address of ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n      required:\n        - chain\n        - contractAddress\n        - signatureId\n        - amount\n    ChainBurnCeloErc20:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        amount:\n          description: Amount of tokens to be destroyed.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - contractAddress\n        - feeCurrency\n        - fromPrivateKey\n        - amount\n    ChainBurnCeloErc20KMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        amount:\n          description: Amount of tokens to be destroyed.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - contractAddress\n        - feeCurrency\n        - signatureId\n        - amount\n    ChainTransferAlgoErc20:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ALGO\n          description: Chain to work with.\n          enum:\n            - ALGO\n        to:\n          maxLength: 58\n          minLength: 42\n          description: Blockchain address to send ERC20 token to\n          example: \"NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y\"\n          type: string\n        amount:\n          description: Amount to be sent.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        contractAddress:\n          maxLength: 43\n          minLength: 1\n          description: assetIndex - asset index uniquely specifying the asset\n          example: \"1\"\n          type: string\n        fromPrivateKey:\n          type: string\n          maxLength: 103\n          example: \"72TCV5BRQPBMSAFPYO3CPWVDBYWNGAYNMTW5QHENOMQF7I6QLNMJWCJZ7A3V5YKD7QD6ZZPEHG2PV2ZVVEDDO6BCRGXWIL3DIUMSUCI\"\n          minLength: 103\n          description: Private key of sender address. Private key, or signature Id must be present.\n      required:\n        - chain\n        - currency\n        - to\n        - contractAddress\n        - fromPrivateKey\n        - amount\n    ChainTransferAlgoErc20KMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ALGO\n          description: Chain to work with.\n          enum:\n            - ALGO\n        to:\n          maxLength: 58\n          minLength: 42\n          description: Blockchain address to send ERC20 token to\n          example: \"TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4\"\n          type: string\n        amount:\n          description: Amount to be sent.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        contractAddress:\n          maxLength: 43\n          minLength: 1\n          description: assetIndex - asset index uniquely specifying the asset\n          example: \"1\"\n          type: string\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        from:\n          maxLength: 58\n          minLength: 42\n          description: Blockchain address to send ERC20 token to\n          example: \"NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y\"\n          type: string\n      required:\n        - chain\n        - currency\n        - to\n        - contractAddress\n        - signatureId\n        - amount\n        - from\n    ChainTransferEthErc20:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - BSC\n            - MATIC\n            - XDC\n            - ONE\n        to:\n          maxLength: 50\n          minLength: 1\n          description: Blockchain address to send ERC20 token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        amount:\n          description: Amount to be sent.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        contractAddress:\n          maxLength: 43\n          minLength: 42\n          description: Address of ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        digits:\n          description: Number of decimal points that ERC20 token has.\n          example: 18\n          maximum: 30\n          minimum: 1\n          type: number\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - chain\n        - currency\n        - to\n        - contractAddress\n        - digits\n        - fromPrivateKey\n        - amount\n    ChainTransferEthErc20KMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - BSC\n            - MATIC\n            - XDC\n            - ONE\n        to:\n          maxLength: 50\n          minLength: 1\n          description: Blockchain address to send ERC20 token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        amount:\n          description: Amount to be sent.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        contractAddress:\n          maxLength: 43\n          minLength: 42\n          description: Address of ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        digits:\n          description: Number of decimal points that ERC20 token has.\n          example: 18\n          maximum: 30\n          minimum: 1\n          type: number\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - chain\n        - currency\n        - to\n        - contractAddress\n        - digits\n        - signatureId\n        - amount\n    ChainTransferKcsEthErc20:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: KCS\n          description: Chain to work with.\n          enum:\n            - KCS\n        to:\n          maxLength: 50\n          minLength: 1\n          description: Blockchain address to send ERC20 token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        amount:\n          description: Amount to be sent.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        contractAddress:\n          maxLength: 43\n          minLength: 42\n          description: Address of ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        digits:\n          description: Number of decimal points that ERC20 token has.\n          example: 18\n          maximum: 30\n          minimum: 1\n          type: number\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - chain\n        - currency\n        - to\n        - contractAddress\n        - digits\n        - fromPrivateKey\n        - amount\n    ChainTransferKcsEthErc20KMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: KCS\n          description: Chain to work with.\n          enum:\n            - KCS\n        to:\n          maxLength: 50\n          minLength: 1\n          description: Blockchain address to send ERC20 token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        amount:\n          description: Amount to be sent.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        contractAddress:\n          maxLength: 43\n          minLength: 42\n          description: Address of ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        digits:\n          description: Number of decimal points that ERC20 token has.\n          example: 18\n          maximum: 30\n          minimum: 1\n          type: number\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - chain\n        - currency\n        - to\n        - contractAddress\n        - digits\n        - signatureId\n        - amount\n    ChainTransferBscBep20:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: BSC\n          description: Chain to work with.\n          enum:\n            - BSC\n        to:\n          maxLength: 50\n          minLength: 1\n          description: Blockchain address to send BEP20 token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        amount:\n          description: Amount to be sent.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of BEP20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        digits:\n          description: Number of decimal points that BEP20 token has.\n          example: 18\n          maximum: 30\n          minimum: 1\n          type: number\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to BSC transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - chain\n        - to\n        - contractAddress\n        - digits\n        - fromPrivateKey\n        - amount\n    ChainTransferBscBep20KMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: BSC\n          description: Chain to work with.\n          enum:\n            - BSC\n        to:\n          maxLength: 50\n          minLength: 1\n          description: Blockchain address to send BEP20 token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        amount:\n          description: Amount to be sent.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of BEP20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        digits:\n          description: Number of decimal points that BEP20 token has.\n          example: 18\n          maximum: 30\n          minimum: 1\n          type: number\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to BSC transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - chain\n        - to\n        - contractAddress\n        - digits\n        - signatureId\n        - amount\n    ChainTransferCeloErc20Token:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        to:\n          maxLength: 50\n          minLength: 1\n          description: Blockchain address to send ERC20 token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        amount:\n          description: Amount to be sent.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        digits:\n          description: Number of decimal points that ERC20 token has.\n          example: 18\n          maximum: 30\n          minimum: 1\n          type: number\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - to\n        - contractAddress\n        - digits\n        - feeCurrency\n        - fromPrivateKey\n        - amount\n    ChainTransferCeloErc20TokenKMS:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        to:\n          maxLength: 50\n          minLength: 1\n          description: Blockchain address to send ERC20 token to\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        amount:\n          description: Amount to be sent.\n          example: \"100000\"\n          type: string\n          pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        digits:\n          description: Number of decimal points that ERC20 token has.\n          example: 18\n          maximum: 30\n          minimum: 1\n          type: number\n        signatureId:\n          type: string\n          minLength: 36\n          maxLength: 36\n          format: uuid\n          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83\n          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - to\n        - contractAddress\n        - digits\n        - feeCurrency\n        - signatureId\n        - amount\n    # ChainTransferTronTrc20:\n    #   type: object\n    #   properties:\n    #     chain:\n    #       type: string\n    #       example: TRON\n    #       description: Chain to work with.\n    #       enum:\n    #         - TRON\n    #     fromPrivateKey:\n    #       type: string\n    #       minLength: 64\n    #       maxLength: 64\n    #       description: Private key of the address, from which the TRX will be sent.\n    #       example: 842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701\n    #     to:\n    #       type: string\n    #       minLength: 34\n    #       maxLength: 34\n    #       description: Recipient address of TRON account in Base58 format.\n    #       example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh\n    #     tokenAddress:\n    #       type: string\n    #       minLength: 34\n    #       maxLength: 34\n    #       description: Address of the TRC20 token to transfer.\n    #       example: \"TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW\"\n    #     feeLimit:\n    #       type: number\n    #       minimum: 0\n    #       description: Fee in TRX to be paid.\n    #       example: 0.01\n    #     amount:\n    #       description: Amount to be sent in TRX.\n    #       example: \"100000\"\n    #       pattern: ^[+]?((\\d+(\\.\\d*)?)|(\\.\\d+))$\n    #       type: string\n    #   required:\n    #     - chain\n    #     - fromPrivateKey\n    #     - tokenAddress\n    #     - to\n    #     - amount\n    #     - feeLimit\n    ChainCallSmartContractMethod:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: ETH\n          description: Chain to work with.\n          enum:\n            - ETH\n            - BSC\n            - XDC\n        contractAddress:\n          maxLength: 43\n          minLength: 42\n          description: Address of ERC20 token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        methodName:\n          minLength: 1\n          maxLength: 500\n          description: Name of the method to invoke on smart contract.\n          type: string\n          example: transfer\n        methodABI:\n          type: object\n          description: ABI of the method to invoke.\n        params:\n          type: array\n          example: [ '0x632' ]\n          items:\n            type: string\n          description: Parameters of the method to be invoked.\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n      required:\n        - chain\n        - contractAddress\n        - params\n        - methodABI\n        - fromPrivateKey\n        - methodName\n    CallCeloSmartContractMethod:\n      type: object\n      properties:\n        chain:\n          type: string\n          example: CELO\n          description: Chain to work with.\n          enum:\n            - CELO\n        contractAddress:\n          maxLength: 42\n          minLength: 42\n          description: Address of token\n          example: \"0x687422eEA2cB73B5d3e242bA5456b782919AFc85\"\n          type: string\n        methodName:\n          minLength: 1\n          maxLength: 500\n          description: Name of the method to invoke on smart contract.\n          type: string\n          example: transfer\n        methodABI:\n          type: object\n          description: ABI of the method to invoke.\n        params:\n          type: array\n          example: [ '0x632' ]\n          items:\n            type: string\n          description: Parameters of the method to be invoked.\n        fromPrivateKey:\n          type: string\n          maxLength: 66\n          example: \"0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2\"\n          minLength: 66\n          description: Private key of sender address. Private key, or signature Id must be present.\n        nonce:\n          type: number\n          minimum: 0\n          description: Nonce to be set to transaction. If not present, last known nonce will be used.\n        fee:\n          description: Custom defined fee. If not present, it will be calculated automatically.\n          type: object\n          required:\n            - gasLimit\n            - gasPrice\n          properties:\n            gasLimit:\n              type: string\n              description: Gas limit for transaction in gas price.\n              pattern: ^[+]?\\d+$\n              example: \"40000\"\n            gasPrice:\n              type: string\n              description: Gas price in Gwei.\n              pattern: ^[+]?\\d+$\n              example: \"20\"\n        feeCurrency:\n          type: string\n          description: Currency to pay for transaction gas\n          enum:\n            - CELO\n            - CUSD\n            - CEUR\n      required:\n        - chain\n        - contractAddress\n        - params\n        - methodABI\n        - fromPrivateKey\n        - methodName\n        - feeCurrency\n"
		}
	},
	"Error": "parse: parse spec: paths: /v3/blockchain/token/transaction: post: operation \"Erc20Transfer\": responses: 400: content: \"application/json\": schema: parse schema: reference \"#/components/schemas/Error400\": resolve reference \"#/components/schemas/Error400\": schema not found"
}