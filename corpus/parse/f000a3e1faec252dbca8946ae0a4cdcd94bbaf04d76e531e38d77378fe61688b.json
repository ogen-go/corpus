{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/SecureIdentityAlliance/osia"
		},
		"file": {
			"name": "pr.yaml",
			"size": 0,
			"path": "src/doc/yaml/pr.yaml",
			"byteSize": 39709,
			"content": "\n# (c) Secure Identity Alliance\n\nopenapi: 3.0.0\ninfo:\n  description: |\n    The OSIA Population Registry Interface\n\n    Change log:\n    \n    - 1.4.1:\n      - Add missing values in BiometricSubType\n    - 1.4.0:\n      - Add an identityType in the identity object\n      - rename documents in documentData in the identity object\n      - Change date to date-time\n      - Mark the identityId as readOnly, add it to biometricData\n      - Add the impressionType, mimeType, template, templateRef, templateFormat to biometricData\n      - replace format with mimeType in documents\n      - Add quality, qualityFormat, algorithm, vendor fields to biometricData\n      - New service moveIdentity\n      - Mark some fields (ID, etc.) as readOnly\n      - Rename entity Document as DocumentData\n      - Add FORM in possible document type\n    - 1.3.0:\n      - Add error structure on 400 errors\n      - Add additional documentType and open it for extension\n      - Add signature in biometricType\n      - Force additionalProperties to false when extension is not allowed\n      - Pagination when accessing gallery content\n      - Add a query service, searching on all the identities of a person\n      - Add fields on BiometricData: instance, metadata, comment, missing\n    - 1.2.0:\n      - Addition of security\n    - 1.1.0:\n      - Add the merge service\n      - Change the mandatory flag for the status, based on the type of service\n    - 1.0.0: Initial version\n\n  version: 1.4.1\n  title: OSIA Population Registry Interface\n  license:\n    name: SIA\n    url: \"https://raw.githubusercontent.com/SecureIdentityAlliance/osia/master/LICENSE\"\ntags:\n  - name: Person\n  - name: Identity\n  - name: Reference\n  - name: Gallery\nservers:\n  - url: https://pr.com/\npaths:\n\n\n  /v1/persons:\n    post:\n      tags:\n        - Person\n      summary: Query for persons\n      description: |\n        Retrieve a list of personId corresponding to the records with one identity matching the criteria.\n\n        By default, all identities are used in the search.\n      operationId: findPersons\n      security:\n        - BearerAuth: [pr.person.read]\n      parameters:\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: group\n          in: query\n          description: Group all matching identities of one person and return only the personId\n          required: false\n          schema:\n            type: boolean\n        - name: reference\n          in: query\n          description: Limit the query to the reference identity\n          required: false\n          schema:\n            type: boolean\n        - name: gallery\n          in: query\n          description: Limit the query to the records belonging to this gallery\n          required: false\n          schema:\n            type: string\n        - name: offset\n          in: query\n          description: The offset of the query (first item of the response)\n          required: false\n          schema:\n            type: integer\n            default: 0\n        - name: limit\n          in: query\n          description: The maximum number of items to return\n          required: false\n          schema:\n            type: integer\n            default: 100\n      requestBody:\n        description: A set of expressions on attributes of the person's identity\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Expressions'\n            example:\n              - attributeName: firstName\n                operator: \"=\"\n                value: John\n              - attributeName: dateOfBirth\n                operator: \"\u003c\"\n                value: \"1990-12-31\"\n      responses:\n        '200':\n          description: Query successful. If the group parameter was set the identityId is not included in the response.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  required:\n                    - personId\n                  properties:\n                    personId:\n                      type: string\n                    identityId:\n                      type: string\n                  additionalProperties: false\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Query not allowed\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n\n  /v1/persons/{personId}:\n    post:\n      tags:\n        - Person\n      summary: Create one person\n      operationId: createPerson\n      security:\n        - BearerAuth: [pr.person.write]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Person'\n      responses:\n        '201':\n          description: Operation successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Operation not allowed\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    get:\n      tags:\n        - Person\n      summary: Read one person\n      operationId: readPerson\n      security:\n        - BearerAuth: [pr.person.read]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Read successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Person'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Read not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      tags:\n        - Person\n      summary: Update one person\n      operationId: updatePerson\n      security:\n        - BearerAuth: [pr.person.write]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Person'\n      responses:\n        '204':\n          description: Update successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Update not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      tags:\n        - Person\n      summary: Delete a person and all its identities\n      operationId: deletePerson\n      security:\n        - BearerAuth: [pr.person.write]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Delete successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Delete not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /v1/persons/{personIdTarget}/merge/{personIdSource}:\n    post:\n      tags:\n        - Person\n      summary: Merge two persons\n      description: |\n        Merge two person records into a single one. Identity ID are preserved and in case of duplicates\n        an error is returned and no changes are done.\n        If the operation is successful, the person merged is deleted.\n      operationId: mergePerson\n      security:\n        - BearerAuth: [pr.person.write]\n      parameters:\n        - name: personIdTarget\n          in: path\n          description: the id of the person receiving new identities\n          required: true\n          schema:\n            type: string\n        - name: personIdSource\n          in: path\n          description: the id of the person giving the identities\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Merge successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Merge not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /v1/persons/{personId}/identities:\n    get:\n      tags:\n        - Identity\n      summary: Read all the identities of a person\n      operationId: readIdentities\n      security:\n        - BearerAuth: [pr.identity.read]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Operation successful\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Identity'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Operation not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - Identity\n      summary: Create one identity and generate its id\n      operationId: createIdentity\n      security:\n        - BearerAuth: [pr.identity.write]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Identity'\n                  \n      responses:\n        '200':\n          description: Insertion successful\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - identityId\n                properties:\n                  identityId:\n                    type: string\n                additionalProperties: false\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Insertion not allowed\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /v1/persons/{personId}/identities/{identityId}:\n    post:\n      tags:\n        - Identity\n      summary: Create one identity\n      description: |\n        Create one new identity for a person. The provided identityId is\n        checked for validity and used for the new identity.\n      operationId: createIdentityWithId\n      security:\n        - BearerAuth: [pr.identity.write]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: identityId\n          in: path\n          description: the id of the identity\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Identity'\n      responses:\n        '201':\n          description: Insertion successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Insertion not allowed\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    get:\n      tags:\n        - Identity\n      summary: Read one identity\n      operationId: readIdentity\n      security:\n        - BearerAuth: [pr.identity.read]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: identityId\n          in: path\n          description: the id of the identity\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Read successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Identity'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Read not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      tags:\n        - Identity\n      summary: Update one identity\n      operationId: updateIdentity\n      security:\n        - BearerAuth: [pr.identity.write]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: identityId\n          in: path\n          description: the id of the identity\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Identity'\n      responses:\n        '204':\n          description: Update successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Update not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      tags:\n        - Identity\n      summary: Update partially one identity\n      description: Update partially an identity. Payload content is a partial identity object compliant with RFC7396.\n      operationId: partialUpdateIdentity\n      security:\n        - BearerAuth: [pr.identity.write]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: identityId\n          in: path\n          description: the id of the identity\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Identity'\n            example:\n              galleries: [G1, G2]\n              biographicData:\n                gender: null\n                nationality: FRA\n      responses:\n        '204':\n          description: Update successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Update not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      tags:\n        - Identity\n      summary: Delete one identity\n      operationId: deleteIdentity\n      security:\n        - BearerAuth: [pr.identity.write]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: identityId\n          in: path\n          description: the id of the identity\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Delete successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Delete not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /v1/persons/{personIdTarget}/move/{personIdSource}/identities/{identityId}:\n    post:\n      tags:\n        - Identity\n      summary: Move one identity\n      description: |\n        Move one identity from the source person to the target person.\n        Identity ID is preserved and in case of duplicate\n        an error is returned and no changes are done.\n        The source person is not deleted, even if it was the only identity of this person.\n      operationId: moveIdentity\n      security:\n        - BearerAuth: [pr.identity.write]\n      parameters:\n        - name: personIdTarget\n          in: path\n          description: the id of the person receiving the identity\n          required: true\n          schema:\n            type: string\n        - name: personIdSource\n          in: path\n          description: the id of the person giving the identity\n          required: true\n          schema:\n            type: string\n        - name: identityId\n          in: path\n          description: the id of the identity\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Move successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Move not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /v1/persons/{personId}/identities/{identityId}/status:\n    put:\n      tags:\n        - Identity\n      summary: Change the status of an identity\n      operationId: setIdentityStatus\n      security:\n        - BearerAuth: [pr.identity.write]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: identityId\n          in: path\n          description: the id of the identity\n          required: true\n          schema:\n            type: string\n        - name: status\n          in: query\n          description: The status of the identity\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Operation successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Operation not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /v1/persons/{personId}/identities/{identityId}/reference:\n    put:\n      tags:\n        - Reference\n      summary: Define the reference\n      operationId: defineReference\n      security:\n        - BearerAuth: [pr.reference.write]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: identityId\n          in: path\n          description: the id of the identity\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Operation successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Operation not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    \n  /v1/persons/{personId}/reference:\n    get:\n      tags:\n        - Reference\n      summary: Read the reference\n      operationId: readReference\n      security:\n        - BearerAuth: [pr.reference.read]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Read successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Identity'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Read not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n\n  /v1/galleries:\n    get:\n      tags:\n        - Gallery\n      summary: Read the ID of all the galleries\n      operationId: readGalleries\n      security:\n        - BearerAuth: [pr.gallery.read]\n      parameters:\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Operation successful\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Read not allowed\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /v1/galleries/{galleryId}:\n    get:\n      tags:\n        - Gallery\n      summary: Read the content of one gallery\n      operationId: readGalleryContent\n      security:\n        - BearerAuth: [pr.gallery.read]\n      parameters:\n        - name: galleryId\n          in: path\n          description: the id of the gallery\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: offset\n          in: query\n          description: The offset of the query (first item of the response)\n          required: false\n          schema:\n            type: integer\n            default: 0\n        - name: limit\n          in: query\n          description: The maximum number of items to return\n          required: false\n          schema:\n            type: integer\n            default: 1000\n      responses:\n        '200':\n          description: Operation successful\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  required:\n                    - personId\n                    - identityId\n                  properties:\n                    personId:\n                      type: string\n                    identityId:\n                      type: string\n                  additionalProperties: false\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Read not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\ncomponents:\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          description: Error code\n          type: integer\n          format: int32\n        message:\n          description: Error message\n          type: string\n      additionalProperties: false\n    Person:\n      description: \u003e-\n        Person entity.\n      type: object\n      required:\n        - status\n        - physicalStatus\n      properties:\n        personId:\n          type: string\n          description: The unique id for this person\n          readOnly: true\n        status:\n          type: string\n          enum: [ACTIVE, INACTIVE]\n        physicalStatus:\n          type: string\n          enum: [DEAD, ALIVE]\n      additionalProperties: false\n    Identity:\n      type: object\n      required:\n        - status\n        - identityId\n        - identityType\n      properties:\n        identityId:\n          type: string\n          readOnly: true\n        identityType:\n          type: string\n        status:\n          type: string\n          enum: [CLAIMED, VALID, INVALID, REVOKED]\n        galleries:\n          type: array\n          description: The list of galleries for this object.\n          items:\n            type: string\n          minItems: 1\n          uniqueItems: true\n        clientData:\n          type: string\n          format: byte\n        contextualData:\n          $ref: '#/components/schemas/ContextualData'\n        biographicData:\n          $ref: '#/components/schemas/BiographicData'\n        biometricData:\n          type: array\n          items:\n            $ref: '#/components/schemas/BiometricData'\n        documentData:\n          type: array\n          items:\n            $ref: '#/components/schemas/DocumentData'\n      additionalProperties: false\n    ContextualData:\n      type: object\n      additionalProperties: true\n      example:\n        enrollmentDate: \"2019-01-11\"\n    BiographicData:\n      type: object\n      description: The set of biographic data.\n      additionalProperties: true\n      example:\n        firstName: John\n        lastName: Doo\n        dateOfBirth: \"1985-11-30\"\n        gender: M\n        nationality: FRA\n\n    CompressionType:\n      type: string\n      enum: [NONE, WSQ, JPEG, JPEG2000, PNG]\n      example: WSQ\n\n    DocumentData:\n      type: object\n      required:\n        - documentType\n        - parts\n      properties:\n        documentType:\n          $ref: '#/components/schemas/DocumentType'\n        documentTypeOther:\n          type: string\n          description: Details about the type of document when OTHER is used.\n        instance:\n          type: string\n          description: \"Used to separate two distincts documents of the same type (ex: two passports)\"\n        parts:\n          type: array\n          minItems: 1\n          items:\n            $ref: '#/components/schemas/DocumentPart'\n      additionalProperties: false\n    DocumentType:\n      type: string\n      description: Type of document.\n      enum: [ID_CARD, PASSPORT, INVOICE, BIRTH_CERTIFICATE, FORM, OTHER]\n      example: FORM\n    DocumentPart:\n      type: object\n      properties:\n        pages:\n          type: array\n          description: The pages included in this part. Can be a single page number, or a list.\n          minItems: 1\n          items:\n            type: integer\n        data:\n          type: string\n          format: byte\n          description: Base64-encoded data of the document\n        dataRef:\n          type: string\n          format: uri\n          description: URI to the data\n          example: \"http://server.com/buffer?id=00003\"\n        width:\n          type: integer\n          description: the width of the image in pixels\n        height:\n          type: integer\n          description: the height of the image in pixels\n        mimeType:\n          type: string\n          description: the nature and format of the document. The mime type definitions should be in compliance with RFC 6838.\n        captureDate:\n          type: string\n          format: date-time\n          example: \"2019-05-21T12:00:00Z\"\n        captureDevice:\n          type: string\n          description: A string identifying the device used to capture the document part\n      additionalProperties: false\n    BiometricData:\n      type: object\n      required:\n        - biometricType\n      properties:\n        biometricType:\n          $ref: '#/components/schemas/BiometricType'\n        biometricSubType:\n          $ref: '#/components/schemas/BiometricSubType'\n        instance:\n          type: string\n          description: Used to separate two distincts biometric items of the same type and subtype\n        identityId:\n          type: string\n          description: the id of the identity owner of this biometric\n          readOnly: true\n        image:\n          type: string\n          format: byte\n          description: Base64-encoded image\n        imageRef:\n          type: string\n          format: uri\n          description: URI to an image\n          example: \"http://imageserver.com/image?id=00003\"\n        captureDate:\n          type: string\n          format: date-time\n          example: \"2019-05-21T12:00:00Z\"\n        captureDevice:\n          type: string\n          description: A string identifying the device used to capture the biometric\n        impressionType:\n          $ref: '#/components/schemas/ImpressionType'\n        width:\n          type: integer\n          description: the width of the image\n        height:\n          type: integer\n          description: the height of the image\n        bitdepth:\n          type: integer\n        mimeType:\n          type: string\n          description: the nature and format of the image. The mime type definitions should be in compliance with RFC 6838.\n        resolution:\n          type: integer\n          description: the image resolution (in DPI)\n        compression:\n          $ref: '#/components/schemas/CompressionType'\n        missing:\n          description: Optional properties indicating if a part of the biometric data is missing\n          type: array\n          items:\n            $ref: '#/components/schemas/MissingType'\n        metadata:\n          type: string\n          description: An optional string used to convey information vendor-specific\n        comment:\n          type: string\n          description: A comment about the biometric data\n        template:\n          type: string\n          format: byte\n          description: Base64-encoded template\n        templateRef:\n          type: string\n          format: uri\n          description: URI to the template when it is managed in a dedicated data server\n          example: \"http://dataserver.com/template?id=00014\"\n        templateFormat:\n          $ref: '#/components/schemas/TemplateFormat'\n        quality:\n          type: integer\n          format: int64\n          description: Quality, as a number, of the biometric\n        qualityFormat:\n          $ref: '#/components/schemas/QualityFormat'\n        algorithm:\n          type: string\n        vendor:\n          type: string\n      additionalProperties: false\n    TemplateFormat:\n      type: string\n      description: |\n        Format of the template.\n        One of ISO_19794_2, ISO_19794_2_NS, ISO_19794_2_CS, ISO_19794_2_2011, ANSI_378_2009 or ANSI_378.\n        Can be extended to include additional proprietary template format\n    QualityFormat:\n      type: string\n      description: |\n        Format of the quality.\n        One of ISO_19794, NFIQ, or NFIQ2.\n        Can be extended to include additional proprietary quality format\n    MissingType:\n      type: object\n      properties:\n        biometricSubType:\n          $ref: '#/components/schemas/BiometricSubType'\n        presence:\n          type: string\n          enum: [BANDAGED, AMPUTATED, DAMAGED]\n      additionalProperties: false\n    ImpressionType:\n      type: string\n      enum:\n        - LIVE_SCAN_PLAIN\n        - LIVE_SCAN_ROLLED\n        - NONLIVE_SCAN_PLAIN\n        - NONLIVE_SCAN_ROLLED\n        - LATENT_IMPRESSION\n        - LATENT_TRACING\n        - LATENT_PHOTO\n        - LATENT_LIFT\n        - LIVE_SCAN_SWIPE\n        - LIVE_SCAN_VERTICAL_ROLL\n        - LIVE_SCAN_PALM\n        - NONLIVE_SCAN_PALM\n        - LATENT_PALM_IMPRESSION\n        - LATENT_PALM_TRACING\n        - LATENT_PALM_PHOTO\n        - LATENT_PALM_LIFT\n        - LIVE_SCAN_OPTICAL_CONTACTLESS_PLAIN\n        - OTHER\n        - UNKNOWN\n    BiometricType:\n      type: string\n      enum:\n        - FACE\n        - FINGER\n        - IRIS\n        - SIGNATURE\n        - UNKNOWN\n      example: FINGER\n    BiometricSubType:\n      type: string\n      enum:\n        - UNKNOWN\n        - RIGHT_THUMB\n        - RIGHT_INDEX\n        - RIGHT_MIDDLE\n        - RIGHT_RING\n        - RIGHT_LITTLE\n        - LEFT_THUMB\n        - LEFT_INDEX\n        - LEFT_MIDDLE\n        - LEFT_RING\n        - LEFT_LITTLE\n        - PLAIN_RIGHT_FOUR_FINGERS\n        - PLAIN_LEFT_FOUR_FINGERS\n        - PLAIN_THUMBS\n        \n        - UNKNOWN_PALM\n        - RIGHT_FULL_PALM\n        - RIGHT_WRITERS_PALM\n        - LEFT_FULL_PALM\n        - LEFT_WRITERS_PALM\n        - RIGHT_LOWER_PALM\n        - RIGHT_UPPER_PALM\n        - LEFT_LOWER_PALM\n        - LEFT_UPPER_PALM\n        - RIGHT_OTHER\n        - LEFT_OTHER\n        - RIGHT_INTERDIGITAL\n        - RIGHT_THENAR\n        - RIGHT_HYPOTHENAR\n        - LEFT_INTERDIGITAL\n        - LEFT_THENAR\n        - LEFT_HYPOTHENAR\n        \n        - RIGHT_INDEX_AND_MIDDLE\n        - RIGHT_MIDDLE_AND_RING\n        - RIGHT_RING_AND_LITTLE\n        - LEFT_INDEX_AND_MIDDLE\n        - LEFT_MIDDLE_AND_RING\n        - LEFT_RING_AND_LITTLE\n        - RIGHT_INDEX_AND_LEFT_INDEX\n        - RIGHT_INDEX_AND_MIDDLE_AND_RING\n        - RIGHT_MIDDLE_AND_RING_AND_LITTLE\n        - LEFT_INDEX_AND_MIDDLE_AND_RING\n        - LEFT_MIDDLE_AND_RING_AND_LITTLE\n        \n        - EYE_UNDEF\n        - EYE_RIGHT\n        - EYE_LEFT\n        - EYE_BOTH\n        \n        - PORTRAIT\n        - LEFT_PROFILE\n        - RIGHT_PROFILE\n      example: RIGHT_INDEX\n    Expression:\n      type: object\n      required:\n        - attributeName\n        - operator\n        - value\n      properties:\n        attributeName:\n          type: string\n        operator:\n          type: string\n          enum: ['\u003c', '\u003e', '=', '\u003e=', '\u003c=', '!=']\n        value:\n          oneOf:\n          - type: string\n          - type: integer\n          - type: number\n          - type: boolean\n      additionalProperties: false\n    Expressions:\n      type: array\n      items:\n        $ref: '#/components/schemas/Expression'\n",
			"canonicalURL": "/github.com/SecureIdentityAlliance/osia@3985bcb9999ca644b07865dd7e1424cd0e47946e/-/blob/src/doc/yaml/pr.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/SecureIdentityAlliance/osia/blob/3985bcb9999ca644b07865dd7e1424cd0e47946e/src/doc/yaml/pr.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/v1/persons/{personId}/identities\": at 1:19990: get: operation \"readIdentities\": at 1:19997: at 1:20779: security: list of scopes MUST be empty for \"type\" \"http\""
}