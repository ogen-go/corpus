{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/NethermindEth/nethermind"
		},
		"file": {
			"name": "beacon-node-oapi.yaml",
			"size": 0,
			"path": "src/Nethermind/Nethermind.BeaconNode.OApi/apis/validator/beacon-node-oapi.yaml",
			"byteSize": 12532,
			"content": "openapi: \"3.0.2\"\ninfo:\n  title: \"Minimal Beacon Node API for Validator\"\n  description: \"A minimal API specification for the beacon node, which enables a validator to connect and perform its obligations on the Ethereum 2.0 phase 0 beacon chain.\"\n  version: \"0.3.0\"\n  license:\n    name: \"Apache 2.0\"\n    url: \"https://www.apache.org/licenses/LICENSE-2.0.html\"\ntags:\n  - name: MinimalSet\n    description: The minimal set of endpoints to enable a working validator implementation.\n  - name: OptionalSet\n    description: Extra endpoints which are nice-to-haves.\npaths:\n  /node/version:\n    get:\n      tags:\n        - MinimalSet\n      summary: \"Get version string of the running beacon node.\"\n      description: \"Requests that the beacon node identify information about its implementation in a format similar to a  [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) field.\"\n      responses:\n        200:\n          description: Request successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Version'\n        500:\n          $ref: '#/components/responses/InternalError'\n  /node/genesis_time:\n    get:\n      tags:\n        - MinimalSet\n      summary: \"Get the genesis_time parameter from beacon node configuration.\"\n      description: \"Requests the genesis_time parameter from the beacon node, which should be consistent across all beacon nodes that follow the same beacon chain.\"\n      responses:\n        200:\n          description: Request successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenesisTime'\n        500:\n          $ref: '#/components/responses/InternalError'\n\n  /node/syncing:\n    get:\n      tags:\n        - MinimalSet\n      summary: \"Poll to see if the the beacon node is syncing.\"\n      description: \"Requests the beacon node to describe if it's currently syncing or not, and if it is, what block it is up to. This is modelled after the Eth1.0 JSON-RPC eth_syncing call..\"\n      responses:\n        200:\n          description: Request successful\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  is_syncing:\n                    type: boolean\n                    description: \"A boolean of whether the node is currently syncing or not.\"\n                  sync_status:\n                    $ref: '#/components/schemas/SyncingStatus'\n        500:\n          $ref: '#/components/responses/InternalError'\n  /node/fork:\n    get:\n      tags:\n        - OptionalSet\n      summary: \"Get fork information from running beacon node.\"\n      description: \"Requests the beacon node to provide which fork version it is currently on.\"\n      responses:\n        200:\n          description: Request successful\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  fork:\n                    $ref: '#/components/schemas/Fork'\n                  chain_id:\n                    type: integer\n                    format: uint64\n                    description: \"Sometimes called the network id, this number discerns the active chain for the beacon node. Analogous to Eth1.0 JSON-RPC net_version.\"\n        500:\n          $ref: '#/components/responses/InternalError'\n\n  /validator/{pubkey}:\n    get:\n      tags:\n        - MinimalSet\n      summary: \"Get validator details.\"\n      description: \"Requests the beacon node to provide details about validator or 404 if validator is not present in validator registry\"\n      parameters:\n        - name: pubkey\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/PublicKey'\n      responses:\n        200:\n          description: Success response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Validator'\n        400:\n          $ref: '#/components/responses/InvalidRequest'\n        404:\n          description: \"Validator not found in registry\"\n        500:\n          $ref: '#/components/responses/InternalError'\n\n  /validator/duties:\n    get:\n      tags:\n        - MinimalSet\n      summary: \"Get validator duties for the requested validators.\"\n      description: \"Requests the beacon node to provide a set of _duties_, which are actions that should be performed by validators, for a particular epoch. Duties should only need to be checked once per epoch, however a chain reorganization (of \u003e MIN_SEED_LOOKAHEAD epochs) could occur, resulting in a change of duties. For full safety, this API call should be polled at every slot to ensure that chain reorganizations are recognized, and to ensure that the beacon node is properly synchronized.\"\n      parameters:\n      - name: validator_pubkeys\n        in: query\n        required: true\n        description: \"An array of hex-encoded BLS public keys\"\n        schema:\n          type: array\n          items:\n            $ref: '#/components/schemas/PublicKey'\n          minItems: 1\n      - name: epoch\n        in: query\n        required: false\n        schema:\n            type: integer\n      responses:\n        200:\n          description: Success response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ValidatorDuty'\n        400:\n          $ref: '#/components/responses/InvalidRequest'\n        406:\n          description: \"Duties cannot be provided for the requested epoch.\"\n        500:\n          $ref: '#/components/responses/InternalError'\n        503:\n          $ref: '#/components/responses/CurrentlySyncing'\n\n  /validator/block:\n    get:\n      tags:\n        - MinimalSet\n      summary: \"Produce a new block, without signature.\"\n      description: \"Requests a beacon node to produce a valid block, which can then be signed by a validator.\"\n      parameters:\n      - name: slot\n        in: query\n        required: true\n        description: \"The slot for which the block should be proposed.\"\n        schema:\n          type: integer\n          format: uint64\n      - name: randao_reveal\n        in: query\n        required: true\n        description: \"The validator's randao reveal value.\"\n        schema:\n          $ref: '#/components/schemas/Signature'\n      responses:\n        200:\n          description: Success response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BeaconBlock'\n        400:\n          $ref: '#/components/responses/InvalidRequest'\n        500:\n          $ref: '#/components/responses/InternalError'\n        503:\n          $ref: '#/components/responses/CurrentlySyncing'\n    post:\n      tags:\n        - MinimalSet\n      summary: \"Publish a signed block.\"\n      description: \"Instructs the beacon node to broadcast a newly signed beacon block to the beacon network, to be included in the beacon chain. The beacon node is not required to validate the signed `BeaconBlock`, and a successful response (20X) only indicates that the broadcast has been successful. The beacon node is expected to integrate the new block into its state, and therefore validate the block internally, however blocks which fail the validation are still broadcast but a different status code is returned (202)\"\n      requestBody:\n        description: \"The `BeaconBlock` object, as sent from the beacon node originally, but now with the signature field completed. Must be sent in JSON format in the body of the request.\"\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BeaconBlock'\n      responses:\n        200:\n          description: \"The block was validated successfully and has been broadcast. It has also been integrated into the beacon node's database.\"\n        202:\n          description: \"The block failed validation, but was successfully broadcast anyway. It was not integrated into the beacon node's database.\"\n        400:\n          $ref: '#/components/responses/InvalidRequest'\n        500:\n          $ref: '#/components/responses/InternalError'\n        503:\n          $ref: '#/components/responses/CurrentlySyncing'\n\n  /validator/attestation:\n    get:\n      tags:\n        - MinimalSet\n      summary: \"Produce an attestation, without signature.\"\n      description: \"Requests that the beacon node produce an Attestation, with a blank signature field, which the validator will then sign.\"\n      parameters:\n      - name: validator_pubkey\n        in: query\n        required: true\n        description: \"Uniquely identifying which validator this attestation is to be produced for.\"\n        schema:\n          $ref: '#/components/schemas/PublicKey'\n      - name: poc_bit\n        in: query\n        required: true\n        description: \"The proof-of-custody bit that is to be reported by the requesting validator. This bit will be inserted into the appropriate location in the returned `Attestation`.\"\n        schema:\n            type: integer\n            format: uint32\n            minimum: 0\n            maximum: 1\n      - name: slot\n        in: query\n        required: true\n        description: \"The slot for which the attestation should be proposed.\"\n        schema:\n          type: integer\n      - name: shard\n        in: query\n        required: true\n        description: \"The shard number for which the attestation is to be proposed.\"\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Success response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Attestation'\n        400:\n          $ref: '#/components/responses/InvalidRequest'\n        500:\n          $ref: '#/components/responses/InternalError'\n        503:\n          $ref: '#/components/responses/CurrentlySyncing'\n    post:\n      tags:\n        - MinimalSet\n      summary: \"Publish a signed attestation.\"\n      description: \"Instructs the beacon node to broadcast a newly signed Attestation object to the intended shard subnet. The beacon node is not required to validate the signed Attestation, and a successful response (20X) only indicates that the broadcast has been successful. The beacon node is expected to integrate the new attestation into its state, and therefore validate the attestation internally, however attestations which fail the validation are still broadcast but a different status code is returned (202)\"\n      requestBody:\n        description: \"An `Attestation` structure, as originally provided by the beacon node, but now with the signature field completed. Must be sent in JSON format in the body of the request.\"\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Attestation'\n      responses:\n        200:\n          description: \"The attestation was validated successfully and has been broadcast. It has also been integrated into the beacon node's database.\"\n        202:\n          description: \"The attestation failed validation, but was successfully broadcast anyway. It was not integrated into the beacon node's database.\"\n        400:\n          $ref: '#/components/responses/InvalidRequest'\n        500:\n          $ref: '#/components/responses/InternalError'\n        503:\n          $ref: '#/components/responses/CurrentlySyncing'\n\ncomponents:\n  schemas:\n    BeaconBlock:\n      $ref: '../../types/block.yaml#/schemas/BeaconBlock'\n    Validator:\n      $ref: '../../types/validator.yaml#/schemas/Validator'\n    Attestation:\n      $ref: '../../types/operations/attestation.yaml#/schemas/Attestation'\n    ValidatorDuty:\n      $ref: '../../types/validator.yaml#/schemas/ValidatorDuty'\n    Fork:\n      $ref: '../../types/network.yaml#/schemas/Fork'\n    PublicKey:\n      $ref: '../../types/misc.yaml#/schemas/PublicKey'\n    SyncingStatus:\n      $ref: '../../types/network.yaml#/schemas/SyncingStatus'\n    GenesisTime:\n      $ref: '../../types/misc.yaml#/schemas/GenesisTime'\n    Version:\n      $ref: '../../types/misc.yaml#/schemas/Version'\n    Signature:\n      $ref: '../../types/misc.yaml#/schemas/Signature'\n  responses:\n    InvalidRequest:\n      $ref: '../../types/http.yaml#/responses/InvalidRequest'\n    InternalError:\n      $ref: '../../types/http.yaml#/responses/InternalError'\n    CurrentlySyncing:\n      $ref: '../../types/http.yaml#/responses/CurrentlySyncing'\n",
			"canonicalURL": "/github.com/NethermindEth/nethermind@fe23992d9d136b8e59d7c0688fe406c98b6ab894/-/blob/src/Nethermind/Nethermind.BeaconNode.OApi/apis/validator/beacon-node-oapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/NethermindEth/nethermind/blob/fe23992d9d136b8e59d7c0688fe406c98b6ab894/src/Nethermind/Nethermind.BeaconNode.OApi/apis/validator/beacon-node-oapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"PublicKey\": parse schema: resolve \"../../types/misc.yaml#/schemas/PublicKey\": external \"../../types/misc.yaml\": file: local file reference is not allowed"
}