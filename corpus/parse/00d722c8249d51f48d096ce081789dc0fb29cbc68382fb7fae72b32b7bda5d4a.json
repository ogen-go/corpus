{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wikimedia/restbase"
		},
		"file": {
			"name": "summary.yaml",
			"size": 0,
			"path": "v1/summary.yaml",
			"byteSize": 9067,
			"content": "openapi: 3.0.1\ninfo:\n  version: 1.0.0-beta\n  title: MediaWiki Summary API\n  description: Page content summary API\n  termsOfService: https://github.com/wikimedia/restbase#restbase\n  contact:\n    name: Services\n    email: services@lists.wikimedia.org\n    url: https://www.mediawiki.org/wiki/Services\n  license:\n    name: Apache licence, v2\n    url: https://www.apache.org/licenses/LICENSE-2.0\npaths:\n  /summary/{title}:\n    x-route-filters:\n      - path: ./lib/access_check_filter.js\n        options:\n          redirect_cache_control: '{{options.response_cache_control}}'\n    get:\n      tags:\n        - Page content\n      summary: Get a text extract \u0026 thumb summary of a page.\n      description: |\n        The summary response includes a text extract of the first several\n        sentences, as well as information about a thumbnail that represents\n        the page.\n\n        Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)\n      parameters:\n        - name: title\n          in: path\n          description: 'Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.'\n          required: true\n          schema:\n            type: string\n        - name: redirect\n          in: query\n          description: |\n            Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.\n            To get a 200 response instead, supply `false` to the `redirect` parameter.\n          schema:\n            type: boolean\n        - name: Accept-Language\n          in: header\n          description: |\n            The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.\n          schema:\n            type: string\n      responses:\n        200:\n          description: The summary for the given page\n          headers:\n            ETag:\n              description: |\n                Syntax: \"{revision}/{tid}\". Example: \"701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc\"\n              schema:\n                type: string\n          content:\n            application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/Summary/1.2.0\":\n              schema:\n                $ref: '#/components/schemas/summary'\n        301:\n          description: |\n            A permanent redirect is returned if the supplied article title was not in the normalized form.\n            To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform\n            title normalization client-side.\n\n            Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)\n            will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).\n        302:\n          description: |\n            The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).\n            The `location` header points to the redirect target.\n            If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.\n\n            Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)\n            will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).\n        404:\n          description: Unknown page title\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        default:\n          description: Error\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n      x-setup-handler:\n        # Set up a simple key-value bucket.\n        - init:\n            method: put\n            uri: /{domain}/sys/key_value/page_summary\n            body:\n              valueType: json\n      x-request-handler:\n        - storage:\n            request:\n              method: get\n              headers:\n                cache-control: '{{cache-control}}'\n              uri: /{domain}/sys/key_value/page_summary/{request.params.title}\n            catch:\n              status: 404\n            return_if:\n              # Typical case: Return straight from storage.\n              status: 2xx\n            return:\n              status: 200\n              headers:\n                content-type: '{{storage.headers.content-type}}'\n                etag: '{{storage.headers.etag}}'\n                cache-control: '{{options.response_cache_control}}'\n              body: '{{storage.body}}'\n\n        # Storage miss. Call the Action API to get the textextract.\n        - extract:\n            request:\n              method: post\n              uri: /{domain}/sys/action/query\n              body:\n                prop: 'info|extracts|pageimages|revisions|pageterms|coordinates'\n                exsentences: 5\n                exintro: true\n                piprop: 'thumbnail|original'\n                inprop: 'displaytitle'\n                pithumbsize: 320\n                pilicense: 'any'\n                rvprop: 'timestamp|ids'\n                titles: '{{request.params.title}}'\n                wbptterms: 'description'\n            response:\n              # Define the response to save \u0026 return.\n              headers:\n                content-type: application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/Summary/1.2.0\"\n                etag: \"\\\"{{getRevision(extract.body.items[0].revisions).revid}}/{{timeuuid()}}\\\"\"\n              body:\n                title: '{{extract.body.items[0].title}}'\n                displaytitle: '{{extract.body.items[0].displaytitle}}'\n                pageid: '{{extract.body.items[0].pageid}}'\n                extract: '{{stripTags(extract.body.items[0].extract)}}'\n                extract_html: '{{extract.body.items[0].extract}}'\n                thumbnail: '{{changeProtocol(extract.body.items[0].thumbnail)}}'\n                originalimage: '{{changeProtocol(extract.body.items[0].original)}}'\n                lang: '{{extract.body.items[0].pagelanguagehtmlcode}}'\n                dir: '{{extract.body.items[0].pagelanguagedir}}'\n                timestamp: '{{getRevision(extract.body.items[0].revisions).timestamp}}'\n                description: '{{extractDescription(extract.body.items[0].terms)}}'\n                coordinates: '{{processCoords(extract.body.items[0].coordinates)}}'\n        - store_and_return:\n            request:\n              method: put\n              uri: /{domain}/sys/key_value/page_summary/{request.params.title}\n              headers:\n                if-none-hash-match\": '*'\n                cache-control: '{{request.headers.cache-control}}'\n                x-store-etag: '{{extract.headers.etag}}'\n                x-store-content-type: '{{extract.headers.content-type}}'\n              body: '{{extract.body}}'\n            # With the if-none-hash-match header the storage will return 412\n            # if the content is not changed. In that case, return from the\n            # handler completely, and avoid issuing purges.\n            # Also if we didn't really store anything, return as well.\n            catch:\n              status:\n                - 202\n                - 412\n            return_if:\n              status:\n                - 202\n                - 412\n            return:\n              status: 200\n              headers:\n                etag: '{{extract.headers.etag}}'\n                cache-control: '{{options.response_cache_control}}'\n                content-type: '{{extract.headers.content-type}}'\n              body: '{{extract.body}}'\n        - emit_change_event:\n            request:\n              method: post\n              headers:\n                cache-control: '{{request.headers.cache-control}}'\n              uri: /{domain}/sys/events/\n              body:\n                - meta:\n                    uri: //{request.params.domain}/api/rest_v1/page/summary/{request.params.title}\n            return:\n              status: 200\n              headers:\n                etag: '{{extract.headers.etag}}'\n                cache-control: '{{options.response_cache_control}}'\n                content-type: '{{extract.headers.content-type}}'\n              body: '{{extract.body}}'\n\n      x-monitor: true\n      x-amples:\n        - title: Get summary from storage\n          request:\n            params:\n              domain: en.wikipedia.org\n              title: San_Francisco\n          response:\n            status: 200\n            headers:\n              etag: /.+/\n              content-type: /^application\\/json/\n            body:\n              extract: /.+/\n              extract_html: /.+/\n              thumbnail:\n                source: /^https:/\n              originalimage:\n                source: /^https:/\n              lang: en\n              dir: ltr\n              description: /.+/\n"
		}
	},
	"Error": "parse: parse spec: paths: /summary/{title}: get: operation \"\": responses: 404: content: \"application/problem+json\": schema: parse schema: reference \"#/components/schemas/problem\": resolve reference \"#/components/schemas/problem\": schema not found"
}