{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/sinch/docs"
		},
		"file": {
			"name": "whatsapp-api.yaml",
			"size": 0,
			"path": "docs/whatsapp/api/whatsapp-api.yaml",
			"byteSize": 52986,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: Sinch WhatsApp API\n  version: \"1.0.1\"\n  description: |\n    # Introduction\n      The Sinch WhatsApp Business Messaging API provides a rich, enterprise grade messaging solution for clients who wish to communicate with their customers via WhatsApp.\n\n      With over 1.5bn users globally using WhatsApp regularly to communicate with friends and family, it really does represent the digital extension of the users living room. It’s the inner circle of your customer’s communication so bringing your trusted brand communications to that inner circle has huge potential.\n\n      Integrating the Sinch WhatsApp Business Messaging API with your own backend systems enables Rich, High fidelity, contextual conversations to be established via the WhatsApp channel.\n\n      This API specification covers the range of features available.\n    # Authentication\n      The Sinch WhatsApp API securely authenticates via a bot identifier and bearer token pair. During the initial client on boarding process, these will be provided by your account manager.\n\n      To be able to authenticate the access token needs to be passed. For all WhatsApp end-points it is required to set the bearer token in the authorization HTTP header like: `Authorization: Bearer AbCdEf123456`. Where the string `\"AbCdEf123456\"` is the bearer authorization token.  \n\n    # Opt-In and Outs\n      All Business initiated conversations via the Sinch WhatsApp Business API must start with an “Opt-In” by the user.  This can be collected through any third party.  Eg.  An SMS message, In-Line with a Web Form, In an Email, or even via a deep-link in print media.\n      \n      You can record a opt in by the API call described below and once the “Opt-In” is recorded you’ll be able to message that customer via the Sinch WhatsApp Business API.\n\n      Businesses must provide a method by which customers may opt-out of receiving future messages from your organisation.  The opt-out should be handled using the API call below.\n#####################################################\nservers:\n  - url: https://us1.whatsapp.api.sinch.com\n    description: US Production\n  - url: https://eu1.whatsapp.api.sinch.com\n    description: EU Production\n#####################################################\ntags:\n  - name: Message\n    description: The message endpoint is used as the primary endpoint of the API and this is where all the messages are sent through.\n  - name: Group\n    description: A collection of endpoints used to manage groups that are linked to a specific bot.\n#  - name: Callback\n#    description: There are two different types of callbacks that are being sent back from the Sinch Whats App API. Namely statuses and notifications where statuses are updates on the message being sent, such as delivered, read or failed. Notifications are messages that the end users wants to send back to the bots which the bots can act upon. Please note that the callback section in this documentation is not an endpoint.\n#####################################################\nx-tagGroups:\n  - name: Opt Ins and Outs\n    tags:\n      - Opt In\n      - Opt Out\n  - name: Messages\n    tags: \n      - Message\n      - Group\n\n#  - name: Callbacks\n#    tags:\n#      - Callback\n#####################################################\nsecurity:\n  - bearerAuth: []\n#####################################################\npaths:\n  /whatsapp/v1/{bot-id}/provision/optin:\n    post:\n      tags:\n        - Opt In\n      summary: Opt in numbers to enable the receiving of business messages via Whats App\n      operationId: addOptIns\n      security:\n        - BearerAuth: []\n      parameters:\n        - name: bot-id\n          in: path\n          required: true\n          description: The identifier of the bot that wishes to send messages.\n          schema:\n            type: string\n      requestBody:\n        description: The numbers that you wish to opt in, which allows the current bot to send messages to them.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Optin'\n            example:\n              {\n                \"numbers\": [\n                  \"46732001122\",\n                  \"46732002244\",\n                  \"46732003366\"\n                ]\n              }\n      responses:\n        '200': \n          description: Expected result to a valid request.\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestResponse\"\n              example:\n                {\n                  \"message\": \"Validation error\",\n                  \"reason\": \"Field [numbers] can not be empty.\"\n                }\n        '401':\n          description: Unauthorized bot.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedResponse\"\n  /whatsapp/v1/{bot-id}/provision/optout:\n    post:\n      tags:\n        - Opt Out\n      summary: Opt out numbers to disable the receiving of business messages via Whats App\n      operationId: removeOptIn\n      security:\n        - BearerAuth: []\n      parameters:\n        - name: bot-id\n          in: path\n          required: true\n          description: The identifier of the bot that wishes to send messages.\n          schema:\n            type: string\n      requestBody:\n        description: The numbers that you wish to opt in, which allows the current bot to send messages to them.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Optout'\n            example:\n              {\n                \"numbers\": [\n                  \"46732001122\",\n                  \"46732002244\",\n                  \"46732003366\"\n                ]\n              }\n      responses:\n        '200': \n          description: Expected result to a valid request.\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestResponse\"\n              example:\n                {\n                  \"message\": \"Validation error\",\n                  \"reason\": \"Field [numbers] can not be empty.\"\n                }\n        '401':\n          description: Unauthorized bot.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedResponse\"\n\n  /whatsapp/v1/{bot-id}/messages:\n    post:\n      tags:\n        - Message\n      summary: Send a Whats App message using Sinch Whats App API\n      operationId: sendMessage\n      security:\n        - BearerAuth: []\n      parameters:\n        - name: bot-id\n          in: path\n          required: true\n          description: The identifier of the bot that wishes to send messages.\n          schema:\n            type: string\n      requestBody:\n        description: Message to send\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WhatsAppMessage'\n            examples:\n              TemplateExample:\n                $ref: '#/components/examples/TemplateExample'\n              TextExample:\n                $ref: '#/components/examples/TextExample'\n              ImageExample:\n                $ref: '#/components/examples/ImageExample'\n              DocumentExample:\n                $ref: '#/components/examples/DocumentExample'\n              AudioExample:\n                $ref: '#/components/examples/AudioExample'\n              VideoExample:\n                $ref: '#/components/examples/VideoExample'\n              LocationMessage:\n                $ref: '#/components/examples/LocationExample'\n              ContactsMessage:\n                $ref: '#/components/examples/ContactsExample'\n\n      responses:\n        '201': \n          description: Expected result to a valid request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Receipt\"\n              example:\n                {\n                  \"type\": \"whatsapp\",\n                  \"statuses\": {\n                    \"message_id\": \"f1690238-9c72-49c3-b1c6-b701f8765732\",\n                    \"recipient\": \"+46732001122\",\n                    \"status\": \"success\",\n                    \"state\": \"queued\"\n                  }\n                }\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestResponse\"\n        '401':\n          description: Unauthorized bot.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedResponse\"\n        '503':\n          description: Service unavailable.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceUnavailableResponse\"\n      x-code-samples:\n      - lang: \"Java\"\n        source: \"System.out.println('Hello World');\"\n      - lang: \"Python\"\n        source: \"print('Hello world')\"\n      - lang: \"JavaScript\"\n        source: \"console.log('Hello world');\"\n      callbacks:\n        Callback:\n          '{pre-registered-callback-url}':\n            post:\n              requestBody:\n                description: The returned status updates and notifications from the API.\n                content:\n                  application/json:\n                    schema:\n                      $ref: '#/components/schemas/Callback'\n                    examples:\n                      StatusCallbackExample:\n                        $ref: '#/components/examples/StatusCallbackExample'\n                      NotificationCallbackExample:\n                        $ref: '#/components/examples/NotificationCallbackExample'\n              responses:\n                '200':\n                  description: Your server returns this code if it accepts the callback\n\n  /whatsapp/v1/{bot-id}/groups:\n    get:\n      #List groups\n      tags:\n        - Group\n      summary: List all groups associated with your bot.\n      operationId: listGroups\n      security:\n        - BearerAuth: []\n      parameters:\n        - name: bot-id\n          in: path\n          required: true\n          description: The identifier of the bot that wishes to send messages.\n          schema:\n            type: string\n      responses:\n        '200': \n          description: List of group ids associated with the bot.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListGroupsResponse\"\n        '401':\n          description: Unauthorized bot.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedResponse\"\n        '503':\n          description: Service unavailable.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceUnavailableResponse\"\n    post:\n      #Create Group\n      tags:\n        - Group\n      summary: Create a new group\n      operationId: createGroup\n      security:\n        - BearerAuth: []\n      parameters:\n        - name: bot-id\n          in: path\n          required: true\n          description: The identifier of the bot that wishes to send messages.\n          schema:\n            type: string\n      requestBody:\n        description: Group subject\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GroupSubjectMessage'\n            examples:\n              SubjectExample:\n                $ref: '#/components/examples/GroupSubjectExample'\n      responses:\n        '200': \n          description: Expected result to a valid request.\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestResponse\"\n              examples:\n                MissingSubjectExample:\n                  $ref: '#/components/examples/MissingSubjectExample'\n        '401':\n          description: Unauthorized bot.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedResponse\"\n        '503':\n          description: Service unavailable.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceUnavailableResponse\"\n  /whatsapp/v1/{bot-id}/groups/{group-id}:\n    get: \n      #Get group information\n      tags:\n        - Group\n      summary: List all information associated with the specified group id.\n      operationId: getGroupInformation\n      security:\n        - BearerAuth: []\n      parameters:\n        - name: bot-id\n          in: path\n          required: true\n          description: The identifier of the bot that wishes to send messages.\n          schema:\n            type: string\n        - name: group-id\n          in: path\n          required: true\n          description: The identifier of the group.\n          schema:\n            type: string\n      responses:\n        '200': \n          description: Expected result to a valid request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GroupInformationResponse\"\n        '401':\n          description: Unauthorized bot.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedResponse\"\n        '503':\n          description: Service unavailable.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceUnavailableResponse\"\n    patch:\n      #Update subject\n      tags:\n        - Group\n      summary: Update a groups subject\n      operationId: updateGroupSubject\n      security:\n        - BearerAuth: []\n      parameters:\n        - name: bot-id\n          in: path\n          required: true\n          description: The identifier of the bot that wishes to send messages.\n          schema:\n            type: string\n        - name: group-id\n          in: path\n          required: true\n          description: The identifier of the group.\n          schema:\n            type: string\n      requestBody:\n        description: Group subject\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GroupSubjectMessage'\n            examples:\n              SubjectExample:\n                $ref: '#/components/examples/GroupSubjectExample'\n      responses:\n        '200': \n          description: Expected result to a valid request.\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestResponse\"\n              examples:\n                MissingSubjectExample:\n                  $ref: '#/components/examples/MissingSubjectExample'\n        '401':\n          description: Unauthorized bot.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedResponse\"\n        '503':\n          description: Service unavailable.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceUnavailableResponse\"\n    delete:\n      #Leave group\n      tags:\n        - Group\n      summary: Leave a specified group\n      operationId: leaveGroup\n      security:\n        - BearerAuth: []\n      parameters:\n        - name: bot-id\n          in: path\n          required: true\n          description: The identifier of the bot that wishes to send messages.\n          schema:\n            type: string\n        - name: group-id\n          in: path\n          required: true\n          description: The identifier of the group.\n          schema:\n            type: string\n      responses:\n        '200': \n          description: Expected result to a valid request.\n        '401':\n          description: Unauthorized bot.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedResponse\"\n        '503':\n          description: Service unavailable.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceUnavailableResponse\"\n  /whatsapp/v1/{bot-id}/groups/{group-id}/member:\n    delete:\n      #Remove group member\n      tags:\n        - Group\n      summary: Remove group members\n      operationId: removeGroupMembers\n      security:\n        - BearerAuth: []\n      parameters:\n        - name: bot-id\n          in: path\n          required: true\n          description: The identifier of the bot that wishes to send messages.\n          schema:\n            type: string\n        - name: group-id\n          in: path\n          required: true\n          description: The identifier of the group.\n          schema:\n            type: string\n      requestBody:\n        description: List of group members to be removed\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NumberListMessage'\n            examples:\n              NumberListExample:\n                $ref: '#/components/examples/NumberListExample'\n      responses:\n        '200': \n          description: Expected result to a valid request.\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestResponse\"\n              examples:\n                MissingSubjectExample:\n                  $ref: '#/components/examples/MissingNumbersExample'\n        '401':\n          description: Unauthorized bot.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedResponse\"\n        '503':\n          description: Service unavailable.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceUnavailableResponse\"\n  /whatsapp/v1/{bot-id}/groups/{group-id}/icon:\n    post:\n      #Set group icon\n      summary: Update group icon\n      operationId: updateGroupIcon\n      security:\n        - BearerAuth: []\n      parameters:\n        - name: bot-id\n          in: path\n          required: true\n          description: The identifier of the bot that wishes to send messages.\n          schema:\n            type: string\n        - name: group-id\n          in: path\n          required: true\n          description: The identifier of the group.\n          schema:\n            type: string\n      requestBody:\n        description: Url of photo to be used as group icon.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UrlMessage'\n            examples:\n              SubjectExample:\n                $ref: '#/components/examples/UrlMessageExample'\n      responses:\n        '200': \n          description: Expected result to a valid request.\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestResponse\"\n              examples:\n                MissingSubjectExample:\n                  $ref: '#/components/examples/MissingUrlExample'\n        '401':\n          description: Unauthorized bot.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedResponse\"\n        '503':\n          description: Service unavailable.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceUnavailableResponse\"\n  /whatsapp/v1/{bot-id}/groups/{group-id}/admin:\n    post:\n      #Add group admins\n      tags:\n        - Group\n      summary: Add admins to the specified group\n      operationId: addGroupAdmins\n      security:\n        - BearerAuth: []\n      parameters:\n        - name: bot-id\n          in: path\n          required: true\n          description: The identifier of the bot that wishes to send messages.\n          schema:\n            type: string\n        - name: group-id\n          in: path\n          required: true\n          description: The identifier of the group.\n          schema:\n            type: string\n      requestBody:\n        description: List of admins to be added to the group\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NumberListMessage'\n            examples:\n              NumberListExample:\n                $ref: '#/components/examples/NumberListExample'\n      responses:\n        '200': \n          description: Expected result to a valid request.\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestResponse\"\n              examples:\n                MissingSubjectExample:\n                  $ref: '#/components/examples/MissingNumbersExample'\n        '401':\n          description: Unauthorized bot.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedResponse\"\n        '503':\n          description: Service unavailable.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceUnavailableResponse\"\n    delete:\n      #Remove group admins\n      tags:\n        - Group\n      summary: Remove admins from the specified group\n      operationId: removeGroupAdmins\n      security:\n        - BearerAuth: []\n      parameters:\n        - name: bot-id\n          in: path\n          required: true\n          description: The identifier of the bot that wishes to send messages.\n          schema:\n            type: string\n        - name: group-id\n          in: path\n          required: true\n          description: The identifier of the group.\n          schema:\n            type: string\n      requestBody:\n        description: List of admins to be removed from the group\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NumberListMessage'\n            examples:\n              NumberListExample:\n                $ref: '#/components/examples/NumberListExample'\n      responses:\n        '200': \n          description: Expected result to a valid request.\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestResponse\"\n              examples:\n                MissingSubjectExample:\n                  $ref: '#/components/examples/MissingNumbersExample'\n        '401':\n          description: Unauthorized bot.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedResponse\"\n        '503':\n          description: Service unavailable.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceUnavailableResponse\"\n  /whatsapp/v1/{bot-id}/groups/{group-id}/invite:\n    get:\n      #Get group invite\n      tags:\n        - Group\n      summary: Grab a valid group invite link to the specified group.\n      operationId: getGroupInvite\n      security:\n        - BearerAuth: []\n      parameters:\n        - name: bot-id\n          in: path\n          required: true\n          description: The identifier of the bot that wishes to send messages.\n          schema:\n            type: string\n        - name: group-id\n          in: path\n          required: true\n          description: The identifier of the group.\n          schema:\n            type: string\n      responses:\n        '200': \n          description: Expected result to a valid request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GroupInviteResponse\"\n        '401':\n          description: Unauthorized bot.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedResponse\"\n        '503':\n          description: Service unavailable.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceUnavailableResponse\"\n    delete:\n      #Delete group invite\n      tags:\n        - Group\n      summary: Delete the active group invite link.\n      operationId: deleteGroupInvite\n      security:\n        - BearerAuth: []\n      parameters:\n        - name: bot-id\n          in: path\n          required: true\n          description: The identifier of the bot that wishes to send messages.\n          schema:\n            type: string\n        - name: group-id\n          in: path\n          required: true\n          description: The identifier of the group.\n          schema:\n            type: string\n      responses:\n        '200': \n          description: Expected result to a valid request.\n        '401':\n          description: Unauthorized bot.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedResponse\"\n        '503':\n          description: Service unavailable.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceUnavailableResponse\"\ncomponents:\n  schemas:\n    GroupSubjectMessage:\n      description: Message containing group subject.\n      type: object\n      required:\n        - subject\n      properties:\n        subject:\n          description: Group subject as a string.\n          type: string\n    GroupInformationResponse:\n      description: Message containing information about a group.\n      type: object\n      required:\n        - admins\n        - creation_time\n        - creator\n        - members\n        - subject\n      properties:\n        admins:\n          description: Array containing all admins of the group.\n          type: array\n          items:\n            type: string\n        creation_time:\n          description: Creation time of the group.\n          type: string\n        creator:\n          description: Number of the creator of the group.\n          type: string\n        members:\n          description: Array containing all members of the group.\n          type: array\n          items:\n            type: string\n        subject:\n          description: Subject of the group\n          type: string\n      example:\n        admins: [\"0732000000\", \"0732001122\"]\n        creator: \"0732000000\"\n        members: [\"0732001122\"]\n        subject: \"Sinch WhatsApp Group\"\n        creation_time: \"2019-08-09T09:25:32.000Z\"\n    ListGroupsResponse:\n      description: Response containing a list of group ids associated with the bot.\n      type: object\n      required:\n        - groups\n      properties:\n        groups:\n          description: Array of group ids that are associated to the given bot.\n          type: array\n          items: \n            type: string\n      example:\n        groups: [\"group:447506616260-1565342732\"]\n    NumberListMessage:\n      description: Message containing a list of numbers\n      type: object\n      required:\n        - numbers\n      properties:\n        numbers:\n          description: Array of phone numbers (msisdns).\n          type: array\n          items:\n            type: string\n    UrlMessage:\n      description: Message containing a url link to a image resource\n      type: object\n      required:\n        - url\n      properties:\n        url:\n          description: Valid url to a image resource\n          type: string\n    GroupInviteResponse:\n      description: A response containing an active invite link to a WhatsApp group.\n      type: object\n      required:\n        - invite_link\n      properties:\n        invite_link:\n          type: string\n      example:\n        invite_link: \"https://chat.whatsapp.com/xyz123\"\n    Optin:\n      description: a\n      type: object\n      required:\n        - numbers\n      properties:\n        numbers:\n          description: Array of phone numbers (msisdns).\n          type: array\n          items:\n            type: string\n          minItems: 1\n          maxItems: 20\n    Optout:\n      description: a\n      type: object\n      required:\n        - numbers\n      properties:\n        numbers:\n          description: Array of phone numbers (msisdns).\n          type: array\n          items:\n            type: string\n          minItems: 1\n          maxItems: 20\n    Callback:\n      description: a object containing callback information from the Sinch Whats App API.\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n          - whatsapp\n          example: whatsapp\n        notifications:\n          description: Array of notification objects. These are responses that the users send back which the bot can act upon.\n          type: array\n          items:\n            $ref: '#/components/schemas/Notification'\n        statuses:\n          description: Array of status updates. Such as delivered/read events.\n          type: array\n          items:\n            $ref: '#/components/schemas/Status'\n      example:\n        {\n          \"statuses\": [\n            {\n              \"message_id\": \"asd8gdf-asdqweq-89aasmn\",\n              \"recipient\": \"+46732001122\",\n              \"status\": \"success | failure\",\n              \"state\": \"queued | dispatched | sent | delivered | read | failed | no_opt_in | no_capability\"\n            }\n          ],\n          \"notifications\": [\n            {\n              \"from\": \"0732001122\",\n              \"message_id\": \"asd82fv-asd35eq-55bcyf\",\n              \"message\": {\n                \"type\": \"text\",\n                \"body\": \"Hey bot, how are you?\"\n              }\n            }\n          ]\n        } \n\n    Notification:\n      type: object\n      properties:\n        from:\n          type: string\n          description: The originator of this message\n          example: \"0732001122\"\n        in_group:\n          type: string\n          description: The group id if the message was sent in a group\n        message_id:\n          type: string\n          description: Generated message id for this notification\n          example: \"asd8gdf-asdqweq-89aasmn\"\n        message:\n          type: object\n          $ref: '#/components/schemas/NotificationContent'\n        to:\n          type: string\n          description: The bot receiving this notification\n          example: \"sinchbot\"\n    NotificationContent:\n      discriminator:\n        propertyName: type\n        mapping:\n          text: '#/components/schemas/NotificationTextMessage'\n          location: '#/components/schemas/NotificationLocationMessage'\n          contacts: '#/components/schemas/NotificationContactsMessage'\n          image: '#/components/schemas/NotificationImageMessage'\n          document: '#/components/schemas/NotificationDocumentMessage'\n          audio: '#/components/schemas/NotificationAudioMessage'\n          video: '#/components/schemas/NotificationVideoMessage'\n          voice: '#/components/schemas/NotificationVoiceMessage'\n          group_event: '#/components/schemas/NotificationGroupEventMessage' \n      required:\n        - type\n      properties:\n        type:\n          type: object\n          $ref: '#/components/schemas/MessageType'\n    NotificationTextMessage:\n      type: object\n      required:\n        - type\n        - body\n      properties:\n        type:\n          $ref: '#/components/schemas/MessageType'\n          example: text\n        body:\n          type: string\n          description: The text of the text message\n          example: \"Hello Bot\"\n    NotificationLocationMessage:\n      type: object\n      required:\n        - type\n        - latitude\n        - longitude\n      properties:\n        type:\n          $ref: '#/components/schemas/MessageType'\n          example: location\n        latitude:\n          type: number\n          minimum: -90\n          maximum: 90\n          example: 55.7047\n        longitude:\n          type: number\n          minimum: -180\n          maximum: 180\n          example: 13.1910\n        name:\n          description: The name for the location. Will be displayed in the message.\n          type: string\n          example: Sinch Ideon Lund\n        address:\n          description: The address for the location. Will be displayed in the message.\n          type: string\n          example: Scheelevägen 17b\n        url:\n          description: Optional url for the location.\n          type: string\n          example: www.sinch.com\n    NotificationContactsMessage:\n      type: object\n      required:\n        - type\n        - contacts\n      properties:\n        type:\n          $ref: '#/components/schemas/MessageType'\n          example: contacts\n        contacts:\n          type: array\n          items:\n            $ref: '#/components/schemas/ContactCard'\n    NotificationAudioMessage:\n      type: object\n      required:\n      - type\n      - url\n      - mime_type\n      properties:\n        type:\n          $ref: '#/components/schemas/MessageType'\n          example: audio\n        url:\n          type: string\n          description: The url where to download the media file from.\n        mime_type:\n          type: string\n          description: The mime type of this file.\n        caption:\n          type: string\n          description: Optional description of this resource.\n        filename:\n          type: string\n          description: Optional filename on the sender's device.\n    NotificationDocumentMessage:\n      type: object\n      required:\n      - type\n      - url\n      - mime_type\n      properties:\n        type:\n          $ref: '#/components/schemas/MessageType'\n          example: document\n        url:\n          type: string\n          description: The url where to download the media file from.\n        mime_type:\n          type: string\n          description: The mime type of this file.\n        caption:\n          type: string\n          description: Optional description of this resource.\n        filename:\n          type: string\n          description: Optional filename on the sender's device.\n    NotificationImageMessage:\n      type: object\n      required:\n      - type\n      - url\n      - mime_type\n      properties:\n        type:\n          $ref: '#/components/schemas/MessageType'\n          example: image\n        url:\n          type: string\n          description: The url where to download the media file from.\n        mime_type:\n          type: string\n          description: The mime type of this file.\n        caption:\n          type: string\n          description: Optional description of this resource.\n    NotificationVideoMessage:\n      type: object\n      required:\n      - type\n      - url\n      - mime_type\n      properties:\n        type:\n          $ref: '#/components/schemas/MessageType'\n          example: video\n        url:\n          type: string\n          description: The url where to download the media file from.\n        mime_type:\n          type: string\n          description: The mime type of this file.\n        caption:\n          type: string\n          description: Optional description of this resource.\n    NotificationVoiceMessage:\n      type: object\n      required:\n      - type\n      - url\n      - mime_type\n      properties:\n        type:\n          $ref: '#/components/schemas/MessageType'\n          example: voice\n        url:\n          type: string\n          description: The url where to download the media file from.\n        mime_type:\n          type: string\n          description: The mime type of this file.\n        caption:\n          type: string\n          description: Optional description of this resource.\n    NotificationGroupEvent:\n      type: object\n      required:\n        - type\n        - event_type\n        - in_group\n      properties:\n        type:\n          $ref: '#/components/schemas/MessageType'\n          example: group_event\n        event_type:\n          type: string\n          description: Type of group event.\n        body:\n          type: string\n          description: Description of event.\n        in_group:\n          type: string\n          description: Group id of group that the event occured in.\n        members:\n          type: array\n          items:\n            type: string\n          description: Array of member numbers.\n\n    Status:\n      type: object\n      properties:\n        message_id:\n          type: string\n        recipient:\n          type: string\n        status:\n          type: string\n          enum:\n          - success\n          - failure\n        state:\n          type: string\n          enum:\n          - queued\n          - dispatched\n          - sent\n          - delivered\n          - read\n          - deleted\n          - no_capability\n          - no_opt_in\n          - failed\n\n    MessageContent:\n      discriminator:\n        propertyName: type\n        mapping:\n          template: '#/components/schemas/TemplateMessage'\n          text: '#/components/schemas/TextMessage'\n          image: '#/components/schemas/ImageMessage'\n          document: '#/components/schemas/DocumentMessage'\n          audio: '#/components/schemas/AudioMessage'\n          video: '#/components/schemas/VideoMessage'\n          location: '#/components/schemas/LocationMessage'\n          contacts: '#/components/schemas/ContactsMessage'\n      required:\n        - type\n      properties:\n        type:\n          type: object\n          $ref: '#/components/schemas/MessageType'\n\n    MessageType:\n      type: string\n      enum:\n      - template\n      - text\n      - location\n      - contacts\n      - image\n      - document\n      - audio\n      - video\n      - voice \n      - group_event\n    WhatsAppMessage:\n      required:\n        - to\n        - message\n      properties:\n        to:\n          description: Array of phone numbers (msisdns) or group ids.  Required.\n          type: array\n          items:\n            type: string\n          minItems: 1\n          maxItems: 20\n        message:\n          type: object\n          $ref: '#/components/schemas/MessageContent'\n      example:\n        {\n          \"to\": [\"0732001122\", \"group:447506616260-1565342732\"],\n          \"message\": {\n            \"type\": \"text\",\n            \"text\": \"Greetings from the Sinch WhatsApp API!\"\n          }\n        }\n    ChannelType:\n      type: string\n      enum:\n      - whatsapp\n    Receipt:\n      required:\n        - type\n      properties:\n        type:\n          type: object\n          $ref: '#/components/schemas/ChannelType'\n        statuses:\n          type: object\n          $ref: '#/components/schemas/Status'\n        notifications:\n          type: object\n          $ref: '#/components/schemas/Notification'\n    TemplateMessage:\n      required:\n        - type\n        - template_name\n      properties:\n        type:\n          $ref: '#/components/schemas/MessageType'\n          example: template\n        template_name:\n          description: Name of the template. This has to be registered before hand.\n          type: string\n          example: personal_greeting\n        language:\n          description: Fallback language if the template message is not available in the user's language/locale setting on the device. Accepts both language and language_locale formats (e.g., en and en_US)\n        params:\n          description: An array holding each string parameter that will be injected into the specified template. Required if the refered template contains variables.\n          type: array\n          items: \n            type: string\n          example: [\"John Doe\"]\n        ttl:\n          description: Time to live of the template message. If the receiver has not opened the template message before the time to live expires, the message will be deleted and a failed callback will be sent. The time to live can be specified in ISO-8601 Duration format or in seconds as a string.\n          type: string\n          example: \"P1D\"\n    TextMessage:\n      required:\n        - type\n        - text\n      properties:\n        type:\n          $ref: '#/components/schemas/MessageType'\n          example: text\n        text:\n          description: The actual text body.  Required.\n          type: string\n          example: Hey from the Sinch WhatsApp API\n        preview_url: \n          type: boolean\n          description: Boolean value to determine if a supplied url link will be previewed in the text message\n          example: true\n    ImageMessage:\n      required:\n        - type\n        - url\n      properties:\n        type:\n          $ref: '#/components/schemas/MessageType'\n          example: image\n        url:\n          description: The url to the image (jpg | jpeg | png).\n          type: string\n          example: www.example.com/image.jpg\n        caption:\n          description: Optional caption that will be displayed underneath the image.\n          type: string\n          example: This is an caption for an example image.\n    DocumentMessage:\n      required:\n        - type\n        - url\n      properties:\n        type:\n          $ref: '#/components/schemas/MessageType'\n          example: document\n        url:\n          description: The url to the document (pdf).\n          type: string\n          example: www.example.com/document.pdf\n        caption:\n          description: Optional caption that will be displayed as the document title.\n          type: string\n          example: Super fascinating document.\n        filename:\n          description: The optional filename for the specific document.\n          type: string\n          example: document.pdf\n    AudioMessage:\n      required:\n        - type\n        - url\n      properties:\n        type:\n          $ref: '#/components/schemas/MessageType'\n          example: audio\n        url:\n          description: The url to the audio file (mp3).\n          type: string\n          example: www.example.com/song.mp3\n    VideoMessage:\n      required:\n        - type\n        - url\n      properties:\n        type:\n          $ref: '#/components/schemas/MessageType'\n          example: video\n        url:\n          description: The url to the video file (mp4).\n          type: string\n          example: www.example.com/video.mp4\n    LocationMessage:\n      required:\n        - type\n        - lat\n        - lng\n      properties:\n        type:\n          $ref: '#/components/schemas/MessageType'\n          example: location\n        lat:\n          description: The latitude position as a float number.\n          type: number\n          minimum: -90\n          maximum: 90\n          example: 55.7047\n        lng:\n          description: The longitude position as a float number.\n          type: number\n          minimum: -180\n          maximum: 180\n          example: 13.1910\n        name:\n          description: The name for the location. Will be displayed in the message.\n          type: string\n          example: Sinch Ideon Lund\n        address:\n          description: The address for the location. Will be displayed in the message.\n          type: string\n          example: Scheelevägen 17b\n    ContactsMessage:\n      required:\n        - type\n        - contacts\n      properties:\n        type:\n          $ref: '#/components/schemas/MessageType'\n          example: contacts\n        contacts:\n          type: array\n          items:\n            $ref: '#/components/schemas/ContactCard'\n    ContactCard:\n      required:\n        - name\n      properties:\n        addresses:\n          type: array\n          items:\n            $ref: '#/components/schemas/ContactCardAddress'\n        birthday:\n          type: string\n        emails:\n          type: array\n          items:\n            $ref: '#/components/schemas/ContactCardEmail'\n        name:\n          $ref: '#/components/schemas/ContactCardName'\n        org:\n          $ref: '#/components/schemas/ContactCardOrganization'\n        phones:\n          type: array\n          items:\n            $ref: '#/components/schemas/ContactCardPhone'\n        urls:\n          type: array\n          items:\n            $ref: '#/components/schemas/ContactCardUrl'\n    ContactCardAddress:\n      required:\n        - city\n      properties:\n        city:\n          type: string\n          example: Lund\n        country:\n          type: string\n          example: Sweden\n        country_code:\n          type: string\n          example: SE\n        state:\n          type: string\n          example: Skåne\n        street:\n          type: string\n          example: Scheelevägen 17b\n        type:\n          type: string\n          example: WORK\n        zip:\n          type: string\n          example: 223 63\n    ContactCardEmail:\n      required:\n        - email\n      properties:\n        email:\n          type: string\n          example: john.doe@sinch.com\n        type:\n          type: string\n          example: WORK\n    ContactCardName:\n      required:\n        - formatted_name\n      properties:\n        first_name:\n          type: string\n          example: John\n        last_name:\n          type: string\n          example: Doe\n        formatted_name:\n          type: string\n          example: John Doe\n    ContactCardOrganization:\n      required:\n        - company\n      properties:\n        company:\n          type: string\n          example: Sinch Communications\n        department:\n          type: string\n          example: R\u0026D\n        title:\n          type: string\n          example: Manager\n    ContactCardPhone:\n      required:\n        - phone\n      properties:\n        phone:\n          type: string\n          example: 0732001122\n        type:\n          type: string\n          example: WORK\n        wa_id:\n          type: string\n          example: 0732001122\n    ContactCardUrl:\n      required:\n        - url\n      properties:\n        url:\n          type: string\n          example: www.sinch.com\n        type:\n          type: string\n          example: WORK\n          \n    BadRequestResponse:\n      properties:\n        title:\n          type: string\n        reason:\n          type: string\n      example:\n        message: \"Validation error\"\n        reason: \"Field [to] can not be empty.\"\n    UnauthorizedResponse:\n      properties:\n        title:\n          type: string\n        reason:\n          type: string\n      example:\n        message: \"401\"\n        reason: \"Unauthorized bot\"        \n    InternalServerErrorResponse:\n      properties:\n        title:\n          type: string\n        reason:\n          type: string\n      example:\n        message: \"500\"\n        reason: \"Internal server error\"\n    ServiceUnavailableResponse:\n      properties:\n        title:\n          type: string\n        reason:\n          type: string\n      example:\n        message: \"503\"\n        reason: \"Internal service not available, request could not be handled\"\n  examples:\n    TextExample:\n      summary: Text Message\n      value: {\n          \"to\": [\n              \"46732001122\", \"group:447506616260-1565342732\"\n          ],\n          \"message\": {\n              \"type\": \"text\",\n              \"text\": \"Greetings from Sinch\"\n          }\n      }\n    ImageExample:\n      summary: Image Message\n      value: {\n        \"to\": [\n            \"46732001122\", \"group:447506616260-1565342732\"\n        ],\n        \"message\": {\n          \"type\": \"image\",\n          \"url\": \"https://example.com/image.jpg\",\n          \"caption\": \"Example Image\"\n        }\n      }\n    DocumentExample:\n      summary: Document Message\n      value: {\n        \"to\": [\n            \"46732001122\", \"group:447506616260-1565342732\"\n        ],\n        \"message\": {\n          \"type\": \"document\",\n          \"url\": \"https://example.com/document.pdf\",\n          \"caption\": \"Example study\",\n          \"filename\": \"document.pdf\"\n        }\n      }\n    AudioExample:\n      summary: Audio Message\n      value: {\n        \"to\": [\n            \"46732001122\", \"group:447506616260-1565342732\"\n        ],\n        \"message\": {\n          \"type\": \"audio\",\n          \"url\": \"https://example.com/song.mp3\"\n        }\n      }\n    VideoExample:\n      summary: Video Message\n      value: {\n        \"to\": [\n            \"46732001122\", \"group:447506616260-1565342732\"\n        ],\n        \"message\": {\n          \"type\": \"video\",\n          \"url\": \"https://example.com/video.mp4\"\n        }\n      }\n    TemplateExample:\n      summary: Template Message\n      value: {\n        \"to\": [\n            \"46732001122\", \"group:447506616260-1565342732\"\n        ],\n        \"message\": {\n          \"type\": \"template\",\n          \"template_name\": \"sinch_test_greeting\",\n          \"params\": [\n            \"Nick\"\n          ],\n          \"ttl\": \"P1D\"\n        }\n      }\n    LocationExample:\n      summary: Location Message\n      value: {\n        \"to\": [\n            \"46732001122\", \"group:447506616260-1565342732\"\n        ],\n        \"message\": {\n          \"type\": \"location\",\n          \"lat\": 55.7047,\n          \"lng\":13.1910,\n          \"name\": \"Sinch Ideon Lund\",\n          \"address\": \"Scheelevägen 17\"\n        }\n      }\n    ContactsExample:\n      summary: Contact Cards Message\n      value: {\n        \"to\": [\n            \"46732001122\", \"group:447506616260-1565342732\"\n        ],\n        \"message\": {\n          \"type\": \"contacts\",\n          \"contacts\": [\n                    {\n                        \"addresses\": [\n                            {\n                                \"city\": \"Menlo Park\",\n                                \"country\": \"United States\",\n                                \"country_code\": \"us\",\n                                \"state\": \"CA\",\n                                \"street\": \"1 Hacker Way\",\n                                \"type\": \"HOME\",\n                                \"zip\": \"94025\"\n                            }\n                        ],\n                        \"birthday\": \"2012-08-18\",\n                        \"emails\": [\n                            {\n                                \"email\": \"test@fb.com\",\n                                \"type\": \"WORK\"\n                            }\n                        ],\n                        \"name\": {\n                            \"first_name\": \"John\",\n                            \"formatted_name\": \"John Smith\",\n                            \"last_name\": \"Smith\"\n                        },\n                        \"org\": {\n                            \"company\": \"WhatsApp\",\n                            \"department\": \"Design\",\n                            \"title\": \"Manager\"\n                        },\n                        \"phones\": [\n                            {\n                                \"phone\": \"+1 (650) 555-1234\",\n                                \"type\": \"WORK\",\n                                \"wa_id\": \"16505551234\"\n                            }\n                        ],\n                        \"urls\": [\n                            {\n                                 \"url\": \"https://www.facebook.com\",\n                                 \"type\": \"WORK\"\n                            }\n                        ]\n                    }\n                ]\n        }\n      }\n    StatusCallbackExample:\n      summary: Message status callback\n      value: {\n        \"statuses\": [\n          {\n            \"message_id\": \"asd8gdf-asdqweq-89aasmn\",\n            \"recipient\": \"+46732001122\",\n            \"status\": \"success | failure\",\n            \"state\": \"queued | dispatched | sent | delivered | read | failed | no_opt_in | no_capability\"\n          }\n        ]\n      } \n    NotificationCallbackExample:\n      summary: Text notification message callback\n      value: {\n        \"notifications\": [\n          {\n            \"from\": \"0732001122\",\n            \"message_id\": \"asd82fv-asd35eq-55bcyf\",\n            \"message\": {\n              \"type\": \"text\",\n              \"body\": \"Hey bot, how are you?\"\n            },\n            \"to\": \"sinchbot\"\n          }\n        ]\n      } \n\n    GroupSubjectExample:\n      summary: Group subject message\n      value: {\n        \"subject\": \"Sinch WhatsApp Team Group\"\n      }\n    NumberListExample:\n      summary: List of numbers\n      value: {\n        \"numbers\": [\n            \"0732001122\",\n            \"0732002244\",\n            \"0732003366\"\n        ]\n      }\n    UrlMessageExample:\n      summary: Url to a image resource\n      value: {\n        \"url\": \"https://www.example.com/group_icon.jpg\"\n      }\n\n    MissingSubjectExample:\n      value: {\n        \"message\": \"Validation error\",\n        \"reason\": \"Field [subject] can not be empty\"\n      }\n    MissingNumbersExample:\n      value: {\n        \"message\": \"Validation error\",\n        \"reason\": \"Field [numbers] can not be empty\"\n      }\n    MissingUrlExample:\n      value: {\n        \"message\": \"Validation error\",\n        \"reason\": \"Field [url] can not be empty\"\n      }\n  \n  securitySchemes:\n    BearerAuth:            # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n\n"
		}
	},
	"Error": "parse: parse spec: paths: /whatsapp/v1/{bot-id}/groups: get: operation \"listGroups\": security: parse global security: unknown security schema \"bearerAuth\""
}