{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/strawpoll-com/strawpoll-api-v3"
		},
		"file": {
			"name": "strawpoll_v3.yml",
			"size": 0,
			"path": "openapi/strawpoll_v3.yml",
			"byteSize": 33366,
			"content": "openapi: 3.1.0\ninfo:\n  title: StrawPoll API\n  description: 'This is the official StrawPoll API. If you have any questions or suggestions, feel free to contact support@strawpoll.com.'\n  contact:\n    email: support@strawpoll.com\n    name: StrawPoll Support\n    url: 'https://strawpoll.com/contact/'\n    x-twitter: strawpoll_com\n  version: 3.1.0\n  termsOfService: 'https://strawpoll.com/terms/'\n  license:\n    name: CC BY SA 4.0\n    url: 'https://creativecommons.org/licenses/by-sa/4.0/'\n  x-logo:\n    url: 'https://strawpoll.com/images/strawpoll/strawpoll.png'\n  x-providerName: StrawPoll\nexternalDocs:\n  description: StrawPoll Help Center\n  url: 'https://strawpoll.com/help/'\nservers:\n  - url: 'https://api.strawpoll.com/v3'\n    description: API endpoint\ntags:\n  - name: Polls\n    description: Poll related endpoints\n  - name: Current user\n    description: Current user related endpoints\n  - name: Users\n    description: User related endpoints\n  - name: Comments\n    description: Comment related endpoints\n  - name: Media\n    description: Media related endpoints\npaths:\n  /users/@me:\n    get:\n      operationId: GetCurrentUser\n      description: Get the current user.\n      tags:\n        - Current user\n      responses:\n        '200':\n          description: Returns the User object for the current user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n    patch:\n      operationId: UpdateCurrentUser\n      description: Applies a partial update to the current user.\n      tags:\n        - Current user\n      requestBody:\n        description: Submit a  partial  User object to update the corresponding fields (see examples below).\n        content:\n          application/json:\n            schema:\n              anyOf:\n                - type: object\n                  properties:\n                    displayname:\n                      type: string\n                      example: John Doe\n                - type: object\n                  properties:\n                    user_meta:\n                      type: object\n                      properties:\n                        about:\n                          type: string\n                          example: A brief description for your public profile.\n      responses:\n        '200':\n          description: Returns the updated User object for the current user on success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n  /users/@me/polls:\n    get:\n      operationId: ListCurrentUserPolls\n      description: Returns a list of polls related to the current user as well as pagination information.\n      tags:\n        - Current user\n      parameters:\n        - name: type\n          in: query\n          description: created or participated\n          required: true\n          style: form\n          explode: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns a list of Poll objects related to the current user as well as pagination information.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Poll'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n  /users/@me/activities:\n    get:\n      operationId: ListCurrentUserActivities\n      description: Returns a list of activities for the current user as well as pagination information.\n      tags:\n        - Current user\n      responses:\n        '200':\n          description: Returns a list of UserActivity objects related to the current user\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/UserActivity'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n  '/users/{user_id}':\n    get:\n      operationId: GetUser\n      description: Get the PublicUser object for a given user id.\n      tags:\n        - Users\n      parameters:\n        - name: user_id\n          in: path\n          description: The user id of a user.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns the User object for the given user id.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n  '/users/{user_id}/polls':\n    get:\n      operationId: GetUserPolls\n      description: Returns a list of polls related to the given user id as well as pagination information.\n      tags:\n        - Users\n      parameters:\n        - name: user_id\n          in: path\n          description: user id\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: type\n          in: query\n          description: created or participated\n          required: true\n          style: form\n          explode: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns a list of Poll objects related to the given user id as well as pagination information.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Poll'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n  /upload:\n    post:\n      operationId: uploadFile\n      tags:\n        - Media\n      description: Create a media object by uploading a file.\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Upload'\n      responses:\n        '201':\n          description: Returns the uploaded media object on success.\n  /media:\n    post:\n      operationId: createMedia\n      tags:\n        - Media\n      description: Create a media object by submitting an external file.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Media'\n        required: true\n      responses:\n        '201':\n          description: Returns the submitted media object on success.\n  '/media/{media_id}':\n    get:\n      operationId: getMedia\n      description: Get the Media object for a given media id.\n      tags:\n        - Media\n      parameters:\n        - name: media_id\n          in: path\n          description: media id\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns the media object for a given ID.\n    put:\n      operationId: updateMedia\n      description: Update a media file by passing a Media object.\n      tags:\n        - Media\n      parameters:\n        - name: media_id\n          in: path\n          description: media id\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Media'\n        required: true\n      responses:\n        '200':\n          description: Returns the updated media object on success.\n    delete:\n      operationId: deleteMedia\n      description: Deletes a specific media file.\n      tags:\n        - Media\n      parameters:\n        - name: media_id\n          in: path\n          description: media id\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Returns an empty response on success.\n  /polls:\n    post:\n      operationId: createPoll\n      tags:\n        - Polls\n      description: Create a poll by passing a poll object.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Poll'\n        required: true\n      responses:\n        '201':\n          description: Returns the created Poll object on success.\n        '400':\n          description: Bad input parameters\n        '500':\n          description: Server error\n      security:\n        - ApiKeyAuth:\n            - user\n  '/polls/{poll_id}':\n    get:\n      operationId: getPoll\n      tags:\n        - Polls\n      description: Get a Poll object for a given poll id.\n      parameters:\n        - name: poll_id\n          in: path\n          description: poll id\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: search results matching criteria\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Poll'\n    put:\n      operationId: updatePoll\n      tags:\n        - Polls\n      description: Update a poll by passing a Poll object.\n      parameters:\n        - name: poll_id\n          in: path\n          description: poll id\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Poll'\n        required: true\n      responses:\n        '200':\n          description: Returns the updated Poll object on success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Poll'\n    delete:\n      operationId: deletePoll\n      description: Delete a poll for a given poll id.\n      tags:\n        - Polls\n      parameters:\n        - name: poll_id\n          in: path\n          description: poll id\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Returns an empty response on success.\n  '/polls/{poll_id}/results':\n    get:\n      operationId: getPollResults\n      description: Get the poll results for a given poll id.\n      tags:\n        - Polls\n      parameters:\n        - name: poll_id\n          in: path\n          description: poll id\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: results\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PollResults'\n    delete:\n      operationId: deletePollResults\n      description: Reset a poll by deleting the results for a given poll id. The deadline also gets reset.\n      tags:\n        - Polls\n      parameters:\n        - name: poll_id\n          in: path\n          description: poll id\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Returns an empty response on success.\n  '/polls/{poll_id}/comments':\n    get:\n      operationId: getPollComments\n      description: Returns a list of comments related to the given poll id.\n      tags:\n        - Polls\n      parameters:\n        - name: poll_id\n          in: path\n          description: poll id\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: results\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Comment'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n  /comments:\n    post:\n      operationId: createComment\n      description: Create a comment by passing a Comment object.\n      tags:\n        - Comments\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Comment'\n        required: true\n      responses:\n        '201':\n          description: Returns the created comment object on success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n  '/comments/{comment_id}':\n    get:\n      operationId: getComment\n      description: Get the comment object for a given comment id.\n      tags:\n        - Comments\n      parameters:\n        - name: comment_id\n          in: path\n          description: The ID of a comment\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns the comment object for a given ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n    put:\n      operationId: updateComment\n      description: Update a comment by passing a Comment object.\n      tags:\n        - Comments\n      parameters:\n        - name: comment_id\n          in: path\n          description: The ID of a comment\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Comment'\n        required: true\n      responses:\n        '200':\n          description: Returns the updated comment object on success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n    delete:\n      operationId: deleteComment\n      description: Delete a comment for a given comment in.\n      tags:\n        - Comments\n      parameters:\n        - name: comment_id\n          in: path\n          description: The ID of a comment\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Successfully deleted comment\ncomponents:\n  schemas:\n    Poll:\n      required:\n        - poll_options\n        - title\n        - type\n      type: object\n      properties:\n        id:\n          type: string\n          readOnly: true\n          example: NPgxkzPqrn2\n        title:\n          type: string\n          example: What type of content do you want to see more of in the future?\n        user:\n          $ref: '#/components/schemas/PublicUser'\n        media:\n          $ref: '#/components/schemas/Media'\n        poll_options:\n          type: array\n          items:\n            anyOf:\n              - $ref: '#/components/schemas/TextPollOption'\n              - $ref: '#/components/schemas/ImagePollOption'\n              - $ref: '#/components/schemas/DatePollOption'\n              - $ref: '#/components/schemas/TimeRangePollOption'\n        poll_config:\n          $ref: '#/components/schemas/PollConfig'\n        poll_meta:\n          $ref: '#/components/schemas/PollMeta'\n        type:\n          type: string\n          enum:\n            - multiple_choice\n            - meeting\n            - ranked_choice\n        version:\n          type: string\n          format: uuid\n          readOnly: true\n        created_at:\n          type: integer\n          format: int64\n          readOnly: true\n          example: 1649671274\n        updated_at:\n          type: integer\n          format: int64\n          nullable: true\n          readOnly: true\n          example: 1649671274\n        reset_at:\n          type: integer\n          format: int64\n          nullable: true\n          readOnly: true\n          example: 1649671274\n    PollOption:\n      description: This is just the base model for various other poll option types.\n      type: object\n      properties:\n        id:\n          type: string\n        type:\n          type: string\n          description: 'possible poll option types, each type has unique properties'\n          enum:\n            - text\n            - image\n            - date\n            - time_range\n        position:\n          type: integer\n          description: 'the sorting of the poll option in the list, starting at 0'\n        vote_count:\n          type: integer\n          description: current vote count for this option\n          readOnly: true\n        max_votes:\n          type: integer\n          description: a limit of maximum allowed votes for this option\n          example: 0\n        description:\n          type: string\n          example: This is a description text\n          description: a secondary field for more information on the poll option\n          nullable: true\n        is_write_in:\n          type: boolean\n          description: whether the option was added by a participant or not\n          example: false\n          readOnly: true\n    TextPollOption:\n      description: A text-based poll option (default). The information is stored in the \"value\" field.\n      allOf:\n        - $ref: '#/components/schemas/PollOption'\n        - type: object\n          properties:\n            id:\n              example: B2ZBXVaAEnJ\n            type:\n              example: text\n            position:\n              example: 0\n            value:\n              example: Reactions\n      x-internal: false\n      examples:\n        - id: B2ZBXVaAEnJ\n          type: text\n          position: 0\n          vote_count: 0\n          max_votes: 0\n          description: string\n          is_write_in: false\n          value: Reactions\n    ImagePollOption:\n      description: 'An image-based poll option. The image information is stored in the \"media\" field, while a caption is stored in the \"value\" field. Currently not in use in the live version.'\n      allOf:\n        - $ref: '#/components/schemas/PollOption'\n        - type: object\n          properties:\n            id:\n              example: 61gDLOkK9gw\n            type:\n              example: image\n            position:\n              example: 1\n            media:\n              $ref: '#/components/schemas/Media'\n            value:\n              example: Image Caption\n    DatePollOption:\n      summary: A date-based poll option used for \"All-day\" meeting options. The information is stored in the \"date\" field.\n      allOf:\n        - $ref: '#/components/schemas/PollOption'\n        - type: object\n          properties:\n            id:\n              example: 05ZdvdbKDn6\n            type:\n              example: date\n            position:\n              example: 2\n            date:\n              type: string\n              format: date\n    TimeRangePollOption:\n      description: A time-range based poll option used for meeting polls. The information is stored in the \"start_time\" and \"end_time\" fields.\n      allOf:\n        - $ref: '#/components/schemas/PollOption'\n        - type: object\n          properties:\n            id:\n              example: jVyGJaBNzZ7\n            type:\n              example: time_range\n            position:\n              example: 3\n            start_time:\n              type: integer\n              format: int64\n              example: 1649671274\n            end_time:\n              type: integer\n              format: int64\n              example: 1649671274\n    PollConfig:\n      type: object\n      properties:\n        is_private:\n          type: boolean\n          example: true\n          description: Hidden from search, discover and public user profiles.\n        vote_type:\n          type: string\n          enum:\n            - default\n            - box_small\n            - participant_grid\n          description: Changes the layouts of how a voting is displayed.\n        allow_comments:\n          type: boolean\n          example: true\n        allow_indeterminate:\n          type: boolean\n          description: Only relevant in polls with participant grids. It adds the option to reply with \"If need be\".\n          example: false\n        allow_other_option:\n          type: boolean\n          description: Allows users to add custom options to your poll.\n          example: false\n        custom_design_colors:\n          type: string\n          description: Various RGB values for custom design colors of a poll page (stored as JSON). To apply it, use_custom_design must be set true.\n          nullable: true\n          example: '{}'\n        deadline_at:\n          type: integer\n          format: int64\n          example: 1649671274\n          nullable: true\n          description: Unixtime value of when a poll is closed.\n        duplication_checking:\n          type: string\n          enum:\n            - ip\n            - session\n            - invite\n            - none\n          description: Changes the way duplicate votes are handled.\n        allow_vpn_users:\n          type: boolean\n          example: false\n          description: Allow VPN users to vote\n        edit_vote_permissions:\n          type: string\n          enum:\n            - admin\n            - admin_voter\n            - voter\n            - nobody\n          description: Sets the permissions of who is allowed to edit votes. Only relevent when voters are required to enter their name. \n        force_appearance:\n          type: string\n          nullable: true\n          enum:\n            - auto\n            - dark\n            - light\n          description: By default, it is auto-detected whether a user wants to see a dark mode or not. This process can be forces to match the custom colors of a poll.\n        hide_participants:\n          type: boolean\n          example: false\n          description: Hiding participants is an option to remove the names of other participants from public view. Own votes are still visible to a participant.\n        is_multiple_choice:\n          type: boolean\n          example: true\n          description: By default, polls are set to allow only one answer. After activating this, you can choose also set multiple_choice_min and multiple_choice_max to define the allowed range of multiple choices.\n        multiple_choice_min:\n          type: integer\n          example: 1\n          description: The minimum number of options a voter has to choose. A value of 0 means unlimited.\n        multiple_choice_max:\n          type: integer\n          example: 2\n          description: The maximum number of options a voter has to choose. A value of 0 means unlimited.\n        number_of_winners:\n          type: integer\n          example: 1\n          description: After a poll is closed, winners can be declared. This indicates how many options should be marked as \"winner\". Currently not implemented in live version.\n        randomize_options:\n          type: boolean\n          example: false\n          description: For ranked choice votings, it might be useful to randomize the poll options list to remove a voting bias.\n        require_voter_names:\n          type: boolean\n          example: false\n          description: Participants will be required to enter their names. Often used in smaller groups when every personal opinion is relevant.\n        results_visibility:\n          type: string\n          enum:\n            - always\n            - after_deadline\n            - after_vote\n            - never\n          description: Changes the conditions of when participants are allowed to see the results.\n        use_custom_design:\n          type: boolean\n          example: false\n          description: Activates the use of custom design colors for a poll.\n    PollMeta:\n      type: object\n      properties:\n        description:\n          type: string\n          example: This is a description text.\n          description: A text field for the description of a poll.\n        location:\n          type: string\n          example: This is a location text.\n          description: A text field for the location of a poll or an related event.\n        vote_count:\n          type: integer\n          example: 969\n          readOnly: true\n        participant_count:\n          type: integer\n          example: 420\n          readOnly: true\n        view_count:\n          type: integer\n          example: 1337\n          readOnly: true\n        comment_count:\n          type: integer\n          example: 42\n          readOnly: true\n        creator_country:\n          type: string\n          example: de\n          readOnly: true\n        pin_code_expired_at:\n          type: integer\n          format: int64\n          readOnly: true\n          example: 1649671274\n          nullable: true\n        last_vote_at:\n          type: integer\n          format: int64\n          readOnly: true\n          example: 1649671274\n          nullable: true\n        timezone:\n          type: string\n          example: Europe/Berlin\n          nullable: true\n    PollResults:\n      type: object\n      properties:\n        id:\n          type: string\n          readOnly: true\n          example: NPgxkzPqrn2\n        version:\n          type: string\n          format: uuid\n          readOnly: true\n        voteCount:\n          type: integer\n          example: 1337\n        participantCount:\n          type: integer\n          example: 969\n        resultsKey:\n          type: string\n          format: uuid\n          description: The results key is used to fetch live data via Websocket.\n        poll_options:\n          type: array\n          items:\n            anyOf:\n              - $ref: '#/components/schemas/TextPollOption'\n              - $ref: '#/components/schemas/ImagePollOption'\n              - $ref: '#/components/schemas/DatePollOption'\n              - $ref: '#/components/schemas/TimeRangePollOption'\n        poll_participants:\n          type: array\n          items:\n            $ref: '#/components/schemas/PollParticipant'\n    PollParticipant:\n      type: object\n      properties:\n        id:\n          type: string\n          readOnly: true\n          example: NPgxkzPqrn2\n        name:\n          type: string\n          example: John Doe\n        country_code:\n          type: string\n          example: us\n        is_edit_allowed:\n          type: boolean\n          description: 'An indicator whether the current user is allowed to edit this entry. This should be done on client side, but well, here we are :)'\n        poll_votes:\n          type: array\n          items:\n            type: integer\n            nullable: true\n          example:\n            - 0\n            - 1\n            - 0\n            - null\n          description: 'This array indicates the votes corresponding to the array of poll_options. A value of 1 is a \"yes\" vote, a value of 0 is a \"no\" vote. In group polls, a value of null could indicate that the option was not present when the participant casted their vote.'\n        created_at:\n          type: integer\n          format: int64\n          readOnly: true\n          example: 1649671274\n    Media:\n      type: object\n      properties:\n        id:\n          type: string\n          example: poy9NPNwnJr\n          description: The ID of a Media object. When creating a poll with media, this is the only relevant field that is needed.\n        type:\n          type: string\n          example: image\n          enum:\n            - image\n            - video\n            - youtube\n            - giphy\n        user:\n          $ref: '#/components/schemas/PublicUser'\n        source:\n          type: string\n          example: 'https://www.example.com/source.html'\n        url:\n          type: string\n          example: 'https://cdn.strawpoll.com/media/poll-images/poy9NPNwnJr-c.png'\n        width:\n          type: integer\n          example: 640\n        height:\n          type: integer\n          example: 480\n        created_at:\n          type: integer\n          format: int64\n          readOnly: true\n          example: 1649671274\n        updated_at:\n          type: integer\n          format: int64\n          readOnly: true\n          example: 1649671274\n    PublicUser:\n      required:\n        - avatar_path\n        - displayname\n      type: object\n      properties:\n        id:\n          type: string\n          example: poy9NPNwnJr\n        username:\n          type: string\n          example: john-doe\n        displayname:\n          type: string\n          example: John Doe\n        avatar_path:\n          type: string\n          example: /images/avatars/john-doe-QrgewxGKypY.png\n        user_meta:\n          $ref: '#/components/schemas/UserMeta'\n        created_at:\n          type: integer\n          format: int64\n          example: 1649671274\n      readOnly: true\n    User:\n      allOf:\n        - $ref: '#/components/schemas/PublicUser'\n        - type: object\n          properties:\n            user_config:\n              $ref: '#/components/schemas/UserConfig'\n    UserMeta:\n      type: object\n      properties:\n        about:\n          type: string\n          example: A brief description for your public profile.\n        website:\n          type: string\n          example: 'https://www.example.com/'\n        country_code:\n          type: string\n          example: us\n        monthly_points:\n          type: integer\n          example: 42069\n        total_points:\n          type: integer\n          example: 69420\n    UserConfig:\n      type: object\n      properties:\n        appearance:\n          type: string\n        clock_type:\n          type: string\n        first_day_of_week:\n          type: integer\n          description: 'A value of 0 means Sunday, a value of 1 means Monday, etc.'\n        language:\n          type: string\n          example: en\n        locale:\n          type: string\n          example: en-gb\n        notification_delay:\n          type: integer\n          example: 30\n          description: The time in minutes our system waits between sending two email notifications.\n        notify_deadline:\n          type: boolean\n          description: Receive an update e-mail notification when a poll is closed. This should be renamed in future versions.\n        notify_meeting_vote:\n          type: boolean\n          description: Receive an update e-mail notification when a participant votes by name. This should be renamed in future versions.\n        notify_poll_vote:\n          type: boolean\n          description: Receive an update e-mail notification when a participant votes anonymously. This should be renamed in future versions.\n        timezone:\n          type: string\n          example: Europe/Berlin\n    Comment:\n      type: object\n      properties:\n        id:\n          type: string\n          readOnly: true\n          example: poy9NPNwnJr\n        reply_to_id:\n          type: string\n          description: The ID of the parent comment.\n          nullable: true\n          example: jVyGYLLzg7E\n        reference_id:\n          type: string\n          description: The ID of the referenced comment in the same hierarchy.\n          nullable: true\n        poll_id:\n          type: string\n          description: The ID of the related poll object.\n          example: QrgewxGKypY\n        name:\n          type: string\n          description: The name of a guest commenter.\n          nullable: true\n          writeOnly: true\n          example: John Doe\n        user:\n          $ref: '#/components/schemas/PublicUser'\n        text:\n          type: string\n          example: This is a comment.\n        like_count:\n          type: integer\n          readOnly: true\n          example: 0\n        replies:\n          type: array\n          readOnly: true\n          example:\n            - id: jVyGYLLzg7E\n              user:\n                displayname: Guest\n                avatar_path: /images/avatars/guest.png\n              text: This is a guest comment.\n              like_count: 0\n              replies: []\n              created_at: 1649671274\n          items:\n            $ref: '#/components/schemas/Comment'\n        created_at:\n          type: integer\n          format: int64\n          readOnly: true\n          example: 1649671274\n        updated_at:\n          type: integer\n          format: int64\n          nullable: true\n          readOnly: true\n          example: 1649671274\n    Pagination:\n      type: object\n      properties:\n        page:\n          type: integer\n        limit:\n          type: integer\n        total:\n          type: integer\n    UserActivity:\n      type: object\n      properties:\n        event:\n          type: string\n          enum:\n            - create_poll\n            - vote_poll\n        payload:\n          type: string\n          format: json\n          example: { \"path\": \"/polls/XOgOJjEQon3\", \"title\": \"What's the plan for friday night?\" }\n        created_at:\n          type: integer\n          format: int64\n          readOnly: true\n          example: 1649671274\n    Upload:\n      type: object\n      properties:\n        file:\n          type: string\n          format: binary\n        type:\n          type: string\n          enum:\n            - image\n            - video\n          example: image\n  securitySchemes:\n    ApiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-Key\n      description: ''\nsecurity:\n  - ApiKeyAuth: []\n\n",
			"canonicalURL": "/github.com/strawpoll-com/strawpoll-api-v3@fa1821624a8a70636eb10457cf2013588c9a6759/-/blob/openapi/strawpoll_v3.yml",
			"externalURLs": [
				{
					"url": "https://github.com/strawpoll-com/strawpoll-api-v3/blob/fa1821624a8a70636eb10457cf2013588c9a6759/openapi/strawpoll_v3.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/polls\": post: operation \"createPoll\": security: at openapi/strawpoll_v3.yml:296:15: list of scopes MUST be empty for \"type\" \"apiKey\""
}