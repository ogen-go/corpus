{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bottlerocket-os/bottlerocket"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "sources/api/openapi.yaml",
			"byteSize": 13550,
			"content": "openapi: \"3.0.2\"\ninfo:\n  version: \"0.1.0\"\n  title: \"Bottlerocket API\"\n  description: \"The API for the Bottlerocket OS\"\n  license:\n    name: \"Apache-2.0 OR MIT\"\n    url: \"https://github.com/bottlerocket-os/bottlerocket/blob/develop/COPYRIGHT\"\n\nservers:\n- url: file:///run/api.sock\n  description: The production API server\n\npaths:\n  /:\n    get:\n      summary: \"Get current model, including settings, services, configuration files, and os info\"\n      operationId: \"get_model\"\n      parameters:\n        - in: query\n          name: prefix\n          description: \"Specific key prefix to query\"\n          schema:\n            type: string\n          required: false\n      responses:\n        200:\n          description: \"Successful request\"\n          content:\n            application/json:\n              schema:\n                $ref: \"Model\"\n        500:\n          description: \"Server error\"\n\n  /settings:\n    get:\n      summary: \"Get current settings\"\n      operationId: \"get_settings\"\n      parameters:\n        - in: query\n          name: keys\n          description: \"Specific keys to query. Takes precedence over 'prefix' if both query parameters are supplied\"\n          schema:\n            type: array\n            items:\n              type: string\n          # `style: form` and `explode: false` format parameters as such:  /settings?keys=foo,bar,baz\n          style: form\n          explode: false\n          required: false\n        - in: query\n          name: prefix\n          description: \"Specific key prefix to query. This parameter will be ignored if 'keys' is also supplied\"\n          schema:\n            type: string\n          required: false\n      responses:\n        200:\n          description: \"Successful request\"\n          content:\n            application/json:\n              schema:\n                $ref: \"Settings\"\n        500:\n          description: \"Server error\"\n    patch:\n      summary: \"Update settings\"\n      operationId: \"set_settings\"\n      parameters:\n        - in: query\n          name: tx\n          description: \"Transaction in which to update settings; defaults to user 'default' transaction\"\n          schema:\n            type: string\n          required: false\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"Settings\"\n      responses:\n        204:\n          description: \"Settings successfully staged for update\"\n        400:\n          description: \"Invalid body\"\n        500:\n          description: \"Server error\"\n\n  /tx:\n    get:\n      summary: \"Get pending settings in a transaction\"\n      operationId: \"get_tx\"\n      parameters:\n        - in: query\n          name: tx\n          description: \"Transaction for which to retrieve pending settings; defaults to user 'default' transaction\"\n          schema:\n            type: string\n          required: false\n      responses:\n        200:\n          description: \"Successful request\"\n          content:\n            application/json:\n              schema:\n                $ref: \"Settings\"\n        500:\n          description: \"Server error\"\n    delete:\n      summary: \"Delete transaction\"\n      operationId: \"delete_tx\"\n      parameters:\n        - in: query\n          name: tx\n          description: \"Transaction to delete; defaults to user 'default' transaction\"\n          schema:\n            type: string\n          required: false\n      responses:\n        200:\n          description: \"Successful deleted pending settings - deleted keys are returned\"\n        500:\n          description: \"Server error\"\n\n  /tx/list:\n    get:\n      summary: \"List names of pending transactions\"\n      operationId: \"list_tx\"\n      responses:\n        200:\n          description: \"Successful request\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        500:\n          description: \"Server error\"\n\n  /tx/commit:\n    post:\n      summary: \"Commit pending settings, without applying changes to config files or restarting services\"\n      operationId: \"commit_tx\"\n      parameters:\n        - in: query\n          name: tx\n          description: \"Transaction to commit; defaults to user 'default' transaction\"\n          schema:\n            type: string\n          required: false\n      responses:\n        200:\n          description: \"Successfully Staged settings - changed keys are returned\"\n        500:\n          description: \"Server error\"\n\n  /tx/apply:\n    post:\n      summary: \"Apply changes to config files and restart services\"\n      operationId: \"apply\"\n      parameters:\n        - in: query\n          name: keys\n          description: \"Apply changes only if related to these keys; if not specified, applies for all known keys\"\n          schema:\n            type: array\n            items:\n              type: string\n          # `style: form` and `explode: false` format parameters as such:  /tx/apply?keys=settings.foo,settings.bar\n          style: form\n          explode: false\n          required: false\n      responses:\n        204:\n          description: \"Successfully started settings applier\"\n        500:\n          description: \"Server error\"\n\n  /tx/commit_and_apply:\n    post:\n      summary: \"Commit transaction, and apply any committed changes to relevant config files and services\"\n      operationId: \"commit_tx_and_apply\"\n      parameters:\n        - in: query\n          name: tx\n          description: \"Transaction to commit; defaults to user 'default' transaction\"\n          schema:\n            type: string\n          required: false\n      responses:\n        200:\n          description: \"Successful settings update, committed keys are returned\"\n        500:\n          description: \"Server error\"\n\n  /os:\n    get:\n      summary: \"Get OS information such as version, variant, and architecture\"\n      operationId: \"get_os_info\"\n      parameters:\n        - in: query\n          name: prefix\n          description: \"Specific key prefix to query\"\n          schema:\n            type: string\n          required: false\n      responses:\n        200:\n          description: \"Successful request\"\n          content:\n            application/json:\n              # The response is a hashmap of string to string. Example:\n              # { \"arch\": \"x86_64\" }\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n        500:\n          description: \"Server error\"\n\n  /metadata/affected-services:\n    get:\n      summary: \"Get affected services\"\n      operationId: \"get_affected_services\"\n      parameters:\n        - in: query\n          name: keys\n          description: \"Specific keys to query\"\n          schema:\n            type: array\n            items:\n              type: string\n          # `style: form` and `explode: false` format parameters as such:  /metadata/affected-services?keys=settings.foo,settings.bar\n          style: form\n          explode: false\n          required: true\n      responses:\n        200:\n          description: \"Successful request\"\n          content:\n            application/json:\n              # The response is a hashmap of string to array of strings. Example:\n              # { \"settings.foo\": [ \"service1\", \"service2\" ] }\n              schema:\n                type: object\n                additionalProperties:\n                  type: array\n                  items:\n                    type: string\n        400:\n          description: \"Missing required query parameter: 'keys'\"\n        500:\n          description: \"Server error\"\n\n  /metadata/setting-generators:\n    get:\n      summary: \"Get programs needed to generate settings\"\n      operationId: \"get_setting_generators\"\n      responses:\n        200:\n          description: \"Successful request\"\n          content:\n            application/json:\n              # The response is a hashmap of string to string. Example:\n              # { \"settings.foobar\": \"/usr/bin/foobar\" }\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n        500:\n          description: \"Server error\"\n\n  /metadata/templates:\n    get:\n      summary: \"Get template strings for dynamically generated settings\"\n      operationId: \"get_templates\"\n      responses:\n        200:\n          description: \"Successful request\"\n          content:\n            application/json:\n              # The response is a hashmap of string to string. Example:\n              # { \"settings.foobar\": \"hi {{ key }}\" }\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n        500:\n          description: \"Server error\"\n\n  /services:\n    get:\n      summary: \"Get service data\"\n      operationId: \"get_services\"\n      parameters:\n        - in: query\n          name: names\n          description: \"Specific services to query\"\n          schema:\n            type: array\n            items:\n              type: string\n          # `style: form` and `explode: false` format parameters as such:  /services?names=foo,bar,baz\n          style: form\n          explode: false\n          required: false\n        - in: query\n          name: prefix\n          description: \"Specific key prefix to query. This parameter will be ignored if 'names' is also supplied\"\n          schema:\n            type: string\n          required: false\n      responses:\n        200:\n          description: \"Successful request\"\n          content:\n            application/json:\n              schema:\n                $ref: \"Services\"\n        500:\n          description: \"Server error\"\n\n  /configuration-files:\n    get:\n      summary: \"Get configuration file data\"\n      operationId: \"get_config_files\"\n      parameters:\n        - in: query\n          name: names\n          description: \"Specific configuration files to query\"\n          schema:\n            type: array\n            items:\n              type: string\n          # `style: form` and `explode: false` format parameters as such:  /configuration-files?names=file1,file2\n          style: form\n          explode: false\n          required: false\n      parameters:\n        - in: query\n          name: prefix\n          description: \"Specific key prefix to query. This parameter will be ignored if 'names' is also supplied\"\n          schema:\n            type: string\n          required: false\n      responses:\n        200:\n          description: \"Successful request\"\n          content:\n            application/json:\n              schema:\n                $ref: \"ConfigurationFiles\"\n        500:\n          description: \"Server error\"\n\n  /actions/reboot:\n    post:\n      summary: \"Reboot\"\n      operationId: \"reboot\"\n      responses:\n        204:\n          description: \"Reboot requested\"\n        500:\n          description: \"Server error\"\n\n  /actions/refresh-updates:\n    post:\n      summary: \"Query update repository and refresh list of updates\"\n      operationId: \"refresh_update\"\n      responses:\n        204:\n          description: \"Successful request\"\n        500:\n          description: \"Server error\"\n        423:\n          description: \"Update write lock held. Try again in a moment\"\n\n  /actions/prepare-update:\n    post:\n      summary: \"Download the chosen update and write the update image to the inactive partition\"\n      operationId: \"prepare_update\"\n      responses:\n        204:\n          description: \"Successful request\"\n        404:\n          description: \"Chosen update does not exist\"\n        409:\n          description: \"Action not allowed according to current update state\"\n        500:\n          description: \"Server error\"\n        423:\n          description: \"Update write lock held. Try again in a moment\"\n\n  /actions/activate-update:\n    post:\n      summary: \"Mark the partition with the prepared update as active so you can reboot into the chosen version\"\n      operationId: \"activate_update\"\n      responses:\n        204:\n          description: \"Successfully activated update\"\n        404:\n          description: \"No update image applied to staging partition, need to prepare-update first\"\n        409:\n          description: \"Action not allowed according to current update state\"\n        500:\n          description: \"Server error\"\n        423:\n          description: \"Update write lock held. Try again in a moment\"\n\n  /actions/deactivate-update:\n    post:\n      summary: \"Deactivate the update by marking the running partition as active again\"\n      operationId: \"deactivate-update\"\n      responses:\n        204:\n          description: \"Successfully deactivated update\"\n        404:\n          description: \"No update image applied to staging partition, need to prepare-update first\"\n        409:\n          description: \"Action not allowed according to current update state\"\n        500:\n          description: \"Server error\"\n        423:\n          description: \"Update write lock held. Try again in a moment\"\n\n  /updates/status:\n    get:\n      summary: \"Get update status\"\n      operationId: \"get_update_status\"\n      responses:\n        200:\n          description: \"Successful request\"\n          content:\n            application/json:\n              schema:\n                $ref: \"UpdateStatus\"\n        500:\n          description: \"Server error\"\n        423:\n          description: \"Update write lock held. Try again in a moment\"\n\n  /exec:\n    get:\n      summary: \"Request exec WebSocket\"\n      operationId: \"exec\"\n      responses:\n        101:\n          description: \"Connection upgraded to WebSocket\"\n        500:\n          description: \"Server error\"\n",
			"canonicalURL": "/github.com/bottlerocket-os/bottlerocket@33e42d5212da6f16d391dd98fea992e034f1a6ad/-/blob/sources/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/bottlerocket-os/bottlerocket/blob/33e42d5212da6f16d391dd98fea992e034f1a6ad/sources/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/\": get: operation \"get_model\": responses: 200: content: application/json: schema: parse schema: at 1:490: external \"Model\": get: file: local file reference is not allowed"
}