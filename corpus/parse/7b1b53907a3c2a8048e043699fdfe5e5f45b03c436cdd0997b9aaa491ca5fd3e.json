{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/arXiv/arxiv-submission-core"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "metadata/schema/openapi.yaml",
			"byteSize": 5067,
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: \"0.1\"\n  title: \"arXiv Submission API\"\n  description: \"A RESTful API for arXiv submissions.\"\n  contact:\n    name: \"arXiv API Team\"\n    email: nextgen@arxiv.org\n  license:\n    name: MIT\n\npaths:\n  /submission/:\n    get:\n      operationId: getServiceRoot\n      description: |\n        Describes the state of the submission API, and available methods.\n      responses:\n        '200':\n          description: |\n            Information about the submission API, including routes to submit\n            and poll.\n\n    post:\n      operationId: createSubmission\n      summary: |\n        Create a new submission, and update with service annotations, metadata,\n        and/or source files.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: 'resources/submission.json'\n\n      responses:\n        '202':\n          description: The submission payload has been accepted for deposit.\n          headers:\n            Location:\n              description: Status endpoint for the new submission.\n              schema:\n                type: \"string\"\n\n  /submission/{id}/:\n    parameters:\n      - in: path\n        name: id\n        description: |\n          Unique submission ID returned upon createSubmission. This will\n          likely, but not necessesarily, look like an integer.\n        required: true\n        schema:\n          type: string\n\n    get:\n      description: |\n        Get the current state of the submission, including procedural\n        and descriptive metadata.\n      operationId: getSubmission\n      responses:\n        '200':\n          description: |\n            Procedural and descriptive metadata about the submission resource,\n            including its current state in the submission process.\n          content:\n            application/json:\n              schema:\n                $ref: 'resources/submission.json'\n\n    post:\n      operationId: updateSubmission\n      description: |\n        Update the submission with procedural and descriptive metadata. Include\n        data only for fields which should be updated.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: 'resources/submission.json'\n\n      responses:\n        '200':\n          description: The submission has been updated.\n          content:\n            application/json:\n              schema:\n                $ref: 'resources/submission.json'\n\n  /submission/{id}/source/:\n    parameters:\n      - in: path\n        name: id\n        description: |\n          Unique submission ID returned upon createSubmission. This will\n          likely, but not necessesarily, look like an integer.\n        required: true\n        schema:\n          type: string\n\n    get:\n      operationId: getSourceInformation\n      description: |\n        Get information about the submission source package.\n      responses:\n        '200':\n          description: Source package information.\n          content:\n            application/json:\n              schema:\n                $ref: 'resources/content.json'\n\n    post:\n      operationId: addSourcePackage\n      description: |\n        Add (or replace) the source package for the submission.\n      responses:\n        '200':\n          description: |\n            The submission has been updated with a reference to the source package.\n          content:\n            application/json:\n              schema:\n                $ref: 'resources/content.json'\n\n  /submission/{id}/history/:\n    parameters:\n      - in: path\n        name: id\n        description: |\n          Unique submission ID returned upon createSubmission. This will\n          likely, but not necessesarily, look like an integer.\n        required: true\n        schema:\n          type: string\n\n    get:\n      description: |\n        Get the event log for a submission. This will include only events that\n        the user/client is authorized to view.\n      operationId: getSubmissionHistory\n      responses:\n        '200':\n          description: |\n            Event log for the submission. This will include only events that\n            the user/client is authorized to view.\n          content:\n            application/json:\n              schema:\n                $ref: 'resources/log.json'\n\n  /submission/{id}/history/{event_id}/:\n    parameters:\n      - name: id\n        in: path\n        description: |\n          Unique submission ID returned upon createSubmission. This will\n          likely, but not necessesarily, look like an integer.\n        required: true\n        schema:\n          type: string\n      - name: event_id\n        in: path\n        description: |\n          Unique ID for the submission event.\n        required: true\n        schema:\n          type: string\n\n    get:\n      description: Get data for a submission event.\n      operationId: getSubmissionEvent\n      responses:\n        '200':\n          description: |\n            Event data for the submission event.\n          content:\n            application/json:\n              schema:\n                $ref: 'resources/event.json'\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /submission/: post: operation \"createSubmission\": requestBody: content: \"application/json\": parse schema: parse schema: resolve \"resources/submission.json\": find schema: external base \"resources/submission.json\" is not supported"
}