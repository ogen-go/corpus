{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/PandelisT/my-mood-diary"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "swagger.yml",
			"byteSize": 9681,
			"content": "openapi: 3.0.0\ninfo:\n  description: This is an API for the project on GitHub https://github.com/PandelisT/my-mood-diary.\n  version: \"1.0.0\"\n  title: My Mood Diary API\n  contact:\n    email: pandeli@nerdypandy.com\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: My Journal\n    description: Routes available for \"My Journal\" page\n  - name: user\n    description: Routes for clients and psychologists\n  - name: client\n    description: Routes for updating client information\n  - name: profile\n    description: Routes for profile image\npaths:\n  /journal:\n    get:\n      tags:\n        - My Journal\n      summary: Searches for latest journal entries\n      responses:\n          '200':\n            description: Success\n      description: Search for a specific journal entry.\n    post:\n      tags:\n        - My Journal\n      summary: Adds a journal entry\n      responses:\n          '200':\n           description: Success\n      description: Adds a journal entry to the database\n      \n  /journal/recent:\n    get:\n      tags:\n        - My Journal\n      summary: Searches for latest journal entries\n      responses:\n          '200':\n            description: Success\n      description: Search for a specific journal entry.\n\n  /journal/findByDate:\n    get:\n      tags:\n        - My Journal\n      summary: Finds journal entry by date\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findJournalByDate\n      parameters:\n        - name: date\n          in: query\n          description: Dates that need to be considered for filter\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - available\n                - pending\n                - sold\n              default: available\n      responses:\n        '200':\n          description: successful operation\n        '400':\n          description: Invalid status value\n  '/journal/{journalId}':\n    get:\n      tags:\n        - My Journal\n      summary: Finds journal entry by ID\n      description: Returns a single journal entry\n      operationId: getJournalById\n      parameters:\n        - name: journalId\n          in: path\n          description: ID of journal entry to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n    description: |\n      By passing in the appropriate options, you can search for\n      a specific journal entry.\n    put:\n      tags:\n        - My Journal\n      summary: Updates a journal entry by ID\n      description: Updates a single journal entry\n      operationId: updateJournalById\n      parameters:\n        - name: journalId\n          in: path\n          description: ID of journal entry to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n    delete:\n      tags:\n        - My Journal\n      summary: Deletes a single journal entry\n      operationId: deleteJournal\n      parameters:\n        - name: journalId\n          in: path\n          description: Journal entry id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Journal entry not found\n  \n  /client:\n    get:\n      tags:\n        - client\n      summary: Logs user into the system\n      operationId: getClientDetails\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: firstname\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n    post:\n      tags:\n        - client\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createClient\n      responses:\n        default:\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Client'\n        description: Created user object\n        required: true\n    put:\n      tags:\n        - client\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateClient\n      responses:\n        '400':\n          description: Invalid user supplied\n        '404':\n          description: User not found\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Client'\n        description: Updated user object\n        required: true\n\n  '/profile/{user_id}/image':\n    get:\n      tags:\n        - profile\n      summary: Logs user into the system\n      operationId: getProfileImage\n      parameters:\n        - name: user_id\n          in: path\n          description: The user_id connected to the image\n          required: true\n          schema:\n            type: string\n        - name: firstname\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n    post:\n      tags:\n        - profile\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createProfileImage\n      responses:\n        default:\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Profile'\n        description: Created user object\n        required: true\n    put:\n      tags:\n        - profile\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateProfileImage\n      responses:\n        '400':\n          description: Invalid user supplied\n        '404':\n          description: User not found\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Profile'\n        description: Updated user object\n        required: true\n\n  \n  \n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      responses:\n        default:\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: Created user object\n        required: true\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/json:\n              schema:\n                type: string\n            application/xml:\n              schema:\n                type: string\n        '400':\n          description: Invalid username/password supplied\n  /user/:\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      responses:\n        '400':\n          description: Invalid user supplied\n        '404':\n          description: User not found\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: Updated user object\n        required: true\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      responses:\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n          \n\ncomponents:\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        email:\n          type: string\n        password:\n          type: string\n      xml:\n        name: User\n\n    Client:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n      xml:\n        name: Client\n        \n    Profile:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        filename:\n          type: string\n      xml:\n        name: Client\nservers:\n  # Added by API Auto Mocking Plugin\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/nerdypan/my-mood-diary/1.0.0",
			"canonicalURL": "/github.com/PandelisT/my-mood-diary@aae8ef9d7e69715ad4999b49eab51a3ea2b3f196/-/blob/swagger.yml",
			"externalURLs": [
				{
					"url": "https://github.com/PandelisT/my-mood-diary/blob/aae8ef9d7e69715ad4999b49eab51a3ea2b3f196/swagger.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/client\": get: operation \"getClientDetails\": at swagger.yml:135:7: responses: no responses"
}