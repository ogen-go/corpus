{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ns1labs/orb"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "policies/api/openapi.yaml",
			"byteSize": 27874,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: orb-policies\nservers:\n  - url: 'http://localhost:8202'\npaths:\n  /policies/agent:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n    get:\n      summary: 'List Agent Policies'\n      operationId: listPolicies\n      tags:\n        - policy\n      parameters:\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Offset\"\n        - $ref: \"#/components/parameters/Name\"\n        - $ref: \"#/components/parameters/Order\"\n        - $ref: \"#/components/parameters/Direction\"\n        - $ref: \"#/components/parameters/Tags\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/PolicyPageRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: A non-existent entity request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n    post:\n      summary: 'Create new Agent Policy'\n      operationId: createPolicy\n      tags:\n        - policy\n      requestBody:\n        $ref: \"#/components/requestBodies/PolicyCreateReq\"\n      responses:\n        '201':\n          $ref: \"#/components/responses/PolicyObjRes\"\n        '400':\n          description: Failed due to malformed JSON\n        '401':\n          description: Missing or invalid access token provided.\n        '409':\n          description: Entity already exist.\n        '415':\n          description: Mising or invalid content type.\n        '422':\n          description: Database can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n  /policies/agent/{id}:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n      - $ref: \"#/components/parameters/PolicyId\"\n    get:\n      summary: 'Get an existing Agent Policy'\n      operationId: readPolicy\n      tags:\n        - policy\n      responses:\n        '201':\n          $ref: \"#/components/responses/PolicyObjRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '404':\n          description: A non-existent entity request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n    put:\n      parameters:\n        - $ref: \"#/components/parameters/Authorization\"\n      summary: 'Update an existing Agent Policy'\n      operationId: updatePolicy\n      tags:\n        - policy\n      requestBody:\n        required: true\n        $ref: \"#/components/requestBodies/PolicyUpdateReq\"\n      responses:\n        '201':\n          $ref: \"#/components/responses/PolicyObjRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '422':\n          description: Databse can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/Authorization\"\n      summary: \"Delete an existing Agent Policy\"\n      operationId: deletePolicy\n      tags:\n        - policy\n      responses:\n        '204':\n          description: Policy removed.\n        '400':\n          description: Failed due to malformed Policy ID.\n        '401':\n          description: Missing or invalid access token provided.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n  /policies/agent/validate:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n    post:\n      summary: 'Validate an Agent Policy configuration without saving it'\n      operationId: validatePolicy\n      tags:\n        - policy\n      requestBody:\n        $ref: \"#/components/requestBodies/PolicyCreateReq\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/PolicyObjRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n  /policies/dataset:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n    get:\n      summary: 'List Dataset'\n      operationId: listDatasets\n      tags:\n        - dataset\n      parameters:\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Offset\"\n        - $ref: \"#/components/parameters/Name\"\n        - $ref: \"#/components/parameters/Order\"\n        - $ref: \"#/components/parameters/Direction\"\n        - $ref: \"#/components/parameters/Tags\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/DatasetPageRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: A non-existent entity request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n    post:\n      summary: 'Create new Dataset'\n      operationId: createDataset\n      tags:\n        - dataset\n      requestBody:\n        $ref: \"#/components/requestBodies/DatasetCreateReq\"\n      responses:\n        '201':\n          $ref: \"#/components/responses/DatasetObjRes\"\n        '400':\n          description: Failed due to malformed JSON\n        '401':\n          description: Missing or invalid access token provided.\n        '409':\n          description: Entity already exist.\n        '415':\n          description: Mising or invalid content type.\n        '422':\n          description: Database can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n  /policies/dataset/{id}:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n      - $ref: \"#/components/parameters/DatasetId\"\n    get:\n      summary: 'Get an existing Dataset'\n      operationId: readDataset\n      tags:\n        - dataset\n      responses:\n        '201':\n          $ref: \"#/components/responses/DatasetObjRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '404':\n          description: A non-existent entity request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n    put:\n      parameters:\n        - $ref: \"#/components/parameters/Authorization\"\n      summary: 'Update an existing Dataset'\n      operationId: updateDataset\n      tags:\n        - dataset\n      requestBody:\n        required: true\n        $ref: \"#/components/requestBodies/DatasetUpdateReq\"\n      responses:\n        '201':\n          $ref: \"#/components/responses/DatasetObjRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '422':\n          description: Databse can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/Authorization\"\n      summary: \"Delete an existing Dataset\"\n      operationId: deleteDataset\n      tags:\n        - dataset\n      responses:\n        '204':\n          description: Dataset removed.\n        '400':\n          description: Failed due to malformed Policy ID.\n        '401':\n          description: Missing or invalid access token provided.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n  /policies/agent/{id}/duplicate:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n      - $ref: \"#/components/parameters/PolicyId\"\n    post:\n      summary: 'Duplicate an existing Agent Policy'\n      operationId: duplicatePolicy\n      tags:\n        - policy\n      requestBody:\n        required: true\n        $ref: \"#/components/requestBodies/PolicyDuplicateReq\"\n      responses:\n        '201':\n          $ref: \"#/components/responses/PolicyObjRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '404':\n          description: A non-existent entity request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n  /policies/dataset/validate:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n    post:\n      summary: 'Validate a Policy Dataset configuration without saving it'\n      operationId: validateDataset\n      tags:\n        - dataset\n      requestBody:\n        $ref: \"#/components/requestBodies/DatasetCreateReq\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/DatasetObjRes\"\n        '400':\n          description: Failed due to malformed JSON\n        '401':\n          description: Missing or invalid access token provided..\n        '415':\n          description: Mising or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\ncomponents:\n  requestBodies:\n    PolicyCreateReq:\n      description: JSON-formatted document describing the new Policy configuration\n      required: true\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - $ref: \"#/components/schemas/PolicyCreateReqSchemaJson\"\n              - $ref: \"#/components/schemas/PolicyCreateReqSchemaYaml\"\n    PolicyUpdateReq:\n      description: JSON-formatted document describing the updated Policy configuration\n      required: true\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - $ref: \"#/components/schemas/PolicyUpdateReqSchemaJson\"\n              - $ref: \"#/components/schemas/PolicyUpdateReqSchemaYaml\"\n    DatasetCreateReq:\n      description: JSON-formatted document describing the new Dataset configuration\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/DatasetCreateReqSchema\"\n    DatasetUpdateReq:\n      description: JSON-formatted document describing the updated Dataset configuration\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/DatasetUpdateReqSchema\"\n    PolicyDuplicateReq:\n      description: JSON-formatted document describing the Policy to be duplicate\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/PolicyDuplicateReqSchema\"\n  parameters:\n    Name:\n      name: name\n      description: Name filter. Filtering is performed as a case-insensitive partial match.\n      in: query\n      schema:\n        type: string\n      required: false\n    Order:\n      name: order\n      description: Order type.\n      in: query\n      schema:\n        type: string\n        default: id\n        enum:\n          - name\n          - id\n      required: false\n    Direction:\n      name: dir\n      description: Order direction.\n      in: query\n      schema:\n        type: string\n        default: desc\n        enum:\n          - asc\n          - desc\n      required: false\n    Limit:\n      name: limit\n      description: Size of the subset to retrieve.\n      in: query\n      schema:\n        type: integer\n        default: 10\n        maximum: 100\n        minimum: 1\n      required: false\n    Offset:\n      name: offset\n      description: Number of items to skip during retrieval.\n      in: query\n      schema:\n        type: integer\n        default: 0\n        minimum: 0\n      required: false\n    Tags:\n      name: tags\n      description: Tags filter. Filtering is performed as a case-insensitive partial key value match.\n      in: query\n      schema:\n        type: string\n        default: \"{\\\"key\\\":\\\"value\\\"}\"\n      required: false\n    Authorization:\n      name: Authorization\n      description: User's access token.\n      in: header\n      bearerAuth:\n        scheme: bearer\n        type: http\n        format: JWT\n      required: true\n    PolicyId:\n      name: id\n      description: Unique Agent Policy identifier.\n      in: path\n      schema:\n        type: string\n        format: uuid\n      required: true\n    DatasetId:\n      name: id\n      description: Unique Dataset identifier.\n      in: path\n      schema:\n        type: string\n        format: uuid\n      required: true\n  responses:\n    PolicyObjRes:\n      description: Policy object\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/PolicyObjSchema\"\n    PolicyPageRes:\n      description: Data retrieved.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/PolicyPageSchema\"\n    ServiceErrorRes:\n      description: Unexpected server-side error occurred.\n      content:\n        application/json:\n          schema:\n            type: string\n            format: byte\n    PolicyBackendObjRes:\n      description: Backend object\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/PolicyBackendObjSchema\"\n    DatasetObjRes:\n      description: Policy object\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/DatasetObjSchema\"\n    DatasetPageRes:\n      description: Data retrieved.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/DatasetPageSchema\"\n  schemas:\n    PolicyUpdateReqSchemaJson:\n      type: object\n      properties:\n        name:\n          type: string\n          description: A unique name label\n          example: my-policy\n        description:\n          type: string\n          description: User description of this Policy\n          example: A policy example\n        tags:\n          type: object\n          description: User defined key/values for organization and searching\n          example:\n            region: eu\n            node_type: dns\n        policy:\n          type: object\n          properties:\n            kind:\n              type: string\n              example: \"collection\"\n            input:\n              type: object\n              properties:\n                tap:\n                  type: string\n                  example: \"default_pcap\"\n                input_type:\n                  type: string\n                  example: \"pcap\"\n                config:\n                  type: object\n                  properties:\n                    host_spec:\n                      type: string\n                      example: \"host_spec\"\n                filter:\n                  type: object\n                  properties:\n                    bpf:\n                      type: string\n                      example: \"filter_exp\"\n            handlers:\n              type: object\n              properties:\n                modules:\n                  type: object\n                  properties:\n                    handlers_label:\n                      type: object\n                      properties:\n                        type:\n                          type: string\n                          example: \"dns\"\n          description: Agent backend specific policy data in json format\n          example:\n            handlers:\n              modules:\n                default_dns:\n                  type: dns\n                default_net:\n                  type: net\n    PolicyUpdateReqSchemaYaml:\n      type: object\n      properties:\n        name:\n          type: string\n          description: A unique name label\n          example: my-policy\n        description:\n          type: string\n          description: User description of this Policy\n          example: A policy example\n        tags:\n          type: object\n          description: User defined key/values for organization and searching\n          example:\n            region: eu\n            node_type: dns\n        policy_data:\n          type: string\n          description: Agent backend specific policy data in yaml format\n          example: \"handlers:\\n  modules:\\n    default_dns:\\n      type: dns\\n    default_net:\\n      type: net\\ninput:\\n  input_type: pcap\\n  tap: default_pcap\\nkind: collection\"\n        format:\n          type: string\n          example: yaml\n          description: Policy text format needed to specify when a policy is a yaml\n    PolicyCreateReqSchemaJson:\n      type: object\n      required:\n        - name\n        - backend\n        - tags\n        - policy\n      properties:\n        name:\n          type: string\n          description: A unique name label\n          example: my-policy\n        description:\n          type: string\n          description: User description of this Policy\n          example: A policy example\n        tags:\n          type: object\n          description: User defined key/values for organization and searching\n          example:\n            region: eu\n            node_type: dns\n        version:\n          type: integer\n          description: Currente version of agent policy\n          example: 1\n        backend:\n          type: string\n          example: pktvisor\n          description: Agent backend this policy is for. Cannot change once created.\n        schema_version:\n          type: string\n          example: '1.0'\n          description: Schema version which needs to match the schema defined by the backend which will use the policy.\n        policy:\n          type: object\n          properties:\n            kind:\n              type: string\n              example: \"collection\"\n            input:\n              type: object\n              properties:\n                tap:\n                  type: string\n                  example: \"default_pcap\"\n                input_type:\n                  type: string\n                  example: \"pcap\"\n                config:\n                  type: object\n                  properties:\n                    host_spec:\n                      type: string\n                      example: \"host_spec\"\n                filter:\n                  type: object\n                  properties:\n                    bpf:\n                      type: string\n                      example: \"filter_exp\"\n            handlers:\n              type: object\n              properties:\n                modules:\n                  type: object\n                  properties:\n                    handlers_label:\n                      type: object\n                      properties:\n                        type:\n                          type: string\n                          example: \"dns\"\n          description: Agent backend specific policy data in json format\n          example:\n            handlers:\n              modules:\n                default_dns:\n                  type: dns\n                default_net:\n                  type: net\n            input:\n              input_type: pcap\n              tap: default_pcap\n            kind: collection\n    PolicyCreateReqSchemaYaml:\n      type: object\n      required:\n        - name\n        - backend\n        - tags\n        - policy_data\n        - format\n      properties:\n        name:\n          type: string\n          description: A unique name label\n          example: my-policy\n        description:\n          type: string\n          description: User description of this Policy\n          example: A policy example\n        tags:\n          type: object\n          description: User defined key/values for organization and searching\n          example:\n            region: eu\n            node_type: dns\n        backend:\n          type: string\n          example: pktvisor\n          description: Agent backend this policy is for. Cannot change once created.\n        schema_version:\n          type: string\n          example: '1.0'\n          description: Schema version which needs to match the schema defined by the backend which will use the policy.\n        policy_data:\n          type: string\n          description: Agent backend specific policy data in yaml format\n          example: \"kind: collection\n                    input:\n                      tap: default_pcap\n                      input_type: pcap\n                      config:\n                        host_spec: host_spec\n                      filter:\n                        bpf: filter_exp\n                    handlers:\n                      modules:\n                        handler_label:\n                          type: dns\"\n        format:\n          type: string\n          example: yaml\n          description: Policy text format needed to specify when a policy is a yaml\n    PolicyDuplicateReqSchema:\n      type: object\n      properties:\n        name:\n          type: string\n          description: A unique name label\n          example: my-policy\n    PolicyPageSchema:\n      type: object\n      properties:\n        policy:\n          type: array\n          minItems: 0\n          uniqueItems: true\n          items:\n            $ref: \"#/components/schemas/PolicyObjSchema\"\n        total:\n          type: integer\n          description: Total number of items.\n        offset:\n          type: integer\n          description: Number of items to skip during retrieval.\n        limit:\n          type: integer\n          description: Maximum number of items to return in one page.\n      required:\n        - policy\n    ConfigEntrySchema:\n      type: object\n      properties:\n        title:\n          type: string\n          description: Visual title of the config item shown in UI\n        type:\n          type: string\n          description: \"Data field type\"\n          enum:\n            - string\n            - password\n            - int\n        name:\n          type: string\n          description: The field label used in the JSON config object for this field\n        description:\n          type: string\n          description: A description of the use of this configuration field\n      example:\n        title: Remote host\n        type: string\n        name: remote_host\n        description:\n    PolicyObjSchema:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          readOnly: true\n          format: uuid\n          description: Unique identifier (UUID)\n        name:\n          type: string\n          description: A unique name label\n          example: my-policy\n        description:\n          type: string\n          description: User description of this Policy\n          example: An example policy\n        tags:\n          type: object\n          description: User defined key/values for organization and searching\n          example:\n            region: eu\n            node_type: dns\n        backend:\n          type: string\n          example: pktvisor\n          description: The policy backend to use. Cannot change once created.\n        ts_created:\n          type: string\n          readOnly: true\n          format: date-time\n          description: Timestamp of creation\n        version:\n          type: integer\n          readOnly: true\n          example: 0\n          description: A monotonically increasing counter starting at 0 on creation and increasing with each policy update.\n        policy:\n          type: object\n          description: Agent backend specific policy data in json format\n          example:\n            handlers:\n              modules:\n                default_dns:\n                  type: dns\n                default_net:\n                  type: net\n            input:\n              input_type: pcap\n              tap: default_pcap\n            kind: collection\n        format:\n          type: string\n          example: yaml\n          description: Policy text format needed to specify when a policy was created in yaml format.\n        policy_data:\n          type: string\n          description: Agent backend specific policy data in yaml format\n          example: \"handlers:\\n  modules:\\n    default_dns:\\n      type: dns\\n    default_net:\\n      type: net\\ninput:\\n  input_type: pcap\\n  tap: default_pcap\\nkind: collection\"\n    PolicyBackendResSchema:\n      type: object\n      properties:\n        backend:\n          type: string\n          example: pktvisor\n          description: Name and identifier of the policy backend, used when creating new policy\n        description:\n          type: string\n          example: Text field of the description of the agent backend\n        config:\n          type: array\n          description: Backend configuration field details\n          items:\n            items:\n              $ref: '#/components/schemas/ConfigEntrySchema'\n    PolicyBackendObjSchema:\n      type: object\n      required:\n        - id\n      properties:\n        backend:\n          type: string\n          example: pktvisor\n          description: Name and identifier of the policy backend, used when creating new policy\n        description:\n          type: string\n          example: Text field of the description of the agent backend\n        config:\n          type: array\n          description: Backend configuration field details\n          items:\n            items:\n              $ref: '#/components/schemas/ConfigEntrySchema'\n    DatasetUpdateReqSchema:\n      type: object\n      properties:\n        name:\n          type: string\n          description: A unique name label\n          example: my-dataset\n        sink_ids:\n          type: array\n          items:\n            type: string\n            format: uuid\n          minItems: 1\n          uniqueItems: true\n          description: An array of one or more sink unique identifier\n    DatasetCreateReqSchema:\n      type: object\n      required:\n        - name\n        - agent_group_id\n        - agent_policy_id\n        - sink_ids\n      properties:\n        name:\n          type: string\n          description: A unique name label\n          example: my-dataset\n        agent_group_id:\n          type: string\n          format: uuid\n          description: A unique identifier of an agent_group\n        agent_policy_id:\n          type: string\n          format: uuid\n          description: A unique identifier of an agent_policy\n        sink_ids:\n          type: array\n          items:\n            type: string\n            format: uuid\n          minItems: 1\n          description: An array of one or more sink unique identifier\n    DatasetPageSchema:\n      type: object\n      properties:\n        dataset:\n          type: array\n          minItems: 0\n          uniqueItems: true\n          items:\n            $ref: \"#/components/schemas/DatasetObjSchema\"\n        total:\n          type: integer\n          description: Total number of items\n        offset:\n          type: integer\n          description: Number of items to skip during retrieval\n        limit:\n          type: integer\n          description: Maximum number of items to return in one page\n      required:\n        - dataset\n    DatasetObjSchema:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          readOnly: true\n          format: uuid\n          description: Unique identifier (UUID)\n        name:\n          type: string\n          description: A unique name label\n          example: my-dataset\n        agent_group_id:\n          type: string\n          format: uuid\n          description: Unique identifier (UUID) of an agent_group\n        agent_policy_id:\n          type: string\n          format: uuid\n          description: Unique identifier (UUID) of an agent_policy\n        sink_ids:\n          type: array\n          items:\n            type: string\n            format: uuid\n          minItems: 1\n          description: An array of one or more sink unique identifier\n        valid:\n          type: boolean\n          readOnly: true\n          description: Boolean field indicating whether the dataset is valid\n        tags:\n          type: object\n          description: User defined key/values for organization and searching\n          example:\n            region: eu\n            node_type: dns\n        ts_created:\n          type: string\n          readOnly: true\n          format: date-time\n          description: Timestamp of creation\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n",
			"canonicalURL": "/github.com/ns1labs/orb@005e98fee938cb3fea60ea6c7a55d36ff1d94721/-/blob/policies/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ns1labs/orb/blob/005e98fee938cb3fea60ea6c7a55d36ff1d94721/policies/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: parameters: \"Authorization\": at 1:46: parameter MUST contain either a schema property, or a content property"
}