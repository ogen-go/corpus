{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/SELab-2/OSOC-1"
		},
		"file": {
			"name": "osoc.yaml",
			"size": 0,
			"path": "docs/osoc.yaml",
			"byteSize": 64275,
			"content": "openapi: 3.0.0\ninfo:\n    version: '1.0.0'\n    title: 'OSOC'\n    license:\n        name: MIT\nservers:\n    -   url: 'http://localhost:8080/api'\npaths:\n    /editions:\n        post:\n            summary: Create a new inactive edition\n            description: Creates a new inactive edition with the given name\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            type: string\n                            example: OSOC 2022\n            responses:\n                201:\n                    description: Successful operation\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Edition\"\n                400:\n                    description: The edition already exists\n    /editions/active:\n        get:\n            summary: Get the active edition or null\n            description: |\n                Returns the currently active edition,\n                or null if there is no active edition.\n            responses:\n                200:\n                    description: Successful operation\n                    content:\n                        application/json:\n                            schema:\n                                type: string\n                                nullable: true\n                                default: edition name\n    /editions/inactive:\n        get:\n            summary: Get all inactive editions\n            description: Returns all editions that are currently inactive\n            responses:\n                200:\n                    description: Successful operation\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    type: string\n                                    default: edition name\n    /editions/{edition}/activate:\n        post:\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n            summary: Activate the given edition\n            description: |\n                Activate the given edition, making it the active edition.\n                There can only be one active edition at a time.\n                All endpoints can be used on active editions.\n            responses:\n                200:\n                    description: Successful operation\n                400:\n                    description: The edition is already active\n                403:\n                    description: There is another active edition\n                404:\n                    description: The edition does not exist\n    /editions/{edition}/inactivate:\n        post:\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n            summary: Inactivate the given edition (DANGEROUS)\n            description: |\n                Inactivate the given active edition.\n                Watch out! All existing coach users will have their accounts disabled!\n                Only GET and DELETE endpoints can be used on active editions,\n                and only by users with Admin permissions.\n            responses:\n                200:\n                    description: Successful operation\n                400:\n                    description: The edition is already inactive\n                404:\n                    description: The edition does not exist\n    /editions/{edition}:\n        get:\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n            summary: Get the given edition\n            description: |\n                Returns the Edition object with the given edition name, \n                or a 404 (NOT FOUND) if there is no such Edition.\n            responses:\n                200:\n                    description: Successful operation\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/Edition\"\n                404:\n                    description: The edition does not exist\n        delete:\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n            summary: Delete the given edition (DANGEROUS)\n            description: |\n                Deletes the given edition from the database.\n                Watch out! All data related to this edition will also be deleted.\n                This includes students and projects.\n                If this edition does not exist, returns a 404 (NOT FOUND) instead.\n            responses:\n                204:\n                    description: Successful operation\n                404:\n                    description: The edition does not exist\n    /{edition}/students:\n        get:\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n                -   in: query\n                    name: pageNumber\n                    schema:\n                        type: integer\n                    description: The page number for pagination, using offset pagination (see https://developer.box.com/guides/api-calls/pagination/offset-based/)\n                -   in: query\n                    name: pageSize\n                    schema:\n                        type: integer\n                    description: The page size for pagination. For example, if you pass 50 as value, there will be 50 students on one page\n                -   in: query\n                    name: sortBy\n                    schema:\n                        type: string\n                    description: The parameter to sort by. Sorting can be done on any parameter.\n                        The id, firstName and lastName fields are sorted alphabetically.\n                        Sorting on the status field will first return students with a Yes status, then Maybe, No and finally Undecided.\n                        Sorting on other parameters is nonsensical. Ties are broken randomly.\n                -   in: query\n                    name: name\n                    schema:\n                        type: string\n                    description: Part of a name of a student that you want to filter on (this string will be made lowercase and spaces will be removed, this is done to more easily get matches).\n                -   in: query\n                    name: status\n                    required: true\n                    schema:\n                        type: array\n                        items:\n                            $ref: '#/components/schemas/Status'\n                    description: Status to filter on, only students that have one of the given statuses will be shown (default value is all statuses).\n                -   in: query\n                    name: includeSuggested\n                    schema:\n                        type: boolean\n                    description: Whether or not to include students you have already added a suggestion for (default value is true)\n            summary: Get a list containing all Student objects\n            description: Get a list of all students in the database. This request cannot fail.\n            responses:\n                '200':\n                    description: successful operation\n                    content:\n                        application/json:\n                            schema:\n                                allOf:\n                                    -   $ref: '#/components/schemas/PagedCollection'\n                                    -   type: object\n                                        properties:\n                                            collection:\n                                                type: array\n                                                items:\n                                                    $ref: '#/components/schemas/Student'\n        post:\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n            summary: Add a new student to the database\n            description: |\n                Add a student to the database. The request body contains a json representation of a tally form.\n                A Student object will be generated from this form, this object will also be returned.\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/TallyForm'\n            responses:\n                '201':\n                    description: Successful operation.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Student'\n                    headers:\n                        Location:\n                            description: url to the newly created student object\n                            schema:\n                                type: string\n                                format: url\n                '400':\n                    description: Bad Request.\n    /{edition}/students/{studentId}:\n        get:\n            summary: Get Student by id\n            description: |\n                Returns the student with the corresponding id. If no such student exists,\n                returns a \"404: Not Found\" message instead.\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n                -   name: studentId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            responses:\n                '200':\n                    description: |\n                        The response if there is a student in the database with the given id.\n                        Returns the student in the response body.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Student'\n                '404':\n                    description: |\n                        The response if there is no student in the database with the given id.\n        delete:\n            summary: Delete Student by id\n            description: |\n                Deletes the student with the corresponding id. If no such student exists,\n                returns a \"404: Not Found\" message instead.\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n                -   name: studentId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            responses:\n                '204':\n                    description: |\n                        The response if there was a student in the database with the given id.\n                '404':\n                    description: |\n                        The response if there is no student in the database with the given id.\n    /{edition}/students/{studentId}/suggestions:\n        post:\n            summary: Suggest student status\n            description: |\n                Add a statusSuggestion to the student with the given id. If no such student exists,\n                returns a \"404: Not Found\" message instead. \n                Note that the status value can only be \"Yes\", \"Maybe\" or \"No\" (this is case-sensitive).\n                Any other value will result in a \"400: Bad Request\" response.\n                Importantly this includes the \"Undecided\" value. This is because it's not allowed\n                to suggest to change a student's status to Undecided.\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n                -   name: studentId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/StatusSuggestion\"\n            responses:\n                '204':\n                    description: |\n                        The response if there is a student in the database with the given id.\n                '401':\n                    description: |\n                        The response if the currently authenticated user doesn't match the coachId specified in the StatusSuggestion\n                '404':\n                    description: |\n                        The response if there is no student in the database with the given id.\n    /{edition}/students/{studentId}/suggestions/{coachId}:\n        delete:\n            summary: Delete student status suggestion\n            description: |\n                Deletes the statusSuggestion made by the coach identified by the given coachId \n                from the student with the given studentId. If either the student or the suggestion doesn't exist,\n                the method returns a \"404: Not Found\" message instead.\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n                -   name: studentId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n                -   name: coachId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            responses:\n                '204':\n                    description: |\n                        The response if the suggestion was successfully deleted.\n                '400':\n                    description: |\n                        The response if the given coach hasn't made a suggestion\n                        for the given student.\n                '401':\n                    description: |\n                        The response if the currently authenticated user attempts\n                        to delete a suggestion made by another user.\n                '404':\n                    description: |\n                        The response if the student specified by the given id\n                        didn't exist in the database.\n    /{edition}/students/{studentId}/status:\n        post:\n            summary: Set student status\n            description: |\n                Set the status of the student with the given id. If no such student exists,\n                returns a \"404: Not Found\" message instead. \n                The status should be passed in the request body as a JSON string \n                and can have the following values:  \n                \"Yes\", \"Maybe\", \"No\" or \"Undecided\"  \n                Any other input value will result in a \"400: Bad Request\" response. \n                These values are also case-sensitive.\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n                -   name: studentId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Status\"\n            responses:\n                '204':\n                    description: |\n                        The response if there is a student in the database with the given id.\n                '404':\n                    description: |\n                        The response if there is no student in the database with the given id.\n                '400':\n                    description: Bad Request. Request body does not contain either \"Yes\", \"No\", \"Maybe\" or \"Undecided\"\n    /{edition}/projects:\n        get:\n            summary: Get list containing all Project objects\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n                -   in: query\n                    required: true\n                    name: name\n                    schema:\n                        type: string\n                    description: |\n                        Part of a name of a project that you want to filter on\n                        (this string will be made lowercase and spaces will be removed).\n                -   in: query\n                    name: pageNumber\n                    schema:\n                        type: integer\n                    description: The page number for pagination, using offset pagination (see https://developer.box.com/guides/api-calls/pagination/offset-based/)\n                -   in: query\n                    name: pageSize\n                    schema:\n                        type: integer\n                    description: The page size for pagination. For example, if you pass 50 as value, there will be 50 projects on one page\n                -   in: query\n                    name: skills\n                    schema:\n                        type: array\n                        items:\n                            type: string\n                    description: Filter by skill, students that have atleast one of the skills listed are included\n                -   in: query\n                    name: alumnOnly\n                    schema:\n                        type: boolean\n                    description: Only return alumni students\n                -   in: query\n                    name: onlyStudentCoach\n                    schema:\n                        type: boolean\n                    description: Only returns student coach volunteers\n                -   in: query\n                    name: onlyNotAssigned\n                    schema:\n                        type: boolean\n                    description: Only return unassigned students\n            responses:\n                '200':\n                    description: successful operation\n                    content:\n                        application/json:\n                            schema:\n                                allOf:\n                                    -   $ref: '#/components/schemas/PagedCollection'\n                                    -   type: object\n                                        properties:\n                                            collection:\n                                                type: array\n                                                items:\n                                                    $ref: '#/components/schemas/Project'\n        post:\n            summary: Create a new project. Returns the created project object.\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Project'\n                        example:\n                            {\n                                \"name\": \"Project name\",\n                                \"clientName\": \"Client name\",\n                                \"description\": \"Description\",\n                                \"positions\": [\n                                    {\n                                        \"skill\": { \"skillName\": \"Backend\" },\n                                        \"amount\": \"2\"\n                                    },\n                                    {\n                                        \"skill\": { \"skillName\": \"Frontend\" },\n                                        \"amount\": \"1\"\n                                    }\n                                ]\n                            }\n            responses:\n                '201':\n                    description: |\n                        Successful operation.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Project'\n                    headers:\n                        Location:\n                            description: url to the newly created project\n                            schema:\n                                type: string\n                                format: url\n                '400':\n                    description: Bad Request.\n    /{edition}/projects/{projectId}:\n        get:\n            summary: Get Project by id\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n                -   name: projectId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            responses:\n                '200':\n                    description: successful operation\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Project'\n                '404':\n                    description: Not Found. No such projectId.\n        patch:\n            summary: Patch project\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n                -   name: projectId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Project'\n                        example:\n                              {\n                                  \"name\": \"Project name\",\n                                  \"clientName\": \"Client name\",\n                                  \"description\": \"Description\",\n                                  \"edition\": \"testEdition\",\n                                  \"positions\": [\n                                      {\n                                          \"skill\": { \"skillName\": \"Backend\" },\n                                          \"amount\": \"2\",\n                                          \"id\": \"6adf6cb3-6638-4771-a281-403c0bf3427a\"\n                                      },\n                                      {\n                                          \"skill\": { \"skillName\": \"Frontend\" },\n                                          \"amount\": \"1\",\n                                          \"id\": \"41e25173-f7cb-4c4b-b4e7-d12f30e5fbe3\"\n                                      }\n                                  ],\n                                  \"assignments\": [\n                                      \"http://localhost:8080/api/assignments/f9fefa13-80a3-439a-bf59-3cdacd60e2fc\"\n                                  ],\n                                  \"id\": \"68afaeef-48f4-4bf1-9ac7-a6a2c1bcf6d7\"\n                              }\n            responses:\n                '200':\n                    description: successful operation\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Project'\n                '400':\n                    description: the projectId in the path did not match the request body projectId\n                '403':\n                    description: an attempt was made to change the edition of the project this is forbidden\n                '404':\n                    description: Not Found. No such projectId.\n\n        delete:\n            summary: Remove project by id\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n                -   name: projectId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            responses:\n                '204':\n                    description: successful operation\n                '404':\n                    description: Not Found. No such projectId.\n    /{edition}/projects/{projectId}/students:\n        get:\n            summary: Get all students from a project\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n                -   name: projectId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            responses:\n                '200':\n                    description: successful operation\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    $ref: '#/components/schemas/Student'\n                '404':\n                    description: Not Found. No such projectId.\n\n        post:\n            summary: Draft student for project\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n                -   name: projectId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            description: studentId\n                            type: string\n                            format: uuid\n            responses:\n                '204':\n                    description: successful operation\n                '404':\n                    description: Not Found. No such projectId.\n                '400':\n                    description: Bad Request.\n    /{edition}/projects/{projectId}/students/{studentId}:\n        delete:\n            summary: Remove student from project\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n                -   name: projectId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n                -   name: studentId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            responses:\n                '200':\n                    description: successful operation\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    $ref: '#/components/schemas/User'\n                '404':\n                    description: Not Found. No such projectId or studentId.\n    /{edition}/projects/{projectId}/coaches:\n        get:\n            summary: Get all coaches of a project\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n                -   name: projectId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n                        description: Not Found. No such projectId.\n            responses:\n                '200':\n                    description: successful operation\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    $ref: '#/components/schemas/User'\n                '404':\n                    description: Not Found. No such projectId.\n        post:\n            summary: Assign a coach to a project\n            description: Assign a coach to a project, coachId is given in the request body.\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n                -   name: projectId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            description: coachId\n                            type: string\n                            format: uuid\n            responses:\n                '204':\n                    description: successful operation\n                '404':\n                    description: No such projectId or coachId.\n                '400':\n                    description: Bad Request.\n    /{edition}/projects/{projectId}/coaches/{coachId}:\n        delete:\n            summary: Remove a coach from a project\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n                -   name: projectId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n                -   name: coachId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            responses:\n                '204':\n                    description: successful operation\n                '404':\n                    description: Not Found. No such projectId or coachId.\n    /{edition}/projects/{projectId}/assignments:\n        post:\n            summary: Add a new student assignment\n            description: Assign a student to a position of a project. Request body expects a studentId, a positionId, a userId and a reason.\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n                -   name: projectId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Assignment'\n            responses:\n                '200':\n                    description: succesful operation\n                '404':\n                    description: Not Found. No such projectId.\n                '400':\n                    description: Bad Request.\n    /{edition}/projects/{projectId}/assignments/{assignmentId}:\n        delete:\n            summary: Remove a student assignment from a project\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n                -   name: projectId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n                -   name: assignmentId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            responses:\n                '204':\n                    description: succesful operation\n                '404':\n                    description: Not Found. No such projectId or assignmentId.\n    /{edition}/projects/conflicts:\n        get:\n            summary: Get all project-conflicts (a conflict occurs when a student is assigned to multiple projects at the same time)\n            parameters:\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n            responses:\n                '200':\n                    description: successful operation\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    $ref: '#/components/schemas/Conflict'\n                            example:\n                                student: \"https://example.com/api/OSOC2022/students/abb97568-ac54-11ec-b909-0242ac120002\"\n                                projects: [ \"https://example.com/api/OSOC2022/projects/afc1e1cc-ac54-11ec-b909-0242ac120002\",\n                                            \"https://example.com/api/OSOC2022/projects/b6a81d12-ac54-11ec-b909-0242ac120002\" ]\n\n    /{edition}/communications/{communicationId}:\n        get:\n            summary: Get Communications by id\n            description: |\n                Returns the communication with the corresponding  id.\n                If no such communication exists,\n                returns a \"404: Not Found\" message instead.\n            parameters:\n                -   name: communicationId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n            responses:\n                '200':\n                    description: |\n                        The response if there is a communication in the database with the given id.\n                        Returns the communication in the response body.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Communication'\n                '404':\n                    description: |\n                        The response if there is no communication in the database with the given id.\n    /{edition}/communications/{studentId}:\n        post:\n            summary: Add a new communication with a student\n            description: |\n                Add a communication to the database.\n                The created communication object is returned.\n            parameters:\n                -   name: studentId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n                -   in: path\n                    required: true\n                    name: edition\n                    schema:\n                        type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Communication'\n            responses:\n                '201':\n                    description: successful operation\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Communication'\n                    headers:\n                        Location:\n                            description: url to the newly created communication\n                            schema:\n                                type: string\n                                format: url\n                '404':\n                    description: |\n                        The response if there is no student in the database with the given student id.\n    /users:\n        get:\n            summary: Get list containing all users\n            responses:\n                '200':\n                    description: succesful operation\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    $ref: '#/components/schemas/User'\n        post:\n            summary: Add a new user to database\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/User'\n            responses:\n                '201':\n                    description: succesful operation\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/User'\n                    headers:\n                        Location:\n                            description: url to the newly created User\n                            schema:\n                                type: string\n                                format: url\n    /users/{userId}:\n        get:\n            summary: get User by id\n            parameters:\n                -   name: userId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            responses:\n                '200':\n                    description: succesful operation.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/User'\n                '404':\n                    description: Not Found. No such userId.\n        patch:\n            summary: update User by id\n            parameters:\n                -   name: userId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/User'\n            responses:\n                '200':\n                    description: succesful operation\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/User'\n                    headers:\n                        Location:\n                            schema:\n                                description: url to the updated User.\n                                type: string\n                                format: url\n\n                '400':\n                    description: Bad request\n                '404':\n                    description: Not Found. No such userId.\n        delete:\n            summary: delete user by id\n            parameters:\n                -   name: userId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            responses:\n                '204':\n                    description: succesful operation\n                '404':\n                    description: Not Found. No such userId.\n    /users/{userId}/role:\n        post:\n            summary: change role of user\n            parameters:\n                -   name: userId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            type: string\n                            enum: [ Disabled, Coach, Admin ]\n            responses:\n                '200':\n                    description: succesful operation\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/User'\n                '404':\n                    description: NOT FOUND\n                '400':\n                    description: Bad Request.\n    /assignments/{assignmentId}:\n        get:\n            summary: Get Assignment by id\n            description: |\n                Returns the assignment with the corresponding id. If no such assignment exists,\n                returns a \"404: Not Found\" message instead.\n            parameters:\n                -   name: assignmentId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            responses:\n                '200':\n                    description: |\n                        The response if there is a assignment in the database with the given id.\n                        Returns the assignment in the response body.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Assignment'\n                '404':\n                    description: |\n                        The response if there is no assignment in the database with the given id.\n    /positions/{positionId}:\n        get:\n            summary: Get Position by id\n            description: |\n                Returns the position with the corresponding id. If no such position exists,\n                returns a \"404: Not Found\" message instead.\n            parameters:\n                -   name: positionId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            responses:\n                '200':\n                    description: |\n                        The response if there is a position in the database with the given id.\n                        Returns the position in the response body.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Position'\n                '404':\n                    description: |\n                        The response if there is no position in the database with the given id.\n    /statusSuggestions/{statusSuggestionId}:\n        get:\n            summary: Get StatusSuggestions by id\n            description: |\n                Returns the statusSuggestion with the corresponding id. If no such statusSuggestion exists,\n                returns a \"404: Not Found\" message instead.\n            parameters:\n                -   name: statusSuggestionId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            responses:\n                '200':\n                    description: |\n                        The response if there is a statusSuggestion in the database with the given id.\n                        Returns the statusSuggestion in the response body.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/StatusSuggestion'\n                '404':\n                    description: |\n                        The response if there is no statusSuggestion in the database with the given id.\n    /answers/{answerId}:\n        get:\n            summary: Get Answer by id\n            description: |\n                Returns the Answer with the corresponding id. If no such Answer exists,\n                returns a \"404: Not Found\" message instead.\n            parameters:\n                -   name: answerId\n                    required: true\n                    in: path\n                    schema:\n                        type: string\n                        format: uuid\n            responses:\n                '200':\n                    description: |\n                        The response if there is an answer in the database with the given id.\n                        Returns the Answer in the response body.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Answer'\n                '404':\n                    description: |\n                        The response if there is no Answer in the database with the given id.\n    /skills:\n        get:\n            responses:\n                '200':\n                    description: Get all Skill objects stored in the database.\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    $ref: '#/components/schemas/Skill'\n    /login:\n        post:\n            summary: login to the user with the correct email and password\n            requestBody:\n                content:\n                    application/x-www-form-urlencoded:\n                        schema:\n                            type: object\n                            properties:\n                                email:\n                                    type: string\n                                password:\n                                    type: string\n            responses:\n                '200':\n                    description: Successful operation.\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    accessToken:\n                                        type: string\n                                    refreshToken:\n                                        type: string\n                                    accessTokenTTL:\n                                        type: integer\n                                        format: date\n                                    user:\n                                        $ref: '#/components/schemas/User'\n                '401':\n                    description: |\n                        The response if authorization has failed.\n    /logout:\n      post:\n        summary: log user out. invalidate http session, refresh token and redirect to /login?logout\n        responses:\n          '302':\n            description: logout successful, redirect to /login?logout\n          '400':\n            description:\n              Bad Request.\n    /token/refresh:\n        post:\n            summary: renew access token using refresh token\n            requestBody:\n                content:\n                    application/x-www-form-urlencoded:\n                        schema:\n                            type: object\n                            properties:\n                                refreshToken:\n                                    type: string\n                            required:\n                                - refreshToken\n            responses:\n                '200':\n                    description: sucessful operation\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    accessToken:\n                                        type: string\n                                    refreshToken:\n                                        type: string\n                                    accessTokenTTL:\n                                        type: integer\n                '400':\n                    description: Bad Request.\ncomponents:\n    schemas:\n        Student:\n            type: object\n            required:\n                - id\n                - firstname\n                - lastname\n                - skills\n                - alumn\n                - answers\n                - status\n                - statusSuggestions\n                - communications\n            properties:\n                id:\n                    type: string\n                    format: uuid\n                    readOnly: true\n                firstName:\n                    type: string\n                    example: John\n                lastName:\n                    type: string\n                    example: Doe\n                status:\n                    readOnly: true\n                    allOf:\n                        -   $ref: '#/components/schemas/Status'\n                statusSuggestions:\n                    readOnly: true\n                    type: array\n                    items:\n                        type: string\n                        format: 'https://example.com/api/statusSuggestions/{statusSuggestionId}'\n                        example: 'https://example.com/api/statusSuggestions/6ea082fd-b0f2-4ec6-a05c-6a4e4a02e4eb'\n                communications:\n                    readOnly: true\n                    type: array\n                    items:\n                        type: string\n                        format: 'https://example.com/api/communications/{communicationId}'\n                        example: 'https://example.com/api/communications/f9cdd786-d6a8-4f34-a796-4d55b099f785'\n                alumn:\n                    type: boolean\n                    default: false\n                answers:\n                    type: array\n                    items:\n                        type: string\n                        format: 'https://example.com/api/answers/{answerId}'\n                        example: 'https://example.com/api/answers/f7b77e33-e69b-4743-a97e-b21acf542e50'\n                skills:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Skill'\n        Answer:\n            type: object\n            properties:\n                id:\n                    type: string\n                    format: uuid\n                key:\n                    type: string\n                    example: \"question_3X4q1V\"\n                question:\n                    type: string\n                    example: \"Which role are you applying for?\"\n                answer:\n                    type: array\n                    items:\n                        type: string\n                    example: [ \"Front-end Developer\", \"Back-end Developer\" ]\n        TallyForm:\n            type: object\n            required:\n                - data\n            properties:\n                data:\n                    type: object\n                    properties:\n                        fields:\n                            type: array\n                            items:\n                                type: object\n                                properties:\n                                    key:\n                                        type: string\n                                        example: \"question_3X4q1V\"\n                                    label:\n                                        type: string\n                                        example: Which role are you applying for?\n                                    \"type\":\n                                        type: string\n                                        example: \"CHECKBOXES\"\n                                    value:\n                                        type: object\n                                        example: [ \"19b68be9-6c2b-41f8-95f6-439cfb20f792\" ]\n                                    options:\n                                        type: array\n                                        items:\n                                            type: object\n                                            properties:\n                                                id:\n                                                    type: string\n                                                    format: uuid\n                                                text:\n                                                    type: string\n                                        example:\n                                          [\n                                              {\n                                                  \"id\": \"2fd881eb-68de-4012-988d-7957de663c4f\",\n                                                  \"text\": \"Front-end developer\"\n                                              },\n                                              {\n                                                  \"id\": \"19b68be9-6c2b-41f8-95f6-439cfb20f792\",\n                                                  \"text\": \"Back-end developer\"\n                                              },\n                                              {\n                                                  \"id\": \"d27de5b9-3370-44e6-b114-60ddc243a4d8\",\n                                                  \"text\": \"UX / UI designer\"\n                                              },\n                                              {\n                                                  \"id\": \"eb4b0022-4673-4f96-9c15-c01d870a253f\",\n                                                  \"text\": \"Graphic designer\"\n                                              },\n                                              {\n                                                  \"id\": \"f812f2d5-b438-49f4-9d95-0b415add300f\",\n                                                  \"text\": \"Business Modeller\"\n                                              },\n                                              {\n                                                  \"id\": \"3f34960d-1248-49ca-b6c7-fed702c73979\",\n                                                  \"text\": \"Storyteller\"\n                                              },\n                                              {\n                                                  \"id\": \"9bcb7761-3c86-4ea2-8abc-d45187a007ee\",\n                                                  \"text\": \"Marketer\"\n                                              },\n                                              {\n                                                  \"id\": \"5df0feb4-87ce-4767-bf99-092c27bc9b24\",\n                                                  \"text\": \"Copywriter\"\n                                              },\n                                              {\n                                                  \"id\": \"ee956527-6f34-479e-89a8-feb5e73d8979\",\n                                                  \"text\": \"Video editor\"\n                                              },\n                                              {\n                                                  \"id\": \"aa26de30-7ec2-4255-a949-0e5388dd58be\",\n                                                  \"text\": \"Photographer\"\n                                              },\n                                              {\n                                                  \"id\": \"ce472fdf-723c-4b94-bcad-a9136d0d8443\",\n                                                  \"text\": \"Other\"\n                                              }\n                                          ]\n        Project:\n            type: object\n            required:\n                - id\n                - name\n                - clientName\n                - description\n                - coaches\n                - positions\n                - assignments\n            properties:\n                id:\n                    type: string\n                    format: uuid\n                    readOnly: true\n                name:\n                    type: string\n                    example: Selection tool\n                clientName:\n                    type: string # Later on this could be a different schema if clients need to be saved in the database\n                    example: OSOC\n                description:\n                    type: string\n                    example: desc\n                coaches:\n                    type: array\n                    items:\n                        type: string\n                        format: 'https://example.com/api/users/{coachId}'\n                        example: 'https://example.com/api/users/f9cdd786-d6a8-4f34-a796-4d55b099f785'\n                positions:\n                    type: array\n                    items:\n                        type: string\n                        format: 'https://example.com/api/positions/{positionId}'\n                        example: 'https://example.com/api/positions/e1dfbe14-d0eb-4331-9ccf-2210b2e2c652'\n                assignments:\n                    type: array\n                    items:\n                        type: string\n                        format: 'https://example.com/api/assignments/{assignmentId}'\n                        example: 'https://example.com/api/positions/b9e314e7-e5a8-4de1-aeed-7ff5a9106625'\n        Communication:\n            type: object\n            required:\n                - id\n                - message\n                - type\n            properties:\n                id:\n                    type: string\n                    format: uuid\n                    readOnly: true\n                message:\n                    type: string\n                    example: Lorum ipsum\n                type:\n                    allOf:\n                        -   $ref: '#/components/schemas/CommunicationType'\n        CommunicationType:\n            type: string\n            enum: [ Email ]\n        User:\n            type: object\n            required:\n                - id\n                - username\n                - email\n                - password\n                - role\n            properties:\n                id:\n                    type: string\n                    format: uuid\n                    readOnly: true\n                username:\n                    type: string\n                    example: john_doe\n                email:\n                    type: string\n                    example: johndoe@mail.com\n                role:\n                    type: string\n                    enum: [ Disabled, Coach, Admin ]\n                    example: Coach\n                password:\n                    type: string\n                    format: bcrypt\n                    example: $2y$10$jntFfHuty8K6FmacwTES3eRJcIma5Almb8z/aEl/prZ246MXqCE1O\n        Status:\n            type: string\n            enum: [ Yes, Maybe, No, Undecided ]\n        StatusSuggestion:\n            type: object\n            required:\n                - suggester\n                - status\n                - motivation\n            properties:\n                suggester:\n                    type: string\n                    format: https://example.com/api/users/{userId}\n                    example: https://example.com/api/users/389a58ce-6bc2-496e-bea1-4991cd598651\n                status:\n                    type: string\n                    enum: [ Yes, Maybe, No ]\n                motivation:\n                    type: string\n        Skill:\n            type: object\n            required:\n                - skillName\n            properties:\n                skillName:\n                    type: string\n                    example: Back-end developer\n        Position:\n            type: object\n            required:\n                - id\n                - skill\n                - amount\n            properties:\n                id:\n                    type: string\n                    format: uuid\n                    readOnly: true\n                skill:\n                    $ref: '#/components/schemas/Skill'\n                amount:\n                    type: integer\n                    example: 1\n        Assignment:\n            type: object\n            required:\n                - id\n                - student\n                - position\n                - suggester\n                - reason\n            properties:\n                id:\n                    type: string\n                    format: uuid\n                    readOnly: true\n                student:\n                    type: string\n                    format: https://example.com/api/students/{studentId}\n                    example: https://example.com/api/students/8b409406-6f82-4f2f-9b02-62326e733877\n                position:\n                    type: string\n                    format: https://example.com/api/positions/{positionId}\n                    example: https://example.com/api/positions/8b409406-6f82-4f2f-9b02-62326e733877\n                suggester:\n                    type: string\n                    format: https://example.com/api/users/{suggesterId}\n                    example: https://example.com/api/users/7116cc59-d205-4e8e-b975-06063e9744a6\n                reason:\n                    type: string\n                    example: Lorum ipsum\n        Conflict:\n            type: object\n            required:\n                - student\n                - projects\n            properties:\n                student:\n                    type: string\n                    format: https://example.com/api/students/{studentId}\n                    example: https://example.com/api/students/abb97568-ac54-11ec-b909-0242ac120002\n                projects:\n                    type: array\n                    items:\n                        type: string\n                        format: https://example.com/api/projects/{projectId}\n                    example: [ \"https://example.com/api/projects/afc1e1cc-ac54-11ec-b909-0242ac120002\", \"https://example.com/api/projects/b6a81d12-ac54-11ec-b909-0242ac120002\" ]\n        PagedCollection:\n            type: object\n            required:\n                - collection\n                - totalLength\n            properties:\n                totalLength:\n                    type: integer\n                    example: 1\n        Edition:\n            type: object\n            required:\n                - name\n                - isActive\n            properties:\n                name:\n                    type: string\n                    example: OSOC 2022\n                isActive:\n                    type: boolean\n    securitySchemes:\n        BasicAuth:\n            type: http\n            scheme: basic\nsecurity:\n    -   BasicAuth: [ ]\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"Status\": parse enum values: parse value \"true\": expected type \"string\", got \"bool\""
}