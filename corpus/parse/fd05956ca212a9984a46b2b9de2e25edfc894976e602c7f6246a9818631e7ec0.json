{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/radiantearth/stac-api-spec"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "ogcapi-features/extensions/transaction/openapi.yaml",
			"byteSize": 11673,
			"content": "openapi: 3.0.1\ninfo:\n  title: The SpatioTemporal Asset Catalog API - Transaction\n  version: 1.0.0-rc.1\n  description: \u003e-\n    This is an OpenAPI definition of the SpatioTemporal Asset Catalog API Transaction\n    specification.\n  contact:\n    name: STAC Specification\n    url: 'http://stacspec.org'\n  license:\n    name: Apache License 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0'\ntags:\n  - name: Transaction\n    description: \u003e-\n      STAC-specific operations to add, remove, and edit items within OGC API - Features\n      collections.\npaths:\n  '/collections/{collectionId}/items':\n    parameters:\n      - $ref: '../../openapi.yaml#/components/parameters/collectionId'\n    post:\n      summary: add a new STAC Item or Items in an ItemCollection to a collection\n      description: create a new STAC Item r Items in an ItemCollection in a specific collection\n      operationId: postFeature\n      tags:\n        - Transaction\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/postOrPutItemCollection'\n                - $ref: '#/components/schemas/postOrPutItem'\n      responses:\n        '201':\n          description: Status of the create request.\n          headers:\n            Location:\n              description: The URL of the newly added resource (i.e. path of the resource end point)\n              schema:\n                type: string\n                format: url\n            ETag:\n              schema:\n                type: string\n              description: A string to ensure the item has not been modified\n          content:\n            application/json:\n              schema:\n                $ref: '../../../core/commons.yaml#/components/schemas/item'\n        '202':\n          description: The item was accepted for asynchronous action\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '404':\n          $ref: '../../openapi.yaml#/components/responses/NotFound'\n        '500':\n          $ref: '../../openapi.yaml#/components/responses/ServerError'\n        default:\n          description: An error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '../../../core/commons.yaml#/components/schemas/exception'\n  '/collections/{collectionId}/items/{featureId}':\n    parameters:\n      - $ref: '../../openapi.yaml#/components/parameters/collectionId'\n      - $ref: '../../openapi.yaml#/components/parameters/featureId'\n    get:\n      tags:\n        - Transaction\n      description: |-\n        Fetch the feature with id `featureId` in the feature collection\n        with id `collectionId`.\n      operationId: getFeature\n      responses:\n        '200':\n          description: Adds a ETag header to the response specified in STAC API - Features\n          headers:\n            ETag:\n              schema:\n                type: string\n              description: A string to ensure the item has not been modified\n    put:\n      summary: update an existing feature by Id with a complete item definition\n      description: \u003e-\n        Use this method to update an existing feature. Requires the entire\n        GeoJSON  description be submitted.\n      operationId: updateFeature\n      tags:\n        - Transaction\n      parameters:\n        - $ref: '#/components/parameters/IfMatch'\n      requestBody:\n        description: The request body must contain a representation of the replacement item.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/postOrPutItem'\n      responses:\n        '200':\n          description: The item was replaced\n          headers:\n            ETag:\n              schema:\n                type: string\n              description: An updated string to track changes\n          content:\n            application/json:\n              schema:\n                $ref: '../../../core/commons.yaml#/components/schemas/item'\n        '202':\n          description: The item was accepted for asynchronous action\n        '204':\n          description: The item was replaced\n          headers:\n            ETag:\n              schema:\n                type: string\n              description: An updated string to track changes\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '404':\n          $ref: '../../openapi.yaml#/components/responses/NotFound'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '500':\n          $ref: '../../openapi.yaml#/components/responses/ServerError'\n        default:\n          description: An error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '../../../core/commons.yaml#/components/schemas/exception'\n    patch:\n      summary: update an existing feature by Id with a partial item definition\n      description: \u003e-\n        Use this method to update an existing feature. Requires a GeoJSON\n        fragment (containing the fields to be updated) be submitted.\n      operationId: patchFeature\n      tags:\n        - Transaction\n      parameters:\n        - $ref: '#/components/parameters/IfMatchOptional'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/patchItem'\n      responses:\n        '200':\n          description: The item was replaced\n          headers:\n            ETag:\n              schema:\n                type: string\n              description: An updated string to track changes\n          content:\n            application/json:\n              schema:\n                $ref: '../../../core/commons.yaml#/components/schemas/item'\n        '202':\n          description: The item was accepted for asynchronous action\n        '204':\n          description: Status of the update request.\n          headers:\n            ETag:\n              schema:\n                type: string\n              description: A string to ensure the item has not been modified\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '404':\n          $ref: '../../openapi.yaml#/components/responses/NotFound'\n        '500':\n          $ref: '../../openapi.yaml#/components/responses/ServerError'\n        default:\n          description: An error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '../../../core/commons.yaml#/components/schemas/exception'\n    delete:\n      summary: delete an existing feature by Id\n      description: Use this method to delete an existing feature.\n      operationId: deleteFeature\n      tags:\n        - Transaction\n      parameters:\n        - $ref: '#/components/parameters/IfMatch'\n      responses:\n        '200':\n          description: The resource was deleted.\n        '202':\n          description: The operation was accepted for asynchronous executiona.\n        '204':\n          description: The resource was deleted. \n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '404':\n          $ref: '../../openapi.yaml#/components/responses/NotFound'\n        '500':\n          $ref: '../../openapi.yaml#/components/responses/ServerError'\n        default:\n          description: An error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '../../../core/commons.yaml#/components/schemas/exception'\ncomponents:\n  parameters:\n    IfMatch:\n      name: If-Match\n      in: header\n      description: \u003e-\n        Only take the action if the ETag of the item still matches\n      required: true\n      schema:\n        type: string\n    IfMatchOptional:\n      name: If-Match\n      in: header\n      description: \u003e-\n        Only take the action if the ETag of the item still matches\n      required: false\n      schema:\n        type: string\n  schemas:\n    patchItem:\n      description: \u003e-\n        An object that contains at least a subset of the fields for a STAC Item.\n      type: object\n      properties:\n        stac_version:\n          $ref: '../../../core/commons.yaml#/components/schemas/stac_version'\n        stac_extensions:\n          $ref: '../../../core/commons.yaml#/components/schemas/stac_extensions'\n        id:\n          $ref: '../../../core/commons.yaml#/components/schemas/itemId'\n        bbox:\n          $ref: '../../../core/commons.yaml#/components/schemas/bbox'\n        geometry:\n          $ref: '../../../core/commons.yaml#/components/schemas/geometryGeoJSON'\n        type:\n          $ref: '../../../core/commons.yaml#/components/schemas/itemType'\n        properties:\n          $ref: '#/components/schemas/patchItemProperties'\n        links:\n          type: array\n          items:\n            $ref: '../../../core/commons.yaml#/components/schemas/link'\n        assets:\n          $ref: '../../../core/commons.yaml#/components/schemas/assets'\n    patchItemProperties:\n      description: \u003e-\n        An object that contains at least a subset of a valid STAC Item Properties object.\n      type: object\n      additionalProperties: true\n      properties:\n        datetime:\n          $ref: '../../../core/commons.yaml#/components/schemas/datetime'\n    postOrPutItemCollection:\n      description: \u003e-\n        A GeoJSON FeatureCollection augmented with foreign members that contain values relevant to a STAC entity\n      type: object\n      required:\n        - features\n        - type\n      properties:\n        type:\n          type: string\n          enum:\n            - FeatureCollection\n        features:\n          type: array\n          items:\n            $ref: '#/components/schemas/postOrPutItem'\n        links:\n          description: \u003e-\n            An array of links. Can be used for pagination, e.g. by providing a link\n            with the `next` relation type.\n          type: array\n          items:\n            $ref: '../../../core/commons.yaml#/components/schemas/link'\n          example:\n            - rel: next\n              href: \u003e-\n                http://api.cool-sat.com/search?next=ANsXtp9mrqN0yrKWhf-y2PUpHRLQb1GT-mtxNcXou8TwkXhi1Jbk\n    postOrPutItem:\n      description: \u003e-\n        An object that is a valid GeoJSON Feature, but not necessarily a valid STAC Item.\n      type: object\n      required:\n        - stac_version\n        - id\n        - type\n        - geometry\n        - properties\n      properties:\n        stac_version:\n          $ref: '../../../core/commons.yaml#/components/schemas/stac_version'\n        stac_extensions:\n          $ref: '../../../core/commons.yaml#/components/schemas/stac_extensions'\n        id:\n          $ref: '../../../core/commons.yaml#/components/schemas/itemId'\n        bbox:\n          $ref: '../../../core/commons.yaml#/components/schemas/bbox'\n        geometry:\n          $ref: '../../../core/commons.yaml#/components/schemas/geometryGeoJSON'\n        type:\n          $ref: '../../../core/commons.yaml#/components/schemas/itemType'\n        properties:\n          $ref: '../../../core/commons.yaml#/components/schemas/properties'\n        links:\n          type: array\n          items:\n            $ref: '../../../core/commons.yaml#/components/schemas/link'\n        assets:\n          $ref: '../../../core/commons.yaml#/components/schemas/assets'\n  responses:\n    BadRequest:\n      description: The request was malformed or semantically invalid\n      content:\n        application/json:\n          schema:\n            $ref: '../../../core/commons.yaml#/components/schemas/exception'\n    PreconditionFailed:\n      description: Some condition specified by the request could not be met in the server\n      content:\n        application/json:\n          schema:\n            $ref: '../../../core/commons.yaml#/components/schemas/exception'\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"postOrPutItem\": parse schema: property \"assets\": parse schema: resolve \"../../../core/commons.yaml#/components/schemas/assets\": external \"../../../core/commons.yaml\": file: local file reference is not allowed"
}