{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OpenAPITools/openapi-generator"
		},
		"file": {
			"name": "openapi-v3.yaml",
			"size": 0,
			"path": "modules/openapi-generator/src/test/resources/3_0/rust-server/openapi-v3.yaml",
			"byteSize": 16390,
			"content": "# Test the mainline function of OpenAPI v3 specification.\n#\n# This includes the XML part of the OpenAPI specification, as found at\n# https://swagger.io/docs/specification/data-models/representing-xml/\n#\n# Specifically, these tests are intended to include:\n#   - namespaces\n#   - arrays\n#     - as the whole response body\n#     - within another object\n#     - wrapping and renaming to and from camelCase and snake_case\n#   - objects\n#     - renaming to and from camelCase and snake_case\n#   - UUIDs\n#   - Octet Streams\n\nopenapi: 3.0.1\ninfo:\n  title: My title\n  description: API under test\n  version: 1.0.7\npaths:\n  /xml:\n    post:\n      summary: Post an array\n      description: ''\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/xml_array'\n      responses:\n        '201':\n          description: 'OK'\n        '400':\n          description: Bad Request\n    put:\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/xml_object'\n      responses:\n        '201':\n          description: 'OK'\n        '400':\n          description: Bad Request\n  /paramget:\n    get:\n      summary: Get some stuff with parameters.\n      parameters:\n      - description: The stuff to get\n        explode: false\n        in: query\n        name: uuid\n        required: false\n        schema:\n          $ref: \"#/components/schemas/UuidObject\"\n        style: form\n      - description: Some object to pass as query parameter\n        explode: false\n        in: query\n        name: someObject\n        required: false\n        schema:\n          $ref: \"#/components/schemas/ObjectParam\"\n        style: form\n      - description: Some list to pass as query parameter\n        explode: false\n        in: query\n        name: someList\n        required: false\n        schema:\n          $ref: \"#/components/schemas/MyIDList\"\n        style: form\n      responses:\n        200:\n          description: JSON rsp\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/anotherXmlObject\"\n  /multiget:\n    get:\n      summary: Get some stuff.\n      responses:\n        200:\n          description: JSON rsp\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/anotherXmlObject\"\n        201:\n          description: XML rsp\n          content:\n            application/xml:\n              schema:\n                type: object\n                properties:\n                  foo:\n                    type: string\n        202:\n          description: octet rsp\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        203:\n          description: string rsp\n          content:\n            text/plain:\n              schema:\n                type: string\n        204:\n          description: Duplicate Response long text. One.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/anotherXmlObject\"\n        205:\n          description: Duplicate Response long text. Two.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/anotherXmlObject\"\n        206:\n          description: Duplicate Response long text. Three.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/anotherXmlObject\"\n  /xml_other:\n    post:\n      requestBody:\n        content:\n          text/xml:\n            schema:\n              $ref: '#/components/schemas/anotherXmlObject'\n      responses:\n        '201':\n          description: 'OK'\n          content:\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/anotherXmlObject\"\n        '400':\n          description: Bad Request\n    put:\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/anotherXmlArray'\n      responses:\n        '201':\n          description: 'OK'\n        '400':\n          description: Bad Request\n  /xml_extra:\n    post:\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/duplicate_xml_object'\n      responses:\n        '201':\n          description: 'OK'\n        '400':\n          description: Bad Request\n  /uuid:\n    get:\n      responses:\n        200:\n          description: Duplicate Response long text. One.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UuidObject\"\n  /required_octet_stream:\n    put:\n      requestBody:\n        required: true\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: byte\n      responses:\n        '200':\n          description: 'OK'\n  /readonly_auth_scheme:\n    get:\n      security:\n        - authScheme: [\"test.read\"]\n      responses:\n        200:\n          description: Check that limiting to a single required auth scheme works\n  /multiple_auth_scheme:\n    get:\n      security:\n        - authScheme: [\"test.read\", \"test.write\"]\n      responses:\n        200:\n          description: Check that limiting to multiple required auth schemes works\n  /untyped_property:\n    get:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ObjectUntypedProps'\n      responses:\n        200:\n          description: Check that untyped properties works\n  /responses_with_headers:\n    get:\n      responses:\n        '200':\n          description: 'Success'\n          content:\n            'application/json':\n              schema:\n                type: String\n          headers:\n            Success-Info:\n              schema:\n                type: String\n              required: true\n            Bool-Header:\n              schema:\n                type: bool\n            Object-Header:\n              schema:\n                $ref: \"#/components/schemas/ObjectHeader\"\n        '412':\n          description: Precondition Failed\n          headers:\n            Further-Info:\n              schema:\n                type: String\n            Failure-Info:\n              schema:\n                type: String\n  /mandatory-request-header:\n    get:\n      parameters:\n        - name: X-Header\n          in: header\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n  /register-callback:\n    post:\n      parameters:\n        - name: url\n          in: query\n          required: true\n          schema:\n            type: string\n            format: uri\n      callbacks:\n        callback:\n          '{$request.query.url}/callback':\n            post:\n              responses:\n                '204':\n                  description: OK\n      responses:\n        '204':\n          description: OK\n  /callback-with-header:\n    post:\n      parameters:\n        - name: url\n          in: query\n          required: true\n          schema:\n            type: string\n            format: uri\n      callbacks:\n        callback:\n          '{$request.query.url}/callback-with-header':\n            post:\n              parameters:\n                - name: Information\n                  in: header\n                  schema:\n                    type: string\n              responses:\n                '204':\n                  description: OK\n      responses:\n        '204':\n          description: OK\n  /rfc7807:\n    get:\n      responses:\n        '204':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ObjectWithArrayOfObjects'\n        '404':\n          description: NotFound\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/ObjectWithArrayOfObjects'\n        '406':\n          description: NotAcceptable\n          content:\n            application/problem+xml:\n              schema:\n                $ref: '#/components/schemas/ObjectWithArrayOfObjects'\n  /merge-patch-json:\n    get:\n      responses:\n        200:\n          description: merge-patch+json-encoded response\n          content:\n            application/merge-patch+json:\n              schema:\n                $ref: \"#/components/schemas/anotherXmlObject\"\n  /enum_in_path/{path_param}:\n    get:\n      parameters:\n        - name: path_param\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/StringEnum'\n      responses:\n        '200':\n          description: Success\n  /override-server:\n    get:\n      servers:\n        - \"url\": \"/override\"\n      responses:\n        \"204\":\n          description: Success.\n  /complex-query-param:\n    get:\n      parameters:\n        - name: list-of-strings\n          in: query\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/StringObject'\n      responses:\n        '200':\n          description: Success\n  /repos/{repoId}:\n    parameters:\n      - in: path\n        name: repoId\n        schema:\n          type: string\n        required: true\n    get:\n      tags: [repo, Info]\n      operationId: GetRepoInfo\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StringObject\"\n  /repos:\n    post:\n      tags: [Repo]\n      operationId: CreateRepo\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ObjectParam\"\n            example:\n              # Properties of a referenced object\n              requiredParam: true\n      responses:\n        '200':\n          description: Success\n  /one-of:\n    get:\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - type: integer\n                  - type: array\n                    items:\n                      type: string\n  /any-of:\n    get:\n      parameters:\n        - name: any-of\n          in: query\n          description: list of any of objects\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/AnyOfObject'\n            minItems: 1\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AnyOfObject\"\n        '201':\n          description: AlternateSuccess\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/12345AnyOfObject\"\n        '202':\n          description: AnyOfSuccess\n          content:\n            application/json:\n              schema:\n                anyOf:\n                  - $ref: \"#/components/schemas/StringObject\"\n                  - $ref: \"#/components/schemas/UuidObject\"\n  /json-complex-query-param:\n    get:\n      parameters:\n        - name: list-of-strings\n          in: query\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/StringObject'\n      responses:\n        '200':\n          description: Success\n\ncomponents:\n  securitySchemes:\n    authScheme:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: 'http://example.org'\n          tokenUrl: 'http://example.org'\n          scopes:\n            test.read: Allowed to read state.\n            test.write: Allowed to change state.\n  schemas:\n    AnyOfProperty:\n      description: Test containing an anyOf object\n      properties:\n        requiredAnyOf:\n          $ref: '#/components/schemas/AnyOfObject'\n        optionalAnyOf:\n          $ref: '#/components/schemas/12345AnyOfObject'\n      required:\n      - requiredAnyOf\n    AnyOfObject:\n      description: Test a model containing an anyOf\n      anyOf:\n      - type: string\n        enum:\n        - FOO\n        - BAR\n      - type: string\n        description: Alternate option\n    12345AnyOfObject:\n      description: Test a model containing an anyOf that starts with a number\n      anyOf:\n      - type: string\n        enum:\n        - FOO\n        - BAR\n        - \"*\"\n      - type: string\n        description: Alternate option\n    EnumWithStarObject:\n      description: Test a model containing a special character in the enum\n      type: string\n      enum:\n      - FOO\n      - BAR\n      - \"*\"\n    UuidObject:\n      description: Test a model containing a UUID\n      type: string\n      format: uuid\n    xml_array:\n      xml:\n        name: CamelXmlArray\n        wrapped: true\n      type: array\n      items:\n        $ref: '#/components/schemas/xml_inner'\n    xml_inner:\n      type: string\n      xml:\n        name: camelXmlInner\n    xml_object:\n      title: an XML object\n      description: An XML object\n      type: object\n      properties:\n        innerString:\n          type: string\n        other_inner_rename:\n          type: integer\n      xml:\n        name: camelXmlObject\n        namespace: http://foo.bar\n    duplicate_xml_object:\n      description: An XML object\n      type: object\n      required:\n        - inner_array\n      properties:\n        inner_string:\n          type: string\n        inner_array:\n          $ref: '#/components/schemas/xml_array'\n      xml:\n        name: camelDuplicateXmlObject\n        namespace: http://different.bar\n    anotherXmlArray:\n      type: array\n      xml:\n        wrapped: true\n        name: snake_another_xml_array\n      items:\n        $ref: '#/components/schemas/anotherXmlInner'\n    anotherXmlInner:\n      type: string\n      xml:\n        name: snake_another_xml_inner\n    anotherXmlObject:\n      description: An XML object\n      type: object\n      properties:\n        inner_string:\n          type: string\n      xml:\n        name: snake_another_xml_object\n        namespace: http://foo.bar\n    ObjectWithArrayOfObjects:\n      type: object\n      properties:\n       objectArray:\n         type: array\n         items:\n           $ref: '#/components/schemas/StringObject'\n    StringObject:\n      type: string\n    MyIDList:\n      type:  array\n      items:\n        $ref: '#/components/schemas/MyID'\n    MyID:\n      type: integer\n    ObjectUntypedProps:\n      properties:\n        required_untyped:\n          nullable: false\n        required_untyped_nullable:\n          nullable: true\n        not_required_untyped:\n          nullable: false\n        not_required_untyped_nullable:\n          nullable: false\n      required:\n      - required_untyped\n      - required_untyped_nullable\n      type: object\n    ObjectParam:\n      type: object\n      required:\n        - requiredParam\n      properties:\n        requiredParam:\n          type: boolean\n        optionalParam:\n          type: integer\n    ObjectHeader:\n      type: object\n      required:\n        - requiredObjectHeader\n      properties:\n        requiredObjectHeader:\n          $ref: '#/components/schemas/RequiredObjectHeader'\n        optionalObjectHeader:\n          $ref: '#/components/schemas/OptionalObjectHeader'\n    RequiredObjectHeader:\n      type: boolean\n    OptionalObjectHeader:\n      type: integer\n    AdditionalPropertiesWithList:\n      type: object\n      maxProperties: 1\n      additionalProperties:\n        type: list\n        items:\n          type: string\n    NullableTest:\n      type: object\n      required:\n      - nullable\n      properties:\n        nullable:\n          type: string\n          nullable: true\n        nullableWithNullDefault:\n          type: string\n          nullable: true\n          default: null\n        nullableWithPresentDefault:\n          type: string\n          nullable: true\n          default: \"default\"\n        nullableWithNoDefault:\n          type: string\n          nullable: true\n        nullableArray:\n          type: array\n          items:\n            type: string\n          nullable: true\n    StringEnum:\n      type: string\n      enum:\n        - FOO\n        - BAR\n    Ok:\n      type: string\n    Error:\n      type: string\n    Err:\n      type: string\n    Result:\n      type: string\n",
			"canonicalURL": "/github.com/OpenAPITools/openapi-generator@4635dda5181fd34d50643d2b9dcfcaaef64db418/-/blob/modules/openapi-generator/src/test/resources/3_0/rust-server/openapi-v3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/OpenAPITools/openapi-generator/blob/4635dda5181fd34d50643d2b9dcfcaaef64db418/modules/openapi-generator/src/test/resources/3_0/rust-server/openapi-v3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"AdditionalPropertiesWithList\": parse schema: parse schema: at 1:316: unexpected schema type: \"list\""
}