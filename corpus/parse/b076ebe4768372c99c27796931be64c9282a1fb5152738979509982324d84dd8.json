{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/container-registry/harbor-python-client-api"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "swagger.yaml",
			"byteSize": 283619,
			"content": "openapi: 3.0.0\ninfo:\n  title: Harbor API\n  description: These APIs provide services for manipulating Harbor project.\n  version: 2.0\nsecurity:\n  - basic: []\n  - {}\npaths:\n  '/health':\n    get:\n      summary: Health check API\n      description: |\n        The endpoint returns the health stauts of the system.\n      tags:\n        - Products\n      operationId: health\n      responses:\n        '200':\n          description: The system health status.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OverallHealthStatus'\n  '/projects/{project_id}/metadatas':\n    get:\n      summary: Get project metadata.\n      description: |\n        This endpoint returns metadata of the project specified by project ID.\n      operationId: projectMetadata\n      parameters:\n        - name: project_id\n          in: path\n          description: The ID of project.\n          required: true\n          schema:\n            type: integer\n            format: int64\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Get metadata successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectMetadata'\n        '401':\n          description: User need to login first.\n        '500':\n          description: Internal server errors.\n    post:\n      summary: Add metadata for the project.\n      description: |\n        This endpoint is aimed to add metadata of a project.\n      operationId: setProjectMetadata\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          description: Selected project ID.\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProjectMetadata'\n        description: The metadata of project.\n        required: true\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Add metadata successfully.\n        '400':\n          description: Invalid request.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User does not have permission to the project.\n        '404':\n          description: Project ID does not exist.\n        '415':\n          $ref: '#/components/responses/UnsupportedMediaType'\n        '500':\n          description: Internal server errors.\n  '/projects/{project_id}/metadatas/{meta_name}':\n    get:\n      summary: Get project metadata\n      description: |\n        This endpoint returns specified metadata of a project.\n      operationId: specifiedProjectMetadata\n      parameters:\n        - name: project_id\n          in: path\n          description: Project ID for filtering results.\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: meta_name\n          in: path\n          description: The name of metadat.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Get metadata successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectMetadata'\n        '401':\n          description: User need to log in first.\n        '500':\n          description: Internal server errors.\n    put:\n      summary: Update metadata of a project.\n      description: |\n        This endpoint is aimed to update the metadata of a project.\n      operationId: updateProjectMetadata\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          description: The ID of project.\n          schema:\n            type: integer\n            format: int64\n        - name: meta_name\n          in: path\n          description: The name of metadat.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Updated metadata successfully.\n        '400':\n          description: Invalid request.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User does not have permission to the project.\n        '404':\n          description: Project or metadata does not exist.\n        '500':\n          description: Internal server errors.\n    delete:\n      summary: Delete metadata of a project\n      description: |\n        This endpoint is aimed to delete metadata of a project.\n      operationId: removeProjectMetadata\n      parameters:\n        - name: project_id\n          in: path\n          description: The ID of project.\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: meta_name\n          in: path\n          description: The name of metadat.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Metadata is deleted successfully.\n        '400':\n          description: Invalid requst.\n        '403':\n          description: User need to log in first.\n        '404':\n          description: Project or metadata does not exist.\n        '500':\n          description: Internal server errors.\n  '/projects/{project_id}/members':\n    get:\n      summary: Get all project member information\n      description: Get all project member information\n      operationId: allProjectMembers\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          description: Relevant project ID.\n          schema:\n            type: integer\n            format: int64\n        - name: entityname\n          in: query\n          description: The entity name to search.\n          schema:\n            type: string\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Get project members successfully.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProjectMemberEntity'\n        '400':\n          description: The project id is invalid.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User in session does not have permission to the project.\n        '404':\n          description: Project ID does not exist.\n        '500':\n          description: Unexpected internal errors.\n    post:\n      summary: Create project member\n      description: \u003e-\n        Create project member relationship, the member can be one of the\n        user_member and group_member,  The user_member need to specify user_id\n        or username. If the user already exist in harbor DB, specify the\n        user_id,  If does not exist in harbor DB, it will SearchAndOnBoard the\n        user. The group_member need to specify id or ldap_group_dn. If the group\n        already exist in harbor DB. specify the user group's id,  If does not\n        exist, it will SearchAndOnBoard the group.\n      operationId: createProjectMemberRelationship\n      tags:\n        - Products\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          description: Relevant project ID.\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProjectMember'\n      responses:\n        '201':\n          description: Project member created successfully.\n          headers:\n            Location:\n              description: The URL of the created resource\n              schema:\n                type: string\n        '400':\n          description: \u003e-\n            Illegal format of project member or project id is invalid, or LDAP\n            DN is invalid.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User in session does not have permission to the project.\n        '409':\n          description: \u003e-\n            A user group with same group name already exist or an LDAP user\n            group with same DN already exist.\n        '500':\n          description: Unexpected internal errors.\n  '/projects/{project_id}/members/{mid}':\n    get:\n      summary: Get the project member information\n      description: Get the project member information\n      operationId: projectMember\n      tags:\n        - Products\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          description: Relevant project ID.\n          schema:\n            type: integer\n            format: int64\n        - name: mid\n          in: path\n          required: true\n          description: The member ID\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Project member retrieved successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectMemberEntity'\n        '400':\n          description: 'Illegal format of project member or invalid project id, member id.'\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User in session does not have permission to the project.\n        '404':\n          description: Project or projet member does not exist.\n        '500':\n          description: Unexpected internal errors.\n    put:\n      summary: Update project member\n      description: Update project member relationship\n      operationId: setProjectMember\n      tags:\n        - Products\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          description: Relevant project ID.\n          schema:\n            type: integer\n            format: int64\n        - name: mid\n          in: path\n          required: true\n          description: Member ID.\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleRequest'\n      responses:\n        '200':\n          description: Project member updated successfully.\n        '400':\n          description: \u003e-\n            Invalid role id, it should be 1,2 or 3, or invalid project id, or\n            invalid member id.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User in session does not have permission to the project.\n        '404':\n          description: project or project member does not exist.\n        '500':\n          description: Unexpected internal errors.\n    delete:\n      summary: Delete project member\n      operationId: deleteProjectMember\n      tags:\n        - Products\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          description: Relevant project ID.\n          schema:\n            type: integer\n            format: int64\n        - name: mid\n          in: path\n          required: true\n          description: Member ID.\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Project member deleted successfully.\n        '400':\n          description: The project id or project member id is invalid.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User in session does not have permission to the project.\n        '500':\n          description: Unexpected internal errors.\n  '/statistics':\n    get:\n      summary: Get projects number and repositories number relevant to the user\n      description: \u003e\n        This endpoint is aimed to statistic all of the projects number and\n        repositories number relevant to the logined user, also the public\n        projects number and repositories number. If the user is admin, he can\n        also get total projects number and total repositories number.\n      operationId: statistics\n      tags:\n        - Products\n      responses:\n        '200':\n          description: \u003e-\n            Get the projects number and repositories number relevant to the user\n            successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatisticMap'\n        '401':\n          description: User need to log in first.\n        '500':\n          description: Unexpected internal errors.\n  '/users':\n    get:\n      summary: Get registered users of Harbor.\n      description: \u003e\n        This endpoint is for user to search registered users, support for\n        filtering results with username.Notice, by now this operation is only\n        for administrator.\n      operationId: users\n      parameters:\n        - name: username\n          in: query\n          required: false\n          description: Username for filtering results.\n          schema:\n            type: string\n        - name: email\n          in: query\n          required: false\n          description: Email for filtering results.\n          schema:\n            type: string\n        - name: page\n          in: query\n          required: false\n          description: 'The page number, default is 1.'\n          schema:\n            type: integer\n            format: int32\n        - name: page_size\n          in: query\n          required: false\n          description: The size of per page.\n          schema:\n            type: integer\n            format: int32\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Searched for users of Harbor successfully.\n          headers:\n            X-Total-Count:\n              description: The total count of available items\n              schema:\n                type: integer\n            Link:\n              description: Link to previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        '400':\n          description: Invalid user ID.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User does not have permission of admin role.\n        '500':\n          description: Unexpected internal errors.\n    post:\n      summary: Creates a new user account.\n      description: |\n        This endpoint is to create a user if the user does not already exist.\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: New created user.\n        required: true\n      tags:\n        - Products\n      responses:\n        '201':\n          description: User created successfully.\n          headers:\n            Location:\n              description: The URL of the created resource\n              schema:\n                type: string\n        '400':\n          description: Unsatisfied with constraints of the user creation.\n        '403':\n          description: \u003e-\n            User registration can only be used by admin role user when\n            self-registration is off.\n        '415':\n          $ref: '#/components/responses/UnsupportedMediaType'\n        '500':\n          description: Unexpected internal errors.\n  '/users/current':\n    get:\n      summary: Get current user info.\n      description: |\n        This endpoint is to get the current user information.\n      operationId: currentUser\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Get current user information successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '401':\n          description: User need to log in first.\n  '/users/current/permissions':\n    get:\n      summary: Get current user permissions.\n      description: |\n        This endpoint is to get the current user permissions.\n      operationId: currentUserPermissions\n      parameters:\n        - name: scope\n          in: query\n          required: false\n          description: Get permissions of the scope\n          schema:\n            type: string\n        - name: relative\n          in: query\n          required: false\n          description: \u003e\n            If true, the resources in the response are relative to the scope,\n\n            eg for resource '/project/1/repository' if relative is 'true' then\n            the resource in response will be 'repository'.\n          schema:\n            type: boolean\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Get current user permission successfully.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Permission'\n        '401':\n          description: User need to log in first.\n        '500':\n          description: Internal errors.\n  '/users/search':\n    get:\n      summary: Search users by username\n      description: |\n        This endpoint is to search the users by username.\n      operationId: searchUser\n      parameters:\n        - name: username\n          in: query\n          required: true\n          description: Username for filtering results.\n          schema:\n            type: string\n        - name: page\n          in: query\n          required: false\n          description: 'The page number, default is 1.'\n          schema:\n            type: integer\n            format: int32\n        - name: page_size\n          in: query\n          required: false\n          description: The size of per page.\n          schema:\n            type: integer\n            format: int32\n      tags:\n        - Products\n      responses:\n        '200':\n          description: 'Search users by username, email successfully.'\n          headers:\n            X-Total-Count:\n              description: The total count of available items\n              schema:\n                type: integer\n            Link:\n              description: Link to previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserSearch'\n        '500':\n          description: Unexpected internal errors.\n  '/users/{user_id}':\n    get:\n      summary: Get a user's profile.\n      description: |\n        Get user's profile with user id.\n      operationId: user\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          description: Registered user ID\n          schema:\n            type: integer\n            format: int\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Get user's profile successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: Invalid user ID.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User does not have permission of admin role.\n        '404':\n          description: User ID does not exist.\n        '500':\n          description: Unexpected internal errors.\n    put:\n      summary: Update a registered user to change his profile.\n      description: |\n        This endpoint let a registered user change his profile.\n      operationId: updateUser\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          description: Registered user ID\n          schema:\n            type: integer\n            format: int\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserProfile'\n        description: 'Only email, realname and comment can be modified.'\n        required: true\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Updated user's profile successfully.\n        '400':\n          description: Invalid user ID.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User does not have permission of admin role.\n        '404':\n          description: User ID does not exist.\n        '500':\n          description: Unexpected internal errors.\n    delete:\n      summary: Mark a registered user as be removed.\n      description: |\n        This endpoint let administrator of Harbor mark a registered user as\n        be removed.It actually won't be deleted from DB.\n      operationId: removeUser\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          description: User ID for marking as to be removed.\n          schema:\n            type: integer\n            format: int\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Marked user as be removed successfully.\n        '400':\n          description: Invalid user ID.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User does not have permission of admin role.\n        '404':\n          description: User ID does not exist.\n        '500':\n          description: Unexpected internal errors.\n  '/users/{user_id}/password':\n    put:\n      summary: Change the password on a user that already exists.\n      description: \u003e\n        This endpoint is for user to update password. Users with the admin role\n        can change any user's password. Guest users can change only their own\n        password.\n      operationId: changePassword\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          description: Registered user ID.\n          schema:\n            type: integer\n            format: int\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Password'\n        description: \u003e-\n          Password to be updated, the attribute 'old_password' is optional when\n          the API is called by the system administrator.\n        required: true\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Updated password successfully.\n        '400':\n          description: Invalid user ID; Old password is blank; New password is blank.\n        '401':\n          description: Don't have authority to change password. Please check login status.\n        '403':\n          description: \u003e-\n            The caller does not have permission to update the password of the\n            user with given ID, or the old password in request body is not\n            correct.\n        '500':\n          description: Unexpected internal errors.\n  '/users/{user_id}/sysadmin':\n    put:\n      summary: Update a registered user to change to be an administrator of Harbor.\n      description: |\n        This endpoint let a registered user change to be an administrator\n        of Harbor.\n      operationId: makeAdmin\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          description: Registered user ID\n          schema:\n            type: integer\n            format: int\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SysAdminFlag'\n        description: Toggle a user to admin or not.\n        required: true\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Updated user's admin role successfully.\n        '400':\n          description: Invalid user ID.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User does not have permission of admin role.\n        '404':\n          description: User ID does not exist.\n        '500':\n          description: Unexpected internal errors.\n  '/users/{user_id}/cli_secret':\n    put:\n      summary: Set CLI secret for a user.\n      description: \u003e\n        This endpoint let user generate a new CLI secret for himself.  This API\n        only works when auth mode is set to 'OIDC'.\n\n        Once this API returns with successful status, the old secret will be\n        invalid, as there will be only one CLI secret\n\n        for a user.\n      operationId: setCliSecret\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          description: User ID\n          schema:\n            type: integer\n            format: int\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                secret:\n                  type: string\n                  description: The new secret\n        description: JSON object that includes the new secret\n        required: true\n      tags:\n        - Products\n      responses:\n        '200':\n          description: The secret is successfully updated\n        '400':\n          description: \u003e-\n            Invalid user ID.  Or user is not onboarded via OIDC authentication.\n            Or the secret does not meet the standard.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: Non-admin user can only generate the cli secret of himself.\n        '404':\n          description: User ID does not exist.\n        '412':\n          description: \u003e-\n            The auth mode of the system is not \"oidc_auth\", or the user is not\n            onboarded via OIDC AuthN.\n        '500':\n          description: Unexpected internal errors.\n  '/labels':\n    get:\n      summary: List labels according to the query strings.\n      description: |\n        This endpoint let user list labels by name, scope and project_id\n      operationId: listLabel\n      parameters:\n        - name: name\n          in: query\n          required: false\n          description: The label name.\n          schema:\n            type: string\n        - name: scope\n          in: query\n          required: true\n          description: \u003e-\n            The label scope. Valid values are g and p. g for global labels and p\n            for project labels.\n          schema:\n            type: string\n        - name: project_id\n          in: query\n          required: false\n          description: 'Relevant project ID, required when scope is p.'\n          schema:\n            type: integer\n            format: int64\n        - name: page\n          in: query\n          required: false\n          description: The page number.\n          schema:\n            type: integer\n            format: int32\n        - name: page_size\n          in: query\n          required: false\n          description: The size of per page.\n          schema:\n            type: integer\n            format: int32\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Get successfully.\n          headers:\n            X-Total-Count:\n              description: The total count of available items\n              schema:\n                type: integer\n            Link:\n              description: Link to previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Label'\n        '400':\n          description: Invalid parameters.\n        '401':\n          description: User need to log in first.\n        '500':\n          description: Unexpected internal errors.\n    post:\n      summary: Post creates a label\n      description: |\n        This endpoint let user creates a label.\n      operationId: createLabel\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Label'\n        description: The json object of label.\n        required: true\n      tags:\n        - Products\n      responses:\n        '201':\n          description: Create successfully.\n          headers:\n            Location:\n              description: The URL of the created resource\n              schema:\n                type: string\n        '400':\n          description: Invalid parameters.\n        '401':\n          description: User need to log in first.\n        '409':\n          description: Label with the same name and same scope already exists.\n        '415':\n          $ref: '#/components/responses/UnsupportedMediaType'\n        '500':\n          description: Unexpected internal errors.\n  '/labels/{id}':\n    get:\n      summary: Get the label specified by ID.\n      description: |\n        This endpoint let user get the label by specific ID.\n      operationId: label\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Label ID\n          schema:\n            type: integer\n            format: int64\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Get successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Label'\n        '401':\n          description: User need to log in first.\n        '404':\n          description: The resource does not exist.\n        '500':\n          description: Unexpected internal errors.\n    put:\n      summary: Update the label properties.\n      description: |\n        This endpoint let user update label properties.\n      operationId: updateLabel\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Label ID\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Label'\n        description: The updated label json object.\n        required: true\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Update successfully.\n        '400':\n          description: Invalid parameters.\n        '401':\n          description: User need to log in first.\n        '404':\n          description: The resource does not exist.\n        '409':\n          description: The label with the same name already exists.\n        '500':\n          description: Unexpected internal errors.\n    delete:\n      summary: Delete the label specified by ID.\n      description: |\n        Delete the label specified by ID.\n      operationId: removeLabelById\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Label ID\n          schema:\n            type: integer\n            format: int64\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Delete successfully.\n        '400':\n          description: Invalid parameters.\n        '401':\n          description: User need to log in first.\n        '404':\n          description: The resource does not exist.\n        '500':\n          description: Unexpected internal errors.\n  /usergroups:\n    get:\n      summary: Get all user groups information\n      description: Get all user groups information\n      operationId: listUserGroups\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Get user group successfully.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserGroup'\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User in session does not have permission to the user group.\n        '500':\n          description: Unexpected internal errors.\n    post:\n      summary: Create user group\n      description: Create user group information\n      operationId: createUsergroup\n      tags:\n        - Products\n      requestBody:\n        $ref: '#/components/requestBodies/UserGroup'\n      responses:\n        '201':\n          description: User group created successfully.\n          headers:\n            Location:\n              description: The URL of the created resource\n              schema:\n                type: string\n        '400':\n          description: Invalid LDAP group DN.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User in session does not have permission to the user group.\n        '409':\n          description: \u003e-\n            A user group with same group name already exist, or an LDAP user\n            group with same DN already exist.\n        '500':\n          description: Unexpected internal errors.\n  '/usergroups/{group_id}':\n    get:\n      summary: Get user group information\n      description: Get user group information\n      operationId: usergroup\n      tags:\n        - Products\n      parameters:\n        - name: group_id\n          in: path\n          required: true\n          description: Group ID\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: User group get successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserGroup'\n        '400':\n          description: The user group id is invalid.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User in session does not have permission to the user group.\n        '404':\n          description: User group does not exist.\n        '500':\n          description: Unexpected internal errors.\n    put:\n      summary: Update group information\n      description: Update user group information\n      operationId: updateUsergroup\n      tags:\n        - Products\n      parameters:\n        - name: group_id\n          in: path\n          required: true\n          description: Group ID\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/UserGroup'\n      responses:\n        '200':\n          description: User group updated successfully.\n        '400':\n          description: The user group id is invalid.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: Only admin has this authority.\n        '404':\n          description: User group does not exist.\n        '500':\n          description: Unexpected internal errors.\n    delete:\n      summary: Delete user group\n      description: Delete user group\n      operationId: deleteUsergroup\n      tags:\n        - Products\n      parameters:\n        - name: group_id\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: User group deleted successfully.\n        '400':\n          description: The user group id is invalid.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: Only admin has this authority.\n        '500':\n          description: Unexpected internal errors.\n  '/configurations':\n    get:\n      summary: Get system configurations.\n      description: \u003e\n        This endpoint is for retrieving system configurations that only provides\n        for admin user.\n      operationId: systemConfiguration\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Get system configurations successfully. The response body is a map.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigurationsResponse'\n        '401':\n          description: User need to log in first.ß\n        '403':\n          description: User does not have permission of admin role.\n        '500':\n          description: Unexpected internal errors.\n    put:\n      summary: Modify system configurations.\n      description: \u003e\n        This endpoint is for modifying system configurations that only provides\n        for admin user.\n      operationId: updateSystemConfiguration\n      tags:\n        - Products\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Configurations'\n        description: \u003e-\n          The configuration map can contain a subset of the attributes of the\n          schema, which are to be updated.\n        required: true\n      responses:\n        '200':\n          description: Modify system configurations successfully.\n        '401':\n          description: User need to log in first.\n        '403':\n          description: User does not have permission of admin role.\n        '500':\n          description: Unexpected internal errors.\n  '/email/ping':\n    post:\n      summary: Test connection and authentication with email server.\n      operationId: emailPing\n      description: |\n        Test connection and authentication with email server.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EmailServerSetting'\n        description: \u003e-\n          Email server settings, if some of the settings are not assigned, they\n          will be read from system configuration.\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Ping email server successfully.\n        '400':\n          description: Inviald email server settings.\n        '401':\n          description: User need to login first.\n        '403':\n          description: Only admin has this authority.\n        '415':\n          $ref: '#/components/responses/UnsupportedMediaType'\n        '500':\n          description: Unexpected internal errors.\n  '/chartrepo/{repo}/charts/{name}/{version}/labels':\n    get:\n      summary: Return the attahced labels of chart.\n      description: Return the attahced labels of the specified chart version.\n      operationId: listAttahcedLabelsOfChart\n      tags:\n        - Products\n        - Chart Repository\n        - Label\n      parameters:\n        - name: repo\n          in: path\n          required: true\n          description: The project name\n          schema:\n            type: string\n        - name: name\n          in: path\n          required: true\n          description: The chart name\n          schema:\n            type: string\n        - name: version\n          in: path\n          required: true\n          description: The chart version\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/schemas/Labels'\n        '401':\n          $ref: '#/components/schemas/UnauthorizedChartAPIError'\n        '403':\n          $ref: '#/components/schemas/ForbiddenChartAPIError'\n        '404':\n          $ref: '#/components/schemas/NotFoundChartAPIError'\n        '500':\n          $ref: '#/components/schemas/InternalChartAPIError'\n    post:\n      summary: Mark label to chart.\n      description: Mark label to the specified chart version.\n      operationId: markLabelToChart\n      tags:\n        - Products\n        - Chart Repository\n        - Label\n      parameters:\n        - name: repo\n          in: path\n          required: true\n          description: The project name\n          schema:\n            type: string\n        - name: name\n          in: path\n          required: true\n          description: The chart name\n          schema:\n            type: string\n        - name: version\n          in: path\n          required: true\n          description: The chart version\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Label'\n        description: The label being marked to the chart version\n        required: true\n      responses:\n        '200':\n          description: The label is successfully marked to the chart version.\n        '400':\n          $ref: '#/components/schemas/BadRequestFormatedError'\n        '401':\n          $ref: '#/components/schemas/UnauthorizedChartAPIError'\n        '403':\n          $ref: '#/components/schemas/ForbiddenChartAPIError'\n        '404':\n          $ref: '#/components/schemas/NotFoundChartAPIError'\n        '409':\n          $ref: '#/components/schemas/ConflictFormatedError'\n        '500':\n          $ref: '#/components/schemas/InternalChartAPIError'\n  '/chartrepo/{repo}/charts/{name}/{version}/labels/{id}':\n    delete:\n      summary: Remove label from chart.\n      description: Remove label from the specified chart version.\n      operationId: removeLabelFromChart\n      tags:\n        - Products\n        - Chart Repository\n        - Label\n      parameters:\n        - name: repo\n          in: path\n          required: true\n          description: The project name\n          schema:\n            type: string\n        - name: name\n          in: path\n          required: true\n          description: The chart name\n          schema:\n            type: string\n        - name: version\n          in: path\n          required: true\n          description: The chart version\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          description: The label ID\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: The label is successfully unmarked from the chart version.\n        '400':\n          $ref: '#/components/schemas/BadRequestFormatedError'\n        '401':\n          $ref: '#/components/schemas/UnauthorizedChartAPIError'\n        '403':\n          $ref: '#/components/schemas/ForbiddenChartAPIError'\n        '404':\n          $ref: '#/components/schemas/NotFoundChartAPIError'\n        '500':\n          $ref: '#/components/schemas/InternalChartAPIError'\n\n  /search:\n    get:\n      summary: 'Search for projects, repositories and helm charts'\n      description: \u003e-\n        The Search endpoint returns information about the projects, repositories\n        and helm charts offered at public status or related to the current\n        logged in user. The response includes the project, repository list and\n        charts in a proper display order.\n      parameters:\n        - name: q\n          in: query\n          description: Search parameter for project and repository name.\n          required: true\n          schema:\n            type: string\n      tags:\n        - search\n      operationId: search\n      responses:\n        '200':\n          description: An array of search results\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Search'\n        '500':\n          $ref: '#/components/responses/500'\n  /ldap/ping:\n    post:\n      operationId: pingLdap\n      summary: Ping available ldap service.\n      description: \u003e\n        This endpoint ping the available ldap service for test related\n        configuration parameters.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LdapConf'\n        description: \u003e-\n          ldap configuration. support input ldap service configuration. If it is\n          a empty request, will load current configuration from the system.\n      tags:\n        - Ldap\n      responses:\n        '200':\n          description: Ping ldap service successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LdapPingResult'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  /ldap/users/search:\n    get:\n      operationId: searchLdapUser\n      summary: Search available ldap users.\n      description: \u003e\n        This endpoint searches the available ldap users based on related\n        configuration parameters. Support searched by input ladp configuration,\n        load configuration from the system and specific filter.\n      parameters:\n        - name: username\n          in: query\n          required: false\n          description: Registered user ID\n          schema:\n            type: string\n      tags:\n        - Ldap\n      responses:\n        '200':\n          description: Search ldap users successfully.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/LdapUser'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  /ldap/users/import:\n    post:\n      operationId: importLdapUser\n      summary: Import selected available ldap users.\n      description: \u003e\n        This endpoint adds the selected available ldap users to harbor based on\n        related configuration parameters from the system. System will try to\n        guess the user email address and realname, add to harbor user\n        information. If have errors when import user, will return the list of\n        importing failed uid and the failed reason.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LdapImportUsers'\n        description: \u003e-\n          The uid listed for importing. This list will check users validity of\n          ldap service based on configuration from the system.\n        required: true\n      tags:\n        - Ldap\n      responses:\n        '200':\n          description: Add ldap users successfully.\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          description: Failed import some users.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/LdapFailedImportUser'\n        '500':\n          $ref: '#/components/responses/500'\n  /ldap/groups/search:\n    get:\n      summary: Search available ldap groups.\n      operationId: searchLdapGroup\n      description: \u003e\n        This endpoint searches the available ldap groups based on related\n        configuration parameters. support to search by groupname or groupdn.\n      parameters:\n        - name: groupname\n          in: query\n          required: false\n          description: Ldap group name\n          schema:\n            type: string\n        - name: groupdn\n          in: query\n          required: false\n          description: The LDAP group DN\n          schema:\n            type: string\n      tags:\n        - Ldap\n      responses:\n        '200':\n          description: Search ldap group successfully.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserGroup'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  /projects:\n    get:\n      summary: List projects\n      description: This endpoint returns projects created by Harbor.\n      tags:\n        - project\n      operationId: listProjects\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sort'\n        - name: name\n          in: query\n          description: The name of project.\n          required: false\n          schema:\n            type: string\n        - name: public\n          in: query\n          description: The project is public or private.\n          required: false\n          schema:\n            type: boolean\n            format: int32\n        - name: owner\n          in: query\n          description: The name of project owner.\n          required: false\n          schema:\n            type: string\n        - name: with_detail\n          in: query\n          description: \u003e-\n            Bool value indicating whether return detailed information of the\n            project\n          required: false\n          schema:\n            type: boolean\n            default: true\n      responses:\n        '200':\n          description: Return all matched projects.\n          headers:\n            X-Total-Count:\n              description: The total count of projects\n              schema:\n                type: integer\n            Link:\n              description: Link refers to the previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Project'\n        '401':\n          $ref: '#/components/responses/401'\n        '500':\n          $ref: '#/components/responses/500'\n    head:\n      summary: Check if the project name user provided already exists.\n      description: \u003e-\n        This endpoint is used to check if the project name provided already\n        exist.\n      tags:\n        - project\n      operationId: headProject\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - name: project_name\n          in: query\n          description: Project name for checking exists.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    post:\n      summary: Create a new project.\n      description: This endpoint is for user to create a new project.\n      tags:\n        - project\n      operationId: createProject\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/resourceNameInLocation'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProjectReq'\n        description: New created project.\n        required: true\n      responses:\n        '201':\n          $ref: '#/components/responses/201'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '409':\n          $ref: '#/components/responses/409'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name_or_id}':\n    get:\n      summary: Return specific project detail information\n      description: This endpoint returns specific project information by project ID.\n      tags:\n        - project\n      operationId: getProject\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n      responses:\n        '200':\n          description: Return matched project information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n        '401':\n          $ref: '#/components/responses/401'\n        '500':\n          $ref: '#/components/responses/500'\n    put:\n      summary: Update properties for a selected project.\n      description: This endpoint is aimed to update the properties of a project.\n      tags:\n        - project\n      operationId: updateProject\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProjectReq'\n        description: Updates of project.\n        required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    delete:\n      summary: Delete project by projectID\n      description: This endpoint is aimed to delete project by project ID.\n      tags:\n        - project\n      operationId: deleteProject\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '412':\n          $ref: '#/components/responses/412'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name_or_id}/_deletable':\n    get:\n      summary: Get the deletable status of the project\n      description: Get the deletable status of the project\n      tags:\n        - project\n      operationId: getProjectDeletable\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n      responses:\n        '200':\n          description: Return deletable status of the project.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectDeletable'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name_or_id}/summary':\n    get:\n      summary: Get summary of the project.\n      description: Get summary of the project.\n      tags:\n        - project\n      operationId: getProjectSummary\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n      responses:\n        '200':\n          description: Get summary of the project successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectSummary'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name}/repositories':\n    get:\n      summary: List repositories\n      description: List repositories of the specified project\n      tags:\n        - repository\n      operationId: listRepositories\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n      responses:\n        '200':\n          description: Success\n          headers:\n            X-Total-Count:\n              description: The total count of repositories\n              schema:\n                type: integer\n            Link:\n              description: Link refers to the previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Repository'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name}/repositories/{repository_name}':\n    get:\n      summary: Get repository\n      description: Get the repository specified by name\n      tags:\n        - repository\n      operationId: getRepository\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/repositoryName'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Repository'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    put:\n      summary: Update repository\n      description: Update the repository specified by name\n      tags:\n        - repository\n      operationId: updateRepository\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/repositoryName'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Repository'\n        description: The JSON object of repository.\n        required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    delete:\n      summary: Delete repository\n      description: Delete the repository specified by name\n      tags:\n        - repository\n      operationId: deleteRepository\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/repositoryName'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name}/repositories/{repository_name}/artifacts':\n    get:\n      summary: List artifacts\n      description: \u003e-\n        List artifacts under the specific project and repository. Except the\n        basic properties, the other supported queries in \"q\" includes \"tags=*\"\n        to list only tagged artifacts, \"tags=nil\" to list only untagged\n        artifacts, \"tags=~v\" to list artifacts whose tag fuzzy matches \"v\",\n        \"tags=v\" to list artifact whose tag exactly matches \"v\", \"labels=(id1,\n        id2)\" to list artifacts that both labels with id1 and id2 are added to\n      tags:\n        - artifact\n      operationId: listArtifacts\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/repositoryName'\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/acceptVulnerabilities'\n        - name: with_tag\n          in: query\n          description: Specify whether the tags are included inside the returning artifacts\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: with_label\n          in: query\n          description: \u003e-\n            Specify whether the labels are included inside the returning\n            artifacts\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: with_scan_overview\n          in: query\n          description: \u003e-\n            Specify whether the scan overview is included inside the returning\n            artifacts\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: with_signature\n          in: query\n          description: \u003e-\n            Specify whether the signature is included inside the tags of the\n            returning artifacts. Only works when setting \"with_tag=true\"\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: with_immutable_status\n          in: query\n          description: \u003e-\n            Specify whether the immutable status is included inside the tags of\n            the returning artifacts. Only works when setting \"with_tag=true\"\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '200':\n          description: Success\n          headers:\n            X-Total-Count:\n              description: The total count of artifacts\n              schema:\n                type: integer\n            Link:\n              description: Link refers to the previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Artifact'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    post:\n      summary: Copy artifact\n      description: Copy the artifact specified in the \"from\" parameter to the repository.\n      tags:\n        - artifact\n      operationId: copyArtifact\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/repositoryName'\n        - name: from\n          in: query\n          description: \u003e-\n            The artifact from which the new artifact is copied from, the format\n            should be \"project/repository:tag\" or \"project/repository@digest\".\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          $ref: '#/components/responses/201'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}':\n    get:\n      summary: Get the specific artifact\n      description: \u003e-\n        Get the artifact specified by the reference under the project and\n        repository. The reference can be digest or tag.\n      tags:\n        - artifact\n      operationId: getArtifact\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/repositoryName'\n        - $ref: '#/components/parameters/reference'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/acceptVulnerabilities'\n        - name: with_tag\n          in: query\n          description: Specify whether the tags are inclued inside the returning artifacts\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: with_label\n          in: query\n          description: \u003e-\n            Specify whether the labels are inclued inside the returning\n            artifacts\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: with_scan_overview\n          in: query\n          description: \u003e-\n            Specify whether the scan overview is inclued inside the returning\n            artifacts\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: with_signature\n          in: query\n          description: \u003e-\n            Specify whether the signature is inclued inside the returning\n            artifacts\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: with_immutable_status\n          in: query\n          description: \u003e-\n            Specify whether the immutable status is inclued inside the tags of\n            the returning artifacts. Only works when setting \"with_tag=true\"\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Artifact'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    delete:\n      summary: Delete the specific artifact\n      description: \u003e-\n        Delete the artifact specified by the reference under the project and\n        repository. The reference can be digest or tag\n      tags:\n        - artifact\n      operationId: deleteArtifact\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/repositoryName'\n        - $ref: '#/components/parameters/reference'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan':\n    post:\n      summary: Scan the artifact\n      description: Scan the specified artifact\n      tags:\n        - scan\n      operationId: scanArtifact\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/repositoryName'\n        - $ref: '#/components/parameters/reference'\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log':\n    get:\n      summary: Get the log of the scan report\n      description: Get the log of the scan report\n      tags:\n        - scan\n      operationId: getReportLog\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/repositoryName'\n        - $ref: '#/components/parameters/reference'\n        - name: report_id\n          in: path\n          required: true\n          description: The report id to get the log\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successfully get scan log file\n          content:\n            text/plain:\n              schema:\n                type: string\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags':\n    post:\n      summary: Create tag\n      description: Create a tag for the specified artifact\n      tags:\n        - artifact\n      operationId: createTag\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/repositoryName'\n        - $ref: '#/components/parameters/reference'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Tag'\n        description: The JSON object of tag.\n        required: true\n      responses:\n        '201':\n          $ref: '#/components/responses/201'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '409':\n          $ref: '#/components/responses/409'\n        '500':\n          $ref: '#/components/responses/500'\n    get:\n      summary: List tags\n      description: List tags of the specific artifact\n      tags:\n        - artifact\n      operationId: listTags\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/repositoryName'\n        - $ref: '#/components/parameters/reference'\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - name: with_signature\n          in: query\n          description: Specify whether the signature is included inside the returning tags\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: with_immutable_status\n          in: query\n          description: \u003e-\n            Specify whether the immutable status is included inside the\n            returning tags\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '200':\n          description: Success\n          headers:\n            X-Total-Count:\n              description: The total count of tags\n              schema:\n                type: integer\n            Link:\n              description: Link refers to the previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Tag'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags/{tag_name}':\n    delete:\n      summary: Delete tag\n      description: Delete the tag of the specified artifact\n      tags:\n        - artifact\n      operationId: deleteTag\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/repositoryName'\n        - $ref: '#/components/parameters/reference'\n        - $ref: '#/components/parameters/tagName'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities':\n    get:\n      summary: Get the vulnerabilities addition of the specific artifact\n      description: \u003e-\n        Get the vulnerabilities addition of the artifact specified by the\n        reference under the project and repository.\n      tags:\n        - artifact\n      operationId: getVulnerabilitiesAddition\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/repositoryName'\n        - $ref: '#/components/parameters/reference'\n        - $ref: '#/components/parameters/acceptVulnerabilities'\n      responses:\n        '200':\n          description: Success\n          headers:\n            Content-Type:\n              description: The content type of the vulnerabilities addition\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: string\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}':\n    get:\n      summary: Get the addition of the specific artifact\n      description: \u003e-\n        Get the addition of the artifact specified by the reference under the\n        project and repository.\n      tags:\n        - artifact\n      operationId: getAddition\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/repositoryName'\n        - $ref: '#/components/parameters/reference'\n        - name: addition\n          in: path\n          description: The type of addition.\n          required: true\n          schema:\n            type: string\n            enum:\n              - build_history\n              - values.yaml\n              - readme.md\n              - dependencies\n      responses:\n        '200':\n          description: Success\n          headers:\n            Content-Type:\n              description: The content type of the addition\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: string\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels':\n    post:\n      summary: Add label to artifact\n      description: Add label to the specified artiact.\n      tags:\n        - artifact\n      operationId: addLabel\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/repositoryName'\n        - $ref: '#/components/parameters/reference'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Label'\n        description: The label that added to the artifact. Only the ID property is needed.\n        required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '409':\n          $ref: '#/components/responses/409'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels/{label_id}':\n    delete:\n      summary: Remove label from artifact\n      description: Remove the label from the specified artiact.\n      tags:\n        - artifact\n      operationId: removeLabel\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/repositoryName'\n        - $ref: '#/components/parameters/reference'\n        - name: label_id\n          in: path\n          description: The ID of the label that removed from the artifact.\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '409':\n          $ref: '#/components/responses/409'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name_or_id}/scanner':\n    get:\n      summary: Get project level scanner\n      description: \u003e-\n        Get the scanner registration of the specified project. If no scanner\n        registration is configured for the specified project, the system default\n        scanner registration will be returned.\n      tags:\n        - project\n      operationId: getScannerOfProject\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n      responses:\n        '200':\n          description: The details of the scanner registration.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScannerRegistration'\n        '400':\n          description: Bad project ID\n        '401':\n          description: Unauthorized request\n        '403':\n          description: Request is not allowed\n        '404':\n          description: The requested object is not found\n        '500':\n          description: Internal server error happened\n    put:\n      summary: Configure scanner for the specified project\n      description: \u003e-\n        Set one of the system configured scanner registration as the indepndent\n        scanner of the specified project.\n      tags:\n        - project\n      operationId: setScannerOfProject\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProjectScanner'\n        required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name_or_id}/scanner/candidates':\n    get:\n      summary: \u003e-\n        Get scanner registration candidates for configurating project level\n        scanner\n      description: \u003e-\n        Retrieve the system configured scanner registrations as candidates of\n        setting project level scanner.\n      tags:\n        - project\n      operationId: listScannerCandidatesOfProject\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n      responses:\n        '200':\n          description: A list of scanner registrations.\n          headers:\n            X-Total-Count:\n              description: The total count of available items\n              schema:\n                type: integer\n            Link:\n              description: Link to previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ScannerRegistration'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  /audit-logs:\n    get:\n      summary: Get recent logs of the projects which the user is a member of\n      description: \u003e\n        This endpoint let user see the recent operation logs of the projects\n        which he is member of\n      tags:\n        - auditlog\n      operationId: listAuditLogs\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n      responses:\n        '200':\n          description: Success\n          headers:\n            X-Total-Count:\n              description: The total count of auditlogs\n              schema:\n                type: integer\n            Link:\n              description: Link refers to the previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AuditLog'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name}/logs':\n    get:\n      summary: Get recent logs of the projects\n      description: Get recent logs of the projects\n      tags:\n        - project\n      operationId: getLogs\n      parameters:\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n      responses:\n        '200':\n          description: Success\n          headers:\n            X-Total-Count:\n              description: The total count of auditlogs\n              schema:\n                type: integer\n            Link:\n              description: Link refers to the previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AuditLog'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '500':\n          $ref: '#/components/responses/500'\n  /p2p/preheat/providers:\n    get:\n      summary: List P2P providers\n      description: List P2P providers\n      tags:\n        - preheat\n      operationId: ListProviders\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Metadata'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  /p2p/preheat/instances/ping:\n    post:\n      summary: Ping status of a instance.\n      description: \u003e\n        This endpoint checks status of a instance, the instance can be given by\n        ID or Endpoint URL (together with credential)\n      operationId: PingInstances\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n      requestBody:\n        $ref: '#/components/requestBodies/Instance'\n      tags:\n        - preheat\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Instance not found (when instance is provided by ID).\n        '500':\n          $ref: '#/components/responses/500'\n  /p2p/preheat/instances:\n    get:\n      summary: List P2P provider instances\n      description: List P2P provider instances\n      tags:\n        - preheat\n      operationId: ListInstances\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: Success\n          headers:\n            X-Total-Count:\n              description: The total count of preheating provider instances\n              schema:\n                type: integer\n            Link:\n              description: Link refers to the previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Instance'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    post:\n      summary: Create p2p provider instances\n      description: Create p2p provider instances\n      tags:\n        - preheat\n      operationId: CreateInstance\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n      requestBody:\n        $ref: '#/components/requestBodies/Instance'\n      responses:\n        '201':\n          $ref: '#/components/responses/201'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '409':\n          $ref: '#/components/responses/409'\n        '500':\n          $ref: '#/components/responses/500'\n  '/p2p/preheat/instances/{preheat_instance_name}':\n    get:\n      summary: Get a P2P provider instance\n      description: Get a P2P provider instance\n      tags:\n        - preheat\n      operationId: GetInstance\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/instanceName'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Instance'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    delete:\n      summary: Delete the specified P2P provider instance\n      description: Delete the specified P2P provider instance\n      tags:\n        - preheat\n      operationId: DeleteInstance\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/instanceName'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    put:\n      summary: Update the specified P2P provider instance\n      description: Update the specified P2P provider instance\n      tags:\n        - preheat\n      operationId: UpdateInstance\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/instanceName'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Instance'\n        description: The instance to update\n        required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name}/preheat/policies':\n    post:\n      summary: Create a preheat policy under a project\n      description: Create a preheat policy under a project\n      tags:\n        - preheat\n      operationId: CreatePolicy\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n      requestBody:\n        $ref: '#/components/requestBodies/PreheatPolicy'\n      responses:\n        '201':\n          $ref: '#/components/responses/201'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '409':\n          $ref: '#/components/responses/409'\n        '500':\n          $ref: '#/components/responses/500'\n    get:\n      summary: List preheat policies\n      description: List preheat policies\n      tags:\n        - preheat\n      operationId: ListPolicies\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: List preheat policies success\n          headers:\n            X-Total-Count:\n              description: The total count of policies\n              schema:\n                type: integer\n            Link:\n              description: Link refers to the previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PreheatPolicy'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name}/preheat/policies/{preheat_policy_name}':\n    get:\n      summary: Get a preheat policy\n      description: Get a preheat policy\n      tags:\n        - preheat\n      operationId: GetPolicy\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/preheatPolicyName'\n      responses:\n        '200':\n          description: Get a preheat policy success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PreheatPolicy'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    put:\n      summary: Update preheat policy\n      description: Update preheat policy\n      tags:\n        - preheat\n      operationId: UpdatePolicy\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/preheatPolicyName'\n      requestBody:\n        $ref: '#/components/requestBodies/PreheatPolicy'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '409':\n          $ref: '#/components/responses/409'\n        '500':\n          $ref: '#/components/responses/500'\n    post:\n      summary: Manual preheat\n      description: Manual preheat\n      tags:\n        - preheat\n      operationId: ManualPreheat\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/preheatPolicyName'\n      requestBody:\n        $ref: '#/components/requestBodies/PreheatPolicy'\n      responses:\n        '201':\n          $ref: '#/components/responses/201'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    delete:\n      summary: Delete a preheat policy\n      description: Delete a preheat policy\n      tags:\n        - preheat\n      operationId: DeletePolicy\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/preheatPolicyName'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions':\n    get:\n      summary: List executions for the given policy\n      description: List executions for the given policy\n      tags:\n        - preheat\n      operationId: ListExecutions\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/preheatPolicyName'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: List executions success\n          headers:\n            X-Total-Count:\n              description: The total count of executions\n              schema:\n                type: integer\n            Link:\n              description: Link refers to the previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Execution'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}':\n    get:\n      summary: Get a execution detail by id\n      description: Get a execution detail by id\n      tags:\n        - preheat\n      operationId: GetExecution\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/preheatPolicyName'\n        - $ref: '#/components/parameters/executionId'\n      responses:\n        '200':\n          description: Get execution success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Execution'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    patch:\n      summary: Stop a execution\n      description: Stop a execution\n      tags:\n        - preheat\n      operationId: StopExecution\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/preheatPolicyName'\n        - $ref: '#/components/parameters/executionId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Execution'\n        description: The data of execution\n        required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks':\n    get:\n      summary: List all the related tasks for the given execution\n      description: List all the related tasks for the given execution\n      tags:\n        - preheat\n      operationId: ListTasks\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/preheatPolicyName'\n        - $ref: '#/components/parameters/executionId'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: List tasks success\n          headers:\n            X-Total-Count:\n              description: The total count of tasks\n              schema:\n                type: integer\n            Link:\n              description: Link refers to the previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Task'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks/{task_id}/logs':\n    get:\n      summary: Get the log text stream of the specified task for the given execution\n      description: Get the log text stream of the specified task for the given execution\n      tags:\n        - preheat\n      operationId: GetPreheatLog\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n        - $ref: '#/components/parameters/preheatPolicyName'\n        - $ref: '#/components/parameters/executionId'\n        - $ref: '#/components/parameters/taskId'\n      responses:\n        '200':\n          description: Get log success\n          headers:\n            Content-Type:\n              description: Content type of response\n              schema:\n                type: string\n          content:\n            text/plain:\n              schema:\n                type: string\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name}/preheat/providers':\n    get:\n      summary: Get all providers at project level\n      description: Get all providers at project level\n      tags:\n        - preheat\n      operationId: ListProvidersUnderProject\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/projectName'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProviderUnderProject'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name_or_id}/robots':\n    get:\n      summary: Get all robot accounts of specified project\n      description: Get all robot accounts of specified project\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/sort'\n      tags:\n        - robotv1\n      operationId: ListRobotV1\n      responses:\n        '200':\n          description: Success\n          headers:\n            X-Total-Count:\n              description: The total count of robot accounts\n              schema:\n                type: integer\n            Link:\n              description: Link refers to the previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Robot'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    post:\n      summary: Create a robot account\n      description: Create a robot account\n      tags:\n        - robotv1\n      operationId: CreateRobotV1\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RobotCreateV1'\n        description: The JSON object of a robot account.\n        required: true\n      responses:\n        '201':\n          description: Created\n          headers:\n            X-Request-Id:\n              description: The ID of the corresponding request for the response\n              schema:\n                type: string\n            Location:\n              description: The location of the resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RobotCreated'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name_or_id}/robots/{robot_id}':\n    get:\n      summary: Get a robot account\n      description: This endpoint returns specific robot account information by robot ID.\n      tags:\n        - robotv1\n      operationId: GetRobotByIDV1\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n        - $ref: '#/components/parameters/robotId'\n      responses:\n        '200':\n          description: Return matched robot information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Robot'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    put:\n      summary: Update status of robot account.\n      description: Used to disable/enable a specified robot account.\n      tags:\n        - robotv1\n      operationId: UpdateRobotV1\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n        - $ref: '#/components/parameters/robotId'\n      requestBody:\n        $ref: '#/components/requestBodies/Robot'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '409':\n          $ref: '#/components/responses/409'\n        '500':\n          $ref: '#/components/responses/500'\n    delete:\n      summary: Delete a robot account\n      description: This endpoint deletes specific robot account information by robot ID.\n      tags:\n        - robotv1\n      operationId: DeleteRobotV1\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n        - $ref: '#/components/parameters/robotId'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name_or_id}/immutabletagrules':\n    get:\n      summary: List all immutable tag rules of current project\n      description: |\n        This endpoint returns the immutable tag rules of a project\n      tags:\n        - immutable\n      operationId: ListImmuRules\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: Success\n          headers:\n            X-Total-Count:\n              description: The total count of immutable tag\n              schema:\n                type: integer\n            Link:\n              description: Link refers to the previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ImmutableRule'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n    post:\n      summary: Add an immutable tag rule to current project\n      description: |\n        This endpoint add an immutable tag rule to the project\n      tags:\n        - immutable\n      operationId: CreateImmuRule\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n      requestBody:\n        $ref: '#/components/requestBodies/ImmutableRule'\n      responses:\n        '201':\n          $ref: '#/components/responses/201'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}':\n    put:\n      summary: Update the immutable tag rule or enable or disable the rule\n      tags:\n        - immutable\n      operationId: UpdateImmuRule\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n        - $ref: '#/components/parameters/immutableRuleId'\n      requestBody:\n        $ref: '#/components/requestBodies/ImmutableRule'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n    delete:\n      summary: Delete the immutable tag rule.\n      tags:\n        - immutable\n      operationId: DeleteImmuRule\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n        - $ref: '#/components/parameters/immutableRuleId'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name_or_id}/webhook/policies':\n    get:\n      summary: List project webhook policies.\n      description: |\n        This endpoint returns webhook policies of a project.\n      tags:\n        - webhook\n      operationId: ListWebhookPoliciesOfProject\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n      responses:\n        '200':\n          description: Success\n          headers:\n            X-Total-Count:\n              description: The total count of webhook policies.\n              schema:\n                type: integer\n            Link:\n              description: Link refers to the previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WebhookPolicy'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n    post:\n      summary: Create project webhook policy.\n      description: |\n        This endpoint create a webhook policy if the project does not have one.\n      tags:\n        - webhook\n      operationId: CreateWebhookPolicyOfProject\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WebhookPolicy'\n        description: Properties \"targets\" and \"event_types\" needed.\n        required: true\n      responses:\n        '201':\n          description: Project webhook policy create successfully.\n          headers:\n            X-Request-Id:\n              description: The ID of the corresponding request for the response\n              schema:\n                type: string\n            Location:\n              description: The location of the resource\n              schema:\n                type: string\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}':\n    get:\n      summary: Get project webhook policy\n      description: |\n        This endpoint returns specified webhook policy of a project.\n      tags:\n        - webhook\n      operationId: GetWebhookPolicyOfProject\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n        - $ref: '#/components/parameters/webhookPolicyId'\n      responses:\n        '200':\n          description: Get webhook policy successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebhookPolicy'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    put:\n      summary: Update webhook policy of a project.\n      description: |\n        This endpoint is aimed to update the webhook policy of a project.\n      tags:\n        - webhook\n      operationId: UpdateWebhookPolicyOfProject\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n        - $ref: '#/components/parameters/webhookPolicyId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WebhookPolicy'\n        description: \u003e-\n          All properties needed except \"id\", \"project_id\", \"creation_time\",\n          \"update_time\".\n        required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    delete:\n      summary: Delete webhook policy of a project\n      description: |\n        This endpoint is aimed to delete webhookpolicy of a project.\n      tags:\n        - webhook\n      operationId: DeleteWebhookPolicyOfProject\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n        - $ref: '#/components/parameters/webhookPolicyId'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name_or_id}/webhook/lasttrigger':\n    get:\n      summary: Get project webhook policy last trigger info\n      description: \u003e\n        This endpoint returns last trigger information of project webhook\n        policy.\n      tags:\n        - webhook\n      operationId: LastTrigger\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n      responses:\n        '200':\n          description: Test webhook connection successfully.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WebhookLastTrigger'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name_or_id}/webhook/jobs':\n    get:\n      summary: List project webhook jobs\n      description: |\n        This endpoint returns webhook jobs of a project.\n      tags:\n        - webhookjob\n      operationId: ListWebhookJobs\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - name: policy_id\n          in: query\n          required: true\n          description: The policy ID.\n          schema:\n            type: integer\n            format: int64\n        - name: status\n          in: query\n          description: The status of webhook job.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: List project webhook jobs successfully.\n          headers:\n            X-Total-Count:\n              description: The total count of available items\n              schema:\n                type: integer\n            Link:\n              description: Link to previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WebhookJob'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  '/projects/{project_name_or_id}/webhook/events':\n    get:\n      summary: Get supported event types and notify types.\n      description: Get supportted event types and notify types.\n      tags:\n        - webhook\n      operationId: GetSupportedEventTypes\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/isResourceName'\n        - $ref: '#/components/parameters/projectNameOrId'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SupportedWebhookEventTypes'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  '/icons/{digest}':\n    get:\n      summary: Get artifact icon\n      description: \u003e-\n        Get the artifact icon with the specified digest. As the original icon\n        image is resized and encoded before returning, the parameter \"digest\" in\n        the path doesn't match the hash of the returned content\n      tags:\n        - icon\n      operationId: getIcon\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/digest'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Icon'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  /robots:\n    get:\n      summary: Get robot account\n      description: List the robot accounts with the specified level and project.\n      tags:\n        - robot\n      operationId: ListRobot\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n      responses:\n        '200':\n          description: Success\n          headers:\n            X-Total-Count:\n              description: The total count of robot accounts\n              schema:\n                type: integer\n            Link:\n              description: Link refers to the previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Robot'\n        '400':\n          $ref: '#/components/responses/400'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    post:\n      summary: Create a robot account\n      description: Create a robot account\n      tags:\n        - robot\n      operationId: CreateRobot\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RobotCreate'\n        description: The JSON object of a robot account.\n        required: true\n      responses:\n        '201':\n          description: Created\n          headers:\n            X-Request-Id:\n              description: The ID of the corresponding request for the response\n              schema:\n                type: string\n            Location:\n              description: The location of the resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RobotCreated'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  /quotas:\n    get:\n      summary: List quotas\n      description: List quotas\n      tags:\n        - quota\n      operationId: listQuotas\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - name: reference\n          in: query\n          description: The reference type of quota.\n          required: false\n          schema:\n            type: string\n        - name: reference_id\n          in: query\n          description: The reference id of quota.\n          required: false\n          schema:\n            type: string\n        - name: sort\n          in: query\n          required: false\n          description: \u003e\n            Sort method, valid values include:\n\n            'hard.resource_name', '-hard.resource_name', 'used.resource_name',\n            '-used.resource_name'.\n\n            Here '-' stands for descending order, resource_name should be the\n            real resource name of the quota.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successfully retrieved the quotas.\n          headers:\n            X-Total-Count:\n              description: The total count of access logs\n              schema:\n                type: integer\n            Link:\n              description: Link refers to the previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Quota'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  '/quotas/{id}':\n    get:\n      summary: Get the specified quota\n      description: Get the specified quota\n      tags:\n        - quota\n      operationId: getQuota\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - name: id\n          in: path\n          required: true\n          description: Quota ID\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Successfully retrieved the quota.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Quota'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    put:\n      summary: Update the specified quota\n      description: Update hard limits of the specified quota\n      tags:\n        - quota\n      operationId: updateQuota\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - name: id\n          in: path\n          required: true\n          description: Quota ID\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QuotaUpdateReq'\n        description: The new hard limits for the quota\n        required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/robots/{robot_id}':\n    get:\n      summary: Get a robot account\n      description: This endpoint returns specific robot account information by robot ID.\n      tags:\n        - robot\n      operationId: GetRobotByID\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/robotId'\n      responses:\n        '200':\n          description: Return matched robot information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Robot'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    put:\n      summary: Update a robot account\n      description: This endpoint updates specific robot account information by robot ID.\n      tags:\n        - robot\n      operationId: UpdateRobot\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/robotId'\n      requestBody:\n        $ref: '#/components/requestBodies/Robot'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '409':\n          $ref: '#/components/responses/409'\n        '500':\n          $ref: '#/components/responses/500'\n    patch:\n      summary: Refresh the robot secret\n      description: Refresh the robot secret\n      tags:\n        - robot\n      operationId: RefreshSec\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/robotId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RobotSec'\n        description: The JSON object of a robot account.\n        required: true\n      responses:\n        '200':\n          description: Return refreshed robot sec.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RobotSec'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    delete:\n      summary: Delete a robot account\n      description: This endpoint deletes specific robot account information by robot ID.\n      tags:\n        - robot\n      operationId: DeleteRobot\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/robotId'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  /replication/policies:\n    get:\n      summary: List replication policies\n      description: List replication policies\n      tags:\n        - replication\n      operationId: listReplicationPolicies\n      parameters:\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - name: name\n          in: query\n          required: false\n          description: 'Deprecated, use \"query\" instead. The policy name.'\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          headers:\n            X-Total-Count:\n              description: The total count of the resources\n              schema:\n                type: integer\n            Link:\n              description: Link refers to the previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ReplicationPolicy'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n    post:\n      summary: Create a replication policy\n      description: Create a replication policy\n      tags:\n        - replication\n      operationId: createReplicationPolicy\n      requestBody:\n        $ref: '#/components/requestBodies/ReplicationPolicy'\n      responses:\n        '201':\n          $ref: '#/components/responses/201'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '409':\n          $ref: '#/components/responses/409'\n        '500':\n          $ref: '#/components/responses/500'\n  '/replication/policies/{id}':\n    get:\n      summary: Get the specific replication policy\n      description: Get the specific replication policy\n      tags:\n        - replication\n      operationId: getReplicationPolicy\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Policy ID\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReplicationPolicy'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n    delete:\n      summary: Delete the specific replication policy\n      description: Delete the specific replication policy\n      tags:\n        - replication\n      operationId: deleteReplicationPolicy\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Replication policy ID\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '412':\n          $ref: '#/components/responses/412'\n        '500':\n          $ref: '#/components/responses/500'\n    put:\n      summary: Update the replication policy\n      description: Update the replication policy\n      tags:\n        - replication\n      operationId: updateReplicationPolicy\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The policy ID\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/ReplicationPolicy'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '409':\n          $ref: '#/components/responses/409'\n        '500':\n          $ref: '#/components/responses/500'\n  /replication/executions:\n    get:\n      summary: List replication executions\n      description: List replication executions\n      tags:\n        - replication\n      operationId: listReplicationExecutions\n      parameters:\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - name: policy_id\n          in: query\n          required: false\n          description: The ID of the policy that the executions belong to.\n          schema:\n            type: integer\n        - name: status\n          in: query\n          required: false\n          description: The execution status.\n          schema:\n            type: string\n        - name: trigger\n          in: query\n          required: false\n          description: The trigger mode.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          headers:\n            X-Total-Count:\n              description: The total count of the resources\n              schema:\n                type: integer\n            Link:\n              description: Link refers to the previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ReplicationExecution'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n    post:\n      summary: Start one replication execution\n      description: Start one replication execution according to the policy\n      tags:\n        - replication\n      operationId: startReplication\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StartReplicationExecution'\n        description: The ID of policy that the execution belongs to\n        required: true\n      responses:\n        '201':\n          $ref: '#/components/responses/201'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  '/replication/executions/{id}':\n    get:\n      summary: Get the specific replication execution\n      description: Get the replication execution specified by ID\n      tags:\n        - replication\n      operationId: getReplicationExecution\n      parameters:\n        - name: id\n          in: path\n          description: The ID of the execution.\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReplicationExecution'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    put:\n      summary: Stop the specific replication execution\n      description: Stop the replication execution specified by ID\n      tags:\n        - replication\n      operationId: stopReplication\n      parameters:\n        - name: id\n          in: path\n          description: The ID of the execution.\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/replication/executions/{id}/tasks':\n    get:\n      summary: List replication tasks for a specific execution\n      description: List replication tasks for a specific execution\n      tags:\n        - replication\n      operationId: listReplicationTasks\n      parameters:\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - name: id\n          in: path\n          description: The ID of the execution that the tasks belongs to.\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: status\n          in: query\n          required: false\n          description: The task status.\n          schema:\n            type: string\n        - name: resource_type\n          in: query\n          required: false\n          description: The resource type.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          headers:\n            X-Total-Count:\n              description: The total count of the resources\n              schema:\n                type: integer\n            Link:\n              description: Link refers to the previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ReplicationTask'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  '/replication/executions/{id}/tasks/{task_id}/log':\n    get:\n      summary: Get the log of the specific replication task\n      description: Get the log of the specific replication task\n      tags:\n        - replication\n      operationId: getReplicationLog\n      parameters:\n        - name: id\n          in: path\n          description: The ID of the execution that the tasks belongs to.\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: task_id\n          in: path\n          description: The ID of the task.\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n          headers:\n            Content-Type:\n              description: The content type of response body\n              schema:\n                type: string\n          content:\n            text/plain:\n              schema:\n                type: string\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  /replication/adapters:\n    get:\n      summary: List registry adapters\n      description: List registry adapters\n      tags:\n        - registry\n      operationId: listRegistryProviderTypes\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n      responses:\n        '200':\n          description: Success.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  /replication/adapterinfos:\n    get:\n      summary: List all registered registry provider information\n      description: List all registered registry provider information\n      tags:\n        - registry\n      operationId: listRegistryProviderInfos\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n      responses:\n        '200':\n          description: Success.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  $ref: '#/components/schemas/RegistryProviderInfo'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  /registries:\n    post:\n      summary: Create a registry\n      description: Create a registry\n      tags:\n        - registry\n      operationId: createRegistry\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Registry'\n        description: The registry\n        required: true\n      responses:\n        '201':\n          $ref: '#/components/responses/201'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '409':\n          $ref: '#/components/responses/409'\n        '500':\n          $ref: '#/components/responses/500'\n    get:\n      summary: List the registries\n      description: List the registries\n      tags:\n        - registry\n      operationId: listRegistries\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - name: name\n          in: query\n          required: false\n          description: 'Deprecated, use `q` instead.'\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          headers:\n            X-Total-Count:\n              description: The total count of the resources\n              schema:\n                type: integer\n            Link:\n              description: Link refers to the previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Registry'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  /registries/ping:\n    post:\n      summary: Check status of a registry\n      description: Check status of a registry\n      tags:\n        - registry\n      operationId: pingRegistry\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegistryPing'\n        description: The registry\n        required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/registries/{id}':\n    get:\n      summary: Get the specific registry\n      description: Get the specific registry\n      tags:\n        - registry\n      operationId: getRegistry\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - name: id\n          in: path\n          required: true\n          description: Registry ID\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Registry'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    delete:\n      summary: Delete the specific registry\n      description: Delete the specific registry\n      tags:\n        - registry\n      operationId: deleteRegistry\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - name: id\n          in: path\n          required: true\n          description: Registry ID\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '412':\n          $ref: '#/components/responses/412'\n        '500':\n          $ref: '#/components/responses/500'\n    put:\n      summary: Update the registry\n      description: Update the registry\n      tags:\n        - registry\n      operationId: updateRegistry\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - name: id\n          in: path\n          required: true\n          description: The registry ID\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegistryUpdate'\n        description: The registry\n        required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '409':\n          $ref: '#/components/responses/409'\n        '500':\n          $ref: '#/components/responses/500'\n  '/registries/{id}/info':\n    get:\n      summary: Get the registry info\n      description: Get the registry info\n      tags:\n        - registry\n      operationId: getRegistryInfo\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - name: id\n          in: path\n          required: true\n          description: Registry ID\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegistryInfo'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  /scans/all/metrics:\n    get:\n      summary: Get the metrics of the latest scan all process\n      description: Get the metrics of the latest scan all process\n      tags:\n        - scanAll\n      operationId: getLatestScanAllMetrics\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stats'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '412':\n          $ref: '#/components/responses/412'\n        '500':\n          $ref: '#/components/responses/500'\n  /scans/schedule/metrics:\n    get:\n      summary: Get the metrics of the latest scheduled scan all process\n      description: Get the metrics of the latest scheduled scan all process\n      tags:\n        - scanAll\n      operationId: getLatestScheduledScanAllMetrics\n      deprecated: true\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stats'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '412':\n          $ref: '#/components/responses/412'\n        '500':\n          $ref: '#/components/responses/500'\n  /systeminfo:\n    get:\n      summary: Get general system info\n      description: \u003e\n        This API is for retrieving general system info, this can be called by\n        anonymous request.  Some attributes will be omitted in the response when\n        this API is called by anonymous request.\n      operationId: systeminfo\n      tags:\n        - systeminfo\n      responses:\n        '200':\n          description: Get general info successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GeneralInfo'\n        '500':\n          $ref: '#/components/responses/500'\n  /systeminfo/volumes:\n    get:\n      summary: Get system volume info (total/free size).\n      description: \u003e\n        This endpoint is for retrieving system volume info that only provides\n        for admin user.  Note that the response only reflects the storage status\n        of local disk.\n      operationId: systeminfoVolumes\n      tags:\n        - systeminfo\n      responses:\n        '200':\n          description: Get system volumes successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SystemInfo'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  /systeminfo/getcert:\n    get:\n      summary: Get default root certificate.\n      description: |\n        This endpoint is for downloading a default root certificate.\n      operationId: systeminfoCert\n      tags:\n        - systeminfo\n      responses:\n        '200':\n          description: Get default root certificate successfully.\n          headers:\n            Content-Disposition:\n              description: To set the filename of the downloaded file.\n              schema:\n                type: string\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        '404':\n          description: Not found the default root certificate.\n        '500':\n          $ref: '#/components/responses/500'\n  /system/oidc/ping:\n    post:\n      summary: Test the OIDC endpoint.\n      description: \u003e\n        Test the OIDC endpoint, the setting of the endpoint is provided in the\n        request.  This API can only be called by system admin.\n      tags:\n        - oidc\n      operationId: pingOIDC\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                url:\n                  type: string\n                  description: The URL of OIDC endpoint to be tested.\n                verify_cert:\n                  type: boolean\n                  description: Whether the certificate should be verified\n        description: Request body for OIDC endpoint to be tested.\n        required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n  /system/gc:\n    get:\n      summary: Get gc results.\n      description: This endpoint let user get gc execution history.\n      tags:\n        - gc\n      operationId: getGCHistory\n      parameters:\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n      responses:\n        '200':\n          description: Get gc results successfully.\n          headers:\n            X-Total-Count:\n              description: The total count of history\n              schema:\n                type: integer\n            Link:\n              description: Link refers to the previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/GCHistory'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  '/system/gc/{gc_id}':\n    get:\n      summary: Get gc status.\n      description: This endpoint let user get gc status filtered by specific ID.\n      operationId: getGC\n      parameters:\n        - $ref: '#/components/parameters/gcId'\n      tags:\n        - gc\n      responses:\n        '200':\n          description: Get gc results successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GCHistory'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  '/system/gc/{gc_id}/log':\n    get:\n      summary: Get gc job log.\n      description: This endpoint let user get gc job logs filtered by specific ID.\n      operationId: getGCLog\n      parameters:\n        - $ref: '#/components/parameters/gcId'\n      tags:\n        - gc\n      responses:\n        '200':\n          description: Get successfully.\n          content:\n            text/plain:\n              schema:\n                type: string\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n  /system/gc/schedule:\n    get:\n      summary: Get gc's schedule.\n      description: This endpoint is for get schedule of gc job.\n      operationId: getGCSchedule\n      tags:\n        - gc\n      responses:\n        '200':\n          description: Get gc's schedule.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GCHistory'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n    post:\n      summary: Create a gc schedule.\n      description: |\n        This endpoint is for update gc schedule.\n      operationId: createGCSchedule\n      requestBody:\n        $ref: '#/components/requestBodies/Schedule'\n      tags:\n        - gc\n      responses:\n        '201':\n          $ref: '#/components/responses/201'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '409':\n          $ref: '#/components/responses/409'\n        '500':\n          $ref: '#/components/responses/500'\n    put:\n      summary: Update gc's schedule.\n      description: |\n        This endpoint is for update gc schedule.\n      operationId: updateGCSchedule\n      requestBody:\n        $ref: '#/components/requestBodies/Schedule'\n      tags:\n        - gc\n      responses:\n        '200':\n          description: Updated gc's schedule successfully.\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  /system/CVEAllowlist:\n    get:\n      summary: Get the system level allowlist of CVE.\n      description: \u003e-\n        Get the system level allowlist of CVE.  This API can be called by all\n        authenticated users.\n      operationId: getSystemCVEAllowlist\n      tags:\n        - SystemCVEAllowlist\n      responses:\n        '200':\n          description: Successfully retrieved the CVE allowlist.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CVEAllowlist'\n        '401':\n          $ref: '#/components/responses/401'\n        '500':\n          $ref: '#/components/responses/500'\n    put:\n      summary: Update the system level allowlist of CVE.\n      description: \u003e-\n        This API overwrites the system level allowlist of CVE with the list in\n        request body.  Only system Admin has permission to call this API.\n      operationId: putSystemCVEAllowlist\n      tags:\n        - SystemCVEAllowlist\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CVEAllowlist'\n        description: The allowlist with new content\n      responses:\n        '200':\n          description: Successfully updated the CVE allowlist.\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  /system/scanAll/schedule:\n    get:\n      summary: Get scan all's schedule.\n      description: \u003e-\n        This endpoint is for getting a schedule for the scan all job, which\n        scans all of images in Harbor.\n      tags:\n        - scanAll\n      operationId: getScanAllSchedule\n      responses:\n        '200':\n          description: \u003e-\n            Get a schedule for the scan all job, which scans all of images in\n            Harbor.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Schedule'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '412':\n          $ref: '#/components/responses/412'\n        '500':\n          $ref: '#/components/responses/500'\n    put:\n      summary: Update scan all's schedule.\n      description: \u003e-\n        This endpoint is for updating the schedule of scan all job, which scans\n        all of images in Harbor.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Schedule'\n        description: \u003e-\n          Updates the schedule of scan all job, which scans all of images in\n          Harbor.\n        required: true\n      tags:\n        - scanAll\n      operationId: updateScanAllSchedule\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '412':\n          $ref: '#/components/responses/412'\n        '500':\n          $ref: '#/components/responses/500'\n    post:\n      summary: Create a schedule or a manual trigger for the scan all job.\n      description: \u003e-\n        This endpoint is for creating a schedule or a manual trigger for the\n        scan all job, which scans all of images in Harbor.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Schedule'\n        description: Create a schedule or a manual trigger for the scan all job.\n        required: true\n      tags:\n        - scanAll\n      operationId: createScanAllSchedule\n      responses:\n        '201':\n          $ref: '#/components/responses/201'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '409':\n          $ref: '#/components/responses/409'\n        '412':\n          $ref: '#/components/responses/412'\n        '500':\n          $ref: '#/components/responses/500'\n  /ping:\n    get:\n      summary: Ping Harbor to check if it's alive.\n      description: \u003e-\n        This API simply replies a pong to indicate the process to handle API is\n        up, disregarding the health status of dependent components.\n      operationId: ping\n      tags:\n        - ping\n      responses:\n        '200':\n          description: The API server is alive\n          content:\n            text/plain:\n              schema:\n                type: string\n  /retentions/metadatas:\n    get:\n      summary: Get Retention Metadatas\n      description: Get Retention Metadatas.\n      operationId: getRentenitionMetadata\n      tags:\n        - Retention\n      responses:\n        '200':\n          description: Get Retention Metadatas successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RetentionMetadata'\n  /retentions:\n    post:\n      summary: Create Retention Policy\n      operationId: createRetention\n      description: \u003e-\n        Create Retention Policy, you can reference metadatas API for the policy\n        model. You can check project metadatas to find whether a retention\n        policy is already binded. This method should only be called when no\n        retention policy binded to project yet.\n      tags:\n        - Retention\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RetentionPolicy'\n        description: Create Retention Policy successfully.\n        required: true\n      responses:\n        '201':\n          $ref: '#/components/responses/201'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  '/retentions/{id}':\n    get:\n      summary: Get Retention Policy\n      operationId: getRetention\n      description: Get Retention Policy.\n      tags:\n        - Retention\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Retention ID.\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Get Retention Policy successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RetentionPolicy'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n    put:\n      summary: Update Retention Policy\n      operationId: updateRetention\n      description: \u003e-\n        Update Retention Policy, you can reference metadatas API for the policy\n        model. You can check project metadatas to find whether a retention\n        policy is already binded. This method should only be called when\n        retention policy has already binded to project.\n      tags:\n        - Retention\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Retention ID.\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RetentionPolicy'\n        required: true\n      responses:\n        '200':\n          description: Update Retention Policy successfully.\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  '/retentions/{id}/executions':\n    post:\n      summary: Trigger a Retention Execution\n      operationId: triggerRetentionExecution\n      description: \u003e-\n        Trigger a Retention Execution, if dry_run is True, nothing would be\n        deleted actually.\n      tags:\n        - Retention\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Retention ID.\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                dry_run:\n                  type: boolean\n        required: true\n      responses:\n        '200':\n          description: Trigger a Retention job successfully.\n        '201':\n          $ref: '#/components/responses/201'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n    get:\n      summary: Get Retention executions\n      operationId: listRetentionExecutions\n      description: \u003e-\n        Get Retention executions, execution status may be delayed before job\n        service schedule it up.\n      tags:\n        - Retention\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Retention ID.\n          schema:\n            type: integer\n            format: int64\n        - name: page\n          in: query\n          required: false\n          description: The page number.\n          schema:\n            type: integer\n            format: int64\n        - name: page_size\n          in: query\n          required: false\n          description: The size of per page.\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Get a Retention execution successfully.\n          headers:\n            X-Total-Count:\n              description: The total count of available items\n              schema:\n                type: integer\n            Link:\n              description: Link to previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RetentionExecution'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  '/retentions/{id}/executions/{eid}':\n    patch:\n      summary: Stop a Retention execution\n      operationId: operateRetentionExecution\n      description: 'Stop a Retention execution, only support \"stop\" action now.'\n      tags:\n        - Retention\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Retention ID.\n          schema:\n            type: integer\n            format: int64\n        - name: eid\n          in: path\n          required: true\n          description: Retention execution ID.\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                action:\n                  type: string\n        description: 'The action, only support \"stop\" now.'\n        required: true\n      responses:\n        '200':\n          description: Stop a Retention job successfully.\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  '/retentions/{id}/executions/{eid}/tasks':\n    get:\n      summary: Get Retention tasks\n      operationId: listRetentionTasks\n      description: 'Get Retention tasks, each repository as a task.'\n      tags:\n        - Retention\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Retention ID.\n          schema:\n            type: integer\n            format: int64\n        - name: eid\n          in: path\n          required: true\n          description: Retention execution ID.\n          schema:\n            type: integer\n            format: int64\n        - name: page\n          in: query\n          required: false\n          description: The page number.\n          schema:\n            type: integer\n            format: int64\n        - name: page_size\n          in: query\n          required: false\n          description: The size of per page.\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Get Retention job tasks successfully.\n          headers:\n            X-Total-Count:\n              description: The total count of available items\n              schema:\n                type: integer\n            Link:\n              description: Link to previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RetentionExecutionTask'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  '/retentions/{id}/executions/{eid}/tasks/{tid}':\n    get:\n      summary: Get Retention job task log\n      operationId: getRetentionTaskLog\n      description: \u003e-\n        Get Retention job task log, tags ratain or deletion detail will be shown\n        in a table.\n      tags:\n        - Retention\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Retention ID.\n          schema:\n            type: integer\n            format: int64\n        - name: eid\n          in: path\n          required: true\n          description: Retention execution ID.\n          schema:\n            type: integer\n            format: int64\n        - name: tid\n          in: path\n          required: true\n          description: Retention execution ID.\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Get Retention job task log successfully.\n          content:\n            text/plain:\n              schema:\n                type: string\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  /scanners:\n    get:\n      summary: List scanner registrations\n      description: |\n        Returns a list of currently configured scanner registrations.\n      tags:\n        - scanner\n      operationId: listScanners\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - $ref: '#/components/parameters/query'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n      responses:\n        '200':\n          description: A list of scanner registrations.\n          headers:\n            X-Total-Count:\n              description: The total count of available items\n              schema:\n                type: integer\n            Link:\n              description: Link to previous page and next page\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ScannerRegistration'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n    post:\n      summary: Create a scanner registration\n      description: |\n        Creats a new scanner registration with the given data.\n      tags:\n        - scanner\n      operationId: createScanner\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScannerRegistrationReq'\n        description: A scanner registration to be created.\n        required: true\n      responses:\n        '201':\n          description: Created successfully\n          headers:\n            Location:\n              description: The URL of the created resource\n              schema:\n                type: string\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  /scanners/ping:\n    post:\n      summary: Tests scanner registration settings\n      description: |\n        Pings scanner adapter to test endpoint URL and authorization settings.\n      tags:\n        - scanner\n      operationId: pingScanner\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScannerRegistrationSettings'\n        description: A scanner registration settings to be tested.\n        required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  '/scanners/{registration_id}':\n    get:\n      summary: Get a scanner registration details\n      description: |\n        Retruns the details of the specified scanner registration.\n      tags:\n        - scanner\n      operationId: getScanner\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - name: registration_id\n          in: path\n          description: The scanner registration identifer.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The details of the scanner registration.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScannerRegistration'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    put:\n      summary: Update a scanner registration\n      description: |\n        Updates the specified scanner registration.\n      tags:\n        - scanner\n      operationId: updateScanner\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - name: registration_id\n          in: path\n          description: The scanner registration identifier.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScannerRegistrationReq'\n        description: A scanner registraiton to be updated.\n        required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    delete:\n      summary: Delete a scanner registration\n      description: |\n        Deletes the specified scanner registration.\n      tags:\n        - scanner\n      operationId: deleteScanner\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - name: registration_id\n          in: path\n          description: The scanner registration identifier.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Deleted successfully and return the deleted registration\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScannerRegistration'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n    patch:\n      summary: Set system default scanner registration\n      description: |\n        Set the specified scanner registration as the system default one.\n      tags:\n        - scanner\n      operationId: setScannerAsDefault\n      parameters:\n        - name: registration_id\n          in: path\n          description: The scanner registration identifier.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IsDefault'\n        required: true\n      responses:\n        '200':\n          description: \u003e-\n            Successfully set the specified scanner registration as system\n            default\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n  '/scanners/{registration_id}/metadata':\n    get:\n      summary: Get the metadata of the specified scanner registration\n      description: \u003e\n        Get the metadata of the specified scanner registration, including the\n        capabilities and customized properties.\n      tags:\n        - scanner\n      operationId: getScannerMetadata\n      parameters:\n        - $ref: '#/components/parameters/requestId'\n        - name: registration_id\n          in: path\n          required: true\n          description: The scanner registration identifier.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The metadata of the specified scanner adapter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScannerAdapterMetadata'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\nservers:\n  - url: 'http://localhost/api/v2.0'\n  - url: 'https://localhost/api/v2.0'\ncomponents:\n  parameters:\n    query:\n      name: q\n      description: \u003e-\n        Query string to query resources. Supported query patterns are \"exact\n        match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union\n        releationship(k={v1 v2 v3})\" and \"list with intersetion\n        relationship(k=(v1 v2 v3))\". The value of range and list can be\n        string(enclosed by \" or '), integer or time(in format \"2020-04-09\n        02:36:00\"). All of these query patterns should be put in the query\n        string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]\n      in: query\n      required: false\n      schema:\n        type: string\n    sort:\n      name: sort\n      description: \u003e-\n        Sort the resource list in ascending or descending order. e.g. sort by\n        field1 in ascending orderr and field2 in descending order with\n        \"sort=field1,-field2\"\n      in: query\n      required: false\n      schema:\n        type: string\n    page:\n      name: page\n      in: query\n      required: false\n      description: The page number\n      schema:\n        type: integer\n        format: int64\n        default: 1\n    pageSize:\n      name: page_size\n      in: query\n      required: false\n      description: The size of per page\n      schema:\n        type: integer\n        format: int64\n        maximum: 100\n        default: 10\n    requestId:\n      name: X-Request-Id\n      description: An unique ID for the request\n      in: header\n      required: false\n      schema:\n        type: string\n        minLength: 1\n    resourceNameInLocation:\n      name: X-Resource-Name-In-Location\n      description: \u003e-\n        The flag to indicate whether to return the name of the resource in\n        Location. When X-Resource-Name-In-Location is true, the Location will\n        return the name of the resource.\n      in: header\n      required: false\n      schema:\n        type: boolean\n        default: false\n    isResourceName:\n      name: X-Is-Resource-Name\n      description: \u003e-\n        The flag to indicate whether the parameter which supports both name and\n        id in the path is the name of the resource. When the X-Is-Resource-Name\n        is false and the parameter can be converted to an integer, the parameter\n        will be as an id, otherwise, it will be as a name.\n      in: header\n      required: false\n      schema:\n        type: boolean\n        default: false\n    acceptVulnerabilities:\n      name: X-Accept-Vulnerabilities\n      in: header\n      description: \u003e-\n        A comma-separated lists of MIME types for the scan report or scan\n        summary. The first mime type will be used when the report found for it.\n\n        Currently the mime type supports\n        'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0'\n        and 'application/vnd.security.vulnerability.report; version=1.1'\n      schema:\n        type: string\n        default: application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0\n    projectName:\n      name: project_name\n      in: path\n      description: The name of the project\n      required: true\n      schema:\n        type: string\n    projectNameOrId:\n      name: project_name_or_id\n      in: path\n      description: The name or id of the project\n      required: true\n      schema:\n        type: string\n    repositoryName:\n      name: repository_name\n      in: path\n      description: \u003e-\n        The name of the repository. If it contains slash, encode it with URL\n        encoding. e.g. a/b -\u003e a%252Fb\n      required: true\n      schema:\n        type: string\n    reference:\n      name: reference\n      in: path\n      description: 'The reference of the artifact, can be digest or tag'\n      required: true\n      schema:\n        type: string\n    digest:\n      name: digest\n      in: path\n      description: The digest of the resource\n      required: true\n      schema:\n        type: string\n    tagName:\n      name: tag_name\n      in: path\n      description: The name of the tag\n      required: true\n      schema:\n        type: string\n    instanceName:\n      name: preheat_instance_name\n      in: path\n      description: Instance Name\n      required: true\n      schema:\n        type: string\n    preheatPolicyName:\n      name: preheat_policy_name\n      in: path\n      description: Preheat Policy Name\n      required: true\n      schema:\n        type: string\n    executionId:\n      name: execution_id\n      in: path\n      description: Execution ID\n      required: true\n      schema:\n        type: integer\n    taskId:\n      name: task_id\n      in: path\n      description: Task ID\n      required: true\n      schema:\n        type: integer\n    robotId:\n      name: robot_id\n      in: path\n      description: Robot ID\n      required: true\n      schema:\n        type: integer\n    gcId:\n      name: gc_id\n      in: path\n      description: The ID of the gc log\n      required: true\n      schema:\n        type: integer\n        format: int64\n    webhookPolicyId:\n      name: webhook_policy_id\n      in: path\n      description: The ID of the webhook policy\n      required: true\n      schema:\n        type: integer\n        format: int64\n    immutableRuleId:\n      name: immutable_rule_id\n      in: path\n      description: The ID of the immutable rule\n      required: true\n      schema:\n        type: integer\n        format: int64\n  responses:\n    '200':\n      description: Success\n      headers:\n        X-Request-Id:\n          description: The ID of the corresponding request for the response\n          schema:\n            type: string\n    '201':\n      description: Created\n      headers:\n        X-Request-Id:\n          description: The ID of the corresponding request for the response\n          schema:\n            type: string\n        Location:\n          description: The location of the resource\n          schema:\n            type: string\n    '202':\n      description: Accepted\n      headers:\n        X-Request-Id:\n          description: The ID of the corresponding request for the response\n          schema:\n            type: string\n    '400':\n      description: Bad request\n      headers:\n        X-Request-Id:\n          description: The ID of the corresponding request for the response\n          schema:\n            type: string\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Errors'\n    '401':\n      description: Unauthorized\n      headers:\n        X-Request-Id:\n          description: The ID of the corresponding request for the response\n          schema:\n            type: string\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Errors'\n    '403':\n      description: Forbidden\n      headers:\n        X-Request-Id:\n          description: The ID of the corresponding request for the response\n          schema:\n            type: string\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Errors'\n    '404':\n      description: Not found\n      headers:\n        X-Request-Id:\n          description: The ID of the corresponding request for the response\n          schema:\n            type: string\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Errors'\n    '405':\n      description: Method not allowed\n      headers:\n        X-Request-Id:\n          description: The ID of the corresponding request for the response\n          schema:\n            type: string\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Errors'\n    '409':\n      description: Conflict\n      headers:\n        X-Request-Id:\n          description: The ID of the corresponding request for the response\n          schema:\n            type: string\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Errors'\n    '412':\n      description: Precondition failed\n      headers:\n        X-Request-Id:\n          description: The ID of the corresponding request for the response\n          schema:\n            type: string\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Errors'\n    '500':\n      description: Internal server error\n      headers:\n        X-Request-Id:\n          description: The ID of the corresponding request for the response\n          schema:\n            type: string\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Errors'\n  requestBodies:\n    UserGroup:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UserGroup'\n    Schedule:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Schedule'\n      description: Updates of gc's schedule.\n      required: true\n    PreheatPolicy:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/PreheatPolicy'\n      description: The policy schema info\n      required: true\n    Instance:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Instance'\n      description: The JSON object of instance.\n      required: true\n    Robot:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Robot'\n      description: The JSON object of a robot account.\n      required: true\n    ImmutableRule:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ImmutableRule'\n      required: true\n    ReplicationPolicy:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ReplicationPolicy'\n      description: The replication policy\n      required: true\n  securitySchemes:\n    basic:\n      type: http\n      scheme: basic\n  schemas:\n    User:\n      type: object\n      properties:\n        user_id:\n          type: integer\n          format: int\n          description: The ID of the user.\n        username:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        realname:\n          type: string\n        comment:\n          type: string\n        deleted:\n          type: boolean\n        role_name:\n          type: string\n        role_id:\n          type: integer\n          format: int\n        sysadmin_flag:\n          type: boolean\n        admin_role_in_auth:\n          type: boolean\n          description: \u003e-\n            indicate the admin privilege is grant by authenticator (LDAP), is\n            always false unless it is the current login user\n        reset_uuid:\n          type: string\n        Salt:\n          type: string\n        creation_time:\n          type: string\n        update_time:\n          type: string\n    UserSearch:\n      type: object\n      properties:\n        user_id:\n          type: integer\n          format: int\n          description: The ID of the user.\n        username:\n          type: string\n    Password:\n      type: object\n      properties:\n        old_password:\n          type: string\n          description: The user's existing password.\n        new_password:\n          type: string\n          description: New password for marking as to be updated.\n    Role:\n      type: object\n      properties:\n        role_id:\n          type: integer\n          format: int32\n          description: ID in table.\n        role_code:\n          type: string\n          description: Description of permissions for the role.\n        role_name:\n          type: string\n          description: Name the the role.\n        role_mask:\n          type: string\n    RoleParam:\n      type: object\n      properties:\n        roles:\n          type: array\n          items:\n            type: integer\n            format: int32\n          description: Role ID for updating project role member.\n        username:\n          type: string\n          description: Username relevant to a project role member.\n    StatisticMap:\n      type: object\n      properties:\n        private_project_count:\n          type: integer\n          format: int32\n          description: The count of the private projects which the user is a member of.\n        private_repo_count:\n          type: integer\n          format: int32\n          description: \u003e-\n            The count of the private repositories belonging to the projects\n            which the user is a member of.\n        public_project_count:\n          type: integer\n          format: int32\n          description: The count of the public projects.\n        public_repo_count:\n          type: integer\n          format: int32\n          description: \u003e-\n            The count of the public repositories belonging to the public\n            projects which the user is a member of.\n        total_project_count:\n          type: integer\n          format: int32\n          description: 'The count of the total projects, only be seen when the is admin.'\n        total_repo_count:\n          type: integer\n          format: int32\n          description: \u003e-\n            The count of the total repositories, only be seen when the user is\n            admin.\n    SysAdminFlag:\n      type: object\n      properties:\n        sysadmin_flag:\n          type: boolean\n          description: 'true-admin, false-not admin.'\n    UserProfile:\n      type: object\n      properties:\n        email:\n          type: string\n          description: The new email.\n        realname:\n          type: string\n          description: The new realname.\n        comment:\n          type: string\n          description: The new comment.\n    LdapUsers:\n      type: object\n      properties:\n        ldap_username:\n          type: string\n          description: search ldap user name based on ldapconf.\n        ldap_realname:\n          type: string\n          description: \u003e-\n            system will try to guess the user realname form \"uid\" or \"cn\"\n            attribute.\n        ldap_email:\n          type: string\n          description: \u003e-\n            system will try to guess the user email address form \"mail\" or\n            \"email\" attribute.\n    LdapFailedImportUsers:\n      type: object\n      properties:\n        ldap_uid:\n          type: string\n          description: the uid can't add to system.\n        error:\n          type: string\n          description: fail reason.\n    EmailServerSetting:\n      type: object\n      properties:\n        email_host:\n          type: string\n          description: The host of email server.\n        email_port:\n          type: integer\n          description: The port of email server.\n        email_username:\n          type: string\n          description: The username of email server.\n        email_password:\n          type: string\n          description: The password of email server.\n        email_ssl:\n          type: boolean\n          description: Use ssl/tls or not.\n        email_identity:\n          type: string\n          description: The dentity of email server.\n    ComponentOverviewEntry:\n      type: object\n      properties:\n        severity:\n          type: integer\n          description: '1-None/Negligible, 2-Unknown, 3-Low, 4-Medium, 5-High'\n        count:\n          type: integer\n          description: number of the components with certain severity.\n    Configurations:\n      type: object\n      properties:\n        auth_mode:\n          type: string\n          description: 'The auth mode of current system, such as \"db_auth\", \"ldap_auth\"'\n        count_per_project:\n          type: string\n          description: The default count quota for the new created projects.\n        email_from:\n          type: string\n          description: The sender name for Email notification.\n        email_host:\n          type: string\n          description: The hostname of SMTP server that sends Email notification.\n        email_port:\n          type: integer\n          description: The port of SMTP server.\n        email_identity:\n          type: string\n          description: By default it's empty so the email_username is picked.\n        email_username:\n          type: string\n          description: The username for authenticate against SMTP server.\n        email_ssl:\n          type: boolean\n          description: \u003e-\n            When it's set to true the system will access Email server via TLS by\n            default.  If it's set to false, it still will handle \"STARTTLS\" from\n            server side.\n        email_insecure:\n          type: boolean\n          description: \u003e-\n            Whether or not the certificate will be verified when Harbor tries to\n            access the email server.\n        ldap_url:\n          type: string\n          description: The URL of LDAP server.\n        ldap_base_dn:\n          type: string\n          description: The Base DN for LDAP binding.\n        ldap_filter:\n          type: string\n          description: The filter for LDAP binding.\n        ldap_scope:\n          type: integer\n          description: '0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'\n        ldap_uid:\n          type: string\n          description: \u003e-\n            The attribute which is used as identity for the LDAP binding, such\n            as \"CN\" or \"SAMAccountname\"\n        ldap_search_dn:\n          type: string\n          description: The DN of the user to do the search.\n        ldap_timeout:\n          type: integer\n          description: timeout in seconds for connection to LDAP server.\n        ldap_group_attribute_name:\n          type: string\n          description: \u003e-\n            The attribute which is used as identity of the LDAP group, default\n            is cn.\n        ldap_group_base_dn:\n          type: string\n          description: The base DN to search LDAP group.\n        ldap_group_search_filter:\n          type: string\n          description: The filter to search the ldap group.\n        ldap_group_search_scope:\n          type: integer\n          description: \u003e-\n            The scope to search ldap. '0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL,\n            2-LDAP_SCOPE_SUBTREE'\n        ldap_group_admin_dn:\n          type: string\n          description: \u003e-\n            Specify the ldap group which have the same privilege with Harbor\n            admin.\n        oidc_client_id:\n          type: string\n          description: The client id of the OIDC.\n        oidc_client_secret:\n          type: string\n          description: The client secret of the OIDC.\n        oidc_endpoint:\n          type: string\n          description: 'The URL of an OIDC-complaint server, must start with ''https://''.'\n        oidc_name:\n          type: string\n          description: The name of the OIDC provider.\n        oidc_scope:\n          type: string\n          description: \u003e-\n            The scope sent to OIDC server during authentication, should be\n            separated by comma. It has to contain “openid”, and\n            “offline_access”. If you are using google, please remove\n            “offline_access” from this field.\n        oidc_verify_cert:\n          type: boolean\n          description: \u003e-\n            Whether verify your OIDC server certificate, disable it if your OIDC\n            server is hosted via self-hosted certificate.\n        project_creation_restriction:\n          type: string\n          description: \u003e-\n            This attribute restricts what users have the permission to create\n            project.  It can be \"everyone\" or \"adminonly\".\n        quota_per_project_enable:\n          type: boolean\n          description: This attribute indicates whether quota per project enabled in harbor\n        read_only:\n          type: boolean\n          description: '''docker push'' is prohibited by Harbor if you set it to true.   '\n        self_registration:\n          type: boolean\n          description: \u003e-\n            Whether the Harbor instance supports self-registration.  If it's set\n            to false, admin need to add user to the instance.\n        storage_per_project:\n          type: string\n          description: The default storage quota for the new created projects.\n        token_expiration:\n          type: integer\n          description: 'The expiration time of the token for internal Registry, in minutes.'\n        verify_remote_cert:\n          type: boolean\n          description: \u003e-\n            Whether or not the certificate will be verified when Harbor tries to\n            access a remote Harbor instance for replication.\n        scan_all_policy:\n          type: object\n          properties:\n            type:\n              type: string\n              description: \u003e-\n                The type of scan all policy, currently the valid values are\n                \"none\" and \"daily\"\n            parameter:\n              type: object\n              properties:\n                daily_time:\n                  type: integer\n                  description: \u003e-\n                    The offset in seconds of UTC 0 o'clock, only valid when the\n                    policy type is \"daily\"\n              description: \u003e-\n                The parameters of the policy, the values are dependant on the\n                type of the policy.\n    ConfigurationsResponse:\n      type: object\n      properties:\n        auth_mode:\n          $ref: '#/components/schemas/StringConfigItem'\n        count_per_project:\n          $ref: '#/components/schemas/IntegerConfigItem'\n        email_from:\n          $ref: '#/components/schemas/StringConfigItem'\n        email_host:\n          $ref: '#/components/schemas/StringConfigItem'\n        email_port:\n          $ref: '#/components/schemas/IntegerConfigItem'\n        email_identity:\n          $ref: '#/components/schemas/StringConfigItem'\n        email_username:\n          $ref: '#/components/schemas/StringConfigItem'\n        email_ssl:\n          $ref: '#/components/schemas/BoolConfigItem'\n        email_insecure:\n          $ref: '#/components/schemas/BoolConfigItem'\n        ldap_url:\n          $ref: '#/components/schemas/StringConfigItem'\n        ldap_base_dn:\n          $ref: '#/components/schemas/StringConfigItem'\n        ldap_filter:\n          $ref: '#/components/schemas/StringConfigItem'\n        ldap_scope:\n          type: integer\n          description: '0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'\n        ldap_uid:\n          $ref: '#/components/schemas/StringConfigItem'\n        ldap_search_dn:\n          type: string\n          description: The DN of the user to do the search.\n        ldap_timeout:\n          $ref: '#/components/schemas/IntegerConfigItem'\n        ldap_group_attribute_name:\n          $ref: '#/components/schemas/StringConfigItem'\n        ldap_group_base_dn:\n          $ref: '#/components/schemas/StringConfigItem'\n        ldap_group_search_filter:\n          $ref: '#/components/schemas/StringConfigItem'\n        ldap_group_search_scope:\n          $ref: '#/components/schemas/IntegerConfigItem'\n        ldap_group_admin_dn:\n          $ref: '#/components/schemas/StringConfigItem'\n        oidc_client_id:\n          $ref: '#/components/schemas/StringConfigItem'\n        oidc_endpoint:\n          $ref: '#/components/schemas/StringConfigItem'\n        oidc_name:\n          $ref: '#/components/schemas/StringConfigItem'\n        oidc_scope:\n          $ref: '#/components/schemas/StringConfigItem'\n        oidc_verify_cert:\n          $ref: '#/components/schemas/BoolConfigItem'\n        project_creation_restriction:\n          $ref: '#/components/schemas/StringConfigItem'\n        quota_per_project_enable:\n          $ref: '#/components/schemas/BoolConfigItem'\n        read_only:\n          $ref: '#/components/schemas/BoolConfigItem'\n        self_registration:\n          $ref: '#/components/schemas/BoolConfigItem'\n        storage_per_project:\n          $ref: '#/components/schemas/IntegerConfigItem'\n        token_expiration:\n          $ref: '#/components/schemas/IntegerConfigItem'\n        verify_remote_cert:\n          $ref: '#/components/schemas/BoolConfigItem'\n        scan_all_policy:\n          type: object\n          properties:\n            type:\n              type: string\n              description: \u003e-\n                The type of scan all policy, currently the valid values are\n                \"none\" and \"daily\"\n            parameter:\n              type: object\n              properties:\n                daily_time:\n                  type: integer\n                  description: \u003e-\n                    The offset in seconds of UTC 0 o'clock, only valid when the\n                    policy type is \"daily\"\n              description: \u003e-\n                The parameters of the policy, the values are dependant on the\n                type of the policy.\n    ProjectMemberEntity:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: the project member id\n        project_id:\n          type: integer\n          description: the project id\n        entity_name:\n          type: string\n          description: the name of the group member.\n        role_name:\n          type: string\n          description: the name of the role\n        role_id:\n          type: integer\n          description: the role id\n        entity_id:\n          type: integer\n          description: \u003e-\n            the id of entity, if the member is a user, it is user_id in user\n            table. if the member is a user group, it is the user group's ID in\n            user_group table.\n        entity_type:\n          type: string\n          description: 'the entity''s type, u for user entity, g for group entity.'\n    ProjectMember:\n      type: object\n      properties:\n        role_id:\n          type: integer\n          description: \u003e-\n            The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for\n            maintainer\n        member_user:\n          $ref: '#/components/schemas/UserEntity'\n        member_group:\n          $ref: '#/components/schemas/UserGroup'\n    RoleRequest:\n      type: object\n      properties:\n        role_id:\n          type: integer\n          description: \u003e-\n            The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for\n            maintainer\n    UserEntity:\n      type: object\n      properties:\n        user_id:\n          type: integer\n          description: The ID of the user.\n        username:\n          type: string\n          description: The name of the user.\n    StringConfigItem:\n      type: object\n      properties:\n        value:\n          type: string\n          description: The string value of current config item\n        editable:\n          type: boolean\n          description: The configure item can be updated or not\n    BoolConfigItem:\n      type: object\n      properties:\n        value:\n          type: boolean\n          description: The boolean value of current config item\n        editable:\n          type: boolean\n          description: The configure item can be updated or not\n    IntegerConfigItem:\n      type: object\n      properties:\n        value:\n          type: integer\n          description: The integer value of current config item\n        editable:\n          type: boolean\n          description: The configure item can be updated or not\n    ChartAPIError:\n      description: The error object returned by chart repository API\n      type: object\n      required:\n        - error\n      properties:\n        error:\n          type: string\n          description: The error message returned by the chart API\n    UnauthorizedChartAPIError:\n      description: Unauthorized\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ChartAPIError'\n    ForbiddenChartAPIError:\n      description: Operation is forbidden or quota exceeded\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ChartAPIError'\n    InternalChartAPIError:\n      description: Internal server error occurred\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ChartAPIError'\n    NotFoundChartAPIError:\n      description: Not found\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ChartAPIError'\n    InsufficientStorageChartAPIError:\n      description: Insufficient storage\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ChartAPIError'\n    BadRequestFormatedError:\n      description: Bad request\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ChartAPIError'\n    ConflictFormatedError:\n      description: Conflicts\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/ChartAPIError'\n    Labels:\n      type: array\n      description: A list of label\n      items:\n        $ref: '#/components/schemas/Label'\n    OverallHealthStatus:\n      type: object\n      description: The system health status\n      properties:\n        status:\n          type: string\n          description: \u003e-\n            The overall health status. It is \"healthy\" only when all the\n            components' status are \"healthy\"\n        components:\n          type: array\n          items:\n            $ref: '#/components/schemas/ComponentHealthStatus'\n    ComponentHealthStatus:\n      type: object\n      description: The health status of component\n      properties:\n        name:\n          type: string\n          description: The component name\n        status:\n          type: string\n          description: The health status of component\n        error:\n          type: string\n          description: (optional) The error message when the status is \"unhealthy\"\n    Permission:\n      type: object\n      description: The permission\n      properties:\n        resource:\n          type: string\n          description: The permission resoruce\n        action:\n          type: string\n          description: The permission action\n    Namespace:\n      type: object\n      description: The namespace of registry\n      properties:\n        name:\n          type: string\n          description: The name of namespace\n        metadata:\n          type: object\n          description: The metadata of namespace\n    QuotaSwitcher:\n      type: object\n      properties:\n        enabled:\n          type: boolean\n          description: The quota is enable or disable\n    Errors:\n      description: \u003e-\n        The error array that describe the errors got during the handling of\n        request\n      type: object\n      properties:\n        errors:\n          type: array\n          items:\n            $ref: '#/components/schemas/Error'\n    Error:\n      description: a model for all the error response coming from harbor\n      type: object\n      properties:\n        code:\n          type: string\n          description: The error code\n        message:\n          type: string\n          description: The error message\n    Search:\n      type: object\n      properties:\n        project:\n          description: Search results of the projects that matched the filter keywords.\n          type: array\n          items:\n            $ref: '#/components/schemas/Project'\n        repository:\n          description: Search results of the repositories that matched the filter keywords.\n          type: array\n          items:\n            $ref: '#/components/schemas/SearchRepository'\n        chart:\n          description: Search results of the charts that macthed the filter keywords.\n          type: array\n          items:\n            $ref: '#/components/schemas/SearchResult'\n          x-omitempty: true\n          x-isnullable: true\n    SearchRepository:\n      type: object\n      properties:\n        project_id:\n          type: integer\n          description: The ID of the project that the repository belongs to\n        project_name:\n          type: string\n          description: The name of the project that the repository belongs to\n        project_public:\n          type: boolean\n          description: \u003e-\n            The flag to indicate the publicity of the project that the\n            repository belongs to (1 is public, 0 is not)\n        repository_name:\n          type: string\n          description: The name of the repository\n        pull_count:\n          type: integer\n          description: The count how many times the repository is pulled\n        artifact_count:\n          type: integer\n          description: The count of artifacts in the repository\n    SearchResult:\n      type: object\n      description: The chart search result item\n      properties:\n        Name:\n          type: string\n          description: The chart name with repo name\n        Score:\n          type: integer\n          description: The matched level\n        Chart:\n          $ref: '#/components/schemas/ChartVersion'\n    ChartVersion:\n      type: object\n      description: A specified chart entry\n      allOf:\n        - $ref: '#/components/schemas/ChartMetadata'\n        - type: object\n          properties:\n            created:\n              type: string\n              description: The created time of the chart entry\n            removed:\n              type: boolean\n              description: A flag to indicate if the chart entry is removed\n            digest:\n              type: string\n              description: The digest value of the chart entry\n            urls:\n              type: array\n              description: The urls of the chart entry\n              items:\n                type: string\n      properties:\n        labels:\n          type: array\n          description: A list of label\n          items:\n            $ref: '#/components/schemas/Label'\n    ChartMetadata:\n      type: object\n      description: The metadata of chart version\n      required:\n        - name\n        - version\n        - engine\n        - icon\n        - apiVersion\n        - appVersion\n      properties:\n        name:\n          type: string\n          description: The name of the chart\n        home:\n          type: string\n          description: The URL to the relevant project page\n        sources:\n          type: array\n          description: The URL to the source code of chart\n          items:\n            type: string\n        version:\n          type: string\n          description: A SemVer 2 version of chart\n        description:\n          type: string\n          description: A one-sentence description of chart\n        keywords:\n          type: array\n          description: A list of string keywords\n          items:\n            type: string\n        engine:\n          type: string\n          description: The name of template engine\n        icon:\n          type: string\n          description: The URL to an icon file\n        apiVersion:\n          type: string\n          description: The API version of this chart\n        appVersion:\n          type: string\n          description: The version of the application enclosed in the chart\n        deprecated:\n          type: boolean\n          description: Whether or not this chart is deprecated\n    Repository:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: The ID of the repository\n        project_id:\n          type: integer\n          format: int64\n          description: The ID of the project that the repository belongs to\n        name:\n          type: string\n          description: The name of the repository\n        description:\n          type: string\n          description: The description of the repository\n        artifact_count:\n          type: integer\n          format: int64\n          description: The count of the artifacts inside the repository\n        pull_count:\n          type: integer\n          format: int64\n          description: The count that the artifact inside the repository pulled\n        creation_time:\n          type: string\n          format: date-time\n          description: The creation time of the repository\n        update_time:\n          type: string\n          format: date-time\n          description: The update time of the repository\n    Artifact:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: The ID of the artifact\n        type:\n          type: string\n          description: 'The type of the artifact, e.g. image, chart, etc'\n        media_type:\n          type: string\n          description: The media type of the artifact\n        manifest_media_type:\n          type: string\n          description: The manifest media type of the artifact\n        project_id:\n          type: integer\n          format: int64\n          description: The ID of the project that the artifact belongs to\n        repository_id:\n          type: integer\n          format: int64\n          description: The ID of the repository that the artifact belongs to\n        digest:\n          type: string\n          description: The digest of the artifact\n        size:\n          type: integer\n          format: int64\n          description: The size of the artifact\n        icon:\n          type: string\n          description: The digest of the icon\n        push_time:\n          type: string\n          format: date-time\n          description: The push time of the artifact\n        pull_time:\n          type: string\n          format: date-time\n          description: The latest pull time of the artifact\n        extra_attrs:\n          $ref: '#/components/schemas/ExtraAttrs'\n        annotations:\n          $ref: '#/components/schemas/Annotations'\n        references:\n          type: array\n          items:\n            $ref: '#/components/schemas/Reference'\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/Tag'\n        addition_links:\n          $ref: '#/components/schemas/AdditionLinks'\n        labels:\n          type: array\n          items:\n            $ref: '#/components/schemas/Label'\n        scan_overview:\n          $ref: '#/components/schemas/ScanOverview'\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: The ID of the tag\n        repository_id:\n          type: integer\n          format: int64\n          description: The ID of the repository that the tag belongs to\n        artifact_id:\n          type: integer\n          format: int64\n          description: The ID of the artifact that the tag attached to\n        name:\n          type: string\n          description: The name of the tag\n        push_time:\n          type: string\n          format: date-time\n          description: The push time of the tag\n        pull_time:\n          type: string\n          format: date-time\n          description: The latest pull time of the tag\n        immutable:\n          type: boolean\n          x-omitempty: false\n          description: The immutable status of the tag\n        signed:\n          type: boolean\n          x-omitempty: false\n          description: The attribute indicates whether the tag is signed or not\n    ExtraAttrs:\n      type: object\n      additionalProperties:\n        type: object\n    Annotations:\n      type: object\n      additionalProperties:\n        type: string\n    AdditionLinks:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/AdditionLink'\n    AdditionLink:\n      type: object\n      properties:\n        href:\n          type: string\n          description: The link of the addition\n        absolute:\n          type: boolean\n          x-omitempty: false\n          description: Determine whether the link is an absolute URL or not\n    Reference:\n      type: object\n      properties:\n        parent_id:\n          type: integer\n          format: int64\n          description: The parent ID of the reference\n        child_id:\n          type: integer\n          format: int64\n          description: The child ID of the reference\n        child_digest:\n          type: string\n          description: The digest of the child artifact\n        platform:\n          $ref: '#/components/schemas/Platform'\n        annotations:\n          $ref: '#/components/schemas/Annotations'\n        urls:\n          type: array\n          description: The download URLs\n          items:\n            type: string\n    Platform:\n      type: object\n      properties:\n        architecture:\n          type: string\n          description: The architecture that the artifact applys to\n        os:\n          type: string\n          description: The OS that the artifact applys to\n        '''os.version''':\n          type: string\n          description: The version of the OS that the artifact applys to\n        '''os.features''':\n          type: array\n          description: The features of the OS that the artifact applys to\n          items:\n            type: string\n        variant:\n          type: string\n          description: The variant of the CPU\n    Label:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: The ID of the label\n        name:\n          type: string\n          description: The name the label\n        description:\n          type: string\n          description: The description the label\n        color:\n          type: string\n          description: The color the label\n        scope:\n          type: string\n          description: The scope the label\n        project_id:\n          type: integer\n          format: int64\n          description: The ID of project that the label belongs to\n        creation_time:\n          type: string\n          format: date-time\n          description: The creation time the label\n        update_time:\n          type: string\n          format: date-time\n          description: The update time of the label\n    Scanner:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the scanner\n          example: Trivy\n        vendor:\n          type: string\n          description: Name of the scanner provider\n          example: Aqua Security\n        version:\n          type: string\n          description: Version of the scanner adapter\n          example: v0.9.1\n    ScanOverview:\n      type: object\n      description: The scan overview attached in the metadata of tag\n      additionalProperties:\n        $ref: '#/components/schemas/NativeReportSummary'\n    NativeReportSummary:\n      type: object\n      description: The summary for the native report\n      properties:\n        report_id:\n          type: string\n          description: id of the native scan report\n          example: 5f62c830-f996-11e9-957f-0242c0a89008\n        scan_status:\n          type: string\n          description: The status of the report generating process\n          example: Success\n        severity:\n          type: string\n          description: The overall severity\n          example: High\n        duration:\n          type: integer\n          format: int64\n          description: The seconds spent for generating the report\n          example: 300\n        summary:\n          $ref: '#/components/schemas/VulnerabilitySummary'\n        start_time:\n          type: string\n          format: date-time\n          description: The start time of the scan process that generating report\n          example: '2006-01-02T14:04:05'\n        end_time:\n          type: string\n          format: date-time\n          description: The end time of the scan process that generating report\n          example: '2006-01-02T15:04:05'\n        complete_percent:\n          type: integer\n          description: \u003e-\n            The complete percent of the scanning which value is between 0 and\n            100\n          example: 100\n        scanner:\n          $ref: '#/components/schemas/Scanner'\n    VulnerabilitySummary:\n      type: object\n      description: \u003e\n        VulnerabilitySummary contains the total number of the foun d\n        vulnerabilities number and numbers of each severity level.\n      properties:\n        total:\n          type: integer\n          format: int\n          description: The total number of the found vulnerabilities\n          example: 500\n          x-omitempty: false\n        fixable:\n          type: integer\n          format: int\n          description: The number of the fixable vulnerabilities\n          example: 100\n          x-omitempty: false\n        summary:\n          type: object\n          description: Numbers of the vulnerabilities with different severity\n          additionalProperties:\n            type: integer\n            format: int\n            example: 10\n          example:\n            Critical: 5\n            High: 5\n          x-omitempty: false\n    AuditLog:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The ID of the audit log entry.\n        username:\n          type: string\n          description: Username of the user in this log entry.\n        resource:\n          type: string\n          description: Name of the repository in this log entry.\n        resource_type:\n          type: string\n          description: Tag of the repository in this log entry.\n        operation:\n          type: string\n          description: The operation against the repository in this log entry.\n        op_time:\n          type: string\n          format: date-time\n          example: '2006-01-02T15:04:05'\n          description: The time when this operation is triggered.\n    Metadata:\n      type: object\n      properties:\n        id:\n          type: string\n          description: id\n        name:\n          type: string\n          description: name\n        icon:\n          type: string\n          description: icon\n        maintainers:\n          type: array\n          description: maintainers\n          items:\n            type: string\n        version:\n          type: string\n          description: version\n        source:\n          type: string\n          description: source\n    Instance:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Unique ID\n        name:\n          type: string\n          description: Instance name\n        description:\n          type: string\n          description: Description of instance\n        vendor:\n          type: string\n          description: 'Based on which driver, identified by ID'\n        endpoint:\n          type: string\n          description: The service endpoint of this instance\n        auth_mode:\n          type: string\n          description: The authentication way supported\n        auth_info:\n          type: object\n          description: The auth credential data if exists\n          additionalProperties:\n            type: string\n        status:\n          type: string\n          description: The health status\n        enabled:\n          type: boolean\n          description: Whether the instance is activated or not\n          x-omitempty: false\n        default:\n          type: boolean\n          description: Whether the instance is default or not\n          x-omitempty: false\n        insecure:\n          type: boolean\n          description: Whether the instance endpoint is insecure or not\n          x-omitempty: false\n        setup_timestamp:\n          type: integer\n          format: int64\n          description: The timestamp of instance setting up\n    PreheatPolicy:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The ID of preheat policy\n        name:\n          type: string\n          description: The Name of preheat policy\n        description:\n          type: string\n          description: The Description of preheat policy\n        project_id:\n          type: integer\n          description: The ID of preheat policy project\n        provider_id:\n          type: integer\n          description: The ID of preheat policy provider\n        provider_name:\n          type: string\n          description: The Name of preheat policy provider\n        filters:\n          type: string\n          description: The Filters of preheat policy\n        trigger:\n          type: string\n          description: The Trigger of preheat policy\n        enabled:\n          type: boolean\n          description: Whether the preheat policy enabled\n          x-omitempty: false\n        creation_time:\n          type: string\n          format: date-time\n          description: The Create Time of preheat policy\n        update_time:\n          type: string\n          format: date-time\n          description: The Update Time of preheat policy\n    Metrics:\n      type: object\n      properties:\n        task_count:\n          type: integer\n          description: The count of task\n        success_task_count:\n          type: integer\n          description: The count of success task\n        error_task_count:\n          type: integer\n          description: The count of error task\n        pending_task_count:\n          type: integer\n          description: The count of pending task\n        running_task_count:\n          type: integer\n          description: The count of running task\n        scheduled_task_count:\n          type: integer\n          description: The count of scheduled task\n        stopped_task_count:\n          type: integer\n          description: The count of stopped task\n    Execution:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The ID of execution\n        vendor_type:\n          type: string\n          description: The vendor type of execution\n        vendor_id:\n          type: integer\n          description: The vendor id of execution\n        status:\n          type: string\n          description: The status of execution\n        status_message:\n          type: string\n          description: The status message of execution\n        metrics:\n          $ref: '#/components/schemas/Metrics'\n        trigger:\n          type: string\n          description: The trigger of execution\n        extra_attrs:\n          $ref: '#/components/schemas/ExtraAttrs'\n        start_time:\n          type: string\n          description: The start time of execution\n        end_time:\n          type: string\n          description: The end time of execution\n    Task:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The ID of task\n        execution_id:\n          type: integer\n          description: The ID of task execution\n        status:\n          type: string\n          description: The status of task\n        status_message:\n          type: string\n          description: The status message of task\n        run_count:\n          type: integer\n          format: int32\n          description: The count of task run\n        extra_attrs:\n          $ref: '#/components/schemas/ExtraAttrs'\n        creation_time:\n          type: string\n          description: The creation time of task\n        update_time:\n          type: string\n          description: The update time of task\n        start_time:\n          type: string\n          description: The start time of task\n        end_time:\n          type: string\n          description: The end time of task\n    ProviderUnderProject:\n      type: object\n      properties:\n        id:\n          type: integer\n        provider:\n          type: string\n        enabled:\n          type: boolean\n        default:\n          type: boolean\n    Icon:\n      type: object\n      properties:\n        content-type:\n          type: string\n          description: The content type of the icon\n        content:\n          type: string\n          description: The base64 encoded content of the icon\n    ProjectReq:\n      type: object\n      properties:\n        project_name:\n          type: string\n          description: The name of the project.\n        public:\n          type: boolean\n          description: 'deprecated, reserved for project creation in replication'\n          nullable: true\n        metadata:\n          $ref: '#/components/schemas/ProjectMetadata'\n        cve_allowlist:\n          $ref: '#/components/schemas/CVEAllowlist'\n        storage_limit:\n          type: integer\n          format: int64\n          description: The storage quota of the project.\n          nullable: true\n        registry_id:\n          type: integer\n          format: int64\n          description: The ID of referenced registry when creating the proxy cache project\n          nullable: true\n    Project:\n      type: object\n      properties:\n        project_id:\n          type: integer\n          format: int32\n          description: Project ID\n        owner_id:\n          type: integer\n          format: int32\n          description: The owner ID of the project always means the creator of the project.\n        name:\n          type: string\n          description: The name of the project.\n        registry_id:\n          type: integer\n          format: int64\n          description: \u003e-\n            The ID of referenced registry when the project is a proxy cache\n            project.\n        creation_time:\n          type: string\n          format: date-time\n          description: The creation time of the project.\n        update_time:\n          type: string\n          format: date-time\n          description: The update time of the project.\n        deleted:\n          type: boolean\n          description: A deletion mark of the project.\n        owner_name:\n          type: string\n          description: The owner name of the project.\n        togglable:\n          type: boolean\n          description: \u003e-\n            Correspond to the UI about whether the project's publicity is\n            updatable (for UI)\n        current_user_role_id:\n          type: integer\n          description: \u003e-\n            The role ID with highest permission of the current user who\n            triggered the API (for UI).  This attribute is deprecated and will\n            be removed in future versions.\n        current_user_role_ids:\n          type: array\n          nullable: true\n          x-omitempty: true\n          items:\n            type: integer\n            format: int32\n          description: \u003e-\n            The list of role ID of the current user who triggered the API (for\n            UI)\n        repo_count:\n          type: integer\n          description: The number of the repositories under this project.\n        chart_count:\n          type: integer\n          description: The total number of charts under this project.\n        metadata:\n          $ref: '#/components/schemas/ProjectMetadata'\n        cve_allowlist:\n          $ref: '#/components/schemas/CVEAllowlist'\n    ProjectDeletable:\n      type: object\n      properties:\n        deletable:\n          type: boolean\n          description: Whether the project can be deleted.\n        message:\n          type: string\n          description: The detail message when the project can not be deleted.\n    ProjectMetadata:\n      type: object\n      properties:\n        public:\n          type: string\n          description: \u003e-\n            The public status of the project. The valid values are \"true\",\n            \"false\".\n        enable_content_trust:\n          type: string\n          description: \u003e-\n            Whether content trust is enabled or not. If it is enabled, user\n            can't pull unsigned images from this project. The valid values are\n            \"true\", \"false\".\n          nullable: true\n        prevent_vul:\n          type: string\n          description: \u003e-\n            Whether prevent the vulnerable images from running. The valid values\n            are \"true\", \"false\".\n          nullable: true\n        severity:\n          type: string\n          description: \u003e-\n            If the vulnerability is high than severity defined here, the images\n            can't be pulled. The valid values are \"none\", \"low\", \"medium\",\n            \"high\", \"critical\".\n          nullable: true\n        auto_scan:\n          type: string\n          description: \u003e-\n            Whether scan images automatically when pushing. The valid values are\n            \"true\", \"false\".\n          nullable: true\n        reuse_sys_cve_allowlist:\n          type: string\n          description: \u003e-\n            Whether this project reuse the system level CVE allowlist as the\n            allowlist of its own.  The valid values are \"true\", \"false\". If it\n            is set to \"true\" the actual allowlist associate with this project,\n            if any, will be ignored.\n          nullable: true\n        retention_id:\n          type: string\n          description: The ID of the tag retention policy for the project\n          nullable: true\n    ProjectSummary:\n      type: object\n      properties:\n        repo_count:\n          type: integer\n          description: The number of the repositories under this project.\n        chart_count:\n          type: integer\n          description: The total number of charts under this project.\n        project_admin_count:\n          type: integer\n          description: The total number of project admin members.\n        maintainer_count:\n          type: integer\n          description: The total number of maintainer members.\n        developer_count:\n          type: integer\n          description: The total number of developer members.\n        guest_count:\n          type: integer\n          description: The total number of guest members.\n        limited_guest_count:\n          type: integer\n          description: The total number of limited guest members.\n        quota:\n          $ref: '#/components/schemas/ProjectSummaryQuota'\n        registry:\n          $ref: '#/components/schemas/Registry'\n    ProjectSummaryQuota:\n      type: object\n      properties:\n        hard:\n          $ref: '#/components/schemas/ResourceList'\n        used:\n          $ref: '#/components/schemas/ResourceList'\n    ProjectScanner:\n      type: object\n      required:\n        - uuid\n      properties:\n        uuid:\n          type: string\n          description: The identifier of the scanner registration\n    CVEAllowlist:\n      type: object\n      description: The CVE Allowlist for system or project\n      properties:\n        id:\n          type: integer\n          description: ID of the allowlist\n        project_id:\n          type: integer\n          description: \u003e-\n            ID of the project which the allowlist belongs to.  For system level\n            allowlist this attribute is zero.\n        expires_at:\n          type: integer\n          description: \u003e-\n            the time for expiration of the allowlist, in the form of seconds\n            since epoch.  This is an optional attribute, if it's not set the CVE\n            allowlist does not expire.\n          nullable: true\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/CVEAllowlistItem'\n        creation_time:\n          type: string\n          format: date-time\n          description: The creation time of the allowlist.\n        update_time:\n          type: string\n          format: date-time\n          description: The update time of the allowlist.\n    CVEAllowlistItem:\n      type: object\n      description: The item in CVE allowlist\n      properties:\n        cve_id:\n          type: string\n          description: 'The ID of the CVE, such as \"CVE-2019-10164\"'\n    ReplicationPolicy:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: The policy ID.\n        name:\n          type: string\n          description: The policy name.\n        description:\n          type: string\n          description: The description of the policy.\n        src_registry:\n          $ref: '#/components/schemas/Registry'\n        dest_registry:\n          $ref: '#/components/schemas/Registry'\n        dest_namespace:\n          type: string\n          description: The destination namespace.\n        trigger:\n          $ref: '#/components/schemas/ReplicationTrigger'\n        filters:\n          type: array\n          description: The replication policy filter array.\n          items:\n            $ref: '#/components/schemas/ReplicationFilter'\n        replicate_deletion:\n          type: boolean\n          description: Whether to replicate the deletion operation.\n        deletion:\n          type: boolean\n          description: \u003e-\n            Deprecated, use \"replicate_deletion\" instead. Whether to replicate\n            the deletion operation.\n        override:\n          type: boolean\n          description: Whether to override the resources on the destination registry.\n        enabled:\n          type: boolean\n          description: Whether the policy is enabled or not.\n        creation_time:\n          type: string\n          format: date-time\n          description: The create time of the policy.\n        update_time:\n          type: string\n          format: date-time\n          description: The update time of the policy.\n    ReplicationTrigger:\n      type: object\n      properties:\n        type:\n          type: string\n          description: \u003e-\n            The replication policy trigger type. The valid values are manual,\n            event_based and scheduled.\n        trigger_settings:\n          $ref: '#/components/schemas/ReplicationTriggerSettings'\n    ReplicationTriggerSettings:\n      type: object\n      properties:\n        cron:\n          type: string\n          description: The cron string for scheduled trigger\n    ReplicationFilter:\n      type: object\n      properties:\n        type:\n          type: string\n          description: The replication policy filter type.\n        value:\n          type: object\n          description: The value of replication policy filter.\n    RegistryCredential:\n      type: object\n      properties:\n        type:\n          type: string\n          description: 'Credential type, such as ''basic'', ''oauth''.'\n        access_key:\n          type: string\n          description: 'Access key, e.g. user name when credential type is ''basic''.'\n        access_secret:\n          type: string\n          description: 'Access secret, e.g. password when credential type is ''basic''.'\n    Registry:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: The registry ID.\n          x-omitempty: false\n        url:\n          type: string\n          description: The registry URL string.\n        name:\n          type: string\n          description: The registry name.\n        credential:\n          $ref: '#/components/schemas/RegistryCredential'\n        type:\n          type: string\n          description: 'Type of the registry, e.g. ''harbor''.'\n        insecure:\n          type: boolean\n          description: \u003e-\n            Whether or not the certificate will be verified when Harbor tries to\n            access the server.\n        description:\n          type: string\n          description: Description of the registry.\n        status:\n          type: string\n          description: Health status of the registry.\n        creation_time:\n          type: string\n          format: date-time\n          description: The create time of the policy.\n        update_time:\n          type: string\n          format: date-time\n          description: The update time of the policy.\n    RegistryUpdate:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The registry name.\n          nullable: true\n        description:\n          type: string\n          description: Description of the registry.\n          nullable: true\n        url:\n          type: string\n          description: The registry URL.\n          nullable: true\n        credential_type:\n          type: string\n          description: 'Credential type of the registry, e.g. ''basic''.'\n          nullable: true\n        access_key:\n          type: string\n          description: The registry access key.\n          nullable: true\n        access_secret:\n          type: string\n          description: The registry access secret.\n          nullable: true\n        insecure:\n          type: boolean\n          description: \u003e-\n            Whether or not the certificate will be verified when Harbor tries to\n            access the server.\n          nullable: true\n    RegistryPing:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: The registry ID.\n          nullable: true\n        type:\n          type: string\n          description: 'Type of the registry, e.g. ''harbor''.'\n          nullable: true\n        url:\n          type: string\n          description: The registry URL.\n          nullable: true\n        credential_type:\n          type: string\n          description: 'Credential type of the registry, e.g. ''basic''.'\n          nullable: true\n        access_key:\n          type: string\n          description: The registry access key.\n          nullable: true\n        access_secret:\n          type: string\n          description: The registry access secret.\n          nullable: true\n        insecure:\n          type: boolean\n          description: \u003e-\n            Whether or not the certificate will be verified when Harbor tries to\n            access the server.\n          nullable: true\n    RegistryInfo:\n      type: object\n      description: \u003e-\n        The registry info contains the base info and capability declarations of\n        the registry\n      properties:\n        type:\n          type: string\n          description: The registry type\n        description:\n          type: string\n          description: The description\n        supported_resource_filters:\n          type: array\n          description: The filters that the registry supports\n          items:\n            $ref: '#/components/schemas/FilterStyle'\n        supported_triggers:\n          type: array\n          description: The triggers that the registry supports\n          items:\n            type: string\n    RegistryProviderInfo:\n      type: object\n      description: \u003e-\n        The registry provider info contains the base info and capability\n        declarations of the registry provider\n      properties:\n        endpoint_pattern:\n          $ref: '#/components/schemas/RegistryProviderEndpointPattern'\n        credential_pattern:\n          $ref: '#/components/schemas/RegistryProviderCredentialPattern'\n    RegistryProviderEndpointPattern:\n      type: object\n      description: The registry endpoint pattern\n      properties:\n        endpoint_type:\n          type: string\n          description: The endpoint type\n        endpoints:\n          type: array\n          description: The endpoint list\n          items:\n            $ref: '#/components/schemas/RegistryEndpoint'\n    RegistryProviderCredentialPattern:\n      type: object\n      description: The registry credential pattern\n      properties:\n        access_key_type:\n          type: string\n          description: The access key type\n        access_key_data:\n          type: string\n          description: The access key data\n        access_secret_type:\n          type: string\n          description: The access secret type\n        access_secret_data:\n          type: string\n          description: The access secret data\n    RegistryEndpoint:\n      type: object\n      description: The style of the resource filter\n      properties:\n        key:\n          type: string\n          description: The endpoint key\n        value:\n          type: string\n          description: The endpoint value\n    FilterStyle:\n      type: object\n      description: The style of the resource filter\n      properties:\n        type:\n          type: string\n          description: The filter type\n        style:\n          type: string\n          description: The filter style\n        values:\n          type: array\n          description: The filter values\n          items:\n            type: string\n    ResourceList:\n      type: object\n      additionalProperties:\n        type: integer\n        format: int64\n      x-go-type:\n        type: ResourceList\n        import:\n          package: github.com/goharbor/harbor/src/pkg/quota/types\n    ReplicationExecution:\n      type: object\n      description: The replication execution\n      properties:\n        id:\n          type: integer\n          description: The ID of the execution\n        policy_id:\n          type: integer\n          description: The ID if the policy that the execution belongs to\n        status:\n          type: string\n          description: The status of the execution\n        trigger:\n          type: string\n          description: The trigger mode\n        start_time:\n          type: string\n          format: date-time\n          description: The start time\n        end_time:\n          type: string\n          format: date-time\n          description: The end time\n        status_text:\n          type: string\n          x-omitempty: false\n          description: The status text\n        total:\n          type: integer\n          x-omitempty: false\n          description: The total count of all executions\n        failed:\n          type: integer\n          x-omitempty: false\n          description: The count of failed executions\n        succeed:\n          type: integer\n          x-omitempty: false\n          description: The count of succeed executions\n        in_progress:\n          type: integer\n          x-omitempty: false\n          description: The count of in_progress executions\n        stopped:\n          type: integer\n          x-omitempty: false\n          description: The count of stopped executions\n    StartReplicationExecution:\n      type: object\n      properties:\n        policy_id:\n          type: integer\n          format: int64\n          description: The ID of policy that the execution belongs to.\n    ReplicationTask:\n      type: object\n      description: The replication task\n      properties:\n        id:\n          type: integer\n          description: The ID of the task\n        execution_id:\n          type: integer\n          description: The ID of the execution that the task belongs to\n        status:\n          type: string\n          description: The status of the task\n        job_id:\n          type: string\n          description: The ID of the underlying job that the task related to\n        operation:\n          type: string\n          description: The operation of the task\n        resource_type:\n          type: string\n          description: The type of the resource that the task operates\n        src_resource:\n          type: string\n          description: The source resource that the task operates\n        dst_resource:\n          type: string\n          description: The destination resource that the task operates\n        start_time:\n          type: string\n          format: date-time\n          description: The start time of the task\n        end_time:\n          type: string\n          format: date-time\n          description: The end time of the task\n    Robot:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: The ID of the robot\n        name:\n          type: string\n          description: The name of the tag\n        description:\n          type: string\n          description: The description of the robot\n        secret:\n          type: string\n          description: The secret of the robot\n        level:\n          type: string\n          description: 'The level of the robot, project or system'\n        duration:\n          type: integer\n          format: int64\n          description: The duration of the robot in days\n        editable:\n          type: boolean\n          x-omitempty: false\n          description: The editable status of the robot\n        disable:\n          type: boolean\n          x-omitempty: false\n          description: The disable status of the robot\n        expires_at:\n          type: integer\n          format: int64\n          description: The expiration data of the robot\n        permissions:\n          type: array\n          items:\n            $ref: '#/components/schemas/RobotPermission'\n        creation_time:\n          type: string\n          format: date-time\n          description: The creation time of the robot.\n        update_time:\n          type: string\n          format: date-time\n          description: The update time of the robot.\n    RobotCreate:\n      type: object\n      description: The request for robot account creation.\n      properties:\n        name:\n          type: string\n          description: The name of the tag\n        description:\n          type: string\n          description: The description of the robot\n        secret:\n          type: string\n          description: The secret of the robot\n        level:\n          type: string\n          description: 'The level of the robot, project or system'\n        disable:\n          type: boolean\n          description: The disable status of the robot\n        duration:\n          type: integer\n          format: int64\n          description: The duration of the robot in days\n        permissions:\n          type: array\n          items:\n            $ref: '#/components/schemas/RobotPermission'\n    RobotCreated:\n      type: object\n      description: The response for robot account creation.\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: The ID of the robot\n        name:\n          type: string\n          description: The name of the tag\n        secret:\n          type: string\n          description: The secret of the robot\n        creation_time:\n          type: string\n          format: date-time\n          description: The creation time of the robot.\n        expires_at:\n          type: integer\n          format: int64\n          description: The expiration data of the robot\n    RobotSec:\n      type: object\n      description: The response for refresh/update robot account secret.\n      properties:\n        secret:\n          type: string\n          description: The secret of the robot\n    RobotPermission:\n      type: object\n      properties:\n        kind:\n          type: string\n          description: The kind of the permission\n        namespace:\n          type: string\n          description: The namespace of the permission\n        access:\n          type: array\n          items:\n            $ref: '#/components/schemas/Access'\n    Access:\n      type: object\n      properties:\n        resource:\n          type: string\n          description: The resource of the access\n        action:\n          type: string\n          description: The action of the access\n        effect:\n          type: string\n          description: The effect of the access\n    RobotCreateV1:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of robot account\n        description:\n          type: string\n          description: The description of robot account\n        expires_at:\n          type: integer\n          description: \u003e-\n            The expiration time on or after which the JWT MUST NOT be accepted\n            for processing.\n        access:\n          type: array\n          description: The permission of robot account\n          items:\n            $ref: '#/components/schemas/Access'\n    Storage:\n      type: object\n      properties:\n        total:\n          type: integer\n          format: uint64\n          description: Total volume size.\n        free:\n          type: integer\n          format: uint64\n          description: Free volume size.\n    GeneralInfo:\n      type: object\n      properties:\n        with_notary:\n          type: boolean\n          x-omitempty: true\n          description: If the Harbor instance is deployed with nested notary.\n          nullable: true\n        with_chartmuseum:\n          type: boolean\n          x-omitempty: true\n          description: If the Harbor instance is deployed with nested chartmuseum.\n          nullable: true\n        registry_url:\n          type: string\n          x-omitempty: true\n          description: \u003e-\n            The url of registry against which the docker command should be\n            issued.\n          nullable: true\n        external_url:\n          type: string\n          x-omitempty: true\n          description: 'The external URL of Harbor, with protocol.'\n          nullable: true\n        auth_mode:\n          type: string\n          x-omitempty: true\n          description: The auth mode of current Harbor instance.\n          nullable: true\n        project_creation_restriction:\n          type: string\n          x-omitempty: true\n          description: \u003e-\n            Indicate who can create projects, it could be 'adminonly' or\n            'everyone'.\n          nullable: true\n        self_registration:\n          type: boolean\n          x-omitempty: true\n          description: \u003e-\n            Indicate whether the Harbor instance enable user to register\n            himself.\n          nullable: true\n        has_ca_root:\n          type: boolean\n          x-omitempty: true\n          description: \u003e-\n            Indicate whether there is a ca root cert file ready for download in\n            the file system.\n          nullable: true\n        harbor_version:\n          type: string\n          x-omitempty: true\n          description: The build version of Harbor.\n          nullable: true\n        registry_storage_provider_name:\n          type: string\n          x-omitempty: true\n          description: The storage provider's name of Harbor registry\n          nullable: true\n        read_only:\n          type: boolean\n          x-omitempty: true\n          description: The flag to indicate whether Harbor is in readonly mode.\n          nullable: true\n        notification_enable:\n          type: boolean\n          x-omitempty: true\n          description: \u003e-\n            The flag to indicate whether notification mechanism is enabled on\n            Harbor instance.\n          nullable: true\n        authproxy_settings:\n          $ref: '#/components/schemas/AuthproxySetting'\n    AuthproxySetting:\n      type: object\n      properties:\n        endpoint:\n          type: string\n          description: \u003e-\n            The fully qualified URI of login endpoint of authproxy, such as\n            'https://192.168.1.2:8443/login'\n        tokenreivew_endpoint:\n          type: string\n          description: \u003e-\n            The fully qualified URI of token review endpoint of authproxy, such\n            as 'https://192.168.1.2:8443/tokenreview'\n        skip_search:\n          type: boolean\n          description: \u003e-\n            The flag to determine whether Harbor can skip search the user/group\n            when adding him as a member.\n        verify_cert:\n          type: boolean\n          description: \u003e-\n            The flag to determine whether Harbor should verify the certificate\n            when connecting to the auth proxy.\n        server_certificate:\n          type: string\n          description: The certificate to be pinned when connecting auth proxy.\n    SystemInfo:\n      type: object\n      properties:\n        storage:\n          type: array\n          description: The storage of system.\n          items:\n            $ref: '#/components/schemas/Storage'\n    GCHistory:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: the id of gc job.\n        job_name:\n          type: string\n          description: the job name of gc job.\n        job_kind:\n          type: string\n          description: the job kind of gc job.\n        job_parameters:\n          type: string\n          description: the job parameters of gc job.\n        schedule:\n          $ref: '#/components/schemas/ScheduleObj'\n        job_status:\n          type: string\n          description: the status of gc job.\n        deleted:\n          type: boolean\n          description: if gc job was deleted.\n        creation_time:\n          type: string\n          format: date-time\n          description: the creation time of gc job.\n        update_time:\n          type: string\n          format: date-time\n          description: the update time of gc job.\n    Schedule:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The id of the schedule.\n          readOnly: true\n        status:\n          type: string\n          description: The status of the schedule.\n          readOnly: true\n        creation_time:\n          type: string\n          format: date-time\n          description: the creation time of the schedule.\n          readOnly: true\n        update_time:\n          type: string\n          format: date-time\n          description: the update time of the schedule.\n          readOnly: true\n        schedule:\n          $ref: '#/components/schemas/ScheduleObj'\n        parameters:\n          type: object\n          description: The parameters of schedule job\n          additionalProperties:\n            type: object\n    ScheduleObj:\n      type: object\n      properties:\n        type:\n          type: string\n          description: \u003e\n            The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly',\n            'Custom', 'Manual' and 'None'.\n\n            'Manual' means to trigger it right away and 'None' means to cancel\n            the schedule.\n          enum:\n            - Hourly\n            - Daily\n            - Weekly\n            - Custom\n            - Manual\n            - None\n        cron:\n          type: string\n          description: 'A cron expression, a time-based job scheduler.'\n    Stats:\n      type: object\n      description: Stats provides the overall progress of the scan all process.\n      properties:\n        total:\n          type: integer\n          format: int\n          description: The total number of scan processes triggered by the scan all action\n          example: 100\n          x-omitempty: false\n        completed:\n          type: integer\n          format: int\n          description: \u003e-\n            The number of the finished scan processes triggered by the scan all\n            action\n          example: 90\n          x-omitempty: false\n        metrics:\n          type: object\n          description: The metrics data for the each status\n          additionalProperties:\n            type: integer\n            format: int\n            example: 10\n          example:\n            Success: 5\n            Error: 2\n            Running: 3\n        ongoing:\n          type: boolean\n          description: A flag indicating job status of scan all.\n          x-omitempty: false\n        trigger:\n          type: string\n          description: The trigger of the scan all job.\n          enum:\n            - Manual\n            - Schedule\n            - Event\n    RetentionMetadata:\n      type: object\n      description: the tag retention metadata\n      properties:\n        templates:\n          type: array\n          description: templates\n          items:\n            $ref: '#/components/schemas/RetentionRuleMetadata'\n        scope_selectors:\n          type: array\n          description: supported scope selectors\n          items:\n            $ref: '#/components/schemas/RetentionSelectorMetadata'\n        tag_selectors:\n          type: array\n          description: supported tag selectors\n          items:\n            $ref: '#/components/schemas/RetentionSelectorMetadata'\n    RetentionRuleMetadata:\n      type: object\n      description: the tag retention rule metadata\n      properties:\n        rule_template:\n          type: string\n          description: rule id\n        display_text:\n          type: string\n          description: rule display text\n        action:\n          type: string\n          description: rule action\n        params:\n          type: array\n          description: rule params\n          items:\n            $ref: '#/components/schemas/RetentionRuleParamMetadata'\n    RetentionRuleParamMetadata:\n      type: object\n      description: rule param\n      properties:\n        type:\n          type: string\n        unit:\n          type: string\n        required:\n          type: boolean\n    RetentionSelectorMetadata:\n      type: object\n      description: retention selector\n      properties:\n        display_text:\n          type: string\n        kind:\n          type: string\n        decorations:\n          type: array\n          items:\n            type: string\n    RetentionPolicy:\n      type: object\n      description: retention policy\n      properties:\n        id:\n          type: integer\n          format: int64\n        algorithm:\n          type: string\n        rules:\n          type: array\n          items:\n            $ref: '#/components/schemas/RetentionRule'\n        trigger:\n          $ref: '#/components/schemas/RetentionRuleTrigger'\n        scope:\n          $ref: '#/components/schemas/RetentionPolicyScope'\n    RetentionRuleTrigger:\n      type: object\n      properties:\n        kind:\n          type: string\n        settings:\n          type: object\n        references:\n          type: object\n    RetentionPolicyScope:\n      type: object\n      properties:\n        level:\n          type: string\n        ref:\n          type: integer\n    RetentionRule:\n      type: object\n      properties:\n        id:\n          type: integer\n        priority:\n          type: integer\n        disabled:\n          type: boolean\n        action:\n          type: string\n        template:\n          type: string\n        params:\n          type: object\n          additionalProperties:\n            type: object\n        tag_selectors:\n          type: array\n          items:\n            $ref: '#/components/schemas/RetentionSelector'\n        scope_selectors:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/RetentionSelector'\n    RetentionSelector:\n      type: object\n      properties:\n        kind:\n          type: string\n        decoration:\n          type: string\n        pattern:\n          type: string\n        extras:\n          type: string\n    RetentionExecution:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        policy_id:\n          type: integer\n          format: int64\n        start_time:\n          type: string\n        end_time:\n          type: string\n        status:\n          type: string\n        trigger:\n          type: string\n        dry_run:\n          type: boolean\n    RetentionExecutionTask:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        execution_id:\n          type: integer\n          format: int64\n        repository:\n          type: string\n        job_id:\n          type: string\n        status:\n          type: string\n        status_code:\n          type: integer\n          x-omitempty: false\n        status_revision:\n          type: integer\n          format: int64\n        start_time:\n          type: string\n        end_time:\n          type: string\n        total:\n          type: integer\n          x-omitempty: false\n        retained:\n          type: integer\n          x-omitempty: false\n    QuotaUpdateReq:\n      type: object\n      properties:\n        hard:\n          $ref: '#/components/schemas/ResourceList'\n    QuotaRefObject:\n      type: object\n      additionalProperties: {}\n    Quota:\n      type: object\n      description: The quota object\n      properties:\n        id:\n          type: integer\n          description: ID of the quota\n        ref:\n          $ref: '#/components/schemas/QuotaRefObject'\n        hard:\n          $ref: '#/components/schemas/ResourceList'\n        used:\n          $ref: '#/components/schemas/ResourceList'\n        creation_time:\n          type: string\n          format: date-time\n          description: the creation time of the quota\n        update_time:\n          type: string\n          format: date-time\n          description: the update time of the quota\n    ScannerRegistration:\n      type: object\n      description: \u003e\n        Registration represents a named configuration for invoking a scanner via\n        its adapter.\n      properties:\n        uuid:\n          type: string\n          description: The unique identifier of this registration.\n        name:\n          type: string\n          example: Trivy\n          description: The name of this registration.\n        description:\n          type: string\n          description: An optional description of this registration.\n          example: \u003e\n            A free-to-use tool that scans container images for package\n            vulnerabilities.\n          x-omitempty: false\n        url:\n          type: string\n          format: url\n          description: A base URL of the scanner adapter\n          example: 'http://harbor-scanner-trivy:8080'\n        disabled:\n          type: boolean\n          default: false\n          description: Indicate whether the registration is enabled or not\n          x-omitempty: false\n        is_default:\n          type: boolean\n          default: false\n          description: Indicate if the registration is set as the system default one\n          x-omitempty: false\n        auth:\n          type: string\n          default: ''\n          description: \u003e\n            Specify what authentication approach is adopted for the HTTP\n            communications.\n\n            Supported types Basic\", \"Bearer\" and api key header\n            \"X-ScannerAdapter-API-Key\"\n          example: Bearer\n          x-omitempty: false\n        access_credential:\n          type: string\n          description: \u003e\n            An optional value of the HTTP Authorization header sent with each\n            request to the Scanner Adapter API.\n          example: 'Bearer: JWTTOKENGOESHERE'\n          x-omitempty: false\n        skip_certVerify:\n          type: boolean\n          default: false\n          description: \u003e-\n            Indicate if skip the certificate verification when sending HTTP\n            requests\n          x-omitempty: false\n        use_internal_addr:\n          type: boolean\n          default: false\n          description: \u003e-\n            Indicate whether use internal registry addr for the scanner to pull\n            content or not\n          x-omitempty: false\n        create_time:\n          type: string\n          format: date-time\n          description: The creation time of this registration\n        update_time:\n          type: string\n          format: date-time\n          description: The update time of this registration\n        adapter:\n          type: string\n          description: Optional property to describe the name of the scanner registration\n          example: Clair\n        vendor:\n          type: string\n          description: Optional property to describe the vendor of the scanner registration\n          example: CentOS\n        version:\n          type: string\n          description: \u003e-\n            Optional property to describe the version of the scanner\n            registration\n          example: 1.0.1\n        health:\n          type: string\n          default: ''\n          description: Indicate the healthy of the registration\n          example: healthy\n    ScannerRegistrationReq:\n      type: object\n      required:\n        - name\n        - url\n      properties:\n        name:\n          type: string\n          description: The name of this registration\n          example: Trivy\n        description:\n          type: string\n          description: An optional description of this registration.\n          example: \u003e\n            A free-to-use tool that scans container images for package\n            vulnerabilities.\n        url:\n          type: string\n          format: uri\n          description: A base URL of the scanner adapter.\n          example: 'http://harbor-scanner-trivy:8080'\n        auth:\n          type: string\n          description: \u003e\n            Specify what authentication approach is adopted for the HTTP\n            communications.\n\n            Supported types Basic\", \"Bearer\" and api key header\n            \"X-ScannerAdapter-API-Key\"\n          example: Bearer\n        access_credential:\n          type: string\n          description: \u003e\n            An optional value of the HTTP Authorization header sent with each\n            request to the Scanner Adapter API.\n          example: 'Bearer: JWTTOKENGOESHERE'\n        skip_certVerify:\n          type: boolean\n          default: false\n          description: \u003e-\n            Indicate if skip the certificate verification when sending HTTP\n            requests\n        use_internal_addr:\n          type: boolean\n          default: false\n          description: \u003e-\n            Indicate whether use internal registry addr for the scanner to pull\n            content or not\n        disabled:\n          type: boolean\n          default: false\n          description: Indicate whether the registration is enabled or not\n    ScannerRegistrationSettings:\n      type: object\n      required:\n        - name\n        - url\n      properties:\n        name:\n          type: string\n          description: The name of this registration\n          example: Trivy\n        url:\n          type: string\n          format: uri\n          description: A base URL of the scanner adapter.\n          example: 'http://harbor-scanner-trivy:8080'\n        auth:\n          type: string\n          default: ''\n          description: \u003e\n            Specify what authentication approach is adopted for the HTTP\n            communications.\n\n            Supported types Basic\", \"Bearer\" and api key header\n            \"X-ScannerAdapter-API-Key\"\n        access_credential:\n          type: string\n          description: \u003e\n            An optional value of the HTTP Authorization header sent with each\n            request to the Scanner Adapter API.\n          example: 'Bearer: JWTTOKENGOESHERE'\n    IsDefault:\n      type: object\n      properties:\n        is_default:\n          type: boolean\n          description: A flag indicating whether a scanner registration is default.\n    ScannerCapability:\n      type: object\n      properties:\n        consumes_mime_types:\n          type: array\n          items:\n            type: string\n            example: application/vnd.docker.distribution.manifest.v2+json\n        produces_mime_types:\n          type: array\n          items:\n            type: string\n            example: \u003e-\n              application/vnd.scanner.adapter.vuln.report.harbor+json;\n              version=1.0\n    ScannerAdapterMetadata:\n      type: object\n      description: The metadata info of the scanner adapter\n      properties:\n        scanner:\n          $ref: '#/components/schemas/Scanner'\n        capabilities:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScannerCapability'\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n          example:\n            harbor.scanner-adapter/registry-authorization-type: Bearer\n      x-go-type:\n        type: ScannerAdapterMetadata\n        import:\n          package: github.com/goharbor/harbor/src/pkg/scan/rest/v1\n          alias: v1\n    ImmutableRule:\n      type: object\n      properties:\n        id:\n          type: integer\n        priority:\n          type: integer\n        disabled:\n          type: boolean\n        action:\n          type: string\n        template:\n          type: string\n        params:\n          type: object\n          additionalProperties:\n            type: object\n        tag_selectors:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImmutableSelector'\n        scope_selectors:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/ImmutableSelector'\n    ImmutableSelector:\n      type: object\n      properties:\n        kind:\n          type: string\n        decoration:\n          type: string\n        pattern:\n          type: string\n        extras:\n          type: string\n    LdapConf:\n      type: object\n      description: The ldap configure properties\n      properties:\n        ldap_url:\n          type: string\n          description: The url of ldap service.\n        ldap_search_dn:\n          type: string\n          description: The search dn of ldap service.\n        ldap_search_password:\n          type: string\n          description: The search password of ldap service.\n        ldap_base_dn:\n          type: string\n          description: The base dn of ldap service.\n        ldap_filter:\n          type: string\n          description: The serach filter of ldap service.\n        ldap_uid:\n          type: string\n          description: The serach uid from ldap service attributes.\n        ldap_scope:\n          type: integer\n          format: int64\n          description: The serach scope of ldap service.\n        ldap_connection_timeout:\n          type: integer\n          format: int64\n          description: The connect timeout of ldap service(second).\n        ldap_verify_cert:\n          type: boolean\n          description: Verify Ldap server certificate.\n    LdapPingResult:\n      type: object\n      description: The ldap ping result\n      properties:\n        success:\n          type: boolean\n          description: Test success\n        message:\n          type: string\n          description: The ping operation output message.\n    LdapImportUsers:\n      type: object\n      properties:\n        ldap_uid_list:\n          type: array\n          description: selected uid list\n          items:\n            type: string\n    LdapFailedImportUser:\n      type: object\n      properties:\n        uid:\n          type: string\n          description: the uid can't add to system.\n        error:\n          type: string\n          description: fail reason.\n    LdapUser:\n      type: object\n      properties:\n        username:\n          type: string\n          description: ldap username.\n        realname:\n          type: string\n          description: The user realname from \"uid\" or \"cn\" attribute.\n        email:\n          type: string\n          description: The user email address from \"mail\" or \"email\" attribute.\n    UserGroup:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The ID of the user group\n        group_name:\n          type: string\n          description: The name of the user group\n        group_type:\n          type: integer\n          description: 'The group type, 1 for LDAP group, 2 for HTTP group.'\n        ldap_group_dn:\n          type: string\n          description: The DN of the LDAP group if group type is 1 (LDAP group).\n    SupportedWebhookEventTypes:\n      type: object\n      description: Supportted webhook event types and notify types.\n      properties:\n        event_type:\n          type: array\n          items:\n            $ref: '#/components/schemas/EventType'\n        notify_type:\n          type: array\n          items:\n            $ref: '#/components/schemas/NotifyType'\n    EventType:\n      type: string\n      description: Webhook supportted event type.\n      example: pullImage\n    NotifyType:\n      type: string\n      description: Webhook supportted notify type.\n      example: http\n    WebhookTargetObject:\n      type: object\n      description: The webhook policy target object.\n      properties:\n        type:\n          type: string\n          description: The webhook target notify type.\n        address:\n          type: string\n          description: The webhook target address.\n        auth_header:\n          type: string\n          description: The webhook auth header.\n        skip_cert_verify:\n          type: boolean\n          description: Whether or not to skip cert verify.\n    WebhookPolicy:\n      type: object\n      description: The webhook policy object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: The webhook policy ID.\n        name:\n          type: string\n          description: The name of webhook policy.\n        description:\n          type: string\n          description: The description of webhook policy.\n        project_id:\n          type: integer\n          description: The project ID of webhook policy.\n        targets:\n          type: array\n          items:\n            $ref: '#/components/schemas/WebhookTargetObject'\n        event_types:\n          type: array\n          items:\n            type: string\n        creator:\n          type: string\n          description: The creator of the webhook policy.\n        creation_time:\n          type: string\n          description: The create time of the webhook policy.\n          format: date-time\n        update_time:\n          type: string\n          description: The update time of the webhook policy.\n          format: date-time\n        enabled:\n          type: boolean\n          description: Whether the webhook policy is enabled or not.\n          x-omitempty: false\n    WebhookLastTrigger:\n      type: object\n      description: The webhook policy and last trigger time group by event type.\n      properties:\n        policy_name:\n          type: string\n          description: The webhook policy name.\n        event_type:\n          type: string\n          description: The webhook event type.\n        enabled:\n          type: boolean\n          description: Whether or not the webhook policy enabled.\n        creation_time:\n          type: string\n          description: The creation time of webhook policy.\n          format: date-time\n        last_trigger_time:\n          type: string\n          description: The last trigger time of webhook policy.\n          format: date-time\n    WebhookJob:\n      type: object\n      description: The webhook job.\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: The webhook job ID.\n        policy_id:\n          type: integer\n          format: int64\n          description: The webhook policy ID.\n        event_type:\n          type: string\n          description: The webhook job event type.\n        notify_type:\n          type: string\n          description: The webhook job notify type.\n        status:\n          type: string\n          description: The webhook job status.\n        job_detail:\n          type: string\n          description: The webhook job notify detailed data.\n        creation_time:\n          type: string\n          description: The webhook job creation time.\n          format: date-time\n        update_time:\n          type: string\n          description: The webhook job update time.\n          format: date-time\n",
			"canonicalURL": "/github.com/container-registry/harbor-python-client-api@31abc14deaf6bb62badc4d9a7b687c60e6fc99eb/-/blob/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/container-registry/harbor-python-client-api/blob/31abc14deaf6bb62badc4d9a7b687c60e6fc99eb/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/email/ping\": post: operation \"emailPing\": responses: 415: at 1:87010: can't find value for \"components/responses/UnsupportedMediaType\""
}