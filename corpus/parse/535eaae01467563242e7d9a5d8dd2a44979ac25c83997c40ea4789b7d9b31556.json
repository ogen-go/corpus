{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/amentum.space/aviation_radiation/1.5.0/openapi.yaml",
			"byteSize": 52170,
			"content": "openapi: 3.0.0\nservers:\n  - url: \"\"\ninfo:\n  contact:\n    x-twitter: amentumspace\n  description: |\n    Our atmosphere protects us from a hostile space radiation environment comprising high energy particles of solar and intergalactic origin. Solar radiation is significant during unpredictable and short lived solar flares and coronal mass ejections (CMEs); however, galactic cosmic radiation (GCR) is omnipresent. The GCR intensity varies with latitude, longitude, and time due to effects of solar activity on the interplanetary magnetic field, as well as the Earth's magnetic field. Space radiation collides with gases in the atmosphere, leading to a complex shower of high energy radiation, the intensity and composition of which varies spatially and temporally. Excessive exposure to radiation can damage DNA and lead to long-term health effects such as an increased risk of cancer.  \u003cbr\u003e\u003cbr\u003e Resulting radiation levels at commercial aircraft altitudes are greater than at sea level due. Aircrew are classified as radiation workers in some countries; however, planning to limit their exposure, and monitoring, is generally lacking. Both real-time measurements and predictive models of radiation in the atmosphere are important to mitigate the radiation risk crew. \u003cbr\u003e\u003cbr\u003e\n    We host a RESTful API to models of cosmic ray induced ionising radiation in the atmosphere. The PARMA or CARI7 endpoints can be used to  calculate Effective Dose or Ambient Dose Equivalent at a point. \n    The Route Dose API calculates the same quantities along a great circle route between two airports using CARI7. \u003cbr\u003e\u003cbr\u003e\n    API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  \u003ca href='https://developer.amentum.io'\u003ehere\u003c/a\u003e. \u003cbr\u003e\u003cbr\u003e \n    Help us improve the quality of our web APIs by completing our 2 minute survey \u003ca href=\"https://www.surveymonkey.com/r/CTDTRBN\"\u003ehere\u003c/a\u003e.\u003cbr\u003e\u003cbr\u003e\n    Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. \u003cbr\u003e\u003cbr\u003e\n    Copyright \u003ca href='https://amentum.space'\u003eAmentum Pty Ltd\u003c/a\u003e 2021.\n  title: Aviation Radiation API\n  version: 1.5.0\n  x-apisguru-categories:\n    - location\n    - open_data\n  x-logo:\n    altText: Amentum Aerospace\n    backgroundColor: \"#FFFFFF\"\n    url: https://twitter.com/amentumspace/profile_image?size=original\n  x-origin:\n    - format: openapi\n      url: https://cosmicrays.amentum.space//openapi.json\n      version: \"3.0\"\n  x-providerName: amentum.space\n  x-serviceName: aviation_radiation\ntags:\n  - description: |\n      Developed by the US Federal Aviation Administration's  Civil Aerospace Medical Institute, CARI7 calculates cosmic  ray doses in the atmosphere. See \u003ca href=\"https://academic.oup.com/rpd/article/175/4/419/2884614\"\u003ehere\u003c/a\u003e for a complete description of  CARI-7. The original source code and Terms and Conditions can be found \u003ca href=\"https://www.faa.gov/data_research/research/med_humanfacs/aeromedical/radiobiology/cari7/\"\u003ehere\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e \u003cbr\u003e\u003cbr\u003e Note: The dose is considered a monthly average. It accounts for for heliocentric potential modulation only, minor geomagnetic storm and forbush decreases are ignored.\n    name: cari7\n    x-displayName: CARI7 API\n  - description: |\n      The Route Dose API estimates radiation doses along a flight route between two airports with known ICAO or IATA codes or coordinates as latitude/longitude. Waypoints are calculated assuming a great circle  route, a constant altitude (in kilometers) and a user-defined flight duration (in hours).  Dose rates are calculated at each waypoint using CARI-7.  The dose rate profile is integrated along the route to obtain the total dose for the flight. \u003cbr\u003e\u003cbr\u003e Note: Dose is considered a monthly average accounting for heliocentric potential (HP) modulation only, minor geomagnetic storm and forbush decrease corrections are ignored. The calculation relies on HP data from the US Federal Aviation Administration that is released monthly. Doses can be calculated on the current date and short-range forecasting  of several weeks is supported (the exact forecast horizon depends on the release date of the FAA data).\n    name: routedose\n    x-displayName: Route Dose API\n  - description: |\n      The PARMA model was developed by the Japan Atomic Energy Agency (JAEA) and estimates fluxes of neutrons, protons, ions, muons, electrons, positrons, and photons on a given date, latitude, longitude, and altitude. A comprehensive description of PARMA can be found in the publications \u003ca href=\"https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0160390\"\u003ehere\u003c/a\u003e and \u003ca href=\"https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0144679\"\u003ehere\u003c/a\u003e.\u003cbr\u003e\u003cbr\u003e \u003cbr\u003e\u003cbr\u003e Note: the PARMA API only accounts for heliocentric potential modulation, minor geomagnetic storm and forbush decreases are ignored.\n    name: parma\n    x-displayName: PARMA API\npaths:\n  /cari7/ambient_dose:\n    get:\n      description: |\n        The ambient dose equivalent, H*(10), is an operational quantity that simulates the  human body by measuring the dose equivalent at a depth of 10 mm within a tissue  equivalent sphere of 300 mm diameter. It is a measurable quantity that is  used to calibrate area monitors (radiation detectors) for mixed radiation fields. \n        Use this endpoint if you are comparing model predictions to measurements.\n      operationId: app.api_cari7.endpoints.CARI7.ambient_dose\n      parameters:\n        - description: Altitude (in km). The minimum is 0 m, the maximum is 47 km (the upper limit of the stratosphere).\n          in: query\n          name: altitude\n          required: true\n          schema:\n            example: 11\n            type: number\n        - description: Latitude. -90 (S) to 90 (N).\n          in: query\n          name: latitude\n          required: true\n          schema:\n            example: 30\n            type: number\n        - description: Longitude. -180 (W) to 180 (E).\n          in: query\n          name: longitude\n          required: true\n          schema:\n            example: 30\n            type: number\n        - description: Year in YYYY.\n          in: query\n          name: year\n          required: true\n          schema:\n            example: 2019\n            type: integer\n        - description: Month in MM.\n          in: query\n          name: month\n          required: true\n          schema:\n            example: 12\n            type: integer\n        - description: Day in DD.\n          in: query\n          name: day\n          required: true\n          schema:\n            example: 1\n            type: integer\n        - description: Hour in 24 hour time.\n          in: query\n          name: utc\n          required: true\n          schema:\n            example: 3\n            type: integer\n        - description: |\n            The particle type as a string. Specifying 'total' returns the dose for all particle types.\n          in: query\n          name: particle\n          required: true\n          schema:\n            enum:\n              - total\n              - neutron\n              - photon\n              - e-\n              - e+\n              - mu-\n              - mu+\n              - proton\n              - pi-\n              - pi+\n              - deuteron\n              - triton\n              - helion\n              - alpha\n              - Li\n              - Be\n              - B\n              - C\n              - N\n              - O\n              - F\n              - Ne\n              - Na\n              - Mg\n              - Al\n              - Si\n              - P\n              - S\n              - Cl\n              - Ar\n              - K\n              - Ca\n              - Sc\n              - Ti\n              - V\n              - Cr\n              - Mn\n              - Fe\n            example: total\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                example:\n                  dose rate:\n                    units: uSv/hr\n                    value: 2.322303291477743\n                properties:\n                  dose rate:\n                    properties:\n                      units:\n                        type: string\n                      value:\n                        type: number\n                    type: object\n                type: object\n          description: Successful dose calculation\n      summary: |\n        The ambient dose equivalent rate calculated for a single particle type, or accumulated over all particle types.\n      tags:\n        - cari7\n      x-codeSamples:\n        - lang: Shell\n          source: |\n            curl -X GET \"https://avrad.amentum.io/cari7/ambient_dose?altitude=11\u0026latitude=30\u0026longitude=30\u0026year=2019\u0026month=12\u0026day=1\u0026utc=3\u0026particle=total\" -H \"API-Key: \u003cyour_key\u003e\" -H \"accept: application/json\"\n        - lang: Python\n          source: |\n            import requests\n\n            params = {\n                \"altitude\" : 11, #km \n                \"latitude\" : 30, #degrees (N)\n                \"longitude\" : 30, #degrees (E)\n                \"year\" : 2019,  \n                \"month\" : 12,\n                \"day\" : 1,\n                \"particle\" : \"total\",\n                \"utc\" : 3\n            }\n            headers = {\"API-Key\" : \"\u003cadd_your_key\u003e\"}\n            url = \"https://avrad.amentum.io/cari7/ambient_dose\"\n            try:\n                response = requests.get(url, params=params, headers=headers) \n                response.raise_for_status()\n            except requests.exceptions.HTTPError as e: \n                print(\"HTTP error\", e)\n            except requests.exceptions.RequestException as e: \n                print(\"Request error\", e)\n            else:\n                # retrieve and return the dose rate\n                dose_rate = response.json() \n                dose_rate_val = dose_rate['dose rate']['value']\n                units = dose_rate['dose rate']['units']\n\n                print(f\"Dose rate is {dose_rate_val} {units}\")\n        - lang: Javascript\n          source: |\n            let url = 'https://avrad.amentum.io/cari7/ambient_dose?'\n\n            var params = new URLSearchParams({\n                altitude : 11, // km \n                latitude : 30, // degrees (N)\n                longitude : 30, // degrees (E)\n                year : 2019,  \n                month : 12,\n                day : 1,\n                particle : \"total\",\n                utc : 3\n            })\n\n            var requestOptions = {\n              method: 'GET',\n              redirect: 'follow',\n              headers: {'API-Key': '\u003cadd_your_key\u003e'} \n            };\n\n            fetch(url + params, requestOptions)\n              .then(response =\u003e response.text())\n              .then(result =\u003e console.log(result))\n              .catch(error =\u003e console.log('error', error));\n  /cari7/effective_dose:\n    get:\n      description: |\n        Effective Dose is a radiation protection quantity defined by the International Commission on\n         Radiological Protection (ICRP) and represents the stochastic health\n         risk to the human body at low levels of radiation.\n        It accounts for the different sensitivities of organs to ionising radiation, as well as the different effectiveness of various types of radiation.\n        Use this endpoint if you need to estimate radiation exposures of personnel.\n      operationId: app.api_cari7.endpoints.CARI7.effective_dose\n      parameters:\n        - description: Altitude (in km). The minimum is 0 m, the maximum is 47 km (the upper limit of the stratosphere).\n          in: query\n          name: altitude\n          required: true\n          schema:\n            example: 11\n            type: number\n        - description: Latitude. -90 (S) to 90 (N).\n          in: query\n          name: latitude\n          required: true\n          schema:\n            example: 30\n            type: number\n        - description: Longitude. -180 (W) to 180 (E).\n          in: query\n          name: longitude\n          required: true\n          schema:\n            example: 30\n            type: number\n        - description: Year in YYYY.\n          in: query\n          name: year\n          required: true\n          schema:\n            example: 2019\n            type: integer\n        - description: Month in MM.\n          in: query\n          name: month\n          required: true\n          schema:\n            example: 12\n            type: integer\n        - description: Day in DD.\n          in: query\n          name: day\n          required: true\n          schema:\n            example: 1\n            type: integer\n        - description: Hour in 24 hour time.\n          in: query\n          name: utc\n          required: true\n          schema:\n            example: 3\n            type: integer\n        - description: |\n            The particle type as a string. Specifying 'total' returns the dose for all particle types.\n          in: query\n          name: particle\n          required: true\n          schema:\n            enum:\n              - total\n              - neutron\n              - photon\n              - e-\n              - e+\n              - mu-\n              - mu+\n              - proton\n              - pi-\n              - pi+\n              - deuteron\n              - triton\n              - helion\n              - alpha\n              - Li\n              - Be\n              - B\n              - C\n              - N\n              - O\n              - F\n              - Ne\n              - Na\n              - Mg\n              - Al\n              - Si\n              - P\n              - S\n              - Cl\n              - Ar\n              - K\n              - Ca\n              - Sc\n              - Ti\n              - V\n              - Cr\n              - Mn\n              - Fe\n            example: total\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                example:\n                  dose rate:\n                    units: uSv/hr\n                    value: 2.1532952875056712\n                properties:\n                  dose rate:\n                    properties:\n                      units:\n                        type: string\n                      value:\n                        type: number\n                    type: object\n                type: object\n          description: Successful dose calculation\n      summary: |\n        The effective dose rate calculated for a single particle type, or accumulated over all particle types.\n      tags:\n        - cari7\n      x-codeSamples:\n        - lang: Shell\n          source: |\n            curl -X GET \"https://avrad.amentum.io/cari7/effective_dose?altitude=11\u0026latitude=30\u0026longitude=30\u0026year=2019\u0026month=12\u0026day=1\u0026utc=3\u0026particle=total\" -H \"API-Key: \u003cyour_key\u003e\" -H \"accept: application/json\"\n        - lang: Python\n          source: |\n            import requests\n\n            params = {\n                \"altitude\" : 11, #km \n                \"latitude\" : 30, #degrees (N)\n                \"longitude\" : 30, #degrees (E)\n                \"year\" : 2019,  \n                \"month\" : 12,\n                \"day\" : 1,\n                \"particle\" : \"total\",\n                \"utc\" : 3\n            }\n            headers = {\"API-Key\" : \"\u003cadd_your_key\u003e\"}\n            url = \"https://avrad.amentum.io/cari7/effective_dose\"\n            try:\n                response = requests.get(url, params=params, headers=headers) \n                response.raise_for_status()\n            except requests.exceptions.HTTPError as e: \n                print(\"HTTP error\", e)\n            except requests.exceptions.RequestException as e: \n                print(\"Request error\", e)\n            else:\n                # retrieve and return the dose rate\n                dose_rate = response.json() \n                dose_rate_val = dose_rate['dose rate']['value']\n                units = dose_rate['dose rate']['units']\n\n                print(f\"Dose rate is {dose_rate_val} {units}\")\n        - lang: Javascript\n          source: |\n            let url = 'https://avrad.amentum.io/cari7/effective_dose?'\n\n            var params = new URLSearchParams({\n                altitude : 11, // km \n                latitude : 30, // degrees (N)\n                longitude : 30, // degrees (E)\n                year : 2019,  \n                month : 12,\n                day : 1,\n                particle : \"total\",\n                utc : 3\n            })\n\n            var requestOptions = {\n              method: 'GET',\n              redirect: 'follow',\n              headers: {'API-Key': '\u003cadd_your_key\u003e'} \n            };\n\n            fetch(url + params, requestOptions)\n              .then(response =\u003e response.text())\n              .then(result =\u003e console.log(result))\n              .catch(error =\u003e console.log('error', error));\n  /parma/ambient_dose:\n    get:\n      description: |\n        The ambient dose equivalent, H*(10), is an operational quantity that simulates the  human body by measuring the dose equivalent at a depth of 10 mm within a tissue  equivalent sphere of 300 mm diameter. It is a measurable quantity that is  used to calibrate area monitors (radiation detectors) for mixed radiation fields. \n        Use this endpoint if you are comparing model predictions to measurements.\n      operationId: app.api_parma.endpoints.PARMA.ambient_dose\n      parameters:\n        - description: Altitude (in km). The minimum is 0 m, the maximum is 47 km (the upper limit of the stratosphere).\n          in: query\n          name: altitude\n          required: false\n          schema:\n            example: 11\n            type: number\n        - description: |\n            Atmospheric depth from the top of the atmosphere (in units of g/cm2). The minimum is 0.913 g/cm2, the maximum is 1032.66 g/cm2. WARNING: you can specify either altitude OR atmospheric depth, not both.\n          in: query\n          name: atmospheric_depth\n          required: false\n          schema:\n            example: 0.92\n            type: number\n        - description: Latitude. -90 (S) to 90 (N).\n          in: query\n          name: latitude\n          required: true\n          schema:\n            example: 30\n            type: number\n        - description: Longitude. -180 (W) to 180 (E).\n          in: query\n          name: longitude\n          required: true\n          schema:\n            example: 30\n            type: number\n        - description: Year in YYYY.\n          in: query\n          name: year\n          required: true\n          schema:\n            example: 2019\n            type: integer\n        - description: Month in MM.\n          in: query\n          name: month\n          required: true\n          schema:\n            example: 12\n            type: integer\n        - description: Day in DD.\n          in: query\n          name: day\n          required: true\n          schema:\n            example: 1\n            type: integer\n        - description: |\n            The particle type as a string. Specifying 'total', only used for the dose calculation, returns the dose for all particle types.\n          in: query\n          name: particle\n          required: true\n          schema:\n            enum:\n              - total\n              - e-\n              - e+\n              - mu+\n              - mu-\n              - gamma\n              - neutron\n              - proton\n              - alpha\n            example: proton\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                example:\n                  dose rate:\n                    units: uSv/hr\n                    value: 0.26835067168474125\n                properties:\n                  dose rate:\n                    properties:\n                      units:\n                        type: string\n                      value:\n                        type: number\n                    type: object\n                type: object\n          description: Successful dose read operation\n      summary: |\n        The ambient dose equivalent rate calculated for a single particle type, or accumulated over all particle types.\n      tags:\n        - parma\n      x-codeSamples:\n        - lang: Shell\n          source: |\n            curl -X GET \"https://avrad.amentum.io/parma/ambient_dose?altitude=11\u0026latitude=30\u0026longitude=30\u0026year=2019\u0026month=12\u0026day=1\u0026particle=proton\" -H \"API-Key: \u003cyour_key\u003e\" -H  \"accept: application/json\"\n        - lang: Python\n          source: |\n            import requests\n\n            params = {\n                \"altitude\" : 11, #km \n                \"latitude\" : 30, #degrees (N)\n                \"longitude\" : 30, #degrees (E)\n                \"year\" : 2019,  \n                \"month\" : 12,\n                \"day\" : 1,\n                \"particle\" : \"proton\"\n            }\n            headers = {\"API-Key\" : \"\u003cadd_your_key\u003e\"}\n            url = \"https://avrad.amentum.io/parma/ambient_dose\"\n            try:\n                response = requests.get(url, params=params, headers=headers) \n                response.raise_for_status()\n            except requests.exceptions.HTTPError as e: \n                print(\"HTTP error\", e)\n            except requests.exceptions.RequestException as e: \n                print(\"Request error\", e)\n            else:\n                # retrieve and return the dose rate\n                dose_rate = response.json() \n                dose_rate_val = dose_rate['dose rate']['value']\n                units = dose_rate['dose rate']['units']\n\n                print(f\"Dose rate is {dose_rate_val} {units}\")\n        - lang: Javascript\n          source: |-\n            let url = 'https://avrad.amentum.io/parma/ambient_dose?'\n\n            var params = new URLSearchParams({\n                altitude : 11, // km \n                latitude : 30, // degrees (N)\n                longitude : 30, // degrees (E)\n                year : 2019,  \n                month : 12,\n                day : 1,\n                particle : \"proton\"\n            })\n\n            var requestOptions = {\n              method: 'GET',\n              redirect: 'follow',\n              headers: {'API-Key': '\u003cadd_your_key\u003e'} \n            };\n\n            fetch(url + params, requestOptions)\n              .then(response =\u003e response.text())\n              .then(result =\u003e console.log(result))\n              .catch(error =\u003e console.log('error', error));\n  /parma/differential_intensity:\n    get:\n      description: |\n        The differential intensity of a particle is a directional quantity that describes the number of particles per unit area, per unit solid angle, per unit energy, and per unit time. The API leverages the functionality of PARMA to calculate differential intensity distributions with energies in units of MeV and Intensity in units of /cm2/sr/MeV/s.\n      operationId: app.api_parma.endpoints.PARMA.differential_intensity\n      parameters:\n        - description: Altitude (in km). The minimum is 0 m, the maximum is 47 km (the upper limit of the stratosphere).\n          in: query\n          name: altitude\n          required: false\n          schema:\n            example: 11\n            type: number\n        - description: |\n            Atmospheric depth from the top of the atmosphere (in units of g/cm2). The minimum is 0.913 g/cm2, the maximum is 1032.66 g/cm2. WARNING: you can specify either altitude OR atmospheric depth, not both.\n          in: query\n          name: atmospheric_depth\n          required: false\n          schema:\n            example: 0.92\n            type: number\n        - description: Latitude. -90 (S) to 90 (N).\n          in: query\n          name: latitude\n          required: true\n          schema:\n            example: 30\n            type: number\n        - description: Longitude. -180 (W) to 180 (E).\n          in: query\n          name: longitude\n          required: true\n          schema:\n            example: 30\n            type: number\n        - description: Year in YYYY.\n          in: query\n          name: year\n          required: true\n          schema:\n            example: 2019\n            type: integer\n        - description: Month in MM.\n          in: query\n          name: month\n          required: true\n          schema:\n            example: 12\n            type: integer\n        - description: Day in DD.\n          in: query\n          name: day\n          required: true\n          schema:\n            example: 1\n            type: integer\n        - description: |\n            The particle type as a string. Specifying 'total', only used for the dose calculation, returns the dose for all particle types.\n          in: query\n          name: particle\n          required: true\n          schema:\n            enum:\n              - total\n              - e-\n              - e+\n              - mu+\n              - mu-\n              - gamma\n              - neutron\n              - proton\n              - alpha\n            example: proton\n            type: string\n        - description: Direction cosine. 1.0 is in the downward direction.\n          in: query\n          name: angle\n          required: true\n          schema:\n            example: 1\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                example:\n                  energies:\n                    data:\n                      - 10.592537251772889\n                      - 11.885022274370186\n                      - 13.335214321633243\n                      - 14.96235656094434\n                      - 16.78804018122561\n                      - 18.836490894898017\n                      - 21.134890398366483\n                      - 23.71373705661657\n                      - 26.60725059798812\n                      - 29.853826189179625\n                      - 33.4965439157828\n                      - 37.583740428844465\n                      - 42.16965034285828\n                      - 47.31512589614811\n                      - 53.08844442309891\n                      - 59.56621435290114\n                      - 66.83439175686158\n                      - 74.98942093324571\n                      - 84.13951416451967\n                      - 94.40608762859253\n                      - 105.92537251772909\n                      - 118.85022274370202\n                      - 133.35214321633254\n                      - 149.62356560944343\n                      - 167.88040181225605\n                      - 188.36490894898\n                      - 211.34890398366454\n                      - 237.1373705661653\n                      - 266.0725059798806\n                      - 298.5382618917954\n                      - 334.9654391578269\n                      - 375.83740428844317\n                      - 421.69650342858097\n                      - 473.1512589614788\n                      - 530.8844442309862\n                      - 595.662143529008\n                      - 668.3439175686115\n                      - 749.894209332452\n                      - 841.3951416451905\n                      - 944.0608762859177\n                      - 1059.2537251772821\n                      - 1188.5022274370106\n                      - 1333.5214321633146\n                      - 1496.2356560944222\n                      - 1678.804018122547\n                      - 1883.6490894897847\n                      - 2113.4890398366283\n                      - 2371.3737056616337\n                      - 2660.725059798784\n                      - 2985.38261891793\n                      - 3349.6543915782418\n                      - 3758.374042884401\n                      - 4216.965034285775\n                      - 4731.512589614749\n                      - 5308.84444230982\n                      - 5956.621435290031\n                      - 6683.4391756860605\n                      - 7498.942093324459\n                      - 8413.951416451835\n                      - 9440.6087628591\n                      - 10592.537251772736\n                      - 11885.022274370007\n                      - 13335.214321633035\n                      - 14962.356560944098\n                      - 16788.04018122533\n                      - 18836.49089489769\n                      - 21134.890398366108\n                      - 23713.737056616137\n                      - 26607.250597987622\n                      - 29853.82618917905\n                      - 33496.543915782146\n                      - 37583.74042884371\n                      - 42169.65034285741\n                      - 47315.12589614711\n                      - 53088.44442309776\n                      - 59566.21435289981\n                      - 66834.39175686006\n                      - 74989.42093324398\n                      - 84139.51416451768\n                      - 94406.08762859023\n                    units: MeV\n                  intensities:\n                    data:\n                      - 0.000015126557258481497\n                      - 0.00001599438328728434\n                      - 0.00001689468409778281\n                      - 0.00001782700110028125\n                      - 0.000018789989894315395\n                      - 0.000019781312921179226\n                      - 0.00002079773698769471\n                      - 0.000021835319990199245\n                      - 0.00002288931588809045\n                      - 0.000023953698331015904\n                      - 0.000025020740419725837\n                      - 0.00002608079723261754\n                      - 0.00002712202346190026\n                      - 0.000028129941429425255\n                      - 0.000029086999403906575\n                      - 0.000029972245159538348\n                      - 0.00003076112412042979\n                      - 0.00003142535794905927\n                      - 0.000031932955656189876\n                      - 0.000032248618858073125\n                      - 0.000032334985958519275\n                      - 0.000032155208240777106\n                      - 0.000031677197295996437\n                      - 0.000030879552903400744\n                      - 0.000029726220825502388\n                      - 0.000028234425803141926\n                      - 0.00002650516406182499\n                      - 0.000024602269634120444\n                      - 0.000022594819983033717\n                      - 0.000020552475431477016\n                      - 0.00001853662594721251\n                      - 0.000016596094572091987\n                      - 0.00001476576885147725\n                      - 0.000013067285256001253\n                      - 0.000011511187862538484\n                      - 0.000010100122716208363\n                      - 0.00000883240101591408\n                      - 0.000007703733932387032\n                      - 0.00000670576631351448\n                      - 0.000005822881145729626\n                      - 0.000005046340372076868\n                      - 0.000004369966582442526\n                      - 0.000003781202020752834\n                      - 0.0000032689518931964352\n                      - 0.0000028234311080639376\n                      - 0.000002436034648930342\n                      - 0.0000020992258398508115\n                      - 0.0000018064235849092022\n                      - 0.0000015518898432506667\n                      - 0.000001331051662285105\n                      - 0.0000011394488995132188\n                      - 9.726057340258263e-7\n                      - 8.265824310558272e-7\n                      - 6.998212586927555e-7\n                      - 5.894224376580005e-7\n                      - 4.93568138996158e-7\n                      - 4.116922090268701e-7\n                      - 3.460236317178158e-7\n                      - 3.037548828699797e-7\n                      - 2.9135185653116735e-7\n                      - 2.82520391784604e-7\n                      - 2.3785220594554244e-7\n                      - 1.7791153699257012e-7\n                      - 1.2924247345559558e-7\n                      - 9.48243126183575e-8\n                      - 7.043455232978242e-8\n                      - 5.2623996885656347e-8\n                      - 3.935459373084662e-8\n                      - 2.939334162588793e-8\n                      - 2.1909771678801793e-8\n                      - 1.6297871509147514e-8\n                      - 1.2099955678192665e-8\n                      - 8.967477745797399e-9\n                      - 6.635335072413951e-9\n                      - 4.902621621420823e-9\n                      - 3.6176621571186638e-9\n                      - 2.6663515657204105e-9\n                      - 1.963121398302903e-9\n                      - 1.4439864047128638e-9\n                      - 1.0612233263106733e-9\n                    units: /cm2/s/sr/MeV\n                properties:\n                  energies:\n                    properties:\n                      data:\n                        items:\n                          type: number\n                        type: array\n                      units:\n                        type: string\n                    type: object\n                  intensities:\n                    properties:\n                      data:\n                        items:\n                          type: number\n                        type: array\n                      units:\n                        type: string\n                    type: object\n                type: object\n          description: Successful read of intensity operation\n      summary: The energy differential intensity of a particle at a given zenith angle.\n      tags:\n        - parma\n      x-codeSamples:\n        - lang: Shell\n          source: |\n            curl -X GET \"https://avrad.amentum.io/parma/differential_intensity?altitude=11\u0026latitude=30\u0026longitude=30\u0026year=2019\u0026month=12\u0026day=1\u0026particle=proton\u0026angle=1.0\" -H \"API-Key: \u003cyour_key\u003e\" -H  \"accept: application/json\"\n        - lang: Python\n          source: |\n            import requests\n\n            params = {\n                \"altitude\" : 11, # km \n                \"latitude\" : 30, # degrees (N)\n                \"longitude\" : 30, # degrees (E)\n                \"year\" : 2019, # \n                \"month\" : 12,\n                \"day\" : 1,\n                \"particle\" : \"proton\",\n                \"angle\" : 1.0\n            }\n            headers = {\"API-Key\" : \"\u003cadd_your_key\u003e\"}\n\n            url = \"https://avrad.amentum.io/parma/differential_intensity\"\n\n            # make the call and handle errors\n            try:\n                response = requests.get(url, params=params, headers=headers) \n                response.raise_for_status()\n            except requests.exceptions.HTTPError as e: \n                print(\"HTTP error\", e)\n            except requests.exceptions.RequestException as e: \n                print(\"Request error\", e)\n            else:\n                # retrieve and return the flux\n                json_payload = response.json()\n\n                kes = json_payload[\"energies\"][\"data\"] # MeV\n                flux = json_payload[\"intensities\"][\"data\"] # /cm2/s/sr/MeV\n\n                print(f\"Kinetic energies: {kes} MeV\")\n                print(f\"Intensities: {flux} /cm2/s/sr/MeV\")\n        - lang: Javascript\n          source: |\n            let url = 'https://avrad.amentum.io/parma/differential_intensity?'\n\n            var params = new URLSearchParams({\n                altitude : 11, // km \n                latitude : 30, // degrees (N)\n                longitude : 30, // degrees (E)\n                year : 2019,  \n                month : 12,\n                day : 1,\n                particle : 'proton',\n                angle : 1.0\n            })\n\n            var requestOptions = {\n              method: 'GET',\n              redirect: 'follow',\n              headers: {'API-Key': '\u003cadd_your_key\u003e'} \n            };\n\n            fetch(url + params, requestOptions)\n              .then(response =\u003e response.text())\n              .then(result =\u003e console.log(result))\n              .catch(error =\u003e console.log('error', error));\n  /parma/effective_dose:\n    get:\n      description: |\n        Effective dose is a radiation protection quantity defined by the International Commission on Radiological Protection (ICRP) and represents the stochastic health risk to the human body at low levels of radiation. It accounts for the different sensitivities of organs to ionising radiation, as well as the different effectiveness of various types of radiation.\n        Use this endpoint if you need to estimate radiation exposures of personnel.\n      operationId: app.api_parma.endpoints.PARMA.effective_dose\n      parameters:\n        - description: Altitude (in km). The minimum is 0 m, the maximum is 47 km (the upper limit of the stratosphere).\n          in: query\n          name: altitude\n          required: false\n          schema:\n            example: 11\n            type: number\n        - description: |\n            Atmospheric depth from the top of the atmosphere (in units of g/cm2). The minimum is 0.913 g/cm2, the maximum is 1032.66 g/cm2. WARNING: you can specify either altitude OR atmospheric depth, not both.\n          in: query\n          name: atmospheric_depth\n          required: false\n          schema:\n            example: 0.92\n            type: number\n        - description: Latitude. -90 (S) to 90 (N).\n          in: query\n          name: latitude\n          required: true\n          schema:\n            example: 30\n            type: number\n        - description: Longitude. -180 (W) to 180 (E).\n          in: query\n          name: longitude\n          required: true\n          schema:\n            example: 30\n            type: number\n        - description: Year in YYYY.\n          in: query\n          name: year\n          required: true\n          schema:\n            example: 2019\n            type: integer\n        - description: Month in MM.\n          in: query\n          name: month\n          required: true\n          schema:\n            example: 12\n            type: integer\n        - description: Day in DD.\n          in: query\n          name: day\n          required: true\n          schema:\n            example: 1\n            type: integer\n        - description: |\n            The particle type as a string. Specifying 'total', only used for the dose calculation, returns the dose for all particle types.\n          in: query\n          name: particle\n          required: true\n          schema:\n            enum:\n              - total\n              - e-\n              - e+\n              - mu+\n              - mu-\n              - gamma\n              - neutron\n              - proton\n              - alpha\n            example: proton\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                example:\n                  dose rate:\n                    units: uSv/hr\n                    value: 1.9456004308224644\n                properties:\n                  dose rate:\n                    properties:\n                      units:\n                        type: string\n                      value:\n                        type: number\n                    type: object\n                type: object\n          description: Successful dose read operation\n      summary: |\n        The effective dose rate calculated for a single particle type, or accumulated over all particle types.\n      tags:\n        - parma\n      x-codeSamples:\n        - lang: Shell\n          source: |\n            curl -X GET \"https://avrad.amentum.io/parma/effective_dose?altitude=11\u0026latitude=30\u0026longitude=30\u0026year=2019\u0026month=12\u0026day=1\u0026particle=total\" -H \"API-Key: \u003cyour_key\u003e\" -H  \"accept: application/json\" \n        - lang: Python\n          source: |\n            import requests\n            params = {\n                \"altitude\" : 11, #km \n                \"latitude\" : 30, #degrees (N)\n                \"longitude\" : 30, #degrees (E)\n                \"year\" : 2019,  \n                \"month\" : 12,\n                \"day\" : 1,\n                \"particle\" : \"total\"\n            }\n            headers = {\"API-Key\" : \"\u003cadd_your_key\u003e\"}\n            url = \"https://avrad.amentum.io/parma/effective_dose\"\n            try:\n                response = requests.get(url, params=params, headers=headers) \n                response.raise_for_status()\n            except requests.exceptions.HTTPError as e: \n                print(\"HTTP error\", e)\n            except requests.exceptions.RequestException as e: \n                print(\"Request error\", e)\n            else:\n                # retrieve and return the dose rate\n                dose_rate = response.json() \n                dose_rate_val = dose_rate['dose rate']['value']\n                units = dose_rate['dose rate']['units']\n\n                print(f\"Dose rate is {dose_rate_val} {units}\")\n        - lang: Javascript\n          source: |\n            let url = 'https://avrad.amentum.io/parma/effective_dose?'\n\n            var params = new URLSearchParams({\n                altitude : 11, // km \n                latitude : 30, // degrees (N)\n                longitude : 30, // degrees (E)\n                year : 2019,  \n                month : 12,\n                day : 1,\n                particle : \"total\"\n            })\n\n            var requestOptions = {\n              method: 'GET',\n              redirect: 'follow',\n              headers: {'API-Key': '\u003cadd_your_key\u003e'} \n            };\n\n            fetch(url + params, requestOptions)\n              .then(response =\u003e response.text())\n              .then(result =\u003e console.log(result))\n              .catch(error =\u003e console.log('error', error));\n  /route/ambient_dose:\n    get:\n      description: |\n        The ambient dose equivalent, H*(10), is an operational quantity that simulates the  human body by measuring the dose equivalent at a depth of 10 mm within a tissue  equivalent sphere of 300 mm diameter. It is a measurable quantity that is  used to calibrate area monitors (radiation detectors) for mixed radiation fields.  \u003cbr\u003e \u003cbr\u003e Use this endpoint if you are comparing model predictions to measurements. \u003cbr\u003e \u003cbr\u003e Note: the airport codes or coordinates (depending on which was specified), and the date in DD/MM/YYYY format, are echoed in the json response as strings.\n      operationId: app.api_icaro.endpoints.ICARO.ambient_dose\n      parameters:\n        - description: The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the origin airport.\n          in: query\n          name: origin\n          required: true\n          schema:\n            example: YSSY\n            type: string\n        - description: The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the destination airport.\n          in: query\n          name: destination\n          required: true\n          schema:\n            example: 33.94250107,-118.4079971\n            type: string\n        - description: Altitude (in km). The minimum is 0 m, the maximum is 20 km.\n          in: query\n          name: altitude\n          required: true\n          schema:\n            example: 10.1\n            type: number\n        - description: The flight duration in hours. The minimum is 0, the maximum is 20 hrs.\n          in: query\n          name: duration\n          required: true\n          schema:\n            example: 5\n            type: number\n        - description: Year in YYYY.\n          in: query\n          name: year\n          required: true\n          schema:\n            example: 2019\n            type: integer\n        - description: Month in MM.\n          in: query\n          name: month\n          required: true\n          schema:\n            example: 5\n            type: integer\n        - description: Day in DD.\n          in: query\n          name: day\n          required: true\n          schema:\n            example: 21\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                example:\n                  dose:\n                    date: 21/05/2019\n                    destination: 33.94250107,-118.4079971\n                    origin: YSSY\n                    units: uSv\n                    value: 10.911498908287665\n                properties:\n                  dose:\n                    properties:\n                      date:\n                        type: string\n                      destination:\n                        type: string\n                      origin:\n                        type: string\n                      units:\n                        type: string\n                      value:\n                        type: number\n                    type: object\n                type: object\n          description: Successful dose calculation\n      summary: |\n        Calculate the ambient equivalent dose along a great circle flight route.\n      tags:\n        - routedose\n      x-codeSamples:\n        - lang: Shell\n          source: |\n            curl -X GET \"https://avrad.amentum.io/route/ambient_dose?origin=YSSY\u0026destination=33.94250107,-118.4079971\u0026altitude=10.1\u0026duration=5\u0026year=2019\u0026month=5\u0026day=21\" -H \"API-Key: \u003cyour_key\u003e\" -H  \"accept: application/json\"\n        - lang: Python\n          source: |\n            import requests\n\n            params = {\n              \"origin\" : \"YSSY\", # can be ICAO or iATA codes\n              \"destination\" : \"33.94250107,-118.4079971\",\n              \"altitude\" : 10.1, # km,\n              \"duration\" : 5, # hours\n              \"year\" : 2019,\n              \"month\" : 5,\n              \"day\" : 21\n            }\n            headers = {\"API-Key\" : \"\u003cadd_your_key\u003e\"}\n            try:\n              response = requests.get(\"https://avrad.amentum.io/route/ambient_dose\",\n                params=params, headers=headers)\n              response_json = response.json()\n              response.raise_for_status()\n            except requests.exceptions.HTTPError as e:\n              print(response_json['error'])\n            else:\n              dose = response_json['dose']['value']\n              print(f\"Total Ambient Dose was {dose:.2f} uSv\")\n        - lang: Javascript\n          source: |\n            let url = 'https://avrad.amentum.io/route/ambient_dose?'\n\n            var params = new URLSearchParams({\n              origin : \"YSSY\", // can be ICAO or iATA codes\n              destination : \"33.94250107,-118.4079971\",\n              altitude : 10.1, // km,\n              duration : 5, // hours\n              year : 2019,\n              month : 5,\n              day : 21\n            })\n\n            var requestOptions = {\n              method: 'GET',\n              redirect: 'follow',\n              headers: {'API-Key': '\u003cadd_your_key\u003e'} \n            };\n\n            fetch(url + params, requestOptions)\n              .then(response =\u003e response.text())\n              .then(result =\u003e console.log(result))\n              .catch(error =\u003e console.log('error', error));\n  /route/effective_dose:\n    get:\n      description: |\n        Effective Dose is a radiation protection quantity defined by the International Commission on\n         Radiological Protection (ICRP) and represents the stochastic health\n         risk to the human body at low levels of radiation.\n        It accounts for the different sensitivities of organs to ionising radiation, as well as the different effectiveness of various types of radiation. \u003cbr\u003e \u003cbr\u003e Use this endpoint if you need to estimate radiation exposures of personnel. \u003cbr\u003e \u003cbr\u003e Note: the airport codes or coordinates (depending on which was specified), and the date in DD/MM/YYYY format, are echoed in the json response as strings.\n      operationId: app.api_icaro.endpoints.ICARO.effective_dose\n      parameters:\n        - description: The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the origin airport.\n          in: query\n          name: origin\n          required: true\n          schema:\n            example: YSSY\n            type: string\n        - description: The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the destination airport.\n          in: query\n          name: destination\n          required: true\n          schema:\n            example: 33.94250107,-118.4079971\n            type: string\n        - description: Altitude (in km). The minimum is 0 m, the maximum is 20 km.\n          in: query\n          name: altitude\n          required: true\n          schema:\n            example: 10.1\n            type: number\n        - description: The flight duration in hours. The minimum is 0, the maximum is 20 hrs.\n          in: query\n          name: duration\n          required: true\n          schema:\n            example: 5\n            type: number\n        - description: Year in YYYY.\n          in: query\n          name: year\n          required: true\n          schema:\n            example: 2019\n            type: integer\n        - description: Month in MM.\n          in: query\n          name: month\n          required: true\n          schema:\n            example: 5\n            type: integer\n        - description: Day in DD.\n          in: query\n          name: day\n          required: true\n          schema:\n            example: 21\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                example:\n                  dose:\n                    date: 21/05/2019\n                    destination: 33.94250107,-118.4079971\n                    origin: YSSY\n                    units: uSv\n                    value: 9.90406659800017\n                properties:\n                  dose:\n                    properties:\n                      date:\n                        type: string\n                      destination:\n                        type: string\n                      origin:\n                        type: string\n                      units:\n                        type: string\n                      value:\n                        type: number\n                    type: object\n                type: object\n          description: Successful dose calculation\n      summary: |\n        Calculate the total effective dose along a great circle flight route.\n      tags:\n        - routedose\n      x-codeSamples:\n        - lang: Shell\n          source: |\n            curl -X GET \"https://avrad.amentum.io/route/effective_dose?origin=YSSY\u0026destination=33.94250107,-118.4079971\u0026altitude=10.1\u0026duration=5\u0026year=2019\u0026month=5\u0026day=21\" -H \"API-Key: \u003cyour_key\u003e\" -H \"accept: application/json\"\n        - lang: Python\n          source: |\n            import requests\n\n            params = {\n              \"origin\" : \"YSSY\", # can be ICAO or iATA codes\n              \"destination\" : \"33.94250107,-118.4079971\",\n              \"altitude\" : 10.1, # km,\n              \"duration\" : 5, # hours\n              \"year\" : 2019,\n              \"month\" : 5,\n              \"day\" : 21\n            } \n            headers = {\"API-Key\" : \"\u003cadd_your_key\u003e\"}\n            try:\n              response = requests.get(\"https://avrad.amentum.io/route/effective_dose\",\n                params=params, headers=headers)\n              response_json = response.json()\n              response.raise_for_status()\n            except requests.exceptions.HTTPError as e:\n              print(response_json['error'])\n            else:\n              # Extract the dose\n              dose = response_json['dose']['value']\n              print(f\"Total Effective Dose was {dose:.2f} uSv\")\n        - lang: Javascript\n          source: |\n            let url = 'https://avrad.amentum.io/route/effective_dose?'\n\n            var params = new URLSearchParams({\n              origin : \"YSSY\", // can be ICAO or iATA codes\n              destination : \"33.94250107,-118.4079971\",\n              altitude : 10.1, // km,\n              duration : 5, // hours\n              year : 2019,\n              month : 5,\n              day : 21\n            })\n\n            var requestOptions = {\n              method: 'GET',\n              redirect: 'follow',\n              headers: {'API-Key': '\u003cadd_your_key\u003e'} \n            };\n\n            fetch(url + params, requestOptions)\n              .then(response =\u003e response.text())\n              .then(result =\u003e console.log(result))\n              .catch(error =\u003e console.log('error', error));\nx-tagGroups:\n  - name: Calculate radiation dose along a great circle flight route\n    tags:\n      - routedose\n  - name: Calculate radiation intensity or dose at a point\n    tags:\n      - cari7\n      - parma\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@cafd364eceab1026372ac69bd0ef670c5fe491bb/-/blob/APIs/amentum.space/aviation_radiation/1.5.0/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/cafd364eceab1026372ac69bd0ef670c5fe491bb/APIs/amentum.space/aviation_radiation/1.5.0/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /cari7/ambient_dose: get: operation \"app.api_cari7.endpoints.CARI7.ambient_dose\": parameters: parse parameter \"particle\": schema: parse enum values: parse value \"false\": expected type \"string\", got \"bool\""
}