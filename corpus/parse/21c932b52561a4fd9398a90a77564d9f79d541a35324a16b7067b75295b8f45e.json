{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/DevbookHQ/sdk"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "shared/api/openapi.yml",
			"byteSize": 7261,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: Devbook\n  description: Devbook API\n\nservers:\n  - url: https://ondevbook.com/\n    description: API endpoint\n  - url: https://{sessionID}-{clientID}.ondevbook.com/\n    description: Session endpoint without specified port\n    variables:\n      sessionID:\n        description: ID of the session\n        default: _sessionID\n      clientID:\n        description: ID of the client\n        default: _clientID\n  - url: https://{port}-{sessionID}-{clientID}.ondevbook.com/\n    description: Session endpoint with specificed port\n    variables:\n      sessionID:\n        description: ID of the session\n        default: _sessionID\n      clientID:\n        description: ID of the client\n        default: _clientID\n      port:\n        description: Port to connect to\n        default: \"8080\"\n\ntags:\n  - name: sessions\n    description: Managing VM sessions\n  - name: envs\n    description: Environment for VM\n\ncomponents:\n  #securitySchemes:\n  #  ApiKeyAuth: # Arbitrary name for the security scheme\n  #    type: apiKey\n  #    in: query # Can be 'header', 'query' or 'cookie'\n  #    name: API_KEY # Name of the header, query parameter or cookie\n  schemas:\n    DeleteEnvironment:\n      type: object\n      required:\n        - codeSnippetID\n      properties:\n        codeSnippetID:\n          type: string\n    NewEnvironment:\n      type: object\n      required:\n        - codeSnippetID\n        - template\n        - deps\n      properties:\n        codeSnippetID:\n          type: string\n        template:\n          type: string\n          enum: [Nodejs]\n        deps:\n          type: array\n          items:\n            type: string\n    Environment:\n      allOf:\n        - $ref: \"#/components/schemas/NewEnvironment\"\n        - type: object\n          required:\n            - id\n            - state\n          properties:\n            id:\n              type: string\n            state:\n              type: string\n              enum: [Building, Failed, Done]\n    EnvironmentStateUpdate:\n      type: object\n      required:\n        - codeSnippetID\n        - state\n      properties:\n        codeSnippetID:\n          type: string\n        state:\n          type: string\n          enum: [Building, Failed, Done]\n\n      #NewEnvironment:\n      #  required:\n      #    - codeSnippetID\n      #    - template\n      #    - deps\n      #  properties:\n      #    codeSnippetID:\n      #      type: string\n      #      description: Identifier of a code snippet which which is the environment associated\n      #    template:\n      #      type: string\n      #      enum: [nodejs]\n      #    deps: # ['dep1', 'dep2']\n      #      type: array\n      #      items:\n      #        type: string\n      #  Environment:\n      #    required:\n      #      - codeSnippetID\n      #      - r\n\n    NewSession:\n      required:\n        - codeSnippetID\n      properties:\n        codeSnippetID:\n          type: string\n          description: Identifier of a code snippet which which is the environment associated\n    Session:\n      required:\n        - sessionID\n        - clientID\n      properties:\n        sessionID:\n          type: string\n          description: Identifier of the session\n        clientID:\n          type: string\n          description: Identifier of the client\n\n    Error:\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n          description: Error code\n        message:\n          type: string\n          description: Error\n\n#security:\n#- ApiKeyAuth: [] # Use the same name as under securitySchemes\n\npaths:\n  /health:\n    get:\n      description: Health check\n      responses:\n        200:\n          description: Request was successful\n  /sessions:\n    get:\n      tags:\n        - sessions\n      description: List all sessions\n      responses:\n        200:\n          description: Successfully returned all sessions\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  allOf:\n                    - $ref: \"#/components/schemas/Session\"\n        500:\n          description: Error listing sessions\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    post:\n      tags:\n        - sessions\n      description: Create a session on the server\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NewSession\"\n      responses:\n        201:\n          description: Successfully created a session\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Session\"\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: Error creating session\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /sessions/{sessionID}:\n    delete:\n      tags:\n        - sessions\n      parameters:\n        - name: sessionID\n          in: path\n          required: true\n          schema:\n            type: string\n      description: Delete a session on the server\n      responses:\n        204:\n          description: Successfully deleted the session\n        500:\n          description: Error deleting the session\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /sessions/{sessionID}/refresh:\n    put:\n      tags:\n        - sessions\n      parameters:\n        - name: sessionID\n          in: path\n          required: true\n          schema:\n            type: string\n      description: Refresh the session extending its time to live\n      responses:\n        204:\n          description: Successfully refreshed the session\n        404:\n          description: Error refreshing session - session not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /envs:\n    delete:\n      tags:\n        - envs\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DeleteEnvironment\"\n    post:\n      tags:\n        - envs\n      responses:\n        200:\n          description: Successfully created an environment\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NewEnvironment\"\n  # TODO: This endpoint might not be needed.\n  /envs/{codeSnippetID}:\n    get:\n      tags:\n        - envs\n      parameters:\n        - name: codeSnippetID\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Environment\"\n  /envs/state:\n    post:\n      tags:\n        - envs\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EnvironmentStateUpdate\"\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /envs: delete: responses: no responses"
}