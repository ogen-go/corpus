{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/disit/snap4city"
		},
		"file": {
			"name": "resourcemanagerapi-openapiv3.yaml",
			"size": 0,
			"path": "swagger/internal/resourcemanagerapi-openapiv3.yaml",
			"byteSize": 17948,
			"content": "openapi: 3.0.1\ninfo:\n  title: Resource Manager API v8\n  version: 2.0.0\nservers:\n  - url: http://processloader.snap4city.org/processloader/api\npaths:\n  /upload.php:\n    post:\n      tags: [Upload]\n      summary: Upload a Resource\n      requestBody:\n        description: A JSON should be submitted for uploading resources of type IoTApp, AMMA, DevDash, ResDash. A multipart body should be submitted for uploading resources of type IoTBlocks, MicroService.\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - name\n                - user\n                - resource_type\n                - nature\n                - sub_nature\n                - licence\n                - description\n                - data\n              properties:\n                name:\n                  description: Resource title (that appears in the loader home page).\n                  type: string\n                  example: NodereRed_weather_sensor\n                user:\n                  description: A valid access token.\n                  type: string\n                resource_type:\n                  description: Resource type.\n                  type: string\n                  enum: [IoTApp, ResDash, DevDash, AMMA]\n                  example: IoTApp\n                nature:\n                  description: Resource KM4City Category. The full list of the permitted values can be retrieved through a [SPARQL query](http://servicemap.disit.org/WebAppGrafo/sparql?query=select%20distinct%20substr(str(?m),37)%20as%20?macroClass%20{%20?m%20rdfs:subClassOf%20km4c:Service.%20filter%20exists%20{?c%20rdfs:subClassOf%20?m}%20}%20order%20by%20?m&format=json).\n                  type: string\n                  example: Environment\n                sub_nature:\n                  description: Resource KM4City Sub Category. The full list of the permitted values can be retrieved through a [SPARQL query](http://servicemap.disit.org/WebAppGrafo/sparql?query=%20select%20distinct%20substr(str(?m),37)%20as%20?macroClass%20substr(str(?c),37)%20as%20?subClass%20{%20?m%20rdfs:subClassOf%20km4c:Service.%20?c%20rdfs:subClassOf+%20?m.%20}%20order%20by%20?m%20?c&format=json).\n                  type: string\n                  example: Weather_sensor\n                format:\n                  description: Format of the source file (original data).\n                  type: string\n                  example: xml\n                licence:\n                  description: Licence of use. Is an URL to a licence.\n                  type: string\n                  format: url\n                  enum: [https://creativecommons.org/licenses/by/4.0]\n                  example: https://creativecommons.org/licenses/by/4.0\n                description:\n                  description: Description\n                  type: string\n                  example: A flow coming from NodeRed\n                data:\n                  description: Data\n                  type: array\n                  items:\n                    $ref: '#components/schemas/data'\n          multipart/form-data:\n            schema:\n              type: object\n              required:\n                - resource\n                - request\n              properties:\n                resource:\n                  description: A compressed file (ZIP, or RAR).\n                  type: string\n                  format: binary\n                request:\n                  type: object\n                  required:\n                    - name\n                    - user\n                    - resource_type\n                    - nature\n                    - sub_nature\n                    - licence\n                    - description\n                  properties:\n                    name:\n                      description: Resource title (that appears in the loader home page).\n                      type: string\n                      example: NodereRed_weather_sensor\n                    user:\n                      description: A valid access token.\n                      type: string\n                    resource_type:\n                      description: Resource type.\n                      type: string\n                      enum: [IoTBlocks, MicroService]\n                      example: MicroService\n                    nature:\n                      description: Resource KM4City Category. The full list of the permitted values can be retrieved through a [SPARQL query](http://servicemap.disit.org/WebAppGrafo/sparql?query=select%20distinct%20substr(str(?m),37)%20as%20?macroClass%20{%20?m%20rdfs:subClassOf%20km4c:Service.%20filter%20exists%20{?c%20rdfs:subClassOf%20?m}%20}%20order%20by%20?m&format=json).\n                      type: string\n                      example: Environment\n                    sub_nature:\n                      description: Resource KM4City Sub Category. The full list of the permitted values can be retrieved through a [SPARQL query](http://servicemap.disit.org/WebAppGrafo/sparql?query=%20select%20distinct%20substr(str(?m),37)%20as%20?macroClass%20substr(str(?c),37)%20as%20?subClass%20{%20?m%20rdfs:subClassOf%20km4c:Service.%20?c%20rdfs:subClassOf+%20?m.%20}%20order%20by%20?m%20?c&format=json).\n                      type: string\n                      example: Weather_sensor\n                    format:\n                      description: Format of the source file (original data).\n                      type: string\n                      example: xml\n                    licence:\n                      description: Licence of use. Is an URL to a licence.\n                      type: string\n                      format: url\n                      enum: [https://creativecommons.org/licenses/by/4.0]\n                      example: https://creativecommons.org/licenses/by/4.0\n                    description:\n                      description: Description\n                      type: string\n                      example: A flow coming from NodeRed\n                    url:\n                      description: Mandatory for the resources of type __MicroService__.\n                      type: string\n                    method:\n                      description: Mandatory for the resources of type __MicroService__.\n                      type: string                    \n                    help:\n                      description: Mandatory for the resources of type __MicroService__.\n                      type: string                  \n        required: true\n      responses:\n        200:\n          description: Success.\n        401:\n          description: App type (__resource_type__) not recognised.\n        402:\n          description: Insert NOT done due to lack of mandatory data.\n        500:\n          description: DB connection error.\n        501: \n          description: DB problem.\n        502:\n          description: Upload failed.\n        503:\n          description: File not compressed.\n        504:\n          description: Missing input __resource__.\n        505:\n          description: Cannot decode JSON.\n        506:\n          description: Request (POST) not set.\n  /download.php:\n    get:\n      tags: [Download]\n      summary: Download a Resource via Resource ID\n      description: |\n      \n        A remarkable note about the __user__ and __status__ parameters:\n        \n        * If the access token is submitted through the __user__ parameter, but the __status__ is not specified, then details are returned about all the resources created by the user (both _Private_ and _Public_);\n        * If the access token is submitted through the __user__ parameter, and the __status__ is also submitted and set to _Private_, then details are returned about all the _Private_ resources created by user;\n        * If the access token is submitted through the __user__ parameter, and the __status__ is also submitted and set to _Public_, then details are returned about all the _Public_ resources created by user; \n        * If the access token is submitted through the __user__ parameter, and the __status__ is also submitted and set to _All_, then details are returned about all the resources created by user, and about all the _Public_ resources created by other users;\n        * If nor the __user__ neither the __status__ parameters are submitted, all the _Public_ resources are returned that have been created by users other than the requester.\n        \n      parameters:\n        - name: id\n          in: query\n          description: Resource ID\n          required: true\n          schema:\n            type: string\n          example: 300\n        - name: user\n          in: query\n          description: User access token. Required for accessing a private resource by ID.\n          required: false\n          schema:\n            type: string\n        - name: resource_type\n          in: query\n          description: Resource type. It is a filter that can be submitted in those requests where the ID of the resource of interest is not specified. \n          required: false\n          schema: \n            type: string\n            enum: [IoTApp, ResDash, DevDash, AMMA, IoTBlocks, MicroService, ETL, R, Java]\n          example: IoTApp\n        - name: nature\n          in: query\n          description: Resource KM4City Category. It is a filter that can be submitted in those requests where the ID of the resource of interest is not specified. The full list of the permitted values can be retrieved through a [SPARQL query](http://servicemap.disit.org/WebAppGrafo/sparql?query=select%20distinct%20substr(str(?m),37)%20as%20?macroClass%20{%20?m%20rdfs:subClassOf%20km4c:Service.%20filter%20exists%20{?c%20rdfs:subClassOf%20?m}%20}%20order%20by%20?m&format=json).\n          required: false\n          schema: \n            type: string\n          example: Environment\n        - name: sub_nature\n          in: query\n          description: Resource KM4City Sub Category. It is a filter that can be submitted in those requests where the ID of the resource of interest is not specified. The full list of the permitted values can be retrieved through a [SPARQL query](http://servicemap.disit.org/WebAppGrafo/sparql?query=%20select%20distinct%20substr(str(?m),37)%20as%20?macroClass%20substr(str(?c),37)%20as%20?subClass%20{%20?m%20rdfs:subClassOf%20km4c:Service.%20?c%20rdfs:subClassOf+%20?m.%20}%20order%20by%20?m%20?c&format=json).\n          required: false\n          schema:\n            type: string\n          example: Weather_sensor\n        - name: format\n          in: query\n          description: Format of the source file (original data). It is a filter that can be submitted in those requests where the ID of the resource of interest is not specified. \n          required: false\n          schema:\n            type: string\n          example: xml\n        - name: licence\n          in: query\n          description: Licence of use. Is an URL to a licence. It is a filter that can be submitted in those requests where the ID of the resource of interest is not specified. \n          required: false\n          schema: \n            type: string\n            format: url\n            enum: [https://creativecommons.org/licenses/by/4.0]\n          example: https://creativecommons.org/licenses/by/4.0\n        - name: access\n          in: query\n          description: Access. It is a filter that can be submitted in those requests where the ID of the resource of interest is not specified. \n          required: false\n          schema: \n            type: string\n        - name: method\n          in: query\n          description: Method. It is a filter that can be submitted in those requests where the ID of the resource of interest is not specified. \n          required: false\n          schema: \n            type: string        \n        - name: status\n          in: query\n          description: The resource status. It is meaningfull only if the access token is submitted, through the __user__ parameter. It is a filter that can be submitted in those requests where the ID of the resource of interest is not specified. \n          required: false\n          schema:\n            type: string\n            enum: [All,Public,Private]\n          example: All  \n                  \n      responses:\n        200:\n          description: A JSON is returned that contains the resource data (also including the attached compressed file if it can be found).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    description: The HTTP response status code.\n                    type: integer\n                    format: int32\n                    enum: [200]\n                  result:\n                    description: The textual description of the HTTP response status code.\n                    type: string\n                    enum: [Ok]\n                  file_link:\n                    description: An URL from where the resource can be downloaded.\n                    type: string\n                    format: uri\n                  file_metadata:\n                    $ref: '#components/schemas/metadata'\n                  files:\n                    type: array\n                    items:\n                      $ref: '#components/schemas/metadata'\n                  file_data:\n                    type: array\n                    items:\n                      $ref: '#components/schemas/data'                \n        500:\n          description: DB connection errors, invalid tokens, invalid input (one or more parameters not recognized), resource type not recognized or not yet implemented.\n        501:\n          description: Database error.\ncomponents:\n  schemas:\n    metadata:\n      description: Metadata about the resource of interest, identified through its unique identifier.\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          description: Resource title (that appears in the loader home page).\n          type: string\n          example: NodereRed_weather_sensor\n        downloads:\n          type: string\n        creation_date:\n          type: string\n          format: date-time\n        average_stars:\n          type: string\n        votes:\n          type: string\n        description:\n          description: Description\n          type: string\n          example: A flow coming from NodeRed\n        resource_type:\n          type: string\n          enum: [IoTApp, ResDash, DevDash, AMMA, IoTBlocks, MicroService]\n        nature:\n          description: Resource KM4City Category. The full list of the permitted values can be retrieved through a [SPARQL query](http://servicemap.disit.org/WebAppGrafo/sparql?query=select%20distinct%20substr(str(?m),37)%20as%20?macroClass%20{%20?m%20rdfs:subClassOf%20km4c:Service.%20filter%20exists%20{?c%20rdfs:subClassOf%20?m}%20}%20order%20by%20?m&format=json).\n          type: string\n          example: Environment\n        sub_nature:\n          description: Resource KM4City Sub Category. The full list of the permitted values can be retrieved through a [SPARQL query](http://servicemap.disit.org/WebAppGrafo/sparql?query=%20select%20distinct%20substr(str(?m),37)%20as%20?macroClass%20substr(str(?c),37)%20as%20?subClass%20{%20?m%20rdfs:subClassOf%20km4c:Service.%20?c%20rdfs:subClassOf+%20?m.%20}%20order%20by%20?m%20?c&format=json).\n          type: string\n          example: Weather_sensor\n        format:\n          description: Format of the source file (original data).\n          type: string\n          example: xml\n        licence:\n          description: Licence of use. Is an URL to a licence.\n          type: string\n          format: url\n          enum: [https://creativecommons.org/licenses/by/4.0]\n          example: https://creativecommons.org/licenses/by/4.0\n        url:\n          description: Expected to be found for the resources of type __MicroService__.\n          type: string\n        method:\n          description: Expected to be found for the resources of type __MicroService__.\n          type: string                    \n        help:\n          description: Expected to be found for the resources of type __MicroService__.\n          type: string   \n        access:\n          type: string\n        public:\n          type: string\n          enum: [0,1]      \n    data:\n      type: object\n      properties:\n        id:\n          type: string\n          example: 355d95d.ba7306a\n        type:\n          type: string\n          example: inject\n        tags:\n          type: string\n        z:\n          type: string\n          example: 1fbdd2b9.847dad\n        user:\n          type: boolean\n          example: false\n        name:\n          type: string\n        filename:\n          type: string\n        format:\n          type: string\n          example: utf8\n        chunk:\n          type: boolean\n          example: false\n        sendError:\n          type: boolean\n          example: false\n        server: \n          type: string\n          example: smtp.gmail.com\n        port:\n          type: string\n          example: 465\n        secure: \n          type: boolean\n          example: true\n        dname:\n          type: string\n        topic:\n          type: string\n          example: tweets\n        payload:\n          type: string\n        payloadType:\n          type: string\n          example: date\n        repeat:\n          type: string\n        crontab:\n          type: string\n        once:\n          type: string\n        onceDelay:\n          type: string\n        inputs:\n          type: integer\n          format: int32\n          example: 0\n        x:\n          type: integer\n          format: int32\n          example: 150\n        y:\n          type: integer\n          format: int32\n          example: 120\n        wires:\n          type: array\n          items: \n            type: array\n            items:\n              type: string\n              example: c648a579.645268\n    \nexternalDocs:\n  description: Process Loader home page\n  url: http://processloader.snap4city.org ",
			"canonicalURL": "/github.com/disit/snap4city@523488172f08a8e700ea3a777117724aac25eb65/-/blob/swagger/internal/resourcemanagerapi-openapiv3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/disit/snap4city/blob/523488172f08a8e700ea3a777117724aac25eb65/swagger/internal/resourcemanagerapi-openapiv3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: at 1:15: schemas: \"metadata\": parse schema: property \"public\": at 1:2611: parse enum values: parse value \"0\": expected type \"string\", got \"number\""
}