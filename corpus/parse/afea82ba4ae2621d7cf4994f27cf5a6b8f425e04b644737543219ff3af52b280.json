{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dcs4cop/xcube"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "xcube/webapi/res/openapi.yml",
			"byteSize": 35881,
			"content": "openapi: 3.0.0\n\nservers:\n  - description: DCS4COP Development API\n    url: https://xcube2.dcs4cop.eu/dcs4cop-dev/api/0.1.0.dev6/\n  - description: CyanoAlert Development API\n    url: https://cyanoalert.brockmann-consult.com/api/v1.dev/\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/forman/xcube-server/0.2.0/\n\ninfo:\n  description: |\n    A light-weight web server that provides\n    various services based on xarray-enabled datasets.\n  version: \"0.2.0\"\n  title: xcube Web API\n  contact:\n    email: bcdev@brockmann-consult.de\n  license:\n    name: MIT\n    url: 'https://opensource.org/licenses/MIT'\n\ntags:\n  - name: wmts\n    description: WMTS 1.0.0 API\n  - name: catalogue\n    description: Catalogue API\n  - name: data\n    description: Data Access API\n  - name: tiles\n    description: Tiles API\n  - name: time-series\n    description: Time-series API\n  - name: ts-legacy\n    description: Time-series API (Legacy)\n  - name: places\n    description: Places API\n\npaths:\n\n  ########################################################################################\n  # WMTS 1.0\n  ########################################################################################\n\n  '/wmts/1.0.0/WMTSCapabilities.xml':\n    get:\n      tags:\n        - wmts\n      summary: Get WMTS capabilities\n      operationId: getWMTSCapabilities\n      responses:\n        default:\n          description: WMTS capabilities XML doc\n          content:\n            application/xml:\n              schema:\n                type: string\n\n  '/wmts/1.0.0/tile/{dataset}/{variable}/{z}/{y}/{x}.png':\n    get:\n      tags:\n        - wmts\n      summary: Get tile\n      operationId: getTile\n      description: |\n        Get an image tile for a variable of a given dataset\n        at resolution level z and spatial tile coordinate x, y.\n      parameters:\n        - $ref: '#/components/parameters/dataset'\n        - $ref: '#/components/parameters/variable'\n        - $ref: '#/components/parameters/z'\n        - $ref: '#/components/parameters/y'\n        - $ref: '#/components/parameters/x'\n      responses:\n        '200':\n          description: Image tile.\n          content:\n            'image/png':\n                  schema:\n                    type: string\n                    format: binary\n        '404':\n          description: Resource not found.\n\n  '/wmts/kvp':\n    get:\n      tags:\n        - wmts\n      summary: Key-value pair API\n      operationId: performWMTSMethod\n      description: |\n        Provide the WMTS 1.0 key-value-pair (KVP) architectural style.\n      parameters:\n        - $ref: '#/components/parameters/dataset'\n        - $ref: '#/components/parameters/variable'\n        - $ref: '#/components/parameters/z'\n        - $ref: '#/components/parameters/y'\n        - $ref: '#/components/parameters/x'\n      responses:\n        '200':\n          description: Image tile.\n          content:\n            'image/png':\n                  schema:\n                    type: string\n                    format: binary\n        '404':\n          description: Resource not found.\n\n  ########################################################################################\n  # Catalogue\n  ########################################################################################\n\n  '/datasets':\n    get:\n      tags:\n        - catalogue\n      summary: Get all datasets\n      operationId: getDatasets\n      description: |\n        Get a list of all available datasets.\n        If \"details\" is set, all returned objects are fully loaded, including their dimensions, variables,\n        and place groups. This will take considerably more time.\n      parameters:\n        - $ref: '#/components/parameters/datasetDetails'\n        - $ref: '#/components/parameters/tileClient'\n        - $ref: '#/components/parameters/pointCoord'\n      responses:\n        '200':\n          description: Dataset list.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DatasetsRefs'\n\n  '/datasets/{dataset}':\n    get:\n      tags:\n        - catalogue\n      summary: Get dataset details\n      operationId: getDataset\n      parameters:\n        - $ref: '#/components/parameters/dataset'\n        - $ref: '#/components/parameters/tileClient'\n      description: |\n        Get full dataset information including dimensions, variables, and place groups.\n      responses:\n        '200':\n          description: Dataset information object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DatasetInfo'\n\n  '/datasets/{dataset}/coords/{dim}':\n    get:\n      tags:\n        - catalogue\n      summary: Get coordinates\n      operationId: getDatasetCoordinates\n      parameters:\n        - $ref: '#/components/parameters/dataset'\n        - $ref: '#/components/parameters/dim'\n      description: |\n        Get the coordinates of a given dimension of a given dataset.\n        Coordinates are returned as an array of values whose length is\n        the size of the given dimension.\n      responses:\n        '200':\n          description: Coordinates information object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DimensionInfo'\n\n  ########################################################################################\n  # AWS S3 compatible data access\n  ########################################################################################\n\n  '/s3bucket':\n    get:\n      tags:\n        - data\n      summary: List bucket objects\n      operationId: listBucketObjects\n      parameters:\n        - name: delimiter\n          schema:\n            type: string\n          in: query\n          required: false\n          description: |\n            A delimiter is a character you use to group keys.\n            If you specify a prefix, all of the keys that contain the same string between the\n            prefix and the first occurrence of the delimiter after the prefix are grouped under a\n            single result element called CommonPrefixes. If you don't specify the prefix parameter,\n            the substring starts at the beginning of the key. The keys that are grouped under the\n            CommonPrefixes result element are not returned elsewhere in the response.\n        - name: prefix\n          schema:\n            type: string\n          in: query\n          required: false\n          description: |\n            Limits the response to keys that begin with the specified prefix. You can use prefixes\n            to separate a bucket into different groupings of keys. (You can think of using prefix\n            to make groups in the same way you'd use a folder in a file system.)\n        - name: marker\n          schema:\n            type: string\n          in: query\n          required: false\n          description: |\n            Specifies the key to start with when listing objects in a bucket. The server returns\n            object keys in UTF-8 binary order, starting with key after the marker in order.\n        - name: max-keys\n          schema:\n            type: string\n          in: query\n          required: false\n          description: |\n            Sets the maximum number of keys returned in the response body. If you want to retrieve\n            fewer than the default 1,000 keys, you can add this to your request.\n            The response might contain fewer keys, but it never contains more. If there are\n            additional keys that satisfy the search criteria, but these keys were not returned\n            because max-keys was exceeded, the response contains \u003cIsTruncated\u003etrue\u003c/IsTruncated\u003e.\n            To return the additional keys, see marker.\n      description: |\n        Returns some or all (up to 1000) of the objects in the bucket.\n        You can use the request parameters as selection criteria to return a subset of the objects in a bucket.\n        A 200 OK response can contain valid or invalid XML.\n        Make sure to design your application to parse the contents of the response and handle it appropriately.\n        See https://docs.aws.amazon.com/AmazonS3/latest/API/v2-RESTBucketGET.html\n      responses:\n        '200':\n          description: The list-bucket result using XML format.\n          content:\n            application/xml:\n              schema:\n                # Probably wrong:\n                type: string\n                format: text\n\n\n  '/s3bucket/{path}':\n    head:\n      tags:\n        - data\n      summary: Get bucket object's metadata\n      operationId: getBucketObjectMetadata\n      parameters:\n        - name: path\n          in: path\n          description: Path to an object.\n          required: true\n          schema:\n            type: string\n      description: |\n        Retrieves metadata from an object without returning the object itself.\n        This operation is useful if you are interested only in an object's metadata.\n        See https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectHEAD.html\n      responses:\n        '200':\n          description: The object metadata.\n          content:\n            binary/octet-stream:\n              schema:\n                # Probably wrong:\n                type: string\n                format: byte\n    get:\n      tags:\n        - data\n      summary: Get bucket object\n      operationId: getBucketObject\n      parameters:\n        - name: path\n          in: path\n          description: Path to an object.\n          required: true\n          schema:\n            type: string\n      description: |\n        Retrieves objects from a bucket.\n        See https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectGET.html\n      responses:\n        '200':\n          description: The object's binary data.\n          content:\n            binary/octet-stream:\n              schema:\n                # Probably wrong:\n                type: string\n                format: byte\n\n\n  ########################################################################################\n  # Tiles\n  ########################################################################################\n\n  '/datasets/{dataset}/vars/{variable}/tiles/{z}/{x}/{y}.png':\n    get:\n      tags:\n        - tiles\n      summary: Get tile\n      operationId: getDatasetVariableTile\n      description: |\n        Get an image tile for a variable of a given dataset\n        at resolution level z and spatial tile coordinate x, y.\n      parameters:\n        - $ref: '#/components/parameters/dataset'\n        - $ref: '#/components/parameters/variable'\n        - $ref: '#/components/parameters/z'\n        - $ref: '#/components/parameters/x'\n        - $ref: '#/components/parameters/y'\n      responses:\n        '200':\n          description: Image tile.\n          content:\n            'image/png':\n                  schema:\n                    type: string\n                    format: binary\n        '404':\n          description: Resource not found.\n\n  '/datasets/{dataset}/vars/{variable}/tilegrid':\n    get:\n      tags:\n        - tiles\n      summary: Get tiling schema\n      operationId: getDatasetVariableTileGrid\n      description: |\n        Get a tile grid description compatible with\n        JS tile clients such as OpenLayers or Cesium.\n      parameters:\n        - $ref: '#/components/parameters/dataset'\n        - $ref: '#/components/parameters/variable'\n        - $ref: '#/components/parameters/tileClient'\n      responses:\n        '200':\n          description: Tile schema for OL4.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/OL4TileSchema'\n                  - $ref: '#/components/schemas/CesiumTileGrid'\n        '404':\n          description: Resource not found.\n\n  '/datasets/{dataset}/vars/{variable}/legend.png':\n    get:\n      tags:\n        - tiles\n      summary: Get legend for layer\n      description: |\n        Get a legend image for a layer given by a variable of a dataset.\n        The legend is returned as a PNG image.\n      operationId: getDatasetVariableLegend\n      parameters:\n        - $ref: '#/components/parameters/dataset'\n        - $ref: '#/components/parameters/variable'\n      responses:\n        '200':\n          description: Legend image.\n          content:\n            'image/png':\n              schema:\n                type: string\n                format: binary\n        '404':\n          description: Resource not found.\n\n  ########################################################################################\n  # Color Bars\n  ########################################################################################\n\n  '/colorbars':\n    get:\n      tags:\n        - catalogue\n      summary: Get available color bars\n      operationId: getColorBars\n      description: |\n        Retrieve all available color maps.\n        For each color map its name, description\n        and base64-encoded image is provided.\n      responses:\n        '200':\n          description: Color bars.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: array\n                  items:\n                    type: object\n        '404':\n          description: Resource not found.\n\n  '/timeseries/{dataset}/{variable}':\n    post:\n      tags:\n        - time-series\n      operationId: getTimeSeries\n      summary: Compute time-series for GeoJSON object\n      description: Compute a time series given a GeoJSON object.\n      parameters:\n        - $ref: '#/components/parameters/dataset'\n        - $ref: '#/components/parameters/variable'\n        - $ref: '#/components/parameters/aggMethod'\n        - $ref: '#/components/parameters/startDate'\n        - $ref: '#/components/parameters/endDate'\n        - $ref: '#/components/parameters/maxValids'\n      requestBody:\n        $ref: '#/components/requestBodies/GeoJsonObject'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TsLegacy'\n        '400':\n          description: Invalid query parameters\n        '500':\n          description: Unexpected error.\n\n  ########################################################################################\n  # Time-Series Legacy API (for compatibility with VITO viewer)\n  ########################################################################################\n\n  '/ts':\n    get:\n      tags:\n        - ts-legacy\n      operationId: getTimeSeriesInfo\n      summary: List time stamps for variables\n      description: Returns for each variable the times in UTC format for which data is available.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TsLegacyInfo'\n        '500':\n          description: Unexpected error.\n\n  '/ts/{dataset}/{variable}/point':\n    get:\n      tags:\n        - ts-legacy\n      operationId: getTimeSeriesForPoint\n      summary: Compute time-series for point\n      description: Compute a time series given a coordinate and a product.\n      parameters:\n        - $ref: '#/components/parameters/dataset'\n        - $ref: '#/components/parameters/variable'\n        - $ref: '#/components/parameters/lat'\n        - $ref: '#/components/parameters/lon'\n        - $ref: '#/components/parameters/startDate'\n        - $ref: '#/components/parameters/endDate'\n        - $ref: '#/components/parameters/maxValids'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TsLegacy'\n        '400':\n          description: Invalid query parameters\n        '500':\n          description: Unexpected error.\n\n  '/ts/{dataset}/{variable}/geometry':\n    post:\n      tags:\n        - ts-legacy\n      operationId: getTimeSeriesForGeometry\n      summary: Compute time-series for geometry\n      description: Compute a time series given a GeoJSON geometry object.\n      parameters:\n        - $ref: '#/components/parameters/dataset'\n        - $ref: '#/components/parameters/variable'\n        - $ref: '#/components/parameters/startDate'\n        - $ref: '#/components/parameters/endDate'\n        - $ref: '#/components/parameters/maxValids'\n      requestBody:\n        $ref: '#/components/requestBodies/GeoJsonGeometry'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TsLegacy'\n        '400':\n          description: Invalid query parameters\n        '500':\n          description: Unexpected error.\n\n  '/ts/{dataset}/{variable}/geometries':\n    post:\n      tags:\n        - ts-legacy\n      operationId: getTimeSeriesForGeometries\n      summary: Compute time-series for geometries\n      description: Compute a time series given a GeoJSON geometry collection object.\n      parameters:\n        - $ref: '#/components/parameters/dataset'\n        - $ref: '#/components/parameters/variable'\n        - $ref: '#/components/parameters/startDate'\n        - $ref: '#/components/parameters/endDate'\n        - $ref: '#/components/parameters/maxValids'\n      requestBody:\n        $ref: '#/components/requestBodies/GeoJsonGeometryCollection'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TsLegacy'\n        '400':\n          description: Invalid query parameters\n        '500':\n          description: Unexpected error.\n\n  '/ts/{dataset}/{variable}/features':\n    post:\n      tags:\n        - ts-legacy\n      operationId: getTimeSeriesForFeature\n      summary: Compute time-series for feature collection\n      description: Compute a time series given a GeoJSON feature collection object.\n      parameters:\n        - $ref: '#/components/parameters/dataset'\n        - $ref: '#/components/parameters/variable'\n        - $ref: '#/components/parameters/startDate'\n        - $ref: '#/components/parameters/endDate'\n        - $ref: '#/components/parameters/maxValids'\n      requestBody:\n        $ref: '#/components/requestBodies/GeoJsonFeatureCollection'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TsLegacy'\n        '400':\n          description: Invalid query parameters\n        '500':\n          description: Unexpected error.\n\n  ########################################################################################\n  # Places (PRELIMINARY \u0026 UNSTABLE - will be revised soon)\n  ########################################################################################\n\n  '/places':\n    get:\n      tags:\n        - places\n      summary: Get all place groups\n      operationId: getPlaceGroups\n      description: |\n        Gets a list of references to all available place groups.\n      responses:\n        '200':\n          $ref: '#/components/responses/PlaceGroupInfos'\n\n  '/places/{collection}':\n    get:\n      tags:\n        - places\n      summary: Find places\n      operationId: findPlaces\n      description: |\n        Find all places in given collection matching the given geometry and/or query expression.\n        The collection named \"all\" represents all available places.\n        Only one of \"bounds\" or \"geom\" parameters may be given to specify the query geometry.\n        Returns a GeoJSON FeatureCollection which may be empty.\n\n      parameters:\n        - $ref: '#/components/parameters/collection'\n        - $ref: '#/components/parameters/bounds'\n        - $ref: '#/components/parameters/geom'\n        - $ref: '#/components/parameters/expr'\n        - $ref: '#/components/parameters/comb'\n      responses:\n        '200':\n          $ref: '#/components/responses/GeoJsonFeatureCollection'\n        '404':\n          description: Resource not found.\n    post:\n      tags:\n        - places\n      summary: Find places\n      operationId: findPlacesForGeoJSON\n      description: |\n        Find places in given collection matching the query expression and/or the geometry passed as a GeoJSON request.\n        The collection named \"all\" represents all available places.\n        If a GeoJSON FeatureCollection object is passed, only the first feature's geometry is used.\n        Only one of \"bounds\" or \"geom\" parameters may be given to specify the query geometry.\n        Returns a GeoJSON FeatureCollection which may be empty.\n      parameters:\n        - $ref: '#/components/parameters/collection'\n        - $ref: '#/components/parameters/expr'\n        - $ref: '#/components/parameters/comb'\n      requestBody:\n        $ref: '#/components/requestBodies/GeoJsonObject'\n      responses:\n        '200':\n          $ref: '#/components/responses/GeoJsonFeatureCollection'\n\n  '/places/{collection}/{dataset}':\n    get:\n      tags:\n        - places\n      summary: Find places for dataset\n      operationId: findPlacesForDataset\n      description: |\n        Find all places in given collection matching the given geometry and/or query expression.\n        The collection named \"all\" represents all available places.\n        Only one of \"bounds\" or \"geom\" parameters may be given to specify the query geometry.\n        Returns a FeatureCollection which may be empty.\n\n      parameters:\n        - $ref: '#/components/parameters/collection'\n        - $ref: '#/components/parameters/dataset'\n        - $ref: '#/components/parameters/expr'\n        - $ref: '#/components/parameters/comb'\n      responses:\n        '200':\n          $ref: '#/components/responses/GeoJsonFeatureCollection'\n        '404':\n          description: Resource not found.\n\ncomponents:\n  parameters:\n    collection:\n      name: collection\n      in: path\n      description: Place collection name.\n      required: true\n      schema:\n        type: string\n    dataset:\n      name: dataset\n      in: path\n      description: Dataset name.\n      required: true\n      schema:\n        type: string\n    variable:\n      name: variable\n      in: path\n      description: Variable name.\n      required: true\n      schema:\n        type: string\n    dim:\n      name: dim\n      in: path\n      description: Dimension name.\n      required: true\n      schema:\n        type: string\n    z:\n      name: z\n      in: path\n      description: Resolution level.\n      required: true\n      schema:\n        type: number\n        format: int32\n    y:\n      name: y\n      in: path\n      description: Spatial tile index in vertical direction.\n      required: true\n      schema:\n        type: number\n        format: int32\n    x:\n      name: x\n      in: path\n      description: Spatial tile index in horizontal direction.\n      required: true\n      schema:\n        type: number\n        format: int32\n    expr:\n      name: expr\n      in: query\n      description: |\n        Query expression. May comprise any search terms.\n        To search for specific fields, use the filed name as prefix followed by a colon, e.g. \"NAME:*Lake\".\n      required: false\n      schema:\n        type: string\n    bounds:\n      name: bounds\n      in: query\n      description: Bounding box given as xmin,ymin,xmax,ymax.\n      required: false\n      schema:\n        type: array\n        minItems: 4\n        maxItems: 4\n        items:\n          type: number\n    geom:\n      name: geom\n      in: query\n      description: Geometry WKT string.\n      required: false\n      schema:\n        type: string\n    comb:\n      name: comb\n      in: query\n      description: Combination operation to be applied if multiple search criteria are given.\n      required: false\n      schema:\n        type: string\n        default: \"and\"\n        enum: [\"and\", \"or\"]\n    lat:\n      name: lat\n      in: query\n      description: A latitude.\n      required: true\n      schema:\n        type: number\n        format: double\n        minimum: -90.0\n        maximum: 90.0\n    lon:\n      name: lon\n      in: query\n      description: A longitude.\n      required: true\n      schema:\n        type: number\n        format: double\n        minimum: -180.0\n        maximum: 180.0\n    startDate:\n      name: startDate\n      in: query\n      description: minimum date of the time series, following schema yyyy-MM-dd (inclusive).\n      required: false\n      schema:\n        type: string\n      example: 1970-01-01\n    endDate:\n      name: endDate\n      in: query\n      description: maximum date of the time series, following schema yyyy-MM-dd (inclusive).\n      required: false\n      schema:\n        type: string\n      example: 2099-01-01\n    maxValids:\n      name: maxValids\n      in: query\n      description: maximum number of valid (non-NaN) values in the result; if -1, only valid values are returned.\n      required: false\n      schema:\n        type: integer\n      example: 2099-01-01\n    datasetDetails:\n      name: details\n      in: query\n      description: Wheather to load also the details of a dataset, which usually takes more time.\n      required: false\n      schema:\n        type: boolean\n      example: 1\n    tileClient:\n      name: tiles\n      in: query\n      description: |\n          Controls, how the tile grid is described w.r.t. the target tile client.\n          May be \"ol4\" for OpenLayers 4.x or \"cesium\" for the Cesium 3D Globe client.\n      required: false\n      schema:\n        type: string\n      example: ol4\n    pointCoord:\n      name: point\n      in: query\n      description: |\n          Point coordinates given in decimal degree. Used as filter.\n      required: false\n      schema:\n        type: string\n      example: 12.1,53.2\n  schemas:\n    PlaceGroupInfo:\n      type: object\n      required:\n        - name\n        - title\n      properties:\n        name:\n          type: string\n        title:\n          type: string\n        bbox:\n          $ref: '#/components/schemas/BoundingBox'\n    PlaceGroups:\n      type: array\n      required:\n        - name\n        - title\n      properties:\n        name:\n          type: string\n        title:\n          type: string\n        bbox:\n          $ref: '#/components/schemas/GeoJsonFeatureCollection'\n    DatasetInfo:\n      type: object\n      required:\n        - name\n        - title\n      properties:\n        name:\n          type: string\n        title:\n          type: string\n        bbox:\n          $ref: '#/components/schemas/BoundingBox'\n        variables:\n          type: array\n          items:\n            $ref: '#/components/schemas/VariableInfo'\n        dimensions:\n          type: array\n          items:\n            $ref: '#/components/schemas/DimensionInfo'\n        placeGroups:\n          type: array\n          items:\n            $ref: '#/components/schemas/PlaceGroups'\n    VariableInfo:\n      type: object\n      required:\n        - id\n        - name\n        - dims\n        - shape\n        - dtype\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        title:\n          type: string\n        dtype:\n          type: string\n        units:\n          type: string\n        dims:\n          type: array\n          items:\n            type: string\n        shape:\n          type: array\n          items:\n            type: number\n        tileSourceOptions:\n          oneOf:\n            - $ref: '#/components/schemas/OL4TileSchema'\n            - $ref: '#/components/schemas/CesiumTileGrid'\n    DimensionInfo:\n      type: object\n      required:\n        - name\n        - size\n        - dtype\n        - coordinates\n      properties:\n        name:\n          type: string\n        size:\n          type: integer\n        dtype:\n          type: string\n        units:\n          type: string\n        coordinates:\n          type: array\n          items:\n            type: number\n    DatasetsRefs:\n      type: object\n      properties:\n        datasets:\n          type: array\n          items:\n            $ref: '#/components/schemas/DatasetRef'\n    DatasetRef:\n      type: object\n      properties:\n        name:\n          type: string\n        title:\n          type: string\n    CesiumTileGrid:\n      type: object\n      properties:\n        url:\n          type: string\n        rectangle:\n          $ref: '#/components/schemas/CesiumRectangle'\n        minimumLevel:\n          type: number\n        maximumLevel:\n          type: number\n        tileWidth:\n          type: number\n        tileHeight:\n          type: number\n        tilingScheme:\n          $ref: '#/components/schemas/CesiumTilingScheme'\n    CesiumTilingScheme:\n      type: object\n      properties:\n        rectangle:\n          $ref: '#/components/schemas/CesiumRectangle'\n        numberOfLevelZeroTilesX:\n          type: number\n        numberOfLevelZeroTilesY:\n          type: number\n    CesiumRectangle:\n      type: object\n      properties:\n        west:\n          type: number\n        south:\n          type: number\n        east:\n          type: number\n        north:\n          type: number\n    OL4TileSchema:\n      type: object\n      properties:\n        url:\n          type: string\n        projection:\n          type: string\n        minZoom:\n          type: number\n        maxZoom:\n          type: number\n        tileGrid:\n          $ref: '#/components/schemas/OL4TileGrid'\n    OL4TileGrid:\n      type: object\n      properties:\n        extent:\n          type: array\n          minItems: 4\n          maxItems: 4\n          items:\n            type: number\n            format: float64\n        origin:\n          type: array\n          minItems: 2\n          maxItems: 2\n          items:\n            type: number\n            format: float64\n        tileSize:\n          type: array\n          minItems: 2\n          maxItems: 2\n          items:\n            type: number\n            format: int32\n        resolutions:\n          type: array\n          minItems: 1\n          items:\n            type: number\n            format: float64\n    BoundingBox:\n      description: \"Bounding box given as [lon_min, lat_min, lon_max, lat_max]\"\n      type: array\n      minItems: 4\n      maxItems: 4\n      items:\n        type: number\n    GeoJsonObject:\n      description: \"GeoJSON object according to RFC 7946 Section 3\"\n      type: object\n      required:\n        - type\n      properties:\n        type:\n          type: string\n        bbox:\n          $ref: '#/components/schemas/BoundingBox'\n      additionalProperties: true\n    GeoJsonGeometry:\n      description: \"GeoJSON geometry object according to RFC 7946 Section 3.1\"\n      allOf:\n      - $ref: '#/components/schemas/GeoJsonObject'\n      - type: object\n        required:\n          - type\n        properties:\n          type:\n            type: string\n            enum: [\"Point\", \"MultiPoint\", \"LineString\", \"MultiLineString\", \"Polygon\", \"MultiPolygon\", \"GeometryCollection\"]\n    GeoJsonGeometryCollection:\n      description: \"GeoJSON geometry collection object according to RFC 7946 Section 3.1.8\"\n      allOf:\n      - $ref: '#/components/schemas/GeoJsonGeometry'\n      - type: object\n        required:\n          - type\n          - geometries\n        properties:\n          type:\n            type: string\n            enum: [\"GeometryCollection\"]\n          geometries:\n            type: array\n            items:\n              $ref: '#/components/schemas/GeoJsonGeometry'\n    GeoJsonFeature:\n      description: \"GeoJSON feature collection according to RFC 7946 Section 3.2\"\n      allOf:\n      - $ref: '#/components/schemas/GeoJsonObject'\n      - type: object\n        required:\n          - type\n          - geometry\n        properties:\n          type:\n            type: string\n            enum: [\"Feature\"]\n          geometry:\n            $ref: '#/components/schemas/GeoJsonGeometry'\n    GeoJsonFeatureCollection:\n      description: \"GeoJSON feature collection according to RFC 7946 Section 3.3\"\n      allOf:\n      - $ref: '#/components/schemas/GeoJsonObject'\n      - type: object\n        required:\n          - type\n          - features\n        properties:\n          type:\n            type: string\n            enum: [\"FeatureCollection\"]\n          features:\n            type: array\n            minItems: 0\n            items:\n              $ref: '#/components/schemas/GeoJsonFeature'\n    TimeSeriesResponse:\n      type: object\n      properties:\n        result:\n          type: array\n          items:\n            $ref: '#/components/schemas/TimeSeries'\n    TimeSeries:\n      type: object\n      properties:\n        result:\n          type: array\n          minItems: 0\n          items:\n            $ref: '#/components/schemas/TimeSeriesValue'\n    TimeSeriesValue:\n      type: object\n      required:\n        - time\n      properties:\n        time:\n          type: string\n          example: 1970-01-01T10:30:24Z\n        count:\n          type: number\n          format: int64\n          minimum: 0\n        countTot:\n          type: number\n          format: int64\n          minimum: 0\n        mean:\n          type: number\n          format: double\n        std:\n          type: number\n          format: double\n        median:\n          type: number\n          format: double\n        min:\n          type: number\n          format: double\n        max:\n          type: number\n          format: double\n    TsLegacyInfo:\n      type: object\n      properties:\n        layers:\n          type: array\n          items:\n            $ref: '#/components/schemas/TsLegacyVariableInfo'\n    TsLegacyVariableInfo:\n      type: object\n      properties:\n        name:\n          type: string\n        dates:\n          type: array\n          items:\n            type: string\n        bounds:\n          type: object\n          properties:\n            xmin:\n              type: number\n              format: double\n            ymin:\n              type: number\n              format: double\n            xmax:\n              type: number\n              format: double\n            ymax:\n              type: number\n              format: double\n    TsLegacy:\n      type: object\n      properties:\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/TsLegacyEntry'\n    TsLegacyEntry:\n      type: object\n      properties:\n        result:\n          $ref: '#/components/schemas/TsLegacyResult'\n        date:\n          type: string\n    TsLegacyResult:\n      type: object\n      properties:\n        totalCount:\n          type: integer\n          format: int32\n          minimum: 0\n        validCount:\n          type: integer\n          format: int32\n          minimum: 0\n        average:\n          type: number\n          format: double\n  requestBodies:\n    GeoJsonObject:\n      description: GeoJSON FeatureCollection\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeoJsonObject'\n    GeoJsonGeometry:\n      description: GeoJSON Geometry\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeoJsonGeometry'\n    GeoJsonGeometryCollection:\n      description: GeoJSON Geometry Collection\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeoJsonGeometryCollection'\n    GeoJsonFeature:\n      description: GeoJSON Feature\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeoJsonFeature'\n    GeoJsonFeatureCollection:\n      description: GeoJSON Feature Collection\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeoJsonFeatureCollection'\n  responses:\n    PlaceGroupInfos:\n      description: Meta-information for each place group\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/PlaceGroupInfo'\n    GeoJsonFeatureCollection:\n      description: GeoJSON FeatureCollection\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeoJsonFeatureCollection'\n",
			"canonicalURL": "/github.com/dcs4cop/xcube@2e7779c3357781e6376d858edfbcb5cff7ce62ea/-/blob/xcube/webapi/res/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/dcs4cop/xcube/blob/2e7779c3357781e6376d858edfbcb5cff7ce62ea/xcube/webapi/res/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/datasets/{dataset}/vars/{variable}/tiles/{z}/{x}/{y}.png\": get: operation \"getDatasetVariableTile\": parameters: parse parameter \"\": at 1:15006: can't find value for \"components/parameters/y\""
}