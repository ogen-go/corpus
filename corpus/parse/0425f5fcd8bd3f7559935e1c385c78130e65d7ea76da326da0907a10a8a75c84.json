{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/algolia/cli"
		},
		"file": {
			"name": "search.yml",
			"size": 0,
			"path": "api/specs/search.yml",
			"byteSize": 150439,
			"content": "openapi: 3.0.2\ninfo:\n  title: Search API\n  description: API powering the Search feature of Algolia.\n  version: 1.0.0\ncomponents:\n  securitySchemes:\n    appId:\n      type: apiKey\n      in: header\n      name: X-Algolia-Application-Id\n    apiKey:\n      type: apiKey\n      in: header\n      name: X-Algolia-API-Key\n  parameters:\n    PathInPath:\n      name: path\n      in: path\n      description: \u003e-\n        The path of the API endpoint to target, anything after the /1 needs to\n        be specified.\n      required: true\n      schema:\n        type: string\n        example: /keys\n    Parameters:\n      name: parameters\n      in: query\n      description: Query parameters to be applied to the current query.\n      schema:\n        type: object\n        additionalProperties: true\n    IndexName:\n      name: indexName\n      in: path\n      description: The index in which to perform the request.\n      required: true\n      schema:\n        type: string\n        example: myIndexName\n    ObjectID:\n      name: objectID\n      in: path\n      description: Unique identifier of an object.\n      required: true\n      schema:\n        type: string\n        example: '123'\n    ForwardToReplicas:\n      in: query\n      name: forwardToReplicas\n      description: \u003e-\n        When true, changes are also propagated to replicas of the given\n        indexName.\n      schema:\n        type: boolean\n    ReplaceExistingSynonyms:\n      in: query\n      name: replaceExistingSynonyms\n      schema:\n        type: boolean\n      description: Replace all synonyms of the index with the ones sent with this request.\n    Query:\n      in: query\n      name: query\n      description: Search for specific synonyms matching this string.\n      schema:\n        type: string\n        default: ''\n    Type:\n      in: query\n      name: type\n      description: Only search for specific types of synonyms.\n      schema:\n        $ref: '#/components/schemas/SynonymType'\n    PageDefault0:\n      in: query\n      name: page\n      description: \u003e-\n        Requested page (zero-based). When specified, will retrieve a specific\n        page; the page size is implicitly set to 100. When null, will retrieve\n        all indices (no pagination).\n      schema:\n        type: integer\n        nullable: true\n        default: 0\n    HitsPerPage:\n      in: query\n      name: hitsPerPage\n      description: Maximum number of objects to retrieve.\n      schema:\n        type: integer\n        default: 100\n    KeyString:\n      in: path\n      name: key\n      required: true\n      schema:\n        type: string\n        example: myAPIKey\n      description: API Key string.\n    ClearExistingRules:\n      in: query\n      name: clearExistingRules\n      required: false\n      schema:\n        type: boolean\n      description: \u003e-\n        When true, existing Rules are cleared before adding this batch. When\n        false, existing Rules are kept.\n    DictionaryName:\n      in: path\n      name: dictionaryName\n      description: The dictionary to search in.\n      required: true\n      schema:\n        $ref: '#/components/schemas/dictionaryType'\n    Page:\n      in: query\n      name: page\n      description: \u003e-\n        Requested page (zero-based). When specified, will retrieve a specific\n        page; the page size is implicitly set to 100. When null, will retrieve\n        all indices (no pagination).\n      schema:\n        type: integer\n        nullable: true\n        default: null\n    UserIDInHeader:\n      name: X-Algolia-User-ID\n      description: userID to assign.\n      in: header\n      required: true\n      schema:\n        type: string\n        pattern: ^[a-zA-Z0-9 \\-*.]+$\n    UserIDInPath:\n      name: userID\n      description: userID to assign.\n      in: path\n      required: true\n      schema:\n        type: string\n        pattern: ^[a-zA-Z0-9 \\-*.]+$\n  schemas:\n    ErrorBase:\n      description: Error.\n      type: object\n      additionalProperties: true\n      properties:\n        message:\n          type: string\n          example: Invalid Application-Id or API-Key\n    paramsAsString:\n      description: Search parameters as URL-encoded query string.\n      type: string\n      default: ''\n    searchParamsString:\n      type: object\n      additionalProperties: false\n      properties:\n        params:\n          $ref: '#/components/schemas/paramsAsString'\n    query:\n      type: string\n      description: The text to search in the index.\n      default: ''\n      x-categories:\n        - Search\n    searchFiltersArrayString:\n      type: array\n      items:\n        type: string\n    searchFiltersNestedArrayString:\n      type: array\n      items:\n        type: array\n        items:\n          type: string\n    facetFilters:\n      description: Filter hits by facet value.\n      oneOf:\n        - $ref: '#/components/schemas/searchFiltersArrayString'\n        - $ref: '#/components/schemas/searchFiltersNestedArrayString'\n      x-categories:\n        - Filtering\n    optionalFilters:\n      description: \u003e-\n        Create filters for ranking purposes, where records that match the filter\n        are ranked higher, or lower in the case of a negative optional filter.\n      oneOf:\n        - $ref: '#/components/schemas/searchFiltersArrayString'\n        - $ref: '#/components/schemas/searchFiltersNestedArrayString'\n      x-categories:\n        - Filtering\n    numericFilters:\n      description: Filter on numeric attributes.\n      oneOf:\n        - $ref: '#/components/schemas/searchFiltersArrayString'\n        - $ref: '#/components/schemas/searchFiltersNestedArrayString'\n      x-categories:\n        - Filtering\n    tagFilters:\n      description: Filter hits by tags.\n      oneOf:\n        - $ref: '#/components/schemas/searchFiltersArrayString'\n        - $ref: '#/components/schemas/searchFiltersNestedArrayString'\n      x-categories:\n        - Filtering\n    page:\n      type: integer\n      description: Specify the page to retrieve.\n      default: 0\n      x-categories:\n        - Pagination\n    aroundRadiusAll:\n      type: string\n      enum:\n        - all\n    aroundRadius:\n      description: Define the maximum radius for a geo search (in meters).\n      oneOf:\n        - type: integer\n          minimum: 1\n        - $ref: '#/components/schemas/aroundRadiusAll'\n      x-categories:\n        - Geo-Search\n    reRankingApplyFilter:\n      description: \u003e-\n        When Dynamic Re-Ranking is enabled, only records that match these\n        filters will be impacted by Dynamic Re-Ranking.\n      oneOf:\n        - $ref: '#/components/schemas/searchFiltersArrayString'\n        - $ref: '#/components/schemas/searchFiltersNestedArrayString'\n      x-categories:\n        - Advanced\n    baseSearchParams:\n      type: object\n      additionalProperties: false\n      properties:\n        query:\n          $ref: '#/components/schemas/query'\n        similarQuery:\n          type: string\n          description: \u003e-\n            Overrides the query parameter and performs a more generic search\n            that can be used to find \"similar\" results.\n          default: ''\n          x-categories:\n            - Search\n        filters:\n          type: string\n          description: Filter the query with numeric, facet and/or tag filters.\n          default: ''\n          x-categories:\n            - Filtering\n        facetFilters:\n          $ref: '#/components/schemas/facetFilters'\n        optionalFilters:\n          $ref: '#/components/schemas/optionalFilters'\n        numericFilters:\n          $ref: '#/components/schemas/numericFilters'\n        tagFilters:\n          $ref: '#/components/schemas/tagFilters'\n        sumOrFiltersScores:\n          type: boolean\n          description: Determines how to calculate the total score for filtering.\n          default: false\n          x-categories:\n            - Filtering\n        facets:\n          type: array\n          items:\n            type: string\n          description: Retrieve facets and their facet values.\n          default: []\n          x-categories:\n            - Faceting\n        maxValuesPerFacet:\n          type: integer\n          description: \u003e-\n            Maximum number of facet values to return for each facet during a\n            regular search.\n          default: 100\n          x-categories:\n            - Faceting\n        facetingAfterDistinct:\n          type: boolean\n          description: \u003e-\n            Force faceting to be applied after de-duplication (via the Distinct\n            setting).\n          default: false\n          x-categories:\n            - Faceting\n        sortFacetValuesBy:\n          type: string\n          description: Controls how facet values are fetched.\n          default: count\n          x-categories:\n            - Faceting\n        page:\n          $ref: '#/components/schemas/page'\n        offset:\n          type: integer\n          description: Specify the offset of the first hit to return.\n          x-categories:\n            - Pagination\n        length:\n          type: integer\n          description: Set the number of hits to retrieve (used only with offset).\n          minimum: 1\n          maximum: 1000\n          x-categories:\n            - Pagination\n        aroundLatLng:\n          type: string\n          description: \u003e-\n            Search for entries around a central geolocation, enabling a geo\n            search within a circular area.\n          default: ''\n          x-categories:\n            - Geo-Search\n        aroundLatLngViaIP:\n          type: boolean\n          description: \u003e-\n            Search for entries around a given location automatically computed\n            from the requester's IP address.\n          default: false\n          x-categories:\n            - Geo-Search\n        aroundRadius:\n          $ref: '#/components/schemas/aroundRadius'\n        aroundPrecision:\n          type: integer\n          description: \u003e-\n            Precision of geo search (in meters), to add grouping by geo location\n            to the ranking formula.\n          default: 10\n          x-categories:\n            - Geo-Search\n        minimumAroundRadius:\n          type: integer\n          description: \u003e-\n            Minimum radius (in meters) used for a geo search when aroundRadius\n            is not set.\n          minimum: 1\n          x-categories:\n            - Geo-Search\n        insideBoundingBox:\n          type: array\n          items:\n            type: number\n            format: double\n          description: Search inside a rectangular area (in geo coordinates).\n          x-categories:\n            - Geo-Search\n        insidePolygon:\n          type: array\n          items:\n            type: number\n            format: double\n          description: Search inside a polygon (in geo coordinates).\n          x-categories:\n            - Geo-Search\n        naturalLanguages:\n          type: array\n          items:\n            type: string\n          description: \u003e-\n            This parameter changes the default values of certain parameters and\n            settings that work best for a natural language query, such as\n            ignorePlurals, removeStopWords, removeWordsIfNoResults,\n            analyticsTags and ruleContexts. These parameters and settings work\n            well together when the query is formatted in natural language\n            instead of keywords, for example when your user performs a voice\n            search.\n          default: []\n          x-categories:\n            - Languages\n        ruleContexts:\n          type: array\n          items:\n            type: string\n          description: Enables contextual rules.\n          default: []\n          x-categories:\n            - Rules\n        personalizationImpact:\n          type: integer\n          description: Define the impact of the Personalization feature.\n          default: 100\n          x-categories:\n            - Personalization\n        userToken:\n          type: string\n          description: Associates a certain user token with the current search.\n          x-categories:\n            - Personalization\n        getRankingInfo:\n          type: boolean\n          description: Retrieve detailed ranking information.\n          default: false\n          x-categories:\n            - Advanced\n        clickAnalytics:\n          type: boolean\n          description: Enable the Click Analytics feature.\n          default: false\n          x-categories:\n            - Analytics\n        analytics:\n          type: boolean\n          description: \u003e-\n            Whether the current query will be taken into account in the\n            Analytics.\n          default: true\n          x-categories:\n            - Analytics\n        analyticsTags:\n          type: array\n          items:\n            type: string\n          description: List of tags to apply to the query for analytics purposes.\n          default: []\n          x-categories:\n            - Analytics\n        percentileComputation:\n          type: boolean\n          description: \u003e-\n            Whether to include or exclude a query from the processing-time\n            percentile computation.\n          default: true\n          x-categories:\n            - Advanced\n        enableABTest:\n          type: boolean\n          description: Whether this search should participate in running AB tests.\n          default: true\n          x-categories:\n            - Advanced\n        enableReRanking:\n          type: boolean\n          description: Whether this search should use AI Re-Ranking.\n          default: true\n          x-categories:\n            - Advanced\n        reRankingApplyFilter:\n          $ref: '#/components/schemas/reRankingApplyFilter'\n    hitsPerPage:\n      type: integer\n      description: Set the number of hits per page.\n      default: 20\n      x-categories:\n        - Pagination\n    typoToleranceEnum:\n      type: string\n      enum:\n        - min\n        - strict\n    typoTolerance:\n      description: Controls whether typo tolerance is enabled and how it is applied.\n      oneOf:\n        - type: boolean\n          default: true\n        - $ref: '#/components/schemas/typoToleranceEnum'\n      x-categories:\n        - Typos\n    ignorePlurals:\n      description: \u003e\n        Treats singular, plurals, and other forms of declensions as matching\n        terms.\n\n        ignorePlurals is used in conjunction with the queryLanguages setting.\n\n        list: language ISO codes for which ignoring plurals should be enabled.\n        This list will override any values that you may have set in\n        queryLanguages. true: enables the ignore plurals functionality, where\n        singulars and plurals are considered equivalent (foot = feet). The\n        languages supported here are either every language (this is the default,\n        see list of languages below), or those set by queryLanguages. false:\n        disables ignore plurals, where singulars and plurals are not considered\n        the same for matching purposes (foot will not find feet).\n      oneOf:\n        - type: array\n          items:\n            type: string\n        - type: boolean\n          default: false\n      x-categories:\n        - Languages\n    removeStopWords:\n      description: \u003e\n        Removes stop (common) words from the query before executing it.\n\n        removeStopWords is used in conjunction with the queryLanguages setting.\n\n        list: language ISO codes for which ignoring plurals should be enabled.\n        This list will override any values that you may have set in\n        queryLanguages. true: enables the stop word functionality, ensuring that\n        stop words are removed from consideration in a search. The languages\n        supported here are either every language, or those set by\n        queryLanguages. false: disables stop word functionality, allowing stop\n        words to be taken into account in a search.\n      oneOf:\n        - type: array\n          items:\n            type: string\n        - type: boolean\n          default: false\n      x-categories:\n        - Languages\n    queryType:\n      type: string\n      enum:\n        - prefixLast\n        - prefixAll\n        - prefixNone\n      description: Controls if and how query words are interpreted as prefixes.\n      default: prefixLast\n      x-categories:\n        - Query strategy\n    removeWordsIfNoResults:\n      type: string\n      enum:\n        - none\n        - lastWords\n        - firstWords\n        - allOptional\n      description: \u003e-\n        Selects a strategy to remove words from the query when it doesn't match\n        any hits.\n      default: none\n      x-categories:\n        - Query strategy\n    exactOnSingleWordQuery:\n      type: string\n      enum:\n        - attribute\n        - none\n        - word\n      description: \u003e-\n        Controls how the exact ranking criterion is computed when the query\n        contains only one word.\n      default: attribute\n      x-categories:\n        - Query strategy\n    alternativesAsExact:\n      type: string\n      enum:\n        - ignorePlurals\n        - singleWordSynonym\n        - multiWordsSynonym\n      x-categories:\n        - Query strategy\n    advancedSyntaxFeatures:\n      type: string\n      enum:\n        - exactPhrase\n        - excludeWords\n      x-categories:\n        - Query strategy\n    maxFacetHits:\n      type: integer\n      description: \u003e-\n        Maximum number of facet hits to return during a search for facet values.\n        For performance reasons, the maximum allowed number of returned values\n        is 100.\n      maximum: 100\n      default: 10\n      x-categories:\n        - Advanced\n    order:\n      description: Pinned order of facet lists.\n      type: array\n      items:\n        type: string\n    facets:\n      description: The ordering of facets (widgets).\n      type: object\n      additionalProperties: false\n      properties:\n        order:\n          $ref: '#/components/schemas/order'\n    sortRemainingBy:\n      description: |\n        How to display the remaining items.\n          - `count`: facet count (descending).\n          - `alpha`: alphabetical (ascending).\n          - `hidden`: show only pinned values.\n      type: string\n      enum:\n        - count\n        - alpha\n        - hidden\n    value:\n      type: object\n      additionalProperties: false\n      properties:\n        order:\n          $ref: '#/components/schemas/order'\n        sortRemainingBy:\n          $ref: '#/components/schemas/sortRemainingBy'\n    values:\n      description: The ordering of facet values, within an individual list.\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/value'\n    facetOrdering:\n      description: Defining how facets should be ordered.\n      type: object\n      additionalProperties: false\n      properties:\n        facets:\n          $ref: '#/components/schemas/facets'\n        values:\n          $ref: '#/components/schemas/values'\n    renderingContent:\n      description: \u003e-\n        Content defining how the search interface should be rendered. Can be set\n        via the settings for a default value and can be overridden via rules.\n      type: object\n      additionalProperties: false\n      properties:\n        facetOrdering:\n          $ref: '#/components/schemas/facetOrdering'\n      x-categories:\n        - Advanced\n    indexSettingsAsSearchParams:\n      type: object\n      additionalProperties: false\n      properties:\n        attributesForFaceting:\n          type: array\n          items:\n            type: string\n          description: The complete list of attributes that will be used for faceting.\n          default: []\n          x-categories:\n            - Faceting\n        unretrievableAttributes:\n          type: array\n          items:\n            type: string\n          description: List of attributes that can't be retrieved at query time.\n          default: []\n          x-categories:\n            - Attributes\n        attributesToRetrieve:\n          type: array\n          items:\n            type: string\n          description: \u003e-\n            This parameter controls which attributes to retrieve and which not\n            to retrieve.\n          default:\n            - '*'\n          x-categories:\n            - Attributes\n        restrictSearchableAttributes:\n          type: array\n          items:\n            type: string\n          description: \u003e-\n            Restricts a given query to look in only a subset of your searchable\n            attributes.\n          default: []\n          x-categories:\n            - Attributes\n        ranking:\n          type: array\n          items:\n            type: string\n          description: Controls how Algolia should sort your results.\n          default:\n            - typo\n            - geo\n            - words\n            - filters\n            - proximity\n            - attribute\n            - exact\n            - custom\n          x-categories:\n            - Ranking\n        customRanking:\n          type: array\n          items:\n            type: string\n          description: Specifies the custom ranking criterion.\n          default: []\n          x-categories:\n            - Ranking\n        relevancyStrictness:\n          type: integer\n          description: \u003e-\n            Controls the relevancy threshold below which less relevant results\n            aren't included in the results.\n          default: 100\n          x-categories:\n            - Ranking\n        attributesToHighlight:\n          type: array\n          items:\n            type: string\n          description: List of attributes to highlight.\n          x-categories:\n            - Highlighting/Snippeting\n        attributesToSnippet:\n          type: array\n          items:\n            type: string\n          description: \u003e-\n            List of attributes to snippet, with an optional maximum number of\n            words to snippet.\n          default: []\n          x-categories:\n            - Highlighting/Snippeting\n        highlightPreTag:\n          type: string\n          description: \u003e-\n            The HTML string to insert before the highlighted parts in all\n            highlight and snippet results.\n          default: \u003cem\u003e\n          x-categories:\n            - Highlighting/Snippeting\n        highlightPostTag:\n          type: string\n          description: \u003e-\n            The HTML string to insert after the highlighted parts in all\n            highlight and snippet results.\n          default: \u003c/em\u003e\n          x-categories:\n            - Highlighting/Snippeting\n        snippetEllipsisText:\n          type: string\n          description: String used as an ellipsis indicator when a snippet is truncated.\n          default: …\n          x-categories:\n            - Highlighting/Snippeting\n        restrictHighlightAndSnippetArrays:\n          type: boolean\n          description: \u003e-\n            Restrict highlighting and snippeting to items that matched the\n            query.\n          default: false\n          x-categories:\n            - Highlighting/Snippeting\n        hitsPerPage:\n          $ref: '#/components/schemas/hitsPerPage'\n        minWordSizefor1Typo:\n          type: integer\n          description: \u003e-\n            Minimum number of characters a word in the query string must contain\n            to accept matches with 1 typo.\n          default: 4\n          x-categories:\n            - Typos\n        minWordSizefor2Typos:\n          type: integer\n          description: \u003e-\n            Minimum number of characters a word in the query string must contain\n            to accept matches with 2 typos.\n          default: 8\n          x-categories:\n            - Typos\n        typoTolerance:\n          $ref: '#/components/schemas/typoTolerance'\n        allowTyposOnNumericTokens:\n          type: boolean\n          description: \u003e-\n            Whether to allow typos on numbers (\"numeric tokens\") in the query\n            string.\n          default: true\n          x-categories:\n            - Typos\n        disableTypoToleranceOnAttributes:\n          type: array\n          items:\n            type: string\n          description: List of attributes on which you want to disable typo tolerance.\n          default: []\n          x-categories:\n            - Typos\n        ignorePlurals:\n          $ref: '#/components/schemas/ignorePlurals'\n        removeStopWords:\n          $ref: '#/components/schemas/removeStopWords'\n        keepDiacriticsOnCharacters:\n          type: string\n          description: \u003e-\n            List of characters that the engine shouldn't automatically\n            normalize.\n          default: ''\n          x-categories:\n            - Languages\n        queryLanguages:\n          type: array\n          items:\n            type: string\n          description: \u003e-\n            Sets the languages to be used by language-specific settings and\n            functionalities such as ignorePlurals, removeStopWords, and CJK\n            word-detection.\n          default: []\n          x-categories:\n            - Languages\n        decompoundQuery:\n          type: boolean\n          description: Splits compound words into their composing atoms in the query.\n          default: true\n          x-categories:\n            - Languages\n        enableRules:\n          type: boolean\n          description: Whether Rules should be globally enabled.\n          default: true\n          x-categories:\n            - Rules\n        enablePersonalization:\n          type: boolean\n          description: Enable the Personalization feature.\n          default: false\n          x-categories:\n            - Personalization\n        queryType:\n          $ref: '#/components/schemas/queryType'\n        removeWordsIfNoResults:\n          $ref: '#/components/schemas/removeWordsIfNoResults'\n        advancedSyntax:\n          type: boolean\n          description: Enables the advanced query syntax.\n          default: false\n          x-categories:\n            - Query strategy\n        optionalWords:\n          type: array\n          items:\n            type: string\n          description: \u003e-\n            A list of words that should be considered as optional when found in\n            the query.\n          default: []\n          x-categories:\n            - Query strategy\n        disableExactOnAttributes:\n          type: array\n          items:\n            type: string\n          description: \u003e-\n            List of attributes on which you want to disable the exact ranking\n            criterion.\n          default: []\n          x-categories:\n            - Query strategy\n        exactOnSingleWordQuery:\n          $ref: '#/components/schemas/exactOnSingleWordQuery'\n        alternativesAsExact:\n          type: array\n          items:\n            $ref: '#/components/schemas/alternativesAsExact'\n          description: \u003e-\n            List of alternatives that should be considered an exact match by the\n            exact ranking criterion.\n          default:\n            - ignorePlurals\n            - singleWordSynonym\n          x-categories:\n            - Query strategy\n        advancedSyntaxFeatures:\n          type: array\n          items:\n            $ref: '#/components/schemas/advancedSyntaxFeatures'\n          description: \u003e-\n            Allows you to specify which advanced syntax features are active when\n            ‘advancedSyntax' is enabled.\n          default:\n            - exactPhrase\n            - excludeWords\n          x-categories:\n            - Query strategy\n        distinct:\n          type: integer\n          minimum: 0\n          maximum: 4\n          description: Enables de-duplication or grouping of results.\n          default: 0\n          x-categories:\n            - Advanced\n        synonyms:\n          type: boolean\n          description: \u003e-\n            Whether to take into account an index's synonyms for a particular\n            search.\n          default: true\n          x-categories:\n            - Advanced\n        replaceSynonymsInHighlight:\n          type: boolean\n          description: \u003e-\n            Whether to highlight and snippet the original word that matches the\n            synonym or the synonym itself.\n          default: false\n          x-categories:\n            - Highlighting/Snippeting\n        minProximity:\n          type: integer\n          minimum: 1\n          maximum: 7\n          description: Precision of the proximity ranking criterion.\n          default: 1\n          x-categories:\n            - Advanced\n        responseFields:\n          type: array\n          items:\n            type: string\n          description: \u003e-\n            Choose which fields to return in the API response. This parameters\n            applies to search and browse queries.\n          default: []\n          x-categories:\n            - Advanced\n        maxFacetHits:\n          $ref: '#/components/schemas/maxFacetHits'\n        attributeCriteriaComputedByMinProximity:\n          type: boolean\n          description: \u003e-\n            When attribute is ranked above proximity in your ranking formula,\n            proximity is used to select which searchable attribute is matched in\n            the attribute ranking stage.\n          default: false\n          x-categories:\n            - Advanced\n        renderingContent:\n          $ref: '#/components/schemas/renderingContent'\n    searchParamsObject:\n      allOf:\n        - $ref: '#/components/schemas/baseSearchParams'\n        - $ref: '#/components/schemas/indexSettingsAsSearchParams'\n    searchParams:\n      oneOf:\n        - $ref: '#/components/schemas/searchParamsString'\n        - $ref: '#/components/schemas/searchParamsObject'\n    nbHits:\n      type: integer\n      description: Number of hits that the search query matched.\n      example: 20\n    nbPages:\n      type: integer\n      description: Number of pages available for the current query.\n      example: 1\n    userData:\n      type: object\n      description: Lets you store custom data in your indices.\n      default: {}\n      x-categories:\n        - Advanced\n    baseSearchResponse:\n      type: object\n      additionalProperties: false\n      required:\n        - hits\n        - nbHits\n        - page\n        - nbPages\n        - hitsPerPage\n        - processingTimeMS\n        - exhaustiveNbHits\n        - exhaustiveTypo\n        - query\n        - params\n      properties:\n        abTestID:\n          type: integer\n          description: \u003e-\n            If a search encounters an index that is being A/B tested, abTestID\n            reports the ongoing A/B test ID.\n        abTestVariantID:\n          type: integer\n          description: \u003e-\n            If a search encounters an index that is being A/B tested,\n            abTestVariantID reports the variant ID of the index used.\n        aroundLatLng:\n          type: string\n          description: The computed geo location.\n          pattern: ^(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)$\n        automaticRadius:\n          type: string\n          description: \u003e-\n            The automatically computed radius. For legacy reasons, this\n            parameter is a string and not an integer.\n        exhaustiveFacetsCount:\n          type: boolean\n          description: Whether the facet count is exhaustive or approximate.\n        exhaustiveNbHits:\n          type: boolean\n          description: Indicate if the nbHits count was exhaustive or approximate.\n        exhaustiveTypo:\n          type: boolean\n          description: \u003e-\n            Indicate if the typo-tolerance search was exhaustive or approximate\n            (only included when typo-tolerance is enabled).\n        facets:\n          title: facets\n          type: object\n          additionalProperties:\n            type: object\n            additionalProperties:\n              type: string\n          description: A mapping of each facet name to the corresponding facet counts.\n          example:\n            category:\n              food: 1\n              tech: 42\n        facets_stats:\n          title: facetsStats\n          type: object\n          description: Statistics for numerical facets.\n          additionalProperties:\n            type: object\n            title: facetStats\n            properties:\n              min:\n                type: integer\n                description: The minimum value in the result set.\n              max:\n                type: integer\n                description: The maximum value in the result set.\n              avg:\n                type: integer\n                description: The average facet value in the result set.\n              sum:\n                type: integer\n                description: The sum of all values in the result set.\n        hitsPerPage:\n          $ref: '#/components/schemas/hitsPerPage'\n        index:\n          type: string\n          example: indexName\n          description: Index name used for the query.\n        indexUsed:\n          type: string\n          description: \u003e-\n            Index name used for the query. In the case of an A/B test, the\n            targeted index isn't always the index used by the query.\n          example: indexNameAlt\n        message:\n          type: string\n          description: Used to return warnings about the query.\n        nbHits:\n          $ref: '#/components/schemas/nbHits'\n        nbPages:\n          $ref: '#/components/schemas/nbPages'\n        nbSortedHits:\n          type: integer\n          description: \u003e-\n            The number of hits selected and sorted by the relevant sort\n            algorithm.\n          example: 20\n        page:\n          $ref: '#/components/schemas/page'\n        params:\n          type: string\n          description: A url-encoded string of all search parameters.\n          example: query=a\u0026hitsPerPage=20\n        parsedQuery:\n          type: string\n          description: The query string that will be searched, after normalization.\n        processingTimeMS:\n          type: integer\n          description: Time the server took to process the request, in milliseconds.\n          example: 20\n        query:\n          $ref: '#/components/schemas/query'\n        queryAfterRemoval:\n          type: string\n          description: \u003e-\n            A markup text indicating which parts of the original query have been\n            removed in order to retrieve a non-empty result set.\n        serverUsed:\n          type: string\n          description: Actual host name of the server that processed the request.\n        userData:\n          $ref: '#/components/schemas/userData'\n    objectID:\n      type: string\n      description: Unique identifier of the object.\n    highlightedValue:\n      type: string\n      description: Markup text with occurrences highlighted.\n      example: \u003cem\u003eGeorge\u003c/em\u003e \u003cem\u003eClo\u003c/em\u003eoney\n    matchLevel:\n      type: string\n      description: Indicates how well the attribute matched the search query.\n      enum:\n        - none\n        - partial\n        - full\n    highlightResult:\n      type: object\n      description: Highlighted attributes.\n      additionalProperties: false\n      properties:\n        value:\n          $ref: '#/components/schemas/highlightedValue'\n        matchLevel:\n          $ref: '#/components/schemas/matchLevel'\n        matchedWords:\n          type: array\n          description: List of words from the query that matched the object.\n          items:\n            type: string\n        fullyHighlighted:\n          type: boolean\n          description: Whether the entire attribute value is highlighted.\n    snippetResult:\n      type: object\n      additionalProperties: false\n      properties:\n        value:\n          $ref: '#/components/schemas/highlightedValue'\n        matchLevel:\n          $ref: '#/components/schemas/matchLevel'\n    matchedGeoLocation:\n      type: object\n      properties:\n        lat:\n          type: number\n          format: double\n          description: Latitude of the matched location.\n        lng:\n          type: number\n          format: double\n          description: Longitude of the matched location.\n        distance:\n          type: integer\n          description: \u003e-\n            Distance between the matched location and the search location (in\n            meters).\n    personalization:\n      type: object\n      properties:\n        filtersScore:\n          type: integer\n          description: The score of the filters.\n        rankingScore:\n          type: integer\n          description: The score of the ranking.\n        score:\n          type: integer\n          description: The score of the event.\n    rankingInfo:\n      type: object\n      additionalProperties: false\n      properties:\n        filters:\n          type: integer\n          description: This field is reserved for advanced usage.\n        firstMatchedWord:\n          type: integer\n          description: \u003e-\n            Position of the most important matched attribute in the attributes\n            to index list.\n        geoDistance:\n          type: integer\n          description: \u003e-\n            Distance between the geo location in the search query and the best\n            matching geo location in the record, divided by the geo precision\n            (in meters).\n        geoPrecision:\n          type: integer\n          description: Precision used when computing the geo distance, in meters.\n        matchedGeoLocation:\n          $ref: '#/components/schemas/matchedGeoLocation'\n        personalization:\n          $ref: '#/components/schemas/personalization'\n        nbExactWords:\n          type: integer\n          description: Number of exactly matched words.\n        nbTypos:\n          type: integer\n          description: Number of typos encountered when matching the record.\n        promoted:\n          type: boolean\n          description: Present and set to true if a Rule promoted the hit.\n        proximityDistance:\n          type: integer\n          description: \u003e-\n            When the query contains more than one word, the sum of the distances\n            between matched words (in meters).\n        userScore:\n          type: integer\n          description: Custom ranking for the object, expressed as a single integer value.\n        words:\n          type: integer\n          description: Number of matched words, including prefixes and typos.\n        promotedByReRanking:\n          type: boolean\n          description: Wether the record are promoted by the re-ranking strategy.\n      required:\n        - promoted\n        - nbTypos\n        - firstMatchedWord\n        - geoDistance\n        - nbExactWords\n        - words\n        - filters\n        - userScore\n    _distinctSeqID:\n      type: integer\n    hit:\n      type: object\n      description: A single hit.\n      additionalProperties: true\n      required:\n        - objectID\n      properties:\n        objectID:\n          $ref: '#/components/schemas/objectID'\n        _highlightResult:\n          $ref: '#/components/schemas/highlightResult'\n        _snippetResult:\n          $ref: '#/components/schemas/snippetResult'\n        _rankingInfo:\n          $ref: '#/components/schemas/rankingInfo'\n        _distinctSeqID:\n          $ref: '#/components/schemas/_distinctSeqID'\n    searchHits:\n      type: object\n      additionalProperties: false\n      properties:\n        hits:\n          type: array\n          items:\n            $ref: '#/components/schemas/hit'\n    SearchResponse:\n      allOf:\n        - $ref: '#/components/schemas/baseSearchResponse'\n        - $ref: '#/components/schemas/searchHits'\n    indexName:\n      type: string\n      example: products\n      description: The Algolia index name.\n    searchTypeDefault:\n      type: string\n      enum:\n        - default\n      default: default\n      description: \u003e-\n        Perform a search query with `default`, will search for facet values if\n        `facet` is given.\n    searchForHitsOptions:\n      x-is-SearchForHitsOptions: true\n      type: object\n      properties:\n        indexName:\n          $ref: '#/components/schemas/indexName'\n        type:\n          $ref: '#/components/schemas/searchTypeDefault'\n      required:\n        - indexName\n    SearchForHits:\n      allOf:\n        - $ref: '#/components/schemas/searchParams'\n        - $ref: '#/components/schemas/searchForHitsOptions'\n    facetQuery:\n      type: string\n      description: Text to search inside the facet's values.\n      default: ''\n    searchTypeFacet:\n      type: string\n      enum:\n        - facet\n      default: facet\n      description: \u003e-\n        Perform a search query with `default`, will search for facet values if\n        `facet` is given.\n    searchForFacetsOptions:\n      type: object\n      properties:\n        facet:\n          type: string\n          description: The `facet` name.\n        indexName:\n          $ref: '#/components/schemas/indexName'\n        facetQuery:\n          $ref: '#/components/schemas/facetQuery'\n        maxFacetHits:\n          $ref: '#/components/schemas/maxFacetHits'\n        type:\n          $ref: '#/components/schemas/searchTypeFacet'\n      required:\n        - indexName\n        - type\n        - facet\n    SearchForFacets:\n      allOf:\n        - $ref: '#/components/schemas/searchParams'\n        - $ref: '#/components/schemas/searchForFacetsOptions'\n    SearchQuery:\n      oneOf:\n        - $ref: '#/components/schemas/SearchForHits'\n        - $ref: '#/components/schemas/SearchForFacets'\n    searchStrategy:\n      type: string\n      enum:\n        - none\n        - stopIfEnoughMatches\n    cursor:\n      type: string\n      description: \u003e-\n        Cursor indicating the location to resume browsing from. Must match the\n        value returned by the previous call.\n      example: jMDY3M2MwM2QwMWUxMmQwYWI0ZTN\n    baseBrowseResponse:\n      type: object\n      additionalProperties: false\n      required:\n        - cursor\n      properties:\n        cursor:\n          $ref: '#/components/schemas/cursor'\n    browseResponse:\n      allOf:\n        - $ref: '#/components/schemas/baseSearchResponse'\n        - $ref: '#/components/schemas/searchHits'\n        - $ref: '#/components/schemas/baseBrowseResponse'\n    taskID:\n      type: integer\n      format: int64\n      description: taskID of the task to wait for.\n    deletedAt:\n      type: string\n      description: Date of deletion (ISO-8601 format).\n    attribute:\n      type: string\n      description: Value of the attribute to be updated.\n    updatedAt:\n      type: string\n      description: Date of last update (ISO-8601 format).\n    builtInOperationType:\n      type: string\n      enum:\n        - Increment\n        - Decrement\n        - Add\n        - Remove\n        - AddUnique\n        - IncrementFrom\n        - IncrementSet\n      description: The operation to apply on the attribute.\n    builtInOperation:\n      type: object\n      description: \u003e-\n        To update an attribute without pushing the entire record, you can use\n        these built-in operations.\n      additionalProperties: false\n      properties:\n        _operation:\n          $ref: '#/components/schemas/builtInOperationType'\n        value:\n          type: string\n          description: \u003e-\n            the right-hand side argument to the operation, for example,\n            increment or decrement step, value to add or remove.\n      required:\n        - _operation\n        - value\n    attributeOrBuiltInOperation:\n      oneOf:\n        - $ref: '#/components/schemas/attribute'\n        - $ref: '#/components/schemas/builtInOperation'\n    action:\n      type: string\n      enum:\n        - addObject\n        - updateObject\n        - partialUpdateObject\n        - partialUpdateObjectNoCreate\n        - deleteObject\n        - delete\n        - clear\n      description: type of operation.\n    objectIDs:\n      type: array\n      items:\n        type: string\n      description: List of objectID.\n    baseIndexSettings:\n      type: object\n      additionalProperties: false\n      properties:\n        replicas:\n          type: array\n          items:\n            type: string\n          description: Creates replicas, exact copies of an index.\n          default: []\n          x-categories:\n            - Ranking\n        paginationLimitedTo:\n          type: integer\n          description: Set the maximum number of hits accessible via pagination.\n          default: 1000\n        disableTypoToleranceOnWords:\n          type: array\n          items:\n            type: string\n          description: A list of words for which you want to turn off typo tolerance.\n          default: []\n          x-categories:\n            - Typos\n        attributesToTransliterate:\n          type: array\n          items:\n            type: string\n          description: Specify on which attributes to apply transliteration.\n          x-categories:\n            - Languages\n        camelCaseAttributes:\n          type: array\n          items:\n            type: string\n          description: \u003e-\n            List of attributes on which to do a decomposition of camel case\n            words.\n          default: []\n          x-categories:\n            - Languages\n        decompoundedAttributes:\n          type: object\n          description: \u003e-\n            Specify on which attributes in your index Algolia should apply word\n            segmentation, also known as decompounding.\n          default: {}\n          x-categories:\n            - Languages\n        indexLanguages:\n          type: array\n          items:\n            type: string\n          description: \u003e-\n            Sets the languages at the index level for language-specific\n            processing such as tokenization and normalization.\n          default: []\n          x-categories:\n            - Languages\n        disablePrefixOnAttributes:\n          type: array\n          items:\n            type: string\n          description: List of attributes on which you want to disable prefix matching.\n          default: []\n          x-categories:\n            - Query strategy\n        allowCompressionOfIntegerArray:\n          type: boolean\n          description: Enables compression of large integer arrays.\n          default: false\n          x-categories:\n            - Performance\n        numericAttributesForFiltering:\n          type: array\n          items:\n            type: string\n          description: List of numeric attributes that can be used as numerical filters.\n          default: []\n          x-categories:\n            - Performance\n        separatorsToIndex:\n          type: string\n          description: Control which separators are indexed.\n          default: ''\n          x-categories:\n            - Typos\n        searchableAttributes:\n          type: array\n          items:\n            type: string\n          description: The complete list of attributes used for searching.\n          default: []\n          x-categories:\n            - Attributes\n        userData:\n          $ref: '#/components/schemas/userData'\n    indexSettings:\n      description: The Algolia index settings.\n      allOf:\n        - $ref: '#/components/schemas/baseIndexSettings'\n        - $ref: '#/components/schemas/indexSettingsAsSearchParams'\n    SynonymType:\n      type: string\n      description: Type of the synonym object.\n      enum:\n        - synonym\n        - onewaysynonym\n        - altcorrection1\n        - altcorrection2\n        - placeholder\n    synonymHit:\n      type: object\n      description: Synonym object.\n      additionalProperties: false\n      properties:\n        objectID:\n          type: string\n          description: Unique identifier of the synonym object to be created or updated.\n        type:\n          $ref: '#/components/schemas/SynonymType'\n        synonyms:\n          type: array\n          items:\n            type: string\n          description: Words or phrases to be considered equivalent.\n        input:\n          type: string\n          description: Word or phrase to appear in query strings (for onewaysynonym).\n        word:\n          type: string\n          description: \u003e-\n            Word or phrase to appear in query strings (for altcorrection1 and\n            altcorrection2).\n        corrections:\n          type: array\n          items:\n            type: string\n          description: Words to be matched in records.\n        placeholder:\n          type: string\n          description: Token to be put inside records.\n        replacements:\n          type: array\n          items:\n            type: string\n          description: List of query words that will match the token.\n        _highlightResult:\n          type: object\n          description: Highlighted results.\n          additionalProperties: false\n          properties:\n            type:\n              $ref: '#/components/schemas/highlightResult'\n            synonyms:\n              type: array\n              items:\n                $ref: '#/components/schemas/highlightResult'\n      required:\n        - objectID\n        - type\n    id:\n      type: string\n      description: objectID of the inserted object.\n    synonymHits:\n      type: array\n      description: Array of synonym objects.\n      items:\n        $ref: '#/components/schemas/synonymHit'\n    searchSynonymsResponse:\n      type: object\n      additionalProperties: true\n      properties:\n        hits:\n          $ref: '#/components/schemas/synonymHits'\n        nbHits:\n          $ref: '#/components/schemas/nbHits'\n      required:\n        - hits\n        - nbHits\n    acl:\n      type: string\n      enum:\n        - addObject\n        - analytics\n        - browse\n        - deleteObject\n        - deleteIndex\n        - editSettings\n        - listIndexes\n        - logs\n        - personalization\n        - recommendation\n        - search\n        - seeUnretrievableAttributes\n        - settings\n        - usage\n    apiKey:\n      type: object\n      description: Api Key object.\n      additionalProperties: false\n      properties:\n        acl:\n          type: array\n          description: Set of permissions associated with the key.\n          default: []\n          items:\n            $ref: '#/components/schemas/acl'\n        description:\n          type: string\n          description: \u003e-\n            A comment used to identify a key more easily in the dashboard. It is\n            not interpreted by the API.\n          default: ''\n        indexes:\n          type: array\n          description: \u003e-\n            Restrict this new API key to a list of indices or index patterns. If\n            the list is empty, all indices are allowed.\n          default: []\n          items:\n            type: string\n        maxHitsPerQuery:\n          type: integer\n          description: \u003e-\n            Maximum number of hits this API key can retrieve in one query. If\n            zero, no limit is enforced.\n          default: 0\n        maxQueriesPerIPPerHour:\n          type: integer\n          description: \u003e-\n            Maximum number of API calls per hour allowed from a given IP address\n            or a user token.\n          default: 0\n        queryParameters:\n          type: string\n          description: \u003e-\n            URL-encoded query string. Force some query parameters to be applied\n            for each query made with this API key.\n          default: ''\n        referers:\n          type: array\n          description: \u003e-\n            Restrict this new API key to specific referers. If empty or blank,\n            defaults to all referers.\n          default: []\n          items:\n            type: string\n        validity:\n          type: integer\n          description: \u003e-\n            Validity limit for this key in seconds. The key will automatically\n            be removed after this period of time.\n          default: 0\n      required:\n        - acl\n    createdAt:\n      type: string\n      description: Date of creation (ISO-8601 format).\n    createdAtObject:\n      type: object\n      required:\n        - createdAt\n      properties:\n        createdAt:\n          $ref: '#/components/schemas/createdAt'\n    key:\n      allOf:\n        - $ref: '#/components/schemas/apiKey'\n        - $ref: '#/components/schemas/createdAtObject'\n    keyString:\n      type: string\n      description: Key string.\n    addApiKeyResponse:\n      type: object\n      additionalProperties: false\n      properties:\n        key:\n          $ref: '#/components/schemas/keyString'\n        createdAt:\n          $ref: '#/components/schemas/createdAt'\n      required:\n        - key\n        - createdAt\n    anchoring:\n      type: string\n      description: \u003e-\n        Whether the pattern parameter must match the beginning or the end of the\n        query string, or both, or none.\n      enum:\n        - is\n        - startsWith\n        - endsWith\n        - contains\n    condition:\n      type: object\n      additionalProperties: false\n      properties:\n        pattern:\n          type: string\n          description: Query pattern syntax.\n        anchoring:\n          $ref: '#/components/schemas/anchoring'\n        alternatives:\n          type: boolean\n          description: Whether the pattern matches on plurals, synonyms, and typos.\n          default: false\n        context:\n          type: string\n          description: 'Rule context format: [A-Za-z0-9_-]+).'\n    editType:\n      description: Type of edit.\n      type: string\n      enum:\n        - remove\n        - replace\n    edit:\n      type: object\n      additionalProperties: false\n      properties:\n        type:\n          $ref: '#/components/schemas/editType'\n        delete:\n          description: Text or patterns to remove from the query string.\n          type: string\n        insert:\n          description: \u003e-\n            Text that should be inserted in place of the removed text inside the\n            query string.\n          type: string\n    consequenceQuery:\n      type: object\n      additionalProperties: false\n      properties:\n        remove:\n          description: Words to remove.\n          type: array\n          items:\n            type: string\n        edits:\n          description: Edits to apply.\n          type: array\n          items:\n            $ref: '#/components/schemas/edit'\n    schemas_query:\n      description: \u003e-\n        When providing a string, it replaces the entire query string. When\n        providing an object, it describes incremental edits to be made to the\n        query string (but you can't do both).\n      oneOf:\n        - $ref: '#/components/schemas/consequenceQuery'\n        - type: string\n    automaticFacetFilter:\n      type: object\n      description: Automatic facet Filter.\n      additionalProperties: false\n      properties:\n        facet:\n          type: string\n          description: \u003e-\n            Attribute to filter on. This must match a facet placeholder in the\n            Rule's pattern.\n        score:\n          type: integer\n          default: 1\n          description: \u003e-\n            Score for the filter. Typically used for optional or disjunctive\n            filters.\n        disjunctive:\n          type: boolean\n          default: false\n          description: Whether the filter is disjunctive (true) or conjunctive (false).\n      required:\n        - facet\n    automaticFacetFilters:\n      description: \u003e-\n        Names of facets to which automatic filtering must be applied; they must\n        match the facet name of a facet value placeholder in the query pattern.\n      oneOf:\n        - type: array\n          items:\n            $ref: '#/components/schemas/automaticFacetFilter'\n        - type: array\n          items:\n            type: string\n    params:\n      type: object\n      description: Additional search parameters. Any valid search parameter is allowed.\n      additionalProperties: false\n      properties:\n        query:\n          $ref: '#/components/schemas/schemas_query'\n        automaticFacetFilters:\n          $ref: '#/components/schemas/automaticFacetFilters'\n        automaticOptionalFacetFilters:\n          $ref: '#/components/schemas/automaticFacetFilters'\n        renderingContent:\n          $ref: '#/components/schemas/renderingContent'\n    consequenceParams:\n      allOf:\n        - $ref: '#/components/schemas/params'\n        - $ref: '#/components/schemas/baseSearchParams'\n        - $ref: '#/components/schemas/indexSettingsAsSearchParams'\n    promote:\n      type: object\n      description: Object to promote as hits.\n      additionalProperties: false\n      properties:\n        objectID:\n          type: string\n          description: Unique identifier of the object to promote.\n        objectIDs:\n          type: array\n          description: Array of unique identifiers of the objects to promote.\n          items:\n            type: string\n        position:\n          type: integer\n          description: \u003e-\n            The position to promote the objects to (zero-based). If you pass\n            objectIDs, the objects are placed at this position as a group. For\n            example, if you pass four objectIDs to position 0, the objects take\n            the first four positions.\n      required:\n        - position\n    consequence:\n      type: object\n      description: Consequence of the Rule.\n      additionalProperties: false\n      properties:\n        params:\n          $ref: '#/components/schemas/consequenceParams'\n        promote:\n          type: array\n          description: Objects to promote as hits.\n          items:\n            $ref: '#/components/schemas/promote'\n        filterPromotes:\n          type: boolean\n          default: false\n          description: \u003e-\n            Only use in combination with the promote consequence. When true,\n            promoted results will be restricted to match the filters of the\n            current search. When false, the promoted results will show up\n            regardless of the filters.\n        hide:\n          type: array\n          description: \u003e-\n            Objects to hide from hits. Each object must contain an objectID\n            field. By default, you can hide up to 50 items per rule.\n          items:\n            title: consequenceHide\n            type: object\n            description: Unique identifier of the object to hide.\n            additionalProperties: false\n            properties:\n              objectID:\n                $ref: '#/components/schemas/objectID'\n            required:\n              - objectID\n        userData:\n          type: object\n          description: \u003e-\n            Custom JSON object that will be appended to the userData array in\n            the response. This object isn't interpreted by the API. It's limited\n            to 1kB of minified JSON.\n    timeRange:\n      type: object\n      additionalProperties: false\n      properties:\n        from:\n          type: integer\n          description: Lower bound of the time range (Unix timestamp).\n        until:\n          type: integer\n          description: Upper bound of the time range (Unix timestamp).\n      required:\n        - from\n        - until\n    rule:\n      type: object\n      description: Rule object.\n      additionalProperties: false\n      properties:\n        objectID:\n          $ref: '#/components/schemas/objectID'\n        conditions:\n          type: array\n          description: \u003e-\n            A list of conditions that should apply to activate a Rule. You can\n            use up to 25 conditions per Rule.\n          items:\n            $ref: '#/components/schemas/condition'\n        consequence:\n          $ref: '#/components/schemas/consequence'\n        description:\n          type: string\n          description: \u003e-\n            This field is intended for Rule management purposes, in particular\n            to ease searching for Rules and presenting them to human readers.\n            It's not interpreted by the API.\n        enabled:\n          type: boolean\n          default: true\n          description: \u003e-\n            Whether the Rule is enabled. Disabled Rules remain in the index, but\n            aren't applied at query time.\n        validity:\n          type: array\n          description: \u003e-\n            By default, Rules are permanently valid. When validity periods are\n            specified, the Rule applies only during those periods; it's ignored\n            the rest of the time. The list must not be empty.\n          items:\n            $ref: '#/components/schemas/timeRange'\n      required:\n        - objectID\n        - consequence\n    updatedRuleResponse:\n      type: object\n      additionalProperties: false\n      properties:\n        objectID:\n          $ref: '#/components/schemas/objectID'\n        updatedAt:\n          $ref: '#/components/schemas/updatedAt'\n        taskID:\n          $ref: '#/components/schemas/taskID'\n      required:\n        - objectID\n        - updatedAt\n        - taskID\n    parameters_query:\n      type: string\n      description: Full text query.\n      default: ''\n    parameters_page:\n      type: integer\n      default: 0\n      description: Requested page (zero-based).\n    parameters_hitsPerPage:\n      type: integer\n      default: 20\n      description: Maximum number of hits in a page. Minimum is 1, maximum is 1000.\n    dictionaryType:\n      type: string\n      enum:\n        - plurals\n        - stopwords\n        - compounds\n    dictionaryAction:\n      type: string\n      enum:\n        - addEntry\n        - deleteEntry\n      description: Actions to perform.\n    dictionaryEntryState:\n      type: string\n      enum:\n        - enabled\n        - disabled\n      default: enabled\n      description: The state of the dictionary entry.\n    dictionaryEntry:\n      type: object\n      description: A dictionary entry.\n      additionalProperties: true\n      required:\n        - objectID\n        - language\n      properties:\n        objectID:\n          $ref: '#/components/schemas/objectID'\n        language:\n          type: string\n          description: \u003e-\n            Language ISO code supported by the dictionary (e.g., \"en\" for\n            English).\n        word:\n          type: string\n          description: The word of the dictionary entry.\n        words:\n          type: array\n          description: The words of the dictionary entry.\n          items:\n            type: string\n        decomposition:\n          type: array\n          description: A decomposition of the word of the dictionary entry.\n          items:\n            type: string\n        state:\n          $ref: '#/components/schemas/dictionaryEntryState'\n    language:\n      description: Language ISO code supported by the dictionary (e.g., \"en\" for English).\n      type: string\n    standardEntry:\n      description: Language ISO code.\n      type: object\n      nullable: true\n      additionalProperties:\n        type: boolean\n    standardEntries:\n      description: \u003e-\n        Map of language ISO code supported by the dictionary (e.g., \"en\" for\n        English) to a boolean value.\n      type: object\n      additionalProperties: false\n      properties:\n        plurals:\n          $ref: '#/components/schemas/standardEntry'\n        stopwords:\n          $ref: '#/components/schemas/standardEntry'\n        compounds:\n          $ref: '#/components/schemas/standardEntry'\n    dictionaryLanguage:\n      type: object\n      additionalProperties: false\n      nullable: true\n      description: Custom entries for a dictionary.\n      properties:\n        nbCustomEntires:\n          description: \u003e-\n            When nbCustomEntries is set to 0, the user didn't customize the\n            dictionary. The dictionary is still supported with standard,\n            Algolia-provided entries.\n          type: integer\n    languages:\n      type: object\n      description: A dictionary language.\n      additionalProperties: false\n      required:\n        - plurals\n        - stopwords\n        - compounds\n      properties:\n        plurals:\n          $ref: '#/components/schemas/dictionaryLanguage'\n        stopwords:\n          $ref: '#/components/schemas/dictionaryLanguage'\n        compounds:\n          $ref: '#/components/schemas/dictionaryLanguage'\n    userID:\n      type: string\n      pattern: ^[a-zA-Z0-9 \\-*.]+$\n      description: userID of the user.\n      example: user1\n    userId:\n      title: userID\n      type: object\n      description: A userID.\n      properties:\n        userID:\n          $ref: '#/components/schemas/userID'\n        clusterName:\n          type: string\n          description: Cluster on which the user is assigned.\n          example: c1-test\n        nbRecords:\n          type: integer\n          description: Number of records belonging to the user.\n          example: 42\n        dataSize:\n          type: integer\n          description: Data size used by the user.\n          example: 0\n      required:\n        - userID\n        - clusterName\n        - nbRecords\n        - dataSize\n    clusterName:\n      type: string\n      description: Name of the cluster.\n      example: c11-test\n    nbRecords:\n      type: integer\n      description: Number of records in the cluster.\n      example: 3\n    dataSize:\n      type: integer\n      description: Data size taken by all the users assigned to the cluster.\n      example: 481\n    source:\n      description: The source.\n      required:\n        - source\n      properties:\n        source:\n          description: The IP range of the source.\n          type: string\n          example: 10.0.0.1/32\n        description:\n          description: The description of the source.\n          type: string\n    sources:\n      description: A list of sources.\n      type: array\n      items:\n        $ref: '#/components/schemas/source'\n    logType:\n      type: string\n      enum:\n        - all\n        - query\n        - build\n        - error\n      default: all\n    taskStatus:\n      type: string\n      enum:\n        - published\n        - notPublished\n    operationType:\n      type: string\n      enum:\n        - move\n        - copy\n      description: Type of operation to perform (move or copy).\n    scopeType:\n      type: string\n      enum:\n        - settings\n        - synonyms\n        - rules\n    fetchedIndex:\n      type: object\n      additionalProperties: false\n      properties:\n        name:\n          type: string\n          description: Index name.\n        createdAt:\n          type: string\n          description: \u003e-\n            Index creation date. An empty string means that the index has no\n            records.\n        updatedAt:\n          $ref: '#/components/schemas/updatedAt'\n        entries:\n          type: integer\n          description: Number of records contained in the index.\n        dataSize:\n          type: integer\n          description: Number of bytes of the index in minified format.\n        fileSize:\n          type: integer\n          description: Number of bytes of the index binary file.\n        lastBuildTimeS:\n          type: integer\n          description: Last build time.\n        numberOfPendingTask:\n          type: integer\n          description: \u003e-\n            Number of pending indexing operations. This value is deprecated and\n            should not be used.\n        pendingTask:\n          type: boolean\n          description: \u003e-\n            A boolean which says whether the index has pending tasks. This value\n            is deprecated and should not be used.\n        primary:\n          type: string\n          description: \u003e-\n            Only present if the index is a replica. Contains the name of the\n            related primary index.\n        replicas:\n          type: array\n          items:\n            type: string\n          description: \u003e-\n            Only present if the index is a primary index with replicas. Contains\n            the names of all linked replicas.\n      required:\n        - name\n        - createdAt\n        - updatedAt\n        - entries\n        - dataSize\n        - fileSize\n        - lastBuildTimeS\n        - pendingTask\n    listIndicesResponse:\n      type: object\n      additionalProperties: false\n      properties:\n        items:\n          type: array\n          description: List of the fetched indices.\n          items:\n            $ref: '#/components/schemas/fetchedIndex'\n        nbPages:\n          type: integer\n          description: Number of pages.\n          example: 100\n  responses:\n    BadRequest:\n      description: Bad request or request arguments.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorBase'\n    FeatureNotEnabled:\n      description: This feature is not enabled on your Algolia account.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorBase'\n    MethodNotAllowed:\n      description: Method not allowed with this API key.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorBase'\n    IndexNotFound:\n      description: Index not found.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorBase'\n    DeletedAt:\n      description: OK\n      content:\n        application/json:\n          schema:\n            title: deletedAtResponse\n            description: The response with a taskID and a deletedAt timestamp.\n            additionalProperties: false\n            type: object\n            required:\n              - taskID\n              - deletedAt\n            properties:\n              taskID:\n                $ref: '#/components/schemas/taskID'\n              deletedAt:\n                $ref: '#/components/schemas/deletedAt'\n    UpdatedAtWithObjectId:\n      description: OK\n      content:\n        application/json:\n          schema:\n            title: updatedAtWithObjectIdResponse\n            description: \u003e-\n              The response with a taskID, an objectID and an updatedAt\n              timestamp.\n            additionalProperties: false\n            type: object\n            properties:\n              taskID:\n                $ref: '#/components/schemas/taskID'\n              updatedAt:\n                $ref: '#/components/schemas/updatedAt'\n              objectID:\n                $ref: '#/components/schemas/objectID'\n    UpdatedAt:\n      description: OK\n      content:\n        application/json:\n          schema:\n            title: updatedAtResponse\n            description: The response with a taskID and an updatedAt timestamp.\n            additionalProperties: false\n            type: object\n            required:\n              - taskID\n              - updatedAt\n            properties:\n              taskID:\n                $ref: '#/components/schemas/taskID'\n              updatedAt:\n                $ref: '#/components/schemas/updatedAt'\n    CreatedAt:\n      description: OK\n      content:\n        application/json:\n          schema:\n            title: createdAtResponse\n            description: The response with a createdAt timestamp.\n            additionalProperties: false\n            type: object\n            required:\n              - createdAt\n            properties:\n              createdAt:\n                $ref: '#/components/schemas/createdAt'\nservers:\n  - url: https://{appId}.algolianet.com\n    variables:\n      appId:\n        default: myAppId\n  - url: https://{appId}-1.algolianet.com\n    variables:\n      appId:\n        default: myAppId\n  - url: https://{appId}-2.algolianet.com\n    variables:\n      appId:\n        default: myAppId\n  - url: https://{appId}-3.algolianet.com\n    variables:\n      appId:\n        default: myAppId\n  - url: https://{appId}-dsn.algolianet.com\n    variables:\n      appId:\n        default: myAppId\nsecurity:\n  - appId: []\n    apiKey: []\ntags:\n  - name: Advanced\n    description: Advanced operations.\n  - name: Api Keys\n    description: Manage your Api Keys.\n  - name: Clusters\n    description: Clusters operations.\n  - name: Dictionaries\n    description: Dictionaries operations.\n  - name: Indices\n    description: Manage indices.\n  - name: Records\n    description: Records operations.\n  - name: Rules\n    description: Rules operations.\n  - name: Search\n    description: Perform search operations.\n  - name: Synonyms\n    description: Synonyms operations.\n  - name: Vaults\n    description: Vault operations.\n  - name: _model_index_settings\n    x-displayName: Index Settings\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/indexSettings\" /\u003e.\nx-tagGroups:\n  - name: Search and Indexing\n    tags:\n      - Indices\n      - Records\n      - Search\n  - name: Relevance\n    tags:\n      - Rules\n      - Synonyms\n      - Dictionaries\n  - name: Others\n    tags:\n      - Api Keys\n      - Clusters\n      - Vaults\n      - Advanced\n  - name: Models\n    tags:\n      - _model_index_settings\npaths:\n  /1{path}:\n    get:\n      operationId: get\n      summary: Send requests to the Algolia REST API.\n      description: This method allow you to send requests to the Algolia REST API.\n      parameters:\n        - $ref: '#/components/parameters/PathInPath'\n        - $ref: '#/components/parameters/Parameters'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n      tags:\n        - search\n    post:\n      operationId: post\n      requestBody:\n        description: The parameters to send with the custom request.\n        content:\n          application/json:\n            schema:\n              type: object\n      summary: Send requests to the Algolia REST API.\n      description: This method allow you to send requests to the Algolia REST API.\n      parameters:\n        - $ref: '#/components/parameters/PathInPath'\n        - $ref: '#/components/parameters/Parameters'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n      tags:\n        - search\n    put:\n      operationId: put\n      requestBody:\n        description: The parameters to send with the custom request.\n        content:\n          application/json:\n            schema:\n              type: object\n      summary: Send requests to the Algolia REST API.\n      description: This method allow you to send requests to the Algolia REST API.\n      parameters:\n        - $ref: '#/components/parameters/PathInPath'\n        - $ref: '#/components/parameters/Parameters'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n      tags:\n        - search\n    delete:\n      operationId: del\n      summary: Send requests to the Algolia REST API.\n      description: This method allow you to send requests to the Algolia REST API.\n      parameters:\n        - $ref: '#/components/parameters/PathInPath'\n        - $ref: '#/components/parameters/Parameters'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n      tags:\n        - search\n  /1/indexes/{indexName}/query:\n    post:\n      tags:\n        - search\n      operationId: searchSingleIndex\n      x-use-read-transporter: true\n      x-cacheable: true\n      summary: Search in a single index.\n      description: Perform a search operation targeting one specific index.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/searchParams'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/*/queries:\n    post:\n      tags:\n        - search\n      operationId: search\n      x-use-read-transporter: true\n      x-cacheable: true\n      x-legacy-signature: true\n      summary: Search multiple indices.\n      description: Perform a search operation targeting one or many indices.\n      requestBody:\n        required: true\n        description: The `search` requests and strategy.\n        content:\n          application/json:\n            schema:\n              title: searchMethodParams\n              type: object\n              additionalProperties: false\n              properties:\n                requests:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/SearchQuery'\n                strategy:\n                  $ref: '#/components/schemas/searchStrategy'\n              required:\n                - requests\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: searchResponses\n                type: object\n                additionalProperties: false\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/SearchResponse'\n                required:\n                  - results\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/{indexName}/facets/{facetName}/query:\n    post:\n      tags:\n        - search\n      operationId: searchForFacetValues\n      x-use-read-transporter: true\n      x-cacheable: true\n      summary: Search for values of a given facet.\n      description: \u003e-\n        Search for values of a given facet, optionally restricting the returned\n        values to those contained in objects matching other search criteria.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n        - name: facetName\n          description: The facet name.\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: searchForFacetValuesRequest\n              type: object\n              additionalProperties: false\n              properties:\n                params:\n                  $ref: '#/components/schemas/paramsAsString'\n                facetQuery:\n                  $ref: '#/components/schemas/facetQuery'\n                maxFacetHits:\n                  $ref: '#/components/schemas/maxFacetHits'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: searchForFacetValuesResponse\n                type: object\n                additionalProperties: false\n                required:\n                  - facetHits\n                properties:\n                  facetHits:\n                    type: array\n                    items:\n                      type: object\n                      title: facetHits\n                      additionalProperties: false\n                      required:\n                        - value\n                        - highlighted\n                        - count\n                      properties:\n                        value:\n                          description: Raw value of the facet.\n                          type: string\n                        highlighted:\n                          $ref: '#/components/schemas/highlightedValue'\n                        count:\n                          description: \u003e-\n                            How many objects contain this facet value. This\n                            takes into account the extra search parameters\n                            specified in the query. Like for a regular search\n                            query, the counts may not be exhaustive.\n                          type: integer\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/{indexName}/browse:\n    post:\n      tags:\n        - search\n      operationId: browse\n      summary: Retrieve all index content.\n      description: \u003e\n        This method allows you to retrieve all index content. It can retrieve up\n        to 1,000 records per call and supports full text search and filters.\n\n        For performance reasons, some features are not supported, including\n        `distinct`, sorting by `typos`, `words` or `geo distance`.\n\n        When there is more content to be browsed, the response contains a cursor\n        field. This cursor has to be passed to the subsequent call to browse in\n        order to get the next page of results. When the end of the index has\n        been reached, the cursor field is absent from the response.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: browseRequest\n              type: object\n              additionalProperties: false\n              properties:\n                params:\n                  $ref: '#/components/schemas/paramsAsString'\n                cursor:\n                  $ref: '#/components/schemas/cursor'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/browseResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/{indexName}:\n    post:\n      tags:\n        - search\n      operationId: saveObject\n      description: Add an object to the index, automatically assigning it an object ID.\n      summary: Add an object to the index.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n      requestBody:\n        required: true\n        description: The Algolia record.\n        content:\n          application/json:\n            schema:\n              type: object\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: saveObjectResponse\n                type: object\n                additionalProperties: false\n                properties:\n                  createdAt:\n                    type: string\n                  taskID:\n                    $ref: '#/components/schemas/taskID'\n                  objectID:\n                    $ref: '#/components/schemas/objectID'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n    delete:\n      tags:\n        - search\n      operationId: deleteIndex\n      summary: Delete index.\n      description: Delete an existing index.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n      responses:\n        '200':\n          $ref: '#/components/responses/DeletedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/{indexName}/{objectID}:\n    get:\n      tags:\n        - search\n      operationId: getObject\n      summary: Retrieve an object.\n      description: Retrieve one object from the index.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n        - $ref: '#/components/parameters/ObjectID'\n        - name: attributesToRetrieve\n          in: query\n          description: \u003e-\n            List of attributes to retrieve. If not specified, all retrievable\n            attributes are returned.\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: getObjectResponse\n                type: object\n                description: Fetched object.\n                additionalProperties:\n                  $ref: '#/components/schemas/attribute'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n    put:\n      tags:\n        - search\n      operationId: addOrUpdateObject\n      summary: Add or replace an object.\n      description: |\n        Add or replace an object with a given object ID.\n        If the object does not exist, it will be created.\n        If it already exists, it will be replaced.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n        - $ref: '#/components/parameters/ObjectID'\n      requestBody:\n        required: true\n        description: The Algolia object.\n        content:\n          application/json:\n            schema:\n              type: object\n      responses:\n        '200':\n          $ref: '#/components/responses/UpdatedAtWithObjectId'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n    delete:\n      tags:\n        - search\n      operationId: deleteObject\n      summary: Delete an object.\n      description: Delete an existing object.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n        - $ref: '#/components/parameters/ObjectID'\n      responses:\n        '200':\n          $ref: '#/components/responses/DeletedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/{indexName}/deleteByQuery:\n    post:\n      tags:\n        - search\n      operationId: deleteBy\n      summary: Delete all records matching the query.\n      description: \u003e\n        Remove all objects matching a filter (including geo filters).\n\n        This method enables you to delete one or more objects based on filters\n        (numeric, facet, tag or geo queries).\n\n        It doesn't accept empty filters or a query.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/searchParams'\n      responses:\n        '200':\n          $ref: '#/components/responses/DeletedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/{indexName}/clear:\n    post:\n      tags:\n        - search\n      operationId: clearObjects\n      summary: Clear all objects from an index.\n      description: \u003e-\n        Delete an index's content, but leave settings and index-specific API\n        keys untouched.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n      responses:\n        '200':\n          $ref: '#/components/responses/UpdatedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/{indexName}/{objectID}/partial:\n    post:\n      tags:\n        - search\n      operationId: partialUpdateObject\n      summary: Partially update an object.\n      description: \u003e\n        Update one or more attributes of an existing object.\n\n        This method lets you update only a part of an existing object, either by\n        adding new attributes or updating existing ones.\n\n        You can partially update several objects in a single method call.\n\n        If the index targeted by this operation doesn't exist yet, it's\n        automatically created.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n        - $ref: '#/components/parameters/ObjectID'\n        - name: createIfNotExists\n          description: Creates the record if it does not exist yet.\n          in: query\n          schema:\n            type: boolean\n            default: true\n      requestBody:\n        required: true\n        description: List of attributes to update.\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: object\n                title: attributeToUpdate\n                description: Attribute to update.\n                additionalProperties:\n                  $ref: '#/components/schemas/attributeOrBuiltInOperation'\n      responses:\n        '200':\n          $ref: '#/components/responses/UpdatedAtWithObjectId'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/{indexName}/batch:\n    post:\n      tags:\n        - search\n      operationId: batch\n      summary: Batch operations to one index.\n      description: \u003e-\n        Perform multiple write operations targeting one index, in a single API\n        call.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              title: batchWriteParams\n              description: The `batch` parameters.\n              type: object\n              additionalProperties: false\n              properties:\n                requests:\n                  type: array\n                  items:\n                    title: batchOperation\n                    type: object\n                    additionalProperties: false\n                    properties:\n                      action:\n                        $ref: '#/components/schemas/action'\n                      body:\n                        type: object\n                        description: \u003e-\n                          arguments to the operation (depends on the type of the\n                          operation).\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: batchResponse\n                type: object\n                additionalProperties: false\n                properties:\n                  taskID:\n                    $ref: '#/components/schemas/taskID'\n                  objectIDs:\n                    $ref: '#/components/schemas/objectIDs'\n                required:\n                  - taskID\n                  - objectIDs\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/*/batch:\n    post:\n      tags:\n        - search\n      operationId: multipleBatch\n      description: \u003e-\n        Perform multiple write operations, potentially targeting multiple\n        indices, in a single API call.\n      summary: Batch operations to many indices.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              title: batchParams\n              description: The `multipleBatch` parameters.\n              type: object\n              additionalProperties: false\n              properties:\n                requests:\n                  type: array\n                  items:\n                    title: multipleBatchOperation\n                    type: object\n                    additionalProperties: false\n                    properties:\n                      action:\n                        $ref: '#/components/schemas/action'\n                      body:\n                        type: object\n                        description: \u003e-\n                          arguments to the operation (depends on the type of the\n                          operation).\n                      indexName:\n                        type: string\n                        description: Index to target for this operation.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: multipleBatchResponse\n                type: object\n                additionalProperties: false\n                properties:\n                  taskID:\n                    type: object\n                    description: List of tasksIDs per index.\n                  objectIDs:\n                    $ref: '#/components/schemas/objectIDs'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/*/objects:\n    post:\n      tags:\n        - search\n      operationId: getObjects\n      x-use-read-transporter: true\n      x-cacheable: true\n      summary: Retrieve one or more objects.\n      description: \u003e-\n        Retrieve one or more objects, potentially from different indices, in a\n        single API call.\n      requestBody:\n        required: true\n        description: The Algolia object.\n        content:\n          application/json:\n            schema:\n              title: getObjectsParams\n              description: The `getObjects` parameters.\n              type: object\n              additionalProperties: false\n              properties:\n                requests:\n                  type: array\n                  items:\n                    description: getObjects operation on an index.\n                    title: multipleGetObjectsParams\n                    type: object\n                    additionalProperties: false\n                    required:\n                      - objectID\n                      - indexName\n                    properties:\n                      attributesToRetrieve:\n                        type: array\n                        items:\n                          type: string\n                        description: \u003e-\n                          List of attributes to retrieve. By default, all\n                          retrievable attributes are returned.\n                      objectID:\n                        type: string\n                        description: ID of the object within that index.\n                      indexName:\n                        type: string\n                        description: name of the index containing the object.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: getObjectsResponse\n                type: object\n                additionalProperties: false\n                properties:\n                  results:\n                    type: array\n                    description: List of results fetched.\n                    items:\n                      type: object\n                      description: Fetched object.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/{indexName}/settings:\n    get:\n      tags:\n        - search\n      operationId: getSettings\n      description: Retrieve settings of an index.\n      summary: Retrieve settings of an index.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/indexSettings'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n    put:\n      tags:\n        - search\n      operationId: setSettings\n      description: \u003e-\n        Update settings of an index. Only specified settings are overridden;\n        unspecified settings are left unchanged. Specifying null for a setting\n        resets it to its default value.\n      summary: Update settings of an index.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n        - $ref: '#/components/parameters/ForwardToReplicas'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/indexSettings'\n      responses:\n        '200':\n          $ref: '#/components/responses/UpdatedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/{indexName}/synonyms/{objectID}:\n    get:\n      tags:\n        - search\n      operationId: getSynonym\n      summary: Get synonym.\n      description: Fetch a synonym object identified by its objectID.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n        - $ref: '#/components/parameters/ObjectID'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/synonymHit'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n    put:\n      tags:\n        - search\n      operationId: saveSynonym\n      summary: Save synonym.\n      description: \u003e-\n        Create a new synonym object or update the existing synonym object with\n        the given object ID.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n        - $ref: '#/components/parameters/ObjectID'\n        - $ref: '#/components/parameters/ForwardToReplicas'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/synonymHit'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: saveSynonymResponse\n                type: object\n                additionalProperties: false\n                properties:\n                  taskID:\n                    $ref: '#/components/schemas/taskID'\n                  updatedAt:\n                    $ref: '#/components/schemas/updatedAt'\n                  id:\n                    $ref: '#/components/schemas/id'\n                required:\n                  - taskID\n                  - updatedAt\n                  - id\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n    delete:\n      tags:\n        - search\n      operationId: deleteSynonym\n      summary: Delete synonym.\n      description: Delete a single synonyms set, identified by the given objectID.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n        - $ref: '#/components/parameters/ObjectID'\n        - $ref: '#/components/parameters/ForwardToReplicas'\n      responses:\n        '200':\n          $ref: '#/components/responses/DeletedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/{indexName}/synonyms/batch:\n    post:\n      tags:\n        - search\n      operationId: saveSynonyms\n      summary: Save a batch of synonyms.\n      description: \u003e-\n        Create/update multiple synonym objects at once, potentially replacing\n        the entire list of synonyms if replaceExistingSynonyms is true.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n        - $ref: '#/components/parameters/ForwardToReplicas'\n        - $ref: '#/components/parameters/ReplaceExistingSynonyms'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/synonymHits'\n      responses:\n        '200':\n          $ref: '#/components/responses/UpdatedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/{indexName}/synonyms/clear:\n    post:\n      tags:\n        - search\n      operationId: clearAllSynonyms\n      summary: Clear all synonyms.\n      description: Remove all synonyms from an index.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n        - $ref: '#/components/parameters/ForwardToReplicas'\n      responses:\n        '200':\n          $ref: '#/components/responses/UpdatedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/{indexName}/synonyms/search:\n    post:\n      tags:\n        - search\n      operationId: searchSynonyms\n      x-use-read-transporter: true\n      x-cacheable: true\n      summary: Search synonyms.\n      description: Search or browse all synonyms, optionally filtering them by type.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n        - $ref: '#/components/parameters/Query'\n        - $ref: '#/components/parameters/Type'\n        - $ref: '#/components/parameters/PageDefault0'\n        - $ref: '#/components/parameters/HitsPerPage'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/searchSynonymsResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/keys:\n    get:\n      tags:\n        - search\n      operationId: listApiKeys\n      summary: List API Keys.\n      description: List API keys, along with their associated rights.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: listApiKeysResponse\n                type: object\n                additionalProperties: false\n                required:\n                  - keys\n                properties:\n                  keys:\n                    type: array\n                    description: List of api keys.\n                    items:\n                      $ref: '#/components/schemas/key'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n    post:\n      tags:\n        - search\n      operationId: addApiKey\n      summary: Create an API key.\n      description: Add a new API Key with specific permissions/restrictions.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/apiKey'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/addApiKeyResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/keys/{key}:\n    get:\n      tags:\n        - search\n      operationId: getApiKey\n      summary: Get an API key.\n      description: Get the permissions of an API key.\n      parameters:\n        - $ref: '#/components/parameters/KeyString'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/key'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n    put:\n      tags:\n        - search\n      operationId: updateApiKey\n      summary: Update an API key.\n      description: Replace every permission of an existing API key.\n      parameters:\n        - $ref: '#/components/parameters/KeyString'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/apiKey'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: updateApiKeyResponse\n                type: object\n                additionalProperties: false\n                required:\n                  - key\n                  - updatedAt\n                properties:\n                  key:\n                    $ref: '#/components/schemas/keyString'\n                  updatedAt:\n                    $ref: '#/components/schemas/updatedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n    delete:\n      tags:\n        - search\n      operationId: deleteApiKey\n      summary: Delete an API key.\n      description: Delete an existing API Key.\n      parameters:\n        - $ref: '#/components/parameters/KeyString'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: deleteApiKeyResponse\n                type: object\n                additionalProperties: false\n                required:\n                  - deletedAt\n                properties:\n                  deletedAt:\n                    $ref: '#/components/schemas/deletedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/keys/{key}/restore:\n    post:\n      tags:\n        - search\n      operationId: restoreApiKey\n      summary: Restore an API key.\n      description: Restore a deleted API key, along with its associated rights.\n      parameters:\n        - $ref: '#/components/parameters/KeyString'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/addApiKeyResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/{indexName}/rules/{objectID}:\n    get:\n      tags:\n        - search\n      operationId: getRule\n      summary: Get a rule.\n      description: Retrieve the Rule with the specified objectID.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n        - $ref: '#/components/parameters/ObjectID'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/rule'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n    put:\n      tags:\n        - search\n      operationId: saveRule\n      summary: Save/Update a rule.\n      description: Create or update the Rule with the specified objectID.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n        - $ref: '#/components/parameters/ObjectID'\n        - $ref: '#/components/parameters/ForwardToReplicas'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/rule'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/updatedRuleResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n    delete:\n      tags:\n        - search\n      operationId: deleteRule\n      summary: Delete a rule.\n      description: Delete the Rule with the specified objectID.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n        - $ref: '#/components/parameters/ObjectID'\n        - $ref: '#/components/parameters/ForwardToReplicas'\n      responses:\n        '200':\n          $ref: '#/components/responses/UpdatedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/{indexName}/rules/batch:\n    post:\n      tags:\n        - search\n      operationId: saveRules\n      summary: Save a batch of rules.\n      description: Create/update multiple rules objects at once.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n        - $ref: '#/components/parameters/ForwardToReplicas'\n        - $ref: '#/components/parameters/ClearExistingRules'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              description: Rules to add.\n              items:\n                $ref: '#/components/schemas/rule'\n      responses:\n        '200':\n          $ref: '#/components/responses/UpdatedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/{indexName}/rules/clear:\n    post:\n      tags:\n        - search\n      operationId: clearRules\n      summary: Clear Rules.\n      description: Delete all Rules in the index.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n        - $ref: '#/components/parameters/ForwardToReplicas'\n      responses:\n        '200':\n          $ref: '#/components/responses/UpdatedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/{indexName}/rules/search:\n    post:\n      tags:\n        - search\n      operationId: searchRules\n      x-use-read-transporter: true\n      x-cacheable: true\n      summary: Search for rules.\n      description: Search for rules matching various criteria.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: searchRulesParams\n              description: Parameters for the search.\n              additionalProperties: false\n              properties:\n                query:\n                  $ref: '#/components/schemas/parameters_query'\n                anchoring:\n                  $ref: '#/components/schemas/anchoring'\n                context:\n                  type: string\n                  description: \u003e-\n                    Restricts matches to contextual rules with a specific\n                    context (exact match).\n                page:\n                  $ref: '#/components/schemas/parameters_page'\n                hitsPerPage:\n                  $ref: '#/components/schemas/parameters_hitsPerPage'\n                enabled:\n                  type: boolean\n                  default: null\n                  description: \u003e-\n                    When specified, restricts matches to rules with a specific\n                    enabled status. When absent (default), all rules are\n                    retrieved, regardless of their enabled status.\n                requestOptions:\n                  type: array\n                  description: A mapping of requestOptions to send along with the request.\n                  items:\n                    type: object\n                    description: Request Option.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: searchRulesResponse\n                type: object\n                additionalProperties: false\n                required:\n                  - hits\n                  - nbHits\n                  - page\n                  - nbPages\n                properties:\n                  hits:\n                    type: array\n                    description: Fetched rules.\n                    items:\n                      $ref: '#/components/schemas/rule'\n                  nbHits:\n                    type: integer\n                    description: Number of fetched rules.\n                  page:\n                    type: integer\n                    description: Current page.\n                  nbPages:\n                    type: integer\n                    description: Number of pages.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/dictionaries/{dictionaryName}/batch:\n    post:\n      tags:\n        - search\n      operationId: batchDictionaryEntries\n      description: Send a batch of dictionary entries.\n      summary: Batch dictionary entries.\n      parameters:\n        - $ref: '#/components/parameters/DictionaryName'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              title: batchDictionaryEntriesParams\n              description: The `batchDictionaryEntries` parameters.\n              type: object\n              required:\n                - requests\n              additionalProperties: false\n              properties:\n                clearExistingDictionaryEntries:\n                  type: boolean\n                  default: false\n                  description: \u003e-\n                    When `true`, start the batch by removing all the custom\n                    entries from the dictionary.\n                requests:\n                  type: array\n                  description: \u003e-\n                    List of operations to batch. Each operation is described by\n                    an `action` and a `body`.\n                  items:\n                    title: batchDictionaryEntriesRequest\n                    type: object\n                    additionalProperties: false\n                    required:\n                      - action\n                      - body\n                    properties:\n                      action:\n                        $ref: '#/components/schemas/dictionaryAction'\n                      body:\n                        $ref: '#/components/schemas/dictionaryEntry'\n      responses:\n        '200':\n          $ref: '#/components/responses/UpdatedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/dictionaries/{dictionaryName}/search:\n    post:\n      tags:\n        - search\n      operationId: searchDictionaryEntries\n      x-use-read-transporter: true\n      x-cacheable: true\n      description: Search the dictionary entries.\n      summary: Search a dictionary entries.\n      parameters:\n        - $ref: '#/components/parameters/DictionaryName'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              title: searchDictionaryEntriesParams\n              description: The `searchDictionaryEntries` parameters.\n              type: object\n              required:\n                - query\n              additionalProperties: false\n              properties:\n                query:\n                  $ref: '#/components/schemas/query'\n                page:\n                  $ref: '#/components/schemas/page'\n                hitsPerPage:\n                  $ref: '#/components/schemas/hitsPerPage'\n                language:\n                  $ref: '#/components/schemas/language'\n      responses:\n        '200':\n          $ref: '#/components/responses/UpdatedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/dictionaries/*/settings:\n    get:\n      tags:\n        - search\n      operationId: getDictionarySettings\n      description: \u003e-\n        Retrieve dictionaries settings. The API stores languages whose standard\n        entries are disabled. Fetch settings does not return false values.\n      summary: Retrieve dictionaries settings.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: getDictionarySettingsResponse\n                additionalProperties: false\n                type: object\n                required:\n                  - disableStandardEntries\n                properties:\n                  disableStandardEntries:\n                    $ref: '#/components/schemas/standardEntries'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n    put:\n      tags:\n        - search\n      operationId: setDictionarySettings\n      description: Set dictionaries settings.\n      summary: Set dictionaries settings.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              title: dictionarySettingsParams\n              type: object\n              additionalProperties: false\n              description: \u003e-\n                Disable the builtin Algolia entries for a type of dictionary per\n                language.\n              required:\n                - disableStandardEntries\n              properties:\n                disableStandardEntries:\n                  $ref: '#/components/schemas/standardEntries'\n      responses:\n        '200':\n          $ref: '#/components/responses/UpdatedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/dictionaries/*/languages:\n    get:\n      tags:\n        - search\n      operationId: getDictionaryLanguages\n      description: List dictionaries supported per language.\n      summary: List available languages.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: getDictionaryLanguagesResponse\n                type: object\n                additionalProperties:\n                  $ref: '#/components/schemas/languages'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/clusters/mapping:\n    post:\n      tags:\n        - search\n      operationId: assignUserId\n      summary: Assign or Move userID.\n      description: \u003e\n        Assign or Move a userID to a cluster.\n\n        The time it takes to migrate (move) a user is proportional to the amount\n        of data linked to the userID.\n\n        Upon success, the response is 200 OK.\n\n        A successful response indicates that the operation has been taken into\n        account, and the userID is directly usable.\n      parameters:\n        - $ref: '#/components/parameters/UserIDInHeader'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              title: assignUserIdParams\n              type: object\n              description: Assign userID parameters.\n              additionalProperties: false\n              properties:\n                cluster:\n                  $ref: '#/components/schemas/clusterName'\n              required:\n                - cluster\n      responses:\n        '200':\n          $ref: '#/components/responses/CreatedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n    get:\n      tags:\n        - search\n      operationId: listUserIds\n      summary: List userIDs.\n      description: \u003e\n        List the userIDs assigned to a multi-clusters appID.\n\n        The data returned will usually be a few seconds behind real time,\n        because userID usage may take up to a few seconds to propagate to the\n        different clusters.\n\n        Upon success, the response is 200 OK and contains the following userIDs\n        data.\n      parameters:\n        - $ref: '#/components/parameters/Page'\n        - $ref: '#/components/parameters/HitsPerPage'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: listUserIdsResponse\n                type: object\n                description: UserIDs data.\n                properties:\n                  userIDs:\n                    type: array\n                    description: List of userIDs.\n                    items:\n                      $ref: '#/components/schemas/userId'\n                required:\n                  - userIDs\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/clusters/mapping/batch:\n    post:\n      tags:\n        - search\n      operationId: batchAssignUserIds\n      summary: Batch assign userIDs.\n      description: \u003e\n        Assign multiple userIDs to a cluster.\n\n        Upon success, the response is 200 OK.\n\n        A successful response indicates that the operation has been taken into\n        account, and the userIDs are directly usable.\n      parameters:\n        - $ref: '#/components/parameters/UserIDInHeader'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              title: batchAssignUserIdsParams\n              type: object\n              description: Assign userID parameters.\n              additionalProperties: false\n              properties:\n                cluster:\n                  $ref: '#/components/schemas/clusterName'\n                users:\n                  type: array\n                  description: \u003e-\n                    userIDs to assign. Note you cannot move users with this\n                    method.\n                  items:\n                    type: string\n              required:\n                - cluster\n                - users\n      responses:\n        '200':\n          $ref: '#/components/responses/CreatedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/clusters/mapping/top:\n    get:\n      tags:\n        - search\n      operationId: getTopUserIds\n      summary: Get top userID.\n      description: \u003e\n        Get the top 10 userIDs with the highest number of records per cluster.\n\n        The data returned will usually be a few seconds behind real time,\n        because userID usage may take up to a few seconds to propagate to the\n        different clusters.\n\n        Upon success, the response is 200 OK and contains the following array of\n        userIDs and clusters.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: getTopUserIdsResponse\n                type: object\n                description: Array of userIDs and clusters.\n                properties:\n                  topUsers:\n                    type: array\n                    description: Mapping of cluster names to top users.\n                    items:\n                      type: object\n                      additionalProperties:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/userId'\n                required:\n                  - topUsers\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/clusters/mapping/{userID}:\n    get:\n      tags:\n        - search\n      operationId: getUserId\n      summary: Get userID.\n      description: \u003e\n        Returns the userID data stored in the mapping.\n\n        The data returned will usually be a few seconds behind real time,\n        because userID usage may take up to a few seconds to propagate to the\n        different clusters.\n\n        Upon success, the response is 200 OK and contains the following userID\n        data.\n      parameters:\n        - $ref: '#/components/parameters/UserIDInPath'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/userId'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n    delete:\n      tags:\n        - search\n      operationId: removeUserId\n      summary: Remove userID.\n      description: \u003e\n        Remove a userID and its associated data from the multi-clusters.\n\n        Upon success, the response is 200 OK and a task is created to remove the\n        userID data and mapping.\n      parameters:\n        - $ref: '#/components/parameters/UserIDInPath'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: removeUserIdResponse\n                type: object\n                additionalProperties: false\n                properties:\n                  deletedAt:\n                    $ref: '#/components/schemas/deletedAt'\n                required:\n                  - deletedAt\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/clusters:\n    get:\n      tags:\n        - search\n      operationId: listClusters\n      summary: List clusters.\n      description: \u003e\n        List the clusters available in a multi-clusters setup for a single\n        appID.\n\n        Upon success, the response is 200 OK and contains the following\n        clusters.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: listClustersResponse\n                type: object\n                description: Array of clusters.\n                properties:\n                  topUsers:\n                    type: array\n                    description: Mapping of cluster names to top users.\n                    items:\n                      $ref: '#/components/schemas/clusterName'\n                required:\n                  - topUsers\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/clusters/mapping/search:\n    post:\n      tags:\n        - search\n      operationId: searchUserIds\n      x-use-read-transporter: true\n      x-cacheable: true\n      summary: Search userID.\n      description: \u003e\n        Search for userIDs.\n\n        The data returned will usually be a few seconds behind real time,\n        because userID usage may take up to a few seconds propagate to the\n        different clusters.\n\n        To keep updates moving quickly, the index of userIDs isn't built\n        synchronously with the mapping. Instead, the index is built once every\n        12h, at the same time as the update of userID usage. For example, when\n        you perform a modification like adding or moving a userID, the search\n        will report an outdated value until the next rebuild of the mapping,\n        which takes place every 12h.\n\n        Upon success, the response is 200 OK and contains the following userIDs\n        data.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              title: searchUserIdsParams\n              type: object\n              description: OK\n              additionalProperties: false\n              properties:\n                query:\n                  type: string\n                  description: \u003e-\n                    Query to search. The search is a prefix search with\n                    typoTolerance. Use empty query to retrieve all users.\n                clusterName:\n                  $ref: '#/components/schemas/clusterName'\n                page:\n                  $ref: '#/components/schemas/page'\n                hitsPerPage:\n                  $ref: '#/components/schemas/hitsPerPage'\n              required:\n                - query\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: searchUserIdsResponse\n                type: object\n                description: userIDs data.\n                properties:\n                  hits:\n                    type: array\n                    description: List of user object matching the query.\n                    items:\n                      title: userHit\n                      type: object\n                      properties:\n                        userID:\n                          $ref: '#/components/schemas/userID'\n                        clusterName:\n                          $ref: '#/components/schemas/clusterName'\n                        nbRecords:\n                          $ref: '#/components/schemas/nbRecords'\n                        dataSize:\n                          $ref: '#/components/schemas/dataSize'\n                        objectID:\n                          type: string\n                          description: userID of the requested user. Same as userID.\n                        _highlightResult:\n                          title: userHighlightResult\n                          type: object\n                          properties:\n                            userID:\n                              $ref: '#/components/schemas/highlightResult'\n                            clusterName:\n                              $ref: '#/components/schemas/highlightResult'\n                          required:\n                            - userID\n                            - clusterName\n                      required:\n                        - userID\n                        - clusterName\n                        - nbRecords\n                        - dataSize\n                        - objectID\n                        - _highlightResult\n                  nbHits:\n                    $ref: '#/components/schemas/nbHits'\n                  page:\n                    $ref: '#/components/schemas/page'\n                  hitsPerPage:\n                    $ref: '#/components/schemas/parameters_hitsPerPage'\n                  updatedAt:\n                    $ref: '#/components/schemas/updatedAt'\n                required:\n                  - hits\n                  - nbHits\n                  - page\n                  - hitsPerPage\n                  - updatedAt\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/clusters/mapping/pending:\n    get:\n      tags:\n        - search\n      operationId: hasPendingMappings\n      summary: Get migration status.\n      description: \u003e\n        Get the status of your clusters' migrations or user creations.\n\n        Creating a large batch of users or migrating your multi-cluster may take\n        quite some time. This method lets you retrieve the status of the\n        migration, so you can know when it's done.\n\n        Upon success, the response is 200 OK.\n\n        A successful response indicates that the operation has been taken into\n        account, and the userIDs are directly usable.\n      parameters:\n        - in: query\n          name: getClusters\n          description: Whether to get clusters or not.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          $ref: '#/components/responses/CreatedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/security/sources:\n    get:\n      tags:\n        - search\n      operationId: getSources\n      description: List all allowed sources.\n      summary: List all allowed sources.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/sources'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n    put:\n      tags:\n        - search\n      operationId: replaceSources\n      description: Replace all allowed sources.\n      summary: Replace all allowed sources.\n      requestBody:\n        required: true\n        description: The sources to allow.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/sources'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: replaceSourceResponse\n                type: object\n                additionalProperties: false\n                required:\n                  - updatedAt\n                properties:\n                  updatedAt:\n                    $ref: '#/components/schemas/updatedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/security/sources/append:\n    post:\n      tags:\n        - search\n      operationId: appendSource\n      description: Add a single source to the list of allowed sources.\n      summary: Add a single source.\n      requestBody:\n        required: true\n        description: The source to add.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/source'\n      responses:\n        '200':\n          $ref: '#/components/responses/CreatedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/security/sources/{source}:\n    delete:\n      tags:\n        - search\n      operationId: deleteSource\n      description: Remove a single source from the list of allowed sources.\n      summary: Remove a single source.\n      parameters:\n        - name: source\n          in: path\n          required: true\n          description: The IP range of the source.\n          schema:\n            type: string\n            example: 10.0.0.1/32\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: deleteSourceResponse\n                type: object\n                additionalProperties: false\n                required:\n                  - deletedAt\n                properties:\n                  deletedAt:\n                    $ref: '#/components/schemas/deletedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/logs:\n    get:\n      tags:\n        - search\n      operationId: getLogs\n      description: Return the latest log entries.\n      summary: Return the latest log entries.\n      parameters:\n        - name: offset\n          in: query\n          description: \u003e-\n            First entry to retrieve (zero-based). Log entries are sorted by\n            decreasing date, therefore 0 designates the most recent log entry.\n          schema:\n            type: integer\n            default: 0\n        - name: length\n          in: query\n          description: \u003e-\n            Maximum number of entries to retrieve. The maximum allowed value is\n            1000.\n          schema:\n            type: integer\n            default: 10\n            maximum: 1000\n        - name: indexName\n          in: query\n          description: \u003e-\n            Index for which log entries should be retrieved. When omitted, log\n            entries are retrieved across all indices.\n          schema:\n            type: string\n            nullable: true\n        - name: type\n          in: query\n          description: \u003e-\n            Type of log entries to retrieve. When omitted, all log entries are\n            retrieved.\n          schema:\n            $ref: '#/components/schemas/logType'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: getLogsResponse\n                type: object\n                additionalProperties: false\n                required:\n                  - logs\n                properties:\n                  logs:\n                    type: array\n                    items:\n                      title: log\n                      type: object\n                      properties:\n                        timestamp:\n                          type: string\n                          description: Timestamp in ISO-8601 format.\n                        method:\n                          type: string\n                          description: HTTP method of the performed request.\n                        answer_code:\n                          type: string\n                          description: HTTP response code.\n                        query_body:\n                          type: string\n                          description: Request body. Truncated after 1000 characters.\n                        answer:\n                          type: string\n                          description: Answer body. Truncated after 1000 characters.\n                        url:\n                          type: string\n                          description: Request URL.\n                        ip:\n                          type: string\n                          description: IP of the client which performed the request.\n                        query_headers:\n                          type: string\n                          description: Request Headers (API Key is obfuscated).\n                        sha1:\n                          type: string\n                          description: SHA1 signature of the log entry.\n                        nb_api_calls:\n                          type: string\n                          description: Number of API calls.\n                        processing_time_ms:\n                          type: string\n                          description: \u003e-\n                            Processing time for the query. It doesn't include\n                            network time.\n                        index:\n                          type: string\n                          description: Index targeted by the query.\n                        query_params:\n                          type: string\n                          description: Query parameters sent with the request.\n                        query_nb_hits:\n                          type: string\n                          description: Number of hits returned for the query.\n                        inner_queries:\n                          type: array\n                          description: \u003e-\n                            Array of all performed queries for the given\n                            request.\n                          items:\n                            type: object\n                            title: logQuery\n                            properties:\n                              index_name:\n                                type: string\n                                description: Index targeted by the query.\n                              user_token:\n                                type: string\n                                description: User identifier.\n                              query_id:\n                                type: string\n                                description: QueryID for the given query.\n                      required:\n                        - timestamp\n                        - method\n                        - answer_code\n                        - query_body\n                        - answer\n                        - url\n                        - ip\n                        - query_headers\n                        - sha1\n                        - nb_api_calls\n                        - processing_time_ms\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/{indexName}/task/{taskID}:\n    get:\n      tags:\n        - search\n      operationId: getTask\n      description: Check the current status of a given task.\n      summary: Check the status of a task.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n        - name: taskID\n          in: path\n          description: Unique identifier of an task. Numeric value (up to 64bits).\n          required: true\n          schema:\n            type: integer\n            format: int64\n            example: '13235'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: getTaskResponse\n                type: object\n                additionalProperties: false\n                properties:\n                  status:\n                    $ref: '#/components/schemas/taskStatus'\n                required:\n                  - status\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes/{indexName}/operation:\n    post:\n      tags:\n        - search\n      operationId: operationIndex\n      summary: Copy/move index.\n      description: Performs a copy or a move operation on a index.\n      parameters:\n        - $ref: '#/components/parameters/IndexName'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              title: operationIndexParams\n              type: object\n              additionalProperties: false\n              properties:\n                operation:\n                  $ref: '#/components/schemas/operationType'\n                destination:\n                  $ref: '#/components/schemas/indexName'\n                scope:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/scopeType'\n                  description: \u003e-\n                    Scope of the data to copy. When absent, a full copy is\n                    performed. When present, only the selected scopes are\n                    copied.\n              required:\n                - operation\n                - destination\n      responses:\n        '200':\n          $ref: '#/components/responses/UpdatedAt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'\n  /1/indexes:\n    get:\n      tags:\n        - search\n      operationId: listIndices\n      summary: List existing indexes.\n      description: List existing indexes from an application.\n      parameters:\n        - $ref: '#/components/parameters/Page'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/listIndicesResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/FeatureNotEnabled'\n        '403':\n          $ref: '#/components/responses/MethodNotAllowed'\n        '404':\n          $ref: '#/components/responses/IndexNotFound'",
			"canonicalURL": "/github.com/algolia/cli@32e9b77d123478a049b3f52a519d44180243869f/-/blob/api/specs/search.yml",
			"externalURLs": [
				{
					"url": "https://github.com/algolia/cli/blob/32e9b77d123478a049b3f52a519d44180243869f/api/specs/search.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"browseResponse\": parse schema: parse schema: parse schema: property \"userData\": parse schema: at 1:53825: parse default: unexpected type: \"object\""
}