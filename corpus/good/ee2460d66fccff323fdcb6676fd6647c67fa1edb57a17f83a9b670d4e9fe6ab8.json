{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/EricWittmann/api-samples"
		},
		"file": {
			"name": "openapi.json",
			"size": 0,
			"path": "enable/demo/src/main/resources/META-INF/openapi.json",
			"byteSize": 16552,
			"content": "{\n    \"openapi\": \"3.0.2\",\n    \"info\": {\n        \"title\": \"Library API\",\n        \"version\": \"1.0.0\",\n        \"description\": \"A simple API for managing authors and books.\",\n        \"contact\": {\n            \"name\": \"Eric Wittmann\",\n            \"email\": \"eric.wittmann@redhat.com\"\n        },\n        \"license\": {\n            \"name\": \"Mozilla 2.0\",\n            \"url\": \"https://www.mozilla.org/en-US/MPL/2.0/\"\n        }\n    },\n    \"paths\": {\n        \"/authors\": {\n            \"summary\": \"Path used to manage the list of authors.\",\n            \"description\": \"The REST endpoint/path used to list and create zero or more `Author` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.\",\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/Author\"\n                                    }\n                                }\n                            }\n                        },\n                        \"description\": \"Successful response - returns an array of `Author` entities.\"\n                    }\n                },\n                \"operationId\": \"getauthors\",\n                \"summary\": \"List All authors\",\n                \"description\": \"Gets a list of all `Author` entities.\"\n            },\n            \"post\": {\n                \"requestBody\": {\n                    \"description\": \"A new `Author` to be created.\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/Author\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Successful response.\"\n                    }\n                },\n                \"operationId\": \"createAuthor\",\n                \"summary\": \"Create a Author\",\n                \"description\": \"Creates a new instance of a `Author`.\"\n            }\n        },\n        \"/authors/{authorId}\": {\n            \"summary\": \"Path used to manage a single Author.\",\n            \"description\": \"The REST endpoint/path used to get, update, and delete single instances of an `Author`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.\",\n            \"get\": {\n                \"tags\": [\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Author\"\n                                }\n                            }\n                        },\n                        \"description\": \"Successful response - returns a single `Author`.\"\n                    },\n                    \"404\": {\n                        \"$ref\": \"#/components/responses/NotFound\"\n                    }\n                },\n                \"operationId\": \"getAuthor\",\n                \"summary\": \"Get a Author\",\n                \"description\": \"Gets the details of a single instance of a `Author`.\"\n            },\n            \"put\": {\n                \"requestBody\": {\n                    \"description\": \"Updated `Author` information.\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/Author\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"202\": {\n                        \"description\": \"Successful response.\"\n                    },\n                    \"404\": {\n                        \"$ref\": \"#/components/responses/NotFound\"\n                    }\n                },\n                \"operationId\": \"updateAuthor\",\n                \"summary\": \"Update a Author\",\n                \"description\": \"Updates an existing `Author`.\"\n            },\n            \"delete\": {\n                \"responses\": {\n                    \"204\": {\n                        \"description\": \"Successful response.\"\n                    },\n                    \"404\": {\n                        \"$ref\": \"#/components/responses/NotFound\"\n                    }\n                },\n                \"operationId\": \"deleteAuthor\",\n                \"summary\": \"Delete a Author\",\n                \"description\": \"Deletes an existing `Author`.\"\n            },\n            \"parameters\": [\n                {\n                    \"name\": \"authorId\",\n                    \"description\": \"A unique identifier for a `Author`.\",\n                    \"schema\": {\n                        \"type\": \"string\"\n                    },\n                    \"in\": \"path\",\n                    \"required\": true\n                }\n            ]\n        },\n        \"/books\": {\n            \"summary\": \"Path used to manage the list of books.\",\n            \"description\": \"The REST endpoint/path used to list and create zero or more `Book` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.\",\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/Book\"\n                                    }\n                                }\n                            }\n                        },\n                        \"description\": \"Successful response - returns an array of `Book` entities.\"\n                    }\n                },\n                \"operationId\": \"getbooks\",\n                \"summary\": \"List All books\",\n                \"description\": \"Gets a list of all `Book` entities.\"\n            },\n            \"post\": {\n                \"requestBody\": {\n                    \"description\": \"A new `Book` to be created.\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/Book\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Successful response.\"\n                    }\n                },\n                \"operationId\": \"createBook\",\n                \"summary\": \"Create a Book\",\n                \"description\": \"Creates a new instance of a `Book`.\"\n            }\n        },\n        \"/books/{bookId}\": {\n            \"summary\": \"Path used to manage a single Book.\",\n            \"description\": \"The REST endpoint/path used to get, update, and delete single instances of an `Book`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.\",\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Book\"\n                                }\n                            }\n                        },\n                        \"description\": \"Successful response - returns a single `Book`.\"\n                    }\n                },\n                \"operationId\": \"getBook\",\n                \"summary\": \"Get a Book\",\n                \"description\": \"Gets the details of a single instance of a `Book`.\"\n            },\n            \"put\": {\n                \"requestBody\": {\n                    \"description\": \"Updated `Book` information.\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/Book\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"202\": {\n                        \"description\": \"Successful response.\"\n                    }\n                },\n                \"operationId\": \"updateBook\",\n                \"summary\": \"Update a Book\",\n                \"description\": \"Updates an existing `Book`.\"\n            },\n            \"delete\": {\n                \"responses\": {\n                    \"204\": {\n                        \"description\": \"Successful response.\"\n                    }\n                },\n                \"operationId\": \"deleteBook\",\n                \"summary\": \"Delete a Book\",\n                \"description\": \"Deletes an existing `Book`.\"\n            },\n            \"parameters\": [\n                {\n                    \"name\": \"bookId\",\n                    \"description\": \"A unique identifier for a `Book`.\",\n                    \"schema\": {\n                        \"type\": \"string\"\n                    },\n                    \"in\": \"path\",\n                    \"required\": true\n                }\n            ]\n        },\n        \"/widgets\": {\n            \"summary\": \"Path used to manage the list of widgets.\",\n            \"description\": \"The REST endpoint/path used to list and create zero or more `Widget` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.\",\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/Widget\"\n                                    }\n                                }\n                            }\n                        },\n                        \"description\": \"Successful response - returns an array of `Widget` entities.\"\n                    }\n                },\n                \"operationId\": \"getwidgets\",\n                \"summary\": \"List All widgets\",\n                \"description\": \"Gets a list of all `Widget` entities.\"\n            },\n            \"post\": {\n                \"requestBody\": {\n                    \"description\": \"A new `Widget` to be created.\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/Widget\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Successful response.\"\n                    }\n                },\n                \"operationId\": \"createWidget\",\n                \"summary\": \"Create a Widget\",\n                \"description\": \"Creates a new instance of a `Widget`.\"\n            },\n            \"delete\": {\n                \"responses\": {\n                    \"204\": {\n\n                    }\n                },\n                \"operationId\": \"deleteAllWidgets\",\n                \"summary\": \"deleteAllWidgets\"\n            }\n        },\n        \"/widgets/{widgetId}\": {\n            \"summary\": \"Path used to manage a single Widget.\",\n            \"description\": \"The REST endpoint/path used to get, update, and delete single instances of an `Widget`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.\",\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Widget\"\n                                }\n                            }\n                        },\n                        \"description\": \"Successful response - returns a single `Widget`.\"\n                    }\n                },\n                \"operationId\": \"getWidget\",\n                \"summary\": \"Get a Widget\",\n                \"description\": \"Gets the details of a single instance of a `Widget`.\"\n            },\n            \"put\": {\n                \"requestBody\": {\n                    \"description\": \"Updated `Widget` information.\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/Widget\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"202\": {\n                        \"description\": \"Successful response.\"\n                    }\n                },\n                \"operationId\": \"updateWidget\",\n                \"summary\": \"Update a Widget\",\n                \"description\": \"Updates an existing `Widget`.\"\n            },\n            \"delete\": {\n                \"responses\": {\n                    \"204\": {\n                        \"description\": \"Successful response.\"\n                    }\n                },\n                \"operationId\": \"deleteWidget\",\n                \"summary\": \"Delete a Widget\",\n                \"description\": \"Deletes an existing `Widget`.\"\n            },\n            \"parameters\": [\n                {\n                    \"name\": \"widgetId\",\n                    \"description\": \"A unique identifier for a `Widget`.\",\n                    \"schema\": {\n                        \"type\": \"string\"\n                    },\n                    \"in\": \"path\",\n                    \"required\": true\n                }\n            ]\n        }\n    },\n    \"components\": {\n        \"schemas\": {\n            \"Author\": {\n                \"title\": \"Root Type for Author\",\n                \"description\": \"The author of a book.\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\"\n                    },\n                    \"name\": {\n                        \"type\": \"string\"\n                    },\n                    \"dob\": {\n                        \"format\": \"date\",\n                        \"type\": \"string\"\n                    }\n                },\n                \"example\": {\n                    \"id\": \"jk-rowling\",\n                    \"name\": \"JK Rowling\",\n                    \"dob\": \"1968-01-01\"\n                }\n            },\n            \"Book\": {\n                \"title\": \"Root Type for Book\",\n                \"description\": \"Information about a book.\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"ddsn\": {\n                        \"type\": \"string\"\n                    },\n                    \"title\": {\n                        \"type\": \"string\"\n                    },\n                    \"author\": {\n                        \"$ref\": \"#/components/schemas/Author\"\n                    },\n                    \"publish-date\": {\n                        \"format\": \"date\",\n                        \"type\": \"string\"\n                    }\n                },\n                \"example\": {\n                    \"ddsn\": \"632.4\",\n                    \"title\": \"SQL For Dummies\",\n                    \"publish-date\": \"2001-05-13\"\n                }\n            },\n            \"Widget\": {\n                \"description\": \"\",\n                \"type\": \"object\"\n            }\n        },\n        \"responses\": {\n            \"NotFound\": {\n                \"content\": {\n                    \"application/json\": {\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                },\n                \"description\": \"Generic response when not found.\"\n            }\n        }\n    }\n}",
			"canonicalURL": "/github.com/EricWittmann/api-samples@c66cd48d9c43f67d7a4eac07f60ed3ae2b732cac/-/blob/enable/demo/src/main/resources/META-INF/openapi.json",
			"externalURLs": [
				{
					"url": "https://github.com/EricWittmann/api-samples/blob/c66cd48d9c43f67d7a4eac07f60ed3ae2b732cac/enable/demo/src/main/resources/META-INF/openapi.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}