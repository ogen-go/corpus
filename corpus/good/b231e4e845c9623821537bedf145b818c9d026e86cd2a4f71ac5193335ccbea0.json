{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/tcgdex/cards-database"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "meta/definitions/openapi.yaml",
			"byteSize": 21871,
			"content": "# OPEN-API API definition\nopenapi: 3.0.3\ninfo:\n  title: TCGdex API\n  description: \u003e-\n    A Multilanguage Pokémon TCG Database with Cards Pictures and most of the\n    informations contained on the cards.\n\n    You can find out more about TCGdex at\n    [https://www.tcgdex.net](https://www.tcgdex.net) or on\n    [Discord](https://discord.gg/NehYTAhsZE).\n  contact:\n    name: TCGdex\n    url: https://github.com/tcgdex/cards-database\n    email: contact@tcgdex.net\n  license:\n    name: MIT License\n    url: https://github.com/tcgdex/cards-database/blob/master/LICENSE\n  version: 2.0.0\nexternalDocs:\n  description: Find out more about TCGdex\n  url: http://www.tcgdex.net/docs\nservers:\n  - url: https://api.tcgdex.net/v2/{lang}\n    variables:\n      lang:\n        enum:\n          - en\n          - fr\n          - es\n          - it\n          - pt\n        default: en\ntags:\n  - name: cards\n    description: Fetch cards globally\n  - name: filters\n    description: differents requests to filter cards\npaths:\n  /cards:\n    get:\n      tags:\n        - cards\n      summary: fetch the list of cards\n      description: desc\n      operationId: cards\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CardResume'\n  /cards/{cardId}:\n    get:\n      tags:\n        - cards\n      summary: Finds Card by Global ID\n      description: Find a defined card thatusing its global id\n      operationId: findPetsByTags\n      parameters:\n        - name: cardId\n          in: path\n          description: Tags to filter by\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Card'\n        '404':\n          description: The Card doesn't exist\n  /sets:\n    get:\n      tags:\n        - filters\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SetResume'\n  /sets/{set}:\n    get:\n      tags:\n        - filters\n      parameters:\n        - name: set\n          in: path\n          description: the set ID or the set name\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Set'\n        '404':\n          description: The Set doesn't exist\n  /sets/{set}/{cardLocalId}:\n    get:\n      tags:\n        - cards\n      parameters:\n        - name: set\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: cardLocalId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Card'\n        '404':\n          description: the Set or cardLocalId are incorrect\n  /series:\n    get:\n      tags:\n        - filters\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SerieResume'\n  /series/{serie}:\n    get:\n      tags:\n        - filters\n      parameters:\n        - name: serie\n          in: path\n          description: the serie ID or name\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Serie'\n        '404':\n          description: The Serie doesn't exist\n  /categories:\n    get:\n      tags:\n        - filters\n      responses:\n        '200':\n          description: List cards categories\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /categories/{category}:\n    get:\n      tags:\n        - filters\n      parameters:\n        - name: category\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List cards with the category\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StringEndpoint'\n        '404':\n          description: The Category doesn't exist\n  /hp:\n    get:\n      tags:\n        - filters\n      responses:\n        '200':\n          description: List all different possibilities number of HP a card can have\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /hp/{hp}:\n    get:\n      tags:\n        - filters\n      parameters:\n        - name: hp\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Get the Pokémon cards containing specified number of HP\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StringEndpoint'\n        '404':\n          description: The HP count doesn't exist\n  /illustrators:\n    get:\n      tags:\n        - filters\n      responses:\n        '200':\n          description: Get all the Pokémon cards illustrators\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /illustrators/{illustrator}:\n    get:\n      tags:\n        - filters\n      parameters:\n        - name: illustrator\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Get the cards containing the specified illustrator\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StringEndpoint'\n        '404':\n          description: The Illustrator doesn't exist\n  /rarities:\n    get:\n      tags:\n        - filters\n      responses:\n        '200':\n          description: List cards rarities\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /rarities/{rarity}:\n    get:\n      tags:\n        - filters\n      parameters:\n        - name: rarity\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Get the cards containing the specified rarity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StringEndpoint'\n        '404':\n          description: The Rarity doesn't exist\n  /retreats:\n    get:\n      tags:\n        - filters\n      responses:\n        '200':\n          description: return the different number of retreats count\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /retreats/{retreat}:\n    get:\n      tags:\n        - filters\n      parameters:\n        - name: retreat\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Get the cards containing the specified retreat count\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StringEndpoint'\n        '404':\n          description: The Retreat count doesn't exist\n  /types:\n    get:\n      tags:\n        - filters\n      responses:\n        '200':\n          description: List all possible cards types\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /types/{type}:\n    get:\n      tags:\n        - filters\n      parameters:\n        - name: type\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Get the cards containing the specified type\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CardResume'\n        '404':\n          description: The Type doesn't exist\n  /dex-ids:\n    get:\n      tags:\n        - filters\n      responses:\n        '200':\n          description: List all possible Pokemon(s) Pokédex Ids that appeared in the TCG\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /dex-ids/{dexId}:\n    get:\n      tags:\n        - filters\n      parameters:\n        - name: dexId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Get the cards containing the specified dexId\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CardResume'\n        '404':\n          description: no cards contain the specified dexID\n  /energy-types:\n    get:\n      tags:\n        - filters\n      responses:\n        '200':\n          description: list the different Energy types an Energy card can have\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /energy-types/{energy-type}:\n    get:\n      tags:\n        - filters\n      parameters:\n        - name: energy-type\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Get the Energy cards containing the specified energy-type\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CardResume'\n        '404':\n          description: The specified energy-type doesn't exist\n  /regulation-marks:\n    get:\n      tags:\n        - filters\n      responses:\n        '200':\n          description: List the current regulation marks\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /regulation-marks/{regulation-mark}:\n    get:\n      tags:\n        - filters\n      parameters:\n        - name: regulation-mark\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Get every cards respecting the specified regulation-mark\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CardResume'\n        '404':\n          description: The regulation-mark doesn't exist\n  /stages:\n    get:\n      tags:\n        - filters\n      responses:\n        '200':\n          description: Get all the possible stages a Pokémon card can have\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /stages/{stage}:\n    get:\n      tags:\n        - filters\n      parameters:\n        - name: stage\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Get all the cards having the specified stage\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CardResume'\n        '404':\n          description: The stage doesn't exist\n  /suffixes:\n    get:\n      tags:\n        - filters\n      responses:\n        '200':\n          description: Get all the cards having the specified suffix\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /suffixes/{suffix}:\n    get:\n      tags:\n        - filters\n      parameters:\n        - name: suffix\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Get all the cards having the specified stage suffix\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CardResume'\n        '404':\n          description: The suffix doesn't exist\n  /trainer-types:\n    get:\n      tags:\n        - filters\n      responses:\n        '200':\n          description: Get the different trainer-types\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /trainer-types/{trainer-type}:\n    get:\n      tags:\n        - filters\n      parameters:\n        - name: trainer-type\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Get the cards containing with the specified trainer-type\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CardResume'\n        '404':\n          description: The trainer-type doesn't exist\n  /variants:\n    get:\n      tags:\n        - filters\n      responses:\n        '200':\n          description: Get the different variants available\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /variants/{variant}:\n    get:\n      tags:\n        - filters\n      parameters:\n        - name: variant\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Get the cards available in the specified variant\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CardResume'\n        '404':\n          description: The variant doesn't exist\ncomponents:\n  schemas:\n    WeakRes:\n      type: array\n      xml:\n        name: WeakResItem\n        wrapped: true\n      items:\n        required:\n          - type\n        type: object\n        properties:\n          type:\n            type: string\n            example: Psychic\n          value:\n            type: string\n            example: x2\n    SerieResume:\n      required:\n        - id\n        - name\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        logo:\n          type: string\n    Serie:\n      required:\n        - id\n        - name\n        - sets\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        logo:\n          type: string\n        sets:\n          type: array\n          items:\n            $ref: '#/components/schemas/SetResume'\n    Set:\n      required:\n        - cardCount\n        - cards\n        - id\n        - name\n      type: object\n      properties:\n        id:\n          type: string\n          example: base1\n        name:\n          type: string\n          example: Base Set\n        logo:\n          type: string\n          example: https://assets.tcgdex.net/en/base/base1/logo\n        symbol:\n          type: string\n          example: https://assets.tcgdex.net/univ/base/base1/symbol\n        cardCount:\n          required:\n            - official\n            - total\n          type: object\n          properties:\n            total:\n              type: number\n              example: 101\n            official:\n              type: number\n              example: 100\n            normal:\n              type: number\n            reverse:\n              type: number\n            holo:\n              type: number\n            firstEd:\n              type: number\n        cards:\n          type: array\n          items:\n            $ref: '#/components/schemas/CardResume'\n    SetResume:\n      required:\n        - cardCount\n        - id\n        - name\n      type: object\n      properties:\n        id:\n          type: string\n          example: base1\n        name:\n          type: string\n          example: Base Set\n        logo:\n          type: string\n          example: https://assets.tcgdex.net/en/base/base1/logo\n        symbol:\n          type: string\n          example: https://assets.tcgdex.net/univ/base/base1/symbol\n        cardCount:\n          required:\n            - official\n            - total\n          type: object\n          properties:\n            total:\n              type: number\n              example: 101\n            official:\n              type: number\n              example: 100\n    CardResume:\n      required:\n        - id\n        - localId\n        - name\n      type: object\n      properties:\n        id:\n          type: string\n          example: base1-1\n        localId:\n          type: string\n          example: '1'\n        image:\n          type: string\n          example: https://assets.tcgdex.net/en/base/base1/1\n        name:\n          type: string\n          example: Alakazam\n    Card:\n      required:\n        - category\n        - id\n        - legal\n        - localId\n        - name\n        - rarity\n        - set\n      type: object\n      properties:\n        id:\n          type: string\n          example: base1-1\n        localId:\n          type: string\n          example: '1'\n        image:\n          type: string\n          example: https://assets.tcgdex.net/en/base/base1/1\n        name:\n          type: string\n          example: Alakazam\n        illustrator:\n          type: string\n          example: Ken Sugimori\n        category:\n          type: string\n          example: Pokemon\n        rarity:\n          type: string\n          example: Rare\n        set:\n          $ref: '#/components/schemas/SetResume'\n        variants:\n          required:\n            - firstEdition\n            - holo\n            - normal\n            - reverse\n            - wPromo\n          type: object\n          properties:\n            normal:\n              type: boolean\n            reverse:\n              type: boolean\n            holo:\n              type: boolean\n            firstEdition:\n              type: boolean\n            wPromo:\n              type: boolean\n        hp:\n          type: number\n          example: 80\n        types:\n          type: array\n          items:\n            type: string\n            example: Psychic\n        evolveFrom:\n          type: string\n          example: Kadabra\n        stage:\n          type: string\n          example: Stage2\n        suffix:\n          type: string\n        item:\n          required:\n            - effect\n            - name\n          type: object\n          properties:\n            name:\n              type: string\n            effect:\n              type: string\n        trainerType:\n          type: string\n        energyType:\n          type: string\n        regulationMark:\n          type: string\n          example: D\n        legal:\n          type: object\n          properties:\n            standard:\n              type: boolean\n              example: false\n            expanded:\n              type: boolean\n              example: false\n        description:\n          type: string\n        level:\n          type: number\n          example: 30\n        abilities:\n          type: array\n          items:\n            type: object\n            properties:\n              type:\n                type: string\n                example: Poke-POWER\n              name:\n                type: string\n                example: Damage Swap\n              effect:\n                type: string\n                example: As often as you like...\n        attacks:\n          type: array\n          items:\n            required:\n              - name\n            type: object\n            properties:\n              cost:\n                type: array\n                items:\n                  type: string\n                  example: ''\n              name:\n                type: string\n                example: Confuse Ray\n              effect:\n                type: string\n                example: Flip a coin. If heads, ...\n              damage:\n                type: number\n                example: 30\n        retreat:\n          type: number\n          example: 3\n        dexId:\n          type: array\n          xml:\n            name: dexIdItem\n            wrapped: true\n          items:\n            type: number\n        weaknesses:\n          type: array\n          xml:\n            name: weakness\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/WeakRes'\n        resistances:\n          type: array\n          xml:\n            name: resistance\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/WeakRes'\n      # xml:\n      #   name: Card\n    StringEndpoint:\n      required:\n        - cards\n        - name\n      type: object\n      properties:\n        name:\n          type: string\n        cards:\n          type: array\n          items:\n            $ref: '#/components/schemas/CardResume'\n",
			"canonicalURL": "/github.com/tcgdex/cards-database@91865f7f02c49587bf1a3efa7e9b56aa0d31e7dc/-/blob/meta/definitions/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/tcgdex/cards-database/blob/91865f7f02c49587bf1a3efa7e9b56aa0d31e7dc/meta/definitions/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}