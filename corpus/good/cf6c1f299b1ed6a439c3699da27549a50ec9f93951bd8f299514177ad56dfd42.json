{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/truschival/DigitalRoosterGui"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "REST/openapi.yml",
			"byteSize": 11204,
			"content": "# SPDX-License-Identifier: GPL-3.0-or-later\n#\n# copyright (c) 2020  Thomas Ruschival \u003cthomas@ruschival.de\u003e\n# Licensed under GNU PUBLIC LICENSE Version 3 or later\n\nopenapi: \"3.0.0\"\ninfo:\n  description: Open API for Digital Rooster\n  version: \"1.0\"\n  title: DigitalRooster\n  license:\n    name: GPLv3\n\nservers:\n  - url: '{server}/api/1.0/'\n    variables:\n      server:\n        default: http://digitalrooster:6666\n\n###############################################################################\ncomponents:\n  # HTTP responses in case of errors\n  responses:\n    Success:\n      description: Request processed with success!\n    SuccessCreated:\n      description: Resource created with success!\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ResourceUuid'\n    InvalidRequest:\n      description: Invalid request parameters!\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    NotFound:\n      description: The specified resource was not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    Unauthorized:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n\n  # Objects #\n  schemas:\n    # Schema for error response body\n    Error:\n      type: object\n      properties:\n        code:\n          type: string\n        message:\n          type: string\n      required:\n        - code\n        - message\n   # UUid of created resource\n    ResourceUuid:\n      type: object\n      properties:\n        id:\n          type: string\n          description: 'Uuid of created resource'\n      required:\n        - id\n    # Station definition\n    Station:\n      required:\n        - name\n        - url\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        url:\n          type: string\n    # Array of Stations\n    Stations:\n      type: array\n      items:\n        $ref: '#/components/schemas/Station'\n\n    # PodcastSource definition\n    Podcast:\n      required:\n        - title\n        - url\n      properties:\n        id:\n          type: string\n        title:\n          type: string\n        url:\n          type: string\n        updateInterval:\n          type: integer\n        maxEpisodes:\n          type: integer\n\n    # Array of PodcastSources\n    Podcasts:\n      type: array\n      items:\n        $ref: '#/components/schemas/Podcast'\n\n    # Alarm definition\n    Alarm:\n      required:\n        - time\n        - period\n        - url\n        - enabled\n      properties:\n        time:\n          type: string\n        period:\n          type: string\n          enum:\n            - once\n            - daily\n            - workdays\n            - weekend\n        url:\n          type: string\n        enabled:\n          type: boolean\n        volume:\n          type: integer\n        id:\n          type: string\n\n    # Alarm array\n    Alarms:\n      type: array\n      items:\n        $ref: '#/components/schemas/Alarm'\n# parameters for functions #########################################\n  parameters:\n    ArrayLength:\n      name: length\n      in: query\n      description: number of items if omitted or invalid all remaining elements will be assumed\n      required: false\n      schema:\n        type: integer\n    ArrayOffset:\n      name: offset\n      in: query\n      description: offset from start of list if omitted or invalid 0 will be assumed\n      required: false\n      schema:\n        type: integer\n    id:\n      name: id\n      in: path\n      description: unique id to identify item\n      required: true\n      schema:\n        type: string\n\n###############################################################################\n# Paths as API Endpoints\n###############################################################################\npaths:\n# Internet Radio Streams\n  /radios:\n    get: # Get All Streams\n      operationId: iradio.read_all\n      tags:\n        - Radios\n      summary: Read all Internet radio streams\n      description: returns a list of Internet radio streams\n      parameters:\n        - $ref: '#/components/parameters/ArrayLength'\n        - $ref: '#/components/parameters/ArrayOffset'\n      responses:\n        200:\n          description: Successfully read stream list\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stations'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/NotFound'\n\n    post: # Create a stream\n      operationId: iradio.create\n      tags:\n        - Radios\n      summary: Create a station info and add it to the list\n      requestBody:\n        description: Internet radio station to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Station'\n      responses:\n        200:\n          $ref: '#/components/responses/SuccessCreated'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/InvalidRequest'\n        404:\n          $ref: '#/components/responses/NotFound'\n\n# Manipulate single Radios Stream\n  /radios/{id}:\n\n    get: # read single stream by id\n      operationId: iradio.read_one\n      tags:\n        - Radios\n      summary: Read one Internet radio station\n      parameters:\n        - $ref: '#/components/parameters/id'\n      responses:\n        200:\n          description: Successfully read a single radio station\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Station'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/InvalidRequest'\n        404:\n          $ref: '#/components/responses/NotFound'\n\n    delete: # delete stream identified by id\n      operationId: iradio.delete\n      tags:\n        - Radios\n      summary: Delete Internet radio station from list\n      parameters:\n        - $ref: '#/components/parameters/id'\n      responses:\n        200:\n          $ref: '#/components/responses/Success'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/NotFound'\n\n###############################################################################\n# Podcast Sources\n  /podcasts:\n    get: # Get all podcasts\n      operationId: podcasts.read_all\n      tags:\n        - Podcasts\n      summary: Read all podcast rss sources\n      parameters:\n        - $ref: '#/components/parameters/ArrayLength'\n        - $ref: '#/components/parameters/ArrayOffset'\n      responses:\n        200:\n          description: successfully read list\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Podcasts'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/InvalidRequest'\n        404:\n          $ref: '#/components/responses/NotFound'\n\n    post: # Add a podcast source with RSS feed\n      operationId: podcasts.create\n      tags:\n        - Podcasts\n      summary: Add a podcast source with RSS feed and add it to the list\n      requestBody:\n        description: Podcast source to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Podcast'\n      responses:\n        200:\n          $ref: '#/components/responses/SuccessCreated'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/InvalidRequest'\n\n  /podcasts/{id}:\n    get: # read single podcast by id\n      operationId: podcasts.read_one\n      tags:\n        - Podcasts\n      summary: Read one Podcast identified by id\n      parameters:\n       - $ref: '#/components/parameters/id'\n      responses:\n        200:\n          description: Successfully read Podcast\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Podcast'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/InvalidRequest'\n        404:\n          $ref: '#/components/responses/NotFound'\n\n    delete: # delete podcasts identified by id\n      operationId: podcasts.delete\n      tags:\n        - Podcasts\n      summary: Delete Podcast from list\n      parameters:\n        - $ref: '#/components/parameters/id'\n      responses:\n        200:\n          $ref: '#/components/responses/Success'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/InvalidRequest'\n        404:\n          $ref: '#/components/responses/NotFound'\n\n################################################################################\n# Alarms\n  /alarms:\n    get: # Get all Alarms\n      operationId: alarms.read_all\n      tags:\n        - Alarms\n      summary: Read all Alarms\n      parameters:\n        - $ref: '#/components/parameters/ArrayLength'\n        - $ref: '#/components/parameters/ArrayOffset'\n      responses:\n        200:\n          description: Successfully read alarm list\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Alarms'\n        404:\n          description: Wrong length/offset\n\n    post: # Create new alarm\n      operationId: alarms.create\n      tags:\n        - Alarms\n      summary: Create a new alarm entry and add it to the list\n      requestBody:\n        description: Alarm object to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Alarm'\n      responses:\n        200:\n          $ref: '#/components/responses/SuccessCreated'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/InvalidRequest'\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /alarms/{id}:\n    get: # read single alarm by id\n      operationId: alarms.read_one\n      tags:\n        - Alarms\n      summary: Read one Alarm\n      parameters:\n       - $ref: '#/components/parameters/id'\n      responses:\n        200:\n          description: Successfully read Alarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Alarm'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/InvalidRequest'\n        404:\n          $ref: '#/components/responses/NotFound'\n\n    delete: # delete alarm identified by id\n      operationId: alarms.delete\n      tags:\n        - Alarms\n      summary: Delete alarm from list\n      parameters:\n        - $ref: '#/components/parameters/id'\n      responses:\n        200:\n          $ref: '#/components/responses/Success'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/InvalidRequest'\n        404:\n          $ref: '#/components/responses/NotFound'\n",
			"canonicalURL": "/github.com/truschival/DigitalRoosterGui@20b66f473e5bbd475953909a00893d77d974c3ae/-/blob/REST/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/truschival/DigitalRoosterGui/blob/20b66f473e5bbd475953909a00893d77d974c3ae/REST/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}