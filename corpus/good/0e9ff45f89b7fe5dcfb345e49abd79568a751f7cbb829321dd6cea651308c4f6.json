{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/MEF-GIT/MEF-LSO-Sonata-SDK"
		},
		"file": {
			"name": "geographicAddressManagement.api.yaml",
			"size": 0,
			"path": "productApi/serviceability/address/geographicAddressManagement.api.yaml",
			"byteSize": 27306,
			"content": "openapi: 3.0.1\ninfo:\n  description: |\n    **This file forms part of MEF 121**\n\n    This API implements Business Requirements described in MEF 79\n\n    It allows the Buyer to retrieve address information from the Seller, including\n    exact formats, for addresses known to the Seller.\n\n    List of supported use cases:\n    \n    - Validate Address\n    - Retrieve Address by Identifier\n\n    Copyright 2021 MEF Forum and its contributors\n\n    This file includes content based on the TM Forum Geographic Address API\n    (TMF673 v4.0.1) available at\n    https://github.com/tmforum-apis/TMF673_GeographicAddress, which is licensed\n    by the TM Forum under the Apache License version 2.0. Such content has been\n    modified by the MEF Forum and its contributors.\n  title: Geographic Address Management\n  version: 7.0.1\nservers:\n  - url: 'https://{serverBase}/mefApi/sonata/geographicAddressManagement/v7/'\n    variables:\n      serverBase:\n        default: mef.net\n        description: The base of Seller's URL.\ntags:\n  - name: geographicAddressValidation\n  - name: geographicAddress\n  - name: events subscription\npaths:\n  /geographicAddressValidation:\n    post:\n      description: This operation creates a GeographicAddressValidation entity.\n      operationId: createGeographicAddressValidation\n      parameters:\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n\n            Reference: MEF 79 (Sn 8.8)\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity  represents more than one Seller.\n\n            Reference: MEF 79 (Sn 8.8)\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json;charset=utf-8:\n            schema:\n              $ref: '#/components/schemas/GeographicAddressValidation_Create'\n        description: The GeographicAddressValidation to be created\n        required: true\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/GeographicAddressValidation'\n          description:\n            'OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)'\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '422':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Error422'\n                type: array\n          description:\n            Unprocessable entity due to the business validation problems\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n      summary: Creates a GeographicAddressValidation\n      tags:\n        - geographicAddressValidation\n      x-codegen-request-body-name: geographicAddressValidation\n  '/geographicAddress/{id}':\n    get:\n      description: \u003e-\n        This operation retrieves a GeographicAddress entity.\n      operationId: retrieveGeographicAddress\n      parameters:\n        - description: Identifier of the GeographicAddress\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n\n            Reference: MEF 79 (Sn 8.8)\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity  represents more than one Seller.\n\n            Reference: MEF 79 (Sn 8.8)\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/GeographicAddress'\n          description: OK\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '404':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error404'\n          description: Not Found\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n      summary: Retrieves a GeographicAddress by ID\n      tags:\n        - geographicAddress\ncomponents:\n  schemas:\n    Error400Code:\n      description: \u003e-\n        One of the following error codes:\n\n        - missingQueryParameter: The URI is missing a required query-string\n        parameter\n\n        - missingQueryValue: The URI is missing a required query-string\n        parameter value\n\n        - invalidQuery: The query section of the URI is invalid.\n\n        - invalidBody: The request has an invalid body\n      enum:\n        - missingQueryParameter\n        - missingQueryValue\n        - invalidQuery\n        - invalidBody\n      type: string\n    Error:\n      description: \u003e\n        Standard Class used to describe API response error Not intended to be\n        used directly. The `code` in the HTTP header is used as a discriminator\n        for the type of error returned in runtime.\n      properties:\n        reason:\n          description: \u003e-\n            Text that explains the reason for error. This can be shown to a\n            client user.\n          maxLength: 255\n          type: string\n        message:\n          description: \u003e-\n            Text that provides mode details and corrective actions related to\n            the error. This can be shown to a client user.\n          type: string\n        referenceError:\n          description: URL pointing to documentation describing the error\n          format: uri\n          type: string\n      required:\n        - reason\n      type: object\n    Error400:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              $ref: '#/components/schemas/Error400Code'\n          required:\n            - code\n          type: object\n      description:\n        'Bad Request. (https://tools.ietf.org/html/rfc7231#section-6.5.1)'\n    Error401:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              $ref: '#/components/schemas/Error401Code'\n          required:\n            - code\n          type: object\n      description:\n        'Unauthorized.  (https://tools.ietf.org/html/rfc7235#section-3.1)'\n    Error401Code:\n      description: |-\n        One of the following error codes:\n        - missingCredentials: No credentials provided.\n        - invalidCredentials: Provided credentials are invalid or expired\n      enum:\n        - missingCredentials\n        - invalidCredentials\n      type: string\n    Error403:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              $ref: '#/components/schemas/Error403Code'\n          required:\n            - code\n          type: object\n      description:\n        'Forbidden. (https://tools.ietf.org/html/rfc7231#section-6.5.3)'\n    Error403Code:\n      description: |-\n        This code indicates that the server understood\n        the request but refuses to authorize it because\n        of one of the following error codes:\n        - accessDenied: Access denied\n        - forbiddenRequester: Forbidden requester\n        - tooManyUsers: Too many users\n      enum:\n        - accessDenied\n        - forbiddenRequester\n        - tooManyUsers\n      type: string\n    Error404:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              description: \u003e-\n                The following error code:\n\n                - notFound: A current representation for the target resource\n                not found\n              enum:\n                - notFound\n              type: string\n          required:\n            - code\n          type: object\n      description: \u003e-\n        Resource for the requested path not found.\n        (https://tools.ietf.org/html/rfc7231#section-6.5.4)\n    Error422:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              $ref: '#/components/schemas/Error422Code'\n            propertyPath:\n              description: \u003e\n                A pointer to a particular property of the payload that caused\n                the validation issue. It is highly recommended that this\n                property should be used.\n\n                Defined using JavaScript Object Notation (JSON) Pointer\n                (https://tools.ietf.org/html/rfc6901).\n              type: string\n          required:\n            - code\n          type: object\n      description: \u003e-\n        Unprocessable entity due to a business validation problem.\n        (https://tools.ietf.org/html/rfc4918#section-11.2)\n    Error422Code:\n      description: |\n        One of the following error codes:\n          - missingProperty: The property the Seller has expected is not present in the payload\n          - invalidValue: The property has an incorrect value\n          - invalidFormat: The property value does not comply with the expected value format\n          - referenceNotFound: The object referenced by the property cannot be identified in the Seller system\n          - unexpectedProperty: Additional property, not expected by the Seller has been provided\n          - tooManyRecords: the number of records to be provided in the response exceeds the Seller's threshold.\n          - otherIssue: Other problem was identified (detailed information provided in a reason)\n      enum:\n        - missingProperty\n        - invalidValue\n        - invalidFormat\n        - referenceNotFound\n        - unexpectedProperty\n        - tooManyRecords\n        - otherIssue\n      type: string\n    Error500:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              description: \u003e-\n                The following error code:\n\n                - internalError: Internal server error - the server encountered\n                an unexpected condition that prevented it from fulfilling the\n                request.\n              enum:\n                - internalError\n              type: string\n          required:\n            - code\n          type: object\n      description: \u003e-\n        Internal Server Error.\n        (https://tools.ietf.org/html/rfc7231#section-6.6.1)\n    FieldedAddress:\n      allOf:\n        - $ref: '#/components/schemas/GeographicAddress'\n        - properties:\n            country:\n              description: The country that the address is in\n              type: string\n            streetType:\n              description: \u003e-\n                The type of street (e.g., alley, avenue, boulevard, brae,\n                crescent, drive, highway, lane, terrace, parade, place, tarn,\n                way, wharf)\n              type: string\n            postcodeExtension:\n              description: \u003e-\n                An extension of a postal code. E.g. the part following the dash\n                in a US urban property address\n              type: string\n            city:\n              description: The city that the address is in\n              type: string\n            streetNr:\n              description: \u003e-\n                Number identifying a specific property on a public street. It\n                may be combined with streetNrLast for ranged addresses. MEF 79\n                defines it as required however as in certain countries it is\n                not used we make it optional in API.\n              type: string\n            locality:\n              description: The locality that the address is in\n              type: string\n            postcode:\n              description: \u003e-\n                A descriptor for a postal delivery area used to speed and\n                simplify the delivery of mail (also known as zip code) MEF 79\n                defines it as required however as in certain countries it is\n                not used we make it optional in API.\n              type: string\n            streetNrLast:\n              description:\n                Last number in a range of street numbers allocated to a\n                property\n              type: string\n            streetNrSuffix:\n              description: The first street number suffix\n              type: string\n            streetName:\n              description: Name of the street or other street type\n              type: string\n            stateOrProvince:\n              description: The State or Province that the address is in\n              type: string\n            streetNrLastSuffix:\n              description: Last street number suffix for a ranged address\n              type: string\n            geographicSubAddress:\n              $ref: '#/components/schemas/GeographicSubAddress'\n              description:\n                Additional fields used to specify an address, as detailed as\n                possible.\n            streetSuffix:\n              description: A modifier denoting a relative direction\n              type: string\n          required:\n            - city\n            - country\n            - streetName\n          type: object\n      description: \u003e-\n        A type of Address that has a discrete field and value for each type of\n        boundary or identifier down to the lowest level of detail. For example\n        \"street number\" is one field, \"street name\" is another field, etc.\n        Reference: MEF 79 (Sn 8.9.2)\n    FormattedAddress:\n      allOf:\n        - $ref: '#/components/schemas/GeographicAddress'\n        - properties:\n            country:\n              description: The country that the address is in\n              type: string\n            postcodeExtension:\n              description: \u003e-\n                An extension of a postal code. E.g. the part following the dash\n                in a US urban property address\n              type: string\n            stateOrProvince:\n              description: The State or Province that the address is in\n              type: string\n            city:\n              description: The city that the address is in\n              type: string\n            addrLine2:\n              description: The second address line in a formatted address\n              type: string\n            addrLine1:\n              description: The first address line in a formatted address\n              type: string\n            locality:\n              description: \u003e-\n                An area of defined or undefined boundaries within a local\n                authority or other legislatively defined area, usually rural or\n                semi-rural in nature\n              type: string\n            postcode:\n              description: \u003e-\n                A descriptor for a postal delivery area used to speed and\n                simplify the delivery of mail (also known as ZIP code)\n              type: string\n          required:\n            - addrLine1\n            - city\n            - country\n          type: object\n      description: \u003e-\n        A type of Address that has discrete fields for each type of boundary or\n        identifier with the exception of street and more specific location\n        details, which are combined into a maximum of two strings based on\n        local postal addressing conventions.  Reference: MEF 79 (Sn 8.9.3)\n    GeographicAddress:\n      description: \u003e-\n        Structured textual way of describing how to find a property in an urban\n        area (country properties are often defined differently).\n\n        Note: Address corresponds to SID UrbanPropertyAddress\n      discriminator:\n        mapping:\n          FieldedAddress: '#/components/schemas/FieldedAddress'\n          FormattedAddress: '#/components/schemas/FormattedAddress'\n          MEFGeographicPoint: '#/components/schemas/MEFGeographicPoint'\n          GeographicAddressLabel: '#/components/schemas/GeographicAddressLabel'\n        propertyName: '@type'\n      properties:\n        hasPublicSite:\n          description: \u003e-\n            This attribute specifies if that Address contains Service Sites\n            that are public such as Meet-Me-Rooms at an interconnect location\n            or a shared telecom room in the basement of a multi-tenant building\n          readOnly: true\n          type: boolean\n        '@type':\n          description: \u003e\n            This field is used as discriminator. The value is the name of one\n            of the types that inherit from it using 'allOf', i.e. one of\n            FieldedAddress, FormattedAddress, GeographicAddressLabel,\n            MEFGeographicPoint. Moreover, it might discriminate for an\n            additional related place as defined in '@schemaLocation'.\n          type: string\n        allowsNewSite:\n          description: \u003e-\n            This attribute specifies if a Buyer must use one of the known\n            existing Service Sites at this location for any Products delivered\n            to this Address. For example, if a particular building owner\n            mandated that all interconnects be done in a shared Public\n            Meet-Me-Room, this attribute would be set to False for that\n            Address.\n          readOnly: true\n          type: boolean\n        id:\n          description: Unique identifier of the place\n          readOnly: true\n          type: string\n        href:\n          description: Unique reference of the place\n          readOnly: true\n          type: string\n        '@schemaLocation':\n          description: \u003e-\n            A URI to a JSON-Schema file that defines additional attributes and\n            relationships. May be used to define additional GeographicAddress\n            types. Usage of this attribute must be agreed upon between Buyer\n            and Seller.\n          format: uri\n          type: string\n        associatedGeographicAddress:\n          $ref: '#/components/schemas/FieldedAddress'\n          readOnly: true\n          description:\n            A Fielded Address that is associated with the Geographic Point or\n            the Geographic Address Label.\n      required:\n        - '@type'\n      type: object\n    GeographicAddressLabel:\n      allOf:\n        - $ref: '#/components/schemas/GeographicAddress'\n        - properties:\n            externalReferenceId:\n              description: \u003e-\n                The unique reference to an Address as provided by the\n                Administrative Authority.\n              type: string\n            externalReferenceType:\n              description: \u003e-\n                The organization or standard from the organization that\n                administers this Geographic Address Label ensuring it is unique\n                within the Administrative Authority. The value(s) to be used\n                are to be agreed during the onboarding. For North American\n                providers this would normally be CLLI (Common Language Location\n                Identifier) code.\n              type: string\n          required:\n            - externalReferenceId\n            - externalReferenceType\n          type: object\n      description: \u003e-\n        A unique identifier controlled by a generally accepted independent\n        administrative authority that specifies a fixed geographical location. \n\n        Reference: MEF 79 (Sn 8.9.4)\n    GeographicAddressValidation:\n      description: This resource is used to manage address validation response.\n      properties:\n        validationResult:\n          $ref: '#/components/schemas/MEFValidationResultType'\n          description:\n            Result of the address validation (success, partial, fail)\n        alternateGeographicAddress:\n          items:\n            $ref: '#/components/schemas/GeographicAddress'\n          type: array\n          description: |\n            An array of zero or more Addresses known to the Seller that are\n            considered by the Seller to match the submittedGeographicAddress.\n            Not including the bestMatchAddress. MEF: Alternatives should be\n            provided regardless of whether best match was found.\n        provideAlternative:\n          description: \u003e\n            Indicator provided by the requester to specify if alternate\n            addresses must be provided in case of partial or fail result. MEF:\n            The attribute is kept for TMF API compliance. MEF requires this\n            attribute always to be set to 'true'. Alternatives should be\n            provided regardless of whether best match was found. The Seller is\n            allowed not to implement the support for 'false'\n          type: boolean\n        submittedGeographicAddress:\n          $ref: '#/components/schemas/GeographicAddress'\n          description:\n            'The address as submitted to validation. MEF: Structure used by the\n            buyer to request geographic address validation'\n        bestMatchGeographicAddress:\n          $ref: '#/components/schemas/GeographicAddress'\n          description:\n            Represents that the Seller is confident this is likely a direct\n            match to the submittedGeographicAddress\n      required:\n        - provideAlternative\n        - submittedGeographicAddress\n      type: object\n    GeographicAddressValidation_Create:\n      description: \u003e-\n        This resource is used to manage address validation request.\n\n\n        Skipped properties: alternateGeographicAddress,\n        bestMatchGeographicAddress, validationResult.\n      properties:\n        provideAlternative:\n          description: \u003e\n            Indicator provided by the requester to specify if alternate\n            addresses must be provided in case of partial or fail result. MEF:\n            The attribute is kept for TMF API compliance. MEF requires this\n            attribute always to be set to 'true'. Alternatives should be\n            provided regardless of whether best match was found. The Seller is\n            allowed not to implement the support for 'false'\n          type: boolean\n        submittedGeographicAddress:\n          $ref: '#/components/schemas/GeographicAddress'\n          description:\n            'The address as submitted to validation. MEF: Structure used by the\n            buyer to request geographic address validation'\n      required:\n        - provideAlternative\n        - submittedGeographicAddress\n      type: object\n    GeographicSubAddress:\n      description:\n        'Additional fields used to specify an address, as detailed as possible.'\n      properties:\n        buildingName:\n          description: \u003e\n            Allows for identification of places that require building name  as\n            part of addressing information\n          type: string\n        subUnit:\n          description: \u003e-\n            Representation of a MEFSubUnit It is used for describing subunit\n            within a subAddress e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER,\n            UNIT, WHARF.\n          items:\n            $ref: '#/components/schemas/MEFSubUnit'\n          type: array\n        levelType:\n          description: Describes level types within a building\n          type: string\n        levelNumber:\n          description:\n            'Used where a level type may be repeated e.g. BASEMENT 1, BASEMENT\n            2'\n          type: string\n        privateStreetNumber:\n          description: Private streets numbers internal to a private street\n          type: string\n        privateStreetName:\n          description: \u003e-\n            Private streets internal to a property (e.g. a university) may have\n            internal names that are not recorded by the land title office\n          type: string\n      type: object\n    MEFGeographicPoint:\n      allOf:\n        - $ref: '#/components/schemas/GeographicAddress'\n        - properties:\n            spatialRef:\n              description: \u003e-\n                The spatial reference system used to determine the coordinates.\n                The system used and the value of this field are to be agreed\n                during the onboarding process.\n              type: string\n            x:\n              description: \u003e-\n                The latitude expressed in the format specified by the\n                `spacialRef`\n              type: string\n            'y':\n              description: \u003e-\n                The longitude expressed in the format specified by the\n                `spacialRef`\n              type: string\n            z:\n              description: \u003e-\n                The elevation expressed in the format specified by the\n                `spacialRef`\n              type: string\n          required:\n            - spatialRef\n            - x\n            - 'y'\n          type: object\n      description: \u003e\n        A MEFGeographicPoint defines a geographic point through coordinates.\n        Reference: MEF 79 (Sn 8.9.5), MEF 79.0.2 (Sn 8.9.5)\n    MEFSubUnit:\n      description: Allows for sub unit identification\n      properties:\n        subUnitNumber:\n          description: \u003e-\n            The discriminator used for the subunit, often just a simple number\n            but may also be a range.\n          type: string\n        subUnitType:\n          description: \u003e-\n            The type of subunit e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER,\n            UNIT, WHARF.\n          type: string\n      required:\n        - subUnitNumber\n        - subUnitType\n      type: object\n    MEFValidationResultType:\n      description: |\n        Result of the address validation:\n        - success - best match found,\n        - partial - no best match but alternatives available,\n        - fail - neither best match nor alternatives provided\n      enum:\n        - success\n        - partial\n        - fail\n      type: string\n",
			"canonicalURL": "/github.com/MEF-GIT/MEF-LSO-Sonata-SDK@c99d5bce21fc77e2ecfba6f8d6b2111361380b86/-/blob/productApi/serviceability/address/geographicAddressManagement.api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/MEF-GIT/MEF-LSO-Sonata-SDK/blob/c99d5bce21fc77e2ecfba6f8d6b2111361380b86/productApi/serviceability/address/geographicAddressManagement.api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}