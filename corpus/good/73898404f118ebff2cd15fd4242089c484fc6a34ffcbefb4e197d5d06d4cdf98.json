{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/go-tk/jroh"
		},
		"file": {
			"name": "models.yaml",
			"size": 0,
			"path": "examples/output/oapi3/petstore/models.yaml",
			"byteSize": 10266,
			"content": "# File generated by jrohc. DO NOT EDIT.\nopenapi: 3.0.0\ninfo:\n  title: Models\n  version: ''\npaths: {}\ncomponents:\n  schemas:\n    addPetParams:\n      type: object\n      properties:\n        pet:\n          allOf:\n          - $ref: '#/components/schemas/pet'\n          - description: Information of pet.\n      required:\n      - pet\n    getPetParams:\n      type: object\n      properties:\n        petID:\n          allOf:\n          - $ref: '#/components/schemas/petID'\n          - description: The identifier of pet.\n      required:\n      - petID\n    getPetResults:\n      type: object\n      properties:\n        pet:\n          allOf:\n          - $ref: '#/components/schemas/pet'\n          - description: Information of pet.\n      required:\n      - pet\n    getPetsParams:\n      type: object\n      properties:\n        petIDs:\n          type: array\n          minItems: 1\n          maxItems: 30\n          items:\n            allOf:\n            - $ref: '#/components/schemas/petID'\n            - description: The identifier of pet.\n      required:\n      - petIDs\n    getPetsResults:\n      type: object\n      properties:\n        pets:\n          type: array\n          items:\n            allOf:\n            - $ref: '#/components/schemas/pet'\n            - description: Information of pet.\n    updatePetParams:\n      type: object\n      properties:\n        petPatch:\n          allOf:\n          - $ref: '#/components/schemas/petPatch'\n          - description: Updated information of pet.\n      required:\n      - petPatch\n    findPetsParams:\n      type: object\n      properties:\n        petStatus:\n          allOf:\n          - $ref: '#/components/schemas/petStatus'\n          - description: |-\n              The status of pet.\n\n              Constants:\n\n              - PET_AVAILABLE(1): Pet is available.\n              - PET_PENDING(2): Pet is pending.\n              - PET_SOLD(3): Pet is sold.\n      required:\n      - petStatus\n    findPetsResults:\n      type: object\n      properties:\n        pets:\n          type: array\n          items:\n            allOf:\n            - $ref: '#/components/schemas/pet'\n            - description: Information of pet.\n    createOrderParams:\n      type: object\n      properties:\n        order:\n          allOf:\n          - $ref: '#/components/schemas/order'\n          - description: Information of order.\n      required:\n      - order\n    createOrderResults:\n      type: object\n      properties:\n        orderID:\n          allOf:\n          - $ref: '#/components/schemas/orderID'\n          - description: The identifier of order.\n      required:\n      - orderID\n    getOrderParams:\n      type: object\n      properties:\n        orderID:\n          allOf:\n          - $ref: '#/components/schemas/orderID'\n          - description: The identifier of order.\n      required:\n      - orderID\n    getOrderResults:\n      type: object\n      properties:\n        order:\n          allOf:\n          - $ref: '#/components/schemas/order'\n          - description: Information of order.\n      required:\n      - order\n    createUserParams:\n      type: object\n      properties:\n        user:\n          allOf:\n          - $ref: '#/components/schemas/user'\n          - description: Information of user.\n      required:\n      - user\n    getUserParams:\n      type: object\n      properties:\n        userID:\n          allOf:\n          - $ref: '#/components/schemas/userID'\n          - description: The identifier of user.\n      required:\n      - userID\n    getUserResults:\n      type: object\n      properties:\n        user:\n          allOf:\n          - $ref: '#/components/schemas/user'\n          - description: Information of user.\n      required:\n      - user\n    getUsersParams:\n      type: object\n      properties:\n        userIDs:\n          type: array\n          minItems: 1\n          maxItems: 30\n          items:\n            allOf:\n            - $ref: '#/components/schemas/userID'\n            - description: The identifier of user.\n      required:\n      - userIDs\n    getUsersResults:\n      type: object\n      properties:\n        users:\n          type: array\n          items:\n            allOf:\n            - $ref: '#/components/schemas/user'\n            - description: Information of user.\n    updateUserParams:\n      type: object\n      properties:\n        userPatch:\n          allOf:\n          - $ref: '#/components/schemas/userPatch'\n          - description: Updated information of user.\n      required:\n      - userPatch\n    pet:\n      type: object\n      properties:\n        id:\n          allOf:\n          - $ref: '#/components/schemas/petID'\n          - description: The identifier of pet.\n        name:\n          allOf:\n          - $ref: '#/components/schemas/petName'\n          - description: The name of pet.\n        tags:\n          type: array\n          minItems: 1\n          items:\n            allOf:\n            - $ref: '#/components/schemas/petTag'\n            - description: A tag of pet.\n        status:\n          allOf:\n          - $ref: '#/components/schemas/petStatus'\n          - description: |-\n              The status of pet.\n\n              Constants:\n\n              - PET_AVAILABLE(1): Pet is available.\n              - PET_PENDING(2): Pet is pending.\n              - PET_SOLD(3): Pet is sold.\n      required:\n      - id\n      - name\n      - tags\n      - status\n    petPatch:\n      type: object\n      properties:\n        id:\n          allOf:\n          - $ref: '#/components/schemas/petID'\n          - description: The identifier of pet.\n        name:\n          allOf:\n          - $ref: '#/components/schemas/petName'\n          - description: The name of pet. Provide it if it needs to be changed.\n        tags:\n          type: array\n          items:\n            allOf:\n            - $ref: '#/components/schemas/petTag'\n            - description: A tag of pet. Provide it if it needs to be changed.\n        status:\n          allOf:\n          - $ref: '#/components/schemas/petStatus'\n          - description: |-\n              The status of pet. Provide it if it needs to be changed.\n\n              Constants:\n\n              - PET_AVAILABLE(1): Pet is available.\n              - PET_PENDING(2): Pet is pending.\n              - PET_SOLD(3): Pet is sold.\n      required:\n      - id\n    petID:\n      type: integer\n      format: int64\n      minimum: 1\n      example: 2020\n    petName:\n      type: string\n      minLength: 1\n      maxLength: 63\n      example: spike\n    petTag:\n      type: string\n      minLength: 1\n      maxLength: 63\n      example: puppy\n    petStatus:\n      type: integer\n      format: int32\n      enum:\n      - 1\n      - 2\n      - 3\n    order:\n      type: object\n      properties:\n        id:\n          allOf:\n          - $ref: '#/components/schemas/orderID'\n          - description: The identifier of order.\n        petID:\n          allOf:\n          - $ref: '#/components/schemas/petID'\n          - description: The identifier of pet.\n        quantity:\n          type: integer\n          format: int32\n          minimum: 1\n          description: The quantity of pets.\n        status:\n          allOf:\n          - $ref: '#/components/schemas/orderStatus'\n          - description: |-\n              The status of order.\n\n              Constants:\n\n              - ORDER_PLACED(1): Order is placed.\n              - ORDER_APPROVED(2): Order is approved.\n              - ORDER_DELIVERED(3): Order is delivered.\n      required:\n      - id\n      - petID\n      - quantity\n      - status\n    orderID:\n      type: integer\n      format: int64\n      minimum: 1\n      example: 202191010101011\n    orderStatus:\n      type: integer\n      format: int32\n      enum:\n      - 1\n      - 2\n      - 3\n    user:\n      type: object\n      properties:\n        id:\n          allOf:\n          - $ref: '#/components/schemas/userID'\n          - description: The identifier of user.\n        firstName:\n          allOf:\n          - $ref: '#/components/schemas/firstName'\n          - description: The first name of user.\n        lastName:\n          allOf:\n          - $ref: '#/components/schemas/lastName'\n          - description: The last name of user.\n        email:\n          allOf:\n          - $ref: '#/components/schemas/email'\n          - description: The email of user.\n        phone:\n          allOf:\n          - $ref: '#/components/schemas/phone'\n          - description: The phone of user.\n        password:\n          allOf:\n          - $ref: '#/components/schemas/password'\n          - description: The password of user.\n      required:\n      - id\n      - firstName\n      - lastName\n      - email\n      - password\n    userPatch:\n      type: object\n      properties:\n        id:\n          allOf:\n          - $ref: '#/components/schemas/userID'\n          - description: The identifier of user.\n        firstName:\n          allOf:\n          - $ref: '#/components/schemas/firstName'\n          - description: The first name of user. Provide it if it needs to be changed.\n        lastName:\n          allOf:\n          - $ref: '#/components/schemas/lastName'\n          - description: The last name of user. Provide it if it needs to be changed.\n        email:\n          allOf:\n          - $ref: '#/components/schemas/email'\n          - description: The email of user. Provide it if it needs to be changed.\n        phone:\n          allOf:\n          - $ref: '#/components/schemas/phone'\n          - description: The phone of user. Provide it if it needs to be changed.\n        password:\n          allOf:\n          - $ref: '#/components/schemas/password'\n          - description: The password of user. Provide it if it needs to be changed.\n      required:\n      - id\n    userID:\n      type: string\n      minLength: 1\n      maxLength: 31\n      pattern: '[a-z][a-z0-9]*'\n      example: tony1983\n    firstName:\n      type: string\n      minLength: 1\n      maxLength: 63\n      example: Tony\n    lastName:\n      type: string\n      minLength: 1\n      maxLength: 63\n      example: Montana\n    email:\n      type: string\n      minLength: 1\n      maxLength: 127\n      pattern: '[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+'\n      example: tony1983@gmail.com\n    phone:\n      type: string\n      minLength: 1\n      maxLength: 31\n      pattern: \\+[0-9]+ [0-9]+\n      example: +86 13333333333\n    password:\n      type: string\n      minLength: 6\n      maxLength: 31\n      example: 123abc\n",
			"canonicalURL": "/github.com/go-tk/jroh@de2d7d6f260eda1eb46bb714f2c29f9548a3e4c3/-/blob/examples/output/oapi3/petstore/models.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/go-tk/jroh/blob/de2d7d6f260eda1eb46bb714f2c29f9548a3e4c3/examples/output/oapi3/petstore/models.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}