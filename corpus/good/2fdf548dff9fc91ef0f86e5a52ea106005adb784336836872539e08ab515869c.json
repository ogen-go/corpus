{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/radixdlt/radixdlt"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/api.yaml",
			"byteSize": 145147,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: Radix Core API\n  description: |\n    This API provides endpoints from a node for integration with the Radix ledger.\n\n    # Overview\n\n    \u003e WARNING\n    \u003e\n    \u003e The Core API is __NOT__ intended to be available on the public web. It is\n    \u003e designed to be accessed in a private network.\n\n    The Core API is separated into three:\n    * The **Data API** is a read-only api which allows you to view and\n    sync to the state of the ledger.\n    * The **Construction API** allows you to construct and submit a transaction\n    to the network.\n    * The **Key API** allows you to use the keys managed by the node to sign transactions.\n\n    The Core API is a low level API primarily designed for network integrations\n    such as exchanges, ledger analytics providers, or hosted ledger data dashboards\n    where detailed ledger data is required and the integrator can be expected to\n    run their node to provide the Core API for their own consumption.\n\n    For a higher level API, see the [Gateway API](https://redocly.github.io/redoc/?url=https://raw.githubusercontent.com/radixdlt/radixdlt-network-gateway/main/generation/gateway-api-spec.yaml).\n\n    For node monitoring, see the [System API](https://redocly.github.io/redoc/?url=https://raw.githubusercontent.com/radixdlt/radixdlt/main/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/system/api.yaml).\n\n    ## Rosetta\n\n    The Data API and Construction API is inspired from [Rosetta API](https://www.rosetta-api.org/)\n    most notably:\n      * Use of a JSON-Based RPC protocol on top of HTTP Post requests\n      * Use of Operations, Amounts, and Identifiers as universal language to\n      express asset movement for reading and writing\n\n    There are a few notable exceptions to note:\n      * Fetching of ledger data is through a Transaction stream rather than a\n      Block stream\n      * Use of `EntityIdentifier` rather than `AccountIdentifier`\n      * Use of `OperationGroup` rather than `related_operations` to express related\n      operations\n      * Construction endpoints perform coin selection on behalf of the caller.\n      This has the unfortunate effect of not being able to support high frequency\n      transactions from a single account. This will be addressed in future updates.\n      * Construction endpoints are online rather than offline as required by Rosetta\n\n    Future versions of the api will aim towards a fully-compliant Rosetta API.\n\n    ## Enabling Endpoints\n\n    All endpoints are enabled when running a node with the exception of two endpoints, each of\n    which need to be manually configured to access:\n    * `/transactions` endpoint must be enabled with configuration `api.transaction.enable=true`.\n    This is because the transactions endpoint requires additional database storage which may not\n    be needed for users who aren't using this endpoint\n    * `/key/sign` endpoint must be enable with configuration `api.sign.enable=true`. This is a\n    potentially dangerous endpoint if accessible publicly so it must be enabled manually.\n\n    ## Client Code Generation\n\n    We have found success with generating clients against the\n    [api.yaml specification](https://raw.githubusercontent.com/radixdlt/radixdlt/main/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/api.yaml).\n    See https://openapi-generator.tech/ for more details.\n\n    The OpenAPI generator only supports openapi version 3.0.0 at present, but you can\n    change 3.1.0 to 3.0.0 in the first line of the spec without affecting generation.\n\n    # Data API Flow\n\n    The Data API can be used to synchronize a full or partial view of the ledger,\n    transaction by transaction.\n\n    ![Data API Flow](https://raw.githubusercontent.com/radixdlt/radixdlt/feature/update-documentation/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/documentation/data_sequence_flow.png)\n\n    # Construction API Flow\n\n    The Construction API can be used to construct and submit transactions to the network.\n\n    ![Construction API Flow](https://raw.githubusercontent.com/radixdlt/radixdlt/feature/open-api/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/documentation/construction_sequence_flow.png)\n\n    Unlike the Rosetta Construction API [specification](https://www.rosetta-api.org/docs/construction_api_introduction.html),\n    this Construction API selects UTXOs on behalf of the caller. This has the unfortunate\n    side effect of not being able to support high frequency transactions from a single\n    account due to UTXO conflicts. This will be addressed in a future release.\n\n  license:\n    name: The Radix License, Version 1.0\n    url: https://www.radixfoundation.org/licenses/LICENSE-v1\nservers:\n  - url: localhost:3333\ntags:\n  - name: entities\n    x-displayName: Entities\n    description: |\n      Entities represent something that can hold resource balances and data objects.\n      For example, a public key account is an entity which can hold token balances\n      on behalf of a private key holder.\n\n      ![Entity](https://raw.githubusercontent.com/radixdlt/radixdlt/feature/update-documentation/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/documentation/entity.png '#width=500px;')\n\n      An Operation is an update which occurs on an Entity. There are two types of\n      Operations:\n      * A **Resource** Operation which is a balance change on an Entity\n      * A **Data** Operation which is a data object update on an Entity\n\n      ![Operation](https://raw.githubusercontent.com/radixdlt/radixdlt/feature/update-documentation/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/documentation/operation.png '#width=500px;')\n  - name: objects\n    x-displayName: Objects\n    description: |\n      ## State Identifiers\n      The Radix network has no concept of blocks. Instead transactions are\n      managed in a flat ordered list. A hash chain is formed from these transactions\n      called a Transaction Accumulator. A Transaction Accumulator represents a point\n      in time of the ledger with a valid state.\n\n      ![State Identifiers](https://raw.githubusercontent.com/radixdlt/radixdlt/feature/update-documentation/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/documentation/state_identifiers.png '#width=500px;')\n\n      The transaction accumulator along with the index forms a State Identifier.\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/StateIdentifier\" exampleRef=\"#/components/examples/StateIdentifier\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n      ## Transactions\n\n      A Transaction is an atomic state update to the ledger. It consists of one or\n      more OperationGroups, each of which consist of one or more Operations.\n\n      ![Transaction Operations](https://raw.githubusercontent.com/radixdlt/radixdlt/feature/update-documentation/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/documentation/transaction_operations.png)\n\n      A Committed Transaction has additional information such as the State Identifier\n      which results after committing the transaction.\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/CommittedTransaction\" exampleRef=\"#/components/examples/CommittedTransaction\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n      ## Operation Groups\n\n      Similar to the [Rosetta API](https://www.rosetta-api.org/), both reading and\n      writing to the ledger use the same Address and Operation objects.\n\n      Every state change is expressed as an Operation which operates on a single\n      Entity. Any state change which consists of two accounts (such as\n      a token transfer) thus requires at least two Operations, one which debits\n      the sender and one which credits the receiver.\n\n      Unlike Rosetta, operations are more explicitly linked via Operation Groups. Each\n      Operation Group then represents a well formed accounting entry where credits\n      and debits are equivalent (unless minting or burning occurred).\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/OperationGroup\" exampleRef=\"#/components/examples/OperationGroup\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n      ## Operations\n\n      Operations operate on a single Entity and are associated with a single Amount\n      update and/or a single Data update.\n\n      * The `amount` property represents either a positive or negative change in balance of some token.\n      * The `data` property represents either the creation or deletion of a data object.\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/Operation\" exampleRef=\"#/components/examples/Operation\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n      ## Entity Identifiers\n\n      An Entity Identifier uniquely describes an entity which may have arbitrary balances and arbitrary data\n      objects. An Entity Identifier may further specify a Sub Address which should be treated as a separate\n      unique entity.\n\n      The interpretation of Entity Identifiers is discussed in detail in the Structure section.\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/EntityIdentifier\" exampleRef=\"#/components/examples/EntityIdentifier\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n      ## Amounts\n\n      A signed amount of a resource.\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/ResourceAmount\" exampleRef=\"#/components/examples/ResourceAmount\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n      ## Resource Identifiers\n\n      A Resource Identifier uniquely describes either some token or stake units for a validator.\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/ResourceIdentifier\" exampleRef=\"#/components/examples/ResourceIdentifier\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n      ## Data Updates\n\n      A Data update is the creation or destruction of a data object.\n\n      At any given time, an address will have up to one created-but-not-deleted data object of each type.\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/Data\" exampleRef=\"#/components/examples/Data\" showReadOnly={true} showWriteOnly={true} /\u003e\n  - name: structure\n    x-displayName: Structure\n    description: |\n      There are different types of entities on Radix, each of which can contain certain resources and data\n      objects.\n\n      The following table describes which resources and data objects are allowed for a given type of entity.\n\n      ![Structure](https://raw.githubusercontent.com/radixdlt/radixdlt/feature/update-documentation/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/documentation/structure.png '#width=500px;')\n\n      Overall, there are four main types of entities on Radix:\n      * **Account** is a regular public key account which can contain token balances and contain\n      StakeUnits, which represents a delegated amount of stake to a specific validator. Subentities under\n      an account-address contain assets which the account-address owns but is currently locked by the system.\n      An account is represented by its Bech32 account address.\n      * **Validator** is an entity representing a validating node on the network. The subentity `system` holds XRD\n      tokens which have been staked to this validator. A validator is represented by its Bech32 validator address.\n      * **Token** is an entity representing a Token Definition, represented by its Radix Resource Identifier (\"RRI\").\n      * **System** is an entity representing system level data such as current epoch and round, represented by the string \"system\".\n\n      If an entity identifier references a sub-entity, it should be considered a separate entity to the primary entity.\n      For example, for tracking the balance of an Account entity, any operations against an entity identifier\n      with a non-empty `entity_identifier.sub_entity` should be ignored, even if the `entity_identifier.address` matches.\n\n\n\n  - name: addressing\n    x-displayName: Addressing\n    description: |\n      Account addresses, Validator addresses and Token RRIs are all [Bech32 encoded](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki).\n\n      A Bech32 encoding consists of a prefix which is an ASCII human readable part \"HRP\", followed by the character \"1\",\n      followed by an encoded data payload, encoded as 32 values (5 bits) per character.\n\n      Assuming an address is legal, you can extract its HRP as the string before the last '1'. This can be used to\n      distinguish between Account, Validator and Token/RRI addresses.\n\n      * **Accounts** have a fixed HRP for a given Radix network. This is `rdx` on mainnet. The data part encodes the account's public key.\n      * **Validators** have a fixed HRP for a given Radix network. This is `rv` on mainnet. The data part encodes the validator's public key.\n      * **Tokens** have an HRP of the token's (not necessarily unique) symbol, followed by a suffix.\n        The suffix is fixed for a given Radix network, and is `_rr` on mainnet.\n        As an example, the mainnet address of the native token, XRD, is `xrd_rr1qy5wfsfh`.\n        The data part of the Bech32 encoding encodes the token's unique radix engine address on ledger.\n        This radix engine address is hex `01` for XRD,\n        and presently, hex `03 | SHA256(SHA256(signer_public_key_compressed_33_bytes | symbol_in_utf8_bytes)`\n        for user-created tokens, where | denotes the byte concatenation operator.\n\n      The Account and Validator HRPs and the Token HRP suffix for the current network should be fetched from the\n      `/network/configuration` endpoint.\n\n      It likely will not be necessary to actually decode the data parts of the Bech32 encodings, but if you do need to,\n      you should be warned that Radix addresses are *not* Segwit addresses. Many Bech32 libraries assume a Segwit\n      encoding, so may fail to extract the data from a Radix address.\n\n      In particular, the Segwit encoding assumes the first 5-bit-character of the 5-bit-per-character encoded data is a\n      witness version, and that this is followed by the witness programme bytes, encoded into 5-bit chunks, padded\n      with zeroes if necessary. Radix encoding just encodes its data bytes into 5-bit chunks with padded zeroes -\n      _without_ an initial single character version prefix. In other words, the padding and interpretation of the\n      encoded data differs between Radix and Segwit addresses.\n\n  - name: actions\n    x-displayName: Actions\n    description: |\n\n      There are further restrictions on which resource movement and data updates and how operations must\n      be combined. The following table describes what user actions (ledger updates that can be submitted\n      as a transaction) are available.\n\n      ![User Actions](https://raw.githubusercontent.com/radixdlt/radixdlt/feature/update-documentation/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/documentation/user_actions.png '#width=500px;')\n\n      1. **Transfer** of any token resource (including the native token XRD) from an account to another\n      account may be done by debiting an amount from the sending account and crediting the same amount\n      to the receiving account. **Minting** and **Burning** of tokens may also be done if one has\n      permissions to do so.\n      2. **Staking** may be started by transferring XRD from an account to a `prepared_stake` entity\n      with a specific validator. Once XRD is in this entity, at some point the system will move this\n      XRD to a Validator entity and mint StakeUnits into the originating account.\n      3. **Unstaking** may be started by transfering StakeUnits from an account to a `prepared_unstake`\n      entity. Once StakeUnits is in this entity, at some point the system will destroy this\n      StakeUnits and transfer XRD from the Validator entity into your `exiting_stake` entity. Once\n      the unlocking period is over the system will move that XRD from the `exiting_stake` entity into your\n      account.\n      4. **Validator Updates** may be started by destroying the current data object and creating a new\n      data object with the same type.\n      5. **New Token Definitions** may be created by destroying an `UnclaimedREAddr` and creating a\n      `TokenData` and `TokenMetadata` data object.\n  - name: xrd_transfer_example\n    x-displayName: Send XRD\n    description: |\n      Let's now go through an example of how to transfer XRD using the API.\n\n      For the purpose of our example, let's say we want to:\n      \u003e TRANSFER\n      \u003e 10.5 XRD\n      \u003e FROM\n      \u003e rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88\n      \u003e TO\n      \u003e rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\n\n\n      ## Entity Identifiers\n\n      First we need to specify the entities identifiers to be used. In our case,\n      we have two entity identifiers, one for the sender and one for the receiver.\n\n      Sender Entity Identifier:\n      ```\n      EntityIdentifier sender() {\n        return new EntityIdentifier()\n          .address(\"rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88\");\n      }\n      ```\n\n      Receiver Entity Identifier:\n      ```\n      EntityIdentifier receiver() {\n        return new EntityIdentifier()\n          .address(\"rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\");\n      }\n      ```\n\n      ## Resource Identifiers\n\n      Next we will need the Resource Identifier for the XRD Token which will be transferred.\n      XRD is Radix ledger's native token, used for staking and to pay fees. It is the only\n      token allowed with the symbol `xrd`, and has a reserved radix engine address of `1`\n      (`01` in hex).\n\n      On mainnet, its RRI is xrd_rr1qy5wfsfh and it's resource identifier is:\n      ```\n      TokenResourceIdentifier token() {\n        return new TokenResourceIdentifier()\n          .rri(\"xrd_rr1qy5wfsfh\")\n          .type(\"Token\");\n      }\n      ```\n\n      ## Amounts\n\n      Given our resource identifier we can now create resource balance changes. This will\n      be expressed as a Resource Amount. All amounts are expressed as `10^-18` subunits.\n      Thus, since we are transferring `1.5 XRD` this translates to a value of\n      `1500000000000000000` or the following amounts:\n\n      Sender Amount:\n      ```\n      Amount senderAmount() {\n        return new Amount()\n          .resourceIdentifier(token())\n          .value(\"-1500000000000000000\");\n      }\n      ```\n\n      Receiver Amount:\n      ```\n      Amount receiverAmount() {\n        return new Amount()\n          .resourceIdentifier(token())\n          .value(\"1500000000000000000\");\n      }\n      ```\n\n      ## Operations\n\n      We now combine our amounts with our Entity Identifiers to create Operations.\n      `\"Resource\"` is the type of our Operation since we are manipulating resource balances.\n\n      Sender Operation:\n      ```\n      Operation senderOperation() {\n        return new Operation()\n          .entityIdentifier(sender())\n          .amount(senderAmount())\n          .type(\"Resource\");\n      }\n      ```\n\n      Receiver Operation:\n      ```\n      Operation receiverOperation() {\n        return new Operation()\n          .entityIdentifier(receiver())\n          .amount(receiverAmount())\n          .type(\"Resource\");\n      }\n      ```\n\n      ## Operation Group\n\n      We then combine operations into a group. Note that the sender operation must be first.\n\n      ```\n      OperationGroup operationGroup() {\n        return new OperationGroup()\n          .addOperationsItem(senderOperation())\n          .addOperationsItem(receiverOperation());\n      }\n      ```\n\n      ## Fee Payer\n\n      The last thing we need to add is to specify the fee payer account entity identifier.\n      In this case it will be the same account as the sender.\n\n      We can now also add the `network_identifier` and with this structure we can submit this\n      to `/construction/build`. This `network_identifier` needs to match the network identifier\n      of the node.\n\n      ```\n      ConstructionBuildRequest constructionBuildRequest() {\n        return new ConstructionBuildRequest()\n          .addOperationsGroupItem(operationGroup())\n          .feePayer(sender())\n          .networkIdentifier(new NetworkIdentifier().network(\"mainnet\"));\n      }\n\n      void main() {\n        ConstructionApi api = new ConstructionApi();\n        ConstructionBuildRequest request = constructionBuildRequest();\n        ConstructionBuildResponse response = api.constructionBuildPost(request);\n      }\n      ```\n\n      ## Unsigned Transaction\n\n      After submitting to `/construction/build`, we can take the `unsigned_transaction` and parse it\n      through `/construction/parse`.\n\n      ```\n      ConstructionApi api = new ConstructionApi();\n\n      ConstructionParseResponse sendParseRequest(String unsignedTransactionHex) {\n        ConstructionParseRequest request = new ConstructionParseRequest()\n          .unsignedTransaction(unsignedTransactionHex);\n        return api.constructionParsePost(request);\n      }\n\n      void main() {\n        ConstructionBuildRequest request = constructionBuildRequest();\n        ConstructionBuildResponse response = api.constructionBuildPost(request);\n        String unsignedTransactionHex = response.getUnsignedTransaction();\n        ConstructionParseResponse response = sendParseRequest(unsigendTransactionHex);\n        System.out.println(response);\n      }\n      ```\n\n      The response in json would look like:\n      ```\n      {\n        \"metadata\": {\n          \"fee\": {\n            \"resource_identifier\": {\n              \"rri\": \"xrd_rr1qy5wfsfh\",\n              \"type\": \"Token\"\n            },\n            \"value\": \"72000000000000000\"\n          }\n        },\n        \"operation_groups\": [\n          {\n            \"operations\": [\n              {\n                \"amount\": {\n                  \"resource_identifier\": {\n                    \"rri\": \"xrd_rr1qy5wfsfh\",\n                    \"type\": \"Token\"\n                  },\n                  \"value\": \"-96000000000000000000000000\"\n                },\n                \"substate\": {\n                  \"substate_identifier\": {\n                    \"identifier\": \"4db58b950fcf446140dd945c6adfd06daa0b520f7eddf0467583d96babff579d00000002\"\n                  },\n                  \"substate_operation\": \"SHUTDOWN\"\n                },\n                \"entity_identifier\": {\n                  \"address\": \"rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88\"\n                },\n                \"type\": \"Resource\"\n              },\n              {\n                \"metadata\": {\n                  \"substate_data_hex\": \"06000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab010000000000000000000000000000000000000000004f68ca6c8d0d7e082c0000\"\n                },\n                \"amount\": {\n                  \"resource_identifier\": {\n                    \"rri\": \"xrd_rr1qy5wfsfh\",\n                    \"type\": \"Token\"\n                  },\n                  \"value\": \"95999999928000000000000000\"\n                },\n                \"substate\": {\n                  \"substate_identifier\": {\n                    \"identifier\": \"65f61dba3ed40a438c4694e8947f73530c1c6ca6b8115371c05c6565f9fb6a4900000000\"\n                  },\n                  \"substate_operation\": \"BOOTUP\"\n                },\n                \"entity_identifier\": {\n                  \"address\": \"rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88\"\n                },\n                \"type\": \"Resource\"\n              }\n            ]\n          },\n          {\n            \"operations\": [\n              {\n                \"amount\": {\n                  \"resource_identifier\": {\n                    \"rri\": \"xrd_rr1qy5wfsfh\",\n                    \"type\": \"Token\"\n                  },\n                  \"value\": \"-95999999928000000000000000\"\n                },\n                \"substate\": {\n                  \"substate_identifier\": {\n                    \"identifier\": \"65f61dba3ed40a438c4694e8947f73530c1c6ca6b8115371c05c6565f9fb6a4900000000\"\n                  },\n                  \"substate_operation\": \"SHUTDOWN\"\n                },\n                \"entity_identifier\": {\n                  \"address\": \"rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88\"\n                },\n                \"type\": \"Resource\"\n              },\n              {\n                \"metadata\": {\n                  \"substate_data_hex\": \"06000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab010000000000000000000000000000000000000000004f68ca57bbfb708d160000\"\n                },\n                \"amount\": {\n                  \"resource_identifier\": {\n                    \"rri\": \"xrd_rr1qy5wfsfh\",\n                    \"type\": \"Token\"\n                  },\n                  \"value\": \"95999998428000000000000000\"\n                },\n                \"substate\": {\n                  \"substate_identifier\": {\n                    \"identifier\": \"65f61dba3ed40a438c4694e8947f73530c1c6ca6b8115371c05c6565f9fb6a4900000001\"\n                  },\n                  \"substate_operation\": \"BOOTUP\"\n                },\n                \"entity_identifier\": {\n                  \"address\": \"rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88\"\n                },\n                \"type\": \"Resource\"\n              },\n              {\n                \"metadata\": {\n                  \"substate_data_hex\": \"06000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b60100000000000000000000000000000000000000000000000014d1120d7b160000\"\n                },\n                \"amount\": {\n                  \"resource_identifier\": {\n                    \"rri\": \"xrd_rr1qy5wfsfh\",\n                    \"type\": \"Token\"\n                  },\n                  \"value\": \"1500000000000000000\"\n                },\n                \"substate\": {\n                  \"substate_identifier\": {\n                    \"identifier\": \"65f61dba3ed40a438c4694e8947f73530c1c6ca6b8115371c05c6565f9fb6a4900000002\"\n                  },\n                  \"substate_operation\": \"BOOTUP\"\n                },\n                \"entity_identifier\": {\n                  \"address\": \"rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\"\n                },\n                \"type\": \"Resource\"\n              }\n            ]\n          }\n        ]\n      }\n      ```\n\n      A couple of things to note above:\n      * There are two operation groups now as opposed to one, the first operation group contains the operations for\n      the fee, which should be paid by the `fee_payer` passed into `/construction/build`\n      * The second operation group contains more than the two original operations. What occurred here is the node\n      selected specific UTXOs to destroy and create (specified by the `substate` property) to perform the intent\n      of the operations initially passed in. That is, the balance changes of each entity should still be equivalent\n      to the original operations.\n\n      ## Signed Transaction\n\n      Once `payload_to_sign` has been signed, the original payload along with signature can be sent to\n      `/construction/finalize` in order to get a `signed_transaction`. This can then be submitted to\n      `construction/submit`. You have successfully submitted an XRD transfer transaction!\n\n      ```\n      ConstructionApi api = new ConstructionApi();\n\n      void main() {\n        ConstructionBuildRequest request = constructionBuildRequest();\n        ConstructionBuildResponse response = api.constructionBuildPost(request);\n        String unsignedTransactionHex = response.getUnsignedTransaction();\n        String payloadToSignHex = response.getPayloadToSign();\n\n        Signature signature = sign(payloadToSignHex);\n\n        ConstructionFinalizeRequest finalizeRequest = new ConstructionFinalizeRequest()\n          .unsignedTransaction(unsignedTransactionHex)\n          .signature(signature)\n          .networkIdentifier(new NetworkIdentifier().network(\"mainnet\"));\n        ConstructionFinalizeResponse finalizeResponse = api.constructionFinalizePost(finalizeRequest);\n\n        String signedTransactionHex = finalizeResponse.getSignedTransaction();\n        ConstructionSubmitRequest submitRequest = new ConstructionSubmitRequest()\n          .networkIdentifier(new NetworkIdentifier().network(\"mainnet\"))\n          .signedTransaction(signedTransactionHex);\n        ConstructionSubmitResponse submitResponse = api.constructionSubmitPost(submitRequest);\n      }\n      ```\n\n  - name: track_xrd_example\n    x-displayName: Track XRD Balances\n    description: |\n\n      This example walks through how to track XRD balances across all accounts. To do this we need the following:\n      * OpenAPI generated client code, in our example we will use the java version: [https://openapi-generator.tech/docs/generators/java]\n      * A database, in our example we will just use a transient Hashmap\n\n      ## Get Transactions\n\n      Let's start by performing a call to `/transactions` with `state_version` of `0` and `limit`\n      of `1000`. This will retrieve the first 1000 transactions on ledger, including the genesis\n      transaction.\n\n      Be sure to also match the `network_identifier` with the network the node is using.\n\n      ```\n      {\n        \"network_identifier\": {\n          \"network\": \"mainnet\"\n        },\n        \"state_identifier\": {\n          \"state_version\": 0\n        },\n        \"limit\": 1000\n      }\n      ```\n\n      The corresponding java client code looks like:\n\n      ```java\n      TransactionsApi api = new TransactionsApi();\n      NetworkIdentifier networkIdentifier = new NetworkIdentifier().network(\"mainnet\");\n\n      void main() {\n        PartialStateIdentifier stateIdentifier = new PartialStateIdentifier().stateVersion(0L);\n\n        CommittedTransactionsRequest committedTransactionsRequest = new CommittedTransactionsRequest()\n          .networkIdentifier(networkIdentifier)\n          .limit(1000L)\n          .stateIdentifier(stateIdentifier);\n\n        CommittedTransactionsResponse response = api.transactionsPost(committedTransactionsRequest);\n      }\n      ```\n\n      ## Get XRD Balance changes\n\n      Let's now expand our code to extract all XRD balance changes.\n\n      To extract account token balance changes in a transaction:\n      1. Flatmap to operations from all operation groups\n      2. Filter for operations which concern the XRD token, that is:\n          1. `amount` exists\n          2. `amount.resource_identifier.type` is `Token`\n          3. `rri` of the token is `xrd_rr1qy5wfsfh`\n      3. Group by `entity_identifier` and sum each `balance_change`\n\n      This gives us the change in XRD balance in that entity due to the transaction, in units of 10^(-18).\n\n      This forms the basis of tracking account balances over time.\n\n      ```java\n      TransactionsApi api = new TransactionsApi();\n      NetworkIdentifier networkIdentifier = new NetworkIdentifier().network(\"mainnet\");\n\n      /**\n       * Returns true if the operation contains an XRD balance change, otherwise returns false\n       */\n      boolean isXrd(Operation operation) {\n        if (operation.getAmount() == null) {\n          return false;\n        }\n        ResourceIdentifier identifier = op.getAmount().getResourceIdentifier();\n        if (!(identifier instanceof TokenResourceIdentifier)) {\n          return false;\n        }\n        TokenResourceIdentifier tokenResourceIdentifier = (TokenResourceIdentifier) identifier;\n        return tokenResourceIdentifier.getRri().equals(\"xrd_rr1qy5wfsfh\");\n      }\n\n      /**\n       * Returns the XRD balance change which occured on every entity from a set\n       * of operation groups.\n       */\n      Map\u003cEntityIdentifier, BigInteger\u003e operationGroupsToBalanceChanges(Stream\u003cOperationGroup\u003e operationGroups) {\n        return operationGroups\n          .flatMap(group -\u003e group.getOperations().stream())\n          .filter(this::isXrd)\n          .collect(Collectors.groupingBy(\n            Operation::getEntityIdentifier,\n            Collectors.mapping(\n              op -\u003e new BigInteger(op.getAmount().getValue()),\n              Collectors.reducing(BigInteger.ZERO, BigInteger::add)\n            )\n          ));\n      }\n\n      void main() {\n        PartialStateIdentifier stateIdentifier = new PartialStateIdentifier().stateVersion(0L);\n\n        CommittedTransactionsRequest committedTransactionsRequest = new CommittedTransactionsRequest()\n          .networkIdentifier(networkIdentifier)\n          .limit(1000L)\n          .stateIdentifier(stateIdentifier);\n\n        CommittedTransactionsResponse response = api.transactionsPost(committedTransactionsRequest);\n\n        // Extract out operation groups\n        Stream\u003cOperationGroup\u003e operationGroups = response.getTransactions().stream()\n          .flatMap(txn -\u003e txn.getOperationGroups().stream());\n\n        Map\u003cEntityIdentifier, BigInteger\u003e balanceChanges = operationGroupsToBalanceChanges(operationGroups);\n      }\n      ```\n\n      ## Update Balance Store\n\n      Now that we can compute balance change we can now start updating some balance store.\n\n      In this example we simply use a hash map from entity to balance. In your system you may\n      store these changes in a persistent database.\n\n      ```java\n      TransactionsApi api = new TransactionsApi();\n      NetworkIdentifier networkIdentifier = new NetworkIdentifier().network(\"mainnet\");\n\n      /**\n       * Our balance store\n       */\n      Map\u003cEntityIdentifier, BigInteger\u003e balances = new HashMap\u003c\u003e();\n\n      /**\n       * Returns true if the operation contains an XRD balance change, otherwise returns false\n       */\n      boolean isXrd(Operation operation) {\n        if (operation.getAmount() == null) {\n          return false;\n        }\n        ResourceIdentifier identifier = op.getAmount().getResourceIdentifier();\n        if (!(identifier instanceof TokenResourceIdentifier)) {\n          return false;\n        }\n        TokenResourceIdentifier tokenResourceIdentifier = (TokenResourceIdentifier) identifier;\n        return tokenResourceIdentifier.getRri().equals(\"xrd_rr1qy5wfsfh\");\n      }\n\n      /**\n       * Returns the XRD balance change which occured on every entity from a set\n       * of operation groups.\n       */\n      Map\u003cEntityIdentifier, BigInteger\u003e operationGroupsToBalanceChanges(Stream\u003cOperationGroup\u003e operationGroups) {\n        return operationGroups\n          .flatMap(group -\u003e group.getOperations().stream())\n          .filter(this::isXrd)\n          .collect(Collectors.groupingBy(\n            Operation::getEntityIdentifier,\n            Collectors.mapping(\n              op -\u003e new BigInteger(op.getAmount().getValue()),\n              Collectors.reducing(BigInteger.ZERO, BigInteger::add)\n            )\n          ));\n      }\n\n      /**\n       * Updates the balance store.\n       */\n      void updateStore(Map\u003cEntityIdentifier, BigInteger\u003e balanceChanges) {\n        balanceChanges.forEach((identifier, value) -\u003e balances.merge(identifier, value, BigInteger::add));\n      }\n\n      void main() throws ApiException {\n        PartialStateIdentifier stateIdentifier = new PartialStateIdentifier().stateVersion(0L);\n\n        CommittedTransactionsRequest committedTransactionsRequest = new CommittedTransactionsRequest()\n          .networkIdentifier(networkIdentifier)\n          .limit(1000L)\n          .stateIdentifier(stateIdentifier);\n\n        CommittedTransactionsResponse response = api.transactionsPost(committedTransactionsRequest);\n\n        // Extract out operation groups\n        Stream\u003cOperationGroup\u003e operationGroups = response.getTransactions().stream()\n          .flatMap(txn -\u003e txn.getOperationGroups().stream());\n\n        Map\u003cEntityIdentifier, BigInteger\u003e balanceChanges = operationGroupsToBalanceChanges(operationGroups);\n        updateStore(balanceChanges);\n      }\n      ```\n\n      ## Continual Sync\n\n      So far we've only been requesting for the initial 1000 transactions on ledger. We will now want to\n      continually sync as the ledger progresses.\n\n      To do this, we will keep our own current stateVersion and update it with the latest stateVersion\n      we've seen. On a persistent database, it will be important to update the stateVersion and ledger updates\n      atomically so that the sync process can handle process crashes gracefully and restart in a consistent\n      manner.\n\n      We can now add continually check for updates on ledger and keep our own state up to date. This can\n      easily look something like a cronjob process which periodically updates a local database.\n\n      ```java\n      TransactionsApi api = new TransactionsApi();\n      NetworkIdentifier networkIdentifier = new NetworkIdentifier().network(\"mainnet\");\n\n      /**\n       * Our balance store\n       */\n      long currentStateVersion = 0;\n      Map\u003cEntityIdentifier, BigInteger\u003e balances = new HashMap\u003c\u003e();\n\n      /**\n       * Returns true if the operation contains an XRD balance change, otherwise returns false\n       */\n      boolean isXrd(Operation operation) {\n        if (operation.getAmount() == null) {\n          return false;\n        }\n        ResourceIdentifier identifier = op.getAmount().getResourceIdentifier();\n        if (!(identifier instanceof TokenResourceIdentifier)) {\n          return false;\n        }\n        TokenResourceIdentifier tokenResourceIdentifier = (TokenResourceIdentifier) identifier;\n        return tokenResourceIdentifier.getRri().equals(\"xrd_rr1qy5wfsfh\");\n      }\n\n      /**\n       * Returns the XRD balance change which occured on every entity from a set\n       * of operation groups.\n       */\n      Map\u003cEntityIdentifier, BigInteger\u003e operationGroupsToBalanceChanges(Stream\u003cOperationGroup\u003e operationGroups) {\n        return operationGroups\n          .flatMap(group -\u003e group.getOperations().stream())\n          .filter(this::isXrd)\n          .collect(Collectors.groupingBy(\n            Operation::getEntityIdentifier,\n            Collectors.mapping(\n              op -\u003e new BigInteger(op.getAmount().getValue()),\n              Collectors.reducing(BigInteger.ZERO, BigInteger::add)\n            )\n          ));\n      }\n\n      /**\n       * Retrieves the current state version\n       */\n      long loadStateVersion() {\n        return this.currentStateVersion;\n      }\n\n      /**\n       * Updates the balance store.\n       */\n      void updateStore(long currentStateVersion, long nextStateVersion, Map\u003cEntityIdentifier, BigInteger\u003e balanceChanges) {\n        // Sanity check, in case we have multiple updater to our store\n        assert(this.currentStateVersion == currentStateVersion);\n\n        this.currentStateVersion = nextStateVersion;\n        balanceChanges.forEach((identifier, value) -\u003e balances.merge(identifier, value, BigInteger::add));\n      }\n\n      /**\n       * Requests for new transactions from a node and then updates the balance store\n       */\n      void update() throws ApiException {\n        long stateVersion = loadStateVersion();\n        PartialStateIdentifier stateIdentifier = new PartialStateIdentifier().stateVersion(stateVersion);\n\n        CommittedTransactionsRequest committedTransactionsRequest = new CommittedTransactionsRequest()\n          .networkIdentifier(networkIdentifier)\n          .limit(1000L)\n          .stateIdentifier(stateIdentifier);\n\n        CommittedTransactionsResponse response = api.transactionsPost(committedTransactionsRequest);\n\n        // Extract out operation groups\n        Stream\u003cOperationGroup\u003e operationGroups = response.getTransactions().stream()\n          .flatMap(txn -\u003e txn.getOperationGroups().stream());\n        Map\u003cEntityIdentifier, BigInteger\u003e balanceChanges = operationGroupsToBalanceChanges(operationGroups);\n        long nextStateVersion = stateVersion + txns.size();\n\n        // Update stateVersion and balances, on a database these must be updated atomically together\n        updateStore(stateVersion, nextStateVersion, balanceChanges);\n      }\n\n      void main() throws Exception {\n        while (true) {\n          update();\n          Thread.sleep(1000L);\n        }\n      }\n      ```\n\n  - name: track_all_balances_example\n    x-displayName: Track All Balances\n    description: |\n      Building off of the Track XRD Balances example, we can simply remove the filter on only tracking XRD\n      and build a complete mapping of assets owned by every entity `Entity -\u003e Resource -\u003e Amount`.\n\n      ```java\n      TransactionsApi api = new TransactionsApi();\n      NetworkIdentifier networkIdentifier = new NetworkIdentifier().network(\"mainnet\");\n\n      /**\n       * Our balance store\n       */\n      long currentStateVersion = 0;\n      Map\u003cEntityIdentifier, Map\u003cResourceIdentifier, BigInteger\u003e\u003e balances = new HashMap\u003c\u003e();\n\n      /**\n       * Returns the token balance change which occured on every entity from a set\n       * of operation groups.\n       */\n      Map\u003cEntityIdentifier, Map\u003cResourceIdentifier, BigInteger\u003e\u003e operationGroupsToBalanceChanges(Stream\u003cOperationGroup\u003e operationGroups) {\n        return operationGroups\n          .flatMap(group -\u003e group.getOperations().stream())\n          .filter(operation -\u003e operation.getAmount() != null)\n          .collect(Collectors.groupingBy(\n            Operation::getEntityIdentifier,\n            Collectors.groupingBy(\n              op -\u003e op.getAmount().getResourceIdentifier(),\n              Collectors.mapping(\n                op -\u003e new BigInteger(op.getAmount().getValue()),\n                Collectors.reducing(BigInteger.ZERO, BigInteger::add)\n              )\n            )\n          )\n        );\n      }\n\n      /**\n       * Retrieves the current state version\n       */\n      long loadStateVersion() {\n        return this.currentStateVersion;\n      }\n\n      /**\n       * Updates the balance store.\n       */\n      void updateStore(long currentStateVersion, long nextStateVersion, Map\u003cEntityIdentifier, Map\u003cResourceIdentifier, BigInteger\u003e\u003e balanceChanges) {\n        // Sanity check, in case we have multiple updater to our store\n        assert(this.currentStateVersion == currentStateVersion);\n\n        this.currentStateVersion = nextStateVersion;\n        balanceChanges.forEach((identifier, balanceMap) -\u003e {\n          balanceMap.forEach((resource, value) -\u003e\n            balances.merge(identifier, Map.of(resource, value), (b0, b1) -\u003e\n              Stream.concat(b0.entrySet().stream(), b1.entrySet().stream()).collect(\n                Collectors.groupingBy(\n                  Map.Entry::getKey,\n                  Collectors.mapping(Map.Entry::getValue, Collectors.reducing(BigInteger.ZERO, BigInteger::add))\n                )\n              )\n            )\n          );\n        });\n      }\n\n\n      /**\n       * Requests for new transactions from a node and then updates the balance store\n       */\n      void update() throws ApiException {\n        long stateVersion = loadStateVersion();\n        PartialStateIdentifier stateIdentifier = new PartialStateIdentifier().stateVersion(stateVersion);\n\n        CommittedTransactionsRequest committedTransactionsRequest = new CommittedTransactionsRequest()\n          .networkIdentifier(networkIdentifier)\n          .limit(1000L)\n          .stateIdentifier(stateIdentifier);\n\n        CommittedTransactionsResponse response = api.transactionsPost(committedTransactionsRequest);\n\n        // Extract out operation groups\n        Stream\u003cOperationGroup\u003e operationGroups = response.getTransactions().stream()\n          .flatMap(txn -\u003e txn.getOperationGroups().stream());\n\n        Map\u003cEntityIdentifier, Map\u003cResourceIdentifier, BigInteger\u003e\u003e balanceChanges = operationGroupsToBalanceChanges(operationGroups);\n        // Update stateVersion and balances, on a database these must be updated atomically together\n        updateStore(stateVersion, nextStateVersion, balanceChanges);\n      }\n\n      void main() throws Exception {\n        while (true) {\n          update();\n          Thread.sleep(1000L);\n        }\n      }\n      ```\n\n      ## Advanced\n\n      ### Filtering to just account balances\n\n      The above examples pull through the balances for any Entity, but typically you'll just want to pull down\n      usable balances in an account - that is, balances against an account entity.\n\n      To do this, we can check filter `entity_identifier` to those which have an `address` starting `rdx1`,\n      and no `sub_entity`. We filter out sub-entities because these are separate entities/balances to the\n      core account, used by the system for staking.\n\n      For more information, and to support non-mainnet addresses, see the Structure and Addressing sections.\n\n      ### Supporting networks other than mainnet\n\n      See the Addressing section for details on determining non-mainnet addresses.\n\n      ### Tracking UTXOs\n\n      The `operation.substate.substate_identifier.identifier` gives a hex-encoded identifier for the UTXO used in that\n      transaction. If `operation.substate.substate_operation` is `BOOTUP`, the UTXO was created, and if `SHUTDOWN`, it\n      was spent.\n\n      This can be used to track live UTXOs.\n\n      ### Consistency checks\n\n      Before saving a copy of a transaction to an index, you should check that the parent accumulator matches the\n      accumulator you have on record. Whilst we don't anticipate a need to rollback the ledger, this accumulator\n      check could be used to detect this (and can be used to rollback an index to the point where the accumulators\n      agree).\n\n      If you wish to also check the consistency of this accumulator, the following should be true:\n\n      `post_transaction_state_accumulator = SHA256(SHA256(pre_transaction_state_accumulator | transaction_identifier_hash))`\n\n      Where `|` is the byte concatenation operator. Note that this uses two rounds of SHA256. The first maps from\n      64 bytes to 32 bytes, the second from 32 bytes to 32 bytes.\n\n      ### Timestamps\n\n      If you care about the timestamps that various transactions were committed, you can track the `RoundData`\n      data object under the `system` entity.\n\n      Then, `timestamp` in `RoundData` gives a UNIX timestamp in milliseconds, derived from votes of each validator\n      of what the current wall clock time is. It is _not_ guaranteed to be increasing and should only be used for\n      convenience and not as an accurate representation of the actual time of commit.\n\n  - name: network\n    x-displayName: Network\n    description: Get info about the node and network.\n  - name: entity\n    x-displayName: Entity\n    description: Get info about an entity.\n  - name: mempool\n    x-displayName: Mempool\n    description: Get info about the mempool\n  - name: transactions\n    x-displayName: Transactions\n    description: Get the stream of committed transactions.\n  - name: construction\n    x-displayName: Construction\n    description: Construct a transaction for submission.\n  - name: key\n    x-displayName: Key\n    description: Sign a transaction\nx-tagGroups:\n  - name: Model\n    tags:\n      - entities\n      - structure\n      - addressing\n      - actions\n      - objects\n  - name: Examples\n    tags:\n      - track_xrd_example\n      - track_all_balances_example\n      - xrd_transfer_example\n  - name: Data API\n    tags:\n      - network\n      - entity\n      - mempool\n      - transactions\n  - name: Construction API\n    tags:\n      - construction\n  - name: Key API\n    tags:\n      - key\npaths:\n  \"/network/configuration\":\n    post:\n      summary: Get Network Configuration\n      description: Returns the network configuration of the network the node is connected\n        to.\n      tags:\n        - network\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/NetworkConfigurationRequest\"\n      responses:\n        '200':\n          description: Network Configuration\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/NetworkConfigurationResponse\"\n        '500':\n          description: An unexpected error\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UnexpectedError\"\n  \"/network/status\":\n    post:\n      summary: Get Network Status\n      description: Returns the current state and status of the node's copy of the ledger.\n        If the node is syncing, the `current_state_X` responses may be behind the global ledger.\n      tags:\n        - network\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/NetworkStatusRequest\"\n      responses:\n        '200':\n          description: Network Status\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/NetworkStatusResponse\"\n        '500':\n          description: An Unexpected Error\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UnexpectedError\"\n  \"/entity\":\n    post:\n      summary: Get Entity Information\n      description: Gets the balances and data objects at an entity at the current state of the ledger.\n      tags:\n        - entity\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/EntityRequest\"\n      responses:\n        '200':\n          description: Entity Balances and Data\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/EntityResponse\"\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UnexpectedError\"\n  \"/mempool\":\n    post:\n      summary: Get Mempool Transactions\n      description: Gets the transaction identifiers in the mempool\n      tags:\n        - mempool\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/MempoolRequest\"\n      responses:\n        '200':\n          description: Mempool Transaction Identifiers\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/MempoolResponse\"\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UnexpectedError\"\n  \"/mempool/transaction\":\n    post:\n      summary: Get Mempool Transaction\n      description: Gets the transaction from the mempool\n      tags:\n        - mempool\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/MempoolTransactionRequest\"\n      responses:\n        '200':\n          description: Mempool Transaction Identifiers\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/MempoolTransactionResponse\"\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UnexpectedError\"\n  \"/transactions\":\n    post:\n      summary: Get Committed Transactions\n      description: |\n        Returns an ordered sublist of committed transactions. This endpoint\n        is designed for lite clients to sync with the state of the ledger.\n\n        The example response demonstrates a transfer transaction.\n\n        There is a more detailed worked example of reading this endpoint in the\n        examples section.\n      tags:\n        - transactions\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/CommittedTransactionsRequest\"\n      responses:\n        '200':\n          description: Sublist of Committed Transactions\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/CommittedTransactionsResponse\"\n        '500':\n          description: An Unexpected Error\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UnexpectedError\"\n  \"/construction/derive\":\n    post:\n      summary: Derive Entity Identifier\n      description: Returns the entity identifier for an account, validator, or token given a public key\n      tags:\n        - construction\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/ConstructionDeriveRequest\"\n      responses:\n        '200':\n          description: Entity Identifier\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/ConstructionDeriveResponse\"\n  \"/construction/build\":\n    post:\n      summary: Build Transaction\n      tags:\n        - construction\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/ConstructionBuildRequest\"\n      responses:\n        '200':\n          description: An unsigned transaction\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/ConstructionBuildResponse\"\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UnexpectedError\"\n  \"/construction/parse\":\n    post:\n      summary: Parse Transaction\n      tags:\n        - construction\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/ConstructionParseRequest\"\n      responses:\n        '200':\n          description: An unsigned transaction\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/ConstructionParseResponse\"\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UnexpectedError\"\n  \"/construction/finalize\":\n    post:\n      summary: Finalize Transaction\n      tags:\n        - construction\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/ConstructionFinalizeRequest\"\n      responses:\n        '200':\n          description: An unsigned transaction\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/ConstructionFinalizeResponse\"\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UnexpectedError\"\n  \"/construction/hash\":\n    post:\n      summary: Get Transaction Hash\n      description: Get the transaction identifier of a signed transaction\n      tags:\n        - construction\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/ConstructionHashRequest\"\n      responses:\n        '200':\n          description: An unsigned transaction\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/ConstructionHashResponse\"\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UnexpectedError\"\n  \"/construction/submit\":\n    post:\n      summary: Submit Transaction\n      description: Submit a transaction to the mempool\n      tags:\n        - construction\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/ConstructionSubmitRequest\"\n      responses:\n        '200':\n          description: An unsigned transaction\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/ConstructionSubmitResponse\"\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UnexpectedError\"\n  \"/engine/configuration\":\n    post:\n      summary: Get Engine Configuration\n      tags:\n        - engine\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/EngineConfigurationRequest\"\n      responses:\n        '200':\n          description: An unsigned transaction\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/EngineConfigurationResponse\"\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UnexpectedError\"\n  \"/engine/forks-voting-results\":\n    post:\n      summary: Get forks voting results for the given epoch\n      tags:\n        - engine\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/ForksVotingResultsRequest\"\n      responses:\n        '200':\n          description: Forks voting results for the given epoch\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/ForksVotingResultsResponse\"\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UnexpectedError\"\n  \"/engine/status\":\n    post:\n      summary: Get Engine Current Status\n      tags:\n        - engine\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/EngineStatusRequest\"\n      responses:\n        '200':\n          description: Engine Status\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/EngineStatusResponse\"\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UnexpectedError\"\n  \"/key/list\":\n    post:\n      summary: Get public keys\n      tags:\n        - key\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/KeyListRequest\"\n      responses:\n        '200':\n          description: The node's public keys\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/KeyListResponse\"\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UnexpectedError\"\n  \"/key/sign\":\n    post:\n      summary: Sign transaction\n      tags:\n        - key\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/KeySignRequest\"\n      responses:\n        '200':\n          description: An unsigned transaction\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/KeySignResponse\"\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UnexpectedError\"\n  \"/key/vote\":\n    post:\n      summary: Vote for the candidate fork (if present)\n      tags:\n        - key\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/UpdateVoteRequest\"\n      responses:\n        '200':\n          description: Submitted vote transaction information\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UpdateVoteResponse\"\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UnexpectedError\"\n  \"/key/withdraw-vote\":\n    post:\n      summary: Withdraw the vote for the candidate fork\n      tags:\n        - key\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/UpdateVoteRequest\"\n      responses:\n        '200':\n          description: Submitted vote withdrawal transaction information\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UpdateVoteResponse\"\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UnexpectedError\"\ncomponents:\n  schemas:\n    NetworkConfigurationRequest:\n      type: object\n      example: {}\n    NetworkConfigurationResponse:\n      type: object\n      required:\n        - version\n        - network_identifier\n        - bech32_human_readable_parts\n      properties:\n        version:\n          description: Different versions regarding the node, network and api.\n          type: object\n          required:\n            - core_version\n            - api_version\n          properties:\n            core_version:\n              type: string\n            api_version:\n              type: string\n        network_identifier:\n          \"$ref\": \"#/components/schemas/NetworkIdentifier\"\n          description: The name of the network.\n        bech32_human_readable_parts:\n          \"$ref\": \"#/components/schemas/Bech32HRPs\"\n          description: The unique bech32 hrps used for addressing.\n      example:\n        network_identifier:\n          network: mainnet\n        bech32_human_readable_parts:\n          account_hrp: rdx\n          validator_hrp: rv\n          node_hrp: rn\n          resource_hrp_suffix: _rr\n    NetworkStatusRequest:\n      type: object\n      required:\n        - network_identifier\n      properties:\n        network_identifier:\n          \"$ref\": \"#/components/schemas/NetworkIdentifier\"\n          description: The name of the network.\n      example:\n        network_identifier:\n          network: mainnet\n    NetworkStatusResponse:\n      type: object\n      required:\n        - pre_genesis_state_identifier\n        - genesis_state_identifier\n        - current_state_identifier\n        - sync_status\n        - peers\n      properties:\n        pre_genesis_state_identifier:\n          \"$ref\": \"#/components/schemas/StateIdentifier\"\n          description: The ledger state identifier before the genesis transaction.\n        genesis_state_identifier:\n          \"$ref\": \"#/components/schemas/StateIdentifier\"\n          description: The ledger state identifier after the genesis transaction.\n        current_state_identifier:\n          \"$ref\": \"#/components/schemas/StateIdentifier\"\n          description: The current state identifier at the top of the node's copy of the ledger.\n        sync_status:\n          $ref: \"#/components/schemas/SyncStatus\"\n          description: Information on how synced the node is to the rest of the network.\n        peers:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Peer\"\n          description: List of peers of the node.\n      example:\n        pre_genesis_state_identifier:\n          state_version: 0\n          transaction_accumulator: \"0000000000000000000000000000000000000000000000000000000000000000\"\n        current_state_timestamp: 1627452363772\n        current_state_identifier:\n          state_version: 322001\n          transaction_accumulator: e31f8314a67236076ad6d46391e93a93d7b9d34de2062acc620541c09dd69f95\n        current_state_epoch: 1\n        current_state_round: 321991\n        genesis_state_identifier:\n          state_version: 1\n          transaction_accumulator: 1e62415e5fd95c63aff69142f1359cc6a981ff7169c128d266f45adf614d09b0\n        node_identifiers:\n          account_entity_identifier:\n            address: rdx1qspmwn5n0qyz685f20aevh4wglxxzg9k5t5vql20s4jqa7kj8hz0njclnh0mf\n          validator_entity_identifier:\n            address: rv1qwm5aymcpqk3az2nlwt9atj8e3sjpd4zarq86nu9vs80453acnuuklp5yl2\n        peers: []\n    EntityRequest:\n      type: object\n      required:\n        - network_identifier\n        - entity_identifier\n      properties:\n        network_identifier:\n          $ref: \"#/components/schemas/NetworkIdentifier\"\n          description: The name of the network.\n        entity_identifier:\n          description: The Entity for which current balance and data information will be retrieved.\n          \"$ref\": \"#/components/schemas/EntityIdentifier\"\n      example:\n        network_identifier:\n          network: mainnet\n        entity_identifier:\n          address: rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88\n    EntityResponse:\n      type: object\n      required:\n        - state_identifier\n        - balances\n        - data_objects\n      properties:\n        state_identifier:\n          $ref: \"#/components/schemas/StateIdentifier\"\n        balances:\n          description: Balances associated with the entity.\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/ResourceAmount\"\n        data_objects:\n          description: Data associated with the entity.\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/DataObject\"\n      example:\n        balances:\n          - resource_identifier:\n              rri: xrd_rr1qy5wfsfh\n              type: token\n            value: '13443027000000000000000'\n          - resource_identifier:\n              rri: veri_rr1qdtwzvy8lnfgl9t5tnj8f5fwl2znssnvx27vufcx7u3slv0gce\n              type: token\n            value: '1000000000000000000'\n          - resource_identifier:\n              validator: rv1q04u5zwtgffsqkvr08xqm6vpm3gwxh4uqwtjpx5p47ew0m0v8m5zs3m3jed\n              type: StakeUnit\n            value: '15000000000000000000000'\n        data_objects: []\n    MempoolRequest:\n      type: object\n      required:\n        - network_identifier\n      properties:\n        network_identifier:\n          $ref: \"#/components/schemas/NetworkIdentifier\"\n          description: The name of the network.\n      example:\n        network_identifier:\n          network: mainnet\n    MempoolResponse:\n      type: object\n      required:\n        - transaction_identifiers\n      properties:\n        transaction_identifiers:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TransactionIdentifier\"\n          description: List of transaction identifiers currently in the mempool.\n    MempoolTransactionRequest:\n      type: object\n      required:\n        - network_identifier\n        - transaction_identifier\n      properties:\n        network_identifier:\n          \"$ref\": \"#/components/schemas/NetworkIdentifier\"\n          description: The name of the network.\n        transaction_identifier:\n          $ref: \"#/components/schemas/TransactionIdentifier\"\n          description: Transaction Identifier to retrieve.\n      example:\n        network_identifier:\n          network: mainnet\n        transaction_identifier:\n          hash: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d99337193811842\n    MempoolTransactionResponse:\n      type: object\n      required:\n        - transaction\n      properties:\n        transaction:\n          $ref: \"#/components/schemas/Transaction\"\n          description: The transaction found in the mempool.\n    ConstructionDeriveRequest:\n      type: object\n      required:\n        - network_identifier\n        - public_key\n        - metadata\n      properties:\n        network_identifier:\n          \"$ref\": \"#/components/schemas/NetworkIdentifier\"\n          description: The name of the network.\n        public_key:\n          \"$ref\": \"#/components/schemas/PublicKey\"\n          description: Public key to be derived from.\n        metadata:\n          \"$ref\": \"#/components/schemas/ConstructionDeriveRequestMetadata\"\n          description: Data which specifies the type of entity to derive.\n      example:\n        network_identifier:\n          network: mainnet\n        public_key:\n          hex: 03b74e9378082d1e8953fb965eae47cc6120b6a2e8c07d4f85640efad23dc4f9cb\n        metadata:\n          type: Token\n          symbol: test\n    ConstructionDeriveResponse:\n      type: object\n      required:\n        - entity_identifier\n      properties:\n        entity_identifier:\n          \"$ref\": \"#/components/schemas/EntityIdentifier\"\n          description: The derived identifier\n      example:\n        entity_identifier:\n          address: test_rr1q0xjsd8e3ud8dexqntmse9n0mcjhepfr7y404dd3tfqqngerma\n    ConstructionDeriveRequestMetadata:\n      type: object\n      required:\n        - type\n      properties:\n        type:\n          type: string\n      discriminator:\n        propertyName: type\n        mapping:\n          Account: \"#/components/schemas/ConstructionDeriveRequestMetadataAccount\"\n          Validator: \"#/components/schemas/ConstructionDeriveRequestMetadataValidator\"\n          Token: \"#/components/schemas/ConstructionDeriveRequestMetadataToken\"\n          PreparedStakes: \"#/components/schemas/ConstructionDeriveRequestMetadataPreparedStakes\"\n          PreparedUnstakes: \"#/components/schemas/ConstructionDeriveRequestMetadataPreparedUnstakes\"\n          ExitingUnstakes: \"#/components/schemas/ConstructionDeriveRequestMetadataExitingUnstakes\"\n          ValidatorSystem: \"#/components/schemas/ConstructionDeriveRequestMetadataValidatorSystem\"\n    ConstructionDeriveRequestMetadataAccount:\n      allOf:\n        - \"$ref\": \"#/components/schemas/ConstructionDeriveRequestMetadata\"\n    ConstructionDeriveRequestMetadataValidator:\n      allOf:\n        - \"$ref\": \"#/components/schemas/ConstructionDeriveRequestMetadata\"\n    ConstructionDeriveRequestMetadataToken:\n      allOf:\n        - \"$ref\": \"#/components/schemas/ConstructionDeriveRequestMetadata\"\n        - type: object\n          required:\n            - symbol\n          properties:\n            symbol:\n              description: The symbol of the token\n              type: string\n    ConstructionDeriveRequestMetadataPreparedStakes:\n      allOf:\n        - \"$ref\": \"#/components/schemas/ConstructionDeriveRequestMetadata\"\n        - type: object\n          required:\n            - validator\n          properties:\n            validator:\n              $ref: \"#/components/schemas/EntityIdentifier\"\n    ConstructionDeriveRequestMetadataPreparedUnstakes:\n      allOf:\n        - \"$ref\": \"#/components/schemas/ConstructionDeriveRequestMetadata\"\n    ConstructionDeriveRequestMetadataExitingUnstakes:\n      allOf:\n        - \"$ref\": \"#/components/schemas/ConstructionDeriveRequestMetadata\"\n        - type: object\n          required:\n            - validator\n            - epoch_unlock\n          properties:\n            validator:\n              $ref: \"#/components/schemas/EntityIdentifier\"\n            epoch_unlock:\n              type: integer\n              format: int64\n    ConstructionDeriveRequestMetadataValidatorSystem:\n      allOf:\n        - \"$ref\": \"#/components/schemas/ConstructionDeriveRequestMetadata\"\n    ConstructionBuildRequest:\n      type: object\n      required:\n        - network_identifier\n        - operation_groups\n        - fee_payer\n      properties:\n        network_identifier:\n          $ref: \"#/components/schemas/NetworkIdentifier\"\n          description: The name of the network\n        operation_groups:\n          description: Operation groups which describe the intent of the request.\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/OperationGroup\"\n        fee_payer:\n          description: The address from which fees will be subtracted.\n          \"$ref\": \"#/components/schemas/EntityIdentifier\"\n        message:\n          description: An optional message payload encoded in hex with the Radix message encoding scheme.\n          type: string\n        disable_resource_allocate_and_destroy:\n          description: Disallow minting and burning of tokens (except for fees). Useful\n            for verification of transactions without needing to fetch additional substate data,\n            such as when verifying transactions in an offline environment.\n          type: boolean\n      example:\n        network_identifier:\n          network: mainnet\n          description: The name of the network\n        fee_payer:\n          address: rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88\n        operation_groups:\n          - operations:\n              - type: Resource\n                entity_identifier:\n                  address: rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88\n                amount:\n                  resource_identifier:\n                    type: Token\n                    rri: xrd_rr1qy5wfsfh\n                  value: \"-1500\"\n              - type: Resource\n                entity_identifier:\n                  address: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\n                amount:\n                  resource_identifier:\n                    type: Token\n                    rri: xrd_rr1qy5wfsfh\n                  value: '1500'\n    ConstructionBuildResponse:\n      type: object\n      required:\n        - unsigned_transaction\n        - payload_to_sign\n      properties:\n        unsigned_transaction:\n          description: Hex encoded unsigned transaction.\n          type: string\n        payload_to_sign:\n          description: Hex encoded hash payload to sign.\n          type: string\n      example:\n        unsigned_transaction: 07ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d99337193811842000000020100210000000000000000000000000000000000000000000000000000ffcb9e57d4000002004506000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329a636aa8c02c00000008000002004506000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329a636aa8c02bfa2402004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b60100000000000000000000000000000000000000000000000000000000000005dc00\n        payload_to_sign: 06f82577392151638e059f31b16e52b056358ff9b7b72bedef21d701dc3ffa0f\n    ConstructionParseRequest:\n      type: object\n      required:\n        - network_identifier\n        - transaction\n        - signed\n      properties:\n        network_identifier:\n          \"$ref\": \"#/components/schemas/NetworkIdentifier\"\n          description: The name of the network.\n        transaction:\n          type: string\n          description: Hex encoded transaction to parse.\n        signed:\n          type: boolean\n          description: Whether the transaction is signed or not. If not signed, parsing\n            will skip authorization checks.\n      example:\n        network_identifier:\n          network: mainnet\n        transaction: 0d000107ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000002010021000000000000000000000000000000000000000000000000000101ed50bab1800002004506000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329a6148f65d4e80000008000002004506000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329a6148f65d4e7f6a02004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000000000000000000000000009600\n        signed: false\n    ConstructionParseResponse:\n      type: object\n      required:\n        - operation_groups\n      properties:\n        operation_groups:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/OperationGroup\"\n          description: The parsed operation groups.\n        metadata:\n          $ref: \"#/components/schemas/ParsedTransactionMetadata\"\n          description: Metadata related to the transaction.\n      example:\n        metadata:\n          resource_identifier:\n            rri: xrd_rr1qy5wfsfh\n            type: Token\n          value: '72600000000000000'\n        operation_groups:\n          - operations:\n              - amount:\n                  resource_identifier:\n                    rri: xrd_rr1qy5wfsfh\n                    type: Token\n                  value: \"-24000000000000000000000000\"\n                substate:\n                  substate_identifier:\n                    identifier: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000002\n                  substate_operation: SHUTDOWN\n                entity_identifier:\n                  address: rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88\n                type: Resource\n              - metadata:\n                  substate_data_hex: 06000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329a6148f65d4e8000\n                amount:\n                  resource_identifier:\n                    rri: xrd_rr1qy5wfsfh\n                    type: Token\n                  value: '23999999927400000000000000'\n                substate:\n                  substate_identifier:\n                    identifier: e05bc84170aa74bcb0c7ed0393dc489afd8dbd761f68246d2f8de362b942707800000000\n                  substate_operation: BOOTUP\n                entity_identifier:\n                  address: rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88\n                type: Resource\n          - operations:\n              - amount:\n                  resource_identifier:\n                    rri: xrd_rr1qy5wfsfh\n                    type: Token\n                  value: \"-23999999927400000000000000\"\n                substate:\n                  substate_identifier:\n                    identifier: e05bc84170aa74bcb0c7ed0393dc489afd8dbd761f68246d2f8de362b942707800000000\n                  substate_operation: SHUTDOWN\n                entity_identifier:\n                  address: rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88\n                type: Resource\n              - metadata:\n                  substate_data_hex: 06000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329a6148f65d4e7f6a\n                amount:\n                  resource_identifier:\n                    rri: xrd_rr1qy5wfsfh\n                    type: Token\n                  value: '23999999927399999999999850'\n                substate:\n                  substate_identifier:\n                    identifier: e05bc84170aa74bcb0c7ed0393dc489afd8dbd761f68246d2f8de362b942707800000001\n                  substate_operation: BOOTUP\n                entity_identifier:\n                  address: rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88\n                type: Resource\n              - metadata:\n                  substate_data_hex: 06000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b6010000000000000000000000000000000000000000000000000000000000000096\n                amount:\n                  resource_identifier:\n                    rri: xrd_rr1qy5wfsfh\n                    type: Token\n                  value: '150'\n                substate:\n                  substate_identifier:\n                    identifier: e05bc84170aa74bcb0c7ed0393dc489afd8dbd761f68246d2f8de362b942707800000002\n                  substate_operation: BOOTUP\n                entity_identifier:\n                  address: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\n                type: Resource\n    ConstructionFinalizeRequest:\n      type: object\n      required:\n        - network_identifier\n        - unsigned_transaction\n        - signature\n      properties:\n        network_identifier:\n          \"$ref\": \"#/components/schemas/NetworkIdentifier\"\n          description: The name of the network\n        unsigned_transaction:\n          description: Hex encoded unsigned transaction.\n          type: string\n        signature:\n          description: The signature object containing the public key and signature of the `unsigned_transaction` bytes,\n            as detailed in the Signature object schema.\n          \"$ref\": \"#/components/schemas/Signature\"\n      example:\n        network_identifier:\n          network: mainnet\n          description: The name of the network\n        unsigned_transaction: 0d000107ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000002010021000000000000000000000000000000000000000000000000000101ed50bab1800002004506000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329a6148f65d4e80000008000002004506000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329a6148f65d4e7f6a02004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000000000000000000000000009600\n        signature:\n          public_key:\n            hex: ''\n          bytes: ''\n    ConstructionFinalizeResponse:\n      type: object\n      required:\n        - signed_transaction\n      properties:\n        signed_transaction:\n          description: Hex encoded signed transaction which can be submitted.\n          type: string\n      example:\n        signed_transaction: 07030e7094728c8d065c5db696977696bea9094f67bcfd4c021f99ec784e24023b0000000c0100210000000000000000000000000000000000000000000000000000ffcb9e57d4000002004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007c13bc4b1c16827082c00000008000002004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007ad6192165e31dff02c000002004506000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329b63364718000000000b015584aed8375f30b22a2203b77dbe15e5dc0a3618fb45ea30ee54a6ebe0054b673a471ad2214b7bd06c4228083643b57e095787c9fb01443e1c3d6890d28f60cf\n    ConstructionHashRequest:\n      type: object\n      required:\n        - network_identifier\n        - signed_transaction\n      properties:\n        network_identifier:\n          \"$ref\": \"#/components/schemas/NetworkIdentifier\"\n          description: The name of the network\n        signed_transaction:\n          description: Hex encoded signed transaction\n          type: string\n      example:\n        network_identifier:\n          network: mainnet\n        signed_transaction: 07030e7094728c8d065c5db696977696bea9094f67bcfd4c021f99ec784e24023b0000000c0100210000000000000000000000000000000000000000000000000000ffcb9e57d4000002004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007c13bc4b1c16827082c00000008000002004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007ad6192165e31dff02c000002004506000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329b63364718000000000b015584aed8375f30b22a2203b77dbe15e5dc0a3618fb45ea30ee54a6ebe0054b673a471ad2214b7bd06c4228083643b57e095787c9fb01443e1c3d6890d28f60cf\n    ConstructionHashResponse:\n      type: object\n      required:\n        - transaction_identifier\n      properties:\n        transaction_identifier:\n          description: The unique hashed identifier of the transaction\n          \"$ref\": \"#/components/schemas/TransactionIdentifier\"\n      example:\n        transaction_identifier:\n          hash: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d99337193811842\n    ConstructionSubmitRequest:\n      type: object\n      required:\n        - network_identifier\n        - signed_transaction\n      properties:\n        network_identifier:\n          \"$ref\": \"#/components/schemas/NetworkIdentifier\"\n          description: The name of the network\n        signed_transaction:\n          description: Hex encoded signed transaction to be submitted.\n          type: string\n      example:\n        network_identifier:\n          network: mainnet\n        signed_transaction: 07030e7094728c8d065c5db696977696bea9094f67bcfd4c021f99ec784e24023b0000000c0100210000000000000000000000000000000000000000000000000000ffcb9e57d4000002004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007c13bc4b1c16827082c00000008000002004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007ad6192165e31dff02c000002004506000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329b63364718000000000b015584aed8375f30b22a2203b77dbe15e5dc0a3618fb45ea30ee54a6ebe0054b673a471ad2214b7bd06c4228083643b57e095787c9fb01443e1c3d6890d28f60cf\n    ConstructionSubmitResponse:\n      type: object\n      required:\n        - transaction_identifier\n        - duplicate\n      properties:\n        transaction_identifier:\n          description: The unique hashed identifier of the transaction submitted.\n          \"$ref\": \"#/components/schemas/TransactionIdentifier\"\n        duplicate:\n          description: Is true if the transaction is a duplicate of an existing transaction\n            in the mempool.\n          type: boolean\n      example:\n        transaction_identifier:\n          hash: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d99337193811842\n        duplicate: false\n    CommittedTransactionsRequest:\n      description: A request to retrieve a sublist of committed transactions from the\n        ledger.\n      type: object\n      required:\n        - state_identifier\n        - network_identifier\n      properties:\n        network_identifier:\n          \"$ref\": \"#/components/schemas/NetworkIdentifier\"\n          description: The name of the network\n        state_identifier:\n          description: The state identifier point from which transactions should be returned.\n            For example, if you specify a `state_version` of 10, the first transaction in the response\n            will take the ledger from a `state_version` of 10 to 11, and so have a commited `state_version` of 11.\n            The ledger starts from a `state_version` of 0, with the first transaction being the genesis transaction.\n          \"$ref\": \"#/components/schemas/PartialStateIdentifier\"\n        limit:\n          description: The maximum number of transactions that will be returned.\n          \"$ref\": \"#/components/schemas/LongNumber\"\n      example:\n        network_identifier:\n          network: mainnet\n          description: The name of the network\n        state_identifier:\n          state_version: 40897\n        limit: 1\n    CommittedTransactionsResponse:\n      description: A response of committed transactions which specifies the state\n        updates which have occurred on ledger.\n      type: object\n      required:\n        - state_identifier\n        - transactions\n      properties:\n        state_identifier:\n          description: The committed ledger state identifier from which this transaction\n            list starts from.\n          \"$ref\": \"#/components/schemas/StateIdentifier\"\n        transactions:\n          description: A committed transactions list starting from the `state_identifier`.\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/CommittedTransaction\"\n      example:\n        state_identifier:\n          state_version: 40897\n          transaction_accumulator: dd61e3e2c9cdda8bf8973ea7d6dd4e6482c569fff45f0ca5e2bfd196f5bae4c9\n        transactions:\n          - metadata:\n              size: 360\n              signed_by:\n                hex: 02aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b6\n              fee:\n                resource:\n                  rri: xrd_rr1qy5wfsfh\n                  type: Token\n                value: '72000000000000000'\n              hex: 07030e7094728c8d065c5db696977696bea9094f67bcfd4c021f99ec784e24023b0000000c0100210000000000000000000000000000000000000000000000000000ffcb9e57d4000002004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007c13bc4b1c16827082c00000008000002004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007ad6192165e31dff02c000002004506000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329b63364718000000000b015584aed8375f30b22a2203b77dbe15e5dc0a3618fb45ea30ee54a6ebe0054b673a471ad2214b7bd06c4228083643b57e095787c9fb01443e1c3d6890d28f60cf\n              timestamp: 1627407310726\n            committed_state_identifier:\n              state_version: 40898\n              transaction_accumulator: 5ea573f2e31640d177047d14122f1015c262f0d14d522596068784406aa1d88f\n            transaction_identifier:\n              hash: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d99337193811842\n            operation_groups:\n              - metadata:\n                  action:\n                    amount: '72000000000000000'\n                    rri: xrd_rr1qy5wfsfh\n                    from: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\n                    type: BurnTokens\n                operations:\n                  - amount:\n                      resource_identifier:\n                        rri: xrd_rr1qy5wfsfh\n                        type: Token\n                      value: \"-2400000000000000000000000000\"\n                    substate:\n                      substate_identifier:\n                        identifier: 030e7094728c8d065c5db696977696bea9094f67bcfd4c021f99ec784e24023b0000000c\n                      substate_operation: SHUTDOWN\n                    entity_identifier:\n                      address: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\n                    type: Resource\n                  - metadata:\n                      substate_data_hex: 06000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007c13bc4b1c16827082c0000\n                    amount:\n                      resource_identifier:\n                        rri: xrd_rr1qy5wfsfh\n                        type: Token\n                      value: '2399999999928000000000000000'\n                    substate:\n                      substate_identifier:\n                        identifier: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000000\n                      substate_operation: BOOTUP\n                    entity_identifier:\n                      address: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\n                    type: Resource\n              - metadata:\n                  action:\n                    amount: '24000000000000000000000000'\n                    rri: xrd_rr1qy5wfsfh\n                    from: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\n                    to: rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88\n                    type: TokenTransfer\n                operations:\n                  - amount:\n                      resource_identifier:\n                        rri: xrd_rr1qy5wfsfh\n                        type: Token\n                      value: \"-2399999999928000000000000000\"\n                    substate:\n                      substate_identifier:\n                        identifier: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000000\n                      substate_operation: SHUTDOWN\n                    entity_identifier:\n                      address: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\n                    type: Resource\n                  - metadata:\n                      substate_data_hex: 06000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007ad6192165e31dff02c0000\n                    amount:\n                      resource_identifier:\n                        rri: xrd_rr1qy5wfsfh\n                        type: Token\n                      value: '2375999999928000000000000000'\n                    substate:\n                      substate_identifier:\n                        identifier: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000001\n                      substate_operation: BOOTUP\n                    entity_identifier:\n                      address: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\n                    type: Resource\n                  - metadata:\n                      substate_data_hex: 06000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329b63364718000000\n                    amount:\n                      resource_identifier:\n                        rri: xrd_rr1qy5wfsfh\n                        type: Token\n                      value: '24000000000000000000000000'\n                    substate:\n                      substate_identifier:\n                        identifier: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000002\n                      substate_operation: BOOTUP\n                    entity_identifier:\n                      address: rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88\n                    type: Resource\n    EngineConfigurationRequest:\n      type: object\n      required:\n        - network_identifier\n      properties:\n        network_identifier:\n          \"$ref\": \"#/components/schemas/NetworkIdentifier\"\n          description: The name of the network\n      example:\n        network_identifier:\n          network: mainnet\n    EngineConfigurationResponse:\n      type: object\n      required:\n        - forks\n        - checkpoints\n      properties:\n        checkpoints:\n          type: array\n          items:\n            $ref: \"#/components/schemas/EngineCheckpoint\"\n        forks:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/Fork\"\n    EngineStatusRequest:\n      type: object\n      required:\n        - network_identifier\n      properties:\n        network_identifier:\n          \"$ref\": \"#/components/schemas/NetworkIdentifier\"\n          description: The name of the network\n      example:\n        network_identifier:\n          network: mainnet\n    EngineStatusResponse:\n      type: object\n      required:\n        - engine_state_identifier\n        - validator_set\n      properties:\n        engine_state_identifier:\n          $ref: \"#/components/schemas/EngineStateIdentifier\"\n        validator_set:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Validator\"\n        upcoming_fork:\n          $ref: \"#/components/schemas/UpcomingFork\"\n    ForksVotingResultsRequest:\n      type: object\n      required:\n        - epoch\n      properties:\n        epoch:\n          type: integer\n          format: int64\n    ForksVotingResultsResponse:\n      type: object\n      required:\n        - forks_voting_results\n      properties:\n        forks_voting_results:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ForkVotingResult\"\n    ForkVotingResult:\n      type: object\n      required:\n        - epoch\n        - candidate_fork_id\n        - stake_percentage_voted\n      properties:\n        epoch:\n          type: integer\n          format: int64\n        candidate_fork_id:\n          type: string\n        stake_percentage_voted:\n          type: number\n          format: float\n    Validator:\n      type: object\n      required:\n        - validator_address\n        - stake\n      properties:\n        validator_address:\n          type: string\n        stake:\n          $ref: \"#/components/schemas/BigInteger\"\n    EngineCheckpoint:\n      type: object\n      required:\n        - engine_state_identifier\n      properties:\n        engine_state_identifier:\n          $ref: \"#/components/schemas/EngineStateIdentifier\"\n        checkpoint_transaction:\n          type: \"string\"\n    EngineStateIdentifier:\n      type: object\n      required:\n        - state_identifier\n        - epoch\n        - round\n        - timestamp\n      properties:\n        state_identifier:\n          $ref: \"#/components/schemas/StateIdentifier\"\n        epoch:\n          type: integer\n          format: int64\n        round:\n          type: integer\n          format: int64\n        timestamp:\n          type: integer\n          format: int64\n    UpcomingFork:\n      type: object\n      required:\n        - name\n        - epochs_remaining\n      properties:\n        name:\n          type: string\n        epochs_remaining:\n          type: integer\n          format: int64\n    KeyListRequest:\n      type: object\n      required:\n        - network_identifier\n      properties:\n        network_identifier:\n          $ref: \"#/components/schemas/NetworkIdentifier\"\n          description: The name of the network.\n    KeyListResponse:\n      type: object\n      required:\n        - public_keys\n      properties:\n        public_keys:\n          type: array\n          items:\n            $ref: \"#/components/schemas/PublicKeyEntry\"\n          description: List of keys the node supports.\n    KeySignRequest:\n      type: object\n      required:\n        - network_identifier\n        - unsigned_transaction\n        - public_key\n      properties:\n        network_identifier:\n          $ref: \"#/components/schemas/NetworkIdentifier\"\n          description: The name of the network.\n        unsigned_transaction:\n          type: string\n          description: Byte array of the unsigned transaction encoded in hex.\n        public_key:\n          $ref: \"#/components/schemas/PublicKey\"\n          description: The public key to use to sign the transaction.\n    KeySignResponse:\n      type: object\n      required:\n        - signed_transaction\n      properties:\n        signed_transaction:\n          type: string\n          description: Byte array of the signed transaction encoded in hex.\n      example:\n        signed_transaction: 07030e7094728c8d065c5db696977696bea9094f67bcfd4c021f99ec784e24023b0000000c0100210000000000000000000000000000000000000000000000000000ffcb9e57d4000002004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007c13bc4b1c16827082c00000008000002004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007ad6192165e31dff02c000002004506000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329b63364718000000000b015584aed8375f30b22a2203b77dbe15e5dc0a3618fb45ea30ee54a6ebe0054b673a471ad2214b7bd06c4228083643b57e095787c9fb01443e1c3d6890d28f60cf\n    UpdateVoteRequest:\n      type: object\n      required:\n        - network_identifier\n      properties:\n        network_identifier:\n          $ref: \"#/components/schemas/NetworkIdentifier\"\n          description: The name of the network\n    UpdateVoteResponse:\n      type: object\n      required:\n        - transaction_identifier\n        - duplicate\n      properties:\n        transaction_identifier:\n          description: The unique hashed identifier of the transaction submitted.\n          \"$ref\": \"#/components/schemas/TransactionIdentifier\"\n        duplicate:\n          description: Is true if the transaction is a duplicate of an existing transaction\n            in the mempool.\n          type: boolean\n      example:\n        transaction_identifier:\n          hash: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d99337193811842\n        duplicate: false\n    PublicKeyEntry:\n      type: object\n      required:\n        - public_key\n        - public_key_identifiers\n      properties:\n        public_key:\n          $ref: \"#/components/schemas/PublicKey\"\n        identifiers:\n          $ref: \"#/components/schemas/PublicKeyIdentifiers\"\n    PublicKeyIdentifiers:\n      type: object\n      required:\n        - account_entity_identifier\n        - validator_entity_identifier\n        - p2p_node\n      properties:\n        account_entity_identifier:\n          $ref: \"#/components/schemas/EntityIdentifier\"\n        validator_entity_identifier:\n          $ref: \"#/components/schemas/EntityIdentifier\"\n        p2p_node:\n          $ref: \"#/components/schemas/Peer\"\n    Fork:\n      type: object\n      required:\n        - name\n        - is_candidate\n        - engine_identifier\n        - engine_configuration\n      properties:\n        name:\n          type: string\n        is_candidate:\n          type: boolean\n        engine_identifier:\n          \"$ref\": \"#/components/schemas/EngineIdentifier\"\n        engine_configuration:\n          \"$ref\": \"#/components/schemas/EngineConfiguration\"\n    EngineConfiguration:\n      type: object\n      required:\n        - native_token\n        - maximum_message_length\n        - maximum_validators\n        - token_symbol_pattern\n        - unstaking_delay_epoch_length\n        - minimum_completed_proposals_percentage\n        - maximum_transaction_size\n        - maximum_transactions_per_round\n        - validator_fee_increase_debouncer_epoch_length\n        - maximum_rounds_per_epoch\n        - maximum_validator_fee_increase\n        - minimum_stake\n        - rewards_per_proposal\n        - reserved_symbols\n        - fee_table\n      properties:\n        native_token:\n          $ref: \"#/components/schemas/TokenResourceIdentifier\"\n        maximum_message_length:\n          type: integer\n        maximum_validators:\n          type: integer\n        token_symbol_pattern:\n          type: string\n        unstaking_delay_epoch_length:\n          type: integer\n          format: int64\n        minimum_completed_proposals_percentage:\n          type: integer\n        maximum_transaction_size:\n          type: integer\n          format: int64\n        maximum_transactions_per_round:\n          type: integer\n        validator_fee_increase_debouncer_epoch_length:\n          type: integer\n          format: int64\n        maximum_rounds_per_epoch:\n          type: integer\n          format: int64\n        maximum_validator_fee_increase:\n          type: integer\n        minimum_stake:\n          \"$ref\": \"#/components/schemas/ResourceAmount\"\n        rewards_per_proposal:\n          \"$ref\": \"#/components/schemas/ResourceAmount\"\n        reserved_symbols:\n          type: array\n          items:\n            type: string\n        fee_table:\n          \"$ref\": \"#/components/schemas/FeeTable\"\n    FeeTable:\n      type: object\n      required:\n        - per_up_substate_fee\n        - per_byte_fee\n      properties:\n        per_up_substate_fee:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/UpSubstateFeeEntry\"\n        per_byte_fee:\n          \"$ref\": \"#/components/schemas/ResourceAmount\"\n    UpSubstateFeeEntry:\n      type: object\n      required:\n        - substate_type_identifier\n        - fee\n      properties:\n        substate_type_identifier:\n          \"$ref\": \"#/components/schemas/SubstateTypeIdentifier\"\n        fee:\n          \"$ref\": \"#/components/schemas/ResourceAmount\"\n    SubstateTypeIdentifier:\n      type: object\n      required:\n        - type\n      properties:\n        type:\n          type: string\n    EngineIdentifier:\n      type: object\n      required:\n        - engine\n      properties:\n        engine:\n          type: string\n    Transaction:\n      type: object\n      required:\n        - transaction_identifier\n        - operation_groups\n        - metadata\n      properties:\n        transaction_identifier:\n          description: The unique identifier for the transaction.\n          \"$ref\": \"#/components/schemas/TransactionIdentifier\"\n        operation_groups:\n          description: Transactions are split into operation groups which are roughly\n            equivalent to ledger accounting entries where all credits have an equivalent\n            debit amount.\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/OperationGroup\"\n        metadata:\n          description: Metadata about the transaction, such as size and fee paid.\n          \"$ref\": \"#/components/schemas/CommittedTransactionMetadata\"\n    CommittedTransaction:\n      description: A transaction which has been committed on ledger.\n      type: object\n      required:\n        - transaction_identifier\n        - committed_state_identifier\n        - operation_groups\n        - metadata\n      properties:\n        transaction_identifier:\n          description: The unique identifier for the transaction.\n          \"$ref\": \"#/components/schemas/TransactionIdentifier\"\n        committed_state_identifier:\n          description: The ledger state identifier following the commit of this\n            transaction.\n          \"$ref\": \"#/components/schemas/StateIdentifier\"\n        operation_groups:\n          description: Transactions are split into operation groups which are roughly\n            equivalent to ledger accounting entries where all credits have an equivalent\n            debit amount.\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/OperationGroup\"\n        metadata:\n          description: Metadata about the transaction, such as size and fee paid.\n          \"$ref\": \"#/components/schemas/CommittedTransactionMetadata\"\n    CommittedTransactionMetadata:\n      type: object\n      required:\n        - size\n        - hex\n      properties:\n        size:\n          description: The size of the transaction in bytes.\n          type: integer\n        hex:\n          description: The raw transaction bytes in hex encoding.\n          type: string\n        fee:\n          description: The fee paid for the transaction. If empty,\n            then the transaction was produced by the system.\n          \"$ref\": \"#/components/schemas/ResourceAmount\"\n        signed_by:\n          description: Optional public key which signed the transaction. If empty,\n            then the transaction was produced by the system.\n          \"$ref\": \"#/components/schemas/PublicKey\"\n        message:\n          description: Optional hex encoded byte array in the transaction.\n          type: string\n    ParsedTransactionMetadata:\n      type: object\n      required:\n        - fee\n      properties:\n        fee:\n          $ref: \"#/components/schemas/ResourceAmount\"\n        message:\n          type: string\n    OperationGroup:\n      type: object\n      required:\n        - operations\n      properties:\n        operations:\n          description: A group of operations representing a complete state update.\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/Operation\"\n        metadata:\n          description: Metadata for the operation group.\n          type: object\n    Operation:\n      type: object\n      required:\n        - type\n        - entity_identifier\n      properties:\n        type:\n          description: 'The type of operation: Resource, Data, or ResourceAndData.'\n          type: string\n        entity_identifier:\n          description: The entity on which the operation is acting on.\n          \"$ref\": \"#/components/schemas/EntityIdentifier\"\n        substate:\n          description: The substate (similar to UTXO) which this operation represents.\n          \"$ref\": \"#/components/schemas/Substate\"\n        amount:\n          description: A balance change on the entity represented by the `entity_identifier`.\n          \"$ref\": \"#/components/schemas/ResourceAmount\"\n        data:\n          description: A data update on the entity represented by the `entity_identifier`.\n          \"$ref\": \"#/components/schemas/Data\"\n        metadata:\n          description: Metadata for the operation.\n          type: object\n    Substate:\n      type: object\n      required:\n        - substate_identifier\n        - substate_operation\n      properties:\n        substate_operation:\n          description: The type of substate operation (equivalent to UTXO create/spend).\n          type: string\n          enum:\n            - BOOTUP\n            - SHUTDOWN\n        substate_identifier:\n          \"$ref\": \"#/components/schemas/SubstateIdentifier\"\n    TransactionIdentifier:\n      type: object\n      required:\n        - hash\n      properties:\n        hash:\n          \"$ref\": \"#/components/schemas/TransactionIdentifierHash\"\n    SubstateIdentifier:\n      description: Hex encoded unique identifier for the substate.\n      type: object\n      required:\n        - identifier\n      properties:\n        identifier:\n          type: string\n    ResourceAmount:\n      type: object\n      required:\n        - value\n        - resource_identifier\n      properties:\n        value:\n          description: A signed big integer representing an amount of resources in\n            10^18 subunits.\n          \"$ref\": \"#/components/schemas/BigInteger\"\n        resource_identifier:\n          description: The resource this amount represents.\n          \"$ref\": \"#/components/schemas/ResourceIdentifier\"\n    Data:\n      type: object\n      required:\n        - action\n        - data_object\n      properties:\n        action:\n          description: Data action to take on `data_object`.\n          type: string\n          enum:\n            - CREATE\n            - DELETE\n        data_object:\n          description: The object of the data action.\n          \"$ref\": \"#/components/schemas/DataObject\"\n    DataObject:\n      type: object\n      required:\n        - type\n      properties:\n        type:\n          description: The type of the data object. Each address may own up to one current\n            object of a given type.\n          type: string\n      discriminator:\n        propertyName: type\n        mapping:\n          VirtualParentData: \"#/components/schemas/VirtualParentData\"\n          UnclaimedRadixEngineAddress: \"#/components/schemas/UnclaimedRadixEngineAddress\"\n          RoundData: \"#/components/schemas/RoundData\"\n          EpochData: \"#/components/schemas/EpochData\"\n          TokenData: \"#/components/schemas/TokenData\"\n          TokenMetadata: \"#/components/schemas/TokenMetadata\"\n          PreparedValidatorRegistered: \"#/components/schemas/PreparedValidatorRegistered\"\n          PreparedValidatorOwner: \"#/components/schemas/PreparedValidatorOwner\"\n          PreparedValidatorFee: \"#/components/schemas/PreparedValidatorFee\"\n          ValidatorMetadata: \"#/components/schemas/ValidatorMetadata\"\n          ValidatorBFTData: \"#/components/schemas/ValidatorBFTData\"\n          ValidatorAllowDelegation: \"#/components/schemas/ValidatorAllowDelegation\"\n          ValidatorData: \"#/components/schemas/ValidatorData\"\n          ValidatorSystemMetadata: \"#/components/schemas/ValidatorSystemMetadata\"\n    TokenData:\n      allOf:\n        - \"$ref\": \"#/components/schemas/DataObject\"\n        - type: object\n          required:\n            - granularity\n            - is_mutable\n          properties:\n            granularity:\n              description: The granularity of a token given subunits of 10^18 (ie a\n                granularity of 10^17 means that the token can be split into 0.1 chunks\n                but no less.\n              \"$ref\": \"#/components/schemas/BigInteger\"\n            is_mutable:\n              description: If true, the `owner` is able to mint/burn tokens. Otherwise,\n                the token is a fixed supply token.\n              type: boolean\n            owner:\n              description: The owner of the token who can mint/burn.\n                This is only available for mutable tokens.\n              $ref: \"#/components/schemas/EntityIdentifier\"\n    TokenMetadata:\n      allOf:\n        - \"$ref\": \"#/components/schemas/DataObject\"\n        - type: object\n          required:\n            - symbol\n          properties:\n            symbol:\n              description: The symbol of the token (not unique in the system).\n              type: string\n            name:\n              description: The name of the token.\n              type: string\n            description:\n              description: Description describing the token.\n              type: string\n            url:\n              description: A url which points to more information about the token.\n              type: string\n            icon_url:\n              description: A url which points to the icon of the token.\n              type: string\n    EntitySetIdentifier:\n      type: object\n      required:\n        - address_regex\n      properties:\n        address_regex:\n          type: string\n    VirtualParentData:\n      allOf:\n        - \"$ref\": \"#/components/schemas/DataObject\"\n        - type: object\n          required:\n            - entity_set_identifier\n            - virtual_data_object\n          properties:\n            entity_set_identifier:\n              $ref: \"#/components/schemas/EntitySetIdentifier\"\n            virtual_data_object:\n              $ref: \"#/components/schemas/DataObject\"\n    UnclaimedRadixEngineAddress:\n      allOf:\n        - \"$ref\": \"#/components/schemas/DataObject\"\n    RoundData:\n      allOf:\n        - \"$ref\": \"#/components/schemas/DataObject\"\n        - type: object\n          required:\n            - round\n            - timestamp\n          properties:\n            round:\n              description: The round of the system in the current epoch (ie resets to 0 at the start of the next epoch).\n              \"$ref\": \"#/components/schemas/LongNumber\"\n            timestamp:\n              description: A unix timestamp in milliseconds.\n              \"$ref\": \"#/components/schemas/LongNumber\"\n    EpochData:\n      allOf:\n        - \"$ref\": \"#/components/schemas/DataObject\"\n        - type: object\n          required:\n            - epoch\n          properties:\n            epoch:\n              description: The epoch number of the system.\n              \"$ref\": \"#/components/schemas/LongNumber\"\n    PreparedValidatorRegistered:\n      allOf:\n        - \"$ref\": \"#/components/schemas/DataObject\"\n        - type: object\n          required:\n            - registered\n          properties:\n            registered:\n              description: The registered flag of the validator which will be updated\n                by the end of `epoch`.\n              type: boolean\n            epoch:\n              description: Optional field, when non-empty describes the epoch the `registered`\n                flag will update, otherwise no update is scheduled.\n              \"$ref\": \"#/components/schemas/LongNumber\"\n    PreparedValidatorOwner:\n      allOf:\n        - \"$ref\": \"#/components/schemas/DataObject\"\n        - type: object\n          required:\n            - owner\n          properties:\n            owner:\n              description: The owner of the validator which will be updated by the end\n                of `epoch`.\n              $ref: \"#/components/schemas/EntityIdentifier\"\n            epoch:\n              description: Optional field, when non-empty describes the epoch the `owner`\n                field will update, otherwise no update is scheduled.\n              \"$ref\": \"#/components/schemas/LongNumber\"\n    PreparedValidatorFee:\n      allOf:\n        - \"$ref\": \"#/components/schemas/DataObject\"\n        - type: object\n          required:\n            - fee\n          properties:\n            fee:\n              description: The fee percentage of the validator which will be updated\n                in the future epoch.\n              type: integer\n            epoch:\n              description: Optional field, when non-empty describes the epoch the `fee`\n                field will update, otherwise no update is scheduled.\n              \"$ref\": \"#/components/schemas/LongNumber\"\n    ValidatorMetadata:\n      allOf:\n        - \"$ref\": \"#/components/schemas/DataObject\"\n        - type: object\n          required:\n            - name\n            - url\n          properties:\n            name:\n              description: The name for the validator.\n              type: string\n            url:\n              description: A url which points to more information about the validator.\n              type: string\n    ValidatorBFTData:\n      allOf:\n        - \"$ref\": \"#/components/schemas/DataObject\"\n        - type: object\n          required:\n            - proposals_completed\n            - proposals_missed\n          properties:\n            proposals_completed:\n              description: The number of completed proposals by this validator as a\n                leader in the current epoch.\n              \"$ref\": \"#/components/schemas/LongNumber\"\n            proposals_missed:\n              description: The number of missed proposals by this validator as a leader\n                in the current epoch.\n              \"$ref\": \"#/components/schemas/LongNumber\"\n    ValidatorAllowDelegation:\n      allOf:\n        - \"$ref\": \"#/components/schemas/DataObject\"\n        - type: object\n          required:\n            - allow_delegation\n          properties:\n            allow_delegation:\n              description: Flag indicating whether stakers besides the owner of the\n                validator can stake to this validator.\n              type: boolean\n    ValidatorData:\n      allOf:\n        - \"$ref\": \"#/components/schemas/DataObject\"\n        - type: object\n          required:\n            - owner\n            - registered\n            - fee\n          properties:\n            owner:\n              description: The owner of the validator who receives the fees when others\n                stake to the validator.\n              $ref: \"#/components/schemas/EntityIdentifier\"\n            registered:\n              description: Flag indicating whether a validator is registered to be part\n                of the validator set.\n              type: boolean\n            fee:\n              description: The fee percentage of the validator in 0.01% subunits (ie\n                10000 == 100%).\n              type: integer\n    ValidatorSystemMetadata:\n      allOf:\n        - \"$ref\": \"#/components/schemas/DataObject\"\n        - type: object\n          required:\n            - data\n          properties:\n            data:\n              description: A hex encoded byte array.\n              type: string\n    PublicKey:\n      type: object\n      required:\n        - hex\n      properties:\n        hex:\n          description: Compressed ECSDA Public Key hex encoded.\n          type: string\n    NetworkIdentifier:\n      type: object\n      required:\n        - network\n      properties:\n        network:\n          type: string\n      example:\n        network: mainnet\n    StateIdentifier:\n      type: object\n      required:\n        - state_version\n        - transaction_accumulator\n      properties:\n        state_version:\n          description: The `state_version` represents some valid committed state on\n            ledger (similar to block height).\n          \"$ref\": \"#/components/schemas/LongNumber\"\n        transaction_accumulator:\n          description: Accumulator hash representing all transactions which occurred\n            up to `state_version`. Hex encoded.\n          type: string\n      example:\n        state_version: 0\n        transaction_accumulator: \"0000000000000000000000000000000000000000000000000000000000000000\"\n    PartialStateIdentifier:\n      type: object\n      required:\n        - state_version\n      properties:\n        state_version:\n          description: The `state_version` represents some valid committed state on\n            ledger (similar to block height).\n          \"$ref\": \"#/components/schemas/LongNumber\"\n        transaction_accumulator:\n          description: Accumulator hash representing all transactions which occurred\n            up to `state_version`. Hex encoded.\n          type: string\n    EntityIdentifier:\n      type: object\n      required:\n        - address\n      properties:\n        address:\n          description: The top level identifier for an entity.\n          type: string\n        sub_entity:\n          description: Further drill down into an entity. Can be treated as an entirely\n            separate address from `address` or as a child of `address`.\n          \"$ref\": \"#/components/schemas/SubEntity\"\n    SubEntity:\n      type: object\n      required:\n        - address\n      properties:\n        address:\n          description: The subentity.\n          type: string\n        metadata:\n          description: Any additional data required to drill down to a particular\n            address is added here.\n          \"$ref\": \"#/components/schemas/SubEntityMetadata\"\n    SubEntityMetadata:\n      type: object\n      properties:\n        validator_address:\n          type: string\n        epoch_unlock:\n          \"$ref\": \"#/components/schemas/LongNumber\"\n    ResourceIdentifier:\n      type: object\n      required:\n        - type\n      properties:\n        type:\n          description: The type of resource.\n          type: string\n      discriminator:\n        propertyName: type\n        mapping:\n          Token: \"#/components/schemas/TokenResourceIdentifier\"\n          StakeUnit: \"#/components/schemas/StakeUnitResourceIdentifier\"\n    TokenResourceIdentifier:\n      allOf:\n        - \"$ref\": \"#/components/schemas/ResourceIdentifier\"\n        - type: object\n          required:\n            - rri\n          properties:\n            rri:\n              description: The Radix Resource Identifier \"RRI\" of the token.\n              type: string\n    StakeUnitResourceIdentifier:\n      allOf:\n        - \"$ref\": \"#/components/schemas/ResourceIdentifier\"\n        - type: object\n          required:\n            - validator_address\n          properties:\n            validator_address:\n              description: The validator associated with this stake unit.\n              type: string\n    Signature:\n      type: object\n      required:\n        - public_key\n        - bytes\n      properties:\n        public_key:\n          \"$ref\": \"#/components/schemas/PublicKey\"\n        bytes:\n          type: string\n          description: An ECDSA signature of with the given `public_key`. The ECDSA signature\n            should be created using the secp256k1 curve and should be encoded in DER format, and\n            then encoded as a hex string.\n    SyncStatus:\n      type: object\n      required:\n        - current_state_version\n        - target_state_version\n      properties:\n        current_state_version:\n          type: integer\n          format: int64\n        target_state_version:\n          type: integer\n          format: int64\n    Peer:\n      type: object\n      required:\n        - peer_id\n      properties:\n        peer_id:\n          type: string\n    Bech32HRPs:\n      type: object\n      required:\n        - account_hrp\n        - validator_hrp\n        - node_hrp\n        - resource_hrp_suffix\n      properties:\n        account_hrp:\n          type: string\n        validator_hrp:\n          type: string\n        node_hrp:\n          type: string\n        resource_hrp_suffix:\n          type: string\n    LongNumber:\n      type: integer\n      format: int64\n    BigInteger:\n      type: string\n      pattern: \"^-?[0-9]+$\"\n    TransactionIdentifierHash:\n      type: string\n      pattern: \"^[0123456789abcdef]{64}$\"\n      maxLength: 64\n      minLength: 64\n    NetworkNotSupportedError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - supported_networks\n          properties:\n            supported_networks:\n              type: array\n              items:\n                $ref: \"#/components/schemas/NetworkIdentifier\"\n    PublicKeyNotSupportedError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - unsupported_public_key\n          properties:\n            unsupported_public_key:\n              $ref: \"#/components/schemas/PublicKey\"\n    InvalidAddressError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - invalid_address\n          properties:\n            invalid_address:\n              type: string\n    InvalidPartialStateIdentifierError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - invalid_partial_state_identifier\n          properties:\n            invalid_partial_state_identifier:\n              $ref: \"#/components/schemas/PartialStateIdentifier\"\n    InvalidSubEntityError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - invalid_sub_entity\n          properties:\n            invalid_sub_entity:\n              $ref: \"#/components/schemas/SubEntity\"\n    InvalidTransactionHashError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - invalid_transaction_hash\n          properties:\n            invalid_transaction_hash:\n              type: string\n    InvalidPublicKeyError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - invalid_public_key\n          properties:\n            invalid_public_key:\n              $ref: \"#/components/schemas/PublicKey\"\n    InvalidFeePayerEntityError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - invalid_fee_payer_entity\n          properties:\n            invalid_fee_payer_entity:\n              $ref: \"#/components/schemas/EntityIdentifier\"\n    InvalidHexError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - invalid_hex\n          properties:\n            invalid_hex:\n              type: string\n    InvalidSignatureError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - invalid_signature\n          properties:\n            invalid_signature:\n              type: string\n    InvalidTransactionError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - message\n          properties:\n            message:\n              type: string\n    MempoolFullError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - mempool_transaction_count\n          properties:\n            mempool_transaction_count:\n              type: integer\n    NotEnoughNativeTokensForFeesError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - available\n            - fee_estimate\n          properties:\n            available:\n              $ref: \"#/components/schemas/ResourceAmount\"\n            fee_estimate:\n              $ref: \"#/components/schemas/ResourceAmount\"\n    NotEnoughResourcesError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - fee\n            - available\n            - attempted_to_take\n          properties:\n            fee:\n              $ref: \"#/components/schemas/ResourceAmount\"\n            available:\n              $ref: \"#/components/schemas/ResourceAmount\"\n            attempted_to_take:\n              $ref: \"#/components/schemas/ResourceAmount\"\n    BelowMinimumStakeError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - minimum_stake\n            - attempted_to_stake\n          properties:\n            minimum_stake:\n              $ref: \"#/components/schemas/ResourceAmount\"\n            attempted_to_stake:\n              $ref: \"#/components/schemas/ResourceAmount\"\n    AboveMaximumValidatorFeeIncreaseError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - maximum_validator_fee_increase\n            - attempted_validator_fee_increase\n          properties:\n            maximum_validator_fee_increase:\n              type: integer\n            attempted_validator_fee_increase:\n              type: integer\n    DataObjectNotSupportedByEntityError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - entity_identifier\n            - data_object_not_supported\n          properties:\n            entity_identifier:\n              $ref: \"#/components/schemas/EntityIdentifier\"\n            data_object_not_supported:\n              $ref: \"#/components/schemas/DataObject\"\n    ResourceDepositOperationNotSupportedByEntityError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - entity_identifier\n            - resource_deposit_not_supported\n          properties:\n            entity_identifier:\n              $ref: \"#/components/schemas/EntityIdentifier\"\n            resource_deposit_not_supported:\n              $ref: \"#/components/schemas/ResourceIdentifier\"\n    ResourceWithdrawOperationNotSupportedByEntityError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - entity_identifier\n            - resource_withdraw_not_supported\n          properties:\n            entity_identifier:\n              $ref: \"#/components/schemas/EntityIdentifier\"\n            resource_withdraw_not_supported:\n              $ref: \"#/components/schemas/ResourceIdentifier\"\n    NotValidatorOwnerError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - owner\n            - user\n          properties:\n            owner:\n              $ref: \"#/components/schemas/EntityIdentifier\"\n            user:\n              $ref: \"#/components/schemas/EntityIdentifier\"\n    NotValidatorEntityError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - entity\n          properties:\n            entity:\n              $ref: \"#/components/schemas/EntityIdentifier\"\n    InvalidDataObjectError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - invalid_data_object\n            - message\n          properties:\n            invalid_data_object:\n              $ref: \"#/components/schemas/DataObject\"\n            message:\n              type: string\n    MessageTooLongError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - maximum_message_length\n            - attempted_message_length\n          properties:\n            maximum_message_length:\n              type: integer\n            attempted_message_length:\n              type: integer\n    FeeConstructionError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - attempts\n          properties:\n            attempts:\n              type: integer\n    SubstateDependencyNotFoundError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - substate_identifier_not_found\n          properties:\n            substate_identifier_not_found:\n              $ref: \"#/components/schemas/SubstateIdentifier\"\n    TransactionNotFoundError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - transaction_identifier\n          properties:\n            transaction_identifier:\n              $ref: \"#/components/schemas/TransactionIdentifier\"\n    StateIdentifierNotFoundError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          required:\n            - state_identifier\n          properties:\n            state_identifier:\n              $ref: \"#/components/schemas/PartialStateIdentifier\"\n    InternalServerError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          properties:\n            exception:\n              type: string\n            cause:\n              type: string\n    InvalidJsonError:\n      allOf:\n        - $ref: \"#/components/schemas/CoreError\"\n        - type: object\n          properties:\n            cause:\n              type: string\n    CoreError:\n      type: object\n      required:\n        - type\n      properties:\n        type:\n          type: string\n      discriminator:\n        propertyName: type\n        mapping:\n          NetworkNotSupportedError: \"#/components/schemas/NetworkNotSupportedError\"\n          PublicKeyNotSupportedError: \"#/components/schemas/PublicKeyNotSupportedError\"\n          InvalidAddressError: \"#/components/schemas/InvalidAddressError\"\n          InvalidSubEntityError: \"#/components/schemas/InvalidSubEntityError\"\n          InvalidTransactionHashError: \"#/components/schemas/InvalidTransactionHashError\"\n          InvalidPartialStateIdentifierError: \"#/components/schemas/InvalidPartialStateIdentifierError\"\n          InvalidPublicKeyError: \"#/components/schemas/InvalidPublicKeyError\"\n          InvalidFeePayerEntityError: \"#/components/schemas/InvalidFeePayerEntityError\"\n          InvalidHexError: \"#/components/schemas/InvalidHexError\"\n          InvalidSignatureError: \"#/components/schemas/InvalidSignatureError\"\n          InvalidTransactionError: \"#/components/schemas/InvalidTransactionError\"\n          MempoolFullError: \"#/components/schemas/MempoolFullError\"\n          AboveMaximumValidatorFeeIncreaseError: \"#/components/schemas/AboveMaximumValidatorFeeIncreaseError\"\n          NotEnoughNativeTokensForFeesError: \"#/components/schemas/NotEnoughNativeTokensForFeesError\"\n          NotEnoughResourcesError: \"#/components/schemas/NotEnoughResourcesError\"\n          BelowMinimumStakeError: \"#/components/schemas/BelowMinimumStakeError\"\n          DataObjectNotSupportedByEntityError: \"#/components/schemas/DataObjectNotSupportedByEntityError\"\n          ResourceDepositOperationNotSupportedByEntityError: \"#/components/schemas/ResourceDepositOperationNotSupportedByEntityError\"\n          ResourceWithdrawOperationNotSupportedByEntityError: \"#/components/schemas/ResourceWithdrawOperationNotSupportedByEntityError\"\n          NotValidatorEntityError: \"#/components/schemas/NotValidatorEntityError\"\n          NotValidatorOwnerError: \"#/components/schemas/NotValidatorOwnerError\"\n          InvalidDataObjectError: \"#/components/schemas/InvalidDataObjectError\"\n          MessageTooLongError: \"#/components/schemas/MessageTooLongError\"\n          FeeConstructionError: \"#/components/schemas/FeeConstructionError\"\n          SubstateDependencyNotFoundError: \"#/components/schemas/SubstateDependencyNotFoundError\"\n          TransactionNotFoundError: \"#/components/schemas/TransactionNotFoundError\"\n          StateIdentifierNotFoundError: \"#/components/schemas/StateIdentifierNotFoundError\"\n          InternalServerError: \"#/components/schemas/InternalServerError\"\n          InvalidJsonError: \"#/components/schemas/InvalidJsonError\"\n    UnexpectedError:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          description: High level error code, similar to HTTP status codes, e.g. NOT_FOUND=404\n        message:\n          type: string\n          description: Message describing the error code\n        details:\n          $ref: \"#/components/schemas/CoreError\"\n          description: Further details on the error\n      example:\n        code: 501\n        message: Not supported\n        details:\n          supported_networks:\n            - network: mainnet\n          type: NetworkNotSupportedError\n  examples:\n    StateIdentifier:\n      value:\n        state_version: 46001\n        transaction_accumulator: 2892a2359c37ab02116d46f742c684234d5aa9658682815f8221fc0b613101e0\n    CommittedTransaction:\n      value:\n        metadata:\n          size: 360\n          signed_by:\n            hex: 02aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b6\n          fee:\n            resource_identifier:\n              rri: xrd_rr1qy5wfsfh\n              type: Token\n            value: \"72000000000000000\"\n          hex: 07030e7094728c8d065c5db696977696bea9094f67bcfd4c021f99ec784e24023b0000000c0100210000000000000000000000000000000000000000000000000000ffcb9e57d4000002004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007c13bc4b1c16827082c00000008000002004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007ad6192165e31dff02c000002004506000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329b63364718000000000b015584aed8375f30b22a2203b77dbe15e5dc0a3618fb45ea30ee54a6ebe0054b673a471ad2214b7bd06c4228083643b57e095787c9fb01443e1c3d6890d28f60cf\n          timestamp: 1627407310726\n        committed_state_identifier:\n          state_version: 40898\n          transaction_accumulator: 5ea573f2e31640d177047d14122f1015c262f0d14d522596068784406aa1d88f\n        transaction_identifier:\n          hash: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d99337193811842\n        operation_groups:\n          - metadata:\n              action:\n                amount:\n                  resource_identifier:\n                    rri: xrd_rr1qy5wfsfh\n                    type: Token\n                  value: \"72000000000000000\"\n                from: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\n                type: BurnTokens\n            operations:\n              - amount:\n                  resource_identifier:\n                    rri: xrd_rr1qy5wfsfh\n                    type: Token\n                  value: \"-2400000000000000000000000000\"\n                substate:\n                  substate_identifier:\n                    identifier: 030e7094728c8d065c5db696977696bea9094f67bcfd4c021f99ec784e24023b0000000c\n                  substate_operation: SHUTDOWN\n                entity_identifier:\n                  address: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\n                type: Resource\n              - metadata:\n                  substate_data_hex: 06000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007c13bc4b1c16827082c0000\n                amount:\n                  resource_identifier:\n                    rri: xrd_rr1qy5wfsfh\n                    type: Token\n                  value: \"2399999999928000000000000000\"\n                substate:\n                  substate_identifier:\n                    identifier: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000000\n                  substate_operation: BOOTUP\n                entity_identifier:\n                  address: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\n                type: Resource\n          - metadata:\n              action:\n                amount:\n                  resource_identifier:\n                    rri: xrd_rr1qy5wfsfh\n                    type: Token\n                  value: \"24000000000000000000000000\"\n                from: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\n                to: rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88\n                type: TokenTransfer\n            operations:\n              - amount:\n                  resource_identifier:\n                    rri: xrd_rr1qy5wfsfh\n                    type: Token\n                  value: \"-2399999999928000000000000000\"\n                substate:\n                  substate_identifier:\n                    identifier: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000000\n                  substate_operation: SHUTDOWN\n                entity_identifier:\n                  address: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\n                type: Resource\n              - metadata:\n                  substate_data_hex: 06000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007ad6192165e31dff02c0000\n                amount:\n                  resource_identifier:\n                    rri: xrd_rr1qy5wfsfh\n                    type: Token\n                  value: \"2375999999928000000000000000\"\n                substate:\n                  substate_identifier:\n                    identifier: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000001\n                  substate_operation: BOOTUP\n                entity_identifier:\n                  address: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\n                type: Resource\n              - metadata:\n                  substate_data_hex: 06000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329b63364718000000\n                amount:\n                  resource_identifier:\n                    rri: xrd_rr1qy5wfsfh\n                    type: Token\n                  value: \"24000000000000000000000000\"\n                substate:\n                  substate_identifier:\n                    identifier: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000002\n                  substate_operation: BOOTUP\n                entity_identifier:\n                  address: rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88\n                type: Resource\n    OperationGroup:\n      value:\n        metadata:\n          action:\n            amount:\n              resource_identifier:\n                rri: xrd_rr1qy5wfsfh\n                type: Token\n              value: \"24000000000000000000000000\"\n            from: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\n            to: rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88\n            type: TokenTransfer\n        operations:\n          - amount:\n              resource_identifier:\n                rri: xrd_rr1qy5wfsfh\n                type: Token\n              value: \"-2399999999928000000000000000\"\n            substate:\n              substate_identifier:\n                identifier: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000000\n              substate_operation: SHUTDOWN\n            entity_identifier:\n              address: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\n            type: Resource\n          - metadata:\n              substate_data_hex: 06000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007ad6192165e31dff02c0000\n            amount:\n              resource_identifier:\n                rri: xrd_rr1qy5wfsfh\n                type: Token\n              value: \"2375999999928000000000000000\"\n            substate:\n              substate_identifier:\n                identifier: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000001\n              substate_operation: BOOTUP\n            entity_identifier:\n              address: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\n            type: Resource\n          - metadata:\n              substate_data_hex: 06000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329b63364718000000\n            amount:\n              resource_identifier:\n                rri: xrd_rr1qy5wfsfh\n                type: Token\n              value: \"24000000000000000000000000\"\n            substate:\n              substate_identifier:\n                identifier: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000002\n              substate_operation: BOOTUP\n            entity_identifier:\n              address: rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88\n            type: Resource\n    Operation:\n      value:\n        metadata:\n          substate_data_hex: 06000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007ad6192165e31dff02c0000\n        amount:\n          resource_identifier:\n            rri: xrd_rr1qy5wfsfh\n            type: Token\n          value: \"2375999999928000000000000000\"\n        substate:\n          substate_identifier:\n            identifier: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000001\n          substate_operation: BOOTUP\n        entity_identifier:\n          address: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\n        type: Resource\n    EntityIdentifier:\n      value:\n        address: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33\n        sub_entity:\n          address: prepared_stake\n    ResourceAmount:\n      value:\n        resource_identifier:\n          rri: xrd_rr1qy5wfsfh\n          type: Token\n        value: \"2375999999928000000000000000\"\n    ResourceIdentifier:\n      value:\n        rri: xrd_rr1qy5wfsfh\n        type: Token\n    Data:\n      value:\n        action: CREATE\n        data_object:\n          round: 0\n          type: RoundData\n          timestamp: 1627330381600\n",
			"canonicalURL": "/github.com/radixdlt/radixdlt@87d52acd42921751d9bbde7c3de63a9f43e5a6b5/-/blob/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/radixdlt/radixdlt/blob/87d52acd42921751d9bbde7c3de63a9f43e5a6b5/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}