{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/amentum.space/space_radiation/1.1.1/openapi.yaml",
			"byteSize": 19275,
			"content": "openapi: 3.0.0\nservers:\n  - url: \"\"\ninfo:\n  contact:\n    x-twitter: amentumspace\n  description: |\n    Space has a hostile radiation environment that increases the risk of cancers in humans and malfunctions in spacecraft electronics. The types of space  radiation of primary concern are:\n      \u003cul\u003e\n        \u003cli\u003e\n            Galactic Cosmic Rays from outside our solar system generated by \n            supernovae and other phenomena;\n        \u003c/li\u003e\n        \u003cli\u003e\n            Solar Energetic Particles produced by the Sun during intense and\n            sporadic bursts of activity; and\n        \u003c/li\u003e\n        \u003cli\u003e\n            Trapped Radiation: energetic particles confined by Earth's magnetic\n            field, usually comprising an inner belt of mostly high energy protons \n            and an outer belt dominated by lower energy electrons and plasma.\n        \u003c/li\u003e\n      \u003c/ul\u003e \n\n    Understanding the space radiation environment for a particular mission profile is becoming increasingly important. Commercial off-the-shelf electronic components  that aren't resilient to space radiation are now prevalent. Longer duration  missions to cislunar space, Mars, and beyond are placing astronauts at greater  risk of radiation exposure. \u003cbr\u003e\u003cbr\u003e\n    API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  \u003ca href='https://developer.amentum.io'\u003ehere\u003c/a\u003e. \u003cbr\u003e\u003cbr\u003e \n    Help us improve the quality of our web APIs by completing our 2 minute survey \u003ca href=\"https://www.surveymonkey.com/r/CTDTRBN\"\u003ehere\u003c/a\u003e.\u003cbr\u003e\u003cbr\u003e\n    Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. \u003cbr\u003e\u003cbr\u003e\n    Copyright \u003ca href='https://amentum.space'\u003eAmentum Pty Ltd\u003c/a\u003e 2021.\n  title: Space Radiation API\n  version: 1.1.1\n  x-apisguru-categories:\n    - location\n    - open_data\n  x-logo:\n    altText: Amentum Aerospace\n    backgroundColor: \"#FFFFFF\"\n    url: https://twitter.com/amentumspace/profile_image?size=original\n  x-origin:\n    - format: openapi\n      url: https://spaceradiation.amentum.space/openapi.json\n      version: \"3.0\"\n  x-providerName: amentum.space\n  x-serviceName: space_radiation\ntags:\n  - description: |\n      AE9/AP9/SPM is a set of models developed by the US Air Force Research Laboratory that calculates the fluxes of trapped radiation (radiation belt and plasma particles in near-Earth space) for use in space system design,  mission planning, and other climatological applications. \u003cbr\u003e\u003cbr\u003e\n      A description of the AE9/AP9/SPM models, including energy ranges for which the respective models are valid, can be found \u003ca href='https://www.vdl.afrl.af.mil/programs/ae9ap9/'\u003ehere\u003c/a\u003e. The model is valid for dates between decimal years 2015.0 and 2020.0\u003cbr\u003e\u003cbr\u003e\n      The following endpoints wrap the original Ae9Ap9 code (version 1.50.001) which is available \u003ca href='https://www.vdl.afrl.af.mil/programs/ae9ap9/downloads.php'\u003ehere\u003c/a\u003e.  \u003cbr\u003e\u003cbr\u003e\n    name: trapped\n    x-displayName: AE9/AP9/SPM trapped radiation models\n  - description: |\n      This endpoint provides access to Amentum's implementation of the  DLR Galactic Cosmic Radiation model.     \u003cbr\u003e\u003cbr\u003e A description of the model can be found in the scientific article  \u003ca href=\"https://www.sciencedirect.com/science/article/abs/pii/S0273117712005947\"\u003e\"A ready-to-use galactic cosmic ray model\"\u003c/a\u003e,  Matthi√§, Daniel, et al., Advances in Space Research 51.3 (2013): 329-338.  \u003cbr\u003e\u003cbr\u003e It accounts for solar modulation using a single parameter, \u003ci\u003eW\u003c/i\u003e,  derived from measurements of carbon flux by the Cosmic Ray Isotope Spectrometer aboard the Advanced Composition Explorer spacecraft.\u003cbr\u003e\u003cbr\u003e A linear relationship between \u003ci\u003eW\u003c/i\u003e and terrestrial based neutron monitor count rates (measured at the Oulu station in Finland) has been established:\u003cbr\u003e W = -0.093 cr + 638.7 \u003cbr\u003e Our implementation uses Oulu station count rates as input,  calculating galactic cosmic ray flux on a particular date. \n    name: gcr\n    x-displayName: DLR galactic cosmic radiation model\npaths:\n  /gcr/flux_dlr:\n    get:\n      description: |\n        for the given energy, atomic number, and date.\n      operationId: app.api.endpoints.GCR.calculate_dlr_flux\n      parameters:\n        - $ref: \"#/components/parameters/Year\"\n        - $ref: \"#/components/parameters/Month\"\n        - $ref: \"#/components/parameters/Day\"\n        - $ref: \"#/components/parameters/Z\"\n        - $ref: \"#/components/parameters/Energy\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              example:\n                flux:\n                  units: /m^2/s/sr/(MeV/n)\n                  value: 0.006709578488527858\n              schema:\n                $ref: \"#/components/schemas/FluxAtEnergy\"\n          description: Successful flux calculation\n      summary: |\n        Calculate particle flux \n      tags:\n        - gcr\n      x-codeSamples:\n        - lang: Shell\n          source: |\n            curl -X GET \"https://spacerad.amentum.io/gcr/flux_dlr?year=2017\u0026month=1\u0026day=1\u0026z=6\u0026energy=100\"  -H \"API-Key: \u003cyour_key\u003e\" -H  \"accept: application/json\"\n        - lang: Python\n          source: |\n            import requests\n\n            params = dict(\n              year=2017,\n              month=1,\n              day=1, \n              z=6,\n              energy=100\n            )\n            headers = {\"API-Key\" : \"\u003cadd_your_key\u003e\"}\n            # Make the API call\n            try:\n              response = requests.get(\"https://spacerad.amentum.io/gcr/flux_dlr\", params=params, headers=headers)\n              response_json = response.json()\n              response.raise_for_status()\n            except requests.exceptions.HTTPError as e:\n              print(response_json['error'])\n            else:\n              # Extract the flux\n              flux = response_json['flux']['value']\n              f_unit = response_json['flux']['units']\n              print(\"Flux: \", flux, f_unit)\n  /trapped/flux_mean:\n    get:\n      description: |\n        at given coordinates and date-time.\n      operationId: app.api.endpoints.TrappedRadiation.calculate_flux_mean\n      parameters:\n        - $ref: \"#/components/parameters/Model\"\n        - $ref: \"#/components/parameters/CoordSystem\"\n        - $ref: \"#/components/parameters/CoordUnits\"\n        - $ref: \"#/components/parameters/Coord1\"\n        - $ref: \"#/components/parameters/Coord2\"\n        - $ref: \"#/components/parameters/Coord3\"\n        - $ref: \"#/components/parameters/Year\"\n        - $ref: \"#/components/parameters/Month\"\n        - $ref: \"#/components/parameters/Day\"\n        - $ref: \"#/components/parameters/Hour\"\n        - $ref: \"#/components/parameters/Minute\"\n        - $ref: \"#/components/parameters/Second\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              example:\n                energies:\n                  data:\n                    - 0.04\n                    - 0.07\n                    - 0.1\n                    - 0.25\n                    - 0.5\n                    - 0.75\n                    - 1\n                    - 1.5\n                    - 2\n                    - 2.5\n                    - 3\n                    - 3.5\n                    - 4\n                    - 4.5\n                    - 5\n                    - 5.5\n                    - 6\n                    - 6.5\n                    - 7\n                    - 8.5\n                    - 10\n                  units: MeV\n                flux:\n                  data:\n                    - 854635898.3161561\n                    - 564685905.5669771\n                    - 178490117.91626602\n                    - 47643571.94054352\n                    - 12254101.813260391\n                    - 4549350.837767644\n                    - 1803653.1511005901\n                    - 654692.4848865604\n                    - 207898.83220077943\n                    - 64091.642036893325\n                    - 21119.72803543081\n                    - 7526.08326415376\n                    - 2847.94993909225\n                    - 1117.8011168229402\n                    - 490.68560475708034\n                    - 269.114292404757\n                    - 177.84563745629936\n                    - 128.22793816827138\n                    - 78.49896611035479\n                    - 43.74101815451732\n                    - 30.335272788461896\n                  units: /cm^2/s/MeV\n              schema:\n                $ref: \"#/components/schemas/Flux\"\n          description: Successful flux calculation\n      summary: |\n        Calculate mean particle flux\n      tags:\n        - trapped\n      x-codeSamples:\n        - lang: Shell\n          source: |\n            curl -X GET \"https://spacerad.amentum.io/trapped/flux_mean?model=AE9\u0026coord_sys=GEI\u0026coord_units=KM\u0026coord1=3216.6\u0026coord2=35426\u0026coord3=603.4\u0026year=2017\u0026month=1\u0026day=1\u0026hour=0\u0026minute=0\u0026second=0\"  -H \"API-Key: \u003cyour_key\u003e\" -H  \"accept: application/json\"\n        - lang: Python\n          source: |\n            import requests\n\n            params = dict(\n              model=\"AE9\", # proton flux\n              coord_sys=\"GEI\", # Geocentric equatorial inertial\n              coord_units=\"KM\", # kilometers\n              coord1=3216.6, # in KM\n              coord2=35426,\n              coord3=603.4,\n              year=2017,\n              month=1,\n              day=1, \n              hour=0,\n              minute=0,\n              second=0,\n            )\n            headers = {\"API-Key\" : \"\u003cadd_your_key\u003e\"}\n            # Make the API call\n            try:\n              response = requests.get(\"https://spacerad.amentum.io/trapped/flux_mean\", params=params, headers=headers)\n              response_json = response.json()\n              response.raise_for_status()\n            except requests.exceptions.HTTPError as e:\n              print(response_json['error'])\n            else:\n              # Extract the flux\n              energies = response_json['energies']['data']\n              e_unit = response_json['energies']['units']\n              flux = response_json['flux']['data']\n              f_unit = response_json['flux']['units']\n              print(\"Energies: \", energies, e_unit)\n              print(\"Mean Fluxes: \", flux, f_unit)\n  /trapped/flux_percentile:\n    get:\n      description: |\n        at given coordinates and date-time.\n      operationId: app.api.endpoints.TrappedRadiation.calculate_flux_percentile\n      parameters:\n        - $ref: \"#/components/parameters/Model\"\n        - $ref: \"#/components/parameters/CoordSystem\"\n        - $ref: \"#/components/parameters/CoordUnits\"\n        - $ref: \"#/components/parameters/Coord1\"\n        - $ref: \"#/components/parameters/Coord2\"\n        - $ref: \"#/components/parameters/Coord3\"\n        - $ref: \"#/components/parameters/Year\"\n        - $ref: \"#/components/parameters/Month\"\n        - $ref: \"#/components/parameters/Day\"\n        - $ref: \"#/components/parameters/Hour\"\n        - $ref: \"#/components/parameters/Minute\"\n        - $ref: \"#/components/parameters/Second\"\n        - $ref: \"#/components/parameters/Percentile\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              example:\n                energies:\n                  data:\n                    - 0.04\n                    - 0.07\n                    - 0.1\n                    - 0.25\n                    - 0.5\n                    - 0.75\n                    - 1\n                    - 1.5\n                    - 2\n                    - 2.5\n                    - 3\n                    - 3.5\n                    - 4\n                    - 4.5\n                    - 5\n                    - 5.5\n                    - 6\n                    - 6.5\n                    - 7\n                    - 8.5\n                    - 10\n                  units: MeV\n                flux:\n                  data:\n                    - 448667784.4812672\n                    - 322139086.68134594\n                    - 116785893.33177781\n                    - 32665389.706181422\n                    - 7991547.299112285\n                    - 2586068.6893010717\n                    - 839339.9184292991\n                    - 251004.07802610364\n                    - 69547.20063526293\n                    - 19974.510921688125\n                    - 6379.793949894077\n                    - 2089.794228005704\n                    - 779.5936616445822\n                    - 313.1551441702104\n                    - 141.5097428322324\n                    - 71.78622535090953\n                    - 40.65088904584258\n                    - 25.06786549513947\n                    - 12.794710202598523\n                    - 5.620209093649994\n                    - 3.319852121012902\n                  units: /cm^2/s/MeV\n              schema:\n                $ref: \"#/components/schemas/Flux\"\n          description: Successful flux calculation\n      summary: |\n        Calculate percentile particle flux\n      tags:\n        - trapped\n      x-codeSamples:\n        - lang: Shell\n          source: |\n            curl -X GET \"https://spacerad.amentum.io/trapped/flux_percentile?model=AE9\u0026coord_sys=GEI\u0026coord_units=KM\u0026coord1=3216.6\u0026coord2=35426\u0026coord3=603.4\u0026year=2017\u0026month=1\u0026day=1\u0026hour=0\u0026minute=0\u0026second=0\u0026percentile=50\"  -H \"API-Key: \u003cyour_key\u003e\" -H  \"accept: application/json\"\n        - lang: Python\n          source: |+\n            import requests\n\n            params = dict(\n              model=\"AE9\", # proton flux\n              coord_sys=\"GEI\", # Geocentric equatorial inertial\n              coord_units=\"KM\", # kilometers\n              coord1=3216.6, # in KM\n              coord2=35426,\n              coord3=603.4,\n              year=2017,\n              month=1,\n              day=1, \n              hour=0,\n              minute=0,\n              second=0,\n              percentile=50 # median flux\n            )\n\n            headers = {\"API-Key\" : \"\u003cadd_your_key\u003e\"}\n\n            # Make the API call\n            try:\n              response = requests.get(\"https://spacerad.amentum.io/trapped/flux_percentile\", params=params, headers=headers)\n              response_json = response.json()\n              response.raise_for_status()\n            except requests.exceptions.HTTPError as e:\n              print(response_json['error'])\n            else:\n              # Extract the flux\n              energies = response_json['energies']['data']\n              e_unit = response_json['energies']['units']\n              flux = response_json['flux']['data']\n              f_unit = response_json['flux']['units']\n              print(\"Energies: \", energies, e_unit)\n              print(\"Median Fluxes: \", flux, f_unit)\n              \ncomponents:\n  parameters:\n    Coord1:\n      description: |\n        \u003cbr\u003eFirst coordinate value to specify position. \u003cbr\u003e\u003cbr\u003e Ordering for GEI, GEO coords:X, Y, Z\u003cbr\u003e Ordering for GDZ coords: Alt, Lat, Long\u003cbr\u003e  Valid ranges for latitude: -90, 90\u003cbr\u003e  Valid ranges for longitude: 0, 360\u003cbr\u003e \n      in: query\n      name: coord1\n      required: true\n      schema:\n        example: 3216.6\n        type: number\n    Coord2:\n      description: \u003cbr\u003eSecond coordinate value.\n      in: query\n      name: coord2\n      required: true\n      schema:\n        example: 35426\n        type: number\n    Coord3:\n      description: \u003cbr\u003eThird coordinate value.\n      in: query\n      name: coord3\n      required: true\n      schema:\n        example: 603.4\n        type: number\n    CoordSystem:\n      description: |\n        \u003cbr\u003eCoordinate system to use:  \u003cbr\u003e\u003cbr\u003e - Geodetic/WGS84 (GDZ) \u003cbr\u003e - Geocentric Cartesian (GEO) \u003cbr\u003e - Geocentric Earth Inertial (GEI) \u003cbr\u003e See \"Bhavnani, K. H., \u0026 Vancour, R. P. (1991).  Coordinate systems for space and geophysical applications\"  for coord system definitions.\n      in: query\n      name: coord_sys\n      required: true\n      schema:\n        enum:\n          - GDZ\n          - GEO\n          - GEI\n        example: GEI\n        type: string\n    CoordUnits:\n      description: |\n        \u003cbr\u003eCoordinate units to use: km (KM) or Earth Radii (RE)\n      in: query\n      name: coord_units\n      required: true\n      schema:\n        enum:\n          - KM\n          - RE\n        example: KM\n        type: string\n    Date:\n      description: \u003cbr\u003eDecimal year (eg 1997.65)\n      in: query\n      name: date\n      required: true\n      schema:\n        type: number\n    Day:\n      description: \u003cbr\u003e\n      in: query\n      name: day\n      required: true\n      schema:\n        example: 1\n        type: integer\n    Energy:\n      description: |\n        \u003cbr\u003eParticle energy in MeV/n\u003cbr\u003e Valid range: [0, 10\u003csup\u003e6\u003c/sup\u003e] MeV/n\u003cbr\u003e \n      in: query\n      name: energy\n      required: true\n      schema:\n        example: 100\n        type: number\n    Hour:\n      description: \u003cbr\u003e\n      in: query\n      name: hour\n      required: true\n      schema:\n        example: \"0\"\n        type: integer\n    Minute:\n      description: \u003cbr\u003e\n      in: query\n      name: minute\n      required: true\n      schema:\n        example: \"0\"\n        type: integer\n    Model:\n      description: |\n        \u003cbr\u003eWhich model to use: \u003cbr\u003e\u003cbr\u003e - Energetic electrons (AE9) \u003cbr\u003e - Energetic protons (AP9)  \u003cbr\u003e - Space plasma model for electrons (SPME) \u003cbr\u003e - for hydrogen (SPMH) \u003cbr\u003e - for helium (SPMHE) \u003cbr\u003e - for oxygen (SPMO) \n      in: query\n      name: model\n      required: true\n      schema:\n        enum:\n          - AE9\n          - AP9\n          - SPME\n          - SPMH\n          - SPMHE\n          - SPMO\n        example: AE9\n        type: string\n    Month:\n      description: \u003cbr\u003e\n      in: query\n      name: month\n      required: true\n      schema:\n        example: 1\n        type: integer\n    Percentile:\n      description: |\n        \u003cbr\u003eInteger percentile at which to calc flux (50 is the median value).\n      in: query\n      name: percentile\n      required: true\n      schema:\n        example: 50\n        type: integer\n    Second:\n      description: \u003cbr\u003e\n      in: query\n      name: second\n      required: true\n      schema:\n        example: \"0\"\n        type: integer\n    Year:\n      description: \u003cbr\u003e\n      in: query\n      name: year\n      required: true\n      schema:\n        example: 2017\n        type: integer\n    Z:\n      description: \u003cbr\u003eParticle atomic number\n      in: query\n      name: z\n      required: true\n      schema:\n        example: 6\n        type: number\n  schemas:\n    Flux:\n      properties:\n        energies:\n          description: |\n            Particle energies at which omnidirectional flux values are calculated, and their units.\n          properties:\n            data:\n              items:\n                type: number\n              type: array\n            units:\n              type: string\n          type: object\n        flux:\n          description: |\n            Corresponding omnidirectional flux values, and their units.\n          properties:\n            data:\n              items:\n                type: number\n              type: array\n            units:\n              type: string\n          type: object\n      type: object\n    FluxAtEnergy:\n      properties:\n        flux:\n          description: |\n            Particle flux value and units.\n          properties:\n            units:\n              type: string\n            value:\n              type: number\n          type: object\n      type: object\nx-tagGroups:\n  - name: Trapped Radiation\n    tags:\n      - trapped\n  - name: Galactic Cosmic Radiation\n    tags:\n      - gcr\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@47bf2b618e492e31bc62743e9f72c47cb8460229/-/blob/APIs/amentum.space/space_radiation/1.1.1/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/47bf2b618e492e31bc62743e9f72c47cb8460229/APIs/amentum.space/space_radiation/1.1.1/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}