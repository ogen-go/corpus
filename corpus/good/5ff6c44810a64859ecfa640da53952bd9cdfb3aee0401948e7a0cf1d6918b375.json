{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/melton-foundation/Melton-App-Server"
		},
		"file": {
			"name": "schema.yml",
			"size": 0,
			"path": "app/api/staticfiles/openapi/schema.yml",
			"byteSize": 22959,
			"content": "openapi: 3.0.2\nservers:\n  - url: 'https://meltonapp.com/'\n  \ninfo:\n  title: Melton Foundation App API\n  description: |\n    API for the Melton Foundation Fellows App that provides data for Melton users, latest news from Melton Foundation and more. The main types of endpoints are  \n    \n    `Registration`\n    : API related to user sign up and checking the status of registration\n    \n    `Authentication`\n    : API for login. Initially the user has to login using Google / Apple Oauth. Upon successful login a token is generated and sent back in response. This token must be used in Authorization header of all future requests when accessing any authenticated resource.\n    \u003e **Example** - Authorization : Token {token from server}\n    \n    `Profile`\n    : API to retrieve and modify the current user's profile. Authentication necessary.\n    \n    `Users`\n    : API to retrieve other Melton user (public) details. Authentication necessary.\n    \n    `Store`\n    : API to retrieve items that can be purchased from the Melton Store (for eg. Access to a conference). An item can be bought if an item is not already bought and user has enough points. Authentication necessary.\n    \n    `Posts`\n    : API to retrieve list or individually the posts updated by Melton admins. Authentication necessary.\n  version: 1.0.0\n\npaths:\n  /api/register/:\n    post:\n      operationId: Register\n      description: 'Register an email Id to be approved by Melton Admins'\n      summary: 'Register an email Id'\n      tags:\n        - Registration\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user:\n                  $ref: '#/components/schemas/User'\n                name:\n                  type: string\n                campus:\n                  type: string\n                batch:\n                  type: integer\n                  example: 2020\n      responses:\n        '201':\n          content:\n            application/json:\n              schema: \n                type: object\n                properties:\n                  type:\n                    type: string\n                    example: 'success'\n                  message:\n                    type: string\n                    example: 'User created successfully'\n          description: 'Success response once email is registered.'\n        '401':\n          content:\n            application/json:\n              schema: \n                type: object\n                properties:\n                  type:\n                    type: string\n                    example: 'failure'\n                  message:\n                    type: string\n                    example: 'Campus is required'\n          description: 'Response to invalid requests'\n  /api/registration-status/:\n    get:\n      operationId: listcheck_registrations\n      description: 'Check the status of an already registered email ID'\n      summary: 'Check the status of registration'\n      tags: \n        - Registration\n      parameters:\n        - in: query\n          name: email\n          required: true\n          schema:\n            type: string\n            format: email\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  type: \n                    type: string\n                    example: 'success'\n                  email:\n                    type: string\n                    format: email\n                  isApproved:\n                    type: boolean\n                  message:\n                    type: string\n                    example: 'Your registration is approved'\n          description: 'Status of email registration is returned.'\n  /api/login/:\n    post:\n      operationId: Login\n      description: 'Login to Melton App either using Google or Apple Sign-in'\n      summary: 'Login to the Melton App'\n      tags:\n        - Authentication\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  format: email\n                appleId:\n                  type: string\n                token:\n                  type: string\n                  description: 'Token obtained from Google / Apple Oauth'\n                authProvider:\n                  type: string\n                  enum: [GOOGLE, APPLE]\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: \n                type: object\n                properties:\n                  type:\n                    type: string\n                    example: 'success'\n                  appToken:\n                    type: string\n                    description: 'Token generated by backend to be used in all future request as part of Bearer header'\n                  message:\n                    type: string\n                    example: 'You are logged in'\n          description: 'Success response if sign in using Google or Apple OAuth is successful.'\n  /api/profile/:\n    get:\n      operationId: GetProfile\n      description: 'Retrieve the current logged in users profile'\n      summary: 'Retrieve the current logged in users profile'\n      tags:\n        - Profile\n      security: \n        - ApiKeyAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: \n                type: object\n                properties:\n                  type:\n                    type: string\n                    example: success\n                  profile:\n                    type: object\n                    properties:\n                      user:\n                        $ref: '#/components/schemas/User'\n                      name:\n                        type: string\n                        maxLength: 100\n                      isJuniorFellow:\n                        type: boolean\n                        readOnly: true\n                      campus:\n                        type: string\n                        maxLength: 100\n                      city:\n                        type: string\n                        maxLength: 100\n                      country:\n                        type: string\n                        maxLength: 100\n                      batch:\n                        type: integer\n                        example: 2020\n                      picture:\n                        type: string\n                        format: uri\n                      bio:\n                        type: string\n                        maxLength: 200\n                      work:\n                        type: string\n                        maxLength: 200\n                      points:\n                        type: integer\n                      phoneNumber:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/PhoneNumber'\n                      socialMediaAccounts:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/SocialMediaAccount'\n                      sdgs:\n                        type: array\n                        items:\n                          type: integer\n                          minimum: 1\n                          maximum: 17\n                          example: 1\n          description: ''\n    post:\n      operationId: UpdateProfile\n      description: 'Update the current logged in users profile'\n      summary: 'Update the current logged in users profile'\n      tags:\n        - Profile\n      security: \n        - ApiKeyAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user:\n                  $ref: '#/components/schemas/User'\n                name:\n                  type: string\n                  maxLength: 100\n                campus:\n                  type: string\n                  maxLength: 100\n                city:\n                  type: string\n                  maxLength: 100\n                country:\n                  type: string\n                  maxLength: 100\n                batch:\n                  type: integer\n                  example: 2020\n                bio:\n                  type: string\n                  maxLength: 200\n                work:\n                  type: string\n                  maxLength: 200\n                phoneNumber:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/PhoneNumber'\n                socialMediaAccounts:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/SocialMediaAccount'\n                sdgs:\n                  type: array\n                  items:\n                    type: integer\n                    minimum: 1\n                    maximum: 17\n                    example: 1\n      responses:\n        '200':\n          content:\n            application/json:\n              schema: \n                type: object\n                properties:\n                  type:\n                    type: string\n                    example: success\n                  profile:\n                    type: object\n                    properties:\n                      user:\n                        $ref: '#/components/schemas/User'\n                      name:\n                        type: string\n                        maxLength: 100\n                      isJuniorFellow:\n                        type: boolean\n                        readOnly: true\n                      campus:\n                        type: string\n                        maxLength: 100\n                      city:\n                        type: string\n                        maxLength: 100\n                      country:\n                        type: string\n                        maxLength: 100\n                      batch:\n                        type: integer\n                        example: 2020\n                      picture:\n                        type: string\n                        format: uri\n                      bio:\n                        type: string\n                        maxLength: 200\n                      work:\n                        type: string\n                        maxLength: 200\n                      points:\n                        type: integer\n                      phoneNumber:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/PhoneNumber'\n                      socialMediaAccounts:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/SocialMediaAccount'\n                      sdgs:\n                        type: array\n                        items:\n                          type: integer\n                          minimum: 1\n                          maximum: 17\n                          example: 1\n          description: ''\n  /api/users/:\n    get:\n      operationId: listProfiles\n      description: 'Retrieve basic profile details of all registered Melton users. If a search term is present in query, only profiles with name or email matching search term are returned (case-insensitive)'\n      summary: 'Retrieve basic profile details of all registered Melton users'\n      parameters:\n      - name: search\n        required: false\n        in: query\n        description: A search term which is used to search in name and email.\n        schema:\n          type: string\n      security: \n        - ApiKeyAuth: []\n      tags:\n        - Users\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  properties:\n                    id:\n                      type: integer\n                    user:\n                      $ref: '#/components/schemas/User'\n                    name:\n                      type: string\n                      maxLength: 100\n                    isJuniorFellow:\n                      type: boolean\n                      readOnly: true\n                    campus:\n                      type: string\n                      maxLength: 100\n                    city:\n                      type: string\n                      maxLength: 100\n                    country:\n                      type: string\n                      maxLength: 100\n                    batch:\n                      type: integer\n                      example: 2020\n                    sdgs:\n                      type: array\n                      items:\n                        type: integer\n                        example: 1\n                    picture:\n                      type: string\n                      format: binary\n                      readOnly: true\n                  required:\n                  - id\n                  - user\n                  - name\n                  - campus\n                  - batch\n          description: ''\n  /api/users/{id}:\n    get:\n      operationId: retrieveProfile\n      description: 'Retrieve full profile (public details) of a Melton registered users'\n      summary: 'Retrieve full profile (public details) of a Melton registered users'\n      security: \n        - ApiKeyAuth: []\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: A unique value identifying this profile.\n        schema:\n          type: string\n      tags:\n        - Users\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: integer\n                  user:\n                    $ref: '#/components/schemas/User'\n                  name:\n                    type: string\n                    maxLength: 100\n                  isJuniorFellow:\n                    type: boolean\n                    readOnly: true\n                  campus:\n                    type: string\n                    maxLength: 100\n                  city:\n                    type: string\n                    maxLength: 100\n                  country:\n                    type: string\n                    maxLength: 100\n                  batch:\n                    type: integer\n                    maximum: 2147483647\n                    minimum: 0\n                  bio:\n                    type: string\n                    maxLength: 200\n                  work:\n                    type: string\n                    maxLength: 200\n                  phoneNumber:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/PhoneNumber'\n                  socialMediaAccounts:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/SocialMediaAccount'\n                  sdgs:\n                    type: array\n                    items:\n                      type: integer\n                      minimum: 1\n                      maximum: 17\n                      example: 1\n                  picture:\n                    type: string\n                    format: uri\n                    readOnly: true\n          description: ''\n  /api/store/:\n    get:\n      operationId: listStoreItems\n      description: 'Retrieve all items in the store  (only active items)'\n      summary: 'Retrieve all items in the store  (only active items)'\n      security: \n        - ApiKeyAuth: []\n      tags:\n        - Store\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StoreItem'\n          description: ''\n  /api/store/{id}/:\n    get:\n      operationId: retrieveStoreItem\n      description: 'Retrieve a particular store item by its ID  (only active items)'\n      summary: 'Retrieve a particular store item by its ID (only active items)'\n      security: \n        - ApiKeyAuth: []\n      tags:\n        - Store\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: A unique integer value identifying this store item.\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StoreItem'\n          description: ''\n  /api/store/{name}/name/:\n    get:\n      operationId: GetStoreItemByName\n      description: 'Retrieve a store item by its name. A case insensitive, partial match is done for the query parameter with names of all items in the store  (only active items)'\n      summary: 'Retrieve a store item by its name  (only active items)'\n      security: \n        - ApiKeyAuth: []\n      tags:\n        - Store\n      parameters:\n      - name: name\n        in: path\n        required: true\n        description: A string for searching the names of Store Items.\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StoreItem'\n          description: ''\n  /api/buy/:\n    post:\n      operationId: BuyItem\n      description: 'Buy a store item. The transaction will be successful only if the item ID is valid, user has enough points and also has not bought the item before  (only active items)'\n      summary: 'Buy a store item  (only active items)'\n      security: \n        - ApiKeyAuth: []\n      tags:\n        - Store\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                itemId:\n                  type: integer\n                  example: 1\n              required:\n                - itemId\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  type:\n                    type: string\n                    example: 'success'\n                  message:\n                    type: string\n                    example: 'Successfully bought.'\n                  details:\n                    type: object\n                    properties:\n                      availablePoints:\n                        type: integer\n          description: ''\n  /api/posts/:\n    get:\n      operationId: listPosts\n      description: 'Retrieve basic details of all News posts updated by Melton admins. If a search term is present in query, only posts with title, description or tags matching search term are returned (case-insensitive)'\n      summary: 'Retrieve basic details of all News posts updated by Melton admins'\n      security: \n        - ApiKeyAuth: []\n      tags:\n        - Posts\n      parameters:\n      - name: search\n        required: false\n        in: query\n        description: A search term which is used to search in title, description and tags.\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  properties:\n                    id:\n                      type: integer\n                    title:\n                      type: string\n                      maxLength: 200\n                    preview:\n                      type: string\n                      format: uri\n                      description: Preview image for the post\n                    description:\n                      type: string\n                      description: A short text describing the post\n                    tags:\n                      type: array\n                      items:\n                        type: string\n                    created:\n                      type: string\n                      format: date-time\n                    updated:\n                      type: string\n                      format: date-time\n\n          description: ''\n  /api/posts/{id}:\n    get:\n      operationId: retrievePost\n      description: 'Retrieve all details of a News post updated by Melton admins by ID  (only active items)'\n      summary: 'Retrieve all details of a News post updated by Melton admins by ID  (only active items)'\n      security: \n        - ApiKeyAuth: []\n      tags:\n        - Posts\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: A unique integer value identifying this post.\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                properties:\n                  title:\n                    type: string\n                    maxLength: 200\n                  preview:\n                    type: string\n                    format: uri\n                    description: Preview image for the post\n                  description:\n                    type: string\n                    description: A short text describing the post\n                  content:\n                    type: string\n                    description: Content of post in markdown.\n                  created:\n                    type: string\n                    format: date-time\n                    readOnly: true\n                  updated:\n                    type: string\n                    format: date-time\n                    readOnly: true\n                  tags:\n                    type: array\n                    items:\n                      type: string\n          description: ''\n  \n\ncomponents:\n  schemas:\n    User:\n      type: object\n      properties:\n        email:\n          type: string\n          format: email\n      required:\n        - email\n    SocialMediaAccount:\n      type: object\n      properties:\n        type:\n          type: string\n          example: LinkedIn\n        account:\n          type: string\n          format: uri\n      required:\n        - type\n        - account\n    PhoneNumber:\n      type: object\n      properties:\n        number:\n          type: string\n          pattern: '^\\d+$'\n          example: '9876543210'\n        countryCode:\n          type: string\n          example: '+91'\n      required:\n        - number\n    StoreItem:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n          maxLength: 100\n        previewImage:\n          type: string\n          format: uri\n          readOnly: true\n        description:\n          type: string\n          maxLength: 500\n        points:\n          type: integer\n          example: 200\n        active:\n          type: boolean\n        purchased:\n          type: boolean\n  \n  securitySchemes:\n    ApiKeyAuth:\n      type: apiKey\n      in: header\n      name: Authorization",
			"canonicalURL": "/github.com/melton-foundation/Melton-App-Server@c9a9def52c47adc9697a0acda21a21d70f0423a1/-/blob/app/api/staticfiles/openapi/schema.yml",
			"externalURLs": [
				{
					"url": "https://github.com/melton-foundation/Melton-App-Server/blob/c9a9def52c47adc9697a0acda21a21d70f0423a1/app/api/staticfiles/openapi/schema.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}