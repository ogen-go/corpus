{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Orange-OpenSource/remote-key-server"
		},
		"file": {
			"name": "rks-openapi.yaml",
			"size": 0,
			"path": "rks-openapi.yaml",
			"byteSize": 22930,
			"content": "---\nopenapi: 3.0.0\ninfo:\n  title: Remote Key Server API\n  description: |\n    The _Remote Key Server_ is a solution to manage TLS private keys and certificates in a distributed system.\n\n    Distribution of sensitive material, especially private keys, requires to take care of the access, the storage, and the duration of the storage of this secrets on server nodes.\n\n    In the context of a Content Delivery Network, HTTPS traffic requires to handle multiple content providers certificates and private_keys and distribute them accross all the CDN nodes. This leads to difficult challenges over the secret managements and particularly security concerns with nodes storing every secret locally for an indefinite amount of time.\n\n    The RKS proposes a simple model to\n      * secure secret distribution by limiting secret access to registered nodes only\n      * limit secret storage duration on a node to a configurable time to live\n      * ease secret management by providing a single configuration endpoint via API\n      * add crisis management solution to cut access to the RKS to specific nodes or an entire CDN in case of emergency\n\n    The RKS is based on the Hashicorp Vault Open Source Software (https://github.com/hashicorp/vault) and provides an API on top of Vault's\n  version: 1.0.0\ntags:\n  - name: RKS Initialization\n    description: \"RKS init API\"\n  - name: RKS Administration\n    description: \"RKS administration API\"\n  - name: RKS Node Setup\n    description: \"RKS Node registration API\"\n  - name: RKS Secrets\n    description: \"RKS secrets retrieval API\"\nsecurity:\n  - X-Vault-Token: []\npaths:\n  '/rks/v1/admin/login':\n    post:  \n      security: \n        - {}\n      summary: Login into Admin API to get adminToken\n      tags:\n        - RKS Administration\n      operationId: loginAdmin\n      requestBody:\n        description: Admin credentials\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AdminCredentials'\n      responses:\n        '200':\n          description: 'Ok'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdminToken'\n        '400':\n          description: \"Bad username or password\"\n  '/rks/v1/init':\n    post: \n      summary: Initialize Vault backend with proper policies and storage backend\n      tags:\n        - RKS Initialization\n      description: |\n        Authenticate with **root_token** retrieved through Vault init \n      operationId: initRKS\n      responses:\n        '201':\n          description: \"RKS initialized\"\n        '403':\n          description: \"Forbidden. Invalid X-Vault-Token\"\n        '409':\n          description: \"RKS already initialized\"\n  '/rks/v1/group/{groupname}':\n    post:\n      summary: Create a Group of Nodes\n      description: |\n        Authenticate with **admin_token**\n      tags:\n        - RKS Administration\n      operationId: createGroup\n      parameters:\n        - $ref: '#/components/parameters/groupname'\n      requestBody:\n        description: Group registration information\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GroupRegInfo'\n      responses:\n        '201':\n          description: Group successfully registered\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupToken'\n        '403':\n          description: \"Forbidden. Invalid X-Vault-Token\"\n        '409':\n          description: Conflict Group already exists\n    get:\n      summary: Get registration information for a Group of Nodes\n      description: |\n        Authenticate with **admin_token**\n      tags:\n        - RKS Administration\n      operationId: getGroup\n      parameters:\n        - $ref: '#/components/parameters/groupname'\n      responses:\n        '200':\n          description: Group registration information successfully retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupRegInfo'\n        '403':\n          description: \"Forbidden. Invalid X-Vault-Token\"\n        '404':\n          description: \"Group not found\"\n    put:\n      summary: Update a Group of Nodes\n      description: |\n        Authenticate with **admin_token**\n      tags:\n        - RKS Administration\n      operationId: updateGroup\n      parameters:\n        - $ref: '#/components/parameters/groupname'\n      requestBody:\n        description: Group registration information\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GroupRegInfo'\n      responses:\n        '200':\n          description: Group registration information successfully updated\n        '403':\n          description: \"Forbidden. Invalid X-Vault-Token\"\n        '404':\n          description: \"Group not found\"\n    delete:\n      summary: Delete a Group of Nodes\n      description: |\n        Authenticate with **admin_token**\n      tags:\n        - RKS Administration\n      operationId: deleteGroup\n      parameters:\n        - $ref: '#/components/parameters/groupname'\n      responses:\n        '204':\n          description: Group successfully deleted\n        '403':\n          description: \"Forbidden. Invalid X-Vault-Token\"\n        '404':\n          description: Groupname Not Found\n  '/rks/v1/group/{groupname}/grouptoken':\n    get:\n      summary: Get grouptoken for this **groupname**\n      description: |\n        Authenticate with **admin_token** retrieved through previous login\n        request\n      tags:\n        - RKS Administration\n      operationId: GetGroupToken\n      parameters:\n        - $ref: '#/components/parameters/groupname'\n      responses:\n        '200':\n          description: grouptoken successfully retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupToken'\n        '403':\n          description: \"Forbidden. Invalid X-Vault-Token\"\n        '404':\n          description: Group not found\n    put:\n      summary: Update grouptoken for this **groupname**\n      description: |\n        Authenticate with **admin_token** retrieved through previous login\n        request\n      tags:\n        - RKS Administration\n      operationId: UpdateGroupToken\n      parameters:\n        - $ref: '#/components/parameters/groupname'\n      responses:\n        '200':\n          description: grouptoken successfully updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupToken'\n        '403':\n          description: \"Forbidden. Invalid X-Vault-Token\"\n        '404':\n          description: Group not found\n  '/rks/v1/group/{groupname}/config':\n    get:\n      summary: Get config for this **groupname**\n      description: |\n        Authenticate with **admin_token** retrieved through previous login\n        request\n      tags:\n        - RKS Administration\n      operationId: GetGroupConfig\n      parameters:\n        - $ref: '#/components/parameters/groupname'\n      responses:\n        '200':\n          description: config successfully retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupRegInfo'\n        '403':\n          description: \"Forbidden. Invalid X-Vault-Token\"\n        '404':\n          description: Group not found\n  '/rks/v1/group/{groupname}/nodes/{nodeId}':\n    delete:\n      summary: Revoke a Node by revoking its token\n      description: |\n        revoke the **nodeToken** for a node part of group **groupname** with nodeId **X-LCDN-nodeId**, \n        **adminToken** is used as X-Vault-Token for authentication.\n        Note that this call will revoke the **nodeToken** but won't forbid the node to register again. \n        To forbid node registration there are two ways:\n        Make group manager callback url answer \"40X\" for this nodeId\n        Renew the group grouptoken and spread it to all nodes, except this one \n      tags:\n        - RKS Administration\n      operationId: revokeNode\n      parameters:\n        - $ref: '#/components/parameters/groupname'\n        - $ref: '#/components/parameters/nodeIdPath'\n      responses:\n        '204':\n          description: Node successfully deleted\n        '403':\n          description: \"Forbidden. Invalid X-Vault-Token\"\n        '404':\n          description: Group not found\n  '/rks/v1/group/{groupname}/secrets':\n    get:\n      summary: Get secrets associated with **groupname**\n      description: |\n        Authenticate with **admin_token** retrieved through previous login\n        request\n      tags:\n        - RKS Administration\n      operationId: GetGroupSecrets\n      parameters:\n        - $ref: '#/components/parameters/groupname'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  example: \"test.com\"\n        '403':\n          description: \"Forbidden. Invalid X-Vault-Token\"\n  '/rks/v1/group/{groupname}/secrets/{fqdn}':\n    post:\n      summary: Associate **fqdn** secret with **groupname**\n      description: |\n        Authenticate with **admin_token** retrieved through previous login\n        request\n      tags:\n        - RKS Administration\n      operationId: AssociateSecret\n      parameters:\n        - $ref: '#/components/parameters/groupname'\n        - $ref: '#/components/parameters/fqdn'\n      responses:\n        '201':\n          description: FQDN Associated\n        '403':\n          description: \"Forbidden. Invalid X-Vault-Token\"\n        '404':\n          description: Secret or groupName not Found\n        '423':\n          description: Secret list for this group is locked, please retry later\n    delete:\n      summary: Dissociate **fqdn** secret from **groupname**\n      description: |\n        Authenticate with **admin_token** retrieved through previous login\n        request\n      tags:\n        - RKS Administration\n      operationId: DissociateSecret\n      parameters:\n        - $ref: '#/components/parameters/groupname'\n        - $ref: '#/components/parameters/fqdn'\n      responses:\n        '204':\n          description: FQDN un-associated\n        '403':\n          description: \"Forbidden. Invalid X-Vault-Token\"\n        '404':\n          description: Secret or group not found\n        '423':\n          description: Secret list for this group is locked, please retry later\n  '/rks/v1/node':\n    post:\n      summary: Register a Node\n      description: |\n        The registrations returns a unique **nodeToken** usable to get secrets\\\n        The **nodeToken** is bound to the **groupToken** used for authentication\\\n        The **nodeToken** has a Time To Live, returned along the token\\\n        This TTL represents the token lifetime after which it will expire and will not be usable anymore\\\n        To continue using the **nodeToken** it has to be renewed regularly before its TTL expiration using /rks/v1/auth/token/renew-self endpoint\\\n        If the token expires due to not beeing renewed, a new node registration using this endpoint is required\\\n        **nodeId** is a Node identifier relevant to Group Manager used to verify node authenticity\\\n        For example in case of use by a CDN Manager, nodeId is passed as a X-LCDN-nodeId header and is checked on the manager\\\n        **groupToken** is used as X-Vault-Token for authentication\\\n      tags:\n        - RKS Node Setup\n      operationId: registerNode\n      parameters:\n        - $ref: '#/components/parameters/nodeIdHeader'\n      responses:\n        '201':\n          description: Node successfully registered\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodeToken'\n        '403':\n          description: \"Forbidden. Invalid X-Vault-Token\"\n  '/rks/v1/auth/token/renew-self':\n    post:\n      summary: Renew Token\n      description: |\n        This endpoint can be called to renew the passed X-Vault-Token\\\n        **groupToken** or **nodeToken** expires if they are not renewed\\\n        The request is forwarded to Vault **/auth/token/renew-self**\\\n      operationId: renewToken\n      tags:\n        - RKS Node Setup\n      responses:\n        '200':\n          description: Token renewed\n        '403':\n          description: Forbidden\n  '/rks/v1/secret/{fqdn}':\n    get:\n      summary: Get fqdn secret\n      description: |\n        Get Secret for **fqdn**\\\n        **nodeToken** or **adminToken** is used as X-Vault-Token for authentication\n      operationId: getSecret\n      tags:\n        - RKS Administration\n        - RKS Secrets\n      parameters:\n        - $ref: '#/components/parameters/fqdn'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Secret'\n        '403':\n          description: |\n            Forbidden. Invalid X-Vault-Token\n        '404':\n          description: Not Found\n    post:\n      summary: Create fqdn secret\n      description: |\n        Create Secret for **fqdn**\\\n        **adminToken** is used as X-Vault-Token for authentication\n      operationId: createSecret\n      tags:\n        - RKS Administration\n      parameters:\n        - $ref: '#/components/parameters/fqdn'\n      requestBody:\n        description: Secret\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Secret'\n      responses:\n        '204':\n          description: Secret created\n        '403':\n          description: |\n            Forbidden. Invalid X-Vault-Token\n        '409':\n          description: Conflict Secret already exists\n    put:\n      summary: Update fqdn secret\n      description: |\n        Update Secret for **fqdn**\\\n        **adminToken** is used as X-Vault-Token for authentication\n      operationId: updateSecret\n      tags:\n        - RKS Administration\n      parameters:\n        - $ref: '#/components/parameters/fqdn'\n      requestBody:\n        description: Secret\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Secret'\n      responses:\n        '200':\n          description: Secret updated\n        '403':\n          description: |\n            \"Forbidden. Invalid X-Vault-Token\"\n        '404':\n          description: Not Found\n    delete:\n      summary: Delete fqdn secret\n      description: |\n        Delete Secret for **fqdn**\\\n        **adminToken** is used as X-Vault-Token for authentication\n      operationId: deleteSecret\n      tags:\n        - RKS Administration\n      parameters:\n        - $ref: '#/components/parameters/fqdn'\n      responses:\n        '204':\n          description: secret deleted\n        '403':\n          description: |\n            Forbidden. **adminToken** does not allow to retrieve **fqdn**\n        '404':\n          description: Not Found\n        '409':\n          description: Conflict, Secret associated with at least one group\n  '/rks/v1/secret/{fqdn}/groups':\n    get:\n      summary: Get list of groupname associated to this fqdn secret\n      description: |\n        Get list of groupname associated to Secret with **fqdn**\\\n        **adminToken** is used as X-Vault-Token for authentication\n      operationId: getSecretGroups\n      tags:\n        - RKS Administration\n      parameters:\n        - $ref: '#/components/parameters/fqdn'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  example: \"cdn1\"\n        '403':\n          description: Forbidden. Invalid X-Vault-Token\n        '404':\n          description: secret Not Found\ncomponents:\n  parameters:\n    groupname:\n      name: groupname\n      in: path\n      required: true\n      description: GroupName\n      schema:\n        type: string\n        example: \"cdn1\"\n        pattern: \"^[a-zA-Z0-9\\\\-]{1,64}$\"\n    fqdn:\n      name: fqdn\n      in: path\n      required: true\n      description: FQDN\n      schema:\n        type: string\n        example: \"test.com\"\n    nodeIdPath:\n      name: nodeId\n      in: path\n      required: true\n      description: |\n        **nodeID**\n      schema:\n        type: string\n        example: \"8c03fb4a-007f-11ea-9383-0fd702e68c30\"\n        pattern: \"^[a-zA-Z0-9\\\\-]{1,64}$\"\n    nodeIdHeader:\n      name: X-LCDN-nodeId\n      in: header\n      required: true\n      description: |\n        **nodeID**\n      schema:\n        type: string\n        example: \"8c03fb4a-007f-11ea-9383-0fd702e68c30\"\n        pattern: \"^[a-zA-Z0-9\\\\-]{1,64}$\"\n  securitySchemes:\n    X-Vault-Token:\n      type: apiKey\n      in: header\n      name: X-Vault-Token\n      description: |\n        X-Vault-Token is a token obtained from Vault\n\n        In the RKS context it can either be a **rootToken** (for initialization), an **adminToken**, a **groupToken** or a **nodeToken** depending on the API endpoint\n  schemas:\n    AdminToken:\n      properties:\n        adminToken:\n         type: string\n         example: \"5Rgiycc79m1oNsNxCM3WAHe5\"\n    GroupToken:\n      properties:\n        groupToken:\n          type: string\n          example: \"5Rgiycc79m1oNsNxCM3WAHe5\"\n    AdminCredentials: \n      required:\n        - login\n        - password\n      properties:\n        login:\n          type: string\n          example: \"adminlogin\"\n        password:\n          type: string\n          example: \"adminpassword\"\n    GroupRegInfo:\n      required:  \n        - callbackURL\n        - oauthURL\n        - oauthClientID\n        - oauthClientSecret\n      properties:\n        callbackURL:\n          type: string\n          example: \"https://group-manager.group:3000/prefix\"\n        oauthURL:\n          type: string\n          example: \"https://group-manager.group:3000/api/identity/oauth/token\"\n        oauthClientID:\n          type: string\n          example: \"f146c93f-00af-42a2-9667-8c0d99b37953\"\n        oauthClientSecret:\n          type: string\n          example: \"da5edef7-1664-42b9-8fa7-5a107e7cca32\"\n    NodeToken:\n      properties:\n        nodeToken:\n          type: string\n          example: \"9rh0eTSZQQwmGIq411FNWon5\"\n        ttl:\n          type: integer\n          example: 3600\n    GroupConfig:\n      required:\n        - default-ttl\n        - prefetchFQDNs\n      properties:\n        default-ttl:\n          description: Default time to live in cache in seconds\n          type: integer\n          example: 3600\n        prefetchFQDNs:\n          type: array\n          items:\n            type: string\n            example: \"test.com,test2.com\"\n    Secret:\n      properties:\n        data:\n          type: object\n          properties:\n            meta:\n              type: object\n              properties:\n                ttl:\n                  type: integer\n                  example: 300\n            certificate:\n              type: string\n              example: |\n                -----BEGIN CERTIFICATE-----\n                MIIDazCCAlOgAwIBAgIUVrI55JBO8/sOFVZNHDRXclYg0ZEwDQYJKoZIhvcNAQEL\n                BQAwRTELMAkGA1UEBhMCRlIxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoM\n                GEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0xOTA0MTgwOTE4MzhaFw0yMDA0\n                MTcwOTE4MzhaMEUxCzAJBgNVBAYTAkZSMRMwEQYDVQQIDApTb21lLVN0YXRlMSEw\n                HwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwggEiMA0GCSqGSIb3DQEB\n                AQUAA4IBDwAwggEKAoIBAQC5KObK3V0V+vdwwiP235dkYuscRGti0yi98NlfdFUu\n                O2bn7DUPZ52+6PPOCpKk2GjOuEEKb4NqI453EJeLiVi4C0HEEMXEe8gQw3N4d/7U\n                A1aqBT7MrlT9bUP7lVFzzd9tqmkGpybbsJupVzNPZpt4V/4B7fI290xO9ZKPHhSn\n                ADZHTvyJOQv6DSlniWq9mhbUXMBPrFsZ0Y7K1urk52SpmzRF24Kicl0oOfkfB1/S\n                Hu6p/CZeByXYOOFtpWUB+696VKt6XKpcK7IwFxLYSLTiOC5K2h92mk7nyvfv/lty\n                ZcMrjTDmIqegJIo1mhAX1/oENfAKbXWMZxDSZ1WKCYnhAgMBAAGjUzBRMB0GA1Ud\n                DgQWBBSnYyNt1NWnvNbG/iZxxOCgWcfYTzAfBgNVHSMEGDAWgBSnYyNt1NWnvNbG\n                /iZxxOCgWcfYTzAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQB6\n                /JTuMUd7mtnOX058h4RAioj8ZdHtmX90zuTtqF2TAfxcq3UpJmyeZJUNhQI4t8CF\n                g1Csq5p+NexqCqSuGQ2Kx3s6sJLQwkyX/3NX677QDlYhTrS7I35eKMTVIffbI4us\n                rzoPraEBJHO2shEiGsGpjEl8rMBAyGk+RoDZ/Stn/nsWeK2khwQVac+FVG7zVO5L\n                /HTFEd6AIEAFjrwRuPC3kItc5fwlSXBn45v8TjYgCypnDzxFgc7dVps5CVN5tQT9\n                YpaZ244cHPSNCfYsQHIc4Oe7dqmYeitMMSrHEetHf97yIKIKL+RrWusq3LCR1WhQ\n                ZPFuGpZsnupYtUZ3c34D\n                -----END CERTIFICATE----\n            private_key:\n              type: string\n              example: |\n                -----BEGIN PRIVATE KEY-----\n                MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC5KObK3V0V+vdw\n                wiP235dkYuscRGti0yi98NlfdFUuO2bn7DUPZ52+6PPOCpKk2GjOuEEKb4NqI453\n                EJeLiVi4C0HEEMXEe8gQw3N4d/7UA1aqBT7MrlT9bUP7lVFzzd9tqmkGpybbsJup\n                VzNPZpt4V/4B7fI290xO9ZKPHhSnADZHTvyJOQv6DSlniWq9mhbUXMBPrFsZ0Y7K\n                1urk52SpmzRF24Kicl0oOfkfB1/SHu6p/CZeByXYOOFtpWUB+696VKt6XKpcK7Iw\n                FxLYSLTiOC5K2h92mk7nyvfv/ltyZcMrjTDmIqegJIo1mhAX1/oENfAKbXWMZxDS\n                Z1WKCYnhAgMBAAECggEBAKup2A9Mm/i87JuF4oIHWfygGQnkBQtiaetvWJi+6hoq\n                yIVM4QSfNAjDQQZNlxdt6/17phFewZ+tx29r2pRrie1Xwmlcg35epGWmT2/pEEDP\n                t5F5u3dYSUOMAfNFxHZw8CxkSWr5nXUgj7C4P8Hlh05ThhOT33RGYmDyHCbD5LHO\n                VJ0ssrl4QkotgfOXYrvyY3yiy9PamUIbSb0/Yf5e9x/6QTXmXeZlfYFBVYE/aWQ/\n                Cs+2iQOep5eE9XvTkbkP5cqqSrZYQID3wAz2IkJG5HmqEpqEcuETsxrlyr/vHNPu\n                LZyN4E07QGXKSqxgp+vV1n3IjIIusHLvZV6/ujSPDIECgYEA4LF/SEBetpvOKwPD\n                cH3uMMaY7nNGdEdWlrLAXVJHU489qpAMsPC9mcLV4tOEMVGmfyXWVBYVbFeOS59s\n                6TYhtDAyr7R2yd07IneyWWbpOBnez+UNshomCiQbwdAHj9vJ1QyCN8VyxWF/jwyG\n                mDfa+gcDK0f02XfX2MwJ5WR/QAUCgYEA0vVLxyJY/HlhbJrgrheKD1CCw7W+U17h\n                yoVTZXAbGw0DCAHijhfBN9teQtgMHpxYA5f2H7INp1expHbqqnXK0Yze/Hpqt/nD\n                wuaC7bhAr1+hJTZYDM2C6cv47+yN0EK8JZ/JXC17AikG/0/bqoRIW43WIj/prvuV\n                a2a1x0sVdS0CgYBKzm1c5alizG6QXZlky1hQvt3NjW1oaxPF6k8nAqyigi76qSjA\n                g/XryjUhZmA9dzyiWjuIFS4euuux+6rr3czMy7skSkW+ITx91jH3l86PkfVfa5fq\n                ss/1Ul43YYYS/A6vMpHr9X2nfzVTr8zjwrzRvyHr9/HpsP+Yux2UVKgU7QKBgHDQ\n                OsjwJlRF+QKiRHr1HaCY9oUAoRpmiCrMZ8+8RtKNf8x9bZF9RJfBWUQ30ytfgnXR\n                gw5qIoEWFWqVKWMlAORVCD5OnNlr2PNWYDgOK5Fde4ix6h5WnKa4rJRplWEE/ybD\n                r2P68mgyVoqcQyWJ/kPvss64DRjFc59u2tEL5xq1AoGBALDpkGkc9bT3bu9jYU8u\n                wo7EOtwlb7L4pY1h3lktMNM0v9cQBG9kZhFWu4uQ/jdanG5w9oYQd8X55bPzN6yj\n                +9xiOEcTNrlo9vuonkMoyiwDua6H90vv3sgBJ80WDTn6sW/SXRTwDbE8Dn9ODv65\n                adVJ9a+aAf+SYT8HpMNezvro\n                -----END PRIVATE KEY-----\n",
			"canonicalURL": "/github.com/Orange-OpenSource/remote-key-server@cc6a0ed5f68f341cb8185d5bacb70b89f6d3d6a7/-/blob/rks-openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Orange-OpenSource/remote-key-server/blob/cc6a0ed5f68f341cb8185d5bacb70b89f6d3d6a7/rks-openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}