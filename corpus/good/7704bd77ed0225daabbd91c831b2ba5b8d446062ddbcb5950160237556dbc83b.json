{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mu-box/core"
		},
		"file": {
			"name": "adapters-api.yaml",
			"size": 0,
			"path": "docs/adapters-api.yaml",
			"byteSize": 29320,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://virtserver.swaggerhub.com/danhunsaker/adapters/1.0.0\n    description: SwaggerHub API Auto Mocking\ninfo:\n  title: Nanobox Adapter API\n  description: An API for deploying Nanobox apps to a cloud provider.\n  contact:\n    name: Dan Hunsaker\n    email: danhunsaker@gmail.com\n  license:\n    name: MIT\n    url: 'http://choosealicense.com/licenses/mit/'\n  version: 1.0.0\nexternalDocs:\n  description: Official documentation here\n  url: 'https://docs.nanobox.io/providers/create/'\npaths:\n  /keys:\n    post:\n      tags:\n        - keys\n      summary: Create SSH Key\n      description: \u003e-\n        \u003cp\u003eThe `/keys` route is used to authorize Nanobox with the user's\n        account that will be ordering servers. After ordering a server, Nanobox\n        needs to SSH into the server to provision it. Nanobox will pre-generate\n        an SSH key for the user's account and the authorization route allows\n        Nanobox to register this key with the user's account on this provider so\n        that Nanobox can access the server after it is ordered.\u003c/p\u003e \u003cp\u003eNOTE:\n        This route is *not* required if your provider uses passwords for SSH\n        instead of SSH keys, assuming the Install Server Key endpoint is\n        implemented instead.\u003c/p\u003e\n      externalDocs:\n        description: Official documentation here\n        url: 'https://docs.nanobox.io/providers/create/#create-ssh-key'\n      operationId: create-ssh-key\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                required:\n                  - id\n                properties:\n                  id:\n                    description: fingerprint or key identifier to use when ordering servers\n                    type: string\n                type: object\n              examples:\n                response:\n                  value:\n                    id: provider-key-ID\n        default:\n          $ref: '#/components/responses/default'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - id\n                - key\n              properties:\n                id:\n                  description: the user-friendly name of the key\n                  type: string\n                key:\n                  description: \u003e-\n                    The public key to register with the user's account. It is\n                    assumed that this public key will be installed on every\n                    server launched by this integration.\n                  type: string\n              type: object\n        description: Key ID and contents to save\n        required: true\n  '/keys/{id}':\n    get:\n      tags:\n        - keys\n      summary: Query SSH Key\n      description: \u003e-\n        \u003cp\u003eThe `GET /keys/{id}` route is used by Nanobox to query the existence\n        of previously created key.\u003c/p\u003e \u003cp\u003eNOTE: This route is *not* required if\n        your provider uses passwords for SSH instead of SSH keys, assuming the\n        Install Server Key endpoint is implemented instead.\u003c/p\u003e\n      externalDocs:\n        description: Official documentation here\n        url: 'https://docs.nanobox.io/providers/create/#query-ssh-key'\n      operationId: query-ssh-key\n      parameters:\n        - name: id\n          in: path\n          description: the key id\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                required:\n                  - id\n                  - name\n                  - public_key\n                properties:\n                  id:\n                    description: fingerprint or key identifier to use when ordering servers\n                    type: string\n                  name:\n                    description: the user-friendly name of the key\n                    type: string\n                  public_key:\n                    description: contents of public key\n                    type: string\n                type: object\n              examples:\n                response:\n                  value:\n                    id: provider-key-ID\n                    name: nanobox-provider-account-ID\n                    public_key: CONTENTS OF PUBLIC KEY\n        default:\n          $ref: '#/components/responses/default'\n    delete:\n      tags:\n        - keys\n      summary: Delete SSH Key\n      description: \u003e-\n        \u003cp\u003eThe `DELETE /keys/{id}` route is used to cancel a key that was\n        previously created via Nanobox.\u003c/p\u003e \u003cp\u003eNOTE: This route is *not*\n        required if your provider uses passwords for SSH instead of SSH keys,\n        assuming the Install Server Key endpoint is implemented instead.\u003c/p\u003e\n      externalDocs:\n        description: Official documentation here\n        url: 'https://docs.nanobox.io/providers/create/#delete-ssh-key'\n      operationId: delete-ssh-key\n      parameters:\n        - name: id\n          in: path\n          description: the key id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n        default:\n          $ref: '#/components/responses/default'\n  /meta:\n    get:\n      tags:\n        - meta\n      summary: Gathering Metadata\n      description: \u003e-\n        The `/meta` route is used to provide Nanobox with various pieces of\n        metadata that will be used for displaying information in the dashboard\n        and for requesting authentication information from the users.\n      externalDocs:\n        description: Official documentation here\n        url: 'https://docs.nanobox.io/providers/create/#meta'\n      operationId: meta\n      security:\n        - {}\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                required:\n                  - id\n                  - name\n                  - server_nick_name\n                  - default_region\n                  - default_size\n                  - can_reboot\n                  - can_rename\n                  - internal_iface\n                  - external_iface\n                  - ssh_user\n                  - ssh_auth_method\n                  - ssh_key_method\n                  - bootstrap_script\n                  - credential_fields\n                properties:\n                  id:\n                    description: some unique identifier\n                    type: string\n                  name:\n                    description: display name used in the dashboard\n                    type: string\n                  server_nick_name:\n                    description: what this provider calls their servers\n                    type: string\n                  default_region:\n                    description: the default region to launch servers when not specified\n                    type: string\n                  default_size:\n                    description: default server size to use when creating an app\n                    type: string\n                  default_plan:\n                    description: \u003e-\n                      the id of the default plan in which the default size is\n                      ordered\n                    type: string\n                  can_reboot:\n                    description: \u003e-\n                      boolean to determine if we can reboot the server through\n                      the api\n                    type: boolean\n                  can_rename:\n                    description: \u003e-\n                      boolean to determine if we can rename the server through\n                      the api\n                    type: boolean\n                  internal_iface:\n                    description: Internal interface. e.g. eth1\n                    type: string\n                  external_iface:\n                    description: External interface. e.g. eth0\n                    type: string\n                  ssh_user:\n                    description: \u003e-\n                      The ssh user Nanobox can use for ssh access to bootstrap\n                      the server. e.g. root\n                    type: string\n                  ssh_auth_method:\n                    description: \u003e-\n                      will either be 'key' or 'password'. When set to 'key',\n                      Nanobox will behave in accordance with the\n                      \u003ccode\u003essh_key_method\u003c/code\u003e value. When set to 'password',\n                      Nanobox will use the Install Server Key endpoint to\n                      install the SSH key manually via the adapter, instead of\n                      passing it in the create server step.\n                    type: string\n                    enum:\n                      - key\n                      - password\n                  ssh_key_method:\n                    description: \u003e-\n                      will either be 'reference' or 'object'. When set to\n                      'reference', Nanobox will first create the SSH key in the\n                      user's provider account, then pass a reference to it when\n                      servers are created. When set to 'object', Nanobox will\n                      pass the actual public SSH key that should be installed on\n                      the server.\n                    type: string\n                    enum:\n                      - reference\n                      - object\n                  bootstrap_script:\n                    description: \u003e-\n                      The script that should be used to bootstrap the server.\n                      e.g.\n                      https://s3.amazonaws.com/tools.nanobox.io/bootstrap/ubuntu.sh\n                    type: string\n                  credential_fields:\n                    description: \u003e-\n                      array of hashes that includes field keys and labels\n                      necessary to authenticate with the provider\n                    type: array\n                    items:\n                      required:\n                        - key\n                        - label\n                      properties:\n                        key:\n                          description: \u003e-\n                            suffix for Auth- headers used to identify each auth\n                            field\n                          type: string\n                        label:\n                          description: text to display to the user for each auth field\n                          type: string\n                      type: object\n                  instructions:\n                    description: \u003e-\n                      string that contains instructions for how to setup\n                      authentication with the provider\n                    type: string\n                type: object\n              examples:\n                response:\n                  value:\n                    id: do\n                    name: Digital Ocean\n                    server_nick_name: Droplet\n                    default_region: sfo1\n                    default_size: 512mb\n                    default_plan: standard\n                    can_reboot: true\n                    can_rename: true\n                    internal_iface: eth1\n                    external_iface: eth0\n                    ssh_user: root\n                    ssh_auth_method: key\n                    ssh_key_method: reference\n                    bootstrap_script: \u003e-\n                      https://s3.amazonaws.com/tools.nanobox.io/bootstrap/ubuntu.sh\n                    credential_fields:\n                      - key: access-token\n                        label: Access Token\n                    instructions: \u003e-\n                      \u003ca href='//cloud.digitalocean.com/settings/api/tokens'\n                      target='_blank'\u003eCreate a Personal Access Token\u003c/a\u003e in your\n                      Digital Ocean Account that has read/write access, then add\n                      the token here or view the \u003ca\n                      href='//www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-api-v2#how-to-generate-a-personal-access-token'\n                      target='_blank'\u003efull guide\u003c/a\u003e\n  /catalog:\n    get:\n      tags:\n        - meta\n      summary: Requesting the Catalog\n      description: \u003e-\n        The `/catalog` route is used to provide Nanobox with a catalog of server\n        sizes and options, within the available geographic regions.\n      externalDocs:\n        description: Official documentation here\n        url: 'https://docs.nanobox.io/providers/create/#catalog'\n      operationId: catalog\n      security:\n        - {}\n      responses:\n        '200':\n          description: \u003e-\n            The response data should be a list (array) of regions. Each region\n            should contain a list of plans. It is not necessary to have multiple\n            regions, however the structure will be the same regardless.\n            Additionally, your integration may only have one classification of\n            server types, or you may have high-cpu, high-ram, or high-IO\n            options. A plan is a grouping of server sizes within a\n            classification.\n          content:\n            application/json:\n              schema:\n                description: Each region in the catalog consists of the following\n                type: array\n                items:\n                  required:\n                    - id\n                    - name\n                    - plans\n                  properties:\n                    id:\n                      description: \u003e-\n                        unique region identifier to be used when ordering a\n                        server\n                      type: string\n                    name:\n                      description: the visual identifier for the customer\n                      type: string\n                    plans:\n                      description: \u003e-\n                        A grouping of server sizes within a classification. Each\n                        plan consists of the following\n                      type: array\n                      items:\n                        required:\n                          - id\n                          - name\n                          - specs\n                        properties:\n                          id:\n                            description: unique plan identifier\n                            type: string\n                          name:\n                            description: \u003e-\n                              the classification of the server options within\n                              this plan. The name should indicate to the user\n                              what kinds of workloads these server options are\n                              ideal for. For instance: \"Standard\" or \"High CPU\"\n                            type: string\n                          specs:\n                            description: \u003e-\n                              the list of server options within this plan. Each\n                              spec should have the following fields\n                            type: array\n                            items:\n                              required:\n                                - id\n                                - ram\n                                - cpu\n                                - disk\n                                - transfer\n                                - dollars_per_hr\n                                - dollars_per_mo\n                              properties:\n                                id:\n                                  description: \u003e-\n                                    a unique identifier that will be used when\n                                    ordering a server\n                                  type: string\n                                ram:\n                                  description: \u003e-\n                                    a visual indication to the user informing\n                                    the amount of RAM is provided\n                                  type: integer\n                                cpu:\n                                  description: \u003e-\n                                    a visual indication to the user informing\n                                    the amount of CPUs or CPU cores\n                                  type: integer\n                                disk:\n                                  description: \u003e-\n                                    a visual indication to the user informing\n                                    the amount or size of disk\n                                  type: integer\n                                transfer:\n                                  description: \u003e-\n                                    a visual indication to the user informing\n                                    the amount of data transfer allowed per\n                                    month for this server\n                                  type: integer\n                                dollars_per_hr:\n                                  description: \u003e-\n                                    a visual indication to the user informing\n                                    the cost of running this server per hour\n                                  type: number\n                                  format: currency\n                                dollars_per_mo:\n                                  description: \u003e-\n                                    a visual indication to the user informing\n                                    the cost of running this server per month\n                                  type: number\n                                  format: currency\n                              type: object\n                        type: object\n                  type: object\n              examples:\n                response:\n                  value:\n                    - id: sfo1\n                      name: San Francisco 1\n                      plans:\n                        - id: standard\n                          name: Standard Configuration\n                          specs:\n                            - id: 512mb\n                              ram: 512\n                              cpu: 1\n                              disk: 20\n                              transfer: 1\n                              dollars_per_hr: 0.00744\n                              dollars_per_mo: 5\n                            - id: 1gb\n                              ram: 1024\n                              cpu: 1\n                              disk: 30\n                              transfer: 2\n                              dollars_per_hr: 0.01488\n                              dollars_per_mo: 10\n  /verify:\n    post:\n      tags:\n        - meta\n      summary: Verify the account credentials\n      description: \u003e-\n        The `/verify` route is used to verify a user's account credentials. The\n        `credential_fields` specified in the metadata will be provided in the\n        dashboard and required to be filled before the user can use this\n        provider. After the credentials are provided, Nanobox will call this\n        route to verify that the account credentials provided by the user are\n        valid.\n      externalDocs:\n        description: Official documentation here\n        url: 'https://docs.nanobox.io/providers/create/#verify'\n      operationId: verify\n      responses:\n        '200':\n          description: successful operation\n        default:\n          $ref: '#/components/responses/default'\n  /servers:\n    post:\n      tags:\n        - servers\n      summary: Order Server\n      description: \u003e-\n        The `/servers` route is how Nanobox submits a request to order a new\n        server. This route SHOULD NOT hold open the request until the server is\n        ready. The request should return immediately once the order has been\n        submitted with an identifier that Nanobox can use to followup on the\n        order status.\n      externalDocs:\n        description: Official documentation here\n        url: 'https://docs.nanobox.io/providers/create/#order-server'\n      operationId: order-server\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                required:\n                  - id\n                properties:\n                  id:\n                    description: unique id of the server\n                    type: string\n                type: object\n              examples:\n                response:\n                  value:\n                    id: provider-server-ID\n        default:\n          $ref: '#/components/responses/default'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - name\n                - region\n                - size\n              properties:\n                name:\n                  description: \u003e-\n                    Nanobox-generated name used to identify the machine visually\n                    as ordered by Nanobox\n                  type: string\n                region:\n                  description: \u003e-\n                    the region wherein to launch the server, which will match\n                    the region `id` from the catalog\n                  type: string\n                size:\n                  description: \u003e-\n                    the size of server to provision, which will match an `id`\n                    provided in the aforementioned catalog\n                  type: string\n                ssh_key:\n                  description: id of the SSH key created during the `/keys` request\n                  type: string\n              type: object\n        description: Server creation data\n        required: true\n  '/servers/{id}':\n    get:\n      tags:\n        - servers\n      summary: Query Server\n      description: \u003e-\n        The `GET /servers/{id}` route is used by Nanobox to query state about a\n        previously ordered server. This state is used to inform Nanobox when the\n        server is ready to be provisioned and also how to connect to the server.\n      externalDocs:\n        description: Official documentation here\n        url: 'https://docs.nanobox.io/providers/create/#query-server'\n      operationId: query-server\n      parameters:\n        - name: id\n          in: path\n          description: the server id\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                required:\n                  - id\n                  - status\n                  - name\n                  - external_ip\n                  - internal_ip\n                properties:\n                  id:\n                    description: the server id\n                    type: string\n                  status:\n                    description: \u003e-\n                      the status or availability of the server. (active\n                      indicates server is ready)\n                    type: string\n                  name:\n                    description: name of the server\n                    type: string\n                  external_ip:\n                    description: external or public IP of the server\n                    type: string\n                  internal_ip:\n                    description: internal or private IP of the server\n                    type: string\n                type: object\n              examples:\n                response:\n                  value:\n                    id: provider-server-ID\n                    status: active\n                    name: nanobox.io-cool-app-do.1.1\n                    external_ip: 192.0.2.15\n                    internal_ip: 192.168.0.15\n        default:\n          $ref: '#/components/responses/default'\n    delete:\n      tags:\n        - servers\n      summary: Cancel Server\n      description: \u003e-\n        The `DELETE /servers/{id}` route is used to cancel a server that was\n        previously ordered via Nanobox. This route SHOULD NOT hold open the\n        request until the server is completely canceled. It should return\n        immediately once the order to cancel has been submitted.\n      externalDocs:\n        description: Official documentation here\n        url: 'https://docs.nanobox.io/providers/create/#cancel-server'\n      operationId: cancel-server\n      parameters:\n        - name: id\n          in: path\n          description: the server id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n        default:\n          $ref: '#/components/responses/default'\n  '/servers/{id}/keys':\n    patch:\n      tags:\n        - keys\n        - servers\n      summary: Install Server Key\n      description: \u003e-\n        \u003cp\u003eThe `/servers/{id}/keys` route is used to authorize Nanobox with a\n        server that was previously ordered via Nanobox. Nanobox will\n        pre-generate an SSH key for the user's account, and this route allows\n        Nanobox to register that key with the server so that Nanobox can access\n        it after it is ordered.\u003c/p\u003e \u003cp\u003eNOTE: This route is *only* required if\n        your provider uses passwords for SSH instead of SSH keys.\u003c/p\u003e\n      externalDocs:\n        description: Official documentation here\n        url: 'https://docs.nanobox.io/providers/create/#install-ssh-key'\n      operationId: install-server-key\n      parameters:\n        - name: id\n          in: path\n          description: the server id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n        default:\n          $ref: '#/components/responses/default'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - id\n                - key\n              properties:\n                id:\n                  description: the user-friendly name of the key\n                  type: string\n                key:\n                  description: The public key to register on the server.\n                  type: string\n              type: object\n        description: Key ID and contents to save\n        required: true\n  '/servers/{id}/reboot':\n    patch:\n      tags:\n        - servers\n      summary: Reboot Server\n      description: \u003e-\n        The `/servers/{id}/reboot` route is used to reboot a server that was\n        previously ordered via Nanobox. This route SHOULD NOT hold open the\n        request until the server is completely rebooted. It should return\n        immediately once the order to reboot has been submitted\n      externalDocs:\n        description: Official documentation here\n        url: 'https://docs.nanobox.io/providers/create/#reboot-server'\n      operationId: reboot-server\n      parameters:\n        - name: id\n          in: path\n          description: the server id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n        default:\n          $ref: '#/components/responses/default'\n  '/servers/{id}/rename':\n    patch:\n      tags:\n        - servers\n      summary: Rename Server\n      description: \u003e-\n        The `/servers/{id}/rename` route is used to rename a server that was\n        previously ordered via Nanobox. This route SHOULD NOT hold open the\n        request until the server is completely renamed. It should return\n        immediately once the order to rename has been submitted.\n      externalDocs:\n        description: Official documentation here\n        url: 'https://docs.nanobox.io/providers/create/#rename-server'\n      operationId: rename-server\n      parameters:\n        - name: id\n          in: path\n          description: the server id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n        default:\n          $ref: '#/components/responses/default'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - name\n              properties:\n                name:\n                  description: the new name of the server\n                  type: string\n              type: object\n        description: New server name\n        required: true\nsecurity:\n  - Auth-Token: []\ntags:\n  - name: meta\n    description: Endpoints related to the provider\n  - name: keys\n    description: Endpoints related to SSH key management\n  - name: servers\n    description: Endpoints related to server management\ncomponents:\n  responses:\n    default:\n      description: Error\n      content:\n        application/json:\n          schema:\n            required:\n              - errors\n            properties:\n              errors:\n                description: \u003e-\n                  On Failure: Should return a json body with an errors node and\n                  a non 2xx status code.\n                type: array\n                items:\n                  type: string\n            type: object\n  securitySchemes:\n    Auth-Token:\n      name: Auth-Token\n      in: header\n      type: apiKey",
			"canonicalURL": "/github.com/mu-box/core@a66c79bb43fe850bcd6c1ede58051555e1736204/-/blob/docs/adapters-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/mu-box/core/blob/a66c79bb43fe850bcd6c1ede58051555e1736204/docs/adapters-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}