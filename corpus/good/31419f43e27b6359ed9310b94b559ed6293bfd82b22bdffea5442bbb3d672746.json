{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/HumanCellAtlas/query-service"
		},
		"file": {
			"name": "dcpquery-api.yml",
			"size": 0,
			"path": "dcpquery-api.yml",
			"byteSize": 11232,
			"content": "openapi: \"3.0.0\"\n\ninfo:\n  title: DCP Query Service API\n  description: \u003e\n    The HCA DCP Query Service provides an interface for scientists and developers to query metadata associated with\n    experimental and analysis data stored in the \u003ca href=\"https://humancellatlas.org/\"\u003eHuman Cell Atlas\u003c/a\u003e\n    \u003ca href=\"https://www.humancellatlas.org/data-sharing\"\u003eData Coordination Platform\u003c/a\u003e (DCP). Metadata from the\n    \u003ca href=\"https://github.com/HumanCellAtlas/data-store\"\u003eDCP Data Store\u003c/a\u003e are indexed and stored in an\n    \u003ca href=\"https://aws.amazon.com/rds/aurora/\"\u003eAWS Aurora\u003c/a\u003e \u003ca href=\"https://www.postgresql.org/\"\u003ePostgreSQL\u003c/a\u003e\n    database. For more user documentation and example queries, see \n    \u003ca href=\"https://dcpquery.readthedocs.io/\"\u003eQuery Service documentaton on Read the Docs\u003c/a\u003e\n\n    To get in touch with the DCP Query Service team, join the \u003ccode\u003e#query-service\u003c/code\u003e channel on the\n    \u003ca href=\"https://join-hca-slack.data.humancellatlas.org/\"\u003eHCA Slack\u003c/a\u003e.\n  version: \"0.1.0\"\n\nservers:\n  - url: https://{{API_DOMAIN_NAME}}/v1\n\npaths:\n  /query:\n    post:\n      summary: Query the database\n      description: Query the database\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Query\"\n      responses:\n        200:\n          description: Query received and processed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/QueryResult\"\n        301:\n          description: \u003e\n            The query is still being executed. The request is being handled asynchronously. The client should follow the\n            redirect after the delay specified in the Retry-After header.\n          headers:\n            Retry-After:\n              description: Delay in seconds. The client should follow the redirect after waiting for this duration.\n              schema:\n                type: integer\n                format: int64\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /query_job:\n    post:\n      summary: \u003e\n        Submit a database query and return a query job ID.\n      description: \u003e\n        Query the database. The semantics of this route are identical to `POST query`, except that it assumes\n        immediately that the query will take longer than 20 seconds to execute, and returns the query job ID that can\n        explicitly track the query state and result.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Query\"\n      responses:\n        202:\n          description: Query job created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  query:\n                    type: string\n                    description: Submitted query\n                  job_id:\n                    type: string\n                    description: Job identifier in RFC4122-compliant UUID format\n                    pattern: \"[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /query_jobs/{job_id}:\n    get:\n      summary: Check the status of a long running query job, and retrieve its results when available.\n      description: \u003e\n        Given the ID of a job returned by `POST query` or `POST query/job`, returns the status of the job and a\n        reference or redirect to the query results.\n      parameters:\n        - name: job_id\n          in: path\n          description: Job identifier in RFC4122-compliant UUID format\n          required: true\n          schema:\n            type: string\n            pattern: \"[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}\"\n        - name: redirect_when_done\n          in: query\n          description: \u003e\n            If set, the response will send a `302 Found` HTTP redirect to the query results when the job is done.\n          schema:\n            type: boolean\n        - name: redirect_when_waiting\n          in: query\n          description: \u003e\n            If set, and the job being described is still running, the response will be a `301 Moved` HTTP redirect back\n            to this route with a Retry-After header.\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: Job found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/QueryJobDescription\"\n        301:\n          description: \u003e\n            The query is still being executed. This is a convenience redirect back to the job description while we wait\n            for the query to complete. The client should follow the redirect after the delay specified in the\n            Retry-After header.\n          headers:\n            Retry-After:\n              description: Delay in seconds. The client should follow the redirect after waiting for this duration.\n              schema:\n                type: integer\n                format: int64\n        302:\n          description: \u003e\n            Query execution is complete. The client is being redirected to a JSON file containing the query results.\n        404:\n          description: Job not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /files/{file_uuid}/bundles:\n      get:\n        operationId: dcpquery.api.files.bundle.get\n        summary: Get list of bundle_fqids for a given file_uuid\n        description: \u003e\n          Given the UUID of a file, returns a list of bundle_fqids belonging to all the bundles the file is a part of.\n        parameters:\n          - name: file_uuid\n            in: path\n            description: Job identifier in RFC4122-compliant UUID format\n            required: true\n            schema:\n              type: string\n              pattern: \"[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}\"\n          - name: check_events\n            in: query\n            description: \u003e\n              If set, will check for any recent dss events and check if the file is a part of any unindexed bundles.\n            schema:\n              type: boolean\n        responses:\n          200:\n            description: Bundles found\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/BundleList\"\n\n          404:\n            description: file not found\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Error\"\n          default:\n            description: Unexpected error\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Error\"\n  /files/schema/{schema_type}:\n      get:\n        operationId: dcpquery.api.files.schema_type.get\n        summary: Get list of files for a given schema type and version\n        description: \u003e\n          Given a schema type, and major and minor versions, returns a list of file_fqids that have a\n          json body based on the schema defined by the given values\n        parameters:\n          - name: schema_type\n            in: path\n            description: Job identifier in RFC4122-compliant UUID format\n            required: true\n            schema:\n              type: string\n              pattern: \"[A-Za-z0-9]+\"\n\n          - name: version\n            in: query\n            description: \u003e\n              Set to the major and minor versions of the schema\n            schema:\n              type: string\n              pattern: \"[0-9]+[.][0-9]+\"\n\n        responses:\n          200:\n            description: Matching Files Found\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/FileList\"\n          404:\n            description: Schema type not found\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Error\"\n          default:\n            description: Unexpected error\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Error\"\ncomponents:\n  schemas:\n    Query:\n      type: object\n      properties:\n        query:\n          type: string\n          description: Query to run, given as a SQL string.\n        params:\n          type: object\n          description: \u003e\n            Parameters of the query. Supply a mapping of parameters using the _format_ or _pyformat_ parameter style.\n            For example, a query to count all files over a certain size might look like\n            `select count(*) from files where size \u003e %(sz)s`. To find all files over 1TB in size, pass the following\n            `params` value for this query: `{\"sz\": 2**30}}`.\n      required:\n        - query\n\n    QueryJobDescription:\n      type: object\n      properties:\n        job_id:\n          type: string\n        status:\n          type: string\n          # TODO: reconcile with old status codes PROCESSING, COMPLETE, FAILED\n          enum: [new, running, done, failed]\n        results:\n          type: array\n      required:\n        - job_id\n        - status\n\n    QueryResult:\n      type: object\n      description: Result of query\n      properties:\n        query:\n          type: string\n          description: Submitted query\n        params:\n          type: object\n          description: Parameters of the submitted query\n        results:\n          type: array\n      required:\n        - query\n        - params\n        - results\n\n    BundleList:\n      type: object\n      description: List of bundle fqids\n      properties:\n        file_uuid:\n          type: string\n          description: Submitted file_uuid\n        bundle_fqids:\n          type: array\n          description: List of bundle fqids\n      required:\n        - file_uuid\n        - bundle_fqids\n\n    FileList:\n      type: object\n      description: List of file fqids\n      properties:\n        schema_type:\n          type: string\n          description: Submitted schema type\n        schema_version:\n          type: string\n          description: Submitted schema version\n        file_fqids:\n          type: array\n          description: List of file fqids\n      required:\n        - schema_type\n        - schema_version\n        - file_fqids\n\n    Error:\n      type: object\n      properties:\n        status:\n          type: integer\n          format: int32\n          description: HTTP error code.\n        title:\n          type: string\n          description: Human-readable error message.\n        detail:\n          type: string\n          description: Exception stacktrace, if any.\n      required:\n        - status\n        - title\n",
			"canonicalURL": "/github.com/HumanCellAtlas/query-service@dd2c2844b1f6836cb0f151e092f31e9021724f31/-/blob/dcpquery-api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/HumanCellAtlas/query-service/blob/dd2c2844b1f6836cb0f151e092f31e9021724f31/dcpquery-api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}