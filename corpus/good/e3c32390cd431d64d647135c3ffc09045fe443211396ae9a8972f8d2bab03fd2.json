{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/thevarunjain/job-portal-mern-stack"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "api.yaml",
			"byteSize": 17716,
			"content": "openapi: 3.0.0\ninfo:\n  version: '1.0'\n  title: 'LinkedIn API'\n  description: 'LinkedIn API Design Document For CMPE-273'\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\nservers:\n# Added by API Auto Mocking Plugin\n- description: SwaggerHub API Auto Mocking\n  url: https://virtserver.swaggerhub.com/cmpe273-linkedin/linkedin/1.0\ntags: \n  - name: recruiter\n    description: Operations available to recruiters\n  - name: applicant\n    description: Operations available to applicants\n  - name: users\n    description: Everything about users\n  - name: jobs\n    description: Everything about jobs\n  - name: search\n    description: Everything about search\n  - name: message\n    description: Everything about message\npaths: \n  /signup:\n    post:\n      tags:\n        - recruiter\n        - applicant\n      summary: User signup\n      description: Signup operation for applicant and recruiter\n      responses:\n        '200':\n          description: successful signup\n        '400':\n          description: bad input parameter\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n  /login:\n    post:\n      tags:\n        - recruiter\n        - applicant\n      summary: User login\n      description: Login operation for applicant and recruiter\n      responses:\n        '200':\n          description: successful login\n        '400':\n          description: bad input parameter\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  description: Email address\n                  type: string\n                password:\n                  description: Password\n                  type: string\n              required:\n                - username\n                - password\n  /jobs:\n    get:\n      tags:\n        - jobs\n        - recruiter\n        - applicant\n      summary: Get all jobs\n      description: Get all jobs\n      responses:\n        '200':\n          description: Jobs retrieved successfully\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Job'\n    post:\n      tags:\n        - jobs\n        - recruiter\n      summary: Create new job\n      description: Recruiter can post new job\n      responses:\n        '201':\n          description: Job created successfully\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Job'\n  '/jobs/{id}':\n    get:\n      tags:\n        - jobs\n        - recruiter\n        - applicant\n      summary: Get individual jobs\n      description: Single job details\n      parameters:\n        - $ref: '#/components/parameters/jobId'\n      responses:\n        '200':\n          description: Job retrieved successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Job'\n    put:\n      tags:\n        - jobs\n        - recruiter\n      summary: Edit existing job\n      description: Recruiter can edit already existing job\n      parameters:\n        - $ref: '#/components/parameters/jobId'\n      responses:\n        '200':\n          description: Operation successful\n  '/jobs/{id}/save':\n    post:\n      tags:\n        - jobs\n        - applicant\n      summary: Save job\n      description: Save job and apply later\n      parameters:\n        - $ref: '#/components/parameters/jobId'\n      responses:\n        '200':\n          description: Job saved successfully\n  '/jobs/{id}/apply':\n    post:\n      tags:\n        - jobs\n        - applicant\n      summary: Apply for the job\n      description: Apply for the job\n      parameters:\n        - $ref: '#/components/parameters/jobId'\n      responses:\n        '200':\n          description: Applied for job successfully\n  /search:\n    get:\n      tags:\n        - search\n        - recruiter\n        - applicant\n      summary: Search for other linkedin users and jobs\n      description: Search for other linkedin users and jobs\n      parameters:\n        - name: string\n          in: query\n          description: Search text\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  users:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User'\n                  jobs:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Job' \n  /search/jobs:\n    get:\n      tags:\n        - search\n        - recruiter\n        - applicant\n      summary: Search for jobs\n      description: Search for jobs\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                 $ref: '#/components/schemas/Job'\n  /search/users:\n    get:\n      tags:\n        - search\n        - recruiter\n        - applicant\n      summary: Search for other linkedin users\n      description: Search for other linkedin users\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n  /users:\n    get:\n      tags: \n        - users\n        - recruiter\n        - applicant\n      summary: Get all users of the system\n      description: Get all users of the system\n      responses:\n        '200':\n          description: Users retrieved successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  applicants:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User'\n                  recruiters:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User'\n  '/users/{id}':\n    get:\n      tags:\n        - users\n        - recruiter\n        - applicant\n      summary: Get individual user\n      description: Individual user details\n      parameters:\n        - $ref: '#/components/parameters/userId'\n      responses:\n        '200':\n          description: User retrieved successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n    put:\n      tags:\n        - users\n        - recruiter\n        - applicant\n      summary: Edit existing user\n      description: Edit existing user\n      parameters:\n        - $ref: '#/components/parameters/userId'\n      responses:\n        '200':\n          description: Operation successful\n    delete:\n      tags:\n        - users\n        - recruiter\n        - applicant\n      summary: Delete existing user\n      description: Delete existing user\n      parameters:\n        - $ref: '#/components/parameters/userId'\n      responses:\n        '200':\n          description: User deleted successfully\n  '/users/{id}/connections':\n    get:\n      tags:\n        - users\n        - recruiter\n        - applicant\n      summary: Get all connections of user\n      description: Get all connections of user\n      parameters:\n        - $ref: '#/components/parameters/userId'\n      responses:\n        '200':\n          description: Successfully retrived all connections\n      \n  '/users/{id}/connect':\n    post:\n      tags:\n        - users\n        - recruiter\n        - applicant\n      summary: Connect to other linkedin user\n      description: Connect to other linkedin user\n      parameters:\n        - $ref: '#/components/parameters/userId'\n      responses:\n        '200':\n          description: Connection successful\n  '/users/{id}/dashboard':\n    get:\n      tags:\n        - users\n        - applicant\n        - recruiter\n      summary: Get data to populate dashboard of user\n      description: Get data to populate info graphics on the dashboard of user\n      parameters:\n        - $ref: '#/components/parameters/userId'\n      responses:\n        '200':\n          description: User retrieved successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dashboard'\n  /messages:\n    post:\n      tags:\n      - message\n      summary: Create a new thread\n      description: Create a new thread for new set of sender and reciever\n      responses:\n        200:\n          description: Thread Created Successfully \n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Conversation'\n        400:\n          description: Cannot create a thread\n  /messages/findByUser:\n    get:\n      tags:\n        - message\n      summary: Get all the messages for user\n      description: Get all the message for any user\n      parameters:\n        - name: findByUser\n          in: query\n          description: Inbox of the person logged in\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: All Conversations Retrieved Successfully \n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Conversation'\n        400:\n          description: No message found\n  '/messages/{id}': \n    get:\n      tags:\n      - message\n      summary: Get all the messages for particular thred\n      description: Get all the messages for thread\n      parameters:\n      - name: id\n        in: path\n        description: thread id to fetch all the message with a person\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Single conversation retrieved Successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Conversation'\n        400:\n          description: No message found\n    put:\n      tags:\n      - message\n      summary: Insert a message into a thred\n      description: Insert a message into a thread\n      parameters:\n      - name: id\n        in: path\n        description: thread id to post the message\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Message Posted Successfully \n        400:\n          description: No message found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Conversation'\n\ncomponents:\n  schemas:\n    Conversation :\n      required:\n      - message\n      - sender\n      - reciever\n      - id\n      type: object\n      properties:\n        messages:\n          type: array\n          items:\n            $ref: '#/components/schemas/Message'\n        sender:\n          type: string\n        reciever:\n          type: string\n        id:\n          type: integer\n          format: int64\n    Message :\n      type: object\n      properties:\n        sender:\n          type: string\n        body:\n          type: string  \n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          $ref: '#/components/schemas/Name'\n        email:\n          type: string\n          format: email\n        password:\n          type: string\n          format: password\n        role:\n          type: string\n        mobile:\n          type: integer\n          format: int32\n        connections:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n        profile:\n          oneOf:\n            - $ref: '#/components/schemas/Recruiter'\n            - $ref: '#/components/schemas/Applicant'\n      required:\n        - name\n        - email\n        - password\n        - role\n    Recruiter:\n      type: object\n      properties:\n        company:\n          type: string\n        jobs:\n          type: array\n          items:\n            $ref: '#/components/schemas/Job'\n    Applicant:\n      type: object\n      properties:\n        experience:\n          type: array\n          items:\n            $ref: '#/components/schemas/Experience'\n        education:\n          type: array\n          items:\n            $ref: '#/components/schemas/Education'\n        skills:\n          type: array\n          items:\n            type: string\n        summary:\n          type: string\n        resume:\n          type: string\n        image:\n          type: string\n          format: binary\n        applications:\n          type: array\n          items:\n            $ref: '#/components/schemas/Application'\n        saved_jobs:\n          type: array\n          items:\n            $ref: '#/components/schemas/Job'\n    Experience:\n      type: object\n      properties:\n        title:\n          type: string\n        company:\n          type: string\n        location:\n          type: string\n        headline:\n          type: string\n        description:\n          type: string\n        date:\n          $ref: '#/components/schemas/Date'\n    Education:\n      type: object\n      properties:\n        school:\n          type: string\n        degree:\n          type: string\n        field:\n          type: string\n        grade:\n          type: string\n        description:\n          type: string\n        date:\n          $ref: '#/components/schemas/Date'\n    Date:\n      type: object\n      properties:\n        start:\n          type: string\n          format: date\n        end:\n          type: string\n          format: date\n    Job:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        owner:\n          type: integer\n          format: int64\n        title:\n          type: string\n        description:\n          type: string\n        company:\n          type: string\n        location:\n          type: string\n        employment_type:\n          type: string\n        job_function:\n          type: string\n        company_logo:\n          type: string\n        applicant_count:\n          type: integer\n          format: int64\n        applications:\n          type: array\n          items: \n            $ref: '#/components/schemas/Application'\n        view_count:\n          type: integer\n          format: int64\n        skills:\n          type: array\n          items:\n            type: string\n        created_at:\n          type: string\n          format: date-time\n        bookmark_count:\n          type: integer\n          format: int64\n        easy_apply:\n          type: boolean\n    Name:\n      type: object\n      properties:\n        first:\n          type: string\n        middle:\n          type: string\n        last:\n          type: string\n      required:\n        - first\n        - last\n    Address:\n      type: object\n      properties:\n        street:\n          type: string\n        city:\n          type: string\n        state:\n          type: string\n        zipcode:\n          type: integer\n          format: int64\n      required:\n        - street\n        - city\n        - state\n        - zipcode\n    Application:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          $ref: '#/components/schemas/Name'\n        address:\n          $ref: '#/components/schemas/Address'\n        resume:\n          type: string\n        cover_letter:\n          type: string\n    Dashboard:\n      type: object\n      properties:\n        view:\n          oneOf:\n            - $ref: '#/components/schemas/RecruiterDashboard'\n            - $ref: '#/components/schemas/ApplicantDashboard'\n      required:\n        - view\n    RecruiterDashboard:\n      type: object\n      properties:\n        hot_job:\n          type: array\n          items:\n            $ref: '#/components/schemas/Graph'\n        city_hot_job:\n          type: array\n          items:\n            $ref: '#/components/schemas/Graph'\n        cold_job:\n          type: array\n          items:\n            $ref: '#/components/schemas/Graph'\n        click_count_job:\n          type: array\n          items:\n            $ref: '#/components/schemas/Graph'\n        total_count:\n          type: integer\n          format: int64\n        incomplete_count:\n          type: integer\n          format: int64\n        saved_count:\n          type: integer\n          format: int64\n      required:\n        - hot_job\n        - city_hot_job\n        - cold_job\n        - click_count_job\n    ApplicantDashboard:\n      type: object\n      properties:\n        profile_view:\n          type: array\n          items:\n            $ref: '#/components/schemas/Graph'\n        profile_view_count:\n          type: integer\n          format: int64\n        connection_count:\n          type: integer\n          format: int64\n        applied_count:\n          type: integer\n          format: int64\n        saved_count:\n          type: integer\n          format: int64\n      required:\n        - hot_job\n        - city_hot_job\n        - cold_job\n        - click_count_job\n    Graph:\n      type: object\n      properties:\n        key:\n          type: string\n          format: date\n        value:\n          type: integer\n          format: int64\n\n  parameters:\n    jobId:\n      name: id\n      in: path\n      description: ID of the job\n      required: true\n      schema:\n        type: integer\n        format: int64\n    userId:\n      name: id\n      in: path\n      description: ID of the user\n      required: true\n      schema:\n        type: integer\n        format: int64",
			"canonicalURL": "/github.com/thevarunjain/job-portal-mern-stack@2c10a262a4f1866783c6089129c48b40576c8be9/-/blob/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/thevarunjain/job-portal-mern-stack/blob/2c10a262a4f1866783c6089129c48b40576c8be9/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}