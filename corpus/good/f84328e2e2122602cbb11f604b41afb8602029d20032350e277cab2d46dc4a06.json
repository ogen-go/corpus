{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi/bulksms/openapi.yml",
			"byteSize": 69830,
			"content": "openapi: 3.0.1\ninfo:\n  x-ballerina-display:\n    label: BulkSMS\n    iconPath: \"icon.png\"\n  title: BulkSMS JSON REST API\n  description: \u003e- \n    This is a generated connector for [BulkSMS API v1](https://www.bulksms.com/developer/) OpenAPI Specification.\n\n    BulkSMS API provides capability to access you to submit and receive [BulkSMS](https://www.bulksms.com/) messages. You can also get \n    access to past messages and see your account profile. Dates are formatted according to ISO-8601, such as `1970-01-01T10:00:00+01:00` for 1st January 1970, 10AM UTC+1.\n    It currently supports operations on messages, numbers, user profile, webhooks, and batch messages.\n  version: 1.0.0\n  x-ballerina-init-description: \u003e-\n    The connector initialization requires setting the API credentials. \n    Create an [BulkSMS account](https://www.bulksms.com/) and obtain tokens following [this guide](https://www.bulksms.com/developer/json/v1/#section/Authentication).\n  x-logo:\n    url: /developer/images/bulksms.png\nservers:\n- url: https://api.bulksms.com/v1\nsecurity:\n- basicAuth: []\ntags:\n- name: Message\n  x-displayName: Messages\n- name: Profile\n  x-displayName: Profile\npaths:\n  /webhooks:\n    get:\n      tags:\n      - Webhooks\n      summary: Lists webhooks\n      operationId: listWebhooks\n      description: Contains a list of your webhooks\n      responses:\n        200:\n          description: Array of Webhooks\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Webhook'\n      security:\n      - basicAuth: []\n    post:\n      tags:\n      - Webhooks\n      summary: Creates a webhook\n      operationId: createWebhook\n      description: \"A webhook is an URL that you can register when you want the BulkSMS\\\n        \\ system to notify you about your messages.\\nYou can register multiple webhooks,\\\n        \\ and each one will be called.  (Note: you can also use our [Web App](https://www.bulksms.com/account/#!/advanced-settings/webhooks)\\\n        \\ to manage your webhooks interactively.)  \\nIf you want to be notified of\\\n        \\ `SENT` messages and `RECEIVED` messages you need to create two webhooks.\\n\\\n        \\n### Implementing your webhook\\n\\nCode samples of Webhook implementations:\\n\\\n        * [PHP](samples/webhook-php.html)\\n\\nWhen you implement your webhook, there\\\n        \\ are a few rules to be aware of:\\n- Your webhook must process `POST` requests\\\n        \\ that contains an array of messages in the post body.  This input given to\\\n        \\ your webhook has the same structure as the output produced when you call\\\n        \\ [Retrieve Messages](#tag/Message%2Fpaths%2F~1messages%2Fget).\\n- When you\\\n        \\ register or update your webhook, the URL will be tested by invoking it with\\\n        \\ an empty array (`[]`).\\n- It is possible for your webhook to receive multiple\\\n        \\ updates for the same message and status. It happens from time to time that\\\n        \\ the mobile network duplicates status updates.\\n- The order by which the\\\n        \\ webhook is invoked can be unexpected.  For example, if sender A replies\\\n        \\ before sender B, your webhook might get the reply from B first.\\n- The webhook\\\n        \\ is expected to comply with good practices with regard to the status code\\\n        \\ it responds with.\\n  - A status code in the `1xx` and `2xx` range is taken\\\n        \\ as an acknowledgement that the invocation was received and that the webhook\\\n        \\ host is ready to receive another.\\n  - A status code in the `4xx` range\\\n        \\ is taken as a permanent problem and indicates that the webhook cannot process\\\n        \\ the message. The specific message that caused the error will be discarded,\\\n        \\ but your webhook will be invoked again when another message becomes available.\\n\\\n        \\  - Any other status code will be taken as a temporary problem; and indicates\\\n        \\ that the BulkSMS system should retry. The specific message that caused the\\\n        \\ error will not be discarded and your webhook will be invoked again with\\\n        \\ this message (see the subsequent section for more details on retry processing).\\n\\\n        - Your webhook has to respond within `30` seconds.  If no response is given\\\n        \\ in this time, the invocation will be retried.\\n- It is good idea to add\\\n        \\ a secret to your URL in order to make it more secure. Here is an example:\\n\\\n        `https://www.example.com/hook.php?secret=pass763265word`\\n- You can use a\\\n        \\ non-standard port if necessary, for example: `https://www.example.com:8321/hook.php?secret=pass763265word`\\n\\\n        \\n\\n### The retry process\\n\\nThe process the BulkSMS systems follow to handle\\\n        \\ retries is roughly the following:\\n- The first retry is scheduled for 90\\\n        \\ seconds into the future.\\n- After the first retry, subsequent failures will\\\n        \\ have longer delays, following this sequence - 3 minutes, 6 minutes, 12 minutes\\\n        \\ thereafter the message will be retried every 15 minutes for a 2 day period.\\n\\\n        - When all retries fail, the message will be discarded.\\n\\n### Problem reports\\\n        \\ via email\\n\\nYour are strongly advised to provide an email address when\\\n        \\ you register your webhook.\\nAn notice will be sent to this email address\\\n        \\ to keep you in the loop whenever there are problems with your webhook.\\n\\\n        In order to prevent your inbox from being flooded, the system sends a notice\\\n        \\ about an observed error no more than once in a 24 hour period.\\n\\nThe following\\\n        \\ emails can be expected\\n - A __message retrying__ email is sent after an\\\n        \\ invocation has failed with a retry-able error.  This email is an early warning,\\\n        \\ allowing you to investigate your systems.\\n - A __message discarded__ email\\\n        \\ is sent after failure email is send when a message is discarded as a consequence\\\n        \\ of a non-retry-able error.\\n\"\n      requestBody:\n        description: |\n          Contains the property values for your new webhook\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WebhookEntry'\n        required: true\n      responses:\n        200:\n          description: Contains the webhook you created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Webhook'\n        400:\n          description: The url given for the webhook is not callable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                type: https://developer.bulksms.com/json/v1/errors/#bad-request\n                title: Bad Request\n                status: 400\n                detail: |\n                  Invoking the Webhook URL caused an error: 403 - Forbidden\n      security:\n      - basicAuth: []\n      x-codegen-request-body-name: body\n  /webhooks/{id}:\n    get:\n      tags:\n      - Webhooks\n      summary: Reads a webhook\n      operationId: getWebhookByID\n      parameters:\n      - name: id\n        in: path\n        description: The `id` of the webhook\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: The properties of a specific webhook\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Webhook'\n        400:\n          description: The url given for the webhook is not callable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                type: https://developer.bulksms.com/json/v1/errors/#bad-request\n                title: Bad Request\n                status: 400\n                detail: |\n                  Invoking the Webhook URL caused an error: 403 - Forbidden\n        404:\n          description: A webhook with the given id does not exit\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                type: https://developer.bulksms.com/json/v1/errors/#not-found\n                title: Not Found\n                status: 404\n                detail: Webhook with id '1' does not exist\n    post:\n      tags:\n      - Webhooks\n      summary: Updates a webhook\n      operationId: updateWebhook\n      parameters:\n      - name: id\n        in: path\n        description: The `id` of the webhook\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: |\n          Contains the new property values for the webhook\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WebhookEntry'\n        required: true\n      responses:\n        200:\n          description: The properties of the updated webhook\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Webhook'\n        404:\n          description: A webhook with the given id does not exit\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                type: https://developer.bulksms.com/json/v1/errors/#not-found\n                title: Not Found\n                status: 404\n                detail: Webhook with id '1' does not exist\n      x-codegen-request-body-name: body\n    delete:\n      tags:\n      - Webhooks\n      summary: Deletes a webhook\n      operationId: deleteWebhook\n      parameters:\n      - name: id\n        in: path\n        description: The `id` of the webhook\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: The webhook was deleted successfully\n          content: {}\n        404:\n          description: A webhook with the given id does not exit\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                type: https://developer.bulksms.com/json/v1/errors/#not-found\n                title: Not Found\n                status: 404\n                detail: Webhook with id '1' does not exist\n  /profile:\n    get:\n      tags:\n      - Profile\n      summary: Gets profile\n      operationId: getProfile\n      description: Returns information about your user profile\n      responses:\n        200:\n          description: A Profile object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Profile'\n      security:\n      - basicAuth: []\n  /messages:\n    get:\n      tags:\n      - Message\n      summary: Retrieves Messages\n      operationId: retrieveMessages\n      description: |\n        Retrieve the messages you have sent or received.\n\n        All the parameters are optional.  If a value is not supplied for `filter`, the messages are not filtered.\n\n        Messages can be filtered by supplying query clauses in the `filter` parameter. Each clause has the form `name=value` where `name` is the name of a filter field and `value` is a valid value for that field.  A value for a field is optional. Include a clause for a field in the filter only when there is a need to fetch messages that match some value for that field.\n        For a numeric filter field, you can also use the less than operator (`\u003c`).\n\n        If present, the filter value must have at least one clause, but it can contain a combination of clauses. Multiple clauses are separated with the `\u0026` symbol.  Semantically, multiple clauses form a [logical conjunction](https://en.wikipedia.org/wiki/Logical_conjunction).\n\n        For example, if you want to list all messages that were sent as part of a particular submission, your filter contains two clauses and will look something like this\n        ```\n        type%3DSENT\u0026submission.id%3D1-00000000000522347562\n        ```\n        Because `filter` is a request parameter, it is important to note that the value for this parameter must be *URL encoded*. In particular, the `=` encodes to `%3D` and the `\u0026` encodes to `%26`.  Note that you do not have to encode the `\u003c` character.\n\n        Using the previous example to illustrate; after encoding and encasing it, the clauses are transformed into a request that looks like this\n        ```\n        GET /v1/messages?filter=type%3DSENT%26submission.id%3D1-00000000000522347562\n        ```\n        If the field name or the field value of a clause is not valid, a [bad_request error](errors#bad-request) is returned instead of the usual result.  The `detail` field of this error provides more information about the problem.\n\n        The table below lists the fields available for filtering\n\n        | Field | Type   | Values | Note and example |\n        |-------|------|--------------------|------|\n        | id            | Integer  | Positive integer  | Use the `id` field with `\u003c` (or with `\u003e`) to fetch messages that are older (or newer) than those that are already fetched. \u003cbr/\u003e`filter=id\u003c123456` |\n        | type          | String  | SENT, RECEIVED  | SENT are Mobile Terminating (MT) SMSs; RECEIVED are Mobile Originating (MO) SMSs.\u003cbr/\u003e`filter=type%3DSENT` |\n        | submission.id | String  |  | `filter=submission.id%3D1-00000000000522347562` |\n        | status.type   | String  | ACCEPTED, SCHEDULED, SENT, DELIVERED, FAILED  | See the message `status.type` field for more information. \u003cbr/\u003e`filter=status.type%3DDELIVERED` |\n        | status.id| String  |  | See the message `status.id` field for more information. `filter=status.id%3DFAILED.EXPIRED`|\n        | submission.date | String | Formatted Date | A fully specified date (e.g. 2017-01-01T10:00:00+01:00).  Use this field with `\u003c=`, `\u003c`, `\u003e` or `\u003e=` to limit the values. \u003cbr/\u003e`filter=submission.date%3E%3D2017-01-01T10%3A00%3A00%2B01%3A00` |\n        | userSuppliedId  | String | | Use a string value you specified in the `userSuppliedId` property when you sent the message. Only `SENT` messages will be retrieved. \u003cbr/\u003e`filter=userSuppliedId%3Dacc009876` |\n      parameters:\n      - name: limit\n        in: query\n        description: |-\n          The maximum number of messages that are returned.  The default is 1000.\n          The value of `limit` is not a guarantee that a specific number of messages will be in the response, even if there are more messages available.  Consider the case where you have 150 messages and you specify `limit=50`.  It is possible that only 49 messages will be returned.  The  way to make sure that there are no more messages is to submit a new call using the `id` filter field with the `\u003c` operator (described below).\n        schema:\n          type: number\n          format: integer\n      - name: filter\n        in: query\n        description: See the message filtering for more information.\n        schema:\n          type: string\n      - name: sortOrder\n        in: query\n        description: |\n          The default value is DESCENDING\n\n          If the `sortOrder` is DESCENDING, the newest messages be first in the result.  ASCENDING places the oldest messages on top of the response.\n        schema:\n          type: string\n          enum:\n          - ASCENDING\n      responses:\n        200:\n          description: Contains the requested array of messages\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Message'\n        400:\n          description: Bad Request. The content or structure of your submission, or\n            a parameter, was found to be invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - basicAuth: []\n      x-code-samples:\n      - lang: C#\n        source: \"using System;\\nusing System.IO;\\nusing System.Net;\\n\\n    class MainClass\\n\\\n          \\    {\\n\\n        public static void Main(string[] args)\\n        {\\n  \\\n          \\          /** \\n            Note in the query string \\n            we have\\\n          \\ a filter to get only the \\n            SENT messages\\n            */\\n\\\n          \\            string myURI = \\\"https://api.bulksms.com/v1/messages?filter=type%3DSENT\\\"\\\n          ;\\n            string myUsername = \\\"username\\\";\\n            string myPassword\\\n          \\ = \\\"yourPassword\\\";\\n            var request = WebRequest.Create(myURI);\\n\\\n          \\            request.Credentials = new NetworkCredential(myUsername, myPassword);\\n\\\n          \\        request.PreAuthenticate = true;\\n            request.Method = \\\"\\\n          GET\\\";\\n            request.ContentType = \\\"application/json\\\";\\n      \\\n          \\      try\\n            {\\n                // make the call to the API\\n\\\n          \\                var response = request.GetResponse();\\n\\n             \\\n          \\   // read the response and print it to the console\\n                var\\\n          \\ reader = new StreamReader(response.GetResponseStream());\\n           \\\n          \\     Console.WriteLine(reader.ReadToEnd());\\n\\n            }  catch (WebException\\\n          \\ ex) {\\n        // show the general message\\n        Console.WriteLine(\\\"\\\n          An error occurred:\\\" + ex.Message);\\n\\n                // print the detail\\\n          \\ that come with the HTTP error \\n                var reader = new StreamReader(ex.Response.GetResponseStream());\\n\\\n          \\                Console.WriteLine(\\\"Error details:\\\" + reader.ReadToEnd());\\n\\\n          \\            }\\n    }\\n}\\n\"\n    post:\n      tags:\n      - Message\n      summary: Sends batch messages\n      operationId: sendBatchMessages\n      description: \"Send messages to one or more recipients.\\n\\nYou can post up to\\\n        \\ `30 000` messages in a batch. \\nBut note that the `deduplication-id` is\\\n        \\ set per submission, so it is recommended that you use a smaller number,\\\n        \\ like `4000` per submission in order to make resubmissions on network failures\\\n        \\ more practical.\\n\\n#### Repliability\\n\\nWhen a sent message is _repliable_,\\\n        \\  the BulkSMS system can process an SMS response sent by your recipient.\\n\\\n        \\nThe message sent by your customer is called a mobile originating (MO) message\\\n        \\ and would be available under `RECEIVED` messages. \\nYou can obtain a list\\\n        \\ of MOs using the [retrieve messages API call](#tag/Message%2Fpaths%2F~1messages%2Fget).\\n\\\n        In addition you can also get a list of the MOs that are associated with a\\\n        \\ specific sent message (see the [list related messages API call](#tag/Message%2Fpaths%2F~1messages~1%7Bid%7D~1relatedReceivedMessages%2Fget)).\\n\\\n        \\nIf you use a specific _sender id_ in the `from` property of the send message,\\\n        \\ the message will not be repliable.\\nIf you want a message to be repliable,\\\n        \\ you need to specify `REPLIABLE` in the `from.type` property.\\n\\nIf you do\\\n        \\ not set the `from` property, your account settings are considered to determine\\\n        \\ whether or not the message is repliable.\\nIf the _default repliable_ setting\\\n        \\ on your account is _yes_ then the message will be repliable. \\nIf this setting\\\n        \\ is _no_, the message will not be repliable.\\n\\n\\n#### Body templates\\n\\n\\\n        When sending a message you can use template fields to customise the message\\\n        \\ text.\\n\\n*Field based templates* allow you to create a message with place-holders\\\n        \\ for custom fields.  Fields are identified by a zero based index; the first\\\n        \\ field is `F0`, the second is `F1` and so on.  \\n\\nFor example, let's say\\\n        \\ you want to send a daily SMS message to all your clients that tell them\\\n        \\ what their current balance is.  The `body` of the message could look something\\\n        \\ like this \\n\\n```\\nGood morning {F0######}, your balance is {F1######}\\n\\\n        ```\\n\\nIn this message, the first field, `F0`, is the name  of the customer\\\n        \\ and he second field `F1` is the balance for that customer.  The `#` used\\\n        \\ to specify the maximum length  of the field.  Note that the maximum length\\\n        \\ allowed for the value includes the space taken by the braces, template name\\\n        \\ and hash symbol.  For example, the value `{F0#}` specifies a maximum length\\\n        \\ of `5`.  If the data is longer than this length, the data will be truncated\\\n        \\ when the message body is constructed.\\n\\nThe data fields are provided in\\\n        \\ the property named `fields` in the `to` element.  Here is a complete example\\\n        \\ of how this might look\\n\\n```\\n{\\n  \\\"body\\\": \\\"Good morning {F0######},\\\n        \\ your balance is {F1######}\\\",\\n  \\\"to\\\":  [\\n      {\\\"address\\\": \\\"27456789\\\"\\\n        ,\\\"fields\\\": [\\\"Harry\\\", \\\"$1345.23\\\"] },\\n      {\\\"address\\\": \\\"27456785\\\"\\\n        ,\\\"fields\\\": [\\\"Sally\\\", \\\"$2345.58\\\"] }\\n  ]\\n}\\n```\\n\\nIf you are sending\\\n        \\ to contacts (or to groups) in your phonebook, you can use the *Phonebook\\\n        \\ based templates*.  These are similar to the templates described above, but\\\n        \\ they have specific names. The template for the contact's first name is identified\\\n        \\ by `fn` and the template for the contact's surname is identified by `sn`.\\\n        \\  Below in an example that will work if the numbers are registered in your\\\n        \\ phonebook. \\n\\n```\\n{\\n  \\\"body\\\": \\\"Hi {fn######} {sn######}, have a great\\\n        \\ day!\\\",\\n  \\\"to\\\":  [\\n      {\\\"address\\\": \\\"27456789\\\" },\\n      {\\\"address\\\"\\\n        : \\\"27456785\\\" }\\n  ]\\n}\\n```\\n\"\n      parameters:\n      - name: deduplication-id\n        in: query\n        description: |\n          Safeguards against the possibility of sending the same messages more than once.\n\n          If a communication failure occurs during a submission, you cannot be sure that the submission was processed; therefore you would have to submit it again. When you post the retry, you must use the `deduplication-id` of the original post. The BulkSMS system uses this ID to check that the request was not previously processed. (If it was previously processed, the submission will succeed, and the behaviour will be indistinguishable to you from a non-duplicated submission). The ID expires after about 12 hours.\n        schema:\n          type: integer\n          format: integer\n      - name: auto-unicode\n        in: query\n        description: \"Specifies how to deal with message text that contains characters\\\n          \\ not present in the GSM 03.38 character set.\\n\\nMessages that contain only\\\n          \\ GSM 03.38 characters are not affected by this setting. \\nIf the value\\\n          \\ is `true` then a message containing non-GSM 03.38 characters will be transmitted\\\n          \\ as a Unicode SMS (which is most likely more costly). \\n\\nPlease note:\\\n          \\ when `auto-unicode` is `true` and the value of the `encoding` property\\\n          \\ is specified as `UNICODE`, the message will always be sent as `UNICODE`.\\n\\\n          \\nIf the value is `false` and the `encoding` property is `TEXT` then non-GSM\\\n          \\ 03.38 characters will be replaced by the `?` character.\\n\\nWhen using\\\n          \\ this setting on the API, you should take case to ensure that your message\\\n          \\ is _clean_.  \\n\\nInvisible unicode and unexpected characters could unintentionally\\\n          \\ convert an message to `UNICODE`.  A common mistake is to use the backtick\\\n          \\ character (\\\\`) which is unicode and will turn your `TEXT` message into\\\n          \\ a `UNICODE` message.\\n\"\n        schema:\n          type: boolean\n          default: false\n      - name: schedule-date\n        in: query\n        description: |\n          Allows you to send a message in the future.\n\n          An example value is `2019-02-18T13:00:00+02:00`.  It encodes to `2019-02-18T13%3A00%3A00%2B02%3A00`.\n          Credits are deducted from your account immediately. Once submitted, scheduled messages cannot be changed or cancelled.\n          The date can be a maximum of two years in the future. If the value is in the past, the message will be sent immediately.\n          The date format requires you to supply an offset from UTC. You can decide to use the offset of your timezone, or maybe the zone of the recipient's location is more appropriate.\n          If the destination is a group, the group members are determined at the time that you submit the message; not the time the message is scheduled to be sent.\n        schema:\n          type: string\n          format: date-time\n      - name: schedule-description\n        in: query\n        description: |\n          A note that is stored together with a scheduled submission, which could be used to more easily identify the scheduled submission at a later date.\n\n          The value of this field is ignored if the `schedule-date` is not provided.\n          A value that is longer than 256 characters is truncated.\n        schema:\n          type: string\n      requestBody:\n        description: |\n          Contains details of the message (or messages) that you want to send.\n\n          One `SubmissionEntry` can produce many messages, and your request may contain multiple such entries.\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/SubmissionEntry'\n        required: true\n      responses:\n        201:\n          description: An array of the messages that were created from the request\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Message'\n        400:\n          description: Bad Request. The content or structure of your submission, or\n            a parameter, was found to be invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: Forbidden.  Inspect the body of the response for further details\n            - for example, you may have insufficient credits remaining\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                type: https://developer.bulksms.com/json/v1/errors#insufficient-credits\n                title: Insufficient Credits\n                status: 403\n      security:\n      - basicAuth: []\n      x-code-samples:\n      - lang: PHP\n        source: \"\u003c?\\n// Your PHP installation needs cUrl support, which not all PHP\\\n          \\ installations\\n// include by default.\\n// To run under docker:\\n// docker\\\n          \\ run -v $PWD:/code php:7.3.2-alpine php /code/code_sample.php\\n\\n$username\\\n          \\ = 'your_username';\\n$password = 'your_password';\\n$messages = array(\\n\\\n          \\  array('to'=\u003e'+1233454567', 'body'=\u003e'Hello World!'),\\n  array('to'=\u003e'+1233454568',\\\n          \\ 'body'=\u003e'Hello World!')\\n);  \\n\\n$result = send_message( json_encode($messages),\\\n          \\ 'https://api.bulksms.com/v1/messages?auto-unicode=true\u0026longMessageMaxParts=30',\\\n          \\ $username, $password );\\n\\nif ($result['http_status'] != 201) {\\n  print\\\n          \\ \\\"Error sending: \\\" . ($result['error'] ? $result['error'] : \\\"HTTP status\\\n          \\ \\\".$result['http_status'].\\\"; Response was \\\" .$result['server_response']);\\n\\\n          } else {\\n  print \\\"Response \\\" . $result['server_response'];\\n  // Use\\\n          \\ json_decode($result['server_response']) to work with the response further\\n\\\n          }\\n\\nfunction send_message ( $post_body, $url, $username, $password) {\\n\\\n          \\  $ch = curl_init( );\\n  $headers = array(\\n  'Content-Type:application/json',\\n\\\n          \\  'Authorization:Basic '. base64_encode(\\\"$username:$password\\\")\\n  );\\n\\\n          \\  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\\n  curl_setopt ( $ch,\\\n          \\ CURLOPT_URL, $url );\\n  curl_setopt ( $ch, CURLOPT_POST, 1 );\\n  curl_setopt\\\n          \\ ( $ch, CURLOPT_RETURNTRANSFER, 1 );\\n  curl_setopt ( $ch, CURLOPT_POSTFIELDS,\\\n          \\ $post_body );\\n  // Allow cUrl functions 20 seconds to execute\\n  curl_setopt\\\n          \\ ( $ch, CURLOPT_TIMEOUT, 20 );\\n  // Wait 10 seconds while trying to connect\\n\\\n          \\  curl_setopt ( $ch, CURLOPT_CONNECTTIMEOUT, 10 );\\n  $output = array();\\n\\\n          \\  $output['server_response'] = curl_exec( $ch );\\n  $curl_info = curl_getinfo(\\\n          \\ $ch );\\n  $output['http_status'] = $curl_info[ 'http_code' ];\\n  $output['error']\\\n          \\ = curl_error($ch);\\n  curl_close( $ch );\\n  return $output;\\n} \\n?\u003e  \\\n          \\       \\n\"\n      - lang: C#\n        source: |\n          using System;\n          using System.IO;\n          using System.Net;\n          using System.Text;\n\n          class MainClass\n          {\n              public static void Main(string[] args)\n              {\n                  // This URL is used for sending messages\n                  string myURI = \"https://api.bulksms.com/v1/messages\";\n\n                  // change these values to match your own account\n                  string myUsername = \"username\";\n                  string myPassword = \"password\";\n\n                  // the details of the message we want to send\n                  string myData = \"{to: \\\"1111111\\\", body:\\\"Hello Mr. Smith!\\\"}\";\n\n                  // build the request based on the supplied settings\n                  var request = WebRequest.Create(myURI);\n\n                  // supply the credentials\n                  request.Credentials = new NetworkCredential(myUsername, myPassword);\n                  request.PreAuthenticate = true;\n                  // we want to use HTTP POST\n                  request.Method = \"POST\";\n                  // for this API, the type must always be JSON\n                  request.ContentType = \"application/json\";\n\n                  // Here we use Unicode encoding, but ASCIIEncoding would also work\n                  var encoding = new UnicodeEncoding();\n                  var encodedData = encoding.GetBytes(myData);\n\n                  // Write the data to the request stream\n                  var stream = request.GetRequestStream();\n                  stream.Write(encodedData, 0, encodedData.Length);\n                  stream.Close();\n\n                  // try ... catch to handle errors nicely\n                  try\n                  {\n                      // make the call to the API\n                      var response = request.GetResponse();\n\n                      // read the response and print it to the console\n                      var reader = new StreamReader(response.GetResponseStream());\n                      Console.WriteLine(reader.ReadToEnd());\n                  }\n                  catch (WebException ex)\n                  {\n                      // show the general message\n                      Console.WriteLine(\"An error occurred:\" + ex.Message);\n\n                      // print the detail that comes with the error\n                      var reader = new StreamReader(ex.Response.GetResponseStream());\n                      Console.WriteLine(\"Error details:\" + reader.ReadToEnd());\n                  }\n              }\n          }\n      - lang: Java\n        source: |\n          import java.net.*;\n          import java.util.Base64;\n          import java.io.*;\n\n          public class MainClass {\n\n            static public void main(String[] args) throws Exception {\n\n              // This URL is used for sending messages\n              String myURI = \"https://api.bulksms.com/v1/messages\";\n\n              // change these values to match your own account\n              String myUsername = \"username\";\n              String myPassword = \"password\";\n\n              // the details of the message we want to send\n              String myData = \"{to: \\\"1111111\\\", encoding: \\\"UNICODE\\\", body: \\\"Dobrá práce! Jak se máš?\\\"}\";\n\n              // if your message does not contain unicode, the \"encoding\" is not required:\n              // String myData = \"{to: \\\"1111111\\\", body: \\\"Hello Mr. Smith!\\\"}\";\n\n              // build the request based on the supplied settings\n              URL url = new URL(myURI);\n              HttpURLConnection request = (HttpURLConnection) url.openConnection();\n              request.setDoOutput(true);\n\n              // supply the credentials\n              String authStr = myUsername + \":\" + myPassword;\n              String authEncoded = Base64.getEncoder().encodeToString(authStr.getBytes());\n              request.setRequestProperty(\"Authorization\", \"Basic \" + authEncoded);\n\n              // we want to use HTTP POST\n              request.setRequestMethod(\"POST\");\n              request.setRequestProperty( \"Content-Type\", \"application/json\");\n\n              // write the data to the request\n              OutputStreamWriter out = new OutputStreamWriter(request.getOutputStream());\n              out.write(myData);\n              out.close();\n\n              // try ... catch to handle errors nicely\n              try {\n                // make the call to the API\n                InputStream response = request.getInputStream();\n                BufferedReader in = new BufferedReader(new InputStreamReader(response));\n                String replyText;\n                while ((replyText = in.readLine()) != null) {\n                  System.out.println(replyText);\n                }\n                in.close();\n              } catch (IOException ex) {\n                System.out.println(\"An error occurred:\" + ex.getMessage());\n                BufferedReader in = new BufferedReader(new InputStreamReader(request.getErrorStream()));\n                // print the detail that comes with the error\n                String replyText;\n                while ((replyText = in.readLine()) != null) {\n                  System.out.println(replyText);\n                }\n                in.close();\n              }\n              request.disconnect();\n            }\n          }\n      - lang: Node.js\n        source: |\n          const https = require('https');\n\n          let username = 'your_username';\n          let password = 'your_password';\n\n          let postData = JSON.stringify({\n            'to' : ['+111111123', '+111111124'],\n            'body': 'Hello World!'\n          });\n\n          let options = {\n            hostname: 'api.bulksms.com',\n            port: 443,\n            path: '/v1/messages',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Content-Length': postData.length,\n              'Authorization': 'Basic ' + Buffer.from(username + ':' + password).toString('base64')\n            }\n          };\n\n          let req = https.request(options, (resp) =\u003e {\n            console.log('statusCode:', resp.statusCode);\n            let data = '';\n              resp.on('data', (chunk) =\u003e {\n              data += chunk;\n            });\n            resp.on('end', () =\u003e {\n              console.log(\"Response:\", data);\n            });\n          });\n\n          req.on('error', (e) =\u003e {\n            console.error(e);\n          });\n\n          req.write(postData);\n          req.end();\n      x-codegen-request-body-name: body\n  /messages/send:\n    get:\n      tags:\n      - Message\n      summary: Sends message by simple GET or POST\n      operationId: SendMessage\n      description: |\n        A really simple interface for people who require a GET mechanism to submit a single message.\n\n        The URI is interpreted as UTF-8. HTTP Basic Auth is used for authentication.\n\n        __Note__ BulkSMS recommends that you use the more flexible Send Messages Operation when submitting SMS messages from your application.\n\n        Here is an example of a GET\n        ```http\n        GET /v1/messages/send?to=%2b270000000\u0026body=Hello%20World\n        ```\n\n        You can also use the same parameters to POST form encoded fields to `/messages`.\n        Here is an example of a POST\n        ```http\n        POST /v1/messages\n        Content-Type: application/x-www-form-urlencoded\n\n        to=%2b27000000000\u0026body=Hello+World\n        ```\n      parameters:\n      - name: to\n        in: query\n        description: The phone number of the recipient.\n        required: true\n        schema:\n          type: string\n      - name: body\n        in: query\n        description: The text you want to send.\n        required: true\n        schema:\n          type: string\n      - name: deduplication-id\n        in: query\n        description: Refer to the `deduplication-id` parameter.\n        schema:\n          type: integer\n          format: integer\n      responses:\n        201:\n          description: An array of messages\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Message'\n        400:\n          description: Bad Request. The content or structure of your submission, or\n            a parameter, was found to be invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: Forbidden.  Inspect the body of the response for further details\n            - for example, you may have insufficient credits remaining\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                type: https://developer.bulksms.com/json/v1/errors#insufficient-credits\n                title: Insufficient Credits\n                status: 403\n      security:\n      - basicAuth: []\n  /messages/{id}/relatedReceivedMessages:\n    get:\n      tags:\n      - Message\n      summary: Lists Related Messages\n      operationId: getSentMessages\n      description: |\n        Get the messages related to a sent message identified by `id`.\n\n        For more information how this work, see the `relatedSentMessageId` field in the message.\n      parameters:\n      - name: id\n        in: path\n        description: The `id` of the sent message\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: An array of related messages.  If the `id` is not a sent message,\n            the array will be empty.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Message'\n        400:\n          description: Bad Request. The content or structure of your submission, or\n            a parameter, was found to be invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - basicAuth: []\n  /messages/{id}:\n    get:\n      tags:\n      - Message\n      summary: Shows Message\n      operationId: getMessage\n      description: |\n        Get a the message by `id`.\n        ```http\n        GET /v1/messages/4023457654\n        ```\n      parameters:\n      - name: id\n        in: path\n        description: The `id` of the message you want to retrieve\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: The message detail\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Message'\n        400:\n          description: Bad Request. The content or structure of your submission, or\n            a parameter, was found to be invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: A [not-found error](errors/#not-found) if the message cannot\n            be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /blocked-numbers:\n    get:\n      tags:\n      - Blocked Numbers\n      summary: Lists blocked numbers\n      operationId: listBlockedNumbers\n      parameters:\n      - name: min-id\n        in: query\n        description: Records with an `id` that is greater or equal to min-id will\n          be returned. The default value is `0`.  You can add 1 to an id that you\n          previously retrieved, to return subsequent records.\n        schema:\n          type: integer\n      - name: limit\n        in: query\n        description: The maximum number of records to return. The default value is\n          `10000`. The value cannot be greater than 10000.\n        schema:\n          type: integer\n      responses:\n        200:\n          description: A list of BlockedNumber objects\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlockedNumber'\n      security:\n      - basicAuth: []\n    post:\n      tags:\n      - Blocked Numbers\n      summary: Creates a blocked number\n      operationId: createBlockedNumber\n      description: |\n        Blocked numbers are phone numbers to which your account is not permitted to send messages.\n        The numbers can be created via this API, by a recipient replying with a STOP message to one\n        of your previous SENT messages, or by a BulkSMS administrator.\n\n        Sending a message to a blocked number will result in the message being assigned a status of\n        `FAILED.BLOCKED`. Messages sent to blocked numbers are billed to your account.\n      requestBody:\n        description: 'Maximum size: `1000` items'\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/PhoneNumber'\n        required: true\n      responses:\n        200:\n          description: Empty body upon success\n          content: {}\n      security:\n      - basicAuth: []\n      x-codegen-request-body-name: body\ncomponents:\n  schemas:\n    Profile:\n      description: Represents a profile\n      required:\n      - created\n      - credits\n      - id\n      - quota\n      - username\n      type: object\n      nullable: true\n      properties:\n        id:\n          type: string\n          nullable: true\n          description: profile ID\n        username:\n          type: string\n          nullable: true\n          description: username of profile\n        created:\n          type: string\n          format: date-time\n          nullable: true\n          description: Created data/time \n        credits:\n          type: object\n          nullable: true\n          description: Credit Amount\n          properties:\n            balance:\n              type: number\n              format: float\n              description: Credit balance\n              nullable: true\n            limit:\n              type: integer\n              format: integer\n              nullable: true\n              description: Credit limit\n            isTransferAllowed:\n              type: boolean\n              description: Indicates whether the transferring is allowed or not\n              nullable: true\n        quota:\n          required:\n          - remaining\n          - size\n          type: object\n          description: quota details \n          nullable: true\n          properties:\n            size:\n              type: integer\n              description: The setting that limits the number of messages you can\n                send in a day.\n              format: integer\n              nullable: true\n            remaining:\n              type: integer\n              description: The number of messages you can still send today.\n              format: integer\n              nullable: true\n        originAddresses:\n          description: Original Address\n          type: object\n          nullable: true\n          properties:\n            isFullControlAllowed:\n              type: boolean\n              nullable: true\n              description: Indicates whether the full control is allowed or not\n            allowed:\n              type: array\n              description: An array of allowed details\n              nullable: true\n              items:\n                type: string\n                nullable: true\n        company:\n          type: object\n          nullable: true\n          description: company details \n          properties:\n            name:\n              type: string\n              nullable: true\n              description: name of the company\n            taxReference:\n              type: string\n              description: tax reference\n              nullable: true\n        commerce:\n          type: object\n          nullable: true\n          description: commerce profile details  \n          properties:\n            bankPaymentReference:\n              description: Bank payment detail reference\n              type: string\n              nullable: true\n            address:\n              type: object\n              nullable: true\n              description: Commerce address\n              properties:\n                street:\n                  type: array\n                  nullable: true\n                  description: Street\n                  items:\n                    type: string\n                    nullable: true\n                city:\n                  type: string\n                  description: City\n                  nullable: true\n                region:\n                  type: string\n                  description: Region\n                  nullable: true\n                country:\n                  type: string\n                  description: Country\n                  nullable: true\n                postalCode:\n                  type: string\n                  description: Postal Code\n                  nullable: true\n    SubmissionEntry:\n      required:\n      - body\n      - to\n      type: object\n      nullable: true\n      properties:\n        from:\n          required:\n          - type\n          type: object\n          nullable: true\n          properties:\n            type:\n              type: string\n              nullable: true\n              description: |\n                The type of the sender id.\n\n                If you want BulkSMS to collect replies to this message on your behalf, specify the type as REPLIABLE.  If the recipient is in a country where BulkSMS does not have a local reply number, the reply may incur costs that are more expensive than sending a local SMS in that country.\n                If you operate a service from a shortcode in a locale that allows messaging from such a shortcode, you can specify SHORTCODE for the type.\n              enum:\n              - INTERNATIONAL\n              - ALPHANUMERIC\n              - SHORTCODE\n              - REPLIABLE\n            address:\n              type: string\n              nullable: true\n              description: |\n                The address of the sender id.\n\n                The validation for this field depends on the value of the `type`.\n                INTERNATIONAL can start with `+`. It has a maximum length of 15 digits, and has to be longer than 6 digits.\n                ALPHANUMERIC has a maximum length of 11 characters.\n                SHORTCODE has a maximum length of 6 digits.\n                REPLIABLE should not specify a value here.\n              example: \"1111111\"\n          description: \"Identifies the sender.\\n\\nInstead of a structured object,\\\n            \\ you can supply a string value here. \\nIf you do this, the `type` of\\\n            \\ the sender is derived to be either INTERNATIONAL or ALPHANUMERIC.  If\\\n            \\ the value does not begin with a `+` and it contains at least one character\\\n            \\ that is not a digit, the type is detected as ALPHANUMERIC. Otherwise,\\\n            \\ the type is detected as INTERNATIONAL.\\n\"\n        to:\n          type: array\n          nullable: true\n          description: |\n            Identifies the recipients\n            Instead of an array of structured objects, you can also provide a single object, a simple string or an array of strings.\n            If you supply a string, the `type` is taken as INTERNATIONAL.\n          items:\n            type: object\n            nullable: true\n            properties:\n              type:\n                type: string\n                description: Type of the recipient. The default value is INTERNATIONAL.\n                nullable: true\n                enum:\n                - INTERNATIONAL\n                - GROUP\n              address:\n                type: string\n                nullable: true\n                description: The phone number of the recipient.  It must be supplied\n                  if the `type` is INTERNATIONAL\n              name:\n                type: string\n                nullable: true\n                description: The name of a group in your phonebook. A value can be\n                  given if the `type` is GROUP.\n              id:\n                type: string\n                nullable: true\n                description: The id of a group in your phonebook.  A value can be\n                  given if the `type` is GROUP.\n              fields:\n                type: array\n                nullable: true\n                description: |\n                  Custom fields that can be used in the message body. A value can be given if the `type` is INTERNATIONAL\n                  Read the [body templates section](#tag/Message) for more information.\n                items:\n                  type: string\n                  nullable: true\n            example:\n              type: INTERNATIONAL\n              address: \"1111111\"\n              fields:\n              - Jack\n              - $200.00\n        routingGroup:\n          type: string\n          nullable: true\n          description: |\n            Allows you to choose routing. The default is STANDARD.\n          enum:\n          - ECONOMY\n          - STANDARD\n          - PREMIUM\n        encoding:\n          type: string\n          nullable: true\n          description: \"Describes the content of the message body.\\n\\nTypically this\\\n            \\ is TEXT, which is the default if no value is provided.\\n\\nIf you need\\\n            \\ to send characters that are not covered by the [GSM 03.38](https://en.wikipedia.org/wiki/GSM_03.38)\\\n            \\ character set you will need to specify UNICODE.\\n\\nIf you want to send\\\n            \\ a sequence of bytes, you must use BINARY.\\n\\nYou can also or use the\\\n            \\ `auto-unicode` parameter of the Send Messages Operation.   \\n\\nIf you\\\n            \\ supply the value of `TEXT` while `auto-unicode` is `true` then your\\\n            \\ message may be converted to `UNICODE`.\\n\\nIf you supply a value other\\\n            \\ than `TEXT` for this property while `auto-unicode` is `true` then no\\\n            \\ automatic conversion will take place.\\n\"\n          enum:\n          - TEXT\n          - UNICODE\n          - BINARY\n        longMessageMaxParts:\n          type: integer\n          nullable: true\n          description: |\n            The maximum number of message parts that can be used for a [concatenated message](https://en.wikipedia.org/wiki/Concatenated_SMS).\n            The default is `3`.\n          format: integer\n          example: 99\n        body:\n          type: string\n          nullable: true\n          description: |\n            The message content as described in the `encoding`. If the `encoding` is BINARY, the body must contain only hexadecimal digits where one byte is represented as two digits. For example, if you want to send two bytes '0x05' and '0x1F', the message body must contain the text '051F'.\n            The message content can also contain templates, read the [body templates section](#tag/Message) for more information.\n          example: Hi there!\n        userSuppliedId:\n          type: string\n          nullable: true\n          description: |\n            Correlate the messages created from this submission to your data.\n\n            The value can contain no more than 20 characters.\n          example: submission-12765\n        protocolId:\n          type: string\n          nullable: true\n          description: |\n            The TP-PID value from GSM 03.40[.750] §9.2.3.9.\n\n            You can provide either an integer value, or a mnemonic string.\n\n            If unspecified, this property defaults to `0`, representing the IMPLICIT value.\n            Numeric values are listed below\n            | Name | Value|\n            |----- |------|\n            | IMPLICIT              | 00 |\n            | SHORT_MESSAGE_TYPE_0  | 64 |\n            | REPLACE_MESSAGE_1     | 65 |\n            | REPLACE_MESSAGE_2     | 66 |\n            | REPLACE_MESSAGE_3     | 67 |\n            | REPLACE_MESSAGE_4     | 68 |\n            | REPLACE_MESSAGE_5     | 69 |\n            | REPLACE_MESSAGE_6     | 70 |\n            | REPLACE_MESSAGE_7     | 71 |\n            | RETURN_CALL           | 95 |\n            | ME_DOWNLOAD           | 125 |\n            | ME_DEPERSONALIZE      | 126 |\n            | SIM_DOWNLOAD          | 127 |\n          enum:\n          - IMPLICIT\n          - SHORT_MESSAGE_TYPE_0\n          - REPLACE_MESSAGE_1\n          - REPLACE_MESSAGE_2\n          - REPLACE_MESSAGE_3\n          - REPLACE_MESSAGE_4\n          - REPLACE_MESSAGE_5\n          - REPLACE_MESSAGE_6\n          - REPLACE_MESSAGE_7\n          - RETURN_CALL\n          - ME_DOWNLOAD\n          - ME_DEPERSONALIZE\n          - SIM_DOWNLOAD\n        messageClass:\n          type: string\n          nullable: true\n          description: |\n            The class of the message, as specified by §4 of the GSM 03.38 specification.\n            You can provide either an integer value, or a mnemonic string.\n            The default value is SIM_SPECIFIC.\n            Numeric values are\n            | Name | Value|\n            |------|------|\n            | FLASH_SMS | 0      |\n            | ME_SPECIFIC | 1    |\n            | SIM_SPECIFIC | 2   |\n            | TE_SPECIFIC | 3   |\n          enum:\n          - FLASH_SMS\n          - ME_SPECIFIC\n          - SIM_SPECIFIC\n          - TE_SPECIFIC\n        deliveryReports:\n          type: string\n          nullable: true\n          description: |-\n            The type of delivery reports to request from the delivering network.\n            The default value  is `ALL`. Please note that not all networks support delivery reports.\n            ALL. All possible delivery reports\n            ERRORS. Only error delivery reports\n            NONE. No delivery reports\n          enum:\n          - ALL\n          - ERRORS\n          - NONE\n      description: An object that you use when posting messages.\n    WebhookEntry:\n      required:\n      - name\n      - triggerScope\n      - url\n      type: object\n      nullable: true\n      properties:\n        name:\n          type: string\n          nullable: true\n          description: |\n            A text identifier for the webhook.\n            More than one webhook cannot have the same name.\n          example: My MT Webhook\n        url:\n          type: string\n          nullable: true\n          description: |\n            The location of the webhook.\n\n            In addition to being a [valid URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Syntax), the url must also start with `http` or `https`.\n          example: https://www.example.com\n        contactEmailAddress:\n          type: string\n          nullable: true\n          description: |\n            The email address to which emails will be sent if there are problem with invoking the webhook.\n            The value must be a valid email address.\n            If this value is `null`, no email will be sent.\n            It is `null` by default.\n          example: tech_team@example.com\n        triggerScope:\n          type: string\n          nullable: true\n          description: \"Specifies when the webhook will be triggered.  \\n\\nPlease\\\n            \\ note the values are case sensitive.\\n\\nIf the value is `SENT`, the webhook\\\n            \\ will be called when a status update becomes available for a message\\\n            \\ you sent (i.e. a mobile terminating (MT) message).\\n\\nIf the value is\\\n            \\ `RECEIVED`, the webhook will be called when a message is received (i.e.\\\n            \\ a mobile originating (MO) message).\\n\\nNote that this field forces you\\\n            \\ to create two separate webhook entries if you want to collect all messages.\\\n            \\  However,  you can use the same `url` for both webhooks if you want.\\n\"\n          example: SENT\n          enum:\n          - SENT\n          - RECEIVED\n        invokeOption:\n          type: string\n          nullable: true\n          description: \"Specifies how to invoke your webhook.\\n\\nIf the value is `ONE`\\\n            \\ the array POSTed to your webhook will contain no more than a single\\\n            \\ message.  Use this option if your webhook logic is unable to handle\\\n            \\ more than one messages at a time.\\n\\nIf the value is `MANY` the array\\\n            \\ POSTed to your webhook can contain up to 10 messages.  This is the recommended\\\n            \\ option.  The number of calls made to your webhook would be less and\\\n            \\ this will speed up your total processing time.\\nIf your webhook fails\\\n            \\ for an invoke that has more than one message, each message in the array\\\n            \\ will automatically be retried one at a time. \\n\\nThis value defaults\\\n            \\ to `ONE` - but it is recommended that you set this property to `MANY`.\\n\"\n          example: MANY\n          enum:\n          - ONE\n          - MANY\n        active:\n          type: boolean\n          nullable: true\n          description: |\n            Indicates whether you want the webhook activated.\n            If the value is `true`, the webhook at the given `url` will be invoked with an empty array (`[]`) as part of the validation process.\n            If the webhook responds with a `2xx` status code, the submission is accepted; if not the webhook is not created (or updated).\n            If the value is `false` the webhook will be inactive, and it will not be invoked when messages are `SENT` or `RECEIVED`.\n            The default value is `true`.\n          example: true\n        onWebApp:\n          type: boolean\n          nullable: true\n          description: |\n            Indicates whether you want to show this webhook on the Web App.\n            Webhooks shown there can be updated by the user that use the public Web site.\n            The default value is `true`.\n          example: true\n    Webhook:\n      type: object\n      description: Represents a webhook\n      properties:\n        id:\n          type: number\n          nullable: true\n          example: 234.0\n          description: Webhook ID\n        name:\n          type: string\n          nullable: true\n          example: My MT Webhook\n          description: Webhook name\n        url:\n          type: string\n          nullable: true\n          example: https://www.example.com\n          description: Webhook URL\n        contactEmailAddress:\n          type: string\n          nullable: true\n          example: tech_team@example.com\n          description: Contact email address\n        triggerScope:\n          type: string\n          nullable: true\n          example: SENT\n          description: Trigger scope details\n        active:\n          type: boolean\n          nullable: true\n          example: true\n          description: Indicates whether the webhook is active or not\n        onWebApp:\n          type: boolean\n          example: true\n          nullable: true\n          description: Indicates whether it is on web app or not\n    Message:\n      required:\n      - body\n      - id\n      - status\n      - to\n      - type\n      type: object\n      nullable: true\n      properties:\n        id:\n          type: string\n          nullable: true\n          description: A unique identifier that is assigned when the message is created.\n        type:\n          type: string\n          nullable: true\n          description: The message direction\n          enum:\n          - SENT\n          - RECEIVED\n        from:\n          type: string\n          nullable: true\n          description: The address part of the sender id\n        to:\n          type: string\n          nullable: true\n          description: The phone number of the recipient\n        body:\n          type: object\n          nullable: true\n          description: The content of the message\n        encoding:\n          type: string\n          nullable: true\n          description: The type of the content.  See the `encoding` field for more\n            information.\n          enum:\n          - TEXT\n          - UNICODE\n          - BINARY\n        protocolId:\n          type: integer\n          nullable: true\n          description: See the `protocolId` field for more information.\n          format: integer\n        messageClass:\n          type: integer\n          nullable: true\n          description: See the `messageClass` field for more information.\n          format: integer\n        numberOfParts:\n          type: integer\n          nullable: true\n          description: The number of parts.  If this is a concatenated message, the\n            number of parts will be more than 1.  Note that this field does not have\n            a value in the submission response.\n          format: integer\n        creditCost:\n          type: number\n          nullable: true\n          description: The cost of the message (in credits).   Note that this field\n            does not have a value in the submission response.\n          format: float\n        submission:\n          required:\n          - date\n          - id\n          type: object\n          nullable: true\n          properties:\n            id:\n              type: string\n              nullable: true\n              description: A unique identity shared by all messages that were created\n                from the same submission. This field should be ignored if the `type`\n                is not SENT.\n            date:\n              type: string\n              nullable: true\n              description: The date and time the submission was processed. If the\n                `type` is RECEIVED, this field reflects the date and time the received\n                message was processed.\n              format: date-time\n          description: |\n            Identifies the submission.\n        status:\n          required:\n          - id\n          - type\n          type: object\n          nullable: true\n          properties:\n            id:\n              type: string\n              nullable: true\n              description: \"A concatenated value A.B where A is the `status.type`\\\n                \\ and B is the `status.subtype`.  \\nIt there is no value for `subtype`\\\n                \\ then B takes string value `\\\"null\\\"` (e.g. `\\\"SENT.null\\\"`).   \\n\"\n            type:\n              type: string\n              nullable: true\n              description: |2\n                ACCEPTED  Message accepted for delivery. Only returned for initial message submissions.\n                SCHEDULED  Message accepted for delivery at a later date. Only returned for initial message  submissions.\n                SENT  Message has been relayed away from our systems.\n                DELIVERED  Successfully delivered to phone.\n                UNKNOWN  Message is in an unknown state.\n                FAILED  Delivery failed.\n              enum:\n              - ACCEPTED\n              - SCHEDULED\n              - SENT\n              - DELIVERED\n              - UNKNOWN\n              - FAILED\n            subtype:\n              type: string\n              nullable: true\n              description: |\n                Has a value only if the `type` is FAILED.\n                EXPIRED  Delivery failed because message expired before delivery was possible.\n                HANDSET_ERROR  Delivery failed because of a problem related to the phone (e.g. message storage area full).\n                BLOCKED  Your account has been blocked from sending to this phone (e.g. recipient replied STOP to block communication).\n                NOT_SENT  Message delivery was not attempted (e.g. because we were not able to find a route for the supplied phone number).\n              enum:\n              - EXPIRED\n              - HANDSET_ERROR\n              - BLOCKED\n              - NOT_SENT\n          description: The status of the message\n        relatedSentMessageId:\n          type: string\n          description: |\n            This field has a value only if the type is RECEIVED.\n            With SMS messages, it is not possible to link a reply directly with a specific sent message.  However, if you specified `REPLIABLE` in the `from` property, BulkSMS will link any reply to the most recent message sent to a given phone number.\n            The `relatedSentMessageId` property keeps the information about this link.\n            You can use this property to derive an implicit conversation from a set of messages.\n              - If a received reply message has a `relatedSentMessageId`, you can use it to retrieve the last message that was sent before the reply was received.\n              - If you have the `id` of the sent message and you want all the received messages that relate to it, you can use the List Related Messages Operation.\n        userSuppliedId:\n          type: string\n          nullable: true\n          description: |\n            This is the value you supplied in the `userSuppliedId` field.\n            Has a value only if the `type` is SENT.\n    Error:\n      required:\n      - status\n      - title\n      - type\n      type: object\n      nullable: true\n      properties:\n        type:\n          type: string\n          description: A URL to one of the [error types](errors/).\n        title:\n          type: string\n          description: A short description of the type\n        status:\n          type: integer\n          description: The HTTP status code\n          format: integer\n        detail:\n          type: string\n          description: More information about why the error occurred.\n      description: See the [errors page](errors/) for more detail on what kind of\n        errors you can get.\n    PhoneNumber:\n      type: string\n      description: A phone number in E.164 format\n      example: \"44123456789\"\n    BlockedNumber:\n      required:\n      - id\n      - phoneNumber\n      type: object\n      properties:\n        id:\n          type: number\n          description: A unique identifier that is assigned when the BlockedNumber\n            is created.\n          format: integer\n          example: 234.0\n        phoneNumber:\n          # type: object\n          # nullable: true\n          # allOf:\n          # schema:\n          $ref: '#/components/schemas/PhoneNumber'\n  responses:\n    bad-request:\n      description: Bad Request. The content or structure of your submission, or a\n        parameter, was found to be invalid.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    bad-webhook-id:\n      description: A webhook with the given id does not exit\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            type: https://developer.bulksms.com/json/v1/errors/#not-found\n            title: Not Found\n            status: 404\n            detail: Webhook with id '1' does not exist\n    bad-webhook-url:\n      description: The url given for the webhook is not callable\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            type: https://developer.bulksms.com/json/v1/errors/#bad-request\n            title: Bad Request\n            status: 400\n            detail: |\n              Invoking the Webhook URL caused an error: 403 - Forbidden\n    credits:\n      description: Forbidden.  Inspect the body of the response for further details\n        - for example, you may have insufficient credits remaining\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            type: https://developer.bulksms.com/json/v1/errors#insufficient-credits\n            title: Insufficient Credits\n            status: 403\n  securitySchemes:\n    basicAuth:\n      type: http\n      description: |\n        The API uses HTTP Basic Auth for authentication.\n\n        You are requested to preemptively provide the `Authorization` header in your requests and not wait until the server has provided a `401 Unauthorized` response.\n\n        Doing so will reduce the number of requests required to achieve your goal, which will improve overall performance.\n\n        You authenticate using either the username you supplied when you registered with [BulkSMS](https://www.bulksms.com) or with an _API Token_. API tokens can be created by logging into your account and visiting _Settings \u0026gt; Developer Settings \u0026gt; API Tokens_.\n\n        __Important:__\n        - Where possible, use an API Token instead of the username and password when writing software against the API.\n\n        Whether you use a username or an API Token, the values must be [Base64 encoded](https://en.wikipedia.org/wiki/Base64) before using it in the header.\n        For example, if the username is `Aladdin` and the password is `OpenSesame`, the unencoded header value is `Aladdin:OpenSesame`.  After encoding, the full header becomes\n\n        ```\n        Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l\n        ```\n        When using an API token, the value to be encoded will be `\u003ctoken-id\u003e:\u003ctoken-secret\u003e`.  These values _before Base64 encoding_ look something like this\n\n        `\n        BBDE1B476E03498AA768F66A286AABDC-01-B:9jSbVDK20!MXdfRGiIIFu#ffUE8*S\n        `\n      scheme: basic\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/bulksms/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/bulksms/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}