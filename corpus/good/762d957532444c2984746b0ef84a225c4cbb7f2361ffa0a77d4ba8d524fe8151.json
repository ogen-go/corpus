{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stellar/java-stellar-anchor-sdk"
		},
		"file": {
			"name": "Callbacks API.yml",
			"size": 0,
			"path": "docs/Anchor Integration/Callbacks API.yml",
			"byteSize": 25876,
			"content": "openapi: 3.0.0\ninfo:\n  description: |\n    The Synchronous Callbacks API specification for the Stellar Anchor Platform project.\n    \n    The Synchronous Callbacks API defines requests made by the Platform while it is processing a request from a client application. The \n    anchor's responses to these requests affect the Platform responses to the client application.\n  version: \"1.0\"\n  title: Synchronous Callbacks API\ntags:\n  - name: \"Fees\"\n    description: \"Requests containing data that can be used to calculate transaction fees.\"\n  - name: \"Rates\"\n    description: \"Requests containing data that can be used to provide exchange rates between on \u0026 off-chain assets.\"\n  - name: \"Customers\"\n    description: |\n      [SEP-12](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0012.md) requests made from client \n      applications.\npaths:\n  /fee:\n    get:\n      description: |\n        The Platform will make this request to the anchor every time a transaction is initiated by a client application.\n\n        The Anchor must ensure that the sending and receiving customers specified in the request meet the KYC requirements\n        necessary to partake in the transaction described in the request.\n\n        The anchor must return the fee it will charge for the transaction.\n\n        In the future, this endpoint may be used to provide estimated fees to client applications prior to initiating transactions.\n        When this change is made, the request schema will be adapted to support the use case.\n      tags:\n        - Fees\n      parameters:\n        - in: query\n          name: send_asset\n          description: |\n            The asset the client application will send to the anchor in exchange for `receive_asset` in \n            [Asset Identification Format](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0038.md#asset-identification-format).\n          schema:\n            type: string\n          required: true\n        - in: query\n          name: receive_asset\n          description: |\n            The asset the that the anchor will send in exchange for `send_asset` in \n            [Asset Identification Format](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0038.md#asset-identification-format).\n          schema:\n            type: string\n          required: true\n        - in: query\n          name: send_amount\n          description: |\n            The amount of `send_asset` the client application will send in exchange for `receive_asset`. One of `send_amount` \n            or `receive_amount` will always be included in the request. If the client application specified a `quote_id` in \n            its transaction creation request, both amounts specified in the referenced quote will be passed.\n          schema:\n            type: string\n        - in: query\n          name: receive_amount\n          description: |\n            The amount of `receive_asset` the anchor will send in exchange for `send_asset`. One of `send_amount` or \n            `receive_amount` will always be included in the request. If the client application specified a `quote_id` in its \n            transaction creation request, both amounts specified in the referenced quote will be passed.\n          schema:\n            type: string\n        - in: query\n          name: client_id\n          description: |\n            An identifier for the client application making the request. This ID can be used to offer different fees to different clients.\n\n            Client IDs will be Stellar public keys when the client is initiating a SEP-31 transaction. In this case the client should be a \n            known SEP-31 sending anchor and the public key will be the Stellar address used to authenticate via SEP-10. Anchors must ensure\n            that the public key specified in the request matches a public key known to belong to the sending anchor.\n          schema:\n            type: string\n          required: true\n        - in: query\n          name: sender_id\n          description: |\n            The SEP-12 customer ID of the sending user.\n          schema:\n            type: string\n          required: true\n        - in: query\n          name: receiver_id\n          description: |\n            The SEP-12 customer ID of the receiving user.\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeeResponse'\n        '422':\n          description: |\n            Unprocessable Entity. This status should be returned when the anchor understood the request but cannot \n            return a success response. An example for when this response code would be appropriate is if the sender \n            and/or receiver is not permitted to initiate a transaction with the specified amounts. In these cases, \n            the Platform will respond to the client application's request with a `400 Bad Request` and include the \n            error message provided by the anchor in the response body.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Error. The Platform will respond to the client application with the same response code and body.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /rate:\n    get:\n      description: |\n        Transactions that involve two non-equivalent on \u0026 off-chain assets (such as USDC on Stellar and fiat EUR) must \n        use exchange rates that are communicated to the client application requesting the transaction. When clients make\n        requests to the Platform for these exchange rates, the Platform sends this request to the anchor to fetch it.\n        \n        Rates can be [indicative](https://www.investopedia.com/terms/i/indicativequote.asp) or \n        [firm](https://www.investopedia.com/terms/f/firmquote.asp). The anchor must provide an expiration if the client\n        requests a firm rate.\n        \n        Anchors can provide discounted rates specific client applications. The Platform includes the `client_id` parameter \n        for this reason.\n        \n        Either `sell_amount` or `buy_amount` will be included in requests as parameters, but never both. In the same way,\n        either `sell_delivery_method` and `buy_delivery_method` may be included in requests, but never both, since either\n        `sell_asset` or `buy_asset` is a Stellar asset.\n        \n        In the future, we may add headers to the response that informs the Platform on whether or not it can cache the\n        response returned, and if so, for how long.\n      tags:\n        - Rates\n      parameters:\n        - in: query\n          name: type\n          description: The type of rate requested. `firm` and `indicative_price` rates need to return a \"fee\" and \"total_price\" fields, while `indicative_prices` doesn't.\n          schema:\n            type: string\n            enum:\n              - indicative_price\n              - indicative_prices\n              - firm\n          required: true\n        - in: query\n          name: context\n          description: The context it will be used for. It is mandatory for the types `indicative_price` and `firm`.\n          schema:\n            type: string\n            enum:\n              - sep6\n              - sep31\n        - in: query\n          name: client_id\n          description: |\n            An identifier for the client application making the request. This ID can be used to offer different fees to different clients.\n\n            Client IDs will be the Stellar public key the public key used to authenticate via SEP-10. Anchors must ensure\n            that the public key specified in the request matches a public key known to belong to the sending anchor.\n\n            This parameter will only be specified if the client is authenticated via SEP-10. Anchors can define whether or not \n            authentication is required for fetching indicative rates. Firm rates always require authentication.\n          schema:\n            type: string\n        - in: query\n          name: sell_asset\n          description: |\n            The asset the client application will send to the anchor in exchange for `buy_asset` in \n            [Asset Identification Format](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0038.md#asset-identification-format).\n          schema:\n            type: string\n          required: true\n        - in: query\n          name: buy_asset\n          description: |\n            The asset the that the anchor will send in exchange for `sell_asset` in \n            [Asset Identification Format](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0038.md#asset-identification-format).\n          schema:\n            type: string\n          required: true\n        - in: query\n          name: sell_amount\n          description: |\n            The amount of `sell_asset` the client application will send in exchange for `buy_asset`. Will not be used in\n            conjuction with `buy_amount`.\n          schema:\n            type: string\n        - in: query\n          name: buy_amount\n          description: |\n            The amount of `buy_asset` the anchor will send in exchange for `sell_asset`. Will not be used in conjuction\n            with `sell_amount`.\n          schema:\n            type: string\n        - in: query\n          name: country_code\n          description: |\n            The [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) code of the user's current address.\n            Anchors should expect this parameter to be provided if one of the assets of the buy/sell pair is fiat and it \n            is available in two or more countries.\n          schema:\n            type: string\n        - in: query\n          name: expire_after\n          description: |\n            The client's desired `expires_at` date and time for the quote that can be used if this is a firm quote. This should\n            be a [UTC ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) string. Anchors should return `400 Bad\n            Request` if an expiration date on or after the requested value cannot be provided.\n          schema:\n            type: string\n        - in: query\n          name: sell_delivery_method\n          description: |\n            The method the client or user will use to deliver `sell_asset` to the Anchor. This value may affect the \n            expiration and price provided. The values used for this parameter is defined in the application's configuration.\n            Will not be used in conjuction with `buy_delivery_method`.\n          schema:\n            type: string\n        - in: query\n          name: buy_delivery_method\n          description: |\n            The method the client or user wants used to receive `buy_asset` from the Anchor. This value may affect the \n            expiration and price provided. The values used for this parameter is defined in the application's configuration.\n            Will not be used in conjuction with `sell_delivery_method`.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RateResponse'\n        '422':\n          description: |\n            Unprocessable Entity. This status should be returned when the anchor understood the request but cannot \n            return a success response.\n            In these cases, the Platform will respond to the client application's request with a `400 Bad Request` \n            and include the error message provided by the anchor in the response body.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Error. The Platform will respond to the client application with the same response code and body.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /customer:\n    get:\n      description: |\n        The request and response for this endpoint is identical to the \n        [`GET /customer`](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0012.md#customer-get) \n        request and response defined in SEP-12.\n        \n        This endpoint allows clients to:\n\n          1. Fetch the fields the server requires in order to register a new customer via a SEP-12 `PUT /customer` request\n        \n        If the server does not have a customer registered for the parameters sent in the request, it should return the \n        fields required in the response. The same response should be returned when no parameters are sent.\n\n          2. Check the status of a customer that may already be registered\n        \n        This allows clients to check whether the customers information was accepted, rejected, or still needs more info. \n        If the server still needs more info, or the server needs updated information, it should return the fields required.\n      tags:\n        - Customers\n      parameters:\n        - in: query\n          name: id\n          description: The ID of the customer as returned in the response of a previous PUT request.\n          schema:\n            type: string\n        - in: query\n          name: account\n          description: The Stellar or Muxed Account authenticated with the Platform via SEP-10.\n          schema:\n            type: string\n        - in: query\n          name: memo\n          description: The memo value identifying a customer with a shared account, where the shared account is `account`.\n          schema:\n            type: string\n        - in: query\n          name: memo_type\n          description: The type of memo used to identify a customer with a shared account.\n          schema:\n            type: string\n            enum:\n              - id\n              - hash\n              - text\n        - in: query\n          name: type\n          description: |\n            The type of action the customer is being KYCd for. See the \n            [Type Specification](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0012.md#type-specification)\n            documented in SEP-12.\n          schema:\n            type: string\n        - in: query\n          name: lang\n          description: |\n            Defaults to `en`. Language code specified using ISO 639-1. Human readable descriptions, choices, and \n            messages should be in this language.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: |\n            Valid request. Customer either already exists or the customer identified by the parameters is new and must \n            provide the field values described in the repsonse body. Response bodies are identical to the schema defined \n            in SEP-12.\n        '400':\n          description: Error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      tags:\n        - Customers\n      description: |\n        **The Anchor Platform does not persist any customer KYC data.**\n        \n        The request and response for this endpoint are identical to the `PUT /customer` request and response defined in SEP-12.\n        \n        Client applications make requests with the following request body, which is forwarded to the anchor. Anchors \n        must validate and persist the data passed, and return the customer's `id`.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PutCustomerRequest'\n      responses:\n        '200':\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PutCustomerResponse'\n        '400':\n          description: Invalid data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /customer/callback:\n    put:\n      tags:\n        - Customers\n      description: |\n        The request for this endpoint is identical to the `PUT /customer/callback` request defined in SEP-12.\n        \n        Allows the wallet to provide a callback URL to the anchor. The provided callback URL will replace (and supercede)\n        any previously-set callback URL for this customer.\n\n        Whenever the customer's `status` changes, the anchor must make a POST request to the callback URL. The payload \n        of the POST request will be the same as the response of SEP-12's `GET /customer`. **The Anchor Platform does not \n        make these callback requests to clients**.\n        \n        It's the wallet's responsibility to send a working callback URL to the anchor.\n        \n        Anchors will make POST requests until the customer's status changes to ACCEPTED or REJECTED. If a wallet needs \n        to watch a user's KYC status after that, it will need to set a callback again.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PutCustomerCallbackRequest'\n      responses:\n        '204':\n          description: \"Success\"\n        '400':\n          description: Invalid request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Customer not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /customer/{id}:\n    delete:\n      tags:\n        - Customers\n      description: |\n        The request for this endpoint is identical to the `PUT /customer/callback` request defined in SEP-12.\n        \n        Delete the customer's data or queue the customers data for deletion.\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n      responses:\n        '204':\n          description: Success.\n        '404':\n          description: Customer not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  schemas:\n    PutCustomerRequest:\n      type: object\n      properties:\n        id:\n          description: The ID of the customer as returned in the response of a previous PUT request.\n          type: string\n        account:\n          description: The Stellar or Muxed Account authenticated with the Platform via SEP-10.\n          type: string\n        memo:\n          description: The memo value identifying a customer with a shared account, where the shared account is `account`.\n          type: string\n        memo_type:\n          description: The type of memo used to identify a customer with a shared account.\n          type: string\n          enum:\n            - id\n            - hash\n            - text\n        type:\n          description: |\n            The type of action the customer is being KYCd for. See the \n            [Type Specification](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0012.md#type-specification) \n            documented in SEP-12.\n          type: string\n        first_name:\n          type: string\n        last_name:\n          type: string\n        additional_name:\n          type: string\n        address_country_code:\n          type: string\n        state_or_province:\n          type: string\n        city:\n          type: string\n        postal_code:\n          type: string\n        address:\n          type: string\n        mobile_number:\n          type: string\n        email_address:\n          type: string\n        birth_date:\n          type: string\n          format: date\n        birth_place:\n          type: string\n        birth_country_code:\n          type: string\n        bank_account_number:\n          type: string\n        bank_number:\n          type: string\n        bank_phone_number:\n          type: string\n        bank_branch_number:\n          type: string\n        tax_id:\n          type: string\n        tax_id_name:\n          type: string\n        occupation:\n          type: string\n        employer_name:\n          type: string\n        employer_address:\n          type: string\n        language_code:\n          type: string\n        id_type:\n          type: string\n        id_country_code:\n          type: string\n        id_issue_date:\n          type: string\n          format: date\n        id_expiration_date:\n          type: string\n          format: date\n        id_number:\n          type: string\n        ip_address:\n          type: string\n        sex:\n          type: string\n    PutCustomerResponse:\n      type: object\n      properties:\n        id:\n          type: string\n    PutCustomerCallbackRequest:\n      type: object\n      properties:\n        id:\n          description: The ID of the customer as returned in the response of a previous PUT request.\n          type: string\n        account:\n          description: The Stellar or Muxed Account authenticated with the Platform via SEP-10.\n          type: string\n        memo:\n          description: The memo value identifying a customer with a shared account, where the shared account is `account`.\n          type: string\n        memo_type:\n          description: The type of memo used to identify a customer with a shared account.\n          type: string\n          enum:\n            - id\n            - hash\n            - text\n        url:\n          description: A callback URL that the SEP-12 server will POST to when the status of the customer changes.\n          type: string\n    FeeResponse:\n      type: object\n      properties:\n        fee:\n          $ref: '#/components/schemas/Amount'\n    RateResponse:\n      type: object\n      properties:\n        rate:\n          type: object\n          properties:\n            id: \n              type: string\n              description: Id of the firm quote. NOT USED when `type=indicative*`.\n            expires_at: \n              type: string\n              format: date-time\n              description: Expirations are NOT USED when `type=indicative*`.\n            price:\n              type: string\n              description: The conversion price offered by the anchor for one unit of `buy_asset` in terms of `sell_asset`, without including fees. In traditional finance, `buy_asset` would be referred to as the base asset and `sell_asset` as the counter asset. The formula `sell_amount - fee = price * buy_amount` must hold true ([ref](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0038.md#price-formulas)).\n            total_price:\n              type: string\n              description: The total conversion price offered by the anchor for one unit of `buy_asset` in terms of `sell_asset`, including fees. In traditional finance, `buy_asset` would be referred to as the base asset and `sell_asset` as the counter asset. NOT USED when `type=indicative_prices`. The formula `sell_amount = total_price * buy_amount` must hold true ([ref](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0038.md#price-formulas)).\n            sell_amount:\n              type: string\n              description: The amount of `sell_asset` the anchor will exchange for `buy_asset`. It could be different from the `sell_amount` provided in the request, depending on how fees are applied by the Anchor.\n            buy_amount:\n              type: string\n              description: The amount of `buy_asset` the anchor will provide with `sell_asset`. It could be different from the `buy_amount` provided in the request, depending on how fees are applied by the Anchor.\n            fee:\n              $ref: '#/components/schemas/RateFeeResponse'\n          required:\n            - price\n            - sell_amount\n            - buy_amount\n    RateFeeResponse:\n      type: object\n      description: Fees are NOT USED when `type=indicative_prices`.\n      properties:\n        total:\n          type: string\n          description: The total fee to be applied.\n        asset:\n          type: string\n          description: The asset the fee will be charged in. Must be represented in [Asset Identification Format](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0038.md#asset-identification-format).\n        details:\n          type: array\n          items:\n            $ref: '#/components/schemas/RateFeeDetailResponse'\n      required:\n        - total\n        - asset\n    RateFeeDetailResponse:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of the fee, for example `ACH fee`, `Brazilian conciliation fee`, `Service fee`, etc.\n        description:\n          type: string\n          description: A text describing the fee.\n        amount:\n          type: string\n          description: The amount of asset applied. If `fee.details` is provided, `sum(fee.details.amount)` should be equals `fee.total`.\n      required:\n        - name\n        - amount\n    Amount:\n      type: object\n      properties:\n        amount:\n          type: string\n        asset:\n          type: string\n    Error:\n      type: object\n      properties:\n        error:\n          type: string\n      required:\n        - error",
			"canonicalURL": "/github.com/stellar/java-stellar-anchor-sdk@043ce5bc2dea2bc9584fc035107fd927287daec6/-/blob/docs/Anchor%20Integration/Callbacks%20API.yml",
			"externalURLs": [
				{
					"url": "https://github.com/stellar/java-stellar-anchor-sdk/blob/043ce5bc2dea2bc9584fc035107fd927287daec6/docs/Anchor Integration/Callbacks API.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}