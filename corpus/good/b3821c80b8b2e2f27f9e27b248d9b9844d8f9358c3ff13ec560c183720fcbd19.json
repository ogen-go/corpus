{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/diem/client-sdk-python"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "src/diem/testing/miniwallet/app/static/openapi.yaml",
			"byteSize": 17630,
			"content": "openapi: 3.0.3\ninfo:\n  title: Mini Wallet API Specification\n  description: \u003e\n      **Introduction**\n\n\n      The **Diem MiniWallet API** has been designed as a minimum wallet application API\n      to test other wallet apps by playing as the counterparty app.\n      You can add any new API to suit your testing purposes to the implementation of the\n      Diem MiniWallet API.\n\n\n      **Enable the Diem MiniWallet Test Suite**\n\n\n      The Diem MiniWallet Test Suite is a set of tests built on top of the Diem MiniWallet API\n      and is used to validate a wallet app's integration with the Diem Payment Network (DPN). \n      To enable the Diem MiniWallet Test Suite for your wallet app, create a Diem MiniWallet API\n      proxy to your wallet app with the following endpoints:\n\n\n        * **(Minimum required) To test sending and receiving payments on-chain:**\n          * [Create account endpoint](#post-/accounts): Used for isolating test data.\n          * [Get account balances endpoint](#get-/accounts/-account_id-/balances): Used for verifying test results.\n          * [Generate account identifier endpoint](#post-/accounts/-account_id-/account_identifiers): Used for testing receiving payments.\n          * [Send payment endpoint](#post-/accounts/-account_id-/payments): Used for testing sending payments.\n\n\n        * **To test sending and receiving payments off-chain:**\n          * [Get KYC sample endpoint](#get-/kyc_sample): Used for testing sending payments equal to or above the Travel Rule threshold limit. \n\n\n        * **To debug:**\n          * [Get account events](#get-/get-events): Used for debugging the test suite.\n\n\n      You can implement some of these endpoints selectively if they are used for testing subset\n      features. For example, the KYC sample endpoint is not required until you test payments that\n      trigger the Travel Rule. \n\n\n      The Diem MiniWallet Test Suite also provides tests to verify that\n      the MiniWallet API build for your application meets requirements for running payment integration \n      tests. We will continue to improve and develop the Diem MiniWallet Test Suite to cover more use cases. \n\n\n      We will improve and grow **MiniWallet Test Suite** to cover more cases.\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 0.0.1\ntags:\n  - name: Minimum\n    description: \u003e\n        The following are the minimum required endpoints for running Diem MiniWallet Test Suite to test sending\n        and receiving payments under the Travel Rule threshold limit.\n  - name: Off-chain\n    description: \u003e\n        The following are the required endpoints for running the Diem MiniWallet Test Suite to test payments that\n        require the Diem off-chain API (such as payments that are equal to or above the Travel Rule threshold limit).\n  - name: Optional\n    description: \u003e\n        This is an optional debugging endpoint that is not required to be implemented for running\n        the Diem MiniWallet Test Suite.\npaths:\n  /accounts:\n    post:\n      summary: Create a new account\n      description: \u003e\n          This method creates a new account. \n\n          \n          * The Diem MiniWallet Test Suite isolates test data by creating a new account for each test case.\n\n          * Client should store the response account ID for all the operations to the account.\n          \n          * The balances property value shows the initial currency deposits to the account. Client can use the \n          get account balances endpoint to check the account balances available after creating the account. \n          \n          * When the account is required to provide Know Your Customer (KYC) data during an off-chain transaction,\n           the server should use the kyc_data property value as the KycDataObject and send it to the counterparty service.\n\n \n\n\n      operationId: create-account\n      tags:\n        - Minimum\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateAccountRequest'\n        required: true\n      responses:\n        201:\n          description: Account is created; currency balances are deposited to the account if provided.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceID'\n        400:\n          $ref: '#/components/responses/ClientError'\n  /accounts/{account_id}/balances:\n    get:\n      summary: Get account balances\n      operationId: balances\n      tags:\n        - Minimum\n      parameters:\n      - name: account_id\n        in: path\n        description: Account ID\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Returns account balances\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Balances'\n        400:\n          $ref: '#/components/responses/ClientError'\n  /accounts/{account_id}/payments:\n    post:\n      summary: Send payment\n      operationId: send-payment\n      tags:\n        - Minimum\n      parameters:\n      - name: account_id\n        in: path\n        description: Account ID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Payment'\n        required: true\n      responses:\n        202:\n          description: \u003e\n              The server accepts the payment request. \n\n              * The server may reflect the payment sent in the account balance immediately. \n                The funds being sent are considered to be in the process of being transferred \n                out and should not be used for any other purpose. \n              * Once a client receives the response, expect the payment to be sent in a short time. \n                But it is not a limit to the server to complete the payment before respond the request.\n              * Client can confirm if the payment is completed by:\n                  * Checking if the sending and receiving account balances have been updated accordingly. \n                  * Checking if the sending or receiving wallet app exposes an event using the get account events endpoint. \n              * The optional get account events endpoint (if implemented) can be used to confirm if the action has failed. \n\n\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceID'\n        400:\n          $ref: '#/components/responses/ClientError'\n  /accounts/{account_id}/account_identifiers:\n    post:\n      summary: Generate account identifier\n      operationId: gen-account-identifier\n      tags:\n        - Minimum\n      parameters:\n      - name: account_id\n        in: path\n        description: Account ID\n        required: true\n        schema:\n          type: string\n      responses:\n        201:\n          description: A new account identifier is generated.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountIdentifier'\n        400:\n          $ref: '#/components/responses/ClientError'\n  /kyc_sample:\n    get:\n      summary: Get KYC sample data.\n      operationId: kyc-sample\n      tags:\n        - Off-chain\n      description: \u003e\n          This method can be used to test different behaviors during the off-chain KYC data exchange \n          process. The data is used by the counterparty wallet app to set up its test accountâ€™s KYC data. \n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/KycSample'\n  /accounts/{account_id}/events:\n    get:\n      operationId: get-events\n      summary: Get account events\n      tags:\n        - Optional\n      description: \u003e-\n          This method can be used to collect the context of a failure and will be ignored if the endpoint \n          has not been implemented or if the call fails. \n\n          The Diem MiniWallet implements the following events:\n\n          \n\n            | Event Type                | Data Attribute Type | Description                                                                       |\n            |---------------------------|---------------------|-----------------------------------------------------------------------------------|\n            | `info`                    | string              | Human readable message for what has occured.                                      |\n            | `created_account`         | JSON-encoded string | An account has been created.                                                      |\n            | `created_transaction`     | JSON-encoded string | An incoming or outgoing transaction has been created.                             |\n            | `updated_transaction`     | JSON-encoded string | An outgoing transactions has been updated due to Diem transactions being submitted or executed. |\n            | `created_subaddress`      | JSON-encoded string | A Subaddress has been created.                                                    |\n            | `created_payment_command` | JSON-encoded string | Off-chain payment command has been created.                                       |\n            | `updated_payment_command` | JSON-encoded string | Off-chain payment command has been updated.                                       |\n\n      parameters:\n      - name: account_id\n        in: path\n        description: Account ID\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Event'\n        400:\n          $ref: '#/components/responses/ClientError'\ncomponents:\n  responses:\n    ClientError:\n      description: Invalid input\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              error:\n                type: string\n                description: error message\n              stacktrace:\n                type: string\n                description: stacktrace of the error\n        text/plain:\n          schema:\n            type: string\n            example: error message and stacktrace\n  schemas:\n    Balances:\n      type: object\n      writeOnly: true\n      properties:\n        XUS:\n          type: integer\n          example: 1000000000\n        XDX:\n          type: integer\n    ResourceID:\n      required:\n      - id\n      type: object\n      properties:\n        id:\n          type: string\n          readOnly: true\n          description: ID of the resource created.\n    CreateAccountRequest:\n      type: object\n      properties:\n        kyc_data:\n          $ref: '#/components/schemas/KycDataObject'\n        balances:\n          $ref: '#/components/schemas/Balances'\n    AccountIdentifier:\n      required:\n      - account_identifier\n      type: object\n      properties:\n        account_identifier:\n          type: string\n          readOnly: true\n          description: \u003e\n              Diem account identifier defined in DIP-5 for receiving payment.\n          example: tdm1p7ujcndcl7nudzwt8fglhx6wxn08kgs5tm6mz4ustv0tyx\n    Payment:\n      required:\n      - id\n      - account_id\n      - amount\n      - currency\n      - payee\n      type: object\n      properties:\n        id:\n          type: string\n          readOnly: true\n        account_id:\n          type: string\n          readOnly: true\n        currency:\n          type: string\n          enum:\n          - XUS\n          - XDX\n        amount:\n          type: integer\n        payee:\n          type: string\n          description: \u003e\n              The receiver address of the payment.\n              Only support account identifier defined in DIP-5 for now.\n              We will add Diem ID support in the future when the protocol related is stabilized.\n    KycSample:\n      description: \u003e\n          KYC data sample for clients to create accounts to do off-chain KYC data exchanging tests.\n\n          1. `minimum` property value should be minimum valid `KycDataObject` that can pass server's\n            KYC evaluation without any additional actions during the off-chain KYC data exchange\n            process.\n          2. `reject` property value should be an example of `KycDataObject` that will be rejected\n            by server if it is presented in a counterparty service's KYC data.\n          3. `soft_match` property value should be an example of `KycDataObject` that will trigger\n            `soft_match` process and pass KYC evaluation after `additional_kyc_data` is provided\n            by counterparty service.\n          4. `soft_reject` provided value should be an example of `KycDataObject` that will trigger\n            `soft_match` process and then be rejected by KYC evaluation after `additional_kyc_data`\n            is provided.\n      required:\n      - minimum\n      - reject\n      - soft_match\n      - soft_reject\n      type: object\n      properties:\n        minimum:\n          $ref: '#/components/schemas/KycDataObject'\n        reject:\n          $ref: '#/components/schemas/KycDataObject'\n        soft_match:\n          $ref: '#/components/schemas/KycDataObject'\n        soft_reject:\n          $ref: '#/components/schemas/KycDataObject'\n    Event:\n      description: \u003e\n          Event is optional to implement; it is log of what happened in the\n          system. Useful when the test failed. It's free to add any kind of event type and\n          data.\n      required:\n      - id\n      - account_id\n      - type\n      - data\n      - timestamp\n      type: object\n      properties:\n        id:\n          type: string\n          readOnly: true\n        account_id:\n          type: string\n          readOnly: true\n        type:\n          type: string\n          description: Event type, used for decoding data.\n          readOnly: true\n        data:\n          type: string\n          description: \u003e\n              Event data can be human readable message, JSON-encoded string\n              or any other format. However, one event type should only have one data\n              format.\n          readOnly: true\n        timestamp:\n          type: integer\n          description: Milliseconds since the unix epoch. The time event object is\n            created by the system.\n          readOnly: true\n    KycDataObject:\n      type: object\n      description: \u003e\n          A KycDataObject represents the know your customer or know your client (KYC) data required for exchanging\n          KYC data in Diem off-chain API.\n\n          It matches Diem off-chain KycDataObject listed at https://dip.diem.com/dip-1/#kycdataobject.\n      example: {\"type\": \"individual\", \"payload_version\": 1, \"given_name\": \"Tom\", \"surname\": \"Jack\"}\n      required:\n        - payload_version\n        - type\n      properties:\n        payload_version:\n          type: string\n          description: \u003e-\n              Version identifier to allow modifications to KYC data Object without needing to bump version of entire API set. Set to 1\n        type:\n          type: string\n          enum: [\"individual\", \"entity\"]\n        given_name:\n          type: string\n          description: Legal given name of the user for which this KYC data Object applies.\n        surname:\n          type: string\n          description: Legal surname of the user for which this KYC data Object applies.\n        address:\n          description: Physical address data for this account\n          $ref: '#/components/schemas/Address'\n        dob:\n          type: string\n          description: \u003e-\n              Date of birth for the holder of this account. Specified as an ISO 8601 calendar date format: https://en.wikipedia.org/wiki/ISO_8601\n        place_of_birth:\n          description: Place of birth for this user. line1 and line2 fields should not be populated for this usage of the address Object\n          $ref: '#/components/schemas/Address'\n        national_id:\n          $ref: '#/components/schemas/NationalId'\n        legal_entity_name:\n          type: string\n          description: \u003e-\n              Name of the legal entity. Used when subaddress represents a legal entity rather than an individual.\n              KycData should only include one of legal_entity_name OR given_name/surname\n    Address:\n      type: object\n      properties:\n        city:\n          type: string\n          description: The city, district, suburb, town, or village\n        country:\n          type: string\n          description: Two-letter country code (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\n        line1:\n          type: string\n          description: Address line 1\n        line2:\n          type: string\n          description: Address line 2 - apartment, unit, etc.\n        postal_code:\n          type: string\n          description: ZIP or postal code\n        state:\n          type: string\n          description: State, county, province, region.\n    NationalId:\n      type: object\n      required:\n        - id_value\n      description: National ID information for the holder of this account\n      properties:\n        id_value:\n          type: string\n          description: Indicates the national ID value - for example, a social security number\n        county:\n          type: string\n          description: Two-letter country code (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\n        type:\n          type: string\n          description: Indicates the type of the ID\n",
			"canonicalURL": "/github.com/diem/client-sdk-python@5f515085a4c200152dee6d321b95c019a71b5429/-/blob/src/diem/testing/miniwallet/app/static/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/diem/client-sdk-python/blob/5f515085a4c200152dee6d321b95c019a71b5429/src/diem/testing/miniwallet/app/static/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}