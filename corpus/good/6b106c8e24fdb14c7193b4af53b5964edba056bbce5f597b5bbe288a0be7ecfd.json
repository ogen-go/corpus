{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/leaderboardsgg/leaderboard-backend-go"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "docs/openapi.yml",
			"byteSize": 10745,
			"content": "openapi: 3.0.2\ninfo:\n    title: Leaderboards.gg API\n    description: This is the docs for the Leaderboards.gg API version 1.\n    version: \"1\"\n\nservers:\n    - url: https://leaderboards.gg/api/v1\n\npaths:\n    /register:\n        post:\n            summary: Registers a user.\n            requestBody:\n                description: A [UserRegister](#/components/schemas/UserRegister) object.\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/UserRegister\"\n            responses:\n                \"201\":\n                    $ref: \"#/components/responses/UserRegister201\"\n                \"409\":\n                    $ref: \"#/components/responses/UserRegister409\"\n                \"500\":\n                    description: Server error.\n    /login:\n        post:\n            summary: Logs a user in.\n            requestBody:\n                description: \"A UserLogin object. It has two required properties: `username` and `password`.\"\n                required: true\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/UserLogin\"\n            responses:\n                \"200\":\n                    $ref: \"#/components/responses/UserLogin200\"\n                \"401\":\n                    $ref: \"#/components/responses/UserLogin401\"\n                \"500\":\n                    $ref: \"#/components/responses/UserLogin500\"\n    /logout:\n        post:\n            summary: Logs a user out.\n            responses:\n                \"200\":\n                    description: User logged out successfully.\n    /refresh_token:\n        get:\n            summary: Refreshes the JWT for the currently logged-in user. The token still needs to be valid on refresh.\n            responses:\n                \"200\":\n                    $ref: \"#/components/responses/RefreshToken200\"\n    /ping:\n        get:\n            summary: A simple check. A de facto health check endpoint.\n            responses:\n                \"200\":\n                    $ref: \"#/components/responses/Ping200\"\n    /users/{id}:\n        get:\n            summary: Returns a user by ID.\n            parameters:\n                - in: path\n                  name: id\n                  required: true\n                  schema:\n                      type: number\n                      format: uint64\n                      minimum: 1\n            responses:\n                \"200\":\n                    $ref: \"#/components/responses/GetUser200\"\n                \"400\":\n                    description: Bad request. `id` must be an integer and be larger than 0.\n                \"404\":\n                    $ref: \"#/components/responses/GetUser404\"\n                \"500\":\n                    $ref: \"#/components/responses/GetUser500\"\n    /me:\n        get:\n            summary: Gets the currently logged-in user.\n            responses:\n                \"200\":\n                    $ref: \"#/components/responses/UserPersonal200\"\n                \"500\":\n                    description: Server error.\n\ncomponents:\n    schemas:\n        email:\n            type: string\n            format: email\n            example: johnsmithruns@leaderboards.gg\n        password:\n            type: string\n            format: password\n            minLength: 8\n            example: \"password\"\n        userId:\n            type: integer\n            format: uint64\n            minimum: 1\n            example: 1\n        username:\n            type: string\n            minLength: 2\n            example: \"JohnSmithRuns\"\n        UserIdentifier:\n            type: object\n            required:\n                - id\n                - username\n            properties:\n                id:\n                    $ref: \"#/components/schemas/userId\"\n                username:\n                    $ref: \"#/components/schemas/username\"\n        UserPersonal:\n            allOf:\n                - $ref: \"#/components/schemas/UserIdentifier\"\n                - type: object\n                  required:\n                      - email\n                  properties:\n                      email:\n                          $ref: \"#/components/schemas/email\"\n        UserLogin:\n            type: object\n            required:\n                - username\n                - password\n            properties:\n                username:\n                    $ref: \"#/components/schemas/username\"\n                password:\n                    $ref: \"#/components/schemas/password\"\n        UserRegister:\n            allOf:\n                - type: object\n                  required:\n                      - email\n                      - password\n                      - password_confirm\n                      - username\n                  properties:\n                      email:\n                          $ref: \"#/components/schemas/email\"\n                      password:\n                          $ref: \"#/components/schemas/password\"\n                      password_confirm:\n                          $ref: \"#/components/schemas/password\"\n                      username:\n                          $ref: \"#/components/schemas/username\"\n        UserLoginErrorResponseBody:\n            type: object\n            required:\n                - code\n                - message\n            properties:\n                code:\n                    type: number\n                    minimum: 400\n                    maxItems: 599\n                message:\n                    type: string\n        ErrorResponseBody:\n            type: object\n            required:\n                - message\n            properties:\n                message:\n                    type: string\n    responses:\n        GetUser200:\n            description: 'User was found. The response will be in the form `{\"user\": \u003cUserIdentifier\u003e}`.'\n            content:\n                application/json:\n                    schema:\n                        type: object\n                        required:\n                            - data\n                        properties:\n                            data:\n                                $ref: \"#/components/schemas/UserIdentifier\"\n        GetUser404:\n            description: No user with `id` could be found.\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/ErrorResponseBody\"\n        GetUser500:\n            description: Server error.\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/ErrorResponseBody\"\n        UserRegister201:\n            description: An object with a \"data\" key mapped to a [UserIdentifier](#/components/schemas/UserIdentifier).\n            content:\n                application/json:\n                    schema:\n                        type: object\n                        required:\n                            - data\n                        properties:\n                            data:\n                                $ref: \"#/components/schemas/UserIdentifier\"\n            headers:\n                Location:\n                    description: The slug to the user.\n                    schema:\n                        type: string\n                        example: /api/v1/users/1\n        UserRegister409:\n            description: The user cannot be created as the post request body contains a username and/or an email address that already exist(s) in the database.\n            content:\n                application/json:\n                    schema:\n                        type: object\n                        properties:\n                            errors:\n                                type: array\n                                maxItems: 1\n                                items:\n                                    type: object\n                                    properties:\n                                        constraint:\n                                            type: string\n                                        message:\n                                            type: string\n        UserPersonal200:\n            description: The user was found.\n            content:\n                application/json:\n                    schema:\n                        type: object\n                        required:\n                            - data\n                        properties:\n                            data:\n                                $ref: \"#/components/schemas/UserPersonal\"\n        UserLogin401:\n            description: User is unauthorized to log in. This can either be because authentication or JWT creation failed.\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/UserLoginErrorResponseBody\"\n                    example:\n                        {\n                            \"code\": 401,\n                            \"message\": \"missing Username or Password\",\n                        }\n        UserLogin500:\n            description: Server error.\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/UserLoginErrorResponseBody\"\n                    example: { \"code\": 500, \"message\": \"Internal server error\" }\n        UserLogin200:\n            description: User logged in successfully. A JWT that lasts for an hour will be returned.\n            content:\n                application/json:\n                    schema:\n                        type: object\n                        required:\n                            - token\n                        properties:\n                            token:\n                                type: string\n                                format: jwt\n        RefreshToken200:\n            description: 'Token was refreshed successfully. A new token will be returned under `{\"token\": \u003ctoken\u003e}`.'\n            content:\n                application/json:\n                    schema:\n                        type: object\n                        properties:\n                            token:\n                                type: string\n                                format: jwt\n                    example: { \"token\": \"\u003cexample_jwt\u003e\" }\n        Ping200:\n            description: 'The server''s running. A `{\"message\": \"pong\"}` will be returned.'\n            content:\n                application/json:\n                    schema:\n                        type: object\n                        properties:\n                            message:\n                                type: string\n                        example:\n                            message: pong\n",
			"canonicalURL": "/github.com/leaderboardsgg/leaderboard-backend-go@13fd0b2571dcfa3f15e380c4c4dd95d6f7d1a1a0/-/blob/docs/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/leaderboardsgg/leaderboard-backend-go/blob/13fd0b2571dcfa3f15e380c4c4dd95d6f7d1a1a0/docs/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}