{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/schmidtbri/lambda-ml-model-deployment"
		},
		"file": {
			"name": "openapi_specification.yaml",
			"size": 0,
			"path": "openapi_specification.yaml",
			"byteSize": 5166,
			"content": "components:\n  schemas:\n    Error:\n      properties:\n        message:\n          description: The error message.\n          type: string\n        type:\n          description: The type of error.\n          type: string\n      required:\n      - message\n      - type\n      type: object\n    JSONSchema:\n      properties:\n        additionalProperties:\n          type: boolean\n        id:\n          type: string\n        properties:\n          additionalProperties:\n            $ref: '#/components/schemas/JsonSchemaProperty'\n          type: object\n        required:\n          items:\n            type: string\n          type: array\n        schema:\n          type: string\n        title:\n          type: string\n        type:\n          type: string\n      required:\n      - additionalProperties\n      - id\n      - required\n      - schema\n      - type\n      type: object\n    JsonSchemaProperty:\n      properties:\n        description:\n          type: string\n        type:\n          type: string\n      required:\n      - type\n      type: object\n    Model:\n      properties:\n        description:\n          description: The description of the model.\n          type: string\n        display_name:\n          description: The display name of the model.\n          type: string\n        major_version:\n          description: The major version of the model package.\n          format: int32\n          type: integer\n        minor_version:\n          description: The minor version of the model package.\n          format: int32\n          type: integer\n        qualified_name:\n          description: The qualified name of the model.\n          type: string\n      required:\n      - description\n      - display_name\n      - major_version\n      - minor_version\n      - qualified_name\n      type: object\n    ModelCollection:\n      properties:\n        models:\n          description: A collection of moodels.\n          items:\n            $ref: '#/components/schemas/Model'\n          type: array\n      required:\n      - models\n      type: object\n    ModelMetadata:\n      properties:\n        description:\n          description: The description of the model.\n          type: string\n        display_name:\n          description: The display name of the model.\n          type: string\n        input_schema:\n          allOf:\n          - $ref: '#/components/schemas/JSONSchema'\n          description: The JSON schema of the input of the model.\n        major_version:\n          description: The major version of the model package.\n          format: int32\n          type: integer\n        minor_version:\n          description: The minor version of the model package.\n          format: int32\n          type: integer\n        output_schema:\n          allOf:\n          - $ref: '#/components/schemas/JSONSchema'\n          description: The JSON schema of the output of the model.\n        qualified_name:\n          description: The qualified name of the model.\n          type: string\n      required:\n      - description\n      - display_name\n      - input_schema\n      - major_version\n      - minor_version\n      - output_schema\n      - qualified_name\n      type: object\ninfo:\n  description: Simple lambda that makes predictions with an MLModel class.\n  title: Model Lambda Web API\n  version: 1.0.0\nopenapi: 3.0.2\npaths:\n  /api/models:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ModelCollection'\n          description: List of model available\n  /api/models/{qualified_name}/metadata:\n    get:\n      parameters:\n      - description: The qualified name of the model for which metadata is being requested.\n        in: path\n        name: qualified_name\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ModelMetadata'\n          description: Metadata about one model\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Model not found.\n  /api/models/{qualified_name}/predict:\n    post:\n      parameters:\n      - description: The qualified name of the model being used for prediction.\n        in: path\n        name: qualified_name\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Prediction is succesful. The schema of the body of the response\n            is described by the model's output schema.\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Input is not valid JSON or does not meet the model's input\n            schema.\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Model not found.\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Server error.\n",
			"canonicalURL": "/github.com/schmidtbri/lambda-ml-model-deployment@e0595e96a280f9998d0d52dff8dfc6a1ac7d0aa5/-/blob/openapi_specification.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/schmidtbri/lambda-ml-model-deployment/blob/e0595e96a280f9998d0d52dff8dfc6a1ac7d0aa5/openapi_specification.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}