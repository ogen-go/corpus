{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bian-official/public"
		},
		"file": {
			"name": "ProductServiceAgency.yaml",
			"size": 0,
			"path": "release10.0.0/semantic-apis/oas3/yamls/ProductServiceAgency.yaml",
			"byteSize": 33226,
			"content": "openapi: 3.0.1\ninfo:\n  title: Product Service Agency\n  description: This Service Domain establishes and maintains contractual arrangements with product and service agencies\n  version: 10.0.0\nservers:\n- description: SwaggerHub API Auto Mocking\n  url: https://virtserver.swaggerhub.com/BIAN-3/ProductServiceAgency/10.0.0\npaths:\n  /ProductServiceAgency/{productserviceagencyId}/Control:\n    put:\n      tags:\n      - CR - ServiceProviderAgreement\n      summary: Control Service Provider Agreement\n      description: Control Service Provider Agreement\n      operationId: Control\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      requestBody:\n        $ref: '#/components/requestBodies/ServiceProviderAgreement'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceProviderAgreement'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/Evaluate:\n    post:\n      tags:\n      - CR - ServiceProviderAgreement\n      summary: Evaluate Service Provider Agreement\n      description: Evaluate Service Provider Agreement\n      operationId: Evaluate\n      parameters: []\n      requestBody:\n        $ref: '#/components/requestBodies/ServiceProviderAgreement'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceProviderAgreement'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/Exchange:\n    put:\n      tags:\n      - CR - ServiceProviderAgreement\n      summary: Exchange Service Provider Agreement\n      description: Exchange Service Provider Agreement\n      operationId: Exchange\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      requestBody:\n        $ref: '#/components/requestBodies/ServiceProviderAgreement'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceProviderAgreement'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/Grant:\n    put:\n      tags:\n      - CR - ServiceProviderAgreement\n      summary: Grant Service Provider Agreement\n      description: Grant Service Provider Agreement\n      operationId: Grant\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      requestBody:\n        $ref: '#/components/requestBodies/ServiceProviderAgreement'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceProviderAgreement'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/Notify:\n    get:\n      tags:\n      - CR - ServiceProviderAgreement\n      summary: Notify Service Provider Agreement\n      description: Notify Service Provider Agreement\n      operationId: Notify\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceProviderAgreement'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/Request:\n    put:\n      tags:\n      - CR - ServiceProviderAgreement\n      summary: Request Service Provider Agreement\n      description: Request Service Provider Agreement\n      operationId: Request\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      requestBody:\n        $ref: '#/components/requestBodies/ServiceProviderAgreement'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceProviderAgreement'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/Retrieve:\n    get:\n      tags:\n      - CR - ServiceProviderAgreement\n      summary: Retrieve Service Provider Agreement\n      description: Retrieve Service Provider Agreement\n      operationId: Retrieve\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceProviderAgreement'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/Update:\n    put:\n      tags:\n      - CR - ServiceProviderAgreement\n      summary: Update Service Provider Agreement\n      description: Update Service Provider Agreement\n      operationId: Update\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      requestBody:\n        $ref: '#/components/requestBodies/ServiceProviderAgreement'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceProviderAgreement'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/LegalTerm/Evaluate:\n    post:\n      tags:\n      - BQ - LegalTerm\n      summary: Evaluate Legal Term\n      description: Evaluate Legal Term\n      operationId: EvaluateLegalTerm\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      requestBody:\n        $ref: '#/components/requestBodies/LegalTerm'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LegalTerm'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/PolicyTerm/Evaluate:\n    post:\n      tags:\n      - BQ - PolicyTerm\n      summary: Evaluate Policy Term\n      description: Evaluate Policy Term\n      operationId: EvaluatePolicyTerm\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      requestBody:\n        $ref: '#/components/requestBodies/PolicyTerm'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyTerm'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/RegulatoryTerm/Evaluate:\n    post:\n      tags:\n      - BQ - RegulatoryTerm\n      summary: Evaluate Regulatory Term\n      description: Evaluate Regulatory Term\n      operationId: EvaluateRegulatoryTerm\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      requestBody:\n        $ref: '#/components/requestBodies/RegulatoryTerm'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegulatoryTerm'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/LegalTerm/{legaltermId}/Exchange:\n    put:\n      tags:\n      - BQ - LegalTerm\n      summary: Exchange Legal Term\n      description: Exchange Legal Term\n      operationId: ExchangeLegalTerm\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      - $ref: '#/components/parameters/LegalTermID'\n      requestBody:\n        $ref: '#/components/requestBodies/LegalTerm'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LegalTerm'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/PolicyTerm/{policytermId}/Exchange:\n    put:\n      tags:\n      - BQ - PolicyTerm\n      summary: Exchange Policy Term\n      description: Exchange Policy Term\n      operationId: ExchangePolicyTerm\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      - $ref: '#/components/parameters/PolicyTermID'\n      requestBody:\n        $ref: '#/components/requestBodies/PolicyTerm'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyTerm'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/RegulatoryTerm/{regulatorytermId}/Exchange:\n    put:\n      tags:\n      - BQ - RegulatoryTerm\n      summary: Exchange Regulatory Term\n      description: Exchange Regulatory Term\n      operationId: ExchangeRegulatoryTerm\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      - $ref: '#/components/parameters/RegulatoryTermID'\n      requestBody:\n        $ref: '#/components/requestBodies/RegulatoryTerm'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegulatoryTerm'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/LegalTerm/{legaltermId}/Notify:\n    get:\n      tags:\n      - BQ - LegalTerm\n      summary: Notify Legal Term\n      description: Notify Legal Term\n      operationId: NotifyLegalTerm\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      - $ref: '#/components/parameters/LegalTermID'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LegalTerm'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/PolicyTerm/{policytermId}/Notify:\n    get:\n      tags:\n      - BQ - PolicyTerm\n      summary: Notify Policy Term\n      description: Notify Policy Term\n      operationId: NotifyPolicyTerm\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      - $ref: '#/components/parameters/PolicyTermID'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyTerm'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/RegulatoryTerm/{regulatorytermId}/Notify:\n    get:\n      tags:\n      - BQ - RegulatoryTerm\n      summary: Notify Regulatory Term\n      description: Notify Regulatory Term\n      operationId: NotifyRegulatoryTerm\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      - $ref: '#/components/parameters/RegulatoryTermID'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegulatoryTerm'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/LegalTerm/{legaltermId}/Request:\n    put:\n      tags:\n      - BQ - LegalTerm\n      summary: Request Legal Term\n      description: Request Legal Term\n      operationId: RequestLegalTerm\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      - $ref: '#/components/parameters/LegalTermID'\n      requestBody:\n        $ref: '#/components/requestBodies/LegalTerm'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LegalTerm'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/PolicyTerm/{policytermId}/Request:\n    put:\n      tags:\n      - BQ - PolicyTerm\n      summary: Request Policy Term\n      description: Request Policy Term\n      operationId: RequestPolicyTerm\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      - $ref: '#/components/parameters/PolicyTermID'\n      requestBody:\n        $ref: '#/components/requestBodies/PolicyTerm'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyTerm'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/RegulatoryTerm/{regulatorytermId}/Request:\n    put:\n      tags:\n      - BQ - RegulatoryTerm\n      summary: Request Regulatory Term\n      description: Request Regulatory Term\n      operationId: RequestRegulatoryTerm\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      - $ref: '#/components/parameters/RegulatoryTermID'\n      requestBody:\n        $ref: '#/components/requestBodies/RegulatoryTerm'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegulatoryTerm'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/LegalTerm/{legaltermId}/Retrieve:\n    get:\n      tags:\n      - BQ - LegalTerm\n      summary: Retrieve Legal Term\n      description: Retrieve Legal Term\n      operationId: RetrieveLegalTerm\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      - $ref: '#/components/parameters/LegalTermID'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LegalTerm'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/PolicyTerm/{policytermId}/Retrieve:\n    get:\n      tags:\n      - BQ - PolicyTerm\n      summary: Retrieve Policy Term\n      description: Retrieve Policy Term\n      operationId: RetrievePolicyTerm\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      - $ref: '#/components/parameters/PolicyTermID'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyTerm'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/RegulatoryTerm/{regulatorytermId}/Retrieve:\n    get:\n      tags:\n      - BQ - RegulatoryTerm\n      summary: Retrieve Regulatory Term\n      description: Retrieve Regulatory Term\n      operationId: RetrieveRegulatoryTerm\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      - $ref: '#/components/parameters/RegulatoryTermID'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegulatoryTerm'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/LegalTerm/{legaltermId}/Update:\n    put:\n      tags:\n      - BQ - LegalTerm\n      summary: Update Legal Term\n      description: Update Legal Term\n      operationId: UpdateLegalTerm\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      - $ref: '#/components/parameters/LegalTermID'\n      requestBody:\n        $ref: '#/components/requestBodies/LegalTerm'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LegalTerm'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/PolicyTerm/{policytermId}/Update:\n    put:\n      tags:\n      - BQ - PolicyTerm\n      summary: Update Policy Term\n      description: Update Policy Term\n      operationId: UpdatePolicyTerm\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      - $ref: '#/components/parameters/PolicyTermID'\n      requestBody:\n        $ref: '#/components/requestBodies/PolicyTerm'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyTerm'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /ProductServiceAgency/{productserviceagencyId}/RegulatoryTerm/{regulatorytermId}/Update:\n    put:\n      tags:\n      - BQ - RegulatoryTerm\n      summary: Update Regulatory Term\n      description: Update Regulatory Term\n      operationId: UpdateRegulatoryTerm\n      parameters:\n      - $ref: '#/components/parameters/ProductServiceAgencyID'\n      - $ref: '#/components/parameters/RegulatoryTermID'\n      requestBody:\n        $ref: '#/components/requestBodies/RegulatoryTerm'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegulatoryTerm'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        429:\n          $ref: '#/components/responses/TooManyRequestsError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\ncomponents:\n  schemas:\n    ServiceProviderAgreement:\n      type: object\n      properties:\n        ServiceProviderAgreementParameterType:\n          type: string\n        ServiceProviderAgreementSelectedOption:\n          type: string\n        ServiceProviderAgreementType:\n          type: string\n        ServiceProviderAgreementReference:\n          type: string\n        ServiceProviderAgreementDischargeRequest:\n          type: string\n        ServiceProviderAgreementDischargeSchedule:\n          type: object\n        ServiceProviderAgreementStatus:\n          type: string\n        ServiceProviderAgreementAssociatedParty:\n          type: object\n        ServiceProviderAgreementCustomerReference:\n          type: object\n        ServiceProviderAgreementObligation:\n          type: string\n        ServiceProviderAgreementEntitlement:\n          type: string\n        ServiceProviderAgreementRegulationReference:\n          type: object\n        ServiceProviderAgreementRegulationType:\n          type: string\n        ServiceProviderAgreementJurisdiction:\n          type: object\n        ServiceProviderAgreementAccountReference:\n          type: string\n        ServiceProviderAgreementSubjectMatter:\n          type: object\n        ServiceProviderAgreementProductReference:\n          type: object\n        ServiceProviderAgreementCalendarReference:\n          type: string\n        ServiceProviderAgreementAssociatedAgreementReference:\n          type: string\n    RegulatoryTerm:\n      type: object\n      properties:\n        Preconditions:\n          type: object\n        Schedule:\n          type: object\n        BusinessService:\n          type: object\n        ServiceProviderAgreementReference:\n          type: string\n        RegulatoryTermReference:\n          type: string\n        RegulatoryTermType:\n          type: string\n        RegulatoryAuthority:\n          type: string\n        ApplicableRegulationReference:\n          type: object\n        ApplicableRegulationInterpretation:\n          type: string\n    PolicyTerm:\n      type: object\n      properties:\n        Preconditions:\n          type: object\n        Schedule:\n          type: object\n        BusinessService:\n          type: object\n        ServiceProviderAgreementReference:\n          type: string\n        PolicyTermReference:\n          type: string\n        PolicyTermType:\n          type: string\n        BankPolicy-RuleType:\n          type: string\n        ApplicableBankPolicy-RuleReference:\n          type: object\n        ApplicableBankPolicy-RuleInterpretation:\n          type: string\n    LegalTerm:\n      type: object\n      properties:\n        Preconditions:\n          type: object\n        Schedule:\n          type: object\n        BusinessService:\n          type: object\n        ServiceProviderAgreementReference:\n          type: string\n        LegalTermReference:\n          type: string\n        LegalTermType:\n          type: string\n        Jurisdiction:\n          type: string\n        ApplicableLawReference:\n          type: object\n        ApplicableLawInterpretation:\n          type: string\n    ProductServiceAgencyOutcome:\n      type: object\n      properties:\n        ProductServiceAgencyAgreement:\n          type: string\n        ProductServiceAgencyWorkProduct:\n          type: object\n        ProductServiceAgencyWorkProductType:\n          type: string\n    HTTPError:\n      type: object\n      properties:\n        status_code:\n          type: string\n        status:\n          type: string\n        message:\n          type: string\n  parameters:\n    ProductServiceAgencyID:\n      name: productserviceagencyId\n      in: path\n      required: true\n      style: simple\n      explode: false\n      schema:\n        type: string\n    RegulatoryTermID:\n      name: regulatorytermId\n      in: path\n      required: true\n      style: simple\n      explode: false\n      schema:\n        type: string\n    PolicyTermID:\n      name: policytermId\n      in: path\n      required: true\n      style: simple\n      explode: false\n      schema:\n        type: string\n    LegalTermID:\n      name: legaltermId\n      in: path\n      required: true\n      style: simple\n      explode: false\n      schema:\n        type: string\n    ProductServiceAgencyOutcomeID:\n      name: productserviceagencyoutcomeId\n      in: path\n      required: true\n      style: simple\n      explode: false\n      schema:\n        type: string\n  requestBodies:\n    ServiceProviderAgreement:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ServiceProviderAgreement'\n    LegalTerm:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/LegalTerm'\n    PolicyTerm:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/PolicyTerm'\n    RegulatoryTerm:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/RegulatoryTerm'\n  responses:\n    HTTPError:\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/HTTPError'\n    BadRequestError:\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/HTTPError'\n    UnauthorizedError:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/HTTPError'\n    ForbiddenError:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/HTTPError'\n    NotFoundError:\n      description: Not Found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/HTTPError'\n    TooManyRequestsError:\n      description: Too Many Requests\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/HTTPError'\n    InternalServerError:\n      description: Internal Server Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/HTTPError'\n...\n",
			"canonicalURL": "/github.com/bian-official/public@dc33ea6e7cb8ac904995f7a514d5d2e5119c140f/-/blob/release10.0.0/semantic-apis/oas3/yamls/ProductServiceAgency.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/bian-official/public/blob/dc33ea6e7cb8ac904995f7a514d5d2e5119c140f/release10.0.0/semantic-apis/oas3/yamls/ProductServiceAgency.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}