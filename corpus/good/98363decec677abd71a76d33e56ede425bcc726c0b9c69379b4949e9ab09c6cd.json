{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mu-box/core"
		},
		"file": {
			"name": "portal-load-balancer-api.yaml",
			"size": 0,
			"path": "docs/servers/portal-load-balancer-api.yaml",
			"byteSize": 13763,
			"content": "openapi: 3.0.0\n# Added by API Auto Mocking Plugin\nservers:\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/danhunsaker/portal-load-balancer/1.0.0\n  - description: Individual application server\n    url: https://{host}:8443\n    variables:\n      host:\n        default: ''\n        description: The host IP of the server\ninfo:\n  version: '1.0.0'\n  title: 'Portal Load Balancer API'\n  description: 'The API spec for the Portal load balancer component.'\npaths:\n  /services:\n    get:\n      summary: List all services\n      tags: [services]\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Service'\n    post:\n      summary: Add a service\n      tags: [services]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Service'\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Service'\n    put:\n      summary: Reset the list of services\n      tags: [services]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Service'\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Service'\n  /services/{service}:\n    parameters:\n      - in: path\n        name: service\n        schema:\n          type: string\n        required: true\n    get:\n      summary: Get information about a service\n      tags: [services]\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Service'\n    put:\n      summary: Reset the specified service\n      tags: [services]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Service'\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Service'\n    delete:\n      summary: Delete a service\n      tags: [services]\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Success'\n        default:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /services/{service}/servers:\n    parameters:\n      - in: path\n        name: service\n        schema:\n          type: string\n        required: true\n    get:\n      summary: List all servers on a service\n      tags: [servers]\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Server'\n    post:\n      summary: Add new server to a service\n      tags: [servers]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Server'\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Server'\n    put:\n      summary: Reset the list of servers on a service\n      tags: [servers]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Server'\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Server'\n  /services/{service}/servers/{server}:\n    parameters:\n      - in: path\n        name: service\n        schema:\n          type: string\n        required: true\n      - in: path\n        name: server\n        schema:\n          type: string\n        required: true\n    get:\n      summary: Get information about a server on a service\n      tags: [servers]\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Server'\n    delete:\n      summary: Delete a server from a service\n      tags: [servers]\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Success'\n        default:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /routes:\n    get:\n      summary: List all routes\n      tags: [routes]\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Route'\n    post:\n      summary: Add new route\n      tags: [routes]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Route'\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Route'\n    put:\n      summary: Reset the list of routes\n      tags: [routes]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Route'\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Route'\n    delete:\n      summary: Delete a route\n      tags: [routes]\n      parameters:\n        - in: query\n          name: subdomain\n          schema:\n            type: string\n        - in: query\n          name: domain\n          schema:\n            type: string\n        - in: query\n          name: path\n          schema:\n            type: string\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Success'\n        default:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /certs:\n    get:\n      summary: List all certs\n      tags: [certificates]\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Cert'\n    post:\n      summary: Add new cert\n      tags: [certificates]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Cert'\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Cert'\n    put:\n      summary: Reset the list of certs\n      tags: [certificates]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Cert'\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Cert'\n    delete:\n      summary: Delete a cert\n      description: |\n        Request contains a body with the item to delete. This violates the\n        OpenAPI spec requirements that DELETEs not have a request body, so will\n        be changed in a future (microbox) version.\n      tags: [certificates]\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Success'\n        default:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /vips:\n    get:\n      summary: List all vips\n      tags: [virtual IPs]\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/VIP'\n    post:\n      summary: Add new vip\n      tags: [virtual IPs]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VIP'\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VIP'\n    put:\n      summary: Reset the list of vips\n      tags: [virtual IPs]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/VIP'\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/VIP'\n    delete:\n      summary: Delete a vip\n      description: |\n        Request contains a body with the item to delete. This violates the\n        OpenAPI spec requirements that DELETEs not have a request body, so will\n        be changed in a future (microbox) version.\n      tags: [virtual IPs]\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Success'\n        default:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  schemas:\n    Service:\n      type: object\n      properties:\n        id:\n          type: string\n        type:\n          type: string\n        host:\n          type: string\n        port:\n          type: integer\n        interface:\n          type: string\n        scheduler:\n          type: string\n        persistence:\n          type: integer\n        netmask:\n          type: string\n        servers:\n          type: array\n          items:\n            $ref: '#/components/schemas/Server'\n      example:\n        id: tcp-127_0_0_3-1234\n        type: tcp\n        host: 127.0.0.3\n        port: 1234\n        interface: eth0\n        scheduler: rr\n        persistence: 0\n        netmask: ''\n        servers: null\n    Server:\n      type: object\n      properties:\n        id:\n          type: string\n        host:\n          type: string\n        port:\n          type: integer\n        forwarder:\n          type: string\n        weight:\n          type: integer\n        upper_threshold:\n          type: integer\n        lower_threshold:\n          type: integer\n      example:\n        id: 192_168_0_1-8080\n        host: 192.168.0.1\n        port: 8080\n        forwarder: m\n        weight: 5\n        upper_threshold: 10\n        lower_threshold: 1\n    Route:\n      type: object\n      properties:\n        subdomain:\n          type: string\n        domain:\n          type: string\n        path:\n          type: string\n        targets:\n          type: array\n          items:\n            type: string\n        fwdpath:\n          type: string\n        page:\n          type: string\n        endpoint:\n          type: string\n        expected_code:\n          type: integer\n        expected_body:\n          type: string\n        expected_header:\n          type: string\n        host:\n          type: string\n        timeout:\n          type: integer\n        attempts:\n          type: integer\n      example:\n        subdomain: ''\n        domain: portal.test\n        path: ''\n        targets: null\n        fwdpath: ''\n        page: |\n          portal works\n        endpoint: ''\n        expected_code: 0\n        expected_body: ''\n        expected_header: ''\n        host: ''\n        timeout: 0\n        attempts: 0\n    Cert:\n      type: object\n      properties:\n        key:\n          type: string\n        cert:\n          type: string\n      example:\n        key: |-\n          -----BEGIN PRIVATE KEY-----\n          MII.../J8\n          -----END PRIVATE KEY-----\n        cert: |-\n          -----BEGIN CERTIFICATE-----\n          MII...aI=\n          -----END CERTIFICATE-----\n    VIP:\n      type: object\n      properties:\n        ip:\n          type: string\n        interface:\n          type: string\n        alias:\n          type: string\n      example:\n        ip: 192.168.0.100\n        interface: eth0\n        alias: 'eth0:1'\n    Success:\n      type: object\n      properties:\n        msg:\n          type: string\n      example:\n        msg: Success\n    Error:\n      type: object\n      properties:\n        error:\n          type: string\n      example:\n        error: No Service Found\n  securitySchemes:\n    Token:\n      type: apiKey\n      in: header\n      name: X-Auth-Token\nsecurity:\n  - Token: []\n",
			"canonicalURL": "/github.com/mu-box/core@a66c79bb43fe850bcd6c1ede58051555e1736204/-/blob/docs/servers/portal-load-balancer-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/mu-box/core/blob/a66c79bb43fe850bcd6c1ede58051555e1736204/docs/servers/portal-load-balancer-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}