{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ateliedocodigo/py-healthcheck"
		},
		"file": {
			"name": "openapi-healthcheck.yaml",
			"size": 0,
			"path": "openapi/openapi-healthcheck.yaml",
			"byteSize": 6149,
			"content": "openapi: 3.0.1\ninfo:\n  title: Health Check And Environment Dump\n  version: 0.0.1\n  description: |\n    This OpenAPI Specification document contains\n    the Healthcheck API. Healthcheck is\n    built using py-healthcheck package\n    from PyPi.\n  contact:\n    name: Ateliê do Código\n    url: https://github.com/ateliedocodigo/py-healthcheck\n  license:\n    name: The MIT License (MIT)\npaths:\n  /healthcheck:\n    get:\n      summary: |\n        Health check for Python Flask or Tornade app.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HealthResponse'\n              example: |\n                {\n                  \"hostname\": \"d122bb054e3d\",\n                  \"status\": \"success\",\n                  \"timestamp\": 1598022539.1783307,\n                  \"results\": [\n                    {\n                      \"checker\": \"check_is_up\",\n                      \"output\": \"UP\",\n                      \"passed\": true,\n                      \"timestamp\": 1598022539.1783178,\n                      \"expires\": 1598022566.1783178\n                    }\n                  ]\n                }\n  /environment:\n    get:\n      summary: |\n        Environment dump for Python Flask or Tornado app.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EnvironmentResponse'\n              example: |\n                {\n                  \"os\": {\n                    \"platform\": \"linux\",\n                  },\n                  \"python\": {\n                    \"version\": \"3.6.9 (default, Jun  9 2020, 15:31:15) \\n[GCC 7.5.0]\",\n                    \"executable\": \"/usr/bin/python3\",\n                    \"pythonpath\": [\n                      \"/usr/lib/python3\",\n                    ],\n                    \"version_info\": {\n                      \"major\": 3,\n                      \"minor\": 6,\n                      \"micro\": 9,\n                      \"releaselevel\": \"final\",\n                      \"serial\": 0\n                    }\n                  },\n                  \"process\": {\n                    \"argv\": [\n                      \"/home/scripts/run-server.py\"\n                    ],\n                    \"cwd\": \"/home/scripts\",\n                    \"user\": \"scripts\",\n                    \"pid\": 24650,\n                    \"environ\": {\n                      \"TERM\": \"tmux-256color\",\n                      \"SHELL\": \"/bin/bash\",\n                    }\n                  },\n                }\ncomponents:\n  schemas:\n    HealthResponse:\n      description: |\n        A system healthcheck response as defined originally by Runscope.\n        Not entirely compatible with MicroProfile Healthcheck protocol definition.\n      type: object\n      properties:\n        hostname:\n          description: Name of host server.\n          type: string\n        status:\n          description: Verbal description of status.\n          type: string\n          pattern: ^(success|failure)$\n          example: success\n        timestamp:\n          description: A timestamp.\n          type: string\n        results:\n          description: List of Result objects. Should contain at least one.\n          type: array\n          items:\n            $ref: '#/components/schemas/HealthResults'\n      required:\n        - status\n        - results\n      example:\n        {\n          \"hostname\": \"localhost\",\n          \"status\": \"success\",\n          \"timestamp\": 1598022539.1783307,\n          \"results\": [\n            {\n              \"checker\": \"check_is_up\",\n              \"output\": \"UP\",\n              \"passed\": true,\n              \"timestamp\": 1598022539.1783178,\n              \"expires\": 1598022566.1783178\n            }\n          ]\n        }\n    HealthResults:\n      description: |\n        The result of an individual health check.\n      type: object\n      properties:\n        checker:\n          description: Name of checker (name of function registered as a check).\n          type: string\n          example: is_up\n        output:\n          description: Verbal description of status.\n          type: string\n          example: UP\n        passed:\n          description: Boolean value to tell if check passed.\n          type: boolean\n          example: true\n        timestamp:\n          description: A timestamp.\n          type: string\n        expires:\n          description: |\n            A timestamp to tell when the check will expire.\n            This can be used to cache results.\n          type: string\n      required:\n        - check\n        - passed\n      example: |\n        {\n          \"checker\": \"check_is_up\",\n          \"output\": \"UP\",\n          \"passed\": true,\n          \"timestamp\": 1598022539.1783178,\n          \"expires\": 1598022566.1783178\n        }\n    EnvironmentResponse:\n      description: |\n        A description of the system.\n      type: object\n      properties:\n        os:\n          description: Details about OS.\n          type: object\n        python:\n          description: Details about the current Python executable.\n          type: object\n        process:\n          description: Details about the current process.\n          type: object\n      example:\n        {\n          \"os\": {\n            \"platform\": \"linux\",\n          },\n          \"python\": {\n            \"version\": \"3.6.9 (default, Jun  9 2020, 15:31:15) \\n[GCC 7.5.0]\",\n            \"executable\": \"/usr/bin/python3\",\n            \"pythonpath\": [\n              \"/usr/lib/python3\",\n            ],\n            \"version_info\": {\n              \"major\": 3,\n              \"minor\": 6,\n              \"micro\": 9,\n              \"releaselevel\": \"final\",\n              \"serial\": 0\n            }\n          },\n          \"process\": {\n            \"argv\": [\n              \"/home/scripts/run-server.py\"\n            ],\n            \"cwd\": \"/home/scripts\",\n            \"user\": \"scripts\",\n            \"pid\": 24650,\n            \"environ\": {\n              \"TERM\": \"tmux-256color\",\n              \"SHELL\": \"/bin/bash\",\n            }\n          },\n        }\n# vim: set shiftwidth=2:softtabstop=2:tabstop=2:expandtab:autoindent :\n",
			"canonicalURL": "/github.com/ateliedocodigo/py-healthcheck@d82846536cb84df5545b3d0dbdd678bd46e2fb15/-/blob/openapi/openapi-healthcheck.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ateliedocodigo/py-healthcheck/blob/d82846536cb84df5545b3d0dbdd678bd46e2fb15/openapi/openapi-healthcheck.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}