{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/namsor/openapi.yaml",
			"byteSize": 111831,
			"content": "openapi: 3.0.1\ninfo:\n  title: NamSor API v2\n  description: \u003e\n    This is a generated connector for [NamSor API v2](https://v2.namsor.com/NamSorAPIv2/index.html) OpenAPI specification. \n\n    The NamSor API provides the capability to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages.\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials.\n    \n    Create an [NamSor Account](https://v2.namsor.com/NamSorAPIv2/sign-in.html) and obtain tokens following [this guide](https://v2.namsor.com/NamSorAPIv2/apidoc.html).\n  x-ballerina-display:\n      label: NamSor\n      iconPath: \"icon.png\"\n  contact:\n    name: Namsor SAS\n    url: http://www.namsor.com/\n    email: contact@namsor.com\n  license:\n    name: NamSorAPI_Lic_v0.0.7\n    url: https://v2.namsor.com/NamSorAPIv2/assets/pdf/201803_NamSor_API_Terms_v007.pdf\n  version: 2.0.15\nexternalDocs:\n  description: NamSor API client SDKs v2 for Java, Python\n  url: https://github.com/namsor\nservers:\n  - url: https://v2.namsor.com/NamSorAPIv2\n    description: namsor_v2\n    variables: {}\nsecurity:\n  - api_key: []\ntags:\n  - name: personal\n    description: 'Personal names (anthroponyms) : gender, country origin/ethnicity, diaspora, US ''race''/ethniciy'\n  - name: social\n    description: Social media and pseudonyms\n  - name: chinese\n    description: CHINESE special features\n  - name: japanese\n    description: JAPANESE special features\n  - name: admin\n    description: Administrative, system management.\npaths:\n  /api2/json/country/{personalNameFull}:\n    get:\n      tags:\n        - personal\n      summary: '[USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.'\n      operationId: country\n      parameters:\n        - name: personalNameFull\n          in: path\n          required: true\n          description: Personal full name\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A origined name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PersonalNameGeoOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/nameType/{properNoun}:\n    get:\n      tags:\n        - general\n      summary: Infer the likely type of a proper noun (personal name, brand name, place name etc.)\n      operationId: nameType\n      parameters:\n        - name: properNoun\n          in: path\n          required: true\n          schema:\n            type: string\n          description: The proper noun\n      responses:\n        '200':\n          description: A typed name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProperNounCategorizedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/disable/{source}/{disabled}:\n    get:\n      tags:\n        - admin\n      summary: Activate/deactivate an API Key.\n      operationId: disable\n      parameters:\n        - name: source\n          in: path\n          description: The API Key to set as enabled/disabled.\n          required: true\n          schema:\n            type: string\n        - name: disabled\n          in: path\n          description: Disbled/Not disabled\n          required: true\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: Disabled the API Key.\n        '401':\n          description: Missing or incorrect API Key\n  /api2/json/origin/{firstName}/{lastName}:\n    get:\n      tags:\n        - personal\n      summary: '[USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use ''diaspora'' instead.'\n      operationId: origin\n      parameters:\n        - name: firstName\n          in: path\n          required: true\n          schema:\n            type: string\n          description: First name\n        - name: lastName\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Last name\n      responses:\n        '200':\n          description: A origined name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FirstLastNameOriginedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/softwareVersion:\n    get:\n      tags:\n        - admin\n      summary: Get the current software version\n      operationId: softwareVersion\n      responses:\n        '200':\n          description: The current software version\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SoftwareVersionOut'\n        '401':\n          description: Missing or incorrect token\n  /api2/json/apiStatus:\n    get:\n      tags:\n        - admin\n      summary: Prints the current status of the classifiers. A classifier name in apiStatus corresponds to a service name in apiServices.\n      operationId: apiStatus\n      responses:\n        '200':\n          description: Available classifiers and status\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/APIClassifiersStatusOut'\n        '401':\n          description: Missing or incorrect token\n  /api2/json/apiServices:\n    get:\n      tags:\n        - admin\n      summary: List of classification services and usage cost in Units per classification (default is 1=ONE Unit). Some API endpoints (ex. Corridor) combine multiple classifiers.\n      operationId: availableServices\n      responses:\n        '200':\n          description: Available services\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/APIServicesOut'\n        '401':\n          description: Missing or incorrect token\n  /api2/json/taxonomyClasses/{classifierName}:\n    get:\n      tags:\n        - admin\n      summary: Print the taxonomy classes valid for the given classifier.\n      operationId: taxonomyClasses\n      parameters:\n        - name: classifierName\n          in: path\n          description: Name of the classifier\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Available plans\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/APIClassifierTaxonomyOut'\n        '401':\n          description: Missing or incorrect token\n  /api2/json/apiUsage:\n    get:\n      tags:\n        - admin\n      summary: Print current API usage.\n      operationId: apiUsage\n      responses:\n        '200':\n          description: Print current API usage.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/APIPeriodUsageOut'\n        '401':\n          description: Missing or incorrect API Key\n      security:\n        - api_key: []\n  /api2/json/apiUsageHistory:\n    get:\n      tags:\n        - admin\n      summary: Print historical API usage.\n      operationId: apiUsageHistory\n      responses:\n        '200':\n          description: Print historical API usage (NB. new output format form v2.0.15)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/APIUsageHistoryOut'\n        '401':\n          description: Missing or incorrect API Key\n      security:\n        - api_key: []\n  /api2/json/apiUsageHistoryAggregate:\n    get:\n      tags:\n        - admin\n      summary: Print historical API usage (in an aggregated view, by service, by day/hour/min).\n      operationId: apiUsageHistoryAggregate\n      responses:\n        '200':\n          description: Print historical API usage.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/APIUsageAggregatedOut'\n        '401':\n          description: Missing or incorrect API Key\n      security:\n        - api_key: []\n  /api2/json/learnable/{source}/{learnable}:\n    get:\n      tags:\n        - admin\n      summary: Activate/deactivate learning from a source.\n      operationId: learnable\n      parameters:\n        - name: source\n          in: path\n          description: The API Key to set as learnable/non learnable.\n          required: true\n          schema:\n            type: string\n        - name: learnable\n          in: path\n          description: Learnable/non learnable.\n          required: true\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: Set learning from source.\n        '401':\n          description: Missing or incorrect API Key\n  /api2/json/anonymize/{source}/{anonymized}:\n    get:\n      tags:\n        - admin\n      summary: Activate/deactivate anonymization for a source.\n      operationId: anonymize\n      parameters:\n        - name: source\n          in: path\n          required: true\n          description: The API Key to set as anonymized/non anonymized. \n          schema:\n            type: string\n        - name: anonymized\n          in: path\n          description: Anonymized/non anonymized. \n          required: true\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: Anonymization of a source.\n        '401':\n          description: Missing or incorrect API Key\n  /api2/json/nameTypeGeo/{properNoun}/{countryIso2}:\n    get:\n      tags:\n        - general\n      summary: Infer the likely type of a proper noun (personal name, brand name, place name etc.)\n      operationId: nameTypeGeo\n      parameters:\n        - name: properNoun\n          in: path\n          required: true\n          schema:\n            type: string\n          description: The proper noun\n        - name: countryIso2\n          in: path\n          required: true\n          schema:\n            type: string\n          description: ISO2 country code\n      responses:\n        '200':\n          description: A typed name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProperNounCategorizedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/nameTypeBatch:\n    post:\n      tags:\n        - general\n      summary: Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)\n      operationId: nameTypeBatch\n      requestBody:\n        description: A list of proper names\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchNameIn'\n      responses:\n        '200':\n          description: A list of commonTypeized names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchProperNounCategorizedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/nameTypeGeoBatch:\n    post:\n      tags:\n        - general\n      summary: Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)\n      operationId: nameTypeGeoBatch\n      requestBody:\n        description: A list of proper names\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchNameGeoIn'\n      responses:\n        '200':\n          description: A list of commonTypeized names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchProperNounCategorizedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/corridor/{countryIso2From}/{firstNameFrom}/{lastNameFrom}/{countryIso2To}/{firstNameTo}/{lastNameTo}:\n    get:\n      tags:\n        - personal\n      summary: '[USES 20 UNITS PER NAME COUPLE] Infer several classifications for a cross border interaction between names (ex. remit, travel, intl com)'\n      operationId: corridor\n      parameters:\n        - name: countryIso2From\n          in: path\n          required: true\n          description: Start ISO2 country code to filter\n          schema:\n            type: string\n        - name: firstNameFrom\n          in: path\n          required: true\n          description: Start first name to filter\n          schema:\n            type: string\n        - name: lastNameFrom\n          in: path\n          required: true\n          description: Start last name to filter\n          schema:\n            type: string\n        - name: countryIso2To\n          in: path\n          required: true\n          description: End ISO2 country code to filter\n          schema:\n            type: string\n        - name: firstNameTo\n          in: path\n          required: true\n          description: End first name to filter\n          schema:\n            type: string\n        - name: lastNameTo\n          in: path\n          required: true\n          description: End last name to filter\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Two classified names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CorridorOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/corridorBatch:\n    post:\n      tags:\n        - personal\n      summary: '[USES 20 UNITS PER NAME PAIR] Infer several classifications for up to 100 cross border interaction between names (ex. remit, travel, intl com)'\n      operationId: corridorBatch\n      requestBody:\n        description: A list of name pairs, with country code (nameFrom -\u003e nameTo).\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchCorridorIn'\n      responses:\n        '200':\n          description: A list of classified name pairs.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchCorridorOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/gender/{firstName}/{lastName}:\n    get:\n      tags:\n        - personal\n      summary: Infer the likely gender of a name.\n      operationId: gender\n      parameters:\n        - name: firstName\n          in: path\n          required: true\n          schema:\n            type: string\n          description: First name\n        - name: lastName\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Last name\n      responses:\n        '200':\n          description: A genderized name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FirstLastNameGenderedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/genderGeo/{firstName}/{lastName}/{countryIso2}:\n    get:\n      tags:\n        - personal\n      summary: Infer the likely gender of a name, given a local context (ISO2 country code).\n      operationId: genderGeo\n      parameters:\n        - name: firstName\n          in: path\n          required: true\n          schema:\n            type: string\n          description: First name\n        - name: lastName\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Last name\n        - name: countryIso2\n          in: path\n          required: true\n          schema:\n            type: string\n          description: ISO2 country code\n      responses:\n        '200':\n          description: A genderized name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FirstLastNameGenderedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/genderGeoBatch:\n    post:\n      tags:\n        - personal\n      summary: Infer the likely gender of up to 100 names, each given a local context (ISO2 country code).\n      operationId: genderGeoBatch\n      requestBody:\n        description: A list of names, with country code.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchFirstLastNameGeoIn'\n      responses:\n        '200':\n          description: A list of genderized names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchFirstLastNameGenderedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/genderBatch:\n    post:\n      tags:\n        - personal\n      summary: Infer the likely gender of up to 100 names, detecting automatically the cultural context.\n      operationId: genderBatch\n      requestBody:\n        description: A list of personal names\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchFirstLastNameIn'\n      responses:\n        '200':\n          description: A list of genderized names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchFirstLastNameGenderedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/genderFullGeo/{fullName}/{countryIso2}:\n    get:\n      tags:\n        - personal\n      summary: Infer the likely gender of a full name, given a local context (ISO2 country code).\n      operationId: genderFullGeo\n      parameters:\n        - name: fullName\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Full name\n        - name: countryIso2\n          in: path\n          required: true\n          schema:\n            type: string\n          description: ISO2 country code\n      responses:\n        '200':\n          description: A genderized name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PersonalNameGenderedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/genderFull/{fullName}:\n    get:\n      tags:\n        - personal\n      summary: Infer the likely gender of a full name, ex. John H. Smith\n      operationId: genderFull\n      parameters:\n        - name: fullName\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Full name\n      responses:\n        '200':\n          description: A genderized name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PersonalNameGenderedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/genderFullBatch:\n    post:\n      tags:\n        - personal\n      summary: Infer the likely gender of up to 100 full names, detecting automatically the cultural context.\n      operationId: genderFullBatch\n      requestBody:\n        description: A list of personal names\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchPersonalNameIn'\n      responses:\n        '200':\n          description: A list of genderized names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchPersonalNameGenderedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/genderFullGeoBatch:\n    post:\n      tags:\n        - personal\n      summary: Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code).\n      operationId: genderFullGeoBatch\n      requestBody:\n        description: A list of personal names, with a country ISO2 code\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchPersonalNameGeoIn'\n      responses:\n        '200':\n          description: A list of genderized names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchPersonalNameGenderedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/originBatch:\n    post:\n      tags:\n        - personal\n      summary: '[USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.'\n      operationId: originBatch\n      requestBody:\n        description: A list of personal names\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchFirstLastNameIn'\n      responses:\n        '200':\n          description: A list of genderized names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchFirstLastNameOriginedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/countryBatch:\n    post:\n      tags:\n        - personal\n      summary: '[USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.'\n      operationId: countryBatch\n      requestBody:\n        description: A list of personal names\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchPersonalNameIn'\n      responses:\n        '200':\n          description: A list of genderized names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchPersonalNameGeoOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/usRaceEthnicity/{firstName}/{lastName}:\n    get:\n      tags:\n        - personal\n      summary: '[USES 10 UNITS PER NAME] Infer a US resident''s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).'\n      operationId: usRaceEthnicity\n      parameters:\n        - name: firstName\n          in: path\n          required: true\n          schema:\n            type: string\n          description: First name\n        - name: lastName\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Last name\n      responses:\n        '200':\n          description: 'a US resident''s likely race/ethnicity : W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino), AI_AN (American Indian or Alaskan Native*) and PI (Pacific Islander*). *optionally'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FirstLastNameUSRaceEthnicityOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/usRaceEthnicityZIP5/{firstName}/{lastName}/{zip5Code}:\n    get:\n      tags:\n        - personal\n      summary: '[USES 10 UNITS PER NAME] Infer a US resident''s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).'\n      operationId: usRaceEthnicityZIP5\n      parameters:\n        - name: firstName\n          in: path\n          required: true\n          schema:\n            type: string\n          description: First name\n        - name: lastName\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Last name\n        - name: zip5Code\n          in: path\n          required: true\n          description: 5-digit ZIP Code\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'a US resident''s likely race/ethnicity : W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino), AI_AN (American Indian or Alaskan Native*) and PI (Pacific Islander*). *optionally'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FirstLastNameUSRaceEthnicityOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/usRaceEthnicityBatch:\n    post:\n      tags:\n        - personal\n      summary: '[USES 10 UNITS PER NAME] Infer up-to 100 US resident''s likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).'\n      operationId: usRaceEthnicityBatch\n      requestBody:\n        description: A list of personal names\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchFirstLastNameGeoIn'\n      responses:\n        '200':\n          description: A list of US resident's likely race/ethnicity. W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino), AI_AN (American Indian or Alaskan Native*) and PI (Pacific Islander*). *optionally\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchFirstLastNameUSRaceEthnicityOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/usZipRaceEthnicityBatch:\n    post:\n      tags:\n        - personal\n      summary: '[USES 10 UNITS PER NAME] Infer up-to 100 US resident''s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).'\n      operationId: usZipRaceEthnicityBatch\n      requestBody:\n        description: A list of personal names\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchFirstLastNameGeoZippedIn'\n      responses:\n        '200':\n          description: A list of US resident's likely race/ethnicity. W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino), AI_AN (American Indian or Alaskan Native*) and PI (Pacific Islander*). *optionally\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchFirstLastNameUSRaceEthnicityOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/diaspora/{countryIso2}/{firstName}/{lastName}:\n    get:\n      tags:\n        - personal\n      summary: '[USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)'\n      operationId: diaspora\n      parameters:\n        - name: countryIso2\n          in: path\n          required: true\n          schema:\n            type: string\n          description: ISO2 country code\n        - name: firstName\n          in: path\n          required: true\n          schema:\n            type: string\n          description: First name\n        - name: lastName\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Last name\n      responses:\n        '200':\n          description: A diaspora / ethnicity for given name and geography.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FirstLastNameDiasporaedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/diasporaBatch:\n    post:\n      tags:\n        - personal\n      summary: '[USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)'\n      operationId: diasporaBatch\n      requestBody:\n        description: A list of personal names\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchFirstLastNameGeoIn'\n      responses:\n        '200':\n          description: A list of diaspora / ethnicity given a name and residency.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchFirstLastNameDiasporaedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/parseName/{nameFull}/{countryIso2}:\n    get:\n      tags:\n        - personal\n      summary: Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context.\n      operationId: parseNameGeo\n      parameters:\n        - name: nameFull\n          in: path\n          required: true\n          description: Full name\n          schema:\n            type: string\n        - name: countryIso2\n          in: path\n          required: true\n          schema:\n            type: string\n          description: ISO2 country code\n      responses:\n        '200':\n          description: A origined name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PersonalNameParsedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/parseNameBatch:\n    post:\n      tags:\n        - personal\n      summary: Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.\n      operationId: parseNameBatch\n      requestBody:\n        description: A list of personal names\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchPersonalNameIn'\n      responses:\n        '200':\n          description: A list of parsed names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchPersonalNameParsedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/parseNameGeoBatch:\n    post:\n      tags:\n        - personal\n      summary: 'Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision. '\n      operationId: parseNameGeoBatch\n      requestBody:\n        description: A list of personal names\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchPersonalNameGeoIn'\n      responses:\n        '200':\n          description: A list of parsed names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchPersonalNameParsedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/parseChineseName/{chineseName}:\n    get:\n      tags:\n        - chinese\n      summary: Infer the likely first/last name structure of a name, ex. 王晓明 -\u003e 王(surname) 晓明(given name)\n      operationId: parseChineseName\n      parameters:\n        - name: chineseName\n          in: path\n          required: true\n          description: Chinese name\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A origined name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PersonalNameParsedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/parseChineseNameBatch:\n    post:\n      tags:\n        - chinese\n      summary: Infer the likely first/last name structure of a name, ex. 王晓明 -\u003e 王(surname) 晓明(given name).\n      operationId: parseChineseNameBatch\n      requestBody:\n        description: A list of personal names\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchPersonalNameIn'\n      responses:\n        '200':\n          description: A list of parsed names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchPersonalNameParsedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/pinyinChineseName/{chineseName}:\n    get:\n      tags:\n        - chinese\n      summary: Romanize the Chinese name to Pinyin, ex. 王晓明 -\u003e Wang (surname) Xiaoming (given name)\n      operationId: pinyinChineseName\n      parameters:\n        - name: chineseName\n          in: path\n          required: true\n          description: Chinese name\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A pinyin name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PersonalNameParsedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/pinyinChineseNameBatch:\n    post:\n      tags:\n        - chinese\n      summary: Romanize a list of Chinese name to Pinyin, ex. 王晓明 -\u003e Wang (surname) Xiaoming (given name).\n      operationId: pinyinChineseNameBatch\n      requestBody:\n        description: A list of Chinese names\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchPersonalNameIn'\n      responses:\n        '200':\n          description: A list of Pinyin names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchPersonalNameParsedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/chineseNameMatch/{chineseSurnameLatin}/{chineseGivenNameLatin}/{chineseName}:\n    get:\n      tags:\n        - chinese\n      summary: Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming\n      operationId: chineseNameMatch\n      parameters:\n        - name: chineseSurnameLatin\n          in: path\n          required: true\n          description: Chinese sur name in latin\n          schema:\n            type: string\n        - name: chineseGivenNameLatin\n          in: path\n          required: true\n          description: Chinese given name in latin\n          schema:\n            type: string\n        - name: chineseName\n          in: path\n          required: true\n          description: Chinese name\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A romanized name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NameMatchedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/chineseNameMatchBatch:\n    post:\n      tags:\n        - chinese\n      summary: Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming\n      operationId: chineseNameMatchBatch\n      requestBody:\n        description: A list of personal Chinese names in LATIN, firstName = chineseGivenName; lastName=chineseSurname\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchMatchPersonalFirstLastNameIn'\n      responses:\n        '200':\n          description: A list of genderized names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchNameMatchedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/genderChineseNamePinyin/{chineseSurnameLatin}/{chineseGivenNameLatin}:\n    get:\n      tags:\n        - chinese\n      summary: Infer the likely gender of a Chinese name in LATIN (Pinyin).\n      operationId: genderChineseNamePinyin\n      parameters:\n        - name: chineseSurnameLatin\n          in: path\n          required: true\n          description: Chinese sur name in latin\n          schema:\n            type: string\n        - name: chineseGivenNameLatin\n          in: path\n          required: true\n          description: Chinese given name in latin\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A genderized name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FirstLastNameGenderedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/genderChineseNamePinyinBatch:\n    post:\n      tags:\n        - chinese\n      summary: Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin).\n      operationId: genderChineseNamePinyinBatch\n      requestBody:\n        description: A list of names, with country code.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchFirstLastNameIn'\n      responses:\n        '200':\n          description: A list of genderized names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchFirstLastNameGenderedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/genderChineseName/{chineseName}:\n    get:\n      tags:\n        - chinese\n      summary: Infer the likely gender of a Chinese full name ex. 王晓明\n      operationId: genderChineseName\n      parameters:\n        - name: chineseName\n          in: path\n          required: true\n          description: Chinese name\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A genderized name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PersonalNameGenderedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/genderChineseNameBatch:\n    post:\n      tags:\n        - chinese\n      summary: Infer the likely gender of up to 100 full names ex. 王晓明\n      operationId: genderChineseNameBatch\n      requestBody:\n        description: A list of personal names, with a country ISO2 code\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchPersonalNameIn'\n      responses:\n        '200':\n          description: A list of genderized names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchPersonalNameGenderedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/chineseNameCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}:\n    get:\n      tags:\n        - chinese\n      summary: Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming\n      operationId: chineseNameCandidates\n      parameters:\n        - name: chineseSurnameLatin\n          in: path\n          required: true\n          description: Chinese sur name in latin\n          schema:\n            type: string\n        - name: chineseGivenNameLatin\n          in: path\n          required: true\n          description: Chinese given name in latin\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A romanized name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NameMatchCandidatesOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/chineseNameCandidatesBatch:\n    post:\n      tags:\n        - chinese\n      summary: Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming\n      operationId: chineseNameCandidatesBatch\n      requestBody:\n        description: A list of personal Chinese names in LATIN, firstName = chineseGivenName; lastName=chineseSurname\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchFirstLastNameIn'\n      responses:\n        '200':\n          description: A list of genderized names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchNameMatchCandidatesOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/chineseNameGenderCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}/{knownGender}:\n    get:\n      tags:\n        - chinese\n      summary: Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender ('male' or 'female')\n      operationId: chineseNameGenderCandidates\n      parameters:\n        - name: chineseSurnameLatin\n          in: path\n          required: true\n          description: Chinese sur name in latin\n          schema:\n            type: string\n        - name: chineseGivenNameLatin\n          in: path\n          required: true\n          description: Chinese given name in latin\n          schema:\n            type: string\n        - name: knownGender\n          in: path\n          required: true\n          description: Known gender\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A romanized name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NameMatchCandidatesOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/chineseNameCandidatesGenderBatch:\n    post:\n      tags:\n        - chinese\n      summary: Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname) ex. Wang Xiaoming.\n      operationId: chineseNameCandidatesGenderBatch\n      requestBody:\n        description: A list of personal Chinese names in LATIN, firstName = chineseGivenName; lastName=chineseSurname\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchFirstLastNameGenderIn'\n      responses:\n        '200':\n          description: A list of genderized names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchNameMatchCandidatesOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/parseJapaneseName/{japaneseName}:\n    get:\n      tags:\n        - japanese\n      summary: Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae\n      operationId: parseJapaneseName\n      parameters:\n        - name: japaneseName\n          in: path\n          required: true\n          description: Japanese name\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A origined name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PersonalNameParsedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/parseJapaneseNameBatch:\n    post:\n      tags:\n        - japanese\n      summary: 'Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae '\n      operationId: parseJapaneseNameBatch\n      requestBody:\n        description: A list of personal names\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchPersonalNameIn'\n      responses:\n        '200':\n          description: A list of parsed names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchPersonalNameParsedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{knownGender}:\n    get:\n      tags:\n        - japanese\n      summary: Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender.\n      operationId: japaneseNameKanjiCandidates\n      parameters:\n        - name: japaneseSurnameLatin\n          in: path\n          required: true\n          description: Japanese sur name in latin\n          schema:\n            type: string\n        - name: japaneseGivenNameLatin\n          in: path\n          required: true\n          description: Japanese given name in latin\n          schema:\n            type: string\n        - name: knownGender\n          in: path\n          required: true\n          description: Known gender\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A romanized name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NameMatchCandidatesOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}:\n    get:\n      tags:\n        - japanese\n      summary: Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae\n      operationId: japaneseNameKanjiCandidates_1\n      parameters:\n        - name: japaneseSurnameLatin\n          in: path\n          required: true\n          description: Japanese sur name in latin\n          schema:\n            type: string\n        - name: japaneseGivenNameLatin\n          in: path\n          required: true\n          description: Japanese given name in latin\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A romanized name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NameMatchCandidatesOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/japaneseNameLatinCandidates/{japaneseSurnameKanji}/{japaneseGivenNameKanji}:\n    get:\n      tags:\n        - japanese\n      summary: Romanize japanese name, based on the name in Kanji.\n      operationId: japaneseNameLatinCandidates\n      parameters:\n        - name: japaneseSurnameKanji\n          in: path\n          required: true\n          description: Japanese sur name in kanji\n          schema:\n            type: string\n        - name: japaneseGivenNameKanji\n          in: path\n          required: true\n          description: Japanese given name in kanji\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A romanized name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NameMatchCandidatesOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/japaneseNameKanjiCandidatesBatch:\n    post:\n      tags:\n        - japanese\n      summary: Identify japanese name candidates in KANJI, based on the romanized name (firstName = japaneseGivenName; lastName=japaneseSurname), ex. Yamamoto Sanae\n      operationId: japaneseNameKanjiCandidatesBatch\n      requestBody:\n        description: A list of personal japanese names in LATIN, firstName = japaneseGivenName; lastName=japaneseSurname\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchFirstLastNameIn'\n      responses:\n        '200':\n          description: A list of genderized names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchNameMatchCandidatesOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/japaneseNameGenderKanjiCandidatesBatch:\n    post:\n      tags:\n        - japanese\n      summary: Identify japanese name candidates in KANJI, based on the romanized name (firstName = japaneseGivenName; lastName=japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae\n      operationId: japaneseNameGenderKanjiCandidatesBatch\n      requestBody:\n        description: A list of personal japanese names in LATIN, firstName = japaneseGivenName; lastName=japaneseSurname and known gender\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchFirstLastNameGenderIn'\n      responses:\n        '200':\n          description: A list of genderized names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchNameMatchCandidatesOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/japaneseNameLatinCandidatesBatch:\n    post:\n      tags:\n        - japanese\n      summary: Romanize japanese names, based on the name in KANJI\n      operationId: japaneseNameLatinCandidatesBatch\n      requestBody:\n        description: A list of personal japanese names in KANJI, firstName = japaneseGivenName; lastName=japaneseSurname\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchFirstLastNameIn'\n      responses:\n        '200':\n          description: A list of genderized names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchNameMatchCandidatesOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/japaneseNameMatch/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}:\n    get:\n      tags:\n        - japanese\n      summary: Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae\n      operationId: japaneseNameMatch\n      parameters:\n        - name: japaneseSurnameLatin\n          in: path\n          required: true\n          description: Japanese sur name in latin\n          schema:\n            type: string\n        - name: japaneseGivenNameLatin\n          in: path\n          required: true\n          description: Japanese given name in latin\n          schema:\n            type: string\n        - name: japaneseName\n          in: path\n          required: true\n          description: Japanese name\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A romanized name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NameMatchedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/japaneseNameMatchFeedbackLoop/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}:\n    get:\n      tags:\n        - japanese\n      summary: '[CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae'\n      operationId: japaneseNameMatchFeedbackLoop\n      parameters:\n        - name: japaneseSurnameLatin\n          in: path\n          required: true\n          description: Japanese sur name in latin\n          schema:\n            type: string\n        - name: japaneseGivenNameLatin\n          in: path\n          required: true\n          description: Japanese given name in latin\n          schema:\n            type: string\n        - name: japaneseName\n          in: path\n          required: true\n          description: Japanese name\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A romanized name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeedbackLoopOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/japaneseNameMatchBatch:\n    post:\n      tags:\n        - japanese\n      summary: Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae\n      operationId: japaneseNameMatchBatch\n      requestBody:\n        description: A list of personal Japanese names in LATIN, firstName = japaneseGivenName; lastName=japaneseSurname\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchMatchPersonalFirstLastNameIn'\n      responses:\n        '200':\n          description: A list of matched names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchNameMatchedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/genderJapaneseName/{japaneseSurname}/{japaneseGivenName}:\n    get:\n      tags:\n        - japanese\n      summary: Infer the likely gender of a Japanese name in LATIN (Pinyin).\n      operationId: genderJapaneseNamePinyin\n      parameters:\n        - name: japaneseSurname\n          in: path\n          required: true\n          description: Japanese sur name\n          schema:\n            type: string\n        - name: japaneseGivenName\n          in: path\n          required: true\n          description: Japanese given name\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A genderized name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FirstLastNameGenderedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/genderJapaneseNameBatch:\n    post:\n      tags:\n        - japanese\n      summary: Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin).\n      operationId: genderJapaneseNamePinyinBatch\n      requestBody:\n        description: A list of names, with country code.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchFirstLastNameIn'\n      responses:\n        '200':\n          description: A list of genderized names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchFirstLastNameGenderedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/genderJapaneseNameFull/{japaneseName}:\n    get:\n      tags:\n        - japanese\n      summary: Infer the likely gender of a Japanese full name ex. 王晓明\n      operationId: genderJapaneseNameFull\n      parameters:\n        - name: japaneseName\n          in: path\n          required: true\n          description: Japanese name\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A genderized name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PersonalNameGenderedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/genderJapaneseNameFullBatch:\n    post:\n      tags:\n        - japanese\n      summary: Infer the likely gender of up to 100 full names\n      operationId: genderJapaneseNameFullBatch\n      requestBody:\n        description: A list of personal names\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchPersonalNameIn'\n      responses:\n        '200':\n          description: A list of genderized names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchPersonalNameGenderedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/phoneCode/{firstName}/{lastName}/{phoneNumber}:\n    get:\n      tags:\n        - social\n      summary: '[USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.'\n      operationId: phoneCode\n      parameters:\n        - name: firstName\n          in: path\n          required: true\n          schema:\n            type: string\n          description: First name\n        - name: lastName\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Last name\n        - name: phoneNumber\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Phone number\n      responses:\n        '200':\n          description: A name with country and phone code.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FirstLastNamePhoneCodedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/phoneCodeGeo/{firstName}/{lastName}/{phoneNumber}/{countryIso2}:\n    get:\n      tags:\n        - social\n      summary: '[USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).'\n      operationId: phoneCodeGeo\n      parameters:\n        - name: firstName\n          in: path\n          required: true\n          schema:\n            type: string\n          description: First name\n        - name: lastName\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Last name\n        - name: phoneNumber\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Phone number\n        - name: countryIso2\n          in: path\n          required: true\n          schema:\n            type: string\n          description: ISO2 country code\n      responses:\n        '200':\n          description: A name with country and phone code.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FirstLastNamePhoneCodedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/phoneCodeGeoFeedbackLoop/{firstName}/{lastName}/{phoneNumber}/{phoneNumberE164}/{countryIso2}:\n    get:\n      tags:\n        - social\n      summary: '[CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).'\n      operationId: phoneCodeGeoFeedbackLoop\n      parameters:\n        - name: firstName\n          in: path\n          required: true\n          schema:\n            type: string\n          description: First name\n        - name: lastName\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Last name\n        - name: phoneNumber\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Phone number\n        - name: phoneNumberE164\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Phone number in E164 standard\n        - name: countryIso2\n          in: path\n          required: true\n          schema:\n            type: string\n          description: ISO2 country code\n      responses:\n        '200':\n          description: A name with country and phone code.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FirstLastNamePhoneCodedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/phoneCodeBatch:\n    post:\n      tags:\n        - social\n      summary: '[USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.'\n      operationId: phoneCodeBatch\n      requestBody:\n        description: A list of personal names\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchFirstLastNamePhoneNumberIn'\n      responses:\n        '200':\n          description: A list of genderized names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchFirstLastNamePhoneCodedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/phoneCodeGeoBatch:\n    post:\n      tags:\n        - social\n      summary: '[USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).'\n      operationId: phoneCodeGeoBatch\n      requestBody:\n        description: A list of personal names\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchFirstLastNamePhoneNumberGeoIn'\n      responses:\n        '200':\n          description: A list of genderized names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchFirstLastNamePhoneCodedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\n  /api2/json/parseName/{nameFull}:\n    get:\n      tags:\n        - personal\n      summary: 'Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. '\n      operationId: parseName\n      parameters:\n        - name: nameFull\n          in: path\n          required: true\n          schema:\n            type: string\n          description: Full name to infer\n      responses:\n        '200':\n          description: A origined name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PersonalNameParsedOut'\n        '401':\n          description: Missing or incorrect API Key\n        '403':\n          description: API Limit Reached or API Key Disabled\n      security:\n        - api_key: []\ncomponents:\n  schemas:\n    BatchFirstLastNameGenderedOut:\n      type: object\n      properties:\n        personalNames:\n          type: array\n          description: Classified genderized names\n          items:\n            $ref: '#/components/schemas/FirstLastNameGenderedOut'\n      description: Represents the output of inferring the LIKELY gender from a list of personal names.\n      xml:\n        name: BatchFirstLastNameGenderedOut\n    FirstLastNamePhoneNumberIn:\n      type: object\n      properties:\n        id:\n          type: string\n          xml:\n            attribute: true\n        firstName:\n          type: string\n          xml:\n            attribute: true\n        lastName:\n          type: string\n          xml:\n            attribute: true\n        phoneNumber:\n          type: string\n        FirstLastNameOriginedOut:\n          $ref: '#/components/schemas/FirstLastNameOriginedOut'\n      xml:\n        name: FirstLastNamePhoneNumberIn\n    APICounterV2Out:\n      type: object\n      properties:\n        apiKey:\n          $ref: '#/components/schemas/APIKeyOut'\n        apiService:\n          type: string\n          description: The apiService corresponds to the classifier name.\n        createdDateTime:\n          type: integer\n          description: The create datetime of the counter.\n          format: int64\n        totalUsage:\n          type: integer\n          description: The usage of the counter.\n          format: int64\n        lastFlushedDateTime:\n          type: integer\n          description: The flush datetime of the counter.\n          format: int64\n        lastUsedDateTime:\n          type: integer\n          description: The last usage datetime of the counter.\n          format: int64\n        serviceFeaturesUsage:\n          type: object\n          additionalProperties:\n            type: integer\n            description: Usage of special features, such as Chinese, Japanese.\n            format: int64\n          description: Usage of special features, such as Chinese, Japanese.\n      description: Detailed usage as reported by the deduplicating API counter.\n      xml:\n        name: APICallStatOut\n    NameMatchCandidatesOut:\n      type: object\n      properties:\n        script:\n          type: string\n          description: Script\n        id:\n          type: string\n          description: Id\n        firstName:\n          type: string\n          description: The first name (also known as given name)\n        lastName:\n          type: string\n          description: The last name (also known as family name, or surname)\n        orderOption:\n          type: string\n          description: The option for ordering\n        matchCandidates:\n          type: array\n          description: The ordered list of name matching candidates\n          items:\n            $ref: '#/components/schemas/NameMatchCandidateOut'\n      description: Classified matched names\n      xml:\n        name: NameMatchCandidatesOut\n    SoftwareVersionOut:\n      type: object\n      properties:\n        softwareNameAndVersion:\n          type: string\n          description: The software version\n        softwareVersion:\n          type: array\n          description: The software version major minor build\n          items:\n            type: integer\n            description: The software version major minor build\n            format: int32\n      description: The software version.\n      xml:\n        name: SoftwareVersionOut\n    APIClassifierOut:\n      type: object\n      properties:\n        classifierName:\n          type: string\n          description: The classifier name\n        serving:\n          type: boolean\n          description: True if the classifier is serving requests (has reached minimal learning, is not shutting down)\n        learning:\n          type: boolean\n          description: True if the classifier is learning\n        shuttingDown:\n          type: boolean\n          description: True if the classifier is shutting down\n        probabilityCalibrated:\n          type: boolean\n          description: True if the classifier has finished the initial learning and calibrated probabilities (meanwhile, during initial learning, probabilities will be equal to -1)\n      description: The list of classifiers and versions.\n      xml:\n        name: APIClassifierOut\n    NameIn:\n      type: object\n      properties:\n        id:\n          type: string\n          xml:\n            attribute: true\n        name:\n          type: string\n          xml:\n            attribute: true\n      xml:\n        name: NameIn\n    APIPlanSubscriptionOut:\n      type: object\n      properties:\n        apiKey:\n          type: string\n          description: User API Key.\n        planStarted:\n          type: integer\n          description: Datetime when the user subscribed to the current plan.\n          format: int64\n        priorPlanStarted:\n          type: integer\n          description: Datetime when the user subscribed to the prior plan.\n          format: int64\n        planEnded:\n          type: integer\n          description: Datetime when the user ended the plan.\n          format: int64\n        taxRate:\n          type: number\n          description: Applicable tax rate for the plan.\n          format: double\n        planName:\n          type: string\n          description: Current plan name.\n        planBaseFeesKey:\n          type: string\n          description: Current plan key (as in Stripe product).\n        planStatus:\n          type: string\n          description: Plan status.\n        planQuota:\n          type: integer\n          description: 'Current plan quota in quantity of units (NB: some API use several units per name).'\n          format: int64\n        priceUSD:\n          type: number\n          description: Current plan monthly price expressed in USD (includes a free quota).\n          format: double\n        priceOverageUSD:\n          type: number\n          description: Current plan price for overages expressed in USD (extra price per unit above the free quota).\n          format: double\n        price:\n          type: number\n          description: Current plan price for overages expressed in Currency (extra price per unit above the free quota).\n          format: double\n        priceOverage:\n          type: number\n          description: Current plan price for overages expressed in Currency (extra price per unit above the free quota).\n          format: double\n        currency:\n          type: string\n          description: Current plan Currency for prices.\n        currencyFactor:\n          type: number\n          description: For USD, GBP, EUR - the factor is 1.\n          format: double\n        stripeCustomerId:\n          type: string\n          description: Stripe customer identifier.\n        stripeStatus:\n          type: string\n          description: Stripe status ex active.\n        stripeSubscription:\n          type: string\n          description: Stripe subscription identifier.\n        userId:\n          type: string\n          description: Internal user identifier.\n      description: The API Plan governing the subscription.\n      xml:\n        name: APIPlanSubscriptionOut\n    FirstLastNameGenderIn:\n      type: object\n      properties:\n        id:\n          type: string\n          xml:\n            attribute: true\n        firstName:\n          type: string\n          xml:\n            attribute: true\n        lastName:\n          type: string\n          xml:\n            attribute: true\n        gender:\n          type: string\n          description: The known gender of the name\n          xml:\n            attribute: true\n      xml:\n        name: FirstLastName\n    FirstLastNameGeoIn:\n      description:  First name related to transnational interaction\n      type: object\n      properties:\n        id:\n          type: string\n          description:  Id\n          xml:\n            attribute: true\n        firstName:\n          type: string\n          description:  First name\n          xml:\n            attribute: true\n        lastName:\n          type: string\n          description:  Last name\n          xml:\n            attribute: true\n        countryIso2:\n          type: string\n          description:  ISO2 country code\n          xml:\n            attribute: true\n      xml:\n        name: FirstLastNameGeoIn\n    FirstLastNameGenderedOut:\n      type: object\n      properties:\n        script:\n          type: string\n          description: Script\n        id:\n          type: string\n          description: Id\n        firstName:\n          type: string\n          description: The first name (also known as given name)\n        lastName:\n          type: string\n          description: The last name (also known as family name, or surname)\n        likelyGender:\n          type: string\n          description: Most likely gender\n          enum:\n            - male\n            - female\n            - unknown\n        genderScale:\n          type: number\n          description: Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value\n          format: double\n        score:\n          maximum: 100\n          minimum: 0\n          type: number\n          description: 'Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. '\n          format: double\n        probabilityCalibrated:\n          type: number\n          description: The calibrated probability for inferred gender to have been guessed correctly.\n          format: double\n      description: Represents the output of inferring the LIKELY gender from a personal name.\n      xml:\n        name: FirstLastNameGenderedOut\n    APIKeyOut:\n      type: object\n      properties:\n        apiKey:\n          type: string\n          description: The user API Key.\n          xml:\n            name: api_key\n        userId:\n          type: string\n          description: The user identifier.\n        admin:\n          type: boolean\n          description: The API Key has admin role.\n        vetted:\n          type: boolean\n          description: The API Key is vetted (assumed truthful) for machine learning.\n        learnable:\n          type: boolean\n          description: The API Key is learnable (without assuming truthfulness) for machine learning. Set learnable=false and anonymized=true for highest privacy (ie. to forget data as it's processed).\n        anonymized:\n          type: boolean\n          description: The API Key is anonymized (using SHA-252 digest for logging). Set learnable=false and anonymized=true for highest privacy (ie. to forget data as it's processed).\n        partner:\n          type: boolean\n          description: The API Key has partner role.\n        striped:\n          type: boolean\n          description: The API Key is associated to a valid Stripe account.\n        corporate:\n          type: boolean\n          description: The API Key has role corporate (ex SWIFT payments instead of Stripe payments).\n        disabled:\n          type: boolean\n          description: The API Key is temporarily or permanently disabled.\n      description: The API Key.\n      xml:\n        name: APIKeyOut\n    BatchFirstLastNameDiasporaedOut:\n      type: object\n      properties:\n        personalNames:\n          type: array\n          description: Classified diaspora names\n          items:\n            $ref: '#/components/schemas/FirstLastNameDiasporaedOut'\n      description: Represents the output of inferring the LIKELY ethnicity from a personal name, given an country of residence.\n      xml:\n        name: BatchFirstLastNameDiasporaedOut\n    BatchPersonalNameGeoOut:\n      type: object\n      properties:\n        personalNames:\n          type: array\n          description: Classified geo names\n          items:\n            $ref: '#/components/schemas/PersonalNameGeoOut'\n      xml:\n        name: BatchPersonalNameGeoOut\n    APIClassifiersStatusOut:\n      type: object\n      properties:\n        softwareVersion:\n          $ref: '#/components/schemas/SoftwareVersionOut'\n        classifiers:\n          type: array\n          description: The list of classifiers and versions.\n          items:\n            $ref: '#/components/schemas/APIClassifierOut'\n      xml:\n        name: APIClassifiersStatusOut\n    ProperNounCategorizedOut:\n      type: object\n      properties:\n        script:\n          type: string\n          description: Script\n        id:\n          type: string\n          description: Id\n        name:\n          type: string\n          description: The input name\n        commonType:\n          type: string\n          description: The most likely common name type\n        commonTypeAlt:\n          type: string\n          description: 'Best alternative for : The most likely common name type'\n        score:\n          maximum: 100\n          minimum: 0\n          type: number\n          description: 'Higher score is better, but score is not normalized. Use calibratedProbability if available. '\n          format: double\n      description: Classified typed proper names\n      xml:\n        name: ProperNounCategorizedOut\n    PersonalNameGenderedOut:\n      type: object\n      properties:\n        script:\n          type: string\n          description: Script\n        id:\n          type: string\n          description: Id\n        name:\n          type: string\n          description: The input name\n        likelyGender:\n          type: string\n          description: Most likely gender\n          enum:\n            - male\n            - female\n            - unknown\n        genderScale:\n          type: number\n          description: Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value\n          format: double\n        score:\n          maximum: 100\n          minimum: 0\n          type: number\n          description: 'Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. '\n          format: double\n        probabilityCalibrated:\n          type: number\n          description: The calibrated probability for inferred gender to have been guessed correctly.\n          format: double\n      description: Classified genderized names\n      xml:\n        name: PersonalNameGenderedOut\n    FirstLastNameOriginedOut:\n      type: object\n      properties:\n        script:\n          type: string\n          description: Script\n        id:\n          type: string\n          description: Id\n        firstName:\n          type: string\n          description: The first name (also known as given name)\n        lastName:\n          type: string\n          description: The last name (also known as family name, or surname)\n        countryOrigin:\n          type: string\n          description: Most likely country of Origin\n        countryOriginAlt:\n          type: string\n          description: 'Second best alternative : country of Origin'\n        countriesOriginTop:\n          type: array\n          description: List countries of Origin (top 10)\n          items:\n            type: string\n            description: List countries of Origin (top 10)\n        score:\n          maximum: 100\n          minimum: 0\n          type: number\n          description: 'Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. '\n          format: double\n        regionOrigin:\n          type: string\n          description: Most likely region of Origin (based on countryOrigin ISO2 code)\n        topRegionOrigin:\n          type: string\n          description: Most likely top region of Origin (based on countryOrigin ISO2 code)\n        subRegionOrigin:\n          type: string\n          description: Most likely sub region of Origin (based on countryOrigin ISO2 code)\n        probabilityCalibrated:\n          type: number\n          description: The calibrated probability for countryOrigin to have been guessed correctly.\n          format: double\n        probabilityAltCalibrated:\n          type: number\n          description: The calibrated probability for countryOrigin OR countryOriginAlt to have been guessed correctly.\n          format: double\n      description: Represents the output of inferring the LIKELY country of Origin from a personal name.\n      xml:\n        name: FirstLastNameOriginedOut\n    BatchNameGeoIn:\n      type: object\n      properties:\n        properNouns:\n          type: array\n          items:\n            $ref: '#/components/schemas/NameGeoIn'\n      xml:\n        name: BatchNameGeoIn\n    BatchFirstLastNameGenderIn:\n      type: object\n      properties:\n        personalNames:\n          type: array\n          items:\n            $ref: '#/components/schemas/FirstLastNameGenderIn'\n      xml:\n        name: BatchFirstLastNameGenderIn\n    CorridorOut:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Id\n          xml:\n            attribute: true\n        FirstLastNameGenderedOut:\n          $ref: '#/components/schemas/FirstLastNameGenderedOut'\n        FirstLastNameOriginedOut:\n          $ref: '#/components/schemas/FirstLastNameOriginedOut'\n        FirstLastNameDiasporaedOut:\n          $ref: '#/components/schemas/FirstLastNameDiasporaedOut'\n        script:\n          type: string\n          description: Script\n      description: Represent multiple classifications for corridor sender and receiver (gender, country, origin, diaspora)\n      xml:\n        name: CorridorOut\n    BatchNameMatchedOut:\n      type: object\n      properties:\n        matchedNames:\n          type: array\n          description: Classified matched names\n          items:\n            $ref: '#/components/schemas/NameMatchedOut'\n      xml:\n        name: BatchNameMatchedOut\n    BatchNameMatchCandidatesOut:\n      type: object\n      properties:\n        namesAndMatchCandidates:\n          type: array\n          description: Classified matched names\n          items:\n            $ref: '#/components/schemas/NameMatchCandidatesOut'\n      xml:\n        name: BatchNameMatchCandidatesOut\n    BatchPersonalNameParsedOut:\n      type: object\n      properties:\n        personalNames:\n          type: array\n          description: Classified parsed names\n          items:\n            $ref: '#/components/schemas/PersonalNameParsedOut'\n      xml:\n        name: BatchPersonalNameParsedOut\n    FirstLastNameDiasporaedOut:\n      type: object\n      properties:\n        script:\n          type: string\n          description: Script\n        id:\n          type: string\n          description: Id\n        firstName:\n          type: string\n          description: The first name (also known as given name)\n        lastName:\n          type: string\n          description: The last name (also known as family name, or surname)\n        score:\n          maximum: 100\n          minimum: 0\n          type: number\n          description: 'Compatibility to NamSor_v1 Diaspora score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. '\n          format: double\n        ethnicityAlt:\n          type: string\n          description: The second best alternative ethnicity\n          example: Japanese\n          xml:\n            attribute: true\n        ethnicity:\n          type: string\n          description: The most likely ethnicity\n          example: Chinese\n          xml:\n            attribute: true\n        lifted:\n          type: boolean\n          description: Indicates if the output ethnicity is based on machine learning only, or further lifted as a known fact by a country-specific rule. Let us know if you believe ethnicity is incorrect on a specific case where lifted is true.\n          xml:\n            attribute: true\n        countryIso2:\n          type: string\n          description: From input data, the countryIso2 of geographic context (US,CA etc.)\n          xml:\n            attribute: true\n        ethnicitiesTop:\n          type: array\n          description: List most likely ethnicities (top 10)\n          items:\n            type: string\n            description: List most likely ethnicities (top 10)\n      description: Represents the output of inferring the LIKELY ethnicity from a personal name, given an country of residence.\n      xml:\n        name: FirstLastNameDiasporaedOut\n    BatchPersonalNameGenderedOut:\n      type: object\n      properties:\n        personalNames:\n          type: array\n          description: Classified genderized names\n          items:\n            $ref: '#/components/schemas/PersonalNameGenderedOut'\n      xml:\n        name: BatchPersonalNameGenderedOut\n    FeedbackLoopOut:\n      type: object\n      properties:\n        feedbackCredits:\n          type: integer\n          description: Number of units recredited as per feedback loop successful classification\n          format: int64\n      xml:\n        name: FeedbackLoopOut\n    APIBillingPeriodUsageOut:\n      type: object\n      properties:\n        apiKey:\n          type: string\n          description: User API Key.\n        subscriptionStarted:\n          type: integer\n          description: Datetime when the user subscribed to the plan.\n          format: int64\n        periodStarted:\n          type: integer\n          description: Datetime when the the plan's current period started.\n          format: int64\n        periodEnded:\n          type: integer\n          description: Datetime when the the plan's current period endend.\n          format: int64\n        stripeCurrentPeriodEnd:\n          type: integer\n          description: Datetime when the the plan's current period endend (in Stripe). Internal and Stripe periodicity should ~coincide.\n          format: int64\n        stripeCurrentPeriodStart:\n          type: integer\n          description: Datetime when the the plan's current period started (in Stripe). Internal and Stripe periodicity should ~coincide.\n          format: int64\n        billingStatus:\n          type: string\n          description: Current period billing status ex OPEN.\n        usage:\n          type: integer\n          description: Current period usage in units (NB some API endpoints use more than one unit).\n          format: int64\n        softLimit:\n          type: integer\n          description: Current period soft limit (reaching the limit sends an email notification).\n          format: int64\n        hardLimit:\n          type: integer\n          description: Current period hard limit (reaching the limit sends an email notification and blocks the API Key).\n          format: int64\n      description: The current billing period.\n      xml:\n        name: APIBillingPeriodUsageOut\n    APIPeriodUsageOut:\n      type: object\n      properties:\n        subscription:\n          $ref: '#/components/schemas/APIPlanSubscriptionOut'\n        billingPeriod:\n          $ref: '#/components/schemas/APIBillingPeriodUsageOut'\n        overageExclTax:\n          type: number\n          description: Overage amount including any tax.\n          format: double\n        overageInclTax:\n          type: number\n          description: Overage amount including tax (if applicable).\n          format: double\n        overageCurrency:\n          type: string\n          description: Currency of the overage amount.\n        overageQuantity:\n          type: integer\n          description: Quantity above monthly quota of the current subscritpion, in units.\n          format: int64\n      xml:\n        name: APICurrentUsageOut\n    PersonalNameIn:\n      type: object\n      properties:\n        id:\n          type: string\n          xml:\n            attribute: true\n        name:\n          type: string\n          xml:\n            attribute: true\n      xml:\n        name: PersonalNameIn\n    BatchCorridorIn:\n      type: object\n      properties:\n        corridorFromTo:\n          type: array\n          items:\n            $ref: '#/components/schemas/CorridorIn'\n      xml:\n        name: BatchCorridorIn\n    APIUsageAggregatedOut:\n      type: object\n      properties:\n        timeUnit:\n          type: string\n          description: Time unit is DAY, WEEK or MONTH depending on prior usage\n        periodStart:\n          type: integer\n          description: Start datetime of the reporting period\n          format: int64\n        periodEnd:\n          type: integer\n          description: End datetime of the reporting period\n          format: int64\n        totalUsage:\n          type: integer\n          description: Total usage in the current period\n          format: int64\n        historyTruncated:\n          type: boolean\n          description: If the history was truncaded due to data limit\n        data:\n          type: array\n          description: 'Data points : usage per DAY, WEEK or MONTH and per apiService'\n          items:\n            type: array\n            description: 'Data points : usage per DAY, WEEK or MONTH and per apiService'\n            items:\n              type: integer\n              description: 'Data points : usage per DAY, WEEK or MONTH and per apiService'\n              format: int32\n        colHeaders:\n          type: array\n          description: 'apiServices as column headers '\n          items:\n            type: string\n            description: 'apiServices as column headers '\n        rowHeaders:\n          type: array\n          description: 'dates as row headers '\n          items:\n            type: string\n            description: 'dates as row headers '\n      xml:\n        name: APIUsageAggregatedOut\n    APIServicesOut:\n      type: object\n      properties:\n        apiServices:\n          type: array\n          description: List of API Services\n          items:\n            $ref: '#/components/schemas/APIServiceOut'\n      xml:\n        name: APIServicesOut\n    BatchNameIn:\n      type: object\n      properties:\n        properNouns:\n          type: array\n          items:\n            $ref: '#/components/schemas/NameIn'\n      xml:\n        name: BatchNameIn\n    FirstLastNameOut:\n      type: object\n      properties:\n        script:\n          type: string\n          description: Script\n        id:\n          type: string\n          description: Id\n        firstName:\n          type: string\n          description: The first name (also known as given name)\n        lastName:\n          type: string\n          description: The last name (also known as family name, or surname)\n      description: First / last name structure corresponding to the most likely parsing.\n      xml:\n        name: FirstLastNameOut\n    BatchFirstLastNameUSRaceEthnicityOut:\n      type: object\n      properties:\n        personalNames:\n          type: array\n          description: Classified US 'race'/ethnicized names\n          items:\n            $ref: '#/components/schemas/FirstLastNameUSRaceEthnicityOut'\n      description: Represents the output of inferring the LIKELY US 'race/ethnicity' from a personal name, given US country of residence and (optionally) a ZIP5 code.\n      xml:\n        name: BatchFirstLastNameUSRaceEthnicityOut\n    BatchPersonalNameIn:\n      type: object\n      properties:\n        personalNames:\n          type: array\n          items:\n            $ref: '#/components/schemas/PersonalNameIn'\n      xml:\n        name: BatchPersonalNameIn\n    BatchFirstLastNamePhoneNumberIn:\n      type: object\n      properties:\n        personalNamesWithPhoneNumbers:\n          type: array\n          items:\n            $ref: '#/components/schemas/FirstLastNamePhoneNumberIn'\n      xml:\n        name: BatchFirstLastNamePhoneNumberIn\n    NameGeoIn:\n      type: object\n      properties:\n        id:\n          type: string\n          xml:\n            attribute: true\n        name:\n          type: string\n          xml:\n            attribute: true\n        countryIso2:\n          type: string\n          xml:\n            attribute: true\n      xml:\n        name: NameGeoIn\n    FirstLastNamePhoneCodedOut:\n      type: object\n      properties:\n        script:\n          type: string\n          description: Script\n        id:\n          type: string\n          description: Id\n        firstName:\n          type: string\n          description: The first name (also known as given name)\n        lastName:\n          type: string\n          description: The last name (also known as family name, or surname)\n        internationalPhoneNumberVerified:\n          type: string\n          description: The normalized phone number, verified using libphonenumber.\n        phoneCountryIso2Verified:\n          type: string\n          description: The phone ISO2 country code, verified using libphonenumber.\n        phoneCountryCode:\n          type: integer\n          description: The phone country code of the phone number, verified using libphonenumber.\n          format: int32\n        phoneCountryCodeAlt:\n          type: integer\n          description: The best alternative phone country code of the phone number.\n          format: int32\n        phoneCountryIso2:\n          type: string\n          description: The likely country of the phone number.\n        phoneCountryIso2Alt:\n          type: string\n          description: The best alternative country of the phone number.\n        originCountryIso2:\n          type: string\n          description: The likely country of origin of the name.\n        originCountryIso2Alt:\n          type: string\n          description: The best alternative country of origin of the name.\n        phoneNumber:\n          type: string\n          description: The input phone number.\n        verified:\n          type: boolean\n          description: Indicates if the phone number could be positively verified using libphonenumber.\n        score:\n          maximum: 100\n          minimum: 0\n          type: number\n          description: 'Higher score is better, but score is not normalized. Use calibratedProbability if available. '\n          format: double\n        countryIso2:\n          type: string\n          description: ISO2 country code\n      description: Represents the output of inferring the LIKELY country and phone code from a personal name and phone number.\n      xml:\n        name: FirstLastNamePhoneCodedOut\n    MatchPersonalFirstLastNameIn:\n      type: object\n      properties:\n        id:\n          type: string\n          xml:\n            attribute: true\n        name1:\n          $ref: '#/components/schemas/FirstLastNameIn'\n        name2:\n          $ref: '#/components/schemas/PersonalNameIn'\n      xml:\n        name: MatchPersonalFirstLastNameIn\n    PersonalNameParsedOut:\n      type: object\n      properties:\n        script:\n          type: string\n          description: Script\n        id:\n          type: string\n          description: Id\n        name:\n          type: string\n          description: The input name\n        nameParserType:\n          type: string\n          description: Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.\n        nameParserTypeAlt:\n          type: string\n          description: Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.\n        firstLastName:\n          $ref: '#/components/schemas/FirstLastNameOut'\n        score:\n          maximum: 100\n          minimum: 0\n          type: number\n          description: 'Higher score is better, but score is not normalized. Use calibratedProbability if available. '\n          format: double\n      xml:\n        name: PersonalNameParsedOut\n    BatchFirstLastNameGeoZippedIn:\n      type: object\n      properties:\n        personalNames:\n          type: array\n          items:\n            $ref: '#/components/schemas/FirstLastNameGeoZippedIn'\n      xml:\n        name: BatchFirstLastNameGeoZippedIn\n    BatchFirstLastNameOriginedOut:\n      type: object\n      properties:\n        personalNames:\n          type: array\n          description: Classified origined names\n          items:\n            $ref: '#/components/schemas/FirstLastNameOriginedOut'\n      description: Represents the output of inferring the LIKELY origin from a list of personal names.\n      xml:\n        name: BatchFirstLastNameOriginedOut\n    FirstLastNameGeoZippedIn:\n      type: object\n      properties:\n        id:\n          type: string\n          xml:\n            attribute: true\n        firstName:\n          type: string\n          xml:\n            attribute: true\n        lastName:\n          type: string\n          xml:\n            attribute: true\n        countryIso2:\n          type: string\n          xml:\n            attribute: true\n        zipCode:\n          type: string\n          xml:\n            attribute: true\n      xml:\n        name: FirstLastNameGeoZippedIn\n    CorridorIn:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Id\n          xml:\n            attribute: true\n        firstLastNameGeoFrom:\n          $ref: '#/components/schemas/FirstLastNameGeoIn'\n        firstLastNameGeoTo:\n          $ref: '#/components/schemas/FirstLastNameGeoIn'\n      description: Represent any transnational interaction between names (ex. remittance, communication, cross-border investment, airline travel\n      xml:\n        name: CorridorIn\n    BatchCorridorOut:\n      type: object\n      properties:\n        corridorFromTo:\n          type: array\n          description: Classified corridors\n          items:\n            $ref: '#/components/schemas/CorridorOut'\n      xml:\n        name: BatchCorridorOut\n    BatchPersonalNameGeoIn:\n      type: object\n      properties:\n        personalNames:\n          type: array\n          items:\n            $ref: '#/components/schemas/PersonalNameGeoIn'\n      xml:\n        name: BatchPersonalNameGeoIn\n    FirstLastNameIn:\n      type: object\n      properties:\n        id:\n          type: string\n          xml:\n            attribute: true\n        firstName:\n          type: string\n          xml:\n            attribute: true\n        lastName:\n          type: string\n          xml:\n            attribute: true\n      xml:\n        name: FirstLastName\n    APIClassifierTaxonomyOut:\n      type: object\n      properties:\n        classifierName:\n          type: string\n          description: Name of the classifier as per apiStatus (corresponds also to the name of the service in apiServices)\n        taxonomyClasses:\n          type: array\n          description: The taxonomy classes this classifier classifies to\n          items:\n            type: string\n            description: The taxonomy classes this classifier classifies to\n      xml:\n        name: APIClassifierTaxonomyOut\n    NameMatchCandidateOut:\n      type: object\n      properties:\n        candidateName:\n          type: string\n          description: The name matching candidate name\n        probability:\n          type: number\n          description: The name matching estimated probability.\n          format: double\n        predScoreGivenName:\n          type: number\n          description: The given name prediction score.\n          format: double\n        predScoreFamilyName:\n          type: number\n          description: The family name prediction score.\n          format: double\n      description: The ordered list of name matching candidates\n      xml:\n        name: NameMatchCandidateOut\n    APIUsageHistoryOut:\n      type: object\n      properties:\n        detailedUsage:\n          type: array\n          description: Detailed usage as reported by the deduplicating API counter.\n          items:\n            $ref: '#/components/schemas/APICounterV2Out'\n      xml:\n        name: APIUsageHistoryOut\n    BatchFirstLastNamePhoneCodedOut:\n      type: object\n      properties:\n        personalNamesWithPhoneNumbers:\n          type: array\n          description: Classified phone-coded names\n          items:\n            $ref: '#/components/schemas/FirstLastNamePhoneCodedOut'\n      description: Represents the output of inferring the LIKELY country and phone code of personal names+phones.\n      xml:\n        name: BatchFirstLastNamePhoneCodedOut\n    FirstLastNameUSRaceEthnicityOut:\n      type: object\n      properties:\n        script:\n          type: string\n          description: Script\n        id:\n          type: string\n          description: Id\n        firstName:\n          type: string\n          description: The first name (also known as given name)\n        lastName:\n          type: string\n          description: The last name (also known as family name, or surname)\n        raceEthnicityAlt:\n          type: string\n          description: Second most likely US 'race'/ethnicity\n          xml:\n            attribute: true\n          enum:\n            - W_NL\n            - HL\n            - A\n            - B_NL\n            - AI_AN\n            - PI\n        raceEthnicity:\n          type: string\n          description: Most likely US 'race'/ethnicity\n          xml:\n            attribute: true\n          enum:\n            - W_NL\n            - HL\n            - A\n            - B_NL\n            - AI_AN\n            - PI\n        score:\n          maximum: 100\n          minimum: 0\n          type: number\n          description: 'Higher score is better, but score is not normalized. Use calibratedProbability if available. '\n          format: double\n        raceEthnicitiesTop:\n          type: array\n          description: List 'race'/ethnicities\n          items:\n            type: string\n            description: List 'race'/ethnicities\n        probabilityCalibrated:\n          type: number\n          description: The calibrated probability for raceEthnicity to have been guessed correctly.\n          format: double\n        probabilityAltCalibrated:\n          type: number\n          description: The calibrated probability for raceEthnicity OR raceEthnicityAlt to have been guessed correctly.\n          format: double\n      description: Represents the output of inferring the LIKELY US 'race/ethnicity' from a personal name, given US country of residence and (optionally) a ZIP5 code.\n      xml:\n        name: FirstLastNameUSRaceEthnicityOut\n    BatchFirstLastNamePhoneNumberGeoIn:\n      type: object\n      properties:\n        personalNamesWithPhoneNumbers:\n          type: array\n          items:\n            $ref: '#/components/schemas/FirstLastNamePhoneNumberGeoIn'\n      xml:\n        name: BatchFirstLastNamePhoneNumberGeoIn\n    PersonalNameGeoIn:\n      type: object\n      properties:\n        id:\n          type: string\n          xml:\n            attribute: true\n        name:\n          type: string\n          xml:\n            attribute: true\n        countryIso2:\n          type: string\n          xml:\n            attribute: true\n      xml:\n        name: PersonalNameGeoIn\n    APIServiceOut:\n      type: object\n      properties:\n        serviceName:\n          type: string\n          description: A service name corresponds to classifier name in apiStatus (ex. personalname_gender or personalfullname_gender)\n        serviceGroup:\n          type: string\n          description: Groups together classifiers providing a similar service (ex. gender groups personalname_gender and personalfullname_gender)\n        costInUnits:\n          type: integer\n          description: Indicates how many units per call this service costs (ex. the number of units per name)\n          format: int32\n      description: List of API Services\n      xml:\n        name: APIServiceOut\n    BatchProperNounCategorizedOut:\n      type: object\n      properties:\n        properNouns:\n          type: array\n          description: Classified typed proper names\n          items:\n            $ref: '#/components/schemas/ProperNounCategorizedOut'\n      description: Represents the output of inferring the common type (anthroponym, toponym, brand, etc.) from a list of proper names.\n      xml:\n        name: BatchProperNounCategorizedOut\n    BatchFirstLastNameIn:\n      type: object\n      properties:\n        personalNames:\n          type: array\n          items:\n            $ref: '#/components/schemas/FirstLastNameIn'\n      xml:\n        name: BatchFirstLastNameIn\n    NameMatchedOut:\n      type: object\n      properties:\n        script:\n          type: string\n          description: Script\n        id:\n          type: string\n          description: Id\n        matchStatus:\n          type: string\n          description: The name matching status.\n        score:\n          type: number\n          format: double\n          description: Score.\n      description: Classified matched names\n      xml:\n        name: NameMatchedOut\n    BatchMatchPersonalFirstLastNameIn:\n      type: object\n      properties:\n        personalNames:\n          type: array\n          items:\n            $ref: '#/components/schemas/MatchPersonalFirstLastNameIn'\n      xml:\n        name: BatchMatchPersonalFirstLastNameIn\n    FirstLastNamePhoneNumberGeoIn:\n      type: object\n      properties:\n        id:\n          type: string\n          xml:\n            attribute: true\n        firstName:\n          type: string\n          xml:\n            attribute: true\n        lastName:\n          type: string\n          xml:\n            attribute: true\n        phoneNumber:\n          type: string\n        FirstLastNameOriginedOut:\n          $ref: '#/components/schemas/FirstLastNameOriginedOut'\n        countryIso2:\n          type: string\n        countryIso2Alt:\n          type: string\n      xml:\n        name: FirstLastNamePhoneNumberGeoIn\n    PersonalNameGeoOut:\n      type: object\n      properties:\n        script:\n          type: string\n          description: Script\n        id:\n          type: string\n          description: Id\n        name:\n          type: string\n          description: The input name.\n        score:\n          maximum: 100\n          minimum: 0\n          type: number\n          description: 'Higher score is better, but score is not normalized. Use calibratedProbability if available. '\n          format: double\n        country:\n          type: string\n          description: 'Most likely country '\n        countryAlt:\n          type: string\n          description: 'Second best alternative : country '\n        region:\n          type: string\n          description: Most likely region (based on country ISO2 code)\n        topRegion:\n          type: string\n          description: Most likely top region (based on country ISO2 code)\n        subRegion:\n          type: string\n          description: Most likely sub region (based on country ISO2 code)\n        countriesTop:\n          type: array\n          description: List countries (top 10)\n          items:\n            type: string\n            description: List countries (top 10)\n        probabilityCalibrated:\n          type: number\n          description: The calibrated probability for country to have been guessed correctly.\n          format: double\n        probabilityAltCalibrated:\n          type: number\n          description: The calibrated probability for country OR countryAlt to have been guessed correctly.\n          format: double\n      description: Classified geo names\n      xml:\n        name: PersonalNameGeoOut\n    BatchFirstLastNameGeoIn:\n      type: object\n      properties:\n        personalNames:\n          type: array\n          items:\n            $ref: '#/components/schemas/FirstLastNameGeoIn'\n      xml:\n        name: BatchFirstLastNameGeoIn\n  securitySchemes:\n    api_key:\n      type: apiKey\n      description: All requests on the NamSor API needs to include an API key. The API key can be provided as part of the query string or as a request header. The name of the API key needs to be `X-API-KEY`\n      name: X-API-KEY\n      in: header\n\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/namsor/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/namsor/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}