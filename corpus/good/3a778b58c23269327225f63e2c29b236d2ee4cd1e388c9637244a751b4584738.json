{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/MEF-GIT/MEF-LSO-Sonata-SDK"
		},
		"file": {
			"name": "productOrderManagement.api.yaml",
			"size": 0,
			"path": "productApi/order/productOrderManagement.api.yaml",
			"byteSize": 163868,
			"content": "openapi: 3.0.1\ninfo:\n  description: |\n    **This file forms part of MEF W123** \n\n    **This specification represents MEF work in progress and is subject to\n    change.** \n\n    This API implements Business Requirements described in MEF W57.2\n\n    The scope of this API includes the following capabilities to the API:\n\n    - Create Product Order\n    - Update Product Order by Product Order Identifier\n    - Retrieve List of Product Orders\n    - Retrieve Product Order by Product Order Identifier\n    - Modify Product Order Item Requested Delivery Date\n    - Retrieve Modify Product Order Item Requested Delivery Date List\n    - Retrieve Modify Product Order Item Requested Delivery Date by Identifier\n    - Cancel Product Order\n    - Retrieve List of Cancel Product Orders\n    - Retrieve Cancel Product Order Request by Cancel Product Order Identifier\n    - Initiate Charge\n    - Respond to Charge\n    - Retrieve List of Charges\n    - Retrieve Charge by Charge Identifier\n    - Register for Notifications\n    - Send Notifications\n\n    Copyright 2021 MEF Forum and its contributors.\n\n    This file includes content based on the TM Forum Product Order API (TMF622\n    v4.0.0) available at https://github.com/tmforum-apis/TMF622_ProductOrder,\n    which is licensed by the TM Forum under the Apache License version 2.0. Such\n    content has been modified by the MEF Forum and its contributors.\n  title: Product Ordering Management\n  version: 8.0.0-RC\nservers:\n  - url: 'https://{serverBase}/mefApi/sonata/productOrderingManagement/v8/'\n    variables:\n      serverBase:\n        default: mef.net\n        description: The base of Seller's URL.\ntags:\n  - name: productOrder\n  - name: cancelProductOrder\n  - name: charge\n  - name: modifyProductOrderItemRequestedDeliveryDate\n  - name: events subscription\npaths:\n  /productOrder:\n    get:\n      description: This operation list or find ProductOrder entities\n      operationId: listProductOrder\n      parameters:\n        - description: State of the Product Order\n          in: query\n          name: state\n          schema:\n            enum:\n              - acknowledged\n              - assessingCancellation\n              - cancelled\n              - completed\n              - failed\n              - held.assessingCharge\n              - inProgress\n              - partial\n              - pending.assessingModification\n              - pendingCancellation\n              - rejected\n            type: string\n        - description: \u003e-\n            A number that uniquely identifies an order within the Buyer's\n            enterprise.\n          in: query\n          name: externalId\n          schema:\n            type: string\n        - description: \u003e-\n            An identifier that is used to group Product Orders that represent a\n            unit of functionality that is important to a Buyer.\n          in: query\n          name: projectId\n          schema:\n            type: string\n        - description: Date when the order was created greater than\n          in: query\n          name: orderDate.gt\n          schema:\n            format: date-time\n            type: string\n        - description: Date when the order was created lesser than\n          in: query\n          name: orderDate.lt\n          schema:\n            format: date-time\n            type: string\n        - description: Effective completion date greater than\n          in: query\n          name: completionDate.gt\n          schema:\n            format: date-time\n            type: string\n        - description: Effective completion date lesser than\n          in: query\n          name: completionDate.lt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            This is requested date to get this Product Order Item completed\n            greater than\n          in: query\n          name: requestedCompletionDate.gt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            This is requested date to get this Product Order Item completed\n            lesser than\n          in: query\n          name: requestedCompletionDate.lt\n          schema:\n            format: date-time\n            type: string\n        - description: Seller planned completion date greater than\n          in: query\n          name: expectedCompletionDate.gt\n          schema:\n            format: date-time\n            type: string\n        - description: Seller planned completion date lesser than\n          in: query\n          name: expectedCompletionDate.lt\n          schema:\n            format: date-time\n            type: string\n        - description: order cancellation date greater than\n          in: query\n          name: orderCancellationDate.gt\n          schema:\n            format: date-time\n            type: string\n        - description: order cancellation date lesser than\n          in: query\n          name: orderCancellationDate.lt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when the responding\n            entity represents more than one Seller.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: sellerId\n          schema:\n            type: string\n        - description: \u003e-\n            Requested index for start of item to be provided in response\n            requested by the client. Note that the index starts with \"0\".\n          in: query\n          name: offset\n          schema:\n            format: int32\n            type: integer\n        - description: \u003e-\n            Requested number of items to be provided in response requested by\n            client\n          in: query\n          name: limit\n          schema:\n            format: int32\n            type: integer\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/ProductOrder_Find'\n                type: array\n          description:\n            'OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)'\n          headers:\n            X-Pagination-Throttled:\n              description: \u003e\n                Used to indicate that result page was throttled to maximum\n                possible size  and there are additional results that can be\n                fetched\n              schema:\n                type: boolean\n            X-Total-Count:\n              description: \u003e\n                The total number of matching items. E.g. if there are 50\n                matching items in total, but the request has offset=10 and\n                limit=10, then the X-Total-Count is 50.\n              schema:\n                type: integer\n            X-Result-Count:\n              description: The number of items included in the response\n              schema:\n                type: integer\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n      summary: List or find ProductOrder objects\n      tags:\n        - productOrder\n    post:\n      description: This operation creates a ProductOrder entity.\n      operationId: createProductOrder\n      parameters:\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when the responding\n            entity represents more than one Seller.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json;charset=utf-8:\n            schema:\n              $ref: '#/components/schemas/ProductOrder_Create'\n        description: The ProductOrder to be created\n        required: true\n      responses:\n        '201':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/ProductOrder'\n          description:\n            'Created (https://tools.ietf.org/html/rfc7231#section-6.3.2)'\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '422':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Error422'\n                type: array\n          description:\n            Unprocessable entity due to the business validation problems\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n      summary: Creates a ProductOrder\n      tags:\n        - productOrder\n      x-codegen-request-body-name: productOrder\n  '/productOrder/{id}':\n    get:\n      description: \u003e-\n        This operation retrieves a ProductOrder entity. Attribute selection is\n        enabled for all first level attributes.\n      operationId: retrieveProductOrder\n      parameters:\n        - description: Identifier of the ProductOrder\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity  represents more than one Seller.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/ProductOrder'\n          description:\n            'OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)'\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '404':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error404'\n          description: Not Found\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n      summary: Retrieves a ProductOrder by ID\n      tags:\n        - productOrder\n    patch:\n      description: This operation updates partially a ProductOrder entity.\n      operationId: patchProductOrder\n      parameters:\n        - description: Identifier of the ProductOrder\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity  represents more than one Seller.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json;charset=utf-8:\n            schema:\n              $ref: '#/components/schemas/ProductOrder_Update'\n        description: The ProductOrder to be updated\n        required: true\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/ProductOrder'\n          description:\n            'Updated (https://tools.ietf.org/html/rfc7231#section-6.3.1)'\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '404':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error404'\n          description: Not Found\n        '409':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error409'\n          description: Conflict\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n        '501':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error501'\n          description: Method not implemented.\n      summary: Updates partially a ProductOrder\n      tags:\n        - productOrder\n      x-codegen-request-body-name: productOrder\n  /cancelProductOrder:\n    get:\n      description: This operation list or find CancelProductOrder entities\n      operationId: listCancelProductOrder\n      parameters:\n        - in: query\n          name: productOrderId\n          schema:\n            type: string\n        - in: query\n          name: productOrderExternalId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity  represents more than one Seller.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: sellerId\n          schema:\n            type: string\n        - description: \u003e-\n            Requested index for start of item to be provided in response\n            requested by client. Note that the index starts with \"0\".\n          in: query\n          name: offset\n          schema:\n            format: int32\n            type: integer\n        - description: \u003e-\n            Requested number of items to be provided in response requested by\n            client\n          in: query\n          name: limit\n          schema:\n            format: int32\n            type: integer\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/CancelProductOrder'\n                type: array\n          description: Success\n          headers:\n            X-Pagination-Throttled:\n              description: \u003e\n                Used to indicate that result page was throttled to maximum\n                possible size  and there are additional results that can be\n                fetched\n              schema:\n                type: boolean\n            X-Total-Count:\n              description: \u003e\n                The total number of matching items. E.g. if there are 50\n                matching items in total, but the request has offset=10 and\n                limit=10, then the X-Total-Count is 50.\n              schema:\n                type: integer\n            X-Result-Count:\n              description: The number of items included in the response\n              schema:\n                type: integer\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n        '501':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error501'\n          description: Method not implemented.\n      summary: List or find CancelProductOrder objects\n      tags:\n        - cancelProductOrder\n    post:\n      description: This operation creates a CancelProductOrder entity.\n      operationId: createCancelProductOrder\n      parameters:\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity  represents more than one Seller.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json;charset=utf-8:\n            schema:\n              $ref: '#/components/schemas/CancelProductOrder_Create'\n        description: The CancelProductOrder to be created\n        required: true\n      responses:\n        '201':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/CancelProductOrder'\n          description: Created\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '422':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Error422'\n                type: array\n          description:\n            Unprocessable entity due to the business validation problems\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n        '501':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error501'\n          description: Method not implemented.\n      summary: Creates a CancelProductOrder\n      tags:\n        - cancelProductOrder\n      x-codegen-request-body-name: cancelProductOrder\n  '/cancelProductOrder/{id}':\n    get:\n      description: This operation retrieves a CancelProductOrder entity.\n      operationId: retrieveCancelProductOrder\n      parameters:\n        - description: Identifier of the CancelProductOrder\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity  represents more than one Seller.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/CancelProductOrder'\n          description: Success\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '404':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error404'\n          description: Not Found\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n        '501':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error501'\n          description: Method not implemented.\n      summary: Retrieves a CancelProductOrder by ID\n      tags:\n        - cancelProductOrder\n  /charge:\n    get:\n      description: This operation list or find Charge entities\n      operationId: listCharge\n      parameters:\n        - description: id of the Product Order this Charge relates to.\n          in: query\n          name: productOrderId\n          schema:\n            type: string\n        - description: id of the Product Order Item this Charge relates to.\n          in: query\n          name: productOrderItemId\n          schema:\n            type: string\n        - description: \u003e-\n            The date that the Buyer must respond to the Seller's Charge. If\n            there is no response received by the Due Date the Seller will treat\n            all charges as declined (greater than)\n          in: query\n          name: responseDueDate.gt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            The date that the Buyer must respond to the Seller's Charge. If\n            there is no response received by the Due Date the Seller will treat\n            all charges as declined (greater than)\n          in: query\n          name: responseDueDate.lt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity  represents more than one Seller.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: sellerId\n          schema:\n            type: string\n        - description: \u003e-\n            Requested index for start of item to be provided in response\n            requested by client. Note that the index starts with \"0\".\n          in: query\n          name: offset\n          schema:\n            format: int32\n            type: integer\n        - description: \u003e-\n            Requested number of items to be provided in response requested by\n            client\n          in: query\n          name: limit\n          schema:\n            format: int32\n            type: integer\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/MEFProductOrderCharge'\n                type: array\n          description: Success\n          headers:\n            X-Pagination-Throttled:\n              description: \u003e\n                Used to indicate that result page was throttled to maximum\n                possible size  and there are additional results that can be\n                fetched\n              schema:\n                type: boolean\n            X-Total-Count:\n              description: \u003e\n                The total number of matching items. E.g. if there are 50\n                matching items in total, but the request has offset=10 and\n                limit=10, then the X-Total-Count is 50.\n              schema:\n                type: integer\n            X-Result-Count:\n              description: The number of items included in the response\n              schema:\n                type: integer\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n        '501':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error501'\n          description: Method not implemented.\n      summary: List or find Charge objects\n      tags:\n        - charge\n  '/charge/{id}':\n    get:\n      description: This operation retrieves a Charge entity.\n      operationId: retrieveCharge\n      parameters:\n        - description: Identifier of the Charge\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity  represents more than one Seller.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/MEFProductOrderCharge'\n          description: Success\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '404':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error404'\n          description: Not Found\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n        '501':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error501'\n          description: Method not implemented.\n      summary: Retrieves a Charge by ID\n      tags:\n        - charge\n    patch:\n      description: This operation updates partially a Charge entity.\n      operationId: patchCharge\n      parameters:\n        - description: Identifier of the Charge\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity  represents more than one Seller.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json;charset=utf-8:\n            schema:\n              $ref: '#/components/schemas/MEFProductOrderCharge_Update'\n        description: The Charge to be updated\n        required: true\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/MEFProductOrderCharge'\n          description:\n            'Updated (https://tools.ietf.org/html/rfc7231#section-6.3.1)'\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '404':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error404'\n          description: Not Found\n        '409':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error409'\n          description: Conflict\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n        '501':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error501'\n          description: Method not implemented.\n      summary: Updates partially a Charge\n      tags:\n        - charge\n      x-codegen-request-body-name: charge\n  /hub:\n    post:\n      description: \u003e-\n        Sets the communication endpoint address the service instance must use\n        to deliver information about its health state, execution state,\n        failures and metrics.\n      operationId: registerListener\n      parameters:\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity  represents more than one Seller.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json;charset=utf-8:\n            schema:\n              $ref: '#/components/schemas/EventSubscriptionInput'\n        description:\n          Data containing the callback endpoint to deliver the information\n        required: true\n      responses:\n        '201':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/EventSubscription'\n          description: Subscribed\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n        '501':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error501'\n          description: Method not implemented.\n      summary: Register a listener\n      tags:\n        - events subscription\n      x-codegen-request-body-name: data\n  '/hub/{id}':\n    delete:\n      description: \u003e-\n        Resets the communication endpoint address the service instance must use\n        to deliver information about its health state, execution state,\n        failures and metrics.\n      operationId: unregisterListener\n      parameters:\n        - description: The id of the registered listener\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity  represents more than one Seller.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Deleted\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '404':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error404'\n          description: Not Found\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n        '501':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error501'\n          description: Method not implemented.\n      summary: Unregister a listener\n      tags:\n        - events subscription\n    get:\n      description: \u003e-\n        This operation retrieves a hub entity. Attribute selection is enabled\n        for all first level attributes.\n      operationId: retrieveHub\n      parameters:\n        - description: Identifier of the Hub\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity  represents more than one Seller.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/EventSubscription'\n          description: Success\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '404':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error404'\n          description: Not Found\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n        '501':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error501'\n          description: Method not implemented.\n      summary: Retrieves a Hub by ID\n      tags:\n        - events subscription\n  /modifyProductOrderItemRequestedDeliveryDate:\n    get:\n      description: \u003e-\n        This operation list or find ModifyProductOrderItemRequestedDeliveryDate\n        entities\n      operationId: listModifyProductOrderItemRequestedDeliveryDate\n      parameters:\n        - in: query\n          name: productOrderId\n          schema:\n            type: string\n        - in: query\n          name: state\n          schema:\n            enum:\n              - acknowledged\n              - done\n              - done.declined\n              - inProgress.assessingCharge\n              - rejected\n            type: string\n        - description: Indicates that expedited treatment is requested.\n          in: query\n          name: expediteIndicator\n          schema:\n            type: boolean\n        - description: \u003e-\n            Identifies the Buyer's desired due date (requested delivery date) -\n            greater than\n          in: query\n          name: requestedCompletionDate.gt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            Identifies the Buyer's desired due date (requested delivery date) -\n            lesser than\n          in: query\n          name: requestedCompletionDate.lt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            The date on which the Seller assigned the Modify Product Order Item\n            Requested Delivery Data Identifier - greater than\n          in: query\n          name: creationDate.gt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            The date on which the Seller assigned the Modify Product Order Item\n            Requested Delivery Data Identifier - lesser than\n          in: query\n          name: creationDate.lt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity  represents more than one Seller.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: sellerId\n          schema:\n            type: string\n        - description: \u003e-\n            Requested index for start of item to be provided in response\n            requested by client. Note that the index starts with \"0\".\n          in: query\n          name: offset\n          schema:\n            format: int32\n            type: integer\n        - description: \u003e-\n            Requested number of items to be provided in response requested by\n            client\n          in: query\n          name: limit\n          schema:\n            format: int32\n            type: integer\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/MEFModifyProductOrderItemRequestedDeliveryDate'\n                type: array\n          description: Success\n          headers:\n            X-Pagination-Throttled:\n              description: \u003e\n                Used to indicate that result page was throttled to maximum\n                possible size  and there are additional results that can be\n                fetched\n              schema:\n                type: boolean\n            X-Total-Count:\n              description: \u003e\n                The total number of matching items. E.g. if there are 50\n                matching items in total, but the request has offset=10 and\n                limit=10, then the X-Total-Count is 50.\n              schema:\n                type: integer\n            X-Result-Count:\n              description: The number of items included in the response\n              schema:\n                type: integer\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n        '501':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error501'\n          description: Method not implemented.\n      summary: List or find ModifyProductOrderItemRequestedDeliveryDate objects\n      tags:\n        - modifyProductOrderItemRequestedDeliveryDate\n    post:\n      description:\n        This operation creates a ModifyProductOrderItemRequestedDeliveryDate\n        entity.\n      operationId: createModifyProductOrderItemRequestedDeliveryDate\n      parameters:\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity  represents more than one Seller.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json;charset=utf-8:\n            schema:\n              $ref: \u003e-\n                #/components/schemas/MEFModifyProductOrderItemRequestedDeliveryDate_Create\n        description:\n          The ModifyProductOrderItemRequestedDeliveryDate to be created\n        required: true\n      responses:\n        '201':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/MEFModifyProductOrderItemRequestedDeliveryDate'\n          description: Created\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '422':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Error422'\n                type: array\n          description:\n            Unprocessable entity due to the business validation problems\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n        '501':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error501'\n          description: Method not implemented.\n      summary: Creates a ModifyProductOrderItemRequestedDeliveryDate\n      tags:\n        - modifyProductOrderItemRequestedDeliveryDate\n      x-codegen-request-body-name: modifyProductOrderItemRequestedDeliveryDate\n  '/modifyProductOrderItemRequestedDeliveryDate/{id}':\n    get:\n      description:\n        This operation retrieves a ModifyProductOrderItemRequestedDeliveryDate\n        entity.\n      operationId: retrieveModifyProductOrderItemRequestedDeliveryDate\n      parameters:\n        - description:\n            Identifier of the ModifyProductOrderItemRequestedDeliveryDate\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity  represents more than one Seller.\n\n            Reference: MEF 57.2 (Sn 9.18)\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/MEFModifyProductOrderItemRequestedDeliveryDate'\n          description: Success\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '404':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error404'\n          description: Not Found\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n        '501':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error501'\n          description: Method not implemented.\n      summary: Retrieves a ModifyProductOrderItemRequestedDeliveryDate by ID\n      tags:\n        - modifyProductOrderItemRequestedDeliveryDate\ncomponents:\n  schemas:\n    CancelProductOrder:\n      description: Request for cancellation an existing product order\n      properties:\n        cancellationDeniedReason:\n          description: \u003e-\n            If the Cancel Product Order is denied by the Seller, the Seller\n            provides a reason to the Buyer using this attribute.\n          type: string\n        cancellationReason:\n          description: \u003e-\n            An optional attribute that allows the Buyer to provide additional\n            detail to the Seller on their reason for cancelling the Product\n            Order\n          type: string\n        cancellationReasonType:\n          $ref: '#/components/schemas/CancellationReasonType'\n          description: \u003e-\n            Identifies the type of reason, Technical or Commercial, for the\n            Cancellation Request\n        href:\n          description: \u003e\n            Hyperlink to the cancellation request. Hyperlink MAY be used by the\n            Seller in responses Hyperlink MUST be ignored by the Seller in case\n            it is provided by the Buyer in a request\n          type: string\n        id:\n          description: \u003e-\n            Unique identifier for the Cancel Product Order that is generated by\n            the Seller when the Cancel Product Order request is acknowledged\n            via an API.\n          type: string\n        orderVersion:\n          description: \u003e-\n            The version of the Product Order. Set by the Buyer using Seller\n            specified Product Order Version of the Product Order that is to be\n            cancelled.\n          type: string\n        productOrder:\n          $ref: '#/components/schemas/MEFProductOrderRef'\n          description: \u003e-\n            A reference to a Product Order that the buyer wishes to cancel.\n        relatedContactInformation:\n          description: \u003e-\n            Contact information of an individual or organization playing a role\n            for this Cancel Product Order.\n\n            The rule for mapping a represented attribute\n\n            value to a `role` is to use the _lowerCamelCase_ pattern e.g.\n\n            - Cancel Product Order Contact: `role=cancelProductOrderContact`\n\n            - Seller Contact: `role=sellerContact`\n          items:\n            $ref: '#/components/schemas/RelatedContactInformation'\n          type: array\n        state:\n          $ref: '#/components/schemas/MEFChargeableTaskStateType'\n          description: \u003e-\n            The states as defined by TMF622 and extended to meet MEF\n            requirements. These states are used to convey the Cancel Product\n            Order status during the lifecycle of the Product Order.\n      required:\n        - id\n        - orderVersion\n        - productOrder\n        - relatedContactInformation\n        - state\n      type: object\n    CancelProductOrder_Create:\n      description: |-\n        Request for cancellation an existing product order\n        Skipped properties: id,href,state,effectiveCancellationDate\n      properties:\n        cancellationReason:\n          description: \u003e-\n            An optional attribute that allows the Buyer to provide additional\n            detail to the Seller on their reason for cancelling the Product\n            Order\n          type: string\n        cancellationReasonType:\n          $ref: '#/components/schemas/CancellationReasonType'\n          description: \u003e-\n            Identifies the type of reason, Technical or Commercial, for the\n            Cancellation Request\n        orderVersion:\n          description: \u003e-\n            The version of the Product Order. Set by the Buyer using Seller\n            specified Product Order Version of the Product Order that is to be\n            cancelled.\n          type: string\n        productOrder:\n          $ref: '#/components/schemas/MEFProductOrderRef'\n          description: \u003e-\n            A reference to a Product Order that the buyer wishes to cancel.\n        relatedContactInformation:\n          description: \u003e-\n            Contact information of an individual or organization playing a role\n            for this Cancel Product Order.\n\n            The rule for mapping a represented attribute\n\n            value to a `role` is to use the _lowerCamelCase_ pattern e.g.\n\n            - Cancel Product Order Contact: `role=cancelProductOrderContact`\n\n            - Seller Contact: `role=sellerContact`\n          items:\n            $ref: '#/components/schemas/RelatedContactInformation'\n          minItems: 1\n          type: array\n      required:\n        - orderVersion\n        - productOrder\n        - relatedContactInformation\n      type: object\n    CancellationReasonType:\n      description: \u003e-\n        Identifies the type of reason, Technical or Commercial, for the\n        Cancellation Request\n      enum:\n        - technical\n        - commercial\n      type: string\n    Duration:\n      description: A Duration in a given unit of time e.g. 3 hours, or 5 days.\n      properties:\n        amount:\n          description: Duration (number of seconds, minutes, hours, etc.)\n          type: integer\n        units:\n          $ref: '#/components/schemas/TimeUnit'\n          description: Time unit type\n      required:\n        - amount\n        - units\n      type: object\n    Error:\n      description: \u003e\n        Standard Class used to describe API response error Not intended to be\n        used directly. The `code` in the HTTP header is used as a discriminator\n        for the type of error returned in runtime.\n      properties:\n        message:\n          description: \u003e-\n            Text that provides mode details and corrective actions related to\n            the error. This can be shown to a client user.\n          type: string\n        reason:\n          description: \u003e-\n            Text that explains the reason for the error. This can be shown to a\n            client user.\n          maxLength: 255\n          type: string\n        referenceError:\n          description: URL pointing to documentation describing the error\n          format: uri\n          type: string\n      required:\n        - reason\n      type: object\n    Error400:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              $ref: '#/components/schemas/Error400Code'\n              description: \u003e-\n                One of the following error codes:\n\n                - missingQueryParameter: The URI is missing a required\n                query-string parameter\n\n                - missingQueryValue: The URI is missing a required query-string\n                parameter value\n\n                - invalidQuery: The query section of the URI is invalid.\n\n                - invalidBody: The request has an invalid body\n          required:\n            - code\n          type: object\n      description:\n        Bad Request. (https://tools.ietf.org/html/rfc7231#section-6.5.1)\n    Error400Code:\n      description: \u003e-\n        One of the following error codes:\n\n        - missingQueryParameter: The URI is missing a required query-string\n        parameter\n\n        - missingQueryValue: The URI is missing a required query-string\n        parameter value\n\n        - invalidQuery: The query section of the URI is invalid.\n\n        - invalidBody: The request has an invalid body\n      enum:\n        - missingQueryParameter\n        - missingQueryValue\n        - invalidQuery\n        - invalidBody\n      type: string\n    Error401:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              $ref: '#/components/schemas/Error401Code'\n              description: \u003e-\n                One of the following error codes:\n\n                - missingCredentials: No credentials provided.\n\n                - invalidCredentials: Provided credentials are invalid or\n                expired\n          required:\n            - code\n          type: object\n      description:\n        Unauthorized.  (https://tools.ietf.org/html/rfc7235#section-3.1)\n    Error401Code:\n      description: |-\n        One of the following error codes:\n        - missingCredentials: No credentials provided.\n        - invalidCredentials: Provided credentials are invalid or expired\n      enum:\n        - missingCredentials\n        - invalidCredentials\n      type: string\n    Error403:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              $ref: '#/components/schemas/Error403Code'\n              description: |-\n                This code indicates that the server understood\n                the request but refuses to authorize it because\n                of one of the following error codes:\n                - accessDenied: Access denied\n                - forbiddenRequester: Forbidden requester\n                - tooManyUsers: Too many users\n          required:\n            - code\n          type: object\n      description: \u003e-\n        Forbidden. This code indicates that the server understood the request\n        but refuses to authorize it.\n        (https://tools.ietf.org/html/rfc7231#section-6.5.3)\n    Error403Code:\n      description: |-\n        This code indicates that the server understood\n        the request but refuses to authorize it because\n        of one of the following error codes:\n        - accessDenied: Access denied\n        - forbiddenRequester: Forbidden requester\n        - tooManyUsers: Too many users\n      enum:\n        - accessDenied\n        - forbiddenRequester\n        - tooManyUsers\n      type: string\n    Error404:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              description: \u003e-\n                The following error code:\n\n                - notFound: A current representation for the target resource\n                not found\n              enum:\n                - notFound\n              type: string\n          required:\n            - code\n          type: object\n      description: \u003e-\n        Resource for the requested path not found.\n        (https://tools.ietf.org/html/rfc7231#section-6.5.4)\n    Error409:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              description: \u003e-\n                The following error code:\n\n                - conflict: The client has provided a value whose semantics are\n                not appropriate for the property.\n              enum:\n                - conflict\n              type: string\n          required:\n            - code\n          type: object\n      description:\n        Conflict (https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.8)\n    Error422:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              $ref: '#/components/schemas/Error422Code'\n              description: |\n                One of the following error codes:\n                  - missingProperty: The property the Seller has expected is not present in the payload\n                  - invalidValue: The property has an incorrect value\n                  - invalidFormat: The property value does not comply with the expected value format\n                  - referenceNotFound: The object referenced by the property cannot be identified in the Seller system\n                  - unexpectedProperty: Additional property, not expected by the Seller has been provided\n                  - tooManyRecords: the number of records to be provided in the response exceeds the Seller's threshold.\n                  - otherIssue: Other problem was identified (detailed information provided in a reason)\n            propertyPath:\n              description: \u003e\n                A pointer to a particular property of the payload that caused\n                the validation issue. It is highly recommended that this\n                property should be used.\n\n                Defined using JavaScript Object Notation (JSON) Pointer\n                (https://tools.ietf.org/html/rfc6901).\n              type: string\n          required:\n            - code\n          type: object\n      description: \u003e-\n        Unprocessable entity due to a business validation problem.\n        (https://tools.ietf.org/html/rfc4918#section-11.2)\n    Error422Code:\n      description: |\n        One of the following error codes:\n          - missingProperty: The property the Seller has expected is not present in the payload\n          - invalidValue: The property has an incorrect value\n          - invalidFormat: The property value does not comply with the expected value format\n          - referenceNotFound: The object referenced by the property cannot be identified in the Seller system\n          - unexpectedProperty: Additional property, not expected by the Seller has been provided\n          - tooManyRecords: the number of records to be provided in the response exceeds the Seller's threshold.\n          - otherIssue: Other problem was identified (detailed information provided in a reason)\n      enum:\n        - missingProperty\n        - invalidValue\n        - invalidFormat\n        - referenceNotFound\n        - unexpectedProperty\n        - tooManyRecords\n        - otherIssue\n      type: string\n    Error500:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              description: \u003e-\n                The following error code:\n\n                - internalError: Internal server error - the server encountered\n                an unexpected condition that prevented it from fulfilling the\n                request.\n              enum:\n                - internalError\n              type: string\n          required:\n            - code\n          type: object\n      description: \u003e-\n        Internal Server Error.\n        (https://tools.ietf.org/html/rfc7231#section-6.6.1)\n    Error501:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              description: |-\n                The following error code:\n                - notImplemented: Method not supported by the server\n              enum:\n                - notImplemented\n              type: string\n          required:\n            - code\n          type: object\n      description: \u003e-\n        Not Implemented. Used in case Seller is not supporting an optional\n        operation (https://tools.ietf.org/html/rfc7231#section-6.6.2)\n    EventSubscription:\n      description: |\n        This resource is used to respond to notification subscriptions.\n      properties:\n        callback:\n          description: \u003e-\n            The value provided by the Buyer in `EventSubscriptionInput` during\n            notification registration\n          type: string\n        id:\n          description: \u003e-\n            An identifier of this Event Subscription assigned by the Seller\n            when a resource is created.\n          type: string\n        query:\n          description: \u003e-\n            The value provided by the Buyer in `EventSubscriptionInput` during\n            notification registration\n          type: string\n      required:\n        - callback\n        - id\n      type: object\n    EventSubscriptionInput:\n      description: This class is used to register for Notifications.\n      properties:\n        callback:\n          description: \u003e-\n            This callback value must be set to *host* property from Buyer\n            Product Order Notification API (productOrderNotification.api.yaml).\n            This property is appended with the base path and notification\n            resource path specified in that API to construct an URL to which\n            notification is sent. E.g. for \"callback\":\n            \"https://buyer.co/listenerEndpoint\", the product order state change\n            event notification will be sent to:\n            `https://buyer.co/listenerEndpoint/mefApi/sonata/productOrderNotification/v8/listener/productOrderStateChangeEvent`\n          type: string\n        query:\n          description: \u003e-\n            This attribute is used to define to which type of events to\n            register to. Example: \"query\":\"eventType =\n            productOrderStateChangeEvent\". To subscribe for more than one event\n            type, put the values separated by comma:\n            `eventType=productOrderStateChangeEvent,productOrderItemStateChangeEvent`.\n            The possible values are enumerated by 'ProductOrderEventType',\n            `CancelProductOrderEventType` in productOrderNotification.api.yaml.\n            An empty query is treated as specifying no filters - ending in\n            subscription for all event types.\n          type: string\n      required:\n        - callback\n      type: object\n    FieldedAddress:\n      allOf:\n        - $ref: '#/components/schemas/RelatedPlaceRefOrValue'\n        - properties:\n            city:\n              description: The city that the address is in\n              type: string\n            country:\n              description: Country that the address is in\n              type: string\n            geographicSubAddress:\n              $ref: '#/components/schemas/GeographicSubAddress'\n              description: \u003e-\n                Additional fields used to specify an address, as detailed as\n                possible.\n            locality:\n              description: The locality that the address is in\n              type: string\n            postcode:\n              description: \u003e-\n                Descriptor for a postal delivery area, used to speed and\n                simplify the delivery of mail (also known as zip code)\n              type: string\n            postcodeExtension:\n              description: \u003e-\n                An extension of a postal code. E.g. the part following the dash\n                in a US urban property address\n              type: string\n            stateOrProvince:\n              description: The State or Province that the address is in\n              type: string\n            streetName:\n              description: Name of the street or other street type\n              type: string\n            streetNr:\n              description: \u003e-\n                Number identifying a specific property on a public street. It\n                may be combined with streetNrLast for ranged addresses. MEF 79\n                defines it as required however as in certain countries it is\n                not used we make it optional in API.\n              type: string\n            streetNrLast:\n              description:\n                Last number in a range of street numbers allocated to a\n                property\n              type: string\n            streetNrLastSuffix:\n              description: Last street number suffix for a ranged address\n              type: string\n            streetNrSuffix:\n              description: The first street number suffix\n              type: string\n            streetSuffix:\n              description: A modifier denoting a relative direction\n              type: string\n            streetType:\n              description: \u003e-\n                The type of street (e.g., alley, avenue, boulevard, brae,\n                crescent, drive, highway, lane, terrace, parade, place, tarn,\n                way, wharf)\n              type: string\n          required:\n            - city\n            - country\n            - streetName\n          type: object\n      description: \u003e-\n        A type of Address that has a discrete field and value for each type of\n        boundary or identifier down to the lowest level of detail. For example\n        \"street number\" is one field, \"street name\" is another field, etc.\n        Reference: MEF 79 (Sn 8.9.2)\n    FormattedAddress:\n      allOf:\n        - $ref: '#/components/schemas/RelatedPlaceRefOrValue'\n        - properties:\n            addrLine1:\n              description: The first address line in a formatted address\n              type: string\n            addrLine2:\n              description: The second address line in a formatted address\n              type: string\n            city:\n              description: The city that the address is in\n              type: string\n            country:\n              description: Country that the address is in\n              type: string\n            locality:\n              description: \u003e-\n                An area of defined or undefined boundaries within a local\n                authority or other legislatively defined area, usually rural or\n                semi-rural in nature\n              type: string\n            postcode:\n              description: \u003e-\n                Descriptor for a postal delivery area, used to speed and\n                simplify the delivery of mail (also known as ZIP code)\n              type: string\n            postcodeExtension:\n              description: \u003e-\n                An extension of a postal code. E.g. the part following the dash\n                in an US urban property address\n              type: string\n            stateOrProvince:\n              description: The State or Province that the address is in\n              type: string\n          required:\n            - addrLine1\n            - city\n            - country\n          type: object\n      description: \u003e-\n        A type of Address that has discrete fields for each type of boundary or\n        identifier with the exception of street and more specific location\n        details, which are combined into a maximum of two strings based on\n        local postal addressing conventions. Reference: MEF 79 (Sn 8.9.3)\n    GeographicAddressLabel:\n      allOf:\n        - $ref: '#/components/schemas/RelatedPlaceRefOrValue'\n        - properties:\n            externalReferenceId:\n              description: A reference to an address by id\n              type: string\n            externalReferenceType:\n              description: \u003e-\n                Uniquely identifies the authority that specifies the addresses\n                reference and/or its type (if the authority specifies more than\n                one type of address). The value(s) to be used are to be agreed\n                during the onboarding. For North American providers this would\n                normally be CLLI (Common Language Location Identifier) code.\n              type: string\n          required:\n            - externalReferenceId\n            - externalReferenceType\n          type: object\n      description: \u003e-\n        A unique identifier controlled by a generally accepted independent\n        administrative authority that specifies a fixed geographical location. \n\n        Reference: MEF 79 (Sn 8.9.4)\n    GeographicAddressRef:\n      allOf:\n        - $ref: '#/components/schemas/RelatedPlaceRefOrValue'\n        - properties:\n            href:\n              description: \u003e\n                Hyperlink to the referenced GeographicAddress. Hyperlink MAY be\n                used by the Seller in responses. Hyperlink MUST be ignored by\n                the Seller in case it is provided by the Buyer in a request\n              type: string\n            id:\n              description: \u003e-\n                Identifier of the referenced Geographic Address. This\n                identifier is assigned during a successful address validation\n                request (Geographic Address Validation API)\n              type: string\n          required:\n            - id\n          type: object\n      description: \u003e\n        A reference to a Geographic Address resource available through Address\n        Validation API.\n    GeographicSiteRef:\n      allOf:\n        - $ref: '#/components/schemas/RelatedPlaceRefOrValue'\n        - properties:\n            href:\n              description: \u003e\n                Hyperlink to the referenced GeographicSite. Hyperlink MAY be\n                used by the Seller in responses. Hyperlink MUST be ignored by\n                the Seller in case it is provided by the Buyer in a request\n              type: string\n            id:\n              description: Identifier of the referenced Geographic Site.\n              type: string\n          required:\n            - id\n          type: object\n      description: \u003e\n        A reference to a Geographic Site resource available through Service\n        Site API\n    GeographicSubAddress:\n      description:\n        Additional fields used to specify an address, as detailed as possible.\n      properties:\n        buildingName:\n          description: \u003e\n            Allows for identification of places that require building name  as\n            part of addressing information\n          type: string\n        levelNumber:\n          description:\n            Used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2\n          type: string\n        levelType:\n          description: Describes level types within a building\n          type: string\n        privateStreetName:\n          description: \u003e-\n            \"Private streets internal to a property (e.g. a university) may\n            have internal names that are not recorded by the land title office\n          type: string\n        privateStreetNumber:\n          description: Private streets numbers internal to a private street\n          type: string\n        subUnit:\n          description: \u003e-\n            Representation of a MEFSubUnit It is used for describing subunit\n            within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER,\n            UNIT, WHARF.\n          items:\n            $ref: '#/components/schemas/MEFSubUnit'\n          type: array\n      type: object\n    MEFAcceptedRejectedType:\n      description: Indicator of acceptance\n      enum:\n        - accepted\n        - rejected\n      type: string\n    MEFBillingAccountRef:\n      description: A reference to the Buyer's Billing Account\n      properties:\n        id:\n          description: \u003e-\n            Identifies the buyer's billing account to which the recurring and\n            non-recurring charges for this order or order item will be billed.\n            Required if the Buyer has more than one Billing Account with the\n            Seller and for all new Product Orders.\n          type: string\n      required:\n        - id\n      type: object\n    MEFBuyerSellerType:\n      description: Indicates if the note is from Buyer or Seller.\n      enum:\n        - buyer\n        - seller\n      type: string\n    MEFCancelProductOrderRef:\n      description: A reference to a Cancel Product Order instance\n      properties:\n        href:\n          description: Hyperlink to access the Cancel Product Order\n          type: string\n        id:\n          description: A unique identifier of the Cancel Product Order\n          type: string\n      required:\n        - id\n      type: object\n    MEFChargePeriod:\n      description: Used for a recurring charge to indicate period.\n      enum:\n        - hour\n        - day\n        - week\n        - month\n        - year\n      type: string\n    MEFChargeableTaskStateType:\n      description: |\n        The states as defined by TMF622 and extended to meet MEF requirements.\n\n        | Name                       | MEF 57.2 Name    | Description|\n        | -------------------------- | ---------------- ||\n        | inProgress.assessingCharge | ACCESSING_CHARGE | The Modify Product Order Item Requested Delivery Date request results in a Charge being initiated by the Seller. The Modify Product Order Item Requested Delivery Date remains in this state until the Charge is completed or withdrawn by the Seller. All charges within a Charge that was initiated due to a Modify Product Order Item Requested Delivery Date are considered Blocking charges. If any charge is not accepted by the Buyer, the Modify Product Order Item Requested Delivery Date moves from the `inProgress.assessingCharge` state to the `done.declined` state. |\n        | acknowledged               | ACKNOWLEDGED     | A Modify Product Order Item Requested Delivery Date request has been received and has passed basic validation. The Modify Product Order Item Requested Delivery Date Identifier is assigned in the `acknowledged` state. Validation of Modify Product Order Item Requested Delivery Date attributes as applicable is completed in the `acknowledged` state.                                                                                                                                                                                                                         |\n        | done                       | COMPLETED        | A Modify Product Order Item Requested Delivery Date request has been received, passed all validations, if a Charge is associated all Charge Items have been accepted by the Buyer, and the Product Order Item Completion Date has been updated as requested.                                                                                                                                                                                                                                                                                                                        |\n        | done.declined              | DECLINED         | Blocking charges associated with a Modify Product Order Item Requested Delivery Date have been declined by the Buyer. No updates are made to the Product Order Item.                                                                                                                                                                                                                                                                                                                                                                                                                |\n        | rejected                   | REJECTED         | A Modify Product Order Item Requested Delivery Date request was submitted by the Buyer, and it has failed any validation checks the Seller performs during the `acknowledged` state. No updates are made to the referenced Product Order Item.                                                                                                                                                                          \n      enum:\n        - acknowledged\n        - done\n        - done.declined\n        - inProgress.assessingCharge\n        - rejected\n      type: string\n    MEFEndOfTermAction:\n      description: \u003e-\n        The action the Seller will take once the term expires. \n\n        Roll indicates that the Product's contract will continue on a rolling\n        basis for the duration of the Roll Interval at the end of the Term.  \n\n        Auto-disconnect indicates that the Product will be disconnected at the\n        end of the Term. \n\n        Auto-renew indicates that the Product's contract will be automatically\n        renewed for the Term Duration at the end of the Term.\n      enum:\n        - roll\n        - autoDisconnect\n        - autoRenew\n      type: string\n    MEFGeographicPoint:\n      allOf:\n        - $ref: '#/components/schemas/RelatedPlaceRefOrValue'\n        - properties:\n            spatialRef:\n              description: \u003e-\n                The spatial reference system used to determine the coordinates\n                (e.g. \"WGS84\"). The system used and the value of this field are\n                to be agreed during the onboarding process.\n              type: string\n            x:\n              description: \u003e-\n                The latitude expressed in the format specified by the\n                `spacialRef`\n              type: string\n            'y':\n              description: \u003e-\n                The longitude expressed in the format specified by the\n                `spacialRef`\n              type: string\n            z:\n              description: \u003e-\n                The elevation expressed in the format specified by the\n                `spacialRef`\n              type: string\n          required:\n            - spatialRef\n            - x\n            - 'y'\n          type: object\n      description: \u003e\n        A MEFGeographicPoint defines a geographic point through coordinates.\n        Reference: MEF 79 (Sn 8.9.5)\n    MEFItemTerm:\n      description: The term of the Item\n      properties:\n        description:\n          description: Description of the term\n          type: string\n        duration:\n          $ref: '#/components/schemas/Duration'\n          description: Duration of the term\n        endOfTermAction:\n          $ref: '#/components/schemas/MEFEndOfTermAction'\n          description: \u003e-\n            The action that needs to be taken by the Seller once the term\n            expires\n        name:\n          description: Name of the term\n          type: string\n        rollInterval:\n          $ref: '#/components/schemas/Duration'\n          description: \u003e-\n            The recurring period that the Buyer is willing to pay to the end of\n            upon disconnecting the Product after the original term has expired.\n      type: object\n    MEFModifyProductOrderItemRequestedDeliveryDate:\n      description: \u003e-\n        A response to a request initiated by the Buyer to modify the Requested\n        Completion Date or the Expedite Indicator of a Product Order Item.\n      properties:\n        creationDate:\n          description: \u003e-\n            Date that the Modify Product Order Item Requested Delivery Date was\n            created in the Seller's system and the id was assigned\n          format: date-time\n          type: string\n        expediteIndicator:\n          default: false\n          description: \u003e-\n            Indicates that expedited treatment is requested. Set by the Buyer.\n            Default Value = FALSE. If this is set to TRUE, the Buyer sets the\n            Requested Completion Date to the expedited date\n          type: boolean\n        href:\n          description: \u003e\n            Hyperlink to the modification request. Hyperlink MAY be used by the\n            Seller in responses Hyperlink MUST be ignored by the Seller in case\n            it is provided by the Buyer in a request\n          type: string\n        id:\n          description: \u003e-\n            Unique identifier for the\n            MEFModifyProductOrderItemRequestedDeliveryDate that is generated by\n            the Seller when the MEFModifyProductOrderItemRequestedDeliveryDate\n            request is moved to the 'acknowledged' state.\n          type: string\n        orderVersion:\n          description: \u003e-\n            The version of the Product Order. Set by the Buyer using Seller\n            specified Product Order Version of the Product Order that is to be\n            modified.\n          type: string\n        productOrderItem:\n          $ref: '#/components/schemas/MEFProductOrderItemRef'\n          description: A reference to the Product Order Item to be modified.\n        requestedCompletionDate:\n          description:\n            Identifies the Buyer's desired due date (requested delivery date)\n          format: date-time\n          type: string\n        state:\n          $ref: '#/components/schemas/MEFChargeableTaskStateType'\n          description: \u003e-\n            The state of the Modify Product Order Item Requested Delivery Date\n            request\n      required:\n        - creationDate\n        - id\n        - orderVersion\n        - productOrderItem\n        - state\n      type: object\n    MEFModifyProductOrderItemRequestedDeliveryDateRef:\n      description:\n        a reference to Modify Product Order Item Requested Delivery Date\n      properties:\n        href:\n          description: \u003e-\n            Hyperlink to access the Modify Product Order Item Requested\n            Delivery Date\n          type: string\n        id:\n          description: \u003e-\n            A unique identifier of the Modify Product Order Item Requested\n            Delivery Date\n          type: string\n      required:\n        - id\n      type: object\n    MEFModifyProductOrderItemRequestedDeliveryDate_Create:\n      description: \u003e-\n        A request initiated by the Buyer to modify the Requested Requested\n        Delivery Date or the Expedite Indicator of a Product Order Item.\n      properties:\n        expediteIndicator:\n          default: false\n          description: \u003e-\n            Indicates that expedited treatment is requested. Set by the Buyer.\n            Default Value = FALSE. If this is set to TRUE, the Buyer sets the\n            Requested Completion Date to the expedited date\n          type: boolean\n        orderVersion:\n          description: \u003e-\n            The version of the Product Order. Set by the Buyer using Seller\n            specified Product Order Version of the Product Order that is to be\n            modified.\n          type: string\n        productOrderItem:\n          $ref: '#/components/schemas/MEFProductOrderItemRef'\n          description: A reference to the Product Order Item to be modified.\n        requestedCompletionDate:\n          description:\n            Identifies the Buyer's desired due date (requested delivery date)\n          format: date-time\n          type: string\n      required:\n        - orderVersion\n        - productOrderItem\n      type: object\n    MEFOrderItemCoordinatedAction:\n      description: \u003e-\n        The interval after the completion of one or more related Product Order\n        Items that this Product Order Item can be started or completed\n      properties:\n        coordinatedActionDelay:\n          $ref: '#/components/schemas/Duration'\n          description:\n            The period of time for which the coordinated action is delayed.\n        coordinationDependency:\n          $ref: '#/components/schemas/MEFOrderItemCoordinationDependencyType'\n          description: \u003e-\n            A dependency between the Product Order Item and a related Product\n            Order Item\n        itemId:\n          description: \u003e-\n            Specifies Product Order Item that is to be coordinated with this\n            Product Order Item.\n          type: string\n      required:\n        - coordinatedActionDelay\n        - coordinationDependency\n        - itemId\n      type: object\n    MEFOrderItemCoordinationDependencyType:\n      description: |\n        Possible values of the Order Item Coordination Dependency\n\n        | OrderItemCoordinationDependencyType | MEF 57.2         | Description                                                                                             |\n        |-------------------------------------|------------------|---------------------------------------------------------------------------------------------------------|\n        | startToStart                        | START_TO_START   | Work on the specified Product Order Item begins at the same time as the related Product Order Item      |\n        | startToFinish                       | START_TO_FINISH  | Work on the specified Product Order Item begins upon the completion of the related Product Order Item   |\n        | finishToStart                       | FINISH_TO_START  | Work on the related Product Order Item begins after the completion of the specified Product Order Item |\n        | finishToFinish                      | FINISH_TO_FINISH | Work on the related Product Order Item completes at the same time as the specified Product Order Item  |\n      enum:\n        - startToStart\n        - startToFinish\n        - finishToStart\n        - finishToFinish\n      type: string\n    MEFPriceType:\n      description:\n        Indicates if the price is for recurring or non-recurring charges.\n      enum:\n        - recurring\n        - nonRecurring\n        - usageBased\n      type: string\n    MEFProductActionType:\n      description: |\n        Action to be performed on the Product that the Order Item refers to.\n\n        | ProductActionType | MEF 57.2   |\n        | ----------------- | ---------- |\n        | add               | INSTALL    |\n        | modify            | CHANGE     |\n        | delete            | DISCONNECT |\n      enum:\n        - add\n        - modify\n        - delete\n      type: string\n    MEFProductConfiguration:\n      description: \u003e-\n        MEFProductConfiguration is used as an extension point for MEF specific\n        product/service payload.  The `@type` attribute is used as a\n        discriminator\n      discriminator:\n        propertyName: '@type'\n      properties:\n        '@type':\n          description: \u003e-\n            The name of the type, defined in the JSON schema specified  above,\n            for the product that is the subject of the Product Order Request.\n            The named type must be a subclass of MEFProductConfiguration.\n          type: string\n      required:\n        - '@type'\n      type: object\n    MEFProductOrderCharge:\n      description: \u003e-\n        When non-recurring or updated recurring charges are identified by the\n        Seller during their processing of a Product Order, the Seller must\n        communicate these charges to the Buyer and the Buyer must respond to\n        the Seller informing the Seller if they accept or reject each charge.\n        The Seller indicates for each charge, if the charge is Blocking or\n        non-Blocking. If the Buyer rejects a Blocking Charge, the Seller will\n        cancel that Product Order Item and any related Product Order Items. If\n        the Buyer rejects a non-blocking Charge, the Seller may proceed with\n        fulfillment of the Product Order Item.\n      properties:\n        cancelProductOrder:\n          $ref: '#/components/schemas/MEFCancelProductOrderRef'\n          description: \u003e-\n            A reference to the Cancel Product Order request that is cause of\n            the Charge. Required if the Charge was caused by a Cancel Product\n            Order.\n        chargeItem:\n          items:\n            $ref: '#/components/schemas/MEFProductOrderChargeItem'\n          description: A list of Charge Items contained in the Charge\n          type: array\n        creationDate:\n          description: Date that the Charge was created by the Seller.\n          format: date-time\n          type: string\n        href:\n          description: \u003e\n            Hyperlink to the Charge. Hyperlink MAY be used by the Seller in\n            responses Hyperlink MUST be ignored by the Seller in case it is\n            provided by the Buyer in a request\n          type: string\n        id:\n          description: A unique identifier of the Charge\n          type: string\n        modifyProductOrderItemRequestedDeliveryDate:\n          $ref: \u003e-\n            #/components/schemas/MEFModifyProductOrderItemRequestedDeliveryDateRef\n          description: \u003e-\n            A reference to the Modify Product Order Item Requested Delivery\n            Date request that is cause of the Charge. Required if the Charge\n            was caused by a Modify Product Order Item Requested Delivery Date\n            request.\n        productOrder:\n          $ref: '#/components/schemas/MEFProductOrderRef'\n          description: \u003e-\n            Product Order which the Seller is communicating additional or\n            modified charges to the Buyer. This relation MUST be set when the\n            Charge applies to a Product Order. (Caused by Cancel Product Order\n            request)\n        productOrderItem:\n          $ref: '#/components/schemas/MEFProductOrderItemRef'\n          description: \u003e-\n            Product Order Item which the Seller is communicating additional or\n            modified charges to the Buyer. This relation MUST be set when the\n            Charge applies to a Product Order Item. (Identified by Seller or\n            caused by Modify Product Order Item Requested Delivery Date\n            request)\n        replacedCharge:\n          $ref: '#/components/schemas/MEFProductOrderChargeRef'\n          description: \u003e-\n            The Charge that is being replaced by this Charge (had at least one\n            accepted Charge Item when at least one of the Charge Items is being\n            replaced due to changes to the Charge Item)\n        responseDueDate:\n          description: \u003e-\n            The date that the Buyer must respond to the Seller's Charge. If\n            there is no response received by the Due Date the Seller will treat\n            all charges as declined and move them to `declinedByBuyer` status\n            and put the Charge to `completed` status.\n          format: date-time\n          type: string\n        state:\n          $ref: '#/components/schemas/MEFProductOrderChargeStateType'\n          description: The state of the Charge\n      required:\n        - chargeItem\n        - id\n        - responseDueDate\n        - state\n      type: object\n    MEFProductOrderChargeActivityType:\n      description: |\n        Possible values for the state of the Charge Activity Type\n      enum:\n        - new\n        - change\n      type: string\n    MEFProductOrderChargeItem:\n      description: A single component part of the Charge\n      properties:\n        acceptanceIndicator:\n          $ref: '#/components/schemas/MEFAcceptedRejectedType'\n          description:\n            Indicates if the Buyer has accepted the specified charge.\n        activityType:\n          $ref: '#/components/schemas/MEFProductOrderChargeActivityType'\n          description: \u003e-\n            Indicates if this is a new charge or a change to a charge provided\n            in a Quote.\n        blocking:\n          description: \u003e-\n            Indicates if rejecting the charge will cause the Seller to cancel\n            the Product Order Item, or close the Cancel Product Order or Modify\n            Product Order Item Requested Delivery Date without action.\n          type: boolean\n        chargeType:\n          $ref: '#/components/schemas/MEFPriceType'\n          description: The state of the Charge\n        description:\n          $ref: '#/components/schemas/MEFProductOrderChargeItemDescription'\n          description: A description of the cause of the Charge Item\n        id:\n          description: \u003e-\n            An identifier that is unique among all Charge Items within a Charge\n            associated with a Product Order Item\n          type: string\n        price:\n          $ref: '#/components/schemas/Price'\n          description: The value of the Price associated with the charge\n        recurringChargePeriod:\n          $ref: '#/components/schemas/MEFChargePeriod'\n          description: \u003e-\n            Used for a Charge Item with a chargeType = recurring to indicate\n            the period\n        state:\n          $ref: '#/components/schemas/MEFProductOrderChargeItemStateType'\n          description: The state of the Charge Item\n        unitOfMeasure:\n          description: \u003e-\n            Unit of Measure if price depending on it is usageBased (Gb, SMS\n            volume, etc..)\n          type: string\n      required:\n        - id\n        - chargeType\n        - description\n        - activityType\n        - blocking\n        - price\n        - state\n      type: object\n    MEFProductOrderChargeItemDescription:\n      description: A description of the cause of the Charge Item\n      enum:\n        - cancellation\n        - construction\n        - connection\n        - disconnect\n        - expedite\n      type: string\n    MEFProductOrderChargeItemStateType:\n      description: |\n        Possible values for the state of the Charge Item\n\n        | State               | Description                                                                                                                                       |\n        | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n        | `acceptedByBuyer`   | A Charge Item identified in the Charge has been accepted by the Buyer.                                                                            |\n        | `awaitingResponse`  | A Charge Item has been identified by the Seller and awaits Buyer's acceptance.                                                                    |\n        | `declinedByBuyer`   | A Charge Item identified in the Charge has been declined by the Buyer. The referenced Product Order and Product Order Items are updated.          |\n        | `withdrawnBySeller` | The Seller determines that the Charge Item is incorrect. They withdraw the Charge Item and initiate a new Charge with the required correction(s). |\n      enum:\n        - awaitingResponse\n        - acceptedByBuyer\n        - declinedByBuyer\n        - withdrawnBySeller\n      type: string\n    MEFProductOrderChargeItem_Update:\n      description: \u003e-\n        A type used to perform Buyer's response to a Charge Item - to accept or\n        reject it.\n      properties:\n        acceptanceIndicator:\n          $ref: '#/components/schemas/MEFAcceptedRejectedType'\n          description: Indicates if the Buyer has accepted the specified charge\n        id:\n          description: \u003e-\n            An identifier that is unique among Charge. Used for Charge Item\n            matching, not to be update.\n          type: string\n      required:\n        - acceptanceIndicator\n        - id\n      type: object\n    MEFProductOrderChargeRef:\n      description: a reference to a Charge instance\n      properties:\n        href:\n          description: Hyperlink to access the Charge\n          type: string\n        id:\n          description: A unique identifier of the Charge\n          type: string\n      required:\n        - id\n      type: object\n    MEFProductOrderChargeStateType:\n      description: |\n        Possible values for the state of the Charge\n\n        | State               | Description                                                                                                                               |\n        | ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |\n        | `completed`         | All Charge Items included in the Charge for a given Product Order Item have moved to either the `accepted` state or the `declined` state. |\n        | `awaitingResponse`  | A Charge has been initiated by the Buyer. The charge includes one or more charges.                                                        |\n        | `timeout`           | A response has not been received from the Buyer within the `responseDueDate`. This is treated as if the Buyer declined the Charge Items.  |\n        | `withdrawnBySeller` | The Seller determines that the Charge is incorrect. They withdraw the Charge and initiate a new Charge with the required correction(s).   |\n      enum:\n        - awaitingResponse\n        - completed\n        - timeout\n        - withdrawnBySeller\n      type: string\n    MEFProductOrderCharge_Update:\n      description: \u003e-\n        A subset of MEFProductOrderCharge that is allowed to be updated by the\n        Buyer\n      properties:\n        chargeItem:\n          items:\n            $ref: '#/components/schemas/MEFProductOrderChargeItem_Update'\n          description: A list of Charge Items contained in the Charge\n          minItems: 1\n          type: array\n      required:\n        - chargeItem\n      type: object\n    MEFProductOrderItemRef:\n      description: It's a ProductOrder item\n      properties:\n        productOrderHref:\n          description: Reference of the related ProductOrder.\n          type: string\n        productOrderId:\n          description: Unique identifier of a ProductOrder.\n          type: string\n        productOrderItemId:\n          description: Id of an Item within the Product Order\n          type: string\n      required:\n        - productOrderId\n        - productOrderItemId\n      type: object\n    MEFProductOrderItemStateChange:\n      description: \u003e-\n        Holds the State notification reasons and associated date the State\n        changed, populated by the server\n      properties:\n        changeDate:\n          description: The date on when the state was reached\n          format: date-time\n          type: string\n        changeReason:\n          description: Additional comment related to state change.\n          type: string\n        state:\n          $ref: '#/components/schemas/MEFProductOrderItemStateType'\n          description: Reached state\n      type: object\n    MEFProductOrderItemStateType:\n      description: |\n        Possible values for the state of the Product Order Item The following\n        mapping has been used between `MEFProductOrderItemStateType` and MEF\n        57.2:\n\n        | state                 | MEF 57.2 name | Description|\n        | --------------------- | ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n        | `acknowledged`        | ACKNOWLEDGED  | A Product Order Item has been received and has passed basic business validations. From the `acknowledged` state the Product Order Item is further validated and depending on the results of the validation and if other Product Order Items in the Product Order are also validated the Product Order Item moves to `inProgress`, `rejected.validated`, or `rejected.unassessed`.                                                                                                                                                                                                                                                                                                                                                                                                                |\n        | `cancelled`           | CANCELLED     | The Product Order has moved to the `pendingCancellation` state. All Product Order Items move to `cancelled`|\n        | `completed`           | COMPLETED     | The Product Order Item has completed provisioning. This is an end state                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n        | `failed`              | FAILED        | The fulfillment of a Product Order Item has failed. A Product Order Item may fail because the Buyer declined a Blocking charge identified via the Charge, the Buyer failed to respond to a Charge Item included in a Charge, or the Seller is unable to fulfill the Product Order Item. A Product Order Item moving to `failed` state results in the Product Order State being `failed` or `partial`. This is a terminal state.                                                                                                                                                                                                                                                                                                                                                                  |\n        | `held`                | HELD          | The Product Order Item cannot be progressed due to Charge the Seller awaiting a response from the Buyer on a Charge. The Seller stops work on the Product Order Item until the Charge has completed. Upon acceptance by the Buyer of all Blocking charges, the Product Order Item returns to `inProgress` state If the Buyer rejects a Blocking charge, the Product Order Item moves to the `failed` state.                                                                                                                                                                                                                                                                                                                                                                                      |\n        | `inProgress`          | IN_PROGRESS   | The Product Order Item has been successfully validated and fulfillment has started. If the Seller's system links validation between Product Order Items in a Product Order, a Product Order Item in this state also indicates that the other Product Order Items passed validation.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n        | `pending`             | PENDING       | The Product Order Item cannot be progressed due to the Seller assessing a Cancel Product Order or Modify Product Order Item Requested Delivery Date request. The Seller stops work on the Product Order Item until either the Cancel Product Order has been accepted and the Product Order state moves to `pendingCancellation` and the Product Order Item state moves to `cancelled`, the Cancel Product Order has been rejected and the Product Order Item State moves to `inProgress`, the Modify Product Order Item Requested Delivery Date has been accepted and the Product Order Item State moves to `inProgress`, or the Modify Product Order Item Requested Delivery Date moves to `done.declined` and the Product Order Item state moves to `inProgress` with original delivery dates. |\n        | `rejected`            | REJECTED      | A Product Order Item was submitted, and it has failed at least one validation checks the Seller performs during the `acknowledged` state|\n        | `rejected.unassessed` | UNASSESSED    | A Product Order was submitted and all validation checks the Seller performs during the `acknowledged` state have not been completed, but another Product Order Item in the Product Order has moved to the `rejected` state|\n        | `rejected.validated`  | VALIDATED     | A Product Order was submitted, and it has passed all validation checks the Seller performs during the `acknowledged` state, but another Product Order Item in the Product Order has moved to the `rejected` state|\n      enum:\n        - acknowledged\n        - cancelled\n        - completed\n        - failed\n        - held\n        - inProgress\n        - pending\n        - rejected\n        - rejected.validated\n        - rejected.unassessed\n      type: string\n    MEFProductOrderItem_Common:\n      description: \u003e\n        An identified part of the order. A product order is decomposed into one\n        or more order items.\n      properties:\n        action:\n          $ref: '#/components/schemas/MEFProductActionType'\n          description: \u003e-\n            Action to be applied to the product referred by this Product Order\n            Item\n        agreementName:\n          description: \u003e-\n            The name of the Agreement which is referenced for the Product Order\n            Item.\n          type: string\n        billingAccount:\n          $ref: '#/components/schemas/MEFBillingAccountRef'\n          description: A reference to the Buyer's Billing Account\n        coordinatedAction:\n          description: \u003e-\n            The interval after the completion of one or more related Product\n            Order Items that this Product Order Item can be started or\n            completed\n          items:\n            $ref: '#/components/schemas/MEFOrderItemCoordinatedAction'\n          type: array\n        endCustomerName:\n          description: \u003e-\n            The name of the End Customer, either a business name or an\n            individual name depending on the end customer.\n          type: string\n        expediteIndicator:\n          default: false\n          description: \u003e-\n            Indicates that expedited treatment is requested. Set by the Buyer.\n            If this is set to TRUE, the Buyer sets the Requested Completion\n            Date to the expedited date. See MEF 57.2 section 7.3 for a\n            description of the interaction between the Buyer and the Seller.\n          type: boolean\n        id:\n          description: \u003e\n            A Buyer provided identifier to identify Product Order Items and to\n            be able to relate them to one another. This is set by the Buyer and\n            is unique within the Product Order. Examples of Reference\n            Identifier could be 1, 2, 3 or A, B, C. The Reference Identifier\n            can be reused in multiple Product Orders to identify a Product\n            Order Item within that Product Order.\n          type: string\n        note:\n          description: \u003e\n            Free form text to clarify or explain the Product Order Item. Only\n            new notes can be entered. The Buyer and Seller cannot modify an\n            existing Note. The Buyer creates a Note when creating the Product\n            Order Item or when updating it. The Seller may add notes at any\n            time.\n          items:\n            $ref: '#/components/schemas/Note'\n          type: array\n        product:\n          $ref: '#/components/schemas/MEFProductRefOrValueOrder'\n          description: \u003e-\n            The Buyer's existing Product for which the Product Order is being\n            requested. Set by the Buyer if the Product Action is modify or\n            delete.\n        productOfferingQualificationItem:\n          $ref: '#/components/schemas/ProductOfferingQualificationItemRef'\n          description: \u003e-\n            The POQ and POQ Item associated to this Product Order Item. The\n            relation may be required by the Seller. In that case, this is a\n            mandatory field. If the Seller does not require the POQ Item\n            reference, then this is an optional attribute.\n        productOrderItemRelationship:\n          description:\n            The relationship between Product Order Items in the Product Order.\n          items:\n            $ref: '#/components/schemas/OrderItemRelationship'\n          type: array\n        quoteItem:\n          $ref: '#/components/schemas/MEFQuoteItemRef'\n          description: \u003e-\n            The Quote Item associated to this Product Order Item. The Quote\n            Item reference may be required by the Seller. In that case, this is\n            a mandatory field. If the Seller does not require the Quote, then\n            this is an optional attribute.\n        relatedBuyerPON:\n          description: \u003e-\n            Identifies the Buyer Purchase Order Number that is related to this\n            Product Order.\n          type: string\n        relatedContactInformation:\n          description: \u003e-\n            Contact information of an individual or organization playing a role\n            for this Order Item.\n\n            The rule for mapping a represented attribute\n\n            value to a `role` is to use the _lowerCamelCase_ pattern e.g.\n\n            - Buyer Product Order Item Contact:\n            `role=buyerProductOrderItemContact`\n\n            - Buyer Implementation Contact: `role=buyerImplementationContact`\n\n            - Buyer Technical Contact: `role=buyerTechnicalContact`\n\n            - Buyer Billing Contact: `role=buyerBillingContact`\n\n            - Buyer Fault Contact: `role=buyerFaultContact`\n\n            - Seller Fault Contact: `role=sellerFaultContact`\n\n            - Buyer GDPR Contact: `role=buyerGDPRContact`\n\n            - Seller GDPR Contact: `role=sellerGDPRContact`\n          items:\n            $ref: '#/components/schemas/RelatedContactInformation'\n          type: array\n        requestedCompletionDate:\n          description:\n            Identifies the Buyer's desired due date (requested delivery date)\n          format: date-time\n          type: string\n        requestedItemTerm:\n          $ref: '#/components/schemas/MEFItemTerm'\n          description: Requested term of the Product Order Item\n        tspRestorationPriority:\n          description: \u003e\n            Within the United States, indicates the provisioning and\n            restoration priority as defined under the TSP Service Vendor\n            Handbook. The valid values are defined in ATIS OBF document:\n            ATIS-0404001.\n          type: string\n      required:\n        - action\n        - id\n      type: object\n    MEFProductOrderItem_Create:\n      allOf:\n        - $ref: '#/components/schemas/MEFProductOrderItem_Common'\n        - description: \u003e\n            An identified part of the order. A product order is decomposed into\n            one or more order items.\n          type: object\n    MEFProductOrderItem_Update:\n      description: |\n        An updatable representation of the Product Order Item.\n      properties:\n        endCustomerName:\n          description: \u003e-\n            The name of the End Customer, either a business name or an\n            individual name depending on the end customer.\n          type: string\n        id:\n          description: \u003e\n            Identifier of the Item. This is to address the Item to be updated\n            within the Product Order. The id itself cannot be updated.\n          type: string\n        note:\n          description: \u003e\n            Free form text to clarify or explain the Product Order Item. Only\n            new notes can be entered. The Buyer and Seller cannot modify an\n            existing Note. The Buyer creates a Note when creating the Product\n            Order Item or when updating it. The Seller may add notes at any\n            time.\n          items:\n            $ref: '#/components/schemas/Note'\n          type: array\n        relatedBuyerPON:\n          description: \u003e-\n            This information is not used by the Seller and is maintained for\n            the convenience of the Buyer (e.g. search purposes).\n          type: string\n        relatedContactInformation:\n          description: \u003e-\n            Contact information of an individual or organization playing a role\n            for this Order Item. Buyer may only update the Buyer-related\n            contacts.\n\n            The rule for mapping a represented attribute\n\n            value to a `role` is to use the _lowerCamelCase_ pattern e.g.\n\n            - Buyer Product Order Item Contact:\n            `role=buyerProductOrderItemContact`\n\n            - Buyer Implementation Contact: `role=buyerImplementationContact`\n\n            - Buyer Technical Contact: `role=buyerTechnicalContact`\n\n            - Buyer Fault Contact: `role=buyerFaultContact`\n\n            - Buyer GDPR Contact: `role=buyerGDPRContact`\n          items:\n            $ref: '#/components/schemas/RelatedContactInformation'\n          type: array\n      required:\n        - id\n      type: object\n    MEFProductOrderRef:\n      description: Holds the MEF Product Order reference\n      properties:\n        productOrderHref:\n          description: Hyperlink to access the order\n          type: string\n        productOrderId:\n          description: \u003e-\n            Unique (within the ordering domain) identifier for the order that\n            is generated by the seller when the order is initially accepted.\n          type: string\n      required:\n        - productOrderId\n      type: object\n    MEFProductOrderStateChange:\n      description: \u003e-\n        Holds the State notification reasons and associated date the State\n        changed, populated by the server\n      properties:\n        changeDate:\n          description: The date on when the state was reached\n          format: date-time\n          type: string\n        changeReason:\n          description: Additional comment related to state change\n          type: string\n        state:\n          $ref: '#/components/schemas/MEFProductOrderStateType'\n          description: Reached state\n      type: object\n    MEFProductOrderStateType:\n      description: |\n        Possible values for the state of the Product Order The following\n        mapping has been used between `MEFProductOrderStateType` and MEF 57.2:\n\n        | state                           | MEF 57.2 name          | Description|\n        | ------------------------------- | ---------------------- ||\n        | `acknowledged`                  | ACKNOWLEDGED           | A Product Order has been received by the Seller and has passed basic validation. A `productOrder.id` is assigned in the `acknowledged` state and a response is returned to the Buyer. The Product Order remains in the `acknowledged` state while validations of Product Order and Product Order Item(s) attributes as applicable is completed. If the Product Order and Product Order Item attributes are validated the Product Order moves to the `inProgress` state. If not validated, the Product Order moves to the `rejected` state.                                                                                                                                                                                                                |\n        | `assessingCancellation`         | ASSESSING_CANCELLATION | A request has been made by the Buyer to cancel the Product Order and the Product Order is currently being assessed to determine whether it can be cancelled. If there are any charges associated with the Buyer's Cancel Request, the Seller initiates a Charge which communicates the related charges to the Buyer, the Product Order remains in the `assessingCancellation` state until the Charge is completed or withdrawn by the Seller. Once the cancellation assessment is complete, the Product Order moves to the `pendingCancellation` state.                                                                                                                                                                                                   |\n        | `held.assessingCharge`          | ASSESSING_CHARGE       | A Charge has been initiated by the Seller that is not the result of a Modify Product Order Item Requested Delivery Date or Cancel Product Order request and the Seller is awaiting a Buyer response to the Charge. If a blocking or non-blocking charge is accepted by the Buyer, the Product Order moves to `inProgress`. If a non-blocking charge is declined by the Buyer, the Product Order moves to `inProgress`. If a blocking charge is declined by the Buyer and there are no unrelated Product Order Items in the Product Order, the Product Order moves to the FAILED state. If a blocking charge is declined by the Buyer and there are unrelated Product Order Items in the Product Order, the Product Order moves to the `inProgress` state. |\n        | `pending.assessingModification` | ASSESSING_MODIFICATION | A request has been made by the Buyer to modify either the `expediteIndicator` or the `requestedCompletionDate` of a Product Order Item. The Product Order Item is currently being assessed to determine whether the Modify Product Order Item Requested Delivery Date is valid. If there is a charge associated with the Modify Product Order Item Requested Delivery Date, the Product Order remains in the `pending.assessingModification` state until the Charge is completed or withdrawn by the Seller. Once the Buyer's request has been validated and any associated Charges completed, the Product Order returns to the `inProgress` state.                                                                                                       |\n        | `cancelled`                     | CANCELLED              | The Product Order has been successfully cancelled. This is a terminal state|\n        | `pendingCancellation`           | CANCELLING             | The Buyer's Cancel Request has been assessed and it has been determined that it is feasible to proceed with the cancellation. This state can also result from a Seller cancelling the Product Order within their systems without a request from the Buyer.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |\n        | `completed`                     | COMPLETED              | The Product Order has completed fulfillment and the Product is now active. This is a terminal state|\n        | `failed`                        | FAILED                 | All Product Order Items have failed which results in the entire Product Order failing. This is a terminal state|\n        | `inProgress`                    | IN_PROGRESS            | The Product Order has been successfully validated, and fulfillment has started|\n        | `partial`                       | PARTIAL                | Fulfillment of at least one Product Order Item has failed, and fulfillment of at least one Product Order Item has been successful. This is a terminal state|\n        | `rejected`                      | REJECTED               | A Product Order was submitted, and it has failed at least one of the validation checks the Seller performs after it reached the `acknowledged` state|\n      enum:\n        - acknowledged\n        - assessingCancellation\n        - cancelled\n        - completed\n        - failed\n        - held.assessingCharge\n        - inProgress\n        - partial\n        - pending.assessingModification\n        - pendingCancellation\n        - rejected\n      type: string\n    MEFProductRefOrValueOrder:\n      description: \u003e-\n        Used by the Buyer to point to existing and/or describe the desired\n        shape of the product. In case of `add` action - only\n        `productConfiguration` MUST be specified. For `modify` action - both\n        `id` and `productConfiguration` MUST be provided to point which product\n        instance to update and to what state. In `delete` only the `id` must be\n        provided.\n      properties:\n        href:\n          description: \u003e-\n            Hyperlink to the referenced Product. Hyperlink MAY be used by the\n            Seller in responses. Hyperlink MUST be ignored by the Seller in\n            case it is provided by the Buyer in a request.\n          type: string\n        id:\n          description: \u003e-\n            The unique identifier of an in-service Product that is the ordering\n            subject. This field MUST be populated if an item `action` is either\n            `modify` or `delete`. This field MUST NOT be populated if an item\n            `action` is `add`.\n          type: string\n        place:\n          description: \u003e-\n            The relationships between this Product Order Item and one or more\n            Places as defined in the Product Specification.\n          items:\n            $ref: '#/components/schemas/RelatedPlaceRefOrValue'\n          type: array\n        productConfiguration:\n          $ref: '#/components/schemas/MEFProductConfiguration'\n          description: \u003e-\n            MEFProductConfiguration is used to specify the MEF specific product\n            payload. This field MUST be populated if an item `action` is `add`\n            or `modify`. It MUST NOT be populated when an item `action` is\n            `delete`. The @type is used as a discriminator.\n        productOffering:\n          $ref: '#/components/schemas/ProductOfferingRef'\n          description: \u003e-\n            A particular Product Offering defines the technical and commercial\n            attributes and behaviors of a Product.\n        productRelationship:\n          description: \u003e-\n            A list of references to existing products that are related to the\n            ordered Product.\n          items:\n            $ref: '#/components/schemas/ProductRelationship'\n          type: array\n      type: object\n    MEFQuoteItemRef:\n      description: It's a Quote item that has been executed previously.\n      properties:\n        id:\n          description: Id of an Quote Item\n          type: string\n        quoteHref:\n          description: Reference of the related Quote.\n          type: string\n        quoteId:\n          description: Unique identifier of a Quote.\n          type: string\n      required:\n        - id\n        - quoteId\n      type: object\n    MEFSubUnit:\n      description: Allows for sub unit identification\n      properties:\n        subUnitNumber:\n          description: \u003e-\n            The discriminator used for the subunit, often just a simple number\n            but may also be a range.\n          type: string\n        subUnitType:\n          description: \u003e-\n            The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER,\n            UNIT, WHARF.\n          type: string\n      required:\n        - subUnitNumber\n        - subUnitType\n      type: object\n    Money:\n      description: A base / value business entity used to represent money\n      properties:\n        unit:\n          description:\n            Currency (ISO4217 norm uses 3 letters to define the currency)\n          type: string\n        value:\n          description: A positive floating point number\n          format: float\n          type: number\n      type: object\n    Note:\n      description: \u003e-\n        Extra information about a given entity. Only useful in processes\n        involving human interaction. Not applicable for the automated process.\n      properties:\n        author:\n          description: Author of the note\n          type: string\n        date:\n          description: Date the Note was created\n          format: date-time\n          type: string\n        id:\n          description: \u003e-\n            Identifier of the note within its containing entity (may or may not\n            be globally unique, depending on provider implementation)\n          type: string\n        source:\n          $ref: '#/components/schemas/MEFBuyerSellerType'\n          description: Indicates if the note is from Buyer or Seller\n        text:\n          description: Text of the note\n          type: string\n      required:\n        - author\n        - date\n        - id\n        - source\n        - text\n      type: object\n    OrderItemRelationship:\n      description:\n        The relationship between Product Order Items in the Product Order.\n      properties:\n        id:\n          description:\n            Id of the related Order Item (must be in the same Order).\n          type: string\n        relationshipType:\n          description: \u003e-\n            Specifies the nature of the relationship to the related Product\n            Order Items. A string that is one of the relationship types\n            specified in the Product Specification.\n          type: string\n      required:\n        - id\n        - relationshipType\n      type: object\n    Price:\n      description: \u003e-\n        Provides all amounts (tax included, duty free, tax rate), used currency\n        and percentage to apply for Price Alteration.\n      properties:\n        dutyFreeAmount:\n          $ref: '#/components/schemas/Money'\n          description:\n            All taxes excluded amount (expressed in the given currency)\n        taxIncludedAmount:\n          $ref: '#/components/schemas/Money'\n          description:\n            All taxes included amount (expressed in the given currency)\n        taxRate:\n          description:\n            'Price Tax Rate. Unit: [%]. E.g. value 16 stand for 16% tax.'\n          format: float\n          type: number\n      type: object\n    ProductOfferingQualificationItemRef:\n      description: \u003e-\n        It's a productOfferingQualification item that has been executed\n        previously.\n      properties:\n        alternateProductOfferingProposalId:\n          description: \u003e-\n            A unique identifier for this Alternate Product Proposal assigned by\n            the Seller.\n          type: string\n        id:\n          description: Id of an item of a product offering qualification\n          type: string\n        productOfferingQualificationHref:\n          description:\n            Reference to a related Product Offering Qualification resource.\n          type: string\n        productOfferingQualificationId:\n          description: \u003e-\n            Unique identifier of related Product Offering Qualification\n            resource.\n          type: string\n      required:\n        - id\n        - productOfferingQualificationId\n      type: object\n    ProductOfferingRef:\n      description: \u003e-\n        A reference to a Product Offering offered by the Seller to the\n        Buyer.  A Product Offering contains the commercial and technical\n        details of a Product sold by a particular Seller. A Product Offering\n        defines all of the commercial terms and, through association with a\n        particular Product Specification, defines all the technical attributes\n        and behaviors of the Product. A Product Offering may constrain the\n        allowable set of configurable technical attributes and/or behaviors\n        specified in the associated Product Specification.\n      properties:\n        href:\n          description: \u003e\n            Hyperlink to a Product Offering in Sellers catalog. In case Seller\n            is not providing a catalog capabilities this field is not\n            used.  The catalog API definition is provided by the Seller to the\n            Buyer during onboarding Hyperlink MAY be used by the Seller in\n            responses  \n            Hyperlink MUST be ignored by the Seller in case it is provided by\n            the Buyer in a request\n          type: string\n        id:\n          description: \u003e-\n            id of a Product Offering. It is assigned by the Seller. The Buyer\n            and the Seller exchange information about offerings' ids during the\n            onboarding process.\n          type: string\n      required:\n        - id\n      type: object\n    ProductOrder:\n      allOf:\n        - $ref: '#/components/schemas/ProductOrder_Common'\n        - description: \u003e-\n            A Product Order is a type of order which can be used to place an\n            order between a customer and a service provider or between a\n            service provider and a partner and vice versa\n          properties:\n            cancellationCharge:\n              description: Charges associated with cancelling the Product Order\n              items:\n                $ref: '#/components/schemas/MEFProductOrderChargeRef'\n              type: array\n            cancellationDate:\n              description: \u003e-\n                Identifies the date the Seller cancelled the Order. Set by\n                Seller when the Order is moved to the cancelled state.\n              format: date-time\n              type: string\n            cancellationReason:\n              description: \u003e-\n                An optional free-form text field for the Seller to provide\n                additional information regarding the reason for the\n                cancellation.\n              type: string\n            completionDate:\n              description: \u003e-\n                Identifies the date that all Product Order Items within the\n                Order have reached a terminal state. No further action is\n                permitted on the Product Order.\n              format: date-time\n              type: string\n            expectedCompletionDate:\n              description: \u003e\n                Identifies the date the Seller expects to complete the Product\n                Order.\n              format: date-time\n              type: string\n            href:\n              description: Hyperlink to access the order\n              type: string\n            id:\n              description: \u003e-\n                Unique identifier for the Product Order that is generated by\n                the Seller when the Product Order is initially accepted via an\n                API.\n              type: string\n            orderDate:\n              description: \u003e-\n                Date when the Product Order was created in the Seller's system\n                and a Product Order Identifier was assigned\n              format: date-time\n              type: string\n            orderVersion:\n              description: The version of the Product Order, set by the Seller\n              type: string\n            productOrderItem:\n              description: |\n                Items contained in the Product Order.\n              items:\n                $ref: '#/components/schemas/ProductOrderItem'\n              minItems: 1\n              type: array\n            state:\n              $ref: '#/components/schemas/MEFProductOrderStateType'\n              description: \u003e-\n                The states as defined by TMF622 and extended to meet MEF\n                requirements. These states are used to convey the Product Order\n                status during the lifecycle of the Product Order.\n            stateChange:\n              description: State change for the Product Order\n              items:\n                $ref: '#/components/schemas/MEFProductOrderStateChange'\n              type: array\n          required:\n            - id\n            - orderDate\n            - productOrderItem\n            - state\n          type: object\n    ProductOrderItem:\n      allOf:\n        - $ref: '#/components/schemas/MEFProductOrderItem_Common'\n        - description: \u003e\n            An identified part of the order. A product order is decomposed into\n            one or more order items.\n          properties:\n            charge:\n              description: The Charges associated to this Product Order Item\n              items:\n                $ref: '#/components/schemas/MEFProductOrderChargeRef'\n              type: array\n            completionDate:\n              description: \u003e-\n                Identifies the date the Seller completed the Product Order\n                Item. Set by Seller when all Product Order Items have reached a\n                terminal state. No further action is permitted on the Product\n                Order after this state is reached.\n              format: date-time\n              type: string\n            expectedCompletionDate:\n              description: \u003e\n                Identifies the date the Seller expects to complete the Product\n                Order Item.\n              format: date-time\n              type: string\n            expediteAcceptedIndicator:\n              default: false\n              description: \u003e-\n                Indicates if the Seller has accepted the Buyer's Expedite\n                request. See MEF 57.2 section 7.3 for a description of the\n                interaction between the Buyer and Seller. If this is set to\n                true, the Seller provides the costs to expedite the Product\n                Order in the charge attribute\n              type: boolean\n            itemTerm:\n              items:\n                $ref: '#/components/schemas/MEFItemTerm'\n              description: Term of the Product Order Item\n              maxItems: 1\n              type: array\n            state:\n              $ref: '#/components/schemas/MEFProductOrderItemStateType'\n              description: State of the Product Order Item\n            stateChange:\n              description: State change for the Product Order Item\n              items:\n                $ref: '#/components/schemas/MEFProductOrderItemStateChange'\n              type: array\n            terminationError:\n              description: \u003e-\n                When the Seller cannot process the request, the Seller returns\n                a text-based list of reasons here.\n              items:\n                $ref: '#/components/schemas/TerminationError'\n              type: array\n          type: object\n    ProductOrder_Common:\n      description: \u003e-\n        A Product Order is a type of order which can be used to place an\n        order between a customer and a service provider or between a service\n        provider and a partner and vice versa,\n      properties:\n        externalId:\n          description:\n            An identifier for this order within the Buyer's enterprise.\n          type: string\n        note:\n          items:\n            $ref: '#/components/schemas/Note'\n          type: array\n          description: \u003e\n            Free form text to clarify or explain the Product Order. Only new\n            notes can be entered. The Buyer and Seller cannot modify an\n            existing Note. The Buyer creates a Note when creating the Product\n            Order or when updating it. The Seller may add notes at any time.\n        projectId:\n          description: \u003e-\n            An identifier that is used to group Product Orders that is\n            important to the Buyer. A projectId can be used to relate multiple\n            Product Orders together.\n          type: string\n        relatedContactInformation:\n          description: \u003e-\n            Contact information of an individual or organization playing a role\n            in this context.\n\n            (e.g. Product Order Contact: role=productOrderContact;\n\n            Seller Contact: role=sellerContact)\n\n            Providing the Product Order Contact in the request is mandatory.\n          items:\n            $ref: '#/components/schemas/RelatedContactInformation'\n          minItems: 1\n          type: array\n        requestedCompletionDate:\n          description:\n            This is requested date to get this Product Order completed\n          format: date-time\n          type: string\n      required:\n        - relatedContactInformation\n      type: object\n    ProductOrder_Create:\n      allOf:\n        - $ref: '#/components/schemas/ProductOrder_Common'\n        - description: \u003e\n            A Product Order is a type of order which  can  be used to place an\n            order between a customer and a service provider or between a\n            service provider and a partner and vice versa, Skipped properties:\n            id,href,completionDate,orderDate,state,stateChange,cancellationDate,cancellationReason\n          properties:\n            productOrderItem:\n              description: |\n                Items contained in the Product Order.\n              items:\n                $ref: '#/components/schemas/MEFProductOrderItem_Create'\n              minItems: 1\n              type: array\n          required:\n            - productOrderItem\n          type: object\n    ProductOrder_Find:\n      description: \u003e-\n        Structure to define GET without id response. A list of productOrder\n        matching request criteria. Provides Product order summary view.\n      properties:\n        cancellationDate:\n          description: \u003e-\n            Identifies the date the Seller cancelled the Order. Set by Seller\n            when the Order is moved to the cancelled state.\n          format: date-time\n          type: string\n        completionDate:\n          description: \u003e-\n            Identifies the date that all Product Order Items within the Order\n            have reached a terminal state. No further action is permitted on\n            the Product Order after this notification.\n          format: date-time\n          type: string\n        externalId:\n          description: \u003e-\n            ID given by the consumer and only understandable by him (to\n            facilitate his searches afterward).\n          type: string\n        id:\n          description: \u003e-\n            Unique identifier for the order that is generated by the Seller\n            when the order is initially accepted via an API.\n          type: string\n        orderDate:\n          description: Date when the Product Order was created\n          format: date-time\n          type: string\n        orderVersion:\n          description: The version of the Product Order, assigned by the Seller\n          type: string\n        projectId:\n          description: \u003e-\n            An identifier that is used to group Product Orders that is\n            important to the Buyer. A projectId can be used to relate multiple\n            Product Orders together.\n          type: string\n        requestedCompletionDate:\n          description:\n            This is requested date to get this Product Order completed\n          format: date-time\n          type: string\n        state:\n          $ref: '#/components/schemas/MEFProductOrderStateType'\n          description: \u003e-\n            The states as defined by TMF622 and extended to meet MEF\n            requirements. These states are used to convey the Product Order\n            status during the lifecycle of the Product Order.\n      required:\n        - id\n        - orderDate\n        - orderVersion\n        - state\n      type: object\n    ProductOrder_Update:\n      description:\n        A request initiated by the Buyer to update Product Order and/or Product\n      properties:\n        externalId:\n          description:\n            An identifier for this Product Order within the Buyer's enterprise.\n          type: string\n        note:\n          description: \u003e\n            Free form text to clarify or explain the Product Order. Only new\n            notes can be entered. The Buyer and Seller cannot modify an\n            existing Note. The Buyer creates a Note when creating the Product\n            Order or when updating it. The Seller may add notes at any time.\n          items:\n            $ref: '#/components/schemas/Note'\n          type: array\n        orderVersion:\n          description: \u003e-\n            The version of the Product Order. The `orderVersion` attribute\n            cannot be updated. It is used only to identify the version of the\n            Product Order that the Buyer wants to update. If there is a\n            mismatch with the Seller's system, the Seller will reject the\n            request with an error response.\n          type: string\n        productOrderItem:\n          description: |\n            Order Item attributes that may be updated\n          items:\n            $ref: '#/components/schemas/MEFProductOrderItem_Update'\n          type: array\n        projectId:\n          description: \u003e-\n            An identifier that is used to group Product Orders that is\n            important to the Buyer. A projectId can be used to relate multiple\n            Product Orders together.\n          type: string\n        relatedContactInformation:\n          description: \u003e\n            Contact information of an individual or organization playing a role\n            in this context. The Buyer is allowed to update the Product Order\n            Contact: role=productOrderContact;\n          items:\n            $ref: '#/components/schemas/RelatedContactInformation'\n          minItems: 1\n          type: array\n      required:\n        - orderVersion\n      type: object\n    ProductRelationship:\n      description: \u003e-\n        A relationship to an existing Product. The requirements for usage for\n        given Product are described in the Product Specification.\n      properties:\n        href:\n          description: \u003e-\n            Hyperlink to the product in Seller's inventory that is referenced\n            Hyperlink MAY be used when providing a response by the Seller\n            Hyperlink MUST be ignored by the Seller in case it is provided by\n            the Buyer in a request\n          type: string\n        id:\n          description: unique identifier of the related Product\n          type: string\n        relationshipType:\n          description: \u003e\n            Specifies the type (nature) of the relationship to the related\n            Product. The nature of required relationships varies for Products\n            of different types. For example, a UNI or ENNI Product may not have\n            any relationships, but an Access E-Line may have two mandatory\n            relationships (related to the UNI on one end and the ENNI on the\n            other). More complex Products such as multipoint IP or Firewall\n            Products may have more complex relationships. As a result, the\n            allowed and mandatory `relationshipType` values are defined in the\n            Product Specification.\n          type: string\n      required:\n        - id\n        - relationshipType\n      type: object\n    RelatedContactInformation:\n      description: |\n        Contact information of an individual or organization playing a role for\n        this Order Item. The rule for mapping a represented attribute value to a\n        `role` is to use the _lowerCamelCase_ pattern e.g. \n        - Buyer Order Item Contact: `role=buyerOrderItemContact` \n        - Buyer Implementation Contact: `role=buyerImplementationContact` \n        - Buyer Technical Contact: `role=buyerTechnicalContact`\n      properties:\n        emailAddress:\n          description: Email address\n          type: string\n        name:\n          description: Name of the contact\n          type: string\n        number:\n          description: Phone number\n          type: string\n        numberExtension:\n          description: Phone number extension\n          type: string\n        organization:\n          description: The organization or company that the contact belongs to\n          type: string\n        postalAddress:\n          $ref: '#/components/schemas/FieldedAddress'\n          description: \u003e-\n            Identifies the postal address of the person or office to be\n            contacted.\n        role:\n          description: A role the party plays in a given context.\n          type: string\n      required:\n        - emailAddress\n        - name\n        - number\n        - role\n      type: object\n    RelatedPlaceRefOrValue:\n      description:\n        Place defines the places where the product order must be done.\n      discriminator:\n        mapping:\n          FieldedAddress: '#/components/schemas/FieldedAddress'\n          FormattedAddress: '#/components/schemas/FormattedAddress'\n          GeographicAddressLabel: '#/components/schemas/GeographicAddressLabel'\n          GeographicAddressRef: '#/components/schemas/GeographicAddressRef'\n          GeographicSiteRef: '#/components/schemas/GeographicSiteRef'\n          MEFGeographicPoint: '#/components/schemas/MEFGeographicPoint'\n        propertyName: '@type'\n      properties:\n        '@schemaLocation':\n          description: \u003e-\n            A URI to a JSON-Schema file that defines additional attributes and\n            relationships. May be used to define additional related place\n            types. Usage of this attribute must be agreed upon between Buyer\n            and Seller.\n          format: uri\n          type: string\n        '@type':\n          description: \u003e\n            This field is used as a discriminator and is used between different\n            place representations. This type might discriminate for additional\n            related place as defined in '@schemaLocation'.\n          type: string\n        role:\n          description: Role of this place\n          type: string\n      required:\n        - '@type'\n        - role\n      type: object\n    TerminationError:\n      description: \u003e-\n        This indicates an error that caused an Item to be terminated. The code\n        and propertyPath should be used like in Error422.\n      properties:\n        code:\n          $ref: '#/components/schemas/Error422Code'\n          description: |\n            One of the following error codes:\n              - missingProperty: The property the Seller has expected is not present in the payload\n              - invalidValue: The property has an incorrect value\n              - invalidFormat: The property value does not comply with the expected value format\n              - referenceNotFound: The object referenced by the property cannot be identified in the Seller system\n              - unexpectedProperty: Additional property, not expected by the Seller has been provided\n              - tooManyRecords: the number of records to be provided in the response exceeds the Seller's threshold.\n              - otherIssue: Other problem was identified (detailed information provided in a reason)\n        propertyPath:\n          description: \u003e\n            A pointer to a particular property of the payload that caused the\n            validation issue. It is highly recommended that this property\n            should be used.\n\n            Defined using JavaScript Object Notation (JSON) Pointer\n            (https://tools.ietf.org/html/rfc6901).\n          type: string\n        value:\n          description: Text to describe the reason of the termination.\n          type: string\n      type: object\n    TimeUnit:\n      description: |\n        Represents a unit of time.\n        Reference: MEF 57.2 (Sn 9.22)\n      enum:\n        - calendarMonths\n        - calendarDays\n        - calendarHours\n        - calendarMinutes\n        - businessDays\n        - businessHours\n        - businessMinutes\n      type: string\n",
			"canonicalURL": "/github.com/MEF-GIT/MEF-LSO-Sonata-SDK@c99d5bce21fc77e2ecfba6f8d6b2111361380b86/-/blob/productApi/order/productOrderManagement.api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/MEF-GIT/MEF-LSO-Sonata-SDK/blob/c99d5bce21fc77e2ecfba6f8d6b2111361380b86/productApi/order/productOrderManagement.api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}