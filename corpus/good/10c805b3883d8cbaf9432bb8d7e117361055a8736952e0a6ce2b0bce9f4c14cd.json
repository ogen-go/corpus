{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "nexmo.com-messages-olympus-0.3.3-openapi.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/nexmo.com-messages-olympus-0.3.3-openapi.yaml",
			"byteSize": 29735,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://api.nexmo.com/v0.1\ninfo:\n  contact:\n    email: devrel@nexmo.com\n    name: Nexmo DevRel\n    url: https://developer.nexmo.com/\n  description: The Messaging API is a new API that consolidates all messaging channels. It\n    encapsulates a user (developer) from having to use multiple APIs to interact\n    with our various channels such as SMS, MMS, Viber, Facebook Messenger, etc.\n    The API normalises information across all channels to abstracted to, from\n    and content. This API is currently in Beta.\n  title: Messages\n  version: 0.3.3\n  x-label: Beta\n  x-origin:\n    - converter:\n        url: https://github.com/lucybot/api-spec-converter\n        version: 2.7.31\n      format: openapi\n      url: https://raw.githubusercontent.com/nexmo/api-specification/master/definitions/messages-olympus.yml\n      version: \"3.0\"\n  x-providerName: nexmo.com\n  x-serviceName: messages-olympus\npaths:\n  /messages:\n    post:\n      callbacks:\n        inbound-message:\n          \"{$request.body#/callback}\":\n            post:\n              description: An inbound message from a customer to you.\n              operationId: inbound-message\n              requestBody:\n                content:\n                  application/json:\n                    schema:\n                      $ref: \"#/components/schemas/InboundMessage\"\n                required: true\n              responses:\n                \"200\":\n                  description: Your server returns this code if it accepts the callback.\n              summary: Inbound Message\n              x-example-path: /webhooks/inbound-message\n        message-status:\n          \"{$request.body#/callback}\":\n            post:\n              description: Webhooks to inform about events happening to the message at\n                communication level (has it been delivered, rejected by the\n                provider...).\n              operationId: message-status\n              requestBody:\n                content:\n                  application/json:\n                    schema:\n                      $ref: \"#/components/schemas/MessageStatus\"\n                required: true\n              responses:\n                \"200\":\n                  description: Your server returns this code if it accepts the callback.\n              summary: Message Status\n              x-example-path: /webhooks/message-status\n      operationId: NewMessage\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NewMessage\"\n        description: Send a Message.\n        required: true\n      responses:\n        \"202\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Response\"\n          description: Accepted.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request.\n      security:\n        - bearerAuth: []\n        - basicAuth: []\n      summary: Send a Message\ncomponents:\n  schemas:\n    AudioProperty:\n      properties:\n        url:\n          description: |\n            The URL of the audio attachment.\n\n            **messenger** supports .mp3.\n\n            **whatsapp** supports .aac, .m4a, .amr, .mp3 and .opus.\n          example: https://example.com/audio.mp3\n          maxLength: 2000\n          minLength: 10\n          type: string\n      type: object\n    Error:\n      description: The error format is standardized to the 4xx/5xx range with a code and a\n        human readable explanation.\n      properties:\n        detail:\n          example: Your request parameters did not validate.\n          type: string\n        instance:\n          example: f94b4e56604e07e5e5ad5a7228618f81\n          type: string\n        title:\n          example: Invalid Parameters\n          type: string\n        type:\n          example: https://www.nexmo.com/messages/Errors#InvalidParams\n          type: string\n      required:\n        - type\n        - title\n        - detail\n        - instance\n    FileProperty:\n      properties:\n        caption:\n          description: Additional text to accompany the image. Only supported by WhatsApp.\n            Optional. Only present if specified.\n          example: Additional text to accompany the image.\n          maxLength: 3000\n          minLength: 1\n          type: string\n        url:\n          description: \u003e\n            The URL of the file attachment.\n\n\n            **messenger** supports a wide range of attachments including .zip, .csv and .pdf.\n\n\n            **whatsapp** supports .pdf, .doc(x), .ppt(x) and .xls(x).'\n          example: https://example.com/file.zip\n          maxLength: 2000\n          minLength: 10\n          type: string\n      type: object\n    FromProperty:\n      properties:\n        id:\n          description: \u003e\n            Your ID for the platform that you are sending from.\n\n\n            **Messenger**: This value should be the `to.id` value you received in the inbound messenger event.\n\n\n            **Viber**: This is your Service Message ID given to you by Nexmo Account Manager. To find out more please visit [nexmo.com/products/messages](https://www.nexmo.com/products/messages).\n          example: 123456789012345\n          maxLength: 50\n          minLength: 1\n          type: string\n        number:\n          description: \u003e\n            **SMS**: The phone number of the message recipient in the\n            [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a\n            leading + or 00 when entering a phone number, start with the country\n            code, for example, 447700900000.\n\n\n            **WhatsApp**: This is your WhatsApp Business Number  given to you by Nexmo Account Manager. To find out more please visit [nexmo.com/products/messages](https://www.nexmo.com/products/messages).\n\n\n            **MMS**: US shortcode\n          example: \"447700900000\"\n          maxLength: 50\n          minLength: 1\n          type: string\n        type:\n          description: The type of message that you want to send.\n          enum:\n            - sms\n            - viber_service_msg\n            - messenger\n            - whatsapp\n            - mms\n          example: sms\n          type: string\n      required:\n        - type\n      type: object\n    ImageProperty:\n      properties:\n        caption:\n          description: Additional text to accompany the image. Supported by WhatsApp and\n            MMS.\n          example: Additional text to accompany the image.\n          maxLength: 3000\n          minLength: 1\n          type: string\n        url:\n          description: |\n            The URL of the image attachment. \n\n            **messenger** and **mms** supports .jpg, .jpeg, .png and .gif.\n\n            **viber_service_msg** supports .jpg .jpeg, and .png.\n\n            **whatsapp** supports .jpg .jpeg, and .png.\n          example: https://example.com/image.jpg\n          maxLength: 2000\n          minLength: 10\n          type: string\n      type: object\n    InboundMessage:\n      properties:\n        from:\n          properties:\n            id:\n              description: The ID of the sender.\n              example: 123456789012345\n              type: string\n            number:\n              description: \u003e\n                **WhatsApp** or **MMS**: \n\n                The phone number of the message sender in the [E.164](https://en.wikipedia.org/wiki/E.164) format.\n              example: \"447700900000\"\n              maxLength: 50\n              minLength: 1\n              type: string\n            type:\n              description: The type of message being sent.\n              enum:\n                - messenger\n                - mms\n                - whatsapp\n              example: messenger\n              type: string\n          required:\n            - type\n          type: object\n        message:\n          properties:\n            content:\n              properties:\n                audio:\n                  $ref: \"#/components/schemas/AudioProperty\"\n                file:\n                  $ref: \"#/components/schemas/FileProperty\"\n                image:\n                  $ref: \"#/components/schemas/ImageProperty\"\n                location:\n                  $ref: \"#/components/schemas/LocationProperty\"\n                text:\n                  description: The body of the message.\n                  example: Hello World!\n                  type: string\n                type:\n                  description: \u003e\n                    The type of message being received. \n\n                    **whatsapp** and **messenger** supports `text`, `image`, `audio`, `video`, `file` and `location`. WhatsApp maximum inbound size is 64mb.\n\n                    **mms** supports `image`. \n                  enum:\n                    - text\n                    - image\n                    - audio\n                    - video\n                    - file\n                    - location\n                  example: text\n                  type: string\n                video:\n                  $ref: \"#/components/schemas/VideoPropertyInbound\"\n              type: object\n          type: object\n        message_uuid:\n          description: The UUID of the message.\n          example: aaaaaaaa-bbbb-cccc-dddd-0123456789ab\n          type: string\n        timestamp:\n          description: The datetime of when the event occurred.\n          example: 2020-01-01T14:00:00.000Z\n          format: ISO 8601\n          type: string\n        to:\n          properties:\n            id:\n              description: The ID of the recipient.\n              example: 123456678901234\n              type: string\n            number:\n              description: \u003e\n                **WhatsApp** or **MMS**: \n\n                The phone number of the message recipient in the [E.164](https://en.wikipedia.org/wiki/E.164) format.\n              example: \"447700900000\"\n              maxLength: 50\n              minLength: 1\n              type: string\n            type:\n              description: The type of message being received.\n              enum:\n                - messenger\n                - mms\n                - whatsapp\n              example: messenger\n              type: string\n          required:\n            - type\n          type: object\n      required:\n        - message_uuid\n        - to\n        - from\n        - timestamp\n      type: object\n    LocationProperty:\n      properties:\n        address:\n          description: The address of the location attachment.\n          example: 15 Bonhill St London EC2A 4DN\n          type: string\n        lat:\n          description: The latitude of the location attachment.\n          example: \"51.5228349\"\n          type: string\n        long:\n          description: The longitude of the location attachment.\n          example: \"-0.0854414\"\n          type: string\n        name:\n          description: The name of the location attachment.\n          example: Nexmo London\n          type: string\n        url:\n          description: Depending on the provider, this can either be the location on a map\n            or the website of the business at this location.\n          type: string\n      type: object\n    MessageProperty:\n      properties:\n        content:\n          properties:\n            audio:\n              $ref: \"#/components/schemas/AudioProperty\"\n            file:\n              $ref: \"#/components/schemas/FileProperty\"\n            image:\n              $ref: \"#/components/schemas/ImageProperty\"\n            template:\n              $ref: \"#/components/schemas/TemplateProperty\"\n            text:\n              description: \u003e\n                The text of the message.\n\n\n                **Messenger**: is limited to 640 characters, including unicode.\n\n\n                **SMS**: is limited to 1000 characters. The Messages API automatically detects unicode characters when sending SMS and sends the message as a unicode SMS. For more information on how concatenation and encoding please visit: [developer.nexmo.com/messaging/sms/guides/concatenation-and-encoding](https://developer.nexmo.com/messaging/sms/guides/concatenation-and-encoding).\n\n\n                **Viber**: is limited to 1000 characters, including unicode. \n\n\n                **WhatsApp**: is limited to 4096 characters, including unicode.\n              example: \"Nexmo Verification code: 64873. Valid for 10 minutes.\"\n              maxLength: 4096\n              minLength: 1\n              type: string\n            type:\n              description: \u003e\n                The type of message that you are sending.\n\n\n                **Messenger**: supports `text`, `image`, `audio`, `video` and `file`.\n\n\n                **Viber Service Messages**: supports `image` and `text` and `custom`.\n\n\n                **WhatsApp**: supports `template`, `text`, `image`, `audio`, `file`, `video` and `custom`. Maxmimum outbound media size is 64mb.\n\n\n                **SMS**: supports `text`.\n\n\n                **MMS**: supports `image`.\n              enum:\n                - text\n                - image\n                - audio\n                - video\n                - file\n                - template\n                - custom\n              example: text\n              type: string\n            video:\n              $ref: \"#/components/schemas/VideoProperty\"\n          type: object\n        messenger:\n          properties:\n            category:\n              description: The use of different category tags enables the business to send\n                messages for different use cases. For Facebook Messenger they\n                need to comply with their [Messaging Types policy](\n                https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types).\n                Nexmo maps our `category` to their `messaging_type`. If\n                `message_tag` is used, then an additional `tag` for that type is\n                mandatory. By default Nexmo sends the `response` category to\n                Facebook Messenger.\n              enum:\n                - response\n                - update\n                - message_tag\n              example: message_tag\n              type: string\n            tag:\n              description: ‘A full list of the possible tags is available on\n                [developers.facebook.com](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)'\n              example: ticket_update\n              type: string\n          type: object\n        viber_service_msg:\n          properties:\n            category:\n              description: The use of different category tags enables the business to send\n                messages for different use cases. For Viber Service Messages the\n                first message sent from a business to a user must be personal,\n                informative \u0026 a targeted message - not promotional. By default\n                Nexmo sends the `transaction` category to Viber Service\n                Messages.\n              enum:\n                - transaction\n                - promotion\n              example: transaction\n              type: string\n            ttl:\n              description: Set the time-to-live of message to be delivered in seconds. i.e.\n                if the message is not delivered in 600 seconds then delete the\n                message.\n              example: 600\n              maximum: 259200\n              minimum: 30\n              type: integer\n            type:\n              description: Viber-specific type definition. To use \"template\", please\n                contact Nexmo Account Manager to setup your templates. To find\n                out more please visit\n                [nexmo.com/products/messages](https://www.nexmo.com/products/messages).\n              example: template\n              type: string\n          type: object\n        whatsapp:\n          properties:\n            locale:\n              description: We are using the industry standard, BCP 47, for locales. So in\n                your API call to the /messages API you will need to put “en-GB”\n                and this will refer to the “en_GB” template for WhatsApp.\n              example: en-GB\n              type: string\n            policy:\n              description: \"There are two policies that you can specify when sending an\n                Message Template: `deterministic` and `fallback`.\n                `deterministic` — Deliver the Message Template in exactly the\n                language and locale asked for. `fallback` — Deliver the Message\n                Template in the language that matches users language/locale\n                setting on device. If one can not be found, deliver using the\n                specified fallback language.\"\n              enum:\n                - fallback\n                - deterministic\n              example: deterministic\n              type: string\n          type: object\n      required:\n        - content\n      type: object\n    MessageStatus:\n      properties:\n        client_ref:\n          description: The client's reference.\n          example: my-personal-reference\n          type: string\n        error:\n          properties:\n            code:\n              description: The error code. See [our errors\n                list](https://developer.nexmo.com/api-errors/messages-olympus)\n                for a list of possible errors\n              example: 1300\n              type: integer\n            reason:\n              description: Text describing the error. See [our errors\n                list](https://developer.nexmo.com/api-errors/messages-olympus)\n                for a list of possible errors\n              example: Not part of the provider network\n              type: string\n          type: object\n        from:\n          $ref: \"#/components/schemas/FromProperty\"\n        message_uuid:\n          description: The UUID of the message.\n          example: aaaaaaaa-bbbb-cccc-dddd-0123456789ab\n          type: string\n        status:\n          description: The status of the message. The `read` message status is only\n            available for `messenger` and `whatsapp`.\n          enum:\n            - submitted\n            - delivered\n            - read\n            - rejected\n            - undeliverable\n          example: delivered\n          type: string\n        timestamp:\n          $ref: \"#/components/schemas/TimestampProperty\"\n        to:\n          $ref: \"#/components/schemas/ToProperty\"\n        usage:\n          properties:\n            currency:\n              description: The charge currency in ISO 4217 format.\n              enum:\n                - EUR\n              example: EUR\n              type: string\n            price:\n              description: The charge amount as a stringified number.\n              example: \"0.0333\"\n              type: string\n          type: object\n      required:\n        - message_uuid\n        - to\n        - from\n        - timestamp\n        - status\n      type: object\n    NewMessage:\n      properties:\n        client_ref:\n          description: Client reference of up to 40 characters. The reference will be\n            present in every message status.\n          example: my-personal-reference\n          type: string\n        from:\n          $ref: \"#/components/schemas/FromProperty\"\n        message:\n          $ref: \"#/components/schemas/MessageProperty\"\n        to:\n          $ref: \"#/components/schemas/ToProperty\"\n      required:\n        - to\n        - from\n        - message\n    Response:\n      properties:\n        message_uuid:\n          description: The UUID of the message.\n          example: aaaaaaaa-bbbb-cccc-dddd-0123456789ab\n          type: string\n      required:\n        - message_uuid\n    TemplateProperty:\n      properties:\n        name:\n          description: The name of the template. For WhatsApp use your Whatsapp namespace\n            (available via Facebook Business Manager), followed by a colon `:`\n            and the name of the template to use.\n          example: WhatsApp_namespace:template_name\n          type: string\n        parameters:\n          items:\n            properties:\n              default:\n                description: The parameters are an array. The first value being {{1}} in\n                  the template.\n                example: \"1234\"\n                type: string\n            type: object\n          type: array\n      type: object\n    TimestampProperty:\n      description: The datetime of when the event occurred.\n      example: 2020-01-01T14:00:00.000Z\n      format: ISO 8601\n      type: string\n    ToProperty:\n      properties:\n        id:\n          description: \u003e\n            **Messenger**: The ID of the message recipient. This value should be\n            the `from.id` value you received in the inbound messenger event.\n          example: 123456789012345\n          maxLength: 50\n          minLength: 1\n          type: string\n        number:\n          description: \u003e\n            **SMS**, **Viber**, **WhatsApp** or **MMS**: \n\n            The phone number of the message recipient in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.\n          example: \"447700900000\"\n          maxLength: 50\n          minLength: 1\n          type: string\n        type:\n          description: The type of message that you want to send.\n          enum:\n            - sms\n            - viber_service_msg\n            - messenger\n            - whatsapp\n            - mms\n          example: sms\n          type: string\n      required:\n        - type\n      type: object\n    VideoProperty:\n      properties:\n        url:\n          description: \u003e\n            The URL of the video attachment.\n\n\n            **messenger** supports .mp4\n\n\n            **whatsapp** supports .mp4 and .3gpp. Note, only H.264 video codec and AAC audio codec is supported.\n          example: https://example.com/video.mp4\n          maxLength: 2000\n          minLength: 10\n          type: string\n      type: object\n    VideoPropertyInbound:\n      properties:\n        caption:\n          description: Additional text to accompany the image. Only supported by WhatsApp.\n            Only present if specified.\n          example: Additional text to accompany the image.\n          maxLength: 3000\n          minLength: 1\n          type: string\n        url:\n          description: |\n            The URL of the video attachment.\n\n            **messenger** and **whatsapp** supports .mp4.\n          example: https://example.com/video.mp4\n          maxLength: 2000\n          minLength: 10\n          type: string\n      type: object\n  securitySchemes:\n    basicAuth:\n      scheme: basic\n      type: http\n    bearerAuth:\n      bearerFormat: JWT\n      scheme: bearer\n      type: http\nx-errors:\n  \"1000\":\n    description: Throttled - You have exceeded the submission capacity allowed on this\n      account. Please wait and retry\n  \"1010\":\n    description: Missing params - Your request is incomplete and missing some mandatory\n      parameters.\n  \"1020\":\n    description: Invalid params  -  The value of one or more parameters is invalid.\n  \"1021\":\n    description: Invalid tag  -  The tag value is invalid.\n  \"1022\":\n    description: Invalid template  -  Invalid template or template parameters\n  \"1030\":\n    description: Internal error  -  There was an error processing your request in the\n      Platform.\n  \"1040\":\n    description: Invalid message  -  The Platform was unable to process your request. For\n      example, due to an unrecognised prefix for the phone number.\n  \"1050\":\n    description: Number barred  -  The number you are trying to submit to is blacklisted\n      and may not receive messages.\n  \"1060\":\n    description: Partner account barred  -  The `api_key` you supplied is for an account\n      that has been barred from submitting messages.\n  \"1070\":\n    description: Partner quota exceeded  -  Your pre-paid account does not have sufficient\n      credit to process this message.\n  \"1080\":\n    description: Account not enabled for REST  -  This account is not provisioned for REST\n      submission, you should use SMPP on the SMS API.\n  \"1090\":\n    description: Message too long  -  The length of `udh` and `body` was greater than 140\n      octets for a binary type SMS request.\n  \"1100\":\n    description: Communication Failed  -  Message was not submitted because there was a\n      communication failure.\n  \"1120\":\n    description: Illegal Sender Address - rejected  -  Due to local regulations, the\n      `SenderID` you set in from in the request was not accepted. Please check\n      the Global messaging section.\n  \"1130\":\n    description: Invalid TTL  -  The value of `ttl` in your request was invalid.\n  \"1140\":\n    description: Facility not allowed  -  Your request makes use of a facility that is not\n      enabled on your account.\n  \"1150\":\n    description: Invalid Message class  -  The value of `message-`class in your request was\n      out of range. See https://en.wikipedia.org/wiki/Data_Coding_Scheme.\n  \"1160\":\n    description: Non White-listed Destination  -  The phone number you set in to is not in\n      your pre-approved destination list. To send messages to this phone number,\n      add it using Dashboard.\n  \"1170\":\n    description: Invalid or Missing Msisdn Param  -  The phone number you supplied in the\n      to parameter of your request was either missing or invalid.\n  \"1180\":\n    description: Absent Subscriber Temporary  -  This message was not delivered because to\n      was temporarily unavailable. For example, the handset used for to was out\n      of coverage or switched off. This is a temporary failure, retry later for\n      a positive result.\n  \"1190\":\n    description: Absent Subscriber Permanent  -  `to` is no longer active, You should\n      remove this phone number from your database.\n  \"1200\":\n    description: Portability Error  -  There is an issue after the user has changed carrier\n      for to. If the user wants to receive messages from you, they need to\n      contact their carrier directly.\n  \"1210\":\n    description: Anti-Spam Rejection  -  Carriers often apply restrictions that block\n      messages following different criteria. For example on SenderID or message\n      content.\n  \"1220\":\n    description: Handset Busy  -  The handset associated with to was not available when\n      this message was sent. If status is rejected, this is a temporary failure;\n      retry later for a positive result. If status is submitted, this message\n      has is in the retry scheme and will be resent until it expires in 24-48\n      hours.\n  \"1230\":\n    description: Network Error  -  A network failure while sending your message. This is a\n      temporary failure, retry later for a positive result.\n  \"1240\":\n    description: Illegal Number  -  You tried to send a message to a blacklisted phone\n      number. That is, the user has already sent a STOP opt-out message and no\n      longer wishes to receive messages from you.\n  \"1241\":\n    description: Too many send requests  -  Too many send requests to phone numbers.\n  \"1250\":\n    description: Unroutable  -  The chosen route to send your message is not available.\n      This is because the phone number is either currently on an unsupported\n      network or on a pre-paid or reseller account that could not receive a\n      message sent by from. To resolve this issue either email us at\n      support@nexmo.com or create a helpdesk ticket at https://help.nexmo.com.\n  \"1260\":\n    description: Destination unreachable  -  The message could not be delivered to the\n      phone number. If using Viber Service Messages your account might not be\n      enabled for this country.\n  \"1270\":\n    description: Subscriber Age Restriction  -  The carrier blocked this message because\n      the content is not suitable for to based on age restrictions.\n  \"1280\":\n    description: Number Blocked by Carrier  -  The carrier blocked this message. This could\n      be due to several reasons. For example, to's plan does not include SMS or\n      the account is suspended.\n  \"1290\":\n    description: Pre-Paid - Insufficient funds  -  to’s pre-paid account does not have\n      enough credit to receive the message.\n  \"1300\":\n    description: Not part of the provider network  -  The number or ID is not a user in the\n      provider network.\n  \"1310\":\n    description: Not suitable device  -  The user's device can't receive the message.\n  \"1320\":\n    description: Message already sent  -  The message was already sent.\n  \"1330\":\n    description: Unknown  -  An unknown error was received from the carrier who tried to\n      send this this message. Depending on the carrier, that to is unknown. When\n      you see this error, and status is rejected, always check if to in your\n      request was valid.\n  \"1331\":\n    description: Provider error  -  The provider is not responding or unable to process the\n      request. Please try sending your message in a few minutes time.\n  \"1340\":\n    description: Outside of the allowed window  -  This message is sent outside of allowed\n      response window.\n  \"1350\":\n    description: Phone matching fee not paid  -  Requires phone matching access fee to be\n      paid by the Facebook Page.\n  \"1360\":\n    description: TTL was activated  -  TTL was activated, no callbacks and no charge will\n      be issued.\n  \"1370\":\n    description: Expired access Token - Please reauthenticate your Facebook Page with Nexmo.\n  \"1380\":\n    description: Invalid resource - Please check that the URL your provided to your\n      resrouce is accesible and valid.\n  \"1381\":\n    description: Resource size is too large - Please try sending a smaller media file.\n  \"1382\":\n    description: Resource type is invalid - Please check that the file you are trying to\n      send is valid.\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/nexmo.com-messages-olympus-0.3.3-openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/nexmo.com-messages-olympus-0.3.3-openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}