{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/MurmurationsNetwork/MurmurationsProtocol"
		},
		"file": {
			"name": "index-api-v1.yaml",
			"size": 0,
			"path": "index-api-v1.yaml",
			"byteSize": 16771,
			"content": "openapi: 3.0.0\ninfo:\n  version: \"1.0\"\n  title: Murmurations Index API\n  description: DRAFT version of the Index API for the Murmurations Protocol\nservers:\n  - description: Murmurations Testing Platform\n    url: https://index.murmurations.network/v1\ntags:\n  - name: Common Endpoints\n  - name: Node Endpoints\n  - name: Aggregator Endpoints\npaths:\n  /ping:\n    get:\n      tags:\n        - Common Endpoints\n      summary: Ping the index\n      description: |\n        Check if the index is live\n      responses:\n        200:\n          description: OK\n  /nodes:\n    post:\n      tags:\n        - Node Endpoints\n      summary: Add a node to the index\n      description: |\n        A node adds its profile to the index by posting the location of its profile (`profile_url`). The profile must include a list (`linked_schemas`) of one or more schemas against which the profile must be validated.\n\n        Each `linked_schemas` item is the name of a schema which can be found in the library using the following URL format: `{baseUrl}/schemas/{schema}.json`. For example:\n\n        `https://test-cdn.murmurations.network/schemas/test_schema-v1.json`\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PostNodeRequest\"\n            example:\n              profile_url: \"https://node.site/optional-subdirectory/node-profile.json\"\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: \"#/components/schemas/PostNodeResponse\"\n              example:\n                data:\n                  node_id: \"a55964aeaae9625dc2b8dbdb1c4ce0ed1e658483f44cf2be1a6479fe5e144d38\"\n        400:\n          description: The profile_url is missing.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n              examples:\n                missing:\n                  value:\n                    message: \"The profile_url parameter is missing.\"\n                    status: 400\n                invalid:\n                  value:\n                    message: \"Invalid JSON body.\"\n                    status: 400\n        429:\n          $ref: \"#/components/responses/TooManyRequests\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n    get:\n      tags:\n        - Aggregator Endpoints\n      summary: Search for nodes\n      description: |\n        Aggregators can search for nodes based on any of the following parameters:\n\n        - A specific schema (`schema`)\n        - When the node was last validated by the index (`last_validated`)\n        - A distance in kilometers (_\"25km\"_) or miles (_\"15mi\"_)) from a specific geolocation (`lat`, `lon`, `range`)\n        - By city/town/village/etc, state/province/county/etc. and/or country. (`locality`, `region`, `country`)\n\n        Query results can be paginated using the `page` and `page_size` parameters.\n\n        Aggregators will eventually be required to authenticate themselves with a JWT to access this endpoint.\n      parameters:\n        - $ref: \"#/components/parameters/schema\"\n        - $ref: \"#/components/parameters/last_validated\"\n        - $ref: \"#/components/parameters/lat\"\n        - $ref: \"#/components/parameters/lon\"\n        - $ref: \"#/components/parameters/range\"\n        - $ref: \"#/components/parameters/locality\"\n        - $ref: \"#/components/parameters/region\"\n        - $ref: \"#/components/parameters/country\"\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/page_size\"\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: \"#/components/schemas/GetNodesResponse\"\n              example:\n                data:\n                  - profile_url: \"https://node.site/optional-subdirectory/node-profile.json\"\n                    last_validated: 1601979232403\n                    geolocation:\n                      lat: 51.509865\n                      lon: -0.118092\n                    location:\n                      locality: London\n                      region: Greater London\n                      country: GB\n                    linked_schemas:\n                      - example_schema-v1\n                      - another_example-v1\n        # TODO: Add non-generic error responses (e.g., `Invalid lat (must be number): {lat}`, etc.)\n        400:\n          $ref: \"#/components/responses/BadRequest\"\n        # TODO: Add authentication/authorization errors when JWT is introduced\n        # 401:\n        #   $ref: '#/components/responses/Unauthorized'\n        # 403:\n        #   $ref: '#/components/responses/Forbidden'\n        404:\n          description: The requested resource could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n              example:\n                message: \"No items found matching given criteria.\"\n                status: 404\n        429:\n          $ref: \"#/components/responses/TooManyRequests\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n      # TODO: Add JWT authentication\n      # security:\n      #   - jwt: []\n  /nodes/{node_id}:\n    get:\n      tags:\n        - Node Endpoints\n      summary: Get a node's status from the index\n      description: |\n        A node can get an update about the status of the node profile after it has been submitted to the index (i.e., when using `POST /nodes`).\n\n        The record of a node in the index's database can be in one of five possible states: `received`, `validated`, `validation_failed`, `posted` or `post_failed`. The node will only be discoverable in the index when it has the status of `posted`.\n      parameters:\n        - $ref: \"#/components/parameters/node_id\"\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: \"#/components/schemas/GetNodeStatusResponse\"\n              examples:\n                received:\n                  value:\n                    data:\n                      node_id: \"a55964aeaae9625dc2b8dbdb1c4ce0ed1e658483f44cf2be1a6479fe5e144d38\"\n                      profile_url: \"https://node.site/optional-subdirectory/node-profile.json\"\n                      status: \"received\"\n                validated:\n                  value:\n                    data:\n                      node_id: \"a55964aeaae9625dc2b8dbdb1c4ce0ed1e658483f44cf2be1a6479fe5e144d38\"\n                      profile_url: \"https://node.site/optional-subdirectory/node-profile.json\"\n                      status: \"validated\"\n                      last_validated: 1601979232403\n                      profile_hash: \"c24d14c2c75f55d334a7e0ccf4d35a063a2582a7abb91e16d326f6613b9602bf\"\n                posted:\n                  value:\n                    data:\n                      node_id: \"a55964aeaae9625dc2b8dbdb1c4ce0ed1e658483f44cf2be1a6479fe5e144d38\"\n                      profile_url: \"https://node.site/optional-subdirectory/node-profile.json\"\n                      status: \"posted\"\n                      last_validated: 1601979232403\n                      profile_hash: \"c24d14c2c75f55d334a7e0ccf4d35a063a2582a7abb91e16d326f6613b9602bf\"\n                validation_failed_no_profile_url:\n                  value:\n                    data:\n                      node_id: \"a55964aeaae9625dc2b8dbdb1c4ce0ed1e658483f44cf2be1a6479fe5e144d38\"\n                      profile_url: \"https://node.site/optional-subdirectory/node-profile.json\"\n                      status: \"validation_failed\"\n                      failure_reasons:\n                        - \"Could not read from profile_url: https://node.site/optional-subdirectory/node-profile.json\"\n                validation_failed_with_schema:\n                  value:\n                    data:\n                      node_id: \"a55964aeaae9625dc2b8dbdb1c4ce0ed1e658483f44cf2be1a6479fe5e144d38\"\n                      profile_url: \"https://node.site/optional-subdirectory/node-profile.json\"\n                      status: \"validation_failed\"\n                      failure_reasons:\n                        - \"example_schema-v1.geolocation.lat: Invalid type. Expected: number, given: string\"\n                validation_failed_no_schema:\n                  value:\n                    data:\n                      node_id: \"a55964aeaae9625dc2b8dbdb1c4ce0ed1e658483f44cf2be1a6479fe5e144d38\"\n                      profile_url: \"https://node.site/optional-subdirectory/node-profile.json\"\n                      status: \"validation_failed\"\n                      failure_reasons:\n                        - \"Could not read from schema: example_schema-v1\"\n                post_failed:\n                  value:\n                    data:\n                      node_id: \"a55964aeaae9625dc2b8dbdb1c4ce0ed1e658483f44cf2be1a6479fe5e144d38\"\n                      profile_url: \"https://node.site/optional-subdirectory/node-profile.json\"\n                      status: \"post_failed\"\n                      last_validated: 1601979232403\n        404:\n          description: The node_id could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n              example:\n                message: \"Could not find node_id: {node_id}\"\n                status: 404\n        429:\n          $ref: \"#/components/responses/TooManyRequests\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n    delete:\n      tags:\n        - Node Endpoints\n      summary: Delete a node from the index\n      description: |\n        A node can delete its profile from the index at any time simply by removing the profile from its `profile_url` on its website and then sending this DELETE request to the index.\n\n        The index will first confirm the profile is no longer available at the `profile_url` (node's website should return a `404 - Not Found` error) and then remove the profile from its records.\n      parameters:\n        - $ref: \"#/components/parameters/node_id\"\n      responses:\n        200:\n          description: OK\n        400:\n          description: Profile not deleted from profile_url on node.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n              examples:\n                ProfileStillExists:\n                  value:\n                    message: \"Profile still exists at {profile_url} for node_id {node_id}\"\n                    status: 400\n                ErrorContactingNode:\n                  value:\n                    message: \"Error when trying to reach {profile_url} to delete node_id {node_id}\"\n                    status: 400\n                OtherStatusCode:\n                  value:\n                    message: \"Node at {profile_url} returned status code {status_code}\"\n                    status: 400\n        404:\n          description: The node_id could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n              example:\n                message: \"Could not find node_id: {node_id}\"\n                status: 404\n        429:\n          $ref: \"#/components/responses/TooManyRequests\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\ncomponents:\n  schemas:\n    PostNodeRequest:\n      type: object\n      required:\n        - profile_url\n      properties:\n        profile_url:\n          type: string\n    PostNodeResponse:\n      type: object\n      required:\n        - node_id\n      properties:\n        node_id:\n          type: string\n    GetNodesResponse:\n      type: array\n      items:\n        type: object\n        required:\n          - profile_url\n          - last_validated\n          - linked_schemas\n        properties:\n          profile_url:\n            type: string\n          last_validated:\n            type: number\n          linked_schemas:\n            type: array\n            items:\n              type: string\n          geolocation:\n            type: object\n            properties:\n              lat:\n                type: number\n              lon:\n                type: number\n          location:\n            type: object\n            properties:\n              locality:\n                type: string\n              region:\n                type: string\n              country:\n                type: string\n    GetNodeStatusResponse:\n      type: object\n      required:\n        - profile_url\n        - node_id\n        - status\n      properties:\n        profile_url:\n          type: string\n        node_id:\n          type: string\n        status:\n          type: string\n          enum:\n            - received\n            - validated\n            - posted\n            - validation_failed\n            - post_failed\n        last_validated:\n          type: number\n        profile_hash:\n          type: string\n        failure_reasons:\n          type: array\n          items:\n            type: string\n    Error:\n      type: object\n      required:\n        - message\n        - status\n      properties:\n        message:\n          type: string\n        status:\n          type: integer\n  parameters:\n    node_id:\n      name: node_id\n      in: path\n      description: The ID of the node\n      required: true\n      schema:\n        type: string\n    schema:\n      name: schema\n      in: query\n      description: The name of the schema\n      required: false\n      schema:\n        type: string\n    last_validated:\n      name: last_validated\n      in: query\n      description: Unix timestamp in seconds when node was last validated by index\n      schema:\n        type: integer\n    lat:\n      name: lat\n      in: query\n      description: geolocation latitude coordinate\n      schema:\n        type: number\n    lon:\n      name: lon\n      in: query\n      description: geolocation longitude coordinate\n      schema:\n        type: number\n    range:\n      name: range\n      in: query\n      description: distance from geo-coordinates (\"10km\" or \"6mi\")\n      schema:\n        type: string\n    locality:\n      name: locality\n      in: query\n      description: town, city, village, etc.\n      schema:\n        type: string\n    region:\n      name: region\n      in: query\n      description: state, province, county, etc.\n      schema:\n        type: string\n    country:\n      name: country\n      in: query\n      description: two-letter country code\n      schema:\n        type: string\n    page:\n      name: page\n      in: query\n      description: page number in paginated results\n      schema:\n        type: integer\n    page_size:\n      name: page_size\n      in: query\n      description: page size for paginated results\n      schema:\n        type: integer\n  responses:\n    BadRequest:\n      description: The request is missing a required parameter.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n          example:\n            message: \u003cnamed\u003e parameter is missing.\n            status: 400\n    # TODO: Add authentication/authorization errors when JWT is introduced\n    # Unauthorized:\n    #   description: There was an issue with the authentication data for the request.\n    #   content:\n    #     application/json:\n    #       schema:\n    #         $ref: '#/components/schemas/Error'\n    #       example:\n    #         message: Could not authenticate you.\n    #         status: 401\n    # Forbidden:\n    #   description: User does not have permission to access the resource.\n    #   content:\n    #     application/json:\n    #       schema:\n    #         $ref: '#/components/schemas/Error'\n    #       example:\n    #         message: Permission denied.\n    #         status: 403\n    TooManyRequests:\n      description: The request limit for this resource has been reached for the current rate limit window.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n          example:\n            message: Rate limit exceeded.\n            status: 429\n    ServerError:\n      description: An unknown internal error occurred.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n          example:\n            message: Internal server error triggered.\n            status: 500\n  # TODO: Add JWT authentication\n  # securitySchemes:\n  #   jwt:\n  #     type: http\n  #     scheme: bearer\n  #     bearerFormat: JWT\n",
			"canonicalURL": "/github.com/MurmurationsNetwork/MurmurationsProtocol@33b62c990d457eed6f25622b86f61fb313ab814d/-/blob/index-api-v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/MurmurationsNetwork/MurmurationsProtocol/blob/33b62c990d457eed6f25622b86f61fb313ab814d/index-api-v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}