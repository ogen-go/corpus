{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi/logoraisr/openapi.yml",
			"byteSize": 33134,
			"content": "openapi: 3.0.1\ninfo:\n  title: API docs | logoraisr.com\n  description: \u003e\n    This is a generated connector from [Logoraisr API v1](https://docs.logoraisr.com/) OpenAPI Specification.\n\n    Logoraisr API provides capability to access operations related to your graphic design tasks automatically using best-in-class algorithms and artificial intelligence.\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials.\n\n    Create an [Logoraisr account](https://logoraisr.com/) and obtain OAuth tokens following [this guide](https://docs.logoraisr.com/#section/Authentication).\n  x-ballerina-display:\n    label: Logoraisr\n    iconPath: \"icon.png\"\n  termsOfService: https://logoraisr.com/terms-conditions\n  contact:\n    url: https://logoraisr.com\n    email: support@logoraisr.com\n  version: v1\n  x-logo:\n    url: https://logoraisr.com/assets/images/content/logo_docs.png\n    backgroundColor: '#FFFFFF'\nservers:\n- url: https://api.logoraisr.com/rest-v1\nsecurity:\n- Token: []\npaths:\n  /previews/{file_id}/:\n    get:\n      tags:\n      - previews\n      summary: Gets preview image of uploaded file\n      description: This GET-Method returns the URL where the preview image of uploaded\n        file can downloaded from.\n      operationId: readPreviews\n      parameters:\n      - name: file_id\n        in: path\n        description: Id of the file for which the preview_img_url is generated.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: \"Returns preview response or an error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PreviewResponse'\n        400:\n          description: BAD REQUEST\n          content: {}\n        403:\n          description: FORBIDDEN\n          content: {}\n      x-code-samples:\n      - lang: cURL\n        source: |-\n          curl -X GET 'https://api.logoraisr.com/rest-v1/previews/{file_id}/' \\\n          -H \"Authorization:Token your_api_key\" \\\n      - lang: python\n        source: |-\n          import requests\n\n\n\n          # provide your API token here\n          headers = {'Authorization:Token your_api_key'}\n\n\n          resp = request.get('https://api.logoraisr.com/rest-v1/previews/{file_id}/', headers=headers)\n          print(resp.json())\n      - lang: node.js\n        source: |\n          var request = require(\"request\");\n\n          var options = {\n            method: 'GET',\n            url: 'https://api.logoraisr.com/rest-v1/previews/{file_id}/',\n            headers: {\n              'Authorization: Token your_api_key',\n\n            },\n\n          };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n      - lang: java\n        source: |-\n          HttpResponse\u003cString\u003e response = Unirest.GET(\"https://api.logoraisr.com/rest-v1/previews/{file_id}/\")\n          .header(\"Authorization\", \"Token your_api_key\")\n\n\n          .asString();\n      - lang: php\n        source: |-\n          $response = Unirest\\Request::GET(\"https://api.logoraisr.com/rest-v1/previews/{file_id}/\",\n            array(\n              \"Authorization\" =\u003e \"Token your_api_key\"\n\n            ),\n            array(\n\n            );\n  /processes/:\n    get:\n      tags:\n      - processes\n      summary: Gets process list.\n      description: This GET-Method lists all on logoraisr available processes.\n      operationId: listProcesses\n      responses:\n        200:\n          description: \"Returns process detail or an error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Process'\n      x-code-samples:\n      - lang: cURL\n        source: |-\n          curl -X GET 'https://api.logoraisr.com/rest-v1/processes/' \\\n          -H \"Authorization:Token your_api_key\" \\\n      - lang: python\n        source: |-\n          import requests\n\n\n\n          # provide your API token here\n          headers = {'Authorization:Token your_api_key'}\n\n\n          resp = request.get('https://api.logoraisr.com/rest-v1/processes/', headers=headers)\n          print(resp.json())\n      - lang: node.js\n        source: |\n          var request = require(\"request\");\n\n          var options = {\n            method: 'GET',\n            url: 'https://api.logoraisr.com/rest-v1/processes/',\n            headers: {\n              'Authorization: Token your_api_key',\n\n            },\n\n          };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n      - lang: java\n        source: |-\n          HttpResponse\u003cString\u003e response = Unirest.GET(\"https://api.logoraisr.com/rest-v1/processes/\")\n          .header(\"Authorization\", \"Token your_api_key\")\n\n\n          .asString();\n      - lang: php\n        source: |-\n          $response = Unirest\\Request::GET(\"https://api.logoraisr.com/rest-v1/processes/\",\n            array(\n              \"Authorization\" =\u003e \"Token your_api_key\"\n\n            ),\n            array(\n\n            );\n  /projects/:\n    get:\n      tags:\n      - projects\n      summary: Gets user project list.\n      description: This GET-Method lists the user's projects.\n      operationId: listProjects\n      responses:\n        200:\n          description: \"Returns user project list or an error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n        403:\n          description: FORBIDDEN\n          content: {}\n        404:\n          description: NOT FOUND\n          content: {}\n      x-code-samples:\n      - lang: cURL\n        source: \"curl -X GET 'https://api.logoraisr.com/rest-v1/projects/' \\\\\\n-H\\\n          \\ \\\"Authorization:Token your_api_key\\\" \\\\ \\n-H \\\"content-type:application/json\\\"\\\n          \\ \\\\\\n -d processes=logo-super-resolution \\\\\\n -d file_id=string \\\\\\n -d\\\n          \\ project_title=string \\\\\\n -d paid=true \\\\\\n\"\n      - lang: python\n        source: |-\n          import requests\n\n\n          payload = {'processes': 'logo-super-resolution', 'file_id': 'string', 'project_title': 'string', 'paid': 'true'}\n          # provide your API token here\n          headers = {'Authorization:Token your_api_key', 'content-type : application/json'}\n\n\n          resp = request.get('https://api.logoraisr.com/rest-v1/projects/', headers=headers)\n          print(resp.json())\n      - lang: node.js\n        source: |\n          var request = require(\"request\");\n\n          var options = {\n            method: 'GET',\n            url: 'https://api.logoraisr.com/rest-v1/projects/',\n            headers: {\n              'Authorization: Token your_api_key',\n              'content-type: application/json',\n            },\n\n          };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n      - lang: java\n        source: |-\n          HttpResponse\u003cString\u003e response = Unirest.GET(\"https://api.logoraisr.com/rest-v1/projects/\")\n          .header(\"Authorization\", \"Token your_api_key\")\n          .header(\"content-type\", \"application/json\")\n          .body({\"process\": \"l2v\", \"file_id\": \"00e49cf703184d8c9c6f75ca61547bce\", \"project_title\": \"rapid_api_test\"})\n          .asString();\n      - lang: php\n        source: |-\n          $response = Unirest\\Request::GET(\"https://api.logoraisr.com/rest-v1/projects/\",\n            array(\n              \"Authorization\" =\u003e \"Token your_api_key\"\n              \"content-type\" =\u003e \"application/json\"\n            ),\n            array(\n              {\"process\": \"l2v\", \"file_id\": \"00e49cf703184d8c9c6f75ca61547bce\", \"project_title\": \"rapid_api_test\"}\n            );\n    post:\n      tags:\n      - projects\n      summary: Creates a new project.\n      description: This POST-Method creates a new project.\n      operationId: createProject\n      requestBody:\n        description: Project details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProjectRequest'\n        required: true\n      responses:\n        201:\n          description: \"Returns project response or an error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectResponse'\n        400:\n          description: BAD REQUEST\n          content: {}\n        403:\n          description: FORBIDDEN\n          content: {}\n        404:\n          description: NOT FOUND\n          content: {}\n      x-code-samples:\n      - lang: cURL\n        source: \"curl -X POST 'https://api.logoraisr.com/rest-v1/projects/' \\\\\\n-H\\\n          \\ \\\"Authorization:Token your_api_key\\\" \\\\ \\n-H \\\"content-type:application/json\\\"\\\n          \\ \\\\\\n -d processes=logo-super-resolution \\\\\\n -d file_id=string \\\\\\n -d\\\n          \\ project_title=string \\\\\\n -d paid=true \\\\\\n\"\n      - lang: python\n        source: |-\n          import requests\n\n\n          payload = {'processes': 'logo-super-resolution', 'file_id': 'string', 'project_title': 'string', 'paid': 'true'}\n          # provide your API token here\n          headers = {'Authorization:Token your_api_key', 'content-type : application/json'}\n\n\n          resp = request.post('https://api.logoraisr.com/rest-v1/projects/', data=payload, headers=headers)\n          print(resp.json())\n      - lang: node.js\n        source: |\n          var request = require(\"request\");\n\n          var options = {\n            method: 'POST',\n            url: 'https://api.logoraisr.com/rest-v1/projects/',\n            headers: {\n              'Authorization: Token your_api_key',\n              'content-type: application/json',\n            },\n\n          };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n      - lang: java\n        source: |-\n          HttpResponse\u003cString\u003e response = Unirest.POST(\"https://api.logoraisr.com/rest-v1/projects/\")\n          .header(\"Authorization\", \"Token your_api_key\")\n          .header(\"content-type\", \"application/json\")\n          .body({\"process\": \"l2v\", \"file_id\": \"00e49cf703184d8c9c6f75ca61547bce\", \"project_title\": \"rapid_api_test\"})\n          .asString();\n      - lang: php\n        source: |-\n          $response = Unirest\\Request::POST(\"https://api.logoraisr.com/rest-v1/projects/\",\n            array(\n              \"Authorization\" =\u003e \"Token your_api_key\"\n              \"content-type\" =\u003e \"application/json\"\n            ),\n            array(\n              {\"process\": \"l2v\", \"file_id\": \"00e49cf703184d8c9c6f75ca61547bce\", \"project_title\": \"rapid_api_test\"}\n            );\n      x-codegen-request-body-name: data\n  /projects/{project_number}/:\n    get:\n      tags:\n      - projects\n      summary: Gets project details.\n      description: This GET-Method returns a specific project.\n      operationId: readProjects\n      parameters:\n      - name: project_number\n        in: path\n        description: Number of the project.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: \"Returns project details or an error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n        403:\n          description: FORBIDDEN\n          content: {}\n        404:\n          description: NOT FOUND\n          content: {}\n      x-code-samples:\n      - lang: cURL\n        source: |-\n          curl -X GET 'https://api.logoraisr.com/rest-v1/projects/{project_number}/' \\\n          -H \"Authorization:Token your_api_key\" \\\n      - lang: python\n        source: |-\n          import requests\n\n\n\n          # provide your API token here\n          headers = {'Authorization:Token your_api_key'}\n\n\n          resp = request.get('https://api.logoraisr.com/rest-v1/projects/{project_number}/', headers=headers)\n          print(resp.json())\n      - lang: node.js\n        source: |\n          var request = require(\"request\");\n\n          var options = {\n            method: 'GET',\n            url: 'https://api.logoraisr.com/rest-v1/projects/{project_number}/',\n            headers: {\n              'Authorization: Token your_api_key',\n\n            },\n\n          };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n      - lang: java\n        source: |-\n          HttpResponse\u003cString\u003e response = Unirest.GET(\"https://api.logoraisr.com/rest-v1/projects/{project_number}/\")\n          .header(\"Authorization\", \"Token your_api_key\")\n\n\n          .asString();\n      - lang: php\n        source: |-\n          $response = Unirest\\Request::GET(\"https://api.logoraisr.com/rest-v1/projects/{project_number}/\",\n            array(\n              \"Authorization\" =\u003e \"Token your_api_key\"\n\n            ),\n            array(\n\n            );\n  /reports/:\n    get:\n      tags:\n      - reports\n      summary: Gets user report list.\n      description: This GET method lists the user's reports.\n      operationId: getReports\n      responses:\n        200:\n          description: \"Returns user report list or an error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Report'\n        403:\n          description: FORBIDDEN\n          content: {}\n        404:\n          description: NOT FOUND\n          content: {}\n      x-code-samples:\n      - lang: cURL\n        source: |-\n          curl -X GET 'https://api.logoraisr.com/rest-v1/reports/' \\\n          -H \"Authorization:Token your_api_key\" \\\n      - lang: python\n        source: |-\n          import requests\n\n\n\n          # provide your API token here\n          headers = {'Authorization:Token your_api_key'}\n\n\n          resp = request.get('https://api.logoraisr.com/rest-v1/reports/', headers=headers)\n          print(resp.json())\n      - lang: node.js\n        source: |\n          var request = require(\"request\");\n\n          var options = {\n            method: 'GET',\n            url: 'https://api.logoraisr.com/rest-v1/reports/',\n            headers: {\n              'Authorization: Token your_api_key',\n\n            },\n\n          };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n      - lang: java\n        source: |-\n          HttpResponse\u003cString\u003e response = Unirest.GET(\"https://api.logoraisr.com/rest-v1/reports/\")\n          .header(\"Authorization\", \"Token your_api_key\")\n\n\n          .asString();\n      - lang: php\n        source: |-\n          $response = Unirest\\Request::GET(\"https://api.logoraisr.com/rest-v1/reports/\",\n            array(\n              \"Authorization\" =\u003e \"Token your_api_key\"\n\n            ),\n            array(\n\n            );\n    post:\n      tags:\n      - reports\n      summary: Creates a new report.\n      description: This POST-Method creates a new report.\n      operationId: createReport\n      requestBody:\n        description: Report request details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReportRequest'\n        required: true\n      responses:\n        201:\n          description: \"Returns report response or an error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReportResponse'\n        400:\n          description: BAD REQUEST\n          content: {}\n        401:\n          description: UNAUTHORIZED\n          content: {}\n        403:\n          description: FORBIDDEN\n          content: {}\n      x-code-samples:\n      - lang: cURL\n        source: |-\n          curl -X POST 'https://api.logoraisr.com/rest-v1/reports/' \\\n          -H \"Authorization:Token your_api_key\" \\\n      - lang: python\n        source: |-\n          import requests\n\n\n\n          # provide your API token here\n          headers = {'Authorization:Token your_api_key'}\n\n\n\n          print(resp.json())\n      - lang: node.js\n        source: |\n          var request = require(\"request\");\n\n          var options = {\n            method: 'POST',\n            url: 'https://api.logoraisr.com/rest-v1/reports/',\n            headers: {\n              'Authorization: Token your_api_key',\n\n            },\n\n          };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n      - lang: java\n        source: |-\n          HttpResponse\u003cString\u003e response = Unirest.POST(\"https://api.logoraisr.com/rest-v1/reports/\")\n          .header(\"Authorization\", \"Token your_api_key\")\n\n\n          .asString();\n      - lang: php\n        source: |-\n          $response = Unirest\\Request::POST(\"https://api.logoraisr.com/rest-v1/reports/\",\n            array(\n              \"Authorization\" =\u003e \"Token your_api_key\"\n\n            ),\n            array(\n\n            );\n      x-codegen-request-body-name: data\n  /reports/{report_number}/:\n    get:\n      tags:\n      - reports\n      summary: Gets report details.\n      description: This GET-Method returns the details of a specific report.\n      operationId: readReports\n      parameters:\n      - name: report_number\n        in: path\n        description: Report number\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: \"Returns report detail or an error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Report'\n        403:\n          description: FORBIDDEN\n          content: {}\n        404:\n          description: NOT FOUND\n          content: {}\n      x-code-samples:\n      - lang: cURL\n        source: |-\n          curl -X GET 'https://api.logoraisr.com/rest-v1/reports/{report_number}/' \\\n          -H \"Authorization:Token your_api_key\" \\\n      - lang: python\n        source: |-\n          import requests\n\n\n\n          # provide your API token here\n          headers = {'Authorization:Token your_api_key'}\n\n\n          resp = request.get('https://api.logoraisr.com/rest-v1/reports/{report_number}/', headers=headers)\n          print(resp.json())\n      - lang: node.js\n        source: |\n          var request = require(\"request\");\n\n          var options = {\n            method: 'GET',\n            url: 'https://api.logoraisr.com/rest-v1/reports/{report_number}/',\n            headers: {\n              'Authorization: Token your_api_key',\n\n            },\n\n          };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n      - lang: java\n        source: |-\n          HttpResponse\u003cString\u003e response = Unirest.GET(\"https://api.logoraisr.com/rest-v1/reports/{report_number}/\")\n          .header(\"Authorization\", \"Token your_api_key\")\n\n\n          .asString();\n      - lang: php\n        source: |-\n          $response = Unirest\\Request::GET(\"https://api.logoraisr.com/rest-v1/reports/{report_number}/\",\n            array(\n              \"Authorization\" =\u003e \"Token your_api_key\"\n\n            ),\n            array(\n\n            );\n  /results/{result_file_id}/:\n    get:\n      tags:\n      - results\n      summary: Gets the result from image processing\n      description: This GET-Method returns the URL where the result can downloaded\n        from.\n      operationId: readResults\n      parameters:\n      - name: result_file_id\n        in: path\n        description: Id of the result_file for which the result_file_url is generated.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: \"Returns result from image processing or an error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultResponse'\n        400:\n          description: BAD REQUEST\n          content: {}\n        403:\n          description: FORBIDDEN\n          content: {}\n      x-code-samples:\n      - lang: cURL\n        source: |-\n          curl -X GET 'https://api.logoraisr.com/rest-v1/results/{result_file_id}/' \\\n          -H \"Authorization:Token your_api_key\" \\\n      - lang: python\n        source: |-\n          import requests\n\n\n\n          # provide your API token here\n          headers = {'Authorization:Token your_api_key'}\n\n\n          resp = request.get('https://api.logoraisr.com/rest-v1/results/{result_file_id}/', headers=headers)\n          print(resp.json())\n      - lang: node.js\n        source: |\n          var request = require(\"request\");\n\n          var options = {\n            method: 'GET',\n            url: 'https://api.logoraisr.com/rest-v1/results/{result_file_id}/',\n            headers: {\n              'Authorization: Token your_api_key',\n\n            },\n\n          };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n      - lang: java\n        source: |-\n          HttpResponse\u003cString\u003e response = Unirest.GET(\"https://api.logoraisr.com/rest-v1/results/{result_file_id}/\")\n          .header(\"Authorization\", \"Token your_api_key\")\n\n\n          .asString();\n      - lang: php\n        source: |-\n          $response = Unirest\\Request::GET(\"https://api.logoraisr.com/rest-v1/results/{result_file_id}/\",\n            array(\n              \"Authorization\" =\u003e \"Token your_api_key\"\n\n            ),\n            array(\n\n            );\n  # /uploads/:\n  #   post:\n  #     tags:\n  #     - uploads\n  #     summary: Uploads a new image\n  #     description: This POST-Method uploads a new file on the server.\n  #     operationId: createUploads\n  #     requestBody:\n  #       description: Image details\n  #       content:\n  #         multipart/form-data:\n  #           schema:\n  #             required:\n  #             - file\n  #             properties:\n  #               file:\n  #                 type: string\n  #                 description: 'File which should be uploaded. Supported file types\n  #                   are: JPEG and PNG'\n  #                 format: binary\n  #       required: true\n  #     responses:\n  #       201:\n  #         description: \"Returns file response or an error\"\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/FileResponse'\n  #       400:\n  #         description: BAD REQUEST\n  #         content: {}\n  #     x-code-samples:\n  #     - lang: cURL\n  #       source: |-\n  #         curl -X POST 'https://api.logoraisr.com/rest-v1/uploads/' \\\n  #         -H \"Authorization:Token your_api_key\" \\\n  #         -F '@/path/to/your/logo.png'  \\\n  #     - lang: python\n  #       source: |-\n  #         import requests\n\n  #         files = '/path/to/your/logo.png'\n\n  #         # provide your API token here\n  #         headers = {'Authorization:Token your_api_key'}\n\n\n  #         resp = request.post('https://api.logoraisr.com/rest-v1/uploads/', files=files, headers=headers)\n  #         print(resp.json())\n  #     - lang: node.js\n  #       source: |\n  #         var request = require(\"request\");\n\n  #         var options = {\n  #           method: 'POST',\n  #           url: 'https://api.logoraisr.com/rest-v1/uploads/',\n  #           headers: {\n  #             'Authorization: Token your_api_key',\n\n  #           },\n  #           formData: {file: {value: {'/path/to/your/logo.png'}}}\n  #         };\n\n  #         request(options, function (error, response, body) {\n  #           if (error) throw new Error(error);\n\n  #           console.log(body);\n  #         });\n  #     - lang: java\n  #       source: |-\n  #         HttpResponse\u003cString\u003e response = Unirest.POST(\"https://api.logoraisr.com/rest-v1/uploads/\")\n  #         .header(\"Authorization\", \"Token your_api_key\")\n\n  #         .field(\"upload\", new File(\"/path/to/your/logo.png\"))\n  #         .asString();\n  #     - lang: php\n  #       source: |-\n  #         $response = Unirest\\Request::POST(\"https://api.logoraisr.com/rest-v1/uploads/\",\n  #           array(\n  #             \"Authorization\" =\u003e \"Token your_api_key\"\n\n  #           ),\n  #           array(\n  #             \"file\" =\u003e Unirest\\file::add(\"/path/to/your/logo.png\")\n  #           );\ncomponents:\n  schemas:\n    PreviewResponse:\n      type: object\n      properties:\n        preview_img_url:\n          title: Preview img url\n          maxLength: 256\n          minLength: 1\n          type: string\n          description: Url from which the preview file can be downloaded.\n    Process:\n      required:\n      - processing_algorithm\n      type: object\n      properties:\n        processing_algorithm:\n          title: Processing algorithm\n          minLength: 1\n          type: string\n          description: Schlüssel welcher Verarbeitungs-Algorithmus angewendet wird.\n            Zur Auswahl stehen \"logo-to-vector\", \"logo-super-resolution\", \"logo-segmentation\"\n            und \"image-processing\".\n        resize:\n          title: Resize\n          maxLength: 255\n          minLength: 1\n          type: string\n          description: 'Changes the size of the image according to the specified size.\n            Example: \"resize\": \"200x300\".'\n        flip:\n          title: Flip\n          type: boolean\n          description: 'Flips the image around the horizontal axis, from top to bottom.\n            Example: \"flip\": true'\n        mirror:\n          title: Mirror\n          type: boolean\n          description: 'Mirrors the image around the vertical axis, i.e. from right\n            to left. Example: \"mirror\": true'\n        rotate:\n          title: Rotate\n          maximum: 3.6E+2\n          minimum: 0\n          type: integer\n          description: 'Rotates the image around the center according to the specified\n            degree. Example: \"rotate\": 90'\n        crop:\n          title: Crop\n          maxLength: 255\n          minLength: 1\n          type: string\n          description: 'Crops the image according to the specified mechanism. If you\n            specify the size \"WidthexHeight\", the image will be cropped centered.\n            If coordinates \"x1,y1,x2,y2\" are given, the image is cropped according\n            to the coordinates. The image will be cropped to the size of the stories\n            if \"faces\" are specified as. Example Centered: \"crop\": \"200x300\". Example\n            Region: \"crop\": \"200,300,150,300\". Example Faces: \"crop\": \"faces\".'\n    Project:\n      required:\n      - process_id\n      type: object\n      properties:\n        id:\n          title: Id\n          type: integer\n          description: Id of the created project.\n        project_number:\n          title: Project number\n          type: integer\n          description: Number of the created project.\n        file_id:\n          title: File id\n          type: string\n          description: Id of the file on which the process was applied.\n          format: uuid\n        result_file_id:\n          title: Result file id\n          type: string\n          description: Id of the result file which the process created.\n          format: uuid\n        process_id:\n          title: Process id\n          minLength: 1\n          type: string\n          description: Process which should applied. Processes are \"color-classification\".\n        process:\n          $ref: '#/components/schemas/Process'\n        created:\n          title: Created\n          type: string\n          description: The Date when the project was created.\n          format: date-time\n        project_title:\n          title: Project title\n          minLength: 1\n          type: string\n          description: Name of the project with which it was saved.\n        paypal_payment_id:\n          title: Paypal payment id\n          minLength: 1\n          type: string\n          description: Id of the paypal payment.\n    ProjectRequest:\n      required:\n      - file_id\n      - project_title\n      type: object\n      properties:\n        process:\n          $ref: '#/components/schemas/Process'\n        file_id:\n          title: File id\n          type: string\n          description: Id of the file on which the process is to be applied.\n          format: uuid\n        project_title:\n          title: Project title\n          minLength: 1\n          type: string\n          description: Name of the project with which it is saved.\n    ProjectResponse:\n      type: object\n      properties:\n        project_number:\n          title: Project number\n          type: integer\n          description: Number of the created project.\n        project_id:\n          title: Project id\n          type: integer\n          description: Id of the created project.\n        result_file_id:\n          title: Result file id\n          type: string\n          description: Id of the result_file. This id must be specified to create\n            the result_file_url.\n          format: uuid\n    Color:\n      type: object\n      properties:\n        red:\n          title: Red\n          type: integer\n          description: RGB-Red color value.\n        green:\n          title: Green\n          type: integer\n          description: RGB-Green color value.\n        blue:\n          title: Blue\n          type: integer\n          description: RGB-Blue color value\n        percentage:\n          title: Percentage\n          type: string\n          description: Percentage of pixels that holds this color.\n          format: decimal\n        number_of_pixel:\n          title: Number of pixel\n          type: integer\n          description: Number of pixels that holds this color.\n        hex:\n          title: Hex\n          minLength: 1\n          type: string\n          description: Hex-label of this color.\n    Result:\n      title: Result\n      type: object\n      properties:\n        number_of_pixel_in_image:\n          title: Number of pixel in image\n          type: integer\n          description: Number of pixel in image.\n        width:\n          title: Width\n          type: integer\n          description: Width of image.\n        height:\n          title: Height\n          type: integer\n          description: Height of image.\n        colors:\n          type: array\n          items:\n            $ref: '#/components/schemas/Color'\n    Report:\n      required:\n      - file_id\n      - process_id\n      - report_number\n      - result_id\n      type: object\n      properties:\n        report_number:\n          title: Report number\n          type: integer\n          description: Number of the created report.\n        created:\n          title: Created\n          type: string\n          description: The Date when the report was created.\n          format: date-time\n        file_id:\n          title: File id\n          type: string\n          description: Id of the file on which the report was applied.\n          format: uuid\n        process_id:\n          title: Process id\n          type: integer\n          description: Process_id of the process which was applied. Processes are\n            \"color-classification\".\n        result_id:\n          title: Result id\n          type: integer\n          description: Result_id of the result which was created.\n        result:\n          $ref: '#/components/schemas/Result'\n    ReportRequest:\n      required:\n      - file_id\n      - process\n      type: object\n      properties:\n        process:\n          title: Process\n          minLength: 1\n          type: string\n          description: Process which should applied. Processes are \"color-classification\".\n        file_id:\n          title: File id\n          type: string\n          description: Id of the file on which the process is to be applied.\n          format: uuid\n    ReportResponse:\n      type: object\n      properties:\n        report_number:\n          title: Report number\n          type: integer\n          description: Number of the report which was created.\n        created:\n          title: Created\n          type: string\n          description: The Date when the project was created.\n          format: date-time\n        file_id:\n          title: File id\n          minLength: 1\n          type: string\n          description: Id of the file on which the process was applied.\n        processing_algorithm:\n          title: Processing algorithm\n          minLength: 1\n          type: string\n          description: Process which was applied. Processes are \"color-classification\".\n        result:\n          $ref: '#/components/schemas/Result'\n    ResultResponse:\n      type: object\n      properties:\n        result_file_url:\n          title: Result file url\n          maxLength: 256\n          minLength: 1\n          type: string\n          description: Url from which the result file can be downloaded.\n    FileResponse:\n      type: object\n      properties:\n        file_id:\n          title: File id\n          type: string\n          description: Returns the file_id. To apply processes to the uploaded file,\n            this file_id must be referenced in the API-calls.\n          format: uuid\n  securitySchemes:\n    Token:\n      type: apiKey\n      name: Authorization\n      in: header\n      description: Represents API Key `Authorization`\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/logoraisr/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/logoraisr/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}