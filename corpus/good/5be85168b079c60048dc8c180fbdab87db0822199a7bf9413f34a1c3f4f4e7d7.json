{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ogen-go/ogen"
		},
		"file": {
			"name": "techempower.json",
			"size": 0,
			"path": "_testdata/positive/techempower.json",
			"byteSize": 6662,
			"content": "{\n  \"openapi\": \"3.0.1\",\n  \"info\": {\n    \"title\": \"TechEmpower\",\n    \"description\": \"API for TechEmpower benchmarks\",\n    \"license\": {\n      \"name\": \"Apache 2.0\",\n      \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n    },\n    \"contact\": {\n      \"url\": \"https://github.com/TechEmpower/FrameworkBenchmarks/wiki/Project-Information-Framework-Tests-Overview#test-types\"\n    },\n    \"version\": \"20\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost/\"\n    }\n  ],\n  \"paths\": {\n    \"/json\": {\n      \"get\": {\n        \"summary\": \"Test #1. The JSON Serialization test exercises the framework fundamentals including keep-alive support, request routing, request header parsing, object instantiation, JSON serialization, response header generation, and request count throughput.\",\n        \"externalDocs\": {\n          \"url\": \"https://github.com/TechEmpower/FrameworkBenchmarks/wiki/Project-Information-Framework-Tests-Overview#json-serialization\"\n        },\n        \"operationId\": \"json\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Hello world message\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/HelloWorld\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/db\": {\n      \"get\": {\n        \"summary\": \"Test #2. The Single Database Query test exercises the framework's object-relational mapper (ORM), random number generator, database driver, and database connection pool.\",\n        \"externalDocs\": {\n          \"url\": \"https://github.com/TechEmpower/FrameworkBenchmarks/wiki/Project-Information-Framework-Tests-Overview#single-database-query\"\n        },\n        \"operationId\": \"DB\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"World object\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/WorldObject\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/queries\": {\n      \"get\": {\n        \"summary\": \"Test #3. The Multiple Database Queries test is a variation of Test #2 and also uses the World table. Multiple rows are fetched to more dramatically punish the database driver and connection pool. At the highest queries-per-request tested (20), this test demonstrates all frameworks' convergence toward zero requests-per-second as database activity increases.\",\n        \"externalDocs\": {\n          \"url\": \"https://github.com/TechEmpower/FrameworkBenchmarks/wiki/Project-Information-Framework-Tests-Overview#multiple-database-queries\"\n        },\n        \"operationId\": \"Queries\",\n        \"parameters\": [\n          {\n            \"name\": \"queries\",\n            \"in\": \"query\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"List of World objects\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/WorldObjects\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/updates\": {\n      \"get\": {\n        \"operationId\": \"Updates\",\n        \"summary\": \"Test #5. The Database Updates test is a variation of Test #3 that exercises the ORM's persistence of objects and the database driver's performance at running UPDATE statements or similar. The spirit of this test is to exercise a variable number of read-then-write style database operations.\",\n        \"externalDocs\": {\n          \"url\": \"https://github.com/TechEmpower/FrameworkBenchmarks/wiki/Project-Information-Framework-Tests-Overview#database-updates\"\n        },\n        \"parameters\": [\n          {\n            \"name\": \"queries\",\n            \"in\": \"query\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"List of World objects\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/WorldObjects\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/cached-worlds\": {\n      \"get\": {\n        \"operationId\": \"Caching\",\n        \"summary\": \"Test #7. The Caching test exercises the preferred in-memory or separate-process caching technology for the platform or framework. For implementation simplicity, the requirements are very similar to the multiple database-query test Test #3, but use a separate database table. The requirements are quite generous, affording each framework fairly broad freedom to meet the requirements in the manner that best represents the canonical non-distributed caching approach for the framework. (Note: a distributed caching test type could be added later.)\",\n        \"externalDocs\": {\n          \"url\": \"https://github.com/TechEmpower/FrameworkBenchmarks/wiki/Project-Information-Framework-Tests-Overview#caching\"\n        },\n        \"parameters\": [\n          {\n            \"name\": \"count\",\n            \"in\": \"query\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"List of CachedWorld objects\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/WorldObjects\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"HelloWorld\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"message\"\n        ],\n        \"properties\": {\n          \"message\": {\n            \"type\": \"string\",\n            \"default\": \"Hello, World!\",\n            \"description\": \"Should be equal to 'Hello, World!'\"\n          }\n        }\n      },\n      \"WorldObject\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"id\",\n          \"randomNumber\"\n        ],\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"randomNumber\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          }\n        }\n      },\n      \"WorldObjects\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/WorldObject\"\n        }\n      }\n    }\n  }\n}\n",
			"canonicalURL": "/github.com/ogen-go/ogen@c32616b6ac950daeea1ef813fadd242a139e147a/-/blob/_testdata/positive/techempower.json",
			"externalURLs": [
				{
					"url": "https://github.com/ogen-go/ogen/blob/c32616b6ac950daeea1ef813fadd242a139e147a/_testdata/positive/techempower.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}