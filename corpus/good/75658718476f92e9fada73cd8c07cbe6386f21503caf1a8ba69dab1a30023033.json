{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/erev0s/VAmPI"
		},
		"file": {
			"name": "openapi3.yml",
			"size": 0,
			"path": "openapi_specs/openapi3.yml",
			"byteSize": 13123,
			"content": "openapi: 3.0.1\ninfo:\n  title: VAmPI\n  description: OpenAPI v3 specs for VAmPI\n  version: '0.1'\nservers:\n  - url: http://localhost:5000\ncomponents: {}\npaths:\n  /createdb:\n    get:\n      tags:\n        - db-init\n      summary: Creates and populates the database with dummy data\n      description: Creates and populates the database with dummy data\n      operationId: api_views.main.populate_db\n      responses:\n        '200':\n          description: Creates and populates the database with dummy data\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n  /:\n    get:\n      tags:\n        - home\n      summary: VAmPI home\n      description: \u003e-\n        VAmPI is a vulnerable on purpose API. It was created in order to\n        evaluate the efficiency of third party tools in identifying\n        vulnerabilities in APIs but it can also be used in learning/teaching\n        purposes.\n      operationId: api_views.main.basic\n      responses:\n        '200':\n          description: Home - Help\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                  Help:\n                    type: string\n  /users/v1:\n    get:\n      tags:\n        - users\n      summary: Retrieves all users\n      description: Displays all users with basic information\n      operationId: api_views.users.get_all_users\n      responses:\n        '200':\n          description: See basic info about all users\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    email:\n                      type: string\n                    username:\n                      type: string\n  /users/v1/_debug:\n    get:\n      tags:\n        - users\n      summary: Retrieves all details for all users\n      description: Displays all details for all users\n      operationId: api_views.users.debug\n      responses:\n        '200':\n          description: See all details of the users\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    admin:\n                      type: boolean\n                    email:\n                      type: string\n                    password:\n                      type: string\n                    username:\n                      type: string\n  /users/v1/register:\n    post:\n      tags:\n        - users\n      summary: Register new user\n      description: Register new user\n      operationId: api_views.users.register_user\n      requestBody:\n        description: Username of the user\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                password:\n                  type: string\n                email:\n                  type: string\n        required: true\n      responses:\n        '200':\n          description: Sucessfully created user\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                  status:\n                    type: string\n                    enum: ['success', 'fail']\n        '400':\n          description: Invalid request\n          content: {}\n  /users/v1/login:\n    post:\n      tags:\n        - users\n      summary: Login to VAmPI\n      description: Login to VAmPI\n      operationId: api_views.users.login_user\n      requestBody:\n        description: Username of the user\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                password:\n                  type: string\n        required: true\n      responses:\n        '200':\n          description: Sucessfully logged in user\n          content:\n            application/json:\n                schema:\n                  type: object\n                  properties:\n                    auth_token:\n                      type: string\n                    message:\n                      type: string\n                    status:\n                      type: string\n                      enum: ['success', 'fail']\n        '400':\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum: ['fail']\n                  message:\n                    type: string\n  /users/v1/{username}:\n    get:\n      tags:\n        - users\n      summary: Retrieves user by username\n      description: Displays user by username\n      operationId: api_views.users.get_by_username\n      parameters:\n        - name: username\n          in: path\n          description: retrieve username data\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successfully display user info\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    username:\n                      type: string\n                    email:\n                      type: string\n        '404':\n          description: User not found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum: ['fail']\n                  message:\n                    type: string\n\n    delete:\n      tags:\n        - users\n      summary: Deletes user by username (Only Admins)\n      description: Deletes user by username (Only Admins)\n      operationId: api_views.users.delete_user\n      parameters:\n        - name: username\n          in: path\n          description: Delete username\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Sucessfully deleted user\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                  status:\n                    type: string\n                    enum: ['success', 'fail']\n        '401':\n          description: User not authorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum: ['fail']\n                  message:\n                    type: string\n        '404':\n          description: User not found\n          content: {}\n  /users/v1/{username}/email:\n    put:\n      tags:\n        - users\n      summary: Update users email\n      description: Update a single users email\n      operationId: api_views.users.update_email\n      parameters:\n        - name: username\n          in: path\n          description: username to update email\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: field to update\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n        required: true\n      responses:\n        '204':\n          description: Sucessfully updated user email\n          content: {}\n        '400':\n          description: Invalid request\n          content: {}\n        '401':\n          description: User not authorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum: ['fail']\n                  message:\n                    type: string\n  /users/v1/{username}/password:\n    put:\n      tags:\n        - users\n      summary: Update users password\n      description: Update users password\n      operationId: api_views.users.update_password\n      parameters:\n        - name: username\n          in: path\n          description: username to update password\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: field to update\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                password:\n                  type: string\n        required: true\n      responses:\n        '204':\n          description: Sucessfully updated users password\n          content: {}\n        '400':\n          description: Invalid request\n          content: {}\n        '401':\n          description: User not authorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum: ['fail']\n                  message:\n                    type: string\n  /books/v1:\n    get:\n      tags:\n        - books\n      summary: Retrieves all books\n      description: Retrieves all books\n      operationId: api_views.books.get_all_books\n      responses:\n        '200':\n          description: See all books\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  Books:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        book_title:\n                          type: string\n                        user:\n                          type: string\n    post:\n      tags:\n        - books\n      summary: Add new book\n      description: Add new book\n      operationId: api_views.books.add_new_book\n      requestBody:\n        description: \u003e-\n          Add new book with title and secret content only available to the user\n          who added it.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                book_title:\n                  type: string\n                secret:\n                  type: string\n        required: true\n      responses:\n        '200':\n          description: Sucessfully added a book\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                  status:\n                    type: string\n                    enum: ['success', 'fail']\n        '400':\n          description: Invalid request\n          content: {}\n        '401':\n          description: User not authorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum: ['fail']\n                  message:\n                    type: string\n  /books/v1/{book_title}:\n    get:\n      tags:\n        - books\n      summary: Retrieves book by title along with secret\n      description: \u003e-\n        Retrieves book by title along with secret. Only the owner may retrieve\n        it\n      operationId: api_views.books.get_by_title\n      parameters:\n        - name: book_title\n          in: path\n          description: retrieve book data\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successfully retrieve book info\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    book_title:\n                      type: string\n                    owner:\n                      type: string\n                    secret:\n                      type: string\n        '401':\n          description: User not authorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum: ['fail']\n                  message:\n                    type: string\n        '404':\n          description: Book not found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum: ['fail']\n                  message:\n                    type: string\n\n",
			"canonicalURL": "/github.com/erev0s/VAmPI@c3f45c068e2225b3506c74b079f664519763c1e1/-/blob/openapi_specs/openapi3.yml",
			"externalURLs": [
				{
					"url": "https://github.com/erev0s/VAmPI/blob/c3f45c068e2225b3506c74b079f664519763c1e1/openapi_specs/openapi3.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}