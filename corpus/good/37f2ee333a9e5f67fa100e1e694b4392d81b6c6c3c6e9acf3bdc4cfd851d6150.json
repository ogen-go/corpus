{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/adyen.com/RecurringService/30/openapi.yaml",
			"byteSize": 26706,
			"content": "openapi: 3.1.0\nservers:\n  - url: https://pal-test.adyen.com/pal/servlet/Recurring/v30\ninfo:\n  contact:\n    email: developer-experience@adyen.com\n    name: Adyen Developer Experience team\n    url: https://www.adyen.help/hc/en-us/community/topics\n    x-twitter: Adyen\n  description: |-\n    The Recurring APIs allow you to manage and remove your tokens or saved payment details. Tokens should be created with validation during a payment request.\n\n    For more information, refer to our [Tokenization documentation](https://docs.adyen.com/online-payments/tokenization).\n    ## Authentication\n    To connect to the Recurring API, you must use your basic authentication credentials. For this, create your web service user, as described in [How to get the WS user password](https://docs.adyen.com/development-resources/api-credentials). Then use its credentials to authenticate your request, for example:\n\n    ```\n    curl\n    -U \"ws@Company.YourCompany\":\"YourWsPassword\" \\\n    -H \"Content-Type: application/json\" \\\n    ...\n    ```\n    Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).\n\n    ## Versioning\n    Recurring API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.\n\n    For example:\n    ```\n    https://pal-test.adyen.com/pal/servlet/Recurring/v30/disable\n    ```\n  termsOfService: https://www.adyen.com/legal/terms-and-conditions\n  title: Adyen Recurring API\n  version: \"30\"\n  x-apisguru-categories:\n    - payment\n  x-logo:\n    url: https://twitter.com/Adyen/profile_image?size=original\n  x-origin:\n    - format: openapi\n      url: https://raw.githubusercontent.com/Adyen/adyen-openapi/master/json/RecurringService-v30.json\n      version: \"3.1\"\n  x-preferred: false\n  x-providerName: adyen.com\n  x-publicVersion: true\n  x-serviceName: RecurringService\npaths:\n  /disable:\n    post:\n      description: |-\n        Disables stored payment details to stop charging a shopper with this particular recurring detail ID.\n\n        For more information, refer to [Disable stored details](https://docs.adyen.com/classic-integration/recurring-payments/disable-stored-details/).\n      operationId: post-disable\n      requestBody:\n        content:\n          application/json:\n            examples:\n              disableARecurringContract:\n                $ref: \"#/components/examples/post-disable-disableARecurringContract\"\n            schema:\n              $ref: \"#/components/schemas/DisableRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DisableResult\"\n          description: OK - the request has succeeded.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n          description: Bad Request - a problem reading or understanding the request.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n          description: Unauthorized - authentication required.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n          description: Forbidden - insufficient permissions to process the request.\n        \"422\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n          description: Unprocessable Entity - a request validation error.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n          description: Internal Server Error - the server could not process the request.\n      security:\n        - BasicAuth: []\n        - ApiKeyAuth: []\n      summary: Disables stored payment details.\n      tags:\n        - General\n      x-groupName: General\n      x-sortIndex: 2\n  /listRecurringDetails:\n    post:\n      description: |-\n        Lists the stored payment details for a shopper, if there are any available. The recurring detail ID can be used with a regular authorisation request to charge the shopper. A summary of the payment detail is returned for presentation to the shopper.\n\n        For more information, refer to [Retrieve stored details](https://docs.adyen.com/classic-integration/recurring-payments/retrieve-stored-details/).\n      operationId: post-listRecurringDetails\n      requestBody:\n        content:\n          application/json:\n            examples:\n              listAllRecurringDetails:\n                $ref: \"#/components/examples/post-listRecurringDetails-listAllRecurringDetails\"\n            schema:\n              $ref: \"#/components/schemas/RecurringDetailsRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RecurringDetailsResult\"\n          description: OK - the request has succeeded.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n          description: Bad Request - a problem reading or understanding the request.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n          description: Unauthorized - authentication required.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n          description: Forbidden - insufficient permissions to process the request.\n        \"422\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n          description: Unprocessable Entity - a request validation error.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n          description: Internal Server Error - the server could not process the request.\n      security:\n        - BasicAuth: []\n        - ApiKeyAuth: []\n      summary: Retrieves stored payment details for a shopper.\n      tags:\n        - General\n      x-groupName: General\n      x-sortIndex: 1\n  /scheduleAccountUpdater:\n    post:\n      description: |-\n        When making the API call, you can submit either the credit card information, or the recurring detail reference and the shopper reference:\n        * If the card information is provided, all the sub-fields for `card` are mandatory.\n        * If the recurring detail reference is provided, the fields for `shopperReference` and `selectedRecurringDetailReference` are mandatory.\n      operationId: post-scheduleAccountUpdater\n      requestBody:\n        content:\n          application/json:\n            examples:\n              scheduleAccountUpdaterWithCardData:\n                $ref: \"#/components/examples/post-scheduleAccountUpdater-scheduleAccountUpdaterWithCardData\"\n              scheduleAccountUpdaterWithTokenData:\n                $ref: \"#/components/examples/post-scheduleAccountUpdater-scheduleAccountUpdaterWithTokenData\"\n            schema:\n              $ref: \"#/components/schemas/ScheduleAccountUpdaterRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScheduleAccountUpdaterResult\"\n          description: OK - the request has succeeded.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n          description: Bad Request - a problem reading or understanding the request.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n          description: Unauthorized - authentication required.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n          description: Forbidden - insufficient permissions to process the request.\n        \"422\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n          description: Unprocessable Entity - a request validation error.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceError\"\n          description: Internal Server Error - the server could not process the request.\n      security:\n        - BasicAuth: []\n        - ApiKeyAuth: []\n      summary: Schedules running of the Account Updater.\n      tags:\n        - General\n      x-addedInVersion: \"4\"\n      x-groupName: General\n      x-sortIndex: 3\ncomponents:\n  examples:\n    post-disable-disableARecurringContract:\n      summary: Disable a recurring contract\n      value:\n        merchantAccount: YOUR_MERCHANT_ACCOUNT\n        recurringDetailReference: \"8314442372419167\"\n        shopperReference: YOUR_UNIQUE_SHOPPER_ID\n    post-listRecurringDetails-listAllRecurringDetails:\n      summary: List all recurring details\n      value:\n        merchantAccount: YOUR_MERCHANT_ACCOUNT\n        recurring:\n          contract: RECURRING\n        shopperReference: YOUR_UNIQUE_SHOPPER_ID\n    post-scheduleAccountUpdater-scheduleAccountUpdaterWithCardData:\n      summary: Schedule AccountUpdater with card data\n      value:\n        card:\n          expiryMonth: \"03\"\n          expiryYear: \"2030\"\n          holderName: Adyen Test\n          number: \"4111111111111111\"\n        merchantAccount: YOUR_MERCHANT_ACCOUNT\n        reference: YOUR_REFERENCE\n    post-scheduleAccountUpdater-scheduleAccountUpdaterWithTokenData:\n      summary: Schedule AccountUpdater with token data\n      value:\n        merchantAccount: YOUR_MERCHANT_ACCOUNT\n        reference: YOUR_REFERENCE\n        selectedRecurringDetailReference: \"8814232895168272\"\n        shopperReference: YOUR_UNIQUE_SHOPPER_ID\n  schemas:\n    Address:\n      properties:\n        city:\n          description: \"The name of the city. Maximum length: 3000 characters.\"\n          type: string\n        country:\n          description: |-\n            The two-character country code as defined in ISO-3166-1 alpha-2. For example, **US**.\n            \u003e If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.\n          type: string\n        houseNumberOrName:\n          description: \"The number or name of the house. Maximum length: 3000 characters.\"\n          type: string\n        postalCode:\n          description: A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.\n          type: string\n        stateOrProvince:\n          description: |-\n            State or province codes as defined in ISO 3166-2. For example, **CA** in the US or **ON** in Canada.\n            \u003e Required for the US and Canada.\n          type: string\n        street:\n          description: |-\n            The name of the street. Maximum length: 3000 characters.\n            \u003e The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.\n          type: string\n      required:\n        - street\n        - houseNumberOrName\n        - city\n        - postalCode\n        - country\n    Amount:\n      properties:\n        currency:\n          description: The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).\n          maxLength: 3\n          minLength: 3\n          type: string\n        value:\n          description: The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).\n          format: int64\n          type: integer\n      required:\n        - value\n        - currency\n    BankAccount:\n      properties:\n        bankAccountNumber:\n          description: The bank account number (without separators).\n          type: string\n        bankCity:\n          description: The bank city.\n          type: string\n          x-addedInVersion: \"18\"\n        bankLocationId:\n          description: The location id of the bank. The field value is `nil` in most cases.\n          type: string\n        bankName:\n          description: The name of the bank.\n          type: string\n        bic:\n          description: The [Business Identifier Code](https://en.wikipedia.org/wiki/ISO_9362) (BIC) is the SWIFT address assigned to a bank. The field value is `nil` in most cases.\n          type: string\n        countryCode:\n          description: |-\n            Country code where the bank is located.\n\n            A valid value is an ISO two-character country code (e.g. 'NL').\n          type: string\n        iban:\n          description: The [International Bank Account Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number) (IBAN).\n          type: string\n        ownerName:\n          description: |-\n            The name of the bank account holder.\n            If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example:\n            * χ12 is converted to ch12.\n            * üA is converted to euA.\n            * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n            After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example:\n            * John17 - allowed.\n            * J17 - allowed.\n            * 171 - not allowed.\n            * John-7 - allowed.\n            \u003e If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'.\n          type: string\n        taxId:\n          description: The bank account holder's tax ID.\n          type: string\n          x-addedInVersion: \"18\"\n    Card:\n      properties:\n        cvc:\n          description: |-\n            The [card verification code](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid) (1-20 characters). Depending on the card brand, it is known also as:\n            * CVV2/CVC2 – length: 3 digits\n            * CID – length: 4 digits\n            \u003e If you are using [Client-Side Encryption](https://docs.adyen.com/classic-integration/cse-integration-ecommerce), the CVC code is present in the encrypted data. You must never post the card details to the server.\n            \u003e This field must be always present in a [one-click payment request](https://docs.adyen.com/classic-integration/recurring-payments).\n            \u003e When this value is returned in a response, it is always empty because it is not stored.\n          maxLength: 20\n          minLength: 1\n          type: string\n        expiryMonth:\n          description: |-\n            The card expiry month.\n            Format: 2 digits, zero-padded for single digits. For example:\n            * 03 = March\n            * 11 = November\n          maxLength: 2\n          minLength: 1\n          type: string\n        expiryYear:\n          description: |-\n            The card expiry year.\n            Format: 4 digits. For example: 2020\n          maxLength: 4\n          minLength: 4\n          type: string\n        holderName:\n          description: The name of the cardholder, as printed on the card.\n          maxLength: 50\n          minLength: 1\n          type: string\n        issueNumber:\n          description: The issue number of the card (for some UK debit cards only).\n          maxLength: 2\n          minLength: 1\n          type: string\n        number:\n          description: |-\n            The card number (4-19 characters). Do not use any separators.\n            When this value is returned in a response, only the last 4 digits of the card number are returned.\n          maxLength: 19\n          minLength: 4\n          type: string\n        startMonth:\n          description: The month component of the start date (for some UK debit cards only).\n          maxLength: 2\n          minLength: 1\n          type: string\n        startYear:\n          description: The year component of the start date (for some UK debit cards only).\n          maxLength: 4\n          minLength: 4\n          type: string\n      required:\n        - number\n        - expiryMonth\n        - expiryYear\n        - holderName\n    DisableRequest:\n      properties:\n        contract:\n          description: |-\n            Specify the contract if you only want to disable a specific use.\n\n            This field can be set to one of the following values, or to their combination (comma-separated):\n            * ONECLICK\n            * RECURRING\n            * PAYOUT\n          type: string\n          x-addedInVersion: \"3\"\n        merchantAccount:\n          description: The merchant account identifier with which you want to process the transaction.\n          type: string\n        recurringDetailReference:\n          description: |-\n            The ID that uniquely identifies the recurring detail reference.\n\n            If it is not provided, the whole recurring contract of the `shopperReference` will be disabled, which includes all recurring details.\n          type: string\n        shopperReference:\n          description: |-\n            The ID that uniquely identifies the shopper.\n\n            This `shopperReference` must be the same as the `shopperReference` used in the initial payment.\n          type: string\n      required:\n        - merchantAccount\n        - shopperReference\n    DisableResult:\n      properties:\n        response:\n          description: Depending on whether a specific recurring detail was in the request, result is either [detail-successfully-disabled] or [all-details-successfully-disabled].\n          type: string\n    Name:\n      properties:\n        firstName:\n          description: The first name.\n          type: string\n        lastName:\n          description: The last name.\n          type: string\n      required:\n        - firstName\n        - lastName\n    Recurring:\n      properties:\n        contract:\n          description: |-\n            The type of recurring contract to be used.\n            Possible values:\n            * `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid).\n            * `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp).\n            * `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not.\n            * `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/online-payments/online-payouts).\n          enum:\n            - ONECLICK\n            - RECURRING\n            - PAYOUT\n          type: string\n        recurringDetailName:\n          description: A descriptive name for this detail.\n          type: string\n        tokenService:\n          description: The name of the token service.\n          enum:\n            - VISATOKENSERVICE\n            - MCTOKENSERVICE\n          type: string\n          x-addedInVersion: \"25\"\n    RecurringDetail:\n      properties:\n        additionalData:\n          additionalProperties:\n            type: string\n          description: |-\n            This field contains additional data, which may be returned in a particular response.\n\n            The additionalData object consists of entries, each of which includes the key and value.\n          type: object\n          x-addedInVersion: \"5\"\n        alias:\n          description: |-\n            The alias of the credit card number.\n\n            Applies only to recurring contracts storing credit card details\n          type: string\n          x-addedInVersion: \"4\"\n        aliasType:\n          description: |-\n            The alias type of the credit card number.\n\n            Applies only to recurring contracts storing credit card details.\n          type: string\n          x-addedInVersion: \"4\"\n        bank:\n          $ref: \"#/components/schemas/BankAccount\"\n          description: A container for bank account data.\n        billingAddress:\n          $ref: \"#/components/schemas/Address\"\n          description: The billing address.\n          x-addedInVersion: \"4\"\n        card:\n          $ref: \"#/components/schemas/Card\"\n          description: A container for card data.\n        contractTypes:\n          description: Types of recurring contracts.\n          items:\n            type: string\n          type: array\n          x-addedInVersion: \"12\"\n        creationDate:\n          description: The date when the recurring details were created.\n          format: date-time\n          type: string\n        firstPspReference:\n          description: The `pspReference` of the first recurring payment that created the recurring detail.\n          type: string\n          x-addedInVersion: \"4\"\n        name:\n          description: An optional descriptive name for this recurring detail.\n          type: string\n        paymentMethodVariant:\n          description: The  type or sub-brand of a payment method used, e.g. Visa Debit, Visa Corporate, etc. For more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).\n          type: string\n          x-addedInVersion: \"2\"\n        recurringDetailReference:\n          description: The reference that uniquely identifies the recurring detail.\n          type: string\n        shopperName:\n          $ref: \"#/components/schemas/Name\"\n          description: The name of the shopper.\n          x-addedInVersion: \"4\"\n        socialSecurityNumber:\n          description: A shopper's social security number (only in countries where it is legal to collect).\n          type: string\n          x-addedInVersion: \"4\"\n        variant:\n          description: The payment method, such as “mc\", \"visa\", \"ideal\", \"paypal\".\n          type: string\n      required:\n        - recurringDetailReference\n        - variant\n    RecurringDetailsRequest:\n      properties:\n        merchantAccount:\n          description: The merchant account identifier you want to process the (transaction) request with.\n          type: string\n        recurring:\n          $ref: \"#/components/schemas/Recurring\"\n          description: |-\n            A container for the type of a recurring contract to be retrieved.\n\n            The contract value needs to match the contract value submitted in the payment transaction used to create a recurring contract.\n            However, if `ONECLICK,RECURRING` is the original contract definition in the initial payment, then `contract` should take either `ONECLICK` or `RECURRING`, depending on whether or not you want the shopper to enter their card's security code when they finalize their purchase.\n        shopperReference:\n          description: The reference you use to uniquely identify the shopper (e.g. user ID or account ID).\n          type: string\n      required:\n        - merchantAccount\n        - shopperReference\n    RecurringDetailsResult:\n      properties:\n        creationDate:\n          description: The date when the recurring details were created.\n          format: date-time\n          type: string\n        details:\n          description: Payment details stored for recurring payments.\n          items:\n            $ref: \"#/components/schemas/RecurringDetail\"\n          type: array\n        lastKnownShopperEmail:\n          description: The most recent email for this shopper (if available).\n          type: string\n        shopperReference:\n          description: The reference you use to uniquely identify the shopper (e.g. user ID or account ID).\n          type: string\n    ScheduleAccountUpdaterRequest:\n      properties:\n        additionalData:\n          additionalProperties:\n            type: string\n          description: This field contains additional data, which may be required for a particular request.\n          type: object\n        card:\n          $ref: \"#/components/schemas/Card\"\n          description: |-\n            A container for credit card data.\n\n            Optional if `shopperReference` and `selectedRecurringDetailReference` are provided.\n        merchantAccount:\n          description: Account of the merchant.\n          type: string\n        reference:\n          description: A reference that merchants can apply for the call.\n          type: string\n        selectedRecurringDetailReference:\n          description: |-\n            The selected detail recurring reference.\n\n            Optional if `card` is provided.\n          type: string\n        shopperReference:\n          description: |-\n            The reference of the shopper that owns the recurring contract.\n\n            Optional if `card` is provided.\n          type: string\n      required:\n        - merchantAccount\n        - reference\n    ScheduleAccountUpdaterResult:\n      properties:\n        pspReference:\n          description: Adyen's 16-character unique reference associated with the transaction. This value is globally unique; quote it when communicating with us about this request.\n          type: string\n        result:\n          description: The result of scheduling an Account Updater. If scheduling was successful, this field returns **Success**; otherwise it contains the error message.\n          type: string\n      required:\n        - pspReference\n        - result\n    ServiceError:\n      properties:\n        errorCode:\n          description: The error code mapped to the error message.\n          type: string\n        errorType:\n          description: The category of the error.\n          type: string\n        message:\n          description: A short explanation of the issue.\n          type: string\n        pspReference:\n          description: The PSP reference of the payment.\n          type: string\n        status:\n          description: The HTTP response status.\n          format: int32\n          type: integer\n  securitySchemes:\n    ApiKeyAuth:\n      in: header\n      name: X-API-Key\n      type: apiKey\n    BasicAuth:\n      scheme: basic\n      type: http\nsource:\n  url: {}\nx-groups:\n  - General\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@47bf2b618e492e31bc62743e9f72c47cb8460229/-/blob/APIs/adyen.com/RecurringService/30/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/47bf2b618e492e31bc62743e9f72c47cb8460229/APIs/adyen.com/RecurringService/30/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}