{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/arsalasif/flask-rest-api"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "services/docs/swagger.yml",
			"byteSize": 14946,
			"content": "openapi: 3.0.0\nservers:\n  - url: http://0.0.0.0:5000/v1\n    description: Development server\ninfo:\n  description: |\n    Flask API - Documentation\n  version: 1.0.0\n  title: Flask API\n  termsOfService: 'http://swagger.io/terms/'\n  contact:\n    email: arsalasif@users.noreply.github.com\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: Users\n    description: Role = ADMIN\n  - name: Auth\n    description: Registration and Login\n  - name: SocialAuth\n    description: Authentication via OAuth2\n  - name: Email\n    description: Email verification\npaths:\n  /users:\n    post:\n      description: 'Add user'\n      tags:\n        - Users\n      parameters:\n        - $ref: '#/components/parameters/acceptHeaderParam'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UsersPost'\n      responses:\n        '200':\n          description: 'User was added!'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '400':\n          description: 'User with that username or email already exists.\u003cbr /\u003eor\u003cbr /\u003eEmail, Username, Name and Password must be provided.'\n    get:\n      description: Get all users\n      tags:\n        - Users\n      parameters:\n        - in: query\n          name: page\n          schema:\n            type: integer\n          required: false\n          description: Page number to fetch\n        - in: query\n          name: per_page\n          schema:\n            type: integer\n          required: false\n          description: Number of items to fetch per page\n        - in: query\n          name: filter\n          schema:\n            type: string\n          required: false\n          description: Provides filtering capabilities. Can use table field names with comparison operators such as \u003c \u003e != == as well as operators 'and', 'or', etc. Usage example -\u003e filter=(id \u003c 3).\n        - in: query\n          name: order_by\n          schema:\n            type: string\n          required: false\n          description: Default ordering is descending order of created time. This parameter can be used to sort manually. Usage example -\u003e order_by=(id desc).\n        - $ref: '#/components/parameters/acceptHeaderParam'\n      responses:\n        '200':\n          description: Paginated list of users\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserArray'\n  /users/{user_id}:\n    get:\n      description: Get single user details\n      tags:\n        - Users\n      parameters:\n        - $ref: '#/components/parameters/acceptHeaderParam'\n        - name: user_id\n          in: path\n          description: ID of user to fetch\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      responses:\n        '200':\n          description: Get single user details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '404':\n          description: 'User does not exist.'\n    put:\n      description: Updates User\n      tags:\n        - Users\n      parameters:\n        - $ref: '#/components/parameters/acceptHeaderParam'\n        - name: user_id\n          in: path\n          description: ID of user to update\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UsersPost'\n      responses:\n        '200':\n          description: User was updated!\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '404':\n          description: User does not exist.\n    delete:\n      description: Deletes a user based on a user ID\n      tags:\n        - Users\n      parameters:\n        - $ref: '#/components/parameters/acceptHeaderParam'\n        - name: user_id\n          in: path\n          description: ID of user to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      responses:\n        '200':\n          description: User was deleted!\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '404':\n          description: User does not exist.\n  /auth/register:\n    post:\n      description: New user registration\n      tags:\n        - Auth\n      parameters:\n        - $ref: '#/components/parameters/acceptHeaderParam'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthRegister'\n      responses:\n        '200':\n          description: Successfully registered.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponseAuth'\n        '400':\n          description: 'User with that username already exists.\u003cbr /\u003eor\u003cbr /\u003eUser with that email already exists.'\n      security: []\n  /auth/login:\n    post:\n      description: User login\n      tags:\n        - Auth\n      parameters:\n        - $ref: '#/components/parameters/acceptHeaderParam'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserLogin'\n      responses:\n        '200':\n          description: Successfully logged in\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponseAuth'\n        '404':\n          description: 'User does not exist.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n      security: []\n  /auth/logout:\n    get:\n      description: Logs a user out\n      tags:\n        - Auth\n      parameters:\n        - $ref: '#/components/parameters/acceptHeaderParam'\n      responses:\n        '200':\n          description: Successfully logged out.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n  /auth/status:\n    get:\n      description: Returns the logged in user's status\n      tags:\n        - Auth\n      parameters:\n        - $ref: '#/components/parameters/acceptHeaderParam'\n      responses:\n        '200':\n          description: User object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n  /auth/password_recovery:\n    post:\n      description: Creates a password_recovery_hash and sends email to user\n      tags:\n        - Auth\n      parameters:\n        - $ref: '#/components/parameters/acceptHeaderParam'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PasswordRecovery'\n      responses:\n        '200':\n          description: Password recovery email sent.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '400':\n          description: Email does not exist.\n      security: []\n  /auth/password_reset:\n    put:\n      description: Reset user password\n      tags:\n        - Auth\n      parameters:\n        - $ref: '#/components/parameters/acceptHeaderParam'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PasswordReset'\n      responses:\n        '200':\n          description: Successfully reset password.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n      security: []\n  /auth/password_change:\n    put:\n      description: Changes user password\n      tags:\n        - Auth\n      parameters:\n        - $ref: '#/components/parameters/acceptHeaderParam'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PasswordChange'\n      responses:\n        '200':\n          description: Successfully changed password.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '400':\n          description: Invalid current password. Please try again.\n  /auth/facebook/login:\n    get:\n      description: Redirects user to Facebook for OAuth2 login.\n      tags:\n        - SocialAuth\n      parameters:\n        - $ref: '#/components/parameters/acceptHeaderParam'\n      responses:\n        '200':\n          description: Success! Logged in with Facebook.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponseAuth'\n        '400':\n          description: Something went wrong with Facebook. Try again.\n      security: []\n  /auth/github/login:\n    get:\n      description: Redirects user to Github for OAuth2 login.\n      tags:\n        - SocialAuth\n      parameters:\n        - $ref: '#/components/parameters/acceptHeaderParam'\n      responses:\n        '200':\n          description: Success! Logged in with Github.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponseAuth'\n        '400':\n          description: Something went wrong with Github. Try again.\n      security: []\n  /email_verification:\n    put:\n      description: Creates a email_token_hash and sends email with token to user\n      tags:\n        - Email\n      parameters:\n        - $ref: '#/components/parameters/acceptHeaderParam'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PasswordReset'\n      responses:\n        '200':\n          description: Successfully sent email with email verification.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n  /email_verification/{token}:\n    get:\n      description: Verifies email with given token\n      tags:\n        - Email\n      parameters:\n        - name: token\n          in: path\n          description: JWT token received in email for verification\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful email verification.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '400':\n          description: Verification link expired.\nexternalDocs:\n  description: Find out more about Swagger\n  url: 'http://swagger.io'\ncomponents:\n  parameters:\n    acceptHeaderParam:\n      in: header\n      name: Accept\n      required: true\n      schema:\n        type: string\n        default: application/json\n      description: Accept HTTP header default value (application/json)\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        email:\n          type: string\n        username:\n          type: string\n        name:\n          type: string\n        active:\n          type: boolean\n        created_at:\n          type: string\n          format: date-time\n        updated_at:\n          type: string\n          format: date-time\n        role:\n          type: integer\n          format: int64\n        role_name:\n          type: string\n        social_type:\n          type: string\n        email_validation_date:\n          type: string\n          format: date-time\n    UserArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/User'\n    AuthRegister:\n      type: object\n      required:\n        - username\n        - email\n        - name\n        - password\n      properties:\n        email:\n          type: string\n        username:\n          type: string\n        password:\n          type: string\n        name:\n          type: string\n    UsersPost:\n      type: object\n      required:\n        - username\n        - email\n        - name\n        - password\n      properties:\n        email:\n          type: string\n        username:\n          type: string\n        password:\n          type: string\n        name:\n          type: string\n        role:\n          type: integer\n          format: int64\n    UsersPut:\n      type: object\n      properties:\n        email:\n          type: string\n        username:\n          type: string\n        password:\n          type: string\n        name:\n          type: string\n        role:\n          type: integer\n          format: int64\n    UserLogin:\n      type: object\n      required:\n        - email\n        - password\n      properties:\n        email:\n          type: string\n        password:\n          type: string\n    PasswordRecovery:\n      type: object\n      required:\n        - email\n      properties:\n        email:\n          type: string\n    PasswordReset:\n      type: object\n      required:\n        - token\n        - password\n      properties:\n        token:\n          type: string\n        password:\n          type: string\n    PasswordChange:\n      type: object\n      required:\n        - current_password\n        - new_password\n      properties:\n        current_password:\n          type: string\n        new_password:\n          type: string\n    Token:\n      type: object\n      required:\n        - token\n      properties:\n        token:\n          type: string\n    ApiResponse:\n      type: object\n      properties:\n        status:\n          type: integer\n          format: int32\n        message:\n          type: string\n      required:\n        - status\n        - message\n    ApiResponseAuth:\n      allOf:\n        - $ref: '#/components/schemas/ApiResponse'\n        - type: object\n          properties:\n            auth_token:\n              type: string\n          required:\n            - auth_token\n    # Schema for error response body\n    Error:\n      type: object\n      properties:\n        code:\n          type: string\n        message:\n          type: string\n      required:\n        - code\n        - message\n  requestBodies:\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/AuthRegister'\n      description: List of user object\n      required: true\n  responses:\n    ServerError:\n      description: Something went wrong\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\nsecurity:\n  - bearerAuth: []\n",
			"canonicalURL": "/github.com/arsalasif/flask-rest-api@f1807bfc760d5e910d5607b02929655e7e8d043c/-/blob/services/docs/swagger.yml",
			"externalURLs": [
				{
					"url": "https://github.com/arsalasif/flask-rest-api/blob/f1807bfc760d5e910d5607b02929655e7e8d043c/services/docs/swagger.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}