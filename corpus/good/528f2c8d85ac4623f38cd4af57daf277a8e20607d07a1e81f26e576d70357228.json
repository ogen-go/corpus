{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aws/serverless-application-model"
		},
		"file": {
			"name": "http_api_existing_openapi_conditions.yaml",
			"size": 0,
			"path": "tests/translator/input/http_api_existing_openapi_conditions.yaml",
			"byteSize": 4457,
			"content": "Conditions:\n  condition:\n    Fn::Equals:\n      - true\n      - true\nResources:\n  HttpApiFunction: \n    Condition: condition\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: s3://sam-demo-bucket/todo_list.zip\n      Handler: index.restapi\n      Runtime: python3.7\n      Events:\n        Basic: # integration exists\n          Type: HttpApi\n          Properties:\n            PayloadFormatVersion: \"2.0\"\n            Path: /basic\n            Method: post\n            ApiId: !Ref MyApi\n        Basic2: # integration exists, auth doesn't\n          Type: HttpApi\n          Properties:\n            Path: /basic\n            Method: get\n            ApiId: !Ref MyApi\n            Auth:\n              Authorizer: OAuth2\n              AuthorizationScopes: \n                - basic\n        SimpleCase: # path exists, integration doesn't\n          Type: HttpApi\n          Properties:\n            ApiId: !Ref MyApi\n  MyApi:\n    Type: AWS::Serverless::HttpApi\n    Properties:\n      Tags:\n        Tag1: value1\n        Tag2: value2\n      Auth:\n        Authorizers:\n          OAuth2:\n            AuthorizationScopes:\n              - scope4\n            JwtConfiguration:\n              issuer: \"https://www.example.com/v1/connect/oidc\"\n              audience:\n                - MyApi\n            IdentitySource: \"$request.querystring.param\"\n        DefaultAuthorizer: OAuth2\n      DefinitionBody:\n        info:\n          version: '1.0'\n          title:\n            Ref: AWS::StackName\n        paths:\n          \"/basic\":\n            post:\n              x-amazon-apigateway-integration:\n                httpMethod: POST\n                type: aws_proxy\n                uri:\n                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DifferentFunction.Arn}/invocations\n                payloadFormatVersion: '1.0'\n              security:\n              - OpenIdAuth:\n                - scope3\n              responses: {}\n            get:\n              x-amazon-apigateway-integration:\n                httpMethod: POST\n                type: aws_proxy\n                uri:\n                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DifferentFunction.Arn}/invocations\n                payloadFormatVersion: '1.0'\n              responses: {}\n          \"/integration\":\n            post:\n              x-amazon-apigateway-integration:\n                httpMethod: POST\n                type: aws_proxy\n                uri:\n                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HttpApiFunction.Arn}/invocations\n                payloadFormatVersion: '1.0'\n              security:\n              - OpenIdAuth:\n                - scope1\n                - scope2\n              responses: {}\n          \"$default\":\n            x-amazon-apigateway-any-method:\n              isDefaultRoute: true\n              security:\n              - OpenIdAuth:\n                - scope1\n                - scope2\n              responses: {}\n          \"/oauth2\":\n            post:\n              x-amazon-apigateway-integration:\n                httpMethod: POST\n                type: aws_proxy\n                uri:\n                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HttpApiFunction.Arn}/invocations\n                payloadFormatVersion: '1.0'\n              security:\n              - oauth2Auth:\n                - scope4\n              responses: {}\n        openapi: 3.0.1\n        tags:\n          - name: Tag1\n            description: this tag exists, but doesn't have an amazon extension value\n        components:\n          securitySchemes:\n            oauth2Auth:\n              type: oauth2\n              x-amazon-apigateway-authorizer:\n                identitySource: \"$request.querystring.param\"\n                type: jwt\n                jwtConfiguration:\n                  audience:\n                  - MyApi\n                  issuer: https://www.example.com/v1/connect/oidc\n            OpenIdAuth:\n              type: openIdConnect\n              x-amazon-apigateway-authorizer:\n                identitySource: \"$request.querystring.param\"\n                type: jwt\n                jwtConfiguration:\n                  audience:\n                  - MyApi\n                  issuer: https://www.example.com/v1/connect/oidc\n                openIdConnectUrl: https://www.example.com/v1/connect\n",
			"canonicalURL": "/github.com/aws/serverless-application-model@30f206a677fb8080750de88c255ad09b24071873/-/blob/tests/translator/input/http_api_existing_openapi_conditions.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aws/serverless-application-model/blob/30f206a677fb8080750de88c255ad09b24071873/tests/translator/input/http_api_existing_openapi_conditions.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}