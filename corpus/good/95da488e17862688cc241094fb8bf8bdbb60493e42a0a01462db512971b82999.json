{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "lumminary.com-1.0-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/lumminary.com-1.0-swagger.yaml",
			"byteSize": 92609,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    x-twitter: LumminaryDNA\n  description: \u003e-\n    # Introduction\n\n    The Lumminary API was built to allow third parties to interact with Lumminary customers and gain access to their genetic data. The Lumminary API is fast, scalable and highly secure. All requests to the Lumminary API take place over SSL, which means all communication of Customer data is encrypted.\n\n\n    Before we dive in, some definitions. This is what we mean by:\n\n\n    |Term|Definition|\n\n    |-----------|-----------|\n\n    |**Third party**|A third party (also referred to as \"partner\" or as \"you\") is a company which offers services and products using genetic data.|\n\n    |**Lumminary clients**|The Lumminary client (also referred to as \"customer\") is an individual who has created an account on the Lumminary platform.|\n\n    |**Lumminary**|This is  us - our services including the Lumminary platform, the API, the DNA App Store, the DNA Vault, the \"Connect with Lumminary\" button, and the website in its totality. |\n\n    |**CWL**|This is the acronym for the \"Connect with Lumminary\" button.|\n\n    |**dataset**|This is the term we use when we refer to a customer's genetic data.|\n\n    |**Lumminary API**|This is a library/module that you can use to integrate your apps with the Lumminary platform.|\n\n    |**Lumminary toolkit**|This is a stand alone application which helps you integrate with Lumminary without writing any code or interacting with the Lumminary API.|\n\n\n    Let's dive in, now. \n\n    * [**Overview**](#section/Introduction/Overview)\n\n\n    * [**Install Lumminary API Client and Toolkit**](#Install-Lumminary-API-Client-andor-Toolkit)\n\n    * [**Obtaining credentials**](#Obtaining-credentials)\n\n    * [**Query customers authorizations**](#Query-customers-authorizations)\n\n    * [**Query customer genetic data**](#Query-customer-genetic-data)\n\n    * [**Submit reports**](#Submit-reports)\n\n\n    * [**\"Connect with Lumminary\" button**](#the-connect-with-lumminary-button)\n\n\n    * [**API specs**](#tag/Lumminary)\n\n\n    ## Overview\n\n\n    In order to use Lumminary services, you'll need to install the Lumminary API Client or Toolkit. The Lumminary API Client and Toolkit are available in multiple programming languages, and we also provide a sandbox environment which you can use for integration and tests.\n\n\n    There are a couple of differences between the API Client and the Toolkit. Mainly, it's about the ease of use for integration. The Toolkit is basically a stand-alone application that facilitates the integration with the Lumminary API without the need to modify your already existing code.\n\n\n    You use the Lumminary API Client when you want to integrate it inside your own application. This means it gives you full flexibility regarding the integration into your own workflow.\n\n\n    You use the Lumminary Toolkit for an integration where the Toolkit is placed alongside your own application. You can use the Toolkit from the CLI - for example, to run a cronjob that processes incoming orders. The Toolkit uses the Lumminary API Client.\n\n\n    # Install Lumminary API Client and/or Toolkit\n\n\n    We provide the Lumminary API Client and Toolkit in multiple programming languages - default are PHP (minimum version 7.0), Python2.7 and Python3. However, if you need them in another language (Java, Obj-C, JavaScript, C#, Perl, CURL), please contact us.\n\n\n\n    ## How to install the Lumminary API Client\n\n\n    #### PHP example:\n\n    The PHP Lumminary API Client is available at: https://github.com/Lumminary/lumminary-api-client-php\n\n\n    If you are already using [Composer](https://getcomposer.org), you can import the project by adding the following to your `composer.json`\n\n    ```json\n\n    \"repositories\": [\n        {\n            \"type\": \"git\",\n            \"url\": \"https://github.com/Lumminary/lumminary-api-client-php.git\",\n            \"reference\": \"master\"\n        }\n    ],\n\n    \"require\": {\n        \"lumminary/api-client-php\": \"v1.0.6\"\n    }\n\n    ```\n\n\n    Then run `composer update lumminary/api-client-php`\n\n\n    #### Python example:\n\n\n    The Python Lumminary API Client is available at: https://github.com/Lumminary/lumminary-api-client-python\n\n\n    To install directly, run\n\n\n    ```bash\n\n    pip install git+https://git@github.com/Lumminary/lumminary-api-client-python.git@v1.0.7#egg=lumminary-api-client\n\n    ```\n\n\n    Or add the following line in your requirements.txt\n\n\n    ```bash\n\n    git+https://git@github.com/Lumminary/lumminary-api-client-python.git@v1.0.7#egg=lumminary-api-client\n\n    ```\n\n\n    ## How to install the Lumminary Toolkit\n\n\n    #### PHP example:\n\n    The PHP Lumminary Toolkit is available at: https://github.com/Lumminary/lumminary-toolkit-php\n\n\n    To install the Lumminary Toolkit, run the following command where 'lumminary-toolkit-directory' is the directory where you want to install the Lumminary Toolkit:\n\n\n    `git clone git@github.com:Lumminary/lumminary-toolkit-php.git lumminary-toolkit-directory`\n\n\n    #### PYTHON example:\n\n\n    The Python Lumminary Toolkit is available at: https://github.com/Lumminary/lumminary-toolkit-python\n\n\n    To install the Lumminary Toolkit, run the following command where 'lumminary-toolkit-directory' is the directory where you want to install the Lumminary Toolkit:\n\n\n    ```bash\n\n    git clone git@github.com:Lumminary/lumminary-toolkit-python.git lumminary-toolkit-directory\n\n    cd lumminary-toolkit-directory\n\n    virtualenv env\n\n    source env/bin/activate\n\n    pip install -r requirements.txt\n\n    ```\n\n\n    Note that before running the toolkit, you should have the virtualenv enabled, like so : `source lumminary-toolkit-directory/env/bin/activate`\n\n\n    ## Toolkit Setup\n\n\n    We recommend to run the Toolkit in a cronjob; at every run it will check for new Authorizations (Orders) and will download them; afterwards it will check for a new reports folder inside the old authorizations, process the reports, and delete the processed Authorizations and Reports from your server. \n\n\n    The first step after you clone the Lumminary Toolkit project for your language is to configure it with your credentials. \n\n\n    Go to the Lumminary Toolkit base diretory `cd lumminary-toolkit-directory`. Under the Toolkit directory, you will find a file `config/config_template.json` which has the following structure:\n\n\n    ```json\n\n    {\n        \"api_key\": \u003cyour-api-key\u003e,\n        \"product_uuid\": \u003cyour-product-uuid\u003e,\n        \"api_host\": \"https:\\/\\/api.lumminary.com\\/v1\",\n        \"output_root\": \u003cyour-authorization-data-basepath\u003e,\n        \"export_handler\": \u003cyour-export-handler-class\u003e,\n        \"product_name\": \u003cyour-product-name\u003e,\n        \"operations\": [\n            \"pull_datasets\",\n            \"push_reports\"\n        ],\n        \"optional\": {\n            \"dna_data_filename\": \"dna-data.tsv\",\n            \"authorization_metadata_filename\": \"authorization-metadata.json\"\n        }\n    }\n\n    ```\n\n\n    You should copy this config `cp config/config_template.json config/my-product1-config.json` then edit it `vim config/my-product1-config.json` to contain the following values:\n\n\n    | Config attribute | Example Value                      | Description |\n\n    |------------------|------------------------------------|-------------|\n\n    | api_key        | `\"TiiU...bqg==\"`                   |Your Lumminary API key.\u003cbr\u003e You can obtain it from the Lumminary Admin  |\n\n    | product_uuid   | `\"1234-1234-1234-1234\"`            |Your product UUID. This value can be obtained from the Lumminary Admin |\n\n    | api_host       | `\"https:\\/\\/api.lumminary.com\\/v1\"`   |   The API endpoint to use.\u003cbr\u003eFor the sandbox environment you can use \"https:\\/\\/sandbox-api.lumminary.com\\/v1\"    |\n\n    | output_root    | `\"/var/lumminary-orders/product1/\"`         | The base directory where the Toolkit places the Authorizations for your Product \u003cbr\u003e The Lumminary Toolkit will *never* overwrite Authorization data or create this directory, to protect from overwrites or typos    |\n\n    | export_handler |`\"export_handler_tsv\"`  | If you have a custom export handler, then your Lumminary contact will provide you with the name of your export handler.   |\n\n    | operations       |`[\"pull_datasets\", \"push_reports\"]`        | These are two optional parameters that define the tasks that the Toolkit should perform. Possible values are: \u003cbr\u003e 1. `pull_datasets` - this tells the Toolkit to download the Customer Authorization (Customer details and genetic data) \u003cbr\u003e 2. `push_reports` - this tells the Toolkit to push the results to the API; see below for more details|\n\n    | optional       | `{}`                               | Export handler specific value |\n\n\n    After updating the config file for your Toolkit, it should look similar to (Note that these are all dummy values) :\n\n\n    ```json\n\n    {\n        \"api_key\": \"TiiU...bqg==\",\n        \"product_uuid\": \"1234-1234-1234-1234\",\n        \"api_host\": \"https:\\/\\/api.lumminary.com\\/v1\",\n        \"output_root\": \"\\/var\\/lumminary-orders\\/product1\\/\",\n        \"export_handler\": \"export_handler_tsv\",\n        \"product_name\": \"product 1\",\n        \"operations\": [\n            \"pull_datasets\",\n            \"push_reports\"\n        ],\n        \"optional\": {\n            \"dna_data_filename\": \"dna-data.tsv\",\n            \"authorization_metadata_filename\": \"authorization-metadata.json\"\n        }\n    }\n\n    ```\n\n\n    You can now save and exit the text editor `:wq` and start polling the API for new Authorizations :\n\n\n    Python\n\n\n    ```bash\n\n    # While still in the \u003clumminary-toolkit\u003e directory\n\n    source env/bin/activate;\n\n    python lumminary_partner_toolkit.py --config-path config/my-lumminary-product1-config.json\n\n    ```\n\n\n    PHP\n\n\n    ```bash\n\n    # While still in the \u003clumminary-toolkit\u003e directory\n\n    php lumminary-partner-toolkit.php --config-path config/my-lumminary-product1-config.json\n\n    ```\n\n\n    When your Product receives new Authorizations, the Toolkit will pull all the relevant data and save it in the following files:\n\n\n    ```bash\n\n    # The DNA data file. Format compatible with 23AndMe by default\n\n    \u003coutput_root\u003e/\u003cauthorization_uuid\u003e/dna-data.tsv\n\n\n    # The Authorization metadata\n\n    \u003coutput_root\u003e/\u003cauthorization_uuid\u003e/authorization.json\n\n    ```\n\n\n    The contents of the files pulled when processing an Authorization are as follows:\n\n\n    ```bash\n\n    $ head -n 5 \u003coutput_root\u003e/\u003cauthorization_uuid\u003e/dna-data.tsv\n\n    # rsid      chromosome  position        genotype\n\n    rs12070387  1           6267531         CC\n\n    rs149124387 1           12025561        CC\n\n    rs116458387 1           14920119        AA\n\n    rs4436387   1           15498452        CC\n\n\n    $ cat \u003coutput_root\u003e/\u003cauthorization_uuid\u003e/authorization.json \n\n    {\n        \"authorization\": \u003cauthorization_uuid\u003e,\n        \"created_timestamp_utc\": 1542920184,\n        \"customer\": \u003ccustomer_uuid\u003e,\n        \"customer_address\": {\n            \"address1\": \u003caddress1\u003e,\n            \"address2\": \u003caddress2\u003e,\n            \"city\": \u003ccity\u003e,\n            \"country\": \u003ccountry\u003e,\n            \"state\": \u003cstate\u003e,\n            \"zipcode\": \u003czipcode\u003e \n        },\n        \"customer_email\": \u003ccustomer_email\u003e,\n        \"customer_name\": {\n            \"first_name\": \u003ccustomer_first_name\u003e,\n            \"last_name\": \u003ccustomer_last_name\u003e\n        },\n        \"dataset\": \u003cdataset_uuid\u003e,\n        \"product\": \u003cyour_product_uuid\u003e\n    }\n\n    ```\n\n\n    After the Toolkit downloaded the Authorizations, you need to process the Customer genetic data file and the Customer details, individually. The Lumminary API supports multiple types of products:\n\n\n    | Scenario | How to Report |                    \n\n    |------------------|------------------------------------|\n\n    |The product is a file (.pdf, .jpeg etc.) | Put the result file(s) into the `tmp_reports` directory. Please refer to the Note underneath this table. |\n\n    |The product requires authentication | Create a file with the name `result.json` into the `tmp_reports` directory, with the following content: \u003cbr\u003e `{ \"credentials\": { \"username\": \"username@example.com\", \"password\": \"your generated password\", \"url\": \"https://your-website.com/report\"}}`\u003cbr\u003e The `url` should point to a login page that upon authentication redirects the user to the report page. You can find the customer's email address in the `authorization-metadata.json` and the `password` attribute must be a secure password. Please refer to the Note underneath this table. |\n\n    |The product is a physical product| Create a file with the name `result.json` into the `tmp_reports` directory, with the following content: \u003cbr\u003e `{\"physical_product\": { \"physical_product_completed\": true }}` \u003cbr\u003e This should be done upon dispatch. Please refer to the Note underneath this table. |\n\n    |An error occurred| Create a file with the name `result.json` into the `tmp_reports` directory, with the following content: \u003cbr\u003e `{ \"unfulfillable\": {\"error\": \"Reasons for why it is unfulfillable\", }}` \u003cbr\u003e The error message is for Lumminary internal usage, and it won't be visible to the customer. This will delete your Authorization, making it unuseable thereafter. So please use this only for unfixable errors, and never for temporary errors you attempt to resolve. Please refer to the Note underneath this table. |\n\n\n    ###### Note\n\n    For each scenario above, we recommend you use a temporary directory to avoid uploading incomplete files or reports. So your workflow should be:\n\n    * create a temporary directory inside the `\u003coutput_root\u003e/\u003cauthorization_uuid\u003e`, such as `\u003coutput_root\u003e/\u003cauthorization_uuid\u003e/tmp_reports/`  \n\n    * place your result file(s) in the `tmp_reports` directory (as in the above table)\n\n    * rename the directory from `tmp_reports` to `reports`\n\n\n    We recommend running the Toolkit in a cronjob, wrapped by some locking mechanism. Also, Toolkit logs are very minimal but can be very helpful when debugging an issue, so please consider saving them to a file. For example, the following cronjob runs the Toolkit every minute:\n\n\n    ```bash\n\n    # Open the crontab\n\n    crontab -e\n\n    ```\n\n\n    PHP Toolkit\n\n\n    ```bash\n\n    # Add the following line (replace \u003clumminary-toolkit-directory\u003e with the absolute path of the Lumminary Toolkit)\n\n    * * * * * flock /var/lock/lumminary-toolkit.lock php \u003clumminary-toolkit-directory\u003e/lumminary-partner-toolkit.php --config-path \u003clumminary-toolkit-directory\u003e/config/my-product1-config.json \u003e\u003e /var/log/lumminary-toolkit.log\n\n    ```\n\n\n    Python Toolkit\n\n\n    ```bash\n\n    # Add the following line (replace \u003clumminary-toolkit-directory\u003e with the absolute path of the Lumminary Toolkit)\n\n    * * * * * flock /var/lock/lumminary-toolkit.lock source env/bin/activate; python \u003clumminary-toolkit-directory\u003e/lumminary_partner_toolkit.py --config-path \u003clumminary-toolkit-directory\u003e/config/my-product1-config.json\n\n    ```\n\n\n    ## API endpoints\n\n    Lumminary provides two endpoint APIs, sandbox and production. You can use the sandbox for your integration and testing, simulate orders, upload genetic data, and generate reports. The sandbox works exactly like the production environment, and you can test your end-to-end integration.\n\n\n    In order to simulate a complete order, you need to use this test credit card: \n\n\n    |Credit card number  | Expiration date| CVV2|\n\n    |--------------------|----------------|-----|\n\n    |4242 4242 4242 4242 |  12/30         | 123 |\n\n\n    ### Sandbox\n\n    website: [sandbox-www.lumminary.com](https://sandbox-www.lumminary.com)\n\n\n    api-hostname: [sandbox-api.lumminary.com/v1](https://sandbox-api.lumminary.com/v1)\n\n\n    ### Production\n\n    website: [lumminary.com](https://lummianary.com)\n\n\n    api-hostname: [api.lumminary.com/v1](https://api.lumminary.com/v1)\n\n\n    # Obtaining credentials\n\n    To obtain credentials, you need to register as a Lumminary partner. You can do this by [filling in this form](https://lumminary.com/register-for-connect-with-lumminary).\n\n\n    You will then receive the following:\n\n\n    |Credentials|Description|\n\n    |-------|-------|\n\n    |Product UUID|Each product you register on the Lumminary platform gets an UUID which will be used to identify that product to the Lumminary API|\n\n    |API key|The secret API key associated with the Product UUID|\n\n    |Partner UUID|Upon your first registration on the Lumminary platform, you will receive a single Partner UUID, which identifies you as one entity, regardless of product. This identifier is used for the Connect with Lumminary (CWL) functionality.|\n\n    |CWL Encryption Key|The CWL encryption key is associated with the Partner UUID and is used to encrypt all communication for the Connect with Lumminary functionality.|\n\n\n    Each product or service needs to have its own product UUID and API key, which means you have to fill in the form for all products and services that require access to Lumminary customer data.  \n\n\n    ## Configure the credentials to the Lumminary API Client\n\n    The easiest way to set up your credentials is to use an environment file.\n\n\n    For this, you must create a file named `env.json` (but any name will do) in your project directory, which should contain:\n\n    ```json\n\n    {\n        \"product_uuid\": \u003cyour_product_uuid\u003e,\n        \"api_key\": \u003cyour_product_api_key\u003e,\n        \"role\": \"role_product\",\n        \"api_host\": \u003clumminary_api_hostname_endpoint\u003e\n    }\n\n    ```\n\n\n    In order to load the Credentials from the `env.json`, you can use the following code:\n\n\n    #### PHP example:\n\n    ```php\n\n    require_once(__DIR__.\"/vendor/autoload.php\");\n\n    $credentials = new Lumminary\\Client\\Credentials();\n\n    $credentials-\u003eloadJSONCredentials(__DIR__.\"/env.json\");\n\n    ```\n\n\n    #### Python example:\n\n    ```python\n\n    import lumminary_sdk as lumminary\n\n    import os\n\n\n    credentials = lumminary.Credentials()\n\n    credentials.load_json_credentials(\n        os.path.join(\n            os.getcwd(),\n            \"env.json\"\n        )\n    )\n\n    ```\n\n\n    ## Alternative credentials configuration\n\n    You also have the option of passing the credentials as constructor parameters when instantiating the `Credentials` class.\n\n\n    #### PHP example:\n\n\n    ```php\n\n    require_once(__DIR__.\"/vendor/autoload.php\");\n\n    $credentials = new Lumminary\\Client\\Credentials(\n        \u003clumminary_api_hostname_endpoint\u003e,\n        \u003cyour_product_uuid\u003e,\n        \u003cyour_product_api_key\u003e\n    );\n\n    ```\n\n\n    #### Python example:\n\n\n    ```python\n\n    import lumminary_sdk as lumminary\n\n\n    credentials = lumminary.Credentials(\n        product_uuid = \u003cyour_product_uuid\u003e,\n        api_key = \u003cyour_product_api_key\u003e,\n        api_host = \u003clumminary_api_hostname_endpoint\u003e,\n        role = \"role_product\"\n    )\n\n    ```\n\n\n    ## Create an API instance\n\n\n    With the credentials configured and loaded, you can create an API client like so : \n\n\n    #### PHP example\n\n\n    ```php\n\n    $apiClient = new Lumminary\\Client\\ApiClient($credentials);\n\n    ```\n\n\n    #### Python example\n\n\n    ```python\n\n    apiClient = lumminary.LumminaryApi(credentials)\n\n    ```\n\n\n    # Query customers authorizations\n\n    An Authorization represents permission from a client to access their personal and genetic data. \n\n\n    There are 2 situations where customers grant you access to their data: \n\n    * when a customer buys your product from the Lumminary DNA App Store\n\n    * when a customer clicks on the \"Connect with Lumminary\" button on your website\n\n\n    Each time either of the above situations happens, our platform creates an Authorization UUID. You can reliably assume that if you have an Authorization UUID, you automatically have access to all the personal information and genetic data needed by your products and services. After you process an Authorization you need to mark it as processed; processed Authorizations will no longer be on the list of new authorizations.\n\n\n    There are two ways to obtain the Authorization UUID:\n\n    * _polling_ - this method allows you to periodically interrogate our API and pulls the list of Authorization UUIDs. \n\n    * _webhooks_ (coming soon) - this method allows our API to push the Authorization UUIDs into your platform.\n\n\n    ## Poll method\n\n\n    To use the polling method, your servers periodically interrogate for new Authorization UUIDs. Please keep in mind that Authorizations not marked as processed will always be returned when polling for new Authorizations. This means there's a risk of parallel processing the same Authorization. To avoid this, you can, for example, consider using locking when processing.\n\n\n    #### A PHP example of using the polling API looks like:\n\n\n    ```php\n\n    $productAuthorizations = $apiClient-\u003egetAuthorizationsQueue(\n        $apiClient-\u003egetCredentials()-\u003egetProductUuid(),\n    );\n\n\n    foreach($productAuthorizations as $productAuthorization)\n\n    {\n        /**\n         *  Add your code for processing customer data here\n         **/ \n        \n        // Mark Authorization as processed \n        $apiClient-\u003epostProductAuthorization(\n            $productAuthorization[\"productUuid\"],\n            $productAuthorization[\"authorizationUuid\"]\n        );\n    }\n\n    ```\n\n\n    #### A Python example of using the polling API looks like:\n\n\n    ```python\n\n    productAuthorizations = apiClient.get_authorizations_queue(\n        apiClient.get_credentials().product_uuid\n    )\n\n\n    for productAuthorization in productAuthorizations:\n        #######\n        #   Add your code for processing customer data here\n        #######\n\n        # Mark Authorization as processed\n        apiClient.post_product_authorization(\n            productAuthorization.product_uuid,\n            productAuthorization.authorization_uuid\n        )\n    ```\n\n\n    Based on the Authorization object obtained previously, we can now query the customer's information (personal details and genetic data).\n\n\n    #### PHP example:\n\n    ```php\n\n    $authorizationMetadata = $apiClient-\u003eauthorizationMetadata($productAuthorization[\"authorizationUuid\"]);\n\n    ```\n\n\n    #### Python example:\n\n    ```python\n\n    authorizationMetadata = apiClient.authorization_metadata(productAuthorization.authorization_uuid)\n\n    ```\n\n\n    #### authorizationMetadata object object structure\n\n\n    | Attribute name            | Description                                                                                |\n\n    |:-------------------------:|:-------------------------------------------------------------------------------------------|\n\n    | `customer`                | The UUID of the customer granting the Authorization                                        |\n\n    | `product`                 | The UUID of the product that was authorized (your product UUID)                            |\n\n    | `authorization`           | The UUID of the granted Authorization.                                                     |\n\n    | `created_timestamp_utc`   | The unix timestamp in UTC time zone when the customer granted the Authorization            |\n\n    | `dataset`                 | (present only if requested) The UUID of the dataset authorized by the customer             |\n\n    | `customer_email`          | (present only if requested) Customer contact email                                         |\n\n    | `customer_name`           | (present only if requested) Customer name                                                  |\n\n    | `customer_address`        | (present only if requested) Customer address                                               |\n\n\n    By *present only if requested* we mean this attribute will be returned if at the time of configuring either the \"Connect with Lumminary\" button or your product, you have explicitly requested for that particular set of data.\n\n\n    # Query customer genetic data\n\n    Based on the Authorization object obtained previously, now we have authorizationMetadata which contains the customer's information (personal details and genetic data). Let's use this information to extract some customer genetic data.\n\n\n    ## Get individual SNPs\n\n    Out of all the available SNPs in the dataset, you can only access those for which the customer has previously granted permission.\n\n\n    For example, fetching details for a particular SNP:\n\n\n    #### PHP example:\n\n    ```php\n\n    $rsId = \"rs114326054\";\n\n    $snpDetails = null;\n\n\n    // check to see if you have access to the customer genetic data\n\n    if (isset($productAuthorization[\"scopes\"][\"dataset\"]))\n\n    {\n        // get SNP information\n        $snpDetails = $apiClient-\u003egetClientSnp(\n            $productAuthorization[\"clientUuid\"],\n            $productAuthorization[\"scopes\"][\"dataset\"],\n            $rsId\n        );\n    }\n\n    ```\n\n\n    #### Python example:\n\n    ```python\n\n    rsId = \"rs114326054\"\n\n    snpDetails = None\n\n\n    # check to see if you have access to the customer genetic data\n\n    if hasattr(productAuthorization.scopes, \"dataset\"):\n        # get SNP information\n        snpDetails = apiClient.get_client_snp(\n            productAuthorization.client_uuid,\n            productAuthorization.scopes.dataset,\n            rsId\n        )\n    ```\n\n\n    ##### The snpDetails object will contain these important attributes:\n\n\n    | Attribute name PHP     | Attribute name Python        | Description                                               |\n\n    |:-------------------------:|:-------------------------:|:----------------------------------------------------------|\n\n    | `snpId`                 | `snp_id`                    | The rsid of the SNP                                       |\n\n    | `referenceGenome`        |`reference_genome`          | The reference genome known to be used by the Dataset's source. \u003cbr\u003e This impacts the reference allele, location, and based on the dbSNP build, also the SNP's accession |\n\n    | `genotypedAlleles`       | `genotyped_alleles`        | The genotype value of the customer's queried SNP. \u003cbr\u003e\u003cbr\u003e If the attribute of this SNP has the `phased` flag set to True, \u003cbr\u003ethe first items in the lists for all SNPs will be on the same inherited chromosome, \u003cbr\u003eand analogous for the second item. \u003cbr\u003e\u003cbr\u003e If the SNP is unphased, the order of the items is irrelevant |\n\n    |`phased`                   | `phased`                  | A boolean. True if the SNP is known to be phased, False otherwise |\n\n    |`chromosomeAccession`     | `chromosome_accession`     | This is the chromosome accession number where the SNP is located; in the format of NC_00x |\n\n    |`location`                 | `location`                | This is the customer's SNP's location on the chromosome |\n\n\n    When trying to access any customer's SNP for which you don't have permission, an `Unauthorized` exception will be raised.\n\n\n    ## Get all authorized SNPs\n\n\n    The function below returns all SNPs your product has access to. These are all the SNPs configured as mandatory for your product, as well as all SNPs that are configured as optional and available in the customer's data set. We encourage you to use this option if you need to get all available SNPs, because it is faster than fetching SNP details one by one.\n\n\n    For example, fetching all authorized SNPs:\n\n\n    #### PHP example:\n\n    ```php\n\n    $datasetSnps = null;\n\n\n    // check to see if you have access to the customer genetic data\n\n    if (isset($productAuthorization[\"scopes\"][\"dataset\"]))\n\n    {\n        // get all authorized SNPs\n        $datasetSnps = $apiClient-\u003egetClientSnpGroup(\n            $productAuthorization[\"clientUuid\"], \n            $productAuthorization[\"scopes\"][\"dataset\"]\n        );\n    }\n\n    ```\n\n\n    #### Python example:\n\n    ```python\n\n    datasetSnps = None\n\n\n    # check to see if you have access to the customer genetic data\n\n    if hasattr(productAuthorization.scopes, \"dataset\"):\n        # get all authorized SNPs\n        datasetSnps = apiClient.get_client_snp_group(\n            productAuthorization.client_uuid,\n            productAuthorization.scopes.dataset\n        )\n    ```\n\n\n    ##### The datasetSnps variable will be a list of objects each having the following attributes:\n\n\n    | Attribute name PHP     | Attribute name Python        | Description                                               |\n\n    |:-------------------------:|:-------------------------:|:----------------------------------------------------------|\n\n    | `snpId`                  | `snp_id`                   | The rsid of the SNP                                       |\n\n    | `referenceGenome`        |`reference_genome`          | The reference genome known to be used by the Dataset's source. \u003cbr\u003e This impacts the reference allele, location, and based on the dbSNP build, also the SNP's accession |\n\n    | `genotypedAlleles`       | `genotyped_alleles`        | The genotype value of the customer's queried SNP. \u003cbr\u003e\u003cbr\u003e If the attribute of this SNP has the `phased` flag set to True, \u003cbr\u003ethe first items in the lists for all SNPs will be on the same inherited chromosome, \u003cbr\u003eand analogous for the second item. \u003cbr\u003e\u003cbr\u003e If the SNP is unphased, the order of the items is irrelevant |\n\n    |`phased`                   | `phased`                  | A boolean. True if the SNP is known to be phased, False otherwise |\n\n    |`chromosomeAccession`     | `chromosome_accession`     | This is the chromosome accession number where the SNP is located; in the format of NC_00x |\n\n    |`location`                 | `location`                | This is the customer's SNP's location on the chromosome |\n\n\n    When trying to access any customer's SNP for which you don't have permission, an `Unauthorized` exception will be raised.\n\n\n    ## Get Genes\n\n\n    Along with individual SNPs, you can also get all the authorized SNPs from a particular gene, that are available in the customer's dataset.\n\n\n    Here, by genes, we refer strictly to the genomic region that produces some protein, without considering regulatory or noncoding regions that influence gene expression.\n\n\n    The gene name (known as symbol) can be from either of these two databases - NCBI and Ensembl.\n\n\n    For example, fetching details for a gene symbol:\n\n\n    #### PHP example\n\n    ```php\n\n    $geneSymbol = \"C1ORF159\";\n\n    $geneDetails = null;\n\n    // check to see if you have access to the customer genetic data\n\n    if (isset($productAuthorization[\"scopes\"][\"dataset\"]))\n\n    {\n        // get all authorized SNPs within a gene\n        $geneDetails = $apiClient-\u003egetClientGene(\n            $productAuthorization[\"clientUuid\"],\n            $productAuthorization[\"scopes\"][\"dataset\"],\n            $geneSymbol\n        );\n    }\n\n    ```\n\n\n    #### Python example\n\n    ```python\n\n    geneSymbol = \"C1ORF159\"\n\n    geneDetails = None\n\n    # check to see if you have access to the customer genetic data\n\n    if hasattr(productAuthorization.scopes, \"dataset\"):\n        # get all authorized SNPs within a gene\n        geneDetails = apiClient.get_client_gene(\n            productAuthorization.client_uuid,\n            productAuthorization.scopes.dataset,\n            geneSymbol\n        )\n    ```\n\n\n    ##### All the geneDetails object attributes are\n\n\n    | Attribute name PHP | Attribute name Python    | Description                                                                              |\n\n    |:---------------------:|:---------------------:|:-----------------------------------------------------------------------------------------|\n\n    | `molecularLocation`  | `molecular_location`   | An object containing the location of the gene within the chromosome - see below the molecular location object structure  |\n\n    | `snps`                | `snps`                | A list of SNP objects present in the gene - see below the SNP object structure           |\n\n    | `symbol`              | `symbol`              | The gene's accession string (name)                                                       |\n\n\n    ##### Molecular location attributes \n\n\n    | Attribute name PHP     | Attribute name Python    | Description                                                                              |\n\n    |:-------------------------:|:---------------------:|:-----------------------------------------------------------------------------------------|\n\n    | `chromosomeAccession`    | `chromosome_accession` | The scaffold/chromosome on which the gene is placed                                      |\n\n    | `start`                   | `start`               | The gene's start position on the scaffold                                                |\n\n    | `stop`                    | `stop`                | The gene's stop position on the scaffold                                                 |\n\n\n    ##### SNP object structure\n\n\n    | Attribute name PHP     | Attribute name Python    | Description                                                                              |\n\n    |:-------------------------:|:---------------------:|:-----------------------------------------------------------------------------------------|\n\n    | `referenceGenome`        | `reference_genome`     | The reference genome known to be used by the Dataset's source. \u003cbr\u003e This impacts the reference allele, location, and based on the dbSNP build, also the SNP's accession|\n\n    | `genotypedAlleles`       | `genotyped_alleles`    | The genotype value of the customer's queried SNP. \u003cbr\u003e\u003cbr\u003e If the attribute of this SNP has the `phased` flag set to True, \u003cbr\u003ethe first items in the lists for all SNPs will be on the same inherited chromosome, \u003cbr\u003eand analogous for the second item. \u003cbr\u003e\u003cbr\u003e If the SNP is unphased, the order of the items is irrelevant                                          |\n\n    | `phased`                  | `phased`              | A boolean. True if the SNP is known to be phased, False otherwise                         |\n\n    | `chromosomeAccession`    | `chromosome_accession` | This is the chromosome accession number where the SNP is located; in the format of NC_00x |\n\n    | `location`                | `location`            | This is the customer's SNP's location on the chromosome                                   |\n\n\n    ## Get customer genetic data in 23andMe tsv format\n\n\n    If your platform is already compatible with 23andMe genotype data files, you can use this specific function to generate data in the 23andMe format - list of rows in tab separated values.\n\n\n    #### PHP example:\n\n    ```PHP\n\n    $authorizationDnaData = $apiClient-\u003eauthorizationDnaData($productAuthorization[\"authorizationUuid\"]);\n\n    ```\n\n\n    #### Python example\n\n    ```python\n\n    authorizationDnaData = apiClient.authorization_dna_data(productAuthorization.authorization_uuid)\n\n    ```\n\n\n    `authorizationDnaData` contains a list of rows in a tsv (tab delimited values)/csv format (23andme-compatible)\n\n\n    # Submit reports\n\n\n    After you finish analysing the customer's genetic data, we need to inform the customer their analysis is complete. To do this, you will notify us using the function below. Finally, the customer will then:\n\n\n    * access their report file through a written electronic document (eg. .pdf or .doc)\n\n    * access their report on your website under an account with a username and a password or\n\n    * receive a physical product\n\n\n    ## How to submit a report file\n\n\n    When you submit such a report file, Lumminary will save this document into the customer's account, from which the customer will then be able to access it directly.\n\n\n    #### PHP example\n\n    ```php\n\n    $pathToReportFile = \u003cpath_to_report_file\u003e;\n\n    $fileReport = new \\SplFileObject($pathToReportFile); \n\n    $friendlyFileName = \"report_file_name\"; //optional, give a friendly name to your report file\n\n    $apiClient-\u003epostAuthorizationResultFile(\n       $productAuthorization[\"productUuid\"],\n       $productAuthorization[\"authorizationUuid\"],\n       $fileReport,\n       $friendlyFileName\n    );\n\n    ```\n\n\n    #### Python example\n\n    ```python\n\n    pathToReport = \u003cpath_to_report_file\u003e\n\n    originalFilename = \"report_file_name\" #optional, give a friendly name to your report file\n\n    apiClient.post_authorization_result_file(\n       productAuthorization.product_uuid,\n       productAuthorization.authorization_uuid,\n       pathToReport,\n       originalFilename\n    )\n\n    ```\n\n\n    If you need to upload multiple files, you have to call the function for each file, one at a time. \n\n\n    ## How to submit a report so the customer can access it on your website\n\n\n    If the customer's results can be accessed on your website, you will need to create a customer account on your platform, generating a user and password which will be sent through the Lumminary API into the customer's Lumminary account. \n\n\n    In case you don't generate a user and a password for the customer to access their report, use the function below with \"null\" value to username and password. We recommend you use the URL for customer reports on a dedicated page for reports only, rather than your homepage or some other generic page.\n\n\n    #### PHP example:\n\n    ```php\n\n    $apiClient-\u003epostAuthorizationResultCredentials(\n       $productAuthorization[\"productUuid\"],\n       $productAuthorization[\"authorizationUuid\"],\n       \u003cusername_generated_by_you\u003e, //optional, default null\n       \u003cpassword_generated_by_you\u003e, //optional, default null\n       \u003creport_on_your_website_url\u003e // https://partnerwebsite.com/reports.php?reportid=a7508\n    );\n\n    ```\n\n\n    #### Python example:\n\n    ```python\n\n    apiClient.post_authorization_result_credentials(\n       productAuthorization.product_uuid,\n       productAuthorization.authorization_uuid,\n       \u003cusername_generated_by_you\u003e, # optional, default null\n       \u003cpassword_generated_by_you\u003e, # optional, default null\n       \u003creport_on_your_website_url\u003e # https://partnerwebsite.com/reports.php?reportid=a7508\n    )\n\n    ```\n\n\n    ## How to submit a physical product\n\n    In case you only send the customer a physical product and you don't generate any reports, you need to run the function below so we can mark the order as fulfilled and can inform the client.\n\n\n    #### PHP example:\n\n    ```php\n\n    $apiClient-\u003epostProductAuthorization(\n      $productAuthorization[\"productUuid\"],\n      $productAuthorization[\"authorizationUuid\"]\n    );\n\n    ```\n\n\n    #### Python example:\n\n    ```python\n\n    apiClient.post_product_authorization(\n       productAuthorization.product_uuid,\n       productAuthorization.authorization_uuid\n    )\n\n    ```\n\n\n    # The Connect with Lumminary button\n\n\n    The \"Connect with Lumminary\" functionality allows you to get customer details and genetic data from the Lumminary platform for free, anytime you want, for as long the customer grants you access. This functionality offers your customers the option to share their genetic data and other personal information (e.g. name, address, email etc.) stored on the Lumminary platform. \n\n\n    Having this button on your website makes it very easy for the customer to share their genetic data with you, as they don't have to download and re-upload their data on your site. The customer always has the option to revoke your access to both their personal details and their genetic data.\n\n\n    **`To protect the customer's privacy, you are not allowed to save their data anywhere. You can, however, always access their data on the Lumminary platform, for as long as they grant you access. If you generate a report based on customer data, you are allowed to save that report on your platform.`**\n\n\n    In order to implement this functionality on your website, this is what you need to know:\n\n    * Register your product on the Lumminary platform\n\n    * Add the \"Connect with Lumminary\" button to your website\n\n    * Configure your website to retrieve customer data\n\n    * Possible errors\n\n\n    ## Register your product on the Lumminary platform\n\n\n    If you're new to the Lumminary platform and don't already have any products in the DNA App Store, then you need to register by [filling in this form](https://lumminary.com/register-for-connect-with-lumminary).\n\n\n    You have to fill in the form for all products and services that require access to Lumminary customers' genetic data.  \n\n\n    ## Add the Connect with Lumminary button to your website\n\n\n    Since the CWL flow involves encrypting and decrypting data, we recommend installing the Lumminary API Client, where you'll find some specific helper functions. \n\n\n    In order to enable the button, you have to include the following script in the `\u003chead\u003e` tag of all the pages where you want to enable the “Connect with Lumminary” button:\n\n\n    ```html\n\n    \u003chead\u003e\n        \u003cscript defer src=\"https://lumminary.com/cwl/cwl.js\"\u003e\u003c/script\u003e\n    \u003c/head\u003e\n\n    ```\n\n\n    The Javascript creates a CSRF token and attaches it to the button to be transmitted and verified on our servers each time a user clicks on the button. The CSRF token expires after 5 minutes. In case the CSRF token is expired or tampered, the user will be redirected to your website where it's up to you to decide what to do next - reload the page with the button or show the customer an error message.\n\n\n    The `cwl.js` file is loaded as a deferred resource, which means that it will load after all the webpage code execution has been finished, so it will not have any impact on your website load speed.\n\n\n    ### Chose a button colour\n\n\n    There are two type of buttons, so you can pick one that matches your branding. The buttons are SVG images, which means that you can scale them up or down to fit your design, without compromising on image quality. You can do this by changing the image height.\n\n\n    ##### a. White button version\n\n\n\n    \u003cimg src=\"https://lumminary.com/cwl/connect-with-lumminary-white.svg\" alt=\"Lumminary DNA tests\" height=\"50\" title=\"Connect with Lumminary\"/\u003e\n\n\n    \u003cbr\u003e\n\n\n    ```html\n\n    \u003ca class=\"lumminary-connect-btn\" data-partner-uuid=\"\u003cpartner-UUID\u003e\" data-request=\"\u003crequest\u003e\" style=\"cursor:pointer; text-decoration:none;\" href=\"https://lumminary.com\"\u003e\n       \u003cimg src=\"https://lumminary.com/cwl/connect-with-lumminary-white.svg\" alt=\"Lumminary DNA tests\" height=\"50\" title=\"Connect with Lumminary\"/\u003e\n    \u003c/a\u003e\n\n    ```\n\n\n    ##### b.  Black button version\n\n\n    \u003cimg src=\"https://lumminary.com/cwl/connect-with-lumminary-black.svg\" alt=\"Lumminary DNA tests\" height=\"50\" title=\"Connect with Lumminary\"/\u003e\n\n\n    \u003cbr\u003e\n\n\n    ```html\n\n    \u003ca class=\"lumminary-connect-btn\" data-partner-uuid=\"\u003cpartner-UUID\u003e\" data-request=\"\u003crequest\u003e\" style=\"cursor:pointer; text-decoration:none;\" href=\"https://lumminary.com\"\u003e\n       \u003cimg src=\"https://lumminary.com/cwl/connect-with-lumminary-black.svg\" alt=\"Lumminary DNA tests\" height=\"50\" title=\"Connect with Lumminary\"/\u003e\n    \u003c/a\u003e\n\n    ```\n\n\n    ## Button configuration\n\n\n    Each button has 2 attributes which need to be configured:\n\n\n    1. **data-partner-uuid** where you have to add your partner UUID (you have received the partner UUID after filling in the form for product registration). \n\n    2. **data-request** which is a string obtained by encrypting a serialized JSON (you have received the CWL encryption key after filling in the form for product registration). See details below. \n\n\n    #### Data-request object\n\n\n    The data-request object has a standard format which needs to be preserved. It is formed of two types of data, some mandatory and some optional. You can use the optional fields to add any metadata or other information for your own use. The data-request object is going to be returned with the response from the authentication without being altered.\n\n\n    ##### Mandatory information\n\n\n    The mandatory information is a list of scopes which you ask the client to grant permission for. These scopes are comma delimited, and the possible options are: `address`, `email`, `dataset`.\n\n\n    The scopes _address_, _email_, and _dataset_ can be used in any combination; you must request at least one scope.\n\n\n    | Attribute name    | Description                                         |\n\n    |:-----------------:|:----------------------------------------------------|\n\n    | `address`         | Requests access to a customer's name and address.   |\n\n    | `email`           | Requests access to a customer's email address.      |\n\n    | `dataset`         | Requests access to a customer's genetic data        |\n\n\n    #### PHP example:\n\n    ```php\n\n    $objAuthorizationRequest [\"scopes\"] = \"address,dataset,email\";\n\n    ```\n\n\n    #### Python example:\n\n    ```python\n\n    objAuthorizationRequest [\"scopes\"] = \"address,dataset,email\"\n\n    ```\n\n\n    Product UUID is your `productUuid` for which you ask customer permissions.\n\n\n    #### PHP example:\n\n    ```php\n\n    $objAuthorizationRequest[\"productUuid\"] = $credentials-\u003egetProductUuid();\n\n    ```\n\n\n    #### Python example:\n\n    ```python\n\n    objAuthorizationRequest[\"productUuid\"] = credentials.product_uuid\n\n    ```\n\n\n    ##### Optional information\n\n\n    In the optional part of the object, you can add any useful data, such as customer ID,  session ID, or any parameter which can help you identify the response from Lumminary.\n\n\n    #### PHP example:\n\n    ```php\n\n    $objAuthorizationRequest[\"customData\"] = array();\n\n    $objAuthorizationRequest[\"customData\"][\"customerId\"] = \u003cpartner-customer-id\u003e;\n\n    $objAuthorizationRequest[\"customData\"][\"websiteSession\"] = \u003ccustomer-session\u003e;\n\n    $objAuthorizationRequest[\"customData\"][\"customData3\"] = \u003cSome addional data\u003e;\n\n    ```\n\n\n    #### Python example:\n\n    ```python\n\n    objAuthorizationRequest[\"customData\"] = {}\n\n    objAuthorizationRequest[\"customData\"][\"customerId\"] = \u003cpartner-customer-id\u003e\n\n    objAuthorizationRequest[\"customData\"][\"websiteSession\"] = \u003ccustomer-session\u003e\n\n    objAuthorizationRequest[\"customData\"][\"customData3\"] = \u003cSome addional data\u003e\n\n    ```\n\n\n    See below a complete example for a data-request object:\n\n\n    #### PHP example:\n\n    ```php\n\n    $objAuthorizationRequest[\"scopes\"] = \"address,dataset,email\";\n\n    $objAuthorizationRequest[\"productUuid\"] = \u003cproduct-UUID\u003e;\n\n\n    $objAuthorizationRequest[\"customData\"] = array();\n\n    $objAuthorizationRequest[\"customData\"][\"customerId\"] = \u003cpartner-customer-id\u003e;\n\n    $objAuthorizationRequest[\"customData\"][\"websiteSession\"] = \u003ccustomer-session\u003e;\n\n    $objAuthorizationRequest[\"customData\"][\"customData3\"] = \u003cSome addional data\u003e;\n\n    ```\n\n\n    #### Python example:\n\n    ```python\n\n    objAuthorizationRequest = {}\n\n    objAuthorizationRequest[\"scopes\"] = \"address,dataset,email\"\n\n    objAuthorizationRequest[\"productUuid\"] = \u003cproduct-UUID\u003e\n\n\n    objAuthorizationRequest[\"customData\"] = {}\n\n    objAuthorizationRequest[\"customData\"][\"customerId\"] = \u003cpartner-customer-id\u003e\n\n    objAuthorizationRequest[\"customData\"][\"websiteSession\"] = \u003ccustomer-session\u003e\n\n    objAuthorizationRequest[\"customData\"][\"customData3\"] = \u003cSome addional data\u003e\n\n    ```\n\n\n    ## Creating the Authorization Request\n\n\n    The previously generated object (`objAuthorizationRequest`) will now need to be encrypted. In order to be able to encrypt the object and also query the Lumminary API to obtain the customer details and genetic data, you need to have the Lumminary API Client installed. If you haven't done this already, please follow these [steps](#Install-Lumminary-API-Client-andor-Toolkit).\n\n\n    ### Add data-request attribute\n\n\n    After you have the Lumminary API Client installed correctly you can use the command below:\n\n\n    #### PHP example:\n\n    ```php\n\n    // You have recieved the CWL encryption key after filling in the form for product registration\n\n    $partnerCwlKey = \u003cpartner-encryption-key\u003e;\n\n    $requestValueEncryptedUrlEncoded = Lumminary\\Client\\LumminaryApi::cwl_data_request_build(\n        $objAuthorizationRequest,\n        $partnerCwlKey\n    );\n\n    ```\n\n\n    #### Python example:\n\n    ```python\n\n    import lumminary_sdk as lumminary\n\n\n    # You have recieved the CWL encryption key after filling in the form for product\n\n    partnerCwlKey = \u003cpartner-encryption-key\u003e \n\n    requestValueEncryptedUrlEncoded = lumminary.LumminaryApi.cwl_data_request_build(objAuthorizationRequest, partnerCwlKey)\n\n    ```\n\n\n    The resulting string should be added in the `data-request` attribute of the `\u003ca\u003e` tag of the \"Connect with Lumminary\" button.\n\n\n    ### Add data-partner-uuid attribute\n\n\n    Add the `data-partner-uuid` in the `data-partner-uuid` attribute of the `\u003ca\u003e` tag of the \"Connect with Lumminary\" button. You have received the partner UUID after filling in the form for product registration.\n\n\n    An example of a button correctly configured should look like this:\n\n\n    ```html\n\n    \u003ca class=\"lumminary-connect-btn\" data-partner-uuid=\"4231-7446-2543-6542\" data-request=\"7LfMX811Als0l%2FAvf84pB7n3mcycnTjgWl1FaVNffdqiOApMn4HAnk0Ux6eatObfYmxf1xPRjo7nBojsL4ImgOL932NK2Ei4VoUXjs9Y%2BcvphI0kxBSblLaeVXNPbJO9LsuNP%2BHJzDBAnZZdAObgYxHH2QDY3VD%2Ff%2FBXKw9WYDdBssAoegMFEJ9GgYutFQ4nTPXAt%2FdWCqoxYbZrYpCj2Pphk9lstc4Ib%2BLNxKiEtNCmVGr6sgmR2lPBwgylTsEX%2FMRCJb6sdQyZBhvSQCMFb0p3%2B9tEwV0%3D\" style=\"cursor:pointer; text-decoration:none;\" href=\"https://lumminary.com\"\u003e\n       \u003cimg src=\"https://lumminary.com/cwl/connect-with-lumminary-white.svg\" alt=\"Lumminary DNA tests\" height=\"50\" title=\"Connect with Lumminary\"\u003e\n    \u003c/a\u003e\n\n    ```\n\n\n    ## Connect with Lumminary summary of user interaction\n\n\n    When a customer clicks on the “Connect with Lumminary” button, a pop-up window opens. After they choose which genetic file to share, the pop-up will automatically close and the user will be redirected to your callback URL in the parent window. Your callback URL needs to be predefined in the Lumminary partner portal. \n\n\n    The GET request from the client to your callback URL will contain two querystring parameters - `request` and `response`:\n\n\n    1. `request` – this is exactly the same request that you previously sent in the `data-request` field. You can decrypt it with the CWL encryption key which you used to encrypt it.\n\n    2. `response` – the response is an urlencoded encrypted serialized JSON object which contains the Authorization UUID and the Authorization UTC unix timestamp. You will use the Authorization UUID to get the customer's data with the Lumminary API Client. The response string is encrypted with your CWL encryption key, the same as the `data-request` parameter. \n\n\n    In order to decrypt the `response` parameter, you can use the following function:\n\n\n    #### PHP example:\n\n    ```php\n\n    // the entire callback URL, including the querystring parameters\n\n    $callbackUrlWithPayload = \"https://partnerwebsite.con/callback?request=...\u0026response=...\";\n\n\n    $cwlReturnObject = Lumminary\\Client\\LumminaryApi::cwl_url_query_extract(\n        $callbackUrlWithPayload, \n        $partnerCwlKey  \n    );\n\n    ```\n\n\n    #### Python example:\n\n    ```python\n\n    // the entire callback URL, including the querystring parameters\n\n    callback_url_with_payload = \"https://partnerwebsite.con/callback?request=...\u0026response=...\"\n\n\n    cwlReturnObject = apiClient.cwl_url_query_extract(\n        callback_url_with_payload,\n        partner_cwl_key\n    )\n\n    ```\n\n\n    The `cwlReturnObject` will now contain an object like the example below:\n\n\n    ```json\n\n    {\n        \"request\": \u003cyour-request-parameter-echoed\u003e,\n        \"response\": {\n            \"authorizationUuid\": \u003ccwl-authorization-uuid\u003e,\n            \"authorizationTimestamp\": \u003ccwl-authorization-created-timestamp\u003e\n        }\n    }\n\n    ```\n\n\n    With the Authorization UUID (`authorizationUuid`) you can [query all the customer details](#Query-customer-genetic-data) from the Lumminary platform.\n\n\n    ## Possible errors\n\n\n    When an error occurs, the customer is redirected to your callback URL. The redirect contains two querystring parameters - `request` and `response` - exactly like a regular response, but the `response` parameter contains an error object (see below) instead of an Authorization object.\n\n\n    #### PHP example:\n\n    ```php\n\n    // the entire callback url, including the querystring parameters\n\n    $callbackUrlWithPayload = \"https://partnerwebsite.con/callback?request=...\u0026response=...\";\n\n\n    $cwlReturnObject = Lumminary\\Client\\LumminaryApi::cwl_url_query_extract(\n        $callbackUrlWithPayload, \n        $partnerCwlKey  \n    );\n\n    ```\n\n\n    #### Python example:\n\n    ```python\n\n    # the entire callback url, including the querystring parameters\n\n    callback_url_with_payload = \"https://partnerwebsite.con/callback?request=...\u0026response=...\"\n\n\n    cwlReturnObject = apiClient.cwl_url_query_extract(\n        callback_url_with_payload,\n        partner_cwl_key\n    )\n\n    ```\n\n\n    Example of a return object (`cwlReturnObject`) containing an error message:\n\n\n    ```json\n\n    {\n        \"request\": \u003cyour-request-parameter-echoed\u003e,\n        \"response\": {\n            \"error\": {\n                \"id\": \u003cerror id\u003e,\n                \"message\": \u003cerror message\u003e\n            }\n        }\n    }\n\n    ```\n\n\n    | Error Id          | Error Message                                                                                |\n\n    |:-----------------:|:---------------------------------------------------------------------------------------------|\n\n    | 1                 | Invalid Security Token                                                                       |\n\n    | 2                 | Invalid Access Scopes                                                                        |\n\n    | 3                 | Customer refuses your request (this happens when the customer cancels instead of granting access) |\n  title: Lumminary\n  version: \"1.0\"\n  x-apisguru-categories:\n    - open_data\n  x-logo:\n    url: https://twitter.com/LumminaryDNA/profile_image?size=original\n  x-origin:\n    - format: swagger\n      url: https://api.lumminary.com/docs/swagger.json\n      version: \"2.0\"\n  x-providerName: lumminary.com\nsecurity:\n  - Bearer: []\ntags:\n  - description: A general-purpose genomic data API\n    name: Lumminary API Spec\npaths:\n  /auth/jwt:\n    post:\n      description: \u003e-\n        ## Note:\n\n        * The JWT tokens returned should be passed to any resource that requires authentication, in the Authentication header, in the format `Bearer: your-token-here`\n\n        * Only JWT authentication tokens are provided (no refresh tokens). These tokens are valid for 30 seconds from the moment they were issued\n      operationId: post_jwt_auth\n      parameters:\n        - description: An optional fields mask\n          in: header\n          name: X-Fields\n          schema:\n            type: string\n            format: mask\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                username:\n                  description: The email for a Client, or the API for a partner product\n                  type: string\n                password:\n                  description: The passowrd for a Client, or the API key for a service\n                  type: string\n                role:\n                  description: \"The role for which authentication will be made. Value :\n                    role_product\"\n                  type: string\n              required:\n                - username\n                - password\n                - role\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/JavascriptWebToken\"\n      security: []\n      summary: General-purpose authentication\n      tags:\n        - Lumminary API Spec\n      x-code-samples:\n        - lang: PHP\n          source: |-\n            $apiClient-\u003epostJwtAuth(\n                \"2569-7483-0660-1748\" /* $username */,\n                \"role_product\" /* $role */,\n                \"ay8KWCq2Oqoavwo...08sdhBofhIzCr7guP/Hk/4Pbcg==\" /* $password */\n            );\n        - lang: Python\n          source: \u003e-\n            apiClient.post_jwt_auth(\n                \"2569-7483-0660-1748\", # username\n                \"role_product\", # role\n                \"ay8KWCq2OqoavwozCM4z...8UGh8M08sdhBofhIzCr7guP/Hk/4Pbcg==\" # $password\n            )\n  \"/clients/{clientId}/datasets/{datasetId}/genes/{geneSymbol}\":\n    get:\n      description: \u003e-\n        Gets A gene by its symbol, which can be found by querying the reference/\n        resource.\n\n\n        Will return a 404 if a gene exists as a reference, but its genomic coordinates intersect no SNPs in the dataset\n      operationId: get_client_gene\n      parameters:\n        - description: An optional fields mask\n          in: header\n          name: X-Fields\n          schema:\n            type: string\n            format: mask\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ClientGene\"\n        \"404\":\n          description: Resource not found\n      summary: Get gene by symbol\n      tags:\n        - Lumminary API Spec\n      x-code-samples:\n        - lang: PHP\n          source: |-\n            $apiClient-\u003egetClientGene(\n                \"2569-7483-0660-1748\" /* $clientId */,\n                \"2954-6315-6362-1234\" /* $datasetId */,\n                \"A1BG-AS1\" /* $geneSymbol */\n            );\n        - lang: Python\n          source: |-\n            apiClient.get_client_gene(\n                \"2569-7483-0660-1748\", # clientId\n                \"2954-6315-6362-1234\", # datasetId\n                \"A1BG-AS1\" # geneSymbol\n            )\n    parameters:\n      - description: The UUID of the client\n        in: path\n        name: clientId\n        required: true\n        schema:\n          type: string\n      - description: The UUID of one of the client's dataset\n        in: path\n        name: datasetId\n        required: true\n        schema:\n          type: string\n      - description: The symbol of a gene to be fetched\n        in: path\n        name: geneSymbol\n        required: true\n        schema:\n          type: string\n  \"/clients/{clientId}/datasets/{datasetId}/snps/\":\n    get:\n      operationId: get_client_snp_group\n      parameters:\n        - description: An optional fields mask\n          in: header\n          name: X-Fields\n          schema:\n            type: string\n            format: mask\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ClientSNP\"\n                type: array\n        \"404\":\n          description: Resource not found\n      tags:\n        - Lumminary API Spec\n      x-code-samples:\n        - lang: PHP\n          source: $apiClient-\u003egetClientSnpGroup();\n        - lang: Python\n          source: |-\n            apiClient.get_client_snp_group(\n                \"2569-7483-0660-1748\", # clientId\n                \"2954-6315-6362-1234\", # datasetId\n            )\n    parameters:\n      - description: The UUID of the client\n        in: path\n        name: clientId\n        required: true\n        schema:\n          type: string\n      - description: The UUID of one of the client's dataset\n        in: path\n        name: datasetId\n        required: true\n        schema:\n          type: string\n    post:\n      description: SNPs that are not present in the dataset are ignored, 404 is returned\n        only if the dataset/client does not exist\n      operationId: post_client_snp_group\n      parameters:\n        - description: An optional fields mask\n          in: header\n          name: X-Fields\n          schema:\n            type: string\n            format: mask\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                snps:\n                  description: JSON-encoded list of snps to be fetched\n                  type: string\n              required:\n                - snps\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ClientSNP\"\n                type: array\n        \"404\":\n          description: Resource not found\n      summary: Get a large group of SNPs\n      tags:\n        - Lumminary API Spec\n      x-code-samples:\n        - lang: PHP\n          source: |-\n            $apiClient-\u003epostClientSnpGroup(\n                \"2569-7483-0660-1748\" /* $clientId */,\n                \"2954-6315-6362-1234\" /* $datasetId */,\n                array(\"rs59408664\", \"rs2162563\", \"rs116957611\") /* $arrSnps */\n            );\n        - lang: Python\n          source: |-\n            apiClient.post_client_snp_group(\n                \"2569-7483-0660-1748\", # clientId\n                \"2954-6315-6362-1234\", # datasetId\n                [\"rs59408664\", \"rs2162563\", \"rs116957611\"] # arrSnps\n            )\n  \"/clients/{clientId}/datasets/{datasetId}/snps/{snpId}\":\n    get:\n      description: \u003e-\n        Gets SNP information, as provided by the dataset.\n\n\n        If fetching this as an product, the client must have already granted access to the snip (see the 'products' group)\n      operationId: get_client_snp\n      parameters:\n        - description: An optional fields mask\n          in: header\n          name: X-Fields\n          schema:\n            type: string\n            format: mask\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ClientSNP\"\n        \"404\":\n          description: Resource not found\n      summary: Get SNP information\n      tags:\n        - Lumminary API Spec\n      x-code-samples:\n        - lang: PHP\n          source: |-\n            $apiClient-\u003egetClientSnp(\n                \"2569-7483-0660-1748\" /* $clientId */,\n                \"2954-6315-6362-1234\" /* $datasetId */,\n                \"rs5246234\" /* $snpId */\n            );\n        - lang: Python\n          source: |-\n            apiClient.get_client_snp(\n                \"2569-7483-0660-1748\", # clientId\n                \"2954-6315-6362-1234\", # datasetId\n                \"rs5246234\", # snpId\n            )\n    parameters:\n      - description: The UUID of the client\n        in: path\n        name: clientId\n        required: true\n        schema:\n          type: string\n      - description: The UUID of one of the client's dataset\n        in: path\n        name: datasetId\n        required: true\n        schema:\n          type: string\n      - description: The rsId of a SNP to be fetched\n        in: path\n        name: snpId\n        required: true\n        schema:\n          type: string\n  \"/products/{productId}\":\n    get:\n      operationId: get_product\n      parameters:\n        - description: An optional fields mask\n          in: header\n          name: X-Fields\n          schema:\n            type: string\n            format: mask\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Product\"\n        \"404\":\n          description: Product not found\n      summary: Get product details\n      tags:\n        - Lumminary API Spec\n      x-code-samples:\n        - lang: PHP\n          source: $apiClient-\u003egetProductAuthorizations();\n        - lang: Python\n          source: $apiClient-\u003egetProductAuthorizations();\n    parameters:\n      - description: The UUID of the product\n        in: path\n        name: productId\n        required: true\n        schema:\n          type: string\n  \"/products/{productId}/authorizations\":\n    get:\n      operationId: get_authorizations_queue\n      parameters:\n        - description: The first sequence number from which to fetch (the sequence number\n            of the last processed authorization)\n          in: query\n          name: seq_num_start\n          schema:\n            type: string\n        - description: An optional fields mask\n          in: header\n          name: X-Fields\n          schema:\n            type: string\n            format: mask\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Authorization\"\n                type: array\n        \"404\":\n          description: Product not found\n      tags:\n        - Lumminary API Spec\n      x-code-samples:\n        - lang: PHP\n          source: $apiClient-\u003egetProductAuthorizations();\n        - lang: Python\n          source: $apiClient-\u003egetProductAuthorizations();\n    parameters:\n      - description: The UUID of the product\n        in: path\n        name: productId\n        required: true\n        schema:\n          type: string\n  \"/products/{productId}/authorizations/{authorizationId}\":\n    get:\n      operationId: get_product_authorization\n      parameters:\n        - description: An optional fields mask\n          in: header\n          name: X-Fields\n          schema:\n            type: string\n            format: mask\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Authorization\"\n        \"404\":\n          description: Object not found\n      tags:\n        - Lumminary API Spec\n      x-code-samples:\n        - lang: PHP\n          source: $apiClient-\u003egetAuthorization();\n        - lang: Python\n          source: $apiClient-\u003egetAuthorization();\n    parameters:\n      - description: The UUID of the product\n        in: path\n        name: productId\n        required: true\n        schema:\n          type: string\n      - description: The UUID of the authorization\n        in: path\n        name: authorizationId\n        required: true\n        schema:\n          type: string\n    post:\n      operationId: post_product_authorization\n      responses:\n        \"201\":\n          description: Result saved\n        \"404\":\n          description: Object not found\n      summary: Signal that processing is complete, without uploading any result\n      tags:\n        - Lumminary API Spec\n      x-code-samples:\n        - lang: PHP\n          source: \u003e-\n            $apiClient-\u003epostAuthorizationResultFile(\n                $appId,\n                $authorizationId,\n                $fileReport = new \\SplFileObject($pathToReport),\n                $originalFilename = null //optional, default the name of the current of the report file\n            );\n        - lang: Python\n          source: $apiClient-\u003epostAuthorization();\n  \"/products/{productId}/authorizations/{authorizationId}/credentials\":\n    parameters:\n      - description: The UUID of the product\n        in: path\n        name: productId\n        required: true\n        schema:\n          type: string\n      - description: The UUID of the authorization\n        in: path\n        name: authorizationId\n        required: true\n        schema:\n          type: string\n    post:\n      description: These can be log-in credentials for a website where the result is\n        available\n      operationId: post_authorization_result_credentials\n      parameters:\n        - description: An optional fields mask\n          in: header\n          name: X-Fields\n          schema:\n            type: string\n            format: mask\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                credentials_username:\n                  description: Credentials for accessing the result. Includes password,\n                    username and url\n                  type: string\n                credentials_password:\n                  description: Credentials for accessing the result. Includes password,\n                    username and url\n                  type: string\n                report_url:\n                  description: Credentials for accessing the result. Includes password,\n                    username and url\n                  type: string\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ReportCredentials\"\n        \"201\":\n          description: Result saved\n        \"404\":\n          description: Object not found\n      summary: Provide a result for the authorization\n      tags:\n        - Lumminary API Spec\n      x-code-samples:\n        - lang: PHP\n          source: |-\n            $apiClient-\u003epostAuthorizationResultCredentials(\n                $productId,\n                $authorizationId,\n                $credentialsUsername, //optional, default null\n                $credentialsPassword, //optional, default null\n                $reportUrl //optional, default null\n            );\n        - lang: Python\n          source: $apiClient-\u003egetProductAuthorizations();\n  \"/products/{productId}/authorizations/{authorizationId}/file\":\n    parameters:\n      - description: The UUID of the product\n        in: path\n        name: productId\n        required: true\n        schema:\n          type: string\n      - description: The UUID of the authorization\n        in: path\n        name: authorizationId\n        required: true\n        schema:\n          type: string\n    post:\n      description: g. a pdf report\n      operationId: post_authorization_result_file\n      parameters:\n        - description: Optional original filename for the report. If not provided, the\n            filename of uploaded file will be used\n          in: query\n          name: original_filename\n          schema:\n            type: string\n        - description: An optional fields mask\n          in: header\n          name: X-Fields\n          schema:\n            type: string\n            format: mask\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file_report:\n                  description: A binary file (e.g. pdf) that contains the result of the\n                    authorization\n                  type: string\n                  format: binary\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ReportFile\"\n        \"201\":\n          description: Result saved\n        \"404\":\n          description: Object not found\n      summary: Provide a file result to the authorization, e\n      tags:\n        - Lumminary API Spec\n      x-code-samples:\n        - lang: PHP\n          source: \u003e-\n            $apiClient-\u003epostAuthorizationResultFile(\n                $appId,\n                $authorizationId,\n                $fileReport = new \\SplFileObject($pathToReport),\n                $originalFilename = null //optional, default the name of the current of the report file\n            );\n        - lang: Python\n          source: $apiClient-\u003egetProductAuthorizations();\n  \"/products/{productId}/authorizations/{authorizationId}/unfulfillable\":\n    parameters:\n      - description: The UUID of the product\n        in: path\n        name: productId\n        required: true\n        schema:\n          type: string\n      - description: The UUID of the authorization\n        in: path\n        name: authorizationId\n        required: true\n        schema:\n          type: string\n    post:\n      operationId: post_product_authorization_unfulfillable\n      responses:\n        \"404\":\n          description: Object not found\n      summary: Catch-all Authorization state, for authorizations that passed all\n        verifications and should reach the partner Product, but cannot be\n        fulfilled for various reasons\n      tags:\n        - Lumminary API Spec\n      x-code-samples:\n        - lang: PHP\n          source: $apiClient-\u003epostProductAuthorizationUnfulfillable($productUuid,\n            $authorizationUuid);\n        - lang: Python\n          source: $apiClient-\u003epostProductAuthorizationUnfulfillable($productUuid,\n            $authorizationUuid);\n  \"/reference/genes/databases/{databaseName}/accessions/{accession}\":\n    get:\n      operationId: get_gene\n      parameters:\n        - description: The dbSNP build for which to consider snps belonging to the gene.\n            Defaults to 149\n          in: query\n          name: dbsnp_build\n          schema:\n            type: integer\n            default: 149\n        - description: The reference genome for which gene annotations will be returned.\n            Defaults to GRCh37p13\n          in: query\n          name: reference_genome\n          schema:\n            type: string\n            default: GRCH37P13\n        - description: An optional fields mask\n          in: header\n          name: X-Fields\n          schema:\n            type: string\n            format: mask\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PublicGene\"\n        \"404\":\n          description: Resource not found\n      summary: Generic gene information\n      tags:\n        - Lumminary API Spec\n      x-code-samples:\n        - lang: PHP\n          source: $apiClient-\u003egetProductAuthorizations();\n        - lang: Python\n          source: $apiClient-\u003egetProductAuthorizations();\n    parameters:\n      - description: \"The name of the database to search. E.g: Genbank\"\n        in: path\n        name: databaseName\n        required: true\n        schema:\n          type: string\n      - description: The accession within the selected database\n        in: path\n        name: accession\n        required: true\n        schema:\n          type: string\n  /reference/genomes/:\n    get:\n      description: Lists reference genome builds that are available\n      operationId: get_reference_genomes_group\n      parameters:\n        - description: An optional fields mask\n          in: header\n          name: X-Fields\n          schema:\n            type: string\n            format: mask\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ReferenceGenomeOverview\"\n                type: array\n      summary: Reference genome builds\n      tags:\n        - Lumminary API Spec\n      x-code-samples:\n        - lang: PHP\n          source: $apiClient-\u003egetProductAuthorizations();\n        - lang: Python\n          source: $apiClient-\u003egetProductAuthorizations();\n  \"/reference/genomes/{genomeBuildAccession}/chromosomes\":\n    get:\n      operationId: get_reference_genome\n      parameters:\n        - description: An optional fields mask\n          in: header\n          name: X-Fields\n          schema:\n            type: string\n            format: mask\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ReferenceChromosomeOverview\"\n                type: array\n        \"404\":\n          description: Resource not found\n      summary: Reference genome metadata\n      tags:\n        - Lumminary API Spec\n      x-code-samples:\n        - lang: PHP\n          source: $apiClient-\u003egetProductAuthorizations();\n        - lang: Python\n          source: $apiClient-\u003egetProductAuthorizations();\n    parameters:\n      - in: path\n        name: genomeBuildAccession\n        required: true\n        schema:\n          type: string\n  \"/reference/genomes/{genomeBuildAccession}/chromosomes/{chromosomeAccession}\":\n    get:\n      description: Fetch a closed interval of nucleotides on a given chromosome. Includes\n        start and stop positions\n      operationId: get_reference_chromosome\n      parameters:\n        - description: Location on the chromosome\n          in: query\n          name: range_start\n          required: true\n          schema:\n            type: integer\n        - description: Location on the chromosome\n          in: query\n          name: range_stop\n          required: true\n          schema:\n            type: integer\n        - description: An optional fields mask\n          in: header\n          name: X-Fields\n          schema:\n            type: string\n            format: mask\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ReferenceSequence\"\n        \"404\":\n          description: Resource not found\n      summary: Sequence for a region of the reference genome\n      tags:\n        - Lumminary API Spec\n      x-code-samples:\n        - lang: PHP\n          source: $apiClient-\u003egetProductAuthorizations();\n        - lang: Python\n          source: $apiClient-\u003egetProductAuthorizations();\n    parameters:\n      - description: The accession of the reference genome\n        in: path\n        name: genomeBuildAccession\n        required: true\n        schema:\n          type: string\n      - description: The accession to the chromosome\n        in: path\n        name: chromosomeAccession\n        required: true\n        schema:\n          type: string\n  \"/reference/snps/{snpAccession}\":\n    get:\n      description: Get reference SNP information, from dbSNP\n      operationId: get_reference_snp\n      parameters:\n        - description: The dbSNP build. Defaults to 149\n          in: query\n          name: dbsnp_version\n          schema:\n            type: integer\n            default: 149\n        - description: The GRCh build on which to place snips. Defaults to GRCh37p13\n          in: query\n          name: grch_version\n          schema:\n            type: string\n            default: GRCH37P13\n        - description: An optional fields mask\n          in: header\n          name: X-Fields\n          schema:\n            type: string\n            format: mask\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PublicSNP\"\n        \"404\":\n          description: Resource not found\n      summary: Reference SNP data\n      tags:\n        - Lumminary API Spec\n      x-code-samples:\n        - lang: PHP\n          source: $apiClient-\u003egetProductAuthorizations();\n        - lang: Python\n          source: $apiClient-\u003egetProductAuthorizations();\n    parameters:\n      - description: The rsId of the SNP\n        in: path\n        name: snpAccession\n        required: true\n        schema:\n          type: string\nservers:\n  - url: https://api.lumminary.com/v1\ncomponents:\n  responses:\n    CSRFError:\n      description: Invalid CSRF token\n    CoordinateException:\n      description: The genomic coordinates provided do not exist\n    DecodeError:\n      description: Could not decode the JWT\n    ExpiredSignatureError:\n      description: The signature on the JWT is expired\n    FreshTokenRequired:\n      description: A fresh JWT, resulting from a recent authentication, is required\n    GenericInternalException:\n      description: Generic internal exception\n    GenericInvalidRequest:\n      description: Catch-all case representing the case when the request is inconsistent\n    GenericPublicException:\n      description: Generic public exception\n    GenericUnauthorizedException:\n      description: Unauthorized\n    InvalidFileException:\n      description: The provided file is invalid\n    InvalidHeaderError:\n      description: The JWT header is invalid\n    InvalidTokenError:\n      description: The JWT is invalid\n    JWTDecodeError:\n      description: Could not decode the JWT\n    MaskError:\n      description: When any error occurs on mask\n    NoAuthorizationError:\n      description: The current user is not authorized\n    ObjectAlreadyExistsException:\n      description: The object you are trying to create already exists\n    ObjectDoesNotExistException:\n      description: The requested object does not exist\n    ParseError:\n      description: When a mask can't be parsed\n    RevokedTokenError:\n      description: The JWT has been revoked\n    UUIDInvalidException:\n      description: The UUID is invalid, most likely detected via CRC mismatch\n    UserClaimsVerificationError:\n      description: The \"claims\" field in the JWT could not be verified\n    UserLoadError:\n      description: Could not load the user to which the JWT is bound\n    WrongTokenError:\n      description: The JWT is valid, but not associated with the expected user\n  securitySchemes:\n    Bearer:\n      description: The token resulted after authenticating to /auth/jwt. MUST be of the\n        format(excluding quotes) 'Bearer paste_token_here'\n      in: header\n      name: Authorization\n      type: apiKey\n  schemas:\n    AccessScope:\n      properties:\n        address:\n          $ref: \"#/components/schemas/CustomerAddress\"\n        dataset:\n          description: Access to one of the customer's datasets\n          type: string\n        email:\n          description: Access to customer email\n          type: string\n        login:\n          description: Access to no customer information, just the customer UUID\n          type: string\n        name:\n          $ref: \"#/components/schemas/CustomerName\"\n        sex:\n          description: \"The sex of the customer. One of : F, M, null\"\n          type: string\n      type: object\n    Authorization:\n      properties:\n        authorization_uuid:\n          description: Identifier of the Authorization\n          type: string\n        client_uuid:\n          description: The UUID of the client owning the Dataset to which the product is\n            authorized\n          type: string\n        create_timestamp:\n          description: Creation timestamp for the Authorization\n          type: integer\n        is_active:\n          description: If false, the the authorization is revoked and data access\n            authorizations fail\n          type: boolean\n        order:\n          description: Optional UUID of the Order that created the Authorization\n          type: string\n        product_uuid:\n          description: Identifier of the Product to be authorized\n          type: string\n        report_credentials:\n          items:\n            $ref: \"#/components/schemas/ReportCredentials\"\n          type: array\n        report_files:\n          items:\n            $ref: \"#/components/schemas/ReportFile\"\n          type: array\n        scopes:\n          $ref: \"#/components/schemas/AccessScope\"\n        sequence_number:\n          description: The sequence number of the Authorization. Used as a filter when\n            fetching new Authorizations\n          type: integer\n        state:\n          description: \"The authorization state. One of :\n            ['authorization_state_pending_dataset',\n            'authorization_state_fulfillable',\n            'authorization_state_result_available',\n            'authorization_state_not_fulfillable']\"\n          type: string\n      required:\n        - authorization_uuid\n        - client_uuid\n        - create_timestamp\n        - is_active\n        - product_uuid\n        - scopes\n        - state\n      type: object\n    ClientGene:\n      properties:\n        molecular_location:\n          $ref: \"#/components/schemas/MolecularLocation\"\n        snps:\n          items:\n            $ref: \"#/components/schemas/ClientSNP\"\n          type: array\n        symbol:\n          description: The gene accession string\n          minLength: 1\n          type: string\n      required:\n        - molecular_location\n        - symbol\n      type: object\n    ClientSNP:\n      properties:\n        chromosome_accession:\n          description: The accession of the chromosome on which the SNP is placed\n          minLength: 1\n          type: string\n        genotyped_alleles:\n          description: A diploid genoyped allele, if available\n          items:\n            description: A haploid allele\n            minLength: 1\n            type: string\n          type: array\n        location:\n          description: The SNP's position on the chromosome\n          minimum: 0\n          type: integer\n        phased:\n          description: True if there is phasing information about the snp, false otherwise\n          type: boolean\n        reference_genome:\n          description: The ID and build number of the genome against which the SNP was\n            built and placed\n          minLength: 1\n          type: string\n        snp_id:\n          description: The ID of the SNP\n          minLength: 1\n          type: string\n      required:\n        - chromosome_accession\n        - genotyped_alleles\n        - location\n        - phased\n        - reference_genome\n        - snp_id\n      type: object\n    CustomerAddress:\n      properties:\n        address1:\n          description: \"\"\n          type: string\n        address2:\n          description: \"\"\n          type: string\n        city:\n          description: \"\"\n          type: string\n        country:\n          description: \"\"\n          type: string\n        phone:\n          description: \"\"\n          type: string\n        state:\n          description: \"\"\n          type: string\n        zipcode:\n          description: \"\"\n          type: string\n      type: object\n    CustomerName:\n      properties:\n        first_name:\n          description: Customer first name\n          type: string\n        last_name:\n          description: Customer last name\n          type: string\n      type: object\n    FileLocation:\n      properties:\n        filename_original:\n          type: string\n        host:\n          type: string\n        path:\n          type: string\n      required:\n        - filename_original\n        - host\n        - path\n      type: object\n    JavascriptWebToken:\n      properties:\n        access_token:\n          description: The JWT containing the authorization token for further API calls\n          minLength: 1\n          type: string\n      required:\n        - access_token\n      type: object\n    MolecularLocation:\n      properties:\n        chromosome_accession:\n          description: The cromosome on which the gene is placed\n          minLength: 1\n          type: string\n        start:\n          description: The gene's start position on the scaffold\n          minimum: 0\n          type: integer\n        stop:\n          description: The gene's stop position on the scaffold\n          minimum: 0\n          type: integer\n      required:\n        - chromosome_accession\n        - start\n        - stop\n      type: object\n    Product:\n      properties:\n        authorized_scopes:\n          description: A list of scopes that the product can require from clients\n          items:\n            type: string\n          type: array\n        email:\n          description: The contact email for the product\n          type: string\n        product_uuid:\n          description: The product identifier\n          type: string\n        redirect_uri:\n          description: A redirect url registered as a callback for the Connect with\n            Lumminary authorization flow\n          type: string\n        snps_authorized:\n          description: A superset of snps_min_required, containing all SNPs to which an\n            Product has access (includes optional SNPs)\n          items:\n            type: string\n          type: array\n        snps_authorized_any:\n          description: A boolean value specifying if SNP set is not strict\n          type: boolean\n        snps_min_required:\n          $ref: \"#/components/schemas/SnpsMinRequired\"\n        snps_min_required_any:\n          description: A boolean value specifying if SNP set is not strict\n          type: boolean\n      required:\n        - authorized_scopes\n        - product_uuid\n        - snps_authorized\n        - snps_authorized_any\n        - snps_min_required\n        - snps_min_required_any\n      type: object\n    PublicGene:\n      properties:\n        chromosome:\n          description: The cromosome on which the gene is placed\n          minLength: 1\n          type: string\n        molecular_end_position:\n          description: The gene's end position on the scaffold\n          minimum: 0\n          type: integer\n        molecular_start_position:\n          description: The gene's start position on the scaffold\n          minimum: 0\n          type: integer\n        parent_accession:\n          description: The scaffold on which the gene is placed\n          minLength: 1\n          type: string\n        snp_ids:\n          description: The SNPs contained in the gene\n          items:\n            description: The SNP identifier\n            type: string\n          type: array\n        symbol:\n          description: The gene accession string\n          minLength: 1\n          type: string\n      required:\n        - chromosome\n        - molecular_end_position\n        - molecular_start_position\n        - parent_accession\n        - snp_ids\n        - symbol\n      type: object\n    PublicSNP:\n      properties:\n        alternative_alleles:\n          items:\n            description: A haploid allele\n            minLength: 1\n            type: string\n          type: array\n        chromosome:\n          description: The cromosome on which the SNP is placed\n          minLength: 1\n          type: string\n        chromosome_accession:\n          description: The accession of the chromosome on which the SNP is placed\n          minLength: 1\n          type: string\n        dbsnp_version:\n          description: The dbSNP build to which snip attributes like location and\n            chromosome accession refer.\n          type: integer\n        location:\n          description: The SNP's position on the chromosome\n          minimum: 0\n          type: integer\n        reference_allele:\n          description: One of the possible alleles\n          minLength: 1\n          type: string\n        reference_genome:\n          description: The ID and build number of the genome against which the SNP was\n            built and placed\n          minLength: 1\n          type: string\n        snp_id:\n          description: The ID of the SNP\n          minLength: 1\n          type: string\n      required:\n        - chromosome\n        - chromosome_accession\n        - dbsnp_version\n        - location\n        - reference_allele\n        - reference_genome\n        - snp_id\n      type: object\n    ReferenceChromosomeOverview:\n      properties:\n        reference_accession:\n          description: The versioned reference chromosome accession\n          minLength: 1\n          type: string\n      required:\n        - reference_accession\n      type: object\n    ReferenceGenomeOverview:\n      properties:\n        reference_accession:\n          description: The versioned reference build release accession\n          minLength: 1\n          type: string\n      required:\n        - reference_accession\n      type: object\n    ReferenceSequence:\n      properties:\n        sequence:\n          description: The nucleotide sequence\n          minLength: 1\n          type: string\n      required:\n        - sequence\n      type: object\n    ReportCredentials:\n      properties:\n        authorization_uuid:\n          description: The uuid of the authorization that generated this report\n          type: string\n        client_password:\n          description: The password generated password, on the partner product website\n          type: string\n        client_username:\n          description: The generated username, on the partner product website\n          type: string\n        create_timestamp:\n          description: Creation timestamp for Report\n          type: integer\n        report_credentials_uuid:\n          description: The uuid of the report\n          type: string\n        report_url:\n          description: URL to the report location\n          type: string\n      required:\n        - authorization_uuid\n        - create_timestamp\n        - report_credentials_uuid\n      type: object\n    ReportFile:\n      properties:\n        authorization_uuid:\n          description: The uuid of the authorization that generated this report\n          type: string\n        create_timestamp:\n          description: Creation timestamp for Report\n          type: integer\n        file_location:\n          $ref: \"#/components/schemas/FileLocation\"\n        report_file_uuid:\n          description: The uuid of the report\n          type: string\n      required:\n        - authorization_uuid\n        - create_timestamp\n        - file_location\n        - report_file_uuid\n      type: object\n    SnpsMinRequired:\n      properties:\n        min_pct:\n          description: Minimum required percentage of snps that should be present in the\n            Dataset for compatibility\n          minimum: 0\n          type: integer\n        snps:\n          description: List of snps that are (possibly partially) required for the Product\n            to be compatible with a Dataset\n          items:\n            type: string\n          type: array\n      required:\n        - min_pct\n        - snps\n      type: object\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/lumminary.com-1.0-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/lumminary.com-1.0-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}