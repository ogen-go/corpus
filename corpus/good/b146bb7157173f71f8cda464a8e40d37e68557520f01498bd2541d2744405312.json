{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/egovernments/DIGIT-OSS"
		},
		"file": {
			"name": "enc-service-contract.yml",
			"size": 0,
			"path": "core-services/docs/enc-service-contract.yml",
			"byteSize": 10438,
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: eGov Encryption Service\n  description: API for encryption / decryption\n  contact:\n    name: Egovernments Foundation\n    email: contact@egovernments.org\n\npaths:\n\n  /crypto/v1/_encrypt:\n    post:\n      summary: Encrypts the given input value/s OR values of the object.\n      requestBody:\n        description: The request body can contain an array of Encryption Requests to support bulk encryption. The key for encryption will be decided based on the tenantId. Each tenant will have its own seperate key. The value to be encrypted can be simple string OR an array of string OR can be a JSON Object. In case the value is a JSON Object, all the values will get encrypted and keys will be left untouched. \n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EncryptionRequest'\n            example:\n              {\n                \"encryptionRequests\": [\n                  {\n                    \"tenantId\": \"pb\",\n                    \"type\": \"Important\",\n                    \"value\": \"My email\"\n                  },\n                  {\n                    \"tenantId\": \"pb.jalandhar\",\n                    \"type\": \"Normal\",\n                    \"value\": [\n                      \"Personal\",\n                      \"Private\"\n                    ]\n                  },\n                  {\n                    \"tenantId\": \"pb.mohali\",\n                    \"type\": \"Normal\",\n                    \"value\": {\n                      \"userObject1\": {\n                        \"name\": \"John Doe\",\n                        \"mobileNumber\": \"98989121234\"\n                      }\n                    }\n                  }\n                ]\n              }\n\n      responses:\n        '200':\n          description: The returned encrypted value will have the same structure as the input value.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n              example:\n                  [\n                    \"437506|A5ag4DfbhHAHiqXRKFcAedFKtNOelHX+8+jB0ckNG/tihwimx7xu6akEoa+kaQPcIhSnYeveloIhdPBCOgrXWvkWGZfShx1i2bE2vAcWB+r0YIDdwZLKJbQGBHDqcEOn8mfO+LnmpJ5P4zPETtE+2EHhta+vKcE5OQj8ZQawHS4=\",\n                    [\n                        \"896077|I/8Xwqr5MwB6UucEP8/Q5wiCHpbaNqGE\",\n                        \"896077|I+gMx6TjN0BcLxudEiYQKIDKtSlmpJY=\"\n                    ],\n                    {\n                        \"userObject1\": {\n                            \"mobileNumber\": \"395551|eSfiPrQ1UK07d0SupYQYqbr2QFNOWSuYJYcU\",\n                            \"name\": \"395551|CnCzaK1ADfnx+4FINXIQ9zjnUs1ieAtz\"\n                        }\n                    }\n                  ]\n\n\n      tags:\n        - Crypto\n\n  /crypto/v1/_decrypt:\n    post:\n      summary: Decrypts the given input value/s OR values of the object.\n      requestBody:\n        description: Input to a decryption request may be an simple string OR an array OR a JSON Object. Every Object/Array will be navigated through to find simple strings, and those strings will be decrypted.\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: object\n            example:\n               [\n                [\n                    \"896077|I/8Xwqr5MwB6UucEP8/Q5wiCHpbaNqGE\",\n                    \"896077|I+gMx6TjN0BcLxudEiYQKIDKtSlmpJY=\"\n                ],\n                {\n                    \"userObject1\": {\n                        \"mobileNumber\": \"395551|eSfiPrQ1UK07d0SupYQYqbr2QFNOWSuYJYcU\",\n                        \"name\": \"395551|CnCzaK1ADfnx+4FINXIQ9zjnUs1ieAtz\"\n                    }\n                }\n              ]\n\n      responses:\n        '200':\n          description: The response to a decryption request will have the same structure as the input.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n              example:\n                [\n                  [\n                      \"Personal\",\n                      \"Private\"\n                  ],\n                  {\n                      \"userObject1\": {\n                          \"mobileNumber\": \"98989121234\",\n                          \"name\": \"John Doe\"\n                      }\n                  }\n                ]\n\n\n      tags:\n        - Crypto\n        \n        \n  /crypto/v1/_sign:\n    post:\n      tags:\n        - Crypto\n      summary: Provide signature for a given value.\n      requestBody:\n        description: Request contains tenant id and the value that needs to be signed.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SignRequest'\n      responses:\n        '200':\n          description: Response contains the value that has been signed and the value of signature.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SignResponse'\n                \n  /crypto/v1/_verify:\n    post:\n      tags:\n        - Crypto\n      summary: Check if the signature is correct for the provided value.\n      requestBody:\n        description: Request contains the value and its signature.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VerifyRequest'\n      responses:\n        '200':\n          description: Response returns if the provided signature is correct for the given value.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VerifyResponse'\n\n  /crypto/v1/_rotatekey:\n    post:\n      tags:\n        - Crypto\n      summary: Deactivate the keys for the given tenant and generate new keys. It will deactivate both symmetric and asymmetric keys for the provided tenant.\n      requestBody:\n        description: Request has the name of the tenant for which the key needs to be rotated.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RotateKeyRequest'\n      responses:\n        '200':\n          description: Acknowldgement if the operation was successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RotateKeyResponse'\n\n\ncomponents:\n  schemas:\n\n    EncReqObject:\n      type: object\n      description: EncrReqObject contains data to be encrypted and meta-data required to perform the encryption.\n      properties:\n        tenantId:\n          type: string\n          description: Encryption Key will be decided based on tenant id.\n        type:\n          type: string\n          description: Method to be used for encryption ( AES / RSA )\n          enum:\n          - Important\n          - Normal\n        value:\n          type: array\n          description: Value/s to be encrypted. Can be a string or object or array\n          items: {}\n          example: [\"Personal\", \"Private\"]\n\n      example:\n          tenantId: \"pb.jalandhar\"\n          type: \"Important\"\n          value: {\n            \"key\": \"secret\"\n          }\n\n\n\n    EncryptionRequest:\n      type: object\n      description: An encryption request can contain multiple EncReqObject. This will help to encrypt bulk requests which may have different tenant-id and/or method ( AES / RSA ).\n      properties:\n        encryptionRequests:\n          type: array\n          items: \n            $ref: '#/components/schemas/EncReqObject'\n      example:\n        {\n          \"encryptionRequests\": [\n              {\n                \"tenantId\": \"pb.amritsar\",\n                \"type\": \"Important\",\n                \"value\": {\n                  \"key\": \"secret\"\n                }\n              }\n            ]\n        }\n    \n    SignRequest:\n      type: object\n      description: A Sign request containing tenant id and the string value to be signed.\n      properties:\n        tenantId:\n          type: string\n          description: The key used for signing will be determined based on tenant id.\n        value:\n          type: string\n          description: The value to be signed.\n      example: \n        {\n          \"tenantId\": \"pb.amritsar\",\n          \"value\": \"claim\"\n        }\n    \n    SignResponse:\n      type: object\n      description: Response to sign api containing the actual value and its corresponding signature.\n      properties:\n        value:\n          type: string\n          description: The value that came with request.\n        signature:\n          type: string\n          description: The signature generated for the above value.\n      example: \n        {\n          \"value\": \"claim\",\n          \"signature\": \"436958|JLXQk7KP0y1nU3YHKLe0aq7EJp1iPEfNcIrbsgBh2u2U9aLCYfr8tVWGPud7JNQ5uiKJ1gTMFgzGU4XfTwUZDENHQ6mpFOhxH+LVVggj9QmDZk629ce2X7ju4aHuX6WDBx9/bxHstE8r5F47sP7f6ryY52HDQ5D5/8b7SX3WkkE=\"\n        }\n    \n    VerifyRequest:\n      type: object\n      description: A Verify request containing the value and its corresponding signature.\n      properties:\n        value:\n          type: string\n          description: The claim to be verified\n        signature:\n          type: string\n          description: The signature for the claim\n      example: \n        {\n          \"value\": \"claim\",\n          \"signature\": \"436958|JLXQk7KP0y1nU3YHKLe0aq7EJp1iPEfNcIrbsgBh2u2U9aLCYfr8tVWGPud7JNQ5uiKJ1gTMFgzGU4XfTwUZDENHQ6mpFOhxH+LVVggj9QmDZk629ce2X7ju4aHuX6WDBx9/bxHstE8r5F47sP7f6ryY52HDQ5D5/8b7SX3WkkE=\"\n        }\n    \n    VerifyResponse:\n      type: object\n      description: Response to the verify api containing if the signature was correct for the input claim\n      properties:\n        verified:\n          type: boolean\n          description: This will be true if the signature is correct according to the claim, otherwise false.\n      example: \n        {\n          \"verified\": true\n        }\n    \n    RotateKeyRequest:\n      type: object\n      description: A request to rotate key for a given tenant\n      properties:\n        tenantId:\n          type: string\n          description: The tenantId for which the key needs to be changed.\n      example: \n        {\n          \"tenantId\": \"pb.amritsar\"\n        }\n    \n    RotateKeyResponse:\n      type: object\n      description: An acknowledgement if the key rotation request was successful.\n      properties:\n        acknowledged:\n          type: boolean\n          description: Acknowledgement if the operation was successful.\n",
			"canonicalURL": "/github.com/egovernments/DIGIT-OSS@3daad3c513a2b896ae975d8cde961816595a1c58/-/blob/core-services/docs/enc-service-contract.yml",
			"externalURLs": [
				{
					"url": "https://github.com/egovernments/DIGIT-OSS/blob/3daad3c513a2b896ae975d8cde961816595a1c58/core-services/docs/enc-service-contract.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}