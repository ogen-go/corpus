{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aws-samples/docdb-rest"
		},
		"file": {
			"name": "template.yaml",
			"size": 0,
			"path": "template.yaml",
			"byteSize": 10518,
			"content": "---\r\nAWSTemplateFormatVersion: \"2010-09-09\"\r\nTransform: AWS::Serverless-2016-10-31\r\nDescription: This stack deploys a REST API for an Amazon DocumentDB cluster\r\n\r\nParameters:\r\n\r\n  Prefix:\r\n    Type: String\r\n    Description: Prefix for resources\r\n    \r\n  DocDBIdentifier:\r\n    Type: String\r\n    Description: Amazon DocumentDB cluster identifier\r\n\r\n  DocDBUsername:\r\n    Type: String\r\n    Description: Username for the Amazon DocumentDB cluster \r\n\r\n  DocDBPassword:\r\n    Type: String\r\n    Description: Password for the Amazon DocumentDB cluster\r\n    NoEcho: true\r\n    MinLength: 5\r\n    \r\n  DocDBVPCSubnet:\r\n    Type: AWS::EC2::Subnet::Id\r\n    Description: VPC Subnet with connectivity to Amazon DocumentDB cluster\r\n    \r\n  DocDBSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup::Id\r\n    Description: Security group with access to Amazon DocumentDB from within the VPC\r\n    \r\n  APIUsername:\r\n    Type: String\r\n    Description: Username to allow access to the API\r\n    \r\n  APIPassword:\r\n    Type: String\r\n    Description: Password to allow access to the API\r\n    NoEcho: true\r\n    MinLength: 4\r\n    \r\nResources:\r\n# Secret Manager\r\n  DocDBSecret:\r\n    Type: 'AWS::SecretsManager::Secret'\r\n    Properties:\r\n      Name: !Sub ${Prefix}-DocDBSecret\r\n      Description: This secret has the credentials for the DocumentDB cluster\r\n      SecretString:\r\n        !Join\r\n          - '' \r\n          - - '{\"username\":\"'\r\n            - !Ref DocDBUsername\r\n            - '\",\"password\":\"'\r\n            - !Ref DocDBPassword\r\n            - '\", \"ssl\": true}'\r\n  \r\n  SecretDocDBClusterAttachment:\r\n    Type: AWS::SecretsManager::SecretTargetAttachment\r\n    Properties:\r\n      SecretId: !Ref DocDBSecret\r\n      TargetId: !Ref DocDBIdentifier\r\n      TargetType: AWS::DocDB::DBCluster\r\n\r\n# IAM\r\n  LambdaExecutionRole:\r\n    Type: AWS::IAM::Role\r\n    Properties:\r\n      AssumeRolePolicyDocument:\r\n        Version: \"2012-10-17\"\r\n        Statement:\r\n          -\r\n            Effect: Allow\r\n            Principal:\r\n              Service:\r\n                - lambda.amazonaws.com\r\n            Action:\r\n              - sts:AssumeRole\r\n      ManagedPolicyArns:\r\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\r\n        - arn:aws:iam::aws:policy/AWSLambdaExecute\r\n      Policies:\r\n        - PolicyName: DocumentDBSecret\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - secretsmanager:GetSecretValue\r\n                Resource: !Ref DocDBSecret\r\n      RoleName: !Sub ${Prefix}-Role-Lambda\r\n\r\n# Lambda\r\n  LambdaLayerPymongo:\r\n    Type: AWS::Serverless::LayerVersion\r\n    Properties:\r\n      LayerName: !Sub ${Prefix}-Layer-pymongo\r\n      Description: Layer for Pymongo and RDS PEM file\r\n      ContentUri: layer-pymongo.zip\r\n      CompatibleRuntimes:\r\n        - python3.6\r\n      LicenseInfo: 'MIT'\r\n      RetentionPolicy: Retain\r\n\r\n  LambdaCRUDFunction: \r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      FunctionName: !Sub ${Prefix}-DocDBREST\r\n      CodeUri: docdb_rest/\r\n      Handler: app.lambda_handler\r\n      Layers:\r\n        - !Ref LambdaLayerPymongo\r\n      Runtime: python3.6\r\n      Environment:\r\n        Variables:\r\n          DB_SECRET_NAME: !Sub ${Prefix}-DocDBSecret\r\n      Role: !GetAtt LambdaExecutionRole.Arn\r\n      VpcConfig: \r\n        SecurityGroupIds: \r\n          - !Ref DocDBSecurityGroup\r\n        SubnetIds: \r\n          - !Ref DocDBVPCSubnet\r\n      Timeout: 5\r\n\r\n  LambdaBasicAuthFunction: \r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      FunctionName: !Sub ${Prefix}-BasicAuth\r\n      Handler: auth.lambda_handler\r\n      Role: !GetAtt LambdaExecutionRole.Arn\r\n      Runtime: python3.6\r\n      Environment:\r\n        Variables:\r\n          USERNAME: !Ref APIUsername\r\n          PASSWORD: !Ref APIPassword\r\n      CodeUri: docdb_rest/\r\n      Timeout: 5\r\n\r\n  LambdaPermissionAPICRUD:\r\n    DependsOn: LambdaCRUDFunction\r\n    Type: AWS::Lambda::Permission\r\n    Properties:\r\n      FunctionName: !GetAtt LambdaCRUDFunction.Arn\r\n      Action: lambda:InvokeFunction\r\n      Principal: apigateway.amazonaws.com\r\n      SourceArn: \r\n        !Join\r\n          - ''\r\n          - - 'arn:aws:execute-api:'\r\n            - !Ref AWS::Region\r\n            - ':'\r\n            - !Ref AWS::AccountId\r\n            - ':'\r\n            - !Ref APIDocDBREST\r\n            - '/*/*/*'\r\n\r\n  LambdaPermissionAPIBasicAuth:\r\n    DependsOn: LambdaBasicAuthFunction\r\n    Type: AWS::Lambda::Permission\r\n    Properties:\r\n      FunctionName: !GetAtt LambdaBasicAuthFunction.Arn\r\n      Action: lambda:InvokeFunction\r\n      Principal: apigateway.amazonaws.com\r\n      SourceArn: \r\n        !Join\r\n          - ''\r\n          - - 'arn:aws:execute-api:'\r\n            - !Ref AWS::Region\r\n            - ':'\r\n            - !Ref AWS::AccountId\r\n            - ':'\r\n            - !Ref APIDocDBREST\r\n            - '/*/*'\r\n\r\n# API \r\n  APIDocDBREST:\r\n    Type: AWS::Serverless::Api\r\n    Properties:\r\n      StageName: !Sub ${Prefix}-api\r\n      DefinitionBody: \r\n        openapi: \"3.0.1\"\r\n        info:\r\n          title: \"generic_docdb\"\r\n        paths:\r\n          /docdb/{general_db}/{general_collection}:\r\n            x-amazon-apigateway-any-method:\r\n              parameters:\r\n              - name: \"general_db\"\r\n                in: \"path\"\r\n                required: true\r\n                schema:\r\n                  type: \"string\"\r\n              - name: \"general_collection\"\r\n                in: \"path\"\r\n                required: true\r\n                schema:\r\n                  type: \"string\"\r\n              responses:\r\n                \"200\":\r\n                  description: \"200 response\"\r\n                  content:\r\n                    application/json:\r\n                      schema:\r\n                        $ref: \"#/components/schemas/Empty\"\r\n              security:\r\n              - BasicAuthLambda: []\r\n              x-amazon-apigateway-integration:\r\n                uri: \r\n                  !Join\r\n                    - ''\r\n                    - - 'arn:aws:apigateway:'\r\n                      - !Ref AWS::Region\r\n                      - ':lambda:path/2015-03-31/functions/'\r\n                      - !GetAtt LambdaCRUDFunction.Arn\r\n                      - '/invocations'\r\n                responses:\r\n                  default:\r\n                    statusCode: \"200\"\r\n                passthroughBehavior: \"when_no_match\"\r\n                httpMethod: \"POST\"\r\n                contentHandling: \"CONVERT_TO_TEXT\"\r\n                type: \"aws_proxy\"\r\n          /docdb/demodb/{general_collection}:\r\n            x-amazon-apigateway-any-method:\r\n              parameters:\r\n              - name: \"general_collection\"\r\n                in: \"path\"\r\n                required: true\r\n                schema:\r\n                  type: \"string\"\r\n              responses:\r\n                \"200\":\r\n                  description: \"200 response\"\r\n                  content:\r\n                    application/json:\r\n                      schema:\r\n                        $ref: \"#/components/schemas/Empty\"\r\n              security:\r\n              - BasicAuthLambda: []\r\n              x-amazon-apigateway-integration:\r\n                uri: \r\n                  !Join\r\n                    - ''\r\n                    - - 'arn:aws:apigateway:'\r\n                      - !Ref AWS::Region\r\n                      - ':lambda:path/2015-03-31/functions/'\r\n                      - !GetAtt LambdaCRUDFunction.Arn\r\n                      - '/invocations'\r\n                responses:\r\n                  default:\r\n                    statusCode: \"200\"\r\n                passthroughBehavior: \"when_no_match\"\r\n                httpMethod: \"POST\"\r\n                contentHandling: \"CONVERT_TO_TEXT\"\r\n                type: \"aws_proxy\"\r\n          /docdb/demodb/democollection:\r\n            x-amazon-apigateway-any-method:\r\n              responses:\r\n                \"200\":\r\n                  description: \"200 response\"\r\n                  content:\r\n                    application/json:\r\n                      schema:\r\n                        $ref: \"#/components/schemas/Empty\"\r\n              security:\r\n              - BasicAuthLambda: []\r\n              x-amazon-apigateway-integration:\r\n                uri: \r\n                  !Join\r\n                    - ''\r\n                    - - 'arn:aws:apigateway:'\r\n                      - !Ref AWS::Region\r\n                      - ':lambda:path/2015-03-31/functions/'\r\n                      - !GetAtt LambdaCRUDFunction.Arn\r\n                      - '/invocations'\r\n                responses:\r\n                  default:\r\n                    statusCode: \"200\"\r\n                passthroughBehavior: \"when_no_match\"\r\n                httpMethod: \"POST\"\r\n                contentHandling: \"CONVERT_TO_TEXT\"\r\n                type: \"aws_proxy\"\r\n        components:\r\n          schemas:\r\n            Empty:\r\n              title: \"Empty Schema\"\r\n              type: \"object\"\r\n          securitySchemes:\r\n            BasicAuthLambda:\r\n              type: \"apiKey\"\r\n              name: \"Authorization\"\r\n              in: \"header\"\r\n              x-amazon-apigateway-authtype: \"custom\"\r\n              x-amazon-apigateway-authorizer:\r\n                authorizerUri: \r\n                  !Join\r\n                    - ''\r\n                    - - 'arn:aws:apigateway:'\r\n                      - !Ref AWS::Region\r\n                      - ':lambda:path/2015-03-31/functions/'\r\n                      - !GetAtt LambdaBasicAuthFunction.Arn\r\n                      - '/invocations'\r\n                authorizerResultTtlInSeconds: 300\r\n                identitySource: \"method.request.header.Authorization\"\r\n                type: \"request\"\r\n        x-amazon-apigateway-gateway-responses:\r\n          UNAUTHORIZED:\r\n            statusCode: 401\r\n            responseParameters:\r\n              gatewayresponse.header.WWW-Authenticate: \"'Basic'\"\r\n            responseTemplates:\r\n              application/json: \"{\\\"message\\\":$context.error.messageString}\"\r\n\r\n      \r\n\r\nOutputs:\r\n  StackName:\r\n    Value: !Sub ${AWS::StackName}\r\n  DocDBSecret:\r\n    Value: !Ref DocDBSecret\r\n  LambdaExecutionRole:\r\n    Value: !Ref LambdaExecutionRole\r\n  LambdaLayerPymongo:\r\n    Value: !Ref LambdaLayerPymongo\r\n  LambdaCRUDFunction:\r\n    Value: !Ref LambdaCRUDFunction\r\n  LambdaBasicAuthFunction:\r\n    Value: !Ref LambdaBasicAuthFunction\r\n  APIDocDBREST:\r\n    Value: !Ref APIDocDBREST\r\n  APIRoot:\r\n    Value: !Sub ${APIDocDBREST}.execute-api.${AWS::Region}.amazonaws.com/${Prefix}-api/docdb\r\n",
			"canonicalURL": "/github.com/aws-samples/docdb-rest@504640c4d8ada3ec357db104c2c7e08d12ad4cdd/-/blob/template.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aws-samples/docdb-rest/blob/504640c4d8ada3ec357db104c2c7e08d12ad4cdd/template.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}