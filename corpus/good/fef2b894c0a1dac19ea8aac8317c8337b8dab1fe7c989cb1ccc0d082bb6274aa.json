{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "amazonaws.com-mediastore-data-2017-09-01-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/amazonaws.com-mediastore-data-2017-09-01-swagger.yaml",
			"byteSize": 23150,
			"content": "openapi: 3.0.0\ninfo:\n  version: 2017-09-01\n  x-release: v4\n  title: AWS Elemental MediaStore Data Plane\n  description: An AWS Elemental MediaStore asset is an object, similar to an object in the\n    Amazon S3 service. Objects are the fundamental entities that are stored in\n    AWS Elemental MediaStore.\n  x-logo:\n    url: https://twitter.com/awscloud/profile_image?size=original\n    backgroundColor: \"#FFFFFF\"\n  termsOfService: https://aws.amazon.com/service-terms/\n  contact:\n    name: Mike Ralphson\n    email: mike.ralphson@gmail.com\n    url: https://github.com/mermade/aws2openapi\n    x-twitter: PermittedSoc\n  license:\n    name: Apache 2.0 License\n    url: http://www.apache.org/licenses/\n  x-providerName: amazonaws.com\n  x-serviceName: mediastore-data\n  x-origin:\n    - contentType: application/json\n      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/mediastore-data-2017-09-01.normal.json\n      converter:\n        url: https://github.com/mermade/aws2openapi\n        version: 1.0.0\n      x-apisguru-direct: true\n  x-apiClientRegistration:\n    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct\n  x-apisguru-categories:\n    - cloud\n  x-preferred: true\nexternalDocs:\n  description: Amazon Web Services documentation\n  url: https://docs.aws.amazon.com/mediastore/\nsecurity:\n  - hmac: []\npaths:\n  \"/{Path}\":\n    delete:\n      operationId: DeleteObject\n      description: Deletes an object at the specified path.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DeleteObjectResponse\"\n        \"480\":\n          description: ContainerNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContainerNotFoundException\"\n        \"481\":\n          description: ObjectNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ObjectNotFoundException\"\n        \"482\":\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InternalServerError\"\n      parameters:\n        - name: Path\n          in: path\n          required: true\n          description: \"The path (including the file name) where the object is stored in\n            the container. Format: \u0026lt;folder name\u0026gt;/\u0026lt;folder\n            name\u0026gt;/\u0026lt;file name\u0026gt;\"\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 900\n            pattern: (?:[A-Za-z0-9_\\.\\-\\~]+/){0,10}[A-Za-z0-9_\\.\\-\\~]+\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n    head:\n      operationId: DescribeObject\n      description: Gets the headers for an object at the specified path.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DescribeObjectResponse\"\n        \"480\":\n          description: ContainerNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContainerNotFoundException\"\n        \"481\":\n          description: ObjectNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ObjectNotFoundException\"\n        \"482\":\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InternalServerError\"\n      parameters:\n        - name: Path\n          in: path\n          required: true\n          description: \"The path (including the file name) where the object is stored in\n            the container. Format: \u0026lt;folder name\u0026gt;/\u0026lt;folder\n            name\u0026gt;/\u0026lt;file name\u0026gt;\"\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 900\n            pattern: (?:[A-Za-z0-9_\\.\\-\\~]+/){0,10}[A-Za-z0-9_\\.\\-\\~]+\n    get:\n      operationId: GetObject\n      description: Downloads the object at the specified path. If the object’s upload\n        availability is set to \u003ccode\u003estreaming\u003c/code\u003e, AWS Elemental MediaStore\n        downloads the object even if it’s still uploading the object.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetObjectResponse\"\n        \"480\":\n          description: ContainerNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContainerNotFoundException\"\n        \"481\":\n          description: ObjectNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ObjectNotFoundException\"\n        \"482\":\n          description: RequestedRangeNotSatisfiableException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestedRangeNotSatisfiableException\"\n        \"483\":\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InternalServerError\"\n      parameters:\n        - name: Path\n          in: path\n          required: true\n          description: \"\u003cp\u003eThe path (including the file name) where the object is stored in\n            the container. Format: \u0026lt;folder name\u0026gt;/\u0026lt;folder\n            name\u0026gt;/\u0026lt;file name\u0026gt;\u003c/p\u003e \u003cp\u003eFor example, to upload the file\n            \u003ccode\u003emlaw.avi\u003c/code\u003e to the folder path\n            \u003ccode\u003epremium\\\\canada\u003c/code\u003e in the container \u003ccode\u003emovies\u003c/code\u003e,\n            enter the path \u003ccode\u003epremium/canada/mlaw.avi\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eDo not\n            include the container name in this path.\u003c/p\u003e \u003cp\u003eIf the path includes\n            any folders that don't exist yet, the service creates them. For\n            example, suppose you have an existing \u003ccode\u003epremium/usa\u003c/code\u003e\n            subfolder. If you specify \u003ccode\u003epremium/canada\u003c/code\u003e, the service\n            creates a \u003ccode\u003ecanada\u003c/code\u003e subfolder in the \u003ccode\u003epremium\u003c/code\u003e\n            folder. You then have two subfolders, \u003ccode\u003eusa\u003c/code\u003e and\n            \u003ccode\u003ecanada\u003c/code\u003e, in the \u003ccode\u003epremium\u003c/code\u003e folder. \u003c/p\u003e\n            \u003cp\u003eThere is no correlation between the path to the source and the\n            path (folders) in the container in AWS Elemental MediaStore.\u003c/p\u003e\n            \u003cp\u003eFor more information about folders and how they exist in a\n            container, see the \u003ca\n            href=\\\"http://docs.aws.amazon.com/mediastore/latest/ug/\\\"\u003eAWS\n            Elemental MediaStore User Guide\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eThe file name is the\n            name that is assigned to the file that you upload. The file can have\n            the same name inside and outside of AWS Elemental MediaStore, or it\n            can have the same name. The file name can include or omit an\n            extension. \u003c/p\u003e\"\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 900\n            pattern: (?:[A-Za-z0-9_\\.\\-\\~]+/){0,10}[A-Za-z0-9_\\.\\-\\~]+\n        - name: Range\n          in: header\n          required: false\n          description: The range bytes of an object to retrieve. For more information about\n            the \u003ccode\u003eRange\u003c/code\u003e header, see \u003ca\n            href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35\"\u003ehttp://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35\u003c/a\u003e.\n            AWS Elemental MediaStore ignores this header for partially uploaded\n            objects that have streaming upload availability.\n          schema:\n            type: string\n            pattern: ^bytes=(?:\\d+\\-\\d*|\\d*\\-\\d+)$\n    put:\n      operationId: PutObject\n      description: Uploads an object to the specified path. Object sizes are limited to 25\n        MB for standard upload availability and 10 MB for streaming upload\n        availability.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PutObjectResponse\"\n        \"480\":\n          description: ContainerNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContainerNotFoundException\"\n        \"481\":\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InternalServerError\"\n      parameters:\n        - name: Path\n          in: path\n          required: true\n          description: \"\u003cp\u003eThe path (including the file name) where the object is stored in\n            the container. Format: \u0026lt;folder name\u0026gt;/\u0026lt;folder\n            name\u0026gt;/\u0026lt;file name\u0026gt;\u003c/p\u003e \u003cp\u003eFor example, to upload the file\n            \u003ccode\u003emlaw.avi\u003c/code\u003e to the folder path\n            \u003ccode\u003epremium\\\\canada\u003c/code\u003e in the container \u003ccode\u003emovies\u003c/code\u003e,\n            enter the path \u003ccode\u003epremium/canada/mlaw.avi\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eDo not\n            include the container name in this path.\u003c/p\u003e \u003cp\u003eIf the path includes\n            any folders that don't exist yet, the service creates them. For\n            example, suppose you have an existing \u003ccode\u003epremium/usa\u003c/code\u003e\n            subfolder. If you specify \u003ccode\u003epremium/canada\u003c/code\u003e, the service\n            creates a \u003ccode\u003ecanada\u003c/code\u003e subfolder in the \u003ccode\u003epremium\u003c/code\u003e\n            folder. You then have two subfolders, \u003ccode\u003eusa\u003c/code\u003e and\n            \u003ccode\u003ecanada\u003c/code\u003e, in the \u003ccode\u003epremium\u003c/code\u003e folder. \u003c/p\u003e\n            \u003cp\u003eThere is no correlation between the path to the source and the\n            path (folders) in the container in AWS Elemental MediaStore.\u003c/p\u003e\n            \u003cp\u003eFor more information about folders and how they exist in a\n            container, see the \u003ca\n            href=\\\"http://docs.aws.amazon.com/mediastore/latest/ug/\\\"\u003eAWS\n            Elemental MediaStore User Guide\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eThe file name is the\n            name that is assigned to the file that you upload. The file can have\n            the same name inside and outside of AWS Elemental MediaStore, or it\n            can have the same name. The file name can include or omit an\n            extension. \u003c/p\u003e\"\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 900\n            pattern: (?:[A-Za-z0-9_\\.\\-\\~]+/){0,10}[A-Za-z0-9_\\.\\-\\~]+\n        - name: Content-Type\n          in: header\n          required: false\n          description: The content type of the object.\n          schema:\n            type: string\n            pattern: ^[\\w\\-\\/\\.\\+]{1,255}$\n        - name: Cache-Control\n          in: header\n          required: false\n          description: \u003cp\u003eAn optional \u003ccode\u003eCacheControl\u003c/code\u003e header that allows the\n            caller to control the object's cache behavior. Headers can be passed\n            in as specified in the HTTP at \u003ca\n            href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\"\u003ehttps://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\u003c/a\u003e.\u003c/p\u003e\n            \u003cp\u003eHeaders with a custom user-defined value are also accepted.\u003c/p\u003e\n          schema:\n            type: string\n        - name: x-amz-storage-class\n          in: header\n          required: false\n          description: Indicates the storage class of a \u003ccode\u003ePut\u003c/code\u003e request. Defaults\n            to high-performance temporal storage class, and objects are\n            persisted into durable storage shortly after being received.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 16\n            enum:\n              - TEMPORAL\n        - name: x-amz-upload-availability\n          in: header\n          required: false\n          description: \u003cp\u003eIndicates the availability of an object while it is still\n            uploading. If the value is set to \u003ccode\u003estreaming\u003c/code\u003e, the object\n            is available for downloading after some initial buffering but before\n            the object is uploaded completely. If the value is set to\n            \u003ccode\u003estandard\u003c/code\u003e, the object is available for downloading only\n            when it is uploaded completely. The default value for this header is\n            \u003ccode\u003estandard\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eTo use this header, you must also set\n            the HTTP \u003ccode\u003eTransfer-Encoding\u003c/code\u003e header to\n            \u003ccode\u003echunked\u003c/code\u003e.\u003c/p\u003e\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 16\n            enum:\n              - STANDARD\n              - STREAMING\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - Body\n              properties:\n                Body:\n                  description: \"The bytes to be stored. \"\n                  type: string\n        required: true\n  /:\n    get:\n      operationId: ListItems\n      description: Provides a list of metadata entries about folders and objects in the\n        specified folder.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListItemsResponse\"\n        \"480\":\n          description: ContainerNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContainerNotFoundException\"\n        \"481\":\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InternalServerError\"\n      parameters:\n        - name: Path\n          in: query\n          required: false\n          description: \"The path in the container from which to retrieve items. Format:\n            \u0026lt;folder name\u0026gt;/\u0026lt;folder name\u0026gt;/\u0026lt;file name\u0026gt;\"\n          schema:\n            type: string\n            minLength: 0\n            maxLength: 900\n            pattern: /?(?:[A-Za-z0-9_\\.\\-\\~]+/){0,10}(?:[A-Za-z0-9_\\.\\-\\~]+)?/?\n        - name: MaxResults\n          in: query\n          required: false\n          description: \u003cp\u003eThe maximum number of results to return per API request. For\n            example, you submit a \u003ccode\u003eListItems\u003c/code\u003e request with\n            \u003ccode\u003eMaxResults\u003c/code\u003e set at 500. Although 2,000 items match your\n            request, the service returns no more than the first 500 items. (The\n            service also returns a \u003ccode\u003eNextToken\u003c/code\u003e value that you can use\n            to fetch the next batch of results.) The service might return fewer\n            results than the \u003ccode\u003eMaxResults\u003c/code\u003e value.\u003c/p\u003e \u003cp\u003eIf\n            \u003ccode\u003eMaxResults\u003c/code\u003e is not included in the request, the service\n            defaults to pagination with a maximum of 1,000 results per page.\u003c/p\u003e\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 1000\n        - name: NextToken\n          in: query\n          required: false\n          description: \u003cp\u003eThe token that identifies which batch of results that you want to\n            see. For example, you submit a \u003ccode\u003eListItems\u003c/code\u003e request with\n            \u003ccode\u003eMaxResults\u003c/code\u003e set at 500. The service returns the first\n            batch of results (up to 500) and a \u003ccode\u003eNextToken\u003c/code\u003e value. To\n            see the next batch of results, you can submit the\n            \u003ccode\u003eListItems\u003c/code\u003e request a second time and specify the\n            \u003ccode\u003eNextToken\u003c/code\u003e value.\u003c/p\u003e \u003cp\u003eTokens expire after 15\n            minutes.\u003c/p\u003e\n          schema:\n            type: string\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\nservers:\n  - url: http://data.mediastore.{region}.amazonaws.com\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-south-1\n          - sa-east-1\n        default: us-east-1\n    description: The MediaStore Data multi-region endpoint\n  - url: https://data.mediastore.{region}.amazonaws.com\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-south-1\n          - sa-east-1\n        default: us-east-1\n    description: The MediaStore Data multi-region endpoint\n  - url: http://data.mediastore.{region}.amazonaws.com.cn\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The MediaStore Data endpoint for China (Beijing) and China (Ningxia)\n  - url: https://data.mediastore.{region}.amazonaws.com.cn\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The MediaStore Data endpoint for China (Beijing) and China (Ningxia)\ncomponents:\n  parameters:\n    X-Amz-Content-Sha256:\n      name: X-Amz-Content-Sha256\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Date:\n      name: X-Amz-Date\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Algorithm:\n      name: X-Amz-Algorithm\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Credential:\n      name: X-Amz-Credential\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Security-Token:\n      name: X-Amz-Security-Token\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Signature:\n      name: X-Amz-Signature\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-SignedHeaders:\n      name: X-Amz-SignedHeaders\n      in: header\n      required: false\n      schema:\n        type: string\n  securitySchemes:\n    hmac:\n      type: apiKey\n      name: Authorization\n      in: header\n      description: Amazon Signature authorization v4\n      x-amazon-apigateway-authtype: awsSigv4\n  schemas:\n    DeleteObjectResponse:\n      type: object\n      properties: {}\n    ContainerNotFoundException: {}\n    ObjectNotFoundException: {}\n    InternalServerError: {}\n    DescribeObjectResponse:\n      type: object\n      properties: {}\n    GetObjectResponse:\n      type: object\n      properties:\n        Body:\n          $ref: \"#/components/schemas/PayloadBlob\"\n        StatusCode:\n          $ref: \"#/components/schemas/statusCode\"\n    RequestedRangeNotSatisfiableException: {}\n    ListItemsResponse:\n      type: object\n      properties:\n        Items:\n          $ref: \"#/components/schemas/ItemList\"\n        NextToken:\n          $ref: \"#/components/schemas/PaginationToken\"\n    PutObjectResponse:\n      type: object\n      properties:\n        ContentSHA256:\n          $ref: \"#/components/schemas/SHA256Hash\"\n        ETag:\n          $ref: \"#/components/schemas/ETag\"\n        StorageClass:\n          $ref: \"#/components/schemas/StorageClass\"\n    ContentRangePattern:\n      type: string\n      pattern: ^bytes=\\d+\\-\\d+/\\d+$\n    ContentType:\n      type: string\n      pattern: ^[\\w\\-\\/\\.\\+]{1,255}$\n    PathNaming:\n      type: string\n      pattern: (?:[A-Za-z0-9_\\.\\-\\~]+/){0,10}[A-Za-z0-9_\\.\\-\\~]+\n      minLength: 1\n      maxLength: 900\n    DeleteObjectRequest:\n      type: object\n      properties: {}\n    DescribeObjectRequest:\n      type: object\n      properties: {}\n    ETag:\n      type: string\n      pattern: \"[0-9A-Fa-f]+\"\n      minLength: 1\n      maxLength: 64\n    NonNegativeLong:\n      type: integer\n      minimum: 0\n    StringPrimitive:\n      type: string\n    TimeStamp:\n      type: string\n      format: date-time\n    RangePattern:\n      type: string\n      pattern: ^bytes=(?:\\d+\\-\\d*|\\d*\\-\\d+)$\n    GetObjectRequest:\n      type: object\n      properties: {}\n    PayloadBlob:\n      type: string\n    statusCode:\n      type: integer\n    ItemName:\n      type: string\n      pattern: \"[A-Za-z0-9_\\\\.\\\\-\\\\~]+\"\n    ItemType:\n      type: string\n      enum:\n        - OBJECT\n        - FOLDER\n    Item:\n      type: object\n      properties:\n        Name:\n          $ref: \"#/components/schemas/ItemName\"\n        Type:\n          $ref: \"#/components/schemas/ItemType\"\n        ETag:\n          $ref: \"#/components/schemas/ETag\"\n        LastModified:\n          $ref: \"#/components/schemas/TimeStamp\"\n        ContentType:\n          $ref: \"#/components/schemas/ContentType\"\n        ContentLength:\n          $ref: \"#/components/schemas/NonNegativeLong\"\n      description: A metadata entry for a folder or object.\n    ItemList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Item\"\n    ListPathNaming:\n      type: string\n      pattern: /?(?:[A-Za-z0-9_\\.\\-\\~]+/){0,10}(?:[A-Za-z0-9_\\.\\-\\~]+)?/?\n      minLength: 0\n      maxLength: 900\n    ListLimit:\n      type: integer\n      minimum: 1\n      maximum: 1000\n    PaginationToken:\n      type: string\n    ListItemsRequest:\n      type: object\n      properties: {}\n    StorageClass:\n      type: string\n      enum:\n        - TEMPORAL\n      minLength: 1\n      maxLength: 16\n    UploadAvailability:\n      type: string\n      enum:\n        - STANDARD\n        - STREAMING\n      minLength: 1\n      maxLength: 16\n    PutObjectRequest:\n      type: object\n      required:\n        - Body\n      properties:\n        Body:\n          $ref: \"#/components/schemas/PayloadBlob\"\n    SHA256Hash:\n      type: string\n      pattern: \"[0-9A-Fa-f]{64}\"\n      minLength: 64\n      maxLength: 64\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/amazonaws.com-mediastore-data-2017-09-01-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/amazonaws.com-mediastore-data-2017-09-01-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}