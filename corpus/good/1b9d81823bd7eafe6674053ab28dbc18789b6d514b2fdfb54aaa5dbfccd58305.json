{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "opendatasoft.com-2.1.0-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/opendatasoft.com-2.1.0-swagger.yaml",
			"byteSize": 42311,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    x-twitter: opendatasoft\n  title: opendatasoft\n  version: 2.1.0\n  x-apisguru-categories:\n    - open_data\n  x-logo:\n    url: https://twitter.com/opendatasoft/profile_image?size=original\n  x-origin:\n    - format: swagger\n      url: http://public.opendatasoft.com/api/v2/swagger.json\n      version: \"2.0\"\n  x-providerName: opendatasoft.com\nsecurity:\n  - api_key: []\n  - basic: []\ntags:\n  - name: root\n  - name: metadata\n  - name: catalog\n  - name: export catalog\n  - name: dataset\n  - name: export dataset\npaths:\n  /:\n    get:\n      description: |\n        API entry point\n\n        Provides links for:\n        * catalog, your domain's list of datasets\n        * opendatasoft, all datasets on the Opendatasoft network\n      operationId: getRoot\n      responses:\n        \"200\":\n          description: Provide a set of links to the most basic entry points in the API\n            (sources)\n          content:\n            application/json:\n              schema:\n                properties:\n                  links:\n                    items:\n                      $ref: \"#/components/schemas/link\"\n                    type: array\n      tags:\n        - root\n        - ods\n  /pages:\n    get:\n      description: |\n        List of all pages from this portal.\n      operationId: getPages\n      responses:\n        \"200\":\n          description: List of all pages, each with their endpoint.\n          content:\n            application/json:\n              schema:\n                properties:\n                  links:\n                    items:\n                      $ref: \"#/components/schemas/link\"\n                    type: array\n                  pages:\n                    items:\n                      properties:\n                        links:\n                          items:\n                            $ref: \"#/components/schemas/link\"\n                          type: array\n                        page:\n                          $ref: \"#/components/schemas/page\"\n                      type: object\n                    type: array\n      tags:\n        - page\n        - ods\n  \"/pages/{slug}\":\n    get:\n      description: |\n        A single page's metadata from this portal\n      operationId: getPage\n      parameters:\n        - $ref: \"#/components/parameters/slug\"\n      responses:\n        \"200\":\n          description: A single page's metadata.\n          content:\n            application/json:\n              schema:\n                properties:\n                  links:\n                    items:\n                      $ref: \"#/components/schemas/link\"\n                    type: array\n                  page:\n                    $ref: \"#/components/schemas/page\"\n      tags:\n        - page\n        - ods\n  \"/{source}\":\n    get:\n      description: |\n        Source entry points\n\n        Provides links for the source's datasets and metadata.\n      operationId: getSource\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n      responses:\n        \"200\":\n          description: Provide a set of links to the basic entry points for the given\n            source.\n          content:\n            application/json:\n              schema:\n                properties:\n                  links:\n                    items:\n                      $ref: \"#/components/schemas/link\"\n                    type: array\n      tags:\n        - catalog\n        - ods\n  \"/{source}/aggregates\":\n    get:\n      description: \u003e\n        Compute aggregations from catalog and return a list of each aggregate\n        indexed by their names.\n      operationId: aggregateDatasets\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/select\"\n        - $ref: \"#/components/parameters/group_by\"\n        - $ref: \"#/components/parameters/where\"\n      responses:\n        \"200\":\n          description: Aggregation result\n          content:\n            application/json:\n              schema:\n                properties:\n                  aggregations:\n                    items:\n                      $ref: \"#/components/schemas/aggregation\"\n                    type: array\n                  links:\n                    items:\n                      $ref: \"#/components/schemas/link\"\n                    type: array\n                type: object\n      tags:\n        - catalog\n        - aggregations\n        - ods\n  \"/{source}/datasets\":\n    get:\n      description: |\n        List of available datasets, each with their endpoints, paginated.\n\n        Links provided:\n        * previous page\n        * next page\n        * last page\n        * first page\n      operationId: getDatasets\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/where\"\n        - $ref: \"#/components/parameters/search\"\n        - $ref: \"#/components/parameters/rows\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/sort\"\n        - $ref: \"#/components/parameters/pretty\"\n        - $ref: \"#/components/parameters/timezone\"\n        - $ref: \"#/components/parameters/include_app_metas\"\n      responses:\n        \"200\":\n          description: List of available datasets\n          content:\n            application/json:\n              schema:\n                properties:\n                  datasets:\n                    items:\n                      properties:\n                        dataset:\n                          $ref: \"#/components/schemas/dataset\"\n                        links:\n                          items:\n                            $ref: \"#/components/schemas/link\"\n                          type: array\n                      type: object\n                    type: array\n                  links:\n                    items:\n                      $ref: \"#/components/schemas/link\"\n                    type: array\n                  total_count:\n                    type: integer\n      tags:\n        - catalog\n        - ods\n  \"/{source}/datasets/{dataset_id}\":\n    get:\n      description: \u003e\n        List of available endpoints for the specified dataset, with metadata and\n        endpoints.\n\n\n        Will provide links for:\n\n        * the attachments endpoint\n\n        * the files endpoint\n\n        * the records endpoint\n\n        * the catalog endpoint\n      operationId: getDataset\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/dataset_id\"\n        - $ref: \"#/components/parameters/pretty\"\n        - $ref: \"#/components/parameters/timezone\"\n        - $ref: \"#/components/parameters/select\"\n        - $ref: \"#/components/parameters/include_app_metas\"\n      responses:\n        \"200\":\n          description: The dataset\n          content:\n            application/json:\n              schema:\n                properties:\n                  dataset:\n                    $ref: \"#/components/schemas/dataset\"\n                  links:\n                    items:\n                      $ref: \"#/components/schemas/link\"\n                    type: array\n      tags:\n        - dataset\n        - ods\n  \"/{source}/datasets/{dataset_id}/aggregates\":\n    get:\n      description: \u003e\n        Compute aggregations from dataset records and return a list of each\n        aggregate indexed by their names.\n      operationId: aggregateRecords\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/dataset_id\"\n        - $ref: \"#/components/parameters/select\"\n        - $ref: \"#/components/parameters/group_by\"\n        - $ref: \"#/components/parameters/where\"\n      responses:\n        \"200\":\n          description: Aggregation result\n          content:\n            application/json:\n              schema:\n                properties:\n                  aggregations:\n                    items:\n                      $ref: \"#/components/schemas/aggregation\"\n                    type: array\n                  links:\n                    items:\n                      $ref: \"#/components/schemas/link\"\n                    type: array\n      tags:\n        - dataset\n        - aggregations\n        - ods\n  \"/{source}/datasets/{dataset_id}/attachments\":\n    get:\n      description: |\n        Get list of all available attachments\n      operationId: getDatasetAttachements\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/dataset_id\"\n      responses:\n        \"200\":\n          description: List of all available attachments\n          content:\n            application/json:\n              schema:\n                properties:\n                  attachments:\n                    items:\n                      $ref: \"#/components/schemas/attachment\"\n                    type: array\n                  links:\n                    items:\n                      $ref: \"#/components/schemas/link\"\n                    type: array\n      tags:\n        - dataset\n        - ods\n  \"/{source}/datasets/{dataset_id}/attachments/{attachment_id}\":\n    get:\n      description: |\n        Download attachment\n      operationId: downloadDatasetAttachement\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/dataset_id\"\n        - $ref: \"#/components/parameters/attachment_id\"\n      responses:\n        \"200\":\n          description: The requested attachment\n      tags:\n        - dataset\n        - ods\n  \"/{source}/datasets/{dataset_id}/exports/csv\":\n    get:\n      description: |\n        Export dataset in CSV format\n      operationId: exportRecordsCSV\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/dataset_id\"\n        - $ref: \"#/components/parameters/where\"\n        - $ref: \"#/components/parameters/rows_export\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/sort\"\n        - $ref: \"#/components/parameters/select\"\n        - $ref: \"#/components/parameters/timezone\"\n        - description: Provide a different delimiter (default ',').\n          in: query\n          name: delimiter\n          required: false\n          schema:\n            type: string\n            enum:\n              - \",\"\n              - ;\n              - \"|\"\n            default: ;\n      responses:\n        \"200\":\n          description: Return a CSV file\n          content:\n            text/csv:\n              schema:\n                type: string\n                format: binary\n      tags:\n        - export dataset\n        - ods\n  \"/{source}/datasets/{dataset_id}/exports/geojson\":\n    get:\n      description: |\n        Export dataset in GEOJSON format\n      operationId: exportRecordsGEOJSON\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/dataset_id\"\n        - $ref: \"#/components/parameters/where\"\n        - $ref: \"#/components/parameters/search\"\n        - $ref: \"#/components/parameters/rows_export\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/sort\"\n        - $ref: \"#/components/parameters/select\"\n        - $ref: \"#/components/parameters/timezone\"\n        - $ref: \"#/components/parameters/pretty\"\n      responses:\n        \"200\":\n          description: Return a GEOJSON file\n          content:\n            application/json:\n              schema:\n                type: string\n                format: binary\n      tags:\n        - export dataset\n        - ods\n  \"/{source}/datasets/{dataset_id}/exports/ical\":\n    get:\n      description: |\n        Export dataset in ICAL format\n      operationId: exportRecordsICAL\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/dataset_id\"\n        - $ref: \"#/components/parameters/where\"\n        - $ref: \"#/components/parameters/search\"\n        - $ref: \"#/components/parameters/rows_export\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/sort\"\n        - $ref: \"#/components/parameters/select\"\n        - $ref: \"#/components/parameters/timezone\"\n      responses:\n        \"200\":\n          description: Return an ICAL file\n          content:\n            application/json:\n              schema:\n                type: string\n                format: binary\n      tags:\n        - export dataset\n        - ods\n  \"/{source}/datasets/{dataset_id}/exports/json\":\n    get:\n      description: |\n        Export dataset in JSON format\n      operationId: exportRecordsJSON\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/dataset_id\"\n        - $ref: \"#/components/parameters/where\"\n        - $ref: \"#/components/parameters/search\"\n        - $ref: \"#/components/parameters/rows_export\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/sort\"\n        - $ref: \"#/components/parameters/select\"\n        - $ref: \"#/components/parameters/pretty\"\n        - $ref: \"#/components/parameters/timezone\"\n      responses:\n        \"200\":\n          description: Return a JSON file\n          content:\n            application/json:\n              schema:\n                type: string\n                format: binary\n      tags:\n        - export dataset\n        - ods\n  \"/{source}/datasets/{dataset_id}/exports/ov2\":\n    get:\n      description: |\n        Export dataset in OV2 format\n      operationId: exportRecordsOV2\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/dataset_id\"\n        - $ref: \"#/components/parameters/where\"\n        - $ref: \"#/components/parameters/search\"\n        - $ref: \"#/components/parameters/rows_export\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/sort\"\n        - $ref: \"#/components/parameters/select\"\n        - $ref: \"#/components/parameters/timezone\"\n      responses:\n        \"200\":\n          description: Return an ov2 file\n          content:\n            text/plain:\n              schema:\n                type: string\n                format: binary\n      tags:\n        - export dataset\n        - ods\n  \"/{source}/datasets/{dataset_id}/exports/shp\":\n    get:\n      description: |\n        Export dataset in Esri shapefile (shp) format\n      operationId: exportRecordsSHP\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/dataset_id\"\n        - $ref: \"#/components/parameters/where\"\n        - $ref: \"#/components/parameters/search\"\n        - $ref: \"#/components/parameters/rows_export\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/sort\"\n        - $ref: \"#/components/parameters/select\"\n        - $ref: \"#/components/parameters/timezone\"\n      responses:\n        \"200\":\n          description: Return a Shapefile zip\n          content:\n            application/zip:\n              schema:\n                type: string\n                format: binary\n      tags:\n        - export dataset\n        - ods\n  \"/{source}/datasets/{dataset_id}/exports/xls\":\n    get:\n      description: |\n        Export dataset in XLS (Excel) format\n      operationId: exportRecordsXLS\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/dataset_id\"\n        - $ref: \"#/components/parameters/where\"\n        - $ref: \"#/components/parameters/search\"\n        - $ref: \"#/components/parameters/rows_export\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/sort\"\n        - $ref: \"#/components/parameters/select\"\n        - $ref: \"#/components/parameters/timezone\"\n      responses:\n        \"200\":\n          description: Return an XLS file\n          content:\n            application/vnd.ms-excel:\n              schema:\n                type: string\n                format: binary\n      tags:\n        - export dataset\n        - ods\n  \"/{source}/datasets/{dataset_id}/feedback\":\n    put:\n      description: |\n        Create new feedback entry.\n      operationId: sendDatasetFeedback\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/dataset_id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                comment:\n                  type: string\n                newValues:\n                  description: New record value\n                  type: object\n                recordid:\n                  description: Feedback entry's recordid\n                  type: string\n                schema:\n                  description: Record schema\n                  type: object\n        description: Feedback entry\n        required: true\n      responses:\n        \"201\":\n          description: |\n            Success message: {status: 'ok'}\n      tags:\n        - dataset\n        - ods\n  \"/{source}/datasets/{dataset_id}/files/{file_id}\":\n    get:\n      description: |\n        Download file\n      operationId: getDatasetFile\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/dataset_id\"\n        - $ref: \"#/components/parameters/file_id\"\n        - $ref: \"#/components/parameters/thumbnail_size\"\n      responses:\n        \"200\":\n          description: The requested file, or its thumbnail (if thumbnail_size is specified)\n      tags:\n        - dataset\n        - ods\n  \"/{source}/datasets/{dataset_id}/records\":\n    get:\n      description: |\n        Search dataset's records.\n      operationId: getRecords\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/dataset_id\"\n        - $ref: \"#/components/parameters/where\"\n        - $ref: \"#/components/parameters/search\"\n        - $ref: \"#/components/parameters/rows\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/sort\"\n        - $ref: \"#/components/parameters/select\"\n        - $ref: \"#/components/parameters/pretty\"\n        - $ref: \"#/components/parameters/timezone\"\n      responses:\n        \"200\":\n          description: Records\n          content:\n            application/json:\n              schema:\n                properties:\n                  links:\n                    items:\n                      $ref: \"#/components/schemas/link\"\n                    type: array\n                  records:\n                    items:\n                      properties:\n                        links:\n                          items:\n                            $ref: \"#/components/schemas/link\"\n                          type: array\n                        record:\n                          $ref: \"#/components/schemas/record\"\n                      type: object\n                    type: array\n                  total_count:\n                    type: integer\n      tags:\n        - dataset\n        - ods\n  \"/{source}/datasets/{dataset_id}/records/{record_id}\":\n    get:\n      description: |\n        Retrieve a single record based on its ID.\n      operationId: getRecord\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/dataset_id\"\n        - $ref: \"#/components/parameters/record_id\"\n        - $ref: \"#/components/parameters/pretty\"\n        - $ref: \"#/components/parameters/timezone\"\n        - $ref: \"#/components/parameters/select\"\n      responses:\n        \"200\":\n          description: A single record\n          content:\n            application/json:\n              schema:\n                properties:\n                  links:\n                    items:\n                      $ref: \"#/components/schemas/link\"\n                    type: array\n                  record:\n                    $ref: \"#/components/schemas/record\"\n      tags:\n        - dataset\n        - ods\n  \"/{source}/datasets/{dataset_id}/reuses\":\n    get:\n      description: |\n        Get list of reuses\n      operationId: getDatasetReuses\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/dataset_id\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/rows\"\n        - $ref: \"#/components/parameters/timezone\"\n      responses:\n        \"200\":\n          description: |\n            A paginated list of reuses\n          content:\n            application/json:\n              schema:\n                properties:\n                  links:\n                    items:\n                      $ref: \"#/components/schemas/link\"\n                    type: array\n                  reuses:\n                    items:\n                      $ref: \"#/components/schemas/reuse\"\n                    type: array\n      tags:\n        - dataset\n        - ods\n  \"/{source}/datasets/{dataset_id}/reuses/{reuse_id}\":\n    get:\n      description: |\n        Retrieve a single reuse based on its ID.\n      operationId: getDatasetReuse\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/dataset_id\"\n        - $ref: \"#/components/parameters/reuse_id\"\n        - $ref: \"#/components/parameters/timezone\"\n      responses:\n        \"200\":\n          description: |\n            A paginated list of reuses\n          content:\n            application/json:\n              schema:\n                properties:\n                  links:\n                    items:\n                      $ref: \"#/components/schemas/link\"\n                    type: array\n                  reuse:\n                    $ref: \"#/components/schemas/reuse\"\n      tags:\n        - dataset\n        - ods\n  \"/{source}/datasets/{dataset_id}/snapshots\":\n    get:\n      description: |\n        List of all snapshots for this dataset.\n      operationId: getDatasetSnapshots\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/dataset_id\"\n        - $ref: \"#/components/parameters/timezone\"\n      responses:\n        \"200\":\n          description: List of all snapshots, each with their endpoint.\n          content:\n            application/json:\n              schema:\n                properties:\n                  links:\n                    items:\n                      $ref: \"#/components/schemas/link\"\n                    type: array\n                  snapshots:\n                    items:\n                      $ref: \"#/components/schemas/snapshot\"\n                    type: array\n      tags:\n        - dataset\n        - ods\n  \"/{source}/datasets/{dataset_id}/snapshots/{snapshot_id}\":\n    get:\n      description: |\n        List of all snapshots for this dataset.\n      operationId: downloadDatasetSnapshot\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/dataset_id\"\n        - $ref: \"#/components/parameters/snapshot_id\"\n        - $ref: \"#/components/parameters/timezone\"\n      responses:\n        \"200\":\n          description: The full dataset in the state it was in when the snapshot was\n            created, in CSV\n      tags:\n        - dataset\n        - ods\n  \"/{source}/exports/csv\":\n    get:\n      description: |\n        Export catalog (source) in CSV format\n      operationId: exportDatasetsCSV\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/where\"\n        - $ref: \"#/components/parameters/search\"\n        - $ref: \"#/components/parameters/rows\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/timezone\"\n        - $ref: \"#/components/parameters/include_app_metas\"\n        - description: Provide a different delimiter (default ',').\n          in: query\n          name: delimiter\n          required: false\n          schema:\n            type: string\n            enum:\n              - \",\"\n              - ;\n              - \"|\"\n            default: ;\n      responses:\n        \"200\":\n          description: Return a CSV file\n          content:\n            text/csv:\n              schema:\n                type: string\n                format: binary\n      tags:\n        - export catalog\n        - ods\n  \"/{source}/exports/json\":\n    get:\n      description: |\n        Export catalog (source) in JSON format\n      operationId: exportDatasetsJson\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/where\"\n        - $ref: \"#/components/parameters/search\"\n        - $ref: \"#/components/parameters/rows\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/pretty\"\n        - $ref: \"#/components/parameters/timezone\"\n        - $ref: \"#/components/parameters/include_app_metas\"\n      responses:\n        \"200\":\n          description: Return a JSON file\n          content:\n            application/json:\n              schema:\n                type: string\n                format: binary\n      tags:\n        - export catalog\n        - ods\n  \"/{source}/exports/rdf\":\n    get:\n      description: |\n        Export catalog (source) in RDF/XML format\n      operationId: exportDatasetsRDF\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/where\"\n        - $ref: \"#/components/parameters/search\"\n        - $ref: \"#/components/parameters/rows\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/timezone\"\n        - $ref: \"#/components/parameters/include_app_metas\"\n      responses:\n        \"200\":\n          description: Return a RDF XML file\n          content:\n            application/rdf+xml:\n              schema:\n                type: string\n                format: binary\n      tags:\n        - export catalog\n        - ods\n  \"/{source}/exports/rss\":\n    get:\n      description: |\n        Export catalog (source) in RSS format\n      operationId: exportDatasetsRSS\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/where\"\n        - $ref: \"#/components/parameters/search\"\n        - $ref: \"#/components/parameters/rows\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/timezone\"\n        - $ref: \"#/components/parameters/include_app_metas\"\n      responses:\n        \"200\":\n          description: Return a JSON file\n          content:\n            text/xml:\n              schema:\n                type: string\n                format: binary\n      tags:\n        - export catalog\n        - ods\n  \"/{source}/exports/ttl\":\n    get:\n      description: |\n        Export catalog (source) in TTL (turtle/rdf) format\n      operationId: exportDatasetsTTL\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/where\"\n        - $ref: \"#/components/parameters/search\"\n        - $ref: \"#/components/parameters/rows\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/timezone\"\n        - $ref: \"#/components/parameters/include_app_metas\"\n      responses:\n        \"200\":\n          description: Return a TTL file\n          content:\n            text/turtle:\n              schema:\n                type: string\n                format: binary\n      tags:\n        - export catalog\n        - ods\n  \"/{source}/exports/xls\":\n    get:\n      description: |\n        Export catalog (source) in XLS (Excel) format\n      operationId: exportDatasetsXLS\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/where\"\n        - $ref: \"#/components/parameters/search\"\n        - $ref: \"#/components/parameters/rows\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/timezone\"\n        - $ref: \"#/components/parameters/include_app_metas\"\n      responses:\n        \"200\":\n          description: Return an XLS file\n          content:\n            application/vnd.ms-excel:\n              schema:\n                type: string\n                format: binary\n      tags:\n        - export catalog\n        - ods\n  \"/{source}/metadata_templates\":\n    get:\n      description: |\n        List of available metadata templates types, each with their endpoints.\n      operationId: getMetadataTemplatesTypes\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n      responses:\n        \"200\":\n          description: List of available metadata templates types\n          content:\n            application/json:\n              schema:\n                properties:\n                  links:\n                    items:\n                      $ref: \"#/components/schemas/link\"\n                    type: array\n      tags:\n        - metadata\n        - ods\n  \"/{source}/metadata_templates/{metadata_template_type}\":\n    get:\n      description: |\n        List of metadata templates available for this type.\n      operationId: getMetadataTemplatesType\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/metadata_template_type\"\n      responses:\n        \"200\":\n          description: List of metadata templates\n          content:\n            application/json:\n              schema:\n                properties:\n                  links:\n                    items:\n                      $ref: \"#/components/schemas/link\"\n                    type: array\n                  metadata_templates:\n                    items:\n                      properties:\n                        links:\n                          items:\n                            $ref: \"#/components/schemas/link\"\n                          type: array\n                        metadata_template:\n                          $ref: \"#/components/schemas/metadata_template\"\n                      type: object\n                    type: array\n      tags:\n        - metadata\n        - ods\n  \"/{source}/metadata_templates/{metadata_template_type}/{metadata_template_name}\":\n    get:\n      description: |\n        A single metadata_template\n      operationId: getMetadataTemplate\n      parameters:\n        - $ref: \"#/components/parameters/source\"\n        - $ref: \"#/components/parameters/metadata_template_type\"\n        - $ref: \"#/components/parameters/metadata_template_name\"\n      responses:\n        \"200\":\n          description: A metadata template selected by ID.\n          content:\n            application/json:\n              schema:\n                properties:\n                  links:\n                    items:\n                      $ref: \"#/components/schemas/link\"\n                    type: array\n                  metadata_template:\n                    $ref: \"#/components/schemas/metadata_template\"\n      tags:\n        - metadata\n        - ods\nservers:\n  - url: https://public.opendatasoft.com/api/v2\ncomponents:\n  parameters:\n    attachment_id:\n      in: path\n      name: attachment_id\n      required: true\n      schema:\n        type: string\n    dataset_id:\n      description: |\n        Dataset identifier.\n\n        Can be found in the \"information\" tab of the dataset page.\n      in: path\n      name: dataset_id\n      required: true\n      schema:\n        type: string\n    file_id:\n      in: path\n      name: file_id\n      required: true\n      schema:\n        type: string\n    group_by:\n      description: \u003e\n        A group by expression defines a grouping function for an aggregation.\n\n        It can be:\n         - a field name: group result by each value of this field\n         - a range function: group result by range\n         - a date function: group result by date\n        It is possible to specify a custom name with the 'as name' notation. For instance: group_by='city_field as city'.\n      in: query\n      name: group_by\n      required: false\n      schema:\n        type: string\n    include_app_metas:\n      description: |\n        Explicitely request application metas for each datasets.\n      in: query\n      name: include_app_metas\n      schema:\n        type: boolean\n        default: false\n    metadata_template_name:\n      in: path\n      name: metadata_template_name\n      required: true\n      schema:\n        type: string\n    metadata_template_type:\n      in: path\n      name: metadata_template_type\n      required: true\n      schema:\n        type: string\n        enum:\n          - basic\n          - interop\n          - extra\n        default: basic\n    mime_type:\n      description: Specify one (or many) mime type(s) and return only the files matching\n        said type(s).\n      in: query\n      name: mime_type\n      required: false\n      schema:\n        type: string\n    pretty:\n      description: Activate pretty print\n      in: query\n      name: pretty\n      schema:\n        type: boolean\n        default: false\n    record_id:\n      in: path\n      name: record_id\n      required: true\n      schema:\n        type: string\n    reuse_id:\n      in: path\n      name: reuse_id\n      required: true\n      schema:\n        type: string\n    rows:\n      description: |\n        Number of items to return.\n\n        To use in conjonction with start to implement pagination.\n\n        Rows maximum value is 100. To retrive more data use export entry points.\n      in: query\n      name: rows\n      required: false\n      schema:\n        type: integer\n        minimum: -1\n        maximum: 100\n        default: 10\n    rows_export:\n      description: |\n        Number of items to return in export.\n\n        Use -1 to retrieve all records\n      in: query\n      name: rows\n      required: false\n      schema:\n        type: integer\n        minimum: -1\n        default: -1\n    search:\n      description: \u003e\n        An array of full text search.\n\n\n        A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.\n      in: query\n      name: search\n      required: false\n      explode: true\n      schema:\n        type: array\n        items:\n          type: string\n    select:\n      description: \u003e\n        A select expression can be used to add, remove or change fields to\n        return.\n\n        An expression can be:\n          - a wildcard ('*'): return all fields\n          - a field name: return only this field\n          - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'\n          - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value.\n      in: query\n      name: select\n      required: false\n      schema:\n        type: string\n    slug:\n      description: |\n        Page slug.\n      in: path\n      name: slug\n      required: true\n      schema:\n        type: string\n    snapshot_id:\n      in: path\n      name: snapshot_id\n      required: true\n      schema:\n        type: string\n    sort:\n      description: \u003e\n        A list of field names, each possibly prefixed with a minus (-).\n\n\n        May also be 'random(seed)', where seed can be omitted but if specified must be an int. This allows to keep\n\n        relative ordering during pagination.\n\n\n        Sorts results according to the specified fields' values. By default, the sort is ascending (from the highest\n\n        value to the smallest value). A minus sign (‘-‘) may be used to perform a descending sort. Sorting is only\n\n        available on numeric fields (int, double, date and datetime) and on text fields which have the sortable\n\n        annotation.\n      in: query\n      name: sort\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n    source:\n      description: \u003e\n        Each source represents a different catalog of datasets you'll be able to\n        query.\n\n\n        There are 2 sources available:\n\n\n        * catalog: the catalog of datasets on your portal\n\n        * opendatasoft: Opendatasoft's repository of public datasets, also available at\n          [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)\n      in: path\n      name: source\n      required: true\n      schema:\n        type: string\n        enum:\n          - catalog\n          - opendatasoft\n          - monitoring\n        default: catalog\n    start:\n      description: |\n        Index of the first item to return (starting at 0).\n\n        To use in conjonction with rows to implement pagination.\n      in: query\n      name: start\n      required: false\n      schema:\n        type: integer\n        minimum: 0\n        default: 0\n    thumbnail_size:\n      description: Set the size of the thumbnail representing the resource (attachment,\n        image or file)\n      in: query\n      name: thumbnail_size\n      schema:\n        type: string\n    timezone:\n      description: Set timezone for datetime fields\n      in: query\n      name: timezone\n      schema:\n        type: string\n        default: UTC\n    where:\n      description: \u003e\n        An array of filters.\n\n\n        A filter is a text expression performing a simple full-text search that can also include logical operations\n\n        (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.\n\n        See [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.\n      in: query\n      name: where\n      required: false\n      explode: true\n      schema:\n        type: array\n        items:\n          type: string\n  securitySchemes:\n    api_key:\n      in: query\n      name: apikey\n      type: apiKey\n    basic:\n      type: http\n      scheme: basic\n  schemas:\n    aggregation:\n      description: Result of an aggregation request.\n      example:\n        count(*): 86\n      type: object\n    attachment:\n      properties:\n        href:\n          type: string\n        metas:\n          type: object\n      type: object\n    dataset:\n      properties:\n        attachments:\n          items:\n            type: object\n          type: array\n        data_visible:\n          type: boolean\n        dataset_id:\n          type: string\n        features:\n          description: \u003e\n            A map of available features for a dataset, with the fields they\n            apply to.\n          items:\n            type: string\n          type: array\n        fields:\n          items:\n            properties:\n              annotations:\n                type: object\n              description:\n                type: string\n              label:\n                type: string\n              name:\n                type: string\n              type:\n                type: string\n            type: object\n          type: array\n        has_records:\n          type: boolean\n        metas:\n          type: object\n      type: object\n    datasets:\n      items:\n        $ref: \"#/components/schemas/dataset\"\n      type: array\n    link:\n      properties:\n        href:\n          type: string\n        rel:\n          type: string\n      type: object\n    links:\n      items:\n        $ref: \"#/components/schemas/link\"\n      type: array\n    metadata_template:\n      properties:\n        name:\n          type: string\n        schema:\n          items:\n            type: object\n          type: array\n        type:\n          type: string\n      type: object\n    page:\n      properties:\n        description:\n          type: string\n        slug:\n          type: string\n        title:\n          description: \u003e\n            A localized string (that is an object where the keys are language\n            codes and the values translations of a same\n\n            string).\n          properties:\n            en:\n              type: string\n            fr:\n              type: string\n          type: object\n      type: object\n    query_string:\n      description: \u003e\n        Query string using the query language.\n\n        Example: (field1=\"value1\" or field1=\"value2\") and field2=value2 and \"full text search\"\n\n\n        Supports geo queries with the following functions:\n\n        * distance(myfield, center, radius): restrict entries to those where {myfield} is less than {radius} from {center} (center being defined 'lat,lon')\n\n        * bbox(myfield, topleft, bottomright): restrict entries to those where {myfield} is within the bounds defined by the two sets of coordinates {topleft} and {bottomright}\n\n        * polygon(myfield, mypolygon): restrict entries to those where {myfield} is within the bounds of {mypolygon}; {mypolygon} being a list of 'lat,lon' vertices\n\n        * wkt(myfield, mywkt): restrict entries to those where {myfield} is within the body of {mywkt}; {mywkt} being a Well Known Text (see 'http://en.wikipedia.org/wiki/Well-known_text' for reference)\n      type: string\n    record:\n      properties:\n        fields:\n          type: object\n        id:\n          type: string\n        size:\n          type: integer\n        timestamp:\n          format: dateTime\n          type: string\n      type: object\n    records:\n      items:\n        $ref: \"#/components/schemas/record\"\n      type: array\n    reuse:\n      properties:\n        created_at:\n          description: Date when the reuse was submitted.\n          format: dateTime\n          type: string\n        description:\n          description: Slightly longer description of what was achieved using the dataset.\n        id:\n          description: reuse id\n          type: string\n        thumbnail:\n          description: URL illustrating the work.\n          type: string\n        title:\n          description: Short description of the user's work.\n          type: string\n        url:\n          description: URL where the work can be accessed publicly.\n          type: string\n        user:\n          properties:\n            first_name:\n              type: string\n            last_name:\n              type: string\n            username:\n              type: string\n          type: object\n      type: object\n    snapshot:\n      properties:\n        created_at:\n          format: dateTime\n          type: string\n        description:\n          type: string\n        href:\n          type: string\n        snapshot_id:\n          type: string\n      type: object\n    timezone:\n      description: \u003e\n        A timezone\n\n\n        If used as a parameter, defines the timezone the calculations will be performed in. If left empty, 'UTC' is\n\n        assumed.\n      example: Europe/Paris\n      type: string\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/opendatasoft.com-2.1.0-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/opendatasoft.com-2.1.0-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}