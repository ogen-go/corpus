{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/whapi.com/bets/2.0.0/openapi.yaml",
			"byteSize": 42334,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://sandbox.whapi.com/v2/bets\ninfo:\n  contact:\n    email: platform@williamhill.com\n    name: William Hill Labs\n    url: http://developer.williamhill.com\n    x-twitter: WilliamHill\n  description: The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. \u003cbr /\u003e\u003cbr /\u003e The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.\n  title: Bets API\n  version: 2.0.0\n  x-apisguru-categories:\n    - entertainment\n  x-logo:\n    url: https://twitter.com/WillHillHelp/profile_image?size=original\n  x-origin:\n    - format: openapi\n      url: https://developer.williamhill.com/wh-docs/docs-sdks/bets/swagger/docs\n      version: \"3.0\"\n  x-providerName: whapi.com\n  x-serviceName: bets\npaths:\n  /bet/complex:\n    post:\n      description: Places a multiple or a complex bet.\n      operationId: placeComplexBet\n      parameters:\n        - $ref: \"#/components/parameters/param_apiKey\"\n        - $ref: \"#/components/parameters/param_apiSecret\"\n        - $ref: \"#/components/parameters/param_apiTicket\"\n        - $ref: \"#/components/parameters/param_fields\"\n        - $ref: \"#/components/parameters/param_include\"\n        - $ref: \"#/components/parameters/param_exclude\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/complexBetRequestBody\"\n        description: Complex bet request body\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value: |\n                    {\n                     \"placedBets\" : [\n                     {\n                     \"id\" : 51097,\n                     \"number\": 1,\n                     \"receipt\" : \"O/0013333/0000109/F\", \n                     \"numLines\" : 1, \n                     \"totalStake\" : 2.50, \n                     \"placedDateTime\" : \"2015-12-12T00:11:00\"\n                     }, \n                     {\n                     \"id\" : 51098, \n                     \"number\": 2,\n                     \"receipt\" : \"O/0013333/0000109/F\", \n                     \"numLines\" : 1, \n                     \"totalStake\" : 2.50, \n                     \"placedDateTime\" : \"2015-12-12T00:11:00\"\n                     }\n                     ]\n                    }\n              schema:\n                $ref: \"#/components/schemas/betPlacedResponse\"\n          description: Success\n        \"202\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value: |\n                    {\n                     \"delayedBets\" : [\n                     {\n                     \"id\" : 51097, \n                     \"number\" : 1, \n                     \"delayedBetId\" : \"SL-I60Xjir9wr1MWpZf/XnHHycr7mSePgkYbY+aidjVII2AhfeWsWkuLucDnW0PWkJgmos0HO1zY6fMGbptVOezaicYUgKV\",\n                     \"delayPeriodSeconds\" : 5\n                     }, \n                     {\n                     \"id\" : 51098, \n                     \"number\" : 2, \n                     \"delayedBetId\" : \"SL-I60Xjir8wr1MWpZf/XnHHycr7mSePgkYbY+aidjVII2AhfeWsWkuLucDnW0PWkJgmos0HO1zY6fMGbptVOezaicYUgKV\",\n                     \"delayPeriodSeconds\" : 5\n                     }\n                     ]\n                    }\n              schema:\n                $ref: \"#/components/schemas/betDelayedResponse\"\n          description: Delayed\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/errors\"\n          description: Errors\n      summary: Places a multiple or a complex bet.\n      tags:\n        - Bets\n      x-canReturnErrors: null\n  /bet/single:\n    post:\n      description: Places a single bet. When placing a single bet using live inplay bets, the system might generate a bet delay to allow a time margin to negate the effects of major changes (for example, goals) to the market. Note that the amount of bet delay will vary by category and event type. A delayedBetId will be recieved that can be used to resubmit the bet.\n      operationId: placeSingleBet\n      parameters:\n        - $ref: \"#/components/parameters/param_apiKey\"\n        - $ref: \"#/components/parameters/param_apiSecret\"\n        - $ref: \"#/components/parameters/param_apiTicket\"\n        - $ref: \"#/components/parameters/param_fields\"\n        - $ref: \"#/components/parameters/param_include\"\n        - $ref: \"#/components/parameters/param_exclude\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/singleBetRequestBody\"\n        description: Single bet request body\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value: |\n                    {\n                     \"placedBets\" : [\n                     {\n                     \"id\" : 51097,\n                     \"receipt\" : \"O/0013333/0000109/F\", \n                     \"numLines\" : 1, \n                     \"totalStake\" : 2.50, \n                     \"placedDateTime\" : \"2015-12-12T00:11:00\"\n                     }\n                     ]\n                    }\n              schema:\n                $ref: \"#/components/schemas/betPlacedResponse\"\n          description: Success\n        \"202\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value: |\n                    {\n                     \"delayedBets\" : [\n                     {\n                     \"id\" : 51097, \n                     \"delayedBetId\" : \"SL-I60Xjir9wr1MWpZf/XnHHycr7mSePgkYbY+aidjVII2AhfeWsWkuLucDnW0PWkJgmos0HO1zY6fMGbptVOezaicYUgKV\",\n                     \"delayPeriodSeconds\" : 5\n                     }\n                     ]\n                    }\n              schema:\n                $ref: \"#/components/schemas/betDelayedResponse\"\n          description: Delayed\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/errors\"\n          description: Errors\n      summary: Places a single bet\n      tags:\n        - Bets\n      x-canReturnErrors: null\n  /betslips:\n    post:\n      description: Organises the betslip when one or more selections are made. It returns a bet slip structure organised by betting opportunities.\n      operationId: validateBetslip\n      parameters:\n        - $ref: \"#/components/parameters/param_apiKey\"\n        - $ref: \"#/components/parameters/param_apiSecret\"\n        - $ref: \"#/components/parameters/param_expanded\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/betSlipRequest\"\n        description: Betslip Body\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value: |\n                    {\n                     \"betslip\" : [\n                     {\n                     number: 1, \n                     numLines: 1\n                     ...\n                     }\n                     ]\n                    }\n              schema:\n                $ref: \"#/components/schemas/betSlipResponse\"\n          description: \"\"\n      tags:\n        - Bets\n  /freebets:\n    get:\n      description: Retrieves the current free bets available for a customer.\n      operationId: getFreeBets\n      parameters:\n        - $ref: \"#/components/parameters/param_apiKey\"\n        - $ref: \"#/components/parameters/param_apiSecret\"\n        - $ref: \"#/components/parameters/param_apiTicket\"\n        - $ref: \"#/components/parameters/param_fields\"\n        - $ref: \"#/components/parameters/param_include\"\n        - $ref: \"#/components/parameters/param_exclude\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/freeBet\"\n          description: Success\n        \"204\":\n          description: No Free Bets\n      summary: Returns available free bets\n      tags:\n        - Bets\n      x-canreturnErrors: null\n  /history:\n    get:\n      description: Retrieves the customer’s bet history. Options are available to organise the history in terms of date, bet type and settled and unsettled bets. The maximum number of bets and bet history pages retrieved can also be set.\n      operationId: getBetHistory\n      parameters:\n        - $ref: \"#/components/parameters/param_apiKey\"\n        - $ref: \"#/components/parameters/param_apiSecret\"\n        - $ref: \"#/components/parameters/param_apiTicket\"\n        - $ref: \"#/components/parameters/param_fromDateTime\"\n        - $ref: \"#/components/parameters/param_toDateTime\"\n        - $ref: \"#/components/parameters/param_fields\"\n        - $ref: \"#/components/parameters/param_include\"\n        - $ref: \"#/components/parameters/param_exclude\"\n        - $ref: \"#/components/parameters/param_page\"\n        - $ref: \"#/components/parameters/param_pageSize\"\n        - $ref: \"#/components/parameters/param_sort\"\n        - description: Filter by settled bets. If omitted, both settled and unsettled will be returned.\n          in: query\n          name: settled\n          required: false\n          schema:\n            type: boolean\n          x-eg: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value: |\n                    {\n                     bets:\n                     [\n                     {\n                     id:\"797\",\n                     typeCode:\"SGL\",\n                     typeName:\"Single\",\n                     transDateTime:\"2016-01-05 14:27:58\",\n                     settled:false,\n                     stake:0.12,\n                     status:\"N\",\n                     winnings:0.26,\n                     estimatedReturns:0.26\n                     },\n                     {\n                     id:\"798\",\n                     typeCode:\"SGL\",\n                     typeName:\"Single\",\n                     transDateTime:\"2016-01-05 15:27:58\",\n                     numLines:5,\n                     numSelections:5,\n                     receipt:\"O/0001370/0000132/F\",\n                     settled:false,\n                     stake:0.13,\n                     cashinValue:0.12,\n                     stakePerLine:0.13,\n                     status:\"A\",\n                     winnings:0.26,\n                     estimatedReturns:0.26,\n                     freeBetValue:0.00,\n                     legs: \n                     [\n                     {\n                     type:\"W\",\n                     number:1,\n                     parts:\n                     [\n                     {\n                     number:1,\n                     description:\"Swansea\",\n                     eventId:\"OB_EV3966\",\n                     eventDescription:\"Swansea Vs Sunderland\",\n                     priceDen:1,\n                     priceNum:1,\n                     priceType:\"L\",\n                     result:\"-\",\n                     startDateTime:\"2016-01-07 20:00:00\"\n                     },\n                     {\n                     number:1,\n                     description:\"Swansea\",\n                     eachWayNum:1,\n                     eachWayDen:1,\n                     eachWayPlaces:1\n                     eventId:\"OB_EV3966\",\n                     eventDescription:\"Swansea Vs Sunderland\",\n                     eventMarketDescription:\"90 Minutes\",\n                     eventTypeDescription:\"Manchester Senior Cup\",\n                     handicap:0.1,\n                     selectionId:\"OB_OU00001\",\n                     priceDen:1,\n                     priceNum:1,\n                     priceType:\"L\",\n                     result:\"-\",\n                     startDateTime:\"2016-01-07 20:00:00\",\n                     rule4Deductions:0.1,\n                     priceFormatted:\n                     {\n                     fractional:\"EVS\",\n                     decimal:2,\n                     american:\"+100\"\n                     } \n                     }\n                     ]\n                     }\n                     ]\n                     }\n                     ]\n                    }\n              schema:\n                $ref: \"#/components/schemas/betHistoryResponse\"\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/errors\"\n          description: Error\n      summary: Retrieves the customer’s bet history.\n      tags:\n        - Bets\n      x-canReturnErrors:\n        - 20638\n  \"/{betId}/cashin\":\n    put:\n      description: Allows a trusted application to cash in a bet (take a return on a bet) on behalf of the customer. If the customers monitor bets they can cash in a bet at any point before the event ends.\n      operationId: cashin\n      parameters:\n        - $ref: \"#/components/parameters/param_apiKey\"\n        - $ref: \"#/components/parameters/param_apiSecret\"\n        - $ref: \"#/components/parameters/param_apiTicket\"\n        - $ref: \"#/components/parameters/param_betId\"\n        - description: The cash in value of the bet\n          in: query\n          name: cashInValue\n          required: true\n          schema:\n            format: double\n            type: number\n          x-eg: 20\n        - description: The ID of this bet delay\n          in: query\n          name: cashinBetDelayId\n          required: true\n          schema:\n            type: string\n          x-eg: GGGfffEEE\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cashInResponse\"\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/errors\"\n          description: Errors\n        \"409\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/errors\"\n          description: Errors\n      summary: Allows a trusted application to cash in a bet (take a return on a bet) on behalf of the customer\n      tags:\n        - Bets\n      x-canreturnErrors:\n        - 20631\n        - 20632\n        - 20634\n        - 20635\n        - 20636\n        - 20637\ncomponents:\n  parameters:\n    param_apiKey:\n      description: A unique identifier of your application that is generated by the API portal.\n      in: header\n      name: apiKey\n      required: true\n      schema:\n        pattern: ^[a-zA-Z0-9]{19,50}$\n        type: string\n      x-eg: l7xxa54460c573b5497c9b24b505xxxxxxxx\n    param_apiSecret:\n      description: Another unique identifier for your application.\n      in: header\n      name: apiSecret\n      required: true\n      schema:\n        pattern: ^[a-zA-Z0-9]{19,50}$\n        type: string\n      x-eg: 355b1e522c544222ab4ff318xxxxxxxx\n    param_apiTicket:\n      description: The ticket obtained from the sessions API\n      in: header\n      name: apiTicket\n      required: true\n      schema:\n        pattern: ^[a-zA-Z][a-zA-Z0-9-]{39,100}$\n        type: string\n      x-eg: TGT-1920-Cl7l4e0hzFWK9aoKeiggDexuWcmAMf9brh6IFpVdsQxxxxxxxx-brsux349\n    param_betId:\n      description: The identifier of the bet\n      in: path\n      name: betId\n      required: true\n      schema:\n        type: string\n    param_exclude:\n      description: Specify fields from the default to exclude (Comma Separated List)\n      explode: false\n      in: query\n      name: exclude\n      required: false\n      schema:\n        items:\n          type: string\n        type: array\n      style: form\n    param_expanded:\n      description: Allows for all bets for given selections to be returned - not just the specified type\n      in: query\n      name: expanded\n      required: false\n      schema:\n        type: string\n    param_fields:\n      description: Specify an absolute field list to return (Comma Separated List)\n      explode: false\n      in: query\n      name: fields\n      required: false\n      schema:\n        items:\n          type: string\n        type: array\n      style: form\n    param_fromDateTime:\n      description: The UTC FROM datetime from bets to be returned. (yyyy-MM-ddTHH:mm:ss)\n      in: query\n      name: dateFrom\n      required: true\n      schema:\n        pattern: ^(\\\\d{4})-(\\\\d{2})-(\\\\d{2})T(\\\\d{2}):(\\\\d{2}):(\\\\d{2})$\n        type: string\n      x-eg: 2013-09-25T13:34:20\n    param_include:\n      description: Specify fields in addition to the default to return (Comma Separated List)\n      explode: false\n      in: query\n      name: include\n      required: false\n      schema:\n        items:\n          type: string\n        type: array\n      style: form\n      x-eg: FieldName\n    param_page:\n      description: The index of the page to return\n      in: query\n      name: page\n      schema:\n        default: 1\n        type: number\n      x-eg: 10\n    param_pageSize:\n      description: The number of results per page\n      in: query\n      name: pageSize\n      schema:\n        default: 100\n        type: number\n      x-eg: 15\n    param_sort:\n      description: The order the response will be retuned by. i.e. transDateTime,desc. Only transDateTime can be used currently\n      in: query\n      name: sort\n      required: false\n      schema:\n        default: transDateTime,asc\n        type: string\n      x-eg: transDateTime,desc\n    param_toDateTime:\n      description: The UTC TO datetime for bets to be returned. (yyyy-MM-ddTHH:mm:ss)\n      in: query\n      name: dateTo\n      required: true\n      schema:\n        pattern: ^(\\\\d{4})-(\\\\d{2})-(\\\\d{2})T(\\\\d{2}):(\\\\d{2}):(\\\\d{2})$\n        type: string\n      x-eg: 2013-09-25T13:34:20\n  schemas:\n    bet:\n      properties:\n        delayedBetId:\n          description: The delayed bet identifier\n          type: string\n        freeBetId:\n          description: The ID number of the free bet token if used in conjunction with this bet\n          type: string\n        legs:\n          items:\n            $ref: \"#/components/schemas/leg\"\n          type: array\n        number:\n          description: The bet number\n          type: integer\n        stake:\n          description: The amount of the stake placed on the bet\n          format: double\n          type: number\n        typeCode:\n          description: \"The bet type code of the bet. For example: TBL (Treble)\"\n          type: string\n      required:\n        - number\n        - typeCode\n        - stake\n        - legs\n      type: object\n    betDelayed:\n      properties:\n        delayPeriodSeconds:\n          description: The delay time period of the bet in seconds. The resubmission of the bet has to wait for the length of time (in seconds) returned in the delayPeriod before submitting the second request.\n          type: integer\n        delayedBetId:\n          description: The unique identifier of the delayed bet. After the initial response is received, containing the delayPeriod and the delayBetId, the request is then resubmitted using the same delayBetId token that came in that initial response. Check the example below to see how to resend a delayed bet payload.\n          type: string\n        id:\n          description: The number of the bet\n          type: string\n        number:\n          description: Number of the bet if this is part of a multiple bet\n          type: number\n      required:\n        - id\n        - delayedBetId\n        - delayPeriodSeconds\n      type: object\n    betDelayedResponse:\n      items:\n        $ref: \"#/components/schemas/betDelayed\"\n      title: delayedBets\n      type: array\n    betHistoryResponse:\n      properties:\n        bets:\n          $ref: \"#/components/schemas/historyBets\"\n      type: object\n    betPlaced:\n      properties:\n        id:\n          description: The bet id\n          type: string\n        numLines:\n          description: The number of lines the bet consists of\n          type: integer\n        number:\n          description: Number of the bet if this is part of a multiple bet\n          type: number\n        placedDateTime:\n          description: \"The time the bet was placed. For example: 2013-01-30TT13:34:20. The value of this element can be replaced with the current timestamp if it was missing.\"\n          type: string\n        receipt:\n          description: The unique ID of the bet receipt\n          type: string\n        totalStake:\n          description: The total amount staked on the bet\n          format: double\n          type: number\n      required:\n        - receipt\n      type: object\n    betPlacedResponse:\n      items:\n        $ref: \"#/components/schemas/betPlaced\"\n      title: placedBets\n      type: array\n    betSlipRequest:\n      properties:\n        legs:\n          items:\n            $ref: \"#/components/schemas/leg\"\n          type: array\n      type: object\n    betSlipResponse:\n      properties:\n        betslip:\n          items:\n            $ref: \"#/components/schemas/betslipbet\"\n          type: array\n      type: object\n    betslipbet:\n      properties:\n        betMultiplier:\n          description: The total aggregated odds, as a decimal, of the multiple bet placed\n          pattern: \"[0-9]*\"\n          type: number\n        freeBets:\n          description: Free bets that can be used with this bet\n          items:\n            $ref: \"#/components/schemas/freeBetDetail\"\n          type: array\n        legs:\n          items:\n            $ref: \"#/components/schemas/betslipleg\"\n          type: array\n        maxStake:\n          description: \"Maximum stake allowable on the bet. For example: 2500.00 (GBP)\"\n          format: double\n          type: number\n        minStake:\n          description: \"Minumum stake allowable on the bet. For example: 0.05 (GBP)\"\n          format: double\n          type: number\n        numLines:\n          description: The number of lines (selections) of a bet\n          type: number\n        number:\n          description: The bet number\n          type: integer\n        typeCode:\n          description: \"The bet type code of the bet. For example: TBL (Treble)\"\n          type: string\n        typeName:\n          description: \"The TypeCode of the bet. For example: TBL (Treble)\"\n          type: string\n      required:\n        - number\n        - typeCode\n        - legs\n      type: object\n    betslipleg:\n      properties:\n        parts:\n          items:\n            $ref: \"#/components/schemas/betslippart\"\n          type: array\n        sort:\n          description: The leg sort. This element is present for complex bets but not for single bets.\n          type: string\n        type:\n          description: Type of leg that was placed on the bet, such as Win or Each-way. Even though the priceNum and priceDen are required for the bets with type value W (win), it is just optional from the endpoint point of view. There are requests / bets like outcomes with starting price but do not have a specific price. Generally prices can change, so if the type is win you have to resubmit and thus verify the price that the customer saw on the screen initially. The API will check if it matches the current price of William Hill. Note that if you send a wrong / outdated price you will receive the error message - Price changed.\n          type: string\n      required:\n        - type\n        - parts\n      type: object\n    betslippart:\n      properties:\n        eachWayAvailable:\n          description: Indicates whether each way is available\n          type: boolean\n        includeInMultiple:\n          description: Indicates if the bet can be used in a multiple bet\n          type: boolean\n        legGroup:\n          description: To organise a number of outcome selections into one or more bet groups, such as a Single bet, a Double bet, a Trixie, etc\n          type: integer\n        priceChanged:\n          description: Indicates if there has been a change in the price\n          type: boolean\n        priceDen:\n          description: Price denominator - will be ignored for types other than L (Fixed Price)\n          type: integer\n        priceNum:\n          description: Price numerator - will be ignored for types other than L (Fixed Price)\n          type: integer\n        priceType:\n          description: The type of price selected. For example - ‘L’ (Fixed)\n          type: integer\n        selectionId:\n          description: The selection identifier\n          pattern: ^(OB_OU\\d+)$\n          type: integer\n          x-eg: OB_OU00000001\n        singleAvailable:\n          description: Indicates whether the bet can be used in a single bet\n          type: boolean\n        startingPriceAvailable:\n          description: Indicates whether starting prices are available\n          type: boolean\n        status:\n          description: Indicates the current status of the bet\n          pattern: (A|S)\n          type: string\n        statusChanged:\n          description: Indicates whether the status of the bet has changed\n          type: boolean\n      required:\n        - selectionId\n        - priceType\n        - priceNum\n        - priceDen\n        - includeInMultiple\n      type: object\n    cashInResponse:\n      properties:\n        success:\n          description: Indicates whether the bet has been cashed-in.\n          type: boolean\n      required:\n        - success\n      type: object\n    complexBetRequestBody:\n      properties:\n        bets:\n          description: A collection of bets\n          items:\n            $ref: \"#/components/schemas/bet\"\n          type: array\n      type: object\n    error:\n      properties:\n        code:\n          description: A unique William Hill identifier for the error\n          type: string\n        field:\n          description: To help pinpoint the exact parameter where a request has failed\n          type: string\n        message:\n          description: A unique William Hill text string to enable you to identify the error (in English only)\n          type: string\n        solution:\n          $ref: \"#/components/schemas/solution\"\n      type: object\n    errors:\n      properties:\n        errors:\n          items:\n            $ref: \"#/components/schemas/error\"\n          type: array\n      type: object\n    freeBet:\n      items:\n        $ref: \"#/components/schemas/freeBetDetail\"\n      type: array\n    freeBetDetail:\n      properties:\n        awardDateTime:\n          description: The time the free bet was awarded. For example 2014-11-013T23:59:10\n          type: string\n        displayText:\n          description: The message explaining the offer displayed to the customer along with the free bet\n          type: string\n        expiryDateTime:\n          description: The time the free bet expired. For example 2014-11-013T23:59:10\n          type: string\n        id:\n          description: The identifier of the free bet\n          type: integer\n        offerDesc:\n          description: The description of the offer that enabled the customer to place a free bet\n          type: string\n        offerId:\n          description: The identifier of the offer\n          type: integer\n        offerName:\n          description: The name of the offer that enabled the customer to place a free bet\n          type: string\n        startDateTime:\n          description: The time the free bet offer started. For example 2014-11-013T23:59:10\n          type: string\n        value:\n          description: The value of the free bet\n          type: number\n      required:\n        - id\n        - offerName\n        - value\n      type: object\n    historyBets:\n      items:\n        $ref: \"#/components/schemas/placedBet\"\n      type: array\n    leg:\n      properties:\n        parts:\n          items:\n            $ref: \"#/components/schemas/part\"\n          type: array\n        sort:\n          description: The leg sort. This element is present for complex bets but not for single bets.\n          type: string\n        type:\n          description: \"The leg type. One of the following values: W - Win or E- Each-way. Even though the priceNum and priceDen are required for the bets with type value W (win), it is just optional from the endpoint point of view. There are requests / bets like outcomes with starting price but do not have a specific price. Generally prices can change, so if the type is win you have to resubmit and thus verify the price that the customer saw on the screen initially. The API will check if it matches the current price of William Hill. Note that if you send a wrong / outdated price you will receive the error message - Price changed.\"\n          type: string\n      required:\n        - type\n        - parts\n      type: object\n    part:\n      properties:\n        includeInMultiple:\n          description: Indicates if the bet can be used in a multiple bet\n          type: boolean\n        priceDen:\n          description: Price denominator - will be ignored for types other than L (Fixed Price)\n          type: integer\n        priceNum:\n          description: Price numerator - will be ignored for types other than L (Fixed Price)\n          type: integer\n        priceType:\n          description: The type of price selected. For example - ‘L’ (Fixed)\n          type: integer\n        selectionId:\n          description: The selection identifier\n          pattern: ^(OB_OU\\d+)$\n          type: integer\n          x-eg: OB_OU00000001\n      required:\n        - selectionId\n        - priceType\n        - priceNum\n        - priceDen\n        - includeInMultiple\n      type: object\n    placedBet:\n      properties:\n        cashinValue:\n          description: The cash in value of the bet. For example £0.88. When no value is given or no value is present, no cash in is available\n          format: double\n          type: number\n        estimatedReturns:\n          description: \"The estimated value of the returns if the bet is successful. Note: when an estimated return isn’t available, as in the case of a bet placed on a horse at SP (starting price) where the actual price is unknown when the bet is placed, ‘NOT_AVAILABLE’ will appear in the response field.\"\n          format: double\n          type: number\n        freeBetValue:\n          description: If a free bet token is used for the bet, this element represents the value\n          format: double\n          type: number\n        id:\n          description: The unique identifier of the bet\n          type: string\n        legs:\n          items:\n            $ref: \"#/components/schemas/placedBetLeg\"\n          type: array\n        numLines:\n          description: Number of lines of bets\n          type: integer\n        numSelections:\n          description: Number of selections that the bet is made of\n          type: integer\n        receipt:\n          description: The unique identifier of the receipt for the bet\n          type: string\n        settled:\n          description: Whether the bet is settled\n          type: boolean\n        stake:\n          description: \"The bet stake, which represents the total value of the bet. For example: £ 12.34\"\n          format: double\n          type: number\n        stakePerLine:\n          description: \"The individual stake on each line of the bet. For example: £ 6.17\"\n          format: double\n          type: number\n        status:\n          description: \"The status of the bet. Can be one of the following: A - Active, S - suspended, C - Cashed Out\"\n          type: string\n        transDateTime:\n          description: The time the bet was placed\n          type: string\n        typeCode:\n          description: \"The bet type code of the bet. For example: TBL (Treble)\"\n          type: string\n        typeName:\n          description: \"The name of the bet type. For example: Double\"\n          type: string\n        winnings:\n          description: Actual value of the returns from this bet\n          format: double\n          type: number\n      required:\n        - id\n        - typeCode\n        - typeName\n        - transDateTime\n        - settled\n        - stake\n        - status\n        - winnings\n        - estimatedReturns\n      type: object\n    placedBetLeg:\n      properties:\n        number:\n          description: The leg number of the bet\n          type: integer\n        parts:\n          items:\n            $ref: \"#/components/schemas/placedBetPart\"\n          type: array\n        sort:\n          description: The leg sort. This element is present for complex bets but not for single bets.\n          type: string\n        type:\n          description: \"The leg type. One of the following values: W - Win or E- Each-way. Even though the priceNum and priceDen are required for the bets with type value W (win), it is just optional from the endpoint point of view. There are requests / bets like outcomes with starting price but do not have a specific price. Generally prices can change, so if the type is win you have to resubmit and thus verify the price that the customer saw on the screen initially. The API will check if it matches the current price of William Hill. Note that if you send a wrong / outdated price you will receive the error message - Price changed.\"\n          type: string\n      required:\n        - type\n        - number\n        - parts\n      type: object\n    placedBetPart:\n      properties:\n        description:\n          description: Human-friendly description of the bet\n          type: string\n        eachWayDen:\n          description: \"When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2\"\n          type: integer\n        eachWayNum:\n          description: \"When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2\"\n          type: integer\n        eachWayPlaces:\n          description: The Each-way places available for the bet\n          type: integer\n        eventDescription:\n          description: The description of the event\n          type: string\n        eventId:\n          description: Unique identifier of the event\n          pattern: ^(OB_EV\\d+)$\n          type: string\n          x-eg: OB_EV00000001\n        eventMarketDescription:\n          description: The description of the market within an event\n          type: string\n        eventTypeDescription:\n          description: The description of type of the event\n          type: string\n        handicap:\n          description: \"Denotes if the bet is part of a handicap market. For example: -1 if the selection starts on -1 goals (in football)\"\n          format: double\n          type: number\n        number:\n          description: The number of the bet\n          type: integer\n        priceDen:\n          description: \"When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2\"\n          type: integer\n        priceFormatted:\n          $ref: \"#/components/schemas/priceFormatted\"\n        priceNum:\n          description: \"When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2\"\n          type: integer\n        priceType:\n          description: \"The price type chosen when the bet was placed. For example: L (Win)\"\n          type: string\n        result:\n          description: \"The outcome of the bet/event. Can be one of the following values: W - Won; L - Lost; V - Void; - Result not yet available\"\n          type: string\n        rule4Deductions:\n          description: The official scale of deductions that apply when a runner is withdrawn\n          format: double\n          type: number\n        selectionId:\n          description: Unique identifier of the selection\n          pattern: ^(OB_OU\\d+)$\n          type: string\n          x-eg: OB_OU00000001\n        startDateTime:\n          description: \"Time the event will start. For example: 2013-01-30 11:01:01\"\n          type: string\n      required:\n        - number\n        - description\n        - eventId\n        - eventDescription\n        - priceDen\n        - priceNum\n        - priceType\n        - result\n        - startDateTime\n      type: object\n    priceFormatted:\n      properties:\n        american:\n          description: The price in American format\n          type: string\n        decimal:\n          description: The decimal format of the price\n          format: double\n          type: number\n        fractional:\n          description: The fractional format of the price or EVS when the price evens.\n          type: string\n      type: object\n    singleBetRequestBody:\n      properties:\n        delayedBetId:\n          description: The delayed bet identifier\n          type: string\n        freeBetId:\n          description: The ID number of the free bet token if used in conjunction with this bet\n          type: string\n        priceDen:\n          description: \"When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2\"\n          type: integer\n        priceNum:\n          description: \"When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2\"\n          type: integer\n        priceType:\n          description: \"The type of price taken by the customer when the bet is made. Can be one of the following: L - Live Fixed price, S - Starting price - Horse and Greyhound racing or G - Guaranteed best price.\"\n          pattern: ^(L|S|G)$\n          type: string\n        selectionId:\n          description: The unique ID for the selection of the bet\n          pattern: ^(OB_OU\\d+)$\n          type: string\n          x-eg: OB_OU00000001\n        stake:\n          description: The amount of the stake placed on the bet\n          format: double\n          type: number\n        type:\n          description: \"The type of bet placed. Can be one of the following: W - Win or E- EachWay\"\n          pattern: ^(W|E)$\n          type: string\n      required:\n        - type\n        - stake\n        - selectionId\n        - priceType\n      type: object\n    solution:\n      properties:\n        betNum:\n          description: The bet number\n          type: string\n        eventId:\n          description: The identifier of the event\n          pattern: ^(OB_EV\\d+)$\n          type: string\n          x-eg: OB_EV00000001\n        handicap:\n          description: The updated handicap\n          type: string\n        handicapPrecision:\n          description: The handicap precision\n          type: string\n        priceDen:\n          description: \"When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2\"\n          type: string\n        priceNum:\n          description: \"When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2\"\n          type: string\n        selectionHandicap:\n          description: The selection handicap\n          type: string\n        selectionId:\n          description: The identifier of the selection\n          pattern: ^(OB_OU\\d+)$\n          type: string\n          x-eg: OB_OU00000001\n      type: object\nx-customerrors:\n  - code: 20601\n    message: Insufficient funds\n    status: 402\n  - code: 20602\n    message: Stake too low\n    status: 400\n  - code: 20603\n    message: Stake too high\n    status: 400\n  - code: 20604\n    message: Price changed\n    status: 409\n  - code: 20605\n    message: Market suspended\n    status: 400\n  - code: 20606\n    message: Live prices not available\n    status: 400\n  - code: 20607\n    message: Unexpected bet failure\n    status: 500\n  - code: 20608\n    message: Selection started\n    status: 400\n  - code: 20609\n    message: Handicap has changed\n    status: 409\n  - code: 20610\n    message: Wrong number of parts for leg sort\n    status: 400\n  - code: 20611\n    message: Invalid price type\n    status: 400\n  - code: 20612\n    message: Invalid leg sort\n    status: 400\n  - code: 20613\n    message: Forecasts not available\n    status: 400\n  - code: 20614\n    message: Invalid stake\n    status: 400\n  - code: 20615\n    message: Invalid markets\n    status: 400\n  - code: 20616\n    message: Invalid bet type\n    status: 400\n  - code: 20617\n    message: Invalid leg type\n    status: 400\n  - code: 20618\n    message: Invalid scorecast parameters\n    status: 400\n  - code: 20619\n    message: Each way not available\n    status: 400\n  - code: 20620\n    message: Best price not available\n    status: 400\n  - code: 20621\n    message: Forecasts not available\n    status: 400\n  - code: 20622\n    message: Tricast not available\n    status: 400\n  - code: 20623\n    message: First show not available\n    status: 400\n  - code: 20624\n    message: Second show not available\n    status: 400\n  - code: 20625\n    message: Starting price not available\n    status: 400\n  - code: 20626\n    message: Next price not available\n    status: 400\n  - code: 20627\n    message: Scorecast not available\n    status: 400\n  - code: 20628\n    message: No price available\n    status: 400\n  - code: 20629\n    message: Eachway terms have changed\n    status: 409\n  - code: 20630\n    message: Maximum payout too high\n    status: 400\n  - code: 20631\n    message: Cash In value changed\n    status: 409\n  - code: 20632\n    message: Cash In has a delay\n    status: 202\n  - code: 20634\n    message: Cash In has a pending delay\n    status: 202\n  - code: 20635\n    message: Cash In value too high\n    status: 400\n  - code: 20636\n    message: Cash In unavailable\n    status: 400\n  - code: 20637\n    message: Cash In bet already settled\n    status: 400\n  - code: 20638\n    message: No results. Check paging?\n    status: 404\n  - code: 20639\n    message: Selections cannot be combined\n    status: 400\n  - code: 20640\n    message: Maximum number of parts for leg sort exceeded\n    status: 400\nx-docchapters:\n  - betTypes\n  - fieldSelection\n  - apiSummary\n  - headAndOptions\n  - docsAndSdks\n  - errorHandling\n  - statusCodes\nx-globalerrors: null\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@47bf2b618e492e31bc62743e9f72c47cb8460229/-/blob/APIs/whapi.com/bets/2.0.0/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/47bf2b618e492e31bc62743e9f72c47cb8460229/APIs/whapi.com/bets/2.0.0/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}