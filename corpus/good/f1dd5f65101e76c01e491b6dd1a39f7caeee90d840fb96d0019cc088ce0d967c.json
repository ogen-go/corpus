{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Rhosys/aws-architect.js"
		},
		"file": {
			"name": "cloudFormationServerlessTemplate.json",
			"size": 0,
			"path": "bin/template/cloudFormationServerlessTemplate.json",
			"byteSize": 11962,
			"content": "{\n  \"AWSTemplateFormatVersion\": \"2010-09-09\",\n  \"Description\": \"AWS Architect Microservice\",\n  \"Parameters\": {\n    \"serviceName\": {\n      \"Type\": \"String\",\n      \"Description\": \"The name of the microservice\"\n    },\n    \"serviceDescription\": {\n      \"Type\": \"String\",\n      \"Description\": \"Service description used for AWS resources\"\n    },\n    \"dnsName\": {\n      \"Type\": \"String\",\n      \"Default\": \"\",\n      \"Description\": \"The service DNS name.\"\n    },\n    \"hostedName\": {\n      \"Type\": \"String\",\n      \"Description\": \"The top level domain name.\"\n    }\n  },\n\n  \"Resources\": {\n    \"LambdaFunction\": {\n      \"Type\": \"AWS::Lambda::Function\",\n      \"Properties\": {\n        \"FunctionName\": { \"Ref\": \"serviceName\" },\n        \"Description\": { \"Ref\": \"serviceDescription\" },\n        \"Handler\": \"index.handler\",\n        \"Runtime\": \"nodejs12.x\",\n        \"TracingConfig\": {\n          \"Mode\": \"PassThrough\"\n        },\n        \"Code\": {\n          \"ZipFile\": \"exports.handler = async() =\u003e Promise.resolve()\"\n        },\n        \"MemorySize\": 256,\n        \"Timeout\": 60,\n        \"Role\": { \"Fn::GetAtt\": [\"LambdaRole\", \"Arn\"] },\n        \"Tags\": [\n          {\n            \"Key\": \"Service\",\n            \"Value\": { \"Ref\": \"serviceName\" }\n          }\n        ]\n      }\n    },\n\n    \"LambdaRole\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"RoleName\": { \"Fn::Sub\": \"${serviceName}LambdaRole\" },\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"Service\": [ \"lambda.amazonaws.com\" ]\n              },\n              \"Action\": [ \"sts:AssumeRole\" ]\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\",\n          \"arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess\"\n        ],\n        \"Policies\": [\n          {\n            \"PolicyName\": \"MicroservicePolicy\",\n            \"PolicyDocument\": {\n              \"Version\": \"2012-10-17\",\n              \"Statement\": [\n                {\n                  \"Sid\": \"DynamoDbWrite\",\n                  \"Effect\": \"Allow\",\n                  \"Action\": \"dynamodb:*\",\n                  \"Resource\": { \"Fn::Sub\": \"arn:aws:dynamodb:*:*:table/${serviceName}-*\" }\n                },\n                {\n                  \"Sid\": \"DynamoDbWritePreventDelete\",\n                  \"Effect\": \"Deny\",\n                  \"Action\": [\n                    \"dynamodb:DeleteBackup\",\n                    \"dynamodb:DeleteTable\"\n                  ],\n                  \"Resource\": \"*\"\n                },\n                {\n                  \"Sid\": \"SQSReader\",\n                  \"Effect\": \"Allow\",\n                  \"Action\": \"sqs:*\",\n                  \"Resource\": { \"Fn::Sub\": \"arn:aws:sqs:*:*:${serviceName}-*\" }\n                }\n              ]\n            }\n          }\n        ],\n        \"Path\": \"/\"\n      }\n    },\n\n    \"LambdaFunctionVersion\": {\n      \"Type\": \"AWS::Lambda::Version\",\n      \"Properties\": {\n        \"FunctionName\": { \"Ref\": \"LambdaFunction\" },\n        \"Description\": \"Initial Production Deployed Version\"\n      }\n    },\n    \"ProductionAlias\": {\n      \"Type\": \"AWS::Lambda::Alias\",\n      \"Properties\": {\n        \"Description\": \"The production alias\",\n        \"FunctionName\": { \"Fn::GetAtt\": [\"LambdaFunction\", \"Arn\"] },\n        \"FunctionVersion\": { \"Fn::GetAtt\": [\"LambdaFunctionVersion\", \"Version\"] },\n        \"Name\": \"production\"\n      }\n    },\n\n    \"ApiGatewayV2\": {\n      \"Type\": \"AWS::ApiGatewayV2::Api\",\n      \"Properties\": {\n        \"FailOnWarnings\": false,\n        \"Body\": {\n          \"openapi\": \"3.0.1\",\n          \"info\": {\n            \"version\": \"1.0.0\",\n            \"title\": { \"Ref\": \"serviceName\" },\n            \"description\": { \"Ref\": \"serviceDescription\" }\n          },\n          \"servers\": [{\n            \"url\": \"/\",\n            \"x-amazon-apigateway-endpoint-configuration\": { \"disableExecuteApiEndpoint\": true }\n          }],\n          \"paths\": {\n            \"/.well-known/openapi.json\": {\n              \"x-amazon-apigateway-any-method\": {\n                \"responses\": {\n                  \"default\": {\n                    \"description\": \"Default response for ANY /.well-known/openapi.json\"\n                  }\n                },\n                \"x-amazon-apigateway-integration\": {\n                  \"payloadFormatVersion\": \"1.0\",\n                  \"type\": \"aws_proxy\",\n                  \"httpMethod\": \"POST\",\n                  \"uri\": { \"Fn::Sub\": \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${serviceName}:${!stageVariables.lambdaVersion}/invocations\" },\n                  \"connectionType\": \"INTERNET\"\n                }\n              }\n            },\n            \"/livecheck\": {\n              \"x-amazon-apigateway-any-method\": {\n                \"responses\": {\n                  \"default\": {\n                    \"description\": \"Default response.\"\n                  }\n                },\n                \"x-amazon-apigateway-integration\": {\n                  \"payloadFormatVersion\": \"1.0\",\n                  \"type\": \"aws_proxy\",\n                  \"httpMethod\": \"POST\",\n                  \"uri\": { \"Fn::Sub\": \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${serviceName}:${!stageVariables.lambdaVersion}/invocations\" },\n                  \"connectionType\": \"INTERNET\"\n                }\n              }\n            },\n            \"/{proxy+}\": {\n              \"options\": {\n                \"responses\": {\n                  \"default\": {\n                    \"description\": \"Default response for OPTIONS /{proxy+}\"\n                  }\n                },\n                \"parameters\": [{\n                  \"name\": \"proxy\",\n                  \"in\": \"path\",\n                  \"required\": true,\n                  \"type\": \"string\"\n                }],\n                \"x-amazon-apigateway-integration\": {\n                  \"payloadFormatVersion\": \"1.0\",\n                  \"type\": \"aws_proxy\",\n                  \"httpMethod\": \"POST\",\n                  \"uri\": { \"Fn::Sub\": \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${serviceName}:${!stageVariables.lambdaVersion}/invocations\" },\n                  \"connectionType\": \"INTERNET\"\n                }\n              }\n            },\n            \"/$default\": {\n              \"x-amazon-apigateway-any-method\": {\n                \"isDefaultRoute\": true,\n                \"security\": [{ \"self\": [] }],\n                \"x-amazon-apigateway-integration\": {\n                  \"payloadFormatVersion\": \"1.0\",\n                  \"type\": \"aws_proxy\",\n                  \"httpMethod\": \"POST\",\n                  \"uri\": { \"Fn::Sub\": \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${serviceName}:${!stageVariables.lambdaVersion}/invocations\" },\n                  \"passthroughBehavior\": \"when_no_match\"\n                }\n              }\n            }\n          },\n          \"components\": {\n            \"securitySchemes\": {\n              \"self\": {\n                \"type\": \"apiKey\",\n                \"name\": \"Unused\",\n                \"in\": \"header\",\n                \"x-amazon-apigateway-authorizer\": {\n                  \"identitySource\": \"$request.header.Authorization,$context.domainPrefix\",\n                  \"authorizerUri\": { \"Fn::Sub\": \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${serviceName}:production/invocations\" },\n                  \"authorizerPayloadFormatVersion\": \"2.0\",\n                  \"authorizerResultTtlInSeconds\": 3600,\n                  \"type\": \"request\",\n                  \"enableSimpleResponses\": false\n                }\n              }\n            }\n          },\n          \"x-amazon-apigateway-cors\": {\n            \"allowMethods\": [\"*\"],\n            \"allowHeaders\": [\"authorization\", \"content-type\"],\n            \"maxAge\": 86400,\n            \"allowCredentials\": false,\n            \"allowOrigins\": [\"*\"]\n          }\n        }\n      }\n    },\n\n    \"LambdaInvokePermission\": {\n      \"Type\": \"AWS::Lambda::Permission\",\n      \"Properties\": {\n        \"FunctionName\": { \"Fn::Sub\": \"${LambdaFunction.Arn}:production\" },\n        \"Action\": \"lambda:InvokeFunction\",\n        \"Principal\": \"apigateway.amazonaws.com\",\n        \"SourceArn\": { \"Fn::Sub\": \"arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayV2}/*\" }\n      }\n    },\n\n    \"ApiGatewayInitialDeployment\": {\n      \"Type\": \"AWS::ApiGatewayV2::Deployment\",\n      \"Properties\": {\n        \"Description\": \"Initial Setup Deployment (WARNING: This resource must stay constant, do not update in CF ever)\",\n        \"ApiId\": { \"Ref\": \"ApiGatewayV2\" }\n      }\n    },\n    \"ApiGatewayStage\": {\n      \"Type\": \"AWS::ApiGatewayV2::Stage\",\n      \"Properties\": {\n        \"ApiId\": { \"Ref\": \"ApiGatewayV2\" },\n        \"AutoDeploy\": true,\n        \"StageName\": \"production\",\n        \"DeploymentId\": { \"Ref\": \"ApiGatewayInitialDeployment\" },\n        \"StageVariables\": {\n          \"lambdaVersion\": \"production\"\n        }\n      }\n    },\n    \"AcmCertificate\": {\n      \"Type\": \"AWS::CertificateManager::Certificate\",\n      \"Properties\": {\n        \"DomainName\": { \"Fn::Sub\": \"${dnsName}.${hostedName}\" },\n        \"SubjectAlternativeNames\": [\n          { \"Fn::Sub\": \"tst-${dnsName}.${hostedName}\" },\n          { \"Fn::Sub\": \"*.${dnsName}.${hostedName}\" }\n        ],\n        \"ValidationMethod\": \"DNS\"\n      }\n    },\n    \"ServiceDomainName\": {\n      \"Type\": \"AWS::ApiGatewayV2::DomainName\",\n      \"Properties\": {\n        \"DomainName\": { \"Fn::Sub\": \"${dnsName}.${hostedName}\" },\n        \"DomainNameConfigurations\": [{\n          \"CertificateArn\": { \"Ref\": \"AcmCertificate\" },\n          \"EndpointType\": \"REGIONAL\",\n          \"SecurityPolicy\": \"TLS_1_2\"\n        }]\n      }\n    },\n    \"ServiceDomainNameTst\": {\n      \"Type\": \"AWS::ApiGatewayV2::DomainName\",\n      \"Properties\": {\n        \"DomainName\": { \"Fn::Sub\": \"tst-${dnsName}.${hostedName}\" },\n        \"DomainNameConfigurations\": [{\n          \"CertificateArn\": { \"Ref\": \"AcmCertificate\" },\n          \"EndpointType\": \"REGIONAL\",\n          \"SecurityPolicy\": \"TLS_1_2\"\n        }]\n      }\n    },\n    \"BasePathMapping\": {\n      \"Type\": \"AWS::ApiGatewayV2::ApiMapping\",\n      \"Properties\": {\n        \"DomainName\": { \"Ref\": \"ServiceDomainName\" },\n        \"ApiId\": { \"Ref\": \"ApiGatewayV2\" },\n        \"Stage\": { \"Ref\": \"ApiGatewayStage\" }\n      }\n    },\n\n    \"BasePathMappingTst\": {\n      \"Type\": \"AWS::ApiGatewayV2::ApiMapping\",\n      \"Properties\": {\n        \"DomainName\": { \"Ref\": \"ServiceDomainNameTst\" },\n        \"ApiId\": { \"Ref\": \"ApiGatewayV2\" },\n        \"Stage\": { \"Ref\": \"ApiGatewayStage\" }\n      }\n    },\n    \"Route53MapToCustomDomain\": {\n      \"Type\": \"AWS::Route53::RecordSet\",\n      \"Properties\": {\n        \"AliasTarget\": {\n          \"DNSName\": { \"Fn::GetAtt\": [ \"ServiceDomainName\", \"RegionalDomainName\" ] },\n          \"HostedZoneId\": { \"Fn::GetAtt\": [ \"ServiceDomainName\", \"RegionalHostedZoneId\" ] }\n        },\n        \"HostedZoneName\": { \"Fn::Sub\": \"${hostedName}.\" },\n        \"Comment\": { \"Fn::Sub\": \"Created for service ${serviceName}\" },\n        \"Name\": { \"Fn::Sub\": \"${dnsName}.${hostedName}.\" },\n        \"Type\": \"A\"\n      }\n    },\n\n    \"Route53MapToCustomDomainTst\": {\n      \"Type\": \"AWS::Route53::RecordSet\",\n      \"Properties\": {\n        \"AliasTarget\": {\n          \"DNSName\": { \"Fn::GetAtt\": [ \"ServiceDomainNameTst\", \"RegionalDomainName\" ] },\n          \"HostedZoneId\": { \"Fn::GetAtt\": [ \"ServiceDomainNameTst\", \"RegionalHostedZoneId\" ] }\n        },\n        \"HostedZoneName\": { \"Fn::Sub\": \"${hostedName}.\" },\n        \"Comment\": { \"Fn::Sub\": \"Created for service ${serviceName}\" },\n        \"Name\": { \"Fn::Sub\": \"tst-${dnsName}.${hostedName}.\" },\n        \"Type\": \"A\"\n      }\n    }\n  }\n}\n",
			"canonicalURL": "/github.com/Rhosys/aws-architect.js@e41632c7ffbc6d60c15863a4473dd52bdea31a26/-/blob/bin/template/cloudFormationServerlessTemplate.json",
			"externalURLs": [
				{
					"url": "https://github.com/Rhosys/aws-architect.js/blob/e41632c7ffbc6d60c15863a4473dd52bdea31a26/bin/template/cloudFormationServerlessTemplate.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}