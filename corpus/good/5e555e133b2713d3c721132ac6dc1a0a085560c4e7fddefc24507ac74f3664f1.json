{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/furkanisitan/country-city-api"
		},
		"file": {
			"name": "api-docs.yaml",
			"size": 0,
			"path": "docs/api-docs.yaml",
			"byteSize": 34350,
			"content": "openapi: 3.0.1\ninfo:\n  title: Country City API\n  description: \"An Spring Boot Rest API for managing countries and cities.\u003cbr /\u003eYou\\\n    \\ can find out more about filtering, paging and sorting at [github.com/furkanisitan/country-city-api](https://github.com/furkanisitan/country-city-api#filtering-paging-and-sorting).\"\n  contact:\n    name: Furkan Işıtan\n    url: https://furkanisitan.com/\n    email: furkanisitan96@gmail.com\n  license:\n    name: MIT License\n    url: https://raw.githubusercontent.com/furkanisitan/country-city-api/main/LICENSE\n  version: 1.0.0\nservers:\n- url: http://localhost:8080\ntags:\n- name: Cities\n  description: The City API\n- name: Countries\n  description: The Country API\n- name: Languages\n  description: The Language API\npaths:\n  /api/languages/{id}:\n    get:\n      tags:\n      - Languages\n      summary: Returns a specific language.\n      operationId: one\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultData'\n              example:\n                success: true\n                message: The request has been processed successfully.\n                payload:\n                  id: 1\n                  name: Turkish\n                  code: tr\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                no record:\n                  description: \"recordName: Language\"\n                  value:\n                    success: false\n                    message: The resource not found.\n                    errors:\n                    - \"{recordName} not found for parameters (id='55').\"\n    put:\n      tags:\n      - Languages\n      summary: Updates a specific language.\n      operationId: update\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LanguageUpdateRequest'\n        required: true\n      responses:\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                unique:\n                  description: \"fieldName: code\"\n                  value:\n                    success: false\n                    message: A unique constraint error has occurred.\n                    errors:\n                    - \"{fieldName}: must be unique. (rejectedValue: {fieldValue})\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                blank:\n                  description: \"fieldName: code | name\"\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{fieldName}: must not be blank.\"\n                \"null\":\n                  description: \"fieldName: id\"\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{fieldName}: must not be null.\"\n                mismatch:\n                  description: \"param: id - field: id\"\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{field}: it doesn't match {param} in the route.\"\n        \"204\":\n          description: No Content\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                no record:\n                  description: \"recordName: Language\"\n                  value:\n                    success: false\n                    message: The resource not found.\n                    errors:\n                    - \"{recordName} not found for parameters (id='55').\"\n    delete:\n      tags:\n      - Languages\n      summary: Deletes a specific language.\n      operationId: delete\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"204\":\n          description: No Content\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                no record:\n                  description: \"recordName: Language\"\n                  value:\n                    success: false\n                    message: The resource not found.\n                    errors:\n                    - \"{recordName} not found for parameters (id='55').\"\n  /api/countries/{id}:\n    get:\n      tags:\n      - Countries\n      summary: Returns a specific country.\n      operationId: one_1\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultData'\n              example:\n                success: true\n                message: The request has been processed successfully.\n                payload:\n                  id: 1\n                  name: Turkey\n                  code: TR\n                  lifeExpectancy: 78.6\n                  continent: EUROPE\n                  languages:\n                  - languageId: 1\n                    languageName: Turkish\n                    languageCode: tr\n                    official: true\n                  cities:\n                  - id: 1\n                    name: Ankara\n                    population: 5747325\n                    countryCode: TR\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                no record:\n                  description: \"recordName: Country\"\n                  value:\n                    success: false\n                    message: The resource not found.\n                    errors:\n                    - \"{recordName} not found for parameters (id='55').\"\n    put:\n      tags:\n      - Countries\n      summary: Updates a specific country.\n      operationId: update_1\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CountryUpdateRequest'\n        required: true\n      responses:\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                blank:\n                  description: \"fieldName: code | name\"\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{fieldName}: must not be blank.\"\n                \"null\":\n                  description: \"fieldName: id\"\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{fieldName}: must not be null.\"\n                mismatch:\n                  description: \"param: id - field: id\"\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{field}: it doesn't match {param} in the route.\"\n        \"204\":\n          description: No Content\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                no record:\n                  description: \"recordName: Country\"\n                  value:\n                    success: false\n                    message: The resource not found.\n                    errors:\n                    - \"{recordName} not found for parameters (id='55').\"\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                unique:\n                  description: \"fieldName: code\"\n                  value:\n                    success: false\n                    message: A unique constraint error has occurred.\n                    errors:\n                    - \"{fieldName}: must be unique. (rejectedValue: {fieldValue})\"\n                foreign key:\n                  description: \"key: languages.languageId\"\n                  value:\n                    success: false\n                    message: A foreign key constraint error has occurred.\n                    errors:\n                    - \"{key}: the foreign key does not exist. (rejectedValue: {value})\"\n    delete:\n      tags:\n      - Countries\n      summary: Deletes a specific country.\n      operationId: delete_1\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"204\":\n          description: No Content\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                no record:\n                  description: \"recordName: Country\"\n                  value:\n                    success: false\n                    message: The resource not found.\n                    errors:\n                    - \"{recordName} not found for parameters (id='55').\"\n  /api/cities/{id}:\n    get:\n      tags:\n      - Cities\n      summary: Returns a specific city.\n      operationId: one_2\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultData'\n              example:\n                success: true\n                message: The request has been processed successfully.\n                payload:\n                  id: 1\n                  name: Ankara\n                  population: 5747325\n                  country:\n                    id: 1\n                    code: TR\n                    name: Turkey\n                    lifeExpectancy: 78.6\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                no record:\n                  description: \"recordName: City\"\n                  value:\n                    success: false\n                    message: The resource not found.\n                    errors:\n                    - \"{recordName} not found for parameters (id='55').\"\n    put:\n      tags:\n      - Cities\n      summary: Updates a specific city.\n      operationId: update_2\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CityUpdateRequest'\n        required: true\n      responses:\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                foreign key:\n                  description: \"key: countryCode\"\n                  value:\n                    success: false\n                    message: A foreign key constraint error has occurred.\n                    errors:\n                    - \"{key}: the foreign key does not exist. (rejectedValue: {value})\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                blank:\n                  description: \"fieldName: name | countryCode\"\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{fieldName}: must not be blank.\"\n                positive:\n                  description: \"fieldName: population\"\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{fieldName}: must be greater than 0.\"\n                \"null\":\n                  description: \"fieldName: id\"\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{fieldName}: must not be null.\"\n                mismatch:\n                  description: \"param: id - field: id\"\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{field}: it doesn't match {param} in the route.\"\n        \"204\":\n          description: No Content\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                no record:\n                  description: \"recordName: City\"\n                  value:\n                    success: false\n                    message: The resource not found.\n                    errors:\n                    - \"{recordName} not found for parameters (id='55').\"\n    delete:\n      tags:\n      - Cities\n      summary: Deletes a specific city.\n      operationId: delete_2\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"204\":\n          description: No Content\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                no record:\n                  description: \"recordName: City\"\n                  value:\n                    success: false\n                    message: The resource not found.\n                    errors:\n                    - \"{recordName} not found for parameters (id='55').\"\n  /api/languages:\n    get:\n      tags:\n      - Languages\n      summary: Returns a list of languages.\n      operationId: all\n      parameters:\n      - name: filter\n        in: query\n        required: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: sort\n        in: query\n        required: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: page\n        in: query\n        required: false\n        schema:\n          type: integer\n          format: int32\n      - name: size\n        in: query\n        required: false\n        schema:\n          type: integer\n          format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultData'\n              example:\n                success: true\n                message: The request has been processed successfully.\n                payload:\n                - id: 1\n                  name: Turkish\n                  code: tr\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                invalid field:\n                  description: invalid field\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{field}: field must be valid.\"\n                invalid filter:\n                  description: invalid filter\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{filter}: filter format must be like '{field}{operator}{value}'.\"\n                invalid value:\n                  description: invalid value\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{field}: value must be valid. (rejectedValue: {value})\"\n                unsupported filter:\n                  description: unsupported filter\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{field}: the {operator} operator is not supported for this\\\n                      \\ field.\"\n    post:\n      tags:\n      - Languages\n      summary: Creates a new language.\n      operationId: create\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LanguageCreateRequest'\n        required: true\n      responses:\n        \"201\":\n          description: Created\n          headers:\n            Location:\n              description: Location of the newly created resource.\n              style: simple\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultData'\n              example:\n                success: true\n                message: Resource(s) added successfully.\n                payload:\n                  id: 1\n                  name: Turkish\n                  code: tr\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                unique:\n                  description: \"fieldName: code\"\n                  value:\n                    success: false\n                    message: A unique constraint error has occurred.\n                    errors:\n                    - \"{fieldName}: must be unique. (rejectedValue: {fieldValue})\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                blank:\n                  description: \"fieldName: code | name\"\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{fieldName}: must not be blank.\"\n  /api/countries:\n    get:\n      tags:\n      - Countries\n      summary: Returns a list of countries.\n      operationId: all_1\n      parameters:\n      - name: filter\n        in: query\n        required: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: sort\n        in: query\n        required: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: page\n        in: query\n        required: false\n        schema:\n          type: integer\n          format: int32\n      - name: size\n        in: query\n        required: false\n        schema:\n          type: integer\n          format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultData'\n              example:\n                success: true\n                message: The request has been processed successfully.\n                payload:\n                - id: 1\n                  name: Turkey\n                  code: TR\n                  lifeExpectancy: 78.6\n                  continent: EUROPE\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                invalid field:\n                  description: invalid field\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{field}: field must be valid.\"\n                invalid filter:\n                  description: invalid filter\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{filter}: filter format must be like '{field}{operator}{value}'.\"\n                invalid value:\n                  description: invalid value\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{field}: value must be valid. (rejectedValue: {value})\"\n                unsupported filter:\n                  description: unsupported filter\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{field}: the {operator} operator is not supported for this\\\n                      \\ field.\"\n    post:\n      tags:\n      - Countries\n      summary: Creates a new country.\n      operationId: create_1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CountryCreateRequest'\n        required: true\n      responses:\n        \"201\":\n          description: Created\n          headers:\n            Location:\n              description: Location of the newly created resource.\n              style: simple\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultData'\n              example:\n                success: true\n                message: Resource(s) added successfully.\n                payload:\n                  id: 1\n                  name: Turkey\n                  code: TR\n                  lifeExpectancy: 78.6\n                  continent: EUROPE\n                  languages:\n                  - languageId: 1\n                    languageName: Turkish\n                    languageCode: tr\n                    official: true\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                blank:\n                  description: \"fieldName: code | name\"\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{fieldName}: must not be blank.\"\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                unique:\n                  description: \"fieldName: code\"\n                  value:\n                    success: false\n                    message: A unique constraint error has occurred.\n                    errors:\n                    - \"{fieldName}: must be unique. (rejectedValue: {fieldValue})\"\n                foreign key:\n                  description: \"key: languages.languageId\"\n                  value:\n                    success: false\n                    message: A foreign key constraint error has occurred.\n                    errors:\n                    - \"{key}: the foreign key does not exist. (rejectedValue: {value})\"\n  /api/cities:\n    get:\n      tags:\n      - Cities\n      summary: Returns a list of cities.\n      operationId: all_2\n      parameters:\n      - name: filter\n        in: query\n        required: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: sort\n        in: query\n        required: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: page\n        in: query\n        required: false\n        schema:\n          type: integer\n          format: int32\n      - name: size\n        in: query\n        required: false\n        schema:\n          type: integer\n          format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultData'\n              example:\n                success: true\n                message: The request has been processed successfully.\n                payload:\n                - id: 1\n                  name: Ankara\n                  population: 5747325\n                  countryId: 1\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                invalid field:\n                  description: invalid field\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{field}: field must be valid.\"\n                invalid filter:\n                  description: invalid filter\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{filter}: filter format must be like '{field}{operator}{value}'.\"\n                invalid value:\n                  description: invalid value\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{field}: value must be valid. (rejectedValue: {value})\"\n                unsupported filter:\n                  description: unsupported filter\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{field}: the {operator} operator is not supported for this\\\n                      \\ field.\"\n    post:\n      tags:\n      - Cities\n      summary: Creates a new city.\n      operationId: create_2\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CityCreateRequest'\n        required: true\n      responses:\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                foreign key:\n                  description: \"key: countryCode\"\n                  value:\n                    success: false\n                    message: A foreign key constraint error has occurred.\n                    errors:\n                    - \"{key}: the foreign key does not exist. (rejectedValue: {value})\"\n        \"201\":\n          description: Created\n          headers:\n            Location:\n              description: Location of the newly created resource.\n              style: simple\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultData'\n              example:\n                success: true\n                message: Resource(s) added successfully.\n                payload:\n                  id: 1\n                  name: Ankara\n                  population: 5747325\n                  country:\n                    id: 1\n                    code: TR\n                    name: Turkey\n                    lifeExpectancy: 78.6\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                blank:\n                  description: \"fieldName: name | countryCode\"\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{fieldName}: must not be blank.\"\n                positive:\n                  description: \"fieldName: population\"\n                  value:\n                    success: false\n                    message: Invalid bad request.\n                    errors:\n                    - \"{fieldName}: must be greater than 0.\"\n  /api/countries/{id}/cities:\n    get:\n      tags:\n      - Countries\n      summary: Returns a list of cities of the country.\n      operationId: allCities\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultData'\n              example:\n                success: true\n                message: The request has been processed successfully.\n                payload:\n                - id: 1\n                  name: Ankara\n                  population: 5747325\n                  countryId: 1\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Result'\n              examples:\n                no record:\n                  description: \"recordName: Country\"\n                  value:\n                    success: false\n                    message: The resource not found.\n                    errors:\n                    - \"{recordName} not found for parameters (id='55').\"\ncomponents:\n  schemas:\n    LanguageUpdateRequest:\n      required:\n      - code\n      - id\n      - name\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        code:\n          type: string\n          example: tr\n        name:\n          type: string\n          example: Turkish\n    Result:\n      type: object\n      properties:\n        success:\n          type: boolean\n        message:\n          type: string\n        errors:\n          type: array\n          items:\n            type: string\n    CountryLanguageRequest:\n      required:\n      - languageId\n      type: object\n      properties:\n        languageId:\n          type: integer\n          format: int64\n          example: 1\n        official:\n          type: boolean\n    CountryUpdateRequest:\n      required:\n      - code\n      - continent\n      - id\n      - name\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        code:\n          type: string\n          example: TR\n        name:\n          type: string\n          example: Turkey\n        lifeExpectancy:\n          type: number\n          format: double\n          example: 78.6\n        continent:\n          type: string\n          example: EUROPE\n          enum:\n          - AFRICA\n          - ANTARCTICA\n          - ASIA\n          - AUSTRALIA\n          - EUROPE\n          - NORTH_AMERICA\n          - SOUTH_AMERICA\n        languages:\n          type: array\n          items:\n            $ref: '#/components/schemas/CountryLanguageRequest'\n    CityUpdateRequest:\n      required:\n      - countryCode\n      - id\n      - name\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        name:\n          type: string\n          example: Ankara\n        population:\n          type: integer\n          format: int64\n          example: 5747325\n        countryCode:\n          type: string\n          example: TR\n    LanguageCreateRequest:\n      required:\n      - code\n      - name\n      type: object\n      properties:\n        code:\n          type: string\n          example: tr\n        name:\n          type: string\n          example: Turkish\n    ResultData:\n      type: object\n      properties:\n        success:\n          type: boolean\n        message:\n          type: string\n        errors:\n          type: array\n          items:\n            type: string\n        payload:\n          type: object\n    CountryCreateRequest:\n      required:\n      - code\n      - continent\n      - name\n      type: object\n      properties:\n        code:\n          type: string\n          example: TR\n        name:\n          type: string\n          example: Turkey\n        lifeExpectancy:\n          type: number\n          format: double\n          example: 78.6\n        continent:\n          type: string\n          example: EUROPE\n          enum:\n          - AFRICA\n          - ANTARCTICA\n          - ASIA\n          - AUSTRALIA\n          - EUROPE\n          - NORTH_AMERICA\n          - SOUTH_AMERICA\n        languages:\n          type: array\n          items:\n            $ref: '#/components/schemas/CountryLanguageRequest'\n    CityCreateRequest:\n      required:\n      - countryCode\n      - name\n      type: object\n      properties:\n        name:\n          type: string\n          example: Ankara\n        population:\n          type: integer\n          format: int64\n          example: 5747325\n        countryCode:\n          type: string\n          example: TR\n",
			"canonicalURL": "/github.com/furkanisitan/country-city-api@3d7b119b341de4dff77dfed72eeee2b508d0ae8f/-/blob/docs/api-docs.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/furkanisitan/country-city-api/blob/3d7b119b341de4dff77dfed72eeee2b508d0ae8f/docs/api-docs.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}