{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/adobe/aquarium-fish"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/openapi.yaml",
			"byteSize": 34908,
			"content": "---\n# Aquarium Fish OpenAPI specification\n# Use editor: https://editor.swagger.io/\nopenapi: 3.0.0\n\nservers:\n  - url: https://0.0.0.0:8001/\n    description: Main API available for the Users and Meta API for the Resources\n\ninfo:\n  description: API of the Fish node/cluster\n  version: 1.0.0\n  title: Aqurium Fish\n  contact:\n    name: Sergei Parshev\n    url: 'https://github.com/adobe/aquarium-fish'\n  license:\n    name: Apache 2.0\n\nexternalDocs:\n  url: 'https://github.com/adobe/aquarium-fish/wiki/Aquarium'\n\npaths:\n  /api/v1/user/:\n    get:\n      summary: Get list of Users\n      description: Returns a list of existing Users\n      operationId: UserListGet\n      tags:\n        - User\n      parameters:\n        - name: filter\n          in: query\n          description: SQL `WHERE` filter for the object data\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      security:\n        - basic_auth: []\n    post:\n      summary: Create new User\n      description: Creates \u0026 return the created User\n      operationId: UserCreatePost\n      tags:\n        - User\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: Bad request\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      security:\n        - basic_auth: []\n\n  /api/v1/user/me/:\n    get:\n      summary: Get the current User\n      description: Returns the current logged in User information\n      operationId: UserMeGet\n      tags:\n        - User\n      parameters: []\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          description: User not found\n      security:\n        - basic_auth: []\n\n  /api/v1/user/{id}:\n    get:\n      summary: Get User by ID\n      description: Returns a single User by it's name (unique ID)\n      operationId: UserGet\n      tags:\n        - User\n      parameters:\n        - name: id\n          in: path\n          description: ID of the object\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          description: User not found\n      security:\n        - basic_auth: []\n    delete:\n      summary: Delete the User by ID\n      description: Will remove the User with specified ID\n      operationId: UserDelete\n      tags:\n        - User\n      parameters:\n        - name: id\n          in: path\n          description: ID of the object\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n        '400':\n          description: Only admin can do that\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          description: User not found\n      security:\n        - basic_auth: []\n\n  /api/v1/label/:\n    get:\n      summary: Get list of Labels\n      description: Returns a list of existing Labels\n      operationId: LabelListGet\n      tags:\n        - Label\n      parameters:\n        - name: filter\n          in: query\n          description: SQL `WHERE` filter for the object data\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Label'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      security:\n        - basic_auth: []\n    post:\n      summary: Create new Label\n      description: Creates \u0026 return the created Label\n      operationId: LabelCreatePost\n      tags:\n        - Label\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Label'\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Label'\n        '400':\n          description: Bad request\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      security:\n        - basic_auth: []\n\n  /api/v1/label/{id}:\n    get:\n      summary: Get Label by ID\n      description: Returns a single Label by it's ID\n      operationId: LabelGet\n      tags:\n        - Label\n      parameters:\n        - name: id\n          in: path\n          description: ID of the object\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Label'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          description: Label not found\n      security:\n        - basic_auth: []\n    delete:\n      summary: Delete Label by ID\n      description: Deletes the Label by it's ID\n      operationId: LabelDelete\n      tags:\n        - Label\n      parameters:\n        - name: id\n          in: path\n          description: ID of the object\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Successful operation\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          description: Label not found\n      security:\n        - basic_auth: []\n\n  /api/v1/resource/:\n    get:\n      summary: Get list of Resources\n      description: Returns a list of existing Resources\n      operationId: ResourceListGet\n      tags:\n        - Resource\n      parameters:\n        - name: filter\n          in: query\n          description: SQL `WHERE` filter for the object data\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Resource'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      security:\n        - basic_auth: []\n\n  /api/v1/resource/{id}:\n    get:\n      summary: Get Resource by ID\n      description: Returns a single Resource by it's ID\n      operationId: ResourceGet\n      tags:\n        - Resource\n      parameters:\n        - name: id\n          in: path\n          description: ID of the object\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Resource'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          description: Resource not found\n      security:\n        - basic_auth: []\n\n  /api/v1/application/:\n    get:\n      summary: Get list of Applications\n      description: Returns a list of existing Applications\n      operationId: ApplicationListGet\n      tags:\n        - Application\n      parameters:\n        - name: filter\n          in: query\n          description: SQL `WHERE` filter for the object data\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Application'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      security:\n        - basic_auth: []\n    post:\n      summary: Create new Application\n      description: Creates \u0026 return the created Application\n      operationId: ApplicationCreatePost\n      tags:\n        - Application\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Application'\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Application'\n        '400':\n          description: Bad request\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      security:\n        - basic_auth: []\n\n  /api/v1/application/{id}:\n    get:\n      summary: Get Application by ID\n      description: Returns a single Application by it's ID\n      operationId: ApplicationGet\n      tags:\n        - Application\n      parameters:\n        - name: id\n          in: path\n          description: ID of the object\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Application'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          description: Application not found\n      security:\n        - basic_auth: []\n\n  /api/v1/application/{id}/state:\n    get:\n      summary: Get ApplicationState of the Application\n      description: Returns the current ApplicationState by Application ID\n      operationId: ApplicationStateGet\n      tags:\n        - Application\n      parameters:\n        - name: id\n          in: path\n          description: ID of the Application\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApplicationState'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          description: Application not found\n      security:\n        - basic_auth: []\n\n  /api/v1/application/{id}/resource:\n    get:\n      summary: Get Resource by Application ID\n      description: Returns a Resource by it's Application ID\n      operationId: ApplicationResourceGet\n      tags:\n        - Application\n      parameters:\n        - name: id\n          in: path\n          description: ID of the Application\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Resource'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          description: Resource not found\n      security:\n        - basic_auth: []\n\n  /api/v1/application/{id}/deallocate:\n    get:\n      summary: Triggers Application deallocate\n      description: Moves the Application to the DEALLOCATE state\n      operationId: ApplicationDeallocateGet\n      tags:\n        - Application\n      parameters:\n        - name: id\n          in: path\n          description: ID of the Application\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Successful operation\n        '400':\n          description: Bad parameter or conditions\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          description: Application not found\n      security:\n        - basic_auth: []\n\n  /api/v1/vote/:\n    get:\n      summary: Get list of votes\n      description: Returns a list of existing Votes\n      operationId: VoteListGet\n      tags:\n        - Vote\n      parameters:\n        - name: filter\n          in: query\n          description: SQL `WHERE` filter for the object data\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Vote'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      security:\n        - basic_auth: []\n\n  /api/v1/location/:\n    get:\n      summary: Get list of locations\n      description: Returns a list of existing Locations\n      operationId: LocationListGet\n      tags:\n        - Location\n      parameters:\n        - name: filter\n          in: query\n          description: SQL `WHERE` filter for the object data\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Location'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      security:\n        - basic_auth: []\n    post:\n      summary: Create new Location\n      description: Creates \u0026 return the created Location\n      operationId: LocationCreatePost\n      tags:\n        - Location\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Location'\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n        '400':\n          description: Bad request\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      security:\n        - basic_auth: []\n\n  /api/v1/servicemapping/:\n    get:\n      summary: Get list of service mappings\n      description: Returns a list of existing ServiceMappings\n      operationId: ServiceMappingListGet\n      tags:\n        - ServiceMapping\n      parameters:\n        - name: filter\n          in: query\n          description: SQL `WHERE` filter for the object data\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServiceMapping'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      security:\n        - basic_auth: []\n    post:\n      summary: Create new ServiceMapping\n      description: Creates \u0026 return the created ServiceMapping\n      operationId: ServiceMappingCreatePost\n      tags:\n        - ServiceMapping\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServiceMapping'\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceMapping'\n        '400':\n          description: Bad request\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      security:\n        - basic_auth: []\n\n  /api/v1/servicemapping/{id}:\n    get:\n      summary: Get ServiceMapping by ID\n      description: Returns a single ServiceMapping by it's ID\n      operationId: ServiceMappingGet\n      tags:\n        - ServiceMapping\n      parameters:\n        - name: id\n          in: path\n          description: ID of the object\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceMapping'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          description: ServiceMapping not found\n      security:\n        - basic_auth: []\n    delete:\n      summary: Delete the ServiceMapping by ID\n      description: Will remove the ServiceMapping with specified ID\n      operationId: ServiceMappingDelete\n      tags:\n        - ServiceMapping\n      parameters:\n        - name: id\n          in: path\n          description: ID of the object\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Successful operation\n        '400':\n          description: Only admin can do that\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          description: ServiceMapping not found\n      security:\n        - basic_auth: []\n\n  /meta/v1/data/:\n    get:\n      summary: Get the Resource metadata\n      description:\n        Returns the hash of the Resource metadata (combined Label and Application metadata)\n      operationId: DataGetList\n      tags:\n        - MetaData\n      parameters:\n        - name: format\n          in: query\n          description: Set the return format\n          required: false\n          schema:\n            type: string\n            enum:\n              - json  # Regular JSON\n              - env   # Plain format suitable to use as shell variables\n            default: json\n        - name: prefix\n          in: query\n          description: Additional prefix for the key path if `format=env`\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n            application/yaml:\n              schema:\n                type: object\n            text/plain; charset=utf-8:\n              schema:\n                type: string\n        '401':\n          description: Not in controlled network or Resource with IpAddr or HwAddr not found\n        '404':\n          description: Key path not found\n\n  /meta/v1/data/{key_path}:\n    get:\n      summary: TODO Get value by key path\n      description: Returns a required Resource metadata key path value\n      operationId: DataGet\n      tags:\n        - MetaData\n      parameters:\n        - name: key_path\n          in: path\n          description: Key path of the required value\n          required: true\n          schema:\n            type: string\n        - name: format\n          in: query\n          description: Set the return format\n          required: false\n          schema:\n            type: string\n            enum:\n              - json  # Regular JSON\n              - env   # Plain format suitable to use as shell variables\n            default: json\n        - name: prefix\n          in: query\n          description: Additional prefix for the key path if `format=env`\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n            application/yaml:\n              schema:\n                type: object\n            text/plain; charset=utf-8:\n              schema:\n                type: string\n        '401':\n          description: Not in controlled network or Resource with IpAddr or HwAddr not found\n        '404':\n          description: Key path not found\n\n\ncomponents:\n  schemas:\n    Application:\n      type: object\n      x-go-json-ignore: true\n      description: \u003e\n        Resource request created by the user. Each node votes for the availability to allocate the\n        resource and the cluster choose which one node will actually do the work.\n      required:\n        - ID\n        - created_at\n        - user_ID\n        - label_ID\n        - metadata\n      properties:\n        ID:\n          type: integer\n          format: int64\n          x-oapi-codegen-extra-tags:\n            gorm: primaryKey\n        created_at:\n          x-go-type: time.Time\n        user_ID:\n          type: integer\n          format: int64\n        user:\n          $ref: '#/components/schemas/User'\n        label_ID:\n          type: integer\n          format: int64\n        label:\n          $ref: '#/components/schemas/Label'\n        metadata:\n          x-go-type: util.UnparsedJson\n          description: Additional metadata in JSON format (can't override Label metadata)\n          example:\n            JENKINS_URL: 'http://172.16.1.1:8085/'\n            JENKINS_AGENT_SECRET: 03839eabcf945b1e780be8f9488d264c4c57bf388546da9a84588345555f29b0\n            JENKINS_AGENT_NAME: test-node\n\n    ApplicationState:\n      type: object\n      description: \u003e\n        The state of the Application - it goes through graph of states, so this object stores the\n        info when the Application comes to this state and the last one describes the current state\n        of the Application.\n      required:\n        - ID\n        - created_at\n        - application_ID\n        - status\n        - description\n      properties:\n        ID:\n          type: integer\n          format: int64\n          x-oapi-codegen-extra-tags:\n            gorm: primaryKey\n        created_at:\n          x-go-type: time.Time\n        application_ID:\n          type: integer\n          format: int64\n        application:\n          $ref: '#/components/schemas/Application'\n        status:\n          type: string\n          enum:\n            - NEW          # The Application just created (active)\n            - ELECTED      # Node is elected during the voting process (active)\n            - ALLOCATED    # The Resource is allocated and starting up (active)\n            - DEALLOCATE   # User requested the Application deallocate (not active)\n            - RECALLED     # User requested the Application deallocate, but it was not allocated (not active)\n            - DEALLOCATED  # The Resource is deallocated (not active)\n            - ERROR        # The error happened (not active)\n        description:\n          type: string\n          description: Additional information for the state\n\n    User:\n      type: object\n      x-go-json-ignore: true\n      description: \u003e\n        Contains limits and hash to login, name is unique, `admin` created during the first cluster\n        start and prints it to stderr.\n      required:\n        - ID\n        - created_at\n        - updated_at\n        - name\n        - hash\n      properties:\n        ID:\n          type: integer\n          format: int64\n          x-oapi-codegen-extra-tags:\n            gorm: primaryKey\n        created_at:\n          x-go-type: time.Time\n        updated_at:\n          x-go-type: time.Time\n        name:\n          type: string\n          x-oapi-codegen-extra-tags:\n            gorm: unique\n        hash:\n          x-go-type: crypt.Hash\n          x-oapi-codegen-extra-tags:\n            gorm: embedded\n\n    Label:\n      type: object\n      x-go-json-ignore: true\n      description: \u003e\n        This one filled by the cluster admin, depends on the needs. Labels could be implemented in\n        different drivers, but it's not recommended to keep the label stable. Version could be used\n        during request, but by default it's the latest.\n\n        Label - is one of the most important part of the system, because it makes the resources\n        reproducible in time. It contains the driver name and configuration, so can be started\n        again and again as much times we need. Versions make possible to update the labels and\n        store the old ones in case we need to run the same environment 10y from now and rebuild the\n        old code revision for example.\n\n        Labels can't be updated. Once they are stored - they are here to keep the history of\n        environements and make possible to mark build with the specified label version in order to\n        be able to reproduce it later. Also labels can be implemented just by one driver. If you\n        want to use another one - you will need to create another label version and the resource\n        requests that uses latest will swith to it.\n      required:\n        - ID\n        - created_at\n        - name\n        - version\n        - driver\n        - definition\n        - metadata\n      properties:\n        ID:\n          type: integer\n          format: int64\n          x-oapi-codegen-extra-tags:\n            gorm: primaryKey\n        created_at:\n          x-go-type: time.Time\n        name:\n          type: string\n          x-oapi-codegen-extra-tags:\n            gorm: uniqueIndex:idx_label_uniq\n          description: Simple name to identify the Label\n          example: xcode12.2\n        version:\n          type: integer\n          x-oapi-codegen-extra-tags:\n            gorm: uniqueIndex:idx_label_uniq\n          description: \u003e\n            In order to update the labels freely and save the previous Label state for the past\n            builds.\n        driver:\n          type: string\n          description: Name of the driver to run the Resource with this Label\n          example: vmx\n        definition:\n          x-go-type: util.UnparsedJson\n          description: Actual Labl definition depends on the used driver\n          example:\n            image: macos1015-xcode122-ci\n            images:\n              macos1015: 'https://artifact-storage/aquarium/image/vmx/macos1015-VERSION/macos1015-VERSION.tar.xz'\n              macos1015-xcode122: 'https://artifact-storage/aquarium/image/vmx/macos1015-xcode122-VERSION/macos1015-xcode122-VERSION.tar.xz'\n              macos1015-xcode122-ci: 'https://artifact-storage/aquarium/image/vmx/macos1015-xcode122-ci-VERSION/macos1015-xcode122-ci-VERSION.tar.xz'\n            requirements:\n              cpu: 14\n              ram: 12\n              disks:\n                xcode122:\n                  size: 100\n                  reuse: true\n        metadata:\n          x-go-type: util.UnparsedJson\n          description: Basic metadata to pass to the Resource\n          example:\n            JENKINS_AGENT_WORKSPACE: /Volumes/xcode122\n\n    Node:\n      type: object\n      x-go-json-ignore: true\n      description: \u003e\n        Each node need to report it's description, status and ensure there is no duplications and\n        to perform the cluster worker election process properly.\n      required:\n        - ID\n        - created_at\n        - updated_at\n        - name\n        - definition\n        - location_ID\n      properties:\n        ID:\n          type: integer\n          format: int64\n          x-oapi-codegen-extra-tags:\n            gorm: primaryKey\n        created_at:\n          x-go-type: time.Time\n        updated_at:\n          x-go-type: time.Time\n          description: This field is used as ping, so the cluster knows the Node is alive.\n        name:\n          type: string\n          x-oapi-codegen-extra-tags:\n            gorm: unique\n        definition:\n          $ref: '#/components/schemas/NodeDefinition'\n        location_ID:\n          type: integer\n          format: int64\n          description: Where the Node is located\n\n    NodeDefinition:\n      type: object\n      description: Contains technical information about the node\n      required:\n        - cpu\n        - disks\n        - nets\n      properties:\n        host:\n          x-go-type: host.InfoStat\n          x-omitempty: false\n        memory:\n          x-go-type: mem.VirtualMemoryStat\n          x-omitempty: false\n        cpu:\n          type: array\n          items:\n            x-go-type: cpu.InfoStat\n        disks:\n          x-go-type: 'map[string]*disk.UsageStat'\n        nets:\n          type: array\n          items:\n            x-go-type: net.InterfaceStat\n\n    Resource:\n      type: object\n      description: \u003e\n        Active resource definition to be able to properly restore the state during the cluster node\n        restart. Also contains additional info about the resource, for example user requested\n        metadata, which is available for the resource through the `Meta API`.\n      required:\n        - ID\n        - created_at\n        - updated_at\n        - application_ID\n        - node_ID\n        - ip_addr\n        - hw_addr\n        - metadata\n      properties:\n        ID:\n          type: integer\n          format: int64\n          x-oapi-codegen-extra-tags:\n            gorm: primaryKey\n        created_at:\n          x-go-type: time.Time\n        updated_at:\n          x-go-type: time.Time\n        application_ID:\n          type: integer\n          format: int64\n        application:\n          $ref: '#/components/schemas/Application'\n        node_ID:\n          type: integer\n          format: int64\n        node:\n          $ref: '#/components/schemas/Node'\n        ip_addr:\n          type: string\n          description: Is a weak current network IP address of the resource, usually gathered based on the `HwAddr`.\n        hw_addr:\n          type: string\n          description: MAC or any other type of network address which will allow to properly identify the node through network interaction.\n        metadata:\n          x-go-type: util.UnparsedJson\n          description: Combined Application and Label metadata (in this order) to make it available through `Meta API` to the resource.\n          example:\n            JENKINS_URL: 'http://172.16.1.1:8085/'\n            JENKINS_AGENT_SECRET: 03839eabcf945b1e780be8f9488d264c4c57bf388546da9a84588345555f29b0\n            JENKINS_AGENT_NAME: test-node\n            JENKINS_AGENT_WORKSPACE: /Volumes/xcode122\n\n    Vote:\n      type: object\n      x-go-json-ignore: true\n      description: \u003e\n        When Application becomes available for the node it starts to vote to notify the cluster\n        about its availability. Votes are basically \"yes\" or \"no\" and could take a number of rounds\n        depends on the cluster voting and election rules.\n      required:\n        - ID\n        - created_at\n        - application_ID\n        - node_ID\n        - round\n        - available\n        - rand\n      properties:\n        ID:\n          type: integer\n          format: int64\n          x-oapi-codegen-extra-tags:\n            gorm: primaryKey\n        created_at:\n          x-go-type: time.Time\n        application_ID:\n          type: integer\n          format: int64\n          x-oapi-codegen-extra-tags:\n            gorm: uniqueIndex:idx_node_app_round_uniq\n        application:\n          $ref: '#/components/schemas/Application'\n        node_ID:\n          type: integer\n          format: int64\n          x-oapi-codegen-extra-tags:\n            gorm: uniqueIndex:idx_node_app_round_uniq\n        node:\n          $ref: '#/components/schemas/Node'\n        round:\n          x-go-type: uint16\n          x-oapi-codegen-extra-tags:\n            gorm: uniqueIndex:idx_node_app_round_uniq\n          description: \u003e\n            Round of the election, because it can take a number of rounds to figure out the Only\n            One.\n        available:\n          type: boolean\n          description: \u003e\n            General answer of the node - the cluster will wait until receive answer from each\n            active node.\n        rand:\n          x-go-type: uint32\n          description: The last resort to figure out for the winner.\n\n    Location:\n      type: object\n      x-go-json-ignore: true\n      description: \u003e\n        In order to properly distribute the nodes across locations it's better to have this in\n        place to properly redirect the services to the nearest one according to the node location.\n      required:\n        - ID\n        - created_at\n        - name\n        - description\n      properties:\n        ID:\n          type: integer\n          format: int64\n          x-oapi-codegen-extra-tags:\n            gorm: primaryKey\n        created_at:\n          x-go-type: time.Time\n        name:\n          type: string\n          description: Name of the location\n          x-oapi-codegen-extra-tags:\n            gorm: unique\n        description:\n          type: string\n          description: Additional information about the location\n\n    ServiceMapping:\n      type: object\n      x-go-json-ignore: true\n      description: \u003e\n        Used to properly define the allowed external services and possible redirects for them (\n        useful when needed to achive proper bottleneck-free DR). The structure allows to make query\n        with finding the most relevant value based on application and location, in case there is no\n        specific values - the cluster defaults could be used.\n      required:\n        - ID\n        - created_at\n        - location_ID\n        - service\n        - redirect\n        - application_ID\n      properties:\n        ID:\n          type: integer\n          format: int64\n          x-oapi-codegen-extra-tags:\n            gorm: primaryKey\n        created_at:\n          x-go-type: time.Time\n        service:\n          type: string\n          description: FQDN or IP address of the requested service\n          x-oapi-codegen-extra-tags:\n            gorm: uniqueIndex:idx_location_service_app_uniq\n        redirect:\n          type: string\n          description: FQDN or IP address of where to rediect the service request\n        location_ID:\n          type: integer\n          format: int64\n          x-oapi-codegen-extra-tags:\n            gorm: uniqueIndex:idx_location_service_app_uniq\n        application_ID:\n          type: integer\n          format: int64\n          description: Optional, if need to override the cluster-wide redirects\n          x-oapi-codegen-extra-tags:\n            gorm: uniqueIndex:idx_location_service_app_uniq\n\n  securitySchemes:\n    basic_auth:\n      type: http\n      scheme: basic\n\n  responses:\n    UnauthorizedError:\n      description: Authentication information is missing or invalid\n      headers:\n        WWW_Authenticate:\n          schema:\n            type: string\n",
			"canonicalURL": "/github.com/adobe/aquarium-fish@d7be5db9439c9e253756154d0cc2b6f00f08ca6a/-/blob/docs/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/adobe/aquarium-fish/blob/d7be5db9439c9e253756154d0cc2b6f00f08ca6a/docs/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}