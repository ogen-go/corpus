{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/apigee.local/registry/0.0.2/openapi.yaml",
			"byteSize": 46343,
			"content": "openapi: 3.0.3\nservers:\n  - url: http://apigee.local\ninfo:\n  description: The Registry service allows teams to manage descriptions of APIs.\n  title: Registry\n  version: 0.0.2\n  x-apisguru-categories:\n    - developer_tools\n  x-origin:\n    - format: openapi\n      url: https://raw.githubusercontent.com/apigee/registry/main/openapi.yaml\n      version: \"3.0\"\n  x-providerName: apigee.local\n  x-serviceName: registry\npaths:\n  /v1/projects:\n    get:\n      operationId: Registry_ListProjects\n      parameters:\n        - description: The maximum number of projects to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000.\n          in: query\n          name: page_size\n          schema:\n            type: string\n        - description: A page token, received from a previous `ListProjects` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListProjects` must match the call that provided the page token.\n          in: query\n          name: page_token\n          schema:\n            type: string\n        - description: An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields.\n          in: query\n          name: filter\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListProjectsResponse\"\n          description: OK\n      summary: ListProjects returns matching projects.\n    post:\n      operationId: Registry_CreateProject\n      parameters:\n        - description: The ID to use for the project, which will become the final component of the project's resource name. This value should be at most 80 characters, and valid characters are /[a-z][0-9]-./.\n          in: query\n          name: project_id\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Project\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Project\"\n          description: OK\n      summary: CreateProject creates a specified project.\n  \"/v1/projects/{project}\":\n    delete:\n      operationId: Registry_DeleteProject\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content: {}\n          description: OK\n      summary: DeleteProject removes a specified project and all of the resources that it owns.\n    get:\n      operationId: Registry_GetProject\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Project\"\n          description: OK\n      summary: GetProject returns a specified project.\n    patch:\n      operationId: Registry_UpdateProject\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \"*\" is specified, all fields are updated, including fields that are unspecified/default in the request.\n          in: query\n          name: update_mask\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Project\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Project\"\n          description: OK\n      summary: UpdateProject can be used to modify a specified project.\n  \"/v1/projects/{project}/apis\":\n    get:\n      operationId: Registry_ListApis\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The maximum number of APIs to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000.\n          in: query\n          name: page_size\n          schema:\n            type: string\n        - description: A page token, received from a previous `ListApis` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListApis` must match the call that provided the page token.\n          in: query\n          name: page_token\n          schema:\n            type: string\n        - description: An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields.\n          in: query\n          name: filter\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListApisResponse\"\n          description: OK\n      summary: ListApis returns matching APIs.\n    post:\n      operationId: Registry_CreateApi\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The ID to use for the api, which will become the final component of the api's resource name. This value should be at most 80 characters, and valid characters are /[a-z][0-9]-./.\n          in: query\n          name: api_id\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Api\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Api\"\n          description: OK\n      summary: CreateApi creates a specified API.\n  \"/v1/projects/{project}/apis/{api}\":\n    delete:\n      operationId: Registry_DeleteApi\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The api id.\n          in: path\n          name: api\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content: {}\n          description: OK\n      summary: DeleteApi removes a specified API and all of the resources that it owns.\n    get:\n      operationId: Registry_GetApi\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The api id.\n          in: path\n          name: api\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Api\"\n          description: OK\n      summary: GetApi returns a specified API.\n    patch:\n      operationId: Registry_UpdateApi\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The api id.\n          in: path\n          name: api\n          required: true\n          schema:\n            type: string\n        - description: The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \"*\" is specified, all fields are updated, including fields that are unspecified/default in the request.\n          in: query\n          name: update_mask\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Api\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Api\"\n          description: OK\n      summary: UpdateApi can be used to modify a specified API.\n  \"/v1/projects/{project}/apis/{api}/versions\":\n    get:\n      operationId: Registry_ListApiVersions\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The api id.\n          in: path\n          name: api\n          required: true\n          schema:\n            type: string\n        - description: The maximum number of versions to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000.\n          in: query\n          name: page_size\n          schema:\n            type: string\n        - description: A page token, received from a previous `ListApiVersions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListApiVersions` must match the call that provided the page token.\n          in: query\n          name: page_token\n          schema:\n            type: string\n        - description: An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields.\n          in: query\n          name: filter\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListApiVersionsResponse\"\n          description: OK\n      summary: ListApiVersions returns matching versions.\n    post:\n      operationId: Registry_CreateApiVersion\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The api id.\n          in: path\n          name: api\n          required: true\n          schema:\n            type: string\n        - description: The ID to use for the version, which will become the final component of the version's resource name. This value should be at most 80 characters, and valid characters are /[a-z][0-9]-./.\n          in: query\n          name: api_version_id\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ApiVersion\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiVersion\"\n          description: OK\n      summary: CreateApiVersion creates a specified version.\n  \"/v1/projects/{project}/apis/{api}/versions/{version}\":\n    delete:\n      operationId: Registry_DeleteApiVersion\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The api id.\n          in: path\n          name: api\n          required: true\n          schema:\n            type: string\n        - description: The version id.\n          in: path\n          name: version\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content: {}\n          description: OK\n      summary: DeleteApiVersion removes a specified version and all of the resources that it owns.\n    get:\n      operationId: Registry_GetApiVersion\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The api id.\n          in: path\n          name: api\n          required: true\n          schema:\n            type: string\n        - description: The version id.\n          in: path\n          name: version\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiVersion\"\n          description: OK\n      summary: GetApiVersion returns a specified version.\n    patch:\n      operationId: Registry_UpdateApiVersion\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The api id.\n          in: path\n          name: api\n          required: true\n          schema:\n            type: string\n        - description: The version id.\n          in: path\n          name: version\n          required: true\n          schema:\n            type: string\n        - description: The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \"*\" is specified, all fields are updated, including fields that are unspecified/default in the request.\n          in: query\n          name: update_mask\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ApiVersion\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiVersion\"\n          description: OK\n      summary: UpdateApiVersion can be used to modify a specified version.\n  \"/v1/projects/{project}/apis/{api}/versions/{version}/specs\":\n    get:\n      operationId: Registry_ListApiSpecs\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The api id.\n          in: path\n          name: api\n          required: true\n          schema:\n            type: string\n        - description: The version id.\n          in: path\n          name: version\n          required: true\n          schema:\n            type: string\n        - description: The maximum number of specs to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000.\n          in: query\n          name: page_size\n          schema:\n            type: string\n        - description: A page token, received from a previous `ListApiSpecs` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListApiSpecs` must match the call that provided the page token.\n          in: query\n          name: page_token\n          schema:\n            type: string\n        - description: An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields except contents.\n          in: query\n          name: filter\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListApiSpecsResponse\"\n          description: OK\n      summary: ListApiSpecs returns matching specs.\n    post:\n      operationId: Registry_CreateApiSpec\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The api id.\n          in: path\n          name: api\n          required: true\n          schema:\n            type: string\n        - description: The version id.\n          in: path\n          name: version\n          required: true\n          schema:\n            type: string\n        - description: The ID to use for the spec, which will become the final component of the spec's resource name. This value should be at most 80 characters, and valid characters are /[a-z][0-9]-./.\n          in: query\n          name: api_spec_id\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ApiSpec\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiSpec\"\n          description: OK\n      summary: CreateApiSpec creates a specified spec.\n  \"/v1/projects/{project}/apis/{api}/versions/{version}/specs/{spec}\":\n    delete:\n      operationId: Registry_DeleteApiSpec\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The api id.\n          in: path\n          name: api\n          required: true\n          schema:\n            type: string\n        - description: The version id.\n          in: path\n          name: version\n          required: true\n          schema:\n            type: string\n        - description: The spec id.\n          in: path\n          name: spec\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content: {}\n          description: OK\n      summary: DeleteApiSpec removes a specified spec, all revisions, and all child resources (e.g. artifacts).\n    get:\n      operationId: Registry_GetApiSpec\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The api id.\n          in: path\n          name: api\n          required: true\n          schema:\n            type: string\n        - description: The version id.\n          in: path\n          name: version\n          required: true\n          schema:\n            type: string\n        - description: The spec id.\n          in: path\n          name: spec\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiSpec\"\n          description: OK\n      summary: GetApiSpec returns a specified spec.\n    patch:\n      operationId: Registry_UpdateApiSpec\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The api id.\n          in: path\n          name: api\n          required: true\n          schema:\n            type: string\n        - description: The version id.\n          in: path\n          name: version\n          required: true\n          schema:\n            type: string\n        - description: The spec id.\n          in: path\n          name: spec\n          required: true\n          schema:\n            type: string\n        - description: The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \"*\" is specified, all fields are updated, including fields that are unspecified/default in the request.\n          in: query\n          name: update_mask\n          schema:\n            type: string\n        - description: If set to true, and the spec is not found, a new spec will be created. In this situation, `update_mask` is ignored.\n          in: query\n          name: allow_missing\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ApiSpec\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiSpec\"\n          description: OK\n      summary: UpdateApiSpec can be used to modify a specified spec.\n  \"/v1/projects/{project}/apis/{api}/versions/{version}/specs/{spec}/contents\":\n    get:\n      operationId: Registry_GetApiSpecContents\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The api id.\n          in: path\n          name: api\n          required: true\n          schema:\n            type: string\n        - description: The version id.\n          in: path\n          name: version\n          required: true\n          schema:\n            type: string\n        - description: The spec id.\n          in: path\n          name: spec\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/octet-stream: {}\n          description: OK\n      summary: GetApiSpecContents returns the contents of a specified spec.\n  \"/v1/projects/{project}/apis/{api}/versions/{version}/specs/{spec}:deleteRevision\":\n    delete:\n      operationId: Registry_DeleteApiSpecRevision\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The api id.\n          in: path\n          name: api\n          required: true\n          schema:\n            type: string\n        - description: The version id.\n          in: path\n          name: version\n          required: true\n          schema:\n            type: string\n        - description: The spec id.\n          in: path\n          name: spec\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content: {}\n          description: OK\n      summary: DeleteApiSpecRevision deletes a revision of a spec.\n  \"/v1/projects/{project}/apis/{api}/versions/{version}/specs/{spec}:listRevisions\":\n    get:\n      operationId: Registry_ListApiSpecRevisions\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The api id.\n          in: path\n          name: api\n          required: true\n          schema:\n            type: string\n        - description: The version id.\n          in: path\n          name: version\n          required: true\n          schema:\n            type: string\n        - description: The spec id.\n          in: path\n          name: spec\n          required: true\n          schema:\n            type: string\n        - description: The maximum number of revisions to return per page.\n          in: query\n          name: page_size\n          schema:\n            type: string\n        - description: The page token, received from a previous ListApiSpecRevisions call. Provide this to retrieve the subsequent page.\n          in: query\n          name: page_token\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListApiSpecRevisionsResponse\"\n          description: OK\n      summary: ListApiSpecRevisions lists all revisions of a spec. Revisions are returned in descending order of revision creation time.\n  \"/v1/projects/{project}/apis/{api}/versions/{version}/specs/{spec}:rollback\":\n    post:\n      operationId: Registry_RollbackApiSpec\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The api id.\n          in: path\n          name: api\n          required: true\n          schema:\n            type: string\n        - description: The version id.\n          in: path\n          name: version\n          required: true\n          schema:\n            type: string\n        - description: The spec id.\n          in: path\n          name: spec\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RollbackApiSpecRequest\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiSpec\"\n          description: OK\n      summary: RollbackApiSpec sets the current revision to a specified prior revision. Note that this creates a new revision with a new revision ID.\n  \"/v1/projects/{project}/apis/{api}/versions/{version}/specs/{spec}:tagRevision\":\n    post:\n      operationId: Registry_TagApiSpecRevision\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The api id.\n          in: path\n          name: api\n          required: true\n          schema:\n            type: string\n        - description: The version id.\n          in: path\n          name: version\n          required: true\n          schema:\n            type: string\n        - description: The spec id.\n          in: path\n          name: spec\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TagApiSpecRevisionRequest\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiSpec\"\n          description: OK\n      summary: TagApiSpecRevision adds a tag to a specified revision of a spec.\n  \"/v1/projects/{project}/artifacts\":\n    get:\n      operationId: Registry_ListArtifacts\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The maximum number of artifacts to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000.\n          in: query\n          name: page_size\n          schema:\n            type: string\n        - description: A page token, received from a previous `ListArtifacts` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListArtifacts` must match the call that provided the page token.\n          in: query\n          name: page_token\n          schema:\n            type: string\n        - description: An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields except contents.\n          in: query\n          name: filter\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListArtifactsResponse\"\n          description: OK\n      summary: ListArtifacts returns matching artifacts.\n    post:\n      operationId: Registry_CreateArtifact\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The ID to use for the artifact, which will become the final component of the artifact's resource name. This value should be at most 80 characters, and valid characters are /[a-z][0-9]-./.\n          in: query\n          name: artifact_id\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Artifact\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Artifact\"\n          description: OK\n      summary: CreateArtifact creates a specified artifact.\n  \"/v1/projects/{project}/artifacts/{artifact}\":\n    delete:\n      operationId: Registry_DeleteArtifact\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The artifact id.\n          in: path\n          name: artifact\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content: {}\n          description: OK\n      summary: DeleteArtifact removes a specified artifact.\n    get:\n      operationId: Registry_GetArtifact\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The artifact id.\n          in: path\n          name: artifact\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Artifact\"\n          description: OK\n      summary: GetArtifact returns a specified artifact.\n    put:\n      operationId: Registry_ReplaceArtifact\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The artifact id.\n          in: path\n          name: artifact\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Artifact\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Artifact\"\n          description: OK\n      summary: ReplaceArtifact can be used to replace a specified artifact.\n  \"/v1/projects/{project}/artifacts/{artifact}/contents\":\n    get:\n      operationId: Registry_GetArtifactContents\n      parameters:\n        - description: The project id.\n          in: path\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: The artifact id.\n          in: path\n          name: artifact\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/octet-stream: {}\n          description: OK\n      summary: GetArtifactContents returns the contents of a specified artifact.\n  /v1/status:\n    get:\n      operationId: Registry_GetStatus\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n          description: OK\n      summary: GetStatus returns the status of the service. GetStatus is for verifying open source deployments only and is not included in hosted versions of the API.\ncomponents:\n  schemas:\n    Api:\n      description: An Api is a top-level description of an API. Apis are produced by producers and are commitments to provide services.\n      properties:\n        annotations:\n          description: Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.\n          type: object\n        availability:\n          description: 'A user-definable description of the availability of this service. Format: free-form, but we expect single words that describe availability, e.g. \"NONE\", \"TESTING\", \"PREVIEW\", \"GENERAL\", \"DEPRECATED\", \"SHUTDOWN\".'\n          type: string\n        create_time:\n          description: Creation timestamp.\n          format: RFC3339\n          readOnly: true\n          type: string\n        description:\n          description: A detailed description.\n          type: string\n        display_name:\n          description: Human-meaningful name.\n          type: string\n        labels:\n          description: Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"registry.googleapis.com/\" and cannot be changed.\n          type: object\n        name:\n          description: Resource name.\n          type: string\n        recommended_version:\n          description: \"The recommended version of the API. Format: apis/{api}/versions/{version}\"\n          type: string\n        update_time:\n          description: Last update timestamp.\n          format: RFC3339\n          readOnly: true\n          type: string\n    ApiSpec:\n      description: An ApiSpec describes a version of an API in a structured way. ApiSpecs provide formal descriptions that consumers can use to use a version. ApiSpec resources are intended to be fully-resolved descriptions of an ApiVersion. When specs consist of multiple files, these should be bundled together (e.g. in a zip archive) and stored as a unit. Multiple specs can exist to provide representations in different API description formats. Synchronization of these representations would be provided by tooling and background services.\n      properties:\n        annotations:\n          description: Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.\n          type: object\n        contents:\n          description: The contents of the spec. Provided by API callers when specs are created or updated. To access the contents of a spec, use GetApiSpecContents.\n          format: bytes\n          type: string\n        create_time:\n          description: Creation timestamp; when the spec resource was created.\n          format: RFC3339\n          readOnly: true\n          type: string\n        description:\n          description: A detailed description.\n          type: string\n        filename:\n          description: A possibly-hierarchical name used to refer to the spec from other specs.\n          type: string\n        hash:\n          description: A SHA-256 hash of the spec's contents\n          readOnly: true\n          type: string\n        labels:\n          description: Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"registry.googleapis.com/\" and cannot be changed.\n          type: object\n        mime_type:\n          description: A style (format) descriptor for this spec that is specified as a Media Type (https://en.wikipedia.org/wiki/Media_type). Possible values include \"application/vnd.apigee.proto\", \"application/vnd.apigee.openapi\", and \"application/vnd.apigee.graphql\", with possible suffixes representing compression types. These hypothetical names are defined in the vendor tree defined in RFC6838 (https://tools.ietf.org/html/rfc6838) and are not final.\n          type: string\n        name:\n          description: Resource name.\n          type: string\n        revision_create_time:\n          description: Revision creation timestamp; when the represented revision was created.\n          format: RFC3339\n          readOnly: true\n          type: string\n        revision_id:\n          description: The revision ID of the spec. A new revision is committed whenever the spec contents are changed. The format is an 8-character hexadecimal string.\n          readOnly: true\n          type: string\n        revision_tags:\n          description: The revision tags associated with this revision.\n          items:\n            type: string\n          readOnly: true\n          type: array\n        revision_update_time:\n          description: \"Last update timestamp: when the represented revision was last modified.\"\n          format: RFC3339\n          readOnly: true\n          type: string\n        size_bytes:\n          description: The size of the spec file in bytes.\n          format: int32\n          readOnly: true\n          type: integer\n        source_uri:\n          description: The original source URI of the spec (if one exists). This is an external location that can be used for reference purposes but which may not be authoritative since this external resource may change after the spec is retrieved.\n          type: string\n    ApiVersion:\n      description: An ApiVersion describes a particular version of an API. ApiVersions are what consumers actually use.\n      properties:\n        annotations:\n          description: Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.\n          type: object\n        create_time:\n          description: Creation timestamp.\n          format: RFC3339\n          readOnly: true\n          type: string\n        description:\n          description: A detailed description.\n          type: string\n        display_name:\n          description: Human-meaningful name.\n          type: string\n        labels:\n          description: Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"registry.googleapis.com/\" and cannot be changed.\n          type: object\n        name:\n          description: Resource name.\n          type: string\n        state:\n          description: 'A user-definable description of the lifecycle phase of this API version. Format: free-form, but we expect single words that describe API maturity, e.g. \"CONCEPT\", \"DESIGN\", \"DEVELOPMENT\", \"STAGING\", \"PRODUCTION\", \"DEPRECATED\", \"RETIRED\".'\n          type: string\n        update_time:\n          description: Last update timestamp.\n          format: RFC3339\n          readOnly: true\n          type: string\n    Artifact:\n      description: Artifacts of resources. Artifacts are unique (single-value) per resource and are used to store metadata that is too large or numerous to be stored directly on the resource. Since artifacts are stored separately from parent resources, they should generally be used for metadata that is needed infrequently, i.e. not for display in primary views of the resource but perhaps displayed or downloaded upon request. The ListArtifacts method allows artifacts to be quickly enumerated and checked for presence without downloading their (potentially-large) contents.\n      properties:\n        contents:\n          description: The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.\n          format: bytes\n          type: string\n        create_time:\n          description: Creation timestamp.\n          format: RFC3339\n          readOnly: true\n          type: string\n        hash:\n          description: A SHA-256 hash of the artifact's contents\n          readOnly: true\n          type: string\n        mime_type:\n          description: A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible \"schema\" parameter that specifies a schema for the stored information.\n          type: string\n        name:\n          description: Resource name.\n          type: string\n        size_bytes:\n          description: The size of the artifact in bytes.\n          format: int32\n          readOnly: true\n          type: integer\n        update_time:\n          description: Last update timestamp.\n          format: RFC3339\n          readOnly: true\n          type: string\n    ListApiSpecRevisionsResponse:\n      description: Response message for ListApiSpecRevisionsResponse.\n      properties:\n        api_specs:\n          description: The revisions of the spec.\n          items:\n            $ref: \"#/components/schemas/ApiSpec\"\n          type: array\n        next_page_token:\n          description: A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.\n          type: string\n    ListApiSpecsResponse:\n      description: Response message for ListApiSpecs.\n      properties:\n        api_specs:\n          description: The specs from the specified publisher.\n          items:\n            $ref: \"#/components/schemas/ApiSpec\"\n          type: array\n        next_page_token:\n          description: A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.\n          type: string\n    ListApiVersionsResponse:\n      description: Response message for ListApiVersions.\n      properties:\n        api_versions:\n          description: The versions from the specified publisher.\n          items:\n            $ref: \"#/components/schemas/ApiVersion\"\n          type: array\n        next_page_token:\n          description: A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.\n          type: string\n    ListApisResponse:\n      description: Response message for ListApis.\n      properties:\n        apis:\n          description: The APIs from the specified publisher.\n          items:\n            $ref: \"#/components/schemas/Api\"\n          type: array\n        next_page_token:\n          description: A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.\n          type: string\n    ListArtifactsResponse:\n      description: Response message for ListArtifacts.\n      properties:\n        artifacts:\n          description: The artifacts from the specified publisher.\n          items:\n            $ref: \"#/components/schemas/Artifact\"\n          type: array\n        next_page_token:\n          description: A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.\n          type: string\n    ListProjectsResponse:\n      description: Response message for ListProjects.\n      properties:\n        next_page_token:\n          description: A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.\n          type: string\n        projects:\n          description: The projects from the specified publisher.\n          items:\n            $ref: \"#/components/schemas/Project\"\n          type: array\n    Project:\n      description: \"A Project is a top-level description of a collection of APIs. Typically there would be one project for an entire organization. Note: in a Google Cloud deployment, this resource and associated methods will be omitted and its children will instead be associated with Google Cloud projects.\"\n      properties:\n        create_time:\n          description: Creation timestamp.\n          format: RFC3339\n          readOnly: true\n          type: string\n        description:\n          description: A detailed description.\n          type: string\n        display_name:\n          description: Human-meaningful name.\n          type: string\n        name:\n          description: Resource name.\n          type: string\n        update_time:\n          description: Last update timestamp.\n          format: RFC3339\n          readOnly: true\n          type: string\n    RollbackApiSpecRequest:\n      description: Request message for RollbackApiSpec.\n      properties:\n        name:\n          description: The spec being rolled back.\n          type: string\n        revision_id:\n          description: \"The revision ID to roll back to. It must be a revision of the same spec.   Example: c7cfa2a8\"\n          type: string\n    Status:\n      description: Response message for GetStatus. GetStatus is not included in hosted versions of the API.\n      properties:\n        message:\n          description: A string describing the status.\n          type: string\n    TagApiSpecRevisionRequest:\n      description: Request message for TagApiSpecRevision.\n      properties:\n        name:\n          description: The name of the spec to be tagged, including the revision ID.\n          type: string\n        tag:\n          description: The tag to apply. The tag should be at most 40 characters, and match `[a-z0-9-]+`.\n          type: string\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@47bf2b618e492e31bc62743e9f72c47cb8460229/-/blob/APIs/apigee.local/registry/0.0.2/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/47bf2b618e492e31bc62743e9f72c47cb8460229/APIs/apigee.local/registry/0.0.2/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}