{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/miguelgarcia/example-shop-py"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 27332,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: example-shop-py REST API\n  license:\n    name: MIT\nservers:\n  - url: 'http://localhost:5000/api'\npaths:\n  /statistics/products_by_category:\n    get:\n      summary: List how many products exist in each category\n      operationId: productsByCategory\n      tags:\n        - statistics\n      responses:\n        '200':\n          description: Array of results\n          content:\n            application/json:    \n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ProductsByCategory\"\n  /statistics/customers_by_country:\n    get:\n      summary: List how many customers exist in each country\n      operationId: customersByCountry\n      tags:\n        - statistics\n      responses:\n        '200':\n          description: Array of results\n          content:\n            application/json:    \n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/CustomersByCountry\"\n  /statistics/orders_by_status:\n    get:\n      summary: List how many orders are for each status\n      operationId: ordersByStatus\n      tags:\n        - statistics\n      responses:\n        '200':\n          description: Array of results\n          content:\n            application/json:    \n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/OrdersByStatus\"\n  /statistics/sells_by_product:\n    get:\n      summary: List how many units of each product were sell (includes canceled orders)\n      operationId: sellsByProduct\n      tags:\n        - statistics\n      responses:\n        '200':\n          description: Array of results\n          content:\n            application/json:    \n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/SellsByProduct\"\n  /statistics/units_delivered_by_product_by_country:\n    get:\n      summary: List how many units of each product were delivered to each country\n      operationId: unitsDeliveredByProductByCountry\n      tags:\n        - statistics\n      responses:\n        '200':\n          description: Array of results\n          content:\n            application/json:    \n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/UnitsDeliveredByProductByCountry\"\n  /categories:\n    get:\n      summary: List all categories\n      operationId: listCategories\n      tags:\n        - categories\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: First item offset (used for pagination)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: A paged array of categories\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:    \n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Category\"\n    post:\n      summary: Creates a new category\n      operationId: createCategory\n      tags:\n        - categories\n      requestBody:\n        description: Category to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CategoryCreate'\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: integer\n                description: new category id\n        '400':\n          description: Other error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /categories/{id}:\n    put:\n      summary: Updates one category\n      operationId: updateCategoryById\n      tags:\n        - categories\n      requestBody:\n        description: category new attributes\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CategoryUpdate'\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the category to update\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: Category updated\n        '404':\n          description: not found error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '400':\n          description: Other error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      summary: Deletes one category\n      operationId: deleteCategoryById\n      tags:\n        - categories\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the category to delete\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: Category deleted\n        '404':\n          description: not found error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '400':\n          description: Other error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    get:\n      summary: Returns one category\n      operationId: findCategoryById\n      tags:\n        - categories\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the category to retrieve\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: The requested category\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Category\"\n        '404':\n          description: not found error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /products:\n    get:\n      summary: List all products\n      operationId: listProducts\n      tags:\n        - products\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: First item offset (used for pagination)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: A paged array of products\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:    \n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Product\"\n    post:\n      summary: Creates a new product\n      operationId: createProduct\n      tags:\n        - products\n      requestBody:\n        description: Product to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProductCreate'\n      responses:\n        '201':\n          description: Success\n        '400':\n          description: Other error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /products/{id}:\n    put:\n      summary: Updates one product\n      operationId: updateProductById\n      tags:\n        - products\n      requestBody:\n        description: product new attributes\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProductUpdate'\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the product to update\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: Product updated\n        '404':\n          description: not found error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '400':\n          description: Other error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      summary: Deletes one product\n      operationId: deleteProductById\n      tags:\n        - products\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the product to delete\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: Product deleted\n        '404':\n          description: not found error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '400':\n          description: Other error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    get:\n      summary: Returns one product\n      operationId: findProductById\n      tags:\n        - products\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the product to retrieve\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: The requested product\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Product\"\n        '404':\n          description: not found error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /countries:\n    get:\n      summary: List all countries\n      operationId: listCountries\n      tags:\n        - countries\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: First item offset (used for pagination)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: A paged array of countries\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:    \n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Country\"\n    post:\n      summary: Creates a new country\n      operationId: createCountry\n      tags:\n        - countries\n      requestBody:\n        description: Country to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CountryCreate'\n      responses:\n        '201':\n          description: Success\n        '400':\n          description: Other error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /countries/{id}:\n    put:\n      summary: Updates one country\n      operationId: updateCountryById\n      tags:\n        - countries\n      requestBody:\n        description: country new attributes\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CountryUpdate'\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the country to update\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: Country updated\n        '404':\n          description: not found error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '400':\n          description: Other error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      summary: Deletes one country\n      operationId: deleteCountryById\n      tags:\n        - countries\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the country to delete\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: Country deleted\n        '404':\n          description: not found error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '400':\n          description: Other error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    get:\n      summary: Returns one country\n      operationId: findCountryById\n      tags:\n        - countries\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the country to retrieve\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: The requested country\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Country\"\n        '404':\n          description: not found error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /customers:\n    get:\n      summary: List all customers\n      operationId: listCustomers\n      tags:\n        - customers\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: First item offset (used for pagination)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: A paged array of customers\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:    \n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Customer\"\n    post:\n      summary: Creates a new customer\n      operationId: createCustomer\n      tags:\n        - customers\n      requestBody:\n        description: Customer to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomerCreate'\n      responses:\n        '201':\n          description: Success\n        '400':\n          description: Other error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /customers/{id}:\n    put:\n      summary: Updates one customer\n      operationId: updateCustomerById\n      tags:\n        - customers\n      requestBody:\n        description: customer new attributes\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomerUpdate'\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the customer to update\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: Customer updated\n        '404':\n          description: not found error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '400':\n          description: Other error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      summary: Deletes one customer\n      operationId: deleteCustomerById\n      tags:\n        - customers\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the customer to delete\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: Customer deleted\n        '404':\n          description: not found error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '400':\n          description: Other error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    get:\n      summary: Returns one customer\n      operationId: findCustomerById\n      tags:\n        - customers\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the customer to retrieve\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: The requested customer\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Customer\"\n        '404':\n          description: not found error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /orders:\n    get:\n      summary: List all orders\n      operationId: listOrders\n      tags:\n        - orders\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: First item offset (used for pagination)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: A paged array of orders\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:    \n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/OrderForList\"\n    post:\n      summary: Creates a new order\n      operationId: createOrder\n      tags:\n        - orders\n      requestBody:\n        description: Order to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrderCreate'\n      responses:\n        '201':\n          description: Success\n        '400':\n          description: Other error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /orders/{id}:\n    put:\n      summary: Updates one order\n      operationId: updateOrderById\n      tags:\n        - orders\n      requestBody:\n        description: order new attributes\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrderUpdate'\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the order to update\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: Order updated\n        '404':\n          description: not found error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '400':\n          description: Other error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      summary: Deletes one order\n      operationId: deleteOrderById\n      tags:\n        - orders\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the order to delete\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: Order deleted\n        '404':\n          description: not found error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '400':\n          description: Other error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    get:\n      summary: Returns one order\n      operationId: findOrderById\n      tags:\n        - orders\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the order to retrieve\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: The requested order\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        '404':\n          description: not found error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\ncomponents:\n  schemas:\n    Category:\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n    CategoryCreate:\n      required:\n        - name\n      properties:\n        name:\n          type: string\n    CategoryUpdate:\n      required:\n        - name\n      properties:\n        name:\n          type: string\n    Product:\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        description:\n          type: string\n        status:\n          type: string\n        category:\n          $ref: '#/components/schemas/Category'\n        tags:\n          type: array\n          items:\n            type: string\n        price:\n          type: number\n    ProductUpdate:\n      required:\n        - name\n        - description\n        - category\n        - tags\n        - price\n        - status\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        status:\n          type: string\n          description: ACTIVE, INACTIVE, COMING_SOON\n        category:\n          type: integer\n          description: category id\n        tags:\n          type: array\n          items:\n            type: string\n        price:\n          type: number\n    ProductCreate:\n      required:\n        - name\n        - description\n        - category\n        - tags\n        - price\n        - status\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        status:\n          type: string\n          description: ACTIVE, INACTIVE, COMING_SOON\n        category:\n          type: integer\n          description: category id\n        tags:\n          type: array\n          items:\n            type: string\n        price:\n          type: number\n    Country:\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n    CountryCreate:\n      required:\n        - name\n      properties:\n        name:\n          type: string\n    CountryUpdate:\n      required:\n        - name\n      properties:\n        name:\n          type: string\n    Customer:\n      properties:\n        id:\n          type: integer\n        email:\n          type: string\n          format: email\n        firstname:\n          type: string\n        lastname:\n          type: string\n        country:\n          $ref: '#/components/schemas/Country'\n    CustomerCreate:\n      required:\n        - email\n        - firstname\n        - lastname\n        - country\n      properties:\n        email:\n          type: string\n          format: email\n        firstname:\n          type: string\n        lastname:\n          type: string\n        country:\n          type: integer\n          description: country id\n    CustomerUpdate:\n      required:\n        - email\n        - firstname\n        - lastname\n        - country\n      properties:\n        email:\n          type: string\n          format: email\n        firstname:\n          type: string\n        lastname:\n          type: string\n        country:\n          type: integer\n          description: country id\n    OrderForList:\n      properties:\n        id:\n          type: integer\n        created_at:\n          type: string\n          format: datetime\n        total:\n          type: number\n        status:\n          type: string\n        customer:\n          $ref: '#/components/schemas/Customer'\n    Order:\n      properties:\n        id:\n          type: integer\n        created_at:\n          type: string\n          format: datetime\n        total:\n          type: number\n        status:\n          type: string\n        customer:\n          $ref: '#/components/schemas/Customer'\n        detail:\n          type: array\n          items:\n            $ref: '#/components/schemas/OrderDetail'\n    OrderDetail:\n      properties:\n        id:\n          type: integer\n        product:\n          $ref: '#/components/schemas/OrderDetailProduct'\n        quantity:\n          type: integer\n        unit_price:\n          type: number\n    OrderDetailProduct:\n      properties:\n        id:\n          type: integer\n        name:\n          type: integer\n    OrderCreate:\n      required:\n        - customer\n        - detail\n      properties:\n        customer:\n          type: integer\n          description: customer id\n        detail:\n          type: array\n          items:\n            $ref: '#/components/schemas/OrderDetailCreate'\n    OrderDetailCreate:\n      required:\n        - product\n        - quantity\n      properties:\n        product:\n          type: integer\n          description: product id\n        quantity:\n          type: integer\n    OrderUpdate:\n      required:\n        - status\n      properties:\n        status:\n          type: string\n    ProductsByCategory:\n      properties:\n        category:\n          $ref: '#/components/schemas/Category'\n        count:\n          type: integer\n    CustomersByCountry:\n      properties:\n        country:\n          $ref: '#/components/schemas/Country'\n        count:\n          type: integer\n    OrdersByStatus:\n      properties:\n        status:\n          type: string\n        count:\n          type: integer\n    SellsByProduct:\n      properties:\n        country:\n          $ref: '#/components/schemas/Product'\n        sells:\n          type: integer\n    UnitsDeliveredByProductByCountry:\n      properties:\n        product_name:\n          type: string\n        product_id:\n          type: integer\n        country_name:\n          type: string\n        country_id:\n          type: integer\n        units:\n          type: integer\n    Error:\n      properties:\n        status:\n          type: integer\n        message:\n          type: string\n",
			"canonicalURL": "/github.com/miguelgarcia/example-shop-py@0af3d652ebf2428f3b1504268376c935a78af01b/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/miguelgarcia/example-shop-py/blob/0af3d652ebf2428f3b1504268376c935a78af01b/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}