{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/structurizr/json"
		},
		"file": {
			"name": "structurizr.yaml",
			"size": 0,
			"path": "structurizr.yaml",
			"byteSize": 48989,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.12.0\n  title: Structurizr\n  description: The web API for Structurizr.\nservers:\n  - url: https://api.structurizr.com\npaths:\n  '/workspace/{id}':\n    get:\n      parameters:\n        - name: id\n          in: path\n          description: The workspace ID.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A Structurizr workspace.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Workspace\"\n    put:\n      parameters:\n        - name: id\n          in: path\n          description: The workspace ID.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The workspace to be stored.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Workspace'\n      responses:\n        '200':\n          description: Updates the workspace.\n  '/workspace/{id}/lock':\n    put:\n      parameters:\n        - name: id\n          in: path\n          description: The workspace ID.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: An API response indicating success or failure.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIResponse\"\n    delete:\n      parameters:\n        - name: id\n          in: path\n          description: The workspace ID.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: An API response indicating success or failure.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIResponse\"\n\ncomponents:\n  schemas:\n\n    Workspace:\n      type: object\n      description: Represents a Structurizr workspace, which is a wrapper for a software architecture model, views, and documentation.\n      properties:\n        id:\n          type: number\n          format: long\n          description: The workspace ID.\n        name:\n          type: string\n          description: The name of the workspace.\n        description:\n          type: string\n          description: A short description of the workspace.\n        version:\n          type: string\n          description: A version number for the workspace.\n        thumbnail:\n          type: string\n          description: The thumbnail associated with the workspace; a Base64 encoded PNG file as a data URI (data:image/png;base64).\n        lastModifiedDate:\n          type: string\n          description: The last modified date, in ISO 8601 format (e.g. \"2018-09-08T12:40:03Z\").\n        lastModifiedUser:\n          type: string\n          description: A string identifying the user who last modified the workspace (e.g. an e-mail address or username).\n        lastModifiedAgent:\n          type: string\n          description: A string identifying the agent that was last used to modify the workspace (e.g. \"structurizr-java/1.2.0\").\n        model:\n          $ref: '#/components/schemas/Model'\n        views:\n          $ref: '#/components/schemas/Views'\n        documentation:\n          $ref: '#/components/schemas/Documentation'\n        configuration:\n          $ref: '#/components/schemas/WorkspaceConfiguration'\n        properties:\n          type: object\n          description: A set of arbitrary name-value properties.\n          additionalProperties: true\n\n    Model:\n      type: object\n      description: A software architecture model.\n      properties:\n        enterprise:\n          type: object\n          description: The enterprise associated with this model.\n          properties:\n            name:\n              type: string\n              description: The name of the enterprise.\n        people:\n          type: array\n          items:\n            $ref: '#/components/schemas/Person'\n        softwareSystems:\n          type: array\n          items:\n            $ref: '#/components/schemas/SoftwareSystem'\n        deploymentNodes:\n          type: array\n          items:\n            $ref: '#/components/schemas/DeploymentNode'\n\n    Person:\n      type: object\n      description: A person who uses a software system.\n      properties:\n        id:\n          type: string\n          description: The ID of this person in the model.\n        name:\n          type: string\n          description: The name of this person.\n        description:\n          type: string\n          description: A short description of this person.\n        tags:\n          type: string\n          description: A comma separated list of tags associated with this person.\n        url:\n          type: string\n          description: The URL where more information about this element can be found.\n        location:\n          type: string\n          description: The location of this person.\n          enum:\n            - External\n            - Internal\n            - Unspecified\n        group:\n          type: string\n          description: The name of the group in which this person should be included in.\n        properties:\n          type: object\n          description: A set of arbitrary name-value properties.\n          additionalProperties: true\n        relationships:\n          type: array\n          items:\n            $ref: '#/components/schemas/Relationship'\n          description: The set of relationships from this person to other elements.\n\n    SoftwareSystem:\n      type: object\n      description: A software system.\n      properties:\n        id:\n          type: string\n          description: The ID of this software system in the model.\n        name:\n          type: string\n          description: The name of this software system.\n        description:\n          type: string\n          description: A short description of this software system.\n        location:\n          type: string\n          description: The location of this software system.\n          enum:\n            - External\n            - Internal\n            - Unspecified\n        tags:\n          type: string\n          description: A comma separated list of tags associated with this software system.\n        url:\n          type: string\n          description: The URL where more information about this element can be found.\n        containers:\n          type: array\n          description: The set of containers within this software system.\n          items:\n            $ref: '#/components/schemas/Container'\n        group:\n          type: string\n          description: The name of the group in which this software system should be included in.\n        properties:\n          type: object\n          description: A set of arbitrary name-value properties.\n          additionalProperties: true\n        relationships:\n          type: array\n          description: The set of relationships from this software system to other\n            elements.\n          items:\n            $ref: '#/components/schemas/Relationship'\n        documentation:\n          $ref: '#/components/schemas/Documentation'\n\n    Container:\n      type: object\n      description: A container (something that can execute code or host data).\n      properties:\n        id:\n          type: string\n          description: The ID of this container in the model.\n        name:\n          type: string\n          description: The name of this container.\n        description:\n          type: string\n          description: A short description of this container.\n        technology:\n          type: string\n          description: The technology associated with this container (e.g. Apache Tomcat).\n        tags:\n          type: string\n          description: A comma separated list of tags associated with this container.\n        url:\n          type: string\n          description: The URL where more information about this element can be found.\n        components:\n          type: array\n          description: The set of components within this container.\n          items:\n            $ref: '#/components/schemas/Component'\n        group:\n          type: string\n          description: The name of the group in which this container should be included in.\n        properties:\n          type: object\n          description: A set of arbitrary name-value properties.\n          additionalProperties: true\n        relationships:\n          type: array\n          description: The set of relationships from this container to other elements.\n          items:\n            $ref: '#/components/schemas/Relationship'\n\n    Component:\n      type: object\n      description: A component (a grouping of related functionality behind an interface that runs inside a container).\n      properties:\n        id:\n          type: string\n          description: The ID of this component in the model.\n        name:\n          type: string\n          description: The name of this component.\n        description:\n          type: string\n          description: A short description of this component.\n        technology:\n          type: string\n          description: The technology associated with this component (e.g. Spring Bean).\n        tags:\n          type: string\n          description: A comma separated list of tags associated with this component.\n        url:\n          type: string\n          description: The URL where more information about this element can be found.\n        code:\n          type: array\n          description: The set of code elements that make up this component.\n          items:\n            $ref: '#/components/schemas/CodeElement'\n        group:\n          type: string\n          description: The name of the group in which this component should be included in.\n        properties:\n          type: object\n          description: A set of arbitrary name-value properties.\n          additionalProperties: true\n        relationships:\n          type: array\n          description: The set of relationships from this component to other elements.\n          items:\n            $ref: '#/components/schemas/Relationship'\n\n    CodeElement:\n      type: object\n      description: Represents a code element (e.g. an interface, a class, a function, etc) that is part of the implementation of a component.\n      properties:\n        role:\n          type: string\n          description: The role of this code element.\n          enum:\n            - Primary\n            - Supporting\n        name:\n          type: string\n          description: The name of this code element.\n        type:\n          type: string\n          description: The type of the code element (e.g. a fully qualified Java interface or class name).\n        description:\n          type: string\n          description: A short description of this component.\n        url:\n          type: string\n          description: The URL where more information about this element can be found.\n        language:\n          type: string\n          description: The programming language of this code element (e.g. \"Java\", \"C#\", etc).\n        category:\n          type: string\n          description: The category of code element; e.g. class, interface, etc.\n        visibility:\n          type: string\n          description: The visibility of the code element; e.g. public, package, private.\n        size:\n          type: number\n          format: integer\n          description: The size of the code element; e.g. the number of lines.\n\n    DeploymentNode:\n      type: object\n      description: A deployment node.\n      properties:\n        id:\n          type: string\n          description: The ID of this deployment node in the model.\n        name:\n          type: string\n          description: The name of this deployment node.\n        description:\n          type: string\n          description: A short description of this deployment node.\n        technology:\n          type: string\n          description: The technology associated with this deployment node (e.g. Apache Tomcat).\n        environment:\n          type: string\n          description: The deployment environment in which this deployment node resides (e.g. \"Development\", \"Live\", etc).\n        instances:\n          type: number\n          format: integer\n          description: The number of instances.\n        tags:\n          type: string\n          description: A comma separated list of tags associated with this deployment node.\n        url:\n          type: string\n          description: The URL where more information about this element can be found.\n        children:\n          type: array\n          description: The set of child/nested deployment nodes.\n          items:\n            $ref: '#/components/schemas/DeploymentNode'\n        infrastructureNodes:\n          type: array\n          items:\n            $ref: '#/components/schemas/InfrastructureNode'\n        softwareSystemInstances:\n          type: array\n          description: The set of software systems instances running in this deployment node..\n          items:\n            $ref: '#/components/schemas/SoftwareSystemInstance'\n        containerInstances:\n          type: array\n          description: The set of container instances running in this deployment node..\n          items:\n            $ref: '#/components/schemas/ContainerInstance'\n        properties:\n          type: object\n          description: A set of arbitrary name-value properties.\n          additionalProperties: true\n        relationships:\n          type: array\n          description: The set of relationships from this deployment node to other elements.\n          items:\n            $ref: '#/components/schemas/Relationship'\n            \n    InfrastructureNode:\n      type: object\n      description: An infrastructure node.\n      properties:\n        id:\n          type: string\n          description: The ID of this infrastructure node in the model.\n        name:\n          type: string\n          description: The name of this infrastructure node.\n        description:\n          type: string\n          description: A short description of this infrastructure node.\n        technology:\n          type: string\n          description: The technology associated with this infrastructure node (e.g. \"Route 53\").\n        environment:\n          type: string\n          description: The deployment environment in which this infrastructure node resides (e.g. \"Development\", \"Live\", etc).\n        tags:\n          type: string\n          description: A comma separated list of tags associated with this infrastructure node.\n        url:\n          type: string\n          description: The URL where more information about this element can be found.\n        properties:\n          type: object\n          description: A set of arbitrary name-value properties.\n          additionalProperties: true\n        relationships:\n          type: array\n          description: The set of relationships from this infrastructure node to other elements.\n          items:\n            $ref: '#/components/schemas/Relationship'\n\n    SoftwareSystemInstance:\n      type: object\n      description: An instance of a software system, running on a deployment node.\n      properties:\n        id:\n          type: string\n          description: The ID of this software system instance in the model.\n        softwareSystemId:\n          type: string\n          description: The ID of the software system this is an instance of.\n        instanceId:\n          type: number\n          description: The number/index of this instance.\n        environment:\n          type: string\n          description: The deployment environment in which this software system instance resides (e.g. \"Development\", \"Live\", etc).\n        tags:\n          type: string\n          description: A comma separated list of tags associated with this software system instance.\n        properties:\n          type: object\n          description: A set of arbitrary name-value properties.\n          additionalProperties: true\n        relationships:\n          type: array\n          description: The set of relationships from this software system instance to other elements.\n          items:\n            $ref: '#/components/schemas/Relationship'\n        healthChecks:\n          type: array\n          description: The set of HTTP-based health checks for this software system instance.\n          items:\n            $ref: '#/components/schemas/HttpHealthCheck'\n\n    ContainerInstance:\n      type: object\n      description: An instance of a container, running on a deployment node.\n      properties:\n        id:\n          type: string\n          description: The ID of this container instance in the model.\n        containerId:\n          type: string\n          description: The ID of the container this is an instance of.\n        instanceId:\n          type: number\n          description: The number/index of this instance.\n        environment:\n          type: string\n          description: The deployment environment in which this container instance resides (e.g. \"Development\", \"Live\", etc).\n        tags:\n          type: string\n          description: A comma separated list of tags associated with this container instance.\n        properties:\n          type: object\n          description: A set of arbitrary name-value properties.\n          additionalProperties: true\n        relationships:\n          type: array\n          description: The set of relationships from this container instance to other elements.\n          items:\n            $ref: '#/components/schemas/Relationship'\n        healthChecks:\n          type: array\n          description: The set of HTTP-based health checks for this container instance.\n          items:\n            $ref: '#/components/schemas/HttpHealthCheck'\n\n    HttpHealthCheck:\n      type: object\n      description: Describes a HTTP based health check.\n      properties:\n        name:\n          type: string\n          description: The name of the health check.\n        url:\n          type: string\n          description: The health check URL/endpoint.\n        interval:\n          type: number\n          format: integer\n          description: The polling interval, in seconds.\n        timeout:\n          type: number\n          format: integer\n          description: The timeout after which a health check is deemed as failed, in milliseconds.\n        headers:\n          type: object\n          description: A set of name-value pairs corresponding to HTTP headers that should be sent with the request.\n          additionalProperties: true\n\n    Relationship:\n      type: object\n      description: A relationship between two elements.\n      properties:\n        id:\n          type: string\n          description: The ID of this relationship in the model.\n        description:\n          type: string\n          description: A short description of this relationship.\n        tags:\n          type: string\n          description: A comma separated list of tags associated with this relationship.\n        url:\n          type: string\n          description: The URL where more information about this relationship can be found.\n        sourceId:\n          type: string\n          description: The ID of the source element.\n        destinationId:\n          type: string\n          description: The ID of the destination element.\n        technology:\n          type: string\n          description: The technology associated with this relationship (e.g. HTTPS, JDBC, etc).\n        interactionStyle:\n          type: string\n          description: The interaction style (synchronous or asynchronous).\n          enum:\n            - Synchronous\n            - Asynchronous\n        linkedRelationshipId:\n          type: string\n          description: The ID of the container-container relationship upon which this container instance-container instance relationship is based.\n\n    Views:\n      type: object\n      description: The set of views onto a software architecture model.\n      properties:\n        systemLandscapeViews:\n          type: array\n          description: The set of system landscape views.\n          items:\n            $ref: '#/components/schemas/SystemLandscapeView'\n        systemContextViews:\n          type: array\n          description: The set of system context views.\n          items:\n            $ref: '#/components/schemas/SystemContextView'\n        containerViews:\n          type: array\n          description: The set of container views.\n          items:\n            $ref: '#/components/schemas/ContainerView'\n        componentViews:\n          type: array\n          description: The set of component views.\n          items:\n            $ref: '#/components/schemas/ComponentView'\n        dynamicViews:\n          type: array\n          description: The set of dynamic views.\n          items:\n            $ref: '#/components/schemas/DynamicView'\n        deploymentView:\n          type: array\n          description: The set of deployment views.\n          items:\n            $ref: '#/components/schemas/DeploymentView'\n        filteredViews:\n          type: array\n          description: The set of filtered views.\n          items:\n            $ref: '#/components/schemas/FilteredView'\n        configuration:\n          $ref: '#/components/schemas/Configuration'\n\n    SystemLandscapeView:\n      type: object\n      description: A system landscape view.\n      properties:\n        title:\n          type: string\n          description: The title of this view (optional).\n        description:\n          type: string\n          description: The description of this view.\n        key:\n          type: string\n          description: A unique identifier for this view.\n        paperSize:\n          type: string\n          description: The paper size that should be used to render this view.\n          enum:\n            - A6_Portrait\n            - A6_Landscape\n            - A5_Portrait\n            - A5_Landscape\n            - A4_Portrait\n            - A4_Landscape\n            - A3_Portrait\n            - A3_Landscape\n            - A2_Portrait\n            - A2_Landscape\n            - A1_Portrait\n            - A1_Landscape\n            - A0_Portrait\n            - A0_Landscape\n            - Letter_Portrait\n            - Letter_Landscape\n            - Legal_Portrait\n            - Legal_Landscape\n            - Slide_4_3\n            - Slide_16_9\n            - Slide_16_10\n        dimensions:\n          $ref: '#/components/schemas/Dimensions'\n        automaticLayout:\n          $ref: '#/components/schemas/AutomaticLayout'\n        enterpriseBoundaryVisible:\n          type: boolean\n          description: Specifies whether the enterprise boundary (to differentiate internal elements from external elements) should be visible on the resulting diagram.\n        elements:\n          type: array\n          description: The set of elements in this views.\n          items:\n            $ref: '#/components/schemas/ElementView'\n        relationships:\n          type: array\n          description: The set of relationships in this views.\n          items:\n            $ref: '#/components/schemas/RelationshipView'\n        animations:\n          type: array\n          description: The set of animation steps (optional).\n          items:\n            $ref: '#/components/schemas/AnimationStep'\n\n    SystemContextView:\n      type: object\n      description: A system context view.\n      properties:\n        title:\n          type: string\n          description: The title of this view (optional).\n        description:\n          type: string\n          description: The description of this view.\n        key:\n          type: string\n          description: A unique identifier for this view.\n        softwareSystemId:\n          type: string\n          description: The ID of the software system this view is associated with.\n        paperSize:\n          type: string\n          description: The paper size that should be used to render this view.\n          enum:\n            - A6_Portrait\n            - A6_Landscape\n            - A5_Portrait\n            - A5_Landscape\n            - A4_Portrait\n            - A4_Landscape\n            - A3_Portrait\n            - A3_Landscape\n            - A2_Portrait\n            - A2_Landscape\n            - A1_Portrait\n            - A1_Landscape\n            - A0_Portrait\n            - A0_Landscape\n            - Letter_Portrait\n            - Letter_Landscape\n            - Legal_Portrait\n            - Legal_Landscape\n            - Slide_4_3\n            - Slide_16_9\n            - Slide_16_10\n        dimensions:\n          $ref: '#/components/schemas/Dimensions'\n        automaticLayout:\n          $ref: '#/components/schemas/AutomaticLayout'\n        enterpriseBoundaryVisible:\n          type: boolean\n          description: Specifies whether the enterprise boundary (to differentiate internal elements from external elements\") should be visible on the resulting diagram.\n        elements:\n          type: array\n          description: The set of elements in this view.\n          items:\n            $ref: '#/components/schemas/ElementView'\n        relationships:\n          type: array\n          description: The set of relationships in this view.\n          items:\n            $ref: '#/components/schemas/RelationshipView'\n        animations:\n          type: array\n          description: The set of animation steps (optional).\n          items:\n            $ref: '#/components/schemas/AnimationStep'\n\n    ContainerView:\n      type: object\n      description: A container view.\n      properties:\n        title:\n          type: string\n          description: The title of this view (optional).\n        description:\n          type: string\n          description: The description of this view.\n        key:\n          type: string\n          description: A unique identifier for this view.\n        softwareSystemId:\n          type: string\n          description: The ID of the software system this view is associated with.\n        paperSize:\n          type: string\n          description: The paper size that should be used to render this view.\n          enum:\n            - A6_Portrait\n            - A6_Landscape\n            - A5_Portrait\n            - A5_Landscape\n            - A4_Portrait\n            - A4_Landscape\n            - A3_Portrait\n            - A3_Landscape\n            - A2_Portrait\n            - A2_Landscape\n            - A1_Portrait\n            - A1_Landscape\n            - A0_Portrait\n            - A0_Landscape\n            - Letter_Portrait\n            - Letter_Landscape\n            - Legal_Portrait\n            - Legal_Landscape\n            - Slide_4_3\n            - Slide_16_9\n            - Slide_16_10\n        dimensions:\n          $ref: '#/components/schemas/Dimensions'\n        automaticLayout:\n          $ref: '#/components/schemas/AutomaticLayout'\n        elements:\n          type: array\n          description: The set of elements in this views.\n          items:\n            $ref: '#/components/schemas/ElementView'\n        relationships:\n          type: array\n          description: The set of relationships in this views.\n          items:\n            $ref: '#/components/schemas/RelationshipView'\n        animations:\n          type: array\n          description: The set of animation steps (optional).\n          items:\n            $ref: '#/components/schemas/AnimationStep'\n        externalSoftwareSystemBoundariesVisible:\n          type: boolean\n          description: Specifies whether software system boundaries should be visible for \"external\" containers (those outside the software system in scope).\n\n    ComponentView:\n      type: object\n      description: A component view.\n      properties:\n        title:\n          type: string\n          description: The title of this view (optional).\n        description:\n          type: string\n          description: The description of this view.\n        key:\n          type: string\n          description: A unique identifier for this view.\n        containerId:\n          type: string\n          description: The ID of the container this view is associated with.\n        paperSize:\n          type: string\n          description: The paper size that should be used to render this view.\n          enum:\n            - A6_Portrait\n            - A6_Landscape\n            - A5_Portrait\n            - A5_Landscape\n            - A4_Portrait\n            - A4_Landscape\n            - A3_Portrait\n            - A3_Landscape\n            - A2_Portrait\n            - A2_Landscape\n            - A1_Portrait\n            - A1_Landscape\n            - A0_Portrait\n            - A0_Landscape\n            - Letter_Portrait\n            - Letter_Landscape\n            - Legal_Portrait\n            - Legal_Landscape\n            - Slide_4_3\n            - Slide_16_9\n            - Slide_16_10\n        dimensions:\n          $ref: '#/components/schemas/Dimensions'\n        automaticLayout:\n          $ref: '#/components/schemas/AutomaticLayout'\n        elements:\n          type: array\n          description: The set of elements in this views.\n          items:\n            $ref: '#/components/schemas/ElementView'\n        relationships:\n          type: array\n          description: The set of relationships in this views.\n          items:\n            $ref: '#/components/schemas/RelationshipView'\n        animations:\n          type: array\n          description: The set of animation steps (optional).\n          items:\n            $ref: '#/components/schemas/AnimationStep'\n        externalContainerBoundariesVisible:\n          type: boolean\n          description: Specifies whether container boundaries should be visible for \"external\" components (those outside the container in scope).\n\n    DynamicView:\n      type: object\n      description: A dynamic view.\n      properties:\n        title:\n          type: string\n          description: The title of this view (optional).\n        description:\n          type: string\n          description: The description of this view.\n        key:\n          type: string\n          description: An identifier for this view.\n        elementId:\n          type: string\n          description: The ID of the element this view is associated with (optional).\n        paperSize:\n          type: string\n          description: The paper size that should be used to render this view.\n          enum:\n            - A6_Portrait\n            - A6_Landscape\n            - A5_Portrait\n            - A5_Landscape\n            - A4_Portrait\n            - A4_Landscape\n            - A3_Portrait\n            - A3_Landscape\n            - A2_Portrait\n            - A2_Landscape\n            - A1_Portrait\n            - A1_Landscape\n            - A0_Portrait\n            - A0_Landscape\n            - Letter_Portrait\n            - Letter_Landscape\n            - Legal_Portrait\n            - Legal_Landscape\n            - Slide_4_3\n            - Slide_16_9\n            - Slide_16_10\n        dimensions:\n          $ref: '#/components/schemas/Dimensions'\n        automaticLayout:\n          $ref: '#/components/schemas/AutomaticLayout'\n        elements:\n          type: array\n          description: The set of elements in this views.\n          items:\n            $ref: '#/components/schemas/ElementView'\n        relationships:\n          type: array\n          description: The set of relationships in this views.\n          items:\n            $ref: '#/components/schemas/RelationshipView'\n        externalBoundariesVisible:\n          type: boolean\n          description: Specifies software system/container boundaries should be visible for \"external\" containers/components (those outside the element in scope)\n\n    DeploymentView:\n      type: object\n      description: A deployment view.\n      properties:\n        title:\n          type: string\n          description: The title of this view (optional).\n        description:\n          type: string\n          description: The description of this view.\n        key:\n          type: string\n          description: A unique identifier for this view.\n        softwareSystemId:\n          type: string\n          description: The ID of the software system this view is associated with (optional).\n        environment:\n          type: string\n          description: The name of the environment that this deployment view is for (e.g. \"Development\", \"Live\", etc).\n        paperSize:\n          type: string\n          description: The paper size that should be used to render this view.\n          enum:\n            - A6_Portrait\n            - A6_Landscape\n            - A5_Portrait\n            - A5_Landscape\n            - A4_Portrait\n            - A4_Landscape\n            - A3_Portrait\n            - A3_Landscape\n            - A2_Portrait\n            - A2_Landscape\n            - A1_Portrait\n            - A1_Landscape\n            - A0_Portrait\n            - A0_Landscape\n            - Letter_Portrait\n            - Letter_Landscape\n            - Legal_Portrait\n            - Legal_Landscape\n            - Slide_4_3\n            - Slide_16_9\n            - Slide_16_10\n        dimensions:\n          $ref: '#/components/schemas/Dimensions'\n        automaticLayout:\n          $ref: '#/components/schemas/AutomaticLayout'\n        elements:\n          type: array\n          description: The set of elements in this views.\n          items:\n            $ref: '#/components/schemas/ElementView'\n        relationships:\n          type: array\n          description: The set of relationships in this views.\n          items:\n            $ref: '#/components/schemas/RelationshipView'\n        animations:\n          type: array\n          description: The set of animation steps (optional).\n          items:\n            $ref: '#/components/schemas/AnimationStep'\n\n    FilteredView:\n      type: object\n      description: Represents a view on top of a view, which can be used to include or exclude specific elements.\n      properties:\n        title:\n          type: string\n          description: The title of this view (optional).\n        description:\n          type: string\n          description: The description of this view.\n        key:\n          type: string\n          description: A unique identifier for this view.\n        baseViewKey:\n          type: string\n          description: The key of the view on which this filtered view is based.\n        mode:\n          type: string\n          description: Whether elements/relationships are being included or excluded based upon the set of tags.\n          enum:\n            - Include\n            - Exclude\n        tags:\n          type: array\n          description: The set of tags to include/exclude elements/relationships when rendering this filtered view.\n          items:\n            type: string\n\n    ElementView:\n      type: object\n      description: An instance of a model element (Person, Software System, Container or Component) in a View.\n      properties:\n        id:\n          type: string\n          description: The ID of the element.\n        x:\n          type: number\n          format: integer\n          description: The horizontal position of the element when rendered.\n        y:\n          type: number\n          format: integer\n          description: The vertical position of the element when rendered.\n\n    RelationshipView:\n      type: object\n      description: An instance of a model relationship in a View.\n      properties:\n        id:\n          type: string\n          description: The ID of the relationship.\n        description:\n          type: string\n          description: The description of this relationship (used in dynamic views only).\n        response:\n          type: boolean\n          description: Signifies whether this relationship represents a return/response message (used in dynamic views only).\n        order:\n          type: string\n          description: Gets the order of this relationship (used in dynamic views only; e.g. 1.0, 1.1, 2.0, etc).\n        vertices:\n          type: array\n          description: The set of vertices used to render the relationship.\n          items:\n            $ref: '#/components/schemas/Vertex'\n        routing:\n          type: string\n          description: The routing algorithm used when rendering this individual relationship.\n          enum:\n            - Direct\n            - Curved\n            - Orthogonal\n        position:\n          type: number\n          format: integer\n          description: The position of the annotation along the line; 0 (start) to 100 (end).\n\n    Vertex:\n      type: object\n      description: The X, Y coordinate of a bend in a line.\n      properties:\n        x:\n          type: number\n          format: integer\n          description: The horizontal position of the vertex when rendered.\n        y:\n          type: number\n          format: integer\n          description: The vertical position of the vertex when rendered.\n\n    AnimationStep:\n      type: object\n      description: An animation step\n      properties:\n        order:\n          type: number\n          format: integer\n          description: The order of this animation step.\n        elements:\n          type: array\n          description: The set of element IDs that should be included in this animation step.\n          items:\n            type: string\n        relationships:\n          type: array\n          description: The set of relationship IDs that should be included in this animation step.\n          items:\n            type: string\n\n    Dimensions:\n      type: object\n      description: Represents a width and height pair.\n      properties:\n        width:\n          type: number\n          format: integer\n          description: The width (pixels).\n        height:\n          type: number\n          format: integer\n          description: The height (pixels).\n\n    AutomaticLayout:\n      type: object\n      description: Represents the auto-layout configuration for a given view.\n      properties:\n        rankDirection:\n          type: string\n          description: The algorithm rank direction.\n          enum:\n            - TopBottom\n            - BottomTop\n            - LeftRight\n            - RightLeft\n        rankSeparation:\n          type: number\n          format: integer\n          description: The separation between ranks (pixels).\n        nodeSeparation:\n          type: number\n          format: integer\n          description: The separation between nodes in the same rank (pixels).\n        edgeSeparation:\n          type: number\n          format: integer\n          description: The separation between edges (pixels).\n        vertices:\n          type: boolean\n          description: Whether vertices should be created during automatic layout.\n\n    Configuration:\n      type: object\n      description: The configuration associated with a set of views.\n      properties:\n        styles:\n          type: object\n          description: The styles associated with this set of views.\n          properties:\n            elements:\n              type: array\n              description: The set of element styles.\n              items:\n                $ref: '#/components/schemas/ElementStyle'\n            relationships:\n              type: array\n              description: The set of relationship styles.\n              items:\n                $ref: '#/components/schemas/RelationshipStyle'\n        lastSavedView:\n          type: string\n          description: The key of the view that was saved most recently.\n        defaultView:\n          type: string\n          description: The key of the view that should be shown by default.\n        themes:\n          type: array\n          description: The URL(s) of the theme(s) to be used when rendering diagrams.\n          items:\n            type: string\n        branding:\n          $ref: '#/components/schemas/Branding'\n        terminology:\n          $ref: '#/components/schemas/Terminology'\n        metadataSymbols:\n          type: string\n          description: The type of symbols to use when rendering metadata.\n          enum:\n            - SquareBrackets,\n            - RoundBrackets,\n            - CurlyBrackets,\n            - AngleBrackets,\n            - DoubleAngleBrackets,\n            - None\n\n    Branding:\n      type: object\n      description: A wrapper for the font and logo for diagram/documentation branding purposes.\n      properties:\n        logo:\n          type: string\n          format: url\n          description: A Base64 data URI representation of a PNG/JPG/GIF file.\n        font:\n          type: object\n          description: Represents a font, including a name and an optional URL for web fonts.\n          properties:\n            name:\n              type: string\n              description: The font name (e.g. \"Times New Roman\", \"Open Sans\", etc).\n            url:\n              type: string\n              format: url\n              description: For web fonts, the URL where the font can be found.\n\n    ElementStyle:\n      type: object\n      description: A definition of an element style.\n      properties:\n        tag:\n          type: string\n          description: The tag to which this element style applies.\n        width:\n          type: number\n          format: integer\n          description: The width of the element, in pixels.\n        height:\n          type: number\n          format: integer\n          description: The height of the element, in pixels.\n        background:\n          type: string\n          description: The background colour of the element, as a HTML RGB hex string (e.g. '#ffffff').\n        stroke:\n          type: string\n          description: The stroke colour of the element, as a HTML RGB hex string (e.g. '#000000').\n        color:\n          type: string\n          description: The foreground (text) colour of the element, as a HTML RGB hex string (e.g. '#ffffff').\n        fontSize:\n          type: number\n          format: integer\n          description: The standard font size used to render text, in pixels.\n        shape:\n          type: string\n          description: The shape used to render the element.\n          enum:\n            - Box\n            - RoundedBox\n            - Component\n            - Circle\n            - Ellipse\n            - Hexagon\n            - Diamond\n            - Folder\n            - Cylinder\n            - Pipe\n            - WebBrowser\n            - MobileDevicePortrait\n            - MobileDeviceLandscape\n            - Person\n            - Robot\n        icon:\n          type: string\n          description: A Base64 data URI representation of a PNG/JPG/GIF file.\n        border:\n          type: string\n          description: The type of border used to render the element.\n          enum:\n            - Solid\n            - Dashed\n            - Dotted\n        opacity:\n          type: number\n          format: integer\n          description: The opacity used when rendering the element; 0-100.\n        metadata:\n          type: boolean\n          description: Whether the element metadata should be shown or not.\n        description:\n          type: boolean\n          description: Whether the element description should be shown or not.\n\n    RelationshipStyle:\n      type: object\n      description: A definition of a relationship style.\n      properties:\n        tag:\n          type: string\n          description: The tag to which this relationship style applies.\n        thickness:\n          type: number\n          format: integer\n          description: The thickness of the line, in pixels.\n        color:\n          type: string\n          description: The colour of the line, as a HTML RGB hex string (e.g. '#ffffff').\n        fontSize:\n          type: number\n          format: integer\n          description: The standard font size used to render the relationship annotation, in pixels.\n        width:\n          type: number\n          format: integer\n          description: The width of the relationship annotation, in pixels.\n        dashed:\n          type: boolean\n          description: A flag to indicate whether the line is rendered as dashed or not.\n        routing:\n          type: string\n          description: The routing algorithm used when rendering lines.\n          enum:\n            - Direct\n            - Curved\n            - Orthogonal\n        position:\n          type: number\n          format: integer\n          description: The position of the annotation along the line; 0 (start) to 100 (end).\n        opacity:\n          type: number\n          format: integer\n          description: The opacity used when rendering the line; 0-100.\n\n    Documentation:\n      type: object\n      description: A wrapper for documentation.\n      properties:\n        sections:\n          type: array\n          items:\n            $ref: '#/components/schemas/DocumentationSection'\n        decisions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Decision'\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/Image'\n\n    DocumentationSection:\n      type: object\n      description: A documentation section.\n      properties:\n        title:\n          type: string\n          description: The title (name/section heading) of the section.\n        content:\n          type: string\n          description: The Markdown or AsciiDoc content of the section.\n        format:\n          type: string\n          description: The content format type.\n          enum:\n            - Markdown\n            - AsciiDoc\n        order:\n          type: number\n          format: integer\n          description: The order (index) of the section in the document.\n        elementId:\n          type: string\n          description: The ID of the element (in the model) that this section applies to (optional).\n\n    Decision:\n      type: object\n      description: A decision record (e.g. architecture decision record).\n      properties:\n        id:\n          type: string\n          description: The ID of the decision.\n        date:\n          type: string\n          description: The date that the decision was made (ISO 8601 format).\n        status:\n          type: string\n          description: The status of the decision.\n          enum:\n            - Proposed\n            - Accepted\n            - Superseded\n            - Deprecated\n            - Rejected\n        title:\n          type: string\n          description: The title of the decision.\n        content:\n          type: string\n          description: The Markdown or AsciiDoc content of the section.\n        format:\n          type: string\n          description: The content format type.\n          enum:\n            - Markdown\n            - AsciiDoc\n        elementId:\n          type: string\n          description: The ID of the element (in the model) that this decision applies to (optional).\n\n    Image:\n      type: object\n      description: Represents a base64 encoded image (png/jpg/gif).\n      properties:\n        name:\n          type: string\n          description: The name of the image.\n        content:\n          type: string\n          description: The (base64 encoded) content of the image.\n        type:\n          type: string\n          description: The image MIME type (e.g. \"image/png\").\n\n    Terminology:\n      type: object\n      description: Provides a way for the terminology on diagrams, etc to be modified (e.g. language translations).\n      properties:\n        enterprise:\n          type: string\n          description: The terminology used when rendering the enterprise boundary.\n        person:\n          type: string\n          description: The terminology used when rendering people.\n        softwareSystem:\n          type: string\n          description: The terminology used when rendering software systems.\n        container:\n          type: string\n          description: The terminology used when rendering containers.\n        component:\n          type: string\n          description: The terminology used when rendering components.\n        code:\n          type: string\n          description: The terminology used when rendering code elements.\n        deploymentNode:\n          type: string\n          description: The terminology used when rendering deployment nodes.\n        relationship:\n          type: string\n          description: The terminology used when rendering relationships.\n\n    WorkspaceConfiguration:\n      type: object\n      description: The workspace configuration.\n      properties:\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n\n    User:\n      type: object\n      description: Represents a user who should have access to a workspace.\n      properties:\n        username:\n          type: string\n          description: The username of the user (e.g. e-mail address).\n        role:\n          type: string\n          description: The user's role.\n          enum:\n            - ReadWrite\n            - ReadOnly\n\n    APIResponse:\n      type: object\n      description: An API response.\n      properties:\n        success:\n          type: boolean\n          description: 'true if the API call was successful, false otherwise.'\n        message:\n          type: string\n          description: 'A human readable response message.'\n        revision:\n          type: integer\n          description: 'The internal revision number.'\n",
			"canonicalURL": "/github.com/structurizr/json@c90dace5a72ad959123aea69ca7ed9d4bc3c9a67/-/blob/structurizr.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/structurizr/json/blob/c90dace5a72ad959123aea69ca7ed9d4bc3c9a67/structurizr.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}