{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Sceptive/forgiva-integrator"
		},
		"file": {
			"name": "integratorapi.v1.yaml",
			"size": 0,
			"path": "etc/api/reference/integratorapi.v1.yaml",
			"byteSize": 51468,
			"content": "openapi: 3.0.0\ninfo:\n  title: IntegratorAPI\n  version: '1.0'\n  description: |\n    Forgiva Integrator API containing whole operations between Forgiva SuperClient and Integrator server traffic. It \n    can be used by any 3rd party clients.\n  contact:\n    name: Harun Esur\n    email: root@sceptive.com\n    url: 'https://www.forgiva.com'\nservers:\n  - url: 'https://localhost:8443/api/'\npaths:\n  /new_session:\n    post:\n      summary: Initialization or validation of a session\n      operationId: post-new-session\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                title: post-new-session-response\n                properties:\n                  logonState:\n                    $ref: '#/components/schemas/logonState'\n                  hshAlg:\n                    type: string\n                    description: |\n                      Hashing algorithm chosen by server required to get used by client to provide hashed data to \n                      the server.\n                  hshSalt:\n                    type: string\n                    description: |\n                      Unique salt value tied with session which will be required to get used with hash algorithm \n                      on the client side.\n                  sessionPk:\n                    type: string\n                    description: Session public key to encrypt critical data.\n                  newSessionId:\n                    type: string\n                    description: Returns null if sessionId is valid or new sessionId for renewal or initialization.\n                  ldapEnabled:\n                    type: boolean\n                    description: Returns whether LDAP login is enabled or not\n              examples:\n                session-response-example:\n                  value:\n                    authenticated: false\n                    hshAlg: sha3\n                    hshSalt: 85a37bcfe6c0cc6e81f073002d9aa59062c3fe5e463e07463672e\n                    sessionPk: 85a37bcfe6c0cc6e81f073002d9aa59062c3fe5e463e07463672e\n          headers: {}\n      description: |\n        This service initializes session or validates it (by checking header object) and provides server \n        configuration values to the client.\n      requestBody:\n        description: |\n          If client has any sessionId value it should provide it to validate whether it is still usable or expired.\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-new-session-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n                clientPk:\n                  type: string\n                  description: Client public key for server to encrypt critical data to be sent to client.\n      security: []\n      parameters: []\n    parameters: []\n  /login:\n    post:\n      summary: Login\n      operationId: post-login\n      responses:\n        '304':\n          description: Session is already authenticated.\n        '200':\n          description: OK\n          headers: {}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  logonState:\n                    $ref: '#/components/schemas/logonState'\n                  twoFARequired:\n                    type: boolean\n                    description: 2FA service is required or not.\n                title: post-login-response\n        '440':\n          description: Session Expired\n      description: Actual logging-in web service holds single point authentication mechanism.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-login-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n                username:\n                  type: string\n                  description: User name encrypted with session public key\n                password:\n                  type: string\n                  description: Hash of password encrypted with session public key.\n                loginOverLdap:\n                  type: boolean\n                  description: Requests login over LDAP servers\n        description: ''\n      security: []\n  /logout:\n    post:\n      summary: Logout\n      operationId: post-logout\n      responses:\n        '200':\n          description: OK\n          headers: {}\n      description: Logs out (and invalidates) session with sessionId\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-logout-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n        description: ''\n      security: []\n  /login2fa:\n    post:\n      summary: Login with two-factor-authentication\n      operationId: post-login2fa\n      responses:\n        '200':\n          description: OK\n          headers: {}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  authenticated:\n                    type: boolean\n                    description: Points out whether authentication is succedded or not.\n                title: post-login2fa-response\n        '440':\n          description: Session Expired\n      description: |\n        Two-factor-authentication (2FA) code delivery web service. Not required by default if did not configured \n        on server side.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-login2fa-request\n              properties:\n                twoFACode:\n                  type: string\n                  description: 2FA code hashed with specified hash algorithm in /session service.\n                header:\n                  $ref: '#/components/schemas/header'\n      security: []\n  /user/metadata/groups:\n    post:\n      summary: Retrieving metadata groups\n      tags:\n        - User Operations\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  groups:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/metadataGroup'\n                title: post-user-metadata-groups-response\n              examples: {}\n      operationId: post-user-metadata-groups\n      security: []\n      description: Returns metadata groups for the user.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-user-metadata-groups-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n    parameters: []\n  /user/metadata/by_group:\n    post:\n      summary: Retrieving metadata\n      tags:\n        - User Operations\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  metadatas:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/metadata'\n                  totalRecords:\n                    type: integer\n                    description: Total number of records of metadata within the group.\n                  startIdx:\n                    type: integer\n                    description: Start index of the records returned.\n                title: post-user-metadata-bygroup-response\n              examples:\n                example-1: {}\n      operationId: post-user-metadata-bygroup\n      security: []\n      description: Returns metadatas for the user.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-user-metadata-bygroup-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n                groupId:\n                  type: string\n                  description: Group id contains metadatas.\n                startIdx:\n                  type: integer\n                  description: Start index of the records. (Default is 0)\n                count:\n                  type: integer\n                  description: Amount of records to return starting from startIdx. (Default is 100)\n  /user/metadata/remove:\n    post:\n      summary: Removing metadata\n      tags:\n        - User Operations\n      operationId: post-user-metadata-remove\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n      description: Removes metadata specified with metadata id.\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title:  post-user-metadata-remove-request\n              properties:\n                metadataId:\n                  type: string\n                header:\n                  $ref: '#/components/schemas/header'\n              required:\n                - metadataId\n        description: Specifies metadata id to get removed.\n    parameters: []\n  /user/metadata/host:\n    post:\n      summary: Retrieving metadata host\n      tags:\n        - User Operations\n      operationId: post-user-metadata-host\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  hosts:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        host:\n                          type: string\n                title: post-user-metadata-host-response\n      description: Returns hosts (if specified) filtered\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-user-metadata-host-request\n              properties:\n                filter:\n                  type: string\n                header:\n                  $ref: '#/components/schemas/header'\n        description: Specifies host filter if required.\n    parameters: []\n  /user/metadata/search:\n    post:\n      summary: Searching metadata\n      tags:\n        - User Operations\n      operationId: post-user-metadata-search\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  metadata:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/metadata'\n                title: post-user-metadata-search-response\n      description: \"Returns metadatas searched with 'criteria'.\"\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-user-metadata-search-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n                criteria:\n                  type: string\n                  description: Criteria to search within metadatas.\n              required:\n                - criteria\n        description: Specifies search criteria.\n    parameters: []\n  /user/metadata/add:\n    post:\n      summary: Adding metadata\n      tags:\n        - User Operations\n      operationId: post-user-metadata-add\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n      description: Adds metadata to the specified group.\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-user-metadata-add-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n                metadata:\n                  $ref: '#/components/schemas/metadata'\n                passwordLength:\n                  type: integer\n                  description: Password length of the generated password.\n                optUppercase:\n                  type: boolean\n                  description: Password should have upper case letters.\n                optLowercase:\n                  type: boolean\n                  description: Password should have lower case letters.\n                optNumbers:\n                  type: boolean\n                  description: Password should have numbers.\n                optSymbols:\n                  type: boolean\n                  description: Password should have symbols.\n              required:\n                - groupId\n                - metadata\n                - passwordLength\n                - optUppercase\n                - optLowercase\n                - optNumbers\n                - optSymbols\n        description: Specifies metadata to get added to the specified group with id.\n    parameters: []\n  /user/settings/get:\n    post:\n      summary: Getting user's choices\n      tags:\n        - User Operations\n      operationId: post-user-settings-get\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  value:\n                    type: string\n                    description: Value of the setting queried by the key in request\n                required:\n                  - value\n                title: post-user-settings-get-response\n      description: Getting user's custom settings set by user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-user-settings-get-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n                key:\n                  type: string\n                  description: Setting key to query\n        description: Specifing key to query for setting\n    parameters: []\n  /user/settings/set:\n    post:\n      summary: Setting user's choices\n      tags:\n        - User Operations\n      operationId: post-user-settings-set\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n      description: Setting user's custom setting value\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-user-settings-set-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n                key:\n                  type: string\n                  description: Setting key\n                value:\n                  type: string\n                  description: Setting value to get saved\n        description: Specifing key and value to set for user's settings\n    parameters: []\n  /user/password/change:\n    parameters: []\n    post:\n      summary: Changing user's password\n      tags:\n        - User Operations\n      operationId: post-user-password-change\n      description: Changes user's password with specified ones and invalidates all active sessions.\n      requestBody:\n        description: ''\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-user-password-change-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n                oldPassword:\n                  type: string\n                  description: User's old password encrypted with session key\n                newPassword:\n                  type: string\n                  description: User's new password encrypted with session key\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n  /user/generate:\n    post:\n      summary: Generating password\n      tags:\n        - User Operations\n      operationId: post-user-generate\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    $ref: '#/components/schemas/operationResult'\n                  generatedPassword:\n                    type: string\n                    description: Generated password in hex representation.\n                required:\n                  - result\n                  - generatedPassword\n                title: post-user-generate-response\n      description: 'Generates password specified with metadata, master password and visual confirmation data.'\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-user-generate-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n                metadataId:\n                  type: string\n                masterKey:\n                  type: string\n                  description: Hex of encrypted master key with session public key.\n                visualConfirmation:\n                  type: string\n                  description: Hex of the encrypted visual confirmation data with public session key.\n                renewalDate:\n                  type: string\n              required:\n                - metadataId\n                - masterKey\n                - visualConfirmation\n        description: Specifies required datas to generate passsword.\n    parameters: []\n  /user/metadata/group/remove:\n    post:\n      summary: Removing metadata group\n      tags:\n        - User Operations\n      operationId: post-user-metadata-group-remove\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n      description: Removes metadata group specified with group id.\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-user-metadata-group-remove-request\n              properties:\n                metadataGroupId:\n                  type: string\n                header:\n                  $ref: '#/components/schemas/header'\n              required:\n                - metadataGroupId\n        description: Specifies group id to get removed.\n    parameters: []\n  /user/metadata/group/add:\n    post:\n      summary: Adding metadata group\n      tags:\n        - User Operations\n      operationId: post-user-metadata-group-add\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n      description: Adds metadata group specified within the body\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-user-metadata-group-add-request\n              properties:\n                group:\n                  $ref: '#/components/schemas/metadataGroup'\n                header:\n                  $ref: '#/components/schemas/header'\n        description: Specifies group data to get added. groupId should be null.\n    parameters: []\n  /user/2fa/enable:\n    parameters: []\n    post:\n      summary: Enables 2FA\n      operationId: post-user-2fa-enable\n      security: []\n      description: |\n        Enables 2FA login with setup key and relating validation code. Validation code is generated with soft token \n        generator app. such as Google Authenticator.\n      responses:\n        '200':\n          description: Result of operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-user-2fa-enable-request\n              properties:\n                sotpCode:\n                  type: string\n                validationCode:\n                  type: string\n                header:\n                  $ref: '#/components/schemas/header'\n  /user/2fa/disable:\n    parameters: []\n    post:\n      summary: Disables 2FA\n      operationId: post-user-2fa-disable\n      security: []\n      description: |\n        Disables 2FA login with relating validation code.\n      responses:\n        '200':\n          description: Result of operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-user-2fa-disable-request\n              properties:\n                validationCode:\n                  type: string\n                header:\n                  $ref: '#/components/schemas/header'\n  /user/backup/export:\n    post:\n      summary: Exports metadatas as backup file\n      tags:\n        - User Operations\n      operationId: post-user-backup-export\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n      description: |\n        This service exports metadatas both as group and whole. If succeeds returns base64 encoded string of JSON \n        data in resultData field in operationResult object. If no metadata group ID is specified then \n        returns all of user's metadatas.\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-user-backup-export-request\n              properties:\n                metadataGroupId:\n                  type: string\n                header:\n                  $ref: '#/components/schemas/header'\n        description: Specifies group id to get exported\n    parameters: []\n  /user/backup/import:\n    post:\n      summary: Imports metadatas from backup file\n      tags:\n        - User Operations\n      operationId: post-user-backup-import\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n      description: |\n        This service imports metadatas exported from /user/backup/export service.\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-user-backup-import-request\n              properties:\n                data:\n                  type: string\n                  description: Exported data from /user/backup/export service\n                header:\n                  $ref: '#/components/schemas/header'\n        description: Specifies data to get imported\n    parameters: []\n  /admin/system_information:\n    post:\n      summary: Getting server system information\n      tags:\n        - Administrator Operations\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  operatingSystem:\n                    type: string\n                  processorInformation:\n                    type: string\n                  timeOnSystem:\n                    type: string\n                  systemUptime:\n                    type: string\n                  forgivaVersion:\n                    type: string\n                  hostname:\n                    type: string\n                  ipConfiguration:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        device:\n                          type: string\n                        ipv4:\n                          type: string\n                        ipv6:\n                          type: string\n                        mac:\n                          type: string\n                  javaEnvironment:\n                    type: string\n                  enabledFeatures:\n                    type: object\n                    properties:\n                      activeDirectory:\n                        type: boolean\n                title: post-admin-systeminformation-response\n        '401':\n          description: Returns if user does not have admin rights.\n      operationId: post-admin-systeminformation\n      description: Returns system information data\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-admin-systeminformation-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n  /admin/resource_usage:\n    post:\n      summary: Getting resource usage data\n      tags:\n        - Administrator Operations\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  cpuUsagePercentage:\n                    type: string\n                    description: ''\n                  totalMemory:\n                    type: string\n                    description: Total memory in MB.\n                  usedMemory:\n                    type: string\n                    description: Used memory in MB.\n                  totalDiskspace:\n                    type: string\n                    description: Total disk space in MB.\n                  usedDiskspace:\n                    type: string\n                    description: Used disk space in MB.\n                  cpuUsageByHour:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        hour:\n                          type: string\n                          description: 'Date-time in YYYY-mm-dd HH:MM format.'\n                        percentage:\n                          type: integer\n                  cpuUsageByDay:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        day:\n                          type: string\n                          description: 'Date-time in YYYY-mm-dd HH:MM format.'\n                        percentage:\n                          type: integer\n                  totalUsers:\n                    type: string\n                    description: Total users of Forgiva Enterprise including LDAP users.\n                  totalUniqueHosts:\n                    type: string\n                    description: Total unique host count recorded in the database.\n                  databaseSize:\n                    type: string\n                    description: Total database size in MB.\n                  averagePasswordGenerationTime:\n                    type: string\n                    description: Average password generation time in seconds.\n                  serverPingTime:\n                    type: string\n                    description: Forgiva Server ping time in MS.\n                  averageDatabaseResponseTime:\n                    type: string\n                    description: If database is on remote average response time in MS.\n                title: post-admin-resourceusage-response\n        '401':\n          description: Returns if user does not have admin rights.\n      operationId: post-admin-resourceusage\n      description: Returns resource usage data on the fly\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-admin-resourceusage-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n  /admin/user_group/remove:\n    post:\n      summary: Removing user group\n      tags:\n        - Administrator Operations\n      operationId: post-admin-usergroup-remove\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n        '401':\n          description: Returns if user does not have admin rights.\n      description: Removes user group specified with group id.\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-admin-usergroup-remove-request\n              properties:\n                userGroupId:\n                  type: string\n                header:\n                  $ref: '#/components/schemas/header'\n              required:\n                - userGroupId\n        description: Specifies group id to get removed.\n    parameters: []\n  /admin/user_group/add:\n    post:\n      summary: Adding user group\n      tags:\n        - Administrator Operations\n      operationId: post-admin-usergroup-add\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n        '401':\n          description: Returns if user does not have admin rights.\n      description: Adds group specified within the body\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-admin-usergroup-add-request\n              properties:\n                group:\n                  $ref: '#/components/schemas/userGroup'\n                header:\n                  $ref: '#/components/schemas/header'\n        description: Specifies group data to get added. groupId should be null.\n    parameters: []\n  /admin/user_groups:\n    post:\n      summary: Getting user groups\n      tags:\n        - Administrator Operations\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  userGroups:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/userGroup'\n                title: post-admin-usergroups-response\n        '401':\n          description: Returns if user does not have admin rights.\n      operationId: post-admin-usergroups\n      description: Return user groups.\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-admin-usergroups-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n  /admin/user/by_user_group:\n    post:\n      summary: Getting users by user group id\n      tags:\n        - Administrator Operations\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  users:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/user'\n                  totalUserCount:\n                    type: integer\n                    description: Total number of users within specific group\n                title: post-admin-user-byusergroup-response\n        '401':\n          description: Returns if user does not have admin rights.\n      operationId: post-admin-user-byusergroup\n      security: []\n      description: Returns user data by group id.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-admin-user-byusergroup-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n                userGroupId:\n                  type: string\n                  description:  User groupId contains other groups\n                startIdx:\n                  type: integer\n                  description:  Start index of the records. (Default is 0)\n                count:\n                  type: integer\n                  description:  Amount of records to return starting from startIdx. (Default is 100)\n  /admin/reports:\n    post:\n      summary: Listing available reports\n      tags:\n        - Administrator Operations\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reports:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/report'\n                title: post-admin-reports-response\n        '401':\n          description: Returns if user does not have admin rights.\n      operationId: post-admin-reports\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-admin-reports-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n  /admin/user/update:\n    post:\n      summary: Updating user\n      tags:\n        - Administrator Operations\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n        '401':\n          description: Returns if user does not have admin rights.\n      operationId: post-admin-user-update\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-admin-user-update-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n                user:\n                  $ref: '#/components/schemas/user'\n              required:\n                - user\n        description: User data to update with existing user id.\n    description: Updates user info.\n  /admin/user/add:\n    post:\n      summary: Adding a new user\n      tags:\n        - Administrator Operations\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n        '401':\n          description: Returns if user does not have admin rights.\n      operationId: post-admin-user-add\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-admin-user-add-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n                user:\n                  $ref: '#/components/schemas/user'\n                userGroupId:\n                  type: integer\n                  description: User group id to add into.\n                password:\n                  type: string\n                  description: Hash of password encrypted with session public key.\n              required:\n                - user\n        description: User data to add.\n      description: Adds a new user described within the post body.\n  /admin/user_group/update:\n    post:\n      summary: Updating user group\n      tags:\n        - Administrator Operations\n      operationId: post-admin-usergroup-update\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n        '401':\n          description: Returns if user does not have admin rights.\n      description: Updates user group specified within the body tagged with group id.\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-admin-usergroup-update-request\n              properties:\n                userGroup:\n                  $ref: '#/components/schemas/userGroup'\n                header:\n                  $ref: '#/components/schemas/header'\n        description: Specifies group data to get update. groupId should not be null.\n    parameters: []\n  /admin/user/remove:\n    post:\n      summary: Removing user\n      tags:\n        - Administrator Operations\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n        '401':\n          description: Returns if user does not have admin rights.\n      operationId: post-admin-user-remove\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-admin-user-remove-request\n              properties:\n                userId:\n                  type: string\n                  description: User group id to add into.\n                header:\n                  $ref: '#/components/schemas/header'\n        description: User data to add.\n      description: Removes user given in the body with user id.\n  /admin/hosts:\n    post:\n      summary: Getting hosts\n      tags:\n          - Administrator Operations\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  hosts:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/host'\n                title: post-admin-hosts-response\n        '401':\n          description: Returns if user does not have admin rights.\n      operationId: post-admin-hosts\n      description: Return hosts.\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-admin-hosts-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n  /admin/host/add:\n    post:\n      summary: Adding host\n      tags:\n        - Administrator Operations\n      operationId: post-admin-host-add\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n        '401':\n          description: Returns if user does not have admin rights.\n      description: Adds host specified within the body\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-admin-host-add-request\n              properties:\n                host:\n                  $ref: '#/components/schemas/host'\n                header:\n                  $ref: '#/components/schemas/header'\n        description: Specifies host data to get added. hostId should be null.\n    parameters: []\n  /admin/host/remove:\n    post:\n      summary: Removing host\n      tags:\n        - Administrator Operations\n      operationId: post-admin-host-remove\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n        '401':\n          description: Returns if user does not have admin rights.\n      description: Removes host specified with host id.\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-admin-host-remove-request\n              properties:\n                hostId:\n                  type: string\n                header:\n                  $ref: '#/components/schemas/header'\n              required:\n                - hostId\n        description: Specifies host id to get removed.\n      parameters: []\n  /admin/host/update:\n    post:\n      summary: Updating host\n      tags:\n        - Administrator Operations\n      operationId: post-admin-host-update\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n        '401':\n          description: Returns if user does not have admin rights.\n      description: Updates host specified within the body tagged with host id.\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-admin-host-update-request\n              properties:\n                host:\n                  $ref: '#/components/schemas/host'\n                header:\n                  $ref: '#/components/schemas/header'\n        description: Specifies host data to get update. hostId should not be null.\n    parameters: []\n  /admin/applications/by_host:\n    post:\n      summary: Getting applications\n      tags:\n        - Administrator Operations\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  applications:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/application'\n                title: post-admin-applications-response\n        '401':\n          description: Returns if user does not have admin rights.\n      operationId: post-admin-applications\n      description: Return applications.\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-admin-applications-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n                hostId:\n                  type: integer\n                  description: |\n                    If Host id is null getting whole applications.If there is a specified Host id just fetch \n                    it's applications.\n                startIdx:\n                  type: integer\n                  description:  Start index of the records. (Default is 0)\n                count:\n                  type: integer\n                  description:  Amount of records to return starting from startIdx. (Default is 100)\n  /admin/application/add:\n    post:\n      summary: Adding a new application\n      tags:\n        - Administrator Operations\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n        '401':\n          description: Returns if user does not have admin rights.\n      operationId: post-admin-application-add\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-admin-application-add-request\n              properties:\n                header:\n                  $ref: '#/components/schemas/header'\n                application:\n                  $ref: '#/components/schemas/application'\n                hostId:\n                  type: integer\n                  description: Host id to add into.\n              required:\n                - application\n        description: Application data to add.\n      description: Adds a new application described within the post body.\n  /admin/application/remove:\n    post:\n      summary: Removing application\n      tags:\n        - Administrator Operations\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n        '401':\n          description: Returns if user does not have admin rights.\n      operationId: post-admin-application-remove\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-admin-application-remove-request\n              properties:\n                applicationId:\n                  type: string\n                  description: Specifies application id to get removed.\n                header:\n                  $ref: '#/components/schemas/header'\n        description: Application data to remove.\n      description: Removes application given in the body with application id.\n  /admin/application/update:\n    post:\n      summary: Updating application\n      tags:\n        - Administrator Operations\n      operationId: post-admin-application-update\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/operationResult'\n        '401':\n          description: Returns if user does not have admin rights.\n      description: Updates application specified within the body tagged with application id.\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              title: post-admin-application-update-request\n              properties:\n                application:\n                  $ref: '#/components/schemas/application'\n                header:\n                  $ref: '#/components/schemas/header'\n        description: Specifies application data to get update. applicationId should not be null.\n    parameters: []\ncomponents:\n  schemas:\n    metadataGroup:\n      title: metadataGroup\n      type: object\n      description: Contains metadata group data specified with tree model.\n      properties:\n        groupId:\n          type: string\n          description: Unique group id.\n        groupName:\n          type: string\n          description: \"Group name such as 'Mail Accounts' or 'CRM Accounts'.\"\n        parentGroupId:\n          type: string\n          description: Parent group id.\n        groupDescription:\n          type: string\n          description: |\n            Description of the group such as 'Internal mail accounts' or '3rd party CRM application accounts'.\n    metadata:\n      title: metadata\n      type: object\n      x-examples: {}\n      description: Contains metadata information.\n      properties:\n        metadataId:\n          type: string\n          description: Unique metadata id\n        host:\n          type: string\n          description: Host description of the metadata.\n        account:\n          type: string\n          description: Account of the metadata.\n        lastRenewal:\n          type: string\n          description: Last renewal date for the metadata for password generation.\n        complexity:\n          type: integer\n          description: Complexity range 1-3 for password generation.\n        generatedBefore:\n          type: boolean\n          description: |\n            Indicates whether password generated before or not. If not password generation process should ensure \n            that user is entering master password right.\n        groupId:\n          type: string\n          description: Unique group id.\n      required:\n        - host\n        - account\n        - complexity\n    userGroup:\n      title: userGroup\n      type: object\n      properties:\n        userGroupId:\n          type: string\n        userGroupName:\n          type: string\n        parentUserGroupId:\n          type: string\n        userGroupDescription:\n          type: string\n      description: Contains users group data specified with tree model.\n    user:\n      title: user\n      type: object\n      properties:\n        userId:\n          type: integer\n        fullName:\n          type: string\n        userName:\n          type: string\n        email:\n          type: string\n        lastLogin:\n          type: string\n        lastLoginIp:\n          type: string\n        externalUser:\n          type: boolean\n    operationResult:\n      title: operationResult\n      type: object\n      properties:\n        error:\n          type: string\n          description: In case of any error returns error message.\n        info:\n          type: string\n          description: For any additional info message may need to get shown to the user\n        resultData:\n          type: string\n          description: Any data related with operation result if available\n        affectedRecords:\n          type: array\n          items:\n            type: string\n            description: Unique ID of affected record\n          description: |\n            In case of any data operation this returns id's of records. On adding new data this returns new \n            record ids\n    report:\n      title: report\n      type: object\n      properties:\n        id:\n          type: string\n        title:\n          type: string\n        columns:\n          type: array\n          items:\n            type: string\n    host:\n      title: host\n      type: object\n      properties:\n        hostId:\n          type: integer\n        hostName:\n          type: string\n        dnsName:\n          type: string\n        operatingSystemName:\n          type: string\n        operatingSystemVersion:\n          type: string\n        description:\n          type: string\n        reserved1:\n          type: string\n        reserved2:\n          type: string\n        reserved3:\n          type: string\n    application:\n      title: application\n      type: object\n      properties:\n        hostId:\n          type: integer\n        applicationId:\n          type: integer\n        applicationName:\n          type: string\n        version:\n          type: string\n        portRunning:\n          type: string\n        loginPageURL:\n          type: string\n        homePageURL:\n          type: string\n        monitoringFingerprint:\n          type: string\n        reserved1:\n          type: string\n        reserved2:\n          type: string\n        reserved3:\n          type: string\n    header:\n      title: header\n      type: object\n      properties:\n        sessionId:\n          type: string\n        clientAgent:\n          type: string\n    logonState:\n      title: logonState\n      type: object\n      properties:\n        authenticated:\n          type: boolean\n          description: If client is already authenticated returns true.\n        isAdmin:\n          type: boolean\n          description: Return true if user has administrator rights.\n  securitySchemes: {}\n",
			"canonicalURL": "/github.com/Sceptive/forgiva-integrator@fc4175d99f39e2c9475a71a90a36f7e019f58381/-/blob/etc/api/reference/integratorapi.v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Sceptive/forgiva-integrator/blob/fc4175d99f39e2c9475a71a90a36f7e019f58381/etc/api/reference/integratorapi.v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}