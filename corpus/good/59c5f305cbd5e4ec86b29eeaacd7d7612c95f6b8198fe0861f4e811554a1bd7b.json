{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bigcommerce/api-specs"
		},
		"file": {
			"name": "custom-template-associations.v3.yml",
			"size": 0,
			"path": "reference/custom-template-associations.v3.yml",
			"byteSize": 16386,
			"content": "openapi: 3.0.1\ninfo:\n  title: Custom Template Associations\n  version: 3.0.0\n  description: |-\n    Efficiently associate a stencil theme's custom templates to products, categories, brands, and pages.\n\n    ## Authentication\n\n    Authenticate requests by including an [OAuth](/api-docs/getting-started/authentication/rest-api-authentication#oauth-scopes) `access_token` and `client_id` in the request headers.\n\n    ```http\n    GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/storefront/custom-template-associations\n    Content-Type: application/json\n    X-Auth-Token: {{ACCESS_TOKEN}}\n    ```\n\n    ### OAuth scopes\n\n    | UI Name | Permission | Parameter\n    |-|-|-|\n    | Themes |Read-only|`store_themes_read_only`|\n    | Themes |Manage|`store_themes_manage`|\n\n    ## Creating template associations\n\n    To [associate custom templates to entities](/api-reference/store-management/custom-template-associations/custom-template-associations/upsertcustomtemplateassociations), send a `PUT` request to `/v3/storefront/custom-template-associations`.\n\n    ```http\n    PUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/storefront/custom-template-associations\n    X-Auth-Token: {{ACCESS_TOKEN}}\n    Content-Type: application/json\n    Accept: application/json\n\n    [\n      {\n        \"channel_id\": 1,\n        \"entity_type\": \"product\",\n        \"entity_id\": 12,\n        \"file_name\": \"custom-template-1.html\"\n      }\n    ]\n    ```\n\n    [![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](/api-reference/store-management/custom-template-associations/custom-template-associations/upsertcustomtemplateassociations#requestrunner)\n\n    \u003c!-- theme: info --\u003e\n    \u003e #### Note\n    \u003e * The allowed values for `entity_type` are `product`, `category`, `brand`, and `page`.\n\n    ## Getting entity IDs\n\n    Use the [Catalog API](/api-reference/store-management/catalog) to get the `entity_id` for `category`, `product`, and `brand` entity types. For example, to [get all products](/api-reference/store-management/catalog/products/getproducts), send a `GET` request to `/v3/catalog/products`.\n\n    ```http\n    GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products\n    X-Auth-Token: {{ACCESS_TOKEN}}\n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n    [![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](/api-reference/store-management/catalog/products/getproducts#requestrunner)\n\n    To [get the `entity_id` for a content page](/api-reference/store-management/store-content/pages/getallpages), send a `GET` request to `/v2/pages`.\n\n    ```http\n    GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v2/pages\n    X-Auth-Token: {{ACCESS_TOKEN}}\n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n    [![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](/api-reference/store-management/store-content/pages/getallpages#requestrunner)\n\n    ## Getting available templates\n\n    To [get available custom templates](/api-reference/store-management/themes/theme-custom-templates/get-themes-theme-uuid-custom-templates) for each `entity_type`, send a `GET` request to `/v3/themes/custom-templates/{version_uuid}`.\n\n    ```http\n    GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/themes/custom-templates/{version_uuid}\n    X-Auth-Token: {{ACCESS_TOKEN}}\n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n    [![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](/api-reference/store-management/themes/theme-custom-templates/get-themes-theme-uuid-custom-templates#requestrunner)\n\n    **Response:**\n\n    ```json\n    {\n      \"data\": {\n        \"product\": [\n          \"custom-product-1.html\"\n        ],\n        \"category\": [],\n        \"brand\": [\n          \"custom-brand-1.html\"\n        ],\n        \"page\": [\n          \"custom-page-1.html\",\n          \"holiday-page.html\"\n        ]\n      },\n      \"meta\": {}\n    }\n    ```\n\n    ## Getting theme UUIDs\n\n    To [get the `version_uuid` for an active theme](/api-reference/store-management/channels/channel-active-theme/getchannelactivetheme), send a `GET` request to `/v3/channels/{channel_id}/active-theme`.\n\n    ```http\n    GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/channels/{channel_id}/active-theme\n    X-Auth-Token: {{ACCESS_TOKEN}}\n    Content-Type: application/json\n    Accept: application/json\n    ```\n\n    [![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](/api-reference/store-management/channels/channel-active-theme/getchannelactivetheme#requestrunner)\n\n    **Response:**\n\n    ```json\n    {\n      \"data\": {\n        \"active_theme_configuration_uuid\": \"748c5390-0b42-0139-b008-0242ac110013\",\n        \"active_theme_uuid\": \"94bd1450-b873-0137-6902-0242ac11001f\",\n        \"active_theme_version_uuid\": \"94dde070-b873-0137-6902-0242ac11001f\",\n        \"saved_theme_configuration_uuid\": \"748c5390-0b42-0139-b008-0242ac110013\"\n      },\n      \"meta\": {}\n    }\n    ```\n\n    ## Additional information\n\n    * [Get Channel Active Theme](/api-reference/store-management/channels/channel-active-theme/getchannelactivetheme)\n    * [Get Available Custom Templates](/api-reference/store-management/themes/theme-custom-templates/get-themes-theme-uuid-custom-templates)\n    * [Catalog API](/api-reference/store-management/catalog)\n    * [Store Content API](/api-reference/store-management/store-content)\n    * [Channels API](/api-reference/store-management/channels)\nservers:\n  - url: 'https://api.bigcommerce.com'\n    description: Production API Gateway\npaths:\n  '/stores/{store_hash}/v3/storefront/custom-template-associations':\n    get:\n      summary: Get Custom Template Associations\n      tags:\n        - Custom Template Associations\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/CustomTemplateAssociation'\n                  meta:\n                    $ref: '#/components/schemas/MetaPaginationObject'\n              examples:\n                example-1:\n                  value:\n                    data:\n                      - id: 1\n                        channel_id: 1\n                        entity_type: product\n                        entity_id: 123\n                        file_name: custom-product-1.html\n                      - id: 2\n                        channel_id: 12345\n                        entity_type: page\n                        entity_id: 123\n                        file_name: custom-page.html\n                    meta:\n                      pagination:\n                        total: 246\n                        count: 5\n                        per_page: 5\n                        current_page: 1\n                        total_pages: 50\n                        links:\n                          next: '?limit=5\u0026page=2'\n                          current: '?limit=5\u0026page=1'\n      parameters:\n        - schema:\n            type: integer\n          in: query\n          name: channel_id\n          description: Channel ID to return only custom template associations for a given Channel\n        - schema:\n            type: string\n          in: query\n          name: 'entity_id:in'\n          description: Filter by a list of entity IDs. Must be used together with \"type\" filter.\n        - schema:\n            type: integer\n          in: query\n          name: limit\n          description: Number of results to return per page\n        - schema:\n            type: integer\n          in: query\n          name: page\n          description: 'Which page number to return, based on the page size. Used to paginate large collections.'\n        - schema:\n            type: string\n            enum:\n              - product\n              - category\n              - brand\n              - page\n          in: query\n          name: type\n          description: Filter associations by type\n        - schema:\n            type: boolean\n          in: query\n          name: is_valid\n          description: Optional toggle to filter for exclusively valid or invalid associations entries. An invalid entry is one where it's file name does not match up to an existing custom layout file in the currently active theme for the channel.\n      description: Get a collection of the store's custom template associations across all storefronts\n      operationId: GetCustomTemplateAssociations\n    put:\n      summary: Upsert Custom Template Associations\n      tags:\n        - Custom Template Associations\n      responses:\n        '200':\n          description: Success response for batch upsert of custom template associations\n          content:\n            application/json:\n              schema:\n                type: object\n        '422':\n          description: Error response for batch PUT of Custom template associations. Includes the errors for each reference id.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              uniqueItems: true\n              maxItems: 100\n              minItems: 1\n              items:\n                $ref: '#/components/schemas/CustomTemplateAssociationUpsert'\n            examples:\n              example-1:\n                value:\n                  - id: 1\n                    channel_id: 1\n                    entity_type: product\n                    entity_id: 123\n                    file_name: custom-product-1.html\n                  - id: 2\n                    channel_id: 12345\n                    entity_type: page\n                    entity_id: 123\n                    file_name: custom-page.html\n        description: ''\n      description: 'Upsert new custom template associations data across all storefronts. If an existing record is found for the combination of channel ID, entity ID, and type, the existing record will be overwritten with the new template.'\n      operationId: UpsertCustomTemplateAssociations\n    delete:\n      summary: Delete Custom Template Associations\n      tags:\n        - Custom Template Associations\n      responses:\n        '204':\n          description: No Content\n      parameters:\n        - schema:\n            type: integer\n          in: query\n          name: 'id:in'\n          description: List of Association IDs to delete explicitly.\n        - schema:\n            type: integer\n          in: query\n          name: 'entity_id:in'\n          description: List of Entity IDs to delete explicitly. Must be used together with \"type\"\n        - schema:\n            type: integer\n          in: query\n          name: channel_id\n          description: Channel ID provided to delete all custom template associations for a given Channel\n        - schema:\n            type: string\n            enum:\n              - product\n              - category\n              - brand\n              - page\n          in: query\n          name: type\n          description: Filter associations by type\n      description: Delete custom template associations. At least one query parameter must be used.\n      operationId: DeleteCustomTemplateAssociations\n    parameters:\n      - schema:\n          type: string\n        name: store_hash\n        in: path\n        required: true\ncomponents:\n  schemas:\n    Error:\n      type: object\n      properties:\n        status:\n          type: integer\n        message:\n          type: string\n      x-internal: false\n    ErrorResponse400:\n      type: object\n      properties:\n        schema:\n          $ref: '#/components/schemas/Error'\n      x-internal: false\n    ErrorResponse404:\n      type: object\n      properties:\n        schema:\n          $ref: '#/components/schemas/Error'\n      x-internal: false\n    ErrorResponse409:\n      type: object\n      properties:\n        schema:\n          $ref: '#/components/schemas/Error'\n      x-internal: false\n    ErrorResponse422:\n      type: object\n      properties:\n        schema:\n          $ref: '#/components/schemas/Error'\n      x-internal: false\n    MetaPaginationObject:\n      type: object\n      properties:\n        pagination:\n          type: object\n          properties:\n            total:\n              type: integer\n              example: 246\n              minimum: 0\n            count:\n              type: integer\n              example: 5\n              minimum: 0\n            per_page:\n              type: integer\n              example: 5\n              minimum: 0\n            current_page:\n              type: integer\n              example: 1\n              minimum: 1\n            total_pages:\n              type: integer\n              example: 50\n              minimum: 0\n            links:\n              type: object\n              properties:\n                next:\n                  type: string\n                  example: '?limit=5\u0026page=2'\n                current:\n                  type: string\n                  example: '?limit=5\u0026page=1'\n      x-internal: false\n    DetailedErrors:\n      type: object\n      additionalProperties:\n        type: string\n      x-internal: false\n    BaseError:\n      type: object\n      description: |\n        Error payload for the BigCommerce API.\n      properties:\n        status:\n          description: |\n            The HTTP status code.\n          type: integer\n        title:\n          description: |\n            The error title describing the particular error.\n          type: string\n        type:\n          type: string\n        instance:\n          type: string\n      x-internal: false\n    ErrorResponse:\n      allOf:\n        - $ref: '#/components/schemas/BaseError'\n        - type: object\n          properties:\n            errors:\n              $ref: '#/components/schemas/DetailedErrors'\n      x-internal: false\n    CustomTemplateAssociation:\n      title: CustomTemplateAssociation\n      type: object\n      properties:\n        id:\n          type: integer\n        channel_id:\n          type: integer\n        entity_type:\n          type: string\n          enum:\n            - product\n            - category\n            - brand\n            - page\n        entity_id:\n          type: integer\n        file_name:\n          type: string\n          example: custom-product-1.html\n        is_valid:\n          type: boolean\n          description: An invalid file name does not match with an existing custom layout file in the currently active theme for the channel. When an association is invalid the store will fallback to using the default for that entity type.\n        date_created:\n          type: string\n        date_modified:\n          type: string\n      x-internal: false\n    CustomTemplateAssociationUpsert:\n      title: CustomTemplateAssociation\n      type: object\n      properties:\n        channel_id:\n          type: integer\n        entity_type:\n          type: string\n          enum:\n            - product\n            - category\n            - brand\n            - page\n        entity_id:\n          type: integer\n        file_name:\n          type: string\n          example: custom-product-1.html\n      required:\n        - channel_id\n        - entity_type\n        - entity_id\n        - file_name\n      x-internal: false\n  securitySchemes:\n    X-Auth-Token:\n      name: X-Auth-Token\n      type: apiKey\n      in: header\n      description: |-\n        ## Authentication\n\n        Authenticate requests by including an [OAuth](/api-docs/getting-started/authentication/rest-api-authentication#oauth-scopes) `access_token` and `client_id` in the request headers.\n\n        ```http\n        GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/storefront/custom-template-associations\n        Content-Type: application/json\n        X-Auth-Token: {{ACCESS_TOKEN}}\n        ```\n\n        ### OAuth scopes\n\n        | UI Name | Permission | Parameter |\n        |-|-|-|\n        | Themes |Read-only|`store_themes_read_only`|\n        | Themes |Manage|`store_themes_manage`|\nsecurity:\n  - X-Auth-Token: []\n",
			"canonicalURL": "/github.com/bigcommerce/api-specs@3d4f475bfa35fa63397a69165530f47d4d8b3703/-/blob/reference/custom-template-associations.v3.yml",
			"externalURLs": [
				{
					"url": "https://github.com/bigcommerce/api-specs/blob/3d4f475bfa35fa63397a69165530f47d4d8b3703/reference/custom-template-associations.v3.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}