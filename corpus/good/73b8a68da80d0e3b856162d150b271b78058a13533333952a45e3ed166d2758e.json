{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/CartoDB/cartodb"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "doc/developer-center/auth-api/reference/swagger.yaml",
			"byteSize": 19737,
			"content": "openapi: 3.0.0\ninfo:\n  title: Auth API\n  description: \u003e\n    # Introduction\n\n    This API allows you to manage API keys. API keys are the fundamental\n    building block of CARTO's authorization system. See this this guide for more\n    information.\n\n\n    This API accepts and returns JSON.\n\n    API base endpoint is `https://\u003cyour_username\u003e.carto.com/api/v3/api_keys` or `https://\u003corg_name\u003e.carto.com/u/\u003cyour_username\u003e/api/v3/api_keys` in case you are using a user belonging to an organization.\n\n    # Authorization\n\n    There are three different API Keys that provide with different access privileges:\n\n    1. `default`: This API provides access to all public objects. It cannot be removed.\n\n    1. `master`: Using this API Key you will have full access and will be able to create/manage `regular` API Keys. It cannot be removed. You should keep its token safe and use it only when strictly necessary.\n\n    1. `regular`: This API Keys can be created with custom access privileges and can also be removed.\n\n    # API Key format\n\n    Every API Key consists on four main parts:\n\n    1. **name**: You will choose it when creating the API Key and it will be used for indexing your API Keys.\n\n    1. **type**: As mentioned before, there are three type of API Keys: `default`, `master` and `regular` providing different levels of access.\n\n    1. **token**: It will be used for authenticating your requests.\n\n    1. **grants**: Describes which APIs this API Key provides access to and to which tables. It consists on an array of two JSON objects. This object's `type` attribute can be `apis`, `database` or `dataservices`:\n\n        - `apis`: Describes which APIs does this API Key provide access to through `apis` attribute:\n        ```{\n              {\n                    \"type\": \"apis\",\n                    \"apis\": [\n                        \"sql\",\n                        \"maps\"\n                    ]\n              }\n        ```\n        - `database`: Describes to which tables and schemas and which privileges on them this API Key grants access to through `tables`, `schemas` and `table_metadata` attributes.\n          You can grant read (`select`) or write (`insert`, `update`, `delete`) permissions on tables.\n          For the case of `schemas`, once granted the `create` permission on a schema, you'll be able to run SQL queries such as `CREATE TABLE AS...`, `CREATE VIEW AS...` etc. to create entities on it.\n          Also, you can allow to list all tables metadata (like name or privacy) with the `table_metadata` attribute.\n        ```{\n              {\n                    \"type\": \"database\",\n                    \"tables\": [\n                        {\n                            \"schema\": \"public\",\n                            \"name\": \"my_table\",\n                            \"permissions\": [\n                                \"insert\",\n                                \"select\",\n                                \"update\"\n                            ]\n                        }\n                    ],\n                    \"schemas\": [\n                        {\n                            \"name\": \"public\",\n                            \"permissions\": [\n                                \"create\"\n                            ]\n                        }\n                    ],\n                    \"table_metadata\" : []\n              }\n        ```\n        - `dataservices`: Describes to which data services this API Key grants access to though `services` attribute:\n        ```{\n              {\n                    \"type\": \"dataservices\",\n                    \"services\": [\n                        \"geocoding\",\n                        \"routing\",\n                        \"isolines\",\n                        \"observatory\"\n                    ]\n              }\n        ```\n\n    # Authentication\n\n    In order to authenticate your requests to the API, they need to include a `Basic` `Authentication` header, where the `username` would be your username and the `password` would be your API Key's token. This authentication method will be valid across all CARTO components (Auth API, Maps API, SQL API). You can build your own `Authorization` header as follows:\n\n\n    ```\n    \"Basic #{Base64.strict_encode64(username + ':' + api_key.token)}\"\n    ```\n\n\n    **Important:** The API key you provide to access Auth API must be of type\n    `master`.\n  version: 0.0.1\n  contact:\n    name: Have you found an error? Github issues\n    url: 'https://github.com/CartoDB/cartodb/issues/new'\nservers:\n  - url: 'https://{user}.carto.com/api/v3'\n    description: Production server (uses live data)\n    variables:\n      domain:\n        default: carto.com\n        description: 'If on premise, change it to your domain'\n      user:\n        default: username\n        description: Your username\npaths:\n  /api_keys:\n    get:\n      summary: List API keys\n      description: Returns the API keys list.\n      tags:\n        - API Keys\n      operationId: getApiKeys\n      parameters:\n        - in: query\n          name: per_page\n          schema:\n            type: integer\n          description: Limits number of API Keys listed\n          required: false\n        - in: query\n          name: page\n          schema:\n            type: integer\n          description: Defines what page to fetch\n          required: false\n        - in: query\n          name: order\n          schema:\n            type: string\n          description: Its used to define the critera by which API Keys are listed. It can be any of the attributes\n          required: false\n        - in: query\n          name: target_user\n          schema:\n            type: string\n          description: Username of the user belonging to the organization whose API Keys will be listed\n          required: false\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiKeys'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n\n    post:\n      summary: Create API key\n      description: \u003e-\n        Creates a `regular` API key. `master` and `default_public` API Keys are automatically generated on\n        user's creation.\n      tags:\n        - API Keys\n      operationId: createApiKey\n      parameters:\n        - in: query\n          name: target_user\n          schema:\n            type: string\n          description: Username of the user belonging to the organization for whom the new `regular` API key will be created\n          required: false\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ApiKeyCreation'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiKey'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '422':\n          $ref: '#/components/responses/BadInput'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n\n  '/api_keys/{name}':\n    parameters:\n      - $ref: '#/components/parameters/apiKeyName'\n    get:\n      summary: Get API key\n      description: \u003e-\n        Returns an API key based on its `name`.\n\n      tags:\n        - API Keys\n      operationId: getApiKeyById\n      parameters:\n        - in: query\n          name: target_user\n          schema:\n            type: string\n          description: Username of the user belonging to the organization who has the API key requested\n          required: false\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiKey'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n\n    delete:\n      summary: Delete API key\n      description: \u003e-\n        Deletes an API key based on it's `name`. Only `regular` API keys can be\n        deleted.\n      tags:\n        - API Keys\n      operationId: deleteApiKeyById\n      parameters:\n        - in: query\n          name: target_user\n          schema:\n            type: string\n          description: Username of the user belonging to the organization who has the API key that will be deleted\n          required: false\n      responses:\n        '200':\n          description: The resource was deleted successfully.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n\n  '/api_keys/{name}/token/regenerate':\n    parameters:\n      - $ref: '#/components/parameters/apiKeyName'\n    post:\n      summary: Regenerate API key token\n      description: Regenerates the API key token. The rest of the fields remain the same.\n      tags:\n        - API Keys\n      operationId: regenerateApiKeyById\n      parameters:\n        - in: query\n          name: target_user\n          schema:\n            type: string\n          description: Username of the user belonging to the organization who has the API key whose token will be regenerated\n          required: false\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiKey'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n\ncomponents:\n  schemas:\n    ApiKeys:\n      type: object\n      properties:\n        total:\n          type: integer\n          description: Total number of API Keys\n        count:\n          type: integer\n          description: Number of returned API Keys\n        result:\n          type: array\n          items:\n            $ref: '#/components/schemas/ApiKey'\n        _links:\n          type: object\n          properties:\n            first:\n              $ref: '#/components/schemas/Links'\n              description: Link to the first page\n            prev:\n              $ref: '#/components/schemas/Links'\n              description: Link to the previous page\n            next:\n              $ref: '#/components/schemas/Links'\n              description: Link to the next page\n            last:\n              $ref: '#/components/schemas/Links'\n              description: Link to the last page\n      example:\n        total: 3\n        count: 3\n        result:\n          - name: Master\n            user:\n              username: amartin\n            type: master\n            token: slxIYwIDyEGGS2W9W-uEKw\n            grants:\n              - type: apis\n                apis:\n                  - sql\n                  - maps\n              - type: database\n                tables: []\n                schemas: []\n                table_metadata: []\n              - type: dataservices\n                services:\n                  - geocoding\n                  - routing\n                  - isolines\n                  - observatory\n            created_at: '2018-02-08 14:24:41 +0000'\n            updated_at: '2018-02-08 14:24:41 +0000'\n            _links:\n              self: 'https://carto.com/api/v3/api_keys/Master'\n          - name: MyTableApi\n            user:\n              username: amartin\n            type: regular\n            token: moLv8B-kotcjUL-uxMhbGg\n            grants:\n              - type: apis\n                apis:\n                  - maps\n              - type: database\n                tables:\n                  - schema: public\n                    name: my_table\n                    permissions:\n                      - insert\n                      - select\n                      - update\n                schemas:\n                  - name: public\n                    permissions:\n                      - create\n                table_metadata: []\n              - type: dataservices\n                services:\n                  - geocoding\n                  - observatory\n            created_at: '2018-02-14 13:23:12 +0000'\n            updated_at: '2018-02-14 13:23:12 +0000'\n            _links:\n              self: 'https://carto.com/api/v3/api_keys/MyTableApi'\n          - name: Default public\n            user:\n              username: amartin\n            type: default\n            token: default_public\n            grants:\n              - type: apis\n                apis:\n                  - sql\n                  - maps\n              - type: database\n                tables: []\n                schemas: []\n            created_at: '2018-02-15 13:50:36 +0000'\n            updated_at: '2018-02-15 13:50:36 +0000'\n            _links:\n              self: 'https://carto.com/api/v3/api_keys/Default%20public'\n        _links:\n          first:\n            href: 'https://carto.com/api/v3/api_keys?order=updated_at\u0026page=1\u0026per_page=20'\n          last:\n            href: 'https://carto.com/api/v3/api_keys?order=updated_at\u0026page=1\u0026per_page=20'\n\n    ApiKey:\n      allOf:\n        - type: object\n          properties:\n            name:\n              type: string\n            user:\n              properties:\n                username:\n                  type: string\n            type:\n              $ref: '#/components/schemas/ApiKeysTypes'\n            token:\n              type: string\n            grants:\n              type: array\n              items:\n                oneOf:\n                  - $ref: '#/components/schemas/ApisGrant'\n                  - $ref: '#/components/schemas/GrantDatabase'\n                  - $ref: '#/components/schemas/GrantDataservices'\n            _links:\n              type: object\n              properties:\n                self:\n                  $ref: '#/components/schemas/Links'\n                  description: Link to the resource\n        - $ref: '#/components/schemas/Timestamps'\n      required:\n        - name\n        - type\n        - grants\n      example:\n        name: MyTableApi\n        user:\n          username: amartin\n        type: regular\n        token: moLv8B-kotcjUL-uxMhbGg\n        grants:\n          - type: apis\n            apis:\n              - maps\n          - type: database\n            tables:\n              - schema: public\n                name: my_table\n                permissions:\n                  - insert\n                  - select\n                  - update\n            schemas:\n              - name: public\n                permissions:\n                  - create\n            table_metadata: []\n          - type: dataservices\n            services:\n              - geocoding\n              - observatory\n        created_at: '2018-02-14 13:23:12 +0000'\n        updated_at: '2018-02-14 13:23:12 +0000'\n        _links:\n          self:\n            href: 'http://amartin.carto.com/api/v3/api_keys/MyTableApi'\n\n    ApiKeyCreation:\n      type: object\n      properties:\n        name:\n          type: string\n          description: For identifying your API Key\n        grants:\n          type: array\n          items:\n            oneOf:\n              - $ref: '#/components/schemas/GrantDatabase'\n              - $ref: '#/components/schemas/ApisGrant'\n              - $ref: '#/components/schemas/GrantDataservices'\n            discriminator:\n              propertyName: type\n      required:\n        - name\n        - grants\n      example:\n        name: MyTableApi\n        grants:\n          - type: apis\n            apis:\n              - maps\n          - type: database\n            tables:\n              - schema: public\n                name: my_table\n                permissions:\n                  - select\n                  - update\n                  - insert\n            schemas:\n              - name: public\n                permissions:\n                  - create\n            table_metadata: []\n          - type: dataservices\n            services:\n              - geocoding\n              - observatory\n    GrantDataservices:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - dataservices\n        services:\n          type: array\n          items:\n            $ref: '#/components/schemas/Dataservices'\n          uniqueItems: true\n      required:\n        - type\n        - services\n    Dataservices:\n      type: string\n      enum:\n        - geocoding\n        - routing\n        - isolines\n        - observatory\n\n    GrantDatabase:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - database\n        tables:\n          type: array\n          items:\n            $ref: '#/components/schemas/TableGrant'\n        schemas:\n          type: array\n          items:\n            $ref: '#/components/schemas/SchemaGrant'\n        table_metadata:\n          type: array\n      required:\n        - type\n    TableGrant:\n      type: object\n      properties:\n        name:\n          type: string\n        schema:\n          type: string\n        permissions:\n          type: array\n          items:\n            type: string\n            enum:\n              - select\n              - insert\n              - update\n              - delete\n          uniqueItems: true\n      required:\n        - name\n        - schema\n        - permissions\n    SchemaGrant:\n      type: object\n      properties:\n        name:\n          type: string\n        permissions:\n          type: array\n          items:\n            type: string\n            enum:\n              - create\n          uniqueItems: true\n      required:\n        - name\n        - permissions\n    ApisGrant:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - apis\n        apis:\n          type: array\n          items:\n            $ref: '#/components/schemas/Apis'\n          uniqueItems: true\n      required:\n        - type\n        - apis\n    Apis:\n      type: string\n      enum:\n        - sql\n        - maps\n    ApiKeysTypes:\n      type: string\n      enum:\n        - master\n        - default\n        - regular\n    Timestamps:\n      type: object\n      properties:\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n    Links:\n      type: object\n      properties:\n        href:\n          type: string\n          format: url\n          description: link to the resource\n  securitySchemes:\n    ApiKeyHTTPBasicAuth:\n      type: http\n      scheme: basic\n    ApiKeyQueryParam:\n      type: apiKey\n      in: header\n      name: api_key\n  parameters:\n    apiKeyName:\n      in: path\n      name: name\n      required: true\n      schema:\n        type: string\n      description: the API key `name`\n  responses:\n    NotFound:\n      description: The specified resource was not found\n    Unauthorized:\n      description: Unauthorized. Wrong or no authentication provided.\n    Forbidden:\n      description: Forbidden. The API key does not authorize this request.\n    BadInput:\n      description: Request's parameters error\n",
			"canonicalURL": "/github.com/CartoDB/cartodb@64bc263488a45fc66565aadfcb051af60121f98d/-/blob/doc/developer-center/auth-api/reference/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/CartoDB/cartodb/blob/64bc263488a45fc66565aadfcb051af60121f98d/doc/developer-center/auth-api/reference/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}