{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/pocketsmith/openapi.yaml",
			"byteSize": 79293,
			"content": "openapi: 3.0.1\ninfo:\n  x-ballerina-display:\n    label: PocketSmith\n    iconPath: \"icon.png\"\n  title: PocketSmith\n  description: This is a generated connector for [PocketSmith API v2.0](https://www.pocketsmith.com/) OpenAPI specification.\n\n    The public PocketSmith API. It's a powerful interface for online money management with cash flow forecasts as well as superb historical tracking.\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials.\n\n    Create a [PocketSmith account](https://www.pocketsmith.com/) and obtain OAuth tokens following [this guide](https://developers.pocketsmith.com/docs/oauth).\n  contact:\n    name: API Support\n    email: api@pocketsmith.com\n  version: '2.0'\nx-samples-languages:\n  - curl\n  - node\n  - javascript\n  - php\n  - python\nservers:\n  - url: 'https://api.pocketsmith.com/v2'\n    description: Production\ncomponents:\n  securitySchemes:\n    # developerKey:\n    #   type: apiKey\n    #   in: header\n    #   name: X-Developer-Key\n    #   description: 'If you want to build a tool just for yourself, be it a desktop widget to display your balances or a tool to import transactions from a bank without a bank feed, you can use our developer keys feature. You can issue yourself a key which will give you persistent API access to just your account. You should rotate your keys regularly.'\n    oauth2:\n      type: oauth2\n      x-ballerina-apikey-description: \"Provide your http:BearerTokenConfig record as {authConfig : bearerAuthConfig}\"\n      description: 'If you want to a create an app for PocketSmith that other PocketSmith users can use, you''ll be using OAuth 2. To register an app with PocketSmith, email us on api@pocketsmith.com. Let us know a bit about yourself and what you plan on building. When approved, you will be provided with your client_id and client_secret to start using OAuth. Then, check out our guide for integrating OAuth to get started.'\n      flows:\n        authorizationCode:\n          authorizationUrl: 'https://my.pocketsmith.com/oauth/authorize'\n          tokenUrl: 'https://api.pocketsmith.com/v2/oauth/access_token'\n          scopes:\n            user.read: Access the user's details and preferences\n            user.write: Access to change the user's details and preferences\n            accounts.read: Access to list and view transaction accounts\n            accounts.write: Access to update and delete transaction accounts\n            transactions.read: Access to list and view accounts and transactions\n            transactions.write: 'Access to create, update and delete transactions'\n            categories.read: Access to view categories\n            categories.write: Ability to edit and delete categories\n            attachments.read: Access to view attachments\n            attachments.write: 'Ability to create, update and delete attachments'\n  responses:\n    '400':\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    '403':\n      description: Not Allowed\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    '404':\n      description: Not Found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    '422':\n      description: Validation Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The unique identifier of the user.\n          example: 42\n        login:\n          type: string\n          description: The user's username.\n          example: sampleuser69\n        name:\n          type: string\n          description: 'The full name of the user, although not all users will have a name set.'\n          example: Foo Barrington\n        email:\n          type: string\n          description: The user's email address.\n          example: user69@sample.com\n        avatar_url:\n          type: string\n          description: The URL to the user's avatar.\n          example: 'https://image.com/image.png'\n        beta_user:\n          type: boolean\n          description: Whether the user has opted in to beta features.\n          example: true\n        time_zone:\n          type: string\n          description: The user's time zone.\n          example: Auckland\n        week_start_day:\n          type: integer\n          description: 'The day of the week the user wishes their calendars to start on. A number between 0 and 6, where 0 is Sunday and 6 is Saturday.'\n          example: 1\n        base_currency_code:\n          type: string\n          description: The user's base currency.\n          example: NZD\n        always_show_base_currency:\n          type: boolean\n          description: Whether the user wants to see all accounts in their base currency instead of the native account currency.\n          example: false\n        created_at:\n          type: string\n          description: When the user signed up.\n          example: '2015-07-02T22:14:49Z'\n        updated_at:\n          type: string\n          description: When the user was last updated.\n          example: '2015-07-02T22:14:49Z'\n        using_multiple_currencies:\n          type: boolean\n          description: Whether the user has multiple currencies in use across their account.\n          example: true\n        last_logged_in_at:\n          type: string\n          description: When the user last logged into PocketSmith.\n          example: '2015-07-02T22:14:49Z'\n        last_activity_at:\n          type: string\n          description: 'When the user last interacted with PocketSmith, via any application or the API.'\n          example: '2015-07-02T22:14:49Z'\n    Institution:\n      type: object\n      properties:\n        currency_code:\n          type: string\n          description: The currency code of the institution.\n          example: NZD\n        title:\n          type: string\n          description: The title of the institution.\n          example: Bank of Foo\n        updated_at:\n          type: string\n          description: When the institution was last updated.\n          example: '2015-04-21T22:42:22Z'\n        created_at:\n          type: string\n          description: When the institution was created.\n          example: '2015-04-21T22:42:22Z'\n        id:\n          type: integer\n          description: The unique identifier of the institution.\n          example: 57\n    Account:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The unique identifier of the account.\n          example: 42\n        title:\n          type: string\n          description: The title of the account.\n          example: Bank of Foo\n        currency_code:\n          type: string\n          description: The currency code for the account.\n          example: NZD\n        type:\n          type: string\n          description: The type of the account.\n          # enum:\n          #   - bank\n          #   - credits\n          #   - cash\n          #   - stocks\n          #   - mortgage\n          #   - loans\n          #   - vehicle\n          #   - property\n          #   - insurance\n          #   - other_liability\n          example: bank\n        is_net_worth:\n          type: boolean\n          description: Whether the account is a net worth asset.\n          example: false\n        primary_transaction_account:\n          $ref: '#/components/schemas/TransactionAccount'\n        primary_scenario:\n          $ref: '#/components/schemas/Scenario'\n        transaction_accounts:\n          type: array\n          description: 'All transaction accounts that compose the account, including the primary.'\n          items:\n            $ref: '#/components/schemas/TransactionAccount'\n        scenarios:\n          type: array\n          description: 'All scenarios that compose the account, including the primary.'\n          items:\n            $ref: '#/components/schemas/Scenario'\n        created_at:\n          type: string\n          description: When the account was created.\n          example: '2018-02-27'\n        updated_at:\n          type: string\n          description: When the account was last updated.\n          example: '2018-02-27'\n        current_balance:\n          type: number\n          description: The current balance of the account.\n          example: 2694.39\n        current_balance_date:\n          type: string\n          description: The date of the current balance.\n          example: '2018-02-27'\n        current_balance_in_base_currency:\n          type: number\n          description: The current balance of the account in the user's base currency.\n          example: 4041.59\n        current_balance_exchange_rate:\n          type: number\n          description: 'The exchange rate between the account''s currency and the user''s base currency, when different. If the currencies are the same, null is returned.'\n          example: 1.5\n        safe_balance:\n          type: number\n          description: 'The current safe balance, if safe balance is activated on the account. If safe balance is not activated, then null is returned.'\n          example: 2694.39\n        safe_balance_in_base_currency:\n          type: number\n          description: 'The current safe balance in the user''s base currency, if safe balance is activated on the account. If safe balance is not activated, then null is returned.'\n          example: 4041.59\n    TransactionAccount:\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 96027\n        name:\n          type: string\n          example: Sample Credit\n        number:\n          type: string\n          example: ASBCRD44554\n        current_balance:\n          type: number\n          example: 2694.39\n        current_balance_date:\n          type: string\n          example: '2015-07-03'\n        current_balance_in_base_currency:\n          type: number\n          description: The current balance of the transaction account in the user's base currency.\n          example: 4041.59\n        current_balance_exchange_rate:\n          type: number\n          description: 'The exchange rate between the transaction account''s currency and the user''s base currency, when different. If the currencies are the same, null is returned.'\n          example: 1.5\n        safe_balance:\n          type: number\n          description: 'The current safe balance, if safe balance is activated and available for the transaction account. If safe balance is not available, then null is returned.'\n          example: 2694.39\n        safe_balance_in_base_currency:\n          type: number\n          description: 'The current safe balance in the user''s base currency, if safe balance is activated and available for the transaction account. If safe balance is not available, then null is returned.'\n          example: 4041.59\n        starting_balance:\n          type: number\n          example: 3547.45\n        starting_balance_date:\n          type: string\n          example: '2015-03-15'\n        created_at:\n          type: string\n          example: '2015-03-17T02:42:10Z'\n        updated_at:\n          type: string\n          example: '2015-07-02T22:14:49Z'\n        institution:\n          $ref: '#/components/schemas/Institution'\n        currency_code:\n          type: string\n          description: The currency that the account is in. This is determined by the account that the transaction account belongs to.\n          example: NZD\n        type:\n          type: string\n          description: The type of the transaction account.\n          # enum:\n          #   - bank\n          #   - credits\n          #   - cash\n          #   - stocks\n          #   - mortgage\n          #   - loans\n          #   - vehicle\n          #   - property\n          #   - insurance\n          #   - other_liability\n          example: bank\n    Scenario:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The unique identifier of the scenario.\n          example: 42\n        title:\n          type: string\n          description: The title of the scenario.\n          example: Wedding\n        description:\n          type: string\n          description: A short description of what the scenario is modelling.\n        interest_rate:\n          type: number\n          description: The amount of interest to apply to the balance. Will apply periodically depending on what `interest_rate_repeat_id` is set to.\n          example: 2.4\n        interest_rate_repeat_id:\n          type: integer\n          description: 'A number representing how often the interest should be applied. 0 is used for no interest, 2 is weekly, 3 is fortnightly, 4 is monthly, 5 is yearly and 7 for quarterly.'\n          example: 4\n        type:\n          type: string\n          description: The type of the scenario.\n          # enum:\n          #   - no-interest\n          #   - savings\n          #   - debt\n          example: no-interest\n        minimum-value:\n          type: number\n          example: 4000\n        maximum-value:\n          type: number\n          example: 42\n        achieve_date:\n          type: string\n          description: 'For goals, the date that they should be achieved by.'\n        starting_balance:\n          type: number\n          description: The starting balance of the scenario.\n          example: 2450\n        starting_balance_date:\n          type: string\n          description: The date of the starting balance.\n          example: '2018-02-27'\n        closing_balance:\n          type: number\n          description: The closing balance of the scenario.\n          example: 5431.2\n        closing_balance_date:\n          type: string\n          description: The date of the closing balance.\n          example: '2018-02-27'\n        current_balance:\n          type: number\n          description: The current balance of the scenario.\n          example: 5431.2\n        current_balance_date:\n          type: string\n          description: The date of the current balance.\n          example: '2018-02-27'\n        current_balance_in_base_currency:\n          type: number\n          description: The current balance of the scenario in the user's base currency.\n          example: 8146.8\n        current_balance_exchange_rate:\n          type: number\n          description: 'The exchange rate between the scenario''s currency and the user''s base currency, when different. If the currencies are the same, null is returned.'\n          example: 1.5\n        safe_balance:\n          type: number\n          description: 'The current safe balance in the user''s base currency, if safe balance is activated on the account associated with the scenario. If safe balance is not activated, then null is returned.'\n          example: 5431.2\n        safe_balance_in_base_currency:\n          type: number\n          description: 'The current safe balance in the user''s base currency, if safe balance is activated on the account associated with the scenario. If safe balance is not available, then null is returned.'\n          example: 8146.8\n        created_at:\n          type: string\n          description: When the scenario was created.\n          example: '2015-04-21T22:42:22Z'\n        updated_at:\n          type: string\n          description: When the scenario was last updated.\n          example: '2015-04-21T22:42:22Z'\n    Transaction:\n      type: object\n      properties:\n        cheque_number:\n          type: string\n          example: '503113643691'\n        type:\n          type: string\n          description: Whether the transaction is a debit or a credit\n          # enum:\n          #   - debit\n          #   - credit\n          example: credit\n        memo:\n          type: string\n          example: An example memo\n        payee:\n          type: string\n          description: The payee/merchant of the transaction.\n          example: St Martins New World\n        amount:\n          type: number\n          example: 34.6\n        date:\n          type: string\n          description: The date the transaction took place.\n          example: '2018-02-27'\n        is_transfer:\n          type: boolean\n          description: Whether the transaction was a transfer.\n          example: false\n        category:\n          $ref: '#/components/schemas/Category'\n        note:\n          type: string\n          example: I spent way too much on cheese here\n        labels:\n          type: array\n          items:\n            type: string\n          example:\n            - foo\n            - bar\n            - baz\n        id:\n          type: integer\n          description: The unique identifier of the transaction.\n          example: 42\n        original_payee:\n          type: string\n          description: The payee the transaction was created with.\n          example: CARD4083ST MARTINS NEW WORLD CHRISTCHURCH\n        upload_source:\n          type: string\n          description: Where the transaction came from.\n          example: file\n        closing_balance:\n          type: number\n          description: The closing balance of the account at the transaction.\n          example: 4312.32\n        transaction_account:\n          $ref: '#/components/schemas/TransactionAccount'\n        status:\n          type: string\n          description: 'The status of the transaction. Pending transactions are temporary and may be superseded later by their posted counterparts, which are permanent.'\n          # enum:\n          #   - pending\n          #   - posted\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The unique identifier of the category.\n          example: 1438154\n        title:\n          type: string\n          description: The title of the category.\n          example: Beer\n        colour:\n          type: string\n          description: The colour for the category.\n          format: CSS-style hex triplet\n          example: '#00ff00'\n        children:\n          type: array\n          description: The category's child categories.\n          items:\n            $ref: '#/components/schemas/Category'\n        parent_id:\n          type: integer\n          description: 'The unique identifier of the parent category of this category, or null if this category has no parent (i.e. is a top-level category)'\n          example: 42\n        created_at:\n          type: string\n          description: When the category was created.\n          format: ISO 8601 datetime format\n          example: '2015-08-16T02:17:02Z'\n        updated_at:\n          type: string\n          description: When the category was last updated.\n          format: ISO 8601 datetime format\n          example: '2015-08-16T02:17:02Z'\n        is_transfer:\n          type: boolean\n          description: Whether this category has been marked as a transfer category.\n          example: false\n    CategoryRule:\n      type: object\n      properties:\n        category:\n          $ref: '#/components/schemas/Category'\n        id:\n          type: integer\n          description: The unique identifier of the category rule.\n          example: 1438154\n        payee_matches:\n          type: string\n          description: The keyword/s to match the transactions payees.\n          example: Countdown\n        created_at:\n          type: string\n          description: When the category rule was created.\n          format: ISO 8601 datetime format\n          example: '2019-07-09T10:06:02Z'\n        updated_at:\n          type: string\n          description: When the category rule was last updated.\n          format: ISO 8601 datetime format\n          example: '2019-07-09T10:06:02Z'\n    BudgetAnalysis:\n      type: object\n      properties:\n        start_date:\n          type: string\n          description: The start date of the budget analysis.\n          example: '2016-11-01'\n        end_date:\n          type: string\n          description: The end date of the budget analysis.\n          example: '2016-11-30'\n        total_actual_amount:\n          type: number\n          description: The total actual (transactions) amount across all periods.\n          example: -42.3\n        average_actual_amount:\n          type: number\n          description: The average actual (transactions) amount across all periods.\n          example: -42.3\n        total_forecast_amount:\n          type: number\n          description: The total budgeted amount across all periods.\n          example: -60\n        average_forecast_amount:\n          type: number\n          description: The average budgeted amount across all periods.\n          example: -60\n        total_over_by:\n          type: number\n          description: The total amount the budget was exceeded across all periods.\n          example: 0\n        total_under_by:\n          type: number\n          description: The total amount the budget was under by across all periods.\n          example: 17.7\n        periods:\n          type: array\n          description: The period analyses that this budget analysis comprises.\n          items:\n            $ref: '#/components/schemas/Period'\n    Period:\n      type: object\n      properties:\n        start_date:\n          type: string\n          description: The start date of the period.\n          example: '2016-11-01'\n        end_date:\n          type: string\n          description: The end date of the period.\n          example: '2016-11-30'\n        actual_amount:\n          type: number\n          description: The sum of all actuals (transactions) in the period.\n          example: -42.3\n        forecast_amount:\n          type: number\n          description: 'The sum of all forecast sources (budget events) in the period, for comparison against the actual amount.'\n          example: -60\n        refund_amound:\n          type: number\n          description: 'This attribute tracks the amount that has been refunded or deducted to the actual amount. When a category is set to \"always expense\", any credit transactions are treated as refunds and when set to \"always income\", any debit transactions are treated as deductions.'\n          example: 5.6\n        current:\n          type: boolean\n          description: 'Whether this period is current, such that the current date (in the user''s time zone) falls within the date range.'\n          example: true\n        over_budget:\n          type: boolean\n          description: Whether the budget has been exceeded in the period.\n          example: false\n        under_budget:\n          type: boolean\n          description: Whether the budget has not been exceeded in the period.\n          example: true\n        over_by:\n          type: number\n          description: How much the budget has been exceeded by in the period.\n          example: 0\n        under_by:\n          type: number\n          description: How much there is left in the budget for the period.\n          example: 17.7\n        percentage_used:\n          type: number\n          description: The percentage of the budget that has been used in the period.\n          example: 70.5\n    BudgetAnalysisPackage:\n      type: object\n      properties:\n        category:\n          $ref: '#/components/schemas/Category'\n        is_transfer:\n          type: boolean\n          description: 'Whether the expense budget analysis looks like a transfer to the income budget analysis, based on a number of heuristics.'\n          example: false\n        expense:\n          $ref: '#/components/schemas/BudgetAnalysis'\n        income:\n          $ref: '#/components/schemas/BudgetAnalysis'\n    Attachment:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The unique identifier of the attachment\n          example: 1438154\n        title:\n          type: string\n          description: 'The title of the attachment. If blank or not provided, the title will be derived from the file name.'\n          example: Invoice for taxi\n        file_name:\n          type: string\n          description: The file name of the attachment\n          example: taxi.png\n        type:\n          type: string\n          description: The type of attachment\n          example: image\n        content_type:\n          type: string\n          description: The content type of the attachment.\n          example: image/png\n        content_type_meta:\n          type: object\n          properties:\n            title:\n              type: string\n              description: The content type title of the attachment\n              example: PNG\n            description:\n              type: string\n              description: The content type description of the attachment\n              example: PNG image\n            extension:\n              type: string\n              description: The extension type of the attachment\n              example: png\n        original_url:\n          type: string\n          description: The url of the attachment\n          example: 'https://image.com/image.png'\n        variants:\n          type: object\n          properties:\n            large_url:\n              type: string\n              description: The url of the large version of the attachment\n              example: 'https://image.com/image.png'\n            thumb_url:\n              type: string\n              description: The url of the thumb version of the attachment\n              example: 'https://image.com/image.png'\n        created_at:\n          type: string\n          description: When the attachment was created\n          format: ISO 8601 datetime format\n          example: '2015-08-16T02:17:02Z'\n        updated_at:\n          type: string\n          description: When the attachment was last updated\n          format: ISO 8601 datetime format\n          example: '2015-08-16T02:17:02Z'\n    Error:\n      type: object\n      properties:\n        error:\n          type: string\n          description: A message describing the error that occurred.\n          example: A message describing the error that occurred.\npaths:\n  /me:\n    get:\n      summary: Get the authorised user\n      operationId: getAuthorizedUser\n      description: Gets the user that corresponds to the access token used in the request.\n      tags:\n        - Users\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n  '/users/{id}':\n    get:\n      summary: Get user\n      operationId: getUserById\n      description: Gets a user by ID. You must be authorised as the target user in order to make this request.\n      tags:\n        - Users\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the user.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '404':\n          $ref: '#/components/responses/404'\n    put:\n      summary: Update user\n      operationId: updateUserById\n      description: Updates the user by their ID. You must be authorised as the target user in order to make this request.\n      tags:\n        - Users\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the user.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: Update information\n              type: object\n              properties:\n                email:\n                  type: string\n                  description: A new email address for the user.\n                  example: foo@bar.com\n                name:\n                  type: string\n                  description: A new name for the user.\n                  example: John Appleseed\n                time_zone:\n                  type: string\n                  description: A new time zone for the user.\n                  example: Auckland\n                week_start_day:\n                  type: integer\n                  description: 'The day of the week the user wishes their calendars to start on. A number between 0 and 6, where 0 is Sunday and 6 is Saturday.'\n                  example: 1\n                beta_user:\n                  type: boolean\n                  description: 'Whether the user is a beta user, and wishes to try out new features.'\n                  example: true\n                base_currency_code:\n                  type: string\n                  description: A new base currency code for the user.\n                  example: nzd\n                always_show_base_currency:\n                  type: boolean\n                  description: Whether the user wishes to have all monetary values converted to their base currency.\n                  example: true\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '422':\n          $ref: '#/components/responses/422'\n  '/institutions/{id}':\n    get:\n      summary: Get institution\n      operationId: getInstitution\n      description: Gets an institution by its ID.\n      tags:\n        - Institutions\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the institution.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Institution'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n    put:\n      summary: Update institution\n      operationId: updateInstitution\n      description: Updates the title and currency code for an institution.\n      tags:\n        - Institutions\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the institution.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n                  description: A new title for the institution.\n                  example: Bank of Foo\n                currency_code:\n                  type: string\n                  description: A new currency code for the institution.\n                  example: NZD\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Institution'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '422':\n          $ref: '#/components/responses/422'\n    delete:\n      summary: Delete institution\n      operationId: deleteInstitution\n      description: 'Deletes an institution and all data within. Alternatively, another institution can be provided to merge the data into to avoid losing it.'\n      tags:\n        - Institutions\n      responses:\n        '204':\n          description: Success\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '422':\n          $ref: '#/components/responses/422'\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the institution.\n          required: true\n          schema:\n            type: integer\n          example: 42\n  '/users/{id}/institutions':\n    get:\n      summary: List institutions in user\n      operationId: listInstitutions\n      description: Lists all the institutions belonging to the user.\n      tags:\n        - Institutions\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the user\n          required: true\n          schema:\n            type: integer\n          example: 42\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Institution'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n    post:\n      summary: Create institution in user\n      operationId: createInstitutionForUser\n      description: Creates an institution belonging to a user.\n      tags:\n        - Institutions\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the user\n          required: true\n          schema:\n            type: integer\n          example: 42\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - title\n                - currency_code\n              properties:\n                title:\n                  type: string\n                  description: A title for the institution.\n                  example: Bank of Foo\n                currency_code:\n                  type: string\n                  description: A currency code for the institution.\n                  example: NZD\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Institution'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '422':\n          $ref: '#/components/responses/422'\n  '/accounts/{id}':\n    get:\n      summary: Get account\n      operationId: getAccountById\n      description: Gets an account by its ID.\n      tags:\n        - Accounts\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Account'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the account.\n          required: true\n          schema:\n            type: integer\n          example: 42\n    put:\n      summary: Update account\n      operationId: updateAccountById\n      description: Updates and returns an account by its ID.\n      tags:\n        - Accounts\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the account.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n                  description: A new title for the account.\n                  example: Savings\n                currency_code:\n                  type: string\n                  description: A new currency code for the account.\n                  example: NZD\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Account'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '422':\n          $ref: '#/components/responses/422'\n    delete:\n      summary: Delete account\n      operationId: deleteAccountById\n      description: 'Deletes an account and all its data by ID, optionally merge scenarios into another account.'\n      tags:\n        - Accounts\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the account.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      responses:\n        '204':\n          description: Success\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '422':\n          $ref: '#/components/responses/422'\n  '/users/{id}/accounts':\n    get:\n      summary: List accounts in user\n      operationId: listAccounts\n      description: Lists all accounts belonging to the user by their ID.\n      tags:\n        - Accounts\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the user.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Account'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n    put:\n      summary: Update the display order of accounts in user\n      operationId: updateAccountDisplayOrder\n      description: 'Updates the display order of accounts belonging to the user, by accepting an array of accounts in their new display order.'\n      tags:\n        - Accounts\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the user.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - accounts\n              properties:\n                accounts:\n                  type: array\n                  description: List the account objects in their new display order.\n                  items:\n                    $ref: '#/components/schemas/Account'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Account'\n        '400':\n          $ref: '#/components/responses/400'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n    post:\n      summary: Create an account in user\n      operationId: createUserAccount\n      description: Creates and returns an account belonging to the user by their ID.\n      tags:\n        - Accounts\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the user.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - institution_id\n                - title\n                - currency_code\n                - type\n              properties:\n                institution_id:\n                  type: integer\n                  description: The ID of the institution to create this account in.\n                  example: 42\n                title:\n                  type: string\n                  description: A title for the account.\n                  example: Foo\n                currency_code:\n                  type: string\n                  description: A currency code for the account.\n                  example: NZD\n                type:\n                  type: string\n                  description: The type of the account.\n                  # enum:\n                  #   - bank\n                  #   - credits\n                  #   - loans\n                  #   - mortgage\n                  #   - stocks\n                  #   - vehicle\n                  #   - property\n                  #   - other_asset\n                  #   - other_liability\n                  example: bank\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Account'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n  '/institutions/{id}/accounts':\n    get:\n      summary: List accounts in institution\n      operationId: listAccountsByInstitution\n      description: Lists accounts belonging to an institution by its ID.\n      tags:\n        - Accounts\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the institution.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Account'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n  '/transaction_accounts/{id}':\n    get:\n      summary: Get transaction account\n      operationId: getTransactionAccount\n      description: Gets a transaction account by its ID.\n      tags:\n        - Transaction Accounts\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the transaction account.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionAccount'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n    put:\n      summary: Update transaction account\n      operationId: updateTransactionAccount\n      description: Change which institution the transaction account belongs to.\n      tags:\n        - Transaction Accounts\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the transaction account.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                institution_id:\n                  type: integer\n                  description: The unique identifier of a new institution for the transaction account.\n                  example: 42\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionAccount'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n  '/users/{id}/transaction_accounts':\n    get:\n      summary: List transaction accounts in user\n      operationId: listTransactionAccountsByUserId\n      description: List all transaction accounts belonging to a user.\n      tags:\n        - Transaction Accounts\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the user.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TransactionAccount'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n  '/transactions/{id}':\n    get:\n      summary: Get a transaction\n      operationId: getTransaction\n      description: Gets a transaction by its ID.\n      tags:\n        - Transactions\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the transaction.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Transaction'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n    put:\n      summary: Update a transaction\n      operationId: updateTransaction\n      description: Updates a transaction by its ID.\n      tags:\n        - Transactions\n      parameters:\n        - name: labels\n          in: query\n          description: A new set of labels for the transaction.\n          required: false\n          schema:\n            type: string\n            description: A new comma-separated set of labels for the transaction.\n          example: 'foo,bar,baz'\n        - name: id\n          in: path\n          description: The unique identifier of the transaction.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                memo:\n                  type: string\n                  description: A new memo for the transaction.\n                  example: Rent\n                cheque_number:\n                  type: string\n                  description: A new cheque number for the transaction.\n                  example: '503113643691'\n                payee:\n                  type: string\n                  description: A new payee for the transaction.\n                  example: Bill\n                amount:\n                  type: number\n                  description: A new amount for the transaction.\n                  example: 225\n                date:\n                  type: string\n                  description: A new date for the transaction.\n                  example: '2018-02-27'\n                is_transfer:\n                  type: boolean\n                  description: Whether the transaction is a transfer or not.\n                  example: false\n                category_id:\n                  type: integer\n                  description: The unique identifier of a new category for the transaction.\n                  example: 42\n                note:\n                  type: string\n                  description: A new note for the transaction.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Transaction'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '422':\n          $ref: '#/components/responses/422'\n  '/users/{id}/transactions':\n    get:\n      summary: List transactions in user\n      description: Lists transactions belonging to a user by their ID.\n      operationId: List transactions user\n      tags:\n        - Transactions\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the account.\n          required: true\n          schema:\n            type: integer\n          example: 42\n        - name: start_date\n          in: query\n          description: 'Return only transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user''s subscription.'\n          required: false\n          schema:\n            type: string\n          example: '2016-11-01'\n        - name: end_date\n          in: query\n          description: 'Return transactions that fall on or before this date. Required if start_date is provided. If not provided, defaults to today''s date.'\n          required: false\n          schema:\n            type: string\n          example: '2016-11-30'\n        - name: only_uncategorised\n          in: query\n          description: 'If set, will return only uncategorised results.'\n          required: false\n          schema:\n            type: integer\n          example: 1\n        - name: type\n          in: query\n          description: Only return transactions of this type.\n          required: false\n          schema:\n            type: string\n            # enum:\n            #   - debit\n            #   - credit\n          example: debit\n        - name: search\n          in: query\n          description: 'Return transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in yyyy-mm-dd format.'\n          required: false\n          schema:\n            type: string\n          example: Paypal\n        - name: page\n          in: query\n          description: Choose a particular page of the results.\n          required: false\n          schema:\n            type: integer\n          example: 3\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Transaction'\n        '400':\n          $ref: '#/components/responses/400'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n  '/accounts/{id}/transactions':\n    get:\n      summary: List transactions in account\n      description: Lists transactions belonging to an account by its ID.\n      operationId: List transactions account\n      tags:\n        - Transactions\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the account.\n          required: true\n          schema:\n            type: integer\n          example: 42\n        - name: start_date\n          in: query\n          description: 'Return only transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user''s subscription.'\n          required: false\n          schema:\n            type: string\n          example: '2016-11-01'\n        - name: end_date\n          in: query\n          description: 'Return transactions that fall on or before this date. Required if start_date is provided. If not provided, defaults to today''s date.'\n          required: false\n          schema:\n            type: string\n          example: '2016-11-30'\n        - name: only_uncategorised\n          in: query\n          description: 'If set, will return only uncategorised results.'\n          required: false\n          schema:\n            type: integer\n          example: 1\n        - name: type\n          in: query\n          description: Only return transactions of this type.\n          required: false\n          schema:\n            type: string\n            # enum:\n            #   - debit\n            #   - credit\n          example: debit\n        - name: search\n          in: query\n          description: 'Return transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in yyyy-mm-dd format.'\n          required: false\n          schema:\n            type: string\n          example: Paypal\n        - name: page\n          in: query\n          description: Choose a particular page of the results.\n          required: false\n          schema:\n            type: integer\n          example: 3\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Transaction'\n        '400':\n          $ref: '#/components/responses/400'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n  '/transaction_accounts/{id}/transactions':\n    get:\n      summary: List transactions in transaction account\n      operationId: listTransactionsByTransactionAccount\n      description: Lists transactions belonging to a transaction account by its ID.\n      tags:\n        - Transactions\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the transaction account.\n          required: true\n          schema:\n            type: integer\n          example: 42\n        - name: start_date\n          in: query\n          description: 'Return only transactions on or after this date. Required if `end_date` is provided. If not provided, defaults to the furtherest date allowed by the user''s subscription.'\n          required: false\n          schema:\n            type: string\n          example: '2016-11-01'\n        - name: end_date\n          in: query\n          description: 'Return transactions that fall on or before this date. Required if `start_date` is provided. If not provided, defaults to today''s date.'\n          required: false\n          schema:\n            type: string\n          example: '2016-11-30'\n        - name: only_uncategorised\n          in: query\n          description: 'If set, will return only uncategorised results.'\n          required: false\n          schema:\n            type: integer\n          example: 1\n        - name: type\n          in: query\n          description: Only return transactions of this type.\n          required: false\n          schema:\n            type: string\n            # enum:\n            #   - debit\n            #   - credit\n          example: debit\n        - name: search\n          in: query\n          description: 'Return transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in yyyy-mm-dd format.'\n          required: false\n          schema:\n            type: string\n          example: Paypal\n        - name: page\n          in: query\n          description: Choose a particular page of the results.\n          required: false\n          schema:\n            type: integer\n          example: 3\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Transaction'\n        '400':\n          $ref: '#/components/responses/400'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n    post:\n      summary: Create a transaction in transaction account\n      operationId: createTransactionForTransactionAccount\n      description: Creates a transaction in a transaction account by its ID.\n      tags:\n        - Transactions\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the transaction account.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - payee\n                - amount\n                - date\n              properties:\n                payee:\n                  type: string\n                  description: The payee/merchant of the transaction.\n                  example: Tex Otago\n                amount:\n                  type: number\n                  description: 'The amount of the transaction. A positive amount is a credit, and a negative amount is a debit.'\n                  example: 11.5\n                date:\n                  type: string\n                  description: The date when the transaction occurred.\n                  example: '2018-02-27'\n                is_transfer:\n                  type: boolean\n                  description: Whether the transaction should be indicated as a transfer.\n                  example: false\n                labels:\n                  type: string\n                  description: A set of comma-separated labels for the transaction.\n                  example: 'lunch,mexican'\n                category_id:\n                  type: integer\n                  description: The unique identifier of a category for the transaction.\n                  example: 42\n                note:\n                  type: string\n                  description: A note for the transaction.\n                  example: I really enjoyed the loaded corn chips\n                memo:\n                  type: string\n                  description: A memo for the transaction.\n                cheque_number:\n                  type: string\n                  description: A cheque number for the transaction.\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Transaction'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '422':\n          $ref: '#/components/responses/422'\n  '/categories/{id}':\n    get:\n      summary: Get category\n      description: Gets a particular category by its ID.\n      operationId: getCategoryById\n      tags:\n        - Categories\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the category.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Category'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n    put:\n      summary: Update category\n      operationId: updateCategory\n      description: 'Updates the title, colour or parent of the category.'\n      tags:\n        - Categories\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the category.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n                  description: A new title for the category.\n                  example: Food\n                colour:\n                  type: string\n                  description: A new CSS-style hex colour for the category.\n                  example: '#e0e7ff'\n                parent_id:\n                  type: integer\n                  description: 'The unique identifier of a parent category for the category, making this category a child of that category.'\n                  example: 42\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Category'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '422':\n          $ref: '#/components/responses/422'\n    delete:\n      summary: Delete category\n      operationId: deleteCategory\n      description: 'Deletes a particular category by its ID. This will delete all budgets within the category, and uncategorize all transactions assigned to the category.'\n      tags:\n        - Categories\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the category.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      responses:\n        '204':\n          description: Success\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n  '/users/{id}/categories':\n    get:\n      summary: List categories in user\n      operationId: listCategoriesByUserId\n      description: Lists all categories belonging to a user by their ID.\n      tags:\n        - Categories\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the user.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Category'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n    post:\n      summary: Create category in user\n      operationId: createCategoryForUser\n      description: Creates a category belonging to the user by their ID.\n      tags:\n        - Categories\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the user.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - title\n              properties:\n                title:\n                  type: string\n                  description: A title for the category.\n                  example: Food\n                colour:\n                  type: string\n                  description: A CSS-style hex colour for the category.\n                  example: '#e0e7ff'\n                parent_id:\n                  type: integer\n                  description: The unique identifier of a category to be the parent of this category.\n                  example: 42\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Category'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '422':\n          $ref: '#/components/responses/422'\n  '/users/{id}/category_rules':\n    get:\n      summary: List category rules in user\n      description: Lists all category rules belonging to a user by their ID.\n      operationId: Create category rule in user\n      tags:\n        - Category Rules\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the user.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CategoryRule'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n  '/categories/{id}/category_rules':\n    post:\n      summary: Create category rule in category\n      description: Creates a rule to allocate a category to transactions.\n      operationId: Create category rule in category\n      tags:\n        - Category Rules\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the category.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - category_id\n                - payee_matches\n              properties:\n                payee_matches:\n                  type: string\n                  description: The keyword/s to match the transaction payees.\n                  example: Countdown\n                apply_to_uncategorised:\n                  type: boolean\n                  description: Apply the created category rule to all uncategorised transactions.\n                  example: true\n                apply_to_all:\n                  type: boolean\n                  description: Apply the created category rule to all transactions.\n                  example: false\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CategoryRule'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '422':\n          $ref: '#/components/responses/422'\n  '/users/{id}/budget':\n    get:\n      summary: List budget for user\n      operationId: listBudgetForUser\n      description: 'Lists the user''s budget, consisting of one or more budget analysis packages, one per category. Akin to the list on the Budget page in PocketSmith.'\n      tags:\n        - Budgeting\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the account.\n          required: true\n          schema:\n            type: integer\n          example: 42\n        - name: roll_up\n          in: query\n          description: 'Whether parent categories should have their children rolled up into them. When used, the children will still appear in the collection on their own, but their actual and forecast figures will be rolled up to the root parent.'\n          required: false\n          schema:\n            type: boolean\n          example: true\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/BudgetAnalysisPackage'\n  '/users/{id}/budget_summary':\n    get:\n      summary: Get budget summary for user\n      operationId: getBudgetSummaryForUser\n      description: 'Get the user''s budget summary, containing an expense and income analysis for all categories (excluding transfer categories) for the given period and date range. Akin to the overall budget shown on the Budget page in PocketSmith.'\n      tags:\n        - Budgeting\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the user.\n          required: true\n          schema:\n            type: integer\n          example: 42\n        - name: period\n          in: query\n          description: 'The period to analyse in, one of `weeks`, `months` or `years`. Also supported is `event`, although event period analysis is only possible when the budget events gathered align, so in this case where all categories are analysed together, it''s highly unlikely that event period analysis will be possible.'\n          required: true\n          schema:\n            type: string\n            # enum:\n            #   - weeks\n            #   - months\n            #   - years\n            #   - event\n          example: weeks\n        - name: interval\n          in: query\n          description: 'The period interval, e.g. if the interval is 2 and the period is weeks, the budget will be analysed fortnightly.'\n          required: true\n          schema:\n            type: integer\n          example: 2\n        - name: start_date\n          in: query\n          description: The date to start analysing the budget from. This will be bumped out to make full periods as necessary.\n          required: true\n          schema:\n            type: string\n          example: '2016-11-01'\n        - name: end_date\n          in: query\n          description: The date to stop analysing the budget from. This will be bumped out to make full periods as necessary.\n          required: true\n          schema:\n            type: string\n          example: '2016-11-30'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/BudgetAnalysisPackage'\n  '/users/{id}/trend_analysis':\n    get:\n      summary: Get trend analysis for user\n      operationId: getTrendAnalysisForUser\n      description: Get an income and/or expense budget analysis for the given date range and period across any number of categories and scenarios. Akin to the Trends page in PocketSmith.\n      tags:\n        - Budgeting\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the user.\n          required: true\n          schema:\n            type: integer\n          example: 42\n        - name: period\n          in: query\n          description: 'The period to analyse in, one of `weeks`, `months` or `years`. Also supported is `event`, although event period analysis is only possible when the budget events gathered align, so in this case where all categories are analysed together, it''s highly unlikely that event period analysis will be possible.'\n          required: true\n          schema:\n            type: string\n            # enum:\n            #   - weeks\n            #   - months\n            #   - years\n            #   - event\n          example: weeks\n        - name: interval\n          in: query\n          description: 'The period interval, e.g. if the interval is 2 and the period is weeks, the budget will be analysed fortnightly.'\n          required: true\n          schema:\n            type: integer\n          example: true\n        - name: start_date\n          in: query\n          description: The date to start analysing the budget from. This will be bumped out to make full periods as necessary.\n          required: true\n          schema:\n            type: string\n          example: '2016-11-01'\n        - name: end_date\n          in: query\n          description: The date to stop analysing the budget from. This will be bumped out to make full periods as necessary.\n          required: true\n          schema:\n            type: string\n          example: '2016-11-30'\n        - name: categories\n          in: query\n          description: A comma-separated list of category IDs to analyse.\n          required: true\n          schema:\n            type: string\n          example: '42,49'\n        - name: scenarios\n          in: query\n          description: 'A comma-separated list of scenario IDs to analyse. You''re likely going to want to include all a user''s scenarios here, unless you have reason to only analyse for a subset of scenarios. Regardless of what scenarios are analysed, all actuals (transactions) across all accounts will be included.'\n          required: true\n          schema:\n            type: string\n          example: '11,29'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/BudgetAnalysisPackage'\n  '/attachments/{id}':\n    get:\n      summary: Get attachment\n      operationId: getAttachment\n      description: Gets a particular attachment by its ID.\n      tags:\n        - Attachments\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the attachment.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Attachment'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n    put:\n      summary: Update attachment\n      operationId: updateAttachment\n      description: Updates the title of the attachment.\n      tags:\n        - Attachments\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the attachment.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n                  description: 'The new title of the attachment. If the title is blank or not provided, the server will derive a title from the file name.'\n                  example: Invoice for taxi\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Attachment'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n    delete:\n      summary: Delete attachment\n      operationId: deleteAttachment\n      description: Deletes a particular attachment by its ID.\n      tags:\n        - Attachments\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the attachment.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      responses:\n        '204':\n          description: Success\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n  '/users/{id}/attachments':\n    get:\n      summary: Lists attachments in user\n      description: Lists attachments belonging to a user by their ID.\n      operationId: List attachment user\n      tags:\n        - Attachments\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the user.\n          required: true\n          schema:\n            type: integer\n          example: 42\n        - name: unassigned\n          in: query\n          description: 'If set, returns unassigned attachments, that are available for assigning to a transaction.'\n          required: false\n          schema:\n            type: integer\n          example: 1\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Attachment'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n    post:\n      summary: Create attachment in user\n      description: Creates an attachment belonging to the user by their ID.\n      operationId: Create attachment user\n      tags:\n        - Attachments\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the user.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n                  description: 'The title of the attachment. If the title is blank or not provided, the title will derived from the file name.'\n                  example: Invoice for taxi\n                file_name:\n                  type: string\n                  description: The file name of the attachment.\n                  example: taxi.png\n                file_data:\n                  type: string\n                  format: base64\n                  description: 'The base64-encoded contents of the source file. The supported file types are png, jpg, pdf, xls, xlsx, doc, docx.'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Attachment'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '422':\n          $ref: '#/components/responses/422'\n  '/transactions/{id}/attachments':\n    get:\n      summary: List attachments in transaction\n      description: Lists attachments belonging to a transaction by their ID.\n      operationId: List attachment transaction\n      tags:\n        - Attachments\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the transaction.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Attachment'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n    post:\n      summary: Assigns attachment to transaction\n      description: Assigns an attachment to the transaction by their ID.\n      operationId: Assigns attachment to transaction\n      tags:\n        - Attachments\n      parameters:\n        - name: id\n          in: path\n          description: The unique identifier of the transaction.\n          required: true\n          schema:\n            type: integer\n          example: 42\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                attachment_id:\n                  type: integer\n                  description: The unique identifier of the attachment.\n                  example: 1438154\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Attachment'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '422':\n          $ref: '#/components/responses/422'\n  '/transactions/{transaction_id}/attachments/{attachment_id}':\n    delete:\n      summary: Unassigns attachment in transaction\n      operationId: unassignAttachment\n      description: 'Unassigns a particular attachment by its ID from the transaction ID. This does not delete the attachment, it only removes its association from the transaction.'\n      tags:\n        - Attachments\n      parameters:\n        - name: transaction_id\n          in: path\n          description: The unique identifier of the transaction.\n          required: true\n          schema:\n            type: integer\n          example: 42\n        - name: attachment_id\n          in: path\n          description: The unique identifier of the attachment.\n          required: true\n          schema:\n            type: integer\n          example: 1438154\n      responses:\n        '204':\n          description: Success\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n# security:\n#   - developerKey: []\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/pocketsmith/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/pocketsmith/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}