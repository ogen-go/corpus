{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Nimon77/ft_transcendence"
		},
		"file": {
			"name": "swagger.json",
			"size": 0,
			"path": "backend/swagger/swagger.json",
			"byteSize": 28930,
			"content": "{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"BananaPong\",\n    \"description\": \"This is the documentation of the BananaPong server. Remember that the JWT is necessary for all the operations (except the ones that are public), Make sure you input a correct JWT token in the Authorize menu.\",\n    \"version\": \"2.0\",\n    \"contact\": {\n      \"email\": \"droge@student.42.fr\"\n    }\n  },\n  \"tags\": [\n    {\n      \"name\": \"auth\",\n      \"description\": \"Everything about authentification\"\n    },\n    {\n      \"name\": \"pong\",\n      \"description\": \"Everything for the pong game\"\n    },\n    {\n      \"name\": \"channel me\",\n      \"description\": \"Everything about the channels for the current user\"\n    },\n    {\n      \"name\": \"channel id\",\n      \"description\": \"Everything about the channels for any user\"\n    },\n    {\n      \"name\": \"user me\",\n      \"description\": \"Everything about the users for the current user\"\n    },\n    {\n      \"name\": \"user id\",\n      \"description\": \"Everything about the users for any user\"\n    },\n    {\n      \"name\": \"testing\",\n      \"description\": \"Useful routes for testing that are disabled by default (commented)\"\n    }\n  ],\n  \"servers\": [],\n  \"components\": {\n    \"securitySchemes\": {\n      \"bearerAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": \"JWT\"\n      }\n    },\n    \"schemas\": {\n      \"User\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"number\",\n            \"example\": 1\n          },\n          \"connection\": {\n            \"$ref\": \"#/components/schemas/Connection\"\n          },\n          \"avatar\": {\n            \"$ref\": \"#/components/schemas/Avatar\"\n          },\n          \"username\": {\n            \"type\": \"string\",\n            \"example\": \"dimitri\"\n          },\n          \"profileCompleted\": {\n            \"type\": \"boolean\",\n            \"example\": \"true\"\n          },\n          \"rank\": {\n            \"type\": \"number\",\n            \"example\": 100\n          },\n          \"followed\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"number\"\n            },\n            \"example\": [\n              65255,\n              65350\n            ]\n          },\n          \"blocked\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"number\"\n            },\n            \"example\": [\n              65243,\n              65379\n            ]\n          },\n          \"status\": {\n            \"type\": \"number\",\n            \"example\": 1\n          },\n          \"won\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/Match\"\n            }\n          },\n          \"lost\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/Match\"\n            }\n          }\n        }\n      },\n      \"TextChannel\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"number\",\n            \"example\": 1\n          },\n          \"user\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/User\"\n            }\n          },\n          \"log\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/Log\"\n            }\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"example\": \"les bgs\"\n          },\n          \"public\": {\n            \"type\": \"boolean\",\n            \"example\": \"false\"\n          },\n          \"password\": {\n            \"type\": \"string\",\n            \"example\": \"password\"\n          },\n          \"owner\": {\n            \"$ref\": \"#/components/schemas/User\"\n          },\n          \"adminId\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"number\"\n            },\n            \"example\": [\n              65000,\n              65350\n            ]\n          },\n          \"muted\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/MutedUser\"\n            }\n          },\n          \"banned\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/BannedUser\"\n            }\n          }\n        }\n      },\n      \"DMChannel\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"number\",\n            \"example\": 1\n          },\n          \"user\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/User\"\n            }\n          },\n          \"log\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/Log\"\n            }\n          }\n        }\n      },\n      \"BannedUser\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"number\",\n            \"example\": 1\n          },\n          \"user\": {\n            \"$ref\": \"#/components/schemas/User\"\n          },\n          \"endOfBan\": {\n            \"type\": \"string\",\n            \"example\": \"2022-06-29\"\n          },\n          \"room\": {\n            \"$ref\": \"#/components/schemas/TextChannel\"\n          }\n        }\n      },\n      \"MutedUser\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"number\",\n            \"example\": 1\n          },\n          \"user\": {\n            \"$ref\": \"#/components/schemas/User\"\n          },\n          \"endOfMute\": {\n            \"type\": \"string\",\n            \"example\": \"2022-06-29\"\n          },\n          \"room\": {\n            \"$ref\": \"#/components/schemas/TextChannel\"\n          }\n        }\n      },\n      \"Avatar\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"number\",\n            \"example\": 65000\n          },\n          \"filename\": {\n            \"type\": \"string\",\n            \"example\": \"image.png\"\n          },\n          \"data\": {\n            \"type\": \"string\",\n            \"format\": \"bytea\"\n          }\n        }\n      },\n      \"Log\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"number\",\n            \"example\": 1\n          },\n          \"message\": {\n            \"type\": \"string\",\n            \"example\": \"salut\"\n          },\n          \"user\": {\n            \"$ref\": \"#/components/schemas/User\"\n          }\n        }\n      },\n      \"Password\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"oldPassword\": {\n            \"type\": \"string\",\n            \"example\": \"oldpass\"\n          },\n          \"newPassword\": {\n            \"type\": \"string\",\n            \"example\": \"newpass\"\n          }\n        }\n      },\n      \"Match\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"number\",\n            \"example\": 1\n          },\n          \"score\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"number\"\n            },\n            \"example\": [\n              2,\n              5\n            ]\n          },\n          \"date\": {\n            \"type\": \"string\",\n            \"example\": \"2022-06-29\"\n          },\n          \"winner\": {\n            \"$ref\": \"#/components/schemas/User\"\n          },\n          \"loser\": {\n            \"$ref\": \"#/components/schemas/User\"\n          }\n        }\n      },\n      \"Connection\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"42\": {\n            \"type\": \"number\",\n            \"example\": 65000\n          },\n          \"id\": {\n            \"type\": \"number\",\n            \"example\": 1\n          },\n          \"user\": {\n            \"$ref\": \"#/components/schemas/User\"\n          },\n          \"otp\": {\n            \"type\": \"string\",\n            \"example\": \"DMBEA62FLR5UGNSD\"\n          }\n        }\n      }\n    },\n    \"responses\": {\n      \"UnauthorizedError\": {\n        \"description\": \"JWT Token is invalid or empty\"\n      },\n      \"OK\": {\n        \"description\": \"Expected response\"\n      },\n      \"UnauthorizedValue\": {\n        \"description\": \"You tried to modify a value you don't have access to\"\n      },\n      \"UserNotExist\": {\n        \"description\": \"User does not exist\"\n      },\n      \"ChannelNotExist\": {\n        \"description\": \"Channel does not exist\"\n      },\n      \"AvatarNotExist\": {\n        \"description\": \"Avatar does not exist\"\n      },\n      \"NotExist\": {\n        \"description\": \"User and / or Channel does not exist\"\n      },\n      \"ValueNotSpecified\": {\n        \"description\": \"One value that was requiered was not specified\"\n      },\n      \"GameroomNotExist\": {\n        \"description\": \"Gameroom does not exist\"\n      },\n      \"DatabaseError\": {\n        \"description\": \"There was an error in the database\"\n      },\n      \"AlreadyExist\": {\n        \"description\": \"Entity already exists in the object\"\n      }\n    }\n  },\n  \"paths\": {\n    \"/auth/2fa\": {\n      \"post\": {\n        \"tags\": [\n          \"auth\"\n        ],\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ],\n        \"summary\": \"The current user creates a 2fa authentification\",\n        \"operationId\": \"IdController_Create2FA\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"description\": \"New code for 2fa\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"code\": {\n                    \"type\": \"string\",\n                    \"example\": 123456\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/OK\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/DatabaseError\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/UnauthorizedError\"\n          },\n          \"403\": {\n            \"$ref\": \"#/components/responses/UnauthorizedValue\"\n          },\n          \"409\": {\n            \"$ref\": \"#/components/responses/AlreadyExist\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"auth\"\n        ],\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ],\n        \"summary\": \"The current user deletes his 2fa authentification\",\n        \"operationId\": \"IdController_Delete2FA\",\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/OK\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/DatabaseError\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/UnauthorizedError\"\n          }\n        }\n      }\n    },\n    \"/auth/otp\": {\n      \"post\": {\n        \"tags\": [\n          \"auth\"\n        ],\n        \"summary\": \"The current user generates a new JWT for 2fa\",\n        \"operationId\": \"IdController_loginOTP\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"description\": \"Old JWT token and 2fa code\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"token\": {\n                    \"type\": \"string\",\n                    \"example\": \"ey.eyJzdWIiOiI2MDUzMiIsImlhdCI6MTY0Nzg3OTkwMiwiZXh\"\n                  },\n                  \"code\": {\n                    \"type\": \"string\",\n                    \"example\": 123456\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/OK\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/UnauthorizedError\"\n          },\n          \"403\": {\n            \"$ref\": \"#/components/responses/UnauthorizedValue\"\n          },\n          \"409\": {\n            \"$ref\": \"#/components/responses/AlreadyExist\"\n          }\n        }\n      }\n    },\n    \"/auth/jwt\": {\n      \"get\": {\n        \"tags\": [\n          \"auth\"\n        ],\n        \"summary\": \"Checks if the JWT is valid or not, returns a boolean\",\n        \"operationId\": \"AuthController_jwt\",\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/OK\"\n          }\n        }\n      }\n    },\n    \"/auth/42/callback\": {\n      \"get\": {\n        \"tags\": [\n          \"auth\"\n        ],\n        \"summary\": \"Authentificate with 42 oauth then generates a JWT returned in the URL\",\n        \"operationId\": \"AuthController_login\",\n        \"parameters\": [],\n        \"responses\": {\n          \"302\": {\n            \"$ref\": \"#/components/responses/OK\"\n          }\n        }\n      }\n    },\n    \"/auth/2fa/qrcode\": {\n      \"get\": {\n        \"tags\": [\n          \"auth\"\n        ],\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ],\n        \"summary\": \"Get the 2fa QR code for the current user\",\n        \"operationId\": \"AuthController_get2FA\",\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/OK\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/UnauthorizedError\"\n          },\n          \"403\": {\n            \"$ref\": \"#/components/responses/UnauthorizedValue\"\n          },\n          \"409\": {\n            \"$ref\": \"#/components/responses/AlreadyExist\"\n          }\n        }\n      }\n    },\n    \"/auth/generate/{id}\": {\n      \"get\": {\n        \"tags\": [\n          \"testing\"\n        ],\n        \"summary\": \"Generates a JWT token for the user (specified by id), if that user doesn't exist it will get created\",\n        \"operationId\": \"AuthController_generateJWT\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"description\": \"Id of user\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/OK\"\n          }\n        }\n      }\n    },\n    \"/pong/{id}\": {\n      \"get\": {\n        \"tags\": [\n          \"pong\"\n        ],\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ],\n        \"summary\": \"Returns the Gameroom the user is in (specified by id)\",\n        \"operationId\": \"MeController_getRoomForUser\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"description\": \"Id of the user\",\n            \"required\": true,\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/OK\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/UnauthorizedError\"\n          },\n          \"404\": {\n            \"$ref\": \"#/components/responses/GameroomNotExist\"\n          }\n        }\n      }\n    },\n    \"/channel\": {\n      \"post\": {\n        \"tags\": [\n          \"channel me\"\n        ],\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ],\n        \"summary\": \"The current user creates a channel object\",\n        \"operationId\": \"IdController_createChannel\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"description\": \"New channel object\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"name\": {\n                    \"type\": \"string\",\n                    \"example\": \"le gang\"\n                  },\n                  \"public\": {\n                    \"type\": \"boolean\",\n                    \"example\": \"false\"\n                  },\n                  \"password\": {\n                    \"type\": \"string\",\n                    \"example\": \"password\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"$ref\": \"#/components/responses/OK\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/DatabaseError\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/UnauthorizedError\"\n          },\n          \"403\": {\n            \"$ref\": \"#/components/responses/UnauthorizedValue\"\n          },\n          \"404\": {\n            \"$ref\": \"#/components/responses/UserNotExist\"\n          }\n        }\n      }\n    },\n    \"/channel/{id}/change\": {\n      \"post\": {\n        \"tags\": [\n          \"channel me\"\n        ],\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ],\n        \"summary\": \"Modifies the channel object (specified by id) (more specifically the password)\",\n        \"operationId\": \"IdController_changePass\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"description\": \"Id of the channel\",\n            \"required\": true,\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"description\": \"New password object\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/Password\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/OK\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/DatabaseError\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/UnauthorizedError\"\n          },\n          \"403\": {\n            \"$ref\": \"#/components/responses/UnauthorizedValue\"\n          },\n          \"404\": {\n            \"$ref\": \"#/components/responses/NotExist\"\n          }\n        }\n      }\n    },\n    \"/channel/\": {\n      \"get\": {\n        \"tags\": [\n          \"channel id\"\n        ],\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ],\n        \"summary\": \"Returns all the channels objects of the server (some information is excluded)\",\n        \"operationId\": \"IdController_getAllChannels\",\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/OK\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/UnauthorizedError\"\n          }\n        }\n      }\n    },\n    \"/user/me\": {\n      \"get\": {\n        \"tags\": [\n          \"user me\"\n        ],\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ],\n        \"summary\": \"Returns the current user object\",\n        \"operationId\": \"MeController_getUser\",\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/OK\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/UnauthorizedError\"\n          },\n          \"404\": {\n            \"$ref\": \"#/components/responses/UserNotExist\"\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"user me\"\n        ],\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ],\n        \"summary\": \"Modifies the current user object\",\n        \"operationId\": \"MeController_updateUser\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"description\": \"Updated user object\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"username\": {\n                    \"type\": \"string\",\n                    \"example\": \"dimitri\"\n                  },\n                  \"followed\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"number\"\n                    },\n                    \"example\": [\n                      65255,\n                      65350\n                    ]\n                  },\n                  \"blocked\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"number\"\n                    },\n                    \"example\": [\n                      65243,\n                      65379\n                    ]\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/OK\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/DatabaseError\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/UnauthorizedError\"\n          },\n          \"403\": {\n            \"$ref\": \"#/components/responses/UnauthorizedValue\"\n          },\n          \"404\": {\n            \"$ref\": \"#/components/responses/UserNotExist\"\n          }\n        }\n      }\n    },\n    \"/user/me/avatar\": {\n      \"get\": {\n        \"tags\": [\n          \"user me\"\n        ],\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ],\n        \"summary\": \"Returns the current user's avatar\",\n        \"operationId\": \"MeController_getAvatar\",\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Expected response\",\n            \"content\": {\n              \"image/*\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"format\": \"binary\"\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/UnauthorizedError\"\n          },\n          \"404\": {\n            \"$ref\": \"#/components/responses/UserNotExist\"\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"user me\"\n        ],\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ],\n        \"summary\": \"Modifies the current user's avatar\",\n        \"operationId\": \"MeController_updateAvatar\",\n        \"parameters\": [],\n        \"requestBody\": {\n          \"description\": \"Updated avatar\",\n          \"required\": true,\n          \"content\": {\n            \"multipart/form-data\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"required\": [\n                  \"file\"\n                ],\n                \"properties\": {\n                  \"file\": {\n                    \"description\": \"new Avatar\",\n                    \"type\": \"string\",\n                    \"format\": \"binary\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/OK\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/DatabaseError\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/UnauthorizedError\"\n          },\n          \"404\": {\n            \"$ref\": \"#/components/responses/UserNotExist\"\n          },\n          \"406\": {\n            \"$ref\": \"#/components/responses/AvatarNotExist\"\n          }\n        }\n      }\n    },\n    \"/user/me/block/{id}\": {\n      \"put\": {\n        \"tags\": [\n          \"user me\"\n        ],\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ],\n        \"summary\": \"Modifies the current user's object (more specifically the blocked array)\",\n        \"operationId\": \"MeController_blockUser\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"description\": \"Id of the user\",\n            \"required\": true,\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"description\": \"Id of the user you wish to block\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"number\",\n                    \"example\": 65000\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"$ref\": \"#/components/responses/OK\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/DatabaseError\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/UnauthorizedError\"\n          },\n          \"404\": {\n            \"$ref\": \"#/components/responses/UserNotExist\"\n          }\n        }\n      }\n    },\n    \"/user/me/follow/{id}\": {\n      \"put\": {\n        \"tags\": [\n          \"user me\"\n        ],\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ],\n        \"summary\": \"Modifies the current user's object (more specifically the followed array)\",\n        \"operationId\": \"MeController_followUser\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"description\": \"Id of the user\",\n            \"required\": true,\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"description\": \"Id of the user you wish to follow\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"number\",\n                    \"example\": 65000\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"$ref\": \"#/components/responses/OK\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/DatabaseError\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/UnauthorizedError\"\n          },\n          \"404\": {\n            \"$ref\": \"#/components/responses/UserNotExist\"\n          }\n        }\n      }\n    },\n    \"/user\": {\n      \"get\": {\n        \"tags\": [\n          \"user id\"\n        ],\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ],\n        \"summary\": \"Returns all the users of the server\",\n        \"operationId\": \"IdController_getAllUsers\",\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/OK\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/UnauthorizedError\"\n          }\n        }\n      }\n    },\n    \"/user/{id}\": {\n      \"get\": {\n        \"tags\": [\n          \"user id\"\n        ],\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ],\n        \"summary\": \"Returns the user object (specified by id)\",\n        \"operationId\": \"IdController_getUser\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"description\": \"Id of the user\",\n            \"required\": true,\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/OK\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/UnauthorizedError\"\n          },\n          \"404\": {\n            \"$ref\": \"#/components/responses/UserNotExist\"\n          }\n        }\n      }\n    },\n    \"/user/{id}/avatar\": {\n      \"get\": {\n        \"tags\": [\n          \"user id\"\n        ],\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ],\n        \"summary\": \"Returns the user's avatar (specified by id)\",\n        \"operationId\": \"IdController_getAvatar\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"description\": \"Id of the user\",\n            \"required\": true,\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Expected response\",\n            \"content\": {\n              \"image/*\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"format\": \"binary\"\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/UnauthorizedError\"\n          },\n          \"404\": {\n            \"$ref\": \"#/components/responses/UserNotExist\"\n          }\n        }\n      }\n    },\n    \"/user/matches/{id}\": {\n      \"get\": {\n        \"tags\": [\n          \"user id\"\n        ],\n        \"security\": [\n          {\n            \"bearerAuth\": []\n          }\n        ],\n        \"summary\": \"Returns the user's matches (specified by id)\",\n        \"operationId\": \"IdController_getMatches\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"description\": \"Id of the user\",\n            \"required\": true,\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/OK\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/UnauthorizedError\"\n          },\n          \"404\": {\n            \"$ref\": \"#/components/responses/UserNotExist\"\n          }\n        }\n      }\n    }\n  }\n}",
			"canonicalURL": "/github.com/Nimon77/ft_transcendence@9aa288fc87bc3b165153810343ff0c11641646e9/-/blob/backend/swagger/swagger.json",
			"externalURLs": [
				{
					"url": "https://github.com/Nimon77/ft_transcendence/blob/9aa288fc87bc3b165153810343ff0c11641646e9/backend/swagger/swagger.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}