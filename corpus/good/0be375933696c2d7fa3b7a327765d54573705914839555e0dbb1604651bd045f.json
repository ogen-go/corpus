{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/splunk/splunk-cloud-sdk-python"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "splunk_sdk/kvstore/v1beta1/openapi.yaml",
			"byteSize": 31669,
			"content": "components:\n  parameters:\n    AuthorizationHeaderParam:\n      description: Access token provided by the user (obtained from a known identity\n        provider).\n      in: header\n      name: Authorization\n      required: false\n      schema:\n        pattern: ^Bearer .+\n        type: string\n    BatchSizeParam:\n      description: Number of bytes to return (in MB).\n      in: query\n      name: batchsize\n      required: false\n      schema:\n        type: integer\n    ChunkIndexParam:\n      description: Index of one chunk of collection in snapshot.\n      in: query\n      name: chunkIndex\n      required: true\n      schema:\n        type: integer\n    CollectionParam:\n      description: The name of the collection.\n      in: path\n      name: collection\n      required: true\n      schema:\n        type: string\n    CountParam:\n      description: Maximum number of records to return.\n      in: query\n      name: count\n      required: false\n      schema:\n        type: integer\n    FieldsParam:\n      description: Comma-separated list of fields to include or exclude. Format is\n        `\u003cfield\u003e:\u003cinclude value\u003e`. Valid include values are 1 for include, 0 for exclude\n        with default being 1.\n      in: query\n      name: fields\n      required: false\n      schema:\n        items:\n          type: string\n        type: array\n    FiltersParam:\n      explode: true\n      in: query\n      name: filters\n      required: false\n      schema:\n        type: object\n      style: form\n    IfMatchHeaderParam:\n      description: Record version identifier.\n      in: header\n      name: If-Match\n      required: false\n      schema:\n        type: string\n    IndexParam:\n      description: The name of the index.\n      in: path\n      name: index\n      required: true\n      schema:\n        type: string\n    KeyParam:\n      description: The key of the record.\n      in: path\n      name: key\n      required: true\n      schema:\n        type: string\n    LatestSnapshotTimeParam:\n      description: Latest snapshot time of collection\n      in: query\n      name: latestSnapshotTime\n      required: true\n      schema:\n        type: string\n    MVLEnableParam:\n      description: Determines if the query needs to include results in multi valued\n        fields\n      in: query\n      name: enable_mvl\n      required: false\n      schema:\n        default: false\n        type: boolean\n    OffsetParam:\n      description: Number of records to skip from the start.\n      in: query\n      name: offset\n      required: false\n      schema:\n        type: integer\n    OrderByParam:\n      description: Sort order. Format is `\u003cfield\u003e:\u003csort order\u003e`. Valid sort orders\n        are 1 for ascending, -1 for descending.\n      in: query\n      name: orderby\n      required: false\n      schema:\n        items:\n          type: string\n        type: array\n    OutputLookupJobParam:\n      description: The outputlookup job id.\n      in: path\n      name: outputLookupJobId\n      required: true\n      schema:\n        type: string\n    QueryParam:\n      description: Query JSON expression.\n      in: query\n      name: query\n      required: false\n      schema:\n        type: string\n    ReadLatestParam:\n      description: Determines if the read needs to be time sensitive to match the\n        latest\n      in: query\n      name: latest\n      required: false\n      schema:\n        default: false\n        type: boolean\n    SharedParam:\n      description: Indicates whether to return records only for the user specified\n        in the Splunk-User-Id header or for the default user as well. Only valid if\n        Splunk-User-Id is specified\n      in: query\n      name: shared\n      required: false\n      schema:\n        type: boolean\n    TenantParam:\n      description: The tenant id.\n      in: path\n      name: tenant\n      required: true\n      schema:\n        type: string\n    UserHeaderParam:\n      description: Name of the record(s) owner.\n      in: header\n      name: Splunk-User-Id\n      required: false\n      schema:\n        default: nobody\n        type: string\n  requestBodies:\n    insertRecordRecord:\n      content:\n        application/json:\n          schema:\n            type: object\n      description: Record to add to the collection, formatted as a JSON object.\n      required: true\n    insertRecordsRecords:\n      content:\n        application/json:\n          schema:\n            items:\n              type: object\n            maxItems: 10000\n            minItems: 1\n            type: array\n      description: Array of records to insert.\n      required: true\n  responses:\n    AuthError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n      description: The user isn't authenticated.\n    BadRequestError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n      description: The request isn't valid.\n    DefaultError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n      description: The reason for the error.\n    ForbiddenError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n      description: The operation isn't authorized.\n    InsertRecordsConflictError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n      description: The record already exists.\n    InternalServerError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n      description: An internal server error occurred.\n    NotFoundError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n      description: The resource wasn't found.\n    PreconditionFailedError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n      description: The specified condition for the request could not be met.\n    ServiceUnavailableError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n      description: Service unavailable.\n    TooManyRequestsError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n      description: Too many requests were sent.\n    UnsupportedMediaTypeError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n      description: The media type isn't supported.\n  schemas:\n    CollectionDefinition:\n      properties:\n        collection:\n          description: The collection name.\n          minLength: 1\n          type: string\n      required:\n      - collection\n      type: object\n    CollectionDescription:\n      properties:\n        indexes:\n          description: The list of indexes on this collection.\n          items:\n            $ref: '#/components/schemas/IndexDescription'\n          type: array\n        name:\n          description: The collection name.\n          type: string\n      type: object\n    CollectionStats:\n      properties:\n        collection:\n          description: The collection name.\n          type: string\n        count:\n          description: Number of records in collection.\n          type: integer\n        indexSizes:\n          description: Map of index name to index size in bytes.\n          type: object\n        lastModifiedTime:\n          description: Timestamp when collection was last modified.\n          type: string\n        nindexes:\n          description: Number of indexes on collection.\n          type: integer\n        size:\n          description: Size in bytes of collection, not including indexes.\n          type: integer\n        storageSize:\n          description: Size in bytes of collection, not including indexes.\n          type: integer\n        totalIndexSize:\n          description: Total size of indexes.\n          type: integer\n      required:\n      - collection\n      - count\n      - size\n      - storageSize\n      - lastModifiedTime\n      - nindexes\n      - totalIndexSize\n      - indexSizes\n      type: object\n    CreateCollectionResponse:\n      properties:\n        name:\n          description: The collection name.\n          type: string\n      required:\n      - name\n      type: object\n    CreateTenantResponse:\n      properties:\n        name:\n          description: The name of the tenant.\n          type: string\n      required:\n      - name\n      type: object\n    ErrorResponse:\n      properties:\n        code:\n          description: Internal status code of the error.\n          type: string\n        message:\n          description: Detailed error message.\n          type: string\n      required:\n      - code\n      - message\n      type: object\n    ExportConfiguration:\n      properties:\n        exportFields:\n          description: List of fields to export\n          items:\n            type: string\n          type: array\n      required:\n      - exportFields\n      type: object\n    ExportSnapshotResponse:\n      properties:\n        payloadBase64:\n          description: The binary value of chunk data\n          type: string\n      required:\n      - payloadBase64\n      type: object\n    IndexDefinition:\n      properties:\n        fields:\n          items:\n            $ref: '#/components/schemas/IndexFieldDefinition'\n          type: array\n        name:\n          description: The name of the index.\n          minLength: 1\n          type: string\n      required:\n      - name\n      - fields\n      type: object\n    IndexDescription:\n      properties:\n        collection:\n          description: The collection name.\n          type: string\n        fields:\n          items:\n            $ref: '#/components/schemas/IndexFieldDefinition'\n          type: array\n        name:\n          description: The name of the index.\n          type: string\n      type: object\n    IndexFieldDefinition:\n      properties:\n        direction:\n          description: The sort direction for the indexed field.\n          type: integer\n        field:\n          description: The name of the field to index.\n          type: string\n      required:\n      - field\n      - direction\n      type: object\n    LookupRequest:\n      description: Request payload for lookup query.\n      properties:\n        caseSensitiveMatch:\n          default: true\n          description: Determines whether the lookup match is case sensitive.\n          type: boolean\n        filter:\n          type: object\n        lookupFields:\n          description: List of fields to perform lookup on.\n          items:\n            type: string\n          type: array\n        lookupValues:\n          $ref: '#/components/schemas/LookupValues'\n        name:\n          description: The name of the lookup.\n          type: string\n        outputFields:\n          description: List of output fields to project.\n          items:\n            type: string\n          type: array\n        sid:\n          type: string\n      required:\n      - sid\n      - outputFields\n      - lookupFields\n      - lookupValues\n      type: object\n    LookupValues:\n      description: Corresponding list of tuples for lookupFields (must match ordering\n        in keyHeaders).\n      items:\n        items:\n          type: object\n        minItems: 1\n        type: array\n      type: array\n    OutputLookupsResponse:\n      properties:\n        id:\n          description: The id of outputlookup job.\n          type: string\n      required:\n      - id\n      type: object\n    PingResponse:\n      properties:\n        errorMessage:\n          description: If database is not healthy, detailed error message.\n          type: string\n        status:\n          default: unknown\n          description: Database status.\n          enum:\n          - healthy\n          - unhealthy\n          - unknown\n          type: string\n      required:\n      - status\n      type: object\n    QueryDefinition:\n      properties:\n        fields:\n          description: Comma-separated list of fields to include or exclude. Format\n            is `[\"\u003cfield\u003e:\u003cinclude value\u003e\",...]`. Valid include values are 1 for include,\n            0 for exclude with default being 1.\n          items:\n            type: string\n          type: array\n        limit:\n          default: -1\n          description: Maximum number of records to return.\n          type: integer\n        query:\n          description: Query JSON expression.\n          type: object\n        skip:\n          default: -1\n          description: Number of records to skip from the start.\n          type: integer\n        sort:\n          description: Sort order. Format is `[{\u003cfield\u003e:\u003csort order\u003e},...]`. Valid\n            sort orders are 1 for ascending, -1 for descending.\n          items:\n            type: object\n          type: array\n      type: object\n    Record:\n      properties:\n        _key:\n          description: Key of the resulting record.\n          type: string\n        _user:\n          description: User of the resulting record.\n          type: string\n      required:\n      - _user\n      - _key\n      type: object\n    SnapshotInfo:\n      properties:\n        chunkCount:\n          description: Number of chunks in the snapshot\n          type: integer\n        collection:\n          description: The collection name.\n          type: string\n        latestSnapshotTime:\n          description: Timestamp of latest snapshot\n          type: string\n      required:\n      - collection\n      - latestSnapshotTime\n      - chunkCount\n      type: object\n    TenantDescription:\n      properties:\n        collections:\n          description: The list of collections.\n          items:\n            $ref: '#/components/schemas/CollectionDescription'\n          type: array\n        name:\n          description: The name of the tenant.\n          type: string\n      type: object\ninfo:\n  description: With the Splunk Cloud KV store service in Splunk Cloud Services, you\n    can save and retrieve data within your Splunk Cloud apps, enabling you to manage\n    and maintain state in your application.\n  title: KV Store API\n  version: v1beta1.2\nopenapi: 3.0.0\npaths:\n  /{tenant}/kvstore/v1beta1/collections/{collection}:\n    get:\n      description: Use key-value query parameters to filter fields. Fields are implicitly\n        ANDed and values for the same field are implicitly ORed.\n      operationId: listRecords\n      parameters:\n      - $ref: '#/components/parameters/UserHeaderParam'\n      - $ref: '#/components/parameters/FieldsParam'\n      - $ref: '#/components/parameters/CountParam'\n      - $ref: '#/components/parameters/OffsetParam'\n      - $ref: '#/components/parameters/OrderByParam'\n      - $ref: '#/components/parameters/FiltersParam'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  type: object\n                type: array\n          description: Returns a list of records.\n          headers:\n            Content-Encoding:\n              description: Encoding scheme used for the response.\n              schema:\n                enum:\n                - gzip\n                type: string\n        \"400\":\n          $ref: '#/components/responses/BadRequestError'\n        \"401\":\n          $ref: '#/components/responses/AuthError'\n        \"403\":\n          $ref: '#/components/responses/ForbiddenError'\n        \"404\":\n          $ref: '#/components/responses/NotFoundError'\n        \"429\":\n          $ref: '#/components/responses/TooManyRequestsError'\n        \"500\":\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultError'\n      summary: Returns a list of records in a collection with basic filtering, sorting,\n        pagination and field projection.\n      x-authz-scope: kvstore.records.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeaderParam'\n    - $ref: '#/components/parameters/TenantParam'\n    - $ref: '#/components/parameters/CollectionParam'\n    post:\n      operationId: insertRecord\n      parameters:\n      - $ref: '#/components/parameters/UserHeaderParam'\n      requestBody:\n        $ref: '#/components/requestBodies/insertRecordRecord'\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Record'\n          description: The record was inserted successfully.\n        \"400\":\n          $ref: '#/components/responses/BadRequestError'\n        \"401\":\n          $ref: '#/components/responses/AuthError'\n        \"403\":\n          $ref: '#/components/responses/ForbiddenError'\n        \"404\":\n          $ref: '#/components/responses/NotFoundError'\n        \"409\":\n          $ref: '#/components/responses/InsertRecordsConflictError'\n        \"415\":\n          $ref: '#/components/responses/UnsupportedMediaTypeError'\n        \"429\":\n          $ref: '#/components/responses/TooManyRequestsError'\n        \"500\":\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultError'\n      summary: Inserts a record into a collection.\n      x-authz-scope: kvstore.records.create\n  /{tenant}/kvstore/v1beta1/collections/{collection}/batch:\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeaderParam'\n    - $ref: '#/components/parameters/TenantParam'\n    - $ref: '#/components/parameters/CollectionParam'\n    - $ref: '#/components/parameters/UserHeaderParam'\n    post:\n      operationId: insertRecords\n      parameters:\n      - description: |-\n          If allow_updates is false (default), the writes will be performed as a single INSERT. If any record already\n          exists, the entire INSERT will fail and no records will be inserted. If allow_updates is true, the writes\n          will be performed as a single INSERT ON CONFLICT. If one or more records already exists, said records will\n          be updated and their _version's will be incremented. New records will be inserted with a _version of 0.\n        in: query\n        name: allow_updates\n        required: false\n        schema:\n          default: false\n          type: boolean\n      requestBody:\n        $ref: '#/components/requestBodies/insertRecordsRecords'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n          description: Successfully returned a list of the keys of the inserted/updated\n            records.\n        \"201\":\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n          description: Successfully returned a list of the keys of the inserted records.\n        \"400\":\n          $ref: '#/components/responses/BadRequestError'\n        \"401\":\n          $ref: '#/components/responses/AuthError'\n        \"403\":\n          $ref: '#/components/responses/ForbiddenError'\n        \"404\":\n          $ref: '#/components/responses/NotFoundError'\n        \"409\":\n          $ref: '#/components/responses/InsertRecordsConflictError'\n        \"415\":\n          $ref: '#/components/responses/UnsupportedMediaTypeError'\n        \"429\":\n          $ref: '#/components/responses/TooManyRequestsError'\n        \"500\":\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultError'\n      summary: |-\n        Writes multiple records in a single request. If records have duplicate primary keys, only the last duplicate\n        record will be written. If no errors occur, the response array will contain the keys of the written records,\n        in no particular order.\n      x-authz-scope: kvstore.records.create\n  /{tenant}/kvstore/v1beta1/collections/{collection}/indexes:\n    get:\n      operationId: listIndexes\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/IndexDefinition'\n                type: array\n          description: Returns a list of indexes.\n          headers:\n            Content-Encoding:\n              description: Encoding scheme used for the response.\n              schema:\n                enum:\n                - gzip\n                type: string\n        \"401\":\n          $ref: '#/components/responses/AuthError'\n        \"403\":\n          $ref: '#/components/responses/ForbiddenError'\n        \"404\":\n          $ref: '#/components/responses/NotFoundError'\n        \"429\":\n          $ref: '#/components/responses/TooManyRequestsError'\n        \"500\":\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultError'\n      summary: Returns a list of all indexes on a collection.\n      x-authz-scope: kvstore.indexes.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeaderParam'\n    - $ref: '#/components/parameters/TenantParam'\n    - $ref: '#/components/parameters/CollectionParam'\n    post:\n      operationId: createIndex\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IndexDefinition'\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexDescription'\n          description: The index was created successfully.\n        \"400\":\n          $ref: '#/components/responses/BadRequestError'\n        \"401\":\n          $ref: '#/components/responses/AuthError'\n        \"403\":\n          $ref: '#/components/responses/ForbiddenError'\n        \"404\":\n          $ref: '#/components/responses/NotFoundError'\n        \"409\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: The index already exists.\n        \"415\":\n          $ref: '#/components/responses/UnsupportedMediaTypeError'\n        \"429\":\n          $ref: '#/components/responses/TooManyRequestsError'\n        \"500\":\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultError'\n      summary: Creates an index on a collection.\n      x-authz-scope: kvstore.indexes.create\n  /{tenant}/kvstore/v1beta1/collections/{collection}/indexes/{index}:\n    delete:\n      operationId: deleteIndex\n      responses:\n        \"204\":\n          description: The index was removed successfully.\n        \"401\":\n          $ref: '#/components/responses/AuthError'\n        \"403\":\n          $ref: '#/components/responses/ForbiddenError'\n        \"404\":\n          $ref: '#/components/responses/NotFoundError'\n        \"429\":\n          $ref: '#/components/responses/TooManyRequestsError'\n        \"500\":\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultError'\n      summary: Removes an index from a collection.\n      x-authz-scope: kvstore.indexes.delete\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeaderParam'\n    - $ref: '#/components/parameters/TenantParam'\n    - $ref: '#/components/parameters/CollectionParam'\n    - $ref: '#/components/parameters/IndexParam'\n  /{tenant}/kvstore/v1beta1/collections/{collection}/query:\n    delete:\n      operationId: deleteRecords\n      responses:\n        \"204\":\n          description: The record was removed successfully.\n        \"400\":\n          $ref: '#/components/responses/BadRequestError'\n        \"401\":\n          $ref: '#/components/responses/AuthError'\n        \"403\":\n          $ref: '#/components/responses/ForbiddenError'\n        \"404\":\n          $ref: '#/components/responses/NotFoundError'\n        \"429\":\n          $ref: '#/components/responses/TooManyRequestsError'\n        \"500\":\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultError'\n      summary: Removes records in a collection that match the query.\n      x-authz-scope: kvstore.records.delete\n    get:\n      operationId: queryRecords\n      parameters:\n      - $ref: '#/components/parameters/FieldsParam'\n      - $ref: '#/components/parameters/CountParam'\n      - $ref: '#/components/parameters/OffsetParam'\n      - $ref: '#/components/parameters/OrderByParam'\n      - $ref: '#/components/parameters/SharedParam'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  type: object\n                type: array\n          description: The list of records was returned successfully.\n          headers:\n            Content-Encoding:\n              description: Encoding scheme used for the response.\n              schema:\n                enum:\n                - gzip\n                type: string\n        \"400\":\n          $ref: '#/components/responses/BadRequestError'\n        \"401\":\n          $ref: '#/components/responses/AuthError'\n        \"403\":\n          $ref: '#/components/responses/ForbiddenError'\n        \"404\":\n          $ref: '#/components/responses/NotFoundError'\n        \"429\":\n          $ref: '#/components/responses/TooManyRequestsError'\n        \"500\":\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultError'\n      summary: Returns a list of query records in a collection.\n      x-authz-scope: kvstore.records.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeaderParam'\n    - $ref: '#/components/parameters/TenantParam'\n    - $ref: '#/components/parameters/CollectionParam'\n    - $ref: '#/components/parameters/QueryParam'\n    - $ref: '#/components/parameters/UserHeaderParam'\n    - $ref: '#/components/parameters/MVLEnableParam'\n  /{tenant}/kvstore/v1beta1/collections/{collection}/records/{key}:\n    delete:\n      operationId: deleteRecordByKey\n      responses:\n        \"204\":\n          description: The record with the given key was removed successfully.\n        \"401\":\n          $ref: '#/components/responses/AuthError'\n        \"403\":\n          $ref: '#/components/responses/ForbiddenError'\n        \"404\":\n          $ref: '#/components/responses/NotFoundError'\n        \"429\":\n          $ref: '#/components/responses/TooManyRequestsError'\n        \"500\":\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultError'\n      summary: Deletes a record with a given key.\n      x-authz-scope: kvstore.records.delete\n    get:\n      operationId: getRecordByKey\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: The record with the given key was returned successfully.\n          headers:\n            Content-Encoding:\n              description: Encoding scheme used for the response.\n              schema:\n                enum:\n                - gzip\n                type: string\n            ETag:\n              description: Identifies the resource version.\n              schema:\n                type: string\n        \"401\":\n          $ref: '#/components/responses/AuthError'\n        \"403\":\n          $ref: '#/components/responses/ForbiddenError'\n        \"404\":\n          $ref: '#/components/responses/NotFoundError'\n        \"429\":\n          $ref: '#/components/responses/TooManyRequestsError'\n        \"500\":\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultError'\n      summary: Returns a record with a given key.\n      x-authz-scope: kvstore.records.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeaderParam'\n    - $ref: '#/components/parameters/UserHeaderParam'\n    - $ref: '#/components/parameters/TenantParam'\n    - $ref: '#/components/parameters/CollectionParam'\n    - $ref: '#/components/parameters/KeyParam'\n    put:\n      operationId: putRecord\n      parameters:\n      - $ref: '#/components/parameters/IfMatchHeaderParam'\n      requestBody:\n        $ref: '#/components/requestBodies/insertRecordRecord'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Record'\n          description: The record was updated successfully.\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Record'\n          description: The record was inserted successfully.\n        \"400\":\n          $ref: '#/components/responses/BadRequestError'\n        \"401\":\n          $ref: '#/components/responses/AuthError'\n        \"403\":\n          $ref: '#/components/responses/ForbiddenError'\n        \"404\":\n          $ref: '#/components/responses/NotFoundError'\n        \"412\":\n          $ref: '#/components/responses/PreconditionFailedError'\n        \"415\":\n          $ref: '#/components/responses/UnsupportedMediaTypeError'\n        \"429\":\n          $ref: '#/components/responses/TooManyRequestsError'\n        \"500\":\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultError'\n      summary: Updates the record with a given key, either by inserting or replacing\n        the record.\n      x-authz-scope: kvstore.records.update\n  /{tenant}/kvstore/v1beta1/collections/{collection}/truncate:\n    delete:\n      operationId: truncateRecords\n      responses:\n        \"204\":\n          description: All the records in the collection were successfull deleted.\n        \"401\":\n          $ref: '#/components/responses/AuthError'\n        \"403\":\n          $ref: '#/components/responses/ForbiddenError'\n        \"404\":\n          $ref: '#/components/responses/NotFoundError'\n        \"429\":\n          $ref: '#/components/responses/TooManyRequestsError'\n        \"500\":\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultError'\n      summary: Deletes all the records in a collection.\n      x-authz-scope: kvstore.records.delete\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeaderParam'\n    - $ref: '#/components/parameters/TenantParam'\n    - $ref: '#/components/parameters/CollectionParam'\n  /{tenant}/kvstore/v1beta1/ping:\n    get:\n      operationId: ping\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PingResponse'\n          description: Returns the health status from the database.\n          headers:\n            Content-Encoding:\n              description: Encoding scheme used for the response.\n              schema:\n                enum:\n                - gzip\n                type: string\n        \"401\":\n          $ref: '#/components/responses/AuthError'\n        \"403\":\n          $ref: '#/components/responses/ForbiddenError'\n        \"429\":\n          $ref: '#/components/responses/TooManyRequestsError'\n        \"500\":\n          $ref: '#/components/responses/InternalServerError'\n        \"503\":\n          $ref: '#/components/responses/ServiceUnavailableError'\n        default:\n          $ref: '#/components/responses/DefaultError'\n      summary: Returns the health status from the database.\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeaderParam'\n    - $ref: '#/components/parameters/TenantParam'\nservers:\n- url: /\n\n# Retrieved from scp-openapi commit 820564ba8a17697d087ff171b14cbad60a716ee3 path: kvstore/v1beta1/openapi.yaml",
			"canonicalURL": "/github.com/splunk/splunk-cloud-sdk-python@d8b72e17c2fcefd7e82716dfb61f9eb60799a74f/-/blob/splunk_sdk/kvstore/v1beta1/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/splunk/splunk-cloud-sdk-python/blob/d8b72e17c2fcefd7e82716dfb61f9eb60799a74f/splunk_sdk/kvstore/v1beta1/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}