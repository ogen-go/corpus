{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/levigo/neverpile-eureka"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "neverpile-eureka-plugin-metadata/src/main/resources/com/neverpile/eureka/plugin/metadata/openapi.yaml",
			"byteSize": 6183,
			"content": "openapi: 3.0.1\n\ninfo:\n  title: Neverpile eureka API\n  contact:\n    name: levigo solutions gmbh\n    url: https://levigo.de\n    email: solutions@levigo.de\n  version: 1.0.0\n\ntags:\n- name: Metadata\n  description: Document metadata related APIs\n\npaths:\n  /api/v1/documents/{documentID}/metadata:\n    get:\n      tags:\n      - Metadata\n      summary: Fetches a document's metadata\n\n      parameters:\n      - name: documentID\n        in: path\n        description: The ID of the document for which metadata shall be fetched\n        required: true\n        schema:\n          type: string\n\n      responses:\n        200:\n          description: Document metadata found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n        404:\n          description: Document not found\n          \n    put:\n      tags:\n      - Metadata\n      summary: Updates a document's metadata\n\n      parameters:\n      - name: documentID\n        in: path\n        description: The ID of the document for which metadata shall be fetched\n        required: true\n        schema:\n          type: string\n\n      requestBody:\n        description: The new document metadata\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Metadata'\n        required: false\n\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n        202:\n          description: Metadata updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n        404:\n          description: Document not found\n      \n  /api/v1/documents/{documentID}/metadata/{name}:\n    get:\n      tags:\n      - Metadata\n      summary: Fetches a document metadata element by ID and element name\n\n      parameters:\n      - name: documentID\n        in: path\n        description: The ID of the document's metadata to be fetched\n        required: true\n        schema:\n          type: string\n      - name: name\n        in: path\n        description: The name of the metadata element to be fetched\n        required: true\n        schema:\n          type: string\n\n      responses:\n        200:\n          description: Metadata element found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataElement'\n        404:\n          description: Document or element not found\n          \n    put:\n      tags:\n      - Metadata\n      summary: Create or update a single metatadata element of a document\n\n      parameters:\n      - name: documentID\n        in: path\n        description: The ID of the document's metadata to be fetched\n        required: true\n        schema:\n          type: string\n      - name: name\n        in: path\n        description: The name of the metadata element to be fetched\n        required: true\n        schema:\n          type: string\n\n      requestBody:\n        description: The new metadata element\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MetadataElement'\n        required: false\n\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataElement'\n        202:\n          description: metadata updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataElement'\n        404:\n          description: Document not found\n          \n    delete:\n      tags:\n      - Metadata\n      summary: Delete a single metatadata element of a document\n\n      parameters:\n      - name: documentID\n        in: path\n        description: The ID of the document's metadata to be fetched\n        required: true\n        schema:\n          type: string\n      - name: name\n        in: path\n        description: The name of the metadata element to be fetched\n        required: true\n        schema:\n          type: string\n\n      responses:\n        204:\n          description: Metadata element deleted\n        404:\n          description: Document or element not found\n\ncomponents:\n  schemas:\n    Metadata:\n      title: Metadata\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/MetadataElement'\n      description: A set of metadata elements associated with a document\n    MetadataElement:\n      title: MetadataElement\n      type: object\n      properties:\n        content:\n          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\n          type: string\n          description: The content (payload) of the metadata element\n          format: byte\n        contentType:\n          type: string\n          description: The MIME-Type of the metadata element as specified in RFC 2045\n            without parameters\n        dateCreated:\n          type: string\n          description: The timestamp at which the element was created\n          format: date-time\n        dateModified:\n          type: string\n          description: The timestamp at which the element was last modified\n          format: date-time\n        encryption:\n          type: string\n          description: The type of encryption the content element is subject to\n          enum:\n          - shared\n          - private\n        keyHint:\n          type: string\n          description: A key hint may be used by a client to store information about\n            which key was used to encrypt the element\n        schema:\n          type: string\n          description: A reference to a schema which the element is supposed to conform\n            to, e.g. an XML namespace definition, an XSD reference, a JSON schema\n            reference etc.\n      description: A metadata element associated with a document\n    ValidationResult:\n      title: ValidationResult\n      type: object\n      properties:\n        message:\n          type: string\n        type:\n          type: string\n          enum:\n          - INFO\n          - WARNING\n          - ERROR\n",
			"canonicalURL": "/github.com/levigo/neverpile-eureka@72e9e3e3f7ec10995802a3269d74345568569ed4/-/blob/neverpile-eureka-plugin-metadata/src/main/resources/com/neverpile/eureka/plugin/metadata/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/levigo/neverpile-eureka/blob/72e9e3e3f7ec10995802a3269d74345568569ed4/neverpile-eureka-plugin-metadata/src/main/resources/com/neverpile/eureka/plugin/metadata/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}