{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/earthkingman/42Swim"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "backend/src/swagger/openapi.yaml",
			"byteSize": 33669,
			"content": "openapi: 3.0.0\ninfo:\n  description: This is a 42StackOverflow\n  version: 1.0.0\n  title: 42StackOverFlow\n  termsOfService: \"http://42Stack-Overflow.net\"\n  contact:\n    email: \"gypark@gmail.com\"\n  license:\n    name: Apache 2.0\n    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\nservers:\n  - url: \"http://localhost:5000/api\"\n\ntags:\n  - name: page\n    description: 페이지\n  - name: hashtag\n    description: hashtag\n  - name: post\n    description: 게시글\n  - name: question\n    description: 질문 게시글\n  - name: answer\n    description: 답변 게시글\n  - name: comment\n    description: 댓글\n  - name: user\n    description: 유저\n  - name: like\n    description: 좋아요\n  - name: auth\n    description: 인증\n\ncomponents:\n  schemas:\n    User:\n      properties:\n        id:\n          type: integer\n        created_at:\n          type: string\n        email:\n          type: string\n        nickname:\n          type: string\n        photo:\n          type: string\n      required:\n        - id\n        - nickname\n        - email\n    MainPage:\n      properties:\n        questionList:\n          type: array\n          items:\n            type: object\n            properties:\n              question:\n                $ref: \"#/components/schemas/Question\"\n        questionCount:\n          type: integer\n    QuestionPage:\n      properties:\n        questionInfo:\n          $ref: \"#/components/schemas/QuestionInfo\"\n          # properties:\n          #   question:\n          #     $ref: \"#/components/schemas/Question\"\n          #   user:\n          #     $ref: \"#/components/schemas/User\"\n          #   comments:\n          #     type: array\n          #     items:\n          #       type: object\n          #       properties:\n          #         comment:\n          #           $ref: \"#/components/schemas/Comment\"\n          #         user:\n          #           $ref: \"#/components/schemas/User\"\n        answerInfos:\n          type: array\n          items:\n            type: object\n            properties:\n              answer:\n                $ref: \"#/components/schemas/AnswerInfo\"\n              user:\n                $ref: \"#/components/schemas/User\"\n              comments:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    comment:\n                      $ref: \"#/components/schemas/Comment\"\n                    user:\n                      $ref: \"#/components/schemas/User\"\n    Question:\n      properties:\n        id:\n          type: integer\n        created_at:\n          type: string\n        is_solved:\n          type: boolean\n        answer_count:\n          type: integer\n        like_count:\n          type: integer\n        view_count:\n          type: integer\n        title:\n          type: string\n        text:\n          type: string\n        user:\n          $ref: \"#/components/schemas/User\"\n        hashtag:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Hashtag\"\n\n      required:\n        - id\n        - title\n        - text\n        - viewCount\n        - likeCount\n        - isSolved\n    QuestionInfo:\n      properties:\n        id:\n          type: integer\n        created_at:\n          type: string\n        user:\n          $ref: \"#/components/schemas/User\"\n        answer:\n          $ref: \"#/components/schemas/AnswerInfo\"\n        comment:\n          $ref: \"#/components/schemas/Comment\"\n        hashtag:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Hashtag\"\n        is_solved:\n          type: boolean\n        like_count:\n          type: integer\n        view_count:\n          type: integer\n        title:\n          type: string\n        text:\n          type: string\n        is_like:\n          type: boolean\n      required:\n        - id\n        - title\n        - text\n        - viewCount\n        - likeCount\n        - isSolved\n    AnswerInfo:\n      properties:\n        id:\n          type: integer\n        created_at:\n          type: string\n        user:\n          $ref: \"#/components/schemas/User\"\n        comment:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Comment\"\n        likeCount:\n          type: integer\n        text:\n          type: string\n        isChosen:\n          type: boolean\n        isLike:\n          type: boolean\n      required:\n        - id\n        - text\n        - likeCount\n        - isChosen\n    Answer:\n      properties:\n        id:\n          type: integer\n          format: int64\n        text:\n          type: string\n      required:\n        - text\n    Comment:\n      properties:\n        id:\n          type: integer\n          format: int64\n        created_at:\n          type: string\n        text:\n          type: string\n        user:\n          $ref: \"#/components/schemas/User\"\n      required:\n        - id\n        - text\n    Image:\n      properties:\n        id:\n          type: integer\n        photo:\n          type: string\n      required:\n        - id\n        - photo\n    Hashtag:\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n      required:\n        - id\n        - name\n  requestBodies:\n    Comment:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Comment\"\n        application/xml:\n          schema:\n            $ref: \"#/components/schemas/Comment\"\n      description: comment\n      required: true\n    Answer:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Answer\"\n        application/xml:\n          schema:\n            $ref: \"#/components/schemas/Answer\"\n      description: comment\n      required: true\n    Question:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Question\"\n        application/xml:\n          schema:\n            $ref: \"#/components/schemas/Question\"\n      description: comment\n      required: true\n\npaths:\n  /hashtags/list:\n    get:\n      summary: 해시태그들을 반환합니다.\n      tags:\n        - hashtag\n      responses:\n        \"200\":\n          description: 해시태그 리스트 요청 성공\n        \"404\":\n          description: Hashtag doesn't exist\n\n  /hashtags/questions:\n    get:\n      summary: 해시태그에 속한 질문글들을 반환합니다.\n      tags:\n        - hashtag\n      parameters:\n        - name: hashtag\n          in: query\n          schema:\n            type: string\n          example: \"ft_printf\"\n          required: true\n        - name: pageNumber\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n      responses:\n        \"200\":\n          description: 해시태그 질문 리스트 요청 성공\n        \"404\":\n          description: Hashtag doesn't exist\n\n  /hashtags/count:\n    get:\n      summary: 해시테그 별 질문 갯수\n      tags:\n        - hashtag\n      parameters:\n        - name: pageNumber\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n      responses:\n        \"200\":\n          description: 페이지 요청 성공\n        \"404\":\n          description: Page doesn't exist\n\n  /posts/image:\n    post:\n      summary: 사진을 업로드합니다.\n      tags:\n        - post\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                imgFile:\n                  type: string\n                  format: binary\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: fail\n  /posts/question:\n    get:\n      summary: 질문 게시글을 반환합니다.\n      tags:\n        - question\n      parameters:\n        - name: body\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n      responses:\n        \"200\":\n          description: 질문 게시글 요청 성공\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Question\"\n        \"404\":\n          description: Question doesn't exist\n\n    post:\n      summary: 질문 게시글을 생성합니다.\n      tags:\n        - question\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                title:\n                  type: string\n                  example: \"test question title\"\n                text:\n                  type: string\n                  example: \"test question text\"\n                hashtag:\n                  type: array\n                  items:\n                    type: string\n                  example: [\"ft_printf\", \"libft\"]\n              required:\n                - title\n                - text\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: Question doesn't exist\n\n    patch:\n      summary: 질문 게시글을 업데이트합니다.\n      tags:\n        - question\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                questionId:\n                  type: integer\n                  format: int64\n                  example: 1\n                title:\n                  type: string\n                  example: \"update test question title\"\n                text:\n                  type: string\n                  example: \"update test question text\"\n                hashtag:\n                  type: array\n                  items:\n                    type: string\n                  example: [\"gnl\", \"b2br\"]\n              required:\n                - questionId\n                - title\n                - text\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: Question doesn't exist\n\n    delete:\n      summary: 질문 게시글을 삭제합니다.\n      tags:\n        - question\n      parameters:\n        - name: questionId\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: Question doesn't exist\n\n  /posts/answer:\n    get:\n      summary: 답변 게시글을 반환합니다.\n      tags:\n        - answer\n      parameters:\n        - name: answerId\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n      responses:\n        \"200\":\n          description: 답변 게시글 요청 성공\n        \"404\":\n          description: Answer doesn't exist\n\n    post:\n      summary: 답변 게시글을 생성합니다.\n      tags:\n        - answer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                questionId:\n                  type: integer\n                  format: int64\n                  example: 1\n                text:\n                  type: string\n                  example: \"test answer text\"\n              required:\n                - questionId\n                - text\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: Answer doesn't exist\n\n    patch:\n      summary: 답변 게시글을 업데이트합니다.\n      tags:\n        - answer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                questionId:\n                  type: integer\n                  format: int64\n                  example: 1\n                answerId:\n                  type: integer\n                  format: int64\n                  example: 1\n                text:\n                  type: string\n                  example: \"update test answer text\"\n              required:\n                - questionId\n                - answerId\n                - text\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: Answer doesn't exist\n\n    delete:\n      summary: 답변 게시글을 삭제합니다.\n      tags:\n        - answer\n      parameters:\n        - name: questionId\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n        - name: answerId\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: Answer doesn't exist\n\n  /posts/answer/choice:\n    post:\n      summary: 답변 게시글을 채택합니다.\n      tags:\n        - answer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                questionId:\n                  type: integer\n                  format: int64\n                  example: 1\n                answerId:\n                  type: integer\n                  format: int64\n                  example: 1\n                answerUserId:\n                  type: integer\n                  format: int64\n                  example: 1\n              required:\n                - questionId\n                - answerId\n                - answerUserId\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: Answer doesn't exist\n\n  /posts/comment:\n    get:\n      summary: 댓글을 반환합니다.\n      tags:\n        - comment\n      parameters:\n        - name: commentId\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n      responses:\n        \"200\":\n          description: 댓글 요청 성공\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Comment\"\n        \"404\":\n          description: Comment doesn't exist\n    post:\n      summary: 댓글을 생성합니다.\n      tags:\n        - comment\n      description: question comment 작성시 requestBody에 answerId 제외하고 사용\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                text:\n                  type: string\n                  example: \"test question comment text\"\n                questionId:\n                  type: integer\n                  format: int64\n                  example: 1\n                answerId:\n                  type: integer\n                  format: int64\n                  example: 1\n              required:\n                - text\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Invalid Id supplied\n        \"404\":\n          description: Comment doesn't exist\n    patch:\n      summary: 댓글을 업데이트합니다.\n      tags:\n        - comment\n      description: question comment 작성시 requestBody에 answerId 제외하고 사용\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                text:\n                  type: string\n                  example: \"test update question comment text\"\n                commentId:\n                  type: integer\n                  format: int64\n                  example: 1\n                questionId:\n                  type: integer\n                  format: int64\n                  example: 1\n                answerId:\n                  type: integer\n                  format: int64\n                  example: 1\n              required:\n                - commnetId\n                - text\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Invalid Id supplied\n        \"404\":\n          description: Comment doesn't exist\n    delete:\n      summary: 댓글을 삭제합니다.\n      tags:\n        - comment\n      parameters:\n        - name: questionId\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n        - name: answerId\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n        - name: commentId\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Invalid Id supplied\n        \"404\":\n          description: Comment doesn't exist\n\n  /pages/list/question:\n    get:\n      summary: 메인 페이지를 반환합니다.\n      tags:\n        - page\n      parameters:\n        - name: pageNumber\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n      responses:\n        \"200\":\n          description: 페이지 요청 성공\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MainPage\"\n        \"404\":\n          description: Page doesn't exist\n\n  /pages/list/question/hashtag/id:\n    get:\n      summary: 해시태그 아이디로 질문글 리스트를 반환합니다.\n      tags:\n        - page\n      description: 데이터를 최신순으로 정렬하려면 orderBy = \"time\", 좋아요 순으로 정렬하려면 \"like\", 해결되지 않은 질문 리스트를 응답 받으려면 \"solving\" 사용\n      parameters:\n        - name: pageNumber\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n        - name: hashtagId\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n        - name: orderBy\n          in: query\n          schema:\n            type: string\n          example: time\n          required: true\n      responses:\n        \"200\":\n          description: 페이지 요청 성공\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MainPage\"\n        \"404\":\n          description: Page doesn't exist\n\n  /pages/list/question/hashtag/name:\n    get:\n      summary: 해시태그 이름으로 질문글 리스트를 반환합니다.\n      tags:\n        - page\n      description: 데이터를 최신순으로 정렬하려면 orderBy = \"time\", 좋아요 순으로 정렬하려면 \"like\", 해결되지 않은 질문 리스트를 응답 받으려면 \"solving\" 사용\n      parameters:\n        - name: pageNumber\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n        - name: hashtagName\n          in: query\n          schema:\n            type: string\n          example: ft_printf\n          required: true\n        - name: orderBy\n          in: query\n          schema:\n            type: string\n          example: time\n          required: true\n      responses:\n        \"200\":\n          description: 페이지 요청 성공\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MainPage\"\n        \"404\":\n          description: Page doesn't exist\n\n  /pages/list/question/userId:\n    get:\n      summary: 유저 아이디로 질문글 리스트를 반환합니다.\n      tags:\n        - page\n      description: 데이터를 최신순으로 정렬하려면 orderBy = \"time\", 좋아요 순으로 정렬하려면 \"like\", 해결되지 않은 질문 리스트를 응답 받으려면 \"solving\" 사용\n      parameters:\n        - name: pageNumber\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n        - name: userId\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n        - name: orderBy\n          in: query\n          schema:\n            type: string\n          example: time\n          required: true\n      responses:\n        \"200\":\n          description: 페이지 요청 성공\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MainPage\"\n        \"404\":\n          description: Page doesn't exist\n\n  /pages/list/answer/userId:\n    get:\n      summary: 유저 아이디로 답변글 리스트를 반환합니다.\n      tags:\n        - page\n      description: 데이터를 최신순으로 정렬하려면 orderBy = \"time\", 좋아요 순으로 정렬하려면 \"like\", 채택된 답변 리스트를 응답 받으려면 \"chosen\" 사용\n      parameters:\n        - name: pageNumber\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n        - name: userId\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n        - name: orderBy\n          in: query\n          schema:\n            type: string\n          example: time\n          required: true\n      responses:\n        \"200\":\n          description: 페이지 요청 성공\n        \"404\":\n          description: Page doesn't exist\n\n  /pages/list/comment/userId:\n    get:\n      summary: 유저 아이디로 댓글 리스트를 반환합니다.\n      tags:\n        - page\n      description: 댓글은 최신순으로 정렬하여 응답합니다.\n      parameters:\n        - name: pageNumber\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n        - name: userId\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n      responses:\n        \"200\":\n          description: 페이지 요청 성공\n        \"404\":\n          description: Page doesn't exist\n\n  /pages/list/question/like:\n    get:\n      summary: 질문 리스트를 추천순으로 반환합니다.\n      tags:\n        - page\n      parameters:\n        - name: pageNumber\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n      responses:\n        \"200\":\n          description: 페이지 요청 성공\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MainPage\"\n        \"404\":\n          description: Page doesn't exist\n\n  /pages/list/question/keyword:\n    get:\n      summary: 질문 리스트를 검색하여 반환합니다.\n      tags:\n        - page\n      description: 검색한 데이터를 최신순으로 정렬하려면 orderBy = \"time\", 좋아요 순으로 정렬하려면 \"like\", 해결되지 않은 질문 리스트를 응답 받으려면 \"solving\" 사용\n      parameters:\n        - name: pageNumber\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n        - name: keyword\n          in: query\n          schema:\n            type: string\n          example: question\n          required: true\n        - name: orderBy\n          in: query\n          schema:\n            type: string\n          example: time\n          required: true\n      responses:\n        \"200\":\n          description: 페이지 요청 성공\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MainPage\"\n        \"404\":\n          description: Page doesn't exist\n\n  /pages/list/question/unsolved:\n    get:\n      summary: 해결되지 않은 질문 리스트를 반환합니다.\n      tags:\n        - page\n      parameters:\n        - name: pageNumber\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n      responses:\n        \"200\":\n          description: 페이지 요청 성공\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MainPage\"\n        \"404\":\n          description: Page doesn't exist\n\n  /pages/detail/question:\n    get:\n      summary: 질문 페이지를 반환합니다.\n      tags:\n        - page\n      parameters:\n        - name: questionId\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n      responses:\n        \"200\":\n          description: 페이지 요청 성공\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/QuestionPage\"\n        \"404\":\n          description: Page doesn't exist\n  /pages/question/viewCount:\n    post:\n      summary: 질문글의 조회수를 증가시킵니다.\n      tags:\n        - page\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                questionId:\n                  type: integer\n                  format: int64\n              required:\n                - questionId\n              example:\n                questionId: 1\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: Question doesn't exist\n\n  /posts/answer/like:\n    post:\n      summary: 좋아요를 생성합니다.\n      tags:\n        - like\n      description: answerUserId 는 answer 작성자의 id로 작성자가 받은 좋아요 수를 업데이트 시켜주는 데 사용함\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                answerUserId:\n                  type: integer\n                  format: int64\n                answerId:\n                  type: integer\n                  format: int64\n                isLike:\n                  type: boolean\n              required:\n                - answerUserId\n                - answerId\n                - isLike\n              example:\n                answerUserId: 1\n                answerId: 1\n                isLike: true\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: Answer doesn't exist\n\n    delete:\n      summary: 좋아요를 삭제합니다.\n      tags:\n        - like\n      description: answerUserId 는 answer 작성자의 id로 작성자가 받은 좋아요 수를 업데이트 시켜주는 데 사용함\n      parameters:\n        - name: answerId\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n        - name: answerUserId\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n        - name: isLike\n          in: query\n          schema:\n            type: boolean\n          example: true\n          required: true\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: Answer doesn't exist\n\n  /posts/question/like:\n    post:\n      summary: 좋아요를 생성합니다.\n      tags:\n        - like\n      description: questionUserId 는 question 작성자의 id로 작성자가 받은 좋아요 수를 업데이트 시켜주는 데 사용함\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                questionUserId:\n                  type: integer\n                  format: int64\n                questionId:\n                  type: integer\n                  format: int64\n                isLike:\n                  type: boolean\n              example:\n                questionUserId: 1\n                questionId: 1\n                isLike: true\n              required:\n                - questionUserId\n                - questionId\n                - isLike\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: Question doesn't exist\n\n    delete:\n      summary: 좋아요를 삭제합니다.\n      tags:\n        - like\n      description: questionUserId 는 question 작성자의 id로 작성자가 받은 좋아요 수를 업데이트 시켜주는 데 사용함\n      parameters:\n        - name: questionId\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n        - name: questionUserId\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n        - name: isLike\n          in: query\n          schema:\n            type: boolean\n          example: true\n          required: true\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: Question doesn't exist\n\n  /auth/login:\n    post:\n      summary: 로그인합니다.\n      tags:\n        - auth\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  type: string\n                password:\n                  type: string\n              required:\n                - email\n                - password\n              example:\n                email: \"tester1@gmail.com\"\n                password: \"tester1\"\n\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: email doesn't exist\n\n  /auth/signup:\n    post:\n      summary: 회원가입 합니다.\n      tags:\n        - auth\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  type: string\n                nickname:\n                  type: string\n                password:\n                  type: string\n              required:\n                - email\n                - nickname\n                - password\n              example:\n                email: \"tester@gmail.com\"\n                nickname: \"tester\"\n                password: \"test\"\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: email already exist\n\n  /auth/42login:\n    get:\n      summary: 42로그인합니다.\n      tags:\n        - auth\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: email doesn't exist\n\n  /users/info:\n    get:\n      summary: 유저 정보를 반환합니다.\n      tags:\n        - user\n      responses:\n        \"200\":\n          description: 유저 정보 요청 성공\n        \"404\":\n          description: User doesn't exist\n\n  /users/profile:\n    get:\n      summary: 다른 유저 프로필을 조회합니다.\n      tags:\n        - user\n      parameters:\n        - name: userId\n          in: query\n          schema:\n            type: integer\n            format: int64\n          example: 1\n          required: true\n      responses:\n        \"200\":\n          description: 유저 프로필 요청 성공\n        \"404\":\n          description: User doesn't exist\n\n  /users/ranking:\n    get:\n      summary: 랭킹 정보를 가져옵니다.\n      tags:\n        - user\n      responses:\n        \"200\":\n          description: 랭킹 요청 성공\n\n  /users/image:\n    patch:\n      summary: 프로필 사진을 업데이트합니다.\n      tags:\n        - user\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                imgFile:\n                  type: string\n                  format: binary\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: User doesn't exist\n\n    delete:\n      summary: 프로필 사진을 삭제합니다.\n      tags:\n        - user\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: User doesn't exist\n\n  /users/nickname:\n    patch:\n      summary: 닉네임을 업데이트합니다.\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                nickname:\n                  type: string\n              example:\n                nickname: \"newTester1\"\n              required:\n                - nickname\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: User doesn't exist\n\n  /users/password:\n    patch:\n      summary: 비밀번호를 업데이트합니다.\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                curPassword:\n                  type: string\n                newPassword:\n                  type: string\n              example:\n                curPassword: \"tester1\"\n                newPassword: \"newTester1\"\n              required:\n                - curPassword\n                - newPassword\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: User doesn't exist\n\n  /users/email:\n    patch:\n      summary: 이메일을 업데이트합니다.\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  type: string\n              example:\n                email: \"newTester1@gmail.com\"\n              required:\n                - email\n      responses:\n        \"200\":\n          description: OK\n        \"404\":\n          description: User doesn't exist\n",
			"canonicalURL": "/github.com/earthkingman/42Swim@58815c877c80394577b697389619e28eb2ee72f2/-/blob/backend/src/swagger/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/earthkingman/42Swim/blob/58815c877c80394577b697389619e28eb2ee72f2/backend/src/swagger/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}