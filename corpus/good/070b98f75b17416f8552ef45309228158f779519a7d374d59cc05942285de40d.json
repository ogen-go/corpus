{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/fossology/FOSSology.REST.dotnet"
		},
		"file": {
			"name": "FOSSology REST API 1.0.3.yaml",
			"size": 0,
			"path": "openapi/FOSSology REST API 1.0.3.yaml",
			"byteSize": 25168,
			"content": "openapi: 3.0.0\ninfo:\n  title: FOSSology API\n  description: Automate your fossology instance using REST API\n  version: 1.0.3\nservers:\n  - url: 'http://localhost/repo/api/v1'\n    description: Localhost instance\nsecurity:\n  - bearerAuth: []\npaths:\n  /auth:\n    get:\n      deprecated: true\n      security: []\n      summary: 'Get a login session registered (deprecated, use /tokens)'\n      description: |\n        Get a login session registered using the username and password\n      parameters:\n        - name: username\n          required: true\n          description: Username of the login user\n          in: query\n          schema:\n            type: string\n        - name: password\n          required: true\n          description: Password of the user trying to login\n          in: query\n          schema:\n            type: string\n      responses:\n        '299':\n          description: Resource is deprecated. Use /tokens\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  header:\n                    type: string\n              example:\n                header: 'authorization: Basic Zm9zc3k6Zm9zc3k='\n        '404':\n          description: UserName or password incorrect\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n  /tokens:\n    post:\n      security: []\n      summary: Generate a new token\n      description: |\n        Generate a new token to access REST API\n      requestBody:\n        description: Required details for generating new token\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TokenRequest'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/TokenRequest'\n      responses:\n        '201':\n          description: Token generated\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  header:\n                    type: string\n              example:\n                Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QiLCJleHAiOjE1NTEyOTIyMDAsIm5iZiI6MTU1MTIwNTgwMCwianRpIjoiTmk0eiIsInNjb3BlIjoicmVhZCJ9.71D6xTD2QE45t9AVCwbrQwSSae5lC4yzKCMpZWXoC2Q\n        '404':\n          description: UserName or password incorrect\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n  '/uploads/{id}':\n    parameters:\n      - name: id\n        required: true\n        description: Id of the upload\n        in: path\n        schema:\n          type: integer\n    get:\n      tags:\n        - Upload\n        - Organize\n      summary: Get single upload by id\n      description: Returns a single upload\n      responses:\n        '200':\n          description: Get upload\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Upload'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n    delete:\n      tags:\n        - Upload\n        - Organize\n      summary: Delete upload by id\n      responses:\n        '202':\n          description: Upload will be deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n    patch:\n      tags:\n        - Upload\n        - Organize\n      description: Move upload from one folder to other\n      parameters:\n        - name: folderId\n          description: 'Folder Id, where upload should be moved to'\n          in: header\n          required: true\n          schema:\n            type: integer\n      responses:\n        '202':\n          description: Upload will be moved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n    put:\n      tags:\n        - Upload\n        - Organize\n      description: Can be used to copy uploads\n      parameters:\n        - name: folderId\n          description: 'Folder Id, where upload should be copied to'\n          in: header\n          required: true\n          schema:\n            type: integer\n      responses:\n        '202':\n          description: Upload will be copied\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n  /uploads:\n    get:\n      tags:\n        - Upload\n      summary: Uploads\n      description: |\n        The uploads endpoint returns all uploads\n      responses:\n        '200':\n          description: An array of uploads\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Upload'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n    post:\n      tags:\n        - Upload\n      summary: Post new upload to FOSSology\n      description: |\n        Endpoint to create a new upload in FOSSology\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                fileInput:\n                  type: string\n                  format: binary\n      parameters:\n        - name: folderId\n          description: 'Folder Id, where upload should be created'\n          in: header\n          required: true\n          schema:\n            type: integer\n        - name: uploadDescription\n          description: Visible description of the file\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: public\n          description: The access level to the upload\n          in: header\n          required: false\n          schema:\n            type: string\n            enum:\n              - private\n              - protected\n              - public\n            default: protected\n      responses:\n        '201':\n          description: Upload is created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n  /search:\n    get:\n      tags:\n        - Search\n      description: Search the FOSSology for a specific file\n      parameters:\n        - name: searchType\n          required: false\n          description: Limit search to\n          in: header\n          schema:\n            type: string\n            enum:\n              - directory\n              - containers\n              - allfiles\n            default: allfiles\n        - name: filename\n          description: 'Filename to find, can contain % as wild-card'\n          required: false\n          in: header\n          schema:\n            type: string\n        - name: tag\n          description: Tag to find\n          required: false\n          in: header\n          schema:\n            type: string\n        - name: filesizemin\n          description: Min filesize in bytes\n          required: false\n          in: header\n          schema:\n            type: integer\n            minimum: 0\n        - name: filesizemax\n          description: Max filesize in bytes\n          required: false\n          in: header\n          schema:\n            type: integer\n            minimum: 0\n        - name: license\n          description: License search filter\n          required: false\n          in: header\n          schema:\n            type: string\n        - name: copyright\n          description: Copyright search filter\n          required: false\n          in: header\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SearchResults'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n  /users:\n    get:\n      tags:\n        - User\n        - Admin\n      description: Get the registered users\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n  '/users/{id}':\n    parameters:\n      - name: id\n        required: true\n        in: path\n        schema:\n          type: integer\n    get:\n      tags:\n        - User\n        - Admin\n      summary: Get user by id\n      responses:\n        '200':\n          description: User with the given id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n    delete:\n      tags:\n        - User\n        - Admin\n      summary: Delete user by id\n      responses:\n        '202':\n          description: User will be deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n  /jobs:\n    get:\n      tags:\n        - Job\n      summary: Gets all jobs\n      description: Returns all jobs with their status\n      parameters:\n        - name: limit\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n          in: header\n        - name: page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n          in: header\n        - name: upload\n          required: false\n          schema:\n            type: integer\n          in: query\n          description: Return jobs for the given upload id only\n      responses:\n        '200':\n          description: OK\n          headers:\n            X-Total-Pages:\n              description: Total number of pages which can be generated based on limit\n              schema:\n                type: integer\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Job'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n    post:\n      tags:\n        - Job\n      summary: Schedule an Analysis\n      description: Schedule an Analysis of an existing upload\n      parameters:\n        - name: folderId\n          in: header\n          required: true\n          schema:\n            type: integer\n        - name: uploadId\n          in: header\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: Agents to be scheduled with the job\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScanOptions'\n      responses:\n        '201':\n          description: Job Scheduled with job id in message\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n  '/jobs/{id}':\n    parameters:\n      - name: id\n        required: true\n        description: Id of the job\n        in: path\n        schema:\n          type: integer\n    get:\n      tags:\n        - Job\n      summary: Gets single job by id\n      description: Returns job with the status\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Job'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n  /folders:\n    get:\n      tags:\n        - Organize\n        - Folders\n      summary: Get the list of accessible folders\n      responses:\n        '200':\n          description: List of folders\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Folder'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n    post:\n      tags:\n        - Organize\n        - Folders\n      summary: Create a new folder\n      parameters:\n        - name: parentFolder\n          in: header\n          required: true\n          description: Parent folder for the new folder\n          schema:\n            type: integer\n        - name: folderName\n          in: header\n          required: true\n          description: Name of the new folder\n          schema:\n            type: string\n        - name: folderDescription\n          in: header\n          required: false\n          description: Description of the new folder\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Folder with the same name already exists under the same parent\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        '201':\n          description: Folder is created with new folder id in message\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n  '/folders/{id}':\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: ID of the folder\n        schema:\n          type: integer\n    get:\n      tags:\n        - Organize\n        - Folders\n      summary: Get a single folder details\n      responses:\n        '200':\n          description: Details of the required folder\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n    delete:\n      tags:\n        - Organize\n        - Folders\n      summary: Delete a folder\n      responses:\n        '202':\n          description: Folder scheduled to be deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n    patch:\n      tags:\n        - Organize\n        - Folders\n      parameters:\n        - name: name\n          in: header\n          required: false\n          description: New name of the folder\n          schema:\n            type: string\n        - name: description\n          in: header\n          required: false\n          description: New description of the folder\n          schema:\n            type: string\n      summary: Edit a folder's description\n      responses:\n        '200':\n          description: Folder is updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n    put:\n      tags:\n        - Organize\n        - Folders\n      parameters:\n        - name: parent\n          in: header\n          required: true\n          description: New parent folder id\n          schema:\n            type: integer\n        - name: action\n          in: header\n          required: true\n          description: Action to be performed\n          schema:\n            type: string\n            enum:\n              - copy\n              - move\n      summary: Copy/Move a folder\n      responses:\n        '202':\n          description: Folder will be copied/moved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n  /report:\n    get:\n      tags:\n        - Job\n        - Report\n      summary: Get the reports for a given upload\n      parameters:\n        - name: uploadId\n          in: header\n          required: true\n          description: Id of the upload to generate the report for\n          schema:\n            type: integer\n        - name: reportFormat\n          in: header\n          required: true\n          description: Which report to be genereated\n          schema:\n            type: string\n            enum:\n              - dep5\n              - spdx2\n              - spdx2tv\n              - readmeoss\n              - unifiedreport\n      responses:\n        '201':\n          description: Report generation is scheduled. Link to download report will be in message\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n  '/report/{id}':\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: Id the report to download\n        schema:\n          type: integer\n    get:\n      tags:\n        - Job\n        - Report\n      summary: Download the report\n      responses:\n        '200':\n          description: Required report\n          content:\n            text/plain:\n              schema:\n                type: string\n                format: binary\n            application/zip:\n              schema:\n                type: string\n                format: binary\n        '503':\n          description: Report is not ready yet. Check 'Retry-After' header.\n          headers:\n            Retry-After:\n              description: Retry the request after this many seconds\n              schema:\n                type: integer\n                example: 10\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    SearchResults:\n      type: object\n      properties:\n        upload:\n          $ref: '#/components/schemas/Upload'\n        uploadTreeId:\n          type: integer\n          description: Upload tree ID\n        filename:\n          type: string\n          description: Filename of the treeItem\n    LicenseDecider:\n      type: object\n      properties:\n        nomos_monk:\n          type: boolean\n          description: Scanners matches if all Nomos findings are within the Monk findings.\n        bulk_reused:\n          type: boolean\n          description: Bulk phrases from reused packages.\n        new_scanner:\n          type: boolean\n          description: 'New scanner results, i.e., decisions were marked as work in progress if new scanner finds additional licenses.'\n    ScanOptions:\n      type: object\n      properties:\n        analysis:\n          $ref: '#/components/schemas/Analysis'\n        decider:\n          $ref: '#/components/schemas/LicenseDecider'\n        reuse:\n          $ref: '#/components/schemas/Reuser'\n    Upload:\n      type: object\n      properties:\n        folderid:\n          type: integer\n          description: 'The folder id, where the upload is located'\n        foldername:\n          type: string\n          description: The name of the folder where the upload is located\n        id:\n          type: integer\n          description: Upload id of the upload.\n        description:\n          type: string\n          description: Description of the upload.\n        uploadname:\n          type: string\n          description: Display name of the upload.\n        uploaddate:\n          type: string\n          description: 'Date, when the file was uploaded.'\n        filesize:\n          type: integer\n          description: Filesize in Bytes.\n    Job:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of the job\n        name:\n          type: string\n          description: Name of the job\n        queueDate:\n          type: string\n          description: When the job was queued\n        uploadId:\n          type: integer\n          description: Upload for which the job was scheduled\n        userId:\n          type: integer\n          description: User who scheduled the job\n        groupId:\n          type: integer\n          description: Group under which the job was scheduled\n        eta:\n          type: integer\n          description: ETA of job to finish in seconds\n        status:\n          type: string\n          enum:\n            - Completed\n            - Failed\n            - Queued\n            - Processing\n          description: Denotes the current status of the job in the queue\n    Info:\n      type: object\n      properties:\n        code:\n          type: integer\n          description: HTTP status code\n          example: 200\n        message:\n          type: string\n          description: Message in the info\n        type:\n          type: string\n          enum:\n            - INFO\n            - ERROR\n          description: Denotes if info was created on error\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of the user\n        name:\n          type: string\n          description: Unique username\n        description:\n          type: string\n          description: Description of the user\n        email:\n          type: string\n          description: 'Email of the user, needs to be unique and is required'\n        accessLevel:\n          type: string\n          enum:\n            - none\n            - read_only\n            - read_write\n            - admin\n        rootFolderId:\n          type: number\n          format: int\n          description: root folder id of the user\n        emailNotification:\n          type: boolean\n          description: enable email notification when upload scan completes\n        agents:\n          $ref: '#/components/schemas/Analysis'\n    Analysis:\n      type: object\n      properties:\n        bucket:\n          type: boolean\n          description: Should bucket analysis be run on this upload\n        copyright_email_author:\n          type: boolean\n          description: Should Copyright/Email/URL/Author Analysis be run on this upload.\n        ecc:\n          type: boolean\n          description: Should ECC Analysis be run on this upload.\n        keyword:\n          type: boolean\n          description: Should keyword Analysis be run on this upload.\n        mime:\n          type: boolean\n          description: Should MIME Analysis be run on this upload.\n        monk:\n          type: boolean\n          description: Should Monk Analysis be run on this upload.\n        nomos:\n          type: boolean\n          description: Should Nomos Analysis be run on this upload.\n        ojo:\n          type: boolean\n          description: Should OJO Analysis be run on this upload.\n        package:\n          type: boolean\n          description: Should Package Analysis be run on this upload.\n    Reuser:\n      type: object\n      properties:\n        reuse_upload:\n          type: integer\n          description: The UploadID to reuse.\n        reuse_group:\n          type: integer\n          description: The group of the reused upload\n        reuse_main:\n          type: boolean\n          description: Scanners matches if all Nomos findings are within the Monk findings.\n        reuse_enhanced:\n          type: boolean\n          description: Bulk phrases from reused packages.\n      required:\n        - reuse_uplod\n        - reuse_group\n    Folder:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Id of the folder.\n        name:\n          type: string\n          description: Name of the folder.\n        description:\n          type: string\n          description: Description of the folder.\n        parent:\n          type: integer\n          description: 'Id of the parent folder (if any, null otherwise).'\n    TokenRequest:\n      type: object\n      properties:\n        username:\n          type: string\n          description: Username of the login user.\n        password:\n          type: string\n          format: password\n          description: Password of the user trying to login.\n        token_name:\n          type: string\n          maxLength: 40\n          description: Friendly name of the token\n        token_scope:\n          type: string\n          enum:\n            - read\n            - write\n          description: The scope of the token.\n        token_expire:\n          type: string\n          format: date\n          description: Date when the token must expire (default max 30 days).\n      required:\n        - username\n        - password\n        - token_name\n        - token_scope\n        - token_expire\n  responses:\n    defaultResponse:\n      description: Some error occured. Check the \"message\"\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Info'\n",
			"canonicalURL": "/github.com/fossology/FOSSology.REST.dotnet@a3125b7d076c05221ecfb2447564bbde3a7eea96/-/blob/openapi/FOSSology%20REST%20API%201.0.3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/fossology/FOSSology.REST.dotnet/blob/a3125b7d076c05221ecfb2447564bbde3a7eea96/openapi/FOSSology REST API 1.0.3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}