{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/circleci.com/v1/openapi.yaml",
			"byteSize": 26705,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://circleci.com/api/v1\ninfo:\n  description: |\n    The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI.\n    You can access all information and trigger all actions.\n    The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI.\n  license:\n    name: Attribution-NonCommercial-ShareAlike 4.0 International\n    url: http://creativecommons.org/licenses/by-nc-sa/4.0/\n  title: CircleCI REST API\n  version: v1\n  x-apisguru-categories:\n    - developer_tools\n  x-logo:\n    url: https://avatars0.githubusercontent.com/u/1231870?v=3\u0026s=200\n  x-origin:\n    - format: openapi\n      url: https://raw.githubusercontent.com/kamikazechaser/spec-circleci/master/swagger.yml\n      version: \"3.0\"\n  x-providerName: circleci.com\n  x-unofficialSpec: true\nsecurity:\n  - apikey: []\npaths:\n  /me:\n    get:\n      description: |\n        Provides information about the signed in user.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n          description: signed in user\n  \"/project/{username}/{project}\":\n    get:\n      description: |\n        Build summary for each of the last 30 builds for a single git repo.\n      parameters:\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/offset\"\n        - $ref: \"#/components/parameters/filter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Builds\"\n          description: Build summary for each of the last 30 builds\n    parameters:\n      - $ref: \"#/components/parameters/username\"\n      - $ref: \"#/components/parameters/project\"\n    post:\n      description: |\n        Triggers a new build, returns a summary of the build.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                build_parameters:\n                  $ref: \"#/components/schemas/BuildParameters\"\n                parallel:\n                  $ref: \"#/components/schemas/Parallel\"\n                revision:\n                  $ref: \"#/components/schemas/Revision\"\n                tag:\n                  $ref: \"#/components/schemas/Tag\"\n              type: object\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BuildSummary\"\n          description: returns a summary of the build\n  \"/project/{username}/{project}/build-cache\":\n    delete:\n      description: |\n        Clears the cache for a project.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  status:\n                    type: string\n                type: object\n          description: status message\n    parameters:\n      - $ref: \"#/components/parameters/username\"\n      - $ref: \"#/components/parameters/project\"\n  \"/project/{username}/{project}/checkout-key\":\n    get:\n      description: |\n        Lists checkout keys.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Keys\"\n          description: checkout keys\n    parameters:\n      - $ref: \"#/components/parameters/username\"\n      - $ref: \"#/components/parameters/project\"\n    post:\n      description: |\n        Creates a new checkout key.\n        Only usable with a user API token.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              enum:\n                - deploy-key\n                - github-user-key\n              type: string\n        description: |\n          The type of key to create. Can be 'deploy-key' or 'github-user-key'.\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/key\"\n  \"/project/{username}/{project}/checkout-key/{fingerprint}\":\n    delete:\n      description: |\n        Delete a checkout key.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  message:\n                    enum:\n                      - OK\n                    type: string\n                type: object\n          description: status message\n    get:\n      description: |\n        Get a checkout key.\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/key\"\n    parameters:\n      - $ref: \"#/components/parameters/username\"\n      - $ref: \"#/components/parameters/project\"\n      - $ref: \"#/components/parameters/fingerprint\"\n  \"/project/{username}/{project}/envvar\":\n    get:\n      description: |\n        Lists the environment variables for :project\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/envvars\"\n    parameters:\n      - $ref: \"#/components/parameters/username\"\n      - $ref: \"#/components/parameters/project\"\n    post:\n      description: |\n        Creates a new environment variable\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/envvar\"\n  \"/project/{username}/{project}/envvar/{name}\":\n    delete:\n      description: |\n        Deletes the environment variable named ':name'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  message:\n                    enum:\n                      - OK\n                    type: string\n                type: object\n          description: |\n            Deletes the environment variable named ':name'\n    get:\n      description: |\n        Gets the hidden value of environment variable :name\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/envvar\"\n    parameters:\n      - $ref: \"#/components/parameters/username\"\n      - $ref: \"#/components/parameters/project\"\n      - $ref: \"#/components/parameters/envvar_name\"\n  \"/project/{username}/{project}/ssh-key\":\n    parameters:\n      - $ref: \"#/components/parameters/username\"\n      - $ref: \"#/components/parameters/project\"\n    post:\n      description: |\n        Create an ssh key used to access external systems that require SSH key-based authentication\n      parameters:\n        - in: header\n          name: Content-Type\n          required: true\n          schema:\n            enum:\n              - application/json\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                hostname:\n                  type: string\n                private_key:\n                  type: string\n              type: object\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    message: a private key is required\n              schema:\n                properties:\n                  message:\n                    type: string\n                type: object\n          description: no response expected\n  \"/project/{username}/{project}/tree/{branch}\":\n    parameters:\n      - $ref: \"#/components/parameters/username\"\n      - $ref: \"#/components/parameters/project\"\n      - $ref: \"#/components/parameters/branch\"\n    post:\n      description: |\n        Triggers a new build, returns a summary of the build.\n        Optional build parameters can be set using an experimental API.\n\n        Note: For more about build parameters, read about [using parameterized builds](https://circleci.com/docs/parameterized-builds/)\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                build_parameters:\n                  $ref: \"#/components/schemas/BuildParameters\"\n                parallel:\n                  $ref: \"#/components/schemas/Parallel\"\n                revision:\n                  $ref: \"#/components/schemas/Revision\"\n              type: object\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Build\"\n          description: returns a summary of the build\n          headers:\n            Location:\n              schema:\n                format: uri\n                type: string\n  \"/project/{username}/{project}/{build_num}\":\n    get:\n      description: |\n        Full details for a single build. The response includes all of the fields from the build summary.\n        This is also the payload for the [notification webhooks](/docs/configuration/#notify), in which case this object is the value to a key named 'payload'.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BuildDetail\"\n          description: Full details for a single build\n    parameters:\n      - $ref: \"#/components/parameters/username\"\n      - $ref: \"#/components/parameters/project\"\n      - $ref: \"#/components/parameters/build_num\"\n  \"/project/{username}/{project}/{build_num}/artifacts\":\n    get:\n      description: |\n        List the artifacts produced by a given build.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Artifacts\"\n          description: List the artifacts produced by a given build\n    parameters:\n      - $ref: \"#/components/parameters/username\"\n      - $ref: \"#/components/parameters/project\"\n      - $ref: \"#/components/parameters/build_num\"\n  \"/project/{username}/{project}/{build_num}/cancel\":\n    parameters:\n      - $ref: \"#/components/parameters/username\"\n      - $ref: \"#/components/parameters/project\"\n      - $ref: \"#/components/parameters/build_num\"\n    post:\n      description: |\n        Cancels the build, returns a summary of the build.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Build\"\n          description: returns a summary of the build\n  \"/project/{username}/{project}/{build_num}/retry\":\n    parameters:\n      - $ref: \"#/components/parameters/username\"\n      - $ref: \"#/components/parameters/project\"\n      - $ref: \"#/components/parameters/build_num\"\n    post:\n      description: |\n        Retries the build, returns a summary of the new build.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Build\"\n          description: returns a summary of the new build\n  \"/project/{username}/{project}/{build_num}/tests\":\n    get:\n      description: |\n        Provides test metadata for a build\n        Note: [Learn how to set up your builds to collect test metadata](https://circleci.com/docs/test-metadata/)\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Tests\"\n          description: |\n            test metadata for a build\n    parameters:\n      - $ref: \"#/components/parameters/username\"\n      - $ref: \"#/components/parameters/project\"\n      - $ref: \"#/components/parameters/build_num\"\n  /projects:\n    get:\n      description: |\n        List of all the projects you're following on CircleCI, with build information organized by branch.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Projects\"\n          description: |\n            List of all the projects you're following on CircleCI\n  /recent-builds:\n    get:\n      description: |\n        Build summary for each of the last 30 recent builds, ordered by build_num.\n      parameters:\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/offset\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Builds\"\n          description: Build summary for each of the last 30 recent builds\n  /user/heroku-key:\n    post:\n      description: |\n        Adds your Heroku API key to CircleCI, takes apikey as form param name.\n      responses:\n        \"403\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  message:\n                    type: string\n                type: object\n          description: |\n            Your Heroku API key is invalid.\ncomponents:\n  parameters:\n    branch:\n      description: |\n        The branch name should be url-encoded.\n      in: path\n      name: branch\n      required: true\n      schema:\n        type: string\n    build_num:\n      description: |\n        XXXXXXXXXX\n      in: path\n      name: build_num\n      required: true\n      schema:\n        type: integer\n    envvar_name:\n      description: |\n        XXXXXXXXXX\n      in: path\n      name: name\n      required: true\n      schema:\n        type: string\n    filter:\n      description: |\n        Restricts which builds are returned.\n        Set to \"completed\", \"successful\", \"failed\", \"running\", or defaults to no filter.\n      in: query\n      name: filter\n      schema:\n        enum:\n          - completed\n          - successful\n          - failed\n          - running\n        type: string\n    fingerprint:\n      description: |\n        XXXXXXXXXX\n      in: path\n      name: fingerprint\n      required: true\n      schema:\n        type: string\n    limit:\n      description: |\n        The number of builds to return. Maximum 100, defaults to 30.\n      in: query\n      name: limit\n      schema:\n        default: 30\n        maximum: 100\n        type: integer\n    offset:\n      description: |\n        The API returns builds starting from this offset, defaults to 0.\n      in: query\n      name: offset\n      schema:\n        default: 0\n        type: integer\n    project:\n      description: |\n        XXXXXXXXX\n      in: path\n      name: project\n      required: true\n      schema:\n        type: string\n    username:\n      description: |\n        XXXXXXXXX\n      in: path\n      name: username\n      required: true\n      schema:\n        type: string\n  responses:\n    envvar:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Envvar\"\n      description: XXX\n    envvars:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Envvars\"\n      description: XXX\n    key:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Key\"\n      description: checkout key\n  schemas:\n    Artifact:\n      properties:\n        node_index:\n          type: integer\n        path:\n          type: string\n        pretty_path:\n          type: string\n        url:\n          type: string\n      type: object\n    Artifacts:\n      items:\n        $ref: \"#/components/schemas/Artifact\"\n      type: array\n    Aws:\n      properties:\n        keypair:\n          nullable: true\n          type: string\n      type: object\n    Build:\n      properties:\n        body:\n          description: commit message body\n          type: string\n        branch:\n          type: string\n        build_time_millis:\n          type: integer\n        build_url:\n          format: uri\n          type: string\n        committer_email:\n          format: email\n          type: string\n        committer_name:\n          type: string\n        dont_build:\n          description: reason why we didn't build, if we didn't build\n          nullable: true\n          type: string\n        lifecycle:\n          $ref: \"#/components/schemas/Lifecycle\"\n        previous:\n          $ref: \"#/components/schemas/PreviousBuild\"\n        queued_at:\n          description: time build was queued\n          format: date-time\n          type: string\n        reponame:\n          type: string\n        retry_of:\n          description: build_num of the build this is a retry of\n          nullable: true\n          type: integer\n        start_time:\n          description: time build started\n          format: date-time\n          type: string\n        stop_time:\n          description: time build finished\n          format: date-time\n          type: string\n        subject:\n          type: string\n        username:\n          type: string\n        vcs_url:\n          format: uri\n          type: string\n        why:\n          description: short string explaining the reason we built\n          type: string\n      type: object\n    BuildDetail:\n      description: previous build\n      properties:\n        all_commit_details:\n          $ref: \"#/components/schemas/CommitDetails\"\n        compare:\n          format: uri\n          nullable: true\n          type: string\n        job_name:\n          type: string\n        node:\n          nullable: true\n        previous_successful_build:\n          $ref: \"#/components/schemas/PreviousBuild\"\n        retries:\n          nullable: true\n          type: boolean\n        ssh_enabled:\n          nullable: true\n          type: boolean\n        timedout:\n          nullable: true\n          type: boolean\n        usage_queued_at:\n          format: date-time\n          type: string\n        user:\n          $ref: \"#/components/schemas/User\"\n      type: object\n    BuildParameters:\n      description: |\n        Additional environment variables to inject into the build environment. A map of names to values.\n      type: object\n    BuildSummary:\n      properties:\n        added_at:\n          format: date-time\n          type: string\n        build_num:\n          type: integer\n        outcome:\n          $ref: \"#/components/schemas/Outcome\"\n        pushed_at:\n          format: date-time\n          type: string\n        status:\n          $ref: \"#/components/schemas/Status\"\n        vcs_revision:\n          $ref: \"#/components/schemas/Sha1\"\n      type: object\n    Builds:\n      items:\n        $ref: \"#/components/schemas/Build\"\n      type: array\n    CommitDetail:\n      properties:\n        author_date:\n          format: date-time\n          type: string\n        author_email:\n          format: email\n          type: string\n        author_login:\n          type: string\n        author_name:\n          type: string\n        body:\n          type: string\n        commit:\n          $ref: \"#/components/schemas/Sha1\"\n        commit_url:\n          format: uri\n          type: string\n        committer_date:\n          format: date-time\n          type: string\n        committer_email:\n          format: email\n          type: string\n        committer_login:\n          type: string\n        committer_name:\n          type: string\n        subject:\n          type: string\n      type: object\n    CommitDetails:\n      items:\n        $ref: \"#/components/schemas/CommitDetail\"\n      type: array\n    Envvar:\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n      type: object\n    Envvars:\n      items:\n        $ref: \"#/components/schemas/Envvar\"\n      type: array\n    Key:\n      properties:\n        fingerprint:\n          type: string\n        preferred:\n          type: boolean\n        public_key:\n          type: string\n        time:\n          description: when the key was issued\n          format: date-time\n          type: string\n        type:\n          description: |\n            can be \"deploy-key\" or \"github-user-key\"\n          enum:\n            - deploy-key\n            - github-user-key\n          type: string\n      type: object\n    Keys:\n      items:\n        $ref: \"#/components/schemas/Key\"\n      type: array\n    Lifecycle:\n      enum:\n        - queued\n        - scheduled\n        - not_run\n        - not_running\n        - running\n        - finished\n      type: string\n    Outcome:\n      enum:\n        - canceled\n        - infrastructure_fail\n        - timedout\n        - failed\n        - no_tests\n        - success\n      type: string\n    Parallel:\n      description: |\n        The number of containers to use to run the build. Default is null and the project default is used.\n      type: string\n    PreviousBuild:\n      description: previous build\n      properties:\n        build_num:\n          type: integer\n        build_time_millis:\n          type: integer\n        status:\n          $ref: \"#/components/schemas/Status\"\n      type: object\n    Project:\n      properties:\n        aws:\n          $ref: \"#/components/schemas/Aws\"\n        branches:\n          type: object\n        campfire_notify_prefs:\n          $ref: \"#/components/schemas/StringOrNull\"\n        campfire_room:\n          $ref: \"#/components/schemas/StringOrNull\"\n        campfire_subdomain:\n          $ref: \"#/components/schemas/StringOrNull\"\n        campfire_token:\n          $ref: \"#/components/schemas/StringOrNull\"\n        compile:\n          type: string\n        default_branch:\n          type: string\n        dependencies:\n          type: string\n        extra:\n          type: string\n        feature_flags:\n          properties:\n            build-fork-prs:\n              type: boolean\n            fleet:\n              nullable: true\n              type: boolean\n            junit:\n              type: boolean\n            oss:\n              type: boolean\n            osx:\n              type: boolean\n            set-github-status:\n              type: boolean\n            trusty-beta:\n              type: boolean\n          type: object\n        flowdock_api_token:\n          $ref: \"#/components/schemas/StringOrNull\"\n        followed:\n          type: boolean\n        has_usable_key:\n          type: boolean\n        heroku_deploy_user:\n          $ref: \"#/components/schemas/StringOrNull\"\n        hipchat_api_token:\n          $ref: \"#/components/schemas/StringOrNull\"\n        hipchat_notify:\n          $ref: \"#/components/schemas/StringOrNull\"\n        hipchat_notify_prefs:\n          nullable: true\n          type: string\n        hipchat_room:\n          $ref: \"#/components/schemas/StringOrNull\"\n        irc_channel:\n          $ref: \"#/components/schemas/StringOrNull\"\n        irc_keyword:\n          $ref: \"#/components/schemas/StringOrNull\"\n        irc_notify_prefs:\n          $ref: \"#/components/schemas/StringOrNull\"\n        irc_password:\n          $ref: \"#/components/schemas/StringOrNull\"\n        irc_server:\n          $ref: \"#/components/schemas/StringOrNull\"\n        irc_username:\n          $ref: \"#/components/schemas/StringOrNull\"\n        language:\n          type: string\n        oss:\n          type: boolean\n        parallel:\n          type: integer\n        reponame:\n          type: string\n        scopes:\n          items:\n            $ref: \"#/components/schemas/Scope\"\n          type: array\n        setup:\n          type: string\n        slack_api_token:\n          $ref: \"#/components/schemas/StringOrNull\"\n        slack_channel:\n          $ref: \"#/components/schemas/StringOrNull\"\n        slack_channel_override:\n          $ref: \"#/components/schemas/StringOrNull\"\n        slack_notify_prefs:\n          $ref: \"#/components/schemas/StringOrNull\"\n        slack_subdomain:\n          $ref: \"#/components/schemas/StringOrNull\"\n        slack_webhook_url:\n          format: uri\n          type: string\n        ssh_keys:\n          items:\n            type: string\n          type: array\n        test:\n          type: string\n        username:\n          type: string\n        vcs_type:\n          type: string\n        vcs_url:\n          format: uri\n          type: string\n      type: object\n    Projects:\n      items:\n        $ref: \"#/components/schemas/Project\"\n      type: array\n    Revision:\n      description: |\n        The specific revision to build.\n        Default is null and the head of the branch is used. Cannot be used with tag parameter.\n      type: string\n    Scope:\n      enum:\n        - write-settings\n        - view-builds\n        - read-settings\n        - trigger-builds\n        - all\n        - status\n        - none\n      type: string\n    Sha1:\n      type: string\n    Status:\n      enum:\n        - retried\n        - canceled\n        - infrastructure_fail\n        - timedout\n        - not_run\n        - running\n        - failed\n        - queued\n        - scheduled\n        - not_running\n        - no_tests\n        - fixed\n        - success\n      type: string\n    StringOrNull:\n      nullable: true\n      type: string\n    Tag:\n      description: |\n        The tag to build. Default is null. Cannot be used with revision parameter.\n      type: string\n    Tests:\n      properties:\n        tests:\n          items:\n            properties:\n              classname:\n                type: string\n              file:\n                type: string\n              message:\n                type: string\n              name:\n                type: string\n              result:\n                $ref: \"#/components/schemas/Status\"\n              run_time:\n                type: number\n              source:\n                type: string\n            type: object\n          type: array\n      type: object\n    User:\n      properties:\n        admin:\n          type: boolean\n        all_emails:\n          items:\n            format: email\n            type: string\n          type: array\n        analytics_id:\n          type: string\n        avatar_url:\n          format: uri\n          type: string\n        basic_email_prefs:\n          type: string\n        bitbucket:\n          nullable: true\n          type: integer\n        bitbucket_authorized:\n          type: boolean\n        containers:\n          type: integer\n        created_at:\n          format: date-time\n          type: string\n        days_left_in_trial:\n          type: integer\n        dev_admin:\n          type: boolean\n        enrolled_betas:\n          items:\n            type: string\n          type: array\n        github_id:\n          nullable: true\n          type: integer\n        github_oauth_scopes:\n          items:\n            type: string\n          type: array\n        gravatar_id:\n          nullable: true\n          type: integer\n        heroku_api_key:\n          nullable: true\n          type: string\n        in_beta_program:\n          type: boolean\n        login:\n          type: string\n        name:\n          type: string\n        organization_prefs:\n          type: object\n        parallelism:\n          type: integer\n        plan:\n          nullable: true\n          type: string\n        projects:\n          type: object\n        pusher_id:\n          type: string\n        selected_email:\n          format: email\n          type: string\n        sign_in_count:\n          type: integer\n        trial_end:\n          format: date-time\n          type: string\n      type: object\n  securitySchemes:\n    apikey:\n      in: query\n      name: circle-token\n      type: apiKey\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@47bf2b618e492e31bc62743e9f72c47cb8460229/-/blob/APIs/circleci.com/v1/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/47bf2b618e492e31bc62743e9f72c47cb8460229/APIs/circleci.com/v1/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}