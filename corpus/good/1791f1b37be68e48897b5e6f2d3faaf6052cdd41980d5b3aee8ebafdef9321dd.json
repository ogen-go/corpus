{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "npm/openapi-to-postmanv2"
		},
		"file": {
			"name": "sample-swagger.yaml",
			"size": 0,
			"path": "examples/sample-swagger.yaml",
			"byteSize": 27040,
			"content": "openapi: 3.0.0\nservers:\n  - url: 'http://localhost:8080/api/v1'\ninfo:\n  version: v1\n  title: API\n  description: ''\n  termsOfService: 'http://xyz.in/about/legal/terms/api'\ntags:\n  - name: Source\n  - name: Users\n  - name: Roles\n  - name: Capabilities\n  - name: Mapping\n    description: |\n      Mapping can be performed in one of the two ways\n\n      * Users and Roles alotted to the users.\n      * Roles and capabilities alloted to the roles.\n  - name: Transaction\npaths:\n  /source/:\n    get:\n      tags:\n        - Source\n      description: Get information about all sources.\n      responses:\n        '200':\n          description: The source object\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Source'\n    post:\n      tags:\n        - Source\n      description: Add a source.\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                source_name:\n                  description: New source name\n                  type: string\n                parent_source_id:\n                  description: Parent Source ID\n                  type: integer\n              required:\n                - source_name\n                - parent_source_id\n  '/source/{source-id}':\n    get:\n      parameters:\n        - $ref: '#/components/parameters/source-id'\n      tags:\n        - Source\n      description: Get basic information about a source.\n      responses:\n        '200':\n          description: The source object\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Source'\n    delete:\n      parameters:\n        - $ref: '#/components/parameters/source-id'\n      tags:\n        - Source\n      description: Deletes source based on its ID.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n  /users/:\n    get:\n      tags:\n        - Users\n      description: Get information about all users.\n      responses:\n        '200':\n          description: The user object\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n    post:\n      tags:\n        - Users\n      description: Add a user.\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: New user name\n                  type: string\n                client_id:\n                  description: Client ID\n                  type: integer\n                user_source_id:\n                  description: Source ID for user\n                  type: integer\n                address:\n                  description: User address\n                  type: string\n                address_type:\n                  description: User address type\n                  type: string\n                locality_id:\n                  description: Locality ID\n                  type: integer\n                phone:\n                  description: User's phone number\n                  type: integer\n                email:\n                  description: User's email address\n                  type: string\n              required:\n                - name\n                - client_id\n                - user_source_id\n  '/users/{user-id}':\n    get:\n      parameters:\n        - $ref: '#/components/parameters/user-id'\n      tags:\n        - Users\n      description: Get basic information about a user.\n      responses:\n        '200':\n          description: The user object\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n    put:\n      parameters:\n        - $ref: '#/components/parameters/user-id'\n      tags:\n        - Users\n      description: Update user name based on his ID.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: New user name\n                  type: string\n              required:\n                - name\n    delete:\n      parameters:\n        - $ref: '#/components/parameters/user-id'\n      tags:\n        - Users\n      description: Delete user based on his ID.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n  /users/lookup:\n    get:\n      tags:\n        - Users\n      description: \u003e-\n        Get user id using user's mobile number or email. Atleast one parameter\n        must be passed.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  user_id:\n                    type: integer\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                phone:\n                  description: User's phone number.\n                  type: integer\n                email:\n                  description: User's email.\n                  type: string\n  /users/merge:\n    put:\n      tags:\n        - Users\n      description: Merge users together based on email and phone number.\n      responses:\n        '200':\n          description: Merged\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                email:\n                  description: User's email address\n                  type: string\n                phone:\n                  description: User's phone number\n                  type: integer\n              required:\n                - email\n                - phone\n  '/users/restaurant/{restaurant-id}':\n    get:\n      tags:\n        - Users\n      description: \u003e\n        See the list of users belonging to a restaurant based on\n        `restaurant-id`.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n      parameters:\n        - name: restaurant-id\n          in: path\n          description: Restaurant ID.\n          required: true\n          schema:\n            type: integer\n  '/users/source/{source-id}':\n    get:\n      tags:\n        - Users\n      description: |\n        See the list of users belonging to a restaurant based on `source-id`.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n      parameters:\n        - name: source-id\n          in: path\n          description: Source ID.\n          required: true\n          schema:\n            type: integer\n  '/address/{address-id}':\n    get:\n      parameters:\n        - name: address-id\n          in: path\n          description: User's address ID\n          required: true\n          schema:\n            type: integer\n      description: |\n        Get address details of the user based on his address ID.    \n      tags:\n        - Users\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Address'\n    put:\n      parameters:\n        - name: address-id\n          in: path\n          description: User's address ID\n          required: true\n          schema:\n            type: integer\n      tags:\n        - Users\n      responses:\n        '200':\n          description: |\n            OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n    delete:\n      parameters:\n        - name: address-id\n          in: path\n          description: User's address ID\n          required: true\n          schema:\n            type: integer\n      tags:\n        - Users\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n  '/users/restaurant/{restaurant-id}/transactions':\n    get:\n      tags:\n        - Transaction\n      description: List of Transactions made by users for a specific restaurant.\n      parameters:\n        - name: restaurant-id\n          in: path\n          description: Restaurant's ID for which transactions need to be returned.\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Transaction'\n  '/users/{user-id}/transactions':\n    parameters:\n      - name: user-id\n        in: path\n        description: User's ID\n        required: true\n        schema:\n          type: integer\n    get:\n      tags:\n        - Transaction\n      description: \u003e-\n        List of Transactions made by User across LT platform based on phone\n        number or email. Atleast one parameter is required.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Transaction'\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                phone:\n                  description: User's phone number.\n                  type: integer\n                email:\n                  description: User's email address\n                  type: string\n    post:\n      tags:\n        - Transaction\n      description: \u003e-\n        Add a new transaction to the user based on `user-id` and return a\n        `transaction-id`.\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                transaction-date:\n                  description: Date of transaction.\n                  type: string\n                outlet-id:\n                  description: Outlet's ID\n                  type: integer\n  /capabilities:\n    get:\n      tags:\n        - Capabilities\n      description: |\n        List all the available capabilities.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Capabilities'\n    post:\n      tags:\n        - Capabilities\n      description: |\n        Generate a new capability\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Name of capability\n                  type: string\n              required:\n                - name\n  '/capabilities/{capability-id}':\n    parameters:\n      - name: capability-id\n        in: path\n        required: true\n        description: Capability ID\n        schema:\n          type: integer\n    get:\n      tags:\n        - Capabilities\n      description: |\n        Get a specific Capability.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Capabilities'\n    put:\n      tags:\n        - Capabilities\n      description: |\n        Update a capability based on its `capability-id`.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: New name for capability\n                  type: string\n              required:\n                - name\n    delete:\n      tags:\n        - Capabilities\n      description: |\n        Delete a capability based on its `capability-id`.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n  /roles:\n    get:\n      tags:\n        - Roles\n      description: |\n        List all the available roles.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Roles'\n    post:\n      tags:\n        - Roles\n      description: Generate a new role\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Name of the new role.\n                  type: string\n  '/roles/{role-id}':\n    parameters:\n      - name: role-id\n        in: path\n        required: true\n        description: Role ID\n        schema:\n          type: integer\n    get:\n      tags:\n        - Roles\n      description: |\n        Get a specific Role based on its `role-id`.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Roles'\n    put:\n      tags:\n        - Roles\n      description: |\n        Update a role based on its `role-id`.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: New name for role\n                  type: string\n              required:\n                - name\n    delete:\n      tags:\n        - Roles\n      description: |\n        Delete a role based on its `role-id`.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n  '/users/{user-id}/roles':\n    parameters:\n      - name: user-id\n        description: user identifier number\n        in: path\n        required: true\n        schema:\n          type: integer\n    get:\n      tags:\n        - Mapping\n      description: |\n        List all the available roles for the user identified by `user-id`.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Roles'\n    post:\n      tags:\n        - Mapping\n      description: \u003e\n        Assign roles to a user based on `role-id` or `role-name`. Atleast one\n        parameter needs to be provided.\n      responses:\n        '201':\n          description: Created\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                role-name:\n                  description: Name of the role\n                  type: string\n                role-id:\n                  description: Role ID\n                  type: integer\n    delete:\n      tags:\n        - Mapping\n      description: |\n        Delete all roles assigned to a user based on `user-id`.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n  '/users/{user-id}/roles/{role-id}':\n    get:\n      parameters:\n        - name: user-id\n          description: user identifier number\n          in: path\n          required: true\n          schema:\n            type: integer\n        - name: role-id\n          in: path\n          description: role identifier number\n          required: true\n          schema:\n            type: integer\n      tags:\n        - Mapping\n      description: |\n        Show a role assigned to a user based on `role-id`.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Roles'\n    delete:\n      parameters:\n        - name: user-id\n          description: user identifier number\n          in: path\n          required: true\n          schema:\n            type: integer\n        - name: role-id\n          in: path\n          description: role identifier number\n          required: true\n          schema:\n            type: integer\n      tags:\n        - Mapping\n      description: |\n        Delete a role assigned to a user based on `role-id`.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n  '/roles/{role-id}/capabilities':\n    parameters:\n      - name: role-id\n        description: role identifier number\n        in: path\n        required: true\n        schema:\n          type: integer\n    get:\n      tags:\n        - Mapping\n      description: \u003e\n        List all the available capabilities for the role identified by\n        `role-id`.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Capabilities'\n    post:\n      tags:\n        - Mapping\n      description: \u003e\n        Assign capabilities to a role based on `capability-id` or\n        `capability-name`. Atleast one parameter needs to be provided.\n      responses:\n        '201':\n          description: Created\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                capability-name:\n                  description: Name of the capability\n                  type: string\n                capability-id:\n                  description: Capability ID\n                  type: integer\n    delete:\n      tags:\n        - Mapping\n      description: |\n        Delete all capabilities assigned to the role based on `role-id`.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n  '/roles/{role-id}/capabilities/{capability-id}':\n    get:\n      parameters:\n        - name: role-id\n          description: role identifier number\n          in: path\n          required: true\n          schema:\n            type: integer\n        - name: capability-id\n          in: path\n          description: capability identifier number\n          required: true\n          schema:\n            type: integer\n      tags:\n        - Mapping\n      description: |\n        Show a capability assigned to a role based on `capability-id`.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Capabilities'\n    delete:\n      parameters:\n        - name: role-id\n          description: role identifier number\n          in: path\n          required: true\n          schema:\n            type: integer\n        - name: capability-id\n          in: path\n          description: Capability ID\n          required: true\n          schema:\n            type: integer\n      tags:\n        - Mapping\n      description: |\n        Delete a capability assigned to a role based on `capability-id`.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\ncomponents:\n  parameters:\n    source-id:\n      name: source-id\n      in: path\n      description: The source identifier number\n      required: true\n      schema:\n        type: integer\n    user-id:\n      name: user-id\n      in: path\n      description: The user identifier number\n      required: true\n      schema:\n        type: integer\n    tag-name:\n      name: tag-name\n      in: path\n      description: Tag name\n      required: true\n      schema:\n        type: string\n  securitySchemes:\n    key:\n      type: apiKey\n      in: query\n      name: api_key\n  schemas:\n    Source:\n      type: object\n      properties:\n        id:\n          type: integer\n        source_name:\n          type: string\n        parent_source_id:\n          type: integer\n        created_at:\n          format: date-time\n        updated_at:\n          format: date-time\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n        client_id:\n          type: integer\n        user_source_id:\n          type: integer\n        name:\n          type: string\n        status:\n          type: string\n        user_account_id:\n          type: integer\n        user_account_type:\n          type: string\n        created_at:\n          format: date-time\n        updated_at:\n          format: date-time\n        deleted_at:\n          format: date-time\n    Address:\n      type: object\n      properties:\n        id:\n          type: integer\n        user_id:\n          type: integer\n        address:\n          type: string\n        address_type:\n          type: string\n        locality_id:\n          type: integer\n        status:\n          type: string\n        created_at:\n          format: date-time\n        updated_at:\n          format: date-time\n        deleted_at:\n          format: date-time\n    Email:\n      type: object\n      properties:\n        id:\n          type: string\n        user_id:\n          type: integer\n        user_email:\n          type: string\n        status:\n          type: string\n        created_at:\n          format: date-time\n        deleted_at:\n          format: date-time\n    Phone:\n      type: object\n      properties:\n        id:\n          type: integer\n        user_id:\n          type: integer\n        user_phone_number:\n          type: integer\n        status:\n          type: string\n        created_at:\n          format: date-time\n        deleted_at:\n          format: date-time\n    Transaction:\n      type: object\n      properties:\n        id:\n          type: integer\n        user_id:\n          type: integer\n        user_address_id:\n          type: integer\n        source_id:\n          type: integer\n        user_phone_number_id:\n          type: integer\n        user_email_id:\n          type: integer\n        outlet_id:\n          type: integer\n        transaction_date:\n          format: date\n        created_at:\n          format: date-time\n        updated_at:\n          format: date-time\n    Roles:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        created_at:\n          format: date-time\n        updated_at:\n          format: date-time\n        deleted_at:\n          format: date-time\n    Capabilities:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        created_at:\n          format: date-time\n        updated_at:\n          format: date-time\n        deleted_at:\n          format: date-time\n    User_Role_Mappings:\n      type: object\n      properties:\n        user_id:\n          type: integer\n        role_id:\n          type: integer\n    Role_Capability_Mappings:\n      type: object\n      properties:\n        role_id:\n          type: integer\n        capability_id:\n          type: integer",
			"canonicalURL": "/npm/openapi-to-postmanv2@8662e530a1fe4e843e6779d4e062197c292df425/-/blob/examples/sample-swagger.yaml",
			"externalURLs": []
		}
	}
}