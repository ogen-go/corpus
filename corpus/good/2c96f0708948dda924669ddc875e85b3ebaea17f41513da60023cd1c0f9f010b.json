{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ml4ai/delphi"
		},
		"file": {
			"name": "grfn_openapi.yaml",
			"size": 0,
			"path": "docs/grfn_openapi.yaml",
			"byteSize": 17943,
			"content": "openapi: 3.0.0\n\ninfo:\n  title: GrFN spec\n  description: Grounded Function Network (GrFN) schema specification\n  contact:\n    name: Clayton T. Morrison\n    email: claytonm@email.arizona.edu\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n  version: 0.2.17\n\npaths: {}\n\ncomponents:\n\n  schemas:\n\n    system_def:\n      title: \u003csystem_def\u003e\n      description: \u003e\n        Specification of a GrFN system consisting of one or\n        more GrFN files.\n        With imports, the system must represent a DAG.\n      required:\n        - date_created\n        - name\n        - components\n      properties:\n        date_created:\n          type: string\n          format: date-time\n        name:\n          type: string\n        components:\n          type: array\n          items:\n            $ref: '#/components/schemas/grfn_ref'\n\n    grfn_ref:\n      title: \u003cgrfn_ref\u003e\n      description: \u003e\n        Specifies a GrFN definition file (`grfn_source`) that is part of\n        a GrFN system, along with it source code files (`code_sources`)\n        and any \u003cgrfn_def\u003e imports (`imports`).\n      required:\n        - grfn_source\n        - code_sources\n      properties:\n        grfn_source:\n          $ref: '#/components/schemas/file_path'\n          description: \u003e\n            Path to \u003cgrfn_def\u003e file for this reference.\n        code_sources:\n          type: array\n          items:\n            $ref: '#/components/schemas/file_path'\n          description: \u003e\n            List of one or more source code file\n            paths that contain the namespace for\n            the current \u003cgrfn_def\u003e.\n        imports:\n          type: array\n          items:\n            $ref: '#/components/schemas/file_path'\n          description: \u003e\n             (optional) List of any \u003cgrfn_def\u003e files\n             representing namespaces that are imported\n             to the current \u003cgrfn_def\u003e.\n\n    grfn_def:\n      title: \u003cgrfn_def\u003e\n      description: \u003e\n        The top-level structure of the GrFN definition derived\n        from Program Analysis of source code.\n        A \u003cgrfn_def\u003e corresponds to a namespace.\n      required:\n        - date_created\n        - source\n        - identifiers\n        - variables\n        - containers\n      properties:\n        date_created:\n          type: string\n          format: date-time\n          description: \u003e\n            Date and time that current GrFN was generated.\n        source:\n          description:\n            Path(s) to source code file(s) that were analyzed.\n          type: array\n          items:\n            $ref: '#/components/schemas/file_path'\n        start:\n          type: array\n          items:\n            $ref: '#/components/schemas/container_identifier_name'\n          description:\n            (optional) Top-level entry-points into program\n        types:\n          type: array\n          items:\n            $ref: '#/components/schemas/type_def'\n        variables:\n          type: array\n          items:\n            $ref: '#/components/schemas/variable_def'\n        containers:\n          type: array\n          items:\n            $ref: '#/components/schemas/container_def'\n        source_comments:\n          type: array\n          items:\n            type: string\n        grounding:\n          type: array\n          items:\n            $ref: '#/components/schemas/link_hypothesis'\n\n    link_hypothesis:\n      title: \u003clink_hypothesis\u003e\n      description: \u003e\n        A commutative binary relation representing a hypothesized\n        link between two \u003csemantic_element\u003es:\n          (elm1=A, elm2=B) == (elm1=B, elm2=A)\n      required:\n        - element_1\n        - element_2\n        - score\n      properties:\n        element_1:\n          $ref: '#/components/schemas/link_element'\n        element_2:\n          $ref: '#/components/schemas/link_element'\n        score:\n          type: number\n          format: float\n\n    link_element:\n      title: \u003clink_element\u003e\n      description: \u003e\n        A grounding hypothesis link element.\u003cbr\u003e\n        \"type\": identifier (\u003cvariable_identifier_name\u003e,\n        \u003cfunction_identifier_name\u003e, \u003ctype_identifier_name\u003e),\n        content_span, text_span, equation_term, or ontology_term\n      required:\n        - type\n        - content\n      properties:\n        type:\n          type: string\n          enum:\n            - identifier\n            - comment_span\n            - text_span\n            - equation_term\n            - ontology_term\n        source:\n          type: string\n        content:\n          type: string\n        content_type:\n          type: string\n          enum:\n            - definition\n            - units\n            - constraint\n\n    base_name:\n      title: \u003cbase_name\u003e\n      description: \u003e\n        The identifier name (when available) that was used in the\n        original source code.\n      type: string\n\n    scope_path:\n      title: \u003cscope_path\u003e\n      description: \u003e\n        Array of names identifying a program scope.\n      type: array\n      items:\n        type: string\n\n    scope_path_string:\n      title: \u003cscope_path_string\u003e\n      description: \u003e\n        String representation of a `\u003cscope_path\u003e`.\n        String names that make up components of the path are\n        expressed in order, separated by periods.\n      example:\n        '\"foo.loop$1.loop$2\"'\n      type: string\n\n    namespace_path:\n      title: \u003cnamespace_path\u003e\n      description: \u003e\n        Array of names representing a namespace.\n      type: array\n      items:\n        type: string\n\n    namespace_path_string:\n      title: \u003cnamespace_path_string\u003e\n      description: \u003e\n        Single string representation of a `\u003cnamespace_path\u003e`.\n        String names that make up components of the path are\n        expressed in order, separated by periods.\n      example:\n        '\"foo.bar.baz\"'\n      type: string\n\n    gensym:\n      title: \u003cgensym\u003e\n      description: \u003e\n        String representation of a unique gensym.\n        Used as identifiers in lambdas and other source code\n        generated from GrFN.\n      type: string\n\n    variable_identifier_name:\n      title: \u003cvariable_identifier_name\u003e\n      description: \u003e\n        `\"@variable::\u003cnamespace_path_string\u003e::\u003cscope_path_string\u003e::\u003cvariable_base_name\u003e\"`\n      type: string\n\n    variable_base_name:\n      title: \u003cvariable_base_name\u003e\n      description: \u003e\n        `\"@variable::\u003cbase_name\u003e::\u003cindex\u003e\"`\n      type: string\n\n    container_identifier_name:\n      title: \u003ccontainer_identifier_name\u003e\n      description: \u003e\n        `\"@container::\u003cnamespace_path_string\u003e::\u003cscope_path_string\u003e::\u003ccontainer_base_name\u003e\"`\n      type: string\n\n    container_base_name:\n      title: \u003ccontainer_base_name\u003e\n      description: \u003e\n        `\"@container::\u003ccontainer_type\u003e[$[\u003cvar_affected\u003e|\u003ccode_given_name\u003e]]\"`\n      type: string\n\n    type_identifier_name:\n      title: \u003ctype_identifier_name\u003e\n      description: \u003e\n        String denoting a non-primitive type; will have a corresponding unique\n        `\u003ctype_spec\u003e`:\u003cbr\u003e\n        `\"@type::\u003cnamespace_path_string\u003e::\u003cscope_path_string\u003e::\u003cbase_name\u003e\"`\n      type: string\n\n    type_base_name:\n      title: \u003ctype_base_name\u003e\n      description: \u003e\n        `\"@type::\u003cbase_name\u003e\"`\n      type: string\n\n    literal_name:\n      title: \u003cliteral_name\u003e\n      description: \u003e\n        String representing a literal value:\n          `\"@literal::\u003ctype\u003e::\u003cvalue\u003e\"`\u003cbr\u003e\n        where `\u003ctype\u003e` is any primitive type:\n          \"integer\" | \"float\" | \"boolean\" | \"string\"\u003cbr\u003e\n        TODO: generalize to any \u003ctype\u003e (requires move to structured object)\n      type: string\n\n    type_def:\n      title: \u003ctype_def\u003e\n      description: \u003e\n        Define a non-primitive type.\n      required:\n        - name\n        - source_ref\n        - gensym\n      properties:\n        name:\n          $ref: '#/components/schemas/type_identifier_name'\n        source_ref:\n          $ref: '#/components/schemas/source_code_ref'\n        gensym:\n          $ref: '#/components/schemas/gensym'\n\n        attributes:\n          type: array\n          items:\n            $ref: '#/components/schemas/attribute_def'\n\n    attribute_def:\n      title: \u003cattribute_def\u003e\n      description: \u003e\n        Define an attribute of a `\u003ctype\u003e`.\n      required:\n        - name\n        - value_type\n      properties:\n        name:\n          type: string\n        value_type:\n          $ref: '#/components/schemas/type'\n\n    variable_def:\n      title: \u003cvariable_def\u003e\n      description: \u003e\n        The specification of a variable hosting a value.\n      required:\n        - name\n        - index\n        - source_ref\n        - gensym\n        - domain\n      properties:\n        name:\n          $ref: '#/components/schemas/variable_identifier_name'\n        index:\n          type: integer\n        source_ref:\n          $ref: '#/components/schemas/source_code_ref'\n        gensym:\n          $ref: '#/components/schemas/gensym'\n\n        domain:\n           $ref: '#/components/schemas/type'\n        domain_constraints:\n          type: string\n          description: \u003e\n            String representing a disjunctive normal form representation\n            with v = variable value, for example:\u003cbr\u003e\n            `\"(or (and (\u003c v infty) (\u003e= v 5)) (and (\u003e v -infty) (\u003c v 0)))\"`\n\n    container_def:\n      title: \u003ccontainer_def\u003e\n      description: \u003e\n        Define a container with a function subnetwork body.\n        Execution through the container body depends on value\n        of the boolean \"repeat\":\u003cbr\u003e\n        false = execute once\u003cbr\u003e\n        true = execute indefinitely (loop).\n      required:\n        - name\n        - source_refs\n        - gensym\n        - repeat\n        - arguments\n        - return_value\n        - body\n      properties:\n        name:\n          $ref: '#/components/schemas/container_identifier_name'\n        source_ref:\n          $ref: '#/components/schemas/source_code_ref'\n        gensym:\n          $ref: '#/components/schemas/gensym'\n\n        repeat:\n          type: boolean\n\n        arguments:\n          type: array\n          items:\n            $ref: '#/components/schemas/variable_base_name'\n        updated:\n          type: array\n          items:\n            $ref: '#/components/schemas/variable_base_name'\n        return_value:\n          type: array\n          items:\n            $ref: '#/components/schemas/variable_identifier_name'\n        body:\n          type: array\n          items:\n            $ref: '#/components/schemas/container_wiring'\n\n    container_wiring:\n      title: \u003ccontainer_wiring\u003e\n      description: \u003e\n        Defines the \"wiring\" of functions within a container,\n        specifying associations of variables to function\n        arguments (\"input\") and the function return_value (\"output\").\n      required:\n        - function\n        - input\n        - output\n      properties:\n        function:\n          $ref: '#/components/schemas/function_ref'\n        input:\n          type: array\n          items:\n            oneOf:\n              - $ref: '#/components/schemas/variable_base_name'\n              - $ref: '#/components/schemas/container_identifier_name'\n              - $ref: '#/components/schemas/literal_name'\n        output:\n          type: array\n          items:\n            $ref: '#/components/schemas/variable_base_name'\n        updated:\n          type: array\n          items:\n            $ref: '#/components/schemas/variable_base_name'\n\n    function_ref:\n      title: \u003cfunction_ref\u003e\n      description: \u003e\n        A `\u003cfunction_ref\u003e` is either\u003cbr\u003e\n        (1) `\u003ccontainer_identifier_name\u003e` denoting a container\n        specification\u003cbr\u003e\n        (2) `\u003clambda_function_source_ref\u003e` denoting an executable\n        lambda function.\u003cbr\u003e\n      required:\n        - name\n        - type\n      properties:\n        name:\n          oneOf:\n            - $ref: '#/components/schemas/container_identifier_name'\n            - $ref: '#/components/schemas/lambda_function_source_ref'\n        type:\n          description: \u003e\n            Indicate whether \"function\" is a\n            `\u003ccontainer_identifier_name\u003e` or `\u003clambda_function_source_ref\u003e`.\n          type: string\n          enum:\n            - container\n            - lambda\n\n    lambda_function_source_ref:\n      title: \u003clambda_function_source_ref\u003e\n      description: \u003e\n        String representation of a path/reference to a function\n        in `lambda.py`.\n      type: string\n\n    source_code_ref:\n      title: \u003csource_code_ref\u003e\n      description: \u003e\n        Reference to the location within the a source code file.\n      required:\n        - line_number\n        - file_path\n      properties:\n        line_number:\n          type: integer\n        column_start:\n          type: integer\n        column_end:\n          type: integer\n        file_path:\n          $ref: '#/components/schemas/file_path'\n\n    file_path:\n      title: \u003cfile_path\u003e\n      description: \u003e\n        String representation of the path to a file.\n      type: string\n\n    type:\n      title: \u003ctype\u003e\n      description: Root type.\n      oneOf:\n        - $ref: '#/components/schemas/type_type_def'\n        - $ref: '#/components/schemas/type_integer'\n        - $ref: '#/components/schemas/type_float'\n        - $ref: '#/components/schemas/type_boolean'\n        - $ref: '#/components/schemas/type_string'\n        - $ref: '#/components/schemas/type_array'\n        - $ref: '#/components/schemas/type_list'\n        - $ref: '#/components/schemas/type_map'\n        - $ref: '#/components/schemas/type_hashmap'\n        - $ref: '#/components/schemas/type_tuple'\n\n    type_type_def:\n      title: \u003ctype_type_def\u003e\n      description: \u003e\n        Indicator of a user-defined `\u003ctype_def\u003e`.\n        \"name\" is a `\u003ctype_identifier_name\u003e` that identifies the `\u003ctype_def\u003e`.\n      required:\n        - name\n        - type\n      properties:\n        name:\n          $ref: '#/components/schemas/type_identifier_name'\n        type:\n          type: string\n          enum:\n            - \"type\"\n\n    type_integer:\n      title: \u003ctype_integer\u003e\n      description: \u003e\n        Primitive scalar integer\n      required:\n        - name\n        - type\n      properties:\n        name:\n          type: string\n          enum:\n            - \"integer\"\n        type:\n          type: string\n          enum:\n            - \"type\"\n\n    type_float:\n      title: \u003ctype_float\u003e\n      description: \u003e\n        Primitive scalar float\n      required:\n        - name\n        - type\n      properties:\n        name:\n          type: string\n          enum:\n            - \"float\"\n        type:\n          type: string\n          enum:\n            - \"type\"\n\n    type_boolean:\n      title: \u003ctype_boolean\u003e\n      description: \u003e\n        Primitive scalar boolean\n      required:\n        - name\n        - type\n      properties:\n        name:\n          type: string\n          enum:\n            - \"boolean\"\n        type:\n          type: string\n          enum:\n            - \"type\"\n\n    type_string:\n      title: \u003ctype_string\u003e\n      description: \u003e\n        Primitive scalar string\n      required:\n        - name\n        - type\n      properties:\n        name:\n          type: string\n          enum:\n            - \"string\"\n        type:\n          type: string\n          enum:\n            - \"type\"\n\n    type_array:\n      title: \u003ctype_array\u003e\n      description: \u003e\n        Array primitive type.\n        Dimension integers can only be positive.\n        The \"element_type\" specifies the `\u003ctype\u003e` of the\n        elements in the array.\n      required:\n        - name\n        - type\n        - dimensions\n        - element_type\n      properties:\n        name:\n          type: string\n          enum:\n            - \"array\"\n        type:\n          type: string\n          enum:\n            - \"type\"\n        dimensions:\n          description: \u003e\n            Array of integer or variable (storing an integer) defining\n            size of each array dimension.\n          type: array\n          items:\n            oneOf:\n              - type: integer\n                minimum: 1\n              - $ref: '#/components/schemas/variable_identifier_name'\n        index_start:\n          description: \u003e\n            Array of integers defining start index of each dimension.\n            This field is optional. If left out, assumption is each\n            dimension has a start index of 0.\n          type: array\n          items:\n            type: integer\n        element_type:\n           $ref: '#/components/schemas/type'\n\n    type_list:\n      title: \u003ctype_list\u003e\n      description: \u003e\n        List primitive type.\n      required:\n        - name\n        - type\n      properties:\n        name:\n          type: string\n          enum:\n            - \"list\"\n        type:\n          type: string\n          enum:\n            - \"type\"\n\n    type_map:\n      title: \u003ctype_map\u003e\n      description: \u003e\n        Map primitive type.\n      required:\n        - name\n        - type\n      properties:\n        name:\n          type: string\n          enum:\n            - \"map\"\n        type:\n          type: string\n          enum:\n            - \"type\"\n\n    type_hashmap:\n      title: \u003ctype_hashmap\u003e\n      description: \u003e\n        A Map who's keys have a \"key_type\" `\u003ctype\u003e`.\n      required:\n        - name\n        - type\n        - key_type\n      properties:\n        name:\n          type: string\n          enum:\n            - \"hashmap\"\n        type:\n          type: string\n          enum:\n            - \"type\"\n        key_type:\n          $ref: '#/components/schemas/type'\n\n    type_tuple:\n      title: \u003ctype_tuple\u003e\n      description: \u003e\n        Tuple primitive type.\n        \"element_types\" is an array of the `\u003ctypes\u003e` of each\n        element of the tuple.\n        The order of `\u003ctypes\u003e` in \"elemennt_types\" corresponds\n        to the order of elements in the tuple.\n      required:\n        - name\n        - type\n        - element_types\n      properties:\n        name:\n          type: string\n          enum:\n            - \"tuple\"\n        type:\n          type: string\n          enum:\n            - \"type\"\n        element_types:\n          type: array\n          items:\n            $ref: '#/components/schemas/type'\n\nexternalDocs:\n  description: Find more information here\n  url: 'https://ml4ai.github.io/delphi/grfn_spec.html'\n",
			"canonicalURL": "/github.com/ml4ai/delphi@c101dfd4d98cdec0bae089704949190d33ed1c0c/-/blob/docs/grfn_openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ml4ai/delphi/blob/c101dfd4d98cdec0bae089704949190d33ed1c0c/docs/grfn_openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}