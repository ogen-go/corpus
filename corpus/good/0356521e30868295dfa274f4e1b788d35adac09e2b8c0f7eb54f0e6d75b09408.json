{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nwfsc-fram/boatnet"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "apps/dev-auth-server/src/openapi.yaml",
			"byteSize": 23446,
			"content": "openapi: 3.0.1\ninfo:\n  title: Auth Server [DEV ONLY]\n  description: Auth server for boatnet.\n  version: 1.0.1\nservers:\n  - url: /api/v1\ntags:\n  - name: Login\n    description: Login Routines\n  - name: User Info\n    description: Get User Info + Details\n  - name: User Management\n    description: User Management\n  - name: Roles\n    description: Roles Management\n\npaths:\n  /login:\n    post:\n      tags:\n        - Login\n      summary: Perform login to get JWT token\n      operationId: postLogin\n      requestBody:\n        description: Need username and password\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Login'\n            examples:\n              Encoded:\n                value:\n                  username: 'test'\n                  passwordEnc: 'dGVzdA=='\n                  applicationName: 'BOATNET_OBSERVER'\n              Basic:\n                value:\n                  username: 'test'\n                  password: 'test'\n        required: true\n      responses:\n        '200':\n          description: 'User Authorized'\n          content:\n            application/json:\n              schema:\n                type: 'object'\n                properties:\n                  username:\n                    type: string\n                  token:\n                    type: string\n                    description: 'JWT encoded token'\n              example:\n                username: 'test'\n                token: '(JWT Token - decode at jwt.io)'\n        '401':\n          description: 'Authorization information is missing or invalid.'\n          content:\n            application/json:\n              schema:\n                type: 'object'\n                properties:\n                  status:\n                    type: integer\n                    format: int64\n                  message:\n                    type: string\n              example:\n                status: 401\n                message: 'You have not been granted access to this application.'\n\n  /pubkey:\n    get:\n      tags:\n        - Login\n      summary: Get RSA key for JWT validation\n      description: Returns public RSA key\n      operationId: getPubkey\n      responses:\n        '200':\n          description: Retrieved Public RSA Key OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Keys'\n              example:\n                kty: 'RSA'\n                e: '(JWK Encoded Key)'\n                n: 'AQAB'\n  /users:\n    get:\n      security:\n        - bearerAuth: []\n      tags:\n        - User Info\n      summary: Get Users (Roles Read Access)\n      description: Get application users\n      operationId: getUsers\n      parameters:\n        - in: query\n          name: applicationName\n          schema:\n            type: string\n            default: 'BOATNET_OBSERVER'\n          description: Application Name\n      responses:\n        '200':\n          description: List of users\n          content:\n            application/json:\n              schema:\n                type: 'object'\n                properties:\n                  users:\n                    type: array\n                    items:\n                      type: string\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFoundError'\n  /users-details:\n    get:\n      security:\n        - bearerAuth: []\n      tags:\n        - User Info\n      summary: Get All User Details (Roles Read Access)\n      description: Get application users details\n      operationId: getUsersDetails\n      parameters:\n        - in: query\n          name: applicationName\n          schema:\n            type: string\n            default: 'BOATNET_OBSERVER'\n          description: Application Name\n      responses:\n        '200':\n          description: List of users\n          content:\n            application/json:\n              schema:\n                type: 'object'\n                properties:\n                  applicationName:\n                    type: string\n                    example: 'BOATNET_OBSERVER'\n                  users:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        user_id:\n                          type: string\n                        first_name:\n                          type: string\n                        last_name:\n                          type: string\n                        email_address:\n                          type: string\n                        phone:\n                          type: string\n                        org:\n                          type: string\n                        division:\n                          type: string\n\n                    example:\n                      -\n                        user_id: 'seabass.mcgillicutty'\n                        first_name: 'Seabass'\n                        last_name: 'McGillicutty'\n                        email_address: 'test@test.com'\n                        phone: '123-456-7890'\n                        org: null\n                        division: 'FRAM'\n\n\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFoundError'\n  /roles:\n    get:\n      security:\n        - bearerAuth: []\n      tags:\n        - Roles\n      summary: Get All Roles (Roles Read Access)\n      description: Get all application roles\n      operationId: getRoles\n      parameters:\n        - in: query\n          name: applicationName\n          schema:\n            type: string\n            default: 'BOATNET_OBSERVER'\n          description: Application Name\n      responses:\n        '200':\n          description: Roles\n          content:\n            application/json:\n              schema:\n                type: 'object'\n                properties:\n                  users:\n                    type: array\n                    items:\n                      type: string\n              example:\n                roles: ['observer', 'debriefer', 'every-other-role...']\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFoundError'\n\n  /user:\n    post:\n      security:\n        - bearerAuth: []\n      tags:\n        - User Management\n      summary: Add New User (Roles Admin)\n      description: Create a boatnet user\n      operationId: postUser\n      requestBody:\n        description: New User info\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddUser'\n        required: true\n      responses:\n        '200':\n          description: New User Created\n          content:\n            application/json:\n              schema:\n                type: 'object'\n                properties:\n                  username:\n                    type: string\n                  userId:\n                    type: number\n              example:\n                username: 'seabass.mcgillicutty'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      security:\n        - bearerAuth: []\n      tags:\n        - User Management\n      summary: Delete User (Roles Admin)\n      description: Delete a boatnet user from one or all applications\n      operationId: delUser\n      parameters:\n        - in: query\n          name: username\n          schema:\n            type: string\n          required: true\n          description: Username to delete\n          example: 'jane.doe'\n        - in: query\n          name: applicationName\n          schema:\n            type: string\n            default: 'ALL'\n          required: false\n          description: Remove access to one specific application (all roles) or 'ALL' to remove user entirely\n          example: 'ALL'\n\n      responses:\n        '200':\n          description: User Deleted\n          content:\n            application/json:\n              schema:\n                type: 'object'\n                properties:\n                  username:\n                    type: string\n                  applicationName:\n                    type: string\n                  result:\n                    type: string\n              example:\n                username: 'seabass.mcgillicutty'\n                applicationName: 'BOATNET_OBSERVER'\n                result: 'User removed from BOATNET_OBSERVER application(s).'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /user-role:\n    get:\n      security:\n        - bearerAuth: []\n      tags:\n        - Roles\n        - User Info\n      summary: Get a User's Roles (Roles Read Access)\n      description: Get roles for existing user\n      operationId: getUserRole\n      parameters:\n        - in: query\n          name: username\n          description: Username to get roles for\n          required: true\n          schema:\n            type: string\n          example: 'jane.doe'\n        - in: query\n          name: applicationName\n          schema:\n            type: string\n            default: 'BOATNET_OBSERVER'\n          description: Application Name\n      responses:\n        '200':\n          description: User Roles\n          content:\n            application/json:\n              schema:\n                type: 'object'\n                properties:\n                  applicationName:\n                    type: string\n                  username:\n                    type: string\n                  roles:\n                    type: array\n                    items:\n                      type: string\n              example:\n                username: 'seabass.mcgillicutty'\n                roles: ['admin', 'captain']\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFoundError'\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n    post:\n      security:\n        - bearerAuth: []\n      tags:\n        - Roles\n      summary: Add New User Role (Roles Admin)\n      description: Add a role to existing user\n      operationId: postUserRole\n      requestBody:\n        description: User + new Role info\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddUserRole'\n        required: true\n      responses:\n        '200':\n          description: Role Added\n          content:\n            application/json:\n              schema:\n                type: 'object'\n                properties:\n                  username:\n                    type: string\n                  applicationName:\n                    type: string\n                  roles:\n                    type: array\n                    items:\n                      type: string\n              example:\n                username: 'seabass.mcgillicutty'\n                roles: ['admin', 'captain']\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      security:\n        - bearerAuth: []\n      tags:\n        - Roles\n      summary: Delete User Role(Roles Admin)\n      description: Remove a role from existing user\n      operationId: delUserRole\n      parameters:\n        - in: query\n          name: username\n          schema:\n            type: string\n          required: true\n          description: Username to delete\n        - in: query\n          name: role\n          schema:\n            type: string\n          required: true\n          description: Role to delete\n        - in: query\n          name: applicationName\n          schema:\n            type: string\n            default: 'BOATNET_OBSERVER'\n          required: false\n          description: Application name to remove role from\n          example:\n            username: 'jane.doe'\n            role: 'captain'\n            applicationName: 'BOATNET_OBSERVER'\n      responses:\n        '200':\n          description: Role Deleted\n          content:\n            application/json:\n              schema:\n                type: 'object'\n                properties:\n                  username:\n                    type: string\n                  roles:\n                    type: array\n                    items:\n                      type: string\n                  applicationName:\n                    type: string\n              example:\n                username: 'seabass.mcgillicutty'\n                roles: ['captain']\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /user-role-status:\n    put:\n      security:\n        - bearerAuth: []\n      tags:\n        - Roles\n      summary: Enable or Disable User Role (Roles Admin)\n      description: Enable/disable role of existing user\n      operationId: postUserRoleStatus\n      requestBody:\n        description: User, Role, enable flag\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserRoleStatus'\n        required: true\n      responses:\n        '200':\n          description: Role Status Updated\n          content:\n            application/json:\n              schema:\n                type: 'object'\n                properties:\n                  username:\n                    type: string\n                  roles:\n                    type: array\n                    items:\n                      type: string\n                  applicationName:\n                    type: string\n              example:\n                username: 'seabass.mcgillicutty'\n                roles: ['admin', 'captain']\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /user-details:\n    put:\n      security:\n        - bearerAuth: []\n      tags:\n        - User Management\n      summary: Update User Details (Roles Admin)\n      description: Update a user's details, either org, phone, or email_address\n      operationId: postUserDetails\n      requestBody:\n        description: Updated User info\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateUser'\n        required: true\n      responses:\n        '200':\n          description: User Updated\n          content:\n            application/json:\n              schema:\n                type: 'object'\n                properties:\n                  username:\n                    type: string\n                  keyValues:\n                    type: array\n                    items:\n                      type: object\n              example:\n                username: 'seabass.mcgillicutty'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    get:\n      security:\n        - bearerAuth: []\n      tags:\n        - User Info\n      summary: Get Single User Details (Roles Read Access)\n      description: Get application users details\n      operationId: getUserDetails\n      parameters:\n        - in: query\n          name: username\n          schema:\n            type: string\n          required: true\n          description: Username\n      responses:\n        '200':\n          description: User Details [TBD]\n          content:\n            application/json:\n              schema:\n                type: 'object'\n                properties:\n                  username:\n                    type: string\n                    example: 'seabass.mcgillicutty'\n                  columns:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        column_name:\n                          type: string\n                        value:\n                          type: string\n\n\n                    example:\n                      -\n                        column_name: 'LAST_NAME'\n                        value: 'McGillicutty'\n\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFoundError'\n  /test-auth:\n    post:\n      tags:\n        - Login\n      summary: Checks JWT token validity\n      description: Check JWT auth\n      operationId: postTestAuth\n      requestBody:\n        description: JWT Token\n        content:\n          application/json:\n            schema:\n              type: 'object'\n              properties:\n                token:\n                  type: string\n            example:\n              token: '(jwt value)'\n        required: false\n      responses:\n        '200':\n          description: JWT OK\n          content:\n            application/json:\n              schema:\n                type: 'object'\n                properties:\n                  username:\n                    type: string\n                  roles:\n                    type: array\n                    items:\n                      type: string\n              example:\n                user: 'test'\n                roles: ['test']\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n    get:\n      security:\n        - bearerAuth: []\n      tags:\n        - Login\n      summary: Check JWT token validity - Bearer Auth\n      description: Check JWT auth\n      operationId: getTestAuth2\n      responses:\n        '200':\n          description: JWT OK\n          content:\n            application/json:\n              schema:\n                type: 'object'\n                properties:\n                  username:\n                    type: string\n                  roles:\n                    type: array\n                    items:\n                      type: string\n              example:\n                user: 'test'\n                roles: ['test']\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\ncomponents:\n  securitySchemes:\n    bearerAuth: # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: JWT # optional, arbitrary value for documentation purposes\n  schemas:\n    Keys:\n      type: object\n      properties:\n        keys:\n          type: array\n          items:\n            type: object\n            properties:\n              kty:\n                type: string\n              e:\n                type: string\n              n:\n                type: string\n                description: JWK Encoded PEM Public Key\n    Login:\n      type: object\n      required:\n        - username\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n          description: Required if passwordEnc not specified\n        passwordEnc:\n          type: string\n          description: Required if password not specified\n        encodeCouchPassword:\n          type: boolean\n          description: Base64 encode couch password\n        clientVersion:\n          type: string\n          description: Optional (recommended) client version info\n        applicationName:\n          type: string\n          description: Application name, determines which roles are returned in JWT\n          default: 'BOATNET_OBSERVER'\n    AddUser:\n      type: object\n      required:\n        - username\n        - lastName\n        - firstName\n        - emailAddress\n      properties:\n        username:\n          type: string\n        lastName:\n          type: string\n        firstName:\n          type: string\n        emailAddress:\n          type: string\n        comment:\n          type: string\n      example:\n        username: 'jane.doe'\n        lastName: 'Doe'\n        firstName: 'Jane'\n        emailAddress: 'bad@address.xyz'\n        comment: 'This is an example user.'\n    AddUserRole:\n      type: object\n      required:\n        - username\n        - role\n      properties:\n        applicationName:\n          type: string\n          default: 'BOATNET_OBSERVER'\n        username:\n          type: string\n        role:\n          type: string\n      example:\n        username: 'jane.doe'\n        role: 'captain'\n    UpdateUser:\n      type: object\n      required:\n        - username\n        - keyValues\n      properties:\n        username:\n          type: string\n        keyValues:\n          type: object\n          properties:\n            org:\n              type: string\n            phone:\n              type: string\n            email_address:\n              type: string\n      example:\n        username: 'jane.doe'\n        keyValues:\n          phone: '123-123-1234'\n          org: 'FRAM'\n    UserRoleStatus:\n      type: object\n      required:\n        - username\n        - role\n        - enable\n      properties:\n        applicationName:\n          type: string\n          default: 'BOATNET_OBSERVER'\n        username:\n          type: string\n        role:\n          type: string\n        enable:\n          type: boolean\n      example:\n        username: 'jane.doe'\n        role: 'captain'\n        enable: false\n    Error:\n      required:\n        - status\n        - message\n      properties:\n        status:\n          type: integer\n          format: int32\n        message:\n          type: string\n      example:\n        status: 401\n        message: 'Unauthorized'\n  responses:\n    UnauthorizedError:\n      description: Access token is missing or invalid\n      content:\n        application/json:\n          schema:\n            type: 'object'\n            properties:\n              status:\n                type: integer\n                format: int64\n              message:\n                type: string\n          examples:\n            Malformed:\n              value:\n                status: 401\n                message: 'jwt malformed'\n              summary: 'JWT malformed'\n            Expired:\n              value:\n                status: 401\n                message: 'jwt expired'\n              summary: 'JWT lifetime expired'\n            InvalidSignature:\n              value:\n                status: 401\n                message: 'invalid signature'\n              summary: 'JWT signed with different private key'\n            InsufficientPrivs:\n              value:\n                status: 401\n                message: 'Insufficient role privileges'\n              summary: 'User does not have required role'\n    NotFoundError:\n      description: No data found\n      content:\n        application/json:\n          schema:\n            type: 'object'\n            properties:\n              status:\n                type: integer\n                format: int64\n              message:\n                type: string\n          example:\n            status: 404\n            message: 'Not Found'\n",
			"canonicalURL": "/github.com/nwfsc-fram/boatnet@5644815eb730c5a67de6c9f9c5da868c6baec6a8/-/blob/apps/dev-auth-server/src/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/nwfsc-fram/boatnet/blob/5644815eb730c5a67de6c9f9c5da868c6baec6a8/apps/dev-auth-server/src/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}