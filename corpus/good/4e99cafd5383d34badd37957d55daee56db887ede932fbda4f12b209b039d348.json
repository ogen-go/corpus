{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/gocodebox/lifterlms-rest"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "spec/openapi.yaml",
			"byteSize": 18986,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0-beta.25\n  title: LifterLMS REST API\n  description: \u003e-\n    # Introduction\n\n    LifterLMS (LLMS) is fully integrated with the [WordPress REST API](https://developer.wordpress.org/rest-api/). This allows LifterLMS data to be created, read, updated, and deleted using requests in JSON format and using WordPress REST API Authentication methods and standard HTTP verbs which are understood by most HTTP clients.\n\n    ## Public Beta\n\n    As of LifterLMS version 3.34.0, the LifterLMS REST API is included in the LifterLMS core plugin for public evaluation and testing.\n\n    The specification may change over the next few months as we evaluate feedback and use-cases. If you are building integrations relying on the REST API please keep your eye on our changelog and let us know how things are going!\n\n    If you're interested in contributing or discussing the REST API, please join us in [GitHub](https://github.com/gocodebox/lifterlms-rest) and post in `#developers` on the [LifterLMS Community Slack](https://lifterlms.com/slack).\n\n    ## Requirements\n\n    To use the latest version of the REST API you must be using the following:\n\n      + LifterLMS Version 3.34.0+.\n      + WordPress 5.2+.\n      + Pretty permalinks in `Settings -\u003e Permalinks` so that the custom endpoints are supported. **Default permalinks will not work.**\n      + An SSL certificate.\n\n    ## Libraries and Tools\n\n    ### Official Libraries\n\n    LifterLMS develops and maintains official libraries for different programming languages so you can easily build around the REST API.\n\n      + [Node/Javascript](https://github.com/gocodebox/llms-api-node)\n      + PHP (coming soon)\n\n    ### Tools\n\n    Some useful tools to help develop and access the REST API:\n\n      + [Postman](https://www.getpostman.com/) - A multi platform REST API GUI client.\n      + [RESTCLient](https://addons.mozilla.org/en-US/firefox/addon/restclient/) - A free Firefox add-on.\n      + [Advanced REST client](https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo) - A free Google Chrome extension.\n      + [RequestBin](https://requestbin.com/) - A free service allowing you to quickly test webhooks.\n\n    # Base URL\n\n    The LifterLMS REST API extends the [WordPress REST API](https://developer.wordpress.org/rest-api/) which is a [distributed API](https://developer.wordpress.org/rest-api/reference/#a-distributed-api) available individually on any WordPress website.\n\n\n    As a distributed API, there is no singular root or base URL to use when performing API requests.\n\n\n    For most WordPress websites, the base REST URL is located at `/wp-json/`, but this can be customized on a site-by-site basis.\n\n\n    If you're not sure what your site's base REST URL is, you can discover it using the [WordPress REST API discovery proccess](https://developer.wordpress.org/rest-api/using-the-rest-api/discovery/).\n\n\n    The examples found throughout this reference use `https://example.tld/wp-json/` as the base REST URL. This should be replaced with your website's actual base URL when using the REST API.\n\n    # Authentication\n\n    Requests to most API resources require authentication. Authentication can be preformed by providing API Credentials by using as the username and password via [HTTP Basic Authentication](http://en.wikipedia.org/wiki/Basic_access_authentication) or through request headers.\n\n\n    Requests to the REST API may only be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Requests made over HTTP will fail.\n\n    ## Basic Authentication\n\n    The preferred authentication method is HTTP Basic Authentication.\n\n    To use HTTP Basic Auth, provide the Consumer Key as the username and the Consumer Secret as the password.\n\n    ```\n      curl https://example.tld/wp-json/llms/v1/courses \\\n        -u ck_d7W85twOWT0poKzDSAQzI7:cs_8bsMmRfjW1HgEFw5ad7BIF\n    ```\n\n    ## Header Authentication\n\n    Alternatively, requests may be authenticated by providing the Consumer Key and Consumer Secret as the request headers `X-LLMS-CONSUMER-KEY` and `X-LLMS-CONSUMER-SECRET`.\n\n    ```\n      curl https://example.tld/wp-json/llms/v1/courses \\\n        -H X-LLMS-CONSUMER-KEY:ck_d7W85twOWT0poKzDSAQzI7 \\\n        -H X-LLMS-CONSUMER-SECRET:cs_8bsMmRfjW1HgEFw5ad7BIF\n    ```\n\n  x-logo:\n    altText: LifterLMS\n    url: \"https://gocodebox.github.io/lifterlms-brand/assets/img/png/logo/lifterlms-logo.png\"\n    href: \"https://lifterlms.com/\"\n\nservers:\n  - url: https://example.tld/wp-json/llms/v1\n\nsecurity:\n  - Basic-Authentication: []\n\ntags:\n\n  - name: API Keys\n    description: |\n      API Keys are used to authenticate REST API requests.\n\n      The API keys API allows you to create, view, update, and delete API keys.\n\n      ## API Key Properties\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/APIKey\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n  - name: Access Plans\n    description: |\n      Access plans allow you to define how LMS content is purchased and accessed by your students.\n\n      The access plans API allows you to create, view, update, and delete access plans.\n\n      ## Access Plan Properties\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/AccessPlanResponse\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n  - name: Courses\n    description: |\n      The courses API allows you to create, view, update, and delete courses.\n\n      ## Course Properties\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/CourseResponse\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n  - name: Instructors\n    description: |\n      Instructors are members of your site who have the ability to create and manage LMS content and students. Instructors may be Adminstators, LMS Managers, Instructors, and Instructors Assistants.\n\n      The instructors API allows you to create, view, update, and delete student accounts.\n\n      ## Instructor Properties\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/Instructor\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n  - name: Memberships\n    description: |\n      The memberships API allows you to create, view, update, and delete memberships.\n\n      ## Membership Properties\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/MembershipResponse\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n  - name: Quiz Questions\n    description: |\n      The quiz questions API allows you to create, view, update, and delete quiz questions.\n\n      ## Question Types\n\n      There are four unique question types available via the LifterLMS Core:\n\n      + Multiple Choice\n      + Picture Choice\n      + True / False\n      + Content\n\n      An additional eight question types are available with the LifterLMS Advanced Quizzes Add-on:\n\n      + Fill in the Blank\n      + Reorder Items\n      + Reorder Pictures\n      + Short Answer\n      + Long Answer\n      + File Upload\n      + Code\n      + Scale\n\n      While these additional question types are documented here, they are only available when the LifterLMS Advanced Quizzes Add-on is installed and activated on your site.\n\n  - name: Quizzes\n    description: |\n      The quizzes API allows you to create, view, update, and delete quizzes.\n\n      ## Quiz Properties\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/QuizResponse\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n  - name: Sections\n    description: |\n      The sections API allows you to create, view, update, and delete sections.\n\n      Sections are used within courses to organize content (lessons) into groups.\n\n      ## Section Properties\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/SectionResponse\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n  - name: Lessons\n    description: |\n      The lessons API allows you to create, view, update, and delete lessons.\n\n      ## Lesson Properties\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/LessonResponse\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n  - name: Students\n    description: |\n      Students are members of your site who are (or were) enrolled in your courses and memberships. Students can be any WordPress user account on your site (not exclusively the \"student\" role).\n\n      The students API allows you to create, view, update, and delete student accounts as well as view information about the student's LMS content.\n\n      ## Student Properties\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/Student\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n  - name: Student Enrollments\n    description: |\n      The Student Enrollments API allows you to create, view, update, and delete records of a student's enrollment into courses and memberships.\n\n      ## Enrollment Properties\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/Enrollment\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n  - name: Student Progress\n    description: |\n      The Student Progress API allows you to create, view, update, and delete a student's progress through courses.\n\n      A student's progress through a course is calculated by dividing the number of lessons completed by the student by the total number of lessons available in a course. It is not possible to manually update the `progress` percentage property of a course, instead you must update the status of each lesson in the course.\n\n      When updating the status of a course or a section, the status of the lessons within that course or section will be automatically updated to match the status of the course or section. For example, when updating a course's status to `complete` a new `complete` progress record will be created/updated for each incomplete lesson in the course.\n\n      Finally, the `progress` property of a lesson will _always_ be either `0` _or_ `100` whereas the `progress` of courses and sections will range from `0` _to_ `100`.\n\n      ## Progress Properties\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/Progress\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n  - name: Webhooks\n    description: |\n      Webhooks can be created to notify you about LMS-related events that happen on your site.\n\n      The Webhooks API allows you to create, view, update, and delete webhooks.\n\n      Webhooks may additionally be managed on the LifterLMS Webhooks screen on your site's WordPress admin panel.\n\n      ## Topics\n\n      The `topic` is a combination of the resource (e.g. student) and event (e.g. created). Each `topic` maps to one or more hook names (e.g. `llms_user_registered`). The proper hooks are automatically added based on the `topic`.\n\n      The following topics are available:\n\n      + Courses\n        + `course.created`\n        + `course.updated`\n        + `course.deleted`\n        + `course.restored`\n      + Sections\n        + `section.created`\n        + `section.updated`\n        + `section.deleted`\n        + `section.restored`\n      + Lessons\n        + `lesson.created`\n        + `lesson.updated`\n        + `lesson.deleted`\n        + `lesson.restored`\n      + Memberships\n        + `membership.created`\n        + `membership.updated`\n        + `membership.deleted`\n        + `membership.restored`\n      + Students\n        + `student.created`\n        + `student.updated`\n        + `student.deleted`\n      + Student Enrollment\n        + `enrollment.created`\n        + `enrollment.updated`\n        + `enrollment.deleted`\n      + Student Progress\n        + `progress.updated`\n        + `progress.deleted`\n      + Instructors\n        + `instructor.created`\n        + `instructor.updated`\n        + `instructor.deleted`\n\n      Custom topics can also be used in order to create a webhook triggered by an arbitrary WordPress hook. For a custom topic use the `action` resource with any hook as the event. For example, to create a webhook triggered by the `user_register` hook the topic would be `action.user_register`.\n\n      ## Delivery\n\n      Webhook payloads are delivered in the background using wp-cron and `wp_remote_post()` (HTTP POST).\n\n      Custom headers are supplied to assist with the receipt of the webhook:\n\n      | Header                   | Description                                        | Example             |\n      | ------------------------ | -------------------------------------------------- | ------------------- |\n      | X-LLMS-Webhook-Source    | The URL of the LifterLMS website.                  | https://example.tld |\n      | X-LLMS-Webhook-Topic     | The webhook `topic` property.                      | student.created     |\n      | X-LLMS-Webhook-Resource  | The webhook `resource` property.                   | student             |\n      | X-LLMS-Webhook-Event     | The webhook `event` property.                      | created             |\n      | X-LLMS-Webhook-Signature | A base64 encoded HMAC-SHA256 hash of the payload.  |                     |\n      | X-LLMS-Webhook-ID        | The unique webhook identifier (WordPress post ID). | 654                 |\n      | X-LLMS-Delivery-ID       | A unique ID for the webhook delivery.              | 765                 |\n\n      The payload is a JSON-encoded object of the API resource as if retrieved by a `GET` request.\n\n      The payload for a custom hook will be a JSON-encoded version of the first parameter supplied by the hook.\n\n      ## Signature Verification\n\n      Webhooks are signed by LifterLMS and the event's unique signature is included in the `X-LLMS-Webhook-Signature` header. The signature allows you to verify that the webhook was sent by LifterLMS and not by a third party. We recommend verifying all webhooks and discarding any payloads which cannot be verified.\n\n      The `X-LLMS-Webhook-Signature` contains a timestamp and one or more signatures. The timestamp is prefixed by `t=` and the signatures are prefixed by `v` and an integer. Currently the only valid signature scheme is `v1`.\n\n      ```\n      X-LLMS-Webhook-Signature: t=1562715579,v1=0d579d62ef442b6e2d1d522924aafed480fdaaacbe498486a94445de8b995819\n      ```\n\n      The signature is generated using a hash-based message authentication code ([HMAC](https://en.wikipedia.org/wiki/HMAC)) with [SHA-256](https://en.wikipedia.org/wiki/SHA-2).\n\n      To verify a webhook signature you must construct an _expected_ webhook signature which you can then compare against the webhook signature supplied with delivery.\n\n      #### Step 1: Extract the timestamps and signatures from the header\n\n      Split the header, using the `,` character as the separator, to get a list of elements. Then split each element, using the `=` character as the separator, to get a prefix and value pair.\n\n      The value for the prefix `t` corresponds to the timestamp, and `v1` corresponds to the signature. You can discard all other elements.\n\n      #### Step 2: Prepare the payload string for signing\n\n      You achieve this by concatenating:\n\n      + The timestamp (as a string)\n      + The character `.`\n      + The actual JSON payload (i.e. the request's body)\n\n      #### Step 3: Generate the expected signature string\n\n      Compute an HMAC with the SHA256 hash function. Use the endpoints signing secret as the key, and use the string from Step 2 as the message.\n\n      #### Step 4: Compare the signatures\n\n      Compare the signature(s) in the header to the expected signature. If a signature matches, compute the difference between the current timestamp and the received timestamp, then decide if the difference is within your tolerance. We recommend accepting a difference of no more than five minutes between the provided timestamp and the current time.\n\n      ## Webook Properties\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/Webhook\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n  - name: Add-On Requirements\n    description: |\n      API documentation for add-ons developed and maintained by the LifterLMS core team are included for completeness, however the API endpoints for each add-on are only available when the required add-on plugin is installed and activated on your LifterLMS-powered website.\n\n  - name: Groups\n    description: |\n\n      Groups are an organizational unit of students. The groups API allows you to create, view, update, and delete groups.\n\n      ## Requirements\n\n      The groups API is only available through the [LifterLMS Groups advanced add-on](https://lifterlms.com/product/groups). This plugin must be installed and activated in order to utilize the Groups API.\n\n      ## Group Properties\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/GroupResponse\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n  - name: Group Invitations\n    description: |\n\n      The group invitations API allows creation, deletion, and listing of group invitations.\n\n      ## Requirements\n\n      The groups API is only available through the [LifterLMS Groups advanced add-on](https://lifterlms.com/product/groups). This plugin must be installed and activated in order to utilize the Groups API.\n\n      ## Group Invitation Properties\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/GroupInvitation\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n  - name: Group Members\n    description: |\n\n      The group members API allows listing and retrieval of group members. The role of a member within a group may be updated and removed from a group using this API as well.\n\n      It is not possible to *add* a memeber directly to a group. Instead a new group invitation should be created (and accepted by the user).\n\n      ## Requirements\n\n      The groups API is only available through the [LifterLMS Groups advanced add-on](https://lifterlms.com/product/groups). This plugin must be installed and activated in order to utilize the Groups API.\n\n      ## Group Member Properties\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/GroupMember\" showReadOnly={true} showWriteOnly={true} /\u003e\n\n  - name: Group Seats\n    description: |\n\n      The group seats API allows querying and updating information related to the number of seats available for a group.\n\n      ## Requirements\n\n      The groups API is only available through the [LifterLMS Groups advanced add-on](https://lifterlms.com/product/groups). This plugin must be installed and activated in order to utilize the Groups API.\n\n      ## Group Seat Properties\n\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/GroupSeat\" showReadOnly={true} showWriteOnly={true} /\u003e\n\nx-tagGroups:\n\n  - name: API Keys\n    tags:\n      - API Keys\n\n  - name: Courses\n    tags:\n      - Courses\n      - Sections\n      - Lessons\n\n  - name: E-Commerce\n    tags:\n      - Access Plans\n\n  - name: Instructors\n    tags:\n      - Instructors\n\n  - name: Memberships\n    tags:\n      - Memberships\n\n  # @todo: Implement.\n  # - name: Quizzes\n  #   tags:\n  #     - Quizzes\n  #     - Quiz Questions\n  #     - Quiz Attempts\n\n  - name: Students\n    tags:\n      - Students\n      - Student Enrollments\n      - Student Progress\n\n  - name: Webhooks\n    tags:\n      - Webhooks\n\n  - name: Add-Ons\n    tags:\n      - Add-On Requirements\n      - Groups\n      - Group Invitations\n      - Group Members\n      - Group Seats\n\n",
			"canonicalURL": "/github.com/gocodebox/lifterlms-rest@1428c722d6801cb1bd9e7a3e534dacd642151b01/-/blob/spec/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/gocodebox/lifterlms-rest/blob/1428c722d6801cb1bd9e7a3e534dacd642151b01/spec/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}