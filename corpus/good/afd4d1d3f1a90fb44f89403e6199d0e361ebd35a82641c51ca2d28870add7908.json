{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ulwlu/Go-CleanArchitecture-APIServer"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "document/openapi.yaml",
			"byteSize": 11356,
			"content": "openapi: 3.0.3\ninfo:\n  title: Go CleanArchitecture Users API\n  description: |\n    # Features\n    - Create a user's name.\n    - Read a specified user's name.\n    - Read all users' names.\n    - Update a specified user's name.\n    - Delete a specified user's name.\n  contact:\n    name: ulwlu\n    url: https://github.com/ulwlu/Go-CleanArchitectire-APIServer\n  license:\n    name: MIT License\n    url: https://opensource.org/licenses/MIT\n  version: 1.0.0\nservers:\n- url: http://localhost:{port}\n  description: Local Development\n  variables:\n    port:\n      default: \"8080\"\n      enum:\n      - \"80\"\n      - \"8080\"\nsecurity:\n- apikey_auth: []\ntags:\n- name: users\n  description: The data of Users operation\npaths:\n  /users:\n    get:\n      tags:\n      - users\n      summary: Get all users' names\n      description: '(description): Get all users'' names'\n      operationId: usersGET\n      responses:\n        \"200\":\n          description: Success operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Name'\n                x-content-type: application/json\n        \"403\":\n          description: You are not available\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n        \"429\":\n          description: We banned too many requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n        \"500\":\n          description: Server went some wrong\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n        \"503\":\n          description: Server is in maintenance mode\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n      deprecated: false\n      x-swagger-router-controller: Users\n    post:\n      tags:\n      - users\n      summary: Create a new user\n      description: '(description): Create a new user'\n      operationId: usersUserIdPOST\n      requestBody:\n        description: '(description): User''s name'\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Name'\n        required: true\n      responses:\n        \"201\":\n          description: Success operation (Not send new location this time, but in\n            production, make sure it would be better to send user to new URL)\n          headers:\n            location:\n              description: New URL of created review\n              style: simple\n              explode: false\n              schema:\n                type: string\n                format: url\n        \"403\":\n          description: You are not available\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n        \"429\":\n          description: We banned too many requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n        \"500\":\n          description: Server went some wrong\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n        \"503\":\n          description: Server is in maintenance mode\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n      x-swagger-router-controller: Users\n  /users/{userId}:\n    get:\n      tags:\n      - users\n      summary: Get a specified user's name\n      description: '(description): Get a specified user''s name'\n      operationId: usersUserIdGET\n      parameters:\n      - name: userId\n        in: path\n        description: user's id\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n        example: \"123\"\n      responses:\n        \"200\":\n          description: Success operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Name'\n              x-content-type: application/json\n        \"403\":\n          description: You are not available\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n        \"404\":\n          description: Resource is not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n        \"429\":\n          description: We banned too many requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n        \"500\":\n          description: Server went some wrong\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n        \"503\":\n          description: Server is in maintenance mode\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n      deprecated: false\n      x-swagger-router-controller: Users\n    put:\n      tags:\n      - users\n      summary: Update a specified user\n      description: '(description): Update a specified user'\n      operationId: usersUserIdPUT\n      parameters:\n      - name: userId\n        in: path\n        description: user's id\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n        example: \"123\"\n      requestBody:\n        description: '(description): User''s new name'\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Name'\n        required: true\n      responses:\n        \"200\":\n          description: Success operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Name'\n              x-content-type: application/json\n        \"400\":\n          description: Invalid Request Parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n        \"403\":\n          description: You are not available\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n        \"404\":\n          description: Resource is not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n        \"429\":\n          description: We banned too many requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n        \"500\":\n          description: Server went some wrong\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n        \"503\":\n          description: Server is in maintenance mode\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n      x-swagger-router-controller: Users\n    delete:\n      tags:\n      - users\n      summary: Delete a specified user\n      description: '(description): Delete a specified user'\n      operationId: usersUserIdDELETE\n      parameters:\n      - name: userId\n        in: path\n        description: user's id\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n        example: \"123\"\n      responses:\n        \"200\":\n          description: Success operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Name'\n              x-content-type: application/json\n        \"400\":\n          description: Invalid Request Parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n        \"403\":\n          description: You are not available\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n        \"404\":\n          description: Resource is not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n        \"429\":\n          description: We banned too many requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n        \"500\":\n          description: Server went some wrong\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n        \"503\":\n          description: Server is in maintenance mode\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientError'\n      x-swagger-router-controller: Users\ncomponents:\n  schemas:\n    Name:\n      type: object\n      properties:\n        lastname:\n          type: string\n          example: Erick\n        firstname:\n          type: string\n          example: Johnson\n      example:\n        firstname: Johnson\n        lastname: Erick\n    ClientError:\n      type: object\n      properties:\n        code:\n          type: string\n        type:\n          type: string\n        message:\n          type: string\n        errors:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientErrors'\n    ClientErrors:\n      type: object\n      properties:\n        field:\n          type: string\n        code:\n          type: string\n  responses:\n    \"400-BadRequest\":\n      description: Invalid Request Parameter\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ClientError'\n    \"403-Forbidden\":\n      description: You are not available\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ClientError'\n    \"404-NotFound\":\n      description: Resource is not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ClientError'\n    \"429-TooManyRequests\":\n      description: We banned too many requests\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ClientError'\n    \"500-ServerError\":\n      description: Server went some wrong\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ClientError'\n    \"503-ServerMaintenance\":\n      description: Server is in maintenance mode\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ClientError'\n  parameters:\n    UserId:\n      name: userId\n      in: path\n      description: user's id\n      required: true\n      style: simple\n      explode: false\n      schema:\n        type: string\n      example: \"123\"\n  securitySchemes:\n    apikey_auth:\n      type: apiKey\n      description: API Key authorization (Not used this time, but if you are in production,\n        Make sure you'll send JWT to third party and make them use it in header)\n      name: X-Api-Key\n      in: header\n",
			"canonicalURL": "/github.com/ulwlu/Go-CleanArchitecture-APIServer@febbb73e2df839433b8859482bd0029bb54ac189/-/blob/document/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ulwlu/go-cleanarchitecture-apiserver/blob/febbb73e2df839433b8859482bd0029bb54ac189/document/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}