{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/implementing-microservices/gevent-store"
		},
		"file": {
			"name": "api.yml",
			"size": 0,
			"path": "docs/api.yml",
			"byteSize": 7583,
			"content": "# Open API Spec documentation: https://swagger.io/docs/specification/about/\nopenapi: \"3.0.0\"\nservers:\n  - url: https://api.example.com/v1 \ninfo:\n  title: Event Store\n  version: 1.0.0\npaths:\n  /events/{eventType}:\n    post:\n      summary: Save New Event(s)\n      description: |\n        Saves new event(s) of specific type into the event store. When saving\n        multiple events, the order in which they were provided is preserved\n        in the event store.\n      parameters:\n        - name: eventType\n          description: type of an event\n          in: path\n          required: true\n          schema:\n            type: string\n          example: \"cart-item-added\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: object\n                properties:\n                  eventId: \n                    type: string\n                  data:\n                    type: object \n              # examples syntax: https://swagger.io/docs/specification/2-0/adding-examples/                    \n              example:\n                - eventId: 6a05e510-12ee-47b1-a7a7-2e4259d24809\n                  data: {\n                    \"userId\": \"0a41c6e5-5ad9-4412-ac5c-fc4cc13e2d6c\",\n                    \"cartId\": \"a40ea1f4-b2f0-4904-9a3c-85c27efeca92\",\n                    \"productId\": \"5ca94d88036709a43a429a2b\",\n                    \"numItems\": 9,\n                    \"pricePerItem\": 99.23,\n                    \"productOptions\": {\n                      \"color\": \"blue\"\n                    }\n                  }                    \n                - eventId: 12106650-4e49-47bd-b93a-0b59a7217497\n                  data: {\n                    \"userId\": \"5c564d55-5393-48d4-94f5-0ed3402f2a08\",\n                    \"cartId\": \"ed3ffd05-11cd-41c8-ab58-69292f9a0a9f\",\n                    \"productId\": \"5ca94e34f7e55570ecb918af\",\n                    \"numItems\": 2,\n                    \"pricePerItem\": 93.82,\n                    \"productOptions\": {\n                      \"color\": \"red\"\n                    }\n                  }\n              # Example generator:\n              # https://www.json-generator.com/\n              # [\n              #   '{{repeat(1, 3)}}',\n              #   {\n              #     userId: \"{{guid()}}\",\n              #     cartId: \"{{guid()}}\",\n              #     productId: \"{{objectId()}}\",\n              #     numItems: \"{{integer(1, 10)}}\",\n              #     pricePerItem: \"{{floating(10, 100, 2)}}\",\n              #     productOptions: {\n              #       color: \"white\"\n              #     }\n              #   }\n              # ]\n      responses:\n        '200':\n          description: |\n            Returns success status and IDs of the events that were successfully\n            saved.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  eventIds:\n                    type: array\n                    items:\n                      type: string\n                    example: \n                      - \"6a05e510-12ee-47b1-a7a7-2e4259d24809\"\n                      - \"12106650-4e49-47bd-b93a-0b59a7217497\"\n        '500': \n          description: |\n            Returns detailed error explanation in case event store was unable\n            to fulfil the request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorObject'\n        '400':\n          description: |\n            Returns detailed error explanation in case client submitted invalid\n            data to the event store\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorObject'\n    get:\n      summary: Get N events since eventId\n      description: |\n        get the event with a specified ID and N-1 additional events after it\n        from a sequential batch of events where all events have the specified\n        eventType type.\n      parameters:\n        - name: eventType\n          description: type of the events\n          in: path\n          required: true\n          schema:\n            type: string\n          example: \"cart-item-added\"\n        - name: since\n          description: |\n            the eventId of the event to be the first event in the \n            batch of events returned. Events are ordered chronologically.\n          in: query\n          required: true\n          schema:\n            type: string\n          example: \"af04e7c0-1a57-44bc-81a4-d8b3fd0f0f56\"\n        - name: count\n          description: |\n            maximum number of events to return (including the \"since\" one)  \n          in: query\n          required: false\n          default: 100\n          schema:\n              type: integer\n      responses:\n        '200':\n          description: success returns list of events with details\n          headers:\n                X-Last-EventId:\n                  description: |\n                    eventId of the last event served, to apply in a\n                    subsequent query as a \"since\" parameter\n                  schema:\n                    type: string\n                  example: \"0c2d7c2c-db56-4a7c-9b21-83d972b5db65\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties: \n                    eventId: \n                      type: string\n                    data:\n                      type: object \n                # examples syntax: https://swagger.io/docs/specification/2-0/adding-examples/                    \n                example:\n                  - eventId: af04e7c0-1a57-44bc-81a4-d8b3fd0f0f56\n                    data: {\n                      \"userId\": \"a1d5b69e-aefb-4a39-ae5c-affbe6961d60\",\n                      \"cartId\": \"9f0bbc6a-f199-4238-91f5-15215c0971fe\",\n                      \"productId\": \"5ca95c1b5eb664a11584f8cd\",\n                      \"numItems\": 6,\n                      \"pricePerItem\": 81.13,\n                      \"productOptions\": {\n                        \"color\": \"white\"\n                      }\n                    }\n                  - eventId: b91fbd5f-37fc-471b-bec2-51ba71dcd5b1\n                    data: {\n                      \"userId\": \"a1d5b69e-aefb-4a39-ae5c-affbe6961d60\",\n                      \"cartId\": \"9f0bbc6a-f199-4238-91f5-15215c0971fe\",\n                      \"productId\": \"5ca95c1b67a5ef0359e44f41\",\n                      \"numItems\": 2,\n                      \"pricePerItem\": 29.97,\n                      \"productOptions\": {\n                        \"color\": \"green\"\n                      }\n                    }\n                  - eventId: 2226266b-da97-4854-899d-d42bcdde3ecf\n                    data: {\n                      \"userId\": \"aa942873-e4e5-44f3-b0f9-ce39f2dfe8bd\",\n                      \"cartId\": \"d62135eb-148b-4e0a-ba3b-03152ba77e4e\",\n                      \"productId\": \"5ca95c1b35997aeb54dfc471\",\n                      \"numItems\": 7,\n                      \"price\": 56.22,\n                      \"productOptions\": {\n                        \"color\": \"white\"\n                      }\n                    }\n\n\ncomponents:\n  schemas:\n    ErrorObject:\n      type: object\n      properties:\n        errorId:\n          type: integer\n        description:\n          type: string\n        details:\n          type: string\n      example:\n        errorId: 2345\n        description: \"Could not connect to database\"\n        details: \"Please contact sysadmin\"\n",
			"canonicalURL": "/github.com/implementing-microservices/gevent-store@042b54eda4b4faa7600848eed483b5dd1b10fce3/-/blob/docs/api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/implementing-microservices/gevent-store/blob/042b54eda4b4faa7600848eed483b5dd1b10fce3/docs/api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}