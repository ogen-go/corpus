{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/crunchycookie/orion"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "master/src/main/resources/api.yaml",
			"byteSize": 6495,
			"content": "openapi: 3.0.0\n\nservers:\n  - url: http://{host}:{port}/orion/v0.1\n    variables:\n      host:\n        default: localhost\n        description: Server domain\n      port:\n        default: \"8080\"\n        description: Server port\n\ninfo:\n  description: This is the RESTful APIs of the ORION Distributed Computing Framework\n  version: \"1.0.0\"\n  contact:\n    email: tharindu.bandara.edu@gmail.com\n    name: Tharindu Bandara\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n  title: ORION RESTful APIs\ntags:\n  - name: Client Admin\n    description: Secured for client admin calls\npaths:\n  /task-limits:\n    get:\n      tags:\n        - Client Admin\n      summary: provide resource limits of a worker\n      operationId: getTaskLimitations\n      description: |\n        You can obtain resource limitations of a worker such as RAM. Based on that, the submitting job can be planned.\n      responses:\n        '200':\n          description: task resources limits\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskLimits'\n        '404':\n          description: Could not find limitations\n  /submit:\n    post:\n      tags:\n        - Client Admin\n      summary: submit a task to the orion\n      operationId: submitTask\n      description: |\n        You can submit a task to the orion\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                executableShellScript:\n                  type: string\n                  description: name of the executable script\n                outputFiles:\n                  type: string\n                  description: names of the output files required after execution\n                resourceRequirements:\n                  type: string\n                  description: |\n                    \u003cresource-type\u003e=\u003cupper-limit-in-GBs\u003e. Currently supported resource types: ram, storage\n                  example: ram=2\n                filename:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/BinaryFile'\n      responses:\n        '202':\n          description: task submitted successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubmittedTask'\n        '400':\n          description: task cannot be executed by orion. consult with orion task limitations\n  /tasks/{task-id}/files:\n    get:\n      tags:\n        - Client Admin\n      summary: download processed files from orion\n      operationId: downloadFiles\n      description: |\n        You can download files from the orion\n      parameters:\n        - in: path\n          name: task-id\n          schema:\n            type: string\n            format: uuid\n          required: true\n          description: unique id of the task where files belogs to\n        - in: query\n          name: filename\n          schema:\n            type: string\n          required: true\n          description: name of the downloading file\n          example: out.txt\n      responses:\n        '200':\n          description: output file\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        '400':\n          description: |\n            cannot download the file. Either the task failed or still processing\n        '404':\n          description: couldn't find the file\n  /tasks/{task-id}/monitor:\n    get:\n      tags:\n        - Client Admin\n      summary: monitor submitted task\n      operationId: monitorFiles\n      description: |\n        You can monitor the status of the submitted task\n      parameters:\n        - in: path\n          name: task-id\n          schema:\n            type: string\n            format: uuid\n          required: true\n          description: unique id of the task\n      responses:\n        '200':\n          description: status of the task\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MonitorResult'\n        '404':\n          description: couldn't find the task\n  /get-state:\n    get:\n      tags:\n        - Client Admin\n      summary: provide current state of the master\n      operationId: getState\n      description: |\n        You can obtain master state data.\n      responses:\n        '200':\n          description: master state\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClusterStatus'\n        '404':\n          description: Could not find any state\n\ncomponents:\n  schemas:\n    ClusterStatus:\n      type: object\n      properties:\n        restEndpoint:\n          type: array\n          items:\n            $ref: '#/components/schemas/MonitorResult'\n        priorityQueue:\n          type: array\n          items:\n            $ref: '#/components/schemas/MonitorResult'\n        workerPool:\n          type: array\n          items:\n            $ref: '#/components/schemas/MonitorResult'\n        centralStore:\n          type: array\n          items:\n            $ref: '#/components/schemas/MonitorResult'\n    BinaryFile:\n      type: string\n      format: binary\n    SubmittedTask:\n      type: object\n      properties:\n        taskId:\n          type: string\n          format: uuid\n          description: unique id for the submitted task\n          example: 123e4567-e89b-12d3-a456-426614174000\n        status:\n          $ref: '#/components/schemas/SubmittedTaskStatus'\n          description: an enum for the submitted task status\n          example: inprogress\n    MonitorResult:\n      type: object\n      properties:\n        taskId:\n          type: string\n          format: uuid\n        status:\n          $ref: '#/components/schemas/SubmittedTaskStatus'\n        workerId:\n          type: string\n    SubmittedTaskStatus:\n      type: string\n      enum:\n        - inprogress\n        - successful\n        - failed\n    TaskLimits:\n      type: object\n      properties:\n        limits:\n          type: array\n          items:\n            $ref: '#/components/schemas/Property'\n          description: Additional properties may sent by the server.\n    Property:\n      type: object\n      properties:\n        key:\n          type: string\n          example: storage\n          description: Any key value of the property.\n        value:\n          type: string\n          example: 5\n          description: Value of the property.",
			"canonicalURL": "/github.com/crunchycookie/orion@cb6d76038dbdcfe4ede4705a0f2daf485c232062/-/blob/master/src/main/resources/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/crunchycookie/orion/blob/cb6d76038dbdcfe4ede4705a0f2daf485c232062/master/src/main/resources/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}