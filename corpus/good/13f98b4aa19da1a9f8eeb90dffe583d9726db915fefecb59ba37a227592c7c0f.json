{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OwnYourData/oyd-pia2"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "swagger/v1/swagger.yml",
			"byteSize": 19907,
			"content": "openapi: 3.0.0\ninfo:\n  title: OwnYourData Data Vault API\n  version: v1\n  description: \u003e-\n    The data vault is the central element for securley storing personal data\n    with OwnYourData.\n\n     Further information:\n     - learn more about the Data Vault at https://data-vault.eu\n     - view other [OwnYourData Service API's](https://api-docs.ownyourdata.eu)\n  contact:\n    email: office@ownyourdata.eu\n  license:\n    name: MIT License\n    url: https://opensource.org/licenses/MIT\n\nservers:\n- url: https://data-vault.eu/\n  description: Official production system hosted by OwnYourData\nsecurity:\n  - BearerAuth: []\npaths:\n  /oauth/token:\n    post:\n      summary: request token\n      tags:\n        - Authorization\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RequestTokenBody\"\n      responses:\n        \"200\":\n          description: Return token object\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TokenResponse\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestBody\"\n        \"401\":\n          description: invalid\n  /oauth/token/info:\n    get:\n      summary: show token information\n      tags:\n        - Authorization\n      responses:\n        \"200\":\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TokenInfoResponse\"\n        \"401\":\n          description: Not authorized\n\n  /oauth/revoke:\n    post:\n      summary: revoke token\n      tags:\n        - Authorization\n      requestBody:\n        $ref: \"#/components/requestBodies/Input\"\n      responses:\n        \"200\":\n          description: success\n        \"404\":\n          description: not found\n  /oauth/applications:\n    post:\n      summary: create plugin\n      tags:\n        - Authorization\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n              required:\n                - name\n      responses:\n        \"200\":\n          description: success\n        \"401\":\n          description: invalid token\n  \"/oauth/applications/{id}\":\n    delete:\n      summary: remove plugin\n      tags:\n        - Authorization\n      parameters:\n        - name: id\n          in: path\n          description: \"'id' of account\"\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: success\n        \"401\":\n          description: invalid token\n        \"404\":\n          description: not found\n  '/api/data/{val}':\n    get:\n      summary: read specific record\n      tags:\n        - Read/Write Data\n      parameters:\n        - name: val\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: p\n          description: parameter type (is val and id or DRI)\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - id\n              - dri\n        - name: f\n          description: output format\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - plain\n              - full\n              - meta\n              - validation\n            default: full\n      responses:\n        '200':\n          description: Return raw data\n        '403':\n          description: Permission denied\n    put:\n      summary: updated specific record\n      tags:\n        - Read/Write Data\n      parameters:\n        - name: val\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: p\n          description: parameter type (is val and id or DRI)\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - id\n              - dri\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataBody'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: integer\n        '403':\n          description: Permission denied\n  /api/data:\n    get:\n      summary: read records\n      tags:\n        - Read/Write Data\n      parameters:\n        - name: schema_dri\n          in: query\n          description: \u003e-\n            DRI (Decentralized Resource Identifier) of the OCA schema base\n            describing the data\n          schema:\n            type: string\n        - name: table\n          in: query\n          description: all records with specified table name\n          schema:\n            type: string\n        - name: repo_id\n          in: query\n          description: all records from specified repository id\n          schema:\n            type: integer\n        - name: f\n          description: output format\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - plain\n              - full\n              - meta\n              - validation\n            default: full\n      responses:\n        '200':\n          description: 'Return raw data, or an array of raw data'\n        '403':\n          description: Permission denied\n    post:\n      summary: Store data\n      tags:\n        - Read/Write Data\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataBody'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: integer\n        '403':\n          description: Permission denied\n    delete:\n      summary: delete specific record\n      tags:\n        - Read/Write Data\n      parameters:\n        - name: id\n          in: query\n          required: true\n          description: Identifier of the item\n          schema:\n            type: string\n        - name: dri\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: success\n        '403':\n          description: Permission denied\n  \"/api/repos/{repo_id}/items\":\n    get:\n      summary: read all records in repo\n      tags:\n        - Read/Write Data\n      parameters:\n        - name: repo_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: success\n        \"403\":\n          description: Permission denied\n    post:\n      summary: create new record in repo\n      tags:\n        - Read/Write Data\n      parameters:\n        - name: repo_id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/Input\"\n      responses:\n        \"200\":\n          description: success\n        \"403\":\n          description: Permission denied\n  \"/api/items/{item_id}/details\":\n    get:\n      summary: read specific record\n      tags:\n        - Read/Write Data\n      parameters:\n        - name: item_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: success\n        \"403\":\n          description: Permission denied\n  \"/api/dri/{dri}/details\":\n    get:\n      summary: read specific record\n      tags:\n        - Read/Write Data\n      parameters:\n        - name: dri\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: success\n        \"403\":\n          description: Permission denied\n\n  \"/api/repos/{repo_id}/items/{item_id}\":\n    put:\n      summary: update specific record in repo\n      tags:\n        - Read/Write Data\n      parameters:\n        - name: repo_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: item_id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/Input\"\n      responses:\n        \"200\":\n          description: success\n        \"403\":\n          description: Permission denied\n    delete:\n      summary: delete specific record in repo\n      tags:\n        - Read/Write Data\n      parameters:\n        - name: repo_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: item_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: success\n        \"403\":\n          description: Permission denied\n  /api/items/merkle:\n    get:\n      summary: list all records not yet archived in the blockchain\n      tags:\n        - Blockchain Verification\n      responses:\n        \"200\":\n          description: success\n  \"/api/items/{item_id}\":\n    put:\n      summary: update specific record in repo with blockchain reference\n      tags:\n        - Blockchain Verification\n      parameters:\n        - name: item_id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/Input\"\n      responses:\n        \"200\":\n          description: success\n        \"404\":\n          description: not found\n        \"500\":\n          description: error\n  /api/merkles/create:\n    post:\n      summary: create new merkle record\n      tags:\n        - Blockchain Verification\n      requestBody:\n        $ref: \"#/components/requestBodies/Input\"\n      responses:\n        \"200\":\n          description: success\n        \"500\":\n          description: error\n  \"/api/merkles/{id}\":\n    put:\n      summary: update merkle record\n      tags:\n        - Blockchain Verification\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/Input\"\n      responses:\n        \"200\":\n          description: success\n        \"404\":\n          description: not found\n        \"500\":\n          description: error\n  \"/api/plugins/{plugin_id}/perms\":\n    get:\n      summary: list all permission for the specific plugin\n      tags:\n        - Permission Management\n      parameters:\n        - name: plugin_id\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: success\n        \"404\":\n          description: not found\n        \"500\":\n          description: error\n    post:\n      summary: create a new permission for the specified plugin\n      tags:\n        - Permission Management\n      parameters:\n        - name: plugin_id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/Input\"\n      responses:\n        \"200\":\n          description: success\n        \"404\":\n          description: not found\n        \"500\":\n          description: error\n  \"/api/plugins/{plugin_id}/perms/{id}\":\n    put:\n      summary: update specified permission for the specified plugin\n      tags:\n        - Permission Management\n      parameters:\n        - name: plugin_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/Input\"\n      responses:\n        \"200\":\n          description: success\n        \"404\":\n          description: not found\n        \"500\":\n          description: error\n    delete:\n      summary: delete specified permission for the specified plugin\n      tags:\n        - Permission Management\n      parameters:\n        - name: plugin_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: success\n        \"404\":\n          description: not found\n        \"500\":\n          description: error\n  \"/api/plugins/{plugin_id}/perms_destroy\":\n    delete:\n      summary: delete all permissions for the specified plugin\n      tags:\n        - Permission Management\n      parameters:\n        - name: plugin_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: success\n        \"404\":\n          description: not found\n        \"500\":\n          description: error\n  /api/plugins/index:\n    get:\n      summary: get list of installed plugins for current user\n      tags:\n        - Plugins\n      responses:\n        \"200\":\n          description: success\n  /api/plugins/create:\n    post:\n      summary: create new plugin\n      tags:\n        - Plugins\n      requestBody:\n        $ref: \"#/components/requestBodies/Input\"\n      responses:\n        \"200\":\n          description: success\n        \"400\":\n          description: error\n  \"/api/plugins/{plugin_id}\":\n    get:\n      summary: get plugin information\n      tags:\n        - Plugins\n      parameters:\n        - name: plugin_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: success\n        \"403\":\n          description: permission denied\n    put:\n      summary: update plugin information\n      tags:\n        - Plugins\n      parameters:\n        - name: plugin_id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/Input\"\n      responses:\n        \"200\":\n          description: success\n        \"403\":\n          description: permission denied\n    delete:\n      summary: delete plugin\n      tags:\n        - Plugins\n      parameters:\n        - name: plugin_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: success\n        \"403\":\n          description: permission denied\n  /api/relation:\n    get:\n      summary: read related records\n      tags:\n        - Relations\n      parameters:\n        - name: id\n          description: Item ID of the record for which the relations are to be queried\n          in: query\n          schema:\n            type: integer\n        - name: ttl\n          description: number of iteration levels for relations (default 0 - only directly related records are returned)\n          in: query\n          schema:\n            type: integer\n        - name: mode\n          description: only show 'upstream', 'downstream', or 'undirected' (= upstream \u0026 downstream) relations\n          in: query\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RelationResponse\"\n        \"400\":\n          description: invalid request\n        \"403\":\n          description: permission violation\n        \"404\":\n          description: id not found\n    post:\n      summary: create a new relation between records\n      tags:\n        - Relations\n      parameters:\n        - in: query\n          name: p\n          description: parameter type (id is default)\n          required: false\n          schema:\n            type: string\n            enum:\n              - id\n              - dri\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RelationBody\"\n      responses:\n        \"200\":\n          description: success\n        \"400\":\n          description: invalid request\n        \"403\":\n          description: permission violation\n        \"404\":\n          description: id not found\n  /api/users/show:\n    get:\n      summary: get information from current user\n      tags:\n        - User Management\n      responses:\n        \"200\":\n          description: success\n        \"422\":\n          description: invalid request\n  /api/users/create:\n    post:\n      summary: create new user\n      tags:\n        - User Management\n      requestBody:\n        $ref: \"#/components/requestBodies/Input\"\n      responses:\n        \"200\":\n          description: success\n        \"400\":\n          description: error\n  /api/users/update:\n    put:\n      summary: update current user information\n      tags:\n        - User Management\n      requestBody:\n        $ref: \"#/components/requestBodies/Input\"\n      responses:\n        \"200\":\n          description: success\n        \"422\":\n          description: invalid request\n        \"500\":\n          description: error\n  /api/users/delete:\n    delete:\n      summary: delete current user\n      tags:\n        - User Management\n      responses:\n        \"200\":\n          description: success\n        \"500\":\n          description: error\ncomponents:\n  schemas:\n    BadRequestBody:\n      properties:\n        status:\n          type: integer\n          example: 400\n        error:\n          type: string\n          example: Bad request\n      required:\n        - status\n        - error\n    RequestTokenBody:\n      properties:\n        client_id:\n          type: string\n        client_secret:\n          type: string\n        grant_type:\n          type: string\n          enum:\n            - \"client_credentials\"\n            - \"password\"\n      required:\n        - client_id\n        - client_secret\n        - grant_type\n    TokenResponse:\n      properties:\n        access_token:\n          type: string\n        token_type:\n          type: string\n        expires_in:\n          type: integer\n        created_at:\n          type: integer\n        username:\n          type: string\n    TokenInfoResponse:\n      properties:\n        resource_owner_id:\n          type: string\n        scope:\n          type: array\n          items:\n            type: string\n        expires_in:\n          type: integer\n        application:\n          type: object\n          properties:\n            uid:\n              type: string\n        created_at:\n          type: integer\n    DataBody:\n      properties:\n        content:\n          description: Key value json file representing data from schema base\n          type: object\n        dri:\n          type: string\n        schema_dri:\n          type: string\n        mime_type:\n          type: string\n          example: \"application/json\"\n        table_name:\n          type: string\n          description: name of the target repository in which data should be stored\n    RelationBody:\n      properties:\n        source:\n          description: Item ID or DRI of the source record\n          type: integer\n        targets:\n          description: Array of item IDs or DRIs for target records\n          type: array\n          items:\n            type: string\n    RelationResponse:\n      type: array\n      items:\n        properties:\n          id:\n            description: Item ID of the respective record\n            type: integer\n          downstream:\n            description: Array of item IDs related downstream\n            type: array\n            items:\n              type: integer\n          upstram:\n            description: Array of item IDs related upstream\n            type: array\n            items:\n              type: integer\n  requestBodies:\n    Input:\n      content:\n        application/json:\n          schema: {}\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer",
			"canonicalURL": "/github.com/OwnYourData/oyd-pia2@3b45328a9e4e2ea120146f2507e4fc39e215a498/-/blob/swagger/v1/swagger.yml",
			"externalURLs": [
				{
					"url": "https://github.com/OwnYourData/oyd-pia2/blob/3b45328a9e4e2ea120146f2507e4fc39e215a498/swagger/v1/swagger.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}