{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Rafase282/Mangadb"
		},
		"file": {
			"name": "schema.yaml",
			"size": 0,
			"path": "docs/schema.yaml",
			"byteSize": 34366,
			"content": "openapi: 3.0.1\ninfo:\n  title: MangaDB Swagger\n  description: |\n    MangaDB allows you to easily keep track of the mangas you are reading,\n    want to read, and have already finished reading.\n\n    If you have any questions or want to contribute then [![Gitter](https://badges.gitter.im/Rafase282/Mangadb.svg)](https://gitter.im/Rafase282/Mangadb?utm_source=badge\u0026utm_medium=badge\u0026utm_campaign=pr-badge)\n\n    To create an admin account, you must specify it as a comma separated list on the `.env` file.\n  termsOfService: http://helloreverb.com/terms/\n  contact:\n    name: rafase282@gmail.com\n  license:\n    name: MIT\n    url: https://github.com/Rafase282/Mangadb/blob/master/LICENSE\n  version: 2.5.0\nservers:\n- url: https://mangadbv2.herokuapp.com/api/v2\nsecurity:\n- api_key: []\npaths:\n  /:\n    get:\n      tags:\n      - Index\n      summary: Displays a welcome message.\n      description: This route does notrequires a JWT. The usesr will get a message\n        pointing to the documentation as there is nothign to do here.\n      operationId: getWelcome\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Success'\n  /api/v2:\n    get:\n      tags:\n      - Index\n      summary: Displays a welcome message.\n      description: This route does notrequires a JWT. The usesr will get the swagger\n        documentation.\n      operationId: getAPI\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Success'\n  /auth:\n    post:\n      tags:\n      - Authentication\n      summary: Authenticates existing users for using the API for one hour.\n      description: This route does notrequires a JWT, but instead provides one for\n        the user that expires in one hour. The response provides the JWT along with\n        some useful information.\n      operationId: getToken\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              required:\n              - password\n              - username\n              properties:\n                username:\n                  type: string\n                  description: Target username.\n                password:\n                  type: string\n                  description: User's password.\n                  format: password\n        required: true\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Auth'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: No token provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Authentication failed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /reset:\n    post:\n      tags:\n      - Authentication\n      summary: Authenticates users for using the API for 5 minutes for password reset\n        purposes..\n      description: This route does not requires a JWT, but instead provides one  for\n        the user that expires in five minutes. The  response provides the  JWT along\n        with some useful information. This is used to get temporary access to change\n        a password. The token will be sent via email and not returned on the payload.\n      operationId: getResetToken\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              required:\n              - email\n              properties:\n                email:\n                  type: string\n                  description: Target email.\n        required: true\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Auth'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: No token provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Authentication failed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /mangas:\n    get:\n      tags:\n      - Mangas\n      - Administrators\n      summary: Gets a list of all mangas on the database.\n      description: The admin uses this route to get a list of all the mangas and their\n        data regardless of the user. Good for checking when you don't have access\n        to the databse directly.\n      operationId: getAllMangas\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Mangas'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: No token provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Authentication failed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - api_key: []\n    delete:\n      tags:\n      - Mangas\n      - Administrators\n      summary: Deletes all mangas.\n      description: This deletes all the mangas for all the users, except the admin.\n      operationId: delMangas\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Deleted'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: No token provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Authentication failed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - api_key: []\n  /mangas/{username}:\n    get:\n      tags:\n      - Mangas\n      summary: Returns a list of all the mangas the user has.\n      description: Users can only view their own content. However, the admin can also\n        view it.\n      operationId: getMangas\n      parameters:\n      - name: username\n        in: path\n        description: Target username.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Mangas'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: No token provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Authentication failed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - api_key: []\n    post:\n      tags:\n      - Mangas\n      summary: Creates new manga.\n      description: The manga title should be unique. Please see the `Manga Schema`.\n      operationId: postManga\n      parameters:\n      - name: username\n        in: path\n        description: Target username.\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              required:\n              - altName\n              - author\n              - categories\n              - chapter\n              - direction\n              - plot\n              - seriesStatus\n              - thumbnail\n              - title\n              - type\n              - url\n              - userStatus\n              properties:\n                title:\n                  type: string\n                  description: Manga's title.\n                author:\n                  type: string\n                  description: Manga's author.\n                url:\n                  type: string\n                  description: URL to read manga online.\n                userStatus:\n                  type: string\n                  description: Whether the user is currently reading or not.\n                type:\n                  type: string\n                  description: The type of manga.\n                categories:\n                  type: string\n                  description: Categories for the manga.\n                chapter:\n                  type: integer\n                  description: Last chapter read.\n                  format: int32\n                seriesStatus:\n                  type: string\n                  description: Whether the series is ongoing or not.\n                plot:\n                  type: string\n                  description: Manga's plot.\n                altName:\n                  type: string\n                  description: Alternate names for the manga.\n                direction:\n                  type: string\n                  description: The reading direction of the manga.\n                thumbnail:\n                  type: string\n                  description: Direct url to a thumbnail of the manga.\n        required: true\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Manga'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: No token provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Authentication failed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - api_key: []\n    delete:\n      tags:\n      - Mangas\n      summary: Deletes all mangas from target user\n      description: Route for users to delete their their mangas all at once or for\n        the admin to do it.\n      operationId: delUserManga\n      parameters:\n      - name: username\n        in: path\n        description: Target username.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Deleted'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: No token provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Authentication failed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - api_key: []\n  /mangas/{username}/{id}:\n    get:\n      tags:\n      - Mangas\n      summary: Get information on a specific user's managa by its ID.\n      description: Route for retrivng the a specific manga. For the admin to use these\n        routes, the target username should still be used.\n      operationId: getManga\n      parameters:\n      - name: username\n        in: path\n        description: Target username.\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: Target manga id.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Manga'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: No token provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Authentication failed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - api_key: []\n    put:\n      tags:\n      - Mangas\n      summary: Updates any and all manga fields by manga id.\n      description: This route allows to update the whole object or part of it.  If\n        you want to update specific fields,  then just add the fields you want to\n        update only.\n      operationId: putManga\n      parameters:\n      - name: username\n        in: path\n        description: Target username.\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: Target manga id.\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              required:\n              - varies\n              properties:\n                varies:\n                  type: string\n                  description: The field can vary depending on what you want to update.\n                    use any or all the fields of the `MangaObj`\n        required: true\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Manga'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: No token provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Authentication failed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - api_key: []\n    delete:\n      tags:\n      - Mangas\n      summary: Deletes target manga by id.\n      description: Deleters the target manga for the specified username. It can also\n        be used by the admin.\n      operationId: delManga\n      parameters:\n      - name: username\n        in: path\n        description: Target username.\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: Target manga id.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Deleted'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: No token provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Authentication failed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - api_key: []\n  /mangas/{username}/title/{id}:\n    get:\n      tags:\n      - Mangas\n      summary: Get information on a specific user's managa by its title or id.\n      description: Route for retrivng the a specific manga. For the admin to use these\n        routes, the target username should still be used.\n      operationId: getMangabyTitle\n      parameters:\n      - name: username\n        in: path\n        description: Target username.\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: Target manga id or title.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Manga'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: No token provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Authentication failed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - api_key: []\n    put:\n      tags:\n      - Mangas\n      summary: Updates any and all manga fields by Manga title.\n      description: This route allows to update the whole object or part of it.  If\n        you want to update specific fields,  then just add the fields you want to\n        update only.\n      operationId: putMangabyTitle\n      parameters:\n      - name: username\n        in: path\n        description: Target username.\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: Target manga id or title.\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              required:\n              - varies\n              properties:\n                varies:\n                  type: string\n                  description: The field can vary depending on what you want to update.\n                    use any or all the fields of the `MangaObj`\n        required: true\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Manga'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: No token provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Authentication failed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - api_key: []\n    delete:\n      tags:\n      - Mangas\n      summary: Deletes target manga by title.\n      description: Deleters the target manga for the specified username. It can also\n        be used by the admin.\n      operationId: delMangabyTitle\n      parameters:\n      - name: username\n        in: path\n        description: Target username.\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: Target manga id or title.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Deleted'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: No token provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Authentication failed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - api_key: []\n  /users:\n    get:\n      tags:\n      - Users\n      - Administrators\n      summary: Get a list of all the users in the database.\n      description: The route provides an array of user objects containing the details\n        of the users.  However, passwords are always encrypted so admin can't read\n        them.\n      operationId: getUsers\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Users'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: No token provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Authentication failed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - api_key: []\n    post:\n      tags:\n      - Mangas\n      summary: Creates new user.\n      description: The route creates new regular users.  The only way to create an\n        admin account is to specify the username in the server.\n      operationId: postUsers\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              required:\n              - email\n              - firstname\n              - lastname\n              - password\n              - username\n              properties:\n                username:\n                  type: string\n                  description: Target username.\n                password:\n                  type: string\n                  description: Password.\n                  format: password\n                email:\n                  type: string\n                  description: User's email.\n                firstname:\n                  type: string\n                  description: First name.\n                lastname:\n                  type: string\n                  description: Last name.\n        required: true\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: No token provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Authentication failed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      tags:\n      - Users\n      - Administrators\n      summary: Deletes all users but the admin.\n      description: This route is for the administrator only.  It allows the deleting\n        of all users except the admin account.\n      operationId: delUsers\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Deleted'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: No token provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Authentication failed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - api_key: []\n  /users/{username}:\n    get:\n      tags:\n      - Users\n      summary: Get specified user's data.\n      description: Route to retrieve user's information.\n      operationId: getUser\n      parameters:\n      - name: username\n        in: path\n        description: Target username.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: No token provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Authentication failed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - api_key: []\n    put:\n      tags:\n      - Users\n      summary: Updates user's information.\n      description: This route allows to update the whole object or part of it.  If\n        you want to update specific fields, then just add the fields you want to update\n        only.\n      operationId: putUser\n      parameters:\n      - name: username\n        in: path\n        description: Target username.\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              required:\n              - varies\n              properties:\n                varies:\n                  type: string\n                  description: The field can vary depending on what you want to update.\n                    use any or all the fields of the `UserObj`\n        required: true\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: No token provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Authentication failed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - api_key: []\n    delete:\n      tags:\n      - Users\n      - Administrators\n      summary: Deletes target user.\n      description: This route deletes the target user. However, it does not deletes\n        its mangas.  So further action should be taken via `/mangas/{username`.\n      operationId: delUser\n      parameters:\n      - name: username\n        in: path\n        description: Target username.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Deleted'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: No token provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Authentication failed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - api_key: []\ncomponents:\n  schemas:\n    UserObj:\n      required:\n      - email\n      - firstname\n      - lastname\n      - password\n      - username\n      type: object\n      properties:\n        username:\n          type: string\n          description: The username has to be unique.\n        password:\n          type: string\n          description: There are no limitations.\n          format: password\n        email:\n          type: string\n          description: There are no limitations.\n        firstname:\n          type: string\n          description: Only letters are allowed.\n        lastname:\n          type: string\n          description: Only letters are allowed.\n        __v:\n          type: integer\n          description: This is generated by Mongodb\n          format: int32\n        _id:\n          type: string\n          description: This is generated by Mongodb\n    MangaObj:\n      required:\n      - author\n      - categories\n      - chapter\n      - direction\n      - plot\n      - seriesStatus\n      - thumbnail\n      - title\n      - type\n      - url\n      - userStatus\n      type: object\n      properties:\n        title:\n          type: string\n        author:\n          type: string\n        url:\n          type: string\n        userStatus:\n          type: string\n          description: It must be either of 'reading', 'finished' or 'will read'.\n        type:\n          type: string\n        categories:\n          type: array\n          description: It will be a string that will be turned into an array separated\n            by commas.\n          items:\n            type: string\n        chapter:\n          type: integer\n          format: int32\n        seriesStatus:\n          type: string\n          description: It must be either of 'ongoing' or 'completed'.\n        plot:\n          type: string\n        altName:\n          type: array\n          description: It will be a string that will be turned into an array separated\n            by commas.\n          items:\n            type: string\n        direction:\n          type: string\n          description: It must be either of 'left to right' or 'right to left'.\n        userId:\n          type: string\n          description: This is obtained internally.\n        username:\n          type: string\n          description: This is obtained internally.\n        thumbnail:\n          type: string\n        __v:\n          type: integer\n          description: This is generated by Mongodb\n          format: int32\n        _id:\n          type: string\n          description: This is generated by Mongodb\n      description: Manga Object.\n    DeleteObj:\n      type: object\n      properties:\n        n:\n          type: integer\n          format: int32\n        ok:\n          type: boolean\n          description: 1 for true and 0 for false.\n          format: number\n    MangasArr:\n      type: array\n      description: An array of manga objects.\n      items:\n        $ref: '#/components/schemas/MangaObj'\n    UsersArr:\n      type: array\n      description: An array of user objects.\n      items:\n        $ref: '#/components/schemas/UserObj'\n    Error:\n      type: object\n      properties:\n        success:\n          type: boolean\n          description: True or false depending of the code.\n        message:\n          type: string\n          description: Message reporting action status.\n        data:\n          type: object\n          properties: {}\n          description: It is actually null.\n    Success:\n      type: object\n      properties:\n        success:\n          type: boolean\n          description: True or false depending of the code.\n        message:\n          type: string\n          description: Message reporting action status.\n        data:\n          type: object\n          properties: {}\n          description: This will be null.\n    Auth:\n      type: object\n      properties:\n        success:\n          type: boolean\n          description: True or false depending of the code.\n        message:\n          type: string\n          description: Message reporting action status.\n        data:\n          type: string\n          description: It will be either null or the data.\n    User:\n      type: object\n      properties:\n        success:\n          type: boolean\n          description: True or false depending of the code.\n        message:\n          type: string\n          description: Message reporting action status.\n        data:\n          $ref: '#/components/schemas/UserObj'\n    Users:\n      type: object\n      properties:\n        success:\n          type: boolean\n          description: True or false depending of the code.\n        message:\n          type: string\n          description: Message reporting action status.\n        data:\n          $ref: '#/components/schemas/UsersArr'\n    Manga:\n      type: object\n      properties:\n        success:\n          type: boolean\n          description: True or false depending of the code.\n        message:\n          type: string\n          description: Message reporting action status.\n        data:\n          $ref: '#/components/schemas/MangaObj'\n    Mangas:\n      type: object\n      properties:\n        success:\n          type: boolean\n          description: True or false depending of the code.\n        message:\n          type: string\n          description: Message reporting action status.\n        data:\n          $ref: '#/components/schemas/MangasArr'\n    Deleted:\n      type: object\n      properties:\n        success:\n          type: boolean\n          description: True or false depending of the code.\n        message:\n          type: string\n          description: Message reporting action status.\n        data:\n          $ref: '#/components/schemas/DeleteObj'\n  securitySchemes:\n    api_key:\n      type: apiKey\n      description: This is actually a JSON Web Token (JWT) and it is required for\n        all secured routes. There is an admin and regular users.\n      name: x-access-token\n      in: header\n",
			"canonicalURL": "/github.com/Rafase282/Mangadb@5dc618e3af9ef1ba0034596008508440b6c620a9/-/blob/docs/schema.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Rafase282/Mangadb/blob/5dc618e3af9ef1ba0034596008508440b6c620a9/docs/schema.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}