{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/marinapts/ttds_movie_search"
		},
		"file": {
			"name": "swagger.json",
			"size": 0,
			"path": "api/static/swagger.json",
			"byteSize": 10517,
			"content": "{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"version\": \"1.0.0\",\n    \"title\": \"TTDS Movie Search API\"\n  },\n  \"paths\": {\n    \"/query_search\": {\n      \"post\": {\n        \"tags\": [\n          \"Movies\"\n        ],\n        \"summary\": \"Endpoint for querying words in sentences\",\n        \"description\": \"A regular query would run a BM25 ranking algorithm. If the whole query is wrapped in double quotation marks (\\\"), then the query would run a phrase search algorithm that returns sentences containing the exact matching phrase, and sentences will be ordered by popularity (from most to least popular).\",\n        \"requestBody\": {\n          \"description\": \"Request body object for specifying query parameters, including a query string (required) and (optional) movie title, actor, keywords and/or year.\",\n            \"required\": false,\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/query_params\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/query_search_response\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/movie_search\": {\n      \"post\": {\n        \"tags\": [\n          \"Movies\"\n        ],\n        \"summary\": \"Endpoint for querying words in movies\",\n        \"description\": \"A query will run a TFIDF ranking algorithm on movies. Phrase search is not supported on a movie level. For phrase search, use endpoint /query_search\",\n        \"requestBody\": {\n          \"description\": \"Request body object for specifying query parameters, including a query string (required) and (optional) movie title, actor, keywords and/or year.\",\n            \"required\": false,\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/query_params\"\n                }\n              }\n            }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/movie_search_response\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/movie/{movie_id}\": {\n      \"get\": {\n        \"tags\": [\n          \"Movies\"\n        ],\n        \"summary\": \"Endpoint for getting a movie by iMDB ID\",\n        \"description\": \"A query will return full movie information (JSON) by iMDB ID if such movie exists. Otherwise it will return an HTTP 404 response with an empty JSON object.\",\n        \"parameters\": [{\n          \"in\": \"path\",\n          \"name\": \"movie_id\",\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"required\": true,\n          \"description\": \"iMDB ID, e.g. 'tt1234567'\"\n        }],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/movie\"\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Movie not found\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/query_suggest\": {\n      \"get\": {\n        \"tags\": [\n          \"Movies\"\n        ],\n        \"summary\": \"Endpoint for suggesting next words for a query\",\n        \"description\": \"A query accepts one parameter: a query a user has entered so far. The response will contain a list of up to 3 suggestions. The dropdown should only appear if the list has at least one suggestion.\",\n        \"parameters\": [{\n          \"in\": \"query\",\n          \"name\": \"query\",\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"required\": true,\n          \"description\": \"User query completed so far, for example: 'I am'\"\n        }],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/query_suggest_response\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"query_params\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"query\": {\n            \"type\": \"string\"\n          },\n          \"movie_title\": {\n            \"type\": \"string\"\n          },\n          \"categories\": {\n            \"type\": \"string\"\n          },\n          \"actor\": {\n            \"type\": \"string\"\n          },\n          \"keywords\": {\n            \"type\": \"string\"\n          },\n          \"year\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"movie\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_id\": {\n            \"type\": \"string\"\n          },\n          \"movie_id\": {\n            \"type\": \"string\"\n          },\n          \"title\": {\n            \"type\": \"string\"\n          },\n          \"description\": {\n            \"type\": \"string\"\n          },\n          \"year\": {\n            \"type\": \"number\",\n            \"format\": \"integer\"\n          },\n          \"rating\": {\n            \"type\": \"number\",\n            \"format\": \"float\"\n          },\n          \"countOfRatings\": {\n            \"type\": \"number\",\n            \"format\": \"integer\"\n          },\n          \"categories\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"thumbnail\": {\n            \"type\": \"string\"\n          },\n          \"cast\": {\n            \"$ref\": \"#/components/schemas/cast_info\"\n          },\n          \"plotKeywords\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"movie_minimised_for_list\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_id\": {\n            \"type\": \"string\"\n          },\n          \"movie_id\": {\n            \"type\": \"string\"\n          },\n          \"title\": {\n            \"type\": \"string\"\n          },\n          \"categories\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"thumbnail\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"movie_quote_combined\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"movie_id\": {\n            \"type\": \"string\"\n          },\n          \"quote_id\": {\n            \"type\": \"string\"\n          },\n          \"time_ms\": {\n            \"type\": \"number\",\n            \"format\": \"integer\"\n          },\n          \"full_quote\": {\n            \"type\": \"string\"\n          },\n          \"character\": {\n            \"type\": \"string\"\n          },\n          \"title\": {\n            \"type\": \"string\"\n          },\n          \"categories\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"thumbnail\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"movies\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/movie_minimised_for_list\"\n        }\n      },\n      \"query_search_response\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"movies\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/movie_quote_combined\"\n            }\n          },\n          \"category_list\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"query_time\": {\n            \"type\": \"number\",\n            \"format\": \"float\"\n          }\n        }\n      },\n      \"movie_search_response\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"movies\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/movie_minimised_for_list\"\n            }\n          },\n          \"category_list\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"query_time\": {\n            \"type\": \"number\",\n            \"format\": \"float\"\n          }\n        }\n      },\n      \"inverted_index_entry\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_id\": {\n            \"type\": \"string\"\n          },\n          \"term\": {\n            \"type\": \"string\"\n          },\n          \"doc_count\": {\n            \"type\": \"string\"\n          },\n          \"movies\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"_id\": {\n                  \"type\": \"string\"\n                },\n                \"doc_count\": {\n                  \"type\": \"number\",\n                  \"format\": \"integer\"\n                },\n                \"sentences\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"_id\": {\n                        \"type\": \"number\",\n                        \"format\": \"integer\"\n                      },\n                      \"len\": {\n                        \"type\": \"number\",\n                        \"format\": \"integer\"\n                      },\n                      \"pos\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                          \"type\": \"number\",\n                          \"format\": \"integer\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"query_suggest_response\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"results\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"cast_info\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"actor\": {\n              \"type\": \"string\"\n            },\n            \"character\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
			"canonicalURL": "/github.com/marinapts/ttds_movie_search@178c2f74380469c28ae0097266928c19a7252bec/-/blob/api/static/swagger.json",
			"externalURLs": [
				{
					"url": "https://github.com/marinapts/ttds_movie_search/blob/178c2f74380469c28ae0097266928c19a7252bec/api/static/swagger.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}