{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/maistra/istio"
		},
		"file": {
			"name": "request_authentication.gen.json",
			"size": 0,
			"path": "vendor/istio.io/api/security/v1beta1/request_authentication.gen.json",
			"byteSize": 6131,
			"content": "{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"Request authentication configuration for workloads.\",\n    \"version\": \"v1beta1\"\n  },\n  \"components\": {\n    \"schemas\": {\n      \"istio.security.v1beta1.JWTHeader\": {\n        \"description\": \"This message specifies a header location to extract JWT token.\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"description\": \"The HTTP header name.\",\n            \"type\": \"string\"\n          },\n          \"prefix\": {\n            \"description\": \"The prefix that should be stripped before decoding the token. For example, for \\\"Authorization: Bearer \\u003ctoken\\u003e\\\", prefix=\\\"Bearer \\\" with a space at the end. If the header doesn't have this exact prefix, it is considered invalid.\",\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"istio.security.v1beta1.JWTRule\": {\n        \"description\": \"JSON Web Token (JWT) token format for authentication as defined by [RFC 7519](https://tools.ietf.org/html/rfc7519). See [OAuth 2.0](https://tools.ietf.org/html/rfc6749) and [OIDC 1.0](http://openid.net/connect) for how this is used in the whole authentication flow.\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"issuer\": {\n            \"description\": \"Identifies the issuer that issued the JWT. See [issuer](https://tools.ietf.org/html/rfc7519#section-4.1.1) A JWT with different `iss` claim will be rejected.\",\n            \"type\": \"string\"\n          },\n          \"audiences\": {\n            \"description\": \"The list of JWT [audiences](https://tools.ietf.org/html/rfc7519#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted.\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"jwksUri\": {\n            \"description\": \"URL of the provider's public key set to validate signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\",\n            \"type\": \"string\"\n          },\n          \"jwks\": {\n            \"description\": \"JSON Web Key Set of public keys to validate signature of the JWT. See https://auth0.com/docs/jwks.\",\n            \"type\": \"string\"\n          },\n          \"fromHeaders\": {\n            \"description\": \"List of header locations from which JWT is expected. For example, below is the location spec if JWT is expected to be found in `x-jwt-assertion` header, and have \\\"Bearer \\\" prefix: ```yaml fromHeaders: - name: x-jwt-assertion prefix: \\\"Bearer \\\" ```\",\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/istio.security.v1beta1.JWTHeader\"\n            }\n          },\n          \"fromParams\": {\n            \"description\": \"List of query parameters from which JWT is expected. For example, if JWT is provided via query parameter `my_token` (e.g /path?my_token=\\u003cJWT\\u003e), the config is: ```yaml fromParams: - \\\"my_token\\\" ```\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"outputPayloadToHeader\": {\n            \"description\": \"This field specifies the header name to output a successfully verified JWT payload to the backend. The forwarded data is `base64_encoded(jwt_payload_in_JSON)`. If it is not specified, the payload will not be emitted.\",\n            \"type\": \"string\"\n          },\n          \"forwardOriginalToken\": {\n            \"description\": \"If set to true, the original token will be kept for the upstream request. Default is false.\",\n            \"type\": \"boolean\"\n          }\n        }\n      },\n      \"istio.security.v1beta1.RequestAuthentication\": {\n        \"description\": \"RequestAuthentication defines what request authentication methods are supported by a workload. It will reject a request if the request contains invalid authentication information, based on the configured authentication rules. A request that does not contain any authentication credentials will be accepted but will not have any authenticated identity. To restrict access to authenticated requests only, this should be accompanied by an authorization rule. Examples: - Require JWT for all request for workloads that have label `app:httpbin`\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"selector\": {\n            \"$ref\": \"#/components/schemas/istio.type.v1beta1.WorkloadSelector\"\n          },\n          \"jwtRules\": {\n            \"description\": \"Define the list of JWTs that can be validated at the selected workloads' proxy. A valid token will be used to extract the authenticated identity. Each rule will be activated only when a token is presented at the location recognized by the rule. The token will be validated based on the JWT rule config. If validation fails, the request will be rejected. Note: if more than one token is presented (at different locations), the output principal is nondeterministic.\",\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/istio.security.v1beta1.JWTRule\"\n            }\n          }\n        }\n      },\n      \"istio.type.v1beta1.WorkloadSelector\": {\n        \"description\": \"WorkloadSelector specifies the criteria used to determine if a policy can be applied to a proxy. The matching criteria includes the metadata associated with a proxy, workload instance info such as labels attached to the pod/VM, or any other info that the proxy provides to Istio during the initial handshake. If multiple conditions are specified, all conditions need to match in order for the workload instance to be selected. Currently, only label based selection mechanism is supported.\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"matchLabels\": {\n            \"description\": \"One or more labels that indicate a specific set of pods/VMs on which a policy should be applied. The scope of label search is restricted to the configuration namespace in which the resource is present.\",\n            \"type\": \"object\",\n            \"additionalProperties\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }\n}",
			"canonicalURL": "/github.com/maistra/istio@485dbbe382fe10bf0d2d5428e5dd52c7bbbffe2c/-/blob/vendor/istio.io/api/security/v1beta1/request_authentication.gen.json",
			"externalURLs": [
				{
					"url": "https://github.com/maistra/istio/blob/485dbbe382fe10bf0d2d5428e5dd52c7bbbffe2c/vendor/istio.io/api/security/v1beta1/request_authentication.gen.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}