{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/code4romania/civichq-api"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "swagger.yaml",
			"byteSize": 12946,
			"content": "openapi: 3.0.0\ninfo:\n  description: \u003e-\n    This is a sample CentruCivic server. You can find out more about Swagger at\n    [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\n    #swagger](http://swagger.io/irc/).\n  version: 1.0.0\n  title: Swagger Centru civic\n  termsOfService: 'http://swagger.io/terms/'\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: apps\n    description: Operations about apps.\n  - name: actions\n    description: Other operations.\npaths:\n  /categories:\n    get:\n      security:\n      - bearerAuth: []\n      tags:\n        - actions\n      summary: Find all categories\n      description: Find all categories\n      operationId: getCategories\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Category'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Category'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  /approvedapps:\n    get:\n      security:\n      - bearerAuth: []\n      tags:\n        - apps\n      summary: Find all approved apps\n      description: Find all approved apps\n      operationId: getAllApprovedApps\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApprovedAppData'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApprovedAppData'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  /masterprofile:\n    get:\n      security:\n      - bearerAuth: []\n      tags:\n        - actions\n      summary: Get the master profile\n      description: ''\n      operationId: getMasterProfile\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProfileData'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProfileData'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  /auth:\n    post:\n      tags:\n        - actions\n      summary: Get the token that will be used by the user to log in into the system\n      description: ''\n      operationId: auth\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LoginData'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/LoginData'\n        description: Login data\n        required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        '400':\n          description: Invalid username/password supplied\n  /gethash:\n    post:\n      security:\n        - bearerAuth: []\n      tags:\n        - actions\n      summary: Get the hash\n      description: ''\n      operationId: gethash\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/HashData'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/HashData'\n        description: Hash data\n        required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  /uploadlogo:\n    post:\n      security:\n        - bearerAuth: []\n      tags:\n        - actions\n      summary: Uploads the photo.\n      description: ''\n      operationId: uploadphoto\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PhotoData'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/PhotoData'\n        description: Photo data\n        required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  /addapp:\n    post:\n      security:\n        - bearerAuth: []\n      tags:\n        - apps\n      summary: Adds a new app.\n      description: ''\n      operationId: addapp\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AppData'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/AppData'\n        description: App data\n        required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  '/updateapp/{appid}':\n    put:\n      security:\n      - bearerAuth: []\n      tags:\n        - apps\n      summary: Update an existing app\n      description: ''\n      operationId: updateApp\n      parameters:\n        - name: appid\n          in: path\n          description: ID of post to update\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          description: App not found\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AppData'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/AppData'\n        description: App object that needs to be updated\n        required: true\n  '/deleteapp/{appid}':\n    delete:\n      security:\n      - bearerAuth: []\n      tags:\n        - apps\n      summary: Mark an existing app as archived\n      description: ''\n      operationId: deleteApp\n      parameters:\n        - name: appid\n          in: path\n          description: ID of post to archive\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          description: App not found\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AppData'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/AppData'\n        description: App object that needs to be updated\n        required: true\n  '/tags/{src}':\n    get:\n      security:\n      - bearerAuth: []\n      tags:\n        - actions\n      summary: Find tags by src\n      description: ''\n      operationId: searchTags\n      parameters:\n        - name: src\n          in: path\n          description: src to find by\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TagData'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TagData'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  '/appprofile/{id}':\n    get:\n      security:\n      - bearerAuth: []\n      tags:\n        - apps\n      summary: Find profile by id\n      description: ''\n      operationId: getAppProfile\n      parameters:\n        - name: id\n          in: path\n          description: id to find by\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/ProfileData'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProfileData'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  '/search/{src_text}':\n    get:\n      security:\n      - bearerAuth: []\n      tags:\n        - apps\n      summary: Find app by name\n      description: ''\n      operationId: searchBy\n      parameters:\n        - name: src_text\n          in: path\n          description: name to find by\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/AppData'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AppData'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\nexternalDocs:\n  description: Find out more about Swagger\n  url: 'http://swagger.io'\nservers:\n  - url: 'http://localhost:8080/api'\n  - url: 'https://localhost:8080/api'\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  responses:\n    UnauthorizedError:\n      description: Access token is missing or invalid\n  schemas:\n    Category:\n      type: object\n      properties:\n        Id:\n          type: string\n          example: my post\n        CatName:\n          type: string\n          example: description\n        Ordinal:\n          type: string\n          example: location\n      xml:\n        name: Category\n    LoginData:\n      type: object\n      required:\n        - username\n        - password\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n        issentinel:\n          type: string\n      xml:\n        name: LoginData\n    HashData:\n      type: object\n      required:\n        - password\n        - secret\n      properties:\n        password:\n          type: string\n        secret:\n          type: string\n      xml:\n        name: HashData\n    PhotoData:\n      type: object\n      xml:\n        name: HashData\n    AppData:\n      type: object\n      required:\n        - appname\n        - appcategoryid\n        - ngoname\n        - ngoemail\n      properties:\n        appname:\n          type: string\n        appcategoryid:\n          type: string\n        appwebsite:\n          type: string\n        appfacebook:\n          type: string\n        appgithub:\n          type: string\n        appdescription:\n          type: string\n        appcreationdate:\n          type: string\n        apphashtags:\n          type: string\n        ngoname:\n          type: string\n        ngophone:\n          type: string\n        ngoemail:\n          type: string\n        ngofacebook:\n          type: string\n        ngogoogleplus:\n          type: string\n        ngolinkedin:\n          type: string\n        ngoinstagram:\n          type: string\n        ngodescription:\n          type: string\n      xml:\n        name: HashData\n    ApprovedAppData:\n      type: object\n      properties:\n        AppId:\n          type: string\n        CategoryId:\n          type: string\n        CategoryName:\n          type: string\n        Tags:\n          type: array\n          xml:\n            name: \"tag\"\n            wrapped: true\n          items:\n            type: \"string\"\n        AppLogoName:\n          type: string\n        NgoLogoName:\n          type: string\n      xml:\n        name: ApprovedAppData\n    ProfileData:\n      type: object\n      properties:\n        AppId:\n          type: string\n        CategoryId:\n          type: string\n        CategoryName:\n          type: string\n        Tags:\n          type: array\n          xml:\n            name: \"tag\"\n            wrapped: true\n          items:\n            type: \"string\"\n        AppLogoName:\n          type: string\n        NgoLogoName:\n          type: string\n      xml:\n        name: ProfileData\n    TagData:\n      type: object\n      xml:\n        name: TagData\n",
			"canonicalURL": "/github.com/code4romania/civichq-api@fee57d4ab252e2840484b2687746835fc83efd76/-/blob/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/code4romania/civichq-api/blob/fee57d4ab252e2840484b2687746835fc83efd76/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}