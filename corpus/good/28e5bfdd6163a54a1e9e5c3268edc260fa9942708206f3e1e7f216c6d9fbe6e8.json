{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi/atspoke/openapi.yml",
			"byteSize": 98648,
			"content": "openapi: 3.0.2\ninfo:\n  title: atSpoke API Reference\n  x-logo:\n    url: https://static.askspoke.com/img/logo/full-logo.png\n  contact:\n    name: atSpoke Support\n    email: support@askpoke.com\n  version: 0.1.0\n  termsOfService: https://www.askspoke.com/terms-of-service/\n  description: \u003e-\n    This is a generated connector for [atSpoke API v0.1.0](https://askspoke.com/api/reference) OpenAPI specification.\n\n    The atSpoke REST API provides a broad set of operations including:\n\n    - Creation, manipulation, and deletion of requests in atSpoke\n\n    - Management of users in atSpoke\n\n    - Creation, manipulation, and deletion of knowledge resources in atSpoke\n\n    The public API is served from https://api.askspoke.com/api/v1 â€“ note `api`\n    in the host name, not your usual organization id.\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials.\n\n    Create a [atSpoke account](https://www.atspoke.com) and obtain tokens by following [this guide](https://help.atspoke.com/article/uga6efxps2-api-authentication).\n  x-ballerina-display:\n    label: atSpoke\n    iconPath: \"icon.png\"\nservers:\n  - url: https://api.askspoke.com/api/v1\n    description: Production API server\ntags:\n  - name: Users\n  - name: Requests\n  - name: Resources\n  - name: Webhook Subscriptions\n    description: \u003e-\n      Webhooks allow for the integration of atSpoke with\n\n      external systems. When certain events take place in atSpoke, we will send\n      an\n\n      HTTPS POST request to a URL endpoint of your choosing.\u003cbr/\u003e\u003cbr/\u003eWhen you\n      receive a POST request from atSpoke, it will have the following\n\n      properties:\n\n\n      - you: the atSpoke User id of the user that set up the webhook\n\n      - org: the atSpoke Org id that the request or resource was filed against\n\n      - topic: `enum(\"request.created\", \"resource.created\", \"request.updated\")`\n\n      - message:\n       - updates\n       - the resource or request (their schemas can be viewed earlier in this\n       document)\n      The APIs below allow you to manage your Webhook Subscriptions.\ncomponents:\n  schemas:\n    Request:\n      description: Request object.\n      type: object\n      required:\n        - subject\n        - requester\n      properties:\n        id:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          readOnly: true\n          description: ID\n        requester:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: Requester\n        owner:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: Owner\n        subject:\n          type: string\n          example: What's the Wi-Fi passowrd?\n          description: Subject\n        status:\n          $ref: '#/components/schemas/RequestStatus'\n          description: Status\n        requestType:\n          type: object\n          example: 5c61e9f43e8c4c11f53240f8\n          description: Request type\n        requestTypeInfo:\n          $ref: '#/components/schemas/RequestTypeInfoResponse'\n          description: Request type info\n        privacyLevel:\n          enum:\n            - private\n            - public\n          description: Privacy level\n        team:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: Team\n        org:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: Org\n        isAutoResolved:\n          type: boolean\n          description: Is auto resolved\n        isFiled:\n          type: boolean\n          description: is filed\n        email:\n          type: string\n          format: email\n          readOnly: true\n          description: Email\n        permalink:\n          type: string\n          format: url\n          readOnly: true\n          example: https://example.askspoke.com/requests/8782\n          description: Permalink\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n          example: '2019-02-27T18:54:09.980Z'\n          description: Created at\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n          example: '2019-02-27T18:54:09.980Z'\n          description: Updated at\n        resolveTime:\n          type: integer\n          readOnly: true\n          example: 123456\n          description: Resolve time\n        teamResponseTimeInMs:\n          type: integer\n          readOnly: true\n          example: 123456\n          description: Team response time in ms\n        lastResolvedAt:\n          type: string\n          readOnly: true\n          format: date-time\n          example: '2019-02-27T18:54:09.980Z'\n          description: Last resolved at\n        tags:\n          type: array\n          items:\n            type: string\n            example: 5c61e9f43e8c4c11f53240f8\n          description: Tags\n        taskInstances:\n          type: array\n          items:\n            $ref: '#/components/schemas/TaskInstanceResponse'\n          description: Task instances\n    RequestPatchBody:\n      description: Request PATCH object.\n      type: object\n      properties:\n        requester:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: New requester user id\n        owner:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: New request owner user id\n        subject:\n          type: string\n          example: What's the Wi-Fi passowrd?\n          description: New request subject\n        status:\n          $ref: '#/components/schemas/RequestStatus'\n        requestType:\n          type: object\n          example: 5c61e9f43e8c4c11f53240f8\n          description: New request type id\n        requestTypeInfo:\n          $ref: '#/components/schemas/RequestTypeInfo'\n        taskInstances:\n          description: Task instances\n          type: array\n          items:\n            $ref: '#/components/schemas/TaskInstance'\n        privacyLevel:\n          enum:\n            - private\n            - public\n          description: New privacy level\n        team:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: New team id\n    RequestStatus:\n      description: Request statuses.\n      enum:\n        - AUTO_RESOLVED\n        - OPEN\n        - RESOLVED\n    RequestTask:\n      description: Request containing single task object.\n      type: object\n      required:\n        - subject\n      properties:\n        id:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          readOnly: true\n          description: ID\n        subject:\n          type: string\n          example: What's the Wi-Fi passowrd?\n          description: Subject\n        permalinkId:\n          type: integer\n          example: 123\n          description: Permalink ID\n        taskInstances:\n          $ref: '#/components/schemas/TaskInstance'\n          description: Task instances\n        sortField:\n          type: string\n          format: date-time\n          readOnly: true\n          example: '2019-02-27T18:54:09.980Z'\n          description: Sort field\n    TaskInstance:\n      description: Task instances\n      type: object\n      required:\n        - uuid\n      properties:\n        uuid:\n          description: UUID\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n        owner:\n          description: Owner\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n        status:\n          description: Status\n          type: string\n          enum:\n            - OPEN\n            - COMPLETED\n            - TOMBSTONED\n        dueDate:\n          description: Due date\n          type: string\n          example: '2021-01-01T08:00:00.000Z'\n    TaskInstanceResponse:\n      description: A representation of a single task on a request\n      type: object\n      required:\n        - subject\n      properties:\n        uuid:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: UUID\n        subject:\n          type: string\n          example: Add user to Okta.\n          description: Subject\n        taskTemplate:\n          $ref: '#/components/schemas/TaskTemplate'\n          description: Task template\n        requestTypeId:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: Request type ID\n        isRequired:\n          type: boolean\n          description: Is required\n        parentTaskUUIDs:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: Parent task UUIDs\n        isApproval:\n          type: boolean\n          description: Is Approval\n        approvalState:\n          type: string\n          enum:\n            - APPROVED\n            - DENIED\n          description: Approval State\n        owner:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: Owner\n        dueDate:\n          type: string\n          format: date-time\n          example: '2019-02-27T18:54:09.980Z'\n          description: Due date\n        wasManuallyReassigned:\n          type: boolean\n          description: Was manually reassigned\n        status:\n          type: string\n          enum:\n            - OPEN\n            - COMPLETED\n            - TOMBSTONED\n          description: Status\n        timestamps:\n          type: string\n          format: date-time\n          example: '2019-02-27T18:54:09.980Z'\n          description: Timestamps\n    Resource:\n      description: Resource object.\n      type: object\n      required:\n        - subject\n        - requester\n      properties:\n        id:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          readOnly: true\n          description: ID\n        type:\n          enum:\n            - text\n            - link\n            - file\n          description: Type\n        author:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: Author\n        title:\n          type: string\n          example: Wi-Fi password\n          description: Title\n        body:\n          type: string\n          example: \u003cWi-Fi password here\u003e\n          description: Body\n        file:\n          type: object\n          example: File object\n          description: File\n        link:\n          type: object\n          example: Link object\n          description: Link\n        keywords:\n          type: array\n          items:\n            type: string\n          example: '[''Wi-Fi'', ''password'']'\n          description: Keywords\n        team:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: Team\n        org:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: Org\n        isDeprecated:\n          type: boolean\n          description: Is deprecated\n        needsReview:\n          type: boolean\n          description: Needs review\n        reviewStatus:\n          enum:\n            - '0'\n            - '1'\n            - '2'\n          readOnly: true\n          description: Review status\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n          example: '2019-02-27T18:54:09.980Z'\n          description: Created at\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n          example: '2019-02-27T18:54:09.980Z'\n          description: Updated at\n    ResourcePostBody:\n      description: Resource object.\n      type: object\n      required:\n        - title\n        - author\n      properties:\n        type:\n          enum:\n            - text\n          description: \u003e-\n            The type of the resource. atSpoke supports many types of resources\n            but only text-based ones can be created via API.\n        author:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: The user id of the author of this resource.\n        title:\n          type: string\n          example: Wi-Fi password\n          description: The title of this resource.\n        body:\n          type: string\n          example: \u003cWi-Fi password here\u003e\n          description: The body of this resource.\n        team:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: The id of the team this resource should belong to.\n    BulkAddLabelBody:\n      description: Body to bulk add labels\n      type: object\n      required:\n        - requests\n        - label\n      properties:\n        requests:\n          type: array\n          items:\n            type: string\n          description: A list of request ids to add a label to.\n        label:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: Label id to add to the requests.\n    Team:\n      description: Team object.\n      type: object\n      required:\n        - name\n        - owner\n      properties:\n        id:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          readOnly: true\n          description: ID\n        name:\n          type: string\n          example: Engineering\n          description: Name\n        slug:\n          type: string\n          example: engineering\n          description: Slug\n        description:\n          type: string\n          example: Build cool things.\n          description: Description\n        keywords:\n          type: array\n          items:\n            type: string\n          example: '[''new feature'', ''issue report'']'\n          description: Keywords\n        icon:\n          enum:\n            - support\n            - administrative\n            - finance\n            - it\n            - security\n            - sales\n            - legal\n            - hr\n            - events\n            - cleaning\n            - design\n            - engineering\n            - facilities\n            - operations\n            - recruiting\n          example: engineering\n          description: Icon\n        color:\n          enum:\n            - blue\n            - cyan\n            - green\n            - grey\n            - indigo\n            - purple\n            - red\n            - pink\n            - yellow\n          example: blue\n          description: Color\n        status:\n          enum:\n            - ACTIVE\n            - CLOSED\n          example: ACTIVE\n          description: Status\n        goals:\n          type: object\n          example: '{...}'\n          description: Goals\n        agentList:\n          type: array\n          items:\n            type: object\n          example: '[...]'\n          description: Agent list\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n          example: '2019-02-27T18:54:09.980Z'\n          description: Created at\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n          example: '2019-02-27T18:54:09.980Z'\n          description: Updated at\n        owner:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: Owner\n        org:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: Org\n        email:\n          type: string\n          format: email\n          readOnly: true\n          description: Email\n        permalink:\n          type: string\n          format: url\n          readOnly: true\n          example: https://example.askspoke.com/teams/engineering\n          description: Permalink\n        settings:\n          $ref: '#/components/schemas/TeamSettings'\n          description: Settings\n    TeamPatchBody:\n      description: Team PATCH object\n      type: object\n      properties:\n        settings:\n          $ref: '#/components/schemas/TeamSettings'\n    TeamSettings:\n      description: Team settings\n      type: object\n      properties:\n        delegation:\n          $ref: '#/components/schemas/TeamDelegation'\n        flags:\n          description: Flags\n          type: object\n          properties:\n            AUTO_DELEGATION:\n              type: boolean\n              example: 'false'\n              description: whether this team should use auto delegation\n    TeamDelegation:\n      description: Team delegation settings\n      type: object\n      properties:\n        strategy:\n          $ref: '#/components/schemas/TeamDelegationStrategy'\n        specificUser:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: user id, valid only for SPECIFIC_USER strategy\n        excludedUsers:\n          description: user ids of excluded users, valid only for ROUND_ROBIN strategy\n          type: array\n          items:\n            type: string\n            example: 5c61e9f43e8c4c11f53240f8\n    TeamDelegationStrategy:\n      description: Team delegation strategies.\n      enum:\n        - SPECIFIC_USER\n        - ROUND_ROBIN\n        - SMART_ASSIGNMENT\n    User:\n      description: User object.\n      type: object\n      required:\n        - email\n        - displayName\n      properties:\n        id:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          readOnly: true\n          description: ID\n        displayName:\n          type: string\n          example: Jane Doe\n          description: Display name\n        email:\n          type: string\n          format: email\n          description: Email\n        isEmailVerified:\n          type: boolean\n          readOnly: true\n          description: Is email verified\n        isProfileCompleted:\n          type: boolean\n          readOnly: true\n          description: Is profile completed\n        status:\n          enum:\n            - ACTIVE\n            - INVITED\n          example: ACTIVE\n          description: Status\n        profile:\n          $ref: '#/components/schemas/Profile'\n          description: Profile\n        memberships:\n          type: array\n          items:\n            type: string\n          example: '[...]'\n          description: Memberships\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n          example: '2019-02-27T18:54:09.980Z'\n          description: Created at\n    CustomNavList:\n      description: A custom nav list used to organize a userâ€™s requests\n      type: object\n      required:\n        - name\n        - slug\n      properties:\n        name:\n          type: string\n          description: Name\n        slug:\n          type: string\n          description: Slug\n        filters:\n          type: object\n          description: Filters\n          properties:\n            status:\n              description: Status\n              type: object\n              properties:\n                includeNoValue:\n                  description: Include no value\n                  default: false\n                  type: boolean\n                values:\n                  description: Values\n                  type: array\n                  items:\n                    type: string\n                    example: 5c61e9f43e8c4c11f53240f8\n            team:\n              description: Team\n              type: object\n              properties:\n                includeNoValue:\n                  description: Include no value\n                  default: false\n                  type: boolean\n                values:\n                  description: Values\n                  type: array\n                  items:\n                    type: string\n                    example: 5c61e9f43e8c4c11f53240f8\n            requestType:\n              description: Request type\n              type: object\n              properties:\n                includeNoValue:\n                  description: Include no value\n                  default: false\n                  type: boolean\n                values:\n                  description: Values\n                  type: array\n                  items:\n                    type: string\n                    example: 5c61e9f43e8c4c11f53240f8\n            assignee:\n              description: Assignee\n              type: object\n              properties:\n                includeNoValue: \n                  description: Include no value\n                  default: false\n                  type: boolean\n                values:\n                  description: Values\n                  type: array\n                  items:\n                    type: string\n                    example: 5c61e9f43e8c4c11f53240f8\n            requester:\n              description: Requester\n              type: object\n              properties:\n                includeNoValue:\n                  description: Include no value\n                  default: false\n                  type: boolean\n                values:\n                  description: Values\n                  type: array\n                  items:\n                    type: string\n                    example: 5c61e9f43e8c4c11f53240f8\n            follower:\n              description: Follower\n              type: object\n              properties:\n                includeNoValue:\n                  description: Include no value\n                  default: false\n                  type: boolean\n                values:\n                  description: Values\n                  type: array\n                  items:\n                    type: string\n                    example: 5c61e9f43e8c4c11f53240f8\n            taskAssignee:\n              description: Task assignee\n              type: object\n              properties:\n                includeNoValue:\n                  description: Include no value\n                  default: false\n                  type: boolean\n                values:\n                  description: Values\n                  type: array\n                  items:\n                    type: string\n                    example: 5c61e9f43e8c4c11f53240f8\n            tag:\n              description: Tag\n              type: object\n              properties:\n                includeNoValue:\n                  description: Include no value\n                  default: false\n                  type: boolean\n                values:\n                  description: Values\n                  type: array\n                  items:\n                    type: string\n                    example: 5c61e9f43e8c4c11f53240f8\n            query:\n              description: Query\n              type: string\n              example: Search query\n    RequestType:\n      description: Request type object\n      type: object\n      required:\n        - org\n        - team\n        - title\n      properties:\n        id:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          readOnly: true\n          description: ID\n        title:\n          type: string\n          example: Software error/bug\n          description: Title\n        form:\n          type: object\n          description: Form\n          properties:\n            fields:\n              description: Fields\n              type: array\n              items:\n                type: object\n                properties:\n                  uuid:\n                    type: string\n                    example: 5c61e9f43e8c4c11f53240f8\n                  type:\n                    enum:\n                      - SELECT\n                      - TEXT\n                  label:\n                    type: string\n                    example: When kind of license?\n                  select:\n                    type: object\n                    properties:\n                      choices:\n                        type: array\n                        items:\n                          type: string\n                          example: Annual Subscription\n        taskTemplates:\n          description: Task template\n          type: array\n          items:\n            $ref: '#/components/schemas/TaskTemplate'\n        status:\n          description: Status\n          enum:\n            - ACTIVE\n            - TOMBSTONE\n        icon:\n          description: Icon\n          type: string\n          example: bug\n        team:\n          description: Team\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n        description:\n          description: Description\n          type: string\n          example: For bugs\n        org:\n          description: Org\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n        hasForm:\n          description: Has form\n          type: boolean\n          readOnly: true\n        createdAt:\n          description: Created at\n          type: string\n          format: date-time\n          readOnly: true\n          example: '2019-02-27T18:54:09.980Z'\n        updatedAt:\n          description: Updated at\n          type: string\n          format: date-time\n          readOnly: true\n          example: '2019-02-27T18:54:09.980Z'\n    TaskTemplate:\n      description: \u003e-\n        the template a RequestType uses to create a task. Copied onto the\n        created TaskInstance at instantiation\n      type: object\n      properties:\n        uuid:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: UUID\n        subject:\n          type: string\n          example: Add user to Okta.\n          description: Subject\n        assignmentRule:\n          description: Assignment rule\n          type: object\n          properties:\n            type:\n              description: Type\n              enum:\n                - TEAM_MEMBER\n                - SPECIFIC_USER\n                - ASSIGNEE\n                - REQUESTER\n                - MANAGER\n                - UNASSIGNED\n            team:\n              description: Team\n              type: string\n              example: 5c61e9f43e8c4c11f53240f8\n            user:\n              description: User\n              type: string\n              example: 5c61e9f43e8c4c11f53240f8\n    RequestTypeInfoResponse:\n      description: Request type form answer values.\n      type: object\n      properties:\n        answeredFields:\n          description: Answered fields\n          type: array\n          items:\n            type: object\n            properties:\n              simpleValue:\n                type: string\n                example: Annual Subscription\n              field:\n                type: object\n                properties:\n                  uuid:\n                    type: string\n                    example: 5c61e9f43e8c4c11f53240f8\n                  type:\n                    enum:\n                      - SELECT\n                      - TEXT\n                  label:\n                    type: string\n                    example: When kind of license?\n                  select:\n                    type: object\n                    properties:\n                      choices:\n                        type: array\n                        items:\n                          type: string\n                          example: Annual Subscription\n                  assignmentRule:\n                    type: object\n                    properties:\n                      type:\n                        enum:\n                          - TEAM_MEMBER\n                          - SPECIFIC_USER\n                          - ASSIGNEE\n                          - REQUESTER\n                          - MANAGER\n                          - UNASSIGNED\n                      team:\n                        type: string\n                        example: 5c61e9f43e8c4c11f53240f8\n                      user:\n                        type: string\n                        example: 5c61e9f43e8c4c11f53240f8\n    RequestTypeInfo:\n      description: Request type form values.\n      type: object\n      properties:\n        answeredFields:\n          description: Answered fields\n          type: array\n          items:\n            type: object\n            properties:\n              fieldId:\n                type: string\n                example: b0ca44ec-7d38-4be2-85ba-17ca23478953\n              value:\n                type: string\n                example: Form field value\n    SubscriberList:\n      description: A list of the subscribers on the request\n      type: array\n      items:\n        type: object\n        properties:\n          subscriber:\n            type: string\n            example: 5c61e9f43e8c4c11f53240f8\n            description: The user id of a user subscribed to this request\n          unsubscribed:\n            type: boolean\n            example: false\n            description: whether this user has unsubscribed from this request\n          reason:\n            type: string\n            description: why this user was subscribed\n    Tag:\n      description: Request tag.\n      type: object\n      properties:\n        id:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: ID\n        color:\n          enum:\n            - blue\n            - green\n            - red\n            - yellow\n            - orange\n            - purple\n          description: Color\n        status:\n          enum:\n            - ACTIVE\n            - TOMBSTONE\n          description: Status\n        text:\n          type: string\n          example: Priority 1\n          description: Text\n        org:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: Org\n    ConfigList:\n      description: Configuration Item List\n      type: object\n      properties:\n        id:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: ID\n        name:\n          type: string\n          example: Computer types\n          description: Name\n        status:\n          enum:\n            - ACTIVE\n            - TOMBSTONED\n          description: Status\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConfigListItem'\n          description: Items\n        externalData:\n          $ref: '#/components/schemas/ConfigListExternalData'\n          description: External data\n        org:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: Org\n    ConfigListItem:\n      description: A single item in a configuration list\n      type: object\n      properties:\n        id:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: ID\n        name:\n          type: string\n          example: MacBook Pro\n          description: Name\n        status:\n          enum:\n            - ACTIVE\n            - ARCHIVED\n          description: Status\n        externalData:\n          $ref: '#/components/schemas/ConfigListItemExternalData'\n    ConfigListExternalData:\n      description: Third-party data associated with a configuration list\n      type: object\n      properties:\n        sourceIntegrationId:\n          type: string\n          example: OKTA\n          description: \u003e-\n            Integration id of the third party app this list or item is synced\n            from\n        lastSyncedAt:\n          type: string\n          example: '2019-02-27T18:54:09.980Z'\n          description: \u003e-\n            Most recent timestamp when this list was synced with the third-party\n            system\n    ConfigListItemExternalData:\n      description: Third-party data associated with a configuration list\n      type: object\n      properties:\n        sourceIntegrationId:\n          type: string\n          example: OKTA\n          description: \u003e-\n            Integration id of the third party app this list or item is synced\n            from\n        remoteId:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: Unique id in the third-party system for this item\n        remoteLink:\n          type: string\n          example: https://example.com\n          description: Unique link for this item in the third-party system\n        lastSyncedAt:\n          type: string\n          example: '2019-02-27T18:54:09.980Z'\n          description: \u003e-\n            Most recent timestamp when this list was synced with the third-party\n            system\n    Profile:\n      description: User profile object.\n      type: object\n      properties:\n        id:\n          type: string\n          example: WORKDAY-1001\n          description: ID\n        jobTitle:\n          type: string\n          example: Software Engineer\n          description: Job title\n        location:\n          type: string\n          example: San Francisco, CA\n          description: Location\n        department:\n          type: string\n          example: Sales\n          description: Department\n        manager:\n          type: object\n          properties:\n            name:\n              type: string\n              example: John Doe\n              description: Name\n            email:\n              type: string\n              example: john@example.com\n              description: Email\n          description: Manager\n        startDate:\n          type: string\n          example: 01-01-2001\n          description: Start date\n    WebhookSubscription:\n      description: Webhook Subscription object.\n      type: object\n      properties:\n        id:\n          type: string\n          description: The ID of the webhook subscription.\n          example: 5c61e9f43e8c4c11f53240f8\n        client:\n          type: string\n          description: A description of the client software that created the webhook.\n          example: Zapier\n        org:\n          type: string\n          description: The subscriptions org.\n          example: 5c61e9f43e8c4c11f53240f8\n          readOnly: true\n        user:\n          type: string\n          description: The user who owns the subscription.\n          example: 5c61e9f43e8c4c11f53240f8\n          readOnly: true\n        url:\n          type: string\n          description: The URL to which webhooks will be posted.\n          example: https://example.com/receive_hook\n        enabled:\n          type: boolean\n          description: \u003e-\n            Whether the webhook is enabled. If disabled, webhooks will not be\n            sent, but one can always re-enable the subscription later.\n        topics:\n          type: array\n          description: An array of the topics to which to subscribe.\n          items:\n            enum:\n              - request.created\n              - resource.created\n              - request.updated\n        description:\n          type: string\n          description: A description of this subscription in particular\n          example: Push resource creation to external system.\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n          description: When the subscription was created\n          example: '2019-02-27T18:54:09.980Z'\n        authentication:\n          description: Webhook authentication mechanism\n          type: object\n          properties:\n            type:\n              type: string\n              example: client_secret\n              description: \u003e-\n                The type of authentication for this webhook.  Currently,\n                client_secret is the default and only supported value. This\n                means that a secret will be sent in the headers of each request\n                (as the \"Client-Secret\" header).\n            clientSecret:\n              type: string\n              example: a9841c029bff989d2\n              description: \u003e-\n                The secret sent with each request. Set only if\n                authentication.type is client_secret.\n    WebhookSubscriptionPostBody:\n      description: Webhook Subscription object.\n      type: object\n      required:\n        - url\n        - client\n      properties:\n        client:\n          type: string\n          description: A description of the client software that created the webhook.\n          example: Zapier\n        url:\n          type: string\n          description: The URL to which webhooks will be posted. Must be HTTPS\n          example: https://example.com/receive_hook\n        topics:\n          type: array\n          description: \u003e-\n            An array of the topics to which to subscribe. If this is left empty,\n            it will default to an empty array.\n\n            - request.created is fired when a request is created \n\n            - resource.created is fired when a resource is created \n\n            - request.updated is fired when a request is updated \n             - Change in request status\n             - Change in associated requestType\n             - Change in request tags\n             - Change in form fields\n          items:\n            enum:\n              - request.created\n              - resource.created\n              - request.updated\n        description:\n          type: string\n          description: A description of this subscription in particular\n          example: Push resource creation to external system.\n        enabled:\n          type: boolean\n          description: if false, webhook will not actually be sent.\n        authentication:\n          type: object\n          description: Authentication info for this webhook.\n          properties:\n            clientSecret:\n              type: string\n              description: \u003e-\n                A secret that will be sent with every fired webhook. Use this to\n                confirm that webhooks are coming from atSpoke.\n    TeamAgentStatus:\n      description: Team agent statuses.\n      enum:\n        - AVAILABLE\n        - AWAY\n    TeamAgent:\n      description: Describes an agent in a team.\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/User'\n        status:\n          $ref: '#/components/schemas/TeamAgentStatus'\n        lastAssignedAt:\n          type: string\n          format: date-time\n          readOnly: true\n          description: last request assigned at timestamp\n        joinedAt:\n          type: string\n          format: date-time\n          readOnly: true\n          description: timestamp when this agent joined the team\n        timestamps:\n          description: Timestamps\n          type: object\n          properties:\n            lastAvailableAt:\n              type: string\n              format: date-time\n              readOnly: true\n              description: when this agent became available most recently\n            lastAwayAt:\n              type: string\n              format: date-time\n              readOnly: true\n              description: when this agent went away most recently\n        isExcluded:\n          type: boolean\n          description: Whether this agent is excluded from rotation\n        numRequests:\n          type: integer\n          description: number of open requests assigned to this user on this team\n    Update:\n      description: Update object\n      type: object\n      properties:\n        content:\n          $ref: '#/components/schemas/MessageContent'\n        actor:\n          $ref: '#/components/schemas/UpdateActor'\n    MessageContent:\n      type: object\n      description: The content of the update\n      properties:\n        message:\n          type: object\n          description: \u003e-\n            An object that holds various types of updates. Only the text type is\n            supported via the public API. Attachments are not supported.\n          properties:\n            text:\n              type: string\n              description: a plain text string of the message to be posted to the request\n      example:\n        message:\n          text: Your request is complete!\n    UpdateActor:\n      description: Describes the actor that led to an update.\n      type: object\n      properties:\n        kind:\n          description: Kind\n          enum:\n            - User\n            - Team\n            - null\n        ref:\n          type: string\n          description: A team or user id\n          example: 5c61e9f43e8c4c11f53240f8\n    VisibleSegment:\n      description: VisibleSegment object.\n      type: object\n      required:\n        - org\n      properties:\n        id:\n          type: string\n          example: VisibleSegment uid\n          readOnly: true\n          description: ID\n        org:\n          type: string\n          description: Org\n        name:\n          type: string\n          example: Segment name\n          description: Name\n        teams:\n          type: array\n          items:\n            $ref: '#/components/schemas/SegmentTeamField'\n          example: list of teams\n          description: Teams\n        locations:\n          type: array\n          items:\n            $ref: '#/components/schemas/SegmentStringField'\n          description: SegmentStringField\n        departments:\n          type: array\n          items:\n            $ref: '#/components/schemas/SegmentStringField'\n          description: Departments\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n          example: created timestamp\n          description: Created at\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n          example: timestamp for last update\n          description: Updated at\n    SegmentTeamField:\n      description: A team field in a VisibleSegment\n      type: object\n      properties:\n        operator:\n          description: Operator\n          enum:\n            - IS\n            - IS_NOT\n        value:\n          $ref: '#/components/schemas/Team'\n    SegmentStringField:\n      description: A string field in a VisibleSegment\n      type: object\n      properties:\n        operator:\n          enum:\n            - IS\n            - IS_NOT\n          description: Operator\n        value:\n          type: string\n          description: Value\n    SearchProposal:\n      description: A DB record for storing search recommendations.\n      type: object\n      properties:\n        query:\n          type: string\n          description: Query\n        channelId:\n          enum:\n            - WEB_SEARCH_BAR\n            - WEB_REQUEST_PANEL_SUGGESTIONS\n            - WEB_NEW_REQUEST_PAGE\n            - SLACK\n            - EMAIL\n            - GOOGLE_CHAT\n            - MSFT_TEAMS\n            - ZOOM\n          description: Channel ID\n        user:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: User\n        org:\n          type: string\n          description: Org\n        pivot:\n          $ref: '#/components/schemas/SearchProposalPivot'\n          description: Pivot\n        interactionId:\n          type: string\n          description: Interaction ID\n        proposals:\n          type: array\n          items:\n            $ref: '#/components/schemas/SearchProposalItem'\n          example: list of search proposal items\n          description: Proposals\n    SearchProposalPivot:\n      description: The item created from the search proposal.\n      type: object\n      properties:\n        kind:\n          enum:\n            - Request\n            - ChatSession\n          description: Kind\n        ref:\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n          description: Ref\n    SearchProposalItem:\n      description: The item created from the search proposal.\n      type: object\n      properties:\n        action:\n          description: Action\n          enum:\n            - ACCEPTED\n            - NEUTRAL\n            - REJECTED\n        itemType:\n          description: Item type\n          enum:\n            - request\n            - resource\n            - request_type\n            - action\n            - team\n            - user\n        ref:\n          description: Ref\n          type: string\n          example: 5c61e9f43e8c4c11f53240f8\n    Forbidden:\n      description: Forbidden\n      type: object\n      properties:\n        code:\n          type: integer\n          description: atSpoke error code.\n          example: 11038\n        message:\n          type: string\n          description: Error message.\n          example: API Key invalid. Use the Api-Key header to pass your key.\n    NotFound:\n      description: Not Found\n      type: object\n      properties:\n        code:\n          type: integer\n          description: atSpoke error code.\n          example: 11003\n        message:\n          type: string\n          description: Error message.\n          example: The requested item could not be found.\n    PaymentRequired:\n      description: Payment required\n      type: object\n      properties:\n        code:\n          type: integer\n          description: atSpoke error code.\n          example: 11003\n        message:\n          type: string\n          description: Error message.\n          example: The requested item could not be found.\n    BadRequest:\n      description: Bad request\n      type: object\n      properties:\n        code:\n          type: integer\n          description: atSpoke error code.\n          example: 11008\n        message:\n          type: string\n          description: Error message.\n          example: The request was malformed.\n  responses:\n    BadRequest:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BadRequest'\n    PaymentRequired:\n      description: You do not have access to this feature.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/PaymentRequired'\n    Forbidden:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Forbidden'\n    NotFound:\n      description: Not Found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/NotFound'\n  securitySchemes:\n    api_key:\n      type: apiKey\n      in: header\n      name: Api-Key\n      x-ballerina-apikey-description: \"Provide your API key as `api_key`. Eg: `{\\\"api_key\\\" : \\\"\u003cAPI key\u003e\\\"}`\"\n      description: |-\n        Users on atSpoke's Standard and Plus plans can\n                   generate an API key by navigating to \"My Profile\" and then selecting\n                   the API tab. All API actions are taken by the API user. If a\n                   new key is generated or the user is deactivated, the old API key is\n                   deactivated automatically.\u003cbr/\u003e\u003cbr/\u003e\n                   Requests made to atSpoke's public API are rate-limited to no more\n                   than 6000 requests per minute per API key.\u003cbr/\u003e\u003cbr/\u003e\n                   \u003cb\u003e Warning:\u003c/b\u003e _All_ private items viewable by the user whose\n                API key is being used will be viewable via the API. This means that if\n                an admin uses their key to connect atSpoke to an external system,\n                requests and resources that are private to a team in atSpoke will\n                accessible in the external system. Keep this in mind when building with\n                the API so that private data does not become public.\npaths:\n  /requests:\n    get:\n      summary: List requests\n      description: Return a list of requests.\n      operationId: getRequests\n      tags:\n        - Requests\n      parameters:\n        - name: filter\n          in: query\n          description: Parameter to filter queries\n          required: false\n          schema:\n            enum:\n              - inbox\n              - unassigned\n              - sent\n            type: string\n            default: inbox\n        - name: status\n          in: query\n          description: \u003e-\n            Parameter to get requests by status. Should be a comma-separated\n            string of statuses.\n          required: false\n          example: OPEN,RESOLVED\n          schema:\n            enum:\n              - OPEN\n              - PENDING\n              - LOCKED\n              - RESOLVED\n              - AUTO_RESOLVED\n            type: string\n            default: OPEN\n        - name: team\n          in: query\n          description: Get requests belonging to this team\n          required: false\n          example: 5c61e9f43e8c4c11f53240f8\n          schema:\n            type: string\n        - name: tag\n          in: query\n          description: \u003e-\n            Get requests tagged with this tag. Accepts a comma-separated string\n            of many tags, and returns requests that match any provided tag. The\n            keyword `none` can also be passed to return requests that are not\n            tagged.\n          required: false\n          example: 5eac9b4b0972029e5ca5dde1,none\n          schema:\n            type: string\n        - name: q\n          in: query\n          description: Searches and returns request with this text\n          example: wifi\n          required: false\n          schema:\n            type: string\n        - name: start\n          in: query\n          description: The index of the request to start with\n          required: false\n          schema:\n            type: integer\n            default: 0\n        - name: limit\n          in: query\n          description: The number of requests to return at once. Max is 100.\n          required: false\n          schema:\n            type: integer\n            default: 25\n        - name: sort\n          in: query\n          description: \u003e-\n            The order by which requests should be returned. When querying with a\n            `q` param, results will be sorted by their similarity to the query\n            when no other `sort` is specified.\n          required: false\n          schema:\n            enum:\n              - updated\n              - updatedFirst\n              - createdLast\n              - createdFirst\n              - slaAscending\n            default: updated\n            type: string\n      responses:\n        '200':\n          description: List of requests\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Request'\n                    description: The list of requests itself.\n                  total:\n                    type: integer\n                    format: int32\n                    description: The total number of requests.\n                  start:\n                    type: integer\n                    format: int32\n                    description: The start offset for this set of requests.\n                  limit:\n                    type: integer\n                    format: int32\n                    description: The number of requests returned.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      security:\n        - api_key: []\n    post:\n      summary: Create new request\n      description: \u003e-\n        Create a new askSpoke request. Admins can create a request with anyone\n        as the requester while regularly priviledged users can only request for\n        themselves.\n      operationId: addRequest\n      tags:\n        - Requests\n      requestBody:\n        description: AddRequest payload\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - subject\n                - requester\n              properties:\n                subject:\n                  description: Request subject.\n                  type: string\n                  example: What's the Wi-Fi password?\n                body:\n                  description: a longer description of the request\n                  type: string\n                  example: I swear I had it yesterday...\n                requester:\n                  description: user id of person who will be the requester\n                  type: string\n                  example: 5c61e9f43e8c4c11f53240f8\n                owner:\n                  description: \u003e-\n                    user id of the person the request will be assigned to. Will\n                    be automatically delegated if left blank\n                  type: string\n                  example: 5c61e9f43e8c4c11f53240f8\n                team:\n                  description: ID of the team to assign the request to.\n                  type: string\n                  example: 5c61e9f43e8c4c11f53240f8\n                privacyLevel:\n                  description: Privacy level for the request.\n                  enum:\n                    - private\n                    - public\n                requestType:\n                  description: ID of the request type form.\n                  type: string\n                  example: 5c61e9f43e8c4c11f53240f8\n                requestTypeInfo:\n                  $ref: '#/components/schemas/RequestTypeInfo'\n      responses:\n        '200':\n          description: Request detail.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Request'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      security:\n        - api_key: []\n  /requests/tasks:\n    get:\n      summary: Get open tasks\n      description: Return open tasks with requests subject and permalinkId.\n      operationId: getOpenTasks\n      tags:\n        - Requests\n      parameters:\n        - name: start\n          in: query\n          description: The index of the task to start with.\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: limit\n          in: query\n          description: The number of tasks to return.\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: byDueDate\n          in: query\n          description: Whether to sort tasks by due date or not.\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: List of pending tasks.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/RequestTask'\n                  total:\n                    type: integer\n                    format: int32\n                    description: The total number of tasks.\n                  start:\n                    type: integer\n                    format: int32\n                    description: The start offset for this set of tasks.\n                  limit:\n                    type: integer\n                    format: int32\n                    description: The number of tasks returned.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      security:\n        - api_key: []\n  /requests/{requestId}:\n    patch:\n      summary: Update a request\n      description: Update a request.\n      operationId: updateRequest\n      tags:\n        - Requests\n      requestBody:\n        description: RequestPatchBody payload\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestPatchBody'\n      parameters:\n        - name: requestId\n          in: path\n          description: the ID of the request, 24 characters, hexadecimal\n          required: true\n          example: 5c61e9f43e8c4c11f53240f8\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Updated request object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Request'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n    delete:\n      summary: Delete a request\n      description: Delete a request.\n      operationId: deleteRequest\n      tags:\n        - Requests\n      parameters:\n        - name: requestId\n          in: path\n          description: the ID of the request, 24 characters, hexadecimal\n          required: true\n          example: 5c61e9f43e8c4c11f53240f8\n          schema:\n            type: string\n      responses:\n        '204':\n          description: No Content.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n    get:\n      summary: Get a request\n      description: Get a request.\n      operationId: getRequest\n      tags:\n        - Requests\n      parameters:\n        - name: requestId\n          in: path\n          description: the ID of the request, 24 characters, hexadecimal\n          required: true\n          example: 5c61e9f43e8c4c11f53240f8\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Request object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Request'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n  /requests/bulk_add_tag:\n    patch:\n      summary: Bulk add tags\n      description: Add a tag to multiple requests.\n      operationId: bulkAddTags\n      tags:\n        - Requests\n      requestBody:\n        description: \u003e-\n          A payload containing the tag id of the tag to be added and a list of\n          request ids that the tag will be added to.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - requests\n                - tag\n              example:\n                requests:\n                  - 5c61e9f43e8c4c11f53240f8\n                tag: 5c61e9f43e8c4c11f532000\n              properties:\n                requests:\n                  description: \u003e-\n                    the IDs of the requests to be updated, 24 characters,\n                    hexadecimal\n                  type: array\n                  items:\n                    type: string\n                tag:\n                  description: ID of the tag to add to the requests.\n                  type: string\n      responses:\n        '204':\n          description: No content\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Request'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/PaymentRequired'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n  /requests/{requestId}/secondary:\n    get:\n      summary: Get merged requests\n      description: Gets requests merged into the given request.\n      operationId: getMergedRequests\n      tags:\n        - Requests\n      parameters:\n        - name: requestId\n          in: path\n          description: \u003e-\n            the request id of the request for which you wish to see the merged\n            requests of\n          required: true\n          schema:\n            type: string\n        - name: start\n          in: query\n          description: The index of merged requests to start with\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: limit\n          in: query\n          description: \u003e-\n            The number of requests merged with your initial request to return.\n            Defaults to 25.\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: List of requests.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Request'\n                  total:\n                    type: integer\n                    format: int32\n                    description: The total number of the requests.\n                  start:\n                    type: integer\n                    format: int32\n                    description: The start offset for this set of requests.\n                  limit:\n                    type: integer\n                    format: int32\n                    description: The number of requests returned.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/PaymentRequired'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      security:\n        - api_key: []\n  /requests/{requestId}/messages:\n    post:\n      summary: Post a message\n      description: \u003e-\n        Post a message to a request. The message will show up in the Request\n        Panel. If creating a message as a User, the user id included in the POST\n        body must match the user that generated the API key\n      operationId: postRequestMessage\n      tags:\n        - Requests\n      parameters:\n        - name: requestId\n          in: path\n          description: ID of the request.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: PostRequestMessage payload\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - actor\n                - content\n              properties:\n                actor:\n                  $ref: '#/components/schemas/UpdateActor'\n                content:\n                  $ref: '#/components/schemas/MessageContent'\n      responses:\n        '200':\n          description: Update object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Update'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n  /requests/{requestId}/merge:\n    post:\n      summary: Merge requests\n      description: \u003e-\n        Merge a list of spoke requests to a primary request. Merging a request\n        carries out the following actions â€“ 1. Mark all the tasks of the\n        secondary requests as completed. 2. Lock all the secondary requests. 3.\n        Add all the viewers of secondary requests to primary request.\n      operationId: mergeRequest\n      tags:\n        - Requests\n      parameters:\n        - name: requestId\n          in: path\n          description: the request id of the request you wish to merge in to\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: MergeRequest payload\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - requests\n              example:\n                requests:\n                  - 5c61e9f43e8c4c11f53240f8\n              properties:\n                requests:\n                  description: \u003e-\n                    Request ids to be merged into the request in the path\n                    parameter\n                  type: array\n                  items:\n                    type: string\n                    example: 5c61e9f43e8c4c11f53240f8\n      responses:\n        '200':\n          description: No Content.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '402':\n          $ref: '#/components/responses/PaymentRequired'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      security:\n        - api_key: []\n  /requests/{requestId}/tags:\n    patch:\n      summary: Add tags\n      description: Add tags to a request.\n      operationId: AddTagsToRequest\n      tags:\n        - Requests\n      requestBody:\n        description: AddTagsToRequest payload\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - tags\n              example:\n                tags:\n                  - _id: 5c61e9f43e8c4c11f53240f7\n                  - _id: 5c61e9f43e8c4c11f53240f8\n              properties:\n                tags:\n                  description: Tag ids to add\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      _id:\n                        type: string\n                        description: a tag id\n                        example: 5c61e9f43e8c4c11f53240f8\n      parameters:\n        - name: requestId\n          in: path\n          description: ID of the request that needs to be updated.\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: No Content.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n  /requests/{requestId}/tags/{tagId}:\n    delete:\n      summary: Delete tag\n      description: Delete tag from a request.\n      operationId: DeleteTagFromRequest\n      tags:\n        - Requests\n      parameters:\n        - name: requestId\n          in: path\n          description: ID of the request that needs to be updated.\n          required: true\n          schema:\n            type: string\n        - name: tagId\n          in: path\n          description: ID of the tag to remove from the request.\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: No Content.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n  /requests/{requestId}/subscribers/{userId}:\n    post:\n      summary: Add a subscriber\n      description: Add a subscriber to a request\n      operationId: AddSubscriberToRequest\n      tags:\n        - Requests\n      parameters:\n        - name: requestId\n          in: path\n          description: ID of the request that will have the new subscriber.\n          required: true\n          schema:\n            type: string\n        - name: userId\n          in: path\n          description: ID of the user to subscribe to the request.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: All request subscribers\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubscriberList'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n    delete:\n      summary: Remove a subscriber\n      description: Remove a subscriber to a request\n      operationId: RemoveSubscriberFromRequest\n      tags:\n        - Requests\n      parameters:\n        - name: requestId\n          in: path\n          description: ID of the request that will have the subscriber removed.\n          required: true\n          schema:\n            type: string\n        - name: userId\n          in: path\n          description: ID of the user to remove as a subscriber.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: All request subscribers\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubscriberList'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /request_types:\n    get:\n      summary: List request types\n      description: Return a list of request types.\n      operationId: getRequestTypes\n      tags:\n        - RequestTypes\n      parameters:\n        - name: q\n          in: query\n          description: Parameter for text-searching requestTypes\n          required: false\n          schema:\n            type: string\n        - name: team\n          in: query\n          description: Get request types belonging to a team.\n          required: false\n          schema:\n            type: string\n        - name: start\n          in: query\n          description: The index of the request type to start with.\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: limit\n          in: query\n          description: The number of request types to return. Defaults to 25.\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: sort order for the returned request types\n          required: false\n          schema:\n            type: string\n            enum:\n              - createdLast\n              - createdFirst\n              - updated\n              - text\n      responses:\n        '200':\n          description: List of request types.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/RequestType'\n                  total:\n                    type: integer\n                    format: int32\n                    description: The total number of the request types.\n                  start:\n                    type: integer\n                    format: int32\n                    description: The start offset for this set of request types.\n                  limit:\n                    type: integer\n                    format: int32\n                    description: The number of request types returned.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      security:\n        - api_key: []\n  /request_types/{requestTypeId}:\n    get:\n      summary: Get a request type.\n      description: Return a single equest type.\n      operationId: getRequestType\n      tags:\n        - RequestTypes\n      parameters:\n        - name: requestTypeId\n          in: path\n          description: id of the request type\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A request type object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RequestType'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n  /resources:\n    post:\n      summary: Create a resource\n      description: \u003e-\n        Create a new askSpoke resource. Users with Administrator permissions can\n        create a resource with anyone as the author. Regularly permissioned\n        users can only author requests as themselves.\n      operationId: addResource\n      tags:\n        - Resources\n      requestBody:\n        description: ResourcePostBody payload\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ResourcePostBody'\n      responses:\n        '200':\n          description: Updated resource object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Resource'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n    get:\n      summary: List resources\n      description: Return a list of resources.\n      operationId: getResources\n      tags:\n        - Resources\n      parameters:\n        - name: q\n          in: query\n          description: A search query to search resources for.\n          required: false\n          schema:\n            type: string\n        - name: ai\n          in: query\n          description: Whether or not to use AI-based search. Requires q to be set as well.\n          required: false\n          schema:\n            type: boolean\n        - name: status\n          in: query\n          description: \u003e-\n            Parameter to get resources by status.  0 = ok, 1 = needs_review, 2 =\n            deprecated..\n          required: false\n          schema:\n            enum:\n              - 0\n              - 1\n              - 2\n        - name: team\n          in: query\n          description: \u003e-\n            Get resources belonging to one or more teams. Send comma-separated\n            string for multiple teams, \"none\" for no team\n          required: false\n          schema:\n            type: string\n        - name: author\n          in: query\n          description: \u003e-\n            Get resources created one or more authors. Send comma-separated\n            string for multiple authors.\n          required: false\n          schema:\n            type: string\n        - name: reviewBy\n          in: query\n          description: Get resources up for review before this timestamp (ms since epoch).\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: start\n          in: query\n          description: The index of the request to start with.\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: limit\n          in: query\n          description: The number of parameters to return. Defaults to 25.\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: List of resources.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Resource'\n                  total:\n                    type: integer\n                    format: int32\n                    description: The total number of the resources.\n                  start:\n                    type: integer\n                    format: int32\n                    description: The start offset for this set of resouces.\n                  limit:\n                    type: integer\n                    format: int32\n                    description: The number of resouces returned.\n                  newStart:\n                    type: integer\n                    format: int32\n                    description: Where to start next request for pagination.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      security:\n        - api_key: []\n  /resources/{resourceId}:\n    patch:\n      summary: Update a resource\n      description: Update a resource.\n      operationId: updateResource\n      tags:\n        - Resources\n      requestBody:\n        description: ResourcePostBody payload\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ResourcePostBody'\n      parameters:\n        - name: resourceId\n          in: path\n          description: ID of the resource that needs to be updated.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Updated resource object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Resource'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n    delete:\n      summary: Delete a resource\n      description: Delete a resource.\n      operationId: deleteResource\n      tags:\n        - Resources\n      parameters:\n        - name: resourceId\n          in: path\n          description: ID of resource that needs to be deleted.\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: No Content.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n    get:\n      summary: Get a resource\n      description: Get a resource.\n      operationId: getResource\n      tags:\n        - Resources\n      parameters:\n        - name: resourceId\n          in: path\n          description: ID of the resource.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Resource object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Resource'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n  /tags:\n    get:\n      summary: List tags\n      description: Returns a list of tags.\n      operationId: getTags\n      tags:\n        - Tags\n      parameters:\n        - name: start\n          in: query\n          description: The index of the tag to start with.\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: limit\n          in: query\n          description: The number of tags to return. Defaults to 25.\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: q\n          in: query\n          description: A search query to search tags for\n          required: false\n          schema:\n            type: string\n        - name: tagId\n          in: query\n          description: A comma separated list of tags\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List of tags.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Tag'\n                  total:\n                    type: integer\n                    format: int32\n                    description: The total number of the tags.\n                  start:\n                    type: integer\n                    format: int32\n                    description: The start offset for this set of tags.\n                  count:\n                    type: integer\n                    format: int32\n                    description: The number of tags returned.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n  /teams:\n    get:\n      summary: List teams\n      description: Return a list of teams.\n      operationId: getTeams\n      tags:\n        - Teams\n      parameters:\n        - name: q\n          in: query\n          description: Text search to search teams for.\n          required: false\n          schema:\n            type: string\n        - name: ai\n          in: query\n          description: Whether or not to use AI-based search. Requires q to be set as well.\n          required: false\n          schema:\n            type: boolean\n        - name: slug\n          in: query\n          description: Comma-separated list of team slugs to get.\n          required: false\n          schema:\n            type: string\n        - name: start\n          in: query\n          description: \u003e-\n            The index of the request to start with. Ignored if ai is set to\n            true.\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: limit\n          in: query\n          description: \u003e-\n            The number of parameters to return. Defaults to 25. Ignored if ai is\n            set to true.\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: List of teams.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Team'\n                  total:\n                    type: integer\n                    format: int32\n                    description: The total number of the teams.\n                  start:\n                    type: integer\n                    format: int32\n                    description: The start offset for this set of teams.\n                  limit:\n                    type: integer\n                    format: int32\n                    description: The limit of teams returned.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n  /teams/{teamId}:\n    patch:\n      summary: Update a team\n      description: Update a team.\n      operationId: updateTeam\n      tags:\n        - Teams\n      requestBody:\n        description: TeamPatchBody payload\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TeamPatchBody'\n      parameters:\n        - name: teamId\n          in: path\n          description: ID of the team.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Team object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Team'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n    get:\n      summary: Get a team\n      description: Get a team.\n      operationId: getTeam\n      tags:\n        - Teams\n      parameters:\n        - name: teamId\n          in: path\n          description: ID of the team.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Team object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Team'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n  /users:\n    get:\n      summary: List users\n      description: Return a list of users.\n      operationId: getUsers\n      tags:\n        - Users\n      parameters:\n        - name: q\n          in: query\n          description: Text search to search user for.\n          required: false\n          schema:\n            type: string\n        - name: status\n          in: query\n          description: Filter user based on status.\n          required: false\n          schema:\n            enum:\n              - ACTIVE\n              - INVITED\n        - name: team\n          in: query\n          description: Filter user based on team.\n          required: false\n          schema:\n            type: string\n        - name: start\n          in: query\n          description: The index of the request to start with.\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: limit\n          in: query\n          description: The number of parameters to return. Defaults to 10.\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: List of users.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User'\n                  total:\n                    type: integer\n                    format: int32\n                    description: The total number of the users.\n                  start:\n                    type: integer\n                    format: int32\n                    description: The start offset for this set of users.\n                  limit:\n                    type: integer\n                    format: int32\n                    description: The number of users returned.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n  /users/{userId}:\n    patch:\n      summary: Update a user\n      description: Update a user.\n      operationId: updateUser\n      tags:\n        - Users\n      parameters:\n        - name: userId\n          in: path\n          description: ID of user that needs to be updated.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: UpdateUser payload\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                displayName:\n                  description: New display name.\n                  type: string\n                  example: Jane Doe\n                phoneNumber:\n                  description: New phone number of the user.\n                  type: string\n                  example: 1234567890\n                countryId:\n                  description: country of the users phone number.\n                  type: string\n                  example: US\n                email:\n                  description: New email of the user.\n                  type: string\n                  format: email\n                profile:\n                  $ref: '#/components/schemas/Profile'\n      responses:\n        '200':\n          description: User detail.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      security:\n        - api_key: []\n    get:\n      summary: Get a user\n      description: Get a user.\n      operationId: getUser\n      tags:\n        - Users\n      parameters:\n        - name: userId\n          in: path\n          description: ID of the user.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: User object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n  /users/email/{address}:\n    get:\n      summary: Get a user by email\n      description: Look up a user by email address.\n      operationId: getUserByEmail\n      tags:\n        - Users\n      parameters:\n        - name: address\n          in: path\n          description: Email address of the user. Case insensitive.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: User object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n  /whoami:\n    get:\n      summary: Get API user details\n      description: Returns user id, name, current org and role for the API key.\n      operationId: whoami\n      tags:\n        - Users\n      responses:\n        '200':\n          description: User and Org details\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  org:\n                    type: string\n                    description: current org id\n                    example: askSpoke\n                  user:\n                    type: string\n                    description: user id\n                    example: 5c61e9f43e8c4c11f53240f8\n                  displayName:\n                    type: string\n                    description: user name\n                    example: Jane Doe\n                  role:\n                    type: string\n                    description: user role\n                    example: MEMBER\n                  status:\n                    type: string\n                    description: user status\n                    example: ACTIVE\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /configlists:\n    get:\n      summary: List config lists\n      description: Return a list of CMDB lists.\n      operationId: getConfigLists\n      tags:\n        - ConfigList\n      parameters:\n        - name: q\n          in: query\n          description: Parameter for text-searching lists by name or item name\n          required: false\n          schema:\n            type: string\n        - name: start\n          in: query\n          description: The index of the list to start with.\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: limit\n          in: query\n          description: The number of lists to return. Defaults to 25.\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: listId\n          in: query\n          description: comma-separated list of listids to return\n          required: false\n          schema:\n            type: string\n        - name: withItem\n          in: query\n          description: comma-separated list of itemids to return\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List of config lists.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ConfigList'\n                  total:\n                    type: integer\n                    format: int32\n                    description: The total number of config lists.\n                  start:\n                    type: integer\n                    format: int32\n                    description: The start offset for this set of lists.\n                  limit:\n                    type: integer\n                    format: int32\n                    description: The number of lists returned.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      security:\n        - api_key: []\n  /configlists/{listId}:\n    post:\n      summary: Create a config list.\n      description: Create a single config list.\n      operationId: addConfigList\n      tags:\n        - ConfigList\n      parameters:\n        - name: listId\n          in: path\n          description: List ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: ConfigList payload \n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConfigList'\n      responses:\n        '200':\n          description: A config list object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigList'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n    patch:\n      summary: Update a config list.\n      description: Update a single config list.\n      operationId: updateConfigList\n      tags:\n        - ConfigList\n      requestBody:\n        description: ConfigList payload\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConfigList'\n      parameters:\n        - name: listId\n          in: path\n          description: the ID of the configlist, 24 characters, hexadecimal\n          required: true\n          example: 5c61e9f43e8c4c11f53240f8\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A config list object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigList'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n    delete:\n      summary: Delete a config list.\n      description: Delete a single config list.\n      operationId: deleteConfigList\n      tags:\n        - ConfigList\n      parameters:\n        - name: listId\n          in: path\n          description: the ID of the configlist, 24 characters, hexadecimal\n          required: true\n          example: 5c61e9f43e8c4c11f53240f8\n          schema:\n            type: string\n      responses:\n        '204':\n          description: No Content.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n  /webhooks:\n    post:\n      summary: Creates a new webhook subscription\n      description: Sign up to receive webhooks from askSpoke.\n      operationId: addWebhook\n      tags:\n        - Webhook Subscriptions\n      requestBody:\n        description: WebhookSubscriptionPostBody payload\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WebhookSubscriptionPostBody'\n      responses:\n        '200':\n          description: Webhook subscription detail.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebhookSubscription'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      security:\n        - api_key: []\n    get:\n      summary: Lists webhook subscriptions\n      description: An array of all the webhook subscriptions for this user on this org.\n      operationId: getWebhooks\n      tags:\n        - Webhook Subscriptions\n      responses:\n        '200':\n          description: Lists all the webhook subscriptions for this user on this org.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/WebhookSubscription'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      security:\n        - api_key: []\n  /webhooks/{webhookId}:\n    get:\n      summary: Get a webhook subscription\n      description: Get a webhook subscription.\n      operationId: getWebhook\n      tags:\n        - Webhook Subscriptions\n      parameters:\n        - name: webhookId\n          in: path\n          description: The ID of the webhook to get.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Webhook Subscription object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebhookSubscription'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n    patch:\n      summary: Update a webhook subscription\n      description: Update a webhook subscription.\n      operationId: updateWebhook\n      tags:\n        - Webhook Subscriptions\n      requestBody:\n        description: WebhookSubscriptionPostBody payload\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WebhookSubscriptionPostBody'\n      parameters:\n        - name: webhookId\n          in: path\n          description: ID of the webhook subscription that needs to be updated.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Updated webhook subscription object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebhookSubscription'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n    delete:\n      summary: Delete a  webhook subscription.\n      description: Delete a  webhook subscription.\n      operationId: deleteWebhook\n      tags:\n        - Webhook Subscriptions\n      parameters:\n        - name: webhookId\n          in: path\n          description: ID of  webhook subscription to deleted.\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: No Content.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - api_key: []\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/atspoke/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/atspoke/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}