{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/davidmoten/openapi-to-plantuml"
		},
		"file": {
			"name": "openapi-example.yml",
			"size": 0,
			"path": "src/test/resources/openapi-example.yml",
			"byteSize": 24469,
			"content": "# This document is maintained manually. If you make changes to the rest API those changes\n# should be reflected in this document.\nopenapi: 3.0.0\ninfo:\n  version: '1.0'\n  title: Craft Tracking System\n  description: REST style service access for CTS\nservers:\n  - url: URL_HERE\n    description: DESCRIPTION_HERE\n    \npaths:\n  /agent:\n    get:\n      summary: Returns the list of craft reporting agents (reporting sources)\n      description: |\n        Returns the list of craft reporting agents (reporting sources), like AIS, LRIT, FIS.\n      responses:\n        '200':    # status code\n          description: OK\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/agents'\n                  \n  /craftType:\n    get:\n      summary: Returns the list of craft types\n      description: |\n        Returns the list of craft types, like Vessel, Aircraft, Tracking Device, etc.\n      responses:\n        '200':    # status code\n          description: OK\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/craftTypes'\n      \n  /identifierType:\n    get:\n      summary: Returns the list of craft identifier types \n      description: |\n        Returns the list of craft identifier types like MMSI, Serial Number, IMO Number\n      responses:\n        '200':    # status code\n          description: OK\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/identifierTypes'\n                            \n  /track/rect:\n    get:\n      summary: |\n        Returns a list of tracks (craft with positions) according to position, time and other criteria\n      description: |\n        Returns a list of track objects with identifiers, properties and positions\n      parameters: \n        - in: query\n          name: startTimeInclusive\n          description: start of the search time window, must be less than finishTimeExclusive\n          required: true\n          schema:\n            type: string\n            format: date-time\n        - in: query\n          name: finishTimeExclusive\n          description: finish of the search time window, must be greater than startTimeExclusive\n          required: true\n          schema:\n            type: string\n            format: date-time\n        - in: query\n          name: identifierValue\n          description: identifier values to filter on, no filtering if empty\n          schema: \n            type: array\n            items: \n              type: string\n        - in: query\n          name: craftId\n          description: craftId to filter on, no filtering if empty\n          schema: \n            type: array\n            items: \n              type: string\n        - in: query\n          name: craftType\n          description: craft types to filter on, no filtering if empty\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: agent\n          description: craft reporting agents to filter on, no filtering if empty\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: minLat\n          description: southermost latitude of the bounding box, must be less than maxLatExclusive\n          required: true\n          schema: \n            type: number\n            minimum: -90\n            maximum: 90\n        - in: query\n          name: maxLat\n          description: northernmost latitude of the bounding box, must be greater than or equal to minLat\n          required: true\n          schema:\n            type: number\n            minimum: -90\n            maximum: 90\n        - in: query\n          name: leftLon\n          description: |\n            left longitude of the bounding box. Note that it is possible and acceptable to have \n            leftLon \u003e rightLon. For example leftLon = 160, rightLon=-160 defines the region 20 \n            degrees each side of the 180 degree line of longitude.\n          required: true\n          schema:\n            type: number\n            minimum: -180\n            maximum: 180\n        - in: query\n          name: rightLon\n          description: |\n            right longitude of the bounding box. Note that it is possible and acceptable to have \n            leftLon \u003e rightLon. For example leftLon = 160, rightLon=-160 defines the region 20 \n            degrees each side of the 180 degree line of longitude.\n          required: true\n          schema:\n            type: number\n            minimum: -180\n            maximum: 180\n        - in: query\n          name: includeCraftProperties\n          description: includes craft properties if true otherwise does not\n          schema:\n            type: boolean\n            default: true            \n        - in: query\n          name: includeFixProperties\n          description: includes fix properties if true otherwise does not\n          schema:\n            type: boolean\n            default: true\n        - in: query\n          name: includeFixIdentifers\n          description: includes fix identifiers if true otherwise does not\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '200':    # status code\n          description: OK\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/tracks'\n                \n  /track/circle:\n    get:\n      summary: Returns a list of tracks (craft with positions) according to position, time and other criteria\n      description: Returns a list of track objects with craft identifiers and positions\n      parameters: \n        - in: query\n          name: startTimeInclusive\n          description: start of the search time window, must be less than finishTimeExclusive\n          required: true\n          schema:\n            type: string\n            format: date-time\n        - in: query\n          name: finishTimeExclusive\n          description: finish of the search time window, must be greater than startTimeExclusive\n          required: true\n          schema:\n            type: string\n            format: date-time\n        - in: query\n          name: identifierValue\n          description: identifier values to filter on, no filtering if empty\n          schema: \n            type: array\n            items: \n              type: string\n        - in: query\n          name: craftId\n          description: craftId to filter on, no filtering if empty\n          schema: \n            type: array\n            items: \n              type: string              \n        - in: query\n          name: craftType\n          description: craft types to filter on, no filtering if empty\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: agent\n          description: craft reporting agents to filter on, no filtering if empty\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: centreLat\n          description: latitude of the centre of the search region\n          required: true\n          schema: \n            type: number\n            minimum: -90\n            maximum: 90\n        - in: query\n          name: centreLon\n          description: longitude of the centre of the search region\n          required: true\n          schema:\n            type: number\n            minimum: -180\n            maximum: 180\n        - in: query\n          name: radiusNm\n          description: radius of the search circle in nautical miles\n          required: true\n          schema:\n            type: number\n            minimum: 0\n        - in: query\n          name: includeCraftProperties\n          description: includes craft properties if true otherwise does not\n          schema:\n            type: boolean\n            default: true            \n        - in: query\n          name: includeFixProperties\n          description: includes fix properties if true otherwise does not\n          schema:\n            type: boolean\n            default: true\n        - in: query\n          name: includeFixIdentifers\n          description: includes fix identifiers if true otherwise does not\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '200':    # status code\n          description: OK\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/tracks'                \n                \n  /craftpic/rect:\n    get:\n      summary: |\n        Returns closest actual positions by time or predicted positions \n        (using interpolation/extrapolation) at given time within a rectangular\n        WGS84 region and other criteria. Expands the given rectangular region \n        with a margin based on the given speed knots of craft and the duration \n        of the time window so that vessels entering the region during the time\n        window are considered. Note that closest actual position by time becomes\n        last actual position if afterHours is set to 0. \n      description: Returns a list of craft with position\n      parameters: \n        - in: query\n          name: time\n          description: time to predict positions at or to find the closest actual position to\n          required: true\n          schema:\n            type: string\n            format: date-time\n        - in: query\n          name: beforeHours\n          description: hours before time to search for fixes\n          required: true\n          schema: \n            type: number\n            minimum: 0\n            default: 24\n        - in: query\n          name: afterHours\n          description: hours after time to search for fixes\n          required: true\n          schema: \n            type: number\n            minimum: 0\n            default: 2   \n        - in: query\n          name: identifierValue\n          description: identifier values to filter on, no filtering if empty\n          schema: \n            type: array\n            items: \n              type: string\n        - in: query\n          name: craftId\n          description: craftId to filter on, no filtering if empty\n          schema: \n            type: array\n            items: \n              type: string              \n        - in: query\n          name: craftType\n          description: craft types to filter on, no filtering if empty\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: agent\n          description: craft reporting agents to filter on, no filtering if empty\n          schema:\n            type: array\n            items:\n              type: string                   \n        - in: query\n          name: minLat\n          description: southermost latitude of the bounding box, must be less than or equal to maxLat\n          required: true\n          schema: \n            type: number\n            minimum: -90\n            maximum: 90\n        - in: query\n          name: maxLat\n          description: northernmost latitude of the bounding box, must be greater than or equal to minLat\n          required: true\n          schema:\n            type: number\n            minimum: -90\n            maximum: 90\n        - in: query\n          name: leftLon\n          description: |\n            left longitude of the bounding box. Note that it is possible and acceptable to have \n            leftLon \u003e rightLon. For example leftLon = 160, rightLon=-160 defines the region 20 \n            degrees each side of the 180 degree line of longitude.\n          required: true\n          schema:\n            type: number\n            minimum: -180\n            maximum: 180\n        - in: query\n          name: rightLon\n          description: |\n            right longitude of the bounding box. Note that it is possible and acceptable to have \n            leftLon \u003e rightLon. For example leftLon = 160, rightLon=-160 defines the region 20 \n            degrees each side of the 180 degree line of longitude.\n          required: true\n          schema:\n            type: number\n            minimum: -180\n            maximum: 180\n        - in: query\n          name: includeFixProperties\n          description: includes fix properties if true otherwise does not\n          schema:\n            type: boolean\n            default: true\n        - in: query\n          name: includeCraftProperties\n          description: includes craft properties if true otherwise does not\n          schema:\n            type: boolean\n            default: true\n        - in: query\n          name: includeFixIdentifers\n          description: includes fix identifiers if true otherwise does not\n          schema:\n            type: boolean\n            default: false\n        - in: query\n          name: predicted\n          description: |\n            if true then uses extrapolation/interpolation to predict the positions at target time. \n            If false returns closest actual positions by time to the target time. \n          schema:\n            type: boolean\n            default: true\n        - in: query\n          name: speedForMarginKnots\n          description: |\n            Initial search region is expanded by at least the distance that a craft would travel in the given time\n            window to capture vessels starting outside the region at start of time window and entering the\n            region before the finish of the time window. Setting this value to 0 effectively turns off the \n            margin. The number of degrees of longitude for a given distance varies with the latitude and the\n            most distant latitude of the region from the equator is used to calculate the margins in the longitude\n            direction (left, right margins). The default value of 20 knots is the average speed of container vessels. \n            Cruise ships travel even faster (25 knots) so override the default as you see fit. \n          schema:\n            type: number\n            default: 20\n            minimum: 0\n      responses:\n        '200':    # status code\n          description: OK\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/craftpic'\n                \n  /craftpic/circle:\n    get:\n      summary: |\n        Returns the closest actual positions by time or predicted positions \n        (using interpolation/extrapolation) at given time within a circular \n        WGS84 region and other criteria. Expands the given rectangular region \n        with a margin based on the given speed knots of craft and the duration \n        of the time window so that craft entering the region during the time\n        window are considered. Note that closest actual position by time becomes\n        last actual position if afterHours is set to 0.\n      description: Returns a list of craft with position\n      parameters: \n        - in: query\n          name: time\n          description: time to find closest actual by time or predicted positions at\n          required: true\n          schema:\n            type: string\n            format: date-time\n        - in: query\n          name: beforeHours\n          description: hours before time to search for fixes\n          required: true\n          schema: \n            type: number\n            minimum: 0\n            default: 24\n        - in: query\n          name: afterHours\n          description: hours after time to search for fixes\n          required: true\n          schema: \n            type: number\n            minimum: 0\n            default: 2          \n        - in: query\n          name: identifierValue\n          description: identifier values to filter on, no filtering if empty\n          schema: \n            type: array\n            items: \n              type: string\n        - in: query\n          name: craftId\n          description: craftId to filter on, no filtering if empty\n          schema: \n            type: array\n            items: \n              type: string              \n        - in: query\n          name: craftType\n          description: craft types to filter on, no filtering if empty\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: agent\n          description: craft reporting agents to filter on, no filtering if empty\n          schema:\n            type: array\n            items:\n              type: string             \n        - in: query\n          name: centreLat\n          description: latitude of the centre of the circular search region\n          required: true\n          schema: \n            type: number\n            minimum: -90\n            maximum: 90\n        - in: query\n          name: centreLon\n          description: longitude of the centre of the circular search region\n          required: true\n          schema:\n            type: number\n            minimum: -180\n            maximum: 180\n        - in: query\n          name: radiusNm\n          description: radius of the search region in nautical miles\n          required: true\n          schema:\n            type: number\n            minimum: 0\n        - in: query\n          name: includeCraftProperties\n          description: includes craft properties if true otherwise does not\n          schema:\n            type: boolean\n            default: true\n        - in: query\n          name: includeFixProperties\n          description: includes fix properties if true otherwise does not\n          schema:\n            type: boolean\n            default: true\n        - in: query\n          name: includeFixIdentifers\n          description: includes fix identifiers if true otherwise does not\n          schema:\n            type: boolean\n            default: false\n        - in: query\n          name: predicted\n          description: if true then uses extrapolation/interpolation to predict the positions at target time. If false returns closest actual positions by time to the target time. \n          schema:\n            type: boolean\n            default: true\n        - in: query\n          name: speedForMarginKnots\n          description: |\n            Initial search region is expanded by at least the distance that a craft would travel in the given time\n            window to capture vessels starting outside the region at start of time window and entering the\n            region before the finish of the time window. Setting this value to 0 effectively turns off the \n            margin. The number of degrees of longitude for a given distance varies with the latitude and the\n            most distant latitude of the region from the equator is used to calculate the margins in the longitude\n            direction (left, right margins). The default value of 20 knots is the average speed of container vessels. \n            Cruise ships travel even faster (25 knots) so override the default as you see fit.\n          schema:\n            type: number\n            default: 20\n            minimum: 0\n      responses:\n        '200':    # status code\n          description: OK\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/craftpic'                \n\ncomponents:\n  schemas:\n  \n    agents:\n      description: craft reporting agents like AIS, LRIT\n      type: array\n      items:\n        $ref: '#/components/schemas/agent'\n            \n    agent:\n      description: craft reporting agent like AIS, LRIT\n      type: string\n      \n    craftTypes:\n      description: craft types like Vessel, Aircraft\n      type: array\n      items:\n        $ref: '#/components/schemas/craftType'\n\n    tracks: \n      description: a collection of unique craft and their position reports (fixes)\n      type: array\n      items:\n        $ref: '#/components/schemas/craftFixes'\n          \n    craftpic:\n      description: a collection of unique craft and a single position report (fix)\n      type: array\n      items: \n        $ref: '#/components/schemas/craftFix'\n        \n    craftId:\n      description: the unique system identifier of a craft (not one of the public identifiers for a craft like the MMSI no)\n      type: string\n      maxLength: 512\n      minLength: 1\n      example: 43215678\n      \n    craftType:\n      type: string\n      maxLength: 512\n      minLength: 1\n      example: Vessel\n\n    identifierTypes:\n      type: array\n      items:\n        $ref: '#/components/schemas/identifierType'\n      \n    identifierType:\n      type: string\n      maxLength: 256\n      minLength: 1\n      example: MMSI\n            \n    craftFix:\n      description: a single craft together with a single position for that craft (fix)\n      properties:\n        craftId:\n          $ref: '#/components/schemas/craftId'\n        craftType:\n          $ref: '#/components/schemas/craftType'\n        identifiers:\n          type: array\n          items:\n            $ref: '#/components/schemas/identifier'\n        properties:\n          description: |\n            the properties here are accumulated from fix properties over time \n            and correspond to the current time rather than the search time. Given this fact\n            a client may want to ignore many of these properties (and focus on effectively\n            static ones like Name or CraftSubtype). \n          type: array\n          items:\n            $ref: '#/components/schemas/property'\n        fix:\n          $ref: '#/components/schemas/fix'\n      required:\n      - craftId\n      - craftType\n      - fix\n              \n    craftFixes:\n      description: a single craft and a collection of position reports (fixes)\n      properties:\n        craftId:\n          $ref: '#/components/schemas/craftId'\n        craftType:\n          $ref: '#/components/schemas/craftType'\n        identifiers:\n          type: array\n          items:\n            $ref: '#/components/schemas/identifier'\n        properties:\n          description: |\n            the properties here are accumulated from fix properties over time \n            and correspond to the current time rather than the search time. Given this fact\n            a client may want to ignore many of these properties (and focus on effectively\n            static ones like Name or CraftSubtype). \n          type: array\n          items:\n            $ref: '#/components/schemas/property'\n        fixes:\n          type: array\n          items:\n            $ref: '#/components/schemas/fix'\n      required:\n      - craftId\n      - craftType\n\n    identifier:\n      description: a unique identifier for a craft having a key and value\n      properties:\n        key: \n          $ref: '#/components/schemas/identifierType'\n        value:\n          type: string\n          example: '123456789'\n      required:\n      - key\n      - value\n\n    property:\n      description: a key-value property of the craft and/or fix\n      properties:\n        key: \n          type: string\n          minLength: 1\n          example: Name\n        value:\n          type: string\n          example: 'PACIFIC EXPLORER'\n      required:\n      - key\n      - value\n\n    fix:\n      description: a position report for a craft (may be actual or predicted)\n      properties:\n        fixId: \n          type: string\n          maxLength: 512\n          minLength: 1\n          example: '7654321'\n        time: \n          type: string\n          format: date-time\n          example: '2020-11-17T14:08:18.123Z'\n        lat: \n          type: number\n          minimum: -90.0\n          maximum: 90.0\n          example: -34.2\n        lon: \n          type: number\n          minimum: -180\n          maximum: 180\n          example: 140.0\n        altitudeMetres: \n          type: number\n        cog: \n          type: number\n          minimum: 0\n          maximum: 360\n          example: 345.0\n        speedKnots: \n          type: number\n          minimum: 0.0\n          example: 10.5\n        agent: \n          $ref: '#/components/schemas/agent'\n        properties: \n          type: array\n          items: \n            $ref: '#/components/schemas/property'\n        identifiers:\n          type: array\n          items: \n            $ref: '#/components/schemas/identifier'\n        closestActualFixTime: \n          type: string\n          format: date-time\n      required:\n      - fixId\n      - time\n      - lat\n      - lon\n      - agent\n\n  securitySchemes:\n    basicAuth:     # \u003c-- arbitrary name for the security scheme\n      type: http\n      scheme: basic\n      \nsecurity:\n  - basicAuth: [] # applies to whole api\n      ",
			"canonicalURL": "/github.com/davidmoten/openapi-to-plantuml@c4984f52cd528d20cbbbcf1439a60df24ec343c3/-/blob/src/test/resources/openapi-example.yml",
			"externalURLs": [
				{
					"url": "https://github.com/davidmoten/openapi-to-plantuml/blob/c4984f52cd528d20cbbbcf1439a60df24ec343c3/src/test/resources/openapi-example.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}