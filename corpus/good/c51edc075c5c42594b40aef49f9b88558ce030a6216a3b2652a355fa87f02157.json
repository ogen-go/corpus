{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/rolling-scopes-school/nodejs-course-template"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "doc/api.yaml",
			"byteSize": 21804,
			"content": "openapi: 3.0.0\ninfo:\n  title: Home Library Service\n  description: Home video, music and book library service\n  version: 1.0.0\n\nservers:\n  - url: /api\n\ncomponents:\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        login:\n          type: string\n      required:\n        - id\n        - username\n    Album:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        name:\n          type: string\n        singer:\n          type: string\n        songs:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n        year:\n          type: integer\n      required:\n        - id\n        - name\n        - singer\n    Track:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        name:\n          type: string\n        singer:\n          type: string\n        album:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n              year:\n                type: integer\n        duration:\n          type: integer\n          description: In seconds\n      required:\n        - id\n        - name\n        - duration\n        - singer\n    Movie:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        name:\n          type: string\n        genre:\n          type: string\n          enum:\n            [\n              Action,\n              Crime,\n              Fantasy,\n              Horror,\n              Romance,\n              Science Fiction,\n              Comedy,\n              Sports,\n              Thriller,\n              War,\n              Western,\n            ]\n        duration:\n          type: integer\n          description: In seconds\n        year:\n          type: integer\n      required:\n        - id\n        - name\n        - genre\n        - duration\n    Book:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        name:\n          type: string\n        author:\n          type: string\n        genre:\n          type: string\n          enum:\n            [\n              Adventure,\n              Classics,\n              Comics,\n              Detective,\n              Mystery,\n              Fantasy,\n              Historical,\n              Horror,\n              Fiction,\n            ]\n        year:\n          type: integer\n      required:\n        - id\n        - name\n        - genre\n    Favourites:\n      type: object\n      properties:\n        movies:\n          type: array\n          items:\n            $ref: '#/components/schemas/Movie'\n        tracks:\n          type: array\n          items:\n            $ref: '#/components/schemas/Track'\n        books:\n          type: array\n          items:\n            $ref: '#/components/schemas/Book'\n  responses:\n    UnauthorizedError:\n      description: Access token is missing or invalid\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n\nsecurity:\n  - bearerAuth: []\n\npaths:\n  /login:\n    post:\n      tags:\n        - Login\n      security: []\n      summary: Login\n      description: Logins a user and returns a JWT-token\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: example\n              properties:\n                login:\n                  type: string\n                  description: Username\n                password:\n                  type: string\n                  description: Password\n              required:\n                - user\n                - login\n      responses:\n        200:\n          description: Successful login.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  token:\n                    type: string\n                description: JWT Token\n        403:\n          description: Incorrect login or password\n  /users:\n    get:\n      tags:\n        - Users\n      summary: Get all users\n      description: Gets all users\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n    post:\n      tags:\n        - Users\n      summary: Create user\n      description: Creates a new user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: example\n              properties:\n                login:\n                  type: string\n                  description: The user's login\n                password:\n                  type: string\n                  description: The user's password\n              required:\n                - login\n                - password\n      responses:\n        200:\n          description: The user has been created.\n        400:\n          description: Bad request\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n    put:\n      tags:\n        - Users\n      summary: Update a user's password\n      description: Updates a user's password by ID\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: example\n              properties:\n                id:\n                  type: string\n                  description: The user's uuid\n                oldPassword:\n                  type: string\n                  description: The user's old password\n                password:\n                  type: string\n                  description: The user's new password\n              required:\n                - password\n      responses:\n        200:\n          description: The user has been updated.\n        400:\n          description: Bad request\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n  /users/{userId}:\n    parameters:\n      - name: userId\n        in: path\n        required: true\n        schema:\n          type: string\n    delete:\n      tags:\n        - Users\n      summary: Delete user\n      description: Deletes user by ID.\n      responses:\n        204:\n          description: The user has been deleted\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: User not found\n  /tracks:\n    get:\n      tags:\n        - Track\n      summary: Get tracks list\n      description: Gets all library tracks list\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Track'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n    post:\n      tags:\n        - Track\n      summary: Add new track\n      description: Add new track information\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  type: string\n                  format: uuid\n                name:\n                  type: string\n                singer:\n                  type: string\n                duration:\n                  type: integer\n                  description: In seconds\n                albums:\n                  type: array\n                  items:\n                    type: string\n                    format: uuid\n                    description: albums ids\n              required:\n                - id\n                - name\n                - duration\n                - singer\n      responses:\n        200:\n          description: All library tracks list\n        400:\n          description: Bad request\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n  /tracks/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    put:\n      tags:\n        - Track\n      summary: Update track information\n      description: Update library track information by UUID\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: example\n              properties:\n                name:\n                  type: string\n                singer:\n                  type: string\n                duration:\n                  type: integer\n                  description: In seconds\n                albums:\n                  type: array\n                  items:\n                    type: string\n                    format: uuid\n                    description: albums ids\n      responses:\n        200:\n          description: The track has been updated.\n        400:\n          description: Bad request\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: Track was not found.\n    delete:\n      tags:\n        - Track\n      summary: Delete track\n      description: Delete track from library\n      responses:\n        200:\n          description: Added succesfully\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: Track was not found.\n  /tracks/{id}/favs:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    post:\n      tags:\n        - Favourites\n        - Track\n      summary: Add track to the favourites\n      description: Add track to the favourites\n      responses:\n        200:\n          description: Added succesfully\n        400:\n          description: Bad request\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: Track was not found.\n    delete:\n      tags:\n        - Favourites\n        - Track\n      summary: Delete track from favourites\n      description: Delete track from favourites\n      responses:\n        200:\n          description: Deleted succesfully\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: Track was not found.\n  /albums:\n    get:\n      tags:\n        - Album\n      summary: Get albums list\n      description: Gets all library alibums list\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Album'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n    post:\n      tags:\n        - Album\n      summary: Add new album\n      description: Add new album information\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: example\n              properties:\n                id:\n                  type: string\n                  format: uuid\n                name:\n                  type: string\n                singer:\n                  type: string\n                year:\n                  type: integer\n                tracks:\n                  type: array\n                  items:\n                    type: string\n                    format: uuid\n                    description: tracks ids\n              required:\n                - id\n                - name\n                - singer\n      responses:\n        200:\n          description: All library tracks list\n        400:\n          description: Bad request\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n  /albums/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    put:\n      tags:\n        - Album\n      summary: Update album information\n      description: Update library album information by UUID\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: example\n              properties:\n                name:\n                  type: string\n                singer:\n                  type: string\n                year:\n                  type: integer\n                tracks:\n                  type: array\n                  items:\n                    type: string\n                    format: uuid\n                    description: tracks ids\n      responses:\n        200:\n          description: The album has been updated.\n        400:\n          description: Bad request\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: Album was not found.\n    delete:\n      tags:\n        - Album\n      summary: Delete album\n      description: Delete album from library\n      responses:\n        200:\n          description: Deleted succesfully\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: Album was not found.\n  /albums/{id}/track/{trackId}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n      - name: trackId\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    post:\n      tags:\n        - Album\n        - Track\n      summary: Add track to the album\n      description: Add track to the album\n      responses:\n        200:\n          description: Added succesfully\n        400:\n          description: Bad request\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: Album or track was not found.\n    delete:\n      tags:\n        - Album\n        - Track\n      summary: Delete track from album\n      description: Delete track from album\n      responses:\n        200:\n          description: Deleted succesfully\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: Album or track was not found.\n  /movie:\n    get:\n      tags:\n        - Movie\n      summary: Get movies list\n      description: Gets all library movies list\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Movie'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n    post:\n      tags:\n        - Movie\n      summary: Add new movie\n      description: Add new movie information\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Movie'\n      responses:\n        200:\n          description: All library movies list\n        400:\n          description: Bad request\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n  /movie/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    put:\n      tags:\n        - Movie\n      summary: Update movie information\n      description: Update library movie information by UUID\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: example\n              properties:\n                name:\n                  type: string\n                genre:\n                  type: string\n                  enum:\n                    [\n                      Action,\n                      Crime,\n                      Fantasy,\n                      Horror,\n                      Romance,\n                      Science Fiction,\n                      Comedy,\n                      Sports,\n                      Thriller,\n                      War,\n                      Western,\n                    ]\n                duration:\n                  type: integer\n                  description: In seconds\n                year:\n                  type: integer\n      responses:\n        200:\n          description: The movie has been updated.\n        400:\n          description: Bad request\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: Movie was not found.\n    delete:\n      tags:\n        - Movie\n      summary: Delete movie\n      description: Delete movie from library\n      responses:\n        200:\n          description: Deleted succesfully\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: Movie was not found.\n  /movie/{id}/favs:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    post:\n      tags:\n        - Favourites\n        - Movie\n      summary: Add movie to the favourites\n      description: Add movie to the favourites\n      responses:\n        200:\n          description: Added succesfully\n        400:\n          description: Bad request\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: Movie was not found.\n    delete:\n      tags:\n        - Favourites\n        - Movie\n      summary: Delete movie from favourites\n      description: Delete movie from favourites\n      responses:\n        200:\n          description: Deleted succesfully\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: Movie was not found.\n  /book:\n    get:\n      tags:\n        - Book\n      summary: Get books list\n      description: Gets all library books list\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Book'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n    post:\n      tags:\n        - Book\n      summary: Add new book\n      description: Add new book information\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Book'\n      responses:\n        200:\n          description: All library books list\n        400:\n          description: Bad request\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n  /book/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    put:\n      tags:\n        - Book\n      summary: Update book information\n      description: Update library book information by UUID\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: example\n              properties:\n                name:\n                  type: string\n                author:\n                  type: string\n                genre:\n                  type: string\n                  enum:\n                    [\n                      Adventure,\n                      Classics,\n                      Comics,\n                      Detective,\n                      Mystery,\n                      Fantasy,\n                      Historical,\n                      Horror,\n                      Fiction,\n                    ]\n                year:\n                  type: integer\n      responses:\n        200:\n          description: The book has been updated.\n        400:\n          description: Bad request\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: Book was not found.\n    delete:\n      tags:\n        - Book\n      summary: Delete book\n      description: Delete book from library\n      responses:\n        200:\n          description: Deleted succesfully\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: Book was not found.\n  /book/{id}/favs:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    post:\n      tags:\n        - Favourites\n        - Book\n      summary: Add book to the favourites\n      description: Add book to the favourites\n      responses:\n        200:\n          description: Added succesfully\n        400:\n          description: Bad request\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: Book was not found.\n    delete:\n      tags:\n        - Favourites\n        - Book\n      summary: Delete book from favourites\n      description: Delete book from favourites\n      responses:\n        200:\n          description: Deleted succesfully\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: Book was not found.\n  /favs:\n    get:\n      tags:\n        - Favourites\n      summary: Get all favourites\n      description: Gets all favourites movies, tracks and books\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Favourites'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n",
			"canonicalURL": "/github.com/rolling-scopes-school/nodejs-course-template@19786752eb63cc277b0a7b89f15a3f87400f9ee9/-/blob/doc/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/rolling-scopes-school/nodejs-course-template/blob/19786752eb63cc277b0a7b89f15a3f87400f9ee9/doc/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}