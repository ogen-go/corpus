{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/MEF-GIT/MEF-LSO-Sonata-SDK"
		},
		"file": {
			"name": "productInventoryManagement.api.yaml",
			"size": 0,
			"path": "productApi/inventory/productInventoryManagement.api.yaml",
			"byteSize": 41593,
			"content": "openapi: 3.0.1\ninfo:\n  description: |\n    **This file forms part of MEF 116**\n\n    This API implements Business Requirements described in MEF 81\n\n    It allows the Buyer to retrieve the information about existing Product\n    instances from Seller's Product Inventory.\n\n    List of supported use cases:\n    - Retrieve Product List\n    - Retrieve Product by Identifier\n\n    Copyright 2021 MEF Forum and its contributors.\n\n    This file includes content based on the TM Forum Product Inventory\n    Management API (TMF637 v4.0.0) available at\n    https://github.com/tmforum-apis/TMF637_ProductInventory, which is licensed\n    by the TM Forum under the Apache License version 2.0. Such content has been\n    modified by the MEF Forum and its contributors.\n  title: Product Inventory Management\n  version: 7.0.2\nservers:\n  - url: 'https://{serverBase}/mefApi/sonata/productInventory/v7/'\n    variables:\n      serverBase:\n        default: mef.net\n        description: The base of Seller's URL.\ntags:\n  - name: product\n  - name: events subscription\npaths:\n  /product:\n    get:\n      description: This operation lists or finds Product entities\n      operationId: listProduct\n      parameters:\n        - description: The status of the product\n          in: query\n          name: status\n          schema:\n            enum:\n              - active\n              - active.pendingChange\n              - cancelled\n              - pendingActive\n              - pendingTerminate\n              - suspended\n              - suspendedPendingTerminate\n              - terminated\n            type: string\n        - description: A reference to a product spec by id\n          in: query\n          name: productSpecificationId\n          schema:\n            type: string\n        - description: A reference to a product offering by id\n          in: query\n          name: productOfferingId\n          schema:\n            type: string\n        - description: A reference to the externalId provided in the order\n          in: query\n          name: externalId\n          schema:\n            type: string\n        - description: A site identifier which is associated to the product\n          in: query\n          name: geographicalSiteId\n          schema:\n            type: string\n        - description: \u003e-\n            This criteria allows to retrieve all Product records with a Product\n            Relationship to a specified Product.\n\n            E.g. All Products related to Product with ID 5\n          in: query\n          name: relatedProductId\n          schema:\n            type: string\n        - description: The Billing Account associated with the Product.\n          in: query\n          name: billingAccountId\n          schema:\n            type: string\n        - description: Identifies Product Order associated with the Product\n          in: query\n          name: productOrderId\n          schema:\n            type: string\n        - description:\n            Less than the date that is the initial install date for the Product\n          in: query\n          name: startDate.lt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            Greater than the date that is the initial install date for the\n            Product\n          in: query\n          name: startDate.gt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            Less than date that the last change affecting this Product was\n            completed\n          in: query\n          name: lastUpdateDate.lt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            Greater than the date that the last change affecting this Product\n            was completed\n          in: query\n          name: lastUpdateDate.gt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n\n            Reference: MEF 81 (Sn 8.3)\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity  represents more than one Seller.\n\n            Reference: MEF 81 (Sn 8.3)\n          in: query\n          name: sellerId\n          schema:\n            type: string\n        - description: \u003e-\n            Requested index for start of item to be provided in response\n            requested by client. Note that the index starts with \"0\".\n          in: query\n          name: offset\n          schema:\n            format: int32\n            type: integer\n        - description: \u003e-\n            Requested number of items to be provided in response requested by\n            client\n          in: query\n          name: limit\n          schema:\n            format: int32\n            type: integer\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/MEFProduct_Find'\n                type: array\n          description:\n            'OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)'\n          headers:\n            X-Pagination-Throttled:\n              description: \u003e\n                Used to indicate that result page was throttled to maximum\n                possible size  and there are additional results that can be\n                fetched\n              schema:\n                type: boolean\n            X-Total-Count:\n              description: \u003e\n                The total number of matching items. E.g. if there are 50\n                matching items in total, but the request has offset=10 and\n                limit=10, then the X-Total-Count is 50.\n              schema:\n                type: integer\n            X-Result-Count:\n              description: The number of items included in the response\n              schema:\n                type: integer\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '422':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Error422'\n                type: array\n          description:\n            Unprocessable entity due to the business validation problems\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n      summary: List or find Product objects\n      tags:\n        - product\n  '/product/{id}':\n    get:\n      description: \u003e-\n        This operation retrieves a Product entity.\n      operationId: retrieveProduct\n      parameters:\n        - description: Identifier of the Product\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Comma-separated properties to provide in response\n          in: query\n          name: fields\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n\n            Reference: MEF 81 (Sn 8.3)\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity  represents more than one Seller.\n\n            Reference: MEF 81 (Sn 8.3)\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/MEFProduct'\n          description:\n            'OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)'\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '404':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error404'\n          description: Not Found\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n      summary: Retrieves a Product by ID\n      tags:\n        - product\ncomponents:\n  schemas:\n    Error400Code:\n      description: \u003e-\n        One of the following error codes:\n\n        - missingQueryParameter: The URI is missing a required query-string\n        parameter\n\n        - missingQueryValue: The URI is missing a required query-string\n        parameter value\n\n        - invalidQuery: The query section of the URI is invalid.\n\n        - invalidBody: The request has an invalid body\n      enum:\n        - missingQueryParameter\n        - missingQueryValue\n        - invalidQuery\n        - invalidBody\n      type: string\n    Duration:\n      description:\n        'A Duration in a given unit of time e.g. 3 hours, or 5 days.'\n      properties:\n        amount:\n          description: 'Duration (number of seconds, minutes, hours, etc.)'\n          type: integer\n        units:\n          description: Time unit type\n          $ref: '#/components/schemas/TimeUnit'\n      required:\n        - amount\n        - units\n      type: object\n    Error:\n      description: \u003e\n        Standard Class used to describe API response error Not intended to be\n        used directly. The `code` in the HTTP header is used as a discriminator\n        for the type of error returned in runtime.\n      properties:\n        reason:\n          description: \u003e-\n            Text that explains the reason for the error. This can be shown to a\n            client user.\n          maxLength: 255\n          type: string\n        message:\n          description: \u003e-\n            Text that provides mode details and corrective actions related to\n            the error. This can be shown to a client user.\n          type: string\n        referenceError:\n          description: URL pointing to documentation describing the error\n          format: uri\n          type: string\n      required:\n        - reason\n      type: object\n    Error400:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              description: \u003e-\n                One of the following error codes:\n\n                - missingQueryParameter: The URI is missing a required\n                query-string parameter\n\n                - missingQueryValue: The URI is missing a required query-string\n                parameter value\n\n                - invalidQuery: The query section of the URI is invalid.\n\n                - invalidBody: The request has an invalid body\n              $ref: '#/components/schemas/Error400Code'\n          required:\n            - code\n          type: object\n      description:\n        'Bad Request. (https://tools.ietf.org/html/rfc7231#section-6.5.1)'\n    Error401:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              description: \u003e-\n                One of the following error codes:\n\n                - missingCredentials: No credentials provided.\n\n                - invalidCredentials: Provided credentials are invalid or\n                expired\n              $ref: '#/components/schemas/Error401Code'\n          required:\n            - code\n          type: object\n      description:\n        'Unauthorized.  (https://tools.ietf.org/html/rfc7235#section-3.1)'\n    Error401Code:\n      description: |-\n        One of the following error codes:\n        - missingCredentials: No credentials provided.\n        - invalidCredentials: Provided credentials are invalid or expired\n      enum:\n        - missingCredentials\n        - invalidCredentials\n      type: string\n    Error403:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              description: |-\n                This code indicates that the server understood\n                the request but refuses to authorize it because\n                of one of the following error codes:\n                - accessDenied: Access denied\n                - forbiddenRequester: Forbidden requester\n                - tooManyUsers: Too many users\n              $ref: '#/components/schemas/Error403Code'\n          required:\n            - code\n          type: object\n      description: \u003e-\n        Forbidden. This code indicates that the server understood the request\n        but refuses to authorize it.\n        (https://tools.ietf.org/html/rfc7231#section-6.5.3)\n    Error403Code:\n      description: |-\n        This code indicates that the server understood\n        the request but refuses to authorize it because\n        of one of the following error codes:\n        - accessDenied: Access denied\n        - forbiddenRequester: Forbidden requester\n        - tooManyUsers: Too many users\n      enum:\n        - accessDenied\n        - forbiddenRequester\n        - tooManyUsers\n      type: string\n    Error404:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              description: \u003e-\n                The following error code:\n\n                - notFound: A current representation for the target resource\n                not found\n              enum:\n                - notFound\n              type: string\n          required:\n            - code\n          type: object\n      description: \u003e-\n        Resource for the requested path not found.\n        (https://tools.ietf.org/html/rfc7231#section-6.5.4)\n    Error422:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              description: |\n                One of the following error codes:\n                  - missingProperty: The property the Seller has expected is not present in the payload\n                  - invalidValue: The property has an incorrect value\n                  - invalidFormat: The property value does not comply with the expected value format\n                  - referenceNotFound: The object referenced by the property cannot be identified in the Seller system\n                  - unexpectedProperty: Additional property, not expected by the Seller has been provided\n                  - tooManyRecords: the number of records to be provided in the response exceeds the Seller's threshold.\n                  - otherIssue: Other problem was identified (detailed information provided in a reason)\n              $ref: '#/components/schemas/Error422Code'\n            propertyPath:\n              description: \u003e\n                A pointer to a particular property of the payload that caused\n                the validation issue. It is highly recommended that this\n                property should be used.\n\n                Defined using JavaScript Object Notation (JSON) Pointer\n                (https://tools.ietf.org/html/rfc6901).\n              type: string\n          required:\n            - code\n          type: object\n      description: \u003e-\n        Unprocessable entity due to a business validation problem.\n        (https://tools.ietf.org/html/rfc4918#section-11.2)\n    Error422Code:\n      description: |\n        One of the following error codes:\n          - missingProperty: The property the Seller has expected is not present in the payload\n          - invalidValue: The property has an incorrect value\n          - invalidFormat: The property value does not comply with the expected value format\n          - referenceNotFound: The object referenced by the property cannot be identified in the Seller system\n          - unexpectedProperty: Additional property, not expected by the Seller has been provided\n          - tooManyRecords: the number of records to be provided in the response exceeds the Seller's threshold.\n          - otherIssue: Other problem was identified (detailed information provided in a reason)\n      enum:\n        - missingProperty\n        - invalidValue\n        - invalidFormat\n        - referenceNotFound\n        - unexpectedProperty\n        - tooManyRecords\n        - otherIssue\n      type: string\n    Error500:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              description: \u003e-\n                The following error code:\n\n                - internalError: Internal server error - the server encountered\n                an unexpected condition that prevented it from fulfilling the\n                request.\n              enum:\n                - internalError\n              type: string\n          required:\n            - code\n          type: object\n      description: \u003e-\n        Internal Server Error.\n        (https://tools.ietf.org/html/rfc7231#section-6.6.1)\n    FieldedAddress:\n      description: \u003e-\n        A type of Address that has a discrete field and value for each type of\n        boundary or identifier down to the lowest level of detail. For example\n        \"street number\" is one field, \"street name\" is another field, etc.\n        Reference: MEF 79 (Sn 8.9.2)\n      properties:\n        country:\n          description: Country that the address is in\n          type: string\n        streetType:\n          description: \u003e-\n            The type of street (e.g., alley, avenue, boulevard, brae, crescent,\n            drive, highway, lane, terrace, parade, place, tarn, way, wharf)\n          type: string\n        postcodeExtension:\n          description: \u003e-\n            An extension of a postal code. E.g. the part following the dash in\n            a US urban property address\n          type: string\n        city:\n          description: The city that the address is in\n          type: string\n        streetNr:\n          description: \u003e-\n            Number identifying a specific property on a public street. It may\n            be combined with streetNrLast for ranged addresses. MEF 79 defines\n            it as required however as in certain countries it is not used we\n            make it optional in API.\n          type: string\n        locality:\n          description: The locality that the address is in\n          type: string\n        postcode:\n          description: \u003e-\n            Descriptor for a postal delivery area, used to speed and simplify\n            the delivery of mail (also known as zip code)\n          type: string\n        streetNrLast:\n          description:\n            Last number in a range of street numbers allocated to a property\n          type: string\n        streetNrSuffix:\n          description: The first street number suffix\n          type: string\n        streetName:\n          description: Name of the street or other street type\n          type: string\n        stateOrProvince:\n          description: The State or Province that the address is in\n          type: string\n        streetNrLastSuffix:\n          description: Last street number suffix for a ranged address\n          type: string\n        geographicSubAddress:\n          $ref: '#/components/schemas/GeographicSubAddress'\n        streetSuffix:\n          description: A modifier denoting a relative direction\n          type: string\n      required:\n        - city\n        - country\n        - streetName\n      type: object\n    GeographicSubAddress:\n      description:\n        'Additional fields used to specify an address, as detailed as possible.'\n      properties:\n        buildingName:\n          description: \u003e\n            Allows for identification of places that require building name  as\n            part of addressing information\n          type: string\n        subUnit:\n          description: \u003e-\n            Representation of a MEFSubUnit It is used for describing subunit\n            within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER,\n            UNIT, WHARF.\n          items:\n            $ref: '#/components/schemas/MEFSubUnit'\n          type: array\n        levelType:\n          description: Describes level types within a building\n          type: string\n        levelNumber:\n          description:\n            'Used where a level type may be repeated e.g. BASEMENT 1, BASEMENT\n            2'\n          type: string\n        privateStreetNumber:\n          description: Private streets numbers internal to a private street\n          type: string\n        privateStreetName:\n          description: \u003e-\n            \"Private streets internal to a property (e.g. a university) may\n            have internal names that are not recorded by the land title office\n          type: string\n      type: object\n    MEFBillingAccount:\n      description: \u003e-\n        References the billing arrangement that a buyer has with a seller that\n        provides products to the customer.\n      properties:\n        billingContact:\n          description: \u003e-\n            Contact allow to capture contact information. It is used to capture\n            billing account contact information.\n          $ref: '#/components/schemas/RelatedContactInformation'\n        agreementName:\n          description: \u003e-\n            The name of the Agreement which is referenced for the Product Order\n            Item.\n          type: string\n        id:\n          description: \u003e-\n            Identifies the buyer's billing account to which the recurring and\n            non-recurring charges for this order or order item will be billed.\n            Required if the Buyer has more than one Billing Account with the\n            Seller and for all new Product Orders.\n          type: string\n      required:\n        - id\n      type: object\n    MEFChargePeriod:\n      description: Used for a recurring charge to indicate period.\n      enum:\n        - hour\n        - day\n        - week\n        - month\n        - year\n      type: string\n    MEFEndOfTermAction:\n      description: The action the Seller will take once the term expires.\n      enum:\n        - roll\n        - autoDisconnect\n        - autoRenew\n      type: string\n    MEFItemTerm:\n      description: The term of the Item\n      properties:\n        duration:\n          description: Duration of the term\n          $ref: '#/components/schemas/Duration'\n        endOfTermAction:\n          description: \u003e-\n            The action that needs to be taken by the Seller once the term\n            expires\n          $ref: '#/components/schemas/MEFEndOfTermAction'\n        name:\n          description: Name of the term\n          type: string\n        description:\n          description: Description of the term\n          type: string\n        rollInterval:\n          description: \u003e-\n            The recurring period that the Buyer is willing to pay to the end of\n            upon disconnecting the Product after the original term has expired.\n          $ref: '#/components/schemas/Duration'\n      type: object\n    MEFPriceType:\n      description:\n        Indicates if the price is for recurring or non-recurring charges.\n      enum:\n        - recurring\n        - nonRecurring\n        - usageBased\n      type: string\n    MEFProduct:\n      description:\n        A product is realized as one or more service(s) and / or resource(s).\n      properties:\n        productSpecification:\n          description: A reference to a Product Specification of the Product\n          $ref: '#/components/schemas/ProductSpecificationRef'\n        relatedSite:\n          description: Reference to a Site where the PRoduct is provided.\n          items:\n            $ref: '#/components/schemas/RelatedGeographicSite'\n          type: array\n        productOffering:\n          description: \u003e-\n            A particular Product Offering defines the technical and commercial\n            attributes and behaviors of a Product.\n          $ref: '#/components/schemas/ProductOfferingRef'\n        lastUpdateDate:\n          description: Latest date when the product has been updated.\n          format: date-time\n          type: string\n        relatedContactInformation:\n          description: Party playing a role for this Product\n          items:\n            $ref: '#/components/schemas/RelatedContactInformation'\n          type: array\n        '@type':\n          description:\n            'When sub-classing, this defines the sub-class entity name'\n          type: string\n        externalId:\n          description: Buyer identifier of the product\n          type: string\n        statusChange:\n          description: status change for the Product\n          items:\n            $ref: '#/components/schemas/MEFProductStatusChange'\n          type: array\n        billingAccount:\n          description: The Billing Account associated with the Product\n          $ref: '#/components/schemas/MEFBillingAccount'\n        productOrderItem:\n          description: \u003e-\n            The Product Order Item of the associated Product order that\n            resulted in the creation of this Product.\n          items:\n            $ref: '#/components/schemas/MEFProductOrderItemRef'\n          type: array\n        productTerm:\n          description: Term of the Product\n          items:\n            $ref: '#/components/schemas/MEFItemTerm'\n          type: array\n        terminationDate:\n          description: \u003e-\n            Is the date when the product was terminated. MEF: Termination date\n            (commercial) is when the product has been terminated (when the\n            disconnect in the product order has been processed).\n          format: date-time\n          type: string\n        productConfiguration:\n          description: \u003e-\n            MEFProductConfiguration is used to specify the MEF specific product\n            payload.\n          $ref: '#/components/schemas/MEFProductConfiguration'\n        productRelationship:\n          description: \u003e-\n            A list of references to existing products that are related to the\n            Product.\n          items:\n            $ref: '#/components/schemas/ProductRelationship'\n          type: array\n        id:\n          description: Unique identifier of the product\n          type: string\n        href:\n          description: Reference of the product\n          type: string\n        startDate:\n          description: \u003e-\n            Is the date from which the product starts. MEF: Start date is when\n            the product is active for the first time (when the install in the\n            product order has been processed).\n          format: date-time\n          type: string\n        productPrice:\n          description: A list of Prices associated with the Product\n          items:\n            $ref: '#/components/schemas/ProductPrice'\n          type: array\n        status:\n          description: The lifecycle status of the product.\n          $ref: '#/components/schemas/MEFProductStatusType'\n      required:\n        - id\n        - startDate\n        - status\n      type: object\n    MEFProductConfiguration:\n      description: \u003e-\n        MEFProductConfiguration is used as an extension point for MEF specific\n        product/service payload.  The `@type` attribute is used as a\n        discriminator\n      discriminator:\n        propertyName: '@type'\n      properties:\n        '@type':\n          description: \u003e-\n            The name of the type, defined in the JSON schema specified  above,\n            for the product that is the subject of the POQ Request. The named\n            type must be a subclass of MEFProductConfiguration.\n          type: string\n      required:\n        - '@type'\n      type: object\n    MEFProductOrderItemRef:\n      description: A reference to a ProductOrder item\n      properties:\n        productOrderHref:\n          description: Reference of the related ProductOrder.\n          type: string\n        productOrderItemId:\n          description: Id of an Item within the Product Order\n          type: string\n        productOrderId:\n          description: Unique identifier of a ProductOrder.\n          type: string\n      required:\n        - productOrderId\n        - productOrderItemId\n      type: object\n    MEFProductStatusChange:\n      description: \u003e-\n        Holds the reached status, reasons and associated date the Product Order\n        status changed, populated by the Seller.\n      properties:\n        changeReason:\n          description: The reason why the status changed.\n          type: string\n        changeDate:\n          description: The date and time the status changed.\n          format: date-time\n          type: string\n        status:\n          description: Status of the product\n          $ref: '#/components/schemas/MEFProductStatusType'\n      required:\n        - changeDate\n        - status\n      type: object\n    MEFProductStatusType:\n      description: |-\n        Possible values for the status of a MEF product\n\n        | name                        | MEF 81 name                 |\n        | --------------------------- | --------------------------- |\n        | `active`                    | ACTIVE                      |\n        | `active.pendingChange`      | ACTIVE_PENDING_CHANGE       |\n        | `pendingTerminate`          | ACTIVE_PENDING_TERMINATE    |\n        | `cancelled`                 | CANCELLED                   |\n        | `pendingActive`             | PENDING                     |\n        | `suspended`                 | SUSPENDED                   |\n        | `suspendedPendingTerminate` | SUSPENDED_PENDING_TERMINATE |\n        | `terminated`                | TERMINATED                  |\n      enum:\n        - active\n        - active.pendingChange\n        - cancelled\n        - pendingActive\n        - pendingTerminate\n        - suspended\n        - suspendedPendingTerminate\n        - terminated\n      type: string\n    MEFProduct_Find:\n      description: \u003e-\n        Class used to provide product overview retrieved in GET (by list)\n        operation\n      properties:\n        productSpecification:\n          description: A reference to a Product Specification of the Product\n          $ref: '#/components/schemas/ProductSpecificationRef'\n        relatedSite:\n          description: Reference to a Site where the PRoduct is provided.\n          items:\n            $ref: '#/components/schemas/RelatedGeographicSite'\n          type: array\n        productOffering:\n          description: \u003e-\n            A particular Product Offering defines the technical and commercial\n            attributes and behaviors of a Product.\n          $ref: '#/components/schemas/ProductOfferingRef'\n        lastUpdateDate:\n          description: Latest date when the product has been updated.\n          format: date-time\n          type: string\n        externalId:\n          description: \u003e-\n            This identifier is optionally provided during the product ordering\n            and stored for informative purpose in the seller inventory\n          type: string\n        productRelationship:\n          description: \u003e-\n            A list of references to existing products that are related to the\n            Product.\n          items:\n            $ref: '#/components/schemas/ProductRelationship'\n          type: array\n        id:\n          description: Unique identifier of the product\n          type: string\n        href:\n          description: Reference of the product\n          type: string\n        billingAccount:\n          description: The Billing Account associated with the Product\n          $ref: '#/components/schemas/MEFBillingAccount'\n        productOrderItem:\n          description: \u003e-\n            The Product Order Item of the associated Product order that\n            resulted in the creation of this Product.\n          items:\n            $ref: '#/components/schemas/MEFProductOrderItemRef'\n          type: array\n        startDate:\n          description: The date from which the product starts\n          format: date-time\n          type: string\n        status:\n          description: The lifecycle status of the product.\n          $ref: '#/components/schemas/MEFProductStatusType'\n      required:\n        - id\n        - status\n      type: object\n    MEFSubUnit:\n      description: Allows for sub unit identification\n      properties:\n        subUnitNumber:\n          description: \u003e-\n            The discriminator used for the subunit, often just a simple number\n            but may also be a range.\n          type: string\n        subUnitType:\n          description: \u003e-\n            The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER,\n            UNIT, WHARF.\n          type: string\n      required:\n        - subUnitNumber\n        - subUnitType\n      type: object\n    Money:\n      description: A base / value business entity used to represent money\n      properties:\n        unit:\n          description:\n            Currency (ISO4217 norm uses 3 letters to define the currency)\n          type: string\n        value:\n          description: A positive floating point number\n          format: float\n          type: number\n      required:\n        - unit\n        - value\n      type: object\n    Price:\n      description: \u003e-\n        Provides all amounts (tax included, duty free, tax rate), used currency\n        and percentage to apply for Price Alteration.\n      properties:\n        taxRate:\n          description:\n            'Price Tax Rate. Unit: [%]. E.g. value 16 stand for 16% tax.'\n          format: float\n          type: number\n        taxIncludedAmount:\n          description:\n            All taxes included amount (expressed in the given currency)\n          $ref: '#/components/schemas/Money'\n        dutyFreeAmount:\n          description:\n            All taxes excluded amount (expressed in the given currency)\n          $ref: '#/components/schemas/Money'\n      required:\n        - dutyFreeAmount\n      type: object\n    ProductOfferingRef:\n      description: \u003e-\n        A reference to a Product Offering offered by the Seller to the Buyer. A\n        Product Offering contains the commercial and technical details of a\n        Product sold by a particular Seller. A Product Offering defines all of\n        the commercial terms and, through association with a particular Product\n        Specification, defines all the technical attributes and behaviors of\n        the Product. A Product Offering may constrain the allowable set of\n        configurable technical attributes and/or behaviors specified in the\n        associated Product Specification.\n      properties:\n        href:\n          description: \u003e\n            Hyperlink to a Product Offering in Sellers catalog. In case Seller\n            is not providing a catalog API this field is not used. The catalog\n            is provided by the Seller to the Buyer during onboarding.\n          type: string\n        id:\n          description: \u003e-\n            id of a Product Offering. It is assigned by the Seller. The Buyer\n            and the Seller exchange information about offerings' ids during the\n            onboarding process.\n          type: string\n      required:\n        - id\n      type: object\n    ProductPrice:\n      description: \u003e-\n        An amount, usually of money, that represents the actual price paid by a\n        Customer for a purchase, a rent or a lease of a Product. The price is\n        valid for a defined period of time.\n      properties:\n        unitOfMeasure:\n          description:\n            'Unit of Measure if price depending on it (Gb, SMS volume, etc..)'\n          type: string\n        price:\n          description: Value of the Price\n          $ref: '#/components/schemas/Price'\n        name:\n          description: A short descriptive name such as \"Subscription price\".\n          type: string\n        priceType:\n          description: \u003e-\n            A category that describes the price, such as recurring,\n            nonRecurring, usageBased\n          $ref: '#/components/schemas/MEFPriceType'\n        description:\n          description: \u003e-\n            A narrative that explains in detail the semantics of this product\n            price.\n          type: string\n        recurringChargePeriod:\n          description: Charge period for recurring charge.\n          $ref: '#/components/schemas/MEFChargePeriod'\n      required:\n        - price\n        - priceType\n      type: object\n    ProductRelationship:\n      description: \u003e-\n        A relationship to existing Product. The requirements for usage for\n        given Product are described in the Product Specification.\n      properties:\n        relationshipType:\n          description: \u003e-\n            Specifies the type (nature) of the relationship to the related\n            Product. The nature of required relationships vary for Products of\n            different types. For example, a UNI or ENNI Product may not have\n            any relationships, but an Access E-Line may have two mandatory\n            relationships (related to the UNI on one end and the ENNI on the\n            other). More complex Products such as multipoint IP or Firewall\n            Products may have more complex relationships. As a result, the\n            allowed and mandatory `relationshipType` values are defined in the\n            Product Specification.\n          type: string\n        id:\n          description: unique identifier\n          type: string\n        href:\n          description: Hyperlink of the referenced product\n          type: string\n      required:\n        - id\n        - relationshipType\n      type: object\n    ProductSpecificationRef:\n      description: \u003e-\n        A reference to a structured set of well-defined technical attributes\n        and/or behaviors that are used to construct a Product Offering for sale\n        to a market.\n      properties:\n        href:\n          description: \u003e\n            Hyperlink to a Product Specification in Sellers catalog. In case\n            Seller is not providing a catalog API this field is not used. The\n            catalog is provided by the Seller to the Buyer during onboarding.\n          type: string\n        id:\n          description: Unique identifier of the product specification\n          type: string\n      required:\n        - id\n      type: object\n    RelatedContactInformation:\n      description: |\n        Contact information of an individual or organization playing a role for\n        this Entity. The rule for mapping a represented attribute value to a\n        `role` is to use the _lowerCamelCase_ pattern e.g. \n        - Buyer Order Item Contact: `role=buyerOrderItemContact` \n        - Buyer Implementation Contact: `role=buyerImplementationContact` \n        - Buyer Technical Contact: `role=buyerTechnicalContact`\n      properties:\n        number:\n          description: Phone number\n          type: string\n        emailAddress:\n          description: Email address\n          type: string\n        role:\n          description: A role the party plays in a given context.\n          type: string\n        postalAddress:\n          description: \u003e-\n            Identifies the postal address of the person or office to be\n            contacted.\n          $ref: '#/components/schemas/FieldedAddress'\n        organization:\n          description: The organization or company that the contact belongs to\n          type: string\n        name:\n          description: Name of the contact\n          type: string\n        numberExtension:\n          description: Phone number extension\n          type: string\n      required:\n        - emailAddress\n        - name\n        - number\n        - role\n      type: object\n    RelatedGeographicSite:\n      description: \u003e-\n        A  Geographic Site  and an associated role as installation address,\n        delivery address, etc....\n      properties:\n        role:\n          description: \u003e-\n            Role of the geographic site, such as: [home delivery], [shop\n            retrieval]) MEF: The role that the Site plays, e.g. Billing\n            Address, UNI Site, or ENNI Site.\n          type: string\n        id:\n          description: Unique identifier of the geographic site\n          type: string\n        href:\n          description: Unique reference of the geographic site\n          type: string\n      required:\n        - id\n        - role\n      type: object\n    TimeUnit:\n      description: |\n        Represents a unit of time.\n        Reference: MEF 79 (Sn 8.4.3.1/8.4.3.2)\n      enum:\n        - calendarMonths\n        - calendarDays\n        - calendarHours\n        - calendarMinutes\n        - businessDays\n        - businessHours\n        - businessMinutes\n      type: string\n",
			"canonicalURL": "/github.com/MEF-GIT/MEF-LSO-Sonata-SDK@c99d5bce21fc77e2ecfba6f8d6b2111361380b86/-/blob/productApi/inventory/productInventoryManagement.api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/MEF-GIT/MEF-LSO-Sonata-SDK/blob/c99d5bce21fc77e2ecfba6f8d6b2111361380b86/productApi/inventory/productInventoryManagement.api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}