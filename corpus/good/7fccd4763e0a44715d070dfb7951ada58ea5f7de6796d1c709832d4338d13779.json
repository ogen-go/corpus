{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/RTXteam/RTX"
		},
		"file": {
			"name": "TranslatorReasonerAPI_1.0.0_extended.yaml",
			"size": 0,
			"path": "code/UI/OpenAPI/python-flask-server/TranslatorReasonerAPI_1.0.0_extended.yaml",
			"byteSize": 30339,
			"content": "openapi: 3.0.1\ninfo:\n  description: OpenAPI for NCATS Biomedical Translator Reasoners\n  version: 1.0.0-beta\n  title: OpenAPI for NCATS Biomedical Translator Reasoners\n  contact:\n    email: edeutsch@systemsbiology.org\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  termsOfService: INSERT-URL-HERE\nexternalDocs:\n  description: \u003e-\n    Documentation for the NCATS Biomedical Translator Reasoners web services\n  url: https://github.com/NCATS-Tangerine/NCATS-ReasonerStdAPI\ntags:\n  - name: predicates\n    description: Get supported relationships by source and target\n    externalDocs:\n      description: Documentation for the reasoner predicates function\n      url: http://reasonerhost.ncats.io/overview.html#predicates\n  - name: query\n    description: Query reasoner using a predefined question type\n    externalDocs:\n      description: Documentation for the reasoner query function\n      url: http://reasonerhost.ncats.io/overview.html#query\n  - name: translator\n  - name: reasoner\n  - name: message\n    description: Request stored messages and feedback for messages\n    externalDocs:\n      description: Documentation for the reasoner message function\n      url: https://reasonerhost.ncats.io/overview.html#message\n  - name: result\n    description: Request stored results and feedback for results\n    externalDocs:\n      description: Documentation for the reasoner result function\n      url: http://reasonerhost.ncats.io/overview.html#result\npaths:\n  /predicates:\n    get:\n      tags:\n        - predicates\n      summary: Get supported relationships by source and target\n      responses:\n        '200':\n          description: Predicates by source and target\n          content:\n            application/json:\n              schema:\n                description: Source map\n                type: object\n                additionalProperties:\n                  description: Target map\n                  type: object\n                  additionalProperties:\n                    description: Array of predicates\n                    type: array\n                    items:\n                      type: string\n                example:\n                  'biolink:ChemicalSubstance':\n                    'biolink:Gene':\n                      - biolink:directly_interacts_with\n                      - biolink:decreases_activity_of\n  /query:\n    post:\n      tags:\n        - query\n      summary: Query reasoner via one of several inputs\n      description: ''\n      operationId: query\n      parameters:\n        - name: bypass_cache\n          in: query\n          description: \u003e\n            Set to true in order to bypass any possible cached result\n            message and try to answer the query over again\n          schema:\n            type: boolean\n            default: false\n      requestBody:\n        description: Query information to be submitted\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Query'\n      responses:\n        '200':\n          description: \u003e-\n            OK. There may or may not be results. Note that some of the provided\n            identifiers may not have been recognized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Response'\n        '400':\n          description: \u003e-\n            Bad request. The request is invalid according to this OpenAPI\n            schema OR a specific identifier is believed to be invalid somehow\n            (not just unrecognized).\n          content:\n            application/json:\n              schema:\n                type: string\n        '500':\n          description: \u003e-\n            Internal server error.\n          content:\n            application/json:\n              schema:\n                type: string\n        '501':\n          description: \u003e-\n            Not implemented.\n          content:\n            application/json:\n              schema:\n                type: string\n      x-swagger-router-controller: swagger_server.controllers.query_controller\n  '/message/{message_id}':\n    get:\n      tags:\n        - message\n      summary: Request stored messages and results from reasoner\n      description: ''\n      operationId: get_message\n      parameters:\n        - in: path\n          name: message_id\n          description: Integer identifier of the message to return\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Response'\n        '404':\n          description: Message_id not found\n      x-swagger-router-controller: \\\n        swagger_server.controllers.message_controller\ncomponents:\n  schemas:\n    Query:\n      description: \u003e-\n        The Query class is used to package a user request for information. A\n        Query object consists of a required Message object with optional\n        additional properties. Additional properties are intended to convey\n        implementation-specific or query-independent parameters. For example,\n        an additional property specifying a log level could allow a user to\n        override the default log level in order to receive more fine-grained\n        log information when debugging an issue.\n      x-body-name: request_body\n      type: object\n      properties:\n        message:\n          $ref: '#/components/schemas/Message'\n          description: \u003e-\n            The query Message is a serialization of the user request. Content\n            of the Message object depends on the intended TRAPI operation. For\n            example, the fill operation requires a non-empty query_graph field\n            as part of the Message, whereas other operations, e.g. overlay,\n            require non-empty results and knowledge_graph fields.\n      additionalProperties: true\n      required:\n        - message\n    Response:\n      type: object\n      description: \u003e-\n        The Response object contains the main payload when a TRAPI query\n        endpoint interprets and responds to the submitted query successfully\n        (i.e., HTTP Status Code 200). The message property contains the\n        knowledge of the response (query graph, knowledge graph, and results).\n        The status, description, and logs properties provide additional details\n        about the response.\n      properties:\n        message:\n          description: \u003e-\n            Contains the knowledge of the response (query graph, knowledge\n            graph, and results).\n          $ref: '#/components/schemas/Message'\n        status:\n          description: \u003e-\n            One of a standardized set of short codes,\n            e.g. Success, QueryNotTraversable, KPsNotAvailable\n          type: string\n          example: Success\n          nullable: true\n        description:\n          description: A brief human-readable description of the outcome\n          type: string\n          example: Success. 42 results found.\n          nullable: true\n        logs:\n          description: \u003e-\n            Log entries containing errors, warnings, debugging information, etc\n          type: array\n          items:\n            $ref: '#/components/schemas/LogEntry'\n          nullable: true\n        message_id:\n          type: string\n          example: https://arax.ncats.io/api/rtx/v1/message/123\n          description: URI for this message\n        reasoner_id:\n          type: string\n          example: reasoner\n          description: \u003e-\n            Identifier string of the reasoner that provided this message\n            (one of ARAX, Robokop, etc.)\n        tool_version:\n          type: string\n          example: ARAX 0.6.1\n          description: Version label of the tool that generated this message\n        schema_version:\n          type: string\n          example: 0.9.0\n          description: Version label of this JSON-LD schema\n        datetime:\n          type: string\n          example: '2018-01-09 12:34:45'\n          description: \u003e-\n            Datetime string for the time that this message was generated\n        table_column_names:\n          type: array\n          example:\n            - chemical_substance.name\n            - chemical_substance.id\n          description: \u003e-\n            List of column names that corresponds to the row_data for\n            each result\n          items:\n            type: string\n        original_question:\n          type: string\n          example: what proteins are affected by sickle cell anemia\n          description: The original question text typed in by the user\n        restated_question:\n          type: string\n          example: Which proteins are affected by sickle cell anemia?\n          description: \u003e-\n            A precise restatement of the question, as understood by the\n            Translator, for which the answer applies. The user should verify\n            that the restated question matches the intent of their original\n            question (it might not).\n        query_type_id:\n          type: string\n          example: Q2\n          description: \u003e-\n            The query type id if one is known for the query/message\n            (as defined in a shared manner)\n        terms:\n          type: object\n          description: Dict of terms needed by the specific query type\n          properties:\n            disease:\n              type: string\n              example: malaria\n            protein:\n              type: string\n              example: P12345\n            anatomical_entity:\n              type: string\n              example: liver\n            chemical_substance:\n              type: string\n              example: ibuprofen\n            metabolite:\n              type: string\n              example: ibuprofen\n          additionalProperties: true\n        query_options:\n          type: object\n          example:\n            coalesce: true\n            threshold: 0.9\n          description: \u003e-\n            Dict of options that can be sent with the query. Options are tool\n            specific and not stipulated here\n      additionalProperties: true\n      required:\n        - message\n    Message:\n      description: \u003e-\n        The message object holds the main content of a Query or a Response in\n        three properties: query_graph, results, and knowledge_graph.\n        The query_graph property contains the query configuration, the results\n        property contains any answers that are returned by the service,\n        and knowledge_graph property contains lists of edges and nodes in the\n        thought graph corresponding to this message. The content of these\n        properties is context-dependent to the encompassing object and\n        the TRAPI operation requested.\n\n      type: object\n      properties:\n        results:\n          description: \u003e-\n            List of all returned Result objects for the query posed\n          type: array\n          items:\n            $ref: '#/components/schemas/Result'\n          nullable: true\n        query_graph:\n          type: object\n          description: \u003e-\n            QueryGraph object that contains a serialization of a query in the\n            form of a graph\n          $ref: '#/components/schemas/QueryGraph'\n          nullable: true\n        knowledge_graph:\n          type: object\n          description: \u003e-\n            KnowledgeGraph object that contains lists of nodes and edges\n            in the thought graph corresponding to the message\n          $ref: '#/components/schemas/KnowledgeGraph'\n          nullable: true\n      additionalProperties: false\n    LogEntry:\n      description: \u003e-\n        The LogEntry object contains information useful for tracing\n        and debugging across Translator components.  Although an\n        individual component (for example, an ARA or KP) may have its\n        own logging and debugging infrastructure, this internal\n        information is not, in general, available to other components.\n        In addition to a timestamp and logging level, LogEntry\n        includes a string intended to be read by a human, along with\n        one of a standardized set of codes describing the condition of\n        the component sending the message.\n      type: object\n      properties:\n        timestamp:\n          type: string\n          format: date-time\n          description: Timestamp in ISO 8601 format\n          example: '2020-09-03T18:13:49+00:00'\n          nullable: true\n        level:\n          type: string\n          description: Logging level\n          enum:\n            - ERROR\n            - WARNING\n            - INFO\n            - DEBUG\n          nullable: true\n        code:\n          type: string\n          description: \u003e-\n            One of a standardized set of short codes\n            e.g. QueryNotTraversable, KPNotAvailable, KPResponseMalformed\n          nullable: true\n        message:\n          type: string\n          description: A human-readable log message\n          nullable: true\n      additionalProperties: true\n    Result:\n      type: object\n      description: \u003e-\n        A Result object specifies the nodes and edges in the knowledge graph\n        that satisfy the structure or conditions of a user-submitted query\n        graph. It must contain a NodeBindings object (list of query graph node\n        to knowledge graph node mappings) and an EdgeBindings object (list of\n        query graph edge to knowledge graph edge mappings).\n      properties:\n        node_bindings:\n          type: object\n          description: \u003e-\n            The dictionary of Input Query Graph to Result Knowledge Graph node\n            bindings where the dictionary keys are the key identifiers of the\n            Query Graph nodes and the associated values of those keys are\n            instances of NodeBinding schema type (see below). This value is an\n            array of NodeBindings since a given query node may have multiple\n            knowledge graph Node bindings in the result.\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/NodeBinding'\n        edge_bindings:\n          type: object\n          description: \u003e-\n            The dictionary of Input Query Graph to Result Knowledge Graph edge\n            bindings where the dictionary keys are the key identifiers of the\n            Query Graph edges and the associated values of those keys are\n            instances of EdgeBinding schema type (see below). This value is an\n            array of EdgeBindings since a given query edge may resolve to\n            multiple knowledge graph edges in the result.\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/EdgeBinding'\n        id:\n          type: string\n          example: https://arax.ncats.io/api/rtx/v1/result/234\n          description: URI for this message\n        description:\n          type: string\n          example: \u003e-\n            The genetic condition sickle cell anemia may provide protection\n            from cerebral malaria via genetic alterations of proteins HBB\n            (P68871) and HMOX1 (P09601).\n          description: \u003e-\n            A free text description of this result answer from the reasoner\n        essence:\n          type: string\n          example: ibuprofen\n          description: \u003e-\n            A single string that is the terse essence of the result (useful for\n            simple answers)\n        essence_type:\n          type: string\n          example: drug\n          description: A Translator bioentity type of the essence\n        row_data:\n          type: array\n          example:\n            - ibuprofen\n            - CHEMBL:CHEMBL521\n          description: \u003e-\n            An arbitrary list of values that captures the essence of the result\n            that can be turned into a tabular result across all answers (each\n            result is a row) for a user that wants tabular output\n          items:\n            type: string\n        score:\n          type: number\n          format: float\n          example: 163.233\n          description: Any type of score associated with this result\n        score_name:\n          type: string\n          example: Jaccard distance\n          description: Name for the score\n        score_direction:\n          type: string\n          example: lower_is_better\n          description: \u003e-\n            Sorting indicator for the score: one of higher_is_better or\n            lower_is_better\n        confidence:\n          type: number\n          format: float\n          example: 0.9234\n          description: \u003e-\n            Confidence metric for this result, a value between (inclusive)\n             0.0 (no confidence) and 1.0 (highest confidence)\n        result_type:\n          type: string\n          example: individual query answer\n          description: \u003e-\n            One of several possible result types: 'individual query answer',\n            'neighborhood graph', 'type summary graph'\n        result_group:\n          type: integer\n          example: 1\n          description: \u003e-\n            An integer group number for results for use in cases where several\n            results should be grouped together. Also useful to control sorting\n            ascending.\n        result_group_similarity_score:\n          type: number\n          format: float\n          example: 0.95\n          description: \u003e-\n            A score that denotes the similarity of this result to other members\n            of the result_group\n        reasoner_id:\n          type: string\n          example: RTX\n          description: \u003e-\n            Identifier string of the reasoner that provided this result (e.g.,\n            RTX, Robokop, Indigo, Integrator)\n      additionalProperties: true\n      required:\n        - node_bindings\n        - edge_bindings\n    NodeBinding:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/CURIE'\n          description: \u003e-\n            An instance of NodeBinding is a single KnowledgeGraph Node mapping,\n            identified by the corresponding 'id' object key identifier of the\n            Node within the Knowledge Graph. Instances of NodeBinding may\n            include extra annotation (such annotation is not yet fully\n            standardized).\n      additionalProperties: true\n      required:\n        - id\n    EdgeBinding:\n      type: object\n      description: \u003e-\n        A instance of EdgeBinding is a single KnowledgeGraph Edge mapping,\n        identified by the corresponding 'id' object key identifier of the\n        Edge within the Knowledge Graph. Instances of EdgeBinding may include\n        extra annotation (such annotation is not yet fully standardized).\n      properties:\n        id:\n          type: string\n          description: The key identifier of a specific KnowledgeGraph Edge.\n      additionalProperties: true\n      required:\n        - id\n    KnowledgeGraph:\n      type: object\n      description: \u003e-\n        The knowledge graph associated with a set of results. The instances\n        of Node and Edge defining this graph represent instances of\n        biolink:NamedThing (concept nodes) and biolink:Association\n        (relationship edges) representing (Attribute) annotated knowledge\n        returned from the knowledge sources and inference agents wrapped by\n        the given TRAPI implementation.\n      properties:\n        nodes:\n          type: object\n          description: \u003e-\n            Dictionary of Node instances used in the KnowledgeGraph,\n            referenced elsewhere in the TRAPI output by the dictionary key.\n          additionalProperties:\n            $ref: '#/components/schemas/Node'\n        edges:\n          type: object\n          description: \u003e-\n            Dictionary of Edge instances used in the KnowledgeGraph,\n            referenced elsewhere in the TRAPI output by the dictionary key.\n          additionalProperties:\n            $ref: '#/components/schemas/Edge'\n      additionalProperties: true\n      required:\n        - nodes\n        - edges\n    QueryGraph:\n      type: object\n      description: \u003e-\n        A graph representing a biomedical question. It serves as a template for\n        each result (answer), where each bound knowledge graph node/edge is\n        expected to obey the constraints of the associated query graph element.\n      properties:\n        nodes:\n          type: object\n          description: \u003e-\n            The node specifications. The keys of this map are unique node\n            identifiers and the corresponding values include the constraints\n            on bound nodes.\n          additionalProperties:\n            $ref: '#/components/schemas/QNode'\n        edges:\n          type: object\n          description: \u003e-\n            The edge specifications. The keys of this map are unique edge\n            identifiers and the corresponding values include the constraints\n            on bound edges, in addition to specifying the subject and object\n            QNodes.\n          additionalProperties:\n            $ref: '#/components/schemas/QEdge'\n      additionalProperties: true\n      required:\n        - nodes\n        - edges\n    QNode:\n      type: object\n      description: A node in the QueryGraph used to represent an entity in a\n        query. If a CURIE is not specified, any nodes matching the category\n        of the QNode will be returned in the Results.\n      properties:\n        id:\n          oneOf:\n            - $ref: '#/components/schemas/CURIE'\n            - type: array\n              items:\n                $ref: '#/components/schemas/CURIE'\n          example: OMIM:603903\n          description: CURIE identifier for this node\n          nullable: true\n        category:\n          oneOf:\n            - $ref: '#/components/schemas/BiolinkEntity'\n            - type: array\n              items:\n                $ref: '#/components/schemas/BiolinkEntity'\n          nullable: true\n        is_set:\n          type: boolean\n          description: \u003e-\n            Boolean that if set to true, indicates that this QNode MAY have\n            multiple KnowledgeGraph Nodes bound to it within each Result.\n            The nodes in a set should be considered as a set of independent\n            nodes, rather than a set of dependent nodes, i.e., the answer\n            would still be valid if the nodes in the set were instead returned\n            individually. Multiple QNodes may have is_set=True. If a QNode\n            (n1) with is_set=True is connected to a QNode (n2) with\n            is_set=False, each n1 must be connected to n2. If a QNode (n1)\n            with is_set=True is connected to a QNode (n2) with is_set=True,\n            each n1 must be connected to at least one n2.\n          default: false\n      additionalProperties: true\n    QEdge:\n      type: object\n      description: \u003e-\n        An edge in the QueryGraph used as an filter pattern specification in a\n        query. If optional predicate or relation properties are not specified,\n        they are assumed to be wildcard matches to the target knowledge space.\n        If specified, the ontological inheritance hierarchy associated with\n        the terms provided is assumed, such that edge bindings returned may be\n        an exact match to the given QEdge predicate or relation term ('class'),\n        or to a term which is a subclass of the QEdge specified term.\n      properties:\n        predicate:\n          oneOf:\n            - $ref: '#/components/schemas/BiolinkPredicate'\n            - type: array\n              items:\n                $ref: '#/components/schemas/BiolinkPredicate'\n          nullable: true\n        relation:\n          type: string\n          example: RO:0002447\n          description: \u003e-\n            Query constraint against the relationship type term of this edge,\n            as originally specified by, or curated by inference from, the\n            original external source of knowledge. Note that this should\n            often be specified as predicate ontology term CURIE, although\n            this may not be strictly enforced.\n          nullable: true\n        subject:\n          type: string\n          example: https://omim.org/entry/603903\n          description: \u003e-\n            Corresponds to the map key identifier of the\n            subject concept node anchoring the query filter\n            pattern for the query relationship edge.\n        object:\n          type: string\n          example: https://www.uniprot.org/uniprot/P00738\n          description: \u003e-\n            Corresponds to the map key identifier of the\n            object concept node anchoring the query filter\n            pattern for the query relationship edge.\n      additionalProperties: true\n      required:\n        - subject\n        - object\n    Node:\n      type: object\n      description: \u003e-\n        A node in the KnowledgeGraph which represents some biomedical\n        concept. Nodes are identified by the keys in the KnowledgeGraph\n        Node mapping.\n      properties:\n        name:\n          type: string\n          example: Haptoglobin\n          description: Formal name of the entity\n          nullable: true\n        category:\n          oneOf:\n            - $ref: '#/components/schemas/BiolinkEntity'\n            - type: array\n              items:\n                $ref: '#/components/schemas/BiolinkEntity'\n          nullable: true\n        attributes:\n          type: array\n          description: A list of attributes describing the node\n          items:\n            $ref: '#/components/schemas/Attribute'\n          nullable: true\n      additionalProperties: false\n    Attribute:\n      type: object\n      description: \u003e-\n        Generic attribute for a node or an edge that expands key-value pair\n        concept by including a type of this attribute from a suitable ontology,\n        a source of this attribute, and (optionally) a url with additional\n        information about this attribute.\n      properties:\n        name:\n          type: string\n          description: \u003e-\n            Human-readable name or label for the attribute. If appropriate,\n            should be the name of the semantic type term.\n          example: PubMed Identifier\n          nullable: true\n        value:\n          example: 32529952\n          description: \u003e-\n            Value of the attribute. May be any data type, including a list.\n        type:\n          $ref: '#/components/schemas/CURIE'\n          description: \u003e-\n            CURIE of the semantic type of the attribute. For properties\n            defined by the Biolink model this should be a biolink CURIE,\n            otherwise, if possible, from the EDAM ontology. If a suitable\n            identifier does not exist, enter a descriptive phrase here and\n            submit the new type for consideration by the appropriate\n            authority.\n          example: EDAM:data_1187\n        url:\n          type: string\n          description: \u003e-\n            Human-consumable URL to link out and provide additional information\n            about the attribute (not the node or the edge).\n          example: https://pubmed.ncbi.nlm.nih.gov/32529952\n          nullable: true\n        source:\n          type: string\n          description: Source of the attribute, preferably as a CURIE prefix.\n          example: UniProtKB\n          nullable: true\n      required:\n        - type\n        - value\n      additionalProperties: false\n    Edge:\n      type: object\n      description: \u003e-\n        A specification of the semantic relationship linking two concepts\n        that are expressed as nodes in the knowledge \"thought\" graph\n        resulting from a query upon the underlying knowledge source.\n      properties:\n        predicate:\n          allOf:\n            - $ref: '#/components/schemas/BiolinkPredicate'\n          nullable: true\n        relation:\n          type: string\n          example: RO:0002447\n          description: \u003e-\n            The relationship type term of this edge, originally specified by,\n            or curated by inference from, the original source of knowledge.\n            This should generally be specified as predicate ontology CURIE.\n          nullable: true\n        subject:\n          $ref: '#/components/schemas/CURIE'\n          example: OMIM:603903\n          description: \u003e-\n            Corresponds to the map key CURIE of the\n            subject concept node of this relationship edge.\n        object:\n          $ref: '#/components/schemas/CURIE'\n          example: UniProtKB:P00738\n          description: \u003e-\n            Corresponds to the map key CURIE of the\n            object concept node of this relationship edge.\n        attributes:\n          type: array\n          description: A list of additional attributes for this edge\n          items:\n            $ref: '#/components/schemas/Attribute'\n          nullable: true\n      additionalProperties: false\n      required:\n        - subject\n        - object\n    BiolinkEntity:\n      description: \u003e-\n        Compact URI (CURIE) for a Biolink class, biolink:NamedThing\n        or a child thereof. The CURIE must use the prefix 'biolink:'\n        followed by the PascalCase class name.\n      type: string\n      pattern: ^biolink:[A-Z][a-zA-Z]*$\n      externalDocs:\n        description: Biolink model entities\n        url: https://biolink.github.io/biolink-model/docs/NamedThing.html\n      example: biolink:PhenotypicFeature\n    BiolinkPredicate:\n      description: \u003e-\n        CURIE for a Biolink 'predicate' slot, taken from the Biolink slot\n        ('is_a') hierarchy rooted in biolink:related_to (snake_case). This\n        predicate defines the Biolink relationship between the subject and\n        object nodes of a biolink:Association defining a knowledge graph edge.\n      type: string\n      pattern: ^biolink:[a-z][a-z_]*$\n      externalDocs:\n        description: Biolink model predicates\n        url: https://biolink.github.io/biolink-model/docs/related_to.html\n      example: biolink:interacts_with\n    CURIE:\n      type: string\n      description: \u003e-\n        A Compact URI, consisting of a prefix and a reference separated\n        by a colon, such as UniProtKB:P00738. Via an external context\n        definition, the CURIE prefix and colon may be replaced by a URI\n        prefix, such as http://identifiers.org/uniprot/, to form a full\n        URI.\n      externalDocs:\n        url: https://www.w3.org/TR/2010/NOTE-curie-20101216/\n",
			"canonicalURL": "/github.com/RTXteam/RTX@9cf40f7aeab1b4674556d18c29fa3003926a87d1/-/blob/code/UI/OpenAPI/python-flask-server/TranslatorReasonerAPI_1.0.0_extended.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/RTXteam/RTX/blob/9cf40f7aeab1b4674556d18c29fa3003926a87d1/code/UI/OpenAPI/python-flask-server/TranslatorReasonerAPI_1.0.0_extended.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}